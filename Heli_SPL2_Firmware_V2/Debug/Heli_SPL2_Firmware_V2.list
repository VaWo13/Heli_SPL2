
Heli_SPL2_Firmware_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012748  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012f4  080128d0  080128d0  000228d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013bc4  08013bc4  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  08013bc4  08013bc4  00023bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013bcc  08013bcc  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013bcc  08013bcc  00023bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013bd4  08013bd4  00023bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  08013bd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d3c  20000378  08013f50  00030378  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020b4  08013f50  000320b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 12 .debug_info   00041c80  00000000  00000000  000303a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000583d  00000000  00000000  00072021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f58  00000000  00000000  00077860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d88  00000000  00000000  000797b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fe0  00000000  00000000  0007b540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000239a9  00000000  00000000  000a4520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd6e2  00000000  00000000  000c7ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001955ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009eb0  00000000  00000000  00195600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000378 	.word	0x20000378
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080128b8 	.word	0x080128b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000037c 	.word	0x2000037c
 80001c4:	080128b8 	.word	0x080128b8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_frsub>:
 8000be0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	e002      	b.n	8000bec <__addsf3>
 8000be6:	bf00      	nop

08000be8 <__aeabi_fsub>:
 8000be8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bec <__addsf3>:
 8000bec:	0042      	lsls	r2, r0, #1
 8000bee:	bf1f      	itttt	ne
 8000bf0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bf4:	ea92 0f03 	teqne	r2, r3
 8000bf8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c00:	d06a      	beq.n	8000cd8 <__addsf3+0xec>
 8000c02:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c0a:	bfc1      	itttt	gt
 8000c0c:	18d2      	addgt	r2, r2, r3
 8000c0e:	4041      	eorgt	r1, r0
 8000c10:	4048      	eorgt	r0, r1
 8000c12:	4041      	eorgt	r1, r0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	2b19      	cmp	r3, #25
 8000c1a:	bf88      	it	hi
 8000c1c:	4770      	bxhi	lr
 8000c1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4240      	negne	r0, r0
 8000c2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4249      	negne	r1, r1
 8000c3e:	ea92 0f03 	teq	r2, r3
 8000c42:	d03f      	beq.n	8000cc4 <__addsf3+0xd8>
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	fa41 fc03 	asr.w	ip, r1, r3
 8000c4c:	eb10 000c 	adds.w	r0, r0, ip
 8000c50:	f1c3 0320 	rsb	r3, r3, #32
 8000c54:	fa01 f103 	lsl.w	r1, r1, r3
 8000c58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5c:	d502      	bpl.n	8000c64 <__addsf3+0x78>
 8000c5e:	4249      	negs	r1, r1
 8000c60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c68:	d313      	bcc.n	8000c92 <__addsf3+0xa6>
 8000c6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c6e:	d306      	bcc.n	8000c7e <__addsf3+0x92>
 8000c70:	0840      	lsrs	r0, r0, #1
 8000c72:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c76:	f102 0201 	add.w	r2, r2, #1
 8000c7a:	2afe      	cmp	r2, #254	; 0xfe
 8000c7c:	d251      	bcs.n	8000d22 <__addsf3+0x136>
 8000c7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c86:	bf08      	it	eq
 8000c88:	f020 0001 	biceq.w	r0, r0, #1
 8000c8c:	ea40 0003 	orr.w	r0, r0, r3
 8000c90:	4770      	bx	lr
 8000c92:	0049      	lsls	r1, r1, #1
 8000c94:	eb40 0000 	adc.w	r0, r0, r0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	bf28      	it	cs
 8000c9c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ca0:	d2ed      	bcs.n	8000c7e <__addsf3+0x92>
 8000ca2:	fab0 fc80 	clz	ip, r0
 8000ca6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000caa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cae:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cb2:	bfaa      	itet	ge
 8000cb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb8:	4252      	neglt	r2, r2
 8000cba:	4318      	orrge	r0, r3
 8000cbc:	bfbc      	itt	lt
 8000cbe:	40d0      	lsrlt	r0, r2
 8000cc0:	4318      	orrlt	r0, r3
 8000cc2:	4770      	bx	lr
 8000cc4:	f092 0f00 	teq	r2, #0
 8000cc8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ccc:	bf06      	itte	eq
 8000cce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cd2:	3201      	addeq	r2, #1
 8000cd4:	3b01      	subne	r3, #1
 8000cd6:	e7b5      	b.n	8000c44 <__addsf3+0x58>
 8000cd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce0:	bf18      	it	ne
 8000ce2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce6:	d021      	beq.n	8000d2c <__addsf3+0x140>
 8000ce8:	ea92 0f03 	teq	r2, r3
 8000cec:	d004      	beq.n	8000cf8 <__addsf3+0x10c>
 8000cee:	f092 0f00 	teq	r2, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	4608      	moveq	r0, r1
 8000cf6:	4770      	bx	lr
 8000cf8:	ea90 0f01 	teq	r0, r1
 8000cfc:	bf1c      	itt	ne
 8000cfe:	2000      	movne	r0, #0
 8000d00:	4770      	bxne	lr
 8000d02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d06:	d104      	bne.n	8000d12 <__addsf3+0x126>
 8000d08:	0040      	lsls	r0, r0, #1
 8000d0a:	bf28      	it	cs
 8000d0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d16:	bf3c      	itt	cc
 8000d18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d1c:	4770      	bxcc	lr
 8000d1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2a:	4770      	bx	lr
 8000d2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d30:	bf16      	itet	ne
 8000d32:	4608      	movne	r0, r1
 8000d34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d38:	4601      	movne	r1, r0
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	bf06      	itte	eq
 8000d3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d42:	ea90 0f01 	teqeq	r0, r1
 8000d46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_ui2f>:
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e004      	b.n	8000d5c <__aeabi_i2f+0x8>
 8000d52:	bf00      	nop

08000d54 <__aeabi_i2f>:
 8000d54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d58:	bf48      	it	mi
 8000d5a:	4240      	negmi	r0, r0
 8000d5c:	ea5f 0c00 	movs.w	ip, r0
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d68:	4601      	mov	r1, r0
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	e01c      	b.n	8000daa <__aeabi_l2f+0x2a>

08000d70 <__aeabi_ul2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e00a      	b.n	8000d94 <__aeabi_l2f+0x14>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_l2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d8c:	d502      	bpl.n	8000d94 <__aeabi_l2f+0x14>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	ea5f 0c01 	movs.w	ip, r1
 8000d98:	bf02      	ittt	eq
 8000d9a:	4684      	moveq	ip, r0
 8000d9c:	4601      	moveq	r1, r0
 8000d9e:	2000      	moveq	r0, #0
 8000da0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000da4:	bf08      	it	eq
 8000da6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000daa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dae:	fabc f28c 	clz	r2, ip
 8000db2:	3a08      	subs	r2, #8
 8000db4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db8:	db10      	blt.n	8000ddc <__aeabi_l2f+0x5c>
 8000dba:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dc4:	f1c2 0220 	rsb	r2, r2, #32
 8000dc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dcc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd0:	eb43 0002 	adc.w	r0, r3, r2
 8000dd4:	bf08      	it	eq
 8000dd6:	f020 0001 	biceq.w	r0, r0, #1
 8000dda:	4770      	bx	lr
 8000ddc:	f102 0220 	add.w	r2, r2, #32
 8000de0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dec:	fa21 f202 	lsr.w	r2, r1, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fmul>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d06f      	beq.n	8000ef4 <__aeabi_fmul+0xf8>
 8000e14:	441a      	add	r2, r3
 8000e16:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1a:	0240      	lsls	r0, r0, #9
 8000e1c:	bf18      	it	ne
 8000e1e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e22:	d01e      	beq.n	8000e62 <__aeabi_fmul+0x66>
 8000e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e28:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e2c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e30:	fba0 3101 	umull	r3, r1, r0, r1
 8000e34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e3c:	bf3e      	ittt	cc
 8000e3e:	0049      	lslcc	r1, r1, #1
 8000e40:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e44:	005b      	lslcc	r3, r3, #1
 8000e46:	ea40 0001 	orr.w	r0, r0, r1
 8000e4a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e4e:	2afd      	cmp	r2, #253	; 0xfd
 8000e50:	d81d      	bhi.n	8000e8e <__aeabi_fmul+0x92>
 8000e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e5a:	bf08      	it	eq
 8000e5c:	f020 0001 	biceq.w	r0, r0, #1
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e6a:	bf08      	it	eq
 8000e6c:	0249      	lsleq	r1, r1, #9
 8000e6e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e72:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e76:	3a7f      	subs	r2, #127	; 0x7f
 8000e78:	bfc2      	ittt	gt
 8000e7a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e7e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e82:	4770      	bxgt	lr
 8000e84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	3a01      	subs	r2, #1
 8000e8e:	dc5d      	bgt.n	8000f4c <__aeabi_fmul+0x150>
 8000e90:	f112 0f19 	cmn.w	r2, #25
 8000e94:	bfdc      	itt	le
 8000e96:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e9a:	4770      	bxle	lr
 8000e9c:	f1c2 0200 	rsb	r2, r2, #0
 8000ea0:	0041      	lsls	r1, r0, #1
 8000ea2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ea6:	f1c2 0220 	rsb	r2, r2, #32
 8000eaa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eae:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eb2:	f140 0000 	adc.w	r0, r0, #0
 8000eb6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eba:	bf08      	it	eq
 8000ebc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec0:	4770      	bx	lr
 8000ec2:	f092 0f00 	teq	r2, #0
 8000ec6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0040      	lsleq	r0, r0, #1
 8000ece:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed2:	3a01      	subeq	r2, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fmul+0xce>
 8000ed6:	ea40 000c 	orr.w	r0, r0, ip
 8000eda:	f093 0f00 	teq	r3, #0
 8000ede:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0049      	lsleq	r1, r1, #1
 8000ee6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eea:	3b01      	subeq	r3, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xe6>
 8000eee:	ea41 010c 	orr.w	r1, r1, ip
 8000ef2:	e78f      	b.n	8000e14 <__aeabi_fmul+0x18>
 8000ef4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	bf18      	it	ne
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d00a      	beq.n	8000f1a <__aeabi_fmul+0x11e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	d1d8      	bne.n	8000ec2 <__aeabi_fmul+0xc6>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f18:	4770      	bx	lr
 8000f1a:	f090 0f00 	teq	r0, #0
 8000f1e:	bf17      	itett	ne
 8000f20:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f24:	4608      	moveq	r0, r1
 8000f26:	f091 0f00 	teqne	r1, #0
 8000f2a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f2e:	d014      	beq.n	8000f5a <__aeabi_fmul+0x15e>
 8000f30:	ea92 0f0c 	teq	r2, ip
 8000f34:	d101      	bne.n	8000f3a <__aeabi_fmul+0x13e>
 8000f36:	0242      	lsls	r2, r0, #9
 8000f38:	d10f      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f3a:	ea93 0f0c 	teq	r3, ip
 8000f3e:	d103      	bne.n	8000f48 <__aeabi_fmul+0x14c>
 8000f40:	024b      	lsls	r3, r1, #9
 8000f42:	bf18      	it	ne
 8000f44:	4608      	movne	r0, r1
 8000f46:	d108      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f48:	ea80 0001 	eor.w	r0, r0, r1
 8000f4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f58:	4770      	bx	lr
 8000f5a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f5e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f62:	4770      	bx	lr

08000f64 <__aeabi_fdiv>:
 8000f64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f6c:	bf1e      	ittt	ne
 8000f6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f72:	ea92 0f0c 	teqne	r2, ip
 8000f76:	ea93 0f0c 	teqne	r3, ip
 8000f7a:	d069      	beq.n	8001050 <__aeabi_fdiv+0xec>
 8000f7c:	eba2 0203 	sub.w	r2, r2, r3
 8000f80:	ea80 0c01 	eor.w	ip, r0, r1
 8000f84:	0249      	lsls	r1, r1, #9
 8000f86:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f8a:	d037      	beq.n	8000ffc <__aeabi_fdiv+0x98>
 8000f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f90:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f94:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	bf38      	it	cc
 8000fa0:	005b      	lslcc	r3, r3, #1
 8000fa2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fa6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000faa:	428b      	cmp	r3, r1
 8000fac:	bf24      	itt	cs
 8000fae:	1a5b      	subcs	r3, r3, r1
 8000fb0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fb4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fbe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fc2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fc6:	bf24      	itt	cs
 8000fc8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fcc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fd0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fd4:	bf24      	itt	cs
 8000fd6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fda:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	bf18      	it	ne
 8000fe2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fe6:	d1e0      	bne.n	8000faa <__aeabi_fdiv+0x46>
 8000fe8:	2afd      	cmp	r2, #253	; 0xfd
 8000fea:	f63f af50 	bhi.w	8000e8e <__aeabi_fmul+0x92>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ff4:	bf08      	it	eq
 8000ff6:	f020 0001 	biceq.w	r0, r0, #1
 8000ffa:	4770      	bx	lr
 8000ffc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001000:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001004:	327f      	adds	r2, #127	; 0x7f
 8001006:	bfc2      	ittt	gt
 8001008:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800100c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001010:	4770      	bxgt	lr
 8001012:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	3a01      	subs	r2, #1
 800101c:	e737      	b.n	8000e8e <__aeabi_fmul+0x92>
 800101e:	f092 0f00 	teq	r2, #0
 8001022:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001026:	bf02      	ittt	eq
 8001028:	0040      	lsleq	r0, r0, #1
 800102a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800102e:	3a01      	subeq	r2, #1
 8001030:	d0f9      	beq.n	8001026 <__aeabi_fdiv+0xc2>
 8001032:	ea40 000c 	orr.w	r0, r0, ip
 8001036:	f093 0f00 	teq	r3, #0
 800103a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0049      	lsleq	r1, r1, #1
 8001042:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001046:	3b01      	subeq	r3, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xda>
 800104a:	ea41 010c 	orr.w	r1, r1, ip
 800104e:	e795      	b.n	8000f7c <__aeabi_fdiv+0x18>
 8001050:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001054:	ea92 0f0c 	teq	r2, ip
 8001058:	d108      	bne.n	800106c <__aeabi_fdiv+0x108>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	f47f af7d 	bne.w	8000f5a <__aeabi_fmul+0x15e>
 8001060:	ea93 0f0c 	teq	r3, ip
 8001064:	f47f af70 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001068:	4608      	mov	r0, r1
 800106a:	e776      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800106c:	ea93 0f0c 	teq	r3, ip
 8001070:	d104      	bne.n	800107c <__aeabi_fdiv+0x118>
 8001072:	024b      	lsls	r3, r1, #9
 8001074:	f43f af4c 	beq.w	8000f10 <__aeabi_fmul+0x114>
 8001078:	4608      	mov	r0, r1
 800107a:	e76e      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800107c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001080:	bf18      	it	ne
 8001082:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001086:	d1ca      	bne.n	800101e <__aeabi_fdiv+0xba>
 8001088:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800108c:	f47f af5c 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001090:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001094:	f47f af3c 	bne.w	8000f10 <__aeabi_fmul+0x114>
 8001098:	e75f      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800109a:	bf00      	nop

0800109c <__gesf2>:
 800109c:	f04f 3cff 	mov.w	ip, #4294967295
 80010a0:	e006      	b.n	80010b0 <__cmpsf2+0x4>
 80010a2:	bf00      	nop

080010a4 <__lesf2>:
 80010a4:	f04f 0c01 	mov.w	ip, #1
 80010a8:	e002      	b.n	80010b0 <__cmpsf2+0x4>
 80010aa:	bf00      	nop

080010ac <__cmpsf2>:
 80010ac:	f04f 0c01 	mov.w	ip, #1
 80010b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c0:	bf18      	it	ne
 80010c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010c6:	d011      	beq.n	80010ec <__cmpsf2+0x40>
 80010c8:	b001      	add	sp, #4
 80010ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ce:	bf18      	it	ne
 80010d0:	ea90 0f01 	teqne	r0, r1
 80010d4:	bf58      	it	pl
 80010d6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010da:	bf88      	it	hi
 80010dc:	17c8      	asrhi	r0, r1, #31
 80010de:	bf38      	it	cc
 80010e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010e4:	bf18      	it	ne
 80010e6:	f040 0001 	orrne.w	r0, r0, #1
 80010ea:	4770      	bx	lr
 80010ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f0:	d102      	bne.n	80010f8 <__cmpsf2+0x4c>
 80010f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010f6:	d105      	bne.n	8001104 <__cmpsf2+0x58>
 80010f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010fc:	d1e4      	bne.n	80010c8 <__cmpsf2+0x1c>
 80010fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001102:	d0e1      	beq.n	80010c8 <__cmpsf2+0x1c>
 8001104:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <__aeabi_cfrcmple>:
 800110c:	4684      	mov	ip, r0
 800110e:	4608      	mov	r0, r1
 8001110:	4661      	mov	r1, ip
 8001112:	e7ff      	b.n	8001114 <__aeabi_cfcmpeq>

08001114 <__aeabi_cfcmpeq>:
 8001114:	b50f      	push	{r0, r1, r2, r3, lr}
 8001116:	f7ff ffc9 	bl	80010ac <__cmpsf2>
 800111a:	2800      	cmp	r0, #0
 800111c:	bf48      	it	mi
 800111e:	f110 0f00 	cmnmi.w	r0, #0
 8001122:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001124 <__aeabi_fcmpeq>:
 8001124:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001128:	f7ff fff4 	bl	8001114 <__aeabi_cfcmpeq>
 800112c:	bf0c      	ite	eq
 800112e:	2001      	moveq	r0, #1
 8001130:	2000      	movne	r0, #0
 8001132:	f85d fb08 	ldr.w	pc, [sp], #8
 8001136:	bf00      	nop

08001138 <__aeabi_fcmplt>:
 8001138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800113c:	f7ff ffea 	bl	8001114 <__aeabi_cfcmpeq>
 8001140:	bf34      	ite	cc
 8001142:	2001      	movcc	r0, #1
 8001144:	2000      	movcs	r0, #0
 8001146:	f85d fb08 	ldr.w	pc, [sp], #8
 800114a:	bf00      	nop

0800114c <__aeabi_fcmple>:
 800114c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001150:	f7ff ffe0 	bl	8001114 <__aeabi_cfcmpeq>
 8001154:	bf94      	ite	ls
 8001156:	2001      	movls	r0, #1
 8001158:	2000      	movhi	r0, #0
 800115a:	f85d fb08 	ldr.w	pc, [sp], #8
 800115e:	bf00      	nop

08001160 <__aeabi_fcmpge>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff ffd2 	bl	800110c <__aeabi_cfrcmple>
 8001168:	bf94      	ite	ls
 800116a:	2001      	movls	r0, #1
 800116c:	2000      	movhi	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmpgt>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffc8 	bl	800110c <__aeabi_cfrcmple>
 800117c:	bf34      	ite	cc
 800117e:	2001      	movcc	r0, #1
 8001180:	2000      	movcs	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmpun>:
 8001188:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800118c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001190:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001194:	d102      	bne.n	800119c <__aeabi_fcmpun+0x14>
 8001196:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800119a:	d108      	bne.n	80011ae <__aeabi_fcmpun+0x26>
 800119c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011a0:	d102      	bne.n	80011a8 <__aeabi_fcmpun+0x20>
 80011a2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011a6:	d102      	bne.n	80011ae <__aeabi_fcmpun+0x26>
 80011a8:	f04f 0000 	mov.w	r0, #0
 80011ac:	4770      	bx	lr
 80011ae:	f04f 0001 	mov.w	r0, #1
 80011b2:	4770      	bx	lr

080011b4 <__aeabi_f2iz>:
 80011b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011bc:	d30f      	bcc.n	80011de <__aeabi_f2iz+0x2a>
 80011be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011c6:	d90d      	bls.n	80011e4 <__aeabi_f2iz+0x30>
 80011c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	bf18      	it	ne
 80011da:	4240      	negne	r0, r0
 80011dc:	4770      	bx	lr
 80011de:	f04f 0000 	mov.w	r0, #0
 80011e2:	4770      	bx	lr
 80011e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e8:	d101      	bne.n	80011ee <__aeabi_f2iz+0x3a>
 80011ea:	0242      	lsls	r2, r0, #9
 80011ec:	d105      	bne.n	80011fa <__aeabi_f2iz+0x46>
 80011ee:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011f2:	bf08      	it	eq
 80011f4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011f8:	4770      	bx	lr
 80011fa:	f04f 0000 	mov.w	r0, #0
 80011fe:	4770      	bx	lr

08001200 <__aeabi_f2uiz>:
 8001200:	0042      	lsls	r2, r0, #1
 8001202:	d20e      	bcs.n	8001222 <__aeabi_f2uiz+0x22>
 8001204:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001208:	d30b      	bcc.n	8001222 <__aeabi_f2uiz+0x22>
 800120a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800120e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001212:	d409      	bmi.n	8001228 <__aeabi_f2uiz+0x28>
 8001214:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800121c:	fa23 f002 	lsr.w	r0, r3, r2
 8001220:	4770      	bx	lr
 8001222:	f04f 0000 	mov.w	r0, #0
 8001226:	4770      	bx	lr
 8001228:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800122c:	d101      	bne.n	8001232 <__aeabi_f2uiz+0x32>
 800122e:	0242      	lsls	r2, r0, #9
 8001230:	d102      	bne.n	8001238 <__aeabi_f2uiz+0x38>
 8001232:	f04f 30ff 	mov.w	r0, #4294967295
 8001236:	4770      	bx	lr
 8001238:	f04f 0000 	mov.w	r0, #0
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <__aeabi_uldivmod>:
 8001240:	b953      	cbnz	r3, 8001258 <__aeabi_uldivmod+0x18>
 8001242:	b94a      	cbnz	r2, 8001258 <__aeabi_uldivmod+0x18>
 8001244:	2900      	cmp	r1, #0
 8001246:	bf08      	it	eq
 8001248:	2800      	cmpeq	r0, #0
 800124a:	bf1c      	itt	ne
 800124c:	f04f 31ff 	movne.w	r1, #4294967295
 8001250:	f04f 30ff 	movne.w	r0, #4294967295
 8001254:	f000 b96e 	b.w	8001534 <__aeabi_idiv0>
 8001258:	f1ad 0c08 	sub.w	ip, sp, #8
 800125c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001260:	f000 f806 	bl	8001270 <__udivmoddi4>
 8001264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800126c:	b004      	add	sp, #16
 800126e:	4770      	bx	lr

08001270 <__udivmoddi4>:
 8001270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001274:	9e08      	ldr	r6, [sp, #32]
 8001276:	460d      	mov	r5, r1
 8001278:	4604      	mov	r4, r0
 800127a:	468e      	mov	lr, r1
 800127c:	2b00      	cmp	r3, #0
 800127e:	f040 8083 	bne.w	8001388 <__udivmoddi4+0x118>
 8001282:	428a      	cmp	r2, r1
 8001284:	4617      	mov	r7, r2
 8001286:	d947      	bls.n	8001318 <__udivmoddi4+0xa8>
 8001288:	fab2 f382 	clz	r3, r2
 800128c:	b14b      	cbz	r3, 80012a2 <__udivmoddi4+0x32>
 800128e:	f1c3 0120 	rsb	r1, r3, #32
 8001292:	fa05 fe03 	lsl.w	lr, r5, r3
 8001296:	fa20 f101 	lsr.w	r1, r0, r1
 800129a:	409f      	lsls	r7, r3
 800129c:	ea41 0e0e 	orr.w	lr, r1, lr
 80012a0:	409c      	lsls	r4, r3
 80012a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80012a6:	fbbe fcf8 	udiv	ip, lr, r8
 80012aa:	fa1f f987 	uxth.w	r9, r7
 80012ae:	fb08 e21c 	mls	r2, r8, ip, lr
 80012b2:	fb0c f009 	mul.w	r0, ip, r9
 80012b6:	0c21      	lsrs	r1, r4, #16
 80012b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80012bc:	4290      	cmp	r0, r2
 80012be:	d90a      	bls.n	80012d6 <__udivmoddi4+0x66>
 80012c0:	18ba      	adds	r2, r7, r2
 80012c2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80012c6:	f080 8118 	bcs.w	80014fa <__udivmoddi4+0x28a>
 80012ca:	4290      	cmp	r0, r2
 80012cc:	f240 8115 	bls.w	80014fa <__udivmoddi4+0x28a>
 80012d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80012d4:	443a      	add	r2, r7
 80012d6:	1a12      	subs	r2, r2, r0
 80012d8:	fbb2 f0f8 	udiv	r0, r2, r8
 80012dc:	fb08 2210 	mls	r2, r8, r0, r2
 80012e0:	fb00 f109 	mul.w	r1, r0, r9
 80012e4:	b2a4      	uxth	r4, r4
 80012e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012ea:	42a1      	cmp	r1, r4
 80012ec:	d909      	bls.n	8001302 <__udivmoddi4+0x92>
 80012ee:	193c      	adds	r4, r7, r4
 80012f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80012f4:	f080 8103 	bcs.w	80014fe <__udivmoddi4+0x28e>
 80012f8:	42a1      	cmp	r1, r4
 80012fa:	f240 8100 	bls.w	80014fe <__udivmoddi4+0x28e>
 80012fe:	3802      	subs	r0, #2
 8001300:	443c      	add	r4, r7
 8001302:	1a64      	subs	r4, r4, r1
 8001304:	2100      	movs	r1, #0
 8001306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800130a:	b11e      	cbz	r6, 8001314 <__udivmoddi4+0xa4>
 800130c:	2200      	movs	r2, #0
 800130e:	40dc      	lsrs	r4, r3
 8001310:	e9c6 4200 	strd	r4, r2, [r6]
 8001314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001318:	b902      	cbnz	r2, 800131c <__udivmoddi4+0xac>
 800131a:	deff      	udf	#255	; 0xff
 800131c:	fab2 f382 	clz	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d14f      	bne.n	80013c4 <__udivmoddi4+0x154>
 8001324:	1a8d      	subs	r5, r1, r2
 8001326:	2101      	movs	r1, #1
 8001328:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800132c:	fa1f f882 	uxth.w	r8, r2
 8001330:	fbb5 fcfe 	udiv	ip, r5, lr
 8001334:	fb0e 551c 	mls	r5, lr, ip, r5
 8001338:	fb08 f00c 	mul.w	r0, r8, ip
 800133c:	0c22      	lsrs	r2, r4, #16
 800133e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001342:	42a8      	cmp	r0, r5
 8001344:	d907      	bls.n	8001356 <__udivmoddi4+0xe6>
 8001346:	197d      	adds	r5, r7, r5
 8001348:	f10c 32ff 	add.w	r2, ip, #4294967295
 800134c:	d202      	bcs.n	8001354 <__udivmoddi4+0xe4>
 800134e:	42a8      	cmp	r0, r5
 8001350:	f200 80e9 	bhi.w	8001526 <__udivmoddi4+0x2b6>
 8001354:	4694      	mov	ip, r2
 8001356:	1a2d      	subs	r5, r5, r0
 8001358:	fbb5 f0fe 	udiv	r0, r5, lr
 800135c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001360:	fb08 f800 	mul.w	r8, r8, r0
 8001364:	b2a4      	uxth	r4, r4
 8001366:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800136a:	45a0      	cmp	r8, r4
 800136c:	d907      	bls.n	800137e <__udivmoddi4+0x10e>
 800136e:	193c      	adds	r4, r7, r4
 8001370:	f100 32ff 	add.w	r2, r0, #4294967295
 8001374:	d202      	bcs.n	800137c <__udivmoddi4+0x10c>
 8001376:	45a0      	cmp	r8, r4
 8001378:	f200 80d9 	bhi.w	800152e <__udivmoddi4+0x2be>
 800137c:	4610      	mov	r0, r2
 800137e:	eba4 0408 	sub.w	r4, r4, r8
 8001382:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001386:	e7c0      	b.n	800130a <__udivmoddi4+0x9a>
 8001388:	428b      	cmp	r3, r1
 800138a:	d908      	bls.n	800139e <__udivmoddi4+0x12e>
 800138c:	2e00      	cmp	r6, #0
 800138e:	f000 80b1 	beq.w	80014f4 <__udivmoddi4+0x284>
 8001392:	2100      	movs	r1, #0
 8001394:	e9c6 0500 	strd	r0, r5, [r6]
 8001398:	4608      	mov	r0, r1
 800139a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800139e:	fab3 f183 	clz	r1, r3
 80013a2:	2900      	cmp	r1, #0
 80013a4:	d14b      	bne.n	800143e <__udivmoddi4+0x1ce>
 80013a6:	42ab      	cmp	r3, r5
 80013a8:	d302      	bcc.n	80013b0 <__udivmoddi4+0x140>
 80013aa:	4282      	cmp	r2, r0
 80013ac:	f200 80b9 	bhi.w	8001522 <__udivmoddi4+0x2b2>
 80013b0:	1a84      	subs	r4, r0, r2
 80013b2:	eb65 0303 	sbc.w	r3, r5, r3
 80013b6:	2001      	movs	r0, #1
 80013b8:	469e      	mov	lr, r3
 80013ba:	2e00      	cmp	r6, #0
 80013bc:	d0aa      	beq.n	8001314 <__udivmoddi4+0xa4>
 80013be:	e9c6 4e00 	strd	r4, lr, [r6]
 80013c2:	e7a7      	b.n	8001314 <__udivmoddi4+0xa4>
 80013c4:	409f      	lsls	r7, r3
 80013c6:	f1c3 0220 	rsb	r2, r3, #32
 80013ca:	40d1      	lsrs	r1, r2
 80013cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80013d4:	fa1f f887 	uxth.w	r8, r7
 80013d8:	fb0e 1110 	mls	r1, lr, r0, r1
 80013dc:	fa24 f202 	lsr.w	r2, r4, r2
 80013e0:	409d      	lsls	r5, r3
 80013e2:	fb00 fc08 	mul.w	ip, r0, r8
 80013e6:	432a      	orrs	r2, r5
 80013e8:	0c15      	lsrs	r5, r2, #16
 80013ea:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013ee:	45ac      	cmp	ip, r5
 80013f0:	fa04 f403 	lsl.w	r4, r4, r3
 80013f4:	d909      	bls.n	800140a <__udivmoddi4+0x19a>
 80013f6:	197d      	adds	r5, r7, r5
 80013f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80013fc:	f080 808f 	bcs.w	800151e <__udivmoddi4+0x2ae>
 8001400:	45ac      	cmp	ip, r5
 8001402:	f240 808c 	bls.w	800151e <__udivmoddi4+0x2ae>
 8001406:	3802      	subs	r0, #2
 8001408:	443d      	add	r5, r7
 800140a:	eba5 050c 	sub.w	r5, r5, ip
 800140e:	fbb5 f1fe 	udiv	r1, r5, lr
 8001412:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001416:	fb01 f908 	mul.w	r9, r1, r8
 800141a:	b295      	uxth	r5, r2
 800141c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001420:	45a9      	cmp	r9, r5
 8001422:	d907      	bls.n	8001434 <__udivmoddi4+0x1c4>
 8001424:	197d      	adds	r5, r7, r5
 8001426:	f101 32ff 	add.w	r2, r1, #4294967295
 800142a:	d274      	bcs.n	8001516 <__udivmoddi4+0x2a6>
 800142c:	45a9      	cmp	r9, r5
 800142e:	d972      	bls.n	8001516 <__udivmoddi4+0x2a6>
 8001430:	3902      	subs	r1, #2
 8001432:	443d      	add	r5, r7
 8001434:	eba5 0509 	sub.w	r5, r5, r9
 8001438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800143c:	e778      	b.n	8001330 <__udivmoddi4+0xc0>
 800143e:	f1c1 0720 	rsb	r7, r1, #32
 8001442:	408b      	lsls	r3, r1
 8001444:	fa22 fc07 	lsr.w	ip, r2, r7
 8001448:	ea4c 0c03 	orr.w	ip, ip, r3
 800144c:	fa25 f407 	lsr.w	r4, r5, r7
 8001450:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001454:	fbb4 f9fe 	udiv	r9, r4, lr
 8001458:	fa1f f88c 	uxth.w	r8, ip
 800145c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001460:	fa20 f307 	lsr.w	r3, r0, r7
 8001464:	fb09 fa08 	mul.w	sl, r9, r8
 8001468:	408d      	lsls	r5, r1
 800146a:	431d      	orrs	r5, r3
 800146c:	0c2b      	lsrs	r3, r5, #16
 800146e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001472:	45a2      	cmp	sl, r4
 8001474:	fa02 f201 	lsl.w	r2, r2, r1
 8001478:	fa00 f301 	lsl.w	r3, r0, r1
 800147c:	d909      	bls.n	8001492 <__udivmoddi4+0x222>
 800147e:	eb1c 0404 	adds.w	r4, ip, r4
 8001482:	f109 30ff 	add.w	r0, r9, #4294967295
 8001486:	d248      	bcs.n	800151a <__udivmoddi4+0x2aa>
 8001488:	45a2      	cmp	sl, r4
 800148a:	d946      	bls.n	800151a <__udivmoddi4+0x2aa>
 800148c:	f1a9 0902 	sub.w	r9, r9, #2
 8001490:	4464      	add	r4, ip
 8001492:	eba4 040a 	sub.w	r4, r4, sl
 8001496:	fbb4 f0fe 	udiv	r0, r4, lr
 800149a:	fb0e 4410 	mls	r4, lr, r0, r4
 800149e:	fb00 fa08 	mul.w	sl, r0, r8
 80014a2:	b2ad      	uxth	r5, r5
 80014a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80014a8:	45a2      	cmp	sl, r4
 80014aa:	d908      	bls.n	80014be <__udivmoddi4+0x24e>
 80014ac:	eb1c 0404 	adds.w	r4, ip, r4
 80014b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80014b4:	d22d      	bcs.n	8001512 <__udivmoddi4+0x2a2>
 80014b6:	45a2      	cmp	sl, r4
 80014b8:	d92b      	bls.n	8001512 <__udivmoddi4+0x2a2>
 80014ba:	3802      	subs	r0, #2
 80014bc:	4464      	add	r4, ip
 80014be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80014c2:	fba0 8902 	umull	r8, r9, r0, r2
 80014c6:	eba4 040a 	sub.w	r4, r4, sl
 80014ca:	454c      	cmp	r4, r9
 80014cc:	46c6      	mov	lr, r8
 80014ce:	464d      	mov	r5, r9
 80014d0:	d319      	bcc.n	8001506 <__udivmoddi4+0x296>
 80014d2:	d016      	beq.n	8001502 <__udivmoddi4+0x292>
 80014d4:	b15e      	cbz	r6, 80014ee <__udivmoddi4+0x27e>
 80014d6:	ebb3 020e 	subs.w	r2, r3, lr
 80014da:	eb64 0405 	sbc.w	r4, r4, r5
 80014de:	fa04 f707 	lsl.w	r7, r4, r7
 80014e2:	fa22 f301 	lsr.w	r3, r2, r1
 80014e6:	431f      	orrs	r7, r3
 80014e8:	40cc      	lsrs	r4, r1
 80014ea:	e9c6 7400 	strd	r7, r4, [r6]
 80014ee:	2100      	movs	r1, #0
 80014f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014f4:	4631      	mov	r1, r6
 80014f6:	4630      	mov	r0, r6
 80014f8:	e70c      	b.n	8001314 <__udivmoddi4+0xa4>
 80014fa:	468c      	mov	ip, r1
 80014fc:	e6eb      	b.n	80012d6 <__udivmoddi4+0x66>
 80014fe:	4610      	mov	r0, r2
 8001500:	e6ff      	b.n	8001302 <__udivmoddi4+0x92>
 8001502:	4543      	cmp	r3, r8
 8001504:	d2e6      	bcs.n	80014d4 <__udivmoddi4+0x264>
 8001506:	ebb8 0e02 	subs.w	lr, r8, r2
 800150a:	eb69 050c 	sbc.w	r5, r9, ip
 800150e:	3801      	subs	r0, #1
 8001510:	e7e0      	b.n	80014d4 <__udivmoddi4+0x264>
 8001512:	4628      	mov	r0, r5
 8001514:	e7d3      	b.n	80014be <__udivmoddi4+0x24e>
 8001516:	4611      	mov	r1, r2
 8001518:	e78c      	b.n	8001434 <__udivmoddi4+0x1c4>
 800151a:	4681      	mov	r9, r0
 800151c:	e7b9      	b.n	8001492 <__udivmoddi4+0x222>
 800151e:	4608      	mov	r0, r1
 8001520:	e773      	b.n	800140a <__udivmoddi4+0x19a>
 8001522:	4608      	mov	r0, r1
 8001524:	e749      	b.n	80013ba <__udivmoddi4+0x14a>
 8001526:	f1ac 0c02 	sub.w	ip, ip, #2
 800152a:	443d      	add	r5, r7
 800152c:	e713      	b.n	8001356 <__udivmoddi4+0xe6>
 800152e:	3802      	subs	r0, #2
 8001530:	443c      	add	r4, r7
 8001532:	e724      	b.n	800137e <__udivmoddi4+0x10e>

08001534 <__aeabi_idiv0>:
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop

08001538 <_Z7readBithhhPh>:
 * @param regAddr Register regAddr to read from
 * @param bitNum Bit position to read (0-7)
 * @param data Container for single bit value
 * @return Status of read operation (true = success)
 */
int8_t readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af04      	add	r7, sp, #16
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	460b      	mov	r3, r1
 8001546:	71bb      	strb	r3, [r7, #6]
 8001548:	4613      	mov	r3, r2
 800154a:	717b      	strb	r3, [r7, #5]
  uint8_t buffer;
  sendBuf[0] = regAddr;
 800154c:	4a1a      	ldr	r2, [pc, #104]	; (80015b8 <_Z7readBithhhPh+0x80>)
 800154e:	79bb      	ldrb	r3, [r7, #6]
 8001550:	7013      	strb	r3, [r2, #0]
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	b299      	uxth	r1, r3
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	b29a      	uxth	r2, r3
 800155a:	2301      	movs	r3, #1
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	2301      	movs	r3, #1
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	f107 030e 	add.w	r3, r7, #14
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	4814      	ldr	r0, [pc, #80]	; (80015bc <_Z7readBithhhPh+0x84>)
 800156c:	f005 fa4a 	bl	8006a04 <HAL_I2C_Mem_Read>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf14      	ite	ne
 8001576:	2301      	movne	r3, #1
 8001578:	2300      	moveq	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <_Z7readBithhhPh+0x4e>
	  MX_I2C1_Init();
 8001580:	f002 ffc6 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001584:	e7e5      	b.n	8001552 <_Z7readBithhhPh+0x1a>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001586:	2301      	movs	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
  *data = buffer & (1 << bitNum);
 800158a:	797b      	ldrb	r3, [r7, #5]
 800158c:	2201      	movs	r2, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	b25a      	sxtb	r2, r3
 8001594:	7bbb      	ldrb	r3, [r7, #14]
 8001596:	b25b      	sxtb	r3, r3
 8001598:	4013      	ands	r3, r2
 800159a:	b25b      	sxtb	r3, r3
 800159c:	b2da      	uxtb	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	701a      	strb	r2, [r3, #0]
  return response == BCM2835_I2C_REASON_OK ;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	b25b      	sxtb	r3, r3
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000394 	.word	0x20000394
 80015bc:	20000698 	.word	0x20000698

080015c0 <_Z8readBitshhhhPh>:
 * @param bitStart First bit position to read (0-7)
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @return Status of read operation (true = success)
 */
int8_t readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data) {
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af04      	add	r7, sp, #16
 80015c6:	4604      	mov	r4, r0
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4623      	mov	r3, r4
 80015d0:	71fb      	strb	r3, [r7, #7]
 80015d2:	4603      	mov	r3, r0
 80015d4:	71bb      	strb	r3, [r7, #6]
 80015d6:	460b      	mov	r3, r1
 80015d8:	717b      	strb	r3, [r7, #5]
 80015da:	4613      	mov	r3, r2
 80015dc:	713b      	strb	r3, [r7, #4]
  // 01101001 read byte
  // 76543210 bit numbers
  //    xxx   args: bitStart=4, length=3
  //    010   masked
  //   -> 010 shifted
  sendBuf[0] = regAddr;
 80015de:	4a25      	ldr	r2, [pc, #148]	; (8001674 <_Z8readBitshhhhPh+0xb4>)
 80015e0:	79bb      	ldrb	r3, [r7, #6]
 80015e2:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	b299      	uxth	r1, r3
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	2301      	movs	r3, #1
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	2301      	movs	r3, #1
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2301      	movs	r3, #1
 80015fc:	481e      	ldr	r0, [pc, #120]	; (8001678 <_Z8readBitshhhhPh+0xb8>)
 80015fe:	f005 fa01 	bl	8006a04 <HAL_I2C_Mem_Read>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf14      	ite	ne
 8001608:	2301      	movne	r3, #1
 800160a:	2300      	moveq	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <_Z8readBitshhhhPh+0x58>
  	  MX_I2C1_Init();
 8001612:	f002 ff7d 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001616:	e7e5      	b.n	80015e4 <_Z8readBitshhhhPh+0x24>
    }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
  uint8_t b = buffer;
 800161c:	7b3b      	ldrb	r3, [r7, #12]
 800161e:	73bb      	strb	r3, [r7, #14]
  if (response == BCM2835_I2C_REASON_OK) {
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d11a      	bne.n	800165c <_Z8readBitshhhhPh+0x9c>
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001626:	793b      	ldrb	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	1e5a      	subs	r2, r3, #1
 8001630:	7979      	ldrb	r1, [r7, #5]
 8001632:	793b      	ldrb	r3, [r7, #4]
 8001634:	1acb      	subs	r3, r1, r3
 8001636:	3301      	adds	r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	737b      	strb	r3, [r7, #13]
    b &= mask;
 800163e:	7bba      	ldrb	r2, [r7, #14]
 8001640:	7b7b      	ldrb	r3, [r7, #13]
 8001642:	4013      	ands	r3, r2
 8001644:	73bb      	strb	r3, [r7, #14]
    b >>= (bitStart - length + 1);
 8001646:	7bba      	ldrb	r2, [r7, #14]
 8001648:	7979      	ldrb	r1, [r7, #5]
 800164a:	793b      	ldrb	r3, [r7, #4]
 800164c:	1acb      	subs	r3, r1, r3
 800164e:	3301      	adds	r3, #1
 8001650:	fa42 f303 	asr.w	r3, r2, r3
 8001654:	73bb      	strb	r3, [r7, #14]
    *data = b;
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	7bba      	ldrb	r2, [r7, #14]
 800165a:	701a      	strb	r2, [r3, #0]
  }
  return response == BCM2835_I2C_REASON_OK;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	2b01      	cmp	r3, #1
 8001660:	bf0c      	ite	eq
 8001662:	2301      	moveq	r3, #1
 8001664:	2300      	movne	r3, #0
 8001666:	b2db      	uxtb	r3, r3
 8001668:	b25b      	sxtb	r3, r3
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}
 8001672:	bf00      	nop
 8001674:	20000394 	.word	0x20000394
 8001678:	20000698 	.word	0x20000698

0800167c <_Z8readBytehhPh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @return Status of read operation (true = success)
 */
int8_t readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af04      	add	r7, sp, #16
 8001682:	4603      	mov	r3, r0
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	460b      	mov	r3, r1
 800168a:	71bb      	strb	r3, [r7, #6]
  sendBuf[0] = regAddr;
 800168c:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <_Z8readBytehhPh+0x6c>)
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	b299      	uxth	r1, r3
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	b29a      	uxth	r2, r3
 800169a:	2301      	movs	r3, #1
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	2301      	movs	r3, #1
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	f107 030e 	add.w	r3, r7, #14
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	4810      	ldr	r0, [pc, #64]	; (80016ec <_Z8readBytehhPh+0x70>)
 80016ac:	f005 f9aa 	bl	8006a04 <HAL_I2C_Mem_Read>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <_Z8readBytehhPh+0x4a>
    MX_I2C1_Init();
 80016c0:	f002 ff26 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80016c4:	e7e5      	b.n	8001692 <_Z8readBytehhPh+0x16>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
  data[0] = buffer;
 80016ca:	7bba      	ldrb	r2, [r7, #14]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	701a      	strb	r2, [r3, #0]
  return response == BCM2835_I2C_REASON_OK;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	bf0c      	ite	eq
 80016d6:	2301      	moveq	r3, #1
 80016d8:	2300      	movne	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	b25b      	sxtb	r3, r3
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000394 	.word	0x20000394
 80016ec:	20000698 	.word	0x20000698

080016f0 <_Z9readByteshhhPh>:
 * @param regAddr First register regAddr to read from
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @return I2C_TransferReturn_TypeDef http://downloads.energymicro.com/documentation/doxygen/group__I2C.html
 */
int8_t readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data) {
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af04      	add	r7, sp, #16
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	460b      	mov	r3, r1
 80016fe:	71bb      	strb	r3, [r7, #6]
 8001700:	4613      	mov	r3, r2
 8001702:	717b      	strb	r3, [r7, #5]
  uint8_t response = BCM2835_I2C_REASON_OK;
  int i ;
  for (i = 0; i < length ; i++) {
    data[i] = (uint8_t) buffer[i];
  }
  return response == BCM2835_I2C_REASON_OK;
 8001704:	466b      	mov	r3, sp
 8001706:	461d      	mov	r5, r3
  sendBuf[0] = regAddr;
 8001708:	4a32      	ldr	r2, [pc, #200]	; (80017d4 <_Z9readByteshhhPh+0xe4>)
 800170a:	79bb      	ldrb	r3, [r7, #6]
 800170c:	7013      	strb	r3, [r2, #0]
  uint8_t buffer[length];
 800170e:	797b      	ldrb	r3, [r7, #5]
 8001710:	1e5c      	subs	r4, r3, #1
 8001712:	613c      	str	r4, [r7, #16]
 8001714:	4623      	mov	r3, r4
 8001716:	3301      	adds	r3, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	00cb      	lsls	r3, r1, #3
 8001728:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800172c:	00c2      	lsls	r2, r0, #3
 800172e:	4623      	mov	r3, r4
 8001730:	3301      	adds	r3, #1
 8001732:	4618      	mov	r0, r3
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	00cb      	lsls	r3, r1, #3
 8001742:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001746:	00c2      	lsls	r2, r0, #3
 8001748:	4623      	mov	r3, r4
 800174a:	3301      	adds	r3, #1
 800174c:	3307      	adds	r3, #7
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	ebad 0d03 	sub.w	sp, sp, r3
 8001756:	ab04      	add	r3, sp, #16
 8001758:	3300      	adds	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	b299      	uxth	r1, r3
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	b298      	uxth	r0, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	797a      	ldrb	r2, [r7, #5]
 8001768:	b292      	uxth	r2, r2
 800176a:	2401      	movs	r4, #1
 800176c:	9402      	str	r4, [sp, #8]
 800176e:	9201      	str	r2, [sp, #4]
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	4602      	mov	r2, r0
 8001776:	4818      	ldr	r0, [pc, #96]	; (80017d8 <_Z9readByteshhhPh+0xe8>)
 8001778:	f005 f944 	bl	8006a04 <HAL_I2C_Mem_Read>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <_Z9readByteshhhPh+0xa2>
    MX_I2C1_Init();
 800178c:	f002 fec0 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 8001790:	e7e4      	b.n	800175c <_Z9readByteshhhPh+0x6c>
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001792:	2301      	movs	r3, #1
 8001794:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < length ; i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	797b      	ldrb	r3, [r7, #5]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	429a      	cmp	r2, r3
 80017a0:	da0b      	bge.n	80017ba <_Z9readByteshhhPh+0xca>
    data[i] = (uint8_t) buffer[i];
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	440a      	add	r2, r1
 80017ae:	7812      	ldrb	r2, [r2, #0]
 80017b0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < length ; i++) {
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e7ef      	b.n	800179a <_Z9readByteshhhPh+0xaa>
  return response == BCM2835_I2C_REASON_OK;
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	46ad      	mov	sp, r5
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bdb0      	pop	{r4, r5, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000394 	.word	0x20000394
 80017d8:	20000698 	.word	0x20000698

080017dc <_Z8writeBithhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af04      	add	r7, sp, #16
 80017e2:	4604      	mov	r4, r0
 80017e4:	4608      	mov	r0, r1
 80017e6:	4611      	mov	r1, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	4623      	mov	r3, r4
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	4603      	mov	r3, r0
 80017f0:	71bb      	strb	r3, [r7, #6]
 80017f2:	460b      	mov	r3, r1
 80017f4:	717b      	strb	r3, [r7, #5]
 80017f6:	4613      	mov	r3, r2
 80017f8:	713b      	strb	r3, [r7, #4]

  //first reading registery value
  sendBuf[0] = regAddr;
 80017fa:	4a34      	ldr	r2, [pc, #208]	; (80018cc <_Z8writeBithhhh+0xf0>)
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	b299      	uxth	r1, r3
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	b29a      	uxth	r2, r3
 8001808:	2301      	movs	r3, #1
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	2301      	movs	r3, #1
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	f107 030e 	add.w	r3, r7, #14
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	482d      	ldr	r0, [pc, #180]	; (80018d0 <_Z8writeBithhhh+0xf4>)
 800181a:	f005 f8f3 	bl	8006a04 <HAL_I2C_Mem_Read>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf14      	ite	ne
 8001824:	2301      	movne	r3, #1
 8001826:	2300      	moveq	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <_Z8writeBithhhh+0x58>
    MX_I2C1_Init();
 800182e:	f002 fe6f 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001832:	e7e5      	b.n	8001800 <_Z8writeBithhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d13b      	bne.n	80018b6 <_Z8writeBithhhh+0xda>
    uint8_t b = buffer ;
 800183e:	7bbb      	ldrb	r3, [r7, #14]
 8001840:	737b      	strb	r3, [r7, #13]
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8001842:	793b      	ldrb	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00a      	beq.n	800185e <_Z8writeBithhhh+0x82>
 8001848:	797b      	ldrb	r3, [r7, #5]
 800184a:	2201      	movs	r2, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	b25a      	sxtb	r2, r3
 8001852:	7b7b      	ldrb	r3, [r7, #13]
 8001854:	b25b      	sxtb	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b25b      	sxtb	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	e00b      	b.n	8001876 <_Z8writeBithhhh+0x9a>
 800185e:	797b      	ldrb	r3, [r7, #5]
 8001860:	2201      	movs	r2, #1
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	b25b      	sxtb	r3, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	b25a      	sxtb	r2, r3
 800186c:	7b7b      	ldrb	r3, [r7, #13]
 800186e:	b25b      	sxtb	r3, r3
 8001870:	4013      	ands	r3, r2
 8001872:	b25b      	sxtb	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	737b      	strb	r3, [r7, #13]
    sendBuf[1] = b ;
 8001878:	7b7a      	ldrb	r2, [r7, #13]
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <_Z8writeBithhhh+0xf0>)
 800187c:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	b299      	uxth	r1, r3
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	b29a      	uxth	r2, r3
 8001886:	2301      	movs	r3, #1
 8001888:	9302      	str	r3, [sp, #8]
 800188a:	2301      	movs	r3, #1
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	f107 030d 	add.w	r3, r7, #13
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2301      	movs	r3, #1
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <_Z8writeBithhhh+0xf4>)
 8001898:	f004 ffba 	bl	8006810 <HAL_I2C_Mem_Write>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf14      	ite	ne
 80018a2:	2301      	movne	r3, #1
 80018a4:	2300      	moveq	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <_Z8writeBithhhh+0xd6>
    	MX_I2C1_Init();
 80018ac:	f002 fe30 	bl	8004510 <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80018b0:	e7e5      	b.n	800187e <_Z8writeBithhhh+0xa2>
    }
    response = BCM2835_I2C_REASON_OK;
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
  }
  return response == BCM2835_I2C_REASON_OK;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000394 	.word	0x20000394
 80018d0:	20000698 	.word	0x20000698

080018d4 <_Z9writeBitshhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b089      	sub	sp, #36	; 0x24
 80018d8:	af04      	add	r7, sp, #16
 80018da:	4604      	mov	r4, r0
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	4603      	mov	r3, r0
 80018e8:	71bb      	strb	r3, [r7, #6]
 80018ea:	460b      	mov	r3, r1
 80018ec:	717b      	strb	r3, [r7, #5]
 80018ee:	4613      	mov	r3, r2
 80018f0:	713b      	strb	r3, [r7, #4]
  // 10101111 original value (sample)
  // 10100011 original & ~mask
  // 10101011 masked | value

  //first reading registery value
  sendBuf[0] = regAddr;
 80018f2:	4a3c      	ldr	r2, [pc, #240]	; (80019e4 <_Z9writeBitshhhhh+0x110>)
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	b299      	uxth	r1, r3
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	2301      	movs	r3, #1
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	2301      	movs	r3, #1
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	f107 030d 	add.w	r3, r7, #13
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2301      	movs	r3, #1
 8001910:	4835      	ldr	r0, [pc, #212]	; (80019e8 <_Z9writeBitshhhhh+0x114>)
 8001912:	f005 f877 	bl	8006a04 <HAL_I2C_Mem_Read>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf14      	ite	ne
 800191c:	2301      	movne	r3, #1
 800191e:	2300      	moveq	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <_Z9writeBitshhhhh+0x58>
    MX_I2C1_Init();
 8001926:	f002 fdf3 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800192a:	e7e5      	b.n	80018f8 <_Z9writeBitshhhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d14c      	bne.n	80019d0 <_Z9writeBitshhhhh+0xfc>
    uint8_t b = buffer;
 8001936:	7b7b      	ldrb	r3, [r7, #13]
 8001938:	733b      	strb	r3, [r7, #12]
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800193a:	793b      	ldrb	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	7979      	ldrb	r1, [r7, #5]
 8001946:	793b      	ldrb	r3, [r7, #4]
 8001948:	1acb      	subs	r3, r1, r3
 800194a:	3301      	adds	r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	73bb      	strb	r3, [r7, #14]
    data <<= (bitStart - length + 1); // shift data into correct position
 8001952:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001956:	7979      	ldrb	r1, [r7, #5]
 8001958:	793b      	ldrb	r3, [r7, #4]
 800195a:	1acb      	subs	r3, r1, r3
 800195c:	3301      	adds	r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	f887 3020 	strb.w	r3, [r7, #32]
    data &= mask; // zero all non-important bits in data
 8001966:	f897 2020 	ldrb.w	r2, [r7, #32]
 800196a:	7bbb      	ldrb	r3, [r7, #14]
 800196c:	4013      	ands	r3, r2
 800196e:	f887 3020 	strb.w	r3, [r7, #32]
    b &= ~(mask); // zero all important bits in existing byte
 8001972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001976:	43db      	mvns	r3, r3
 8001978:	b25a      	sxtb	r2, r3
 800197a:	7b3b      	ldrb	r3, [r7, #12]
 800197c:	b25b      	sxtb	r3, r3
 800197e:	4013      	ands	r3, r2
 8001980:	b25b      	sxtb	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	733b      	strb	r3, [r7, #12]
    b |= data; // combine data with existing byte
 8001986:	7b3a      	ldrb	r2, [r7, #12]
 8001988:	f897 3020 	ldrb.w	r3, [r7, #32]
 800198c:	4313      	orrs	r3, r2
 800198e:	b2db      	uxtb	r3, r3
 8001990:	733b      	strb	r3, [r7, #12]
    sendBuf[1] = b ;
 8001992:	7b3a      	ldrb	r2, [r7, #12]
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <_Z9writeBitshhhhh+0x110>)
 8001996:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	b299      	uxth	r1, r3
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	2301      	movs	r3, #1
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	2301      	movs	r3, #1
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2301      	movs	r3, #1
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <_Z9writeBitshhhhh+0x114>)
 80019b2:	f004 ff2d 	bl	8006810 <HAL_I2C_Mem_Write>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf14      	ite	ne
 80019bc:	2301      	movne	r3, #1
 80019be:	2300      	moveq	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <_Z9writeBitshhhhh+0xf8>
       MX_I2C1_Init();
 80019c6:	f002 fda3 	bl	8004510 <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80019ca:	e7e5      	b.n	8001998 <_Z9writeBitshhhhh+0xc4>
    }
    response = BCM2835_I2C_REASON_OK;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
    }
  return response == BCM2835_I2C_REASON_OK;
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	bf0c      	ite	eq
 80019d6:	2301      	moveq	r3, #1
 80019d8:	2300      	movne	r3, #0
 80019da:	b2db      	uxtb	r3, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	20000394 	.word	0x20000394
 80019e8:	20000698 	.word	0x20000698

080019ec <_Z9writeBytehhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af04      	add	r7, sp, #16
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	460b      	mov	r3, r1
 80019f8:	71bb      	strb	r3, [r7, #6]
 80019fa:	4613      	mov	r3, r2
 80019fc:	717b      	strb	r3, [r7, #5]

  sendBuf[0] = regAddr;
 80019fe:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <_Z9writeBytehhh+0x68>)
 8001a00:	79bb      	ldrb	r3, [r7, #6]
 8001a02:	7013      	strb	r3, [r2, #0]
  sendBuf[1] = data;
 8001a04:	797a      	ldrb	r2, [r7, #5]
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <_Z9writeBytehhh+0x68>)
 8001a08:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	b299      	uxth	r1, r3
 8001a0e:	79bb      	ldrb	r3, [r7, #6]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	2301      	movs	r3, #1
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	2301      	movs	r3, #1
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	1d7b      	adds	r3, r7, #5
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	480d      	ldr	r0, [pc, #52]	; (8001a58 <_Z9writeBytehhh+0x6c>)
 8001a22:	f004 fef5 	bl	8006810 <HAL_I2C_Mem_Write>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <_Z9writeBytehhh+0x50>
     MX_I2C1_Init();
 8001a36:	f002 fd6b 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001a3a:	e7e6      	b.n	8001a0a <_Z9writeBytehhh+0x1e>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000394 	.word	0x20000394
 8001a58:	20000698 	.word	0x20000698

08001a5c <_Z9writeWordhht>:
    data[i] = (buffer[i*2] << 8) | buffer[i*2+1] ;
  }
  return  response == BCM2835_I2C_REASON_OK ;
}

bool writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af04      	add	r7, sp, #16
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
 8001a66:	460b      	mov	r3, r1
 8001a68:	71bb      	strb	r3, [r7, #6]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	80bb      	strh	r3, [r7, #4]

  sendBuf[0] = (uint8_t) (data >> 8); //MSByte
 8001a6e:	88bb      	ldrh	r3, [r7, #4]
 8001a70:	121b      	asrs	r3, r3, #8
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <_Z9writeWordhht+0x70>)
 8001a76:	701a      	strb	r2, [r3, #0]
  sendBuf[1] = (uint8_t) (data >> 0); //LSByte
 8001a78:	88bb      	ldrh	r3, [r7, #4]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <_Z9writeWordhht+0x70>)
 8001a7e:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	b299      	uxth	r1, r3
 8001a84:	79bb      	ldrb	r3, [r7, #6]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	2301      	movs	r3, #1
 8001a8a:	9302      	str	r3, [sp, #8]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <_Z9writeWordhht+0x70>)
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2301      	movs	r3, #1
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <_Z9writeWordhht+0x74>)
 8001a98:	f004 feba 	bl	8006810 <HAL_I2C_Mem_Write>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	2300      	moveq	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <_Z9writeWordhht+0x56>
     MX_I2C1_Init();
 8001aac:	f002 fd30 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 8001ab0:	e7e6      	b.n	8001a80 <_Z9writeWordhht+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000394 	.word	0x20000394
 8001ad0:	20000698 	.word	0x20000698

08001ad4 <_Z10writeByteshhhPh>:

bool writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af04      	add	r7, sp, #16
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	71bb      	strb	r3, [r7, #6]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  for (i = 0; i < length; i++) {
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	797b      	ldrb	r3, [r7, #5]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d20a      	bcs.n	8001b0a <_Z10writeByteshhhPh+0x36>
    sendBuf[i] = data[i] ;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	441a      	add	r2, r3
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	7811      	ldrb	r1, [r2, #0]
 8001afe:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <_Z10writeByteshhhPh+0x84>)
 8001b00:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < length; i++) {
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	3301      	adds	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e7f0      	b.n	8001aec <_Z10writeByteshhhPh+0x18>
  }
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	b299      	uxth	r1, r3
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	797b      	ldrb	r3, [r7, #5]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2001      	movs	r0, #1
 8001b18:	9002      	str	r0, [sp, #8]
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <_Z10writeByteshhhPh+0x84>)
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2301      	movs	r3, #1
 8001b22:	480e      	ldr	r0, [pc, #56]	; (8001b5c <_Z10writeByteshhhPh+0x88>)
 8001b24:	f004 fe74 	bl	8006810 <HAL_I2C_Mem_Write>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf14      	ite	ne
 8001b2e:	2301      	movne	r3, #1
 8001b30:	2300      	moveq	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <_Z10writeByteshhhPh+0x6a>
     MX_I2C1_Init();
 8001b38:	f002 fcea 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001b3c:	e7e5      	b.n	8001b0a <_Z10writeByteshhhPh+0x36>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73bb      	strb	r3, [r7, #14]
  return response == BCM2835_I2C_REASON_OK ;
 8001b42:	7bbb      	ldrb	r3, [r7, #14]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000394 	.word	0x20000394
 8001b5c:	20000698 	.word	0x20000698

08001b60 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f00b fe0b 	bl	800d784 <cosf>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f00b fe37 	bl	800d7f4 <sinf>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f00b feaf 	bl	800d8fc <sqrtf>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_Z17MPU6050_resetFIFOv>:
 * @brief Clears the FIFO (First In First Out) of the MPU6050
 * 
 * --Custom Method!
 */
void MPU6050_resetFIFO()
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  writeBit(MPU6050_Adresse, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8001bac:	2301      	movs	r3, #1
 8001bae:	2202      	movs	r2, #2
 8001bb0:	216a      	movs	r1, #106	; 0x6a
 8001bb2:	20d0      	movs	r0, #208	; 0xd0
 8001bb4:	f7ff fe12 	bl	80017dc <_Z8writeBithhhh>
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_Z28MPU6050_WaitForQuaternionSetv>:
 * @brief Waits until a new Quaternion-set is available in the FIFO
 * 
 * --Custom Method!
 */
void MPU6050_WaitForQuaternionSet()
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_COUNTH, 2, MPU6050_RX_buf);  //get FIFO count
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <_Z28MPU6050_WaitForQuaternionSetv+0x5c>)
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	2172      	movs	r1, #114	; 0x72
 8001bc6:	20d0      	movs	r0, #208	; 0xd0
 8001bc8:	f7ff fd92 	bl	80016f0 <_Z9readByteshhhPh>
  FIFOCounter = (((uint16_t)MPU6050_RX_buf[0]) << 8) | MPU6050_RX_buf[1]; //assemble FIFO count
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <_Z28MPU6050_WaitForQuaternionSetv+0x5c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <_Z28MPU6050_WaitForQuaternionSetv+0x5c>)
 8001bd6:	785b      	ldrb	r3, [r3, #1]
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <_Z28MPU6050_WaitForQuaternionSetv+0x60>)
 8001be2:	801a      	strh	r2, [r3, #0]
  while (FIFOCounter < 42)                                                //wait until there are more than 42 bytes in the FIFO
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <_Z28MPU6050_WaitForQuaternionSetv+0x60>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	2b29      	cmp	r3, #41	; 0x29
 8001bea:	d812      	bhi.n	8001c12 <_Z28MPU6050_WaitForQuaternionSetv+0x56>
  {
    readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_COUNTH, 2, MPU6050_RX_buf);  //get FIFO count
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <_Z28MPU6050_WaitForQuaternionSetv+0x5c>)
 8001bee:	2202      	movs	r2, #2
 8001bf0:	2172      	movs	r1, #114	; 0x72
 8001bf2:	20d0      	movs	r0, #208	; 0xd0
 8001bf4:	f7ff fd7c 	bl	80016f0 <_Z9readByteshhhPh>
    FIFOCounter = (((uint16_t)MPU6050_RX_buf[0]) << 8) | MPU6050_RX_buf[1]; //assemble FIFO count
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <_Z28MPU6050_WaitForQuaternionSetv+0x5c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	b21a      	sxth	r2, r3
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <_Z28MPU6050_WaitForQuaternionSetv+0x5c>)
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	4313      	orrs	r3, r2
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <_Z28MPU6050_WaitForQuaternionSetv+0x60>)
 8001c0e:	801a      	strh	r2, [r3, #0]
  while (FIFOCounter < 42)                                                //wait until there are more than 42 bytes in the FIFO
 8001c10:	e7e8      	b.n	8001be4 <_Z28MPU6050_WaitForQuaternionSetv+0x28>
  }
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200004d4 	.word	0x200004d4
 8001c1c:	200004e4 	.word	0x200004e4

08001c20 <_Z28MPU6050_ConvertToQuaternionsv>:
 * @brief Reads a Quaternion-set from the FIFO and assembles the data to W,X,Y,Z
 * 
 * --Custom Method!
 */
void MPU6050_ConvertToQuaternions()
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  if ((FIFOCounter == 42) | (FIFOCounter == 84))
 8001c24:	4b42      	ldr	r3, [pc, #264]	; (8001d30 <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	2b2a      	cmp	r3, #42	; 0x2a
 8001c2a:	bf0c      	ite	eq
 8001c2c:	2301      	moveq	r3, #1
 8001c2e:	2300      	movne	r3, #0
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b3f      	ldr	r3, [pc, #252]	; (8001d30 <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	2b54      	cmp	r3, #84	; 0x54
 8001c38:	bf0c      	ite	eq
 8001c3a:	2301      	moveq	r3, #1
 8001c3c:	2300      	movne	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	4313      	orrs	r3, r2
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d071      	beq.n	8001d2c <_Z28MPU6050_ConvertToQuaternionsv+0x10c>
  {
    readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_R_W, 16, MPU6050_RX_buf);      //get FIFO data
 8001c48:	4b3a      	ldr	r3, [pc, #232]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	2174      	movs	r1, #116	; 0x74
 8001c4e:	20d0      	movs	r0, #208	; 0xd0
 8001c50:	f7ff fd4e 	bl	80016f0 <_Z9readByteshhhPh>
    MPUoutputQuaternion[0] = (float)(((int32_t)MPU6050_RX_buf[0] << 24)  | ((int32_t)MPU6050_RX_buf[1] << 16)  | ((int32_t)MPU6050_RX_buf[2] << 8)  | MPU6050_RX_buf[3 ]) / 1073741824;
 8001c54:	4b37      	ldr	r3, [pc, #220]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	061a      	lsls	r2, r3, #24
 8001c5a:	4b36      	ldr	r3, [pc, #216]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c5c:	785b      	ldrb	r3, [r3, #1]
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	431a      	orrs	r2, r3
 8001c62:	4b34      	ldr	r3, [pc, #208]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c64:	789b      	ldrb	r3, [r3, #2]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	4a32      	ldr	r2, [pc, #200]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c6c:	78d2      	ldrb	r2, [r2, #3]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f86f 	bl	8000d54 <__aeabi_i2f>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f971 	bl	8000f64 <__aeabi_fdiv>
 8001c82:	4603      	mov	r3, r0
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001c88:	601a      	str	r2, [r3, #0]
    MPUoutputQuaternion[1] = (float)(((int32_t)MPU6050_RX_buf[4] << 24)  | ((int32_t)MPU6050_RX_buf[5] << 16)  | ((int32_t)MPU6050_RX_buf[6] << 8)  | MPU6050_RX_buf[7 ]) / 1073741824;
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c8c:	791b      	ldrb	r3, [r3, #4]
 8001c8e:	061a      	lsls	r2, r3, #24
 8001c90:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c92:	795b      	ldrb	r3, [r3, #5]
 8001c94:	041b      	lsls	r3, r3, #16
 8001c96:	431a      	orrs	r2, r3
 8001c98:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c9a:	799b      	ldrb	r3, [r3, #6]
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	4a24      	ldr	r2, [pc, #144]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001ca2:	79d2      	ldrb	r2, [r2, #7]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f854 	bl	8000d54 <__aeabi_i2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff f956 	bl	8000f64 <__aeabi_fdiv>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001cbe:	605a      	str	r2, [r3, #4]
    MPUoutputQuaternion[2] = (float)(((int32_t)MPU6050_RX_buf[8] << 24)  | ((int32_t)MPU6050_RX_buf[9] << 16)  | ((int32_t)MPU6050_RX_buf[10] << 8) | MPU6050_RX_buf[11]) / 1073741824;
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cc2:	7a1b      	ldrb	r3, [r3, #8]
 8001cc4:	061a      	lsls	r2, r3, #24
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cc8:	7a5b      	ldrb	r3, [r3, #9]
 8001cca:	041b      	lsls	r3, r3, #16
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cd0:	7a9b      	ldrb	r3, [r3, #10]
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cd8:	7ad2      	ldrb	r2, [r2, #11]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff f839 	bl	8000d54 <__aeabi_i2f>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff f93b 	bl	8000f64 <__aeabi_fdiv>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001cf4:	609a      	str	r2, [r3, #8]
    MPUoutputQuaternion[3] = (float)(((int32_t)MPU6050_RX_buf[12] << 24) | ((int32_t)MPU6050_RX_buf[13] << 16) | ((int32_t)MPU6050_RX_buf[14] << 8) | MPU6050_RX_buf[15]) / 1073741824;
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cf8:	7b1b      	ldrb	r3, [r3, #12]
 8001cfa:	061a      	lsls	r2, r3, #24
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cfe:	7b5b      	ldrb	r3, [r3, #13]
 8001d00:	041b      	lsls	r3, r3, #16
 8001d02:	431a      	orrs	r2, r3
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d06:	7b9b      	ldrb	r3, [r3, #14]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d0e:	7bd2      	ldrb	r2, [r2, #15]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff f81e 	bl	8000d54 <__aeabi_i2f>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f920 	bl	8000f64 <__aeabi_fdiv>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001d2a:	60da      	str	r2, [r3, #12]
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	200004e4 	.word	0x200004e4
 8001d34:	200004d4 	.word	0x200004d4
 8001d38:	20000494 	.word	0x20000494

08001d3c <_Z27MPU6050_GetOriginQuaternionv>:
 * @brief Saves the current MPU6050 raw Quaternion as the Origin Quaternion
 * 
 * --Custom Method!
 */
void MPU6050_GetOriginQuaternion()
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  OriginQuaternion[0] = MPUoutputQuaternion[0];
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d46:	6013      	str	r3, [r2, #0]
  OriginQuaternion[1] = MPUoutputQuaternion[1];
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d4e:	6053      	str	r3, [r2, #4]
  OriginQuaternion[2] = MPUoutputQuaternion[2];
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d56:	6093      	str	r3, [r2, #8]
  OriginQuaternion[3] = MPUoutputQuaternion[3];
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4a03      	ldr	r2, [pc, #12]	; (8001d6c <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	20000494 	.word	0x20000494
 8001d6c:	200004a4 	.word	0x200004a4

08001d70 <_Z28update_FrameOriginQuaternionv>:
 * It does this to then be able to apply that Quaternion rotation to the W-Quaternion
 * 
 * --Custom Method!
 */
void update_FrameOriginQuaternion()
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
  updateQuaternion[0] = cos((float)SBUS_Channels[3] / 10000);                   //create rotation Quaternion
 8001d76:	4b44      	ldr	r3, [pc, #272]	; (8001e88 <_Z28update_FrameOriginQuaternionv+0x118>)
 8001d78:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe ffe9 	bl	8000d54 <__aeabi_i2f>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4941      	ldr	r1, [pc, #260]	; (8001e8c <_Z28update_FrameOriginQuaternionv+0x11c>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f8ec 	bl	8000f64 <__aeabi_fdiv>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fee6 	bl	8001b60 <_ZSt3cosf>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4a3e      	ldr	r2, [pc, #248]	; (8001e90 <_Z28update_FrameOriginQuaternionv+0x120>)
 8001d98:	6013      	str	r3, [r2, #0]
  updateQuaternion[1] = (float)sin((float)SBUS_Channels[1] / (float)10000);
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <_Z28update_FrameOriginQuaternionv+0x118>)
 8001d9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe ffd7 	bl	8000d54 <__aeabi_i2f>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4938      	ldr	r1, [pc, #224]	; (8001e8c <_Z28update_FrameOriginQuaternionv+0x11c>)
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff f8da 	bl	8000f64 <__aeabi_fdiv>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fee0 	bl	8001b78 <_ZSt3sinf>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4a35      	ldr	r2, [pc, #212]	; (8001e90 <_Z28update_FrameOriginQuaternionv+0x120>)
 8001dbc:	6053      	str	r3, [r2, #4]
  updateQuaternion[2] = (float)sin((float)SBUS_Channels[0] / (float)10000);
 8001dbe:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <_Z28update_FrameOriginQuaternionv+0x118>)
 8001dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe ffc5 	bl	8000d54 <__aeabi_i2f>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	492f      	ldr	r1, [pc, #188]	; (8001e8c <_Z28update_FrameOriginQuaternionv+0x11c>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff f8c8 	bl	8000f64 <__aeabi_fdiv>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fece 	bl	8001b78 <_ZSt3sinf>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4a2c      	ldr	r2, [pc, #176]	; (8001e90 <_Z28update_FrameOriginQuaternionv+0x120>)
 8001de0:	6093      	str	r3, [r2, #8]
  updateQuaternion[3] = sin((float)SBUS_Channels[3] / 10000);
 8001de2:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <_Z28update_FrameOriginQuaternionv+0x118>)
 8001de4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe ffb3 	bl	8000d54 <__aeabi_i2f>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4926      	ldr	r1, [pc, #152]	; (8001e8c <_Z28update_FrameOriginQuaternionv+0x11c>)
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff f8b6 	bl	8000f64 <__aeabi_fdiv>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff febc 	bl	8001b78 <_ZSt3sinf>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <_Z28update_FrameOriginQuaternionv+0x120>)
 8001e04:	60d3      	str	r3, [r2, #12]

  float *p1 = QuaternionNormalize(&updateQuaternion[0]);                        //normalize
 8001e06:	4822      	ldr	r0, [pc, #136]	; (8001e90 <_Z28update_FrameOriginQuaternionv+0x120>)
 8001e08:	f000 fb84 	bl	8002514 <_Z19QuaternionNormalizePf>
 8001e0c:	60f8      	str	r0, [r7, #12]
  updateQuaternion[0] = *p1;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a1f      	ldr	r2, [pc, #124]	; (8001e90 <_Z28update_FrameOriginQuaternionv+0x120>)
 8001e14:	6013      	str	r3, [r2, #0]
  updateQuaternion[1] = *(p1 + 1);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4a1d      	ldr	r2, [pc, #116]	; (8001e90 <_Z28update_FrameOriginQuaternionv+0x120>)
 8001e1c:	6053      	str	r3, [r2, #4]
  updateQuaternion[2] = *(p1 + 2);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <_Z28update_FrameOriginQuaternionv+0x120>)
 8001e24:	6093      	str	r3, [r2, #8]
  updateQuaternion[3] = *(p1 + 3);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <_Z28update_FrameOriginQuaternionv+0x120>)
 8001e2c:	60d3      	str	r3, [r2, #12]

  float *p2 = QuaternionProduct(&updateQuaternion[0], &LoopWQuaternion[0]);     //apply the Rotation
 8001e2e:	4919      	ldr	r1, [pc, #100]	; (8001e94 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001e30:	4817      	ldr	r0, [pc, #92]	; (8001e90 <_Z28update_FrameOriginQuaternionv+0x120>)
 8001e32:	f000 fa2f 	bl	8002294 <_Z17QuaternionProductPfS_>
 8001e36:	60b8      	str	r0, [r7, #8]
  LoopWQuaternion[0] = *p2;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001e3e:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p2 + 1);
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4a13      	ldr	r2, [pc, #76]	; (8001e94 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001e46:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p2 + 2);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	4a11      	ldr	r2, [pc, #68]	; (8001e94 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001e4e:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p2 + 3);
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001e56:	60d3      	str	r3, [r2, #12]

    float *p3 = QuaternionNormalize(&LoopWQuaternion[0]);                       //normalize
 8001e58:	480e      	ldr	r0, [pc, #56]	; (8001e94 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001e5a:	f000 fb5b 	bl	8002514 <_Z19QuaternionNormalizePf>
 8001e5e:	6078      	str	r0, [r7, #4]
  LoopWQuaternion[0] = *p3;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001e66:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p3 + 1);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001e6e:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p3 + 2);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001e76:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p3 + 3);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001e7e:	60d3      	str	r3, [r2, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000638 	.word	0x20000638
 8001e8c:	461c4000 	.word	0x461c4000
 8001e90:	200004c4 	.word	0x200004c4
 8001e94:	20000010 	.word	0x20000010

08001e98 <_Z12MPU6050_initv>:
 * @brief Initializes the MPU6050 and initializes and starts the DMP functionality
 * 
 * --Custom Method!
 */
void MPU6050_init()
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);  //disable SBUS pin interrupt
 8001e9c:	2006      	movs	r0, #6
 8001e9e:	f004 f95a 	bl	8006156 <HAL_NVIC_DisableIRQ>
  HAL_Delay(5);
 8001ea2:	2005      	movs	r0, #5
 8001ea4:	f003 fcf4 	bl	8005890 <HAL_Delay>
  mpu.initialize();                 //initialize that object
 8001ea8:	4828      	ldr	r0, [pc, #160]	; (8001f4c <_Z12MPU6050_initv+0xb4>)
 8001eaa:	f000 fbb6 	bl	800261a <_ZN7MPU605010initializeEv>
  HAL_Delay(10);
 8001eae:	200a      	movs	r0, #10
 8001eb0:	f003 fcee 	bl	8005890 <HAL_Delay>
  mpu.dmpInitialize();              //initialize DMP (Digital Motion Processing)
 8001eb4:	4825      	ldr	r0, [pc, #148]	; (8001f4c <_Z12MPU6050_initv+0xb4>)
 8001eb6:	f001 f905 	bl	80030c4 <_ZN7MPU605013dmpInitializeEv>
  HAL_Delay(5);
 8001eba:	2005      	movs	r0, #5
 8001ebc:	f003 fce8 	bl	8005890 <HAL_Delay>
  mpu.setXGyroOffset(-169);         //apply custom offset values
 8001ec0:	f06f 01a8 	mvn.w	r1, #168	; 0xa8
 8001ec4:	4821      	ldr	r0, [pc, #132]	; (8001f4c <_Z12MPU6050_initv+0xb4>)
 8001ec6:	f000 fe03 	bl	8002ad0 <_ZN7MPU605014setXGyroOffsetEs>
  mpu.setYGyroOffset(165);
 8001eca:	21a5      	movs	r1, #165	; 0xa5
 8001ecc:	481f      	ldr	r0, [pc, #124]	; (8001f4c <_Z12MPU6050_initv+0xb4>)
 8001ece:	f000 fe10 	bl	8002af2 <_ZN7MPU605014setYGyroOffsetEs>
  mpu.setZGyroOffset(110);
 8001ed2:	216e      	movs	r1, #110	; 0x6e
 8001ed4:	481d      	ldr	r0, [pc, #116]	; (8001f4c <_Z12MPU6050_initv+0xb4>)
 8001ed6:	f000 fe1d 	bl	8002b14 <_ZN7MPU605014setZGyroOffsetEs>
  mpu.setXAccelOffset(4599);
 8001eda:	f241 11f7 	movw	r1, #4599	; 0x11f7
 8001ede:	481b      	ldr	r0, [pc, #108]	; (8001f4c <_Z12MPU6050_initv+0xb4>)
 8001ee0:	f000 fdc3 	bl	8002a6a <_ZN7MPU605015setXAccelOffsetEs>
  mpu.setYAccelOffset(-951);
 8001ee4:	491a      	ldr	r1, [pc, #104]	; (8001f50 <_Z12MPU6050_initv+0xb8>)
 8001ee6:	4819      	ldr	r0, [pc, #100]	; (8001f4c <_Z12MPU6050_initv+0xb4>)
 8001ee8:	f000 fdd0 	bl	8002a8c <_ZN7MPU605015setYAccelOffsetEs>
  mpu.setZAccelOffset(1930);
 8001eec:	f240 718a 	movw	r1, #1930	; 0x78a
 8001ef0:	4816      	ldr	r0, [pc, #88]	; (8001f4c <_Z12MPU6050_initv+0xb4>)
 8001ef2:	f000 fddc 	bl	8002aae <_ZN7MPU605015setZAccelOffsetEs>
  mpu.setDMPEnabled(true);          //enable DMP
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	4814      	ldr	r0, [pc, #80]	; (8001f4c <_Z12MPU6050_initv+0xb4>)
 8001efa:	f000 fe33 	bl	8002b64 <_ZN7MPU605013setDMPEnabledEb>

  while (mpu.getDMPEnabled() == false)
 8001efe:	4813      	ldr	r0, [pc, #76]	; (8001f4c <_Z12MPU6050_initv+0xb4>)
 8001f00:	f000 fe19 	bl	8002b36 <_ZN7MPU605013getDMPEnabledEv>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf0c      	ite	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	2300      	movne	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00a      	beq.n	8001f2a <_Z12MPU6050_initv+0x92>
  {
    mpu.dmpInitialize();
 8001f14:	480d      	ldr	r0, [pc, #52]	; (8001f4c <_Z12MPU6050_initv+0xb4>)
 8001f16:	f001 f8d5 	bl	80030c4 <_ZN7MPU605013dmpInitializeEv>
    HAL_Delay(5);
 8001f1a:	2005      	movs	r0, #5
 8001f1c:	f003 fcb8 	bl	8005890 <HAL_Delay>
    mpu.setDMPEnabled(true);          //enable DMP
 8001f20:	2101      	movs	r1, #1
 8001f22:	480a      	ldr	r0, [pc, #40]	; (8001f4c <_Z12MPU6050_initv+0xb4>)
 8001f24:	f000 fe1e 	bl	8002b64 <_ZN7MPU605013setDMPEnabledEb>
  while (mpu.getDMPEnabled() == false)
 8001f28:	e7e9      	b.n	8001efe <_Z12MPU6050_initv+0x66>
  }

  HAL_Delay(5);
 8001f2a:	2005      	movs	r0, #5
 8001f2c:	f003 fcb0 	bl	8005890 <HAL_Delay>
  MPU6050_resetFIFO();              //reset FIFO
 8001f30:	f7ff fe3a 	bl	8001ba8 <_Z17MPU6050_resetFIFOv>
  HAL_Delay(2);
 8001f34:	2002      	movs	r0, #2
 8001f36:	f003 fcab 	bl	8005890 <HAL_Delay>
  MPU6050_WaitForQuaternionSet();
 8001f3a:	f7ff fe3f 	bl	8001bbc <_Z28MPU6050_WaitForQuaternionSetv>
  MPU6050_ConvertToQuaternions();
 8001f3e:	f7ff fe6f 	bl	8001c20 <_Z28MPU6050_ConvertToQuaternionsv>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   //enable SBUS pin interrupt
 8001f42:	2006      	movs	r0, #6
 8001f44:	f004 f8f9 	bl	800613a <HAL_NVIC_EnableIRQ>
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200004e8 	.word	0x200004e8
 8001f50:	fffffc49 	.word	0xfffffc49

08001f54 <_Z19MPU6050_calibrationv>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void MPU6050_calibration()//NOTDONE comment
{
 8001f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f58:	b0db      	sub	sp, #364	; 0x16c
 8001f5a:	af06      	add	r7, sp, #24
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);  //disable SBUS pin interrupt
 8001f5c:	2006      	movs	r0, #6
 8001f5e:	f004 f8fa 	bl	8006156 <HAL_NVIC_DisableIRQ>
  uint8_t MPU_calibrated = false;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
  while (MPU_calibrated == false)
 8001f68:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f040 8175 	bne.w	800225c <_Z19MPU6050_calibrationv+0x308>
  {
    uint16_t counter = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8a7 3148 	strh.w	r3, [r7, #328]	; 0x148
    MPU6050_resetFIFO();              //reset FIFO
 8001f78:	f7ff fe16 	bl	8001ba8 <_Z17MPU6050_resetFIFOv>
    HAL_Delay(2);
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	f003 fc87 	bl	8005890 <HAL_Delay>
    MPU6050_WaitForQuaternionSet();
 8001f82:	f7ff fe1b 	bl	8001bbc <_Z28MPU6050_WaitForQuaternionSetv>
    MPU6050_ConvertToQuaternions();
 8001f86:	f7ff fe4b 	bl	8001c20 <_Z28MPU6050_ConvertToQuaternionsv>
    MPU6050_GetOriginQuaternion();
 8001f8a:	f7ff fed7 	bl	8001d3c <_Z27MPU6050_GetOriginQuaternionv>
    get_XW_diffAngles();
 8001f8e:	f001 fb63 	bl	8003658 <_Z17get_XW_diffAnglesv>

    uint16_t oldTime = TIM11->CNT;
 8001f92:	4bb8      	ldr	r3, [pc, #736]	; (8002274 <_Z19MPU6050_calibrationv+0x320>)
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a

    float startAngles[3] = {
    PID_Pitch_xw_diff,
    PID_Roll_xw_diff ,
    PID_Yaw_xw_diff  };
 8001f9a:	4bb7      	ldr	r3, [pc, #732]	; (8002278 <_Z19MPU6050_calibrationv+0x324>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001fa2:	4bb6      	ldr	r3, [pc, #728]	; (800227c <_Z19MPU6050_calibrationv+0x328>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001faa:	4bb5      	ldr	r3, [pc, #724]	; (8002280 <_Z19MPU6050_calibrationv+0x32c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    while 
    (                                                                                                                                     \
    (startAngles[0] - PID_Pitch_xw_diff < MPU6050_cal_Pitch_MaxDev) & (startAngles[0] - PID_Pitch_xw_diff > -MPU6050_cal_Pitch_MaxDev) &  \
 8001fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001fb6:	4ab0      	ldr	r2, [pc, #704]	; (8002278 <_Z19MPU6050_calibrationv+0x324>)
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fe13 	bl	8000be8 <__aeabi_fsub>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4614      	mov	r4, r2
 8001fc8:	49ae      	ldr	r1, [pc, #696]	; (8002284 <_Z19MPU6050_calibrationv+0x330>)
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff f8b4 	bl	8001138 <__aeabi_fcmplt>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <_Z19MPU6050_calibrationv+0x86>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	461c      	mov	r4, r3
 8001fda:	b2e4      	uxtb	r4, r4
 8001fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001fe0:	4aa5      	ldr	r2, [pc, #660]	; (8002278 <_Z19MPU6050_calibrationv+0x324>)
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fdfe 	bl	8000be8 <__aeabi_fsub>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4615      	mov	r5, r2
 8001ff2:	49a5      	ldr	r1, [pc, #660]	; (8002288 <_Z19MPU6050_calibrationv+0x334>)
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff f8bd 	bl	8001174 <__aeabi_fcmpgt>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <_Z19MPU6050_calibrationv+0xb0>
 8002000:	2300      	movs	r3, #0
 8002002:	461d      	mov	r5, r3
 8002004:	b2eb      	uxtb	r3, r5
 8002006:	4023      	ands	r3, r4
 8002008:	b2db      	uxtb	r3, r3
 800200a:	461c      	mov	r4, r3
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 800200c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002010:	4a9a      	ldr	r2, [pc, #616]	; (800227c <_Z19MPU6050_calibrationv+0x328>)
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fde6 	bl	8000be8 <__aeabi_fsub>
 800201c:	4603      	mov	r3, r0
 800201e:	2201      	movs	r2, #1
 8002020:	4615      	mov	r5, r2
 8002022:	4998      	ldr	r1, [pc, #608]	; (8002284 <_Z19MPU6050_calibrationv+0x330>)
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff f887 	bl	8001138 <__aeabi_fcmplt>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <_Z19MPU6050_calibrationv+0xe0>
 8002030:	2300      	movs	r3, #0
 8002032:	461d      	mov	r5, r3
 8002034:	b2eb      	uxtb	r3, r5
    (startAngles[0] - PID_Pitch_xw_diff < MPU6050_cal_Pitch_MaxDev) & (startAngles[0] - PID_Pitch_xw_diff > -MPU6050_cal_Pitch_MaxDev) &  \
 8002036:	401c      	ands	r4, r3
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 8002038:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800203c:	4a8f      	ldr	r2, [pc, #572]	; (800227c <_Z19MPU6050_calibrationv+0x328>)
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fdd0 	bl	8000be8 <__aeabi_fsub>
 8002048:	4603      	mov	r3, r0
 800204a:	2201      	movs	r2, #1
 800204c:	4615      	mov	r5, r2
 800204e:	498e      	ldr	r1, [pc, #568]	; (8002288 <_Z19MPU6050_calibrationv+0x334>)
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff f88f 	bl	8001174 <__aeabi_fcmpgt>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <_Z19MPU6050_calibrationv+0x10c>
 800205c:	2300      	movs	r3, #0
 800205e:	461d      	mov	r5, r3
 8002060:	b2eb      	uxtb	r3, r5
 8002062:	401c      	ands	r4, r3
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 8002064:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002068:	4a85      	ldr	r2, [pc, #532]	; (8002280 <_Z19MPU6050_calibrationv+0x32c>)
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	4611      	mov	r1, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fdba 	bl	8000be8 <__aeabi_fsub>
 8002074:	4603      	mov	r3, r0
 8002076:	2201      	movs	r2, #1
 8002078:	4615      	mov	r5, r2
 800207a:	4982      	ldr	r1, [pc, #520]	; (8002284 <_Z19MPU6050_calibrationv+0x330>)
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff f85b 	bl	8001138 <__aeabi_fcmplt>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <_Z19MPU6050_calibrationv+0x138>
 8002088:	2300      	movs	r3, #0
 800208a:	461d      	mov	r5, r3
 800208c:	b2eb      	uxtb	r3, r5
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 800208e:	401c      	ands	r4, r3
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 8002090:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002094:	4a7a      	ldr	r2, [pc, #488]	; (8002280 <_Z19MPU6050_calibrationv+0x32c>)
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fda4 	bl	8000be8 <__aeabi_fsub>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2201      	movs	r2, #1
 80020a4:	4615      	mov	r5, r2
 80020a6:	4978      	ldr	r1, [pc, #480]	; (8002288 <_Z19MPU6050_calibrationv+0x334>)
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff f863 	bl	8001174 <__aeabi_fcmpgt>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <_Z19MPU6050_calibrationv+0x164>
 80020b4:	2300      	movs	r3, #0
 80020b6:	461d      	mov	r5, r3
 80020b8:	b2eb      	uxtb	r3, r5
 80020ba:	4023      	ands	r3, r4
    (counter < MPU6050_cal_Time)                                                                                                          \
 80020bc:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 80020c0:	f240 31e7 	movw	r1, #999	; 0x3e7
 80020c4:	428a      	cmp	r2, r1
 80020c6:	bf94      	ite	ls
 80020c8:	2201      	movls	r2, #1
 80020ca:	2200      	movhi	r2, #0
 80020cc:	b2d2      	uxtb	r2, r2
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 80020ce:	4013      	ands	r3, r2
    (counter < MPU6050_cal_Time)                                                                                                          \
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80b4 	beq.w	800223e <_Z19MPU6050_calibrationv+0x2ea>
    )                                                                                                                                     \
    {
      MPU6050_resetFIFO();              //reset FIFO
 80020d6:	f7ff fd67 	bl	8001ba8 <_Z17MPU6050_resetFIFOv>
      HAL_Delay(2);
 80020da:	2002      	movs	r0, #2
 80020dc:	f003 fbd8 	bl	8005890 <HAL_Delay>
      MPU6050_WaitForQuaternionSet();
 80020e0:	f7ff fd6c 	bl	8001bbc <_Z28MPU6050_WaitForQuaternionSetv>
      MPU6050_ConvertToQuaternions();
 80020e4:	f7ff fd9c 	bl	8001c20 <_Z28MPU6050_ConvertToQuaternionsv>
      get_XW_diffAngles();
 80020e8:	f001 fab6 	bl	8003658 <_Z17get_XW_diffAnglesv>

      for (size_t i = 0; i < 1; i++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80020f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 8088 	bne.w	800220c <_Z19MPU6050_calibrationv+0x2b8>
	      for (size_t i = 0; i < x; i++)
	      {
	      	msgTransmit[i] = msg[i];
	      }
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
      }
 80020fc:	466b      	mov	r3, sp
 80020fe:	461e      	mov	r6, r3
	      sprintf((char*)msg,"%f %f %f %hu \r\n" \
 8002100:	4b5d      	ldr	r3, [pc, #372]	; (8002278 <_Z19MPU6050_calibrationv+0x324>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe f9cb 	bl	80004a0 <__aeabi_f2d>
 800210a:	4680      	mov	r8, r0
 800210c:	4689      	mov	r9, r1
 800210e:	4b5b      	ldr	r3, [pc, #364]	; (800227c <_Z19MPU6050_calibrationv+0x328>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe f9c4 	bl	80004a0 <__aeabi_f2d>
 8002118:	4604      	mov	r4, r0
 800211a:	460d      	mov	r5, r1
 800211c:	4b58      	ldr	r3, [pc, #352]	; (8002280 <_Z19MPU6050_calibrationv+0x32c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f9bd 	bl	80004a0 <__aeabi_f2d>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	f8b7 1148 	ldrh.w	r1, [r7, #328]	; 0x148
 800212e:	4638      	mov	r0, r7
 8002130:	9104      	str	r1, [sp, #16]
 8002132:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002136:	e9cd 4500 	strd	r4, r5, [sp]
 800213a:	4642      	mov	r2, r8
 800213c:	464b      	mov	r3, r9
 800213e:	4953      	ldr	r1, [pc, #332]	; (800228c <_Z19MPU6050_calibrationv+0x338>)
 8002140:	f00e fa40 	bl	80105c4 <siprintf>
	      uint8_t x = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
	      while (msg[x] != NULL)
 800214a:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 800214e:	463a      	mov	r2, r7
 8002150:	5cd3      	ldrb	r3, [r2, r3]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <_Z19MPU6050_calibrationv+0x20e>
	      	x++;
 8002156:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 800215a:	3301      	adds	r3, #1
 800215c:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
	      while (msg[x] != NULL)
 8002160:	e7f3      	b.n	800214a <_Z19MPU6050_calibrationv+0x1f6>
	      unsigned char msgTransmit[x];
 8002162:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8002166:	1e5c      	subs	r4, r3, #1
 8002168:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 800216c:	4623      	mov	r3, r4
 800216e:	3301      	adds	r3, #1
 8002170:	4618      	mov	r0, r3
 8002172:	f04f 0100 	mov.w	r1, #0
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	00cb      	lsls	r3, r1, #3
 8002180:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002184:	00c2      	lsls	r2, r0, #3
 8002186:	4623      	mov	r3, r4
 8002188:	3301      	adds	r3, #1
 800218a:	4618      	mov	r0, r3
 800218c:	f04f 0100 	mov.w	r1, #0
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	00cb      	lsls	r3, r1, #3
 800219a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800219e:	00c2      	lsls	r2, r0, #3
 80021a0:	4623      	mov	r3, r4
 80021a2:	3301      	adds	r3, #1
 80021a4:	3307      	adds	r3, #7
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	ebad 0d03 	sub.w	sp, sp, r3
 80021ae:	ab06      	add	r3, sp, #24
 80021b0:	3300      	adds	r3, #0
 80021b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	      for (size_t i = 0; i < x; i++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80021bc:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 80021c0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d211      	bcs.n	80021ec <_Z19MPU6050_calibrationv+0x298>
	      	msgTransmit[i] = msg[i];
 80021c8:	463a      	mov	r2, r7
 80021ca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80021ce:	4413      	add	r3, r2
 80021d0:	7819      	ldrb	r1, [r3, #0]
 80021d2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80021d6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80021da:	4413      	add	r3, r2
 80021dc:	460a      	mov	r2, r1
 80021de:	701a      	strb	r2, [r3, #0]
	      for (size_t i = 0; i < x; i++)
 80021e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80021e4:	3301      	adds	r3, #1
 80021e6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80021ea:	e7e7      	b.n	80021bc <_Z19MPU6050_calibrationv+0x268>
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 80021ec:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80021f0:	b2a3      	uxth	r3, r4
 80021f2:	3301      	adds	r3, #1
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4619      	mov	r1, r3
 80021f8:	4610      	mov	r0, r2
 80021fa:	f00a fcfd 	bl	800cbf8 <CDC_Transmit_FS>
 80021fe:	46b5      	mov	sp, r6
      for (size_t i = 0; i < 1; i++)
 8002200:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002204:	3301      	adds	r3, #1
 8002206:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800220a:	e772      	b.n	80020f2 <_Z19MPU6050_calibrationv+0x19e>

      while ((TIM11->CNT - oldTime) < 10000) ;
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <_Z19MPU6050_calibrationv+0x320>)
 800220e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002210:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f242 720f 	movw	r2, #9999	; 0x270f
 800221a:	4293      	cmp	r3, r2
 800221c:	bf94      	ite	ls
 800221e:	2301      	movls	r3, #1
 8002220:	2300      	movhi	r3, #0
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d000      	beq.n	800222a <_Z19MPU6050_calibrationv+0x2d6>
 8002228:	e7f0      	b.n	800220c <_Z19MPU6050_calibrationv+0x2b8>
      oldTime = TIM11->CNT;
 800222a:	4b12      	ldr	r3, [pc, #72]	; (8002274 <_Z19MPU6050_calibrationv+0x320>)
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
      counter += 10;
 8002232:	f8b7 3148 	ldrh.w	r3, [r7, #328]	; 0x148
 8002236:	330a      	adds	r3, #10
 8002238:	f8a7 3148 	strh.w	r3, [r7, #328]	; 0x148
    while 
 800223c:	e6b9      	b.n	8001fb2 <_Z19MPU6050_calibrationv+0x5e>
    }
    if (counter >= MPU6050_cal_Time)
 800223e:	f8b7 3148 	ldrh.w	r3, [r7, #328]	; 0x148
 8002242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002246:	d304      	bcc.n	8002252 <_Z19MPU6050_calibrationv+0x2fe>
    {
      MPU6050_GetOriginQuaternion();
 8002248:	f7ff fd78 	bl	8001d3c <_Z27MPU6050_GetOriginQuaternionv>
      MPU_calibrated = true;
 800224c:	2301      	movs	r3, #1
 800224e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
    }
    HAL_GPIO_TogglePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin);
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	480e      	ldr	r0, [pc, #56]	; (8002290 <_Z19MPU6050_calibrationv+0x33c>)
 8002256:	f004 f966 	bl	8006526 <HAL_GPIO_TogglePin>
  while (MPU_calibrated == false)
 800225a:	e685      	b.n	8001f68 <_Z19MPU6050_calibrationv+0x14>
  }
  MPU6050_GetOriginQuaternion();
 800225c:	f7ff fd6e 	bl	8001d3c <_Z27MPU6050_GetOriginQuaternionv>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   //enable SBUS pin interrupt
 8002260:	2006      	movs	r0, #6
 8002262:	f003 ff6a 	bl	800613a <HAL_NVIC_EnableIRQ>
}
 8002266:	bf00      	nop
 8002268:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 800226c:	46bd      	mov	sp, r7
 800226e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002272:	bf00      	nop
 8002274:	40014800 	.word	0x40014800
 8002278:	20000534 	.word	0x20000534
 800227c:	20000538 	.word	0x20000538
 8002280:	2000053c 	.word	0x2000053c
 8002284:	40a00000 	.word	0x40a00000
 8002288:	c0a00000 	.word	0xc0a00000
 800228c:	080128d0 	.word	0x080128d0
 8002290:	40020000 	.word	0x40020000

08002294 <_Z17QuaternionProductPfS_>:
 * @return float product-Quaternion
 * 
 * --Custom Method!
 */
float *QuaternionProduct(float *q1, float *q2)
{
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  static float q3[4];
  q3[0] = (q1[0] * q2[0]) - (q1[1] * q2[1]) - (q1[2] * q2[2]) - (q1[3] * q2[3]);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4619      	mov	r1, r3
 80022a8:	4610      	mov	r0, r2
 80022aa:	f7fe fda7 	bl	8000dfc <__aeabi_fmul>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461c      	mov	r4, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3304      	adds	r3, #4
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	3304      	adds	r3, #4
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4619      	mov	r1, r3
 80022c0:	4610      	mov	r0, r2
 80022c2:	f7fe fd9b 	bl	8000dfc <__aeabi_fmul>
 80022c6:	4603      	mov	r3, r0
 80022c8:	4619      	mov	r1, r3
 80022ca:	4620      	mov	r0, r4
 80022cc:	f7fe fc8c 	bl	8000be8 <__aeabi_fsub>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461c      	mov	r4, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3308      	adds	r3, #8
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	3308      	adds	r3, #8
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	4610      	mov	r0, r2
 80022e4:	f7fe fd8a 	bl	8000dfc <__aeabi_fmul>
 80022e8:	4603      	mov	r3, r0
 80022ea:	4619      	mov	r1, r3
 80022ec:	4620      	mov	r0, r4
 80022ee:	f7fe fc7b 	bl	8000be8 <__aeabi_fsub>
 80022f2:	4603      	mov	r3, r0
 80022f4:	461c      	mov	r4, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	330c      	adds	r3, #12
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	330c      	adds	r3, #12
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4619      	mov	r1, r3
 8002304:	4610      	mov	r0, r2
 8002306:	f7fe fd79 	bl	8000dfc <__aeabi_fmul>
 800230a:	4603      	mov	r3, r0
 800230c:	4619      	mov	r1, r3
 800230e:	4620      	mov	r0, r4
 8002310:	f7fe fc6a 	bl	8000be8 <__aeabi_fsub>
 8002314:	4603      	mov	r3, r0
 8002316:	461a      	mov	r2, r3
 8002318:	4b61      	ldr	r3, [pc, #388]	; (80024a0 <_Z17QuaternionProductPfS_+0x20c>)
 800231a:	601a      	str	r2, [r3, #0]
  q3[1] = (q1[0] * q2[1]) + (q1[1] * q2[0]) + (q1[2] * q2[3]) - (q1[3] * q2[2]);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	3304      	adds	r3, #4
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4619      	mov	r1, r3
 8002328:	4610      	mov	r0, r2
 800232a:	f7fe fd67 	bl	8000dfc <__aeabi_fmul>
 800232e:	4603      	mov	r3, r0
 8002330:	461c      	mov	r4, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4619      	mov	r1, r3
 800233e:	4610      	mov	r0, r2
 8002340:	f7fe fd5c 	bl	8000dfc <__aeabi_fmul>
 8002344:	4603      	mov	r3, r0
 8002346:	4619      	mov	r1, r3
 8002348:	4620      	mov	r0, r4
 800234a:	f7fe fc4f 	bl	8000bec <__addsf3>
 800234e:	4603      	mov	r3, r0
 8002350:	461c      	mov	r4, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3308      	adds	r3, #8
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	330c      	adds	r3, #12
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4619      	mov	r1, r3
 8002360:	4610      	mov	r0, r2
 8002362:	f7fe fd4b 	bl	8000dfc <__aeabi_fmul>
 8002366:	4603      	mov	r3, r0
 8002368:	4619      	mov	r1, r3
 800236a:	4620      	mov	r0, r4
 800236c:	f7fe fc3e 	bl	8000bec <__addsf3>
 8002370:	4603      	mov	r3, r0
 8002372:	461c      	mov	r4, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	330c      	adds	r3, #12
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	3308      	adds	r3, #8
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4619      	mov	r1, r3
 8002382:	4610      	mov	r0, r2
 8002384:	f7fe fd3a 	bl	8000dfc <__aeabi_fmul>
 8002388:	4603      	mov	r3, r0
 800238a:	4619      	mov	r1, r3
 800238c:	4620      	mov	r0, r4
 800238e:	f7fe fc2b 	bl	8000be8 <__aeabi_fsub>
 8002392:	4603      	mov	r3, r0
 8002394:	461a      	mov	r2, r3
 8002396:	4b42      	ldr	r3, [pc, #264]	; (80024a0 <_Z17QuaternionProductPfS_+0x20c>)
 8002398:	605a      	str	r2, [r3, #4]
  q3[2] = (q1[0] * q2[2]) - (q1[1] * q2[3]) + (q1[2] * q2[0]) + (q1[3] * q2[1]);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	3308      	adds	r3, #8
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	4610      	mov	r0, r2
 80023a8:	f7fe fd28 	bl	8000dfc <__aeabi_fmul>
 80023ac:	4603      	mov	r3, r0
 80023ae:	461c      	mov	r4, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3304      	adds	r3, #4
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	330c      	adds	r3, #12
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	4610      	mov	r0, r2
 80023c0:	f7fe fd1c 	bl	8000dfc <__aeabi_fmul>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4619      	mov	r1, r3
 80023c8:	4620      	mov	r0, r4
 80023ca:	f7fe fc0d 	bl	8000be8 <__aeabi_fsub>
 80023ce:	4603      	mov	r3, r0
 80023d0:	461c      	mov	r4, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3308      	adds	r3, #8
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f7fe fd0c 	bl	8000dfc <__aeabi_fmul>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4619      	mov	r1, r3
 80023e8:	4620      	mov	r0, r4
 80023ea:	f7fe fbff 	bl	8000bec <__addsf3>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461c      	mov	r4, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	330c      	adds	r3, #12
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	3304      	adds	r3, #4
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4619      	mov	r1, r3
 8002400:	4610      	mov	r0, r2
 8002402:	f7fe fcfb 	bl	8000dfc <__aeabi_fmul>
 8002406:	4603      	mov	r3, r0
 8002408:	4619      	mov	r1, r3
 800240a:	4620      	mov	r0, r4
 800240c:	f7fe fbee 	bl	8000bec <__addsf3>
 8002410:	4603      	mov	r3, r0
 8002412:	461a      	mov	r2, r3
 8002414:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <_Z17QuaternionProductPfS_+0x20c>)
 8002416:	609a      	str	r2, [r3, #8]
  q3[3] = (q1[0] * q2[3]) + (q1[1] * q2[2]) - (q1[2] * q2[1]) + (q1[3] * q2[0]);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	330c      	adds	r3, #12
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	4610      	mov	r0, r2
 8002426:	f7fe fce9 	bl	8000dfc <__aeabi_fmul>
 800242a:	4603      	mov	r3, r0
 800242c:	461c      	mov	r4, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3304      	adds	r3, #4
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	3308      	adds	r3, #8
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4619      	mov	r1, r3
 800243c:	4610      	mov	r0, r2
 800243e:	f7fe fcdd 	bl	8000dfc <__aeabi_fmul>
 8002442:	4603      	mov	r3, r0
 8002444:	4619      	mov	r1, r3
 8002446:	4620      	mov	r0, r4
 8002448:	f7fe fbd0 	bl	8000bec <__addsf3>
 800244c:	4603      	mov	r3, r0
 800244e:	461c      	mov	r4, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3308      	adds	r3, #8
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	3304      	adds	r3, #4
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	4610      	mov	r0, r2
 8002460:	f7fe fccc 	bl	8000dfc <__aeabi_fmul>
 8002464:	4603      	mov	r3, r0
 8002466:	4619      	mov	r1, r3
 8002468:	4620      	mov	r0, r4
 800246a:	f7fe fbbd 	bl	8000be8 <__aeabi_fsub>
 800246e:	4603      	mov	r3, r0
 8002470:	461c      	mov	r4, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	330c      	adds	r3, #12
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f7fe fcbc 	bl	8000dfc <__aeabi_fmul>
 8002484:	4603      	mov	r3, r0
 8002486:	4619      	mov	r1, r3
 8002488:	4620      	mov	r0, r4
 800248a:	f7fe fbaf 	bl	8000bec <__addsf3>
 800248e:	4603      	mov	r3, r0
 8002490:	461a      	mov	r2, r3
 8002492:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <_Z17QuaternionProductPfS_+0x20c>)
 8002494:	60da      	str	r2, [r3, #12]
  return q3;
 8002496:	4b02      	ldr	r3, [pc, #8]	; (80024a0 <_Z17QuaternionProductPfS_+0x20c>)
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bd90      	pop	{r4, r7, pc}
 80024a0:	20000500 	.word	0x20000500

080024a4 <_Z17QuaternionInversePf>:
 * @return float inverse Quaternion
 * 
 * --Custom Method!
 */
float *QuaternionInverse(float *q1)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  static float qi[4];
  qi[0] = q1[0];
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <_Z17QuaternionInversePf+0x48>)
 80024b2:	6013      	str	r3, [r2, #0]
  qi[1] = q1[1] * -1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3304      	adds	r3, #4
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024be:	4a0b      	ldr	r2, [pc, #44]	; (80024ec <_Z17QuaternionInversePf+0x48>)
 80024c0:	6053      	str	r3, [r2, #4]
  qi[2] = q1[2] * -1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3308      	adds	r3, #8
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024cc:	4a07      	ldr	r2, [pc, #28]	; (80024ec <_Z17QuaternionInversePf+0x48>)
 80024ce:	6093      	str	r3, [r2, #8]
  qi[3] = q1[3] * -1;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	330c      	adds	r3, #12
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024da:	4a04      	ldr	r2, [pc, #16]	; (80024ec <_Z17QuaternionInversePf+0x48>)
 80024dc:	60d3      	str	r3, [r2, #12]
  return qi;
 80024de:	4b03      	ldr	r3, [pc, #12]	; (80024ec <_Z17QuaternionInversePf+0x48>)
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000510 	.word	0x20000510

080024f0 <_Z15QuaternionSLERPPfS_>:
 * @return float interpolation quaternion
 * 
 * --Custom Method!
 */
float * QuaternionSLERP(float *q1, float *q2)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  return QuaternionProduct(&q2[0], QuaternionInverse(&q1[0]));
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff ffd2 	bl	80024a4 <_Z17QuaternionInversePf>
 8002500:	4603      	mov	r3, r0
 8002502:	4619      	mov	r1, r3
 8002504:	6838      	ldr	r0, [r7, #0]
 8002506:	f7ff fec5 	bl	8002294 <_Z17QuaternionProductPfS_>
 800250a:	4603      	mov	r3, r0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <_Z19QuaternionNormalizePf>:
 * @return float* pointer to normalized quaternion
 * 
 * --Custom Method!
 */
float *QuaternionNormalize(float *q1)
{
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  float vectorlength = sqrt((q1[0] * q1[0]) + (q1[1] * q1[1]) + (q1[2] * q1[2]) + (q1[3] * q1[3]));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	4610      	mov	r0, r2
 8002528:	f7fe fc68 	bl	8000dfc <__aeabi_fmul>
 800252c:	4603      	mov	r3, r0
 800252e:	461c      	mov	r4, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3304      	adds	r3, #4
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3304      	adds	r3, #4
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f7fe fc5c 	bl	8000dfc <__aeabi_fmul>
 8002544:	4603      	mov	r3, r0
 8002546:	4619      	mov	r1, r3
 8002548:	4620      	mov	r0, r4
 800254a:	f7fe fb4f 	bl	8000bec <__addsf3>
 800254e:	4603      	mov	r3, r0
 8002550:	461c      	mov	r4, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3308      	adds	r3, #8
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3308      	adds	r3, #8
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4619      	mov	r1, r3
 8002560:	4610      	mov	r0, r2
 8002562:	f7fe fc4b 	bl	8000dfc <__aeabi_fmul>
 8002566:	4603      	mov	r3, r0
 8002568:	4619      	mov	r1, r3
 800256a:	4620      	mov	r0, r4
 800256c:	f7fe fb3e 	bl	8000bec <__addsf3>
 8002570:	4603      	mov	r3, r0
 8002572:	461c      	mov	r4, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	330c      	adds	r3, #12
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	330c      	adds	r3, #12
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f7fe fc3a 	bl	8000dfc <__aeabi_fmul>
 8002588:	4603      	mov	r3, r0
 800258a:	4619      	mov	r1, r3
 800258c:	4620      	mov	r0, r4
 800258e:	f7fe fb2d 	bl	8000bec <__addsf3>
 8002592:	4603      	mov	r3, r0
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fafb 	bl	8001b90 <_ZSt4sqrtf>
 800259a:	60f8      	str	r0, [r7, #12]
  static float qn[4];
  qn[0] = q1[0] / vectorlength;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68f9      	ldr	r1, [r7, #12]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fcde 	bl	8000f64 <__aeabi_fdiv>
 80025a8:	4603      	mov	r3, r0
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <_Z19QuaternionNormalizePf+0xe8>)
 80025ae:	601a      	str	r2, [r3, #0]
  qn[1] = q1[1] / vectorlength;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3304      	adds	r3, #4
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68f9      	ldr	r1, [r7, #12]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fcd3 	bl	8000f64 <__aeabi_fdiv>
 80025be:	4603      	mov	r3, r0
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <_Z19QuaternionNormalizePf+0xe8>)
 80025c4:	605a      	str	r2, [r3, #4]
  qn[2] = q1[2] / vectorlength;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3308      	adds	r3, #8
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68f9      	ldr	r1, [r7, #12]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fcc8 	bl	8000f64 <__aeabi_fdiv>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <_Z19QuaternionNormalizePf+0xe8>)
 80025da:	609a      	str	r2, [r3, #8]
  qn[3] = q1[3] / vectorlength;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	330c      	adds	r3, #12
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68f9      	ldr	r1, [r7, #12]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fcbd 	bl	8000f64 <__aeabi_fdiv>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b03      	ldr	r3, [pc, #12]	; (80025fc <_Z19QuaternionNormalizePf+0xe8>)
 80025f0:	60da      	str	r2, [r3, #12]
  return qn;
 80025f2:	4b02      	ldr	r3, [pc, #8]	; (80025fc <_Z19QuaternionNormalizePf+0xe8>)
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd90      	pop	{r4, r7, pc}
 80025fc:	20000520 	.word	0x20000520

08002600 <_ZN7MPU6050C1Ev>:


/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
    devAddr = MPU6050_DEFAULT_ADDRESS;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	22d0      	movs	r2, #208	; 0xd0
 800260c:	719a      	strb	r2, [r3, #6]
}
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 8002622:	2101      	movs	r1, #1
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f951 	bl	80028cc <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 800262a:	2100      	movs	r1, #0
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f843 	bl	80026b8 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8002632:	2100      	movs	r1, #0
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f852 	bl	80026de <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 800263a:	2100      	movs	r1, #0
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f934 	bl	80028aa <_ZN7MPU605015setSleepEnabledEb>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <_ZN7MPU60507setRateEh>:
/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050::setRate(uint8_t rate) {
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	799b      	ldrb	r3, [r3, #6]
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	2119      	movs	r1, #25
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff f9c4 	bl	80019ec <_Z9writeBytehhh>
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <_ZN7MPU605020setExternalFrameSyncEh>:
/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG
 * @param sync New FSYNC configuration value
 */
void MPU6050::setExternalFrameSync(uint8_t sync) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af02      	add	r7, sp, #8
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	7998      	ldrb	r0, [r3, #6]
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2303      	movs	r3, #3
 8002682:	2205      	movs	r2, #5
 8002684:	211a      	movs	r1, #26
 8002686:	f7ff f925 	bl	80018d4 <_Z9writeBitshhhhh>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <_ZN7MPU605011setDLPFModeEh>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode) {
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af02      	add	r7, sp, #8
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	460b      	mov	r3, r1
 800269c:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7998      	ldrb	r0, [r3, #6]
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2303      	movs	r3, #3
 80026a8:	2202      	movs	r2, #2
 80026aa:	211a      	movs	r1, #26
 80026ac:	f7ff f912 	bl	80018d4 <_Z9writeBitshhhhh>
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af02      	add	r7, sp, #8
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7998      	ldrb	r0, [r3, #6]
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	2302      	movs	r3, #2
 80026ce:	2204      	movs	r2, #4
 80026d0:	211b      	movs	r1, #27
 80026d2:	f7ff f8ff 	bl	80018d4 <_Z9writeBitshhhhh>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af02      	add	r7, sp, #8
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7998      	ldrb	r0, [r3, #6]
 80026ee:	78fb      	ldrb	r3, [r7, #3]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	2302      	movs	r3, #2
 80026f4:	2204      	movs	r2, #4
 80026f6:	211c      	movs	r1, #28
 80026f8:	f7ff f8ec 	bl	80018d4 <_Z9writeBitshhhhh>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <_ZN7MPU605027setMotionDetectionThresholdEh>:
/** Set motion detection event acceleration threshold.
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050::setMotionDetectionThreshold(uint8_t threshold) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MOT_THR, threshold);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	799b      	ldrb	r3, [r3, #6]
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	211f      	movs	r1, #31
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff f967 	bl	80019ec <_Z9writeBytehhh>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <_ZN7MPU605026setMotionDetectionDurationEh>:
/** Set motion detection event duration threshold.
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050::setMotionDetectionDuration(uint8_t duration) {
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MOT_DUR, duration);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	799b      	ldrb	r3, [r3, #6]
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	2120      	movs	r1, #32
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff f956 	bl	80019ec <_Z9writeBytehhh>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
/** Set zero motion detection event acceleration threshold.
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	799b      	ldrb	r3, [r3, #6]
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	2121      	movs	r1, #33	; 0x21
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff f945 	bl	80019ec <_Z9writeBytehhh>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
/** Set zero motion detection event duration threshold.
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	460b      	mov	r3, r1
 8002774:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	799b      	ldrb	r3, [r3, #6]
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	2122      	movs	r1, #34	; 0x22
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff f934 	bl	80019ec <_Z9writeBytehhh>
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <_ZN7MPU605015setSlaveAddressEhh>:
 * @param num Slave number (0-3)
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
 8002798:	4613      	mov	r3, r2
 800279a:	70bb      	strb	r3, [r7, #2]
    if (num > 3) return;
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d80d      	bhi.n	80027be <_ZN7MPU605015setSlaveAddressEhh+0x32>
    writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7998      	ldrb	r0, [r3, #6]
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	461a      	mov	r2, r3
 80027aa:	0052      	lsls	r2, r2, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	3325      	adds	r3, #37	; 0x25
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	78ba      	ldrb	r2, [r7, #2]
 80027b6:	4619      	mov	r1, r3
 80027b8:	f7ff f918 	bl	80019ec <_Z9writeBytehhh>
 80027bc:	e000      	b.n	80027c0 <_ZN7MPU605015setSlaveAddressEhh+0x34>
    if (num > 3) return;
 80027be:	bf00      	nop
}
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <_ZN7MPU605013setIntEnabledEh>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050::setIntEnabled(uint8_t enabled) {
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	799b      	ldrb	r3, [r3, #6]
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	2138      	movs	r1, #56	; 0x38
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff f906 	bl	80019ec <_Z9writeBytehhh>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
    readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7998      	ldrb	r0, [r3, #6]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3307      	adds	r3, #7
 80027f8:	461a      	mov	r2, r3
 80027fa:	213a      	movs	r1, #58	; 0x3a
 80027fc:	f7fe ff3e 	bl	800167c <_Z8readBytehhPh>
    return buffer[0];
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	79db      	ldrb	r3, [r3, #7]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <_ZN7MPU605014setFIFOEnabledEb>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050::setFIFOEnabled(bool enabled) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7998      	ldrb	r0, [r3, #6]
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	2206      	movs	r2, #6
 8002820:	216a      	movs	r1, #106	; 0x6a
 8002822:	f7fe ffdb 	bl	80017dc <_Z8writeBithhhh>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <_ZN7MPU605023setI2CMasterModeEnabledEb>:
 * @param enabled New I2C Master Mode enabled status
 * @see getI2CMasterModeEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
 */
void MPU6050::setI2CMasterModeEnabled(bool enabled) {
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	7998      	ldrb	r0, [r3, #6]
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	2205      	movs	r2, #5
 8002842:	216a      	movs	r1, #106	; 0x6a
 8002844:	f7fe ffca 	bl	80017dc <_Z8writeBithhhh>
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_ZN7MPU60509resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7998      	ldrb	r0, [r3, #6]
 800285c:	2301      	movs	r3, #1
 800285e:	2202      	movs	r2, #2
 8002860:	216a      	movs	r1, #106	; 0x6a
 8002862:	f7fe ffbb 	bl	80017dc <_Z8writeBithhhh>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <_ZN7MPU605014resetI2CMasterEv>:
 * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050::resetI2CMaster() {
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	7998      	ldrb	r0, [r3, #6]
 800287a:	2301      	movs	r3, #1
 800287c:	2201      	movs	r2, #1
 800287e:	216a      	movs	r1, #106	; 0x6a
 8002880:	f7fe ffac 	bl	80017dc <_Z8writeBithhhh>
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <_ZN7MPU60505resetEv>:
/** Trigger a full device reset.
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050::reset() {
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7998      	ldrb	r0, [r3, #6]
 8002898:	2301      	movs	r3, #1
 800289a:	2207      	movs	r2, #7
 800289c:	216b      	movs	r1, #107	; 0x6b
 800289e:	f7fe ff9d 	bl	80017dc <_Z8writeBithhhh>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	460b      	mov	r3, r1
 80028b4:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7998      	ldrb	r0, [r3, #6]
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	2206      	movs	r2, #6
 80028be:	216b      	movs	r1, #107	; 0x6b
 80028c0:	f7fe ff8c 	bl	80017dc <_Z8writeBithhhh>
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7998      	ldrb	r0, [r3, #6]
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	2303      	movs	r3, #3
 80028e2:	2202      	movs	r2, #2
 80028e4:	216b      	movs	r1, #107	; 0x6b
 80028e6:	f7fe fff5 	bl	80018d4 <_Z9writeBitshhhhh>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
    readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	7998      	ldrb	r0, [r3, #6]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3307      	adds	r3, #7
 8002902:	2202      	movs	r2, #2
 8002904:	2172      	movs	r1, #114	; 0x72
 8002906:	f7fe fef3 	bl	80016f0 <_Z9readByteshhhPh>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	79db      	ldrb	r3, [r3, #7]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	b21a      	sxth	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7a1b      	ldrb	r3, [r3, #8]
 8002916:	b21b      	sxth	r3, r3
 8002918:	4313      	orrs	r3, r2
 800291a:	b21b      	sxth	r3, r3
 800291c:	b29b      	uxth	r3, r3
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	4613      	mov	r3, r2
 8002932:	71fb      	strb	r3, [r7, #7]
    if(length > 0){
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <_ZN7MPU605012getFIFOBytesEPhh+0x24>
        readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	7998      	ldrb	r0, [r3, #6]
 800293e:	79fa      	ldrb	r2, [r7, #7]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2174      	movs	r1, #116	; 0x74
 8002944:	f7fe fed4 	bl	80016f0 <_Z9readByteshhhPh>
    } else {
    	*data = 0;
    }
}
 8002948:	e002      	b.n	8002950 <_ZN7MPU605012getFIFOBytesEPhh+0x2a>
    	*data = 0;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
}
 8002950:	bf00      	nop
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <_ZN7MPU605015setOTPBankValidEb>:

uint8_t MPU6050::getOTPBankValid() {
    readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);
    return buffer[0];
}
void MPU6050::setOTPBankValid(bool enabled) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7998      	ldrb	r0, [r3, #6]
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	f7fe ff35 	bl	80017dc <_Z8writeBithhhh>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_ZN7MPU605016getXGyroOffsetTCEv>:
int8_t MPU6050::getXGyroOffsetTC() {
 800297a:	b580      	push	{r7, lr}
 800297c:	b084      	sub	sp, #16
 800297e:	af02      	add	r7, sp, #8
 8002980:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7998      	ldrb	r0, [r3, #6]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3307      	adds	r3, #7
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2306      	movs	r3, #6
 800298e:	2206      	movs	r2, #6
 8002990:	2100      	movs	r1, #0
 8002992:	f7fe fe15 	bl	80015c0 <_Z8readBitshhhhPh>
    return buffer[0];
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	79db      	ldrb	r3, [r3, #7]
 800299a:	b25b      	sxtb	r3, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <_ZN7MPU605016setXGyroOffsetTCEa>:
void MPU6050::setXGyroOffsetTC(int8_t offset) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7998      	ldrb	r0, [r3, #6]
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2306      	movs	r3, #6
 80029ba:	2206      	movs	r2, #6
 80029bc:	2100      	movs	r1, #0
 80029be:	f7fe ff89 	bl	80018d4 <_Z9writeBitshhhhh>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <_ZN7MPU605016getYGyroOffsetTCEv>:

// YG_OFFS_TC register

int8_t MPU6050::getYGyroOffsetTC() {
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af02      	add	r7, sp, #8
 80029d0:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	7998      	ldrb	r0, [r3, #6]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3307      	adds	r3, #7
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	2306      	movs	r3, #6
 80029de:	2206      	movs	r2, #6
 80029e0:	2101      	movs	r1, #1
 80029e2:	f7fe fded 	bl	80015c0 <_Z8readBitshhhhPh>
    return buffer[0];
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	79db      	ldrb	r3, [r3, #7]
 80029ea:	b25b      	sxtb	r3, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <_ZN7MPU605016setYGyroOffsetTCEa>:
void MPU6050::setYGyroOffsetTC(int8_t offset) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	7998      	ldrb	r0, [r3, #6]
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	2306      	movs	r3, #6
 8002a0a:	2206      	movs	r2, #6
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	f7fe ff61 	bl	80018d4 <_Z9writeBitshhhhh>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <_ZN7MPU605016getZGyroOffsetTCEv>:

// ZG_OFFS_TC register

int8_t MPU6050::getZGyroOffsetTC() {
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af02      	add	r7, sp, #8
 8002a20:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	7998      	ldrb	r0, [r3, #6]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3307      	adds	r3, #7
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	2306      	movs	r3, #6
 8002a2e:	2206      	movs	r2, #6
 8002a30:	2102      	movs	r1, #2
 8002a32:	f7fe fdc5 	bl	80015c0 <_Z8readBitshhhhPh>
    return buffer[0];
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	79db      	ldrb	r3, [r3, #7]
 8002a3a:	b25b      	sxtb	r3, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_ZN7MPU605016setZGyroOffsetTCEa>:
void MPU6050::setZGyroOffsetTC(int8_t offset) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7998      	ldrb	r0, [r3, #6]
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2306      	movs	r3, #6
 8002a5a:	2206      	movs	r2, #6
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	f7fe ff39 	bl	80018d4 <_Z9writeBitshhhhh>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <_ZN7MPU605015setXAccelOffsetEs>:

int16_t MPU6050::getXAccelOffset() {
    readBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	799b      	ldrb	r3, [r3, #6]
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	2106      	movs	r1, #6
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe ffec 	bl	8001a5c <_Z9writeWordhht>
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <_ZN7MPU605015setYAccelOffsetEs>:

int16_t MPU6050::getYAccelOffset() {
    readBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	799b      	ldrb	r3, [r3, #6]
 8002a9c:	887a      	ldrh	r2, [r7, #2]
 8002a9e:	2108      	movs	r1, #8
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe ffdb 	bl	8001a5c <_Z9writeWordhht>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <_ZN7MPU605015setZAccelOffsetEs>:

int16_t MPU6050::getZAccelOffset() {
    readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	799b      	ldrb	r3, [r3, #6]
 8002abe:	887a      	ldrh	r2, [r7, #2]
 8002ac0:	210a      	movs	r1, #10
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe ffca 	bl	8001a5c <_Z9writeWordhht>
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_ZN7MPU605014setXGyroOffsetEs>:

int16_t MPU6050::getXGyroOffset() {
    readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	799b      	ldrb	r3, [r3, #6]
 8002ae0:	887a      	ldrh	r2, [r7, #2]
 8002ae2:	2113      	movs	r1, #19
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe ffb9 	bl	8001a5c <_Z9writeWordhht>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <_ZN7MPU605014setYGyroOffsetEs>:

int16_t MPU6050::getYGyroOffset() {
    readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	460b      	mov	r3, r1
 8002afc:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	799b      	ldrb	r3, [r3, #6]
 8002b02:	887a      	ldrh	r2, [r7, #2]
 8002b04:	2115      	movs	r1, #21
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe ffa8 	bl	8001a5c <_Z9writeWordhht>
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <_ZN7MPU605014setZGyroOffsetEs>:

int16_t MPU6050::getZGyroOffset() {
    readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	799b      	ldrb	r3, [r3, #6]
 8002b24:	887a      	ldrh	r2, [r7, #2]
 8002b26:	2117      	movs	r1, #23
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fe ff97 	bl	8001a5c <_Z9writeWordhht>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <_ZN7MPU605013getDMPEnabledEv>:
    return buffer[0];
}

// USER_CTRL register (DMP functions)

bool MPU6050::getDMPEnabled() {
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
    readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	7998      	ldrb	r0, [r3, #6]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3307      	adds	r3, #7
 8002b46:	2207      	movs	r2, #7
 8002b48:	216a      	movs	r1, #106	; 0x6a
 8002b4a:	f7fe fcf5 	bl	8001538 <_Z7readBithhhPh>
    return buffer[0];
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	79db      	ldrb	r3, [r3, #7]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	bf14      	ite	ne
 8002b56:	2301      	movne	r3, #1
 8002b58:	2300      	moveq	r3, #0
 8002b5a:	b2db      	uxtb	r3, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_ZN7MPU605013setDMPEnabledEb>:
void MPU6050::setDMPEnabled(bool enabled) {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7998      	ldrb	r0, [r3, #6]
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	2207      	movs	r2, #7
 8002b78:	216a      	movs	r1, #106	; 0x6a
 8002b7a:	f7fe fe2f 	bl	80017dc <_Z8writeBithhhh>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <_ZN7MPU60508resetDMPEv>:
void MPU6050::resetDMP() {
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	7998      	ldrb	r0, [r3, #6]
 8002b92:	2301      	movs	r3, #1
 8002b94:	2203      	movs	r2, #3
 8002b96:	216a      	movs	r1, #106	; 0x6a
 8002b98:	f7fe fe20 	bl	80017dc <_Z8writeBithhhh>
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_ZN7MPU605013setMemoryBankEhbb>:

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	4608      	mov	r0, r1
 8002bae:	4611      	mov	r1, r2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	70fb      	strb	r3, [r7, #3]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	70bb      	strb	r3, [r7, #2]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	707b      	strb	r3, [r7, #1]
    bank &= 0x1F;
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	70fb      	strb	r3, [r7, #3]
    if (userBank) bank |= 0x20;
 8002bc6:	787b      	ldrb	r3, [r7, #1]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <_ZN7MPU605013setMemoryBankEhbb+0x30>
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f043 0320 	orr.w	r3, r3, #32
 8002bd2:	70fb      	strb	r3, [r7, #3]
    if (prefetchEnabled) bank |= 0x40;
 8002bd4:	78bb      	ldrb	r3, [r7, #2]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <_ZN7MPU605013setMemoryBankEhbb+0x3e>
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be0:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	799b      	ldrb	r3, [r3, #6]
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	216d      	movs	r1, #109	; 0x6d
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe fefe 	bl	80019ec <_Z9writeBytehhh>
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_ZN7MPU605021setMemoryStartAddressEh>:

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	799b      	ldrb	r3, [r3, #6]
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	216e      	movs	r1, #110	; 0x6e
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe feed 	bl	80019ec <_Z9writeBytehhh>
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <_ZN7MPU605015readMemoryBlockEPhthh>:
    return buffer[0];
}
void MPU6050::writeMemoryByte(uint8_t data) {
    writeByte(devAddr, MPU6050_RA_MEM_R_W, data);
}
void MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b086      	sub	sp, #24
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	4611      	mov	r1, r2
 8002c26:	461a      	mov	r2, r3
 8002c28:	460b      	mov	r3, r1
 8002c2a:	80fb      	strh	r3, [r7, #6]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002c30:	7979      	ldrb	r1, [r7, #5]
 8002c32:	2300      	movs	r3, #0
 8002c34:	2200      	movs	r2, #0
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f7ff ffb4 	bl	8002ba4 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002c3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c40:	4619      	mov	r1, r3
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f7ff ffd8 	bl	8002bf8 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
 8002c48:	2300      	movs	r3, #0
 8002c4a:	82bb      	strh	r3, [r7, #20]
 8002c4c:	8aba      	ldrh	r2, [r7, #20]
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d244      	bcs.n	8002cde <_ZN7MPU605015readMemoryBlockEPhthh+0xc4>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002c54:	2310      	movs	r3, #16
 8002c56:	75fb      	strb	r3, [r7, #23]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002c58:	8aba      	ldrh	r2, [r7, #20]
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
 8002c5c:	441a      	add	r2, r3
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	dd05      	ble.n	8002c70 <_ZN7MPU605015readMemoryBlockEPhthh+0x56>
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	8abb      	ldrh	r3, [r7, #20]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	75fb      	strb	r3, [r7, #23]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002c70:	7dfa      	ldrb	r2, [r7, #23]
 8002c72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c76:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	dd03      	ble.n	8002c86 <_ZN7MPU605015readMemoryBlockEPhthh+0x6c>
 8002c7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c82:	425b      	negs	r3, r3
 8002c84:	75fb      	strb	r3, [r7, #23]

        // read the chunk of data as specified
        readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	7998      	ldrb	r0, [r3, #6]
 8002c8a:	8abb      	ldrh	r3, [r7, #20]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	4413      	add	r3, r2
 8002c90:	7dfa      	ldrb	r2, [r7, #23]
 8002c92:	216f      	movs	r1, #111	; 0x6f
 8002c94:	f7fe fd2c 	bl	80016f0 <_Z9readByteshhhPh>
        
        // increase byte index by [chunkSize]
        i += chunkSize;
 8002c98:	7dfb      	ldrb	r3, [r7, #23]
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	8abb      	ldrh	r3, [r7, #20]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	82bb      	strh	r3, [r7, #20]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002ca2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f887 3020 	strb.w	r3, [r7, #32]

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002cae:	8aba      	ldrh	r2, [r7, #20]
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d2ca      	bcs.n	8002c4c <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
            if (address == 0) bank++;
 8002cb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <_ZN7MPU605015readMemoryBlockEPhthh+0xaa>
 8002cbe:	797b      	ldrb	r3, [r7, #5]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002cc4:	7979      	ldrb	r1, [r7, #5]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2200      	movs	r2, #0
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f7ff ff6a 	bl	8002ba4 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002cd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7ff ff8e 	bl	8002bf8 <_ZN7MPU605021setMemoryStartAddressEh>
    for (uint16_t i = 0; i < dataSize;) {
 8002cdc:	e7b6      	b.n	8002c4c <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
        }
    }
}
 8002cde:	bf00      	nop
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>:
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b088      	sub	sp, #32
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	80fb      	strh	r3, [r7, #6]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002cfc:	7979      	ldrb	r1, [r7, #5]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	2200      	movs	r2, #0
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f7ff ff4e 	bl	8002ba4 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002d08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f7ff ff72 	bl	8002bf8 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]
    uint8_t *progBuffer=0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002d1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d004      	beq.n	8002d2e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x48>
 8002d24:	2010      	movs	r0, #16
 8002d26:	f00c ff09 	bl	800fb3c <malloc>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002d2e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d004      	beq.n	8002d40 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5a>
 8002d36:	2010      	movs	r0, #16
 8002d38:	f00c ff00 	bl	800fb3c <malloc>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < dataSize;) {
 8002d40:	2300      	movs	r3, #0
 8002d42:	827b      	strh	r3, [r7, #18]
 8002d44:	8a7a      	ldrh	r2, [r7, #18]
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	f080 808e 	bcs.w	8002e6a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x184>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002d4e:	2310      	movs	r3, #16
 8002d50:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002d52:	8a7a      	ldrh	r2, [r7, #18]
 8002d54:	7ffb      	ldrb	r3, [r7, #31]
 8002d56:	441a      	add	r2, r3
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	dd05      	ble.n	8002d6a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x84>
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	8a7b      	ldrh	r3, [r7, #18]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002d6a:	7ffa      	ldrb	r2, [r7, #31]
 8002d6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d70:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002d74:	429a      	cmp	r2, r3
 8002d76:	dd03      	ble.n	8002d80 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x9a>
 8002d78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d7c:	425b      	negs	r3, r3
 8002d7e:	77fb      	strb	r3, [r7, #31]
        
        if (useProgMem) {
 8002d80:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d013      	beq.n	8002db0 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xca>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 8002d88:	2300      	movs	r3, #0
 8002d8a:	747b      	strb	r3, [r7, #17]
 8002d8c:	7c7a      	ldrb	r2, [r7, #17]
 8002d8e:	7ffb      	ldrb	r3, [r7, #31]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d211      	bcs.n	8002db8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xd2>
 8002d94:	8a7a      	ldrh	r2, [r7, #18]
 8002d96:	7c7b      	ldrb	r3, [r7, #17]
 8002d98:	4413      	add	r3, r2
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	441a      	add	r2, r3
 8002d9e:	7c7b      	ldrb	r3, [r7, #17]
 8002da0:	6979      	ldr	r1, [r7, #20]
 8002da2:	440b      	add	r3, r1
 8002da4:	7812      	ldrb	r2, [r2, #0]
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	7c7b      	ldrb	r3, [r7, #17]
 8002daa:	3301      	adds	r3, #1
 8002dac:	747b      	strb	r3, [r7, #17]
 8002dae:	e7ed      	b.n	8002d8c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xa6>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 8002db0:	8a7b      	ldrh	r3, [r7, #18]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	4413      	add	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
        }

        writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	7998      	ldrb	r0, [r3, #6]
 8002dbc:	7ffa      	ldrb	r2, [r7, #31]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	216f      	movs	r1, #111	; 0x6f
 8002dc2:	f7fe fe87 	bl	8001ad4 <_Z10writeByteshhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 8002dc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d02a      	beq.n	8002e24 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d027      	beq.n	8002e24 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
            setMemoryBank(bank);
 8002dd4:	7979      	ldrb	r1, [r7, #5]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2200      	movs	r2, #0
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f7ff fee2 	bl	8002ba4 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002de0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002de4:	4619      	mov	r1, r3
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff ff06 	bl	8002bf8 <_ZN7MPU605021setMemoryStartAddressEh>
            readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	7998      	ldrb	r0, [r3, #6]
 8002df0:	7ffa      	ldrb	r2, [r7, #31]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	216f      	movs	r1, #111	; 0x6f
 8002df6:	f7fe fc7b 	bl	80016f0 <_Z9readByteshhhPh>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 8002dfa:	7ffb      	ldrb	r3, [r7, #31]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	69b9      	ldr	r1, [r7, #24]
 8002e00:	6978      	ldr	r0, [r7, #20]
 8002e02:	f00c feab 	bl	800fb5c <memcmp>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00b      	beq.n	8002e24 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
 8002e0c:	69b8      	ldr	r0, [r7, #24]
 8002e0e:	f00c fe9d 	bl	800fb4c <free>
                if (useProgMem) free(progBuffer);
 8002e12:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
 8002e1a:	6978      	ldr	r0, [r7, #20]
 8002e1c:	f00c fe96 	bl	800fb4c <free>
                return false; // uh oh.
 8002e20:	2300      	movs	r3, #0
 8002e22:	e031      	b.n	8002e88 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a2>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 8002e24:	7ffb      	ldrb	r3, [r7, #31]
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	8a7b      	ldrh	r3, [r7, #18]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002e2e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002e32:	7ffb      	ldrb	r3, [r7, #31]
 8002e34:	4413      	add	r3, r2
 8002e36:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002e3a:	8a7a      	ldrh	r2, [r7, #18]
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d280      	bcs.n	8002d44 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
            if (address == 0) bank++;
 8002e42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x16a>
 8002e4a:	797b      	ldrb	r3, [r7, #5]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002e50:	7979      	ldrb	r1, [r7, #5]
 8002e52:	2300      	movs	r3, #0
 8002e54:	2200      	movs	r2, #0
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f7ff fea4 	bl	8002ba4 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002e5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e60:	4619      	mov	r1, r3
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f7ff fec8 	bl	8002bf8 <_ZN7MPU605021setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 8002e68:	e76c      	b.n	8002d44 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
        }
    }
    if (verify) free(verifyBuffer);
 8002e6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x192>
 8002e72:	69b8      	ldr	r0, [r7, #24]
 8002e74:	f00c fe6a 	bl	800fb4c <free>
    if (useProgMem) free(progBuffer);
 8002e78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a0>
 8002e80:	6978      	ldr	r0, [r7, #20]
 8002e82:	f00c fe63 	bl	800fb4c <free>
    return true;
 8002e86:	2301      	movs	r3, #1
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3720      	adds	r7, #32
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af04      	add	r7, sp, #16
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	80fb      	strh	r3, [r7, #6]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	717b      	strb	r3, [r7, #5]
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 8002ea6:	7979      	ldrb	r1, [r7, #5]
 8002ea8:	88fa      	ldrh	r2, [r7, #6]
 8002eaa:	2301      	movs	r3, #1
 8002eac:	9302      	str	r3, [sp, #8]
 8002eae:	7f3b      	ldrb	r3, [r7, #28]
 8002eb0:	9301      	str	r3, [sp, #4]
 8002eb2:	7e3b      	ldrb	r3, [r7, #24]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f7ff ff13 	bl	8002ce6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 8002ec0:	4603      	mov	r3, r0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>:
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b08c      	sub	sp, #48	; 0x30
 8002ece:	af04      	add	r7, sp, #16
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	460b      	mov	r3, r1
 8002eda:	80fb      	strh	r3, [r7, #6]
 8002edc:	4613      	mov	r3, r2
 8002ede:	717b      	strb	r3, [r7, #5]
    uint8_t *progBuffer = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]
	uint8_t success, special;
    uint16_t i, j;
    if (useProgMem) {
 8002ee4:	797b      	ldrb	r3, [r7, #5]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d004      	beq.n	8002ef4 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2a>
        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
 8002eea:	2008      	movs	r0, #8
 8002eec:	f00c fe26 	bl	800fb3c <malloc>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	61fb      	str	r3, [r7, #28]
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	833b      	strh	r3, [r7, #24]
 8002ef8:	8b3a      	ldrh	r2, [r7, #24]
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	f080 80a1 	bcs.w	8003044 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x17a>
        if (useProgMem) {
 8002f02:	797b      	ldrb	r3, [r7, #5]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d018      	beq.n	8002f3a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x70>
            bank = pgm_read_byte(data + i++);
 8002f08:	8b3b      	ldrh	r3, [r7, #24]
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	833a      	strh	r2, [r7, #24]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4413      	add	r3, r2
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	757b      	strb	r3, [r7, #21]
            offset = pgm_read_byte(data + i++);
 8002f18:	8b3b      	ldrh	r3, [r7, #24]
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	833a      	strh	r2, [r7, #24]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4413      	add	r3, r2
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	753b      	strb	r3, [r7, #20]
            length = pgm_read_byte(data + i++);
 8002f28:	8b3b      	ldrh	r3, [r7, #24]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	833a      	strh	r2, [r7, #24]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4413      	add	r3, r2
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	74fb      	strb	r3, [r7, #19]
 8002f38:	e017      	b.n	8002f6a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xa0>
        } else {
            bank = data[i++];
 8002f3a:	8b3b      	ldrh	r3, [r7, #24]
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	833a      	strh	r2, [r7, #24]
 8002f40:	461a      	mov	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	4413      	add	r3, r2
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	757b      	strb	r3, [r7, #21]
            offset = data[i++];
 8002f4a:	8b3b      	ldrh	r3, [r7, #24]
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	833a      	strh	r2, [r7, #24]
 8002f50:	461a      	mov	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4413      	add	r3, r2
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	753b      	strb	r3, [r7, #20]
            length = data[i++];
 8002f5a:	8b3b      	ldrh	r3, [r7, #24]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	833a      	strh	r2, [r7, #24]
 8002f60:	461a      	mov	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4413      	add	r3, r2
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	74fb      	strb	r3, [r7, #19]
        }

        // write data or perform special action
        if (length > 0) {
 8002f6a:	7cfb      	ldrb	r3, [r7, #19]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d03a      	beq.n	8002fe6 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x11c>
            Serial.print(bank);
            Serial.print(", offset ");
            Serial.print(offset);
            Serial.print(", length=");
            Serial.println(length);*/
            if (useProgMem) {
 8002f70:	797b      	ldrb	r3, [r7, #5]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d01d      	beq.n	8002fb2 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xe8>
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
 8002f76:	7cfb      	ldrb	r3, [r7, #19]
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d905      	bls.n	8002f88 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xbe>
 8002f7c:	7cfb      	ldrb	r3, [r7, #19]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	69f8      	ldr	r0, [r7, #28]
 8002f82:	f00d fb07 	bl	8010594 <realloc>
 8002f86:	61f8      	str	r0, [r7, #28]
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 8002f88:	2300      	movs	r3, #0
 8002f8a:	82fb      	strh	r3, [r7, #22]
 8002f8c:	7cfb      	ldrb	r3, [r7, #19]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	8afa      	ldrh	r2, [r7, #22]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d211      	bcs.n	8002fba <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xf0>
 8002f96:	8b3a      	ldrh	r2, [r7, #24]
 8002f98:	8afb      	ldrh	r3, [r7, #22]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	441a      	add	r2, r3
 8002fa0:	8afb      	ldrh	r3, [r7, #22]
 8002fa2:	69f9      	ldr	r1, [r7, #28]
 8002fa4:	440b      	add	r3, r1
 8002fa6:	7812      	ldrb	r2, [r2, #0]
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	8afb      	ldrh	r3, [r7, #22]
 8002fac:	3301      	adds	r3, #1
 8002fae:	82fb      	strh	r3, [r7, #22]
 8002fb0:	e7ec      	b.n	8002f8c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xc2>
            } else {
                progBuffer = (uint8_t *)data + i;
 8002fb2:	8b3b      	ldrh	r3, [r7, #24]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	61fb      	str	r3, [r7, #28]
            }
            success = writeMemoryBlock(progBuffer, length, bank, offset, true);
 8002fba:	7cfb      	ldrb	r3, [r7, #19]
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	7d79      	ldrb	r1, [r7, #21]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	9302      	str	r3, [sp, #8]
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	7d3b      	ldrb	r3, [r7, #20]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	69f9      	ldr	r1, [r7, #28]
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff fe88 	bl	8002ce6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	76fb      	strb	r3, [r7, #27]
            i += length;
 8002fda:	7cfb      	ldrb	r3, [r7, #19]
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	8b3b      	ldrh	r3, [r7, #24]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	833b      	strh	r3, [r7, #24]
 8002fe4:	e022      	b.n	800302c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            // special instruction
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
            if (useProgMem) {
 8002fe6:	797b      	ldrb	r3, [r7, #5]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x134>
                special = pgm_read_byte(data + i++);
 8002fec:	8b3b      	ldrh	r3, [r7, #24]
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	833a      	strh	r2, [r7, #24]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	76bb      	strb	r3, [r7, #26]
 8002ffc:	e007      	b.n	800300e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x144>
            } else {
                special = data[i++];
 8002ffe:	8b3b      	ldrh	r3, [r7, #24]
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	833a      	strh	r2, [r7, #24]
 8003004:	461a      	mov	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	4413      	add	r3, r2
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	76bb      	strb	r3, [r7, #26]
            }
            /*Serial.print("Special command code ");
            Serial.print(special, HEX);
            Serial.println(" found...");*/
            if (special == 0x01) {
 800300e:	7ebb      	ldrb	r3, [r7, #26]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d109      	bne.n	8003028 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15e>
                // enable DMP-related interrupts
                
                //setIntZeroMotionEnabled(true);
                //setIntFIFOBufferOverflowEnabled(true);
                //setIntDMPEnabled(true);
                writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	799b      	ldrb	r3, [r3, #6]
 8003018:	2232      	movs	r2, #50	; 0x32
 800301a:	2138      	movs	r1, #56	; 0x38
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe fce5 	bl	80019ec <_Z9writeBytehhh>

                success = true;
 8003022:	2301      	movs	r3, #1
 8003024:	76fb      	strb	r3, [r7, #27]
 8003026:	e001      	b.n	800302c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            } else {
                // unknown special command
                success = false;
 8003028:	2300      	movs	r3, #0
 800302a:	76fb      	strb	r3, [r7, #27]
            }
        }
        
        if (!success) {
 800302c:	7efb      	ldrb	r3, [r7, #27]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f47f af62 	bne.w	8002ef8 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2e>
            if (useProgMem) free(progBuffer);
 8003034:	797b      	ldrb	r3, [r7, #5]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x176>
 800303a:	69f8      	ldr	r0, [r7, #28]
 800303c:	f00c fd86 	bl	800fb4c <free>
            return false; // uh oh
 8003040:	2300      	movs	r3, #0
 8003042:	e006      	b.n	8003052 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x188>
        }
    }
    if (useProgMem) free(progBuffer);
 8003044:	797b      	ldrb	r3, [r7, #5]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x186>
 800304a:	69f8      	ldr	r0, [r7, #28]
 800304c:	f00c fd7e 	bl	800fb4c <free>
    return true;
 8003050:	2301      	movs	r3, #1
}
 8003052:	4618      	mov	r0, r3
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>:
bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	4613      	mov	r3, r2
 8003066:	80fb      	strh	r3, [r7, #6]
    return writeDMPConfigurationSet(data, dataSize, true);
 8003068:	88fa      	ldrh	r2, [r7, #6]
 800306a:	2301      	movs	r3, #1
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f7ff ff2b 	bl	8002eca <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>
 8003074:	4603      	mov	r3, r0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <_ZN7MPU605013setDMPConfig1Eh>:

uint8_t MPU6050::getDMPConfig1() {
    readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig1(uint8_t config) {
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	460b      	mov	r3, r1
 8003088:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	799b      	ldrb	r3, [r3, #6]
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	2170      	movs	r1, #112	; 0x70
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe fcaa 	bl	80019ec <_Z9writeBytehhh>
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <_ZN7MPU605013setDMPConfig2Eh>:

uint8_t MPU6050::getDMPConfig2() {
    readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig2(uint8_t config) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	799b      	ldrb	r3, [r3, #6]
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	2171      	movs	r1, #113	; 0x71
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fe fc99 	bl	80019ec <_Z9writeBytehhh>
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <_ZN7MPU605013dmpInitializeEv>:


// 6_AXIS_MOTIONAPPS20
uint8_t MPU6050::dmpInitialize() {
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b0af      	sub	sp, #188	; 0xbc
 80030c8:	af04      	add	r7, sp, #16
 80030ca:	6078      	str	r0, [r7, #4]
    // reset device
    //DEBUG_PRINTLN(F("\n\nResetting MPU6050..."));
    reset();
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff fbdd 	bl	800288c <_ZN7MPU60505resetEv>
    HAL_Delay(30); // wait after reset
 80030d2:	201e      	movs	r0, #30
 80030d4:	f002 fbdc 	bl	8005890 <HAL_Delay>
    Serial.println(F("Enabling wake cycle..."));
    setWakeCycleEnabled(true);*/

    // disable sleep mode
    //DEBUG_PRINTLN(F("Disabling sleep mode..."));
    setSleepEnabled(false);
 80030d8:	2100      	movs	r1, #0
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fbe5 	bl	80028aa <_ZN7MPU605015setSleepEnabledEb>

    // get MPU hardware revision
    //DEBUG_PRINTLN(F("Selecting user bank 16..."));
    setMemoryBank(0x10, true, true);
 80030e0:	2301      	movs	r3, #1
 80030e2:	2201      	movs	r2, #1
 80030e4:	2110      	movs	r1, #16
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff fd5c 	bl	8002ba4 <_ZN7MPU605013setMemoryBankEhbb>
    //DEBUG_PRINTLN(F("Selecting memory byte 6..."));
    setMemoryStartAddress(0x06);
 80030ec:	2106      	movs	r1, #6
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff fd82 	bl	8002bf8 <_ZN7MPU605021setMemoryStartAddressEh>
    //DEBUG_PRINTLN(F("Checking hardware revision..."));
    //DEBUG_PRINT(F("Revision @ user[16][6] = "));
    //DEBUG_PRINTLNF(readMemoryByte(), HEX);
    //DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
    setMemoryBank(0, false, false);
 80030f4:	2300      	movs	r3, #0
 80030f6:	2200      	movs	r2, #0
 80030f8:	2100      	movs	r1, #0
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff fd52 	bl	8002ba4 <_ZN7MPU605013setMemoryBankEhbb>
    //DEBUG_PRINT(F("OTP bank is "));
    //DEBUG_PRINTLN(getOTPBankValid() ? F("valid!") : F("invalid!"));

    // get X/Y/Z gyro offsets
    //DEBUG_PRINTLN(F("Reading gyro offset TC values..."));
    int8_t xgOffsetTC = getXGyroOffsetTC();
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff fc3a 	bl	800297a <_ZN7MPU605016getXGyroOffsetTCEv>
 8003106:	4603      	mov	r3, r0
 8003108:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    int8_t ygOffsetTC = getYGyroOffsetTC();
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff fc5c 	bl	80029ca <_ZN7MPU605016getYGyroOffsetTCEv>
 8003112:	4603      	mov	r3, r0
 8003114:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    int8_t zgOffsetTC = getZGyroOffsetTC();
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff fc7e 	bl	8002a1a <_ZN7MPU605016getZGyroOffsetTCEv>
 800311e:	4603      	mov	r3, r0
 8003120:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    //DEBUG_PRINT(F("Z gyro offset = "));
    //DEBUG_PRINTLN(zgOffsetTC);

    // setup weird slave stuff (?)
    //DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
    setSlaveAddress(0, 0x7F);
 8003124:	227f      	movs	r2, #127	; 0x7f
 8003126:	2100      	movs	r1, #0
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff fb2f 	bl	800278c <_ZN7MPU605015setSlaveAddressEhh>
    //DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
    setI2CMasterModeEnabled(false);
 800312e:	2100      	movs	r1, #0
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff fb7c 	bl	800282e <_ZN7MPU605023setI2CMasterModeEnabledEb>
    //DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
    setSlaveAddress(0, 0x68);
 8003136:	2268      	movs	r2, #104	; 0x68
 8003138:	2100      	movs	r1, #0
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff fb26 	bl	800278c <_ZN7MPU605015setSlaveAddressEhh>
    //DEBUG_PRINTLN(F("Resetting I2C Master control..."));
    resetI2CMaster();
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff fb94 	bl	800286e <_ZN7MPU605014resetI2CMasterEv>
    HAL_Delay(20);
 8003146:	2014      	movs	r0, #20
 8003148:	f002 fba2 	bl	8005890 <HAL_Delay>

    // load DMP code into memory banks
    //DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
    //DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
    //DEBUG_PRINTLN(F(" bytes)"));
    if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) {
 800314c:	2301      	movs	r3, #1
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	2300      	movs	r3, #0
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2300      	movs	r3, #0
 8003156:	f240 7289 	movw	r2, #1929	; 0x789
 800315a:	49ce      	ldr	r1, [pc, #824]	; (8003494 <_ZN7MPU605013dmpInitializeEv+0x3d0>)
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff fe97 	bl	8002e90 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8238 	beq.w	80035da <_ZN7MPU605013dmpInitializeEv+0x516>

        // write DMP configuration
        //DEBUG_PRINT(F("Writing DMP configuration to MPU memory banks ("));
        //DEBUG_PRINT(MPU6050_DMP_CONFIG_SIZE);
        //DEBUG_PRINTLN(F(" bytes in config def)"));
        if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
 800316a:	22c0      	movs	r2, #192	; 0xc0
 800316c:	49ca      	ldr	r1, [pc, #808]	; (8003498 <_ZN7MPU605013dmpInitializeEv+0x3d4>)
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ff73 	bl	800305a <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 822d 	beq.w	80035d6 <_ZN7MPU605013dmpInitializeEv+0x512>
            //DEBUG_PRINTLN(F("Success! DMP configuration written and verified."));

            //DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
            setClockSource(MPU6050_CLOCK_PLL_ZGYRO);
 800317c:	2103      	movs	r1, #3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff fba4 	bl	80028cc <_ZN7MPU605014setClockSourceEh>

            //DEBUG_PRINTLN(F("Setting DMP and FIFO_OFLOW interrupts enabled..."));
            setIntEnabled(0x12);
 8003184:	2112      	movs	r1, #18
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff fb1d 	bl	80027c6 <_ZN7MPU605013setIntEnabledEh>

            //DEBUG_PRINTLN(F("Setting sample rate to 200Hz..."));
            setRate(4); // 1khz / (1 + 4) = 200 Hz
 800318c:	2104      	movs	r1, #4
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff fa5b 	bl	800264a <_ZN7MPU60507setRateEh>

            //DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
            setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
 8003194:	2101      	movs	r1, #1
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff fa68 	bl	800266c <_ZN7MPU605020setExternalFrameSyncEh>

            //DEBUG_PRINTLN(F("Setting DLPF bandwidth to 42Hz..."));
            setDLPFMode(MPU6050_DLPF_BW_42);
 800319c:	2103      	movs	r1, #3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff fa77 	bl	8002692 <_ZN7MPU605011setDLPFModeEh>

            //DEBUG_PRINTLN(F("Setting gyro sensitivity to +/- 2000 deg/sec..."));
            setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
 80031a4:	2103      	movs	r1, #3
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff fa86 	bl	80026b8 <_ZN7MPU605021setFullScaleGyroRangeEh>

            //DEBUG_PRINTLN(F("Setting DMP programm start address"));
            //write start address MSB into register
            setDMPConfig1(0x03);
 80031ac:	2103      	movs	r1, #3
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff ff65 	bl	800307e <_ZN7MPU605013setDMPConfig1Eh>
            //write start address LSB into register
            setDMPConfig2(0x00);
 80031b4:	2100      	movs	r1, #0
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff ff72 	bl	80030a0 <_ZN7MPU605013setDMPConfig2Eh>

            //DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
            setOTPBankValid(false);
 80031bc:	2100      	movs	r1, #0
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff fbca 	bl	8002958 <_ZN7MPU605015setOTPBankValidEb>

            //DEBUG_PRINTLN(F("Setting X/Y/Z gyro offset TCs to previous values..."));
            setXGyroOffsetTC(xgOffsetTC);
 80031c4:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 80031c8:	4619      	mov	r1, r3
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff fbea 	bl	80029a4 <_ZN7MPU605016setXGyroOffsetTCEa>
            setYGyroOffsetTC(ygOffsetTC);
 80031d0:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff fc0c 	bl	80029f4 <_ZN7MPU605016setYGyroOffsetTCEa>
            setZGyroOffsetTC(zgOffsetTC);
 80031dc:	f997 30a1 	ldrsb.w	r3, [r7, #161]	; 0xa1
 80031e0:	4619      	mov	r1, r3
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff fc2e 	bl	8002a44 <_ZN7MPU605016setZGyroOffsetTCEa>
            //setYGyroOffset(0);
            //setZGyroOffset(0);

            //DEBUG_PRINTLN(F("Writing final memory update 1/7 (function unknown)..."));
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80031ee:	2300      	movs	r3, #0
 80031f0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80031f4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d906      	bls.n	800320a <_ZN7MPU605013dmpInitializeEv+0x146>
 80031fc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003200:	1c9a      	adds	r2, r3, #2
 8003202:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003206:	429a      	cmp	r2, r3
 8003208:	db15      	blt.n	8003236 <_ZN7MPU605013dmpInitializeEv+0x172>
 800320a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800320e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003212:	49a2      	ldr	r1, [pc, #648]	; (800349c <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8003214:	5c8a      	ldrb	r2, [r1, r2]
 8003216:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800321a:	440b      	add	r3, r1
 800321c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003220:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003224:	3301      	adds	r3, #1
 8003226:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800322a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800322e:	3301      	adds	r3, #1
 8003230:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003234:	e7de      	b.n	80031f4 <_ZN7MPU605013dmpInitializeEv+0x130>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003236:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800323a:	3103      	adds	r1, #3
 800323c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003240:	b29a      	uxth	r2, r3
 8003242:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8003246:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800324a:	2400      	movs	r4, #0
 800324c:	9402      	str	r4, [sp, #8]
 800324e:	2401      	movs	r4, #1
 8003250:	9401      	str	r4, [sp, #4]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	4603      	mov	r3, r0
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff fd45 	bl	8002ce6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 2/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 800325c:	2300      	movs	r3, #0
 800325e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003262:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003266:	2b03      	cmp	r3, #3
 8003268:	d906      	bls.n	8003278 <_ZN7MPU605013dmpInitializeEv+0x1b4>
 800326a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800326e:	1c9a      	adds	r2, r3, #2
 8003270:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003274:	429a      	cmp	r2, r3
 8003276:	db15      	blt.n	80032a4 <_ZN7MPU605013dmpInitializeEv+0x1e0>
 8003278:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800327c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003280:	4986      	ldr	r1, [pc, #536]	; (800349c <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8003282:	5c8a      	ldrb	r2, [r1, r2]
 8003284:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003288:	440b      	add	r3, r1
 800328a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800328e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003292:	3301      	adds	r3, #1
 8003294:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003298:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800329c:	3301      	adds	r3, #1
 800329e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80032a2:	e7de      	b.n	8003262 <_ZN7MPU605013dmpInitializeEv+0x19e>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80032a4:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80032a8:	3103      	adds	r1, #3
 80032aa:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 80032b4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80032b8:	2400      	movs	r4, #0
 80032ba:	9402      	str	r4, [sp, #8]
 80032bc:	2401      	movs	r4, #1
 80032be:	9401      	str	r4, [sp, #4]
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	4603      	mov	r3, r0
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff fd0e 	bl	8002ce6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff fac0 	bl	8002850 <_ZN7MPU60509resetFIFOEv>

            //DEBUG_PRINTLN(F("Reading FIFO count..."));
            uint16_t fifoCount = getFIFOCount();
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff fb0e 	bl	80028f2 <_ZN7MPU605012getFIFOCountEv>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            uint8_t fifoBuffer[128];

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);
            getFIFOBytes(fifoBuffer, fifoCount);
 80032dc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	f107 030c 	add.w	r3, r7, #12
 80032e6:	4619      	mov	r1, r3
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff fb1c 	bl	8002926 <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
            setMotionDetectionThreshold(2);
 80032ee:	2102      	movs	r1, #2
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff fa07 	bl	8002704 <_ZN7MPU605027setMotionDetectionThresholdEh>

            //DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
            setZeroMotionDetectionThreshold(156);
 80032f6:	219c      	movs	r1, #156	; 0x9c
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff fa25 	bl	8002748 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>

            //DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
            setMotionDetectionDuration(80);
 80032fe:	2150      	movs	r1, #80	; 0x50
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff fa10 	bl	8002726 <_ZN7MPU605026setMotionDetectionDurationEh>

            //DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
            setZeroMotionDetectionDuration(0);
 8003306:	2100      	movs	r1, #0
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff fa2e 	bl	800276a <_ZN7MPU605030setZeroMotionDetectionDurationEh>

            //DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff fa9e 	bl	8002850 <_ZN7MPU60509resetFIFOEv>

            //DEBUG_PRINTLN(F("Enabling FIFO..."));
            setFIFOEnabled(true);
 8003314:	2101      	movs	r1, #1
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff fa78 	bl	800280c <_ZN7MPU605014setFIFOEnabledEb>

            //DEBUG_PRINTLN(F("Enabling DMP..."));
            setDMPEnabled(true);
 800331c:	2101      	movs	r1, #1
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff fc20 	bl	8002b64 <_ZN7MPU605013setDMPEnabledEb>

            //DEBUG_PRINTLN(F("Resetting DMP..."));
            resetDMP();
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff fc2e 	bl	8002b86 <_ZN7MPU60508resetDMPEv>

            //DEBUG_PRINTLN(F("Writing final memory update 3/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 800332a:	2300      	movs	r3, #0
 800332c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003330:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003334:	2b03      	cmp	r3, #3
 8003336:	d906      	bls.n	8003346 <_ZN7MPU605013dmpInitializeEv+0x282>
 8003338:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800333c:	1c9a      	adds	r2, r3, #2
 800333e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003342:	429a      	cmp	r2, r3
 8003344:	db15      	blt.n	8003372 <_ZN7MPU605013dmpInitializeEv+0x2ae>
 8003346:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800334a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800334e:	4953      	ldr	r1, [pc, #332]	; (800349c <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 8003350:	5c8a      	ldrb	r2, [r1, r2]
 8003352:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003356:	440b      	add	r3, r1
 8003358:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800335c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003360:	3301      	adds	r3, #1
 8003362:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003366:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800336a:	3301      	adds	r3, #1
 800336c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003370:	e7de      	b.n	8003330 <_ZN7MPU605013dmpInitializeEv+0x26c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003372:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003376:	3103      	adds	r1, #3
 8003378:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800337c:	b29a      	uxth	r2, r3
 800337e:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8003382:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003386:	2400      	movs	r4, #0
 8003388:	9402      	str	r4, [sp, #8]
 800338a:	2401      	movs	r4, #1
 800338c:	9401      	str	r4, [sp, #4]
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	4603      	mov	r3, r0
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff fca7 	bl	8002ce6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 4/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003398:	2300      	movs	r3, #0
 800339a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800339e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d906      	bls.n	80033b4 <_ZN7MPU605013dmpInitializeEv+0x2f0>
 80033a6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80033aa:	1c9a      	adds	r2, r3, #2
 80033ac:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033b0:	429a      	cmp	r2, r3
 80033b2:	db15      	blt.n	80033e0 <_ZN7MPU605013dmpInitializeEv+0x31c>
 80033b4:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80033b8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033bc:	4937      	ldr	r1, [pc, #220]	; (800349c <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 80033be:	5c8a      	ldrb	r2, [r1, r2]
 80033c0:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80033c4:	440b      	add	r3, r1
 80033c6:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80033ca:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033ce:	3301      	adds	r3, #1
 80033d0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80033d4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80033d8:	3301      	adds	r3, #1
 80033da:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80033de:	e7de      	b.n	800339e <_ZN7MPU605013dmpInitializeEv+0x2da>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80033e0:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80033e4:	3103      	adds	r1, #3
 80033e6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 80033f0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80033f4:	2400      	movs	r4, #0
 80033f6:	9402      	str	r4, [sp, #8]
 80033f8:	2401      	movs	r4, #1
 80033fa:	9401      	str	r4, [sp, #4]
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	4603      	mov	r3, r0
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff fc70 	bl	8002ce6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 5/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003406:	2300      	movs	r3, #0
 8003408:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800340c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003410:	2b03      	cmp	r3, #3
 8003412:	d906      	bls.n	8003422 <_ZN7MPU605013dmpInitializeEv+0x35e>
 8003414:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003418:	1c9a      	adds	r2, r3, #2
 800341a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800341e:	429a      	cmp	r2, r3
 8003420:	db15      	blt.n	800344e <_ZN7MPU605013dmpInitializeEv+0x38a>
 8003422:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003426:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800342a:	491c      	ldr	r1, [pc, #112]	; (800349c <_ZN7MPU605013dmpInitializeEv+0x3d8>)
 800342c:	5c8a      	ldrb	r2, [r1, r2]
 800342e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003432:	440b      	add	r3, r1
 8003434:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003438:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800343c:	3301      	adds	r3, #1
 800343e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003442:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003446:	3301      	adds	r3, #1
 8003448:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800344c:	e7de      	b.n	800340c <_ZN7MPU605013dmpInitializeEv+0x348>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 800344e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003452:	3103      	adds	r1, #3
 8003454:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003458:	b29a      	uxth	r2, r3
 800345a:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 800345e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003462:	2400      	movs	r4, #0
 8003464:	9402      	str	r4, [sp, #8]
 8003466:	2401      	movs	r4, #1
 8003468:	9401      	str	r4, [sp, #4]
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	4603      	mov	r3, r0
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff fc39 	bl	8002ce6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff fa3c 	bl	80028f2 <_ZN7MPU605012getFIFOCountEv>
 800347a:	4603      	mov	r3, r0
 800347c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8003480:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003484:	2b02      	cmp	r3, #2
 8003486:	bf94      	ite	ls
 8003488:	2301      	movls	r3, #1
 800348a:	2300      	movhi	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d006      	beq.n	80034a0 <_ZN7MPU605013dmpInitializeEv+0x3dc>
 8003492:	e7ef      	b.n	8003474 <_ZN7MPU605013dmpInitializeEv+0x3b0>
 8003494:	08012968 	.word	0x08012968
 8003498:	080130f4 	.word	0x080130f4
 800349c:	080131b4 	.word	0x080131b4

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);
            //DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 80034a0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	f107 030c 	add.w	r3, r7, #12
 80034aa:	4619      	mov	r1, r3
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff fa3a 	bl	8002926 <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINT(F("Current interrupt status="));
            //DEBUG_PRINTLNF(getIntStatus(), HEX);

            //DEBUG_PRINTLN(F("Reading final memory update 6/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80034b2:	2300      	movs	r3, #0
 80034b4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80034b8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d906      	bls.n	80034ce <_ZN7MPU605013dmpInitializeEv+0x40a>
 80034c0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80034c4:	1c9a      	adds	r2, r3, #2
 80034c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80034ca:	429a      	cmp	r2, r3
 80034cc:	db15      	blt.n	80034fa <_ZN7MPU605013dmpInitializeEv+0x436>
 80034ce:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80034d2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80034d6:	4943      	ldr	r1, [pc, #268]	; (80035e4 <_ZN7MPU605013dmpInitializeEv+0x520>)
 80034d8:	5c8a      	ldrb	r2, [r1, r2]
 80034da:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80034de:	440b      	add	r3, r1
 80034e0:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80034e4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80034e8:	3301      	adds	r3, #1
 80034ea:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80034ee:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80034f2:	3301      	adds	r3, #1
 80034f4:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80034f8:	e7de      	b.n	80034b8 <_ZN7MPU605013dmpInitializeEv+0x3f4>
            readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80034fa:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80034fe:	3103      	adds	r1, #3
 8003500:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003504:	b29a      	uxth	r2, r3
 8003506:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 800350a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	4603      	mov	r3, r0
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff fb81 	bl	8002c1a <_ZN7MPU605015readMemoryBlockEPhthh>

            //DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff f9ea 	bl	80028f2 <_ZN7MPU605012getFIFOCountEv>
 800351e:	4603      	mov	r3, r0
 8003520:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8003524:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003528:	2b02      	cmp	r3, #2
 800352a:	bf94      	ite	ls
 800352c:	2301      	movls	r3, #1
 800352e:	2300      	movhi	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d000      	beq.n	8003538 <_ZN7MPU605013dmpInitializeEv+0x474>
 8003536:	e7ef      	b.n	8003518 <_ZN7MPU605013dmpInitializeEv+0x454>

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);

            //DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 8003538:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800353c:	b2da      	uxtb	r2, r3
 800353e:	f107 030c 	add.w	r3, r7, #12
 8003542:	4619      	mov	r1, r3
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff f9ee 	bl	8002926 <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINT(F("Current interrupt status="));
            //DEBUG_PRINTLNF(getIntStatus(), HEX);

            //DEBUG_PRINTLN(F("Writing final memory update 7/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 800354a:	2300      	movs	r3, #0
 800354c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003550:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003554:	2b03      	cmp	r3, #3
 8003556:	d906      	bls.n	8003566 <_ZN7MPU605013dmpInitializeEv+0x4a2>
 8003558:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800355c:	1c9a      	adds	r2, r3, #2
 800355e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003562:	429a      	cmp	r2, r3
 8003564:	db15      	blt.n	8003592 <_ZN7MPU605013dmpInitializeEv+0x4ce>
 8003566:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800356a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800356e:	491d      	ldr	r1, [pc, #116]	; (80035e4 <_ZN7MPU605013dmpInitializeEv+0x520>)
 8003570:	5c8a      	ldrb	r2, [r1, r2]
 8003572:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003576:	440b      	add	r3, r1
 8003578:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800357c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003580:	3301      	adds	r3, #1
 8003582:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003586:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800358a:	3301      	adds	r3, #1
 800358c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003590:	e7de      	b.n	8003550 <_ZN7MPU605013dmpInitializeEv+0x48c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003592:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003596:	3103      	adds	r1, #3
 8003598:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800359c:	b29a      	uxth	r2, r3
 800359e:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 80035a2:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80035a6:	2400      	movs	r4, #0
 80035a8:	9402      	str	r4, [sp, #8]
 80035aa:	2401      	movs	r4, #1
 80035ac:	9401      	str	r4, [sp, #4]
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	4603      	mov	r3, r0
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff fb97 	bl	8002ce6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("DMP is good to go! Finally."));

            //DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
            setDMPEnabled(false);
 80035b8:	2100      	movs	r1, #0
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff fad2 	bl	8002b64 <_ZN7MPU605013setDMPEnabledEb>

            //DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
            dmpPacketSize = 42;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	222a      	movs	r2, #42	; 0x2a
 80035c4:	809a      	strh	r2, [r3, #4]
            /*if ((dmpPacketBuffer = (uint8_t *)malloc(42)) == 0) {
                return 3; // TODO: proper error code for no memory
            }*/

            //DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
            resetFIFO();
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff f942 	bl	8002850 <_ZN7MPU60509resetFIFOEv>
            getIntStatus();
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff f90b 	bl	80027e8 <_ZN7MPU605012getIntStatusEv>
        }
    } else {
        //DEBUG_PRINTLN(F("ERROR! DMP code verification failed."));
        return 1; // main binary block loading failed
    }
    return 0; // success
 80035d2:	2300      	movs	r3, #0
 80035d4:	e002      	b.n	80035dc <_ZN7MPU605013dmpInitializeEv+0x518>
            return 2; // configuration block loading failed
 80035d6:	2302      	movs	r3, #2
 80035d8:	e000      	b.n	80035dc <_ZN7MPU605013dmpInitializeEv+0x518>
        return 1; // main binary block loading failed
 80035da:	2301      	movs	r3, #1
}
 80035dc:	4618      	mov	r0, r3
 80035de:	37ac      	adds	r7, #172	; 0xac
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd90      	pop	{r4, r7, pc}
 80035e4:	080131b4 	.word	0x080131b4

080035e8 <_Z41__static_initialization_and_destruction_0ii>:
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d107      	bne.n	8003608 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035fe:	4293      	cmp	r3, r2
 8003600:	d102      	bne.n	8003608 <_Z41__static_initialization_and_destruction_0ii+0x20>
MPU6050 mpu;                      //create new object
 8003602:	4803      	ldr	r0, [pc, #12]	; (8003610 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003604:	f7fe fffc 	bl	8002600 <_ZN7MPU6050C1Ev>
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	200004e8 	.word	0x200004e8

08003614 <_GLOBAL__sub_I_MPUoutputQuaternion>:
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
 8003618:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800361c:	2001      	movs	r0, #1
 800361e:	f7ff ffe3 	bl	80035e8 <_Z41__static_initialization_and_destruction_0ii>
 8003622:	bd80      	pop	{r7, pc}

08003624 <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f00a f93d 	bl	800d8ac <asinf>
 8003632:	4603      	mov	r3, r0
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZSt4atanf>:
  { return __builtin_atanf(__x); }
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f009 ff91 	bl	800d56c <atanf>
 800364a:	4603      	mov	r3, r0
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	0000      	movs	r0, r0
	...

08003658 <_Z17get_XW_diffAnglesv>:
 * form of a Quaternion and then converts it to usable PITCH,ROLL,YAW angles
 * 
 * --Custom Method!
 */
void get_XW_diffAngles()
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
  float *p = QuaternionSLERP(QuaternionProduct(&FrameOriginQuaternion[0] , QuaternionSLERP(&OriginQuaternion[0], &MPUoutputQuaternion[0])), &LoopWQuaternion[0]);
 800365e:	494e      	ldr	r1, [pc, #312]	; (8003798 <_Z17get_XW_diffAnglesv+0x140>)
 8003660:	484e      	ldr	r0, [pc, #312]	; (800379c <_Z17get_XW_diffAnglesv+0x144>)
 8003662:	f7fe ff45 	bl	80024f0 <_Z15QuaternionSLERPPfS_>
 8003666:	4603      	mov	r3, r0
 8003668:	4619      	mov	r1, r3
 800366a:	484d      	ldr	r0, [pc, #308]	; (80037a0 <_Z17get_XW_diffAnglesv+0x148>)
 800366c:	f7fe fe12 	bl	8002294 <_Z17QuaternionProductPfS_>
 8003670:	4603      	mov	r3, r0
 8003672:	494c      	ldr	r1, [pc, #304]	; (80037a4 <_Z17get_XW_diffAnglesv+0x14c>)
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe ff3b 	bl	80024f0 <_Z15QuaternionSLERPPfS_>
 800367a:	6078      	str	r0, [r7, #4]
  LoopXWQuaternion[0] = *p;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a49      	ldr	r2, [pc, #292]	; (80037a8 <_Z17get_XW_diffAnglesv+0x150>)
 8003682:	6013      	str	r3, [r2, #0]
  LoopXWQuaternion[1] = *(p + 1);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a47      	ldr	r2, [pc, #284]	; (80037a8 <_Z17get_XW_diffAnglesv+0x150>)
 800368a:	6053      	str	r3, [r2, #4]
  LoopXWQuaternion[2] = *(p + 2);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a45      	ldr	r2, [pc, #276]	; (80037a8 <_Z17get_XW_diffAnglesv+0x150>)
 8003692:	6093      	str	r3, [r2, #8]
  LoopXWQuaternion[3] = *(p + 3);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4a43      	ldr	r2, [pc, #268]	; (80037a8 <_Z17get_XW_diffAnglesv+0x150>)
 800369a:	60d3      	str	r3, [r2, #12]

  //difference x-w in degrees
  PID_Pitch_xw_diff = 2 * (((float)asin(LoopXWQuaternion[1]) * 180) / M_PI);
 800369c:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <_Z17get_XW_diffAnglesv+0x150>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ffbf 	bl	8003624 <_ZSt4asinf>
 80036a6:	4603      	mov	r3, r0
 80036a8:	4940      	ldr	r1, [pc, #256]	; (80037ac <_Z17get_XW_diffAnglesv+0x154>)
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fd fba6 	bl	8000dfc <__aeabi_fmul>
 80036b0:	4603      	mov	r3, r0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fc fef4 	bl	80004a0 <__aeabi_f2d>
 80036b8:	a335      	add	r3, pc, #212	; (adr r3, 8003790 <_Z17get_XW_diffAnglesv+0x138>)
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	f7fd f871 	bl	80007a4 <__aeabi_ddiv>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4610      	mov	r0, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	f7fc fd89 	bl	80001e4 <__adddf3>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	f7fd fa31 	bl	8000b40 <__aeabi_d2f>
 80036de:	4603      	mov	r3, r0
 80036e0:	4a33      	ldr	r2, [pc, #204]	; (80037b0 <_Z17get_XW_diffAnglesv+0x158>)
 80036e2:	6013      	str	r3, [r2, #0]
  PID_Roll_xw_diff  = 2 * (((float)asin(LoopXWQuaternion[2]) * 180) / M_PI);
 80036e4:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <_Z17get_XW_diffAnglesv+0x150>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff9b 	bl	8003624 <_ZSt4asinf>
 80036ee:	4603      	mov	r3, r0
 80036f0:	492e      	ldr	r1, [pc, #184]	; (80037ac <_Z17get_XW_diffAnglesv+0x154>)
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fd fb82 	bl	8000dfc <__aeabi_fmul>
 80036f8:	4603      	mov	r3, r0
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fc fed0 	bl	80004a0 <__aeabi_f2d>
 8003700:	a323      	add	r3, pc, #140	; (adr r3, 8003790 <_Z17get_XW_diffAnglesv+0x138>)
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f7fd f84d 	bl	80007a4 <__aeabi_ddiv>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4610      	mov	r0, r2
 8003710:	4619      	mov	r1, r3
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	f7fc fd65 	bl	80001e4 <__adddf3>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4610      	mov	r0, r2
 8003720:	4619      	mov	r1, r3
 8003722:	f7fd fa0d 	bl	8000b40 <__aeabi_d2f>
 8003726:	4603      	mov	r3, r0
 8003728:	4a22      	ldr	r2, [pc, #136]	; (80037b4 <_Z17get_XW_diffAnglesv+0x15c>)
 800372a:	6013      	str	r3, [r2, #0]
  PID_Yaw_xw_diff   = 2 * (((float)atan(LoopXWQuaternion[3] / LoopXWQuaternion[0]) * 180) / M_PI);
 800372c:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <_Z17get_XW_diffAnglesv+0x150>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <_Z17get_XW_diffAnglesv+0x150>)
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	4611      	mov	r1, r2
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd fc14 	bl	8000f64 <__aeabi_fdiv>
 800373c:	4603      	mov	r3, r0
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff ff7c 	bl	800363c <_ZSt4atanf>
 8003744:	4603      	mov	r3, r0
 8003746:	4919      	ldr	r1, [pc, #100]	; (80037ac <_Z17get_XW_diffAnglesv+0x154>)
 8003748:	4618      	mov	r0, r3
 800374a:	f7fd fb57 	bl	8000dfc <__aeabi_fmul>
 800374e:	4603      	mov	r3, r0
 8003750:	4618      	mov	r0, r3
 8003752:	f7fc fea5 	bl	80004a0 <__aeabi_f2d>
 8003756:	a30e      	add	r3, pc, #56	; (adr r3, 8003790 <_Z17get_XW_diffAnglesv+0x138>)
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f7fd f822 	bl	80007a4 <__aeabi_ddiv>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4610      	mov	r0, r2
 8003766:	4619      	mov	r1, r3
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	f7fc fd3a 	bl	80001e4 <__adddf3>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4610      	mov	r0, r2
 8003776:	4619      	mov	r1, r3
 8003778:	f7fd f9e2 	bl	8000b40 <__aeabi_d2f>
 800377c:	4603      	mov	r3, r0
 800377e:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <_Z17get_XW_diffAnglesv+0x160>)
 8003780:	6013      	str	r3, [r2, #0]
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	f3af 8000 	nop.w
 8003790:	54442d18 	.word	0x54442d18
 8003794:	400921fb 	.word	0x400921fb
 8003798:	20000494 	.word	0x20000494
 800379c:	200004a4 	.word	0x200004a4
 80037a0:	20000000 	.word	0x20000000
 80037a4:	20000010 	.word	0x20000010
 80037a8:	200004b4 	.word	0x200004b4
 80037ac:	43340000 	.word	0x43340000
 80037b0:	20000534 	.word	0x20000534
 80037b4:	20000538 	.word	0x20000538
 80037b8:	2000053c 	.word	0x2000053c

080037bc <_Z10update_PIDv>:
 * @brief Gets PITCH,ROLL,YAW Y values and integrates/differentiates
 * 
 * --Custom Method!
 */
void update_PID()
{
 80037bc:	b598      	push	{r3, r4, r7, lr}
 80037be:	af00      	add	r7, sp, #0
  PID_Yaw_xw_diff = -PID_Yaw_xw_diff;
 80037c0:	4b94      	ldr	r3, [pc, #592]	; (8003a14 <_Z10update_PIDv+0x258>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037c8:	4a92      	ldr	r2, [pc, #584]	; (8003a14 <_Z10update_PIDv+0x258>)
 80037ca:	6013      	str	r3, [r2, #0]
  Pitch_I_Sum += (PID_Pitch_xw_diff * Pitch_PID_k[1]);                                                                                  // integrate
 80037cc:	4b92      	ldr	r3, [pc, #584]	; (8003a18 <_Z10update_PIDv+0x25c>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	4a92      	ldr	r2, [pc, #584]	; (8003a1c <_Z10update_PIDv+0x260>)
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd fb10 	bl	8000dfc <__aeabi_fmul>
 80037dc:	4603      	mov	r3, r0
 80037de:	461a      	mov	r2, r3
 80037e0:	4b8f      	ldr	r3, [pc, #572]	; (8003a20 <_Z10update_PIDv+0x264>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f7fd fa00 	bl	8000bec <__addsf3>
 80037ec:	4603      	mov	r3, r0
 80037ee:	461a      	mov	r2, r3
 80037f0:	4b8b      	ldr	r3, [pc, #556]	; (8003a20 <_Z10update_PIDv+0x264>)
 80037f2:	601a      	str	r2, [r3, #0]
  Roll_I_Sum  += (PID_Roll_xw_diff  * Roll_PID_k[1] );
 80037f4:	4b8b      	ldr	r3, [pc, #556]	; (8003a24 <_Z10update_PIDv+0x268>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	4a8b      	ldr	r2, [pc, #556]	; (8003a28 <_Z10update_PIDv+0x26c>)
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	4611      	mov	r1, r2
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd fafc 	bl	8000dfc <__aeabi_fmul>
 8003804:	4603      	mov	r3, r0
 8003806:	461a      	mov	r2, r3
 8003808:	4b88      	ldr	r3, [pc, #544]	; (8003a2c <_Z10update_PIDv+0x270>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4619      	mov	r1, r3
 800380e:	4610      	mov	r0, r2
 8003810:	f7fd f9ec 	bl	8000bec <__addsf3>
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	4b84      	ldr	r3, [pc, #528]	; (8003a2c <_Z10update_PIDv+0x270>)
 800381a:	601a      	str	r2, [r3, #0]
  Yaw_I_Sum   += (PID_Yaw_xw_diff   * Yaw_PID_k[1]  );
 800381c:	4b84      	ldr	r3, [pc, #528]	; (8003a30 <_Z10update_PIDv+0x274>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a7c      	ldr	r2, [pc, #496]	; (8003a14 <_Z10update_PIDv+0x258>)
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd fae8 	bl	8000dfc <__aeabi_fmul>
 800382c:	4603      	mov	r3, r0
 800382e:	461a      	mov	r2, r3
 8003830:	4b80      	ldr	r3, [pc, #512]	; (8003a34 <_Z10update_PIDv+0x278>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4619      	mov	r1, r3
 8003836:	4610      	mov	r0, r2
 8003838:	f7fd f9d8 	bl	8000bec <__addsf3>
 800383c:	4603      	mov	r3, r0
 800383e:	461a      	mov	r2, r3
 8003840:	4b7c      	ldr	r3, [pc, #496]	; (8003a34 <_Z10update_PIDv+0x278>)
 8003842:	601a      	str	r2, [r3, #0]

  if (Pitch_I_Sum >  500) Pitch_I_Sum =  500;                         //constrain integration (-500 500)
 8003844:	4b76      	ldr	r3, [pc, #472]	; (8003a20 <_Z10update_PIDv+0x264>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	497b      	ldr	r1, [pc, #492]	; (8003a38 <_Z10update_PIDv+0x27c>)
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd fc92 	bl	8001174 <__aeabi_fcmpgt>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <_Z10update_PIDv+0xa0>
 8003856:	4b72      	ldr	r3, [pc, #456]	; (8003a20 <_Z10update_PIDv+0x264>)
 8003858:	4a77      	ldr	r2, [pc, #476]	; (8003a38 <_Z10update_PIDv+0x27c>)
 800385a:	601a      	str	r2, [r3, #0]
  if (Roll_I_Sum  >  500) Roll_I_Sum  =  500;
 800385c:	4b73      	ldr	r3, [pc, #460]	; (8003a2c <_Z10update_PIDv+0x270>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4975      	ldr	r1, [pc, #468]	; (8003a38 <_Z10update_PIDv+0x27c>)
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fc86 	bl	8001174 <__aeabi_fcmpgt>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <_Z10update_PIDv+0xb8>
 800386e:	4b6f      	ldr	r3, [pc, #444]	; (8003a2c <_Z10update_PIDv+0x270>)
 8003870:	4a71      	ldr	r2, [pc, #452]	; (8003a38 <_Z10update_PIDv+0x27c>)
 8003872:	601a      	str	r2, [r3, #0]
  if (Yaw_I_Sum   > 1000) Yaw_I_Sum   = 1000;
 8003874:	4b6f      	ldr	r3, [pc, #444]	; (8003a34 <_Z10update_PIDv+0x278>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4970      	ldr	r1, [pc, #448]	; (8003a3c <_Z10update_PIDv+0x280>)
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd fc7a 	bl	8001174 <__aeabi_fcmpgt>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <_Z10update_PIDv+0xd0>
 8003886:	4b6b      	ldr	r3, [pc, #428]	; (8003a34 <_Z10update_PIDv+0x278>)
 8003888:	4a6c      	ldr	r2, [pc, #432]	; (8003a3c <_Z10update_PIDv+0x280>)
 800388a:	601a      	str	r2, [r3, #0]
  if (Pitch_I_Sum < -500) Pitch_I_Sum = -500;       //NOTDONE use defines for values
 800388c:	4b64      	ldr	r3, [pc, #400]	; (8003a20 <_Z10update_PIDv+0x264>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	496b      	ldr	r1, [pc, #428]	; (8003a40 <_Z10update_PIDv+0x284>)
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd fc50 	bl	8001138 <__aeabi_fcmplt>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <_Z10update_PIDv+0xe8>
 800389e:	4b60      	ldr	r3, [pc, #384]	; (8003a20 <_Z10update_PIDv+0x264>)
 80038a0:	4a67      	ldr	r2, [pc, #412]	; (8003a40 <_Z10update_PIDv+0x284>)
 80038a2:	601a      	str	r2, [r3, #0]
  if (Roll_I_Sum  < -500) Roll_I_Sum  = -500;
 80038a4:	4b61      	ldr	r3, [pc, #388]	; (8003a2c <_Z10update_PIDv+0x270>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4965      	ldr	r1, [pc, #404]	; (8003a40 <_Z10update_PIDv+0x284>)
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd fc44 	bl	8001138 <__aeabi_fcmplt>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <_Z10update_PIDv+0x100>
 80038b6:	4b5d      	ldr	r3, [pc, #372]	; (8003a2c <_Z10update_PIDv+0x270>)
 80038b8:	4a61      	ldr	r2, [pc, #388]	; (8003a40 <_Z10update_PIDv+0x284>)
 80038ba:	601a      	str	r2, [r3, #0]
  if (Yaw_I_Sum   <    0) Yaw_I_Sum   =    0;
 80038bc:	4b5d      	ldr	r3, [pc, #372]	; (8003a34 <_Z10update_PIDv+0x278>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f04f 0100 	mov.w	r1, #0
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fd fc37 	bl	8001138 <__aeabi_fcmplt>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <_Z10update_PIDv+0x11c>
 80038d0:	4b58      	ldr	r3, [pc, #352]	; (8003a34 <_Z10update_PIDv+0x278>)
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]

  PID_Pitch_y = (PID_Pitch_xw_diff * Pitch_PID_k[0] * 10) + Pitch_I_Sum + ((PID_Pitch_xw_diff - Pitch_D_old) * Pitch_PID_k[2] * 100);   //combine P,I,D values
 80038d8:	4b4f      	ldr	r3, [pc, #316]	; (8003a18 <_Z10update_PIDv+0x25c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a4f      	ldr	r2, [pc, #316]	; (8003a1c <_Z10update_PIDv+0x260>)
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd fa8a 	bl	8000dfc <__aeabi_fmul>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4956      	ldr	r1, [pc, #344]	; (8003a44 <_Z10update_PIDv+0x288>)
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fd fa85 	bl	8000dfc <__aeabi_fmul>
 80038f2:	4603      	mov	r3, r0
 80038f4:	461a      	mov	r2, r3
 80038f6:	4b4a      	ldr	r3, [pc, #296]	; (8003a20 <_Z10update_PIDv+0x264>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f7fd f975 	bl	8000bec <__addsf3>
 8003902:	4603      	mov	r3, r0
 8003904:	461c      	mov	r4, r3
 8003906:	4b45      	ldr	r3, [pc, #276]	; (8003a1c <_Z10update_PIDv+0x260>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a4f      	ldr	r2, [pc, #316]	; (8003a48 <_Z10update_PIDv+0x28c>)
 800390c:	6812      	ldr	r2, [r2, #0]
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f7fd f969 	bl	8000be8 <__aeabi_fsub>
 8003916:	4603      	mov	r3, r0
 8003918:	461a      	mov	r2, r3
 800391a:	4b3f      	ldr	r3, [pc, #252]	; (8003a18 <_Z10update_PIDv+0x25c>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	4619      	mov	r1, r3
 8003920:	4610      	mov	r0, r2
 8003922:	f7fd fa6b 	bl	8000dfc <__aeabi_fmul>
 8003926:	4603      	mov	r3, r0
 8003928:	4948      	ldr	r1, [pc, #288]	; (8003a4c <_Z10update_PIDv+0x290>)
 800392a:	4618      	mov	r0, r3
 800392c:	f7fd fa66 	bl	8000dfc <__aeabi_fmul>
 8003930:	4603      	mov	r3, r0
 8003932:	4619      	mov	r1, r3
 8003934:	4620      	mov	r0, r4
 8003936:	f7fd f959 	bl	8000bec <__addsf3>
 800393a:	4603      	mov	r3, r0
 800393c:	461a      	mov	r2, r3
 800393e:	4b44      	ldr	r3, [pc, #272]	; (8003a50 <_Z10update_PIDv+0x294>)
 8003940:	601a      	str	r2, [r3, #0]
  PID_Roll_y  = (PID_Roll_xw_diff  * Roll_PID_k[0]  * 10) + Roll_I_Sum  + ((PID_Roll_xw_diff  - Roll_D_old ) * Roll_PID_k[2]  * 100);
 8003942:	4b38      	ldr	r3, [pc, #224]	; (8003a24 <_Z10update_PIDv+0x268>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a38      	ldr	r2, [pc, #224]	; (8003a28 <_Z10update_PIDv+0x26c>)
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	4611      	mov	r1, r2
 800394c:	4618      	mov	r0, r3
 800394e:	f7fd fa55 	bl	8000dfc <__aeabi_fmul>
 8003952:	4603      	mov	r3, r0
 8003954:	493b      	ldr	r1, [pc, #236]	; (8003a44 <_Z10update_PIDv+0x288>)
 8003956:	4618      	mov	r0, r3
 8003958:	f7fd fa50 	bl	8000dfc <__aeabi_fmul>
 800395c:	4603      	mov	r3, r0
 800395e:	461a      	mov	r2, r3
 8003960:	4b32      	ldr	r3, [pc, #200]	; (8003a2c <_Z10update_PIDv+0x270>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4619      	mov	r1, r3
 8003966:	4610      	mov	r0, r2
 8003968:	f7fd f940 	bl	8000bec <__addsf3>
 800396c:	4603      	mov	r3, r0
 800396e:	461c      	mov	r4, r3
 8003970:	4b2d      	ldr	r3, [pc, #180]	; (8003a28 <_Z10update_PIDv+0x26c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a37      	ldr	r2, [pc, #220]	; (8003a54 <_Z10update_PIDv+0x298>)
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd f934 	bl	8000be8 <__aeabi_fsub>
 8003980:	4603      	mov	r3, r0
 8003982:	461a      	mov	r2, r3
 8003984:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <_Z10update_PIDv+0x268>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f7fd fa36 	bl	8000dfc <__aeabi_fmul>
 8003990:	4603      	mov	r3, r0
 8003992:	492e      	ldr	r1, [pc, #184]	; (8003a4c <_Z10update_PIDv+0x290>)
 8003994:	4618      	mov	r0, r3
 8003996:	f7fd fa31 	bl	8000dfc <__aeabi_fmul>
 800399a:	4603      	mov	r3, r0
 800399c:	4619      	mov	r1, r3
 800399e:	4620      	mov	r0, r4
 80039a0:	f7fd f924 	bl	8000bec <__addsf3>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	4b2b      	ldr	r3, [pc, #172]	; (8003a58 <_Z10update_PIDv+0x29c>)
 80039aa:	601a      	str	r2, [r3, #0]
  PID_Yaw_y   = (PID_Yaw_xw_diff   * Yaw_PID_k[0]   * 10) + Yaw_I_Sum   + ((PID_Yaw_xw_diff   - Yaw_D_old  ) * Yaw_PID_k[2]   * 100);          //NOTDONE use defines for values
 80039ac:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <_Z10update_PIDv+0x274>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <_Z10update_PIDv+0x258>)
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	4611      	mov	r1, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd fa20 	bl	8000dfc <__aeabi_fmul>
 80039bc:	4603      	mov	r3, r0
 80039be:	4921      	ldr	r1, [pc, #132]	; (8003a44 <_Z10update_PIDv+0x288>)
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fd fa1b 	bl	8000dfc <__aeabi_fmul>
 80039c6:	4603      	mov	r3, r0
 80039c8:	461a      	mov	r2, r3
 80039ca:	4b1a      	ldr	r3, [pc, #104]	; (8003a34 <_Z10update_PIDv+0x278>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4619      	mov	r1, r3
 80039d0:	4610      	mov	r0, r2
 80039d2:	f7fd f90b 	bl	8000bec <__addsf3>
 80039d6:	4603      	mov	r3, r0
 80039d8:	461c      	mov	r4, r3
 80039da:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <_Z10update_PIDv+0x258>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1f      	ldr	r2, [pc, #124]	; (8003a5c <_Z10update_PIDv+0x2a0>)
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	4611      	mov	r1, r2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fd f8ff 	bl	8000be8 <__aeabi_fsub>
 80039ea:	4603      	mov	r3, r0
 80039ec:	461a      	mov	r2, r3
 80039ee:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <_Z10update_PIDv+0x274>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f7fd fa01 	bl	8000dfc <__aeabi_fmul>
 80039fa:	4603      	mov	r3, r0
 80039fc:	4913      	ldr	r1, [pc, #76]	; (8003a4c <_Z10update_PIDv+0x290>)
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd f9fc 	bl	8000dfc <__aeabi_fmul>
 8003a04:	4603      	mov	r3, r0
 8003a06:	4619      	mov	r1, r3
 8003a08:	4620      	mov	r0, r4
 8003a0a:	f7fd f8ef 	bl	8000bec <__addsf3>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	e026      	b.n	8003a60 <_Z10update_PIDv+0x2a4>
 8003a12:	bf00      	nop
 8003a14:	2000053c 	.word	0x2000053c
 8003a18:	2000054c 	.word	0x2000054c
 8003a1c:	20000534 	.word	0x20000534
 8003a20:	20000570 	.word	0x20000570
 8003a24:	20000558 	.word	0x20000558
 8003a28:	20000538 	.word	0x20000538
 8003a2c:	20000574 	.word	0x20000574
 8003a30:	20000564 	.word	0x20000564
 8003a34:	20000578 	.word	0x20000578
 8003a38:	43fa0000 	.word	0x43fa0000
 8003a3c:	447a0000 	.word	0x447a0000
 8003a40:	c3fa0000 	.word	0xc3fa0000
 8003a44:	41200000 	.word	0x41200000
 8003a48:	2000057c 	.word	0x2000057c
 8003a4c:	42c80000 	.word	0x42c80000
 8003a50:	20000540 	.word	0x20000540
 8003a54:	20000580 	.word	0x20000580
 8003a58:	20000544 	.word	0x20000544
 8003a5c:	20000584 	.word	0x20000584
 8003a60:	461a      	mov	r2, r3
 8003a62:	4b2d      	ldr	r3, [pc, #180]	; (8003b18 <_Z10update_PIDv+0x35c>)
 8003a64:	601a      	str	r2, [r3, #0]

  Pitch_D_old = PID_Pitch_xw_diff;                                                                                                      // differentiate
 8003a66:	4b2d      	ldr	r3, [pc, #180]	; (8003b1c <_Z10update_PIDv+0x360>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a2d      	ldr	r2, [pc, #180]	; (8003b20 <_Z10update_PIDv+0x364>)
 8003a6c:	6013      	str	r3, [r2, #0]
  Roll_D_old  = PID_Roll_xw_diff ;
 8003a6e:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <_Z10update_PIDv+0x368>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a2d      	ldr	r2, [pc, #180]	; (8003b28 <_Z10update_PIDv+0x36c>)
 8003a74:	6013      	str	r3, [r2, #0]
  Yaw_D_old   = PID_Yaw_xw_diff  ;
 8003a76:	4b2d      	ldr	r3, [pc, #180]	; (8003b2c <_Z10update_PIDv+0x370>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a2d      	ldr	r2, [pc, #180]	; (8003b30 <_Z10update_PIDv+0x374>)
 8003a7c:	6013      	str	r3, [r2, #0]

  if (PID_Pitch_y > 500 ) PID_Pitch_y = 500 ;
 8003a7e:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <_Z10update_PIDv+0x378>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	492d      	ldr	r1, [pc, #180]	; (8003b38 <_Z10update_PIDv+0x37c>)
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fd fb75 	bl	8001174 <__aeabi_fcmpgt>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <_Z10update_PIDv+0x2da>
 8003a90:	4b28      	ldr	r3, [pc, #160]	; (8003b34 <_Z10update_PIDv+0x378>)
 8003a92:	4a29      	ldr	r2, [pc, #164]	; (8003b38 <_Z10update_PIDv+0x37c>)
 8003a94:	601a      	str	r2, [r3, #0]
  if (PID_Roll_y  > 500 ) PID_Roll_y  = 500 ;                            //NOTDONE use defines for values
 8003a96:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <_Z10update_PIDv+0x380>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4927      	ldr	r1, [pc, #156]	; (8003b38 <_Z10update_PIDv+0x37c>)
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fd fb69 	bl	8001174 <__aeabi_fcmpgt>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <_Z10update_PIDv+0x2f2>
 8003aa8:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <_Z10update_PIDv+0x380>)
 8003aaa:	4a23      	ldr	r2, [pc, #140]	; (8003b38 <_Z10update_PIDv+0x37c>)
 8003aac:	601a      	str	r2, [r3, #0]
  if (PID_Yaw_y   > 1000) PID_Yaw_y   = 1000;
 8003aae:	4b1a      	ldr	r3, [pc, #104]	; (8003b18 <_Z10update_PIDv+0x35c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4923      	ldr	r1, [pc, #140]	; (8003b40 <_Z10update_PIDv+0x384>)
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fd fb5d 	bl	8001174 <__aeabi_fcmpgt>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <_Z10update_PIDv+0x30a>
 8003ac0:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <_Z10update_PIDv+0x35c>)
 8003ac2:	4a1f      	ldr	r2, [pc, #124]	; (8003b40 <_Z10update_PIDv+0x384>)
 8003ac4:	601a      	str	r2, [r3, #0]
  if (PID_Pitch_y < -500) PID_Pitch_y = -500;
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <_Z10update_PIDv+0x378>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	491e      	ldr	r1, [pc, #120]	; (8003b44 <_Z10update_PIDv+0x388>)
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd fb33 	bl	8001138 <__aeabi_fcmplt>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <_Z10update_PIDv+0x322>
 8003ad8:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <_Z10update_PIDv+0x378>)
 8003ada:	4a1a      	ldr	r2, [pc, #104]	; (8003b44 <_Z10update_PIDv+0x388>)
 8003adc:	601a      	str	r2, [r3, #0]
  if (PID_Roll_y  < -500) PID_Roll_y  = -500;
 8003ade:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <_Z10update_PIDv+0x380>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4918      	ldr	r1, [pc, #96]	; (8003b44 <_Z10update_PIDv+0x388>)
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fd fb27 	bl	8001138 <__aeabi_fcmplt>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <_Z10update_PIDv+0x33a>
 8003af0:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <_Z10update_PIDv+0x380>)
 8003af2:	4a14      	ldr	r2, [pc, #80]	; (8003b44 <_Z10update_PIDv+0x388>)
 8003af4:	601a      	str	r2, [r3, #0]
  if (PID_Yaw_y   <    0) PID_Yaw_y   =    0;
 8003af6:	4b08      	ldr	r3, [pc, #32]	; (8003b18 <_Z10update_PIDv+0x35c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f04f 0100 	mov.w	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd fb1a 	bl	8001138 <__aeabi_fcmplt>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d100      	bne.n	8003b0c <_Z10update_PIDv+0x350>
}
 8003b0a:	e003      	b.n	8003b14 <_Z10update_PIDv+0x358>
  if (PID_Yaw_y   <    0) PID_Yaw_y   =    0;
 8003b0c:	4b02      	ldr	r3, [pc, #8]	; (8003b18 <_Z10update_PIDv+0x35c>)
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
}
 8003b14:	bf00      	nop
 8003b16:	bd98      	pop	{r3, r4, r7, pc}
 8003b18:	20000548 	.word	0x20000548
 8003b1c:	20000534 	.word	0x20000534
 8003b20:	2000057c 	.word	0x2000057c
 8003b24:	20000538 	.word	0x20000538
 8003b28:	20000580 	.word	0x20000580
 8003b2c:	2000053c 	.word	0x2000053c
 8003b30:	20000584 	.word	0x20000584
 8003b34:	20000540 	.word	0x20000540
 8003b38:	43fa0000 	.word	0x43fa0000
 8003b3c:	20000544 	.word	0x20000544
 8003b40:	447a0000 	.word	0x447a0000
 8003b44:	c3fa0000 	.word	0xc3fa0000

08003b48 <_Z12getPIDValuesv>:
 * @brief This method extracts the PID values for PITCH,ROLL,YAW that can be live tuned on the remote
 * 
 * --Custom Method!
 */
void getPIDValues()
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  if (tuningMode == 1)
 8003b4c:	4baa      	ldr	r3, [pc, #680]	; (8003df8 <_Z12getPIDValuesv+0x2b0>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	f040 81d8 	bne.w	8003f06 <_Z12getPIDValuesv+0x3be>
  {
    if ((SBUS_Channels[5] <= 1000) & (SBUS_Channels[5] >= 990))
 8003b56:	4ba9      	ldr	r3, [pc, #676]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003b58:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003b5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b60:	bfd4      	ite	le
 8003b62:	2301      	movle	r3, #1
 8003b64:	2300      	movgt	r3, #0
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	4ba4      	ldr	r3, [pc, #656]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003b6a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003b6e:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003b72:	428b      	cmp	r3, r1
 8003b74:	bfcc      	ite	gt
 8003b76:	2301      	movgt	r3, #1
 8003b78:	2300      	movle	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8082 	beq.w	8003c8a <_Z12getPIDValuesv+0x142>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Pitch_PID_k[0] = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003b86:	4b9d      	ldr	r3, [pc, #628]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003b88:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b90:	bfd4      	ite	le
 8003b92:	2301      	movle	r3, #1
 8003b94:	2300      	movgt	r3, #0
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	4b98      	ldr	r3, [pc, #608]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003b9a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003b9e:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003ba2:	428b      	cmp	r3, r1
 8003ba4:	bfcc      	ite	gt
 8003ba6:	2301      	movgt	r3, #1
 8003ba8:	2300      	movle	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	4013      	ands	r3, r2
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d014      	beq.n	8003bde <_Z12getPIDValuesv+0x96>
 8003bb4:	4b91      	ldr	r3, [pc, #580]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003bb6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fd f8ca 	bl	8000d54 <__aeabi_i2f>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	498f      	ldr	r1, [pc, #572]	; (8003e00 <_Z12getPIDValuesv+0x2b8>)
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fd f9cd 	bl	8000f64 <__aeabi_fdiv>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fd f80b 	bl	8000bec <__addsf3>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4b8a      	ldr	r3, [pc, #552]	; (8003e04 <_Z12getPIDValuesv+0x2bc>)
 8003bdc:	601a      	str	r2, [r3, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Pitch_PID_k[1] = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003bde:	4b87      	ldr	r3, [pc, #540]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003be0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003be4:	2b0a      	cmp	r3, #10
 8003be6:	bfd4      	ite	le
 8003be8:	2301      	movle	r3, #1
 8003bea:	2300      	movgt	r3, #0
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4b83      	ldr	r3, [pc, #524]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003bf0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003bf4:	f113 0f0a 	cmn.w	r3, #10
 8003bf8:	bfac      	ite	ge
 8003bfa:	2301      	movge	r3, #1
 8003bfc:	2300      	movlt	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	4013      	ands	r3, r2
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d014      	beq.n	8003c32 <_Z12getPIDValuesv+0xea>
 8003c08:	4b7c      	ldr	r3, [pc, #496]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003c0a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd f8a0 	bl	8000d54 <__aeabi_i2f>
 8003c14:	4603      	mov	r3, r0
 8003c16:	497a      	ldr	r1, [pc, #488]	; (8003e00 <_Z12getPIDValuesv+0x2b8>)
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fd f9a3 	bl	8000f64 <__aeabi_fdiv>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fc ffe1 	bl	8000bec <__addsf3>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b75      	ldr	r3, [pc, #468]	; (8003e04 <_Z12getPIDValuesv+0x2bc>)
 8003c30:	605a      	str	r2, [r3, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Pitch_PID_k[2] = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values       
 8003c32:	4b72      	ldr	r3, [pc, #456]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003c34:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003c38:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	bfb4      	ite	lt
 8003c40:	2301      	movlt	r3, #1
 8003c42:	2300      	movge	r3, #0
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	4b6d      	ldr	r3, [pc, #436]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003c48:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003c4c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003c50:	bfac      	ite	ge
 8003c52:	2301      	movge	r3, #1
 8003c54:	2300      	movlt	r3, #0
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	4013      	ands	r3, r2
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d014      	beq.n	8003c8a <_Z12getPIDValuesv+0x142>
 8003c60:	4b66      	ldr	r3, [pc, #408]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003c62:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fd f874 	bl	8000d54 <__aeabi_i2f>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	4964      	ldr	r1, [pc, #400]	; (8003e00 <_Z12getPIDValuesv+0x2b8>)
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fd f977 	bl	8000f64 <__aeabi_fdiv>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fc ffb5 	bl	8000bec <__addsf3>
 8003c82:	4603      	mov	r3, r0
 8003c84:	461a      	mov	r2, r3
 8003c86:	4b5f      	ldr	r3, [pc, #380]	; (8003e04 <_Z12getPIDValuesv+0x2bc>)
 8003c88:	609a      	str	r2, [r3, #8]
    }
    if ((SBUS_Channels[5] <= 10) & (SBUS_Channels[5] >= -10))
 8003c8a:	4b5c      	ldr	r3, [pc, #368]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003c8c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003c90:	2b0a      	cmp	r3, #10
 8003c92:	bfd4      	ite	le
 8003c94:	2301      	movle	r3, #1
 8003c96:	2300      	movgt	r3, #0
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	4b58      	ldr	r3, [pc, #352]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003c9c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003ca0:	f113 0f0a 	cmn.w	r3, #10
 8003ca4:	bfac      	ite	ge
 8003ca6:	2301      	movge	r3, #1
 8003ca8:	2300      	movlt	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	4013      	ands	r3, r2
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8082 	beq.w	8003dba <_Z12getPIDValuesv+0x272>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Roll_PID_k[0]  = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003cb6:	4b51      	ldr	r3, [pc, #324]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003cb8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003cbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cc0:	bfd4      	ite	le
 8003cc2:	2301      	movle	r3, #1
 8003cc4:	2300      	movgt	r3, #0
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	4b4c      	ldr	r3, [pc, #304]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003cca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003cce:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003cd2:	428b      	cmp	r3, r1
 8003cd4:	bfcc      	ite	gt
 8003cd6:	2301      	movgt	r3, #1
 8003cd8:	2300      	movle	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	4013      	ands	r3, r2
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d014      	beq.n	8003d0e <_Z12getPIDValuesv+0x1c6>
 8003ce4:	4b45      	ldr	r3, [pc, #276]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003ce6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd f832 	bl	8000d54 <__aeabi_i2f>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4943      	ldr	r1, [pc, #268]	; (8003e00 <_Z12getPIDValuesv+0x2b8>)
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fd f935 	bl	8000f64 <__aeabi_fdiv>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fc ff73 	bl	8000bec <__addsf3>
 8003d06:	4603      	mov	r3, r0
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b3f      	ldr	r3, [pc, #252]	; (8003e08 <_Z12getPIDValuesv+0x2c0>)
 8003d0c:	601a      	str	r2, [r3, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Roll_PID_k[1]  = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003d0e:	4b3b      	ldr	r3, [pc, #236]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003d10:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003d14:	2b0a      	cmp	r3, #10
 8003d16:	bfd4      	ite	le
 8003d18:	2301      	movle	r3, #1
 8003d1a:	2300      	movgt	r3, #0
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4b37      	ldr	r3, [pc, #220]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003d20:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003d24:	f113 0f0a 	cmn.w	r3, #10
 8003d28:	bfac      	ite	ge
 8003d2a:	2301      	movge	r3, #1
 8003d2c:	2300      	movlt	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	4013      	ands	r3, r2
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d014      	beq.n	8003d62 <_Z12getPIDValuesv+0x21a>
 8003d38:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003d3a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd f808 	bl	8000d54 <__aeabi_i2f>
 8003d44:	4603      	mov	r3, r0
 8003d46:	492e      	ldr	r1, [pc, #184]	; (8003e00 <_Z12getPIDValuesv+0x2b8>)
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fd f90b 	bl	8000f64 <__aeabi_fdiv>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fc ff49 	bl	8000bec <__addsf3>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <_Z12getPIDValuesv+0x2c0>)
 8003d60:	605a      	str	r2, [r3, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Roll_PID_k[2]  = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values       
 8003d62:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003d64:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003d68:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	bfb4      	ite	lt
 8003d70:	2301      	movlt	r3, #1
 8003d72:	2300      	movge	r3, #0
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003d78:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003d7c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003d80:	bfac      	ite	ge
 8003d82:	2301      	movge	r3, #1
 8003d84:	2300      	movlt	r3, #0
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	4013      	ands	r3, r2
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d014      	beq.n	8003dba <_Z12getPIDValuesv+0x272>
 8003d90:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003d92:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fc ffdc 	bl	8000d54 <__aeabi_i2f>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4918      	ldr	r1, [pc, #96]	; (8003e00 <_Z12getPIDValuesv+0x2b8>)
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fd f8df 	bl	8000f64 <__aeabi_fdiv>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fc ff1d 	bl	8000bec <__addsf3>
 8003db2:	4603      	mov	r3, r0
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <_Z12getPIDValuesv+0x2c0>)
 8003db8:	609a      	str	r2, [r3, #8]
    }
    if ((SBUS_Channels[5] <= -990) & (SBUS_Channels[5] >= -1000))
 8003dba:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003dbc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003dc0:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	bfb4      	ite	lt
 8003dc8:	2301      	movlt	r3, #1
 8003dca:	2300      	movge	r3, #0
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003dd0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003dd4:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003dd8:	bfac      	ite	ge
 8003dda:	2301      	movge	r3, #1
 8003ddc:	2300      	movlt	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	4013      	ands	r3, r2
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 808e 	beq.w	8003f06 <_Z12getPIDValuesv+0x3be>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Yaw_PID_k[0]   = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003dea:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <_Z12getPIDValuesv+0x2b4>)
 8003dec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003df4:	e00a      	b.n	8003e0c <_Z12getPIDValuesv+0x2c4>
 8003df6:	bf00      	nop
 8003df8:	20000020 	.word	0x20000020
 8003dfc:	20000638 	.word	0x20000638
 8003e00:	44fa0000 	.word	0x44fa0000
 8003e04:	2000054c 	.word	0x2000054c
 8003e08:	20000558 	.word	0x20000558
 8003e0c:	bfd4      	ite	le
 8003e0e:	2301      	movle	r3, #1
 8003e10:	2300      	movgt	r3, #0
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	4b3d      	ldr	r3, [pc, #244]	; (8003f0c <_Z12getPIDValuesv+0x3c4>)
 8003e16:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e1a:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003e1e:	428b      	cmp	r3, r1
 8003e20:	bfcc      	ite	gt
 8003e22:	2301      	movgt	r3, #1
 8003e24:	2300      	movle	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	4013      	ands	r3, r2
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d014      	beq.n	8003e5a <_Z12getPIDValuesv+0x312>
 8003e30:	4b36      	ldr	r3, [pc, #216]	; (8003f0c <_Z12getPIDValuesv+0x3c4>)
 8003e32:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fc ff8c 	bl	8000d54 <__aeabi_i2f>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	4934      	ldr	r1, [pc, #208]	; (8003f10 <_Z12getPIDValuesv+0x3c8>)
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fd f88f 	bl	8000f64 <__aeabi_fdiv>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fc fecd 	bl	8000bec <__addsf3>
 8003e52:	4603      	mov	r3, r0
 8003e54:	461a      	mov	r2, r3
 8003e56:	4b2f      	ldr	r3, [pc, #188]	; (8003f14 <_Z12getPIDValuesv+0x3cc>)
 8003e58:	601a      	str	r2, [r3, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Yaw_PID_k[1]   = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003e5a:	4b2c      	ldr	r3, [pc, #176]	; (8003f0c <_Z12getPIDValuesv+0x3c4>)
 8003e5c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e60:	2b0a      	cmp	r3, #10
 8003e62:	bfd4      	ite	le
 8003e64:	2301      	movle	r3, #1
 8003e66:	2300      	movgt	r3, #0
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	4b28      	ldr	r3, [pc, #160]	; (8003f0c <_Z12getPIDValuesv+0x3c4>)
 8003e6c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e70:	f113 0f0a 	cmn.w	r3, #10
 8003e74:	bfac      	ite	ge
 8003e76:	2301      	movge	r3, #1
 8003e78:	2300      	movlt	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d014      	beq.n	8003eae <_Z12getPIDValuesv+0x366>
 8003e84:	4b21      	ldr	r3, [pc, #132]	; (8003f0c <_Z12getPIDValuesv+0x3c4>)
 8003e86:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fc ff62 	bl	8000d54 <__aeabi_i2f>
 8003e90:	4603      	mov	r3, r0
 8003e92:	491f      	ldr	r1, [pc, #124]	; (8003f10 <_Z12getPIDValuesv+0x3c8>)
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fd f865 	bl	8000f64 <__aeabi_fdiv>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fc fea3 	bl	8000bec <__addsf3>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <_Z12getPIDValuesv+0x3cc>)
 8003eac:	605a      	str	r2, [r3, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Yaw_PID_k[2]   = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values       
 8003eae:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <_Z12getPIDValuesv+0x3c4>)
 8003eb0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003eb4:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	bfb4      	ite	lt
 8003ebc:	2301      	movlt	r3, #1
 8003ebe:	2300      	movge	r3, #0
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <_Z12getPIDValuesv+0x3c4>)
 8003ec4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ec8:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003ecc:	bfac      	ite	ge
 8003ece:	2301      	movge	r3, #1
 8003ed0:	2300      	movlt	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d014      	beq.n	8003f06 <_Z12getPIDValuesv+0x3be>
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <_Z12getPIDValuesv+0x3c4>)
 8003ede:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fc ff36 	bl	8000d54 <__aeabi_i2f>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4909      	ldr	r1, [pc, #36]	; (8003f10 <_Z12getPIDValuesv+0x3c8>)
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fd f839 	bl	8000f64 <__aeabi_fdiv>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fc fe77 	bl	8000bec <__addsf3>
 8003efe:	4603      	mov	r3, r0
 8003f00:	461a      	mov	r2, r3
 8003f02:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <_Z12getPIDValuesv+0x3cc>)
 8003f04:	609a      	str	r2, [r3, #8]
    }
  }
}
 8003f06:	bf00      	nop
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000638 	.word	0x20000638
 8003f10:	44fa0000 	.word	0x44fa0000
 8003f14:	20000564 	.word	0x20000564

08003f18 <_Z14getAngleOffsetv>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void getAngleOffset()
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  if (tuningMode == 2)
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <_Z14getAngleOffsetv+0x38>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d112      	bne.n	8003f4a <_Z14getAngleOffsetv+0x32>
  {
    mainMotorAngleOffset = (float)SBUS_Channels[7] / 10;
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <_Z14getAngleOffsetv+0x3c>)
 8003f26:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fc ff12 	bl	8000d54 <__aeabi_i2f>
 8003f30:	4603      	mov	r3, r0
 8003f32:	4909      	ldr	r1, [pc, #36]	; (8003f58 <_Z14getAngleOffsetv+0x40>)
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fd f815 	bl	8000f64 <__aeabi_fdiv>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fd f939 	bl	80011b4 <__aeabi_f2iz>
 8003f42:	4603      	mov	r3, r0
 8003f44:	b25a      	sxtb	r2, r3
 8003f46:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <_Z14getAngleOffsetv+0x44>)
 8003f48:	701a      	strb	r2, [r3, #0]
  }
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000020 	.word	0x20000020
 8003f54:	20000638 	.word	0x20000638
 8003f58:	41200000 	.word	0x41200000
 8003f5c:	200007ca 	.word	0x200007ca

08003f60 <_Z16switchTuningModev>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void switchTuningMode()
{
 8003f60:	b598      	push	{r3, r4, r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  if ((buttonPressed == false) & (HAL_GPIO_ReadPin(ONBOARD_BUTTON_2_GPIO_Port, ONBOARD_BUTTON_2_Pin) == true))
 8003f64:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <_Z16switchTuningModev+0x9c>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2301      	moveq	r3, #1
 8003f6e:	2300      	movne	r3, #0
 8003f70:	b2dc      	uxtb	r4, r3
 8003f72:	2102      	movs	r1, #2
 8003f74:	4822      	ldr	r0, [pc, #136]	; (8004000 <_Z16switchTuningModev+0xa0>)
 8003f76:	f002 faa7 	bl	80064c8 <HAL_GPIO_ReadPin>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	bf0c      	ite	eq
 8003f80:	2301      	moveq	r3, #1
 8003f82:	2300      	movne	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	4023      	ands	r3, r4
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bf14      	ite	ne
 8003f8e:	2301      	movne	r3, #1
 8003f90:	2300      	moveq	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d011      	beq.n	8003fbc <_Z16switchTuningModev+0x5c>
  {
    if (tuningMode == 1) tuningMode = 2;
 8003f98:	4b1a      	ldr	r3, [pc, #104]	; (8004004 <_Z16switchTuningModev+0xa4>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d103      	bne.n	8003fa8 <_Z16switchTuningModev+0x48>
 8003fa0:	4b18      	ldr	r3, [pc, #96]	; (8004004 <_Z16switchTuningModev+0xa4>)
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	e002      	b.n	8003fae <_Z16switchTuningModev+0x4e>
    else tuningMode = 1;
 8003fa8:	4b16      	ldr	r3, [pc, #88]	; (8004004 <_Z16switchTuningModev+0xa4>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);
 8003fae:	2120      	movs	r1, #32
 8003fb0:	4813      	ldr	r0, [pc, #76]	; (8004000 <_Z16switchTuningModev+0xa0>)
 8003fb2:	f002 fab8 	bl	8006526 <HAL_GPIO_TogglePin>
    buttonPressed = true;
 8003fb6:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <_Z16switchTuningModev+0x9c>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]
  }
  if ((buttonPressed == true) & (HAL_GPIO_ReadPin(ONBOARD_BUTTON_2_GPIO_Port, ONBOARD_BUTTON_2_Pin) == false))
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <_Z16switchTuningModev+0x9c>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2dc      	uxtb	r4, r3
 8003fca:	2102      	movs	r1, #2
 8003fcc:	480c      	ldr	r0, [pc, #48]	; (8004000 <_Z16switchTuningModev+0xa0>)
 8003fce:	f002 fa7b 	bl	80064c8 <HAL_GPIO_ReadPin>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	4023      	ands	r3, r4
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bf14      	ite	ne
 8003fe6:	2301      	movne	r3, #1
 8003fe8:	2300      	moveq	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <_Z16switchTuningModev+0x96>
  {
    buttonPressed = false;
 8003ff0:	4b02      	ldr	r3, [pc, #8]	; (8003ffc <_Z16switchTuningModev+0x9c>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]
  }
 8003ff6:	bf00      	nop
 8003ff8:	bd98      	pop	{r3, r4, r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000530 	.word	0x20000530
 8004000:	40020000 	.word	0x40020000
 8004004:	20000020 	.word	0x20000020

08004008 <_Z16SBUS_RecieveBitsv>:
 * for later processing.
 * 
 * --Custom Method!
 */
void SBUS_RecieveBits()
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
  TIM4->CCR1 = (uint16_t)(fastPPM_CenterTime + ((float)SBUS_Channels[2] * PPMmainMotorScaler));
 800400e:	4b35      	ldr	r3, [pc, #212]	; (80040e4 <_Z16SBUS_RecieveBitsv+0xdc>)
 8004010:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004014:	4618      	mov	r0, r3
 8004016:	f7fc fe9d 	bl	8000d54 <__aeabi_i2f>
 800401a:	4603      	mov	r3, r0
 800401c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004020:	4618      	mov	r0, r3
 8004022:	f7fc feeb 	bl	8000dfc <__aeabi_fmul>
 8004026:	4603      	mov	r3, r0
 8004028:	492f      	ldr	r1, [pc, #188]	; (80040e8 <_Z16SBUS_RecieveBitsv+0xe0>)
 800402a:	4618      	mov	r0, r3
 800402c:	f7fc fdde 	bl	8000bec <__addsf3>
 8004030:	4603      	mov	r3, r0
 8004032:	4618      	mov	r0, r3
 8004034:	f7fd f8e4 	bl	8001200 <__aeabi_f2uiz>
 8004038:	4603      	mov	r3, r0
 800403a:	b29a      	uxth	r2, r3
 800403c:	4b2b      	ldr	r3, [pc, #172]	; (80040ec <_Z16SBUS_RecieveBitsv+0xe4>)
 800403e:	635a      	str	r2, [r3, #52]	; 0x34
  SBUS_timerCount = TIM11->CNT + SBUS_StartTimeOffset;                                                      //get current clock count from TIM11 + time offset
 8004040:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <_Z16SBUS_RecieveBitsv+0xe8>)
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b06      	subs	r3, #6
 8004048:	b29a      	uxth	r2, r3
 800404a:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <_Z16SBUS_RecieveBitsv+0xec>)
 800404c:	801a      	strh	r2, [r3, #0]
  SBUS_RxBitString[0] = true;                                                                               //sets the first value in the array to 1 as the interrupt is not fast
 800404e:	4b2a      	ldr	r3, [pc, #168]	; (80040f8 <_Z16SBUS_RecieveBitsv+0xf0>)
 8004050:	2201      	movs	r2, #1
 8004052:	701a      	strb	r2, [r3, #0]
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)                                                            //\->enough to be able to measure the pin for the first bit
 8004054:	2301      	movs	r3, #1
 8004056:	607b      	str	r3, [r7, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b8f      	cmp	r3, #143	; 0x8f
 800405c:	d83a      	bhi.n	80040d4 <_Z16SBUS_RecieveBitsv+0xcc>
  {
    ONBOARD_WRITE_3_GPIO_Port->BSRR = (uint32_t)ONBOARD_WRITE_3_Pin << 16U;                                 //NOTDONE debug
 800405e:	4b27      	ldr	r3, [pc, #156]	; (80040fc <_Z16SBUS_RecieveBitsv+0xf4>)
 8004060:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004064:	619a      	str	r2, [r3, #24]
    SBUS_RxBitString[i] = ((ONBOARD_READ_IT_3_GPIO_Port->IDR & ONBOARD_READ_IT_3_Pin) != 0 ? true : false); //if the SBUS pin is HIGH then the value is 1 else 0
 8004066:	4b26      	ldr	r3, [pc, #152]	; (8004100 <_Z16SBUS_RecieveBitsv+0xf8>)
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf14      	ite	ne
 8004072:	2301      	movne	r3, #1
 8004074:	2300      	moveq	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	4619      	mov	r1, r3
 800407a:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <_Z16SBUS_RecieveBitsv+0xf0>)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4413      	add	r3, r2
 8004080:	460a      	mov	r2, r1
 8004082:	701a      	strb	r2, [r3, #0]
    ONBOARD_WRITE_3_GPIO_Port->BSRR = ONBOARD_WRITE_3_Pin;                                                  //NOTDONE debug
 8004084:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <_Z16SBUS_RecieveBitsv+0xf4>)
 8004086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800408a:	619a      	str	r2, [r3, #24]
    while ((TIM11->CNT - SBUS_timerCount) < SBUS_ClockCyclesPerBit)                                         //wait until x clock pulses passed
 800408c:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <_Z16SBUS_RecieveBitsv+0xe8>)
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	4a18      	ldr	r2, [pc, #96]	; (80040f4 <_Z16SBUS_RecieveBitsv+0xec>)
 8004092:	8812      	ldrh	r2, [r2, #0]
 8004094:	1a9a      	subs	r2, r3, r2
 8004096:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <_Z16SBUS_RecieveBitsv+0xe8>)
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	3301      	adds	r3, #1
 800409c:	21a0      	movs	r1, #160	; 0xa0
 800409e:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a2:	429a      	cmp	r2, r3
 80040a4:	bf34      	ite	cc
 80040a6:	2301      	movcc	r3, #1
 80040a8:	2300      	movcs	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d000      	beq.n	80040b2 <_Z16SBUS_RecieveBitsv+0xaa>
 80040b0:	e7ec      	b.n	800408c <_Z16SBUS_RecieveBitsv+0x84>
    {
    }
    SBUS_timerCount += SBUS_ClockCyclesPerBit;
 80040b2:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <_Z16SBUS_RecieveBitsv+0xe8>)
 80040b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b6:	3301      	adds	r3, #1
 80040b8:	22a0      	movs	r2, #160	; 0xa0
 80040ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80040be:	b29a      	uxth	r2, r3
 80040c0:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <_Z16SBUS_RecieveBitsv+0xec>)
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	4413      	add	r3, r2
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <_Z16SBUS_RecieveBitsv+0xec>)
 80040ca:	801a      	strh	r2, [r3, #0]
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)                                                            //\->enough to be able to measure the pin for the first bit
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3301      	adds	r3, #1
 80040d0:	607b      	str	r3, [r7, #4]
 80040d2:	e7c1      	b.n	8004058 <_Z16SBUS_RecieveBitsv+0x50>
  }
  SBUSNewPackage = true;
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <_Z16SBUS_RecieveBitsv+0xfc>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	701a      	strb	r2, [r3, #0]
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000638 	.word	0x20000638
 80040e8:	44bb8000 	.word	0x44bb8000
 80040ec:	40000800 	.word	0x40000800
 80040f0:	40014800 	.word	0x40014800
 80040f4:	20000588 	.word	0x20000588
 80040f8:	2000058c 	.word	0x2000058c
 80040fc:	40020000 	.word	0x40020000
 8004100:	40020800 	.word	0x40020800
 8004104:	20000648 	.word	0x20000648

08004108 <_Z19SBUS_postProcessingv>:
 * channels.
 * 
 * --Custom Method!
 */
void SBUS_postProcessing()
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
  //verify:

  SBUS_CorruptedPackage = false;                                                                                          //reset corrupted package flag
 800410e:	4b85      	ldr	r3, [pc, #532]	; (8004324 <_Z19SBUS_postProcessingv+0x21c>)
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)                                                                         //repeat for each byte
 8004114:	2300      	movs	r3, #0
 8004116:	61fb      	str	r3, [r7, #28]
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	2b0b      	cmp	r3, #11
 800411c:	d85b      	bhi.n	80041d6 <_Z19SBUS_postProcessingv+0xce>
  {
    if ((SBUS_RxBitString[0 + (i * SBUS_BitsPerByte)] == true) & (SBUS_RxBitString[10 + (i * SBUS_BitsPerByte)] == false) & (SBUS_RxBitString[11 + (i * SBUS_BitsPerByte)] == false))
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	4613      	mov	r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	461a      	mov	r2, r3
 800412a:	4b7f      	ldr	r3, [pc, #508]	; (8004328 <_Z19SBUS_postProcessingv+0x220>)
 800412c:	5c9b      	ldrb	r3, [r3, r2]
 800412e:	2b01      	cmp	r3, #1
 8004130:	bf0c      	ite	eq
 8004132:	2301      	moveq	r3, #1
 8004134:	2300      	movne	r3, #0
 8004136:	b2d9      	uxtb	r1, r3
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	4613      	mov	r3, r2
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	330a      	adds	r3, #10
 8004144:	4a78      	ldr	r2, [pc, #480]	; (8004328 <_Z19SBUS_postProcessingv+0x220>)
 8004146:	5cd3      	ldrb	r3, [r2, r3]
 8004148:	2b00      	cmp	r3, #0
 800414a:	bf0c      	ite	eq
 800414c:	2301      	moveq	r3, #1
 800414e:	2300      	movne	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	400b      	ands	r3, r1
 8004154:	b2db      	uxtb	r3, r3
 8004156:	4619      	mov	r1, r3
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	4613      	mov	r3, r2
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	330b      	adds	r3, #11
 8004164:	4a70      	ldr	r2, [pc, #448]	; (8004328 <_Z19SBUS_postProcessingv+0x220>)
 8004166:	5cd3      	ldrb	r3, [r2, r3]
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	400b      	ands	r3, r1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d027      	beq.n	80041c8 <_Z19SBUS_postProcessingv+0xc0>
    {                                                                                                                     //^->check start bit, 2 stop bit
      uint8_t parityCheck = false;
 8004178:	2300      	movs	r3, #0
 800417a:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                                                                      //generate parity from 8 bits
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2b07      	cmp	r3, #7
 8004184:	d811      	bhi.n	80041aa <_Z19SBUS_postProcessingv+0xa2>
      {
        parityCheck ^= SBUS_RxBitString[1 + x + (i * SBUS_BitsPerByte)];
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	4613      	mov	r3, r2
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	461a      	mov	r2, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	4413      	add	r3, r2
 8004196:	3301      	adds	r3, #1
 8004198:	4a63      	ldr	r2, [pc, #396]	; (8004328 <_Z19SBUS_postProcessingv+0x220>)
 800419a:	5cd2      	ldrb	r2, [r2, r3]
 800419c:	7efb      	ldrb	r3, [r7, #27]
 800419e:	4053      	eors	r3, r2
 80041a0:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                                                                      //generate parity from 8 bits
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	3301      	adds	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	e7ea      	b.n	8004180 <_Z19SBUS_postProcessingv+0x78>
      }
      if (parityCheck == SBUS_RxBitString[9 + (i * SBUS_BitsPerByte)]) SBUS_CorruptedPackage = true;                      //if parity fails set corrupted flag
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	4613      	mov	r3, r2
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	3309      	adds	r3, #9
 80041b6:	4a5c      	ldr	r2, [pc, #368]	; (8004328 <_Z19SBUS_postProcessingv+0x220>)
 80041b8:	5cd3      	ldrb	r3, [r2, r3]
 80041ba:	7efa      	ldrb	r2, [r7, #27]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d106      	bne.n	80041ce <_Z19SBUS_postProcessingv+0xc6>
 80041c0:	4b58      	ldr	r3, [pc, #352]	; (8004324 <_Z19SBUS_postProcessingv+0x21c>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	e002      	b.n	80041ce <_Z19SBUS_postProcessingv+0xc6>
    }
    else SBUS_CorruptedPackage = true;                                                                                    //if start or stop bits fail set corrupted flag
 80041c8:	4b56      	ldr	r3, [pc, #344]	; (8004324 <_Z19SBUS_postProcessingv+0x21c>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)                                                                         //repeat for each byte
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3301      	adds	r3, #1
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	e7a0      	b.n	8004118 <_Z19SBUS_postProcessingv+0x10>
  }

  SBUS_Bytes[0] = 0;                                                                                                      //Reset the first byte (header byte)
 80041d6:	4b55      	ldr	r3, [pc, #340]	; (800432c <_Z19SBUS_postProcessingv+0x224>)
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 80041dc:	2300      	movs	r3, #0
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b07      	cmp	r3, #7
 80041e4:	d816      	bhi.n	8004214 <_Z19SBUS_postProcessingv+0x10c>
  {
    SBUS_Bytes[0] |= SBUS_RxBitString[1 + i] << (7 - i);                                                                  //assemble new header byte
 80041e6:	4b51      	ldr	r3, [pc, #324]	; (800432c <_Z19SBUS_postProcessingv+0x224>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	b25a      	sxtb	r2, r3
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	3301      	adds	r3, #1
 80041f0:	494d      	ldr	r1, [pc, #308]	; (8004328 <_Z19SBUS_postProcessingv+0x220>)
 80041f2:	5ccb      	ldrb	r3, [r1, r3]
 80041f4:	4619      	mov	r1, r3
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f1c3 0307 	rsb	r3, r3, #7
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	b25b      	sxtb	r3, r3
 8004202:	4313      	orrs	r3, r2
 8004204:	b25b      	sxtb	r3, r3
 8004206:	b2da      	uxtb	r2, r3
 8004208:	4b48      	ldr	r3, [pc, #288]	; (800432c <_Z19SBUS_postProcessingv+0x224>)
 800420a:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	3301      	adds	r3, #1
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	e7e5      	b.n	80041e0 <_Z19SBUS_postProcessingv+0xd8>
  }
  if (SBUS_Bytes[0] != 0x0FU) SBUS_CorruptedPackage = true;                                                               //check if header byte is 0x0F
 8004214:	4b45      	ldr	r3, [pc, #276]	; (800432c <_Z19SBUS_postProcessingv+0x224>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b0f      	cmp	r3, #15
 800421a:	d002      	beq.n	8004222 <_Z19SBUS_postProcessingv+0x11a>
 800421c:	4b41      	ldr	r3, [pc, #260]	; (8004324 <_Z19SBUS_postProcessingv+0x21c>)
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]

  //assemble channels:

  if (SBUS_CorruptedPackage == false)
 8004222:	4b40      	ldr	r3, [pc, #256]	; (8004324 <_Z19SBUS_postProcessingv+0x21c>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d175      	bne.n	8004316 <_Z19SBUS_postProcessingv+0x20e>
  {
    uint8_t byteNumber = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
    uint8_t bitNumber = 0;                                                                                                //0(LSB) to 7/(MSB)
 800422e:	2300      	movs	r3, #0
 8004230:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b07      	cmp	r3, #7
 800423a:	d86c      	bhi.n	8004316 <_Z19SBUS_postProcessingv+0x20e>
    {
      uint8_t bitInChannel = 0;                                                                                           //0(LSB) to 10(MSB)
 800423c:	2300      	movs	r3, #0
 800423e:	71fb      	strb	r3, [r7, #7]
      SBUS_TempChannels[i] = 0;
 8004240:	4a3b      	ldr	r2, [pc, #236]	; (8004330 <_Z19SBUS_postProcessingv+0x228>)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2100      	movs	r1, #0
 8004246:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      while (bitInChannel <= 10)
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	2b0a      	cmp	r3, #10
 800424e:	d843      	bhi.n	80042d8 <_Z19SBUS_postProcessingv+0x1d0>
      {
        if (bitNumber <= 7)
 8004250:	7bbb      	ldrb	r3, [r7, #14]
 8004252:	2b07      	cmp	r3, #7
 8004254:	d81a      	bhi.n	800428c <_Z19SBUS_postProcessingv+0x184>
        {
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;   //transfer bit
 8004256:	4a36      	ldr	r2, [pc, #216]	; (8004330 <_Z19SBUS_postProcessingv+0x228>)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800425e:	7bbb      	ldrb	r3, [r7, #14]
 8004260:	f103 000d 	add.w	r0, r3, #13
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	4613      	mov	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4403      	add	r3, r0
 8004270:	4a2d      	ldr	r2, [pc, #180]	; (8004328 <_Z19SBUS_postProcessingv+0x220>)
 8004272:	5cd3      	ldrb	r3, [r2, r3]
 8004274:	461a      	mov	r2, r3
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	b21b      	sxth	r3, r3
 800427e:	430b      	orrs	r3, r1
 8004280:	b219      	sxth	r1, r3
 8004282:	4a2b      	ldr	r2, [pc, #172]	; (8004330 <_Z19SBUS_postProcessingv+0x228>)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800428a:	e01e      	b.n	80042ca <_Z19SBUS_postProcessingv+0x1c2>
        }
        else
        {
          byteNumber ++;
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	3301      	adds	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
          bitNumber = 0;
 8004292:	2300      	movs	r3, #0
 8004294:	73bb      	strb	r3, [r7, #14]
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;   //transfer bit
 8004296:	4a26      	ldr	r2, [pc, #152]	; (8004330 <_Z19SBUS_postProcessingv+0x228>)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800429e:	7bbb      	ldrb	r3, [r7, #14]
 80042a0:	f103 000d 	add.w	r0, r3, #13
 80042a4:	7bfa      	ldrb	r2, [r7, #15]
 80042a6:	4613      	mov	r3, r2
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	4413      	add	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4403      	add	r3, r0
 80042b0:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <_Z19SBUS_postProcessingv+0x220>)
 80042b2:	5cd3      	ldrb	r3, [r2, r3]
 80042b4:	461a      	mov	r2, r3
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	b21b      	sxth	r3, r3
 80042be:	430b      	orrs	r3, r1
 80042c0:	b219      	sxth	r1, r3
 80042c2:	4a1b      	ldr	r2, [pc, #108]	; (8004330 <_Z19SBUS_postProcessingv+0x228>)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        bitNumber ++;
 80042ca:	7bbb      	ldrb	r3, [r7, #14]
 80042cc:	3301      	adds	r3, #1
 80042ce:	73bb      	strb	r3, [r7, #14]
        bitInChannel ++;
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	3301      	adds	r3, #1
 80042d4:	71fb      	strb	r3, [r7, #7]
      while (bitInChannel <= 10)
 80042d6:	e7b8      	b.n	800424a <_Z19SBUS_postProcessingv+0x142>
      }
      
      SBUS_Channels[i] = ((SBUS_rawValueCenter - (float)SBUS_TempChannels[i]) * SBUS_ConversionRation);            //map from 233, 1875 to -1000, 1000 and transfer channel value
 80042d8:	4a15      	ldr	r2, [pc, #84]	; (8004330 <_Z19SBUS_postProcessingv+0x228>)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fc fd37 	bl	8000d54 <__aeabi_i2f>
 80042e6:	4603      	mov	r3, r0
 80042e8:	4619      	mov	r1, r3
 80042ea:	4812      	ldr	r0, [pc, #72]	; (8004334 <_Z19SBUS_postProcessingv+0x22c>)
 80042ec:	f7fc fc7c 	bl	8000be8 <__aeabi_fsub>
 80042f0:	4603      	mov	r3, r0
 80042f2:	4911      	ldr	r1, [pc, #68]	; (8004338 <_Z19SBUS_postProcessingv+0x230>)
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fc fd81 	bl	8000dfc <__aeabi_fmul>
 80042fa:	4603      	mov	r3, r0
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fc ff59 	bl	80011b4 <__aeabi_f2iz>
 8004302:	4603      	mov	r3, r0
 8004304:	b219      	sxth	r1, r3
 8004306:	4a0d      	ldr	r2, [pc, #52]	; (800433c <_Z19SBUS_postProcessingv+0x234>)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	3301      	adds	r3, #1
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	e78f      	b.n	8004236 <_Z19SBUS_postProcessingv+0x12e>
    }
  }
  SBUSNewPackage = false;                                                                                                 //reset flag
 8004316:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <_Z19SBUS_postProcessingv+0x238>)
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
 800431c:	bf00      	nop
 800431e:	3720      	adds	r7, #32
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20000021 	.word	0x20000021
 8004328:	2000058c 	.word	0x2000058c
 800432c:	2000061c 	.word	0x2000061c
 8004330:	20000628 	.word	0x20000628
 8004334:	4483c000 	.word	0x4483c000
 8004338:	3f9be84d 	.word	0x3f9be84d
 800433c:	20000638 	.word	0x20000638
 8004340:	20000648 	.word	0x20000648

08004344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004348:	f001 fa34 	bl	80057b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800434c:	f000 f834 	bl	80043b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004350:	f000 fa0a 	bl	8004768 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8004354:	f000 f880 	bl	8004458 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8004358:	f000 f8da 	bl	8004510 <MX_I2C1_Init>
  MX_TIM3_Init();
 800435c:	f000 f90c 	bl	8004578 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8004360:	f000 f972 	bl	8004648 <_ZL12MX_TIM4_Initv>
  MX_TIM11_Init();
 8004364:	f000 f9d8 	bl	8004718 <_ZL13MX_TIM11_Initv>
  MX_USB_DEVICE_Init();
 8004368:	f008 fb74 	bl	800ca54 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim11);    //start TIM11
 800436c:	480e      	ldr	r0, [pc, #56]	; (80043a8 <main+0x64>)
 800436e:	f004 fedd 	bl	800912c <HAL_TIM_Base_Start>
  MPU6050_init();
 8004372:	f7fd fd91 	bl	8001e98 <_Z12MPU6050_initv>
  PPM_init();
 8004376:	f000 fc17 	bl	8004ba8 <_Z8PPM_initv>
  while (SBUS_CorruptedPackage == true)     //only continue if the heli is connected to the remote
 800437a:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <main+0x68>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d106      	bne.n	8004390 <main+0x4c>
  {
    if (SBUSNewPackage == true) SBUS_postProcessing();
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <main+0x6c>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d1f7      	bne.n	800437a <main+0x36>
 800438a:	f7ff febd 	bl	8004108 <_Z19SBUS_postProcessingv>
  while (SBUS_CorruptedPackage == true)     //only continue if the heli is connected to the remote
 800438e:	e7f4      	b.n	800437a <main+0x36>
  }
  ESCCalibration();
 8004390:	f000 fc18 	bl	8004bc4 <_Z14ESCCalibrationv>
  MPU6050_calibration();
 8004394:	f7fd fdde 	bl	8001f54 <_Z19MPU6050_calibrationv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin);   //NOTDONE debug
 8004398:	2110      	movs	r1, #16
 800439a:	4806      	ldr	r0, [pc, #24]	; (80043b4 <main+0x70>)
 800439c:	f002 f8c3 	bl	8006526 <HAL_GPIO_TogglePin>
    loop();
 80043a0:	f000 fd0e 	bl	8004dc0 <_Z4loopv>
    HAL_GPIO_TogglePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin);   //NOTDONE debug
 80043a4:	e7f8      	b.n	8004398 <main+0x54>
 80043a6:	bf00      	nop
 80043a8:	2000077c 	.word	0x2000077c
 80043ac:	20000021 	.word	0x20000021
 80043b0:	20000648 	.word	0x20000648
 80043b4:	40020000 	.word	0x40020000

080043b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b092      	sub	sp, #72	; 0x48
 80043bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043be:	f107 0318 	add.w	r3, r7, #24
 80043c2:	2230      	movs	r2, #48	; 0x30
 80043c4:	2100      	movs	r1, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f00b fbd6 	bl	800fb78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043cc:	1d3b      	adds	r3, r7, #4
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	609a      	str	r2, [r3, #8]
 80043d6:	60da      	str	r2, [r3, #12]
 80043d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80043da:	2301      	movs	r3, #1
 80043dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043de:	2301      	movs	r3, #1
 80043e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043e2:	2302      	movs	r3, #2
 80043e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80043e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 80043ec:	2308      	movs	r3, #8
 80043ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80043f0:	23c0      	movs	r3, #192	; 0xc0
 80043f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80043f4:	2306      	movs	r3, #6
 80043f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80043f8:	2308      	movs	r3, #8
 80043fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043fc:	f107 0318 	add.w	r3, r7, #24
 8004400:	4618      	mov	r0, r3
 8004402:	f004 f9d5 	bl	80087b0 <HAL_RCC_OscConfig>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf14      	ite	ne
 800440c:	2301      	movne	r3, #1
 800440e:	2300      	moveq	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8004416:	f000 fa6f 	bl	80048f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800441a:	230f      	movs	r3, #15
 800441c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800441e:	2302      	movs	r3, #2
 8004420:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8004422:	2390      	movs	r3, #144	; 0x90
 8004424:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004426:	2300      	movs	r3, #0
 8004428:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f004 fc0c 	bl	8008c50 <HAL_RCC_ClockConfig>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	bf14      	ite	ne
 800443e:	2301      	movne	r3, #1
 8004440:	2300      	moveq	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 8004448:	f000 fa56 	bl	80048f8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800444c:	f004 fcec 	bl	8008e28 <HAL_RCC_EnableCSS>
}
 8004450:	bf00      	nop
 8004452:	3748      	adds	r7, #72	; 0x48
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800445e:	463b      	mov	r3, r7
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800446a:	4b26      	ldr	r3, [pc, #152]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 800446c:	4a26      	ldr	r2, [pc, #152]	; (8004508 <_ZL12MX_ADC1_Initv+0xb0>)
 800446e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004470:	4b24      	ldr	r3, [pc, #144]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 8004472:	2200      	movs	r2, #0
 8004474:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004476:	4b23      	ldr	r3, [pc, #140]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 8004478:	2200      	movs	r2, #0
 800447a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800447c:	4b21      	ldr	r3, [pc, #132]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 800447e:	2200      	movs	r2, #0
 8004480:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004482:	4b20      	ldr	r3, [pc, #128]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 8004484:	2201      	movs	r2, #1
 8004486:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004488:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004490:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 8004492:	2200      	movs	r2, #0
 8004494:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004496:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 8004498:	4a1c      	ldr	r2, [pc, #112]	; (800450c <_ZL12MX_ADC1_Initv+0xb4>)
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800449c:	4b19      	ldr	r3, [pc, #100]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 800449e:	2200      	movs	r2, #0
 80044a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80044a2:	4b18      	ldr	r3, [pc, #96]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80044a8:	4b16      	ldr	r3, [pc, #88]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80044b0:	4b14      	ldr	r3, [pc, #80]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80044b6:	4813      	ldr	r0, [pc, #76]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 80044b8:	f001 fa0e 	bl	80058d8 <HAL_ADC_Init>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bf14      	ite	ne
 80044c2:	2301      	movne	r3, #1
 80044c4:	2300      	moveq	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 80044cc:	f000 fa14 	bl	80048f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80044d0:	230b      	movs	r3, #11
 80044d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80044d4:	2301      	movs	r3, #1
 80044d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80044d8:	2301      	movs	r3, #1
 80044da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044dc:	463b      	mov	r3, r7
 80044de:	4619      	mov	r1, r3
 80044e0:	4808      	ldr	r0, [pc, #32]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 80044e2:	f001 faed 	bl	8005ac0 <HAL_ADC_ConfigChannel>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	bf14      	ite	ne
 80044ec:	2301      	movne	r3, #1
 80044ee:	2300      	moveq	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80044f6:	f000 f9ff 	bl	80048f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80044fa:	bf00      	nop
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000650 	.word	0x20000650
 8004508:	40012000 	.word	0x40012000
 800450c:	0f000001 	.word	0x0f000001

08004510 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004514:	4b15      	ldr	r3, [pc, #84]	; (800456c <MX_I2C1_Init+0x5c>)
 8004516:	4a16      	ldr	r2, [pc, #88]	; (8004570 <MX_I2C1_Init+0x60>)
 8004518:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800451a:	4b14      	ldr	r3, [pc, #80]	; (800456c <MX_I2C1_Init+0x5c>)
 800451c:	4a15      	ldr	r2, [pc, #84]	; (8004574 <MX_I2C1_Init+0x64>)
 800451e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004520:	4b12      	ldr	r3, [pc, #72]	; (800456c <MX_I2C1_Init+0x5c>)
 8004522:	2200      	movs	r2, #0
 8004524:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004526:	4b11      	ldr	r3, [pc, #68]	; (800456c <MX_I2C1_Init+0x5c>)
 8004528:	2200      	movs	r2, #0
 800452a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <MX_I2C1_Init+0x5c>)
 800452e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004532:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004534:	4b0d      	ldr	r3, [pc, #52]	; (800456c <MX_I2C1_Init+0x5c>)
 8004536:	2200      	movs	r2, #0
 8004538:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800453a:	4b0c      	ldr	r3, [pc, #48]	; (800456c <MX_I2C1_Init+0x5c>)
 800453c:	2200      	movs	r2, #0
 800453e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <MX_I2C1_Init+0x5c>)
 8004542:	2200      	movs	r2, #0
 8004544:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <MX_I2C1_Init+0x5c>)
 8004548:	2200      	movs	r2, #0
 800454a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800454c:	4807      	ldr	r0, [pc, #28]	; (800456c <MX_I2C1_Init+0x5c>)
 800454e:	f002 f81b 	bl	8006588 <HAL_I2C_Init>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	bf14      	ite	ne
 8004558:	2301      	movne	r3, #1
 800455a:	2300      	moveq	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <MX_I2C1_Init+0x56>
  {
    Error_Handler();
 8004562:	f000 f9c9 	bl	80048f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000698 	.word	0x20000698
 8004570:	40005400 	.word	0x40005400
 8004574:	00061a80 	.word	0x00061a80

08004578 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800457e:	f107 0320 	add.w	r3, r7, #32
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004588:	1d3b      	adds	r3, r7, #4
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	605a      	str	r2, [r3, #4]
 8004590:	609a      	str	r2, [r3, #8]
 8004592:	60da      	str	r2, [r3, #12]
 8004594:	611a      	str	r2, [r3, #16]
 8004596:	615a      	str	r2, [r3, #20]
 8004598:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800459a:	4b29      	ldr	r3, [pc, #164]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 800459c:	4a29      	ldr	r2, [pc, #164]	; (8004644 <_ZL12MX_TIM3_Initv+0xcc>)
 800459e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 80045a0:	4b27      	ldr	r3, [pc, #156]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 80045a2:	220f      	movs	r2, #15
 80045a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045a6:	4b26      	ldr	r3, [pc, #152]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000 - 1;
 80045ac:	4b24      	ldr	r3, [pc, #144]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 80045ae:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80045b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045b4:	4b22      	ldr	r3, [pc, #136]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045ba:	4b21      	ldr	r3, [pc, #132]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 80045bc:	2200      	movs	r2, #0
 80045be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80045c0:	481f      	ldr	r0, [pc, #124]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 80045c2:	f004 fe87 	bl	80092d4 <HAL_TIM_PWM_Init>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 80045d6:	f000 f98f 	bl	80048f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045da:	2300      	movs	r3, #0
 80045dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045de:	2300      	movs	r3, #0
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80045e2:	f107 0320 	add.w	r3, r7, #32
 80045e6:	4619      	mov	r1, r3
 80045e8:	4815      	ldr	r0, [pc, #84]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 80045ea:	f005 fab7 	bl	8009b5c <HAL_TIMEx_MasterConfigSynchronization>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bf14      	ite	ne
 80045f4:	2301      	movne	r3, #1
 80045f6:	2300      	moveq	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80045fe:	f000 f97b 	bl	80048f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004602:	2360      	movs	r3, #96	; 0x60
 8004604:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004612:	1d3b      	adds	r3, r7, #4
 8004614:	2200      	movs	r2, #0
 8004616:	4619      	mov	r1, r3
 8004618:	4809      	ldr	r0, [pc, #36]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 800461a:	f004 ff73 	bl	8009504 <HAL_TIM_PWM_ConfigChannel>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	bf14      	ite	ne
 8004624:	2301      	movne	r3, #1
 8004626:	2300      	moveq	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 800462e:	f000 f963 	bl	80048f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004632:	4803      	ldr	r0, [pc, #12]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 8004634:	f000 ff32 	bl	800549c <HAL_TIM_MspPostInit>

}
 8004638:	bf00      	nop
 800463a:	3728      	adds	r7, #40	; 0x28
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	200006ec 	.word	0x200006ec
 8004644:	40000400 	.word	0x40000400

08004648 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08a      	sub	sp, #40	; 0x28
 800464c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800464e:	f107 0320 	add.w	r3, r7, #32
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004658:	1d3b      	adds	r3, r7, #4
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	605a      	str	r2, [r3, #4]
 8004660:	609a      	str	r2, [r3, #8]
 8004662:	60da      	str	r2, [r3, #12]
 8004664:	611a      	str	r2, [r3, #16]
 8004666:	615a      	str	r2, [r3, #20]
 8004668:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800466a:	4b29      	ldr	r3, [pc, #164]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 800466c:	4a29      	ldr	r2, [pc, #164]	; (8004714 <_ZL12MX_TIM4_Initv+0xcc>)
 800466e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16 - 1;
 8004670:	4b27      	ldr	r3, [pc, #156]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 8004672:	220f      	movs	r2, #15
 8004674:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004676:	4b26      	ldr	r3, [pc, #152]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 8004678:	2200      	movs	r2, #0
 800467a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2500 -1;
 800467c:	4b24      	ldr	r3, [pc, #144]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 800467e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8004682:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004684:	4b22      	ldr	r3, [pc, #136]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 8004686:	2200      	movs	r2, #0
 8004688:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800468a:	4b21      	ldr	r3, [pc, #132]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 800468c:	2200      	movs	r2, #0
 800468e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004690:	481f      	ldr	r0, [pc, #124]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 8004692:	f004 fe1f 	bl	80092d4 <HAL_TIM_PWM_Init>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf14      	ite	ne
 800469c:	2301      	movne	r3, #1
 800469e:	2300      	moveq	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 80046a6:	f000 f927 	bl	80048f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046aa:	2300      	movs	r3, #0
 80046ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80046b2:	f107 0320 	add.w	r3, r7, #32
 80046b6:	4619      	mov	r1, r3
 80046b8:	4815      	ldr	r0, [pc, #84]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 80046ba:	f005 fa4f 	bl	8009b5c <HAL_TIMEx_MasterConfigSynchronization>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bf14      	ite	ne
 80046c4:	2301      	movne	r3, #1
 80046c6:	2300      	moveq	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 80046ce:	f000 f913 	bl	80048f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046d2:	2360      	movs	r3, #96	; 0x60
 80046d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046e2:	1d3b      	adds	r3, r7, #4
 80046e4:	2200      	movs	r2, #0
 80046e6:	4619      	mov	r1, r3
 80046e8:	4809      	ldr	r0, [pc, #36]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 80046ea:	f004 ff0b 	bl	8009504 <HAL_TIM_PWM_ConfigChannel>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 80046fe:	f000 f8fb 	bl	80048f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004702:	4803      	ldr	r0, [pc, #12]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 8004704:	f000 feca 	bl	800549c <HAL_TIM_MspPostInit>

}
 8004708:	bf00      	nop
 800470a:	3728      	adds	r7, #40	; 0x28
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000734 	.word	0x20000734
 8004714:	40000800 	.word	0x40000800

08004718 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800471c:	4b10      	ldr	r3, [pc, #64]	; (8004760 <_ZL13MX_TIM11_Initv+0x48>)
 800471e:	4a11      	ldr	r2, [pc, #68]	; (8004764 <_ZL13MX_TIM11_Initv+0x4c>)
 8004720:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16 - 1;
 8004722:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <_ZL13MX_TIM11_Initv+0x48>)
 8004724:	220f      	movs	r2, #15
 8004726:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004728:	4b0d      	ldr	r3, [pc, #52]	; (8004760 <_ZL13MX_TIM11_Initv+0x48>)
 800472a:	2200      	movs	r2, #0
 800472c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800472e:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <_ZL13MX_TIM11_Initv+0x48>)
 8004730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004734:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004736:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <_ZL13MX_TIM11_Initv+0x48>)
 8004738:	2200      	movs	r2, #0
 800473a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800473c:	4b08      	ldr	r3, [pc, #32]	; (8004760 <_ZL13MX_TIM11_Initv+0x48>)
 800473e:	2200      	movs	r2, #0
 8004740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004742:	4807      	ldr	r0, [pc, #28]	; (8004760 <_ZL13MX_TIM11_Initv+0x48>)
 8004744:	f004 fca2 	bl	800908c <HAL_TIM_Base_Init>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	bf14      	ite	ne
 800474e:	2301      	movne	r3, #1
 8004750:	2300      	moveq	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8004758:	f000 f8ce 	bl	80048f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800475c:	bf00      	nop
 800475e:	bd80      	pop	{r7, pc}
 8004760:	2000077c 	.word	0x2000077c
 8004764:	40014800 	.word	0x40014800

08004768 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476e:	f107 0314 	add.w	r3, r7, #20
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	605a      	str	r2, [r3, #4]
 8004778:	609a      	str	r2, [r3, #8]
 800477a:	60da      	str	r2, [r3, #12]
 800477c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800477e:	2300      	movs	r3, #0
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	4b48      	ldr	r3, [pc, #288]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	4a47      	ldr	r2, [pc, #284]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 8004788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478c:	6313      	str	r3, [r2, #48]	; 0x30
 800478e:	4b45      	ldr	r3, [pc, #276]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	4b41      	ldr	r3, [pc, #260]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	4a40      	ldr	r2, [pc, #256]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047a4:	f043 0304 	orr.w	r3, r3, #4
 80047a8:	6313      	str	r3, [r2, #48]	; 0x30
 80047aa:	4b3e      	ldr	r3, [pc, #248]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	4b3a      	ldr	r3, [pc, #232]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	4a39      	ldr	r2, [pc, #228]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	6313      	str	r3, [r2, #48]	; 0x30
 80047c6:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	4b33      	ldr	r3, [pc, #204]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	4a32      	ldr	r2, [pc, #200]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047dc:	f043 0302 	orr.w	r3, r3, #2
 80047e0:	6313      	str	r3, [r2, #48]	; 0x30
 80047e2:	4b30      	ldr	r3, [pc, #192]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 80047ee:	2200      	movs	r2, #0
 80047f0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80047f4:	482c      	ldr	r0, [pc, #176]	; (80048a8 <_ZL12MX_GPIO_Initv+0x140>)
 80047f6:	f001 fe7e 	bl	80064f6 <HAL_GPIO_WritePin>
                          |ONBOARD_WRITE_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_RESET);
 80047fa:	2200      	movs	r2, #0
 80047fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004800:	482a      	ldr	r0, [pc, #168]	; (80048ac <_ZL12MX_GPIO_Initv+0x144>)
 8004802:	f001 fe78 	bl	80064f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_READ_IT_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_IT_3_Pin;
 8004806:	2301      	movs	r3, #1
 8004808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800480a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800480e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_IT_3_GPIO_Port, &GPIO_InitStruct);
 8004814:	f107 0314 	add.w	r3, r7, #20
 8004818:	4619      	mov	r1, r3
 800481a:	4824      	ldr	r0, [pc, #144]	; (80048ac <_ZL12MX_GPIO_Initv+0x144>)
 800481c:	f001 fcb6 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_BUTTON_1_Pin ONBOARD_BUTTON_2_Pin ONBOARD_BUTTON_3_Pin ONBOARD_BUTTON_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_BUTTON_1_Pin|ONBOARD_BUTTON_2_Pin|ONBOARD_BUTTON_3_Pin|ONBOARD_BUTTON_4_Pin;
 8004820:	230f      	movs	r3, #15
 8004822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004824:	2300      	movs	r3, #0
 8004826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004828:	2300      	movs	r3, #0
 800482a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800482c:	f107 0314 	add.w	r3, r7, #20
 8004830:	4619      	mov	r1, r3
 8004832:	481d      	ldr	r0, [pc, #116]	; (80048a8 <_ZL12MX_GPIO_Initv+0x140>)
 8004834:	f001 fcaa 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_LED_1_Pin ONBOARD_LED_2_Pin ONBOARD_LED_3_Pin ONBOARD_LED_4_Pin
                           ONBOARD_WRITE_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 8004838:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800483c:	617b      	str	r3, [r7, #20]
                          |ONBOARD_WRITE_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800483e:	2301      	movs	r3, #1
 8004840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004846:	2300      	movs	r3, #0
 8004848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800484a:	f107 0314 	add.w	r3, r7, #20
 800484e:	4619      	mov	r1, r3
 8004850:	4815      	ldr	r0, [pc, #84]	; (80048a8 <_ZL12MX_GPIO_Initv+0x140>)
 8004852:	f001 fc9b 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_WRITE_2_Pin */
  GPIO_InitStruct.Pin = ONBOARD_WRITE_2_Pin;
 8004856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800485a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800485c:	2301      	movs	r3, #1
 800485e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004860:	2300      	movs	r3, #0
 8004862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004864:	2300      	movs	r3, #0
 8004866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ONBOARD_WRITE_2_GPIO_Port, &GPIO_InitStruct);
 8004868:	f107 0314 	add.w	r3, r7, #20
 800486c:	4619      	mov	r1, r3
 800486e:	480f      	ldr	r0, [pc, #60]	; (80048ac <_ZL12MX_GPIO_Initv+0x144>)
 8004870:	f001 fc8c 	bl	800618c <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_READ_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_4_Pin;
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004878:	2300      	movs	r3, #0
 800487a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487c:	2300      	movs	r3, #0
 800487e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_4_GPIO_Port, &GPIO_InitStruct);
 8004880:	f107 0314 	add.w	r3, r7, #20
 8004884:	4619      	mov	r1, r3
 8004886:	480a      	ldr	r0, [pc, #40]	; (80048b0 <_ZL12MX_GPIO_Initv+0x148>)
 8004888:	f001 fc80 	bl	800618c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800488c:	2200      	movs	r2, #0
 800488e:	2100      	movs	r1, #0
 8004890:	2006      	movs	r0, #6
 8004892:	f001 fc36 	bl	8006102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004896:	2006      	movs	r0, #6
 8004898:	f001 fc4f 	bl	800613a <HAL_NVIC_EnableIRQ>

}
 800489c:	bf00      	nop
 800489e:	3728      	adds	r7, #40	; 0x28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40023800 	.word	0x40023800
 80048a8:	40020000 	.word	0x40020000
 80048ac:	40020800 	.word	0x40020800
 80048b0:	40020400 	.word	0x40020400

080048b4 <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin SBUS pin
 * 
 * --Custom Method!
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	80fb      	strh	r3, [r7, #6]
  if (TIM11->CNT - PinInterruptLastTime > SBUS_interruptDeactivationTime)
 80048be:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80048c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048c2:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <HAL_GPIO_EXTI_Callback+0x40>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	f640 0298 	movw	r2, #2200	; 0x898
 80048cc:	4293      	cmp	r3, r2
 80048ce:	bf8c      	ite	hi
 80048d0:	2301      	movhi	r3, #1
 80048d2:	2300      	movls	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d005      	beq.n	80048e6 <HAL_GPIO_EXTI_Callback+0x32>
  {
    SBUS_RecieveBits();
 80048da:	f7ff fb95 	bl	8004008 <_Z16SBUS_RecieveBitsv>
    PinInterruptLastTime = TIM11->CNT;
 80048de:	4b04      	ldr	r3, [pc, #16]	; (80048f0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	4a04      	ldr	r2, [pc, #16]	; (80048f4 <HAL_GPIO_EXTI_Callback+0x40>)
 80048e4:	6013      	str	r3, [r2, #0]
  }
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40014800 	.word	0x40014800
 80048f4:	2000064c 	.word	0x2000064c

080048f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048fc:	b672      	cpsid	i
}
 80048fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004900:	e7fe      	b.n	8004900 <Error_Handler+0x8>

08004902 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
 800490c:	6839      	ldr	r1, [r7, #0]
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f008 fff2 	bl	800d8f8 <atan2f>
 8004914:	4603      	mov	r3, r0
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <_Z20updateMainMotorSpeedv>:
 * Then it combines the throttle input and the PITCH,ROLL Y values together with the angle to get the new motorspeed
 * 
 * --Custom Method!
 */
void updateMainMotorSpeed()
{
 8004920:	b5b0      	push	{r4, r5, r7, lr}
 8004922:	af00      	add	r7, sp, #0
  ADC1->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, ADC_CHANNEL_11);               //reset sample rate
 8004924:	4b7e      	ldr	r3, [pc, #504]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4a7d      	ldr	r2, [pc, #500]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 800492a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800492e:	60d3      	str	r3, [r2, #12]
  ADC1->SMPR1 |= ADC_SMPR1(ADC_SAMPLETIME_15CYCLES, ADC_CHANNEL_11);        //set new sample rate Channel 11
 8004930:	4b7b      	ldr	r3, [pc, #492]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	4a7a      	ldr	r2, [pc, #488]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 8004936:	f043 0308 	orr.w	r3, r3, #8
 800493a:	60d3      	str	r3, [r2, #12]
  ADC1->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, 1);                              //reset Rank
 800493c:	4b78      	ldr	r3, [pc, #480]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 800493e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004940:	4a77      	ldr	r2, [pc, #476]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 8004942:	f023 031f 	bic.w	r3, r3, #31
 8004946:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= ADC_SQR3_RK(ADC_CHANNEL_11, 1);                             //set new Rank Channel 11
 8004948:	4b75      	ldr	r3, [pc, #468]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 800494a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494c:	4a74      	ldr	r2, [pc, #464]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 800494e:	f043 030b 	orr.w	r3, r3, #11
 8004952:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_ADC_Start(&hadc1);                                                    //start ADC
 8004954:	4873      	ldr	r0, [pc, #460]	; (8004b24 <_Z20updateMainMotorSpeedv+0x204>)
 8004956:	f001 f803 	bl	8005960 <HAL_ADC_Start>
	adcValueChannel11 = (uint16_t)ADC1->DR;                                   //read ADC value
 800495a:	4b71      	ldr	r3, [pc, #452]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 800495c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495e:	b29a      	uxth	r2, r3
 8004960:	4b71      	ldr	r3, [pc, #452]	; (8004b28 <_Z20updateMainMotorSpeedv+0x208>)
 8004962:	801a      	strh	r2, [r3, #0]

	ADC1->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, ADC_CHANNEL_12);               //reset sample rate
 8004964:	4b6e      	ldr	r3, [pc, #440]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4a6d      	ldr	r2, [pc, #436]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 800496a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800496e:	60d3      	str	r3, [r2, #12]
  ADC1->SMPR1 |= ADC_SMPR1(ADC_SAMPLETIME_15CYCLES, ADC_CHANNEL_12);        //set new sample rate Channel 12
 8004970:	4b6b      	ldr	r3, [pc, #428]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4a6a      	ldr	r2, [pc, #424]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 8004976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800497a:	60d3      	str	r3, [r2, #12]
  ADC1->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, 1);                              //reset Rank
 800497c:	4b68      	ldr	r3, [pc, #416]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 800497e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004980:	4a67      	ldr	r2, [pc, #412]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 8004982:	f023 031f 	bic.w	r3, r3, #31
 8004986:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= ADC_SQR3_RK(ADC_CHANNEL_12, 1);                             //set new Rank Channel 12
 8004988:	4b65      	ldr	r3, [pc, #404]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 800498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498c:	4a64      	ldr	r2, [pc, #400]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 800498e:	f043 030c 	orr.w	r3, r3, #12
 8004992:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_ADC_Start(&hadc1);                                                    //start ADC
 8004994:	4863      	ldr	r0, [pc, #396]	; (8004b24 <_Z20updateMainMotorSpeedv+0x204>)
 8004996:	f000 ffe3 	bl	8005960 <HAL_ADC_Start>
	adcValueChannel12 = (uint16_t)ADC1->DR;                                   //read ADC value
 800499a:	4b61      	ldr	r3, [pc, #388]	; (8004b20 <_Z20updateMainMotorSpeedv+0x200>)
 800499c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499e:	b29a      	uxth	r2, r3
 80049a0:	4b62      	ldr	r3, [pc, #392]	; (8004b2c <_Z20updateMainMotorSpeedv+0x20c>)
 80049a2:	801a      	strh	r2, [r3, #0]

  //NOTDONE maybe apply offset rotation without converting to mainMotorAngle and then back but rather use complex numbers
  //NOTDONE disable PITCH,ROLL when throttle is 0
  //mainMotorAngle = motorAngle(adcValueChannel12 - 1250, adcValueChannel11 - 1250);
  mainMotorAngle = ((atan2((float)adcValueChannel12 - 1250, (float)adcValueChannel11 - 1250) * 180) / M_PI) + 180;       //NOTDONE use define for value fastPPM_CenterTime
 80049a4:	4b61      	ldr	r3, [pc, #388]	; (8004b2c <_Z20updateMainMotorSpeedv+0x20c>)
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fc f9cf 	bl	8000d4c <__aeabi_ui2f>
 80049ae:	4603      	mov	r3, r0
 80049b0:	495f      	ldr	r1, [pc, #380]	; (8004b30 <_Z20updateMainMotorSpeedv+0x210>)
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fc f918 	bl	8000be8 <__aeabi_fsub>
 80049b8:	4603      	mov	r3, r0
 80049ba:	461c      	mov	r4, r3
 80049bc:	4b5a      	ldr	r3, [pc, #360]	; (8004b28 <_Z20updateMainMotorSpeedv+0x208>)
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fc f9c3 	bl	8000d4c <__aeabi_ui2f>
 80049c6:	4603      	mov	r3, r0
 80049c8:	4959      	ldr	r1, [pc, #356]	; (8004b30 <_Z20updateMainMotorSpeedv+0x210>)
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fc f90c 	bl	8000be8 <__aeabi_fsub>
 80049d0:	4603      	mov	r3, r0
 80049d2:	4619      	mov	r1, r3
 80049d4:	4620      	mov	r0, r4
 80049d6:	f7ff ff94 	bl	8004902 <_ZSt5atan2ff>
 80049da:	4603      	mov	r3, r0
 80049dc:	4955      	ldr	r1, [pc, #340]	; (8004b34 <_Z20updateMainMotorSpeedv+0x214>)
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fc fa0c 	bl	8000dfc <__aeabi_fmul>
 80049e4:	4603      	mov	r3, r0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fb fd5a 	bl	80004a0 <__aeabi_f2d>
 80049ec:	a348      	add	r3, pc, #288	; (adr r3, 8004b10 <_Z20updateMainMotorSpeedv+0x1f0>)
 80049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f2:	f7fb fed7 	bl	80007a4 <__aeabi_ddiv>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4610      	mov	r0, r2
 80049fc:	4619      	mov	r1, r3
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	4b4d      	ldr	r3, [pc, #308]	; (8004b38 <_Z20updateMainMotorSpeedv+0x218>)
 8004a04:	f7fb fbee 	bl	80001e4 <__adddf3>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	4619      	mov	r1, r3
 8004a10:	f7fc f876 	bl	8000b00 <__aeabi_d2uiz>
 8004a14:	4603      	mov	r3, r0
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	4b48      	ldr	r3, [pc, #288]	; (8004b3c <_Z20updateMainMotorSpeedv+0x21c>)
 8004a1a:	801a      	strh	r2, [r3, #0]
  TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2) + ((float)sin((mainMotorAngle + mainMotorAngleOffset) * (M_PI / 180)) * (PID_Pitch_y / 10)) + ((float)cos((mainMotorAngle + mainMotorAngleOffset) * (M_PI / 180)) * ((float)PID_Roll_y / 10))); //NOTDONE use define for value, try to simplify
 8004a1c:	4b48      	ldr	r3, [pc, #288]	; (8004b40 <_Z20updateMainMotorSpeedv+0x220>)
 8004a1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fc f996 	bl	8000d54 <__aeabi_i2f>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fc fa98 	bl	8000f64 <__aeabi_fdiv>
 8004a34:	4603      	mov	r3, r0
 8004a36:	4943      	ldr	r1, [pc, #268]	; (8004b44 <_Z20updateMainMotorSpeedv+0x224>)
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fc f8d7 	bl	8000bec <__addsf3>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	461d      	mov	r5, r3
 8004a42:	4b3e      	ldr	r3, [pc, #248]	; (8004b3c <_Z20updateMainMotorSpeedv+0x21c>)
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	4b3f      	ldr	r3, [pc, #252]	; (8004b48 <_Z20updateMainMotorSpeedv+0x228>)
 8004a4a:	f993 3000 	ldrsb.w	r3, [r3]
 8004a4e:	4413      	add	r3, r2
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fb fd13 	bl	800047c <__aeabi_i2d>
 8004a56:	a330      	add	r3, pc, #192	; (adr r3, 8004b18 <_Z20updateMainMotorSpeedv+0x1f8>)
 8004a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5c:	f7fb fd78 	bl	8000550 <__aeabi_dmul>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4610      	mov	r0, r2
 8004a66:	4619      	mov	r1, r3
 8004a68:	f008 fd3a 	bl	800d4e0 <sin>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	f7fc f864 	bl	8000b40 <__aeabi_d2f>
 8004a78:	4604      	mov	r4, r0
 8004a7a:	4b34      	ldr	r3, [pc, #208]	; (8004b4c <_Z20updateMainMotorSpeedv+0x22c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4934      	ldr	r1, [pc, #208]	; (8004b50 <_Z20updateMainMotorSpeedv+0x230>)
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fc fa6f 	bl	8000f64 <__aeabi_fdiv>
 8004a86:	4603      	mov	r3, r0
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f7fc f9b6 	bl	8000dfc <__aeabi_fmul>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4619      	mov	r1, r3
 8004a94:	4628      	mov	r0, r5
 8004a96:	f7fc f8a9 	bl	8000bec <__addsf3>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	461d      	mov	r5, r3
 8004a9e:	4b27      	ldr	r3, [pc, #156]	; (8004b3c <_Z20updateMainMotorSpeedv+0x21c>)
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	4b28      	ldr	r3, [pc, #160]	; (8004b48 <_Z20updateMainMotorSpeedv+0x228>)
 8004aa6:	f993 3000 	ldrsb.w	r3, [r3]
 8004aaa:	4413      	add	r3, r2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fb fce5 	bl	800047c <__aeabi_i2d>
 8004ab2:	a319      	add	r3, pc, #100	; (adr r3, 8004b18 <_Z20updateMainMotorSpeedv+0x1f8>)
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f7fb fd4a 	bl	8000550 <__aeabi_dmul>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	f008 fcca 	bl	800d45c <cos>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4610      	mov	r0, r2
 8004ace:	4619      	mov	r1, r3
 8004ad0:	f7fc f836 	bl	8000b40 <__aeabi_d2f>
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	4b1f      	ldr	r3, [pc, #124]	; (8004b54 <_Z20updateMainMotorSpeedv+0x234>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	491d      	ldr	r1, [pc, #116]	; (8004b50 <_Z20updateMainMotorSpeedv+0x230>)
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fc fa41 	bl	8000f64 <__aeabi_fdiv>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f7fc f988 	bl	8000dfc <__aeabi_fmul>
 8004aec:	4603      	mov	r3, r0
 8004aee:	4619      	mov	r1, r3
 8004af0:	4628      	mov	r0, r5
 8004af2:	f7fc f87b 	bl	8000bec <__addsf3>
 8004af6:	4603      	mov	r3, r0
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fc fb81 	bl	8001200 <__aeabi_f2uiz>
 8004afe:	4603      	mov	r3, r0
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <_Z20updateMainMotorSpeedv+0x238>)
 8004b04:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004b06:	bf00      	nop
 8004b08:	bdb0      	pop	{r4, r5, r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	f3af 8000 	nop.w
 8004b10:	54442d18 	.word	0x54442d18
 8004b14:	400921fb 	.word	0x400921fb
 8004b18:	a2529d39 	.word	0xa2529d39
 8004b1c:	3f91df46 	.word	0x3f91df46
 8004b20:	40012000 	.word	0x40012000
 8004b24:	20000650 	.word	0x20000650
 8004b28:	200007c4 	.word	0x200007c4
 8004b2c:	200007c6 	.word	0x200007c6
 8004b30:	449c4000 	.word	0x449c4000
 8004b34:	43340000 	.word	0x43340000
 8004b38:	40668000 	.word	0x40668000
 8004b3c:	200007c8 	.word	0x200007c8
 8004b40:	20000638 	.word	0x20000638
 8004b44:	44bb8000 	.word	0x44bb8000
 8004b48:	200007ca 	.word	0x200007ca
 8004b4c:	20000540 	.word	0x20000540
 8004b50:	41200000 	.word	0x41200000
 8004b54:	20000544 	.word	0x20000544
 8004b58:	40000800 	.word	0x40000800

08004b5c <_Z20updateTailMotorSpeedv>:
 * If the throttle is above a given deadzone the motor speed is YAW Y value
 * 
 * --Custom Method!
 */
void updateTailMotorSpeed()
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  if (SBUS_Channels[2] > tailmotorDeadzone)
 8004b60:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <_Z20updateTailMotorSpeedv+0x3c>)
 8004b62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004b66:	f513 7f75 	cmn.w	r3, #980	; 0x3d4
 8004b6a:	dd0e      	ble.n	8004b8a <_Z20updateTailMotorSpeedv+0x2e>
  {
    TIM3->CCR1 = (uint16_t)(slowPPM1_MinTime + PID_Yaw_y);
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <_Z20updateTailMotorSpeedv+0x40>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	490b      	ldr	r1, [pc, #44]	; (8004ba0 <_Z20updateTailMotorSpeedv+0x44>)
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fc f83a 	bl	8000bec <__addsf3>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fc fb40 	bl	8001200 <__aeabi_f2uiz>
 8004b80:	4603      	mov	r3, r0
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <_Z20updateTailMotorSpeedv+0x48>)
 8004b86:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    TIM3->CCR1 = slowPPM1_MinTime;
  }
}
 8004b88:	e003      	b.n	8004b92 <_Z20updateTailMotorSpeedv+0x36>
    TIM3->CCR1 = slowPPM1_MinTime;
 8004b8a:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <_Z20updateTailMotorSpeedv+0x48>)
 8004b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b90:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004b92:	bf00      	nop
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000638 	.word	0x20000638
 8004b9c:	20000548 	.word	0x20000548
 8004ba0:	447a0000 	.word	0x447a0000
 8004ba4:	40000400 	.word	0x40000400

08004ba8 <_Z8PPM_initv>:
 * @brief Initializes TIM 3 and 4 used for generating the PPM signals
 * 
 * --Custom Method!
 */
void PPM_init()
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim3);
 8004bac:	4803      	ldr	r0, [pc, #12]	; (8004bbc <_Z8PPM_initv+0x14>)
 8004bae:	f004 fb23 	bl	80091f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8004bb2:	4803      	ldr	r0, [pc, #12]	; (8004bc0 <_Z8PPM_initv+0x18>)
 8004bb4:	f004 fb20 	bl	80091f8 <HAL_TIM_Base_Start_IT>
}
 8004bb8:	bf00      	nop
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	200006ec 	.word	0x200006ec
 8004bc0:	20000734 	.word	0x20000734

08004bc4 <_Z14ESCCalibrationv>:
 * If BT1 is not pressed, it gives the ESCs x time to initialize
 * 
 * --Custom Method!
 */
void ESCCalibration()
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == true)
 8004bca:	2101      	movs	r1, #1
 8004bcc:	486d      	ldr	r0, [pc, #436]	; (8004d84 <_Z14ESCCalibrationv+0x1c0>)
 8004bce:	f001 fc7b 	bl	80064c8 <HAL_GPIO_ReadPin>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	bf0c      	ite	eq
 8004bd8:	2301      	moveq	r3, #1
 8004bda:	2300      	movne	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 80b8 	beq.w	8004d54 <_Z14ESCCalibrationv+0x190>
  {
    uint16_t counter = 0;
 8004be4:	2300      	movs	r3, #0
 8004be6:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);   //NOTDONE debug
 8004be8:	2120      	movs	r1, #32
 8004bea:	4866      	ldr	r0, [pc, #408]	; (8004d84 <_Z14ESCCalibrationv+0x1c0>)
 8004bec:	f001 fc9b 	bl	8006526 <HAL_GPIO_TogglePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);                                                                             //start PPM for tail motor
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4865      	ldr	r0, [pc, #404]	; (8004d88 <_Z14ESCCalibrationv+0x1c4>)
 8004bf4:	f004 fbbe 	bl	8009374 <HAL_TIM_PWM_Start>
    uint16_t oldTime = TIM11->CNT;
 8004bf8:	4b64      	ldr	r3, [pc, #400]	; (8004d8c <_Z14ESCCalibrationv+0x1c8>)
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	80bb      	strh	r3, [r7, #4]

    //main-motor
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 8004bfe:	2101      	movs	r1, #1
 8004c00:	4860      	ldr	r0, [pc, #384]	; (8004d84 <_Z14ESCCalibrationv+0x1c0>)
 8004c02:	f001 fc61 	bl	80064c8 <HAL_GPIO_ReadPin>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2301      	moveq	r3, #1
 8004c0e:	2300      	movne	r3, #0
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004c18:	428b      	cmp	r3, r1
 8004c1a:	bf94      	ite	ls
 8004c1c:	2301      	movls	r3, #1
 8004c1e:	2300      	movhi	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	4313      	orrs	r3, r2
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	bf14      	ite	ne
 8004c2a:	2301      	movne	r3, #1
 8004c2c:	2300      	moveq	r3, #0
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d033      	beq.n	8004c9c <_Z14ESCCalibrationv+0xd8>
    {
      if (SBUSNewPackage == true) SBUS_postProcessing();                                                                  //process new packets
 8004c34:	4b56      	ldr	r3, [pc, #344]	; (8004d90 <_Z14ESCCalibrationv+0x1cc>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <_Z14ESCCalibrationv+0x7c>
 8004c3c:	f7ff fa64 	bl	8004108 <_Z19SBUS_postProcessingv>
      TIM3->CCR1 = (uint16_t)(slowPPM1_CenterTime + (SBUS_Channels[2] * PPMtailMotorScaler));                             //update motor speed
 8004c40:	4b54      	ldr	r3, [pc, #336]	; (8004d94 <_Z14ESCCalibrationv+0x1d0>)
 8004c42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fc f884 	bl	8000d54 <__aeabi_i2f>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fc f8d2 	bl	8000dfc <__aeabi_fmul>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	494f      	ldr	r1, [pc, #316]	; (8004d98 <_Z14ESCCalibrationv+0x1d4>)
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fb ffc5 	bl	8000bec <__addsf3>
 8004c62:	4603      	mov	r3, r0
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fc facb 	bl	8001200 <__aeabi_f2uiz>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	4b4b      	ldr	r3, [pc, #300]	; (8004d9c <_Z14ESCCalibrationv+0x1d8>)
 8004c70:	635a      	str	r2, [r3, #52]	; 0x34
      while ((TIM11->CNT - oldTime) < 10000);                                                                             //wait for 10 milliseconds to pass
 8004c72:	4b46      	ldr	r3, [pc, #280]	; (8004d8c <_Z14ESCCalibrationv+0x1c8>)
 8004c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c76:	88bb      	ldrh	r3, [r7, #4]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	bf94      	ite	ls
 8004c82:	2301      	movls	r3, #1
 8004c84:	2300      	movhi	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d000      	beq.n	8004c8e <_Z14ESCCalibrationv+0xca>
 8004c8c:	e7f1      	b.n	8004c72 <_Z14ESCCalibrationv+0xae>
      oldTime = TIM11->CNT;
 8004c8e:	4b3f      	ldr	r3, [pc, #252]	; (8004d8c <_Z14ESCCalibrationv+0x1c8>)
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	80bb      	strh	r3, [r7, #4]
      counter += 10;
 8004c94:	88fb      	ldrh	r3, [r7, #6]
 8004c96:	330a      	adds	r3, #10
 8004c98:	80fb      	strh	r3, [r7, #6]
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 8004c9a:	e7b0      	b.n	8004bfe <_Z14ESCCalibrationv+0x3a>
    }

    counter = 0;                                                                                                          //reset counter
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_TogglePin(ONBOARD_LED_3_GPIO_Port, ONBOARD_LED_3_Pin);   //NOTDONE debug
 8004ca0:	2140      	movs	r1, #64	; 0x40
 8004ca2:	4838      	ldr	r0, [pc, #224]	; (8004d84 <_Z14ESCCalibrationv+0x1c0>)
 8004ca4:	f001 fc3f 	bl	8006526 <HAL_GPIO_TogglePin>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);                                                                             //start PPM for main motor
 8004ca8:	2100      	movs	r1, #0
 8004caa:	483d      	ldr	r0, [pc, #244]	; (8004da0 <_Z14ESCCalibrationv+0x1dc>)
 8004cac:	f004 fb62 	bl	8009374 <HAL_TIM_PWM_Start>
    oldTime = TIM11->CNT;
 8004cb0:	4b36      	ldr	r3, [pc, #216]	; (8004d8c <_Z14ESCCalibrationv+0x1c8>)
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	80bb      	strh	r3, [r7, #4]

    //tail-motor
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	4832      	ldr	r0, [pc, #200]	; (8004d84 <_Z14ESCCalibrationv+0x1c0>)
 8004cba:	f001 fc05 	bl	80064c8 <HAL_GPIO_ReadPin>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004cd0:	428b      	cmp	r3, r1
 8004cd2:	bf94      	ite	ls
 8004cd4:	2301      	movls	r3, #1
 8004cd6:	2300      	movhi	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bf14      	ite	ne
 8004ce2:	2301      	movne	r3, #1
 8004ce4:	2300      	moveq	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d047      	beq.n	8004d7c <_Z14ESCCalibrationv+0x1b8>
    {
      if (SBUSNewPackage == true) SBUS_postProcessing();                                                                  //process new packets
 8004cec:	4b28      	ldr	r3, [pc, #160]	; (8004d90 <_Z14ESCCalibrationv+0x1cc>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <_Z14ESCCalibrationv+0x134>
 8004cf4:	f7ff fa08 	bl	8004108 <_Z19SBUS_postProcessingv>
      TIM4->CCR1 = (uint16_t)(fastPPM_CenterTime + (SBUS_Channels[2] * PPMmainMotorScaler));                              //update motor speed
 8004cf8:	4b26      	ldr	r3, [pc, #152]	; (8004d94 <_Z14ESCCalibrationv+0x1d0>)
 8004cfa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fc f828 	bl	8000d54 <__aeabi_i2f>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fc f876 	bl	8000dfc <__aeabi_fmul>
 8004d10:	4603      	mov	r3, r0
 8004d12:	4921      	ldr	r1, [pc, #132]	; (8004d98 <_Z14ESCCalibrationv+0x1d4>)
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fb ff69 	bl	8000bec <__addsf3>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fc fa6f 	bl	8001200 <__aeabi_f2uiz>
 8004d22:	4603      	mov	r3, r0
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	4b1f      	ldr	r3, [pc, #124]	; (8004da4 <_Z14ESCCalibrationv+0x1e0>)
 8004d28:	635a      	str	r2, [r3, #52]	; 0x34
      while ((TIM11->CNT - oldTime) < 10000);                                                                             //wait for 10 milliseconds to pass
 8004d2a:	4b18      	ldr	r3, [pc, #96]	; (8004d8c <_Z14ESCCalibrationv+0x1c8>)
 8004d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d2e:	88bb      	ldrh	r3, [r7, #4]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f242 720f 	movw	r2, #9999	; 0x270f
 8004d36:	4293      	cmp	r3, r2
 8004d38:	bf94      	ite	ls
 8004d3a:	2301      	movls	r3, #1
 8004d3c:	2300      	movhi	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d000      	beq.n	8004d46 <_Z14ESCCalibrationv+0x182>
 8004d44:	e7f1      	b.n	8004d2a <_Z14ESCCalibrationv+0x166>
      oldTime = TIM11->CNT;
 8004d46:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <_Z14ESCCalibrationv+0x1c8>)
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	80bb      	strh	r3, [r7, #4]
      counter += 10;
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	330a      	adds	r3, #10
 8004d50:	80fb      	strh	r3, [r7, #6]
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 8004d52:	e7b0      	b.n	8004cb6 <_Z14ESCCalibrationv+0xf2>
    }
  }
  else
  {
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);                                                                             //start PPM for tail motor
 8004d54:	2100      	movs	r1, #0
 8004d56:	480c      	ldr	r0, [pc, #48]	; (8004d88 <_Z14ESCCalibrationv+0x1c4>)
 8004d58:	f004 fb0c 	bl	8009374 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);                                                                             //start PPM for main motor
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4810      	ldr	r0, [pc, #64]	; (8004da0 <_Z14ESCCalibrationv+0x1dc>)
 8004d60:	f004 fb08 	bl	8009374 <HAL_TIM_PWM_Start>

    TIM3->CCR1 = slowPPM1_MinTime;                                                                                        //set to 0%
 8004d64:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <_Z14ESCCalibrationv+0x1d8>)
 8004d66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d6a:	635a      	str	r2, [r3, #52]	; 0x34
    TIM4->CCR1 = fastPPM_MinTime;                                                                                         //set to 0%
 8004d6c:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <_Z14ESCCalibrationv+0x1e0>)
 8004d6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d72:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(ESC_StartupDelay);
 8004d74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d78:	f000 fd8a 	bl	8005890 <HAL_Delay>
  }
 8004d7c:	bf00      	nop
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40020000 	.word	0x40020000
 8004d88:	200006ec 	.word	0x200006ec
 8004d8c:	40014800 	.word	0x40014800
 8004d90:	20000648 	.word	0x20000648
 8004d94:	20000638 	.word	0x20000638
 8004d98:	44bb8000 	.word	0x44bb8000
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	20000734 	.word	0x20000734
 8004da4:	40000800 	.word	0x40000800

08004da8 <_ZSt4acosf>:
  { return __builtin_acosf(__x); }
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f008 fd55 	bl	800d860 <acosf>
 8004db6:	4603      	mov	r3, r0
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <_Z4loopv>:
#include "PID.h"

uint8_t task;

void loop()
{
 8004dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc4:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8004dc8:	af22      	add	r7, sp, #136	; 0x88
  if (TIM4->CNT < fastPPM_MinTime)
 8004dca:	4b28      	ldr	r3, [pc, #160]	; (8004e6c <_Z4loopv+0xac>)
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	bf94      	ite	ls
 8004dd6:	2301      	movls	r3, #1
 8004dd8:	2300      	movhi	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 8248 	beq.w	8005272 <_Z4loopv+0x4b2>
  {
    switch (task)                       //disable the SBUS pin interrupt for the selected tasks
 8004de2:	4b23      	ldr	r3, [pc, #140]	; (8004e70 <_Z4loopv+0xb0>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	2b06      	cmp	r3, #6
 8004de8:	d00e      	beq.n	8004e08 <_Z4loopv+0x48>
 8004dea:	2b06      	cmp	r3, #6
 8004dec:	dc10      	bgt.n	8004e10 <_Z4loopv+0x50>
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d002      	beq.n	8004df8 <_Z4loopv+0x38>
 8004df2:	2b05      	cmp	r3, #5
 8004df4:	d004      	beq.n	8004e00 <_Z4loopv+0x40>
      break;
    case 6:
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
      break;
    default:
      break;
 8004df6:	e00b      	b.n	8004e10 <_Z4loopv+0x50>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8004df8:	2006      	movs	r0, #6
 8004dfa:	f001 f9ac 	bl	8006156 <HAL_NVIC_DisableIRQ>
      break;
 8004dfe:	e008      	b.n	8004e12 <_Z4loopv+0x52>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8004e00:	2006      	movs	r0, #6
 8004e02:	f001 f9a8 	bl	8006156 <HAL_NVIC_DisableIRQ>
      break;
 8004e06:	e004      	b.n	8004e12 <_Z4loopv+0x52>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8004e08:	2006      	movs	r0, #6
 8004e0a:	f001 f9a4 	bl	8006156 <HAL_NVIC_DisableIRQ>
      break;
 8004e0e:	e000      	b.n	8004e12 <_Z4loopv+0x52>
      break;
 8004e10:	bf00      	nop
    }

    updateMainMotorSpeed();     //NOTDONE check is PPM value can be changed mid cycle or if it waits for the next one on oscilloscope
 8004e12:	f7ff fd85 	bl	8004920 <_Z20updateMainMotorSpeedv>

    switch (task)                       //execute the selected task
 8004e16:	4b16      	ldr	r3, [pc, #88]	; (8004e70 <_Z4loopv+0xb0>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	2b09      	cmp	r3, #9
 8004e1e:	f200 8210 	bhi.w	8005242 <_Z4loopv+0x482>
 8004e22:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <_Z4loopv+0x68>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004e51 	.word	0x08004e51
 8004e2c:	08004e5d 	.word	0x08004e5d
 8004e30:	08004e79 	.word	0x08004e79
 8004e34:	080051f5 	.word	0x080051f5
 8004e38:	080051ff 	.word	0x080051ff
 8004e3c:	0800520b 	.word	0x0800520b
 8004e40:	0800521f 	.word	0x0800521f
 8004e44:	08005243 	.word	0x08005243
 8004e48:	08005243 	.word	0x08005243
 8004e4c:	0800523b 	.word	0x0800523b
    {
    case 1:   //get quaternions
      MPU6050_resetFIFO();
 8004e50:	f7fc feaa 	bl	8001ba8 <_Z17MPU6050_resetFIFOv>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004e54:	2006      	movs	r0, #6
 8004e56:	f001 f970 	bl	800613a <HAL_NVIC_EnableIRQ>
      break;
 8004e5a:	e1f9      	b.n	8005250 <_Z4loopv+0x490>
    case 2:
      if (SBUSNewPackage == true) SBUS_postProcessing();
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <_Z4loopv+0xb4>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	f040 81f0 	bne.w	8005246 <_Z4loopv+0x486>
 8004e66:	f7ff f94f 	bl	8004108 <_Z19SBUS_postProcessingv>
      break;
 8004e6a:	e1ec      	b.n	8005246 <_Z4loopv+0x486>
 8004e6c:	40000800 	.word	0x40000800
 8004e70:	200007cb 	.word	0x200007cb
 8004e74:	20000648 	.word	0x20000648
    case 3:
       for (size_t i = 0; i < 1; i++)
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004e7e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f040 81e1 	bne.w	800524a <_Z4loopv+0x48a>
	       for (size_t i = 0; i < x; i++)
	       {
	       	msgTransmit[i] = msg[i];
	       }
	       CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
       }
 8004e88:	466b      	mov	r3, sp
 8004e8a:	607b      	str	r3, [r7, #4]
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd %hd %f %hd \r\n"                      \
 8004e8c:	4b98      	ldr	r3, [pc, #608]	; (80050f0 <_Z4loopv+0x330>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fb fb05 	bl	80004a0 <__aeabi_f2d>
 8004e96:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
 8004e9a:	4b96      	ldr	r3, [pc, #600]	; (80050f4 <_Z4loopv+0x334>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fb fafe 	bl	80004a0 <__aeabi_f2d>
 8004ea4:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 8004ea8:	4b93      	ldr	r3, [pc, #588]	; (80050f8 <_Z4loopv+0x338>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fb faf7 	bl	80004a0 <__aeabi_f2d>
 8004eb2:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8004eb6:	4b91      	ldr	r3, [pc, #580]	; (80050fc <_Z4loopv+0x33c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fb faf0 	bl	80004a0 <__aeabi_f2d>
 8004ec0:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8004ec4:	4b8e      	ldr	r3, [pc, #568]	; (8005100 <_Z4loopv+0x340>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fb fae9 	bl	80004a0 <__aeabi_f2d>
 8004ece:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8004ed2:	4b8c      	ldr	r3, [pc, #560]	; (8005104 <_Z4loopv+0x344>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fb fae2 	bl	80004a0 <__aeabi_f2d>
 8004edc:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
         , Pitch_PID_k[0] * 100                                                                                     \
 8004ee0:	4b89      	ldr	r3, [pc, #548]	; (8005108 <_Z4loopv+0x348>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4989      	ldr	r1, [pc, #548]	; (800510c <_Z4loopv+0x34c>)
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fb ff88 	bl	8000dfc <__aeabi_fmul>
 8004eec:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd %hd %f %hd \r\n"                      \
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fb fad6 	bl	80004a0 <__aeabi_f2d>
 8004ef4:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
         , Pitch_PID_k[1] * 100                                                                                     \
 8004ef8:	4b83      	ldr	r3, [pc, #524]	; (8005108 <_Z4loopv+0x348>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	4983      	ldr	r1, [pc, #524]	; (800510c <_Z4loopv+0x34c>)
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fb ff7c 	bl	8000dfc <__aeabi_fmul>
 8004f04:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd %hd %f %hd \r\n"                      \
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fb faca 	bl	80004a0 <__aeabi_f2d>
 8004f0c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
         , Pitch_PID_k[2] * 100                                                                                     \
 8004f10:	4b7d      	ldr	r3, [pc, #500]	; (8005108 <_Z4loopv+0x348>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	497d      	ldr	r1, [pc, #500]	; (800510c <_Z4loopv+0x34c>)
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fb ff70 	bl	8000dfc <__aeabi_fmul>
 8004f1c:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd %hd %f %hd \r\n"                      \
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fb fabe 	bl	80004a0 <__aeabi_f2d>
 8004f24:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
         , Roll_PID_k[0] * 100                                                                                      \
 8004f28:	4b79      	ldr	r3, [pc, #484]	; (8005110 <_Z4loopv+0x350>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4977      	ldr	r1, [pc, #476]	; (800510c <_Z4loopv+0x34c>)
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fb ff64 	bl	8000dfc <__aeabi_fmul>
 8004f34:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd %hd %f %hd \r\n"                      \
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fb fab2 	bl	80004a0 <__aeabi_f2d>
 8004f3c:	e9c7 0108 	strd	r0, r1, [r7, #32]
         , Roll_PID_k[1] * 100                                                                                      \
 8004f40:	4b73      	ldr	r3, [pc, #460]	; (8005110 <_Z4loopv+0x350>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	4971      	ldr	r1, [pc, #452]	; (800510c <_Z4loopv+0x34c>)
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fb ff58 	bl	8000dfc <__aeabi_fmul>
 8004f4c:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd %hd %f %hd \r\n"                      \
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fb faa6 	bl	80004a0 <__aeabi_f2d>
 8004f54:	e9c7 0106 	strd	r0, r1, [r7, #24]
         , Roll_PID_k[2] * 100                                                                                      \
 8004f58:	4b6d      	ldr	r3, [pc, #436]	; (8005110 <_Z4loopv+0x350>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	496b      	ldr	r1, [pc, #428]	; (800510c <_Z4loopv+0x34c>)
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fb ff4c 	bl	8000dfc <__aeabi_fmul>
 8004f64:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd %hd %f %hd \r\n"                      \
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fb fa9a 	bl	80004a0 <__aeabi_f2d>
 8004f6c:	e9c7 0104 	strd	r0, r1, [r7, #16]
         , Yaw_PID_k[0] * 100                                                                                       \
 8004f70:	4b68      	ldr	r3, [pc, #416]	; (8005114 <_Z4loopv+0x354>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4965      	ldr	r1, [pc, #404]	; (800510c <_Z4loopv+0x34c>)
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fb ff40 	bl	8000dfc <__aeabi_fmul>
 8004f7c:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd %hd %f %hd \r\n"                      \
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fb fa8e 	bl	80004a0 <__aeabi_f2d>
 8004f84:	e9c7 0102 	strd	r0, r1, [r7, #8]
         , Yaw_PID_k[1] * 100                                                                                       \
 8004f88:	4b62      	ldr	r3, [pc, #392]	; (8005114 <_Z4loopv+0x354>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	495f      	ldr	r1, [pc, #380]	; (800510c <_Z4loopv+0x34c>)
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fb ff34 	bl	8000dfc <__aeabi_fmul>
 8004f94:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd %hd %f %hd \r\n"                      \
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fb fa82 	bl	80004a0 <__aeabi_f2d>
 8004f9c:	4682      	mov	sl, r0
 8004f9e:	468b      	mov	fp, r1
         , Yaw_PID_k[2] * 100                                                                                       \
 8004fa0:	4b5c      	ldr	r3, [pc, #368]	; (8005114 <_Z4loopv+0x354>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	4959      	ldr	r1, [pc, #356]	; (800510c <_Z4loopv+0x34c>)
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fb ff28 	bl	8000dfc <__aeabi_fmul>
 8004fac:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd %hd %f %hd \r\n"                      \
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fb fa76 	bl	80004a0 <__aeabi_f2d>
 8004fb4:	4680      	mov	r8, r0
 8004fb6:	4689      	mov	r9, r1
         , 2 * (int16_t)(((float)atan((float)MPUoutputQuaternion[0] / (float)MPUoutputQuaternion[1]) * 180) / M_PI) \
 8004fb8:	4b57      	ldr	r3, [pc, #348]	; (8005118 <_Z4loopv+0x358>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	4b56      	ldr	r3, [pc, #344]	; (8005118 <_Z4loopv+0x358>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	f7fb ffce 	bl	8000f64 <__aeabi_fdiv>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fe fb36 	bl	800363c <_ZSt4atanf>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	4952      	ldr	r1, [pc, #328]	; (800511c <_Z4loopv+0x35c>)
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fb ff11 	bl	8000dfc <__aeabi_fmul>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fb fa5f 	bl	80004a0 <__aeabi_f2d>
 8004fe2:	a341      	add	r3, pc, #260	; (adr r3, 80050e8 <_Z4loopv+0x328>)
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f7fb fbdc 	bl	80007a4 <__aeabi_ddiv>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	f7fb fd5c 	bl	8000ab0 <__aeabi_d2iz>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	b21b      	sxth	r3, r3
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd %hd %f %hd \r\n"                      \
 8004ffc:	005e      	lsls	r6, r3, #1
         , 2 * (int16_t)(((float)acos((float)MPUoutputQuaternion[0] / (float)1073741824) * 180) / M_PI)             \
 8004ffe:	4b46      	ldr	r3, [pc, #280]	; (8005118 <_Z4loopv+0x358>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8005006:	4618      	mov	r0, r3
 8005008:	f7fb ffac 	bl	8000f64 <__aeabi_fdiv>
 800500c:	4603      	mov	r3, r0
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff feca 	bl	8004da8 <_ZSt4acosf>
 8005014:	4603      	mov	r3, r0
 8005016:	4941      	ldr	r1, [pc, #260]	; (800511c <_Z4loopv+0x35c>)
 8005018:	4618      	mov	r0, r3
 800501a:	f7fb feef 	bl	8000dfc <__aeabi_fmul>
 800501e:	4603      	mov	r3, r0
 8005020:	4618      	mov	r0, r3
 8005022:	f7fb fa3d 	bl	80004a0 <__aeabi_f2d>
 8005026:	a330      	add	r3, pc, #192	; (adr r3, 80050e8 <_Z4loopv+0x328>)
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f7fb fbba 	bl	80007a4 <__aeabi_ddiv>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4610      	mov	r0, r2
 8005036:	4619      	mov	r1, r3
 8005038:	f7fb fd3a 	bl	8000ab0 <__aeabi_d2iz>
 800503c:	4603      	mov	r3, r0
 800503e:	b21b      	sxth	r3, r3
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd %hd %f %hd \r\n"                      \
 8005040:	005c      	lsls	r4, r3, #1
         , (float)SBUS_Channels[5]                                                                                  \
 8005042:	4b37      	ldr	r3, [pc, #220]	; (8005120 <_Z4loopv+0x360>)
 8005044:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005048:	4618      	mov	r0, r3
 800504a:	f7fb fe83 	bl	8000d54 <__aeabi_i2f>
 800504e:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd %hd %f %hd \r\n"                      \
 8005050:	4618      	mov	r0, r3
 8005052:	f7fb fa25 	bl	80004a0 <__aeabi_f2d>
 8005056:	4b33      	ldr	r3, [pc, #204]	; (8005124 <_Z4loopv+0x364>)
 8005058:	f993 3000 	ldrsb.w	r3, [r3]
 800505c:	f107 0570 	add.w	r5, r7, #112	; 0x70
 8005060:	9320      	str	r3, [sp, #128]	; 0x80
 8005062:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 8005066:	941d      	str	r4, [sp, #116]	; 0x74
 8005068:	961c      	str	r6, [sp, #112]	; 0x70
 800506a:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 800506e:	e9cd ab18 	strd	sl, fp, [sp, #96]	; 0x60
 8005072:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005076:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 800507a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800507e:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 8005082:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005086:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 800508a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800508e:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005092:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005096:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 800509a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800509e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80050a2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80050a6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80050aa:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80050ae:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80050b2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80050b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80050ba:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80050be:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80050c2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80050c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80050ca:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80050ce:	e9cd 3400 	strd	r3, r4, [sp]
 80050d2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80050d6:	4914      	ldr	r1, [pc, #80]	; (8005128 <_Z4loopv+0x368>)
 80050d8:	4628      	mov	r0, r5
 80050da:	f00b fa73 	bl	80105c4 <siprintf>
	       uint8_t x = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 80050e4:	e022      	b.n	800512c <_Z4loopv+0x36c>
 80050e6:	bf00      	nop
 80050e8:	54442d18 	.word	0x54442d18
 80050ec:	400921fb 	.word	0x400921fb
 80050f0:	20000534 	.word	0x20000534
 80050f4:	20000538 	.word	0x20000538
 80050f8:	2000053c 	.word	0x2000053c
 80050fc:	20000540 	.word	0x20000540
 8005100:	20000544 	.word	0x20000544
 8005104:	20000548 	.word	0x20000548
 8005108:	2000054c 	.word	0x2000054c
 800510c:	42c80000 	.word	0x42c80000
 8005110:	20000558 	.word	0x20000558
 8005114:	20000564 	.word	0x20000564
 8005118:	20000494 	.word	0x20000494
 800511c:	43340000 	.word	0x43340000
 8005120:	20000638 	.word	0x20000638
 8005124:	200007ca 	.word	0x200007ca
 8005128:	080128e0 	.word	0x080128e0
	       while (msg[x] != NULL)
 800512c:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8005130:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005134:	5cd3      	ldrb	r3, [r2, r3]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <_Z4loopv+0x386>
	       	x++;
 800513a:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 800513e:	3301      	adds	r3, #1
 8005140:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
	       while (msg[x] != NULL)
 8005144:	e7f2      	b.n	800512c <_Z4loopv+0x36c>
	       unsigned char msgTransmit[x];
 8005146:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 800514a:	1e5c      	subs	r4, r3, #1
 800514c:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 8005150:	4623      	mov	r3, r4
 8005152:	3301      	adds	r3, #1
 8005154:	4618      	mov	r0, r3
 8005156:	f04f 0100 	mov.w	r1, #0
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	00cb      	lsls	r3, r1, #3
 8005164:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005168:	00c2      	lsls	r2, r0, #3
 800516a:	4623      	mov	r3, r4
 800516c:	3301      	adds	r3, #1
 800516e:	4618      	mov	r0, r3
 8005170:	f04f 0100 	mov.w	r1, #0
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	00cb      	lsls	r3, r1, #3
 800517e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005182:	00c2      	lsls	r2, r0, #3
 8005184:	4623      	mov	r3, r4
 8005186:	3301      	adds	r3, #1
 8005188:	3307      	adds	r3, #7
 800518a:	08db      	lsrs	r3, r3, #3
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	ebad 0d03 	sub.w	sp, sp, r3
 8005192:	ab22      	add	r3, sp, #136	; 0x88
 8005194:	3300      	adds	r3, #0
 8005196:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	       for (size_t i = 0; i < x; i++)
 800519a:	2300      	movs	r3, #0
 800519c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80051a0:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 80051a4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d212      	bcs.n	80051d2 <_Z4loopv+0x412>
	       	msgTransmit[i] = msg[i];
 80051ac:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80051b0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80051b4:	4413      	add	r3, r2
 80051b6:	7819      	ldrb	r1, [r3, #0]
 80051b8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80051bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80051c0:	4413      	add	r3, r2
 80051c2:	460a      	mov	r2, r1
 80051c4:	701a      	strb	r2, [r3, #0]
	       for (size_t i = 0; i < x; i++)
 80051c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80051ca:	3301      	adds	r3, #1
 80051cc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80051d0:	e7e6      	b.n	80051a0 <_Z4loopv+0x3e0>
	       CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 80051d2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80051d6:	b2a3      	uxth	r3, r4
 80051d8:	3301      	adds	r3, #1
 80051da:	b29b      	uxth	r3, r3
 80051dc:	4619      	mov	r1, r3
 80051de:	4610      	mov	r0, r2
 80051e0:	f007 fd0a 	bl	800cbf8 <CDC_Transmit_FS>
 80051e4:	f8d7 d004 	ldr.w	sp, [r7, #4]
       for (size_t i = 0; i < 1; i++)
 80051e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80051ec:	3301      	adds	r3, #1
 80051ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80051f2:	e644      	b.n	8004e7e <_Z4loopv+0xbe>
      break;
    case 4:
      get_XW_diffAngles();
 80051f4:	f7fe fa30 	bl	8003658 <_Z17get_XW_diffAnglesv>
      update_FrameOriginQuaternion();
 80051f8:	f7fc fdba 	bl	8001d70 <_Z28update_FrameOriginQuaternionv>
      break;
 80051fc:	e028      	b.n	8005250 <_Z4loopv+0x490>
    case 5:
      MPU6050_WaitForQuaternionSet();
 80051fe:	f7fc fcdd 	bl	8001bbc <_Z28MPU6050_WaitForQuaternionSetv>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005202:	2006      	movs	r0, #6
 8005204:	f000 ff99 	bl	800613a <HAL_NVIC_EnableIRQ>
      break;
 8005208:	e022      	b.n	8005250 <_Z4loopv+0x490>
    case 6:
      MPU6050_ConvertToQuaternions();
 800520a:	f7fc fd09 	bl	8001c20 <_Z28MPU6050_ConvertToQuaternionsv>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800520e:	2006      	movs	r0, #6
 8005210:	f000 ff93 	bl	800613a <HAL_NVIC_EnableIRQ>
      update_PID();
 8005214:	f7fe fad2 	bl	80037bc <_Z10update_PIDv>
      updateTailMotorSpeed();
 8005218:	f7ff fca0 	bl	8004b5c <_Z20updateTailMotorSpeedv>
      break;
 800521c:	e018      	b.n	8005250 <_Z4loopv+0x490>
    case 7:
      switchTuningMode();
 800521e:	f7fe fe9f 	bl	8003f60 <_Z16switchTuningModev>
      if (SBUS_Channels[4] >= 990)  //if the set-PID-switch on the remote is on read the values
 8005222:	4b17      	ldr	r3, [pc, #92]	; (8005280 <_Z4loopv+0x4c0>)
 8005224:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005228:	f240 32dd 	movw	r2, #989	; 0x3dd
 800522c:	4293      	cmp	r3, r2
 800522e:	dd0e      	ble.n	800524e <_Z4loopv+0x48e>
      {
        getPIDValues();
 8005230:	f7fe fc8a 	bl	8003b48 <_Z12getPIDValuesv>
        getAngleOffset();
 8005234:	f7fe fe70 	bl	8003f18 <_Z14getAngleOffsetv>
      }
      break;
 8005238:	e009      	b.n	800524e <_Z4loopv+0x48e>
    case 10:
      task = 0;                 //reset to task 1  (keep in mind task ++; below)
 800523a:	4b12      	ldr	r3, [pc, #72]	; (8005284 <_Z4loopv+0x4c4>)
 800523c:	2200      	movs	r2, #0
 800523e:	701a      	strb	r2, [r3, #0]
      break;
 8005240:	e006      	b.n	8005250 <_Z4loopv+0x490>
    default:
      break;
 8005242:	bf00      	nop
 8005244:	e004      	b.n	8005250 <_Z4loopv+0x490>
      break;
 8005246:	bf00      	nop
 8005248:	e002      	b.n	8005250 <_Z4loopv+0x490>
      break;
 800524a:	bf00      	nop
 800524c:	e000      	b.n	8005250 <_Z4loopv+0x490>
      break;
 800524e:	bf00      	nop
    }
    task ++;
 8005250:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <_Z4loopv+0x4c4>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	3301      	adds	r3, #1
 8005256:	b2da      	uxtb	r2, r3
 8005258:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <_Z4loopv+0x4c4>)
 800525a:	701a      	strb	r2, [r3, #0]

    while (TIM4->CNT <= fastPPM_MinTime);     //wait until fastPPM_MinTime has passed
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <_Z4loopv+0x4c8>)
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005264:	bf94      	ite	ls
 8005266:	2301      	movls	r3, #1
 8005268:	2300      	movhi	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d000      	beq.n	8005272 <_Z4loopv+0x4b2>
 8005270:	e7f4      	b.n	800525c <_Z4loopv+0x49c>
  }
 8005272:	bf00      	nop
 8005274:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8005278:	46bd      	mov	sp, r7
 800527a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527e:	bf00      	nop
 8005280:	20000638 	.word	0x20000638
 8005284:	200007cb 	.word	0x200007cb
 8005288:	40000800 	.word	0x40000800

0800528c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	607b      	str	r3, [r7, #4]
 8005296:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <HAL_MspInit+0x48>)
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	4a0e      	ldr	r2, [pc, #56]	; (80052d4 <HAL_MspInit+0x48>)
 800529c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052a0:	6453      	str	r3, [r2, #68]	; 0x44
 80052a2:	4b0c      	ldr	r3, [pc, #48]	; (80052d4 <HAL_MspInit+0x48>)
 80052a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052aa:	607b      	str	r3, [r7, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	603b      	str	r3, [r7, #0]
 80052b2:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <HAL_MspInit+0x48>)
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	4a07      	ldr	r2, [pc, #28]	; (80052d4 <HAL_MspInit+0x48>)
 80052b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052bc:	6413      	str	r3, [r2, #64]	; 0x40
 80052be:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <HAL_MspInit+0x48>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr
 80052d4:	40023800 	.word	0x40023800

080052d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08a      	sub	sp, #40	; 0x28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e0:	f107 0314 	add.w	r3, r7, #20
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	605a      	str	r2, [r3, #4]
 80052ea:	609a      	str	r2, [r3, #8]
 80052ec:	60da      	str	r2, [r3, #12]
 80052ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a17      	ldr	r2, [pc, #92]	; (8005354 <HAL_ADC_MspInit+0x7c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d127      	bne.n	800534a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80052fa:	2300      	movs	r3, #0
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	4b16      	ldr	r3, [pc, #88]	; (8005358 <HAL_ADC_MspInit+0x80>)
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	4a15      	ldr	r2, [pc, #84]	; (8005358 <HAL_ADC_MspInit+0x80>)
 8005304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005308:	6453      	str	r3, [r2, #68]	; 0x44
 800530a:	4b13      	ldr	r3, [pc, #76]	; (8005358 <HAL_ADC_MspInit+0x80>)
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	4b0f      	ldr	r3, [pc, #60]	; (8005358 <HAL_ADC_MspInit+0x80>)
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	4a0e      	ldr	r2, [pc, #56]	; (8005358 <HAL_ADC_MspInit+0x80>)
 8005320:	f043 0304 	orr.w	r3, r3, #4
 8005324:	6313      	str	r3, [r2, #48]	; 0x30
 8005326:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <HAL_ADC_MspInit+0x80>)
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ONBOARD_ADC_2_Pin|ONBOARD_ADC_1_Pin;
 8005332:	2306      	movs	r3, #6
 8005334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005336:	2303      	movs	r3, #3
 8005338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533a:	2300      	movs	r3, #0
 800533c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800533e:	f107 0314 	add.w	r3, r7, #20
 8005342:	4619      	mov	r1, r3
 8005344:	4805      	ldr	r0, [pc, #20]	; (800535c <HAL_ADC_MspInit+0x84>)
 8005346:	f000 ff21 	bl	800618c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800534a:	bf00      	nop
 800534c:	3728      	adds	r7, #40	; 0x28
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40012000 	.word	0x40012000
 8005358:	40023800 	.word	0x40023800
 800535c:	40020800 	.word	0x40020800

08005360 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08a      	sub	sp, #40	; 0x28
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005368:	f107 0314 	add.w	r3, r7, #20
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	605a      	str	r2, [r3, #4]
 8005372:	609a      	str	r2, [r3, #8]
 8005374:	60da      	str	r2, [r3, #12]
 8005376:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <HAL_I2C_MspInit+0x84>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d12c      	bne.n	80053dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005382:	2300      	movs	r3, #0
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	4b18      	ldr	r3, [pc, #96]	; (80053e8 <HAL_I2C_MspInit+0x88>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	4a17      	ldr	r2, [pc, #92]	; (80053e8 <HAL_I2C_MspInit+0x88>)
 800538c:	f043 0302 	orr.w	r3, r3, #2
 8005390:	6313      	str	r3, [r2, #48]	; 0x30
 8005392:	4b15      	ldr	r3, [pc, #84]	; (80053e8 <HAL_I2C_MspInit+0x88>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800539e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80053a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053a4:	2312      	movs	r3, #18
 80053a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053ac:	2303      	movs	r3, #3
 80053ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80053b0:	2304      	movs	r3, #4
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053b4:	f107 0314 	add.w	r3, r7, #20
 80053b8:	4619      	mov	r1, r3
 80053ba:	480c      	ldr	r0, [pc, #48]	; (80053ec <HAL_I2C_MspInit+0x8c>)
 80053bc:	f000 fee6 	bl	800618c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	4b08      	ldr	r3, [pc, #32]	; (80053e8 <HAL_I2C_MspInit+0x88>)
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	4a07      	ldr	r2, [pc, #28]	; (80053e8 <HAL_I2C_MspInit+0x88>)
 80053ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053ce:	6413      	str	r3, [r2, #64]	; 0x40
 80053d0:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <HAL_I2C_MspInit+0x88>)
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80053dc:	bf00      	nop
 80053de:	3728      	adds	r7, #40	; 0x28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40005400 	.word	0x40005400
 80053e8:	40023800 	.word	0x40023800
 80053ec:	40020400 	.word	0x40020400

080053f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a14      	ldr	r2, [pc, #80]	; (8005450 <HAL_TIM_PWM_MspInit+0x60>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d10e      	bne.n	8005420 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	4b13      	ldr	r3, [pc, #76]	; (8005454 <HAL_TIM_PWM_MspInit+0x64>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	4a12      	ldr	r2, [pc, #72]	; (8005454 <HAL_TIM_PWM_MspInit+0x64>)
 800540c:	f043 0302 	orr.w	r3, r3, #2
 8005410:	6413      	str	r3, [r2, #64]	; 0x40
 8005412:	4b10      	ldr	r3, [pc, #64]	; (8005454 <HAL_TIM_PWM_MspInit+0x64>)
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800541e:	e012      	b.n	8005446 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a0c      	ldr	r2, [pc, #48]	; (8005458 <HAL_TIM_PWM_MspInit+0x68>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d10d      	bne.n	8005446 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800542a:	2300      	movs	r3, #0
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	4b09      	ldr	r3, [pc, #36]	; (8005454 <HAL_TIM_PWM_MspInit+0x64>)
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	4a08      	ldr	r2, [pc, #32]	; (8005454 <HAL_TIM_PWM_MspInit+0x64>)
 8005434:	f043 0304 	orr.w	r3, r3, #4
 8005438:	6413      	str	r3, [r2, #64]	; 0x40
 800543a:	4b06      	ldr	r3, [pc, #24]	; (8005454 <HAL_TIM_PWM_MspInit+0x64>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	60bb      	str	r3, [r7, #8]
 8005444:	68bb      	ldr	r3, [r7, #8]
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr
 8005450:	40000400 	.word	0x40000400
 8005454:	40023800 	.word	0x40023800
 8005458:	40000800 	.word	0x40000800

0800545c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a0a      	ldr	r2, [pc, #40]	; (8005494 <HAL_TIM_Base_MspInit+0x38>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d10d      	bne.n	800548a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	4b09      	ldr	r3, [pc, #36]	; (8005498 <HAL_TIM_Base_MspInit+0x3c>)
 8005474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005476:	4a08      	ldr	r2, [pc, #32]	; (8005498 <HAL_TIM_Base_MspInit+0x3c>)
 8005478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800547c:	6453      	str	r3, [r2, #68]	; 0x44
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <HAL_TIM_Base_MspInit+0x3c>)
 8005480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800548a:	bf00      	nop
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr
 8005494:	40014800 	.word	0x40014800
 8005498:	40023800 	.word	0x40023800

0800549c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08a      	sub	sp, #40	; 0x28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054a4:	f107 0314 	add.w	r3, r7, #20
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	605a      	str	r2, [r3, #4]
 80054ae:	609a      	str	r2, [r3, #8]
 80054b0:	60da      	str	r2, [r3, #12]
 80054b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a24      	ldr	r2, [pc, #144]	; (800554c <HAL_TIM_MspPostInit+0xb0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d11e      	bne.n	80054fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054be:	2300      	movs	r3, #0
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	4b23      	ldr	r3, [pc, #140]	; (8005550 <HAL_TIM_MspPostInit+0xb4>)
 80054c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c6:	4a22      	ldr	r2, [pc, #136]	; (8005550 <HAL_TIM_MspPostInit+0xb4>)
 80054c8:	f043 0304 	orr.w	r3, r3, #4
 80054cc:	6313      	str	r3, [r2, #48]	; 0x30
 80054ce:	4b20      	ldr	r3, [pc, #128]	; (8005550 <HAL_TIM_MspPostInit+0xb4>)
 80054d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ONBOARD_WRITE_4_Pin;
 80054da:	2340      	movs	r3, #64	; 0x40
 80054dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054de:	2302      	movs	r3, #2
 80054e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054e6:	2300      	movs	r3, #0
 80054e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80054ea:	2302      	movs	r3, #2
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_4_GPIO_Port, &GPIO_InitStruct);
 80054ee:	f107 0314 	add.w	r3, r7, #20
 80054f2:	4619      	mov	r1, r3
 80054f4:	4817      	ldr	r0, [pc, #92]	; (8005554 <HAL_TIM_MspPostInit+0xb8>)
 80054f6:	f000 fe49 	bl	800618c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80054fa:	e022      	b.n	8005542 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a15      	ldr	r2, [pc, #84]	; (8005558 <HAL_TIM_MspPostInit+0xbc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d11d      	bne.n	8005542 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	4b11      	ldr	r3, [pc, #68]	; (8005550 <HAL_TIM_MspPostInit+0xb4>)
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	4a10      	ldr	r2, [pc, #64]	; (8005550 <HAL_TIM_MspPostInit+0xb4>)
 8005510:	f043 0302 	orr.w	r3, r3, #2
 8005514:	6313      	str	r3, [r2, #48]	; 0x30
 8005516:	4b0e      	ldr	r3, [pc, #56]	; (8005550 <HAL_TIM_MspPostInit+0xb4>)
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ONBOARD_WRITE_1_Pin;
 8005522:	2340      	movs	r3, #64	; 0x40
 8005524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005526:	2302      	movs	r3, #2
 8005528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552a:	2300      	movs	r3, #0
 800552c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800552e:	2300      	movs	r3, #0
 8005530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005532:	2302      	movs	r3, #2
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_1_GPIO_Port, &GPIO_InitStruct);
 8005536:	f107 0314 	add.w	r3, r7, #20
 800553a:	4619      	mov	r1, r3
 800553c:	4807      	ldr	r0, [pc, #28]	; (800555c <HAL_TIM_MspPostInit+0xc0>)
 800553e:	f000 fe25 	bl	800618c <HAL_GPIO_Init>
}
 8005542:	bf00      	nop
 8005544:	3728      	adds	r7, #40	; 0x28
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40000400 	.word	0x40000400
 8005550:	40023800 	.word	0x40023800
 8005554:	40020800 	.word	0x40020800
 8005558:	40000800 	.word	0x40000800
 800555c:	40020400 	.word	0x40020400

08005560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005564:	f003 fd78 	bl	8009058 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005568:	e7fe      	b.n	8005568 <NMI_Handler+0x8>

0800556a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800556a:	b480      	push	{r7}
 800556c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800556e:	e7fe      	b.n	800556e <HardFault_Handler+0x4>

08005570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005574:	e7fe      	b.n	8005574 <MemManage_Handler+0x4>

08005576 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005576:	b480      	push	{r7}
 8005578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800557a:	e7fe      	b.n	800557a <BusFault_Handler+0x4>

0800557c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005580:	e7fe      	b.n	8005580 <UsageFault_Handler+0x4>

08005582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005582:	b480      	push	{r7}
 8005584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005586:	bf00      	nop
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr

0800558e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800558e:	b480      	push	{r7}
 8005590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005592:	bf00      	nop
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr

0800559a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800559a:	b480      	push	{r7}
 800559c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800559e:	bf00      	nop
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr

080055a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055aa:	f000 f955 	bl	8005858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055ae:	bf00      	nop
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ONBOARD_READ_IT_3_Pin);
 80055b6:	2001      	movs	r0, #1
 80055b8:	f000 ffce 	bl	8006558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80055bc:	bf00      	nop
 80055be:	bd80      	pop	{r7, pc}

080055c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80055c4:	4802      	ldr	r0, [pc, #8]	; (80055d0 <OTG_FS_IRQHandler+0x10>)
 80055c6:	f002 f8dc 	bl	8007782 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80055ca:	bf00      	nop
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20001ca4 	.word	0x20001ca4

080055d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
	return 1;
 80055d8:	2301      	movs	r3, #1
}
 80055da:	4618      	mov	r0, r3
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr

080055e2 <_kill>:

int _kill(int pid, int sig)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80055ec:	f00a fa7c 	bl	800fae8 <__errno>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2216      	movs	r2, #22
 80055f4:	601a      	str	r2, [r3, #0]
	return -1;
 80055f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <_exit>:

void _exit (int status)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800560a:	f04f 31ff 	mov.w	r1, #4294967295
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff ffe7 	bl	80055e2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005614:	e7fe      	b.n	8005614 <_exit+0x12>

08005616 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b086      	sub	sp, #24
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	e00a      	b.n	800563e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005628:	f3af 8000 	nop.w
 800562c:	4601      	mov	r1, r0
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	60ba      	str	r2, [r7, #8]
 8005634:	b2ca      	uxtb	r2, r1
 8005636:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	3301      	adds	r3, #1
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	429a      	cmp	r2, r3
 8005644:	dbf0      	blt.n	8005628 <_read+0x12>
	}

return len;
 8005646:	687b      	ldr	r3, [r7, #4]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	e009      	b.n	8005676 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	60ba      	str	r2, [r7, #8]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	3301      	adds	r3, #1
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	429a      	cmp	r2, r3
 800567c:	dbf1      	blt.n	8005662 <_write+0x12>
	}
	return len;
 800567e:	687b      	ldr	r3, [r7, #4]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <_close>:

int _close(int file)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	return -1;
 8005690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr

0800569e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056ae:	605a      	str	r2, [r3, #4]
	return 0;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr

080056bc <_isatty>:

int _isatty(int file)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
	return 1;
 80056c4:	2301      	movs	r3, #1
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr

080056d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
	return 0;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056f0:	4a14      	ldr	r2, [pc, #80]	; (8005744 <_sbrk+0x5c>)
 80056f2:	4b15      	ldr	r3, [pc, #84]	; (8005748 <_sbrk+0x60>)
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056fc:	4b13      	ldr	r3, [pc, #76]	; (800574c <_sbrk+0x64>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d102      	bne.n	800570a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005704:	4b11      	ldr	r3, [pc, #68]	; (800574c <_sbrk+0x64>)
 8005706:	4a12      	ldr	r2, [pc, #72]	; (8005750 <_sbrk+0x68>)
 8005708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800570a:	4b10      	ldr	r3, [pc, #64]	; (800574c <_sbrk+0x64>)
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4413      	add	r3, r2
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	429a      	cmp	r2, r3
 8005716:	d207      	bcs.n	8005728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005718:	f00a f9e6 	bl	800fae8 <__errno>
 800571c:	4603      	mov	r3, r0
 800571e:	220c      	movs	r2, #12
 8005720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005722:	f04f 33ff 	mov.w	r3, #4294967295
 8005726:	e009      	b.n	800573c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005728:	4b08      	ldr	r3, [pc, #32]	; (800574c <_sbrk+0x64>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800572e:	4b07      	ldr	r3, [pc, #28]	; (800574c <_sbrk+0x64>)
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4413      	add	r3, r2
 8005736:	4a05      	ldr	r2, [pc, #20]	; (800574c <_sbrk+0x64>)
 8005738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800573a:	68fb      	ldr	r3, [r7, #12]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	20020000 	.word	0x20020000
 8005748:	00000400 	.word	0x00000400
 800574c:	200007cc 	.word	0x200007cc
 8005750:	200020b8 	.word	0x200020b8

08005754 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005758:	bf00      	nop
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr

08005760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005798 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005764:	480d      	ldr	r0, [pc, #52]	; (800579c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005766:	490e      	ldr	r1, [pc, #56]	; (80057a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005768:	4a0e      	ldr	r2, [pc, #56]	; (80057a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800576a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800576c:	e002      	b.n	8005774 <LoopCopyDataInit>

0800576e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800576e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005772:	3304      	adds	r3, #4

08005774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005778:	d3f9      	bcc.n	800576e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800577a:	4a0b      	ldr	r2, [pc, #44]	; (80057a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800577c:	4c0b      	ldr	r4, [pc, #44]	; (80057ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800577e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005780:	e001      	b.n	8005786 <LoopFillZerobss>

08005782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005784:	3204      	adds	r2, #4

08005786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005788:	d3fb      	bcc.n	8005782 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800578a:	f7ff ffe3 	bl	8005754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800578e:	f00a f9b1 	bl	800faf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005792:	f7fe fdd7 	bl	8004344 <main>
  bx  lr    
 8005796:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005798:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800579c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057a0:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 80057a4:	08013bd8 	.word	0x08013bd8
  ldr r2, =_sbss
 80057a8:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 80057ac:	200020b4 	.word	0x200020b4

080057b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057b0:	e7fe      	b.n	80057b0 <ADC_IRQHandler>
	...

080057b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057b8:	4b0e      	ldr	r3, [pc, #56]	; (80057f4 <HAL_Init+0x40>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a0d      	ldr	r2, [pc, #52]	; (80057f4 <HAL_Init+0x40>)
 80057be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80057c4:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <HAL_Init+0x40>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a0a      	ldr	r2, [pc, #40]	; (80057f4 <HAL_Init+0x40>)
 80057ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057d0:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <HAL_Init+0x40>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a07      	ldr	r2, [pc, #28]	; (80057f4 <HAL_Init+0x40>)
 80057d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057dc:	2003      	movs	r0, #3
 80057de:	f000 fc85 	bl	80060ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057e2:	200f      	movs	r0, #15
 80057e4:	f000 f808 	bl	80057f8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80057e8:	f7ff fd50 	bl	800528c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40023c00 	.word	0x40023c00

080057f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005800:	4b12      	ldr	r3, [pc, #72]	; (800584c <HAL_InitTick+0x54>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	4b12      	ldr	r3, [pc, #72]	; (8005850 <HAL_InitTick+0x58>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	4619      	mov	r1, r3
 800580a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800580e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005812:	fbb2 f3f3 	udiv	r3, r2, r3
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fcab 	bl	8006172 <HAL_SYSTICK_Config>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e00e      	b.n	8005844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b0f      	cmp	r3, #15
 800582a:	d80a      	bhi.n	8005842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800582c:	2200      	movs	r2, #0
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	f04f 30ff 	mov.w	r0, #4294967295
 8005834:	f000 fc65 	bl	8006102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005838:	4a06      	ldr	r2, [pc, #24]	; (8005854 <HAL_InitTick+0x5c>)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	e000      	b.n	8005844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
}
 8005844:	4618      	mov	r0, r3
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20000024 	.word	0x20000024
 8005850:	2000002c 	.word	0x2000002c
 8005854:	20000028 	.word	0x20000028

08005858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800585c:	4b05      	ldr	r3, [pc, #20]	; (8005874 <HAL_IncTick+0x1c>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	461a      	mov	r2, r3
 8005862:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_IncTick+0x20>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4413      	add	r3, r2
 8005868:	4a03      	ldr	r2, [pc, #12]	; (8005878 <HAL_IncTick+0x20>)
 800586a:	6013      	str	r3, [r2, #0]
}
 800586c:	bf00      	nop
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr
 8005874:	2000002c 	.word	0x2000002c
 8005878:	200007dc 	.word	0x200007dc

0800587c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  return uwTick;
 8005880:	4b02      	ldr	r3, [pc, #8]	; (800588c <HAL_GetTick+0x10>)
 8005882:	681b      	ldr	r3, [r3, #0]
}
 8005884:	4618      	mov	r0, r3
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr
 800588c:	200007dc 	.word	0x200007dc

08005890 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005898:	f7ff fff0 	bl	800587c <HAL_GetTick>
 800589c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a8:	d005      	beq.n	80058b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058aa:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <HAL_Delay+0x44>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80058b6:	bf00      	nop
 80058b8:	f7ff ffe0 	bl	800587c <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d8f7      	bhi.n	80058b8 <HAL_Delay+0x28>
  {
  }
}
 80058c8:	bf00      	nop
 80058ca:	bf00      	nop
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	2000002c 	.word	0x2000002c

080058d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e033      	b.n	8005956 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d109      	bne.n	800590a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff fcee 	bl	80052d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	f003 0310 	and.w	r3, r3, #16
 8005912:	2b00      	cmp	r3, #0
 8005914:	d118      	bne.n	8005948 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800591e:	f023 0302 	bic.w	r3, r3, #2
 8005922:	f043 0202 	orr.w	r2, r3, #2
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f9e8 	bl	8005d00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f023 0303 	bic.w	r3, r3, #3
 800593e:	f043 0201 	orr.w	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	641a      	str	r2, [r3, #64]	; 0x40
 8005946:	e001      	b.n	800594c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005954:	7bfb      	ldrb	r3, [r7, #15]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <HAL_ADC_Start+0x1a>
 8005976:	2302      	movs	r3, #2
 8005978:	e095      	b.n	8005aa6 <HAL_ADC_Start+0x146>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b01      	cmp	r3, #1
 800598e:	d018      	beq.n	80059c2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80059a0:	4b43      	ldr	r3, [pc, #268]	; (8005ab0 <HAL_ADC_Start+0x150>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a43      	ldr	r2, [pc, #268]	; (8005ab4 <HAL_ADC_Start+0x154>)
 80059a6:	fba2 2303 	umull	r2, r3, r2, r3
 80059aa:	0c9a      	lsrs	r2, r3, #18
 80059ac:	4613      	mov	r3, r2
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	4413      	add	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 80059b4:	e002      	b.n	80059bc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1f9      	bne.n	80059b6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d15d      	bne.n	8005a8c <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80059fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0e:	d106      	bne.n	8005a1e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a14:	f023 0206 	bic.w	r2, r3, #6
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	645a      	str	r2, [r3, #68]	; 0x44
 8005a1c:	e002      	b.n	8005a24 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005a34:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005a36:	4b20      	ldr	r3, [pc, #128]	; (8005ab8 <HAL_ADC_Start+0x158>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10f      	bne.n	8005a62 <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d129      	bne.n	8005aa4 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a5e:	609a      	str	r2, [r3, #8]
 8005a60:	e020      	b.n	8005aa4 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a15      	ldr	r2, [pc, #84]	; (8005abc <HAL_ADC_Start+0x15c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d11b      	bne.n	8005aa4 <HAL_ADC_Start+0x144>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d114      	bne.n	8005aa4 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a88:	609a      	str	r2, [r3, #8]
 8005a8a:	e00b      	b.n	8005aa4 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	f043 0210 	orr.w	r2, r3, #16
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9c:	f043 0201 	orr.w	r2, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr
 8005ab0:	20000024 	.word	0x20000024
 8005ab4:	431bde83 	.word	0x431bde83
 8005ab8:	40012300 	.word	0x40012300
 8005abc:	40012000 	.word	0x40012000

08005ac0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_ADC_ConfigChannel+0x1c>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e103      	b.n	8005ce4 <HAL_ADC_ConfigChannel+0x224>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b09      	cmp	r3, #9
 8005aea:	d925      	bls.n	8005b38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68d9      	ldr	r1, [r3, #12]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	461a      	mov	r2, r3
 8005afa:	4613      	mov	r3, r2
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	4413      	add	r3, r2
 8005b00:	3b1e      	subs	r3, #30
 8005b02:	2207      	movs	r2, #7
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	43da      	mvns	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	400a      	ands	r2, r1
 8005b10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68d9      	ldr	r1, [r3, #12]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	4618      	mov	r0, r3
 8005b24:	4603      	mov	r3, r0
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	4403      	add	r3, r0
 8005b2a:	3b1e      	subs	r3, #30
 8005b2c:	409a      	lsls	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	60da      	str	r2, [r3, #12]
 8005b36:	e022      	b.n	8005b7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6919      	ldr	r1, [r3, #16]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	4613      	mov	r3, r2
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	4413      	add	r3, r2
 8005b4c:	2207      	movs	r2, #7
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	43da      	mvns	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	400a      	ands	r2, r1
 8005b5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6919      	ldr	r1, [r3, #16]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	4603      	mov	r3, r0
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	4403      	add	r3, r0
 8005b74:	409a      	lsls	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b06      	cmp	r3, #6
 8005b84:	d824      	bhi.n	8005bd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	3b05      	subs	r3, #5
 8005b98:	221f      	movs	r2, #31
 8005b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9e:	43da      	mvns	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	400a      	ands	r2, r1
 8005ba6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	3b05      	subs	r3, #5
 8005bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8005bce:	e04c      	b.n	8005c6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2b0c      	cmp	r3, #12
 8005bd6:	d824      	bhi.n	8005c22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	3b23      	subs	r3, #35	; 0x23
 8005bea:	221f      	movs	r2, #31
 8005bec:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf0:	43da      	mvns	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	400a      	ands	r2, r1
 8005bf8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	4618      	mov	r0, r3
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	3b23      	subs	r3, #35	; 0x23
 8005c14:	fa00 f203 	lsl.w	r2, r0, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8005c20:	e023      	b.n	8005c6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	3b41      	subs	r3, #65	; 0x41
 8005c34:	221f      	movs	r2, #31
 8005c36:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3a:	43da      	mvns	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	400a      	ands	r2, r1
 8005c42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	4618      	mov	r0, r3
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	4613      	mov	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	3b41      	subs	r3, #65	; 0x41
 8005c5e:	fa00 f203 	lsl.w	r2, r0, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a20      	ldr	r2, [pc, #128]	; (8005cf0 <HAL_ADC_ConfigChannel+0x230>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d109      	bne.n	8005c88 <HAL_ADC_ConfigChannel+0x1c8>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b12      	cmp	r3, #18
 8005c7a:	d105      	bne.n	8005c88 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005c7c:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <HAL_ADC_ConfigChannel+0x234>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	4a1c      	ldr	r2, [pc, #112]	; (8005cf4 <HAL_ADC_ConfigChannel+0x234>)
 8005c82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c86:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a18      	ldr	r2, [pc, #96]	; (8005cf0 <HAL_ADC_ConfigChannel+0x230>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d123      	bne.n	8005cda <HAL_ADC_ConfigChannel+0x21a>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b10      	cmp	r3, #16
 8005c98:	d003      	beq.n	8005ca2 <HAL_ADC_ConfigChannel+0x1e2>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b11      	cmp	r3, #17
 8005ca0:	d11b      	bne.n	8005cda <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005ca2:	4b14      	ldr	r3, [pc, #80]	; (8005cf4 <HAL_ADC_ConfigChannel+0x234>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	4a13      	ldr	r2, [pc, #76]	; (8005cf4 <HAL_ADC_ConfigChannel+0x234>)
 8005ca8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cac:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	d111      	bne.n	8005cda <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005cb6:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <HAL_ADC_ConfigChannel+0x238>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a10      	ldr	r2, [pc, #64]	; (8005cfc <HAL_ADC_ConfigChannel+0x23c>)
 8005cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc0:	0c9a      	lsrs	r2, r3, #18
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8005ccc:	e002      	b.n	8005cd4 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f9      	bne.n	8005cce <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40012000 	.word	0x40012000
 8005cf4:	40012300 	.word	0x40012300
 8005cf8:	20000024 	.word	0x20000024
 8005cfc:	431bde83 	.word	0x431bde83

08005d00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005d08:	4b7e      	ldr	r3, [pc, #504]	; (8005f04 <ADC_Init+0x204>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	4a7d      	ldr	r2, [pc, #500]	; (8005f04 <ADC_Init+0x204>)
 8005d0e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005d12:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005d14:	4b7b      	ldr	r3, [pc, #492]	; (8005f04 <ADC_Init+0x204>)
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	4979      	ldr	r1, [pc, #484]	; (8005f04 <ADC_Init+0x204>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6859      	ldr	r1, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	021a      	lsls	r2, r3, #8
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005d54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6859      	ldr	r1, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6899      	ldr	r1, [r3, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8e:	4a5e      	ldr	r2, [pc, #376]	; (8005f08 <ADC_Init+0x208>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d022      	beq.n	8005dda <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005da2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6899      	ldr	r1, [r3, #8]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005dc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6899      	ldr	r1, [r3, #8]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	609a      	str	r2, [r3, #8]
 8005dd8:	e00f      	b.n	8005dfa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005de8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005df8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0202 	bic.w	r2, r2, #2
 8005e08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6899      	ldr	r1, [r3, #8]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	7e1b      	ldrb	r3, [r3, #24]
 8005e14:	005a      	lsls	r2, r3, #1
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d027      	beq.n	8005e78 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005e46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8005e52:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	fa92 f2a2 	rbit	r2, r2
 8005e5a:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	fab2 f282 	clz	r2, r2
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	fa03 f102 	lsl.w	r1, r3, r2
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	605a      	str	r2, [r3, #4]
 8005e76:	e007      	b.n	8005e88 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005e96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	051a      	lsls	r2, r3, #20
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ebc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6899      	ldr	r1, [r3, #8]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005eca:	025a      	lsls	r2, r3, #9
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6899      	ldr	r1, [r3, #8]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	029a      	lsls	r2, r3, #10
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	609a      	str	r2, [r3, #8]
}
 8005ef8:	bf00      	nop
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bc80      	pop	{r7}
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40012300 	.word	0x40012300
 8005f08:	0f000001 	.word	0x0f000001

08005f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f1c:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <__NVIC_SetPriorityGrouping+0x44>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f3e:	4a04      	ldr	r2, [pc, #16]	; (8005f50 <__NVIC_SetPriorityGrouping+0x44>)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	60d3      	str	r3, [r2, #12]
}
 8005f44:	bf00      	nop
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc80      	pop	{r7}
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	e000ed00 	.word	0xe000ed00

08005f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f58:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <__NVIC_GetPriorityGrouping+0x18>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	0a1b      	lsrs	r3, r3, #8
 8005f5e:	f003 0307 	and.w	r3, r3, #7
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	e000ed00 	.word	0xe000ed00

08005f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	db0b      	blt.n	8005f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	f003 021f 	and.w	r2, r3, #31
 8005f88:	4906      	ldr	r1, [pc, #24]	; (8005fa4 <__NVIC_EnableIRQ+0x34>)
 8005f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f8e:	095b      	lsrs	r3, r3, #5
 8005f90:	2001      	movs	r0, #1
 8005f92:	fa00 f202 	lsl.w	r2, r0, r2
 8005f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr
 8005fa4:	e000e100 	.word	0xe000e100

08005fa8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	db12      	blt.n	8005fe0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fba:	79fb      	ldrb	r3, [r7, #7]
 8005fbc:	f003 021f 	and.w	r2, r3, #31
 8005fc0:	490a      	ldr	r1, [pc, #40]	; (8005fec <__NVIC_DisableIRQ+0x44>)
 8005fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc6:	095b      	lsrs	r3, r3, #5
 8005fc8:	2001      	movs	r0, #1
 8005fca:	fa00 f202 	lsl.w	r2, r0, r2
 8005fce:	3320      	adds	r3, #32
 8005fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005fd4:	f3bf 8f4f 	dsb	sy
}
 8005fd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005fda:	f3bf 8f6f 	isb	sy
}
 8005fde:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	e000e100 	.word	0xe000e100

08005ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	6039      	str	r1, [r7, #0]
 8005ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006000:	2b00      	cmp	r3, #0
 8006002:	db0a      	blt.n	800601a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	b2da      	uxtb	r2, r3
 8006008:	490c      	ldr	r1, [pc, #48]	; (800603c <__NVIC_SetPriority+0x4c>)
 800600a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800600e:	0112      	lsls	r2, r2, #4
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	440b      	add	r3, r1
 8006014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006018:	e00a      	b.n	8006030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	b2da      	uxtb	r2, r3
 800601e:	4908      	ldr	r1, [pc, #32]	; (8006040 <__NVIC_SetPriority+0x50>)
 8006020:	79fb      	ldrb	r3, [r7, #7]
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	3b04      	subs	r3, #4
 8006028:	0112      	lsls	r2, r2, #4
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	440b      	add	r3, r1
 800602e:	761a      	strb	r2, [r3, #24]
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	e000e100 	.word	0xe000e100
 8006040:	e000ed00 	.word	0xe000ed00

08006044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006044:	b480      	push	{r7}
 8006046:	b089      	sub	sp, #36	; 0x24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	f1c3 0307 	rsb	r3, r3, #7
 800605e:	2b04      	cmp	r3, #4
 8006060:	bf28      	it	cs
 8006062:	2304      	movcs	r3, #4
 8006064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	3304      	adds	r3, #4
 800606a:	2b06      	cmp	r3, #6
 800606c:	d902      	bls.n	8006074 <NVIC_EncodePriority+0x30>
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	3b03      	subs	r3, #3
 8006072:	e000      	b.n	8006076 <NVIC_EncodePriority+0x32>
 8006074:	2300      	movs	r3, #0
 8006076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006078:	f04f 32ff 	mov.w	r2, #4294967295
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	43da      	mvns	r2, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	401a      	ands	r2, r3
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800608c:	f04f 31ff 	mov.w	r1, #4294967295
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	fa01 f303 	lsl.w	r3, r1, r3
 8006096:	43d9      	mvns	r1, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800609c:	4313      	orrs	r3, r2
         );
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3724      	adds	r7, #36	; 0x24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr

080060a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060b8:	d301      	bcc.n	80060be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060ba:	2301      	movs	r3, #1
 80060bc:	e00f      	b.n	80060de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060be:	4a0a      	ldr	r2, [pc, #40]	; (80060e8 <SysTick_Config+0x40>)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060c6:	210f      	movs	r1, #15
 80060c8:	f04f 30ff 	mov.w	r0, #4294967295
 80060cc:	f7ff ff90 	bl	8005ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060d0:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <SysTick_Config+0x40>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060d6:	4b04      	ldr	r3, [pc, #16]	; (80060e8 <SysTick_Config+0x40>)
 80060d8:	2207      	movs	r2, #7
 80060da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	e000e010 	.word	0xe000e010

080060ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff ff09 	bl	8005f0c <__NVIC_SetPriorityGrouping>
}
 80060fa:	bf00      	nop
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006102:	b580      	push	{r7, lr}
 8006104:	b086      	sub	sp, #24
 8006106:	af00      	add	r7, sp, #0
 8006108:	4603      	mov	r3, r0
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	607a      	str	r2, [r7, #4]
 800610e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006114:	f7ff ff1e 	bl	8005f54 <__NVIC_GetPriorityGrouping>
 8006118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	6978      	ldr	r0, [r7, #20]
 8006120:	f7ff ff90 	bl	8006044 <NVIC_EncodePriority>
 8006124:	4602      	mov	r2, r0
 8006126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800612a:	4611      	mov	r1, r2
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff ff5f 	bl	8005ff0 <__NVIC_SetPriority>
}
 8006132:	bf00      	nop
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	4603      	mov	r3, r0
 8006142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff ff11 	bl	8005f70 <__NVIC_EnableIRQ>
}
 800614e:	bf00      	nop
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b082      	sub	sp, #8
 800615a:	af00      	add	r7, sp, #0
 800615c:	4603      	mov	r3, r0
 800615e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff ff1f 	bl	8005fa8 <__NVIC_DisableIRQ>
}
 800616a:	bf00      	nop
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b082      	sub	sp, #8
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff ff94 	bl	80060a8 <SysTick_Config>
 8006180:	4603      	mov	r3, r0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
	...

0800618c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800619a:	e16f      	b.n	800647c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	2101      	movs	r1, #1
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	fa01 f303 	lsl.w	r3, r1, r3
 80061a8:	4013      	ands	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 8161 	beq.w	8006476 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d005      	beq.n	80061cc <HAL_GPIO_Init+0x40>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f003 0303 	and.w	r3, r3, #3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d130      	bne.n	800622e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	2203      	movs	r2, #3
 80061d8:	fa02 f303 	lsl.w	r3, r2, r3
 80061dc:	43db      	mvns	r3, r3
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4013      	ands	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006202:	2201      	movs	r2, #1
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	43db      	mvns	r3, r3
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4013      	ands	r3, r2
 8006210:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	091b      	lsrs	r3, r3, #4
 8006218:	f003 0201 	and.w	r2, r3, #1
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	2b03      	cmp	r3, #3
 8006238:	d017      	beq.n	800626a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	2203      	movs	r2, #3
 8006246:	fa02 f303 	lsl.w	r3, r2, r3
 800624a:	43db      	mvns	r3, r3
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4013      	ands	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d123      	bne.n	80062be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	08da      	lsrs	r2, r3, #3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3208      	adds	r2, #8
 800627e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006282:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	220f      	movs	r2, #15
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	43db      	mvns	r3, r3
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4013      	ands	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	691a      	ldr	r2, [r3, #16]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	fa02 f303 	lsl.w	r3, r2, r3
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	08da      	lsrs	r2, r3, #3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3208      	adds	r2, #8
 80062b8:	6939      	ldr	r1, [r7, #16]
 80062ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	2203      	movs	r2, #3
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	43db      	mvns	r3, r3
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4013      	ands	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f003 0203 	and.w	r2, r3, #3
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	fa02 f303 	lsl.w	r3, r2, r3
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 80bb 	beq.w	8006476 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006300:	2300      	movs	r3, #0
 8006302:	60bb      	str	r3, [r7, #8]
 8006304:	4b64      	ldr	r3, [pc, #400]	; (8006498 <HAL_GPIO_Init+0x30c>)
 8006306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006308:	4a63      	ldr	r2, [pc, #396]	; (8006498 <HAL_GPIO_Init+0x30c>)
 800630a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800630e:	6453      	str	r3, [r2, #68]	; 0x44
 8006310:	4b61      	ldr	r3, [pc, #388]	; (8006498 <HAL_GPIO_Init+0x30c>)
 8006312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006318:	60bb      	str	r3, [r7, #8]
 800631a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800631c:	4a5f      	ldr	r2, [pc, #380]	; (800649c <HAL_GPIO_Init+0x310>)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	089b      	lsrs	r3, r3, #2
 8006322:	3302      	adds	r3, #2
 8006324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006328:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	220f      	movs	r2, #15
 8006334:	fa02 f303 	lsl.w	r3, r2, r3
 8006338:	43db      	mvns	r3, r3
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4013      	ands	r3, r2
 800633e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a57      	ldr	r2, [pc, #348]	; (80064a0 <HAL_GPIO_Init+0x314>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d031      	beq.n	80063ac <HAL_GPIO_Init+0x220>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a56      	ldr	r2, [pc, #344]	; (80064a4 <HAL_GPIO_Init+0x318>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d02b      	beq.n	80063a8 <HAL_GPIO_Init+0x21c>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a55      	ldr	r2, [pc, #340]	; (80064a8 <HAL_GPIO_Init+0x31c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d025      	beq.n	80063a4 <HAL_GPIO_Init+0x218>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a54      	ldr	r2, [pc, #336]	; (80064ac <HAL_GPIO_Init+0x320>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d01f      	beq.n	80063a0 <HAL_GPIO_Init+0x214>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a53      	ldr	r2, [pc, #332]	; (80064b0 <HAL_GPIO_Init+0x324>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d019      	beq.n	800639c <HAL_GPIO_Init+0x210>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a52      	ldr	r2, [pc, #328]	; (80064b4 <HAL_GPIO_Init+0x328>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d013      	beq.n	8006398 <HAL_GPIO_Init+0x20c>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a51      	ldr	r2, [pc, #324]	; (80064b8 <HAL_GPIO_Init+0x32c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d00d      	beq.n	8006394 <HAL_GPIO_Init+0x208>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a50      	ldr	r2, [pc, #320]	; (80064bc <HAL_GPIO_Init+0x330>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d007      	beq.n	8006390 <HAL_GPIO_Init+0x204>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a4f      	ldr	r2, [pc, #316]	; (80064c0 <HAL_GPIO_Init+0x334>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d101      	bne.n	800638c <HAL_GPIO_Init+0x200>
 8006388:	2308      	movs	r3, #8
 800638a:	e010      	b.n	80063ae <HAL_GPIO_Init+0x222>
 800638c:	2309      	movs	r3, #9
 800638e:	e00e      	b.n	80063ae <HAL_GPIO_Init+0x222>
 8006390:	2307      	movs	r3, #7
 8006392:	e00c      	b.n	80063ae <HAL_GPIO_Init+0x222>
 8006394:	2306      	movs	r3, #6
 8006396:	e00a      	b.n	80063ae <HAL_GPIO_Init+0x222>
 8006398:	2305      	movs	r3, #5
 800639a:	e008      	b.n	80063ae <HAL_GPIO_Init+0x222>
 800639c:	2304      	movs	r3, #4
 800639e:	e006      	b.n	80063ae <HAL_GPIO_Init+0x222>
 80063a0:	2303      	movs	r3, #3
 80063a2:	e004      	b.n	80063ae <HAL_GPIO_Init+0x222>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e002      	b.n	80063ae <HAL_GPIO_Init+0x222>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <HAL_GPIO_Init+0x222>
 80063ac:	2300      	movs	r3, #0
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	f002 0203 	and.w	r2, r2, #3
 80063b4:	0092      	lsls	r2, r2, #2
 80063b6:	4093      	lsls	r3, r2
 80063b8:	461a      	mov	r2, r3
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80063c0:	4936      	ldr	r1, [pc, #216]	; (800649c <HAL_GPIO_Init+0x310>)
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	089b      	lsrs	r3, r3, #2
 80063c6:	3302      	adds	r3, #2
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063ce:	4b3d      	ldr	r3, [pc, #244]	; (80064c4 <HAL_GPIO_Init+0x338>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	43db      	mvns	r3, r3
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4013      	ands	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80063f2:	4a34      	ldr	r2, [pc, #208]	; (80064c4 <HAL_GPIO_Init+0x338>)
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80063f8:	4b32      	ldr	r3, [pc, #200]	; (80064c4 <HAL_GPIO_Init+0x338>)
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	43db      	mvns	r3, r3
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4013      	ands	r3, r2
 8006406:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800641c:	4a29      	ldr	r2, [pc, #164]	; (80064c4 <HAL_GPIO_Init+0x338>)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006422:	4b28      	ldr	r3, [pc, #160]	; (80064c4 <HAL_GPIO_Init+0x338>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	43db      	mvns	r3, r3
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4013      	ands	r3, r2
 8006430:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006446:	4a1f      	ldr	r2, [pc, #124]	; (80064c4 <HAL_GPIO_Init+0x338>)
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800644c:	4b1d      	ldr	r3, [pc, #116]	; (80064c4 <HAL_GPIO_Init+0x338>)
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	43db      	mvns	r3, r3
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4013      	ands	r3, r2
 800645a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4313      	orrs	r3, r2
 800646e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006470:	4a14      	ldr	r2, [pc, #80]	; (80064c4 <HAL_GPIO_Init+0x338>)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	3301      	adds	r3, #1
 800647a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	fa22 f303 	lsr.w	r3, r2, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	f47f ae88 	bne.w	800619c <HAL_GPIO_Init+0x10>
  }
}
 800648c:	bf00      	nop
 800648e:	bf00      	nop
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr
 8006498:	40023800 	.word	0x40023800
 800649c:	40013800 	.word	0x40013800
 80064a0:	40020000 	.word	0x40020000
 80064a4:	40020400 	.word	0x40020400
 80064a8:	40020800 	.word	0x40020800
 80064ac:	40020c00 	.word	0x40020c00
 80064b0:	40021000 	.word	0x40021000
 80064b4:	40021400 	.word	0x40021400
 80064b8:	40021800 	.word	0x40021800
 80064bc:	40021c00 	.word	0x40021c00
 80064c0:	40022000 	.word	0x40022000
 80064c4:	40013c00 	.word	0x40013c00

080064c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691a      	ldr	r2, [r3, #16]
 80064d8:	887b      	ldrh	r3, [r7, #2]
 80064da:	4013      	ands	r3, r2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80064e0:	2301      	movs	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
 80064e4:	e001      	b.n	80064ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80064e6:	2300      	movs	r3, #0
 80064e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bc80      	pop	{r7}
 80064f4:	4770      	bx	lr

080064f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	460b      	mov	r3, r1
 8006500:	807b      	strh	r3, [r7, #2]
 8006502:	4613      	mov	r3, r2
 8006504:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006506:	787b      	ldrb	r3, [r7, #1]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800650c:	887a      	ldrh	r2, [r7, #2]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006512:	e003      	b.n	800651c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006514:	887b      	ldrh	r3, [r7, #2]
 8006516:	041a      	lsls	r2, r3, #16
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	619a      	str	r2, [r3, #24]
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	4770      	bx	lr

08006526 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006526:	b480      	push	{r7}
 8006528:	b085      	sub	sp, #20
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	460b      	mov	r3, r1
 8006530:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006538:	887a      	ldrh	r2, [r7, #2]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4013      	ands	r3, r2
 800653e:	041a      	lsls	r2, r3, #16
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	43d9      	mvns	r1, r3
 8006544:	887b      	ldrh	r3, [r7, #2]
 8006546:	400b      	ands	r3, r1
 8006548:	431a      	orrs	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	619a      	str	r2, [r3, #24]
}
 800654e:	bf00      	nop
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr

08006558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	4603      	mov	r3, r0
 8006560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006562:	4b08      	ldr	r3, [pc, #32]	; (8006584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006564:	695a      	ldr	r2, [r3, #20]
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	4013      	ands	r3, r2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d006      	beq.n	800657c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800656e:	4a05      	ldr	r2, [pc, #20]	; (8006584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006570:	88fb      	ldrh	r3, [r7, #6]
 8006572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006574:	88fb      	ldrh	r3, [r7, #6]
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe f99c 	bl	80048b4 <HAL_GPIO_EXTI_Callback>
  }
}
 800657c:	bf00      	nop
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40013c00 	.word	0x40013c00

08006588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e12b      	b.n	80067f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d106      	bne.n	80065b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7fe fed6 	bl	8005360 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2224      	movs	r2, #36	; 0x24
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0201 	bic.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80065ec:	f002 fd12 	bl	8009014 <HAL_RCC_GetPCLK1Freq>
 80065f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	4a81      	ldr	r2, [pc, #516]	; (80067fc <HAL_I2C_Init+0x274>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d807      	bhi.n	800660c <HAL_I2C_Init+0x84>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4a80      	ldr	r2, [pc, #512]	; (8006800 <HAL_I2C_Init+0x278>)
 8006600:	4293      	cmp	r3, r2
 8006602:	bf94      	ite	ls
 8006604:	2301      	movls	r3, #1
 8006606:	2300      	movhi	r3, #0
 8006608:	b2db      	uxtb	r3, r3
 800660a:	e006      	b.n	800661a <HAL_I2C_Init+0x92>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4a7d      	ldr	r2, [pc, #500]	; (8006804 <HAL_I2C_Init+0x27c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	bf94      	ite	ls
 8006614:	2301      	movls	r3, #1
 8006616:	2300      	movhi	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e0e7      	b.n	80067f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4a78      	ldr	r2, [pc, #480]	; (8006808 <HAL_I2C_Init+0x280>)
 8006626:	fba2 2303 	umull	r2, r3, r2, r3
 800662a:	0c9b      	lsrs	r3, r3, #18
 800662c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	4a6a      	ldr	r2, [pc, #424]	; (80067fc <HAL_I2C_Init+0x274>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d802      	bhi.n	800665c <HAL_I2C_Init+0xd4>
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	3301      	adds	r3, #1
 800665a:	e009      	b.n	8006670 <HAL_I2C_Init+0xe8>
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006662:	fb02 f303 	mul.w	r3, r2, r3
 8006666:	4a69      	ldr	r2, [pc, #420]	; (800680c <HAL_I2C_Init+0x284>)
 8006668:	fba2 2303 	umull	r2, r3, r2, r3
 800666c:	099b      	lsrs	r3, r3, #6
 800666e:	3301      	adds	r3, #1
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6812      	ldr	r2, [r2, #0]
 8006674:	430b      	orrs	r3, r1
 8006676:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006682:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	495c      	ldr	r1, [pc, #368]	; (80067fc <HAL_I2C_Init+0x274>)
 800668c:	428b      	cmp	r3, r1
 800668e:	d819      	bhi.n	80066c4 <HAL_I2C_Init+0x13c>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	1e59      	subs	r1, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	fbb1 f3f3 	udiv	r3, r1, r3
 800669e:	1c59      	adds	r1, r3, #1
 80066a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80066a4:	400b      	ands	r3, r1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <HAL_I2C_Init+0x138>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	1e59      	subs	r1, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80066b8:	3301      	adds	r3, #1
 80066ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066be:	e051      	b.n	8006764 <HAL_I2C_Init+0x1dc>
 80066c0:	2304      	movs	r3, #4
 80066c2:	e04f      	b.n	8006764 <HAL_I2C_Init+0x1dc>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d111      	bne.n	80066f0 <HAL_I2C_Init+0x168>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	1e58      	subs	r0, r3, #1
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6859      	ldr	r1, [r3, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	440b      	add	r3, r1
 80066da:	fbb0 f3f3 	udiv	r3, r0, r3
 80066de:	3301      	adds	r3, #1
 80066e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	bf0c      	ite	eq
 80066e8:	2301      	moveq	r3, #1
 80066ea:	2300      	movne	r3, #0
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	e012      	b.n	8006716 <HAL_I2C_Init+0x18e>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	1e58      	subs	r0, r3, #1
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6859      	ldr	r1, [r3, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	0099      	lsls	r1, r3, #2
 8006700:	440b      	add	r3, r1
 8006702:	fbb0 f3f3 	udiv	r3, r0, r3
 8006706:	3301      	adds	r3, #1
 8006708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800670c:	2b00      	cmp	r3, #0
 800670e:	bf0c      	ite	eq
 8006710:	2301      	moveq	r3, #1
 8006712:	2300      	movne	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <HAL_I2C_Init+0x196>
 800671a:	2301      	movs	r3, #1
 800671c:	e022      	b.n	8006764 <HAL_I2C_Init+0x1dc>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10e      	bne.n	8006744 <HAL_I2C_Init+0x1bc>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	1e58      	subs	r0, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6859      	ldr	r1, [r3, #4]
 800672e:	460b      	mov	r3, r1
 8006730:	005b      	lsls	r3, r3, #1
 8006732:	440b      	add	r3, r1
 8006734:	fbb0 f3f3 	udiv	r3, r0, r3
 8006738:	3301      	adds	r3, #1
 800673a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800673e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006742:	e00f      	b.n	8006764 <HAL_I2C_Init+0x1dc>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	1e58      	subs	r0, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6859      	ldr	r1, [r3, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	440b      	add	r3, r1
 8006752:	0099      	lsls	r1, r3, #2
 8006754:	440b      	add	r3, r1
 8006756:	fbb0 f3f3 	udiv	r3, r0, r3
 800675a:	3301      	adds	r3, #1
 800675c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	6809      	ldr	r1, [r1, #0]
 8006768:	4313      	orrs	r3, r2
 800676a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	69da      	ldr	r2, [r3, #28]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	431a      	orrs	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006792:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6911      	ldr	r1, [r2, #16]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	68d2      	ldr	r2, [r2, #12]
 800679e:	4311      	orrs	r1, r2
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6812      	ldr	r2, [r2, #0]
 80067a4:	430b      	orrs	r3, r1
 80067a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	695a      	ldr	r2, [r3, #20]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	431a      	orrs	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0201 	orr.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	000186a0 	.word	0x000186a0
 8006800:	001e847f 	.word	0x001e847f
 8006804:	003d08ff 	.word	0x003d08ff
 8006808:	431bde83 	.word	0x431bde83
 800680c:	10624dd3 	.word	0x10624dd3

08006810 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	4608      	mov	r0, r1
 800681a:	4611      	mov	r1, r2
 800681c:	461a      	mov	r2, r3
 800681e:	4603      	mov	r3, r0
 8006820:	817b      	strh	r3, [r7, #10]
 8006822:	460b      	mov	r3, r1
 8006824:	813b      	strh	r3, [r7, #8]
 8006826:	4613      	mov	r3, r2
 8006828:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800682a:	f7ff f827 	bl	800587c <HAL_GetTick>
 800682e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b20      	cmp	r3, #32
 800683a:	f040 80d9 	bne.w	80069f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	2319      	movs	r3, #25
 8006844:	2201      	movs	r2, #1
 8006846:	496d      	ldr	r1, [pc, #436]	; (80069fc <HAL_I2C_Mem_Write+0x1ec>)
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fc7f 	bl	800714c <I2C_WaitOnFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006854:	2302      	movs	r3, #2
 8006856:	e0cc      	b.n	80069f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800685e:	2b01      	cmp	r3, #1
 8006860:	d101      	bne.n	8006866 <HAL_I2C_Mem_Write+0x56>
 8006862:	2302      	movs	r3, #2
 8006864:	e0c5      	b.n	80069f2 <HAL_I2C_Mem_Write+0x1e2>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b01      	cmp	r3, #1
 800687a:	d007      	beq.n	800688c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800689a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2221      	movs	r2, #33	; 0x21
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2240      	movs	r2, #64	; 0x40
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a3a      	ldr	r2, [r7, #32]
 80068b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4a4d      	ldr	r2, [pc, #308]	; (8006a00 <HAL_I2C_Mem_Write+0x1f0>)
 80068cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068ce:	88f8      	ldrh	r0, [r7, #6]
 80068d0:	893a      	ldrh	r2, [r7, #8]
 80068d2:	8979      	ldrh	r1, [r7, #10]
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	9301      	str	r3, [sp, #4]
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	4603      	mov	r3, r0
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 fab6 	bl	8006e50 <I2C_RequestMemoryWrite>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d052      	beq.n	8006990 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e081      	b.n	80069f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 fd00 	bl	80072f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00d      	beq.n	800691a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	2b04      	cmp	r3, #4
 8006904:	d107      	bne.n	8006916 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006914:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e06b      	b.n	80069f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	781a      	ldrb	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006934:	3b01      	subs	r3, #1
 8006936:	b29a      	uxth	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006940:	b29b      	uxth	r3, r3
 8006942:	3b01      	subs	r3, #1
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b04      	cmp	r3, #4
 8006956:	d11b      	bne.n	8006990 <HAL_I2C_Mem_Write+0x180>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695c:	2b00      	cmp	r3, #0
 800695e:	d017      	beq.n	8006990 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	781a      	ldrb	r2, [r3, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800697a:	3b01      	subs	r3, #1
 800697c:	b29a      	uxth	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006986:	b29b      	uxth	r3, r3
 8006988:	3b01      	subs	r3, #1
 800698a:	b29a      	uxth	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1aa      	bne.n	80068ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 fcec 	bl	800737a <I2C_WaitOnBTFFlagUntilTimeout>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00d      	beq.n	80069c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d107      	bne.n	80069c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e016      	b.n	80069f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	e000      	b.n	80069f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80069f0:	2302      	movs	r3, #2
  }
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	00100002 	.word	0x00100002
 8006a00:	ffff0000 	.word	0xffff0000

08006a04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08c      	sub	sp, #48	; 0x30
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	4611      	mov	r1, r2
 8006a10:	461a      	mov	r2, r3
 8006a12:	4603      	mov	r3, r0
 8006a14:	817b      	strh	r3, [r7, #10]
 8006a16:	460b      	mov	r3, r1
 8006a18:	813b      	strh	r3, [r7, #8]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a1e:	f7fe ff2d 	bl	800587c <HAL_GetTick>
 8006a22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	f040 8208 	bne.w	8006e42 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	2319      	movs	r3, #25
 8006a38:	2201      	movs	r2, #1
 8006a3a:	497b      	ldr	r1, [pc, #492]	; (8006c28 <HAL_I2C_Mem_Read+0x224>)
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 fb85 	bl	800714c <I2C_WaitOnFlagUntilTimeout>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006a48:	2302      	movs	r3, #2
 8006a4a:	e1fb      	b.n	8006e44 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_I2C_Mem_Read+0x56>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e1f4      	b.n	8006e44 <HAL_I2C_Mem_Read+0x440>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d007      	beq.n	8006a80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0201 	orr.w	r2, r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2222      	movs	r2, #34	; 0x22
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2240      	movs	r2, #64	; 0x40
 8006a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4a5b      	ldr	r2, [pc, #364]	; (8006c2c <HAL_I2C_Mem_Read+0x228>)
 8006ac0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ac2:	88f8      	ldrh	r0, [r7, #6]
 8006ac4:	893a      	ldrh	r2, [r7, #8]
 8006ac6:	8979      	ldrh	r1, [r7, #10]
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 fa52 	bl	8006f7c <I2C_RequestMemoryRead>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e1b0      	b.n	8006e44 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d113      	bne.n	8006b12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aea:	2300      	movs	r3, #0
 8006aec:	623b      	str	r3, [r7, #32]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	623b      	str	r3, [r7, #32]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	623b      	str	r3, [r7, #32]
 8006afe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	e184      	b.n	8006e1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d11b      	bne.n	8006b52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	61fb      	str	r3, [r7, #28]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	61fb      	str	r3, [r7, #28]
 8006b3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	e164      	b.n	8006e1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d11b      	bne.n	8006b92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61bb      	str	r3, [r7, #24]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	61bb      	str	r3, [r7, #24]
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	e144      	b.n	8006e1c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	617b      	str	r3, [r7, #20]
 8006ba6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ba8:	e138      	b.n	8006e1c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	f200 80f1 	bhi.w	8006d96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d123      	bne.n	8006c04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 fc1b 	bl	80073fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d001      	beq.n	8006bd0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e139      	b.n	8006e44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c02:	e10b      	b.n	8006e1c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d14e      	bne.n	8006caa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	2200      	movs	r2, #0
 8006c14:	4906      	ldr	r1, [pc, #24]	; (8006c30 <HAL_I2C_Mem_Read+0x22c>)
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 fa98 	bl	800714c <I2C_WaitOnFlagUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d008      	beq.n	8006c34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e10e      	b.n	8006e44 <HAL_I2C_Mem_Read+0x440>
 8006c26:	bf00      	nop
 8006c28:	00100002 	.word	0x00100002
 8006c2c:	ffff0000 	.word	0xffff0000
 8006c30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691a      	ldr	r2, [r3, #16]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	691a      	ldr	r2, [r3, #16]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	b2d2      	uxtb	r2, r2
 8006c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c92:	3b01      	subs	r3, #1
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ca8:	e0b8      	b.n	8006e1c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	4966      	ldr	r1, [pc, #408]	; (8006e4c <HAL_I2C_Mem_Read+0x448>)
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 fa49 	bl	800714c <I2C_WaitOnFlagUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0bf      	b.n	8006e44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	691a      	ldr	r2, [r3, #16]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	494f      	ldr	r1, [pc, #316]	; (8006e4c <HAL_I2C_Mem_Read+0x448>)
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 fa1b 	bl	800714c <I2C_WaitOnFlagUntilTimeout>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e091      	b.n	8006e44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	691a      	ldr	r2, [r3, #16]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	691a      	ldr	r2, [r3, #16]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	b2d2      	uxtb	r2, r2
 8006d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d94:	e042      	b.n	8006e1c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 fb2e 	bl	80073fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e04c      	b.n	8006e44 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	f003 0304 	and.w	r3, r3, #4
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d118      	bne.n	8006e1c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	b2d2      	uxtb	r2, r2
 8006df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	3b01      	subs	r3, #1
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f47f aec2 	bne.w	8006baa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	e000      	b.n	8006e44 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006e42:	2302      	movs	r3, #2
  }
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3728      	adds	r7, #40	; 0x28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	00010004 	.word	0x00010004

08006e50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	4608      	mov	r0, r1
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	4603      	mov	r3, r0
 8006e60:	817b      	strh	r3, [r7, #10]
 8006e62:	460b      	mov	r3, r1
 8006e64:	813b      	strh	r3, [r7, #8]
 8006e66:	4613      	mov	r3, r2
 8006e68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 f960 	bl	800714c <I2C_WaitOnFlagUntilTimeout>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00d      	beq.n	8006eae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ea0:	d103      	bne.n	8006eaa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e05f      	b.n	8006f6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006eae:	897b      	ldrh	r3, [r7, #10]
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ebc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	6a3a      	ldr	r2, [r7, #32]
 8006ec2:	492d      	ldr	r1, [pc, #180]	; (8006f78 <I2C_RequestMemoryWrite+0x128>)
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f998 	bl	80071fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e04c      	b.n	8006f6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	617b      	str	r3, [r7, #20]
 8006ee8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eec:	6a39      	ldr	r1, [r7, #32]
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 fa02 	bl	80072f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00d      	beq.n	8006f16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d107      	bne.n	8006f12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e02b      	b.n	8006f6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d105      	bne.n	8006f28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f1c:	893b      	ldrh	r3, [r7, #8]
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	611a      	str	r2, [r3, #16]
 8006f26:	e021      	b.n	8006f6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f28:	893b      	ldrh	r3, [r7, #8]
 8006f2a:	0a1b      	lsrs	r3, r3, #8
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f38:	6a39      	ldr	r1, [r7, #32]
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 f9dc 	bl	80072f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00d      	beq.n	8006f62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d107      	bne.n	8006f5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e005      	b.n	8006f6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f62:	893b      	ldrh	r3, [r7, #8]
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	00010002 	.word	0x00010002

08006f7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	817b      	strh	r3, [r7, #10]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	813b      	strh	r3, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fa4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 f8c2 	bl	800714c <I2C_WaitOnFlagUntilTimeout>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00d      	beq.n	8006fea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fdc:	d103      	bne.n	8006fe6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e0aa      	b.n	8007140 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fea:	897b      	ldrh	r3, [r7, #10]
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	461a      	mov	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ff8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	6a3a      	ldr	r2, [r7, #32]
 8006ffe:	4952      	ldr	r1, [pc, #328]	; (8007148 <I2C_RequestMemoryRead+0x1cc>)
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 f8fa 	bl	80071fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e097      	b.n	8007140 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007010:	2300      	movs	r3, #0
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007028:	6a39      	ldr	r1, [r7, #32]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 f964 	bl	80072f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00d      	beq.n	8007052 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703a:	2b04      	cmp	r3, #4
 800703c:	d107      	bne.n	800704e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800704c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e076      	b.n	8007140 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007052:	88fb      	ldrh	r3, [r7, #6]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d105      	bne.n	8007064 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007058:	893b      	ldrh	r3, [r7, #8]
 800705a:	b2da      	uxtb	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	611a      	str	r2, [r3, #16]
 8007062:	e021      	b.n	80070a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007064:	893b      	ldrh	r3, [r7, #8]
 8007066:	0a1b      	lsrs	r3, r3, #8
 8007068:	b29b      	uxth	r3, r3
 800706a:	b2da      	uxtb	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007074:	6a39      	ldr	r1, [r7, #32]
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 f93e 	bl	80072f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00d      	beq.n	800709e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	2b04      	cmp	r3, #4
 8007088:	d107      	bne.n	800709a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007098:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e050      	b.n	8007140 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800709e:	893b      	ldrh	r3, [r7, #8]
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070aa:	6a39      	ldr	r1, [r7, #32]
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 f923 	bl	80072f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00d      	beq.n	80070d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	2b04      	cmp	r3, #4
 80070be:	d107      	bne.n	80070d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e035      	b.n	8007140 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f82b 	bl	800714c <I2C_WaitOnFlagUntilTimeout>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00d      	beq.n	8007118 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800710a:	d103      	bne.n	8007114 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007112:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e013      	b.n	8007140 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007118:	897b      	ldrh	r3, [r7, #10]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	f043 0301 	orr.w	r3, r3, #1
 8007120:	b2da      	uxtb	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	6a3a      	ldr	r2, [r7, #32]
 800712c:	4906      	ldr	r1, [pc, #24]	; (8007148 <I2C_RequestMemoryRead+0x1cc>)
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 f863 	bl	80071fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	00010002 	.word	0x00010002

0800714c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	603b      	str	r3, [r7, #0]
 8007158:	4613      	mov	r3, r2
 800715a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800715c:	e025      	b.n	80071aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007164:	d021      	beq.n	80071aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007166:	f7fe fb89 	bl	800587c <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d302      	bcc.n	800717c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d116      	bne.n	80071aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2220      	movs	r2, #32
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	f043 0220 	orr.w	r2, r3, #32
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e023      	b.n	80071f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	0c1b      	lsrs	r3, r3, #16
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d10d      	bne.n	80071d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	43da      	mvns	r2, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	4013      	ands	r3, r2
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	bf0c      	ite	eq
 80071c6:	2301      	moveq	r3, #1
 80071c8:	2300      	movne	r3, #0
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	e00c      	b.n	80071ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	43da      	mvns	r2, r3
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	4013      	ands	r3, r2
 80071dc:	b29b      	uxth	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	bf0c      	ite	eq
 80071e2:	2301      	moveq	r3, #1
 80071e4:	2300      	movne	r3, #0
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	79fb      	ldrb	r3, [r7, #7]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d0b6      	beq.n	800715e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
 8007206:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007208:	e051      	b.n	80072ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007218:	d123      	bne.n	8007262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007228:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007232:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2220      	movs	r2, #32
 800723e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	f043 0204 	orr.w	r2, r3, #4
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e046      	b.n	80072f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007268:	d021      	beq.n	80072ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800726a:	f7fe fb07 	bl	800587c <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	429a      	cmp	r2, r3
 8007278:	d302      	bcc.n	8007280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d116      	bne.n	80072ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2220      	movs	r2, #32
 800728a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	f043 0220 	orr.w	r2, r3, #32
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e020      	b.n	80072f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	0c1b      	lsrs	r3, r3, #16
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d10c      	bne.n	80072d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	43da      	mvns	r2, r3
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	4013      	ands	r3, r2
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bf14      	ite	ne
 80072ca:	2301      	movne	r3, #1
 80072cc:	2300      	moveq	r3, #0
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	e00b      	b.n	80072ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	43da      	mvns	r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	4013      	ands	r3, r2
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bf14      	ite	ne
 80072e4:	2301      	movne	r3, #1
 80072e6:	2300      	moveq	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d18d      	bne.n	800720a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007304:	e02d      	b.n	8007362 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 f8ce 	bl	80074a8 <I2C_IsAcknowledgeFailed>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e02d      	b.n	8007372 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731c:	d021      	beq.n	8007362 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800731e:	f7fe faad 	bl	800587c <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	429a      	cmp	r2, r3
 800732c:	d302      	bcc.n	8007334 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d116      	bne.n	8007362 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2220      	movs	r2, #32
 800733e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	f043 0220 	orr.w	r2, r3, #32
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e007      	b.n	8007372 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736c:	2b80      	cmp	r3, #128	; 0x80
 800736e:	d1ca      	bne.n	8007306 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007386:	e02d      	b.n	80073e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f000 f88d 	bl	80074a8 <I2C_IsAcknowledgeFailed>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d001      	beq.n	8007398 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e02d      	b.n	80073f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739e:	d021      	beq.n	80073e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073a0:	f7fe fa6c 	bl	800587c <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d302      	bcc.n	80073b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d116      	bne.n	80073e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2220      	movs	r2, #32
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d0:	f043 0220 	orr.w	r2, r3, #32
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e007      	b.n	80073f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	f003 0304 	and.w	r3, r3, #4
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d1ca      	bne.n	8007388 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007408:	e042      	b.n	8007490 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	f003 0310 	and.w	r3, r3, #16
 8007414:	2b10      	cmp	r3, #16
 8007416:	d119      	bne.n	800744c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f06f 0210 	mvn.w	r2, #16
 8007420:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2220      	movs	r2, #32
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e029      	b.n	80074a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800744c:	f7fe fa16 	bl	800587c <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	429a      	cmp	r2, r3
 800745a:	d302      	bcc.n	8007462 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d116      	bne.n	8007490 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2220      	movs	r2, #32
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	f043 0220 	orr.w	r2, r3, #32
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e007      	b.n	80074a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749a:	2b40      	cmp	r3, #64	; 0x40
 800749c:	d1b5      	bne.n	800740a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074be:	d11b      	bne.n	80074f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e4:	f043 0204 	orr.w	r2, r3, #4
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	bc80      	pop	{r7}
 8007502:	4770      	bx	lr

08007504 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007506:	b08f      	sub	sp, #60	; 0x3c
 8007508:	af0a      	add	r7, sp, #40	; 0x28
 800750a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e10f      	b.n	8007736 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	d106      	bne.n	8007536 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f005 fc95 	bl	800ce60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2203      	movs	r2, #3
 800753a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007546:	2b00      	cmp	r3, #0
 8007548:	d102      	bne.n	8007550 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4618      	mov	r0, r3
 8007556:	f002 fc85 	bl	8009e64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	687e      	ldr	r6, [r7, #4]
 8007562:	466d      	mov	r5, sp
 8007564:	f106 0410 	add.w	r4, r6, #16
 8007568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800756a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800756c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800756e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007570:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007574:	e885 0003 	stmia.w	r5, {r0, r1}
 8007578:	1d33      	adds	r3, r6, #4
 800757a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800757c:	6838      	ldr	r0, [r7, #0]
 800757e:	f002 fb67 	bl	8009c50 <USB_CoreInit>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e0d0      	b.n	8007736 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2100      	movs	r1, #0
 800759a:	4618      	mov	r0, r3
 800759c:	f002 fc72 	bl	8009e84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]
 80075a4:	e04a      	b.n	800763c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80075a6:	7bfa      	ldrb	r2, [r7, #15]
 80075a8:	6879      	ldr	r1, [r7, #4]
 80075aa:	4613      	mov	r3, r2
 80075ac:	00db      	lsls	r3, r3, #3
 80075ae:	1a9b      	subs	r3, r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	440b      	add	r3, r1
 80075b4:	333d      	adds	r3, #61	; 0x3d
 80075b6:	2201      	movs	r2, #1
 80075b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80075ba:	7bfa      	ldrb	r2, [r7, #15]
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	4613      	mov	r3, r2
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	1a9b      	subs	r3, r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	440b      	add	r3, r1
 80075c8:	333c      	adds	r3, #60	; 0x3c
 80075ca:	7bfa      	ldrb	r2, [r7, #15]
 80075cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80075ce:	7bfa      	ldrb	r2, [r7, #15]
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	b298      	uxth	r0, r3
 80075d4:	6879      	ldr	r1, [r7, #4]
 80075d6:	4613      	mov	r3, r2
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	1a9b      	subs	r3, r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	440b      	add	r3, r1
 80075e0:	3342      	adds	r3, #66	; 0x42
 80075e2:	4602      	mov	r2, r0
 80075e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80075e6:	7bfa      	ldrb	r2, [r7, #15]
 80075e8:	6879      	ldr	r1, [r7, #4]
 80075ea:	4613      	mov	r3, r2
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	1a9b      	subs	r3, r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	440b      	add	r3, r1
 80075f4:	333f      	adds	r3, #63	; 0x3f
 80075f6:	2200      	movs	r2, #0
 80075f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80075fa:	7bfa      	ldrb	r2, [r7, #15]
 80075fc:	6879      	ldr	r1, [r7, #4]
 80075fe:	4613      	mov	r3, r2
 8007600:	00db      	lsls	r3, r3, #3
 8007602:	1a9b      	subs	r3, r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	440b      	add	r3, r1
 8007608:	3344      	adds	r3, #68	; 0x44
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800760e:	7bfa      	ldrb	r2, [r7, #15]
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	4613      	mov	r3, r2
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	1a9b      	subs	r3, r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	440b      	add	r3, r1
 800761c:	3348      	adds	r3, #72	; 0x48
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007622:	7bfa      	ldrb	r2, [r7, #15]
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	4613      	mov	r3, r2
 8007628:	00db      	lsls	r3, r3, #3
 800762a:	1a9b      	subs	r3, r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	3350      	adds	r3, #80	; 0x50
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	3301      	adds	r3, #1
 800763a:	73fb      	strb	r3, [r7, #15]
 800763c:	7bfa      	ldrb	r2, [r7, #15]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	429a      	cmp	r2, r3
 8007644:	d3af      	bcc.n	80075a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007646:	2300      	movs	r3, #0
 8007648:	73fb      	strb	r3, [r7, #15]
 800764a:	e044      	b.n	80076d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800764c:	7bfa      	ldrb	r2, [r7, #15]
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	4613      	mov	r3, r2
 8007652:	00db      	lsls	r3, r3, #3
 8007654:	1a9b      	subs	r3, r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	440b      	add	r3, r1
 800765a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800765e:	2200      	movs	r2, #0
 8007660:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007662:	7bfa      	ldrb	r2, [r7, #15]
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	4613      	mov	r3, r2
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	1a9b      	subs	r3, r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	440b      	add	r3, r1
 8007670:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007674:	7bfa      	ldrb	r2, [r7, #15]
 8007676:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007678:	7bfa      	ldrb	r2, [r7, #15]
 800767a:	6879      	ldr	r1, [r7, #4]
 800767c:	4613      	mov	r3, r2
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	1a9b      	subs	r3, r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	440b      	add	r3, r1
 8007686:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800768a:	2200      	movs	r2, #0
 800768c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800768e:	7bfa      	ldrb	r2, [r7, #15]
 8007690:	6879      	ldr	r1, [r7, #4]
 8007692:	4613      	mov	r3, r2
 8007694:	00db      	lsls	r3, r3, #3
 8007696:	1a9b      	subs	r3, r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	440b      	add	r3, r1
 800769c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80076a4:	7bfa      	ldrb	r2, [r7, #15]
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	4613      	mov	r3, r2
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	1a9b      	subs	r3, r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	440b      	add	r3, r1
 80076b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80076b6:	2200      	movs	r2, #0
 80076b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80076ba:	7bfa      	ldrb	r2, [r7, #15]
 80076bc:	6879      	ldr	r1, [r7, #4]
 80076be:	4613      	mov	r3, r2
 80076c0:	00db      	lsls	r3, r3, #3
 80076c2:	1a9b      	subs	r3, r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	440b      	add	r3, r1
 80076c8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
 80076d2:	3301      	adds	r3, #1
 80076d4:	73fb      	strb	r3, [r7, #15]
 80076d6:	7bfa      	ldrb	r2, [r7, #15]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d3b5      	bcc.n	800764c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	603b      	str	r3, [r7, #0]
 80076e6:	687e      	ldr	r6, [r7, #4]
 80076e8:	466d      	mov	r5, sp
 80076ea:	f106 0410 	add.w	r4, r6, #16
 80076ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80076fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80076fe:	1d33      	adds	r3, r6, #4
 8007700:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007702:	6838      	ldr	r0, [r7, #0]
 8007704:	f002 fc0a 	bl	8009f1c <USB_DevInit>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d005      	beq.n	800771a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2202      	movs	r2, #2
 8007712:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e00d      	b.n	8007736 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f003 fc7b 	bl	800b02a <USB_DevDisconnect>

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800773e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_PCD_Start+0x16>
 8007750:	2302      	movs	r3, #2
 8007752:	e012      	b.n	800777a <HAL_PCD_Start+0x3c>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4618      	mov	r0, r3
 8007762:	f002 fb6f 	bl	8009e44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4618      	mov	r0, r3
 800776c:	f003 fc3d 	bl	800afea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007782:	b590      	push	{r4, r7, lr}
 8007784:	b08d      	sub	sp, #52	; 0x34
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4618      	mov	r0, r3
 800779a:	f003 fcf4 	bl	800b186 <USB_GetMode>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f040 838f 	bne.w	8007ec4 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f003 fc5d 	bl	800b06a <USB_ReadInterrupts>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 8385 	beq.w	8007ec2 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4618      	mov	r0, r3
 80077be:	f003 fc54 	bl	800b06a <USB_ReadInterrupts>
 80077c2:	4603      	mov	r3, r0
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d107      	bne.n	80077dc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	695a      	ldr	r2, [r3, #20]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f002 0202 	and.w	r2, r2, #2
 80077da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f003 fc42 	bl	800b06a <USB_ReadInterrupts>
 80077e6:	4603      	mov	r3, r0
 80077e8:	f003 0310 	and.w	r3, r3, #16
 80077ec:	2b10      	cmp	r3, #16
 80077ee:	d161      	bne.n	80078b4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	699a      	ldr	r2, [r3, #24]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 0210 	bic.w	r2, r2, #16
 80077fe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	f003 020f 	and.w	r2, r3, #15
 800780c:	4613      	mov	r3, r2
 800780e:	00db      	lsls	r3, r3, #3
 8007810:	1a9b      	subs	r3, r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	4413      	add	r3, r2
 800781c:	3304      	adds	r3, #4
 800781e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	0c5b      	lsrs	r3, r3, #17
 8007824:	f003 030f 	and.w	r3, r3, #15
 8007828:	2b02      	cmp	r3, #2
 800782a:	d124      	bne.n	8007876 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007832:	4013      	ands	r3, r2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d035      	beq.n	80078a4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	091b      	lsrs	r3, r3, #4
 8007840:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007842:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007846:	b29b      	uxth	r3, r3
 8007848:	461a      	mov	r2, r3
 800784a:	6a38      	ldr	r0, [r7, #32]
 800784c:	f003 fa7f 	bl	800ad4e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	68da      	ldr	r2, [r3, #12]
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	091b      	lsrs	r3, r3, #4
 8007858:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800785c:	441a      	add	r2, r3
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	699a      	ldr	r2, [r3, #24]
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	091b      	lsrs	r3, r3, #4
 800786a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800786e:	441a      	add	r2, r3
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	619a      	str	r2, [r3, #24]
 8007874:	e016      	b.n	80078a4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	0c5b      	lsrs	r3, r3, #17
 800787a:	f003 030f 	and.w	r3, r3, #15
 800787e:	2b06      	cmp	r3, #6
 8007880:	d110      	bne.n	80078a4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007888:	2208      	movs	r2, #8
 800788a:	4619      	mov	r1, r3
 800788c:	6a38      	ldr	r0, [r7, #32]
 800788e:	f003 fa5e 	bl	800ad4e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	699a      	ldr	r2, [r3, #24]
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	091b      	lsrs	r3, r3, #4
 800789a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800789e:	441a      	add	r2, r3
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699a      	ldr	r2, [r3, #24]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 0210 	orr.w	r2, r2, #16
 80078b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f003 fbd6 	bl	800b06a <USB_ReadInterrupts>
 80078be:	4603      	mov	r3, r0
 80078c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80078c8:	d16e      	bne.n	80079a8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f003 fbdb 	bl	800b08e <USB_ReadDevAllOutEpInterrupt>
 80078d8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80078da:	e062      	b.n	80079a2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80078dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d057      	beq.n	8007996 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	4611      	mov	r1, r2
 80078f0:	4618      	mov	r0, r3
 80078f2:	f003 fbfe 	bl	800b0f2 <USB_ReadDevOutEPInterrupt>
 80078f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00c      	beq.n	800791c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	4413      	add	r3, r2
 800790a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790e:	461a      	mov	r2, r3
 8007910:	2301      	movs	r3, #1
 8007912:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fda2 	bl	8008460 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f003 0308 	and.w	r3, r3, #8
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00c      	beq.n	8007940 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007932:	461a      	mov	r2, r3
 8007934:	2308      	movs	r3, #8
 8007936:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007938:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fe9c 	bl	8008678 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f003 0310 	and.w	r3, r3, #16
 8007946:	2b00      	cmp	r3, #0
 8007948:	d008      	beq.n	800795c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007956:	461a      	mov	r2, r3
 8007958:	2310      	movs	r3, #16
 800795a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	f003 0320 	and.w	r3, r3, #32
 8007962:	2b00      	cmp	r3, #0
 8007964:	d008      	beq.n	8007978 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	015a      	lsls	r2, r3, #5
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	4413      	add	r3, r2
 800796e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007972:	461a      	mov	r2, r3
 8007974:	2320      	movs	r3, #32
 8007976:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d009      	beq.n	8007996 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798e:	461a      	mov	r2, r3
 8007990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007994:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	3301      	adds	r3, #1
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799e:	085b      	lsrs	r3, r3, #1
 80079a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80079a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d199      	bne.n	80078dc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f003 fb5c 	bl	800b06a <USB_ReadInterrupts>
 80079b2:	4603      	mov	r3, r0
 80079b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079bc:	f040 80c0 	bne.w	8007b40 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f003 fb7b 	bl	800b0c0 <USB_ReadDevAllInEpInterrupt>
 80079ca:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80079d0:	e0b2      	b.n	8007b38 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80079d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80a7 	beq.w	8007b2c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e4:	b2d2      	uxtb	r2, r2
 80079e6:	4611      	mov	r1, r2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f003 fb9f 	bl	800b12c <USB_ReadDevInEPInterrupt>
 80079ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d057      	beq.n	8007aaa <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fc:	f003 030f 	and.w	r3, r3, #15
 8007a00:	2201      	movs	r2, #1
 8007a02:	fa02 f303 	lsl.w	r3, r2, r3
 8007a06:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	43db      	mvns	r3, r3
 8007a14:	69f9      	ldr	r1, [r7, #28]
 8007a16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d132      	bne.n	8007a9e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007a38:	6879      	ldr	r1, [r7, #4]
 8007a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	00db      	lsls	r3, r3, #3
 8007a40:	1a9b      	subs	r3, r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	3348      	adds	r3, #72	; 0x48
 8007a48:	6819      	ldr	r1, [r3, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a4e:	4613      	mov	r3, r2
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	1a9b      	subs	r3, r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4403      	add	r3, r0
 8007a58:	3344      	adds	r3, #68	; 0x44
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4419      	add	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a62:	4613      	mov	r3, r2
 8007a64:	00db      	lsls	r3, r3, #3
 8007a66:	1a9b      	subs	r3, r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4403      	add	r3, r0
 8007a6c:	3348      	adds	r3, #72	; 0x48
 8007a6e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d113      	bne.n	8007a9e <HAL_PCD_IRQHandler+0x31c>
 8007a76:	6879      	ldr	r1, [r7, #4]
 8007a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	00db      	lsls	r3, r3, #3
 8007a7e:	1a9b      	subs	r3, r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	440b      	add	r3, r1
 8007a84:	3350      	adds	r3, #80	; 0x50
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d108      	bne.n	8007a9e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6818      	ldr	r0, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a96:	461a      	mov	r2, r3
 8007a98:	2101      	movs	r1, #1
 8007a9a:	f003 fba3 	bl	800b1e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f005 fa5c 	bl	800cf62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f003 0308 	and.w	r3, r3, #8
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d008      	beq.n	8007ac6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	2308      	movs	r3, #8
 8007ac4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f003 0310 	and.w	r3, r3, #16
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d008      	beq.n	8007ae2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007adc:	461a      	mov	r2, r3
 8007ade:	2310      	movs	r3, #16
 8007ae0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d008      	beq.n	8007afe <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af8:	461a      	mov	r2, r3
 8007afa:	2340      	movs	r3, #64	; 0x40
 8007afc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d008      	beq.n	8007b1a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b14:	461a      	mov	r2, r3
 8007b16:	2302      	movs	r3, #2
 8007b18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d003      	beq.n	8007b2c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007b24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fc0c 	bl	8008344 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	3301      	adds	r3, #1
 8007b30:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b34:	085b      	lsrs	r3, r3, #1
 8007b36:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f47f af49 	bne.w	80079d2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f003 fa90 	bl	800b06a <USB_ReadInterrupts>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b54:	d114      	bne.n	8007b80 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	69fa      	ldr	r2, [r7, #28]
 8007b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f005 fa70 	bl	800d050 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	695a      	ldr	r2, [r3, #20]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f003 fa70 	bl	800b06a <USB_ReadInterrupts>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b94:	d112      	bne.n	8007bbc <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d102      	bne.n	8007bac <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f005 fa2c 	bl	800d004 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	695a      	ldr	r2, [r3, #20]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007bba:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f003 fa52 	bl	800b06a <USB_ReadInterrupts>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd0:	f040 80c7 	bne.w	8007d62 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	69fa      	ldr	r2, [r7, #28]
 8007bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007be2:	f023 0301 	bic.w	r3, r3, #1
 8007be6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2110      	movs	r1, #16
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f002 faf8 	bl	800a1e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bf8:	e056      	b.n	8007ca8 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c06:	461a      	mov	r2, r3
 8007c08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c1e:	0151      	lsls	r1, r2, #5
 8007c20:	69fa      	ldr	r2, [r7, #28]
 8007c22:	440a      	add	r2, r1
 8007c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c2c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c3e:	0151      	lsls	r1, r2, #5
 8007c40:	69fa      	ldr	r2, [r7, #28]
 8007c42:	440a      	add	r2, r1
 8007c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c72:	0151      	lsls	r1, r2, #5
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	440a      	add	r2, r1
 8007c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c92:	0151      	lsls	r1, r2, #5
 8007c94:	69fa      	ldr	r2, [r7, #28]
 8007c96:	440a      	add	r2, r1
 8007c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ca0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d3a3      	bcc.n	8007bfa <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	69fa      	ldr	r2, [r7, #28]
 8007cbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cc0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007cc4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d016      	beq.n	8007cfc <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cd8:	69fa      	ldr	r2, [r7, #28]
 8007cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cde:	f043 030b 	orr.w	r3, r3, #11
 8007ce2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cee:	69fa      	ldr	r2, [r7, #28]
 8007cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cf4:	f043 030b 	orr.w	r3, r3, #11
 8007cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8007cfa:	e015      	b.n	8007d28 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	69fa      	ldr	r2, [r7, #28]
 8007d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007d0e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007d12:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d22:	f043 030b 	orr.w	r3, r3, #11
 8007d26:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	69fa      	ldr	r2, [r7, #28]
 8007d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d3a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	f003 fa49 	bl	800b1e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	695a      	ldr	r2, [r3, #20]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007d60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f003 f97f 	bl	800b06a <USB_ReadInterrupts>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d76:	d124      	bne.n	8007dc2 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f003 fa0f 	bl	800b1a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f002 fa88 	bl	800a29c <USB_GetDevSpeed>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	461a      	mov	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681c      	ldr	r4, [r3, #0]
 8007d98:	f001 f932 	bl	8009000 <HAL_RCC_GetHCLKFreq>
 8007d9c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	461a      	mov	r2, r3
 8007da6:	4620      	mov	r0, r4
 8007da8:	f001 ffaa 	bl	8009d00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f005 f900 	bl	800cfb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695a      	ldr	r2, [r3, #20]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007dc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f003 f94f 	bl	800b06a <USB_ReadInterrupts>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f003 0308 	and.w	r3, r3, #8
 8007dd2:	2b08      	cmp	r3, #8
 8007dd4:	d10a      	bne.n	8007dec <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f005 f8dd 	bl	800cf96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	695a      	ldr	r2, [r3, #20]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f002 0208 	and.w	r2, r2, #8
 8007dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f003 f93a 	bl	800b06a <USB_ReadInterrupts>
 8007df6:	4603      	mov	r3, r0
 8007df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e00:	d10f      	bne.n	8007e22 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f005 f93f 	bl	800d090 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	695a      	ldr	r2, [r3, #20]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007e20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f003 f91f 	bl	800b06a <USB_ReadInterrupts>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e36:	d10f      	bne.n	8007e58 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f005 f912 	bl	800d06c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	695a      	ldr	r2, [r3, #20]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f003 f904 	bl	800b06a <USB_ReadInterrupts>
 8007e62:	4603      	mov	r3, r0
 8007e64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e6c:	d10a      	bne.n	8007e84 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f005 f920 	bl	800d0b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695a      	ldr	r2, [r3, #20]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007e82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f003 f8ee 	bl	800b06a <USB_ReadInterrupts>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f003 0304 	and.w	r3, r3, #4
 8007e94:	2b04      	cmp	r3, #4
 8007e96:	d115      	bne.n	8007ec4 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	f003 0304 	and.w	r3, r3, #4
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f005 f910 	bl	800d0d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6859      	ldr	r1, [r3, #4]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	605a      	str	r2, [r3, #4]
 8007ec0:	e000      	b.n	8007ec4 <HAL_PCD_IRQHandler+0x742>
      return;
 8007ec2:	bf00      	nop
    }
  }
}
 8007ec4:	3734      	adds	r7, #52	; 0x34
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd90      	pop	{r4, r7, pc}

08007eca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b082      	sub	sp, #8
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d101      	bne.n	8007ee4 <HAL_PCD_SetAddress+0x1a>
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	e013      	b.n	8007f0c <HAL_PCD_SetAddress+0x42>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	78fa      	ldrb	r2, [r7, #3]
 8007ef0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	78fa      	ldrb	r2, [r7, #3]
 8007efa:	4611      	mov	r1, r2
 8007efc:	4618      	mov	r0, r3
 8007efe:	f003 f84f 	bl	800afa0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	461a      	mov	r2, r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	70fb      	strb	r3, [r7, #3]
 8007f26:	460b      	mov	r3, r1
 8007f28:	803b      	strh	r3, [r7, #0]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	da0f      	bge.n	8007f5a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	f003 020f 	and.w	r2, r3, #15
 8007f40:	4613      	mov	r3, r2
 8007f42:	00db      	lsls	r3, r3, #3
 8007f44:	1a9b      	subs	r3, r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	3338      	adds	r3, #56	; 0x38
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	3304      	adds	r3, #4
 8007f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2201      	movs	r2, #1
 8007f56:	705a      	strb	r2, [r3, #1]
 8007f58:	e00f      	b.n	8007f7a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	f003 020f 	and.w	r2, r3, #15
 8007f60:	4613      	mov	r3, r2
 8007f62:	00db      	lsls	r3, r3, #3
 8007f64:	1a9b      	subs	r3, r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	4413      	add	r3, r2
 8007f70:	3304      	adds	r3, #4
 8007f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	f003 030f 	and.w	r3, r3, #15
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007f86:	883a      	ldrh	r2, [r7, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	78ba      	ldrb	r2, [r7, #2]
 8007f90:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	785b      	ldrb	r3, [r3, #1]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d004      	beq.n	8007fa4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007fa4:	78bb      	ldrb	r3, [r7, #2]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d102      	bne.n	8007fb0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d101      	bne.n	8007fbe <HAL_PCD_EP_Open+0xaa>
 8007fba:	2302      	movs	r3, #2
 8007fbc:	e00e      	b.n	8007fdc <HAL_PCD_EP_Open+0xc8>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68f9      	ldr	r1, [r7, #12]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f002 f989 	bl	800a2e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007fda:	7afb      	ldrb	r3, [r7, #11]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	da0f      	bge.n	8008018 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	f003 020f 	and.w	r2, r3, #15
 8007ffe:	4613      	mov	r3, r2
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	1a9b      	subs	r3, r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	3338      	adds	r3, #56	; 0x38
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	4413      	add	r3, r2
 800800c:	3304      	adds	r3, #4
 800800e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2201      	movs	r2, #1
 8008014:	705a      	strb	r2, [r3, #1]
 8008016:	e00f      	b.n	8008038 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008018:	78fb      	ldrb	r3, [r7, #3]
 800801a:	f003 020f 	and.w	r2, r3, #15
 800801e:	4613      	mov	r3, r2
 8008020:	00db      	lsls	r3, r3, #3
 8008022:	1a9b      	subs	r3, r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	4413      	add	r3, r2
 800802e:	3304      	adds	r3, #4
 8008030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008038:	78fb      	ldrb	r3, [r7, #3]
 800803a:	f003 030f 	and.w	r3, r3, #15
 800803e:	b2da      	uxtb	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800804a:	2b01      	cmp	r3, #1
 800804c:	d101      	bne.n	8008052 <HAL_PCD_EP_Close+0x6e>
 800804e:	2302      	movs	r3, #2
 8008050:	e00e      	b.n	8008070 <HAL_PCD_EP_Close+0x8c>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68f9      	ldr	r1, [r7, #12]
 8008060:	4618      	mov	r0, r3
 8008062:	f002 f9c5 	bl	800a3f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	607a      	str	r2, [r7, #4]
 8008082:	603b      	str	r3, [r7, #0]
 8008084:	460b      	mov	r3, r1
 8008086:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008088:	7afb      	ldrb	r3, [r7, #11]
 800808a:	f003 020f 	and.w	r2, r3, #15
 800808e:	4613      	mov	r3, r2
 8008090:	00db      	lsls	r3, r3, #3
 8008092:	1a9b      	subs	r3, r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	4413      	add	r3, r2
 800809e:	3304      	adds	r3, #4
 80080a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2200      	movs	r2, #0
 80080b2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2200      	movs	r2, #0
 80080b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080ba:	7afb      	ldrb	r3, [r7, #11]
 80080bc:	f003 030f 	and.w	r3, r3, #15
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d102      	bne.n	80080d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80080d4:	7afb      	ldrb	r3, [r7, #11]
 80080d6:	f003 030f 	and.w	r3, r3, #15
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d109      	bne.n	80080f2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	461a      	mov	r2, r3
 80080ea:	6979      	ldr	r1, [r7, #20]
 80080ec:	f002 fca0 	bl	800aa30 <USB_EP0StartXfer>
 80080f0:	e008      	b.n	8008104 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6818      	ldr	r0, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	461a      	mov	r2, r3
 80080fe:	6979      	ldr	r1, [r7, #20]
 8008100:	f002 fa52 	bl	800a5a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800810e:	b480      	push	{r7}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	460b      	mov	r3, r1
 8008118:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800811a:	78fb      	ldrb	r3, [r7, #3]
 800811c:	f003 020f 	and.w	r2, r3, #15
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	4613      	mov	r3, r2
 8008124:	00db      	lsls	r3, r3, #3
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	440b      	add	r3, r1
 800812c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008130:	681b      	ldr	r3, [r3, #0]
}
 8008132:	4618      	mov	r0, r3
 8008134:	370c      	adds	r7, #12
 8008136:	46bd      	mov	sp, r7
 8008138:	bc80      	pop	{r7}
 800813a:	4770      	bx	lr

0800813c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	607a      	str	r2, [r7, #4]
 8008146:	603b      	str	r3, [r7, #0]
 8008148:	460b      	mov	r3, r1
 800814a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800814c:	7afb      	ldrb	r3, [r7, #11]
 800814e:	f003 020f 	and.w	r2, r3, #15
 8008152:	4613      	mov	r3, r2
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	1a9b      	subs	r3, r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	3338      	adds	r3, #56	; 0x38
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	4413      	add	r3, r2
 8008160:	3304      	adds	r3, #4
 8008162:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	683a      	ldr	r2, [r7, #0]
 800816e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2200      	movs	r2, #0
 8008174:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2201      	movs	r2, #1
 800817a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800817c:	7afb      	ldrb	r3, [r7, #11]
 800817e:	f003 030f 	and.w	r3, r3, #15
 8008182:	b2da      	uxtb	r2, r3
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d102      	bne.n	8008196 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008196:	7afb      	ldrb	r3, [r7, #11]
 8008198:	f003 030f 	and.w	r3, r3, #15
 800819c:	2b00      	cmp	r3, #0
 800819e:	d109      	bne.n	80081b4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6818      	ldr	r0, [r3, #0]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	461a      	mov	r2, r3
 80081ac:	6979      	ldr	r1, [r7, #20]
 80081ae:	f002 fc3f 	bl	800aa30 <USB_EP0StartXfer>
 80081b2:	e008      	b.n	80081c6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6818      	ldr	r0, [r3, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	461a      	mov	r2, r3
 80081c0:	6979      	ldr	r1, [r7, #20]
 80081c2:	f002 f9f1 	bl	800a5a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80081dc:	78fb      	ldrb	r3, [r7, #3]
 80081de:	f003 020f 	and.w	r2, r3, #15
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d901      	bls.n	80081ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e050      	b.n	8008290 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80081ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	da0f      	bge.n	8008216 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	f003 020f 	and.w	r2, r3, #15
 80081fc:	4613      	mov	r3, r2
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	1a9b      	subs	r3, r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	3338      	adds	r3, #56	; 0x38
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	4413      	add	r3, r2
 800820a:	3304      	adds	r3, #4
 800820c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2201      	movs	r2, #1
 8008212:	705a      	strb	r2, [r3, #1]
 8008214:	e00d      	b.n	8008232 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008216:	78fa      	ldrb	r2, [r7, #3]
 8008218:	4613      	mov	r3, r2
 800821a:	00db      	lsls	r3, r3, #3
 800821c:	1a9b      	subs	r3, r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	4413      	add	r3, r2
 8008228:	3304      	adds	r3, #4
 800822a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2201      	movs	r2, #1
 8008236:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	f003 030f 	and.w	r3, r3, #15
 800823e:	b2da      	uxtb	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800824a:	2b01      	cmp	r3, #1
 800824c:	d101      	bne.n	8008252 <HAL_PCD_EP_SetStall+0x82>
 800824e:	2302      	movs	r3, #2
 8008250:	e01e      	b.n	8008290 <HAL_PCD_EP_SetStall+0xc0>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68f9      	ldr	r1, [r7, #12]
 8008260:	4618      	mov	r0, r3
 8008262:	f002 fdcb 	bl	800adfc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008266:	78fb      	ldrb	r3, [r7, #3]
 8008268:	f003 030f 	and.w	r3, r3, #15
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6818      	ldr	r0, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	b2d9      	uxtb	r1, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008280:	461a      	mov	r2, r3
 8008282:	f002 ffaf 	bl	800b1e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	f003 020f 	and.w	r2, r3, #15
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d901      	bls.n	80082b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e042      	b.n	800833c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80082b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	da0f      	bge.n	80082de <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	f003 020f 	and.w	r2, r3, #15
 80082c4:	4613      	mov	r3, r2
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	1a9b      	subs	r3, r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	3338      	adds	r3, #56	; 0x38
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	4413      	add	r3, r2
 80082d2:	3304      	adds	r3, #4
 80082d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	705a      	strb	r2, [r3, #1]
 80082dc:	e00f      	b.n	80082fe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	f003 020f 	and.w	r2, r3, #15
 80082e4:	4613      	mov	r3, r2
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	1a9b      	subs	r3, r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	4413      	add	r3, r2
 80082f4:	3304      	adds	r3, #4
 80082f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	f003 030f 	and.w	r3, r3, #15
 800830a:	b2da      	uxtb	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008316:	2b01      	cmp	r3, #1
 8008318:	d101      	bne.n	800831e <HAL_PCD_EP_ClrStall+0x86>
 800831a:	2302      	movs	r3, #2
 800831c:	e00e      	b.n	800833c <HAL_PCD_EP_ClrStall+0xa4>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68f9      	ldr	r1, [r7, #12]
 800832c:	4618      	mov	r0, r3
 800832e:	f002 fdd2 	bl	800aed6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08a      	sub	sp, #40	; 0x28
 8008348:	af02      	add	r7, sp, #8
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	4613      	mov	r3, r2
 800835c:	00db      	lsls	r3, r3, #3
 800835e:	1a9b      	subs	r3, r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	3338      	adds	r3, #56	; 0x38
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	4413      	add	r3, r2
 8008368:	3304      	adds	r3, #4
 800836a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	699a      	ldr	r2, [r3, #24]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	429a      	cmp	r2, r3
 8008376:	d901      	bls.n	800837c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e06c      	b.n	8008456 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	695a      	ldr	r2, [r3, #20]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	69fa      	ldr	r2, [r7, #28]
 800838e:	429a      	cmp	r2, r3
 8008390:	d902      	bls.n	8008398 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	3303      	adds	r3, #3
 800839c:	089b      	lsrs	r3, r3, #2
 800839e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80083a0:	e02b      	b.n	80083fa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	695a      	ldr	r2, [r3, #20]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	69fa      	ldr	r2, [r7, #28]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d902      	bls.n	80083be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	3303      	adds	r3, #3
 80083c2:	089b      	lsrs	r3, r3, #2
 80083c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	68d9      	ldr	r1, [r3, #12]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	4603      	mov	r3, r0
 80083dc:	6978      	ldr	r0, [r7, #20]
 80083de:	f002 fc79 	bl	800acd4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	441a      	add	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	699a      	ldr	r2, [r3, #24]
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	441a      	add	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	4413      	add	r3, r2
 8008402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	b29b      	uxth	r3, r3
 800840a:	69ba      	ldr	r2, [r7, #24]
 800840c:	429a      	cmp	r2, r3
 800840e:	d809      	bhi.n	8008424 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	699a      	ldr	r2, [r3, #24]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008418:	429a      	cmp	r2, r3
 800841a:	d203      	bcs.n	8008424 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1be      	bne.n	80083a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	695a      	ldr	r2, [r3, #20]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	429a      	cmp	r2, r3
 800842e:	d811      	bhi.n	8008454 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	f003 030f 	and.w	r3, r3, #15
 8008436:	2201      	movs	r2, #1
 8008438:	fa02 f303 	lsl.w	r3, r2, r3
 800843c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	43db      	mvns	r3, r3
 800844a:	6939      	ldr	r1, [r7, #16]
 800844c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008450:	4013      	ands	r3, r2
 8008452:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3720      	adds	r7, #32
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	333c      	adds	r3, #60	; 0x3c
 8008478:	3304      	adds	r3, #4
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	4413      	add	r3, r2
 8008486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	2b01      	cmp	r3, #1
 8008494:	f040 80a0 	bne.w	80085d8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f003 0308 	and.w	r3, r3, #8
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d015      	beq.n	80084ce <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	4a72      	ldr	r2, [pc, #456]	; (8008670 <PCD_EP_OutXfrComplete_int+0x210>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	f240 80dd 	bls.w	8008666 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 80d7 	beq.w	8008666 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c4:	461a      	mov	r2, r3
 80084c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ca:	6093      	str	r3, [r2, #8]
 80084cc:	e0cb      	b.n	8008666 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	f003 0320 	and.w	r3, r3, #32
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d009      	beq.n	80084ec <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e4:	461a      	mov	r2, r3
 80084e6:	2320      	movs	r3, #32
 80084e8:	6093      	str	r3, [r2, #8]
 80084ea:	e0bc      	b.n	8008666 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f040 80b7 	bne.w	8008666 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4a5d      	ldr	r2, [pc, #372]	; (8008670 <PCD_EP_OutXfrComplete_int+0x210>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d90f      	bls.n	8008520 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00a      	beq.n	8008520 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	015a      	lsls	r2, r3, #5
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	4413      	add	r3, r2
 8008512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008516:	461a      	mov	r2, r3
 8008518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800851c:	6093      	str	r3, [r2, #8]
 800851e:	e0a2      	b.n	8008666 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008520:	6879      	ldr	r1, [r7, #4]
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	4613      	mov	r3, r2
 8008526:	00db      	lsls	r3, r3, #3
 8008528:	1a9b      	subs	r3, r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	440b      	add	r3, r1
 800852e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008532:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	0159      	lsls	r1, r3, #5
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	440b      	add	r3, r1
 800853c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008546:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	4613      	mov	r3, r2
 800854e:	00db      	lsls	r3, r3, #3
 8008550:	1a9b      	subs	r3, r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4403      	add	r3, r0
 8008556:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800855a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800855c:	6879      	ldr	r1, [r7, #4]
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	4613      	mov	r3, r2
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	1a9b      	subs	r3, r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	440b      	add	r3, r1
 800856a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800856e:	6819      	ldr	r1, [r3, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	4613      	mov	r3, r2
 8008576:	00db      	lsls	r3, r3, #3
 8008578:	1a9b      	subs	r3, r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4403      	add	r3, r0
 800857e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4419      	add	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	4613      	mov	r3, r2
 800858c:	00db      	lsls	r3, r3, #3
 800858e:	1a9b      	subs	r3, r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4403      	add	r3, r0
 8008594:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008598:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d114      	bne.n	80085ca <PCD_EP_OutXfrComplete_int+0x16a>
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	4613      	mov	r3, r2
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	1a9b      	subs	r3, r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	440b      	add	r3, r1
 80085ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d108      	bne.n	80085ca <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6818      	ldr	r0, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80085c2:	461a      	mov	r2, r3
 80085c4:	2101      	movs	r1, #1
 80085c6:	f002 fe0d 	bl	800b1e4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f004 fcab 	bl	800cf2c <HAL_PCD_DataOutStageCallback>
 80085d6:	e046      	b.n	8008666 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	4a26      	ldr	r2, [pc, #152]	; (8008674 <PCD_EP_OutXfrComplete_int+0x214>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d124      	bne.n	800862a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00a      	beq.n	8008600 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f6:	461a      	mov	r2, r3
 80085f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085fc:	6093      	str	r3, [r2, #8]
 80085fe:	e032      	b.n	8008666 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	f003 0320 	and.w	r3, r3, #32
 8008606:	2b00      	cmp	r3, #0
 8008608:	d008      	beq.n	800861c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	015a      	lsls	r2, r3, #5
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	4413      	add	r3, r2
 8008612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008616:	461a      	mov	r2, r3
 8008618:	2320      	movs	r3, #32
 800861a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	b2db      	uxtb	r3, r3
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f004 fc82 	bl	800cf2c <HAL_PCD_DataOutStageCallback>
 8008628:	e01d      	b.n	8008666 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d114      	bne.n	800865a <PCD_EP_OutXfrComplete_int+0x1fa>
 8008630:	6879      	ldr	r1, [r7, #4]
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	4613      	mov	r3, r2
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	1a9b      	subs	r3, r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	440b      	add	r3, r1
 800863e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d108      	bne.n	800865a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6818      	ldr	r0, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008652:	461a      	mov	r2, r3
 8008654:	2100      	movs	r1, #0
 8008656:	f002 fdc5 	bl	800b1e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	b2db      	uxtb	r3, r3
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f004 fc63 	bl	800cf2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	4f54300a 	.word	0x4f54300a
 8008674:	4f54310a 	.word	0x4f54310a

08008678 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	333c      	adds	r3, #60	; 0x3c
 8008690:	3304      	adds	r3, #4
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	4413      	add	r3, r2
 800869e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4a15      	ldr	r2, [pc, #84]	; (8008700 <PCD_EP_OutSetupPacket_int+0x88>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d90e      	bls.n	80086cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d009      	beq.n	80086cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c4:	461a      	mov	r2, r3
 80086c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f004 fc1b 	bl	800cf08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4a0a      	ldr	r2, [pc, #40]	; (8008700 <PCD_EP_OutSetupPacket_int+0x88>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d90c      	bls.n	80086f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d108      	bne.n	80086f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6818      	ldr	r0, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80086ec:	461a      	mov	r2, r3
 80086ee:	2101      	movs	r1, #1
 80086f0:	f002 fd78 	bl	800b1e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	4f54300a 	.word	0x4f54300a

08008704 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	70fb      	strb	r3, [r7, #3]
 8008710:	4613      	mov	r3, r2
 8008712:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d107      	bne.n	8008732 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008722:	883b      	ldrh	r3, [r7, #0]
 8008724:	0419      	lsls	r1, r3, #16
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	430a      	orrs	r2, r1
 800872e:	629a      	str	r2, [r3, #40]	; 0x28
 8008730:	e028      	b.n	8008784 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008738:	0c1b      	lsrs	r3, r3, #16
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	4413      	add	r3, r2
 800873e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008740:	2300      	movs	r3, #0
 8008742:	73fb      	strb	r3, [r7, #15]
 8008744:	e00d      	b.n	8008762 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	3340      	adds	r3, #64	; 0x40
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	0c1b      	lsrs	r3, r3, #16
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	4413      	add	r3, r2
 800875a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	3301      	adds	r3, #1
 8008760:	73fb      	strb	r3, [r7, #15]
 8008762:	7bfa      	ldrb	r2, [r7, #15]
 8008764:	78fb      	ldrb	r3, [r7, #3]
 8008766:	3b01      	subs	r3, #1
 8008768:	429a      	cmp	r2, r3
 800876a:	d3ec      	bcc.n	8008746 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800876c:	883b      	ldrh	r3, [r7, #0]
 800876e:	0418      	lsls	r0, r3, #16
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6819      	ldr	r1, [r3, #0]
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	3b01      	subs	r3, #1
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	4302      	orrs	r2, r0
 800877c:	3340      	adds	r3, #64	; 0x40
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	440b      	add	r3, r1
 8008782:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	bc80      	pop	{r7}
 800878e:	4770      	bx	lr

08008790 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	887a      	ldrh	r2, [r7, #2]
 80087a2:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bc80      	pop	{r7}
 80087ae:	4770      	bx	lr

080087b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b08a      	sub	sp, #40	; 0x28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d101      	bne.n	80087c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e237      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0301 	and.w	r3, r3, #1
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d050      	beq.n	8008870 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087ce:	4ba3      	ldr	r3, [pc, #652]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f003 030c 	and.w	r3, r3, #12
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	d00c      	beq.n	80087f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087da:	4ba0      	ldr	r3, [pc, #640]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087e2:	2b08      	cmp	r3, #8
 80087e4:	d112      	bne.n	800880c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087e6:	4b9d      	ldr	r3, [pc, #628]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087f2:	d10b      	bne.n	800880c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087f4:	4b99      	ldr	r3, [pc, #612]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d036      	beq.n	800886e <HAL_RCC_OscConfig+0xbe>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d132      	bne.n	800886e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e212      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	4b93      	ldr	r3, [pc, #588]	; (8008a60 <HAL_RCC_OscConfig+0x2b0>)
 8008812:	b2d2      	uxtb	r2, r2
 8008814:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d013      	beq.n	8008846 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800881e:	f7fd f82d 	bl	800587c <HAL_GetTick>
 8008822:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008824:	e008      	b.n	8008838 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008826:	f7fd f829 	bl	800587c <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b64      	cmp	r3, #100	; 0x64
 8008832:	d901      	bls.n	8008838 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e1fc      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008838:	4b88      	ldr	r3, [pc, #544]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d0f0      	beq.n	8008826 <HAL_RCC_OscConfig+0x76>
 8008844:	e014      	b.n	8008870 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008846:	f7fd f819 	bl	800587c <HAL_GetTick>
 800884a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800884c:	e008      	b.n	8008860 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800884e:	f7fd f815 	bl	800587c <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	2b64      	cmp	r3, #100	; 0x64
 800885a:	d901      	bls.n	8008860 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e1e8      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008860:	4b7e      	ldr	r3, [pc, #504]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1f0      	bne.n	800884e <HAL_RCC_OscConfig+0x9e>
 800886c:	e000      	b.n	8008870 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800886e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d077      	beq.n	800896c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800887c:	4b77      	ldr	r3, [pc, #476]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f003 030c 	and.w	r3, r3, #12
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00b      	beq.n	80088a0 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008888:	4b74      	ldr	r3, [pc, #464]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008890:	2b08      	cmp	r3, #8
 8008892:	d126      	bne.n	80088e2 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008894:	4b71      	ldr	r3, [pc, #452]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d120      	bne.n	80088e2 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088a0:	4b6e      	ldr	r3, [pc, #440]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0302 	and.w	r3, r3, #2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d005      	beq.n	80088b8 <HAL_RCC_OscConfig+0x108>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d001      	beq.n	80088b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e1bc      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088b8:	4b68      	ldr	r3, [pc, #416]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	21f8      	movs	r1, #248	; 0xf8
 80088c6:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088c8:	69b9      	ldr	r1, [r7, #24]
 80088ca:	fa91 f1a1 	rbit	r1, r1
 80088ce:	6179      	str	r1, [r7, #20]
  return result;
 80088d0:	6979      	ldr	r1, [r7, #20]
 80088d2:	fab1 f181 	clz	r1, r1
 80088d6:	b2c9      	uxtb	r1, r1
 80088d8:	408b      	lsls	r3, r1
 80088da:	4960      	ldr	r1, [pc, #384]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088e0:	e044      	b.n	800896c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d02a      	beq.n	8008940 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088ea:	4b5e      	ldr	r3, [pc, #376]	; (8008a64 <HAL_RCC_OscConfig+0x2b4>)
 80088ec:	2201      	movs	r2, #1
 80088ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088f0:	f7fc ffc4 	bl	800587c <HAL_GetTick>
 80088f4:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088f6:	e008      	b.n	800890a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088f8:	f7fc ffc0 	bl	800587c <HAL_GetTick>
 80088fc:	4602      	mov	r2, r0
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	2b02      	cmp	r3, #2
 8008904:	d901      	bls.n	800890a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e193      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800890a:	4b54      	ldr	r3, [pc, #336]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0302 	and.w	r3, r3, #2
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0f0      	beq.n	80088f8 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008916:	4b51      	ldr	r3, [pc, #324]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	21f8      	movs	r1, #248	; 0xf8
 8008924:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008926:	6939      	ldr	r1, [r7, #16]
 8008928:	fa91 f1a1 	rbit	r1, r1
 800892c:	60f9      	str	r1, [r7, #12]
  return result;
 800892e:	68f9      	ldr	r1, [r7, #12]
 8008930:	fab1 f181 	clz	r1, r1
 8008934:	b2c9      	uxtb	r1, r1
 8008936:	408b      	lsls	r3, r1
 8008938:	4948      	ldr	r1, [pc, #288]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 800893a:	4313      	orrs	r3, r2
 800893c:	600b      	str	r3, [r1, #0]
 800893e:	e015      	b.n	800896c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008940:	4b48      	ldr	r3, [pc, #288]	; (8008a64 <HAL_RCC_OscConfig+0x2b4>)
 8008942:	2200      	movs	r2, #0
 8008944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008946:	f7fc ff99 	bl	800587c <HAL_GetTick>
 800894a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800894c:	e008      	b.n	8008960 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800894e:	f7fc ff95 	bl	800587c <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	2b02      	cmp	r3, #2
 800895a:	d901      	bls.n	8008960 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e168      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008960:	4b3e      	ldr	r3, [pc, #248]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0302 	and.w	r3, r3, #2
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1f0      	bne.n	800894e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 0308 	and.w	r3, r3, #8
 8008974:	2b00      	cmp	r3, #0
 8008976:	d030      	beq.n	80089da <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d016      	beq.n	80089ae <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008980:	4b39      	ldr	r3, [pc, #228]	; (8008a68 <HAL_RCC_OscConfig+0x2b8>)
 8008982:	2201      	movs	r2, #1
 8008984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008986:	f7fc ff79 	bl	800587c <HAL_GetTick>
 800898a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800898c:	e008      	b.n	80089a0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800898e:	f7fc ff75 	bl	800587c <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	2b02      	cmp	r3, #2
 800899a:	d901      	bls.n	80089a0 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800899c:	2303      	movs	r3, #3
 800899e:	e148      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089a0:	4b2e      	ldr	r3, [pc, #184]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 80089a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089a4:	f003 0302 	and.w	r3, r3, #2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d0f0      	beq.n	800898e <HAL_RCC_OscConfig+0x1de>
 80089ac:	e015      	b.n	80089da <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089ae:	4b2e      	ldr	r3, [pc, #184]	; (8008a68 <HAL_RCC_OscConfig+0x2b8>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089b4:	f7fc ff62 	bl	800587c <HAL_GetTick>
 80089b8:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089ba:	e008      	b.n	80089ce <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089bc:	f7fc ff5e 	bl	800587c <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e131      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089ce:	4b23      	ldr	r3, [pc, #140]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 80089d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089d2:	f003 0302 	and.w	r3, r3, #2
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1f0      	bne.n	80089bc <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0304 	and.w	r3, r3, #4
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f000 8088 	beq.w	8008af8 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089e8:	2300      	movs	r3, #0
 80089ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089ee:	4b1b      	ldr	r3, [pc, #108]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 80089f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d110      	bne.n	8008a1c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089fa:	2300      	movs	r3, #0
 80089fc:	60bb      	str	r3, [r7, #8]
 80089fe:	4b17      	ldr	r3, [pc, #92]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 8008a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a02:	4a16      	ldr	r2, [pc, #88]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 8008a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a08:	6413      	str	r3, [r2, #64]	; 0x40
 8008a0a:	4b14      	ldr	r3, [pc, #80]	; (8008a5c <HAL_RCC_OscConfig+0x2ac>)
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a12:	60bb      	str	r3, [r7, #8]
 8008a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008a1c:	4b13      	ldr	r3, [pc, #76]	; (8008a6c <HAL_RCC_OscConfig+0x2bc>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a12      	ldr	r2, [pc, #72]	; (8008a6c <HAL_RCC_OscConfig+0x2bc>)
 8008a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a26:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a28:	4b10      	ldr	r3, [pc, #64]	; (8008a6c <HAL_RCC_OscConfig+0x2bc>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d123      	bne.n	8008a7c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a34:	4b0d      	ldr	r3, [pc, #52]	; (8008a6c <HAL_RCC_OscConfig+0x2bc>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a0c      	ldr	r2, [pc, #48]	; (8008a6c <HAL_RCC_OscConfig+0x2bc>)
 8008a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a40:	f7fc ff1c 	bl	800587c <HAL_GetTick>
 8008a44:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a46:	e013      	b.n	8008a70 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a48:	f7fc ff18 	bl	800587c <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	6a3b      	ldr	r3, [r7, #32]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d90c      	bls.n	8008a70 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e0eb      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
 8008a5a:	bf00      	nop
 8008a5c:	40023800 	.word	0x40023800
 8008a60:	40023802 	.word	0x40023802
 8008a64:	42470000 	.word	0x42470000
 8008a68:	42470e80 	.word	0x42470e80
 8008a6c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a70:	4b72      	ldr	r3, [pc, #456]	; (8008c3c <HAL_RCC_OscConfig+0x48c>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d0e5      	beq.n	8008a48 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	689a      	ldr	r2, [r3, #8]
 8008a80:	4b6f      	ldr	r3, [pc, #444]	; (8008c40 <HAL_RCC_OscConfig+0x490>)
 8008a82:	b2d2      	uxtb	r2, r2
 8008a84:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d015      	beq.n	8008aba <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a8e:	f7fc fef5 	bl	800587c <HAL_GetTick>
 8008a92:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a94:	e00a      	b.n	8008aac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a96:	f7fc fef1 	bl	800587c <HAL_GetTick>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d901      	bls.n	8008aac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e0c2      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008aac:	4b65      	ldr	r3, [pc, #404]	; (8008c44 <HAL_RCC_OscConfig+0x494>)
 8008aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab0:	f003 0302 	and.w	r3, r3, #2
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d0ee      	beq.n	8008a96 <HAL_RCC_OscConfig+0x2e6>
 8008ab8:	e014      	b.n	8008ae4 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008aba:	f7fc fedf 	bl	800587c <HAL_GetTick>
 8008abe:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ac0:	e00a      	b.n	8008ad8 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ac2:	f7fc fedb 	bl	800587c <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d901      	bls.n	8008ad8 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e0ac      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ad8:	4b5a      	ldr	r3, [pc, #360]	; (8008c44 <HAL_RCC_OscConfig+0x494>)
 8008ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008adc:	f003 0302 	and.w	r3, r3, #2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1ee      	bne.n	8008ac2 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d105      	bne.n	8008af8 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008aec:	4b55      	ldr	r3, [pc, #340]	; (8008c44 <HAL_RCC_OscConfig+0x494>)
 8008aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af0:	4a54      	ldr	r2, [pc, #336]	; (8008c44 <HAL_RCC_OscConfig+0x494>)
 8008af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008af6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 8097 	beq.w	8008c30 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b02:	4b50      	ldr	r3, [pc, #320]	; (8008c44 <HAL_RCC_OscConfig+0x494>)
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f003 030c 	and.w	r3, r3, #12
 8008b0a:	2b08      	cmp	r3, #8
 8008b0c:	d061      	beq.n	8008bd2 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d146      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b16:	4b4c      	ldr	r3, [pc, #304]	; (8008c48 <HAL_RCC_OscConfig+0x498>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b1c:	f7fc feae 	bl	800587c <HAL_GetTick>
 8008b20:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b22:	e008      	b.n	8008b36 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b24:	f7fc feaa 	bl	800587c <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b64      	cmp	r3, #100	; 0x64
 8008b30:	d901      	bls.n	8008b36 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e07d      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b36:	4b43      	ldr	r3, [pc, #268]	; (8008c44 <HAL_RCC_OscConfig+0x494>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1f0      	bne.n	8008b24 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b42:	4b40      	ldr	r3, [pc, #256]	; (8008c44 <HAL_RCC_OscConfig+0x494>)
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	4b41      	ldr	r3, [pc, #260]	; (8008c4c <HAL_RCC_OscConfig+0x49c>)
 8008b48:	4013      	ands	r3, r2
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	69d1      	ldr	r1, [r2, #28]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	6a12      	ldr	r2, [r2, #32]
 8008b52:	4311      	orrs	r1, r2
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b58:	0192      	lsls	r2, r2, #6
 8008b5a:	4311      	orrs	r1, r2
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008b60:	0612      	lsls	r2, r2, #24
 8008b62:	4311      	orrs	r1, r2
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008b68:	0852      	lsrs	r2, r2, #1
 8008b6a:	3a01      	subs	r2, #1
 8008b6c:	0412      	lsls	r2, r2, #16
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	4934      	ldr	r1, [pc, #208]	; (8008c44 <HAL_RCC_OscConfig+0x494>)
 8008b72:	4313      	orrs	r3, r2
 8008b74:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b76:	4b34      	ldr	r3, [pc, #208]	; (8008c48 <HAL_RCC_OscConfig+0x498>)
 8008b78:	2201      	movs	r2, #1
 8008b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b7c:	f7fc fe7e 	bl	800587c <HAL_GetTick>
 8008b80:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b82:	e008      	b.n	8008b96 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b84:	f7fc fe7a 	bl	800587c <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	2b64      	cmp	r3, #100	; 0x64
 8008b90:	d901      	bls.n	8008b96 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e04d      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b96:	4b2b      	ldr	r3, [pc, #172]	; (8008c44 <HAL_RCC_OscConfig+0x494>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0f0      	beq.n	8008b84 <HAL_RCC_OscConfig+0x3d4>
 8008ba2:	e045      	b.n	8008c30 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ba4:	4b28      	ldr	r3, [pc, #160]	; (8008c48 <HAL_RCC_OscConfig+0x498>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008baa:	f7fc fe67 	bl	800587c <HAL_GetTick>
 8008bae:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bb0:	e008      	b.n	8008bc4 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bb2:	f7fc fe63 	bl	800587c <HAL_GetTick>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	6a3b      	ldr	r3, [r7, #32]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	2b64      	cmp	r3, #100	; 0x64
 8008bbe:	d901      	bls.n	8008bc4 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e036      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bc4:	4b1f      	ldr	r3, [pc, #124]	; (8008c44 <HAL_RCC_OscConfig+0x494>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1f0      	bne.n	8008bb2 <HAL_RCC_OscConfig+0x402>
 8008bd0:	e02e      	b.n	8008c30 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d101      	bne.n	8008bde <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e029      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8008bde:	4b19      	ldr	r3, [pc, #100]	; (8008c44 <HAL_RCC_OscConfig+0x494>)
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d11c      	bne.n	8008c2c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d115      	bne.n	8008c2c <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	099b      	lsrs	r3, r3, #6
 8008c04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d10d      	bne.n	8008c2c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d106      	bne.n	8008c2c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d001      	beq.n	8008c30 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e000      	b.n	8008c32 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3728      	adds	r7, #40	; 0x28
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	40007000 	.word	0x40007000
 8008c40:	40023870 	.word	0x40023870
 8008c44:	40023800 	.word	0x40023800
 8008c48:	42470060 	.word	0x42470060
 8008c4c:	f0bc8000 	.word	0xf0bc8000

08008c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e0d2      	b.n	8008e0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c64:	4b6b      	ldr	r3, [pc, #428]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 030f 	and.w	r3, r3, #15
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d90c      	bls.n	8008c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c72:	4b68      	ldr	r3, [pc, #416]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	b2d2      	uxtb	r2, r2
 8008c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c7a:	4b66      	ldr	r3, [pc, #408]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 030f 	and.w	r3, r3, #15
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d001      	beq.n	8008c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e0be      	b.n	8008e0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0302 	and.w	r3, r3, #2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d020      	beq.n	8008cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 0304 	and.w	r3, r3, #4
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d005      	beq.n	8008cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ca4:	4b5c      	ldr	r3, [pc, #368]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	4a5b      	ldr	r2, [pc, #364]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008caa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008cae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0308 	and.w	r3, r3, #8
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d005      	beq.n	8008cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8008cbc:	4b56      	ldr	r3, [pc, #344]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	4a55      	ldr	r2, [pc, #340]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008cc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cc8:	4b53      	ldr	r3, [pc, #332]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	4950      	ldr	r1, [pc, #320]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0301 	and.w	r3, r3, #1
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d040      	beq.n	8008d68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d107      	bne.n	8008cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cee:	4b4a      	ldr	r3, [pc, #296]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d115      	bne.n	8008d26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e085      	b.n	8008e0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d107      	bne.n	8008d16 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d06:	4b44      	ldr	r3, [pc, #272]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d109      	bne.n	8008d26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e079      	b.n	8008e0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d16:	4b40      	ldr	r3, [pc, #256]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0302 	and.w	r3, r3, #2
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d101      	bne.n	8008d26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e071      	b.n	8008e0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d26:	4b3c      	ldr	r3, [pc, #240]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f023 0203 	bic.w	r2, r3, #3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	4939      	ldr	r1, [pc, #228]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d38:	f7fc fda0 	bl	800587c <HAL_GetTick>
 8008d3c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d3e:	e00a      	b.n	8008d56 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d40:	f7fc fd9c 	bl	800587c <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d901      	bls.n	8008d56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e059      	b.n	8008e0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d56:	4b30      	ldr	r3, [pc, #192]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f003 020c 	and.w	r2, r3, #12
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d1eb      	bne.n	8008d40 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d68:	4b2a      	ldr	r3, [pc, #168]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 030f 	and.w	r3, r3, #15
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d20c      	bcs.n	8008d90 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d76:	4b27      	ldr	r3, [pc, #156]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	b2d2      	uxtb	r2, r2
 8008d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d7e:	4b25      	ldr	r3, [pc, #148]	; (8008e14 <HAL_RCC_ClockConfig+0x1c4>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 030f 	and.w	r3, r3, #15
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d001      	beq.n	8008d90 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e03c      	b.n	8008e0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 0304 	and.w	r3, r3, #4
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d008      	beq.n	8008dae <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d9c:	4b1e      	ldr	r3, [pc, #120]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	491b      	ldr	r1, [pc, #108]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0308 	and.w	r3, r3, #8
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d009      	beq.n	8008dce <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008dba:	4b17      	ldr	r3, [pc, #92]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	4913      	ldr	r1, [pc, #76]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8008dce:	f000 f837 	bl	8008e40 <HAL_RCC_GetSysClockFreq>
 8008dd2:	4601      	mov	r1, r0
 8008dd4:	4b10      	ldr	r3, [pc, #64]	; (8008e18 <HAL_RCC_ClockConfig+0x1c8>)
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ddc:	22f0      	movs	r2, #240	; 0xf0
 8008dde:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	fa92 f2a2 	rbit	r2, r2
 8008de6:	60fa      	str	r2, [r7, #12]
  return result;
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	fab2 f282 	clz	r2, r2
 8008dee:	b2d2      	uxtb	r2, r2
 8008df0:	40d3      	lsrs	r3, r2
 8008df2:	4a0a      	ldr	r2, [pc, #40]	; (8008e1c <HAL_RCC_ClockConfig+0x1cc>)
 8008df4:	5cd3      	ldrb	r3, [r2, r3]
 8008df6:	fa21 f303 	lsr.w	r3, r1, r3
 8008dfa:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <HAL_RCC_ClockConfig+0x1d0>)
 8008dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008dfe:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <HAL_RCC_ClockConfig+0x1d4>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fc fcf8 	bl	80057f8 <HAL_InitTick>

  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	40023c00 	.word	0x40023c00
 8008e18:	40023800 	.word	0x40023800
 8008e1c:	080131e4 	.word	0x080131e4
 8008e20:	20000024 	.word	0x20000024
 8008e24:	20000028 	.word	0x20000028

08008e28 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8008e2c:	4b03      	ldr	r3, [pc, #12]	; (8008e3c <HAL_RCC_EnableCSS+0x14>)
 8008e2e:	2201      	movs	r2, #1
 8008e30:	601a      	str	r2, [r3, #0]
}
 8008e32:	bf00      	nop
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bc80      	pop	{r7}
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	4247004c 	.word	0x4247004c

08008e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008e44:	b084      	sub	sp, #16
 8008e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	607b      	str	r3, [r7, #4]
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	60fb      	str	r3, [r7, #12]
 8008e50:	2300      	movs	r3, #0
 8008e52:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008e54:	2300      	movs	r3, #0
 8008e56:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e58:	4b67      	ldr	r3, [pc, #412]	; (8008ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	f003 030c 	and.w	r3, r3, #12
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	d00d      	beq.n	8008e80 <HAL_RCC_GetSysClockFreq+0x40>
 8008e64:	2b08      	cmp	r3, #8
 8008e66:	f200 80bd 	bhi.w	8008fe4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d002      	beq.n	8008e74 <HAL_RCC_GetSysClockFreq+0x34>
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	d003      	beq.n	8008e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8008e72:	e0b7      	b.n	8008fe4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e74:	4b61      	ldr	r3, [pc, #388]	; (8008ffc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008e76:	60bb      	str	r3, [r7, #8]
       break;
 8008e78:	e0b7      	b.n	8008fea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e7a:	4b60      	ldr	r3, [pc, #384]	; (8008ffc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008e7c:	60bb      	str	r3, [r7, #8]
      break;
 8008e7e:	e0b4      	b.n	8008fea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e80:	4b5d      	ldr	r3, [pc, #372]	; (8008ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e8a:	4b5b      	ldr	r3, [pc, #364]	; (8008ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d04d      	beq.n	8008f32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e96:	4b58      	ldr	r3, [pc, #352]	; (8008ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	099b      	lsrs	r3, r3, #6
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	f04f 0300 	mov.w	r3, #0
 8008ea2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008ea6:	f04f 0100 	mov.w	r1, #0
 8008eaa:	ea02 0800 	and.w	r8, r2, r0
 8008eae:	ea03 0901 	and.w	r9, r3, r1
 8008eb2:	4640      	mov	r0, r8
 8008eb4:	4649      	mov	r1, r9
 8008eb6:	f04f 0200 	mov.w	r2, #0
 8008eba:	f04f 0300 	mov.w	r3, #0
 8008ebe:	014b      	lsls	r3, r1, #5
 8008ec0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008ec4:	0142      	lsls	r2, r0, #5
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	4619      	mov	r1, r3
 8008eca:	ebb0 0008 	subs.w	r0, r0, r8
 8008ece:	eb61 0109 	sbc.w	r1, r1, r9
 8008ed2:	f04f 0200 	mov.w	r2, #0
 8008ed6:	f04f 0300 	mov.w	r3, #0
 8008eda:	018b      	lsls	r3, r1, #6
 8008edc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008ee0:	0182      	lsls	r2, r0, #6
 8008ee2:	1a12      	subs	r2, r2, r0
 8008ee4:	eb63 0301 	sbc.w	r3, r3, r1
 8008ee8:	f04f 0000 	mov.w	r0, #0
 8008eec:	f04f 0100 	mov.w	r1, #0
 8008ef0:	00d9      	lsls	r1, r3, #3
 8008ef2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ef6:	00d0      	lsls	r0, r2, #3
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	eb12 0208 	adds.w	r2, r2, r8
 8008f00:	eb43 0309 	adc.w	r3, r3, r9
 8008f04:	f04f 0000 	mov.w	r0, #0
 8008f08:	f04f 0100 	mov.w	r1, #0
 8008f0c:	0299      	lsls	r1, r3, #10
 8008f0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008f12:	0290      	lsls	r0, r2, #10
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4610      	mov	r0, r2
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	f04f 0300 	mov.w	r3, #0
 8008f24:	f7f8 f98c 	bl	8001240 <__aeabi_uldivmod>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	60fb      	str	r3, [r7, #12]
 8008f30:	e04a      	b.n	8008fc8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f32:	4b31      	ldr	r3, [pc, #196]	; (8008ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	099b      	lsrs	r3, r3, #6
 8008f38:	461a      	mov	r2, r3
 8008f3a:	f04f 0300 	mov.w	r3, #0
 8008f3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008f42:	f04f 0100 	mov.w	r1, #0
 8008f46:	ea02 0400 	and.w	r4, r2, r0
 8008f4a:	ea03 0501 	and.w	r5, r3, r1
 8008f4e:	4620      	mov	r0, r4
 8008f50:	4629      	mov	r1, r5
 8008f52:	f04f 0200 	mov.w	r2, #0
 8008f56:	f04f 0300 	mov.w	r3, #0
 8008f5a:	014b      	lsls	r3, r1, #5
 8008f5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008f60:	0142      	lsls	r2, r0, #5
 8008f62:	4610      	mov	r0, r2
 8008f64:	4619      	mov	r1, r3
 8008f66:	1b00      	subs	r0, r0, r4
 8008f68:	eb61 0105 	sbc.w	r1, r1, r5
 8008f6c:	f04f 0200 	mov.w	r2, #0
 8008f70:	f04f 0300 	mov.w	r3, #0
 8008f74:	018b      	lsls	r3, r1, #6
 8008f76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008f7a:	0182      	lsls	r2, r0, #6
 8008f7c:	1a12      	subs	r2, r2, r0
 8008f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8008f82:	f04f 0000 	mov.w	r0, #0
 8008f86:	f04f 0100 	mov.w	r1, #0
 8008f8a:	00d9      	lsls	r1, r3, #3
 8008f8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f90:	00d0      	lsls	r0, r2, #3
 8008f92:	4602      	mov	r2, r0
 8008f94:	460b      	mov	r3, r1
 8008f96:	1912      	adds	r2, r2, r4
 8008f98:	eb45 0303 	adc.w	r3, r5, r3
 8008f9c:	f04f 0000 	mov.w	r0, #0
 8008fa0:	f04f 0100 	mov.w	r1, #0
 8008fa4:	0299      	lsls	r1, r3, #10
 8008fa6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008faa:	0290      	lsls	r0, r2, #10
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f04f 0300 	mov.w	r3, #0
 8008fbc:	f7f8 f940 	bl	8001240 <__aeabi_uldivmod>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008fc8:	4b0b      	ldr	r3, [pc, #44]	; (8008ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	0c1b      	lsrs	r3, r3, #16
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	005b      	lsls	r3, r3, #1
 8008fd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fe0:	60bb      	str	r3, [r7, #8]
      break;
 8008fe2:	e002      	b.n	8008fea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008fe4:	4b05      	ldr	r3, [pc, #20]	; (8008ffc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008fe6:	60bb      	str	r3, [r7, #8]
      break;
 8008fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008fea:	68bb      	ldr	r3, [r7, #8]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008ff6:	bf00      	nop
 8008ff8:	40023800 	.word	0x40023800
 8008ffc:	00f42400 	.word	0x00f42400

08009000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009000:	b480      	push	{r7}
 8009002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009004:	4b02      	ldr	r3, [pc, #8]	; (8009010 <HAL_RCC_GetHCLKFreq+0x10>)
 8009006:	681b      	ldr	r3, [r3, #0]
}
 8009008:	4618      	mov	r0, r3
 800900a:	46bd      	mov	sp, r7
 800900c:	bc80      	pop	{r7}
 800900e:	4770      	bx	lr
 8009010:	20000024 	.word	0x20000024

08009014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800901a:	f7ff fff1 	bl	8009000 <HAL_RCC_GetHCLKFreq>
 800901e:	4601      	mov	r1, r0
 8009020:	4b0b      	ldr	r3, [pc, #44]	; (8009050 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009028:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800902c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	fa92 f2a2 	rbit	r2, r2
 8009034:	603a      	str	r2, [r7, #0]
  return result;
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	fab2 f282 	clz	r2, r2
 800903c:	b2d2      	uxtb	r2, r2
 800903e:	40d3      	lsrs	r3, r2
 8009040:	4a04      	ldr	r2, [pc, #16]	; (8009054 <HAL_RCC_GetPCLK1Freq+0x40>)
 8009042:	5cd3      	ldrb	r3, [r2, r3]
 8009044:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009048:	4618      	mov	r0, r3
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	40023800 	.word	0x40023800
 8009054:	080131f4 	.word	0x080131f4

08009058 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800905c:	4b06      	ldr	r3, [pc, #24]	; (8009078 <HAL_RCC_NMI_IRQHandler+0x20>)
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009064:	2b80      	cmp	r3, #128	; 0x80
 8009066:	d104      	bne.n	8009072 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009068:	f000 f80a 	bl	8009080 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800906c:	4b03      	ldr	r3, [pc, #12]	; (800907c <HAL_RCC_NMI_IRQHandler+0x24>)
 800906e:	2280      	movs	r2, #128	; 0x80
 8009070:	701a      	strb	r2, [r3, #0]
  }
}
 8009072:	bf00      	nop
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	40023800 	.word	0x40023800
 800907c:	4002380e 	.word	0x4002380e

08009080 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009080:	b480      	push	{r7}
 8009082:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8009084:	bf00      	nop
 8009086:	46bd      	mov	sp, r7
 8009088:	bc80      	pop	{r7}
 800908a:	4770      	bx	lr

0800908c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e041      	b.n	8009122 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d106      	bne.n	80090b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7fc f9d2 	bl	800545c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3304      	adds	r3, #4
 80090c8:	4619      	mov	r1, r3
 80090ca:	4610      	mov	r0, r2
 80090cc:	f000 fad8 	bl	8009680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
	...

0800912c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800913a:	b2db      	uxtb	r3, r3
 800913c:	2b01      	cmp	r3, #1
 800913e:	d001      	beq.n	8009144 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e046      	b.n	80091d2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2202      	movs	r2, #2
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a22      	ldr	r2, [pc, #136]	; (80091dc <HAL_TIM_Base_Start+0xb0>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d022      	beq.n	800919c <HAL_TIM_Base_Start+0x70>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800915e:	d01d      	beq.n	800919c <HAL_TIM_Base_Start+0x70>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a1e      	ldr	r2, [pc, #120]	; (80091e0 <HAL_TIM_Base_Start+0xb4>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d018      	beq.n	800919c <HAL_TIM_Base_Start+0x70>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a1d      	ldr	r2, [pc, #116]	; (80091e4 <HAL_TIM_Base_Start+0xb8>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d013      	beq.n	800919c <HAL_TIM_Base_Start+0x70>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a1b      	ldr	r2, [pc, #108]	; (80091e8 <HAL_TIM_Base_Start+0xbc>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d00e      	beq.n	800919c <HAL_TIM_Base_Start+0x70>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a1a      	ldr	r2, [pc, #104]	; (80091ec <HAL_TIM_Base_Start+0xc0>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d009      	beq.n	800919c <HAL_TIM_Base_Start+0x70>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a18      	ldr	r2, [pc, #96]	; (80091f0 <HAL_TIM_Base_Start+0xc4>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d004      	beq.n	800919c <HAL_TIM_Base_Start+0x70>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a17      	ldr	r2, [pc, #92]	; (80091f4 <HAL_TIM_Base_Start+0xc8>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d111      	bne.n	80091c0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f003 0307 	and.w	r3, r3, #7
 80091a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b06      	cmp	r3, #6
 80091ac:	d010      	beq.n	80091d0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f042 0201 	orr.w	r2, r2, #1
 80091bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091be:	e007      	b.n	80091d0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f042 0201 	orr.w	r2, r2, #1
 80091ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bc80      	pop	{r7}
 80091da:	4770      	bx	lr
 80091dc:	40010000 	.word	0x40010000
 80091e0:	40000400 	.word	0x40000400
 80091e4:	40000800 	.word	0x40000800
 80091e8:	40000c00 	.word	0x40000c00
 80091ec:	40010400 	.word	0x40010400
 80091f0:	40014000 	.word	0x40014000
 80091f4:	40001800 	.word	0x40001800

080091f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b01      	cmp	r3, #1
 800920a:	d001      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e04e      	b.n	80092ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2202      	movs	r2, #2
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f042 0201 	orr.w	r2, r2, #1
 8009226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a22      	ldr	r2, [pc, #136]	; (80092b8 <HAL_TIM_Base_Start_IT+0xc0>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d022      	beq.n	8009278 <HAL_TIM_Base_Start_IT+0x80>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800923a:	d01d      	beq.n	8009278 <HAL_TIM_Base_Start_IT+0x80>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a1e      	ldr	r2, [pc, #120]	; (80092bc <HAL_TIM_Base_Start_IT+0xc4>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d018      	beq.n	8009278 <HAL_TIM_Base_Start_IT+0x80>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a1d      	ldr	r2, [pc, #116]	; (80092c0 <HAL_TIM_Base_Start_IT+0xc8>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d013      	beq.n	8009278 <HAL_TIM_Base_Start_IT+0x80>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a1b      	ldr	r2, [pc, #108]	; (80092c4 <HAL_TIM_Base_Start_IT+0xcc>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d00e      	beq.n	8009278 <HAL_TIM_Base_Start_IT+0x80>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a1a      	ldr	r2, [pc, #104]	; (80092c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d009      	beq.n	8009278 <HAL_TIM_Base_Start_IT+0x80>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a18      	ldr	r2, [pc, #96]	; (80092cc <HAL_TIM_Base_Start_IT+0xd4>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d004      	beq.n	8009278 <HAL_TIM_Base_Start_IT+0x80>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a17      	ldr	r2, [pc, #92]	; (80092d0 <HAL_TIM_Base_Start_IT+0xd8>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d111      	bne.n	800929c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f003 0307 	and.w	r3, r3, #7
 8009282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2b06      	cmp	r3, #6
 8009288:	d010      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f042 0201 	orr.w	r2, r2, #1
 8009298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800929a:	e007      	b.n	80092ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f042 0201 	orr.w	r2, r2, #1
 80092aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bc80      	pop	{r7}
 80092b6:	4770      	bx	lr
 80092b8:	40010000 	.word	0x40010000
 80092bc:	40000400 	.word	0x40000400
 80092c0:	40000800 	.word	0x40000800
 80092c4:	40000c00 	.word	0x40000c00
 80092c8:	40010400 	.word	0x40010400
 80092cc:	40014000 	.word	0x40014000
 80092d0:	40001800 	.word	0x40001800

080092d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e041      	b.n	800936a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d106      	bne.n	8009300 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7fc f878 	bl	80053f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2202      	movs	r2, #2
 8009304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	3304      	adds	r3, #4
 8009310:	4619      	mov	r1, r3
 8009312:	4610      	mov	r0, r2
 8009314:	f000 f9b4 	bl	8009680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
	...

08009374 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d109      	bne.n	8009398 <HAL_TIM_PWM_Start+0x24>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2b01      	cmp	r3, #1
 800938e:	bf14      	ite	ne
 8009390:	2301      	movne	r3, #1
 8009392:	2300      	moveq	r3, #0
 8009394:	b2db      	uxtb	r3, r3
 8009396:	e022      	b.n	80093de <HAL_TIM_PWM_Start+0x6a>
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	2b04      	cmp	r3, #4
 800939c:	d109      	bne.n	80093b2 <HAL_TIM_PWM_Start+0x3e>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	bf14      	ite	ne
 80093aa:	2301      	movne	r3, #1
 80093ac:	2300      	moveq	r3, #0
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	e015      	b.n	80093de <HAL_TIM_PWM_Start+0x6a>
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	2b08      	cmp	r3, #8
 80093b6:	d109      	bne.n	80093cc <HAL_TIM_PWM_Start+0x58>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	bf14      	ite	ne
 80093c4:	2301      	movne	r3, #1
 80093c6:	2300      	moveq	r3, #0
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	e008      	b.n	80093de <HAL_TIM_PWM_Start+0x6a>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	bf14      	ite	ne
 80093d8:	2301      	movne	r3, #1
 80093da:	2300      	moveq	r3, #0
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e07c      	b.n	80094e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d104      	bne.n	80093f6 <HAL_TIM_PWM_Start+0x82>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093f4:	e013      	b.n	800941e <HAL_TIM_PWM_Start+0xaa>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d104      	bne.n	8009406 <HAL_TIM_PWM_Start+0x92>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009404:	e00b      	b.n	800941e <HAL_TIM_PWM_Start+0xaa>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b08      	cmp	r3, #8
 800940a:	d104      	bne.n	8009416 <HAL_TIM_PWM_Start+0xa2>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2202      	movs	r2, #2
 8009410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009414:	e003      	b.n	800941e <HAL_TIM_PWM_Start+0xaa>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2202      	movs	r2, #2
 800941a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2201      	movs	r2, #1
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	4618      	mov	r0, r3
 8009428:	f000 fb74 	bl	8009b14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a2d      	ldr	r2, [pc, #180]	; (80094e8 <HAL_TIM_PWM_Start+0x174>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d004      	beq.n	8009440 <HAL_TIM_PWM_Start+0xcc>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a2c      	ldr	r2, [pc, #176]	; (80094ec <HAL_TIM_PWM_Start+0x178>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d101      	bne.n	8009444 <HAL_TIM_PWM_Start+0xd0>
 8009440:	2301      	movs	r3, #1
 8009442:	e000      	b.n	8009446 <HAL_TIM_PWM_Start+0xd2>
 8009444:	2300      	movs	r3, #0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d007      	beq.n	800945a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009458:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a22      	ldr	r2, [pc, #136]	; (80094e8 <HAL_TIM_PWM_Start+0x174>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d022      	beq.n	80094aa <HAL_TIM_PWM_Start+0x136>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800946c:	d01d      	beq.n	80094aa <HAL_TIM_PWM_Start+0x136>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a1f      	ldr	r2, [pc, #124]	; (80094f0 <HAL_TIM_PWM_Start+0x17c>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d018      	beq.n	80094aa <HAL_TIM_PWM_Start+0x136>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a1d      	ldr	r2, [pc, #116]	; (80094f4 <HAL_TIM_PWM_Start+0x180>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d013      	beq.n	80094aa <HAL_TIM_PWM_Start+0x136>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a1c      	ldr	r2, [pc, #112]	; (80094f8 <HAL_TIM_PWM_Start+0x184>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d00e      	beq.n	80094aa <HAL_TIM_PWM_Start+0x136>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a16      	ldr	r2, [pc, #88]	; (80094ec <HAL_TIM_PWM_Start+0x178>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d009      	beq.n	80094aa <HAL_TIM_PWM_Start+0x136>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a18      	ldr	r2, [pc, #96]	; (80094fc <HAL_TIM_PWM_Start+0x188>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d004      	beq.n	80094aa <HAL_TIM_PWM_Start+0x136>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a16      	ldr	r2, [pc, #88]	; (8009500 <HAL_TIM_PWM_Start+0x18c>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d111      	bne.n	80094ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f003 0307 	and.w	r3, r3, #7
 80094b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2b06      	cmp	r3, #6
 80094ba:	d010      	beq.n	80094de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f042 0201 	orr.w	r2, r2, #1
 80094ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094cc:	e007      	b.n	80094de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f042 0201 	orr.w	r2, r2, #1
 80094dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	40010000 	.word	0x40010000
 80094ec:	40010400 	.word	0x40010400
 80094f0:	40000400 	.word	0x40000400
 80094f4:	40000800 	.word	0x40000800
 80094f8:	40000c00 	.word	0x40000c00
 80094fc:	40014000 	.word	0x40014000
 8009500:	40001800 	.word	0x40001800

08009504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009516:	2b01      	cmp	r3, #1
 8009518:	d101      	bne.n	800951e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800951a:	2302      	movs	r3, #2
 800951c:	e0ac      	b.n	8009678 <HAL_TIM_PWM_ConfigChannel+0x174>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b0c      	cmp	r3, #12
 800952a:	f200 809f 	bhi.w	800966c <HAL_TIM_PWM_ConfigChannel+0x168>
 800952e:	a201      	add	r2, pc, #4	; (adr r2, 8009534 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009534:	08009569 	.word	0x08009569
 8009538:	0800966d 	.word	0x0800966d
 800953c:	0800966d 	.word	0x0800966d
 8009540:	0800966d 	.word	0x0800966d
 8009544:	080095a9 	.word	0x080095a9
 8009548:	0800966d 	.word	0x0800966d
 800954c:	0800966d 	.word	0x0800966d
 8009550:	0800966d 	.word	0x0800966d
 8009554:	080095eb 	.word	0x080095eb
 8009558:	0800966d 	.word	0x0800966d
 800955c:	0800966d 	.word	0x0800966d
 8009560:	0800966d 	.word	0x0800966d
 8009564:	0800962b 	.word	0x0800962b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68b9      	ldr	r1, [r7, #8]
 800956e:	4618      	mov	r0, r3
 8009570:	f000 f924 	bl	80097bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	699a      	ldr	r2, [r3, #24]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f042 0208 	orr.w	r2, r2, #8
 8009582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	699a      	ldr	r2, [r3, #24]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f022 0204 	bic.w	r2, r2, #4
 8009592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6999      	ldr	r1, [r3, #24]
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	691a      	ldr	r2, [r3, #16]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	430a      	orrs	r2, r1
 80095a4:	619a      	str	r2, [r3, #24]
      break;
 80095a6:	e062      	b.n	800966e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68b9      	ldr	r1, [r7, #8]
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 f974 	bl	800989c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	699a      	ldr	r2, [r3, #24]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	699a      	ldr	r2, [r3, #24]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6999      	ldr	r1, [r3, #24]
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	021a      	lsls	r2, r3, #8
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	619a      	str	r2, [r3, #24]
      break;
 80095e8:	e041      	b.n	800966e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68b9      	ldr	r1, [r7, #8]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 f9c7 	bl	8009984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	69da      	ldr	r2, [r3, #28]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f042 0208 	orr.w	r2, r2, #8
 8009604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	69da      	ldr	r2, [r3, #28]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f022 0204 	bic.w	r2, r2, #4
 8009614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	69d9      	ldr	r1, [r3, #28]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	691a      	ldr	r2, [r3, #16]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	430a      	orrs	r2, r1
 8009626:	61da      	str	r2, [r3, #28]
      break;
 8009628:	e021      	b.n	800966e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68b9      	ldr	r1, [r7, #8]
 8009630:	4618      	mov	r0, r3
 8009632:	f000 fa1b 	bl	8009a6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	69da      	ldr	r2, [r3, #28]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	69da      	ldr	r2, [r3, #28]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	69d9      	ldr	r1, [r3, #28]
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	021a      	lsls	r2, r3, #8
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	430a      	orrs	r2, r1
 8009668:	61da      	str	r2, [r3, #28]
      break;
 800966a:	e000      	b.n	800966e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800966c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a3f      	ldr	r2, [pc, #252]	; (8009790 <TIM_Base_SetConfig+0x110>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d013      	beq.n	80096c0 <TIM_Base_SetConfig+0x40>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800969e:	d00f      	beq.n	80096c0 <TIM_Base_SetConfig+0x40>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a3c      	ldr	r2, [pc, #240]	; (8009794 <TIM_Base_SetConfig+0x114>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d00b      	beq.n	80096c0 <TIM_Base_SetConfig+0x40>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a3b      	ldr	r2, [pc, #236]	; (8009798 <TIM_Base_SetConfig+0x118>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d007      	beq.n	80096c0 <TIM_Base_SetConfig+0x40>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a3a      	ldr	r2, [pc, #232]	; (800979c <TIM_Base_SetConfig+0x11c>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d003      	beq.n	80096c0 <TIM_Base_SetConfig+0x40>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a39      	ldr	r2, [pc, #228]	; (80097a0 <TIM_Base_SetConfig+0x120>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d108      	bne.n	80096d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a2e      	ldr	r2, [pc, #184]	; (8009790 <TIM_Base_SetConfig+0x110>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d02b      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096e0:	d027      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a2b      	ldr	r2, [pc, #172]	; (8009794 <TIM_Base_SetConfig+0x114>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d023      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a2a      	ldr	r2, [pc, #168]	; (8009798 <TIM_Base_SetConfig+0x118>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d01f      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a29      	ldr	r2, [pc, #164]	; (800979c <TIM_Base_SetConfig+0x11c>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d01b      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a28      	ldr	r2, [pc, #160]	; (80097a0 <TIM_Base_SetConfig+0x120>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d017      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a27      	ldr	r2, [pc, #156]	; (80097a4 <TIM_Base_SetConfig+0x124>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d013      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a26      	ldr	r2, [pc, #152]	; (80097a8 <TIM_Base_SetConfig+0x128>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d00f      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a25      	ldr	r2, [pc, #148]	; (80097ac <TIM_Base_SetConfig+0x12c>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d00b      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a24      	ldr	r2, [pc, #144]	; (80097b0 <TIM_Base_SetConfig+0x130>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d007      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a23      	ldr	r2, [pc, #140]	; (80097b4 <TIM_Base_SetConfig+0x134>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d003      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a22      	ldr	r2, [pc, #136]	; (80097b8 <TIM_Base_SetConfig+0x138>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d108      	bne.n	8009744 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	4313      	orrs	r3, r2
 8009742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a09      	ldr	r2, [pc, #36]	; (8009790 <TIM_Base_SetConfig+0x110>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d003      	beq.n	8009778 <TIM_Base_SetConfig+0xf8>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a0b      	ldr	r2, [pc, #44]	; (80097a0 <TIM_Base_SetConfig+0x120>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d103      	bne.n	8009780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	691a      	ldr	r2, [r3, #16]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	615a      	str	r2, [r3, #20]
}
 8009786:	bf00      	nop
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	bc80      	pop	{r7}
 800978e:	4770      	bx	lr
 8009790:	40010000 	.word	0x40010000
 8009794:	40000400 	.word	0x40000400
 8009798:	40000800 	.word	0x40000800
 800979c:	40000c00 	.word	0x40000c00
 80097a0:	40010400 	.word	0x40010400
 80097a4:	40014000 	.word	0x40014000
 80097a8:	40014400 	.word	0x40014400
 80097ac:	40014800 	.word	0x40014800
 80097b0:	40001800 	.word	0x40001800
 80097b4:	40001c00 	.word	0x40001c00
 80097b8:	40002000 	.word	0x40002000

080097bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	f023 0201 	bic.w	r2, r3, #1
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f023 0303 	bic.w	r3, r3, #3
 80097f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f023 0302 	bic.w	r3, r3, #2
 8009804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	4313      	orrs	r3, r2
 800980e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a20      	ldr	r2, [pc, #128]	; (8009894 <TIM_OC1_SetConfig+0xd8>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d003      	beq.n	8009820 <TIM_OC1_SetConfig+0x64>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a1f      	ldr	r2, [pc, #124]	; (8009898 <TIM_OC1_SetConfig+0xdc>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d10c      	bne.n	800983a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f023 0308 	bic.w	r3, r3, #8
 8009826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	4313      	orrs	r3, r2
 8009830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f023 0304 	bic.w	r3, r3, #4
 8009838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a15      	ldr	r2, [pc, #84]	; (8009894 <TIM_OC1_SetConfig+0xd8>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d003      	beq.n	800984a <TIM_OC1_SetConfig+0x8e>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a14      	ldr	r2, [pc, #80]	; (8009898 <TIM_OC1_SetConfig+0xdc>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d111      	bne.n	800986e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	4313      	orrs	r3, r2
 8009862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	4313      	orrs	r3, r2
 800986c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	685a      	ldr	r2, [r3, #4]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	621a      	str	r2, [r3, #32]
}
 8009888:	bf00      	nop
 800988a:	371c      	adds	r7, #28
 800988c:	46bd      	mov	sp, r7
 800988e:	bc80      	pop	{r7}
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	40010000 	.word	0x40010000
 8009898:	40010400 	.word	0x40010400

0800989c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	f023 0210 	bic.w	r2, r3, #16
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	021b      	lsls	r3, r3, #8
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	4313      	orrs	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	f023 0320 	bic.w	r3, r3, #32
 80098e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	011b      	lsls	r3, r3, #4
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a21      	ldr	r2, [pc, #132]	; (800997c <TIM_OC2_SetConfig+0xe0>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d003      	beq.n	8009904 <TIM_OC2_SetConfig+0x68>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a20      	ldr	r2, [pc, #128]	; (8009980 <TIM_OC2_SetConfig+0xe4>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d10d      	bne.n	8009920 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800990a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	011b      	lsls	r3, r3, #4
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	4313      	orrs	r3, r2
 8009916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800991e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a16      	ldr	r2, [pc, #88]	; (800997c <TIM_OC2_SetConfig+0xe0>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d003      	beq.n	8009930 <TIM_OC2_SetConfig+0x94>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a15      	ldr	r2, [pc, #84]	; (8009980 <TIM_OC2_SetConfig+0xe4>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d113      	bne.n	8009958 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800993e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	695b      	ldr	r3, [r3, #20]
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	4313      	orrs	r3, r2
 800994a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	4313      	orrs	r3, r2
 8009956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	621a      	str	r2, [r3, #32]
}
 8009972:	bf00      	nop
 8009974:	371c      	adds	r7, #28
 8009976:	46bd      	mov	sp, r7
 8009978:	bc80      	pop	{r7}
 800997a:	4770      	bx	lr
 800997c:	40010000 	.word	0x40010000
 8009980:	40010400 	.word	0x40010400

08009984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009984:	b480      	push	{r7}
 8009986:	b087      	sub	sp, #28
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f023 0303 	bic.w	r3, r3, #3
 80099ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	021b      	lsls	r3, r3, #8
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a21      	ldr	r2, [pc, #132]	; (8009a64 <TIM_OC3_SetConfig+0xe0>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d003      	beq.n	80099ea <TIM_OC3_SetConfig+0x66>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a20      	ldr	r2, [pc, #128]	; (8009a68 <TIM_OC3_SetConfig+0xe4>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d10d      	bne.n	8009a06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	021b      	lsls	r3, r3, #8
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a16      	ldr	r2, [pc, #88]	; (8009a64 <TIM_OC3_SetConfig+0xe0>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d003      	beq.n	8009a16 <TIM_OC3_SetConfig+0x92>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a15      	ldr	r2, [pc, #84]	; (8009a68 <TIM_OC3_SetConfig+0xe4>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d113      	bne.n	8009a3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	011b      	lsls	r3, r3, #4
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	011b      	lsls	r3, r3, #4
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	621a      	str	r2, [r3, #32]
}
 8009a58:	bf00      	nop
 8009a5a:	371c      	adds	r7, #28
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bc80      	pop	{r7}
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	40010000 	.word	0x40010000
 8009a68:	40010400 	.word	0x40010400

08009a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b087      	sub	sp, #28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	021b      	lsls	r3, r3, #8
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	031b      	lsls	r3, r3, #12
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a11      	ldr	r2, [pc, #68]	; (8009b0c <TIM_OC4_SetConfig+0xa0>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d003      	beq.n	8009ad4 <TIM_OC4_SetConfig+0x68>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a10      	ldr	r2, [pc, #64]	; (8009b10 <TIM_OC4_SetConfig+0xa4>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d109      	bne.n	8009ae8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	019b      	lsls	r3, r3, #6
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	685a      	ldr	r2, [r3, #4]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	621a      	str	r2, [r3, #32]
}
 8009b02:	bf00      	nop
 8009b04:	371c      	adds	r7, #28
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bc80      	pop	{r7}
 8009b0a:	4770      	bx	lr
 8009b0c:	40010000 	.word	0x40010000
 8009b10:	40010400 	.word	0x40010400

08009b14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b087      	sub	sp, #28
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	f003 031f 	and.w	r3, r3, #31
 8009b26:	2201      	movs	r2, #1
 8009b28:	fa02 f303 	lsl.w	r3, r2, r3
 8009b2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6a1a      	ldr	r2, [r3, #32]
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	43db      	mvns	r3, r3
 8009b36:	401a      	ands	r2, r3
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6a1a      	ldr	r2, [r3, #32]
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	f003 031f 	and.w	r3, r3, #31
 8009b46:	6879      	ldr	r1, [r7, #4]
 8009b48:	fa01 f303 	lsl.w	r3, r1, r3
 8009b4c:	431a      	orrs	r2, r3
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	621a      	str	r2, [r3, #32]
}
 8009b52:	bf00      	nop
 8009b54:	371c      	adds	r7, #28
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bc80      	pop	{r7}
 8009b5a:	4770      	bx	lr

08009b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d101      	bne.n	8009b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b70:	2302      	movs	r3, #2
 8009b72:	e05a      	b.n	8009c2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2202      	movs	r2, #2
 8009b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a20      	ldr	r2, [pc, #128]	; (8009c34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d022      	beq.n	8009bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bc0:	d01d      	beq.n	8009bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a1c      	ldr	r2, [pc, #112]	; (8009c38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d018      	beq.n	8009bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a1a      	ldr	r2, [pc, #104]	; (8009c3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d013      	beq.n	8009bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a19      	ldr	r2, [pc, #100]	; (8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d00e      	beq.n	8009bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a17      	ldr	r2, [pc, #92]	; (8009c44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d009      	beq.n	8009bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a16      	ldr	r2, [pc, #88]	; (8009c48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d004      	beq.n	8009bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a14      	ldr	r2, [pc, #80]	; (8009c4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d10c      	bne.n	8009c18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bc80      	pop	{r7}
 8009c32:	4770      	bx	lr
 8009c34:	40010000 	.word	0x40010000
 8009c38:	40000400 	.word	0x40000400
 8009c3c:	40000800 	.word	0x40000800
 8009c40:	40000c00 	.word	0x40000c00
 8009c44:	40010400 	.word	0x40010400
 8009c48:	40014000 	.word	0x40014000
 8009c4c:	40001800 	.word	0x40001800

08009c50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c50:	b084      	sub	sp, #16
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b084      	sub	sp, #16
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	f107 001c 	add.w	r0, r7, #28
 8009c5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d122      	bne.n	8009cae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d105      	bne.n	8009ca2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f001 fafa 	bl	800b29c <USB_CoreReset>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73fb      	strb	r3, [r7, #15]
 8009cac:	e010      	b.n	8009cd0 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f001 faee 	bl	800b29c <USB_CoreReset>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d10b      	bne.n	8009cee <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	f043 0206 	orr.w	r2, r3, #6
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	f043 0220 	orr.w	r2, r3, #32
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009cfa:	b004      	add	sp, #16
 8009cfc:	4770      	bx	lr
	...

08009d00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b087      	sub	sp, #28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009d0e:	79fb      	ldrb	r3, [r7, #7]
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d165      	bne.n	8009de0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	4a41      	ldr	r2, [pc, #260]	; (8009e1c <USB_SetTurnaroundTime+0x11c>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d906      	bls.n	8009d2a <USB_SetTurnaroundTime+0x2a>
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	4a40      	ldr	r2, [pc, #256]	; (8009e20 <USB_SetTurnaroundTime+0x120>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d202      	bcs.n	8009d2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009d24:	230f      	movs	r3, #15
 8009d26:	617b      	str	r3, [r7, #20]
 8009d28:	e062      	b.n	8009df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	4a3c      	ldr	r2, [pc, #240]	; (8009e20 <USB_SetTurnaroundTime+0x120>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d306      	bcc.n	8009d40 <USB_SetTurnaroundTime+0x40>
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	4a3b      	ldr	r2, [pc, #236]	; (8009e24 <USB_SetTurnaroundTime+0x124>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d202      	bcs.n	8009d40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009d3a:	230e      	movs	r3, #14
 8009d3c:	617b      	str	r3, [r7, #20]
 8009d3e:	e057      	b.n	8009df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	4a38      	ldr	r2, [pc, #224]	; (8009e24 <USB_SetTurnaroundTime+0x124>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d306      	bcc.n	8009d56 <USB_SetTurnaroundTime+0x56>
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	4a37      	ldr	r2, [pc, #220]	; (8009e28 <USB_SetTurnaroundTime+0x128>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d202      	bcs.n	8009d56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009d50:	230d      	movs	r3, #13
 8009d52:	617b      	str	r3, [r7, #20]
 8009d54:	e04c      	b.n	8009df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	4a33      	ldr	r2, [pc, #204]	; (8009e28 <USB_SetTurnaroundTime+0x128>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d306      	bcc.n	8009d6c <USB_SetTurnaroundTime+0x6c>
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	4a32      	ldr	r2, [pc, #200]	; (8009e2c <USB_SetTurnaroundTime+0x12c>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d802      	bhi.n	8009d6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009d66:	230c      	movs	r3, #12
 8009d68:	617b      	str	r3, [r7, #20]
 8009d6a:	e041      	b.n	8009df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	4a2f      	ldr	r2, [pc, #188]	; (8009e2c <USB_SetTurnaroundTime+0x12c>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d906      	bls.n	8009d82 <USB_SetTurnaroundTime+0x82>
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	4a2e      	ldr	r2, [pc, #184]	; (8009e30 <USB_SetTurnaroundTime+0x130>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d802      	bhi.n	8009d82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009d7c:	230b      	movs	r3, #11
 8009d7e:	617b      	str	r3, [r7, #20]
 8009d80:	e036      	b.n	8009df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	4a2a      	ldr	r2, [pc, #168]	; (8009e30 <USB_SetTurnaroundTime+0x130>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d906      	bls.n	8009d98 <USB_SetTurnaroundTime+0x98>
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	4a29      	ldr	r2, [pc, #164]	; (8009e34 <USB_SetTurnaroundTime+0x134>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d802      	bhi.n	8009d98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009d92:	230a      	movs	r3, #10
 8009d94:	617b      	str	r3, [r7, #20]
 8009d96:	e02b      	b.n	8009df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	4a26      	ldr	r2, [pc, #152]	; (8009e34 <USB_SetTurnaroundTime+0x134>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d906      	bls.n	8009dae <USB_SetTurnaroundTime+0xae>
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	4a25      	ldr	r2, [pc, #148]	; (8009e38 <USB_SetTurnaroundTime+0x138>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d202      	bcs.n	8009dae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009da8:	2309      	movs	r3, #9
 8009daa:	617b      	str	r3, [r7, #20]
 8009dac:	e020      	b.n	8009df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	4a21      	ldr	r2, [pc, #132]	; (8009e38 <USB_SetTurnaroundTime+0x138>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d306      	bcc.n	8009dc4 <USB_SetTurnaroundTime+0xc4>
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	4a20      	ldr	r2, [pc, #128]	; (8009e3c <USB_SetTurnaroundTime+0x13c>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d802      	bhi.n	8009dc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009dbe:	2308      	movs	r3, #8
 8009dc0:	617b      	str	r3, [r7, #20]
 8009dc2:	e015      	b.n	8009df0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	4a1d      	ldr	r2, [pc, #116]	; (8009e3c <USB_SetTurnaroundTime+0x13c>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d906      	bls.n	8009dda <USB_SetTurnaroundTime+0xda>
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	4a1c      	ldr	r2, [pc, #112]	; (8009e40 <USB_SetTurnaroundTime+0x140>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d202      	bcs.n	8009dda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009dd4:	2307      	movs	r3, #7
 8009dd6:	617b      	str	r3, [r7, #20]
 8009dd8:	e00a      	b.n	8009df0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009dda:	2306      	movs	r3, #6
 8009ddc:	617b      	str	r3, [r7, #20]
 8009dde:	e007      	b.n	8009df0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009de0:	79fb      	ldrb	r3, [r7, #7]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d102      	bne.n	8009dec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009de6:	2309      	movs	r3, #9
 8009de8:	617b      	str	r3, [r7, #20]
 8009dea:	e001      	b.n	8009df0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009dec:	2309      	movs	r3, #9
 8009dee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	68da      	ldr	r2, [r3, #12]
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	029b      	lsls	r3, r3, #10
 8009e04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009e08:	431a      	orrs	r2, r3
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	371c      	adds	r7, #28
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bc80      	pop	{r7}
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	00d8acbf 	.word	0x00d8acbf
 8009e20:	00e4e1c0 	.word	0x00e4e1c0
 8009e24:	00f42400 	.word	0x00f42400
 8009e28:	01067380 	.word	0x01067380
 8009e2c:	011a499f 	.word	0x011a499f
 8009e30:	01312cff 	.word	0x01312cff
 8009e34:	014ca43f 	.word	0x014ca43f
 8009e38:	016e3600 	.word	0x016e3600
 8009e3c:	01a6ab1f 	.word	0x01a6ab1f
 8009e40:	01e84800 	.word	0x01e84800

08009e44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f043 0201 	orr.w	r2, r3, #1
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bc80      	pop	{r7}
 8009e62:	4770      	bx	lr

08009e64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	f023 0201 	bic.w	r2, r3, #1
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	370c      	adds	r7, #12
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bc80      	pop	{r7}
 8009e82:	4770      	bx	lr

08009e84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009e90:	2300      	movs	r3, #0
 8009e92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009ea0:	78fb      	ldrb	r3, [r7, #3]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d115      	bne.n	8009ed2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009eb2:	2001      	movs	r0, #1
 8009eb4:	f7fb fcec 	bl	8005890 <HAL_Delay>
      ms++;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f001 f961 	bl	800b186 <USB_GetMode>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d01e      	beq.n	8009f08 <USB_SetCurrentMode+0x84>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2b31      	cmp	r3, #49	; 0x31
 8009ece:	d9f0      	bls.n	8009eb2 <USB_SetCurrentMode+0x2e>
 8009ed0:	e01a      	b.n	8009f08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009ed2:	78fb      	ldrb	r3, [r7, #3]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d115      	bne.n	8009f04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ee4:	2001      	movs	r0, #1
 8009ee6:	f7fb fcd3 	bl	8005890 <HAL_Delay>
      ms++;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3301      	adds	r3, #1
 8009eee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f001 f948 	bl	800b186 <USB_GetMode>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d005      	beq.n	8009f08 <USB_SetCurrentMode+0x84>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2b31      	cmp	r3, #49	; 0x31
 8009f00:	d9f0      	bls.n	8009ee4 <USB_SetCurrentMode+0x60>
 8009f02:	e001      	b.n	8009f08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e005      	b.n	8009f14 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b32      	cmp	r3, #50	; 0x32
 8009f0c:	d101      	bne.n	8009f12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e000      	b.n	8009f14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f1c:	b084      	sub	sp, #16
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b086      	sub	sp, #24
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009f36:	2300      	movs	r3, #0
 8009f38:	613b      	str	r3, [r7, #16]
 8009f3a:	e009      	b.n	8009f50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	3340      	adds	r3, #64	; 0x40
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4413      	add	r3, r2
 8009f46:	2200      	movs	r2, #0
 8009f48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	613b      	str	r3, [r7, #16]
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	2b0e      	cmp	r3, #14
 8009f54:	d9f2      	bls.n	8009f3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d11c      	bne.n	8009f96 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f6a:	f043 0302 	orr.w	r3, r3, #2
 8009f6e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f80:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	639a      	str	r2, [r3, #56]	; 0x38
 8009f94:	e00b      	b.n	8009fae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc8:	461a      	mov	r2, r3
 8009fca:	680b      	ldr	r3, [r1, #0]
 8009fcc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d10c      	bne.n	8009fee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d104      	bne.n	8009fe4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009fda:	2100      	movs	r1, #0
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f945 	bl	800a26c <USB_SetDevSpeed>
 8009fe2:	e008      	b.n	8009ff6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f940 	bl	800a26c <USB_SetDevSpeed>
 8009fec:	e003      	b.n	8009ff6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009fee:	2103      	movs	r1, #3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f93b 	bl	800a26c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009ff6:	2110      	movs	r1, #16
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f8f3 	bl	800a1e4 <USB_FlushTxFifo>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d001      	beq.n	800a008 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f90f 	bl	800a22c <USB_FlushRxFifo>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a01e:	461a      	mov	r2, r3
 800a020:	2300      	movs	r3, #0
 800a022:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a02a:	461a      	mov	r2, r3
 800a02c:	2300      	movs	r3, #0
 800a02e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a036:	461a      	mov	r2, r3
 800a038:	2300      	movs	r3, #0
 800a03a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a03c:	2300      	movs	r3, #0
 800a03e:	613b      	str	r3, [r7, #16]
 800a040:	e043      	b.n	800a0ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	015a      	lsls	r2, r3, #5
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	4413      	add	r3, r2
 800a04a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a058:	d118      	bne.n	800a08c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10a      	bne.n	800a076 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	015a      	lsls	r2, r3, #5
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4413      	add	r3, r2
 800a068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a06c:	461a      	mov	r2, r3
 800a06e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a072:	6013      	str	r3, [r2, #0]
 800a074:	e013      	b.n	800a09e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	015a      	lsls	r2, r3, #5
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	4413      	add	r3, r2
 800a07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a082:	461a      	mov	r2, r3
 800a084:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	e008      	b.n	800a09e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	015a      	lsls	r2, r3, #5
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	4413      	add	r3, r2
 800a094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a098:	461a      	mov	r2, r3
 800a09a:	2300      	movs	r3, #0
 800a09c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	015a      	lsls	r2, r3, #5
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	015a      	lsls	r2, r3, #5
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0bc:	461a      	mov	r2, r3
 800a0be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a0c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	613b      	str	r3, [r7, #16]
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d3b7      	bcc.n	800a042 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	613b      	str	r3, [r7, #16]
 800a0d6:	e043      	b.n	800a160 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	015a      	lsls	r2, r3, #5
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	4413      	add	r3, r2
 800a0e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0ee:	d118      	bne.n	800a122 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10a      	bne.n	800a10c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	015a      	lsls	r2, r3, #5
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a102:	461a      	mov	r2, r3
 800a104:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a108:	6013      	str	r3, [r2, #0]
 800a10a:	e013      	b.n	800a134 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4413      	add	r3, r2
 800a114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a118:	461a      	mov	r2, r3
 800a11a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	e008      	b.n	800a134 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	015a      	lsls	r2, r3, #5
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	4413      	add	r3, r2
 800a12a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a12e:	461a      	mov	r2, r3
 800a130:	2300      	movs	r3, #0
 800a132:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	015a      	lsls	r2, r3, #5
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a140:	461a      	mov	r2, r3
 800a142:	2300      	movs	r3, #0
 800a144:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	015a      	lsls	r2, r3, #5
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	4413      	add	r3, r2
 800a14e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a152:	461a      	mov	r2, r3
 800a154:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a158:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	3301      	adds	r3, #1
 800a15e:	613b      	str	r3, [r7, #16]
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	693a      	ldr	r2, [r7, #16]
 800a164:	429a      	cmp	r2, r3
 800a166:	d3b7      	bcc.n	800a0d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a17a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a188:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d105      	bne.n	800a19c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	f043 0210 	orr.w	r2, r3, #16
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	699a      	ldr	r2, [r3, #24]
 800a1a0:	4b0f      	ldr	r3, [pc, #60]	; (800a1e0 <USB_DevInit+0x2c4>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d005      	beq.n	800a1ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	f043 0208 	orr.w	r2, r3, #8
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a1ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d107      	bne.n	800a1d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1c8:	f043 0304 	orr.w	r3, r3, #4
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a1d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3718      	adds	r7, #24
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1dc:	b004      	add	sp, #16
 800a1de:	4770      	bx	lr
 800a1e0:	803c3800 	.word	0x803c3800

0800a1e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	019b      	lsls	r3, r3, #6
 800a1f6:	f043 0220 	orr.w	r2, r3, #32
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3301      	adds	r3, #1
 800a202:	60fb      	str	r3, [r7, #12]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	4a08      	ldr	r2, [pc, #32]	; (800a228 <USB_FlushTxFifo+0x44>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d901      	bls.n	800a210 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e006      	b.n	800a21e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	f003 0320 	and.w	r3, r3, #32
 800a218:	2b20      	cmp	r3, #32
 800a21a:	d0f0      	beq.n	800a1fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3714      	adds	r7, #20
 800a222:	46bd      	mov	sp, r7
 800a224:	bc80      	pop	{r7}
 800a226:	4770      	bx	lr
 800a228:	00030d40 	.word	0x00030d40

0800a22c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2210      	movs	r2, #16
 800a23c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3301      	adds	r3, #1
 800a242:	60fb      	str	r3, [r7, #12]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	4a08      	ldr	r2, [pc, #32]	; (800a268 <USB_FlushRxFifo+0x3c>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d901      	bls.n	800a250 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e006      	b.n	800a25e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	f003 0310 	and.w	r3, r3, #16
 800a258:	2b10      	cmp	r3, #16
 800a25a:	d0f0      	beq.n	800a23e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	bc80      	pop	{r7}
 800a266:	4770      	bx	lr
 800a268:	00030d40 	.word	0x00030d40

0800a26c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	78fb      	ldrb	r3, [r7, #3]
 800a286:	68f9      	ldr	r1, [r7, #12]
 800a288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a28c:	4313      	orrs	r3, r2
 800a28e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3714      	adds	r7, #20
 800a296:	46bd      	mov	sp, r7
 800a298:	bc80      	pop	{r7}
 800a29a:	4770      	bx	lr

0800a29c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b087      	sub	sp, #28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	f003 0306 	and.w	r3, r3, #6
 800a2b4:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d102      	bne.n	800a2c2 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	75fb      	strb	r3, [r7, #23]
 800a2c0:	e00a      	b.n	800a2d8 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d002      	beq.n	800a2ce <USB_GetDevSpeed+0x32>
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2b06      	cmp	r3, #6
 800a2cc:	d102      	bne.n	800a2d4 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	75fb      	strb	r3, [r7, #23]
 800a2d2:	e001      	b.n	800a2d8 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a2d4:	230f      	movs	r3, #15
 800a2d6:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a2d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	371c      	adds	r7, #28
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bc80      	pop	{r7}
 800a2e2:	4770      	bx	lr

0800a2e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	785b      	ldrb	r3, [r3, #1]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d13a      	bne.n	800a376 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a306:	69da      	ldr	r2, [r3, #28]
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	f003 030f 	and.w	r3, r3, #15
 800a310:	2101      	movs	r1, #1
 800a312:	fa01 f303 	lsl.w	r3, r1, r3
 800a316:	b29b      	uxth	r3, r3
 800a318:	68f9      	ldr	r1, [r7, #12]
 800a31a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a31e:	4313      	orrs	r3, r2
 800a320:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	015a      	lsls	r2, r3, #5
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	4413      	add	r3, r2
 800a32a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d155      	bne.n	800a3e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	015a      	lsls	r2, r3, #5
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4413      	add	r3, r2
 800a340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	78db      	ldrb	r3, [r3, #3]
 800a352:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a354:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	059b      	lsls	r3, r3, #22
 800a35a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a35c:	4313      	orrs	r3, r2
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	0151      	lsls	r1, r2, #5
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	440a      	add	r2, r1
 800a366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a36a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a36e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a372:	6013      	str	r3, [r2, #0]
 800a374:	e036      	b.n	800a3e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a37c:	69da      	ldr	r2, [r3, #28]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	f003 030f 	and.w	r3, r3, #15
 800a386:	2101      	movs	r1, #1
 800a388:	fa01 f303 	lsl.w	r3, r1, r3
 800a38c:	041b      	lsls	r3, r3, #16
 800a38e:	68f9      	ldr	r1, [r7, #12]
 800a390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a394:	4313      	orrs	r3, r2
 800a396:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	015a      	lsls	r2, r3, #5
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	4413      	add	r3, r2
 800a3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d11a      	bne.n	800a3e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	015a      	lsls	r2, r3, #5
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	78db      	ldrb	r3, [r3, #3]
 800a3c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a3ca:	430b      	orrs	r3, r1
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	0151      	lsls	r1, r2, #5
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	440a      	add	r2, r1
 800a3d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bc80      	pop	{r7}
 800a3ee:	4770      	bx	lr

0800a3f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	785b      	ldrb	r3, [r3, #1]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d161      	bne.n	800a4d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	4413      	add	r3, r2
 800a414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a41e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a422:	d11f      	bne.n	800a464 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	0151      	lsls	r1, r2, #5
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	440a      	add	r2, r1
 800a43a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a43e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a442:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68ba      	ldr	r2, [r7, #8]
 800a454:	0151      	lsls	r1, r2, #5
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	440a      	add	r2, r1
 800a45a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a45e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a462:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a46a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	f003 030f 	and.w	r3, r3, #15
 800a474:	2101      	movs	r1, #1
 800a476:	fa01 f303 	lsl.w	r3, r1, r3
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	43db      	mvns	r3, r3
 800a47e:	68f9      	ldr	r1, [r7, #12]
 800a480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a484:	4013      	ands	r3, r2
 800a486:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a48e:	69da      	ldr	r2, [r3, #28]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	f003 030f 	and.w	r3, r3, #15
 800a498:	2101      	movs	r1, #1
 800a49a:	fa01 f303 	lsl.w	r3, r1, r3
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	43db      	mvns	r3, r3
 800a4a2:	68f9      	ldr	r1, [r7, #12]
 800a4a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	0159      	lsls	r1, r3, #5
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	440b      	add	r3, r1
 800a4c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	4b35      	ldr	r3, [pc, #212]	; (800a5a0 <USB_DeactivateEndpoint+0x1b0>)
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	600b      	str	r3, [r1, #0]
 800a4ce:	e060      	b.n	800a592 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	015a      	lsls	r2, r3, #5
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4e6:	d11f      	bne.n	800a528 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	015a      	lsls	r2, r3, #5
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	0151      	lsls	r1, r2, #5
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	440a      	add	r2, r1
 800a4fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a502:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a506:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	015a      	lsls	r2, r3, #5
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	0151      	lsls	r1, r2, #5
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	440a      	add	r2, r1
 800a51e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a522:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a526:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a52e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	f003 030f 	and.w	r3, r3, #15
 800a538:	2101      	movs	r1, #1
 800a53a:	fa01 f303 	lsl.w	r3, r1, r3
 800a53e:	041b      	lsls	r3, r3, #16
 800a540:	43db      	mvns	r3, r3
 800a542:	68f9      	ldr	r1, [r7, #12]
 800a544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a548:	4013      	ands	r3, r2
 800a54a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a552:	69da      	ldr	r2, [r3, #28]
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	f003 030f 	and.w	r3, r3, #15
 800a55c:	2101      	movs	r1, #1
 800a55e:	fa01 f303 	lsl.w	r3, r1, r3
 800a562:	041b      	lsls	r3, r3, #16
 800a564:	43db      	mvns	r3, r3
 800a566:	68f9      	ldr	r1, [r7, #12]
 800a568:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a56c:	4013      	ands	r3, r2
 800a56e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	015a      	lsls	r2, r3, #5
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4413      	add	r3, r2
 800a578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	0159      	lsls	r1, r3, #5
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	440b      	add	r3, r1
 800a586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a58a:	4619      	mov	r1, r3
 800a58c:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <USB_DeactivateEndpoint+0x1b4>)
 800a58e:	4013      	ands	r3, r2
 800a590:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	bc80      	pop	{r7}
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	ec337800 	.word	0xec337800
 800a5a4:	eff37800 	.word	0xeff37800

0800a5a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08a      	sub	sp, #40	; 0x28
 800a5ac:	af02      	add	r7, sp, #8
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	785b      	ldrb	r3, [r3, #1]
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	f040 815c 	bne.w	800a882 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	695b      	ldr	r3, [r3, #20]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d132      	bne.n	800a638 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	015a      	lsls	r2, r3, #5
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	69ba      	ldr	r2, [r7, #24]
 800a5e2:	0151      	lsls	r1, r2, #5
 800a5e4:	69fa      	ldr	r2, [r7, #28]
 800a5e6:	440a      	add	r2, r1
 800a5e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	015a      	lsls	r2, r3, #5
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	69ba      	ldr	r2, [r7, #24]
 800a606:	0151      	lsls	r1, r2, #5
 800a608:	69fa      	ldr	r2, [r7, #28]
 800a60a:	440a      	add	r2, r1
 800a60c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a610:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a614:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	015a      	lsls	r2, r3, #5
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	4413      	add	r3, r2
 800a61e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	69ba      	ldr	r2, [r7, #24]
 800a626:	0151      	lsls	r1, r2, #5
 800a628:	69fa      	ldr	r2, [r7, #28]
 800a62a:	440a      	add	r2, r1
 800a62c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a630:	0cdb      	lsrs	r3, r3, #19
 800a632:	04db      	lsls	r3, r3, #19
 800a634:	6113      	str	r3, [r2, #16]
 800a636:	e074      	b.n	800a722 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	015a      	lsls	r2, r3, #5
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	4413      	add	r3, r2
 800a640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	69ba      	ldr	r2, [r7, #24]
 800a648:	0151      	lsls	r1, r2, #5
 800a64a:	69fa      	ldr	r2, [r7, #28]
 800a64c:	440a      	add	r2, r1
 800a64e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a652:	0cdb      	lsrs	r3, r3, #19
 800a654:	04db      	lsls	r3, r3, #19
 800a656:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	015a      	lsls	r2, r3, #5
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	4413      	add	r3, r2
 800a660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	69ba      	ldr	r2, [r7, #24]
 800a668:	0151      	lsls	r1, r2, #5
 800a66a:	69fa      	ldr	r2, [r7, #28]
 800a66c:	440a      	add	r2, r1
 800a66e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a672:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a676:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a67a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	015a      	lsls	r2, r3, #5
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	4413      	add	r3, r2
 800a684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a688:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	6959      	ldr	r1, [r3, #20]
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	440b      	add	r3, r1
 800a694:	1e59      	subs	r1, r3, #1
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a69e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a6a0:	4b9d      	ldr	r3, [pc, #628]	; (800a918 <USB_EPStartXfer+0x370>)
 800a6a2:	400b      	ands	r3, r1
 800a6a4:	69b9      	ldr	r1, [r7, #24]
 800a6a6:	0148      	lsls	r0, r1, #5
 800a6a8:	69f9      	ldr	r1, [r7, #28]
 800a6aa:	4401      	add	r1, r0
 800a6ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	015a      	lsls	r2, r3, #5
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c0:	691a      	ldr	r2, [r3, #16]
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	695b      	ldr	r3, [r3, #20]
 800a6c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6ca:	69b9      	ldr	r1, [r7, #24]
 800a6cc:	0148      	lsls	r0, r1, #5
 800a6ce:	69f9      	ldr	r1, [r7, #28]
 800a6d0:	4401      	add	r1, r0
 800a6d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	78db      	ldrb	r3, [r3, #3]
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d11f      	bne.n	800a722 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	015a      	lsls	r2, r3, #5
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	69ba      	ldr	r2, [r7, #24]
 800a6f2:	0151      	lsls	r1, r2, #5
 800a6f4:	69fa      	ldr	r2, [r7, #28]
 800a6f6:	440a      	add	r2, r1
 800a6f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a700:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	015a      	lsls	r2, r3, #5
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	4413      	add	r3, r2
 800a70a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	69ba      	ldr	r2, [r7, #24]
 800a712:	0151      	lsls	r1, r2, #5
 800a714:	69fa      	ldr	r2, [r7, #28]
 800a716:	440a      	add	r2, r1
 800a718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a71c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a720:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a722:	79fb      	ldrb	r3, [r7, #7]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d14b      	bne.n	800a7c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d009      	beq.n	800a744 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	015a      	lsls	r2, r3, #5
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	4413      	add	r3, r2
 800a738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73c:	461a      	mov	r2, r3
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	78db      	ldrb	r3, [r3, #3]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d128      	bne.n	800a79e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d110      	bne.n	800a77e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	015a      	lsls	r2, r3, #5
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	4413      	add	r3, r2
 800a764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	69ba      	ldr	r2, [r7, #24]
 800a76c:	0151      	lsls	r1, r2, #5
 800a76e:	69fa      	ldr	r2, [r7, #28]
 800a770:	440a      	add	r2, r1
 800a772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a776:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a77a:	6013      	str	r3, [r2, #0]
 800a77c:	e00f      	b.n	800a79e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	015a      	lsls	r2, r3, #5
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	4413      	add	r3, r2
 800a786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	69ba      	ldr	r2, [r7, #24]
 800a78e:	0151      	lsls	r1, r2, #5
 800a790:	69fa      	ldr	r2, [r7, #28]
 800a792:	440a      	add	r2, r1
 800a794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a79c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	015a      	lsls	r2, r3, #5
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	69ba      	ldr	r2, [r7, #24]
 800a7ae:	0151      	lsls	r1, r2, #5
 800a7b0:	69fa      	ldr	r2, [r7, #28]
 800a7b2:	440a      	add	r2, r1
 800a7b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	e12f      	b.n	800aa20 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	015a      	lsls	r2, r3, #5
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	69ba      	ldr	r2, [r7, #24]
 800a7d0:	0151      	lsls	r1, r2, #5
 800a7d2:	69fa      	ldr	r2, [r7, #28]
 800a7d4:	440a      	add	r2, r1
 800a7d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a7de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	78db      	ldrb	r3, [r3, #3]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d015      	beq.n	800a814 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	695b      	ldr	r3, [r3, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f000 8117 	beq.w	800aa20 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	f003 030f 	and.w	r3, r3, #15
 800a802:	2101      	movs	r1, #1
 800a804:	fa01 f303 	lsl.w	r3, r1, r3
 800a808:	69f9      	ldr	r1, [r7, #28]
 800a80a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a80e:	4313      	orrs	r3, r2
 800a810:	634b      	str	r3, [r1, #52]	; 0x34
 800a812:	e105      	b.n	800aa20 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a820:	2b00      	cmp	r3, #0
 800a822:	d110      	bne.n	800a846 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	015a      	lsls	r2, r3, #5
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	4413      	add	r3, r2
 800a82c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	69ba      	ldr	r2, [r7, #24]
 800a834:	0151      	lsls	r1, r2, #5
 800a836:	69fa      	ldr	r2, [r7, #28]
 800a838:	440a      	add	r2, r1
 800a83a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a83e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a842:	6013      	str	r3, [r2, #0]
 800a844:	e00f      	b.n	800a866 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	015a      	lsls	r2, r3, #5
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	4413      	add	r3, r2
 800a84e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	69ba      	ldr	r2, [r7, #24]
 800a856:	0151      	lsls	r1, r2, #5
 800a858:	69fa      	ldr	r2, [r7, #28]
 800a85a:	440a      	add	r2, r1
 800a85c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a864:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	68d9      	ldr	r1, [r3, #12]
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	781a      	ldrb	r2, [r3, #0]
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	695b      	ldr	r3, [r3, #20]
 800a872:	b298      	uxth	r0, r3
 800a874:	79fb      	ldrb	r3, [r7, #7]
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	4603      	mov	r3, r0
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f000 fa2a 	bl	800acd4 <USB_WritePacket>
 800a880:	e0ce      	b.n	800aa20 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	015a      	lsls	r2, r3, #5
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	4413      	add	r3, r2
 800a88a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	69ba      	ldr	r2, [r7, #24]
 800a892:	0151      	lsls	r1, r2, #5
 800a894:	69fa      	ldr	r2, [r7, #28]
 800a896:	440a      	add	r2, r1
 800a898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a89c:	0cdb      	lsrs	r3, r3, #19
 800a89e:	04db      	lsls	r3, r3, #19
 800a8a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	015a      	lsls	r2, r3, #5
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	69ba      	ldr	r2, [r7, #24]
 800a8b2:	0151      	lsls	r1, r2, #5
 800a8b4:	69fa      	ldr	r2, [r7, #28]
 800a8b6:	440a      	add	r2, r1
 800a8b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a8c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a8c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	695b      	ldr	r3, [r3, #20]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d126      	bne.n	800a91c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	015a      	lsls	r2, r3, #5
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8da:	691a      	ldr	r2, [r3, #16]
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8e4:	69b9      	ldr	r1, [r7, #24]
 800a8e6:	0148      	lsls	r0, r1, #5
 800a8e8:	69f9      	ldr	r1, [r7, #28]
 800a8ea:	4401      	add	r1, r0
 800a8ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	015a      	lsls	r2, r3, #5
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	69ba      	ldr	r2, [r7, #24]
 800a904:	0151      	lsls	r1, r2, #5
 800a906:	69fa      	ldr	r2, [r7, #28]
 800a908:	440a      	add	r2, r1
 800a90a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a90e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a912:	6113      	str	r3, [r2, #16]
 800a914:	e036      	b.n	800a984 <USB_EPStartXfer+0x3dc>
 800a916:	bf00      	nop
 800a918:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	695a      	ldr	r2, [r3, #20]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	4413      	add	r3, r2
 800a926:	1e5a      	subs	r2, r3, #1
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a930:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	015a      	lsls	r2, r3, #5
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	4413      	add	r3, r2
 800a93a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a93e:	691a      	ldr	r2, [r3, #16]
 800a940:	8afb      	ldrh	r3, [r7, #22]
 800a942:	04d9      	lsls	r1, r3, #19
 800a944:	4b39      	ldr	r3, [pc, #228]	; (800aa2c <USB_EPStartXfer+0x484>)
 800a946:	400b      	ands	r3, r1
 800a948:	69b9      	ldr	r1, [r7, #24]
 800a94a:	0148      	lsls	r0, r1, #5
 800a94c:	69f9      	ldr	r1, [r7, #28]
 800a94e:	4401      	add	r1, r0
 800a950:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a954:	4313      	orrs	r3, r2
 800a956:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	015a      	lsls	r2, r3, #5
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	4413      	add	r3, r2
 800a960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a964:	691a      	ldr	r2, [r3, #16]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	8af9      	ldrh	r1, [r7, #22]
 800a96c:	fb01 f303 	mul.w	r3, r1, r3
 800a970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a974:	69b9      	ldr	r1, [r7, #24]
 800a976:	0148      	lsls	r0, r1, #5
 800a978:	69f9      	ldr	r1, [r7, #28]
 800a97a:	4401      	add	r1, r0
 800a97c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a980:	4313      	orrs	r3, r2
 800a982:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a984:	79fb      	ldrb	r3, [r7, #7]
 800a986:	2b01      	cmp	r3, #1
 800a988:	d10d      	bne.n	800a9a6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d009      	beq.n	800a9a6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	68d9      	ldr	r1, [r3, #12]
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	015a      	lsls	r2, r3, #5
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	4413      	add	r3, r2
 800a99e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a2:	460a      	mov	r2, r1
 800a9a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	78db      	ldrb	r3, [r3, #3]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d128      	bne.n	800aa00 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d110      	bne.n	800a9e0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	69ba      	ldr	r2, [r7, #24]
 800a9ce:	0151      	lsls	r1, r2, #5
 800a9d0:	69fa      	ldr	r2, [r7, #28]
 800a9d2:	440a      	add	r2, r1
 800a9d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a9dc:	6013      	str	r3, [r2, #0]
 800a9de:	e00f      	b.n	800aa00 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	015a      	lsls	r2, r3, #5
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	69ba      	ldr	r2, [r7, #24]
 800a9f0:	0151      	lsls	r1, r2, #5
 800a9f2:	69fa      	ldr	r2, [r7, #28]
 800a9f4:	440a      	add	r2, r1
 800a9f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	015a      	lsls	r2, r3, #5
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	4413      	add	r3, r2
 800aa08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	69ba      	ldr	r2, [r7, #24]
 800aa10:	0151      	lsls	r1, r2, #5
 800aa12:	69fa      	ldr	r2, [r7, #28]
 800aa14:	440a      	add	r2, r1
 800aa16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3720      	adds	r7, #32
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	1ff80000 	.word	0x1ff80000

0800aa30 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b087      	sub	sp, #28
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	785b      	ldrb	r3, [r3, #1]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	f040 80cd 	bne.w	800abec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d132      	bne.n	800aac0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	015a      	lsls	r2, r3, #5
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	4413      	add	r3, r2
 800aa62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	0151      	lsls	r1, r2, #5
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	440a      	add	r2, r1
 800aa70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	015a      	lsls	r2, r3, #5
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	4413      	add	r3, r2
 800aa86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	0151      	lsls	r1, r2, #5
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	440a      	add	r2, r1
 800aa94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	015a      	lsls	r2, r3, #5
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	693a      	ldr	r2, [r7, #16]
 800aaae:	0151      	lsls	r1, r2, #5
 800aab0:	697a      	ldr	r2, [r7, #20]
 800aab2:	440a      	add	r2, r1
 800aab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aab8:	0cdb      	lsrs	r3, r3, #19
 800aaba:	04db      	lsls	r3, r3, #19
 800aabc:	6113      	str	r3, [r2, #16]
 800aabe:	e04e      	b.n	800ab5e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	015a      	lsls	r2, r3, #5
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	4413      	add	r3, r2
 800aac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	0151      	lsls	r1, r2, #5
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	440a      	add	r2, r1
 800aad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aada:	0cdb      	lsrs	r3, r3, #19
 800aadc:	04db      	lsls	r3, r3, #19
 800aade:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	015a      	lsls	r2, r3, #5
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	4413      	add	r3, r2
 800aae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	693a      	ldr	r2, [r7, #16]
 800aaf0:	0151      	lsls	r1, r2, #5
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	440a      	add	r2, r1
 800aaf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aafa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aafe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab02:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	695a      	ldr	r2, [r3, #20]
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d903      	bls.n	800ab18 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	689a      	ldr	r2, [r3, #8]
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	015a      	lsls	r2, r3, #5
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	4413      	add	r3, r2
 800ab20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	693a      	ldr	r2, [r7, #16]
 800ab28:	0151      	lsls	r1, r2, #5
 800ab2a:	697a      	ldr	r2, [r7, #20]
 800ab2c:	440a      	add	r2, r1
 800ab2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	015a      	lsls	r2, r3, #5
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	4413      	add	r3, r2
 800ab40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab44:	691a      	ldr	r2, [r3, #16]
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	695b      	ldr	r3, [r3, #20]
 800ab4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab4e:	6939      	ldr	r1, [r7, #16]
 800ab50:	0148      	lsls	r0, r1, #5
 800ab52:	6979      	ldr	r1, [r7, #20]
 800ab54:	4401      	add	r1, r0
 800ab56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ab5e:	79fb      	ldrb	r3, [r7, #7]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d11e      	bne.n	800aba2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d009      	beq.n	800ab80 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	015a      	lsls	r2, r3, #5
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	4413      	add	r3, r2
 800ab74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab78:	461a      	mov	r2, r3
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	015a      	lsls	r2, r3, #5
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	4413      	add	r3, r2
 800ab88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	0151      	lsls	r1, r2, #5
 800ab92:	697a      	ldr	r2, [r7, #20]
 800ab94:	440a      	add	r2, r1
 800ab96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab9e:	6013      	str	r3, [r2, #0]
 800aba0:	e092      	b.n	800acc8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	015a      	lsls	r2, r3, #5
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	4413      	add	r3, r2
 800abaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	693a      	ldr	r2, [r7, #16]
 800abb2:	0151      	lsls	r1, r2, #5
 800abb4:	697a      	ldr	r2, [r7, #20]
 800abb6:	440a      	add	r2, r1
 800abb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800abc0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d07e      	beq.n	800acc8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	f003 030f 	and.w	r3, r3, #15
 800abda:	2101      	movs	r1, #1
 800abdc:	fa01 f303 	lsl.w	r3, r1, r3
 800abe0:	6979      	ldr	r1, [r7, #20]
 800abe2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abe6:	4313      	orrs	r3, r2
 800abe8:	634b      	str	r3, [r1, #52]	; 0x34
 800abea:	e06d      	b.n	800acc8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	015a      	lsls	r2, r3, #5
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	4413      	add	r3, r2
 800abf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf8:	691b      	ldr	r3, [r3, #16]
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	0151      	lsls	r1, r2, #5
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	440a      	add	r2, r1
 800ac02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac06:	0cdb      	lsrs	r3, r3, #19
 800ac08:	04db      	lsls	r3, r3, #19
 800ac0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	015a      	lsls	r2, r3, #5
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	4413      	add	r3, r2
 800ac14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	0151      	lsls	r1, r2, #5
 800ac1e:	697a      	ldr	r2, [r7, #20]
 800ac20:	440a      	add	r2, r1
 800ac22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac2e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	695b      	ldr	r3, [r3, #20]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d003      	beq.n	800ac40 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	689a      	ldr	r2, [r3, #8]
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	015a      	lsls	r2, r3, #5
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	4413      	add	r3, r2
 800ac48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	0151      	lsls	r1, r2, #5
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	440a      	add	r2, r1
 800ac56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	015a      	lsls	r2, r3, #5
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	4413      	add	r3, r2
 800ac68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac6c:	691a      	ldr	r2, [r3, #16]
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac76:	6939      	ldr	r1, [r7, #16]
 800ac78:	0148      	lsls	r0, r1, #5
 800ac7a:	6979      	ldr	r1, [r7, #20]
 800ac7c:	4401      	add	r1, r0
 800ac7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac82:	4313      	orrs	r3, r2
 800ac84:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ac86:	79fb      	ldrb	r3, [r7, #7]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d10d      	bne.n	800aca8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d009      	beq.n	800aca8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	68d9      	ldr	r1, [r3, #12]
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	015a      	lsls	r2, r3, #5
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	4413      	add	r3, r2
 800aca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aca4:	460a      	mov	r2, r1
 800aca6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	015a      	lsls	r2, r3, #5
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	4413      	add	r3, r2
 800acb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	693a      	ldr	r2, [r7, #16]
 800acb8:	0151      	lsls	r1, r2, #5
 800acba:	697a      	ldr	r2, [r7, #20]
 800acbc:	440a      	add	r2, r1
 800acbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	371c      	adds	r7, #28
 800acce:	46bd      	mov	sp, r7
 800acd0:	bc80      	pop	{r7}
 800acd2:	4770      	bx	lr

0800acd4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b089      	sub	sp, #36	; 0x24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	4611      	mov	r1, r2
 800ace0:	461a      	mov	r2, r3
 800ace2:	460b      	mov	r3, r1
 800ace4:	71fb      	strb	r3, [r7, #7]
 800ace6:	4613      	mov	r3, r2
 800ace8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800acf2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d123      	bne.n	800ad42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800acfa:	88bb      	ldrh	r3, [r7, #4]
 800acfc:	3303      	adds	r3, #3
 800acfe:	089b      	lsrs	r3, r3, #2
 800ad00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ad02:	2300      	movs	r3, #0
 800ad04:	61bb      	str	r3, [r7, #24]
 800ad06:	e018      	b.n	800ad3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ad08:	79fb      	ldrb	r3, [r7, #7]
 800ad0a:	031a      	lsls	r2, r3, #12
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	4413      	add	r3, r2
 800ad10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad14:	461a      	mov	r2, r3
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	3301      	adds	r3, #1
 800ad26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	3301      	adds	r3, #1
 800ad32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	3301      	adds	r3, #1
 800ad38:	61bb      	str	r3, [r7, #24]
 800ad3a:	69ba      	ldr	r2, [r7, #24]
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d3e2      	bcc.n	800ad08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3724      	adds	r7, #36	; 0x24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bc80      	pop	{r7}
 800ad4c:	4770      	bx	lr

0800ad4e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b08b      	sub	sp, #44	; 0x2c
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	60f8      	str	r0, [r7, #12]
 800ad56:	60b9      	str	r1, [r7, #8]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ad64:	88fb      	ldrh	r3, [r7, #6]
 800ad66:	089b      	lsrs	r3, r3, #2
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ad6c:	88fb      	ldrh	r3, [r7, #6]
 800ad6e:	f003 0303 	and.w	r3, r3, #3
 800ad72:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ad74:	2300      	movs	r3, #0
 800ad76:	623b      	str	r3, [r7, #32]
 800ad78:	e014      	b.n	800ada4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad84:	601a      	str	r2, [r3, #0]
    pDest++;
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	3301      	adds	r3, #1
 800ad8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8e:	3301      	adds	r3, #1
 800ad90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ad92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad94:	3301      	adds	r3, #1
 800ad96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ad9e:	6a3b      	ldr	r3, [r7, #32]
 800ada0:	3301      	adds	r3, #1
 800ada2:	623b      	str	r3, [r7, #32]
 800ada4:	6a3a      	ldr	r2, [r7, #32]
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d3e6      	bcc.n	800ad7a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800adac:	8bfb      	ldrh	r3, [r7, #30]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d01e      	beq.n	800adf0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800adb2:	2300      	movs	r3, #0
 800adb4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adbc:	461a      	mov	r2, r3
 800adbe:	f107 0310 	add.w	r3, r7, #16
 800adc2:	6812      	ldr	r2, [r2, #0]
 800adc4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	6a3b      	ldr	r3, [r7, #32]
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	00db      	lsls	r3, r3, #3
 800adce:	fa22 f303 	lsr.w	r3, r2, r3
 800add2:	b2da      	uxtb	r2, r3
 800add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add6:	701a      	strb	r2, [r3, #0]
      i++;
 800add8:	6a3b      	ldr	r3, [r7, #32]
 800adda:	3301      	adds	r3, #1
 800addc:	623b      	str	r3, [r7, #32]
      pDest++;
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	3301      	adds	r3, #1
 800ade2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ade4:	8bfb      	ldrh	r3, [r7, #30]
 800ade6:	3b01      	subs	r3, #1
 800ade8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800adea:	8bfb      	ldrh	r3, [r7, #30]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1ea      	bne.n	800adc6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	372c      	adds	r7, #44	; 0x2c
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bc80      	pop	{r7}
 800adfa:	4770      	bx	lr

0800adfc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	785b      	ldrb	r3, [r3, #1]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d12c      	bne.n	800ae72 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	015a      	lsls	r2, r3, #5
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	4413      	add	r3, r2
 800ae20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	db12      	blt.n	800ae50 <USB_EPSetStall+0x54>
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00f      	beq.n	800ae50 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	015a      	lsls	r2, r3, #5
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	4413      	add	r3, r2
 800ae38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68ba      	ldr	r2, [r7, #8]
 800ae40:	0151      	lsls	r1, r2, #5
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	440a      	add	r2, r1
 800ae46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ae4e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	015a      	lsls	r2, r3, #5
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	4413      	add	r3, r2
 800ae58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	0151      	lsls	r1, r2, #5
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	440a      	add	r2, r1
 800ae66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ae6e:	6013      	str	r3, [r2, #0]
 800ae70:	e02b      	b.n	800aeca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	015a      	lsls	r2, r3, #5
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	4413      	add	r3, r2
 800ae7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	db12      	blt.n	800aeaa <USB_EPSetStall+0xae>
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00f      	beq.n	800aeaa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	015a      	lsls	r2, r3, #5
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	4413      	add	r3, r2
 800ae92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	68ba      	ldr	r2, [r7, #8]
 800ae9a:	0151      	lsls	r1, r2, #5
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	440a      	add	r2, r1
 800aea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aea4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aea8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	015a      	lsls	r2, r3, #5
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	0151      	lsls	r1, r2, #5
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	440a      	add	r2, r1
 800aec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aec8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3714      	adds	r7, #20
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bc80      	pop	{r7}
 800aed4:	4770      	bx	lr

0800aed6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aed6:	b480      	push	{r7}
 800aed8:	b085      	sub	sp, #20
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	785b      	ldrb	r3, [r3, #1]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d128      	bne.n	800af44 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	015a      	lsls	r2, r3, #5
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	4413      	add	r3, r2
 800aefa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	0151      	lsls	r1, r2, #5
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	440a      	add	r2, r1
 800af08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800af10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	78db      	ldrb	r3, [r3, #3]
 800af16:	2b03      	cmp	r3, #3
 800af18:	d003      	beq.n	800af22 <USB_EPClearStall+0x4c>
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	78db      	ldrb	r3, [r3, #3]
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d138      	bne.n	800af94 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	015a      	lsls	r2, r3, #5
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	4413      	add	r3, r2
 800af2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	0151      	lsls	r1, r2, #5
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	440a      	add	r2, r1
 800af38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af40:	6013      	str	r3, [r2, #0]
 800af42:	e027      	b.n	800af94 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	015a      	lsls	r2, r3, #5
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	4413      	add	r3, r2
 800af4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68ba      	ldr	r2, [r7, #8]
 800af54:	0151      	lsls	r1, r2, #5
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	440a      	add	r2, r1
 800af5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800af62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	78db      	ldrb	r3, [r3, #3]
 800af68:	2b03      	cmp	r3, #3
 800af6a:	d003      	beq.n	800af74 <USB_EPClearStall+0x9e>
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	78db      	ldrb	r3, [r3, #3]
 800af70:	2b02      	cmp	r3, #2
 800af72:	d10f      	bne.n	800af94 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	015a      	lsls	r2, r3, #5
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	4413      	add	r3, r2
 800af7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	0151      	lsls	r1, r2, #5
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	440a      	add	r2, r1
 800af8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af92:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bc80      	pop	{r7}
 800af9e:	4770      	bx	lr

0800afa0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b085      	sub	sp, #20
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	460b      	mov	r3, r1
 800afaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afbe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800afc2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	78fb      	ldrb	r3, [r7, #3]
 800afce:	011b      	lsls	r3, r3, #4
 800afd0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800afd4:	68f9      	ldr	r1, [r7, #12]
 800afd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afda:	4313      	orrs	r3, r2
 800afdc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800afde:	2300      	movs	r3, #0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3714      	adds	r7, #20
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bc80      	pop	{r7}
 800afe8:	4770      	bx	lr

0800afea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800afea:	b480      	push	{r7}
 800afec:	b085      	sub	sp, #20
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b004:	f023 0303 	bic.w	r3, r3, #3
 800b008:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b018:	f023 0302 	bic.w	r3, r3, #2
 800b01c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3714      	adds	r7, #20
 800b024:	46bd      	mov	sp, r7
 800b026:	bc80      	pop	{r7}
 800b028:	4770      	bx	lr

0800b02a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b02a:	b480      	push	{r7}
 800b02c:	b085      	sub	sp, #20
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b044:	f023 0303 	bic.w	r3, r3, #3
 800b048:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b058:	f043 0302 	orr.w	r3, r3, #2
 800b05c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	bc80      	pop	{r7}
 800b068:	4770      	bx	lr

0800b06a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b06a:	b480      	push	{r7}
 800b06c:	b085      	sub	sp, #20
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	4013      	ands	r3, r2
 800b080:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b082:	68fb      	ldr	r3, [r7, #12]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	bc80      	pop	{r7}
 800b08c:	4770      	bx	lr

0800b08e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b08e:	b480      	push	{r7}
 800b090:	b085      	sub	sp, #20
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0a0:	699b      	ldr	r3, [r3, #24]
 800b0a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0aa:	69db      	ldr	r3, [r3, #28]
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	4013      	ands	r3, r2
 800b0b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	0c1b      	lsrs	r3, r3, #16
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3714      	adds	r7, #20
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bc80      	pop	{r7}
 800b0be:	4770      	bx	lr

0800b0c0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0d2:	699b      	ldr	r3, [r3, #24]
 800b0d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0dc:	69db      	ldr	r3, [r3, #28]
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	b29b      	uxth	r3, r3
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3714      	adds	r7, #20
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bc80      	pop	{r7}
 800b0f0:	4770      	bx	lr

0800b0f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b0f2:	b480      	push	{r7}
 800b0f4:	b085      	sub	sp, #20
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b102:	78fb      	ldrb	r3, [r7, #3]
 800b104:	015a      	lsls	r2, r3, #5
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	4413      	add	r3, r2
 800b10a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b118:	695b      	ldr	r3, [r3, #20]
 800b11a:	68ba      	ldr	r2, [r7, #8]
 800b11c:	4013      	ands	r3, r2
 800b11e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b120:	68bb      	ldr	r3, [r7, #8]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	bc80      	pop	{r7}
 800b12a:	4770      	bx	lr

0800b12c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b087      	sub	sp, #28
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	460b      	mov	r3, r1
 800b136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b14e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	f003 030f 	and.w	r3, r3, #15
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	fa22 f303 	lsr.w	r3, r2, r3
 800b15c:	01db      	lsls	r3, r3, #7
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	693a      	ldr	r2, [r7, #16]
 800b162:	4313      	orrs	r3, r2
 800b164:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b166:	78fb      	ldrb	r3, [r7, #3]
 800b168:	015a      	lsls	r2, r3, #5
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	4413      	add	r3, r2
 800b16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	4013      	ands	r3, r2
 800b178:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b17a:	68bb      	ldr	r3, [r7, #8]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	371c      	adds	r7, #28
 800b180:	46bd      	mov	sp, r7
 800b182:	bc80      	pop	{r7}
 800b184:	4770      	bx	lr

0800b186 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b186:	b480      	push	{r7}
 800b188:	b083      	sub	sp, #12
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	695b      	ldr	r3, [r3, #20]
 800b192:	f003 0301 	and.w	r3, r3, #1
}
 800b196:	4618      	mov	r0, r3
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bc80      	pop	{r7}
 800b19e:	4770      	bx	lr

0800b1a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b1be:	f023 0307 	bic.w	r3, r3, #7
 800b1c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bc80      	pop	{r7}
 800b1e2:	4770      	bx	lr

0800b1e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b087      	sub	sp, #28
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	607a      	str	r2, [r7, #4]
 800b1f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	333c      	adds	r3, #60	; 0x3c
 800b1fa:	3304      	adds	r3, #4
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	4a25      	ldr	r2, [pc, #148]	; (800b298 <USB_EP0_OutStart+0xb4>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d90a      	bls.n	800b21e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b218:	d101      	bne.n	800b21e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b21a:	2300      	movs	r3, #0
 800b21c:	e037      	b.n	800b28e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b224:	461a      	mov	r2, r3
 800b226:	2300      	movs	r3, #0
 800b228:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	697a      	ldr	r2, [r7, #20]
 800b234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b238:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b23c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	697a      	ldr	r2, [r7, #20]
 800b248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b24c:	f043 0318 	orr.w	r3, r3, #24
 800b250:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b258:	691b      	ldr	r3, [r3, #16]
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b260:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b264:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b266:	7afb      	ldrb	r3, [r7, #11]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d10f      	bne.n	800b28c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b272:	461a      	mov	r2, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	697a      	ldr	r2, [r7, #20]
 800b282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b286:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b28a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	371c      	adds	r7, #28
 800b292:	46bd      	mov	sp, r7
 800b294:	bc80      	pop	{r7}
 800b296:	4770      	bx	lr
 800b298:	4f54300a 	.word	0x4f54300a

0800b29c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b085      	sub	sp, #20
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	60fb      	str	r3, [r7, #12]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	4a12      	ldr	r2, [pc, #72]	; (800b2fc <USB_CoreReset+0x60>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d901      	bls.n	800b2ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	e01b      	b.n	800b2f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	daf2      	bge.n	800b2a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	f043 0201 	orr.w	r2, r3, #1
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	60fb      	str	r3, [r7, #12]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	4a08      	ldr	r2, [pc, #32]	; (800b2fc <USB_CoreReset+0x60>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d901      	bls.n	800b2e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	e006      	b.n	800b2f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	f003 0301 	and.w	r3, r3, #1
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d0f0      	beq.n	800b2d2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3714      	adds	r7, #20
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bc80      	pop	{r7}
 800b2fa:	4770      	bx	lr
 800b2fc:	00030d40 	.word	0x00030d40

0800b300 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	460b      	mov	r3, r1
 800b30a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b30c:	2300      	movs	r3, #0
 800b30e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	7c1b      	ldrb	r3, [r3, #16]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d115      	bne.n	800b344 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b318:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b31c:	2202      	movs	r2, #2
 800b31e:	2181      	movs	r1, #129	; 0x81
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f001 ff48 	bl	800d1b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2201      	movs	r2, #1
 800b32a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b32c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b330:	2202      	movs	r2, #2
 800b332:	2101      	movs	r1, #1
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f001 ff3e 	bl	800d1b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2201      	movs	r2, #1
 800b33e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b342:	e012      	b.n	800b36a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b344:	2340      	movs	r3, #64	; 0x40
 800b346:	2202      	movs	r2, #2
 800b348:	2181      	movs	r1, #129	; 0x81
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f001 ff33 	bl	800d1b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b356:	2340      	movs	r3, #64	; 0x40
 800b358:	2202      	movs	r2, #2
 800b35a:	2101      	movs	r1, #1
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f001 ff2a 	bl	800d1b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2201      	movs	r2, #1
 800b366:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b36a:	2308      	movs	r3, #8
 800b36c:	2203      	movs	r2, #3
 800b36e:	2182      	movs	r1, #130	; 0x82
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f001 ff20 	bl	800d1b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2201      	movs	r2, #1
 800b37a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b37c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b380:	f004 fbdc 	bl	800fb3c <malloc>
 800b384:	4603      	mov	r3, r0
 800b386:	461a      	mov	r2, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b394:	2b00      	cmp	r3, #0
 800b396:	d102      	bne.n	800b39e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800b398:	2301      	movs	r3, #1
 800b39a:	73fb      	strb	r3, [r7, #15]
 800b39c:	e026      	b.n	800b3ec <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3a4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	7c1b      	ldrb	r3, [r3, #16]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d109      	bne.n	800b3dc <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b3ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f001 ffde 	bl	800d396 <USBD_LL_PrepareReceive>
 800b3da:	e007      	b.n	800b3ec <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b3e2:	2340      	movs	r3, #64	; 0x40
 800b3e4:	2101      	movs	r1, #1
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f001 ffd5 	bl	800d396 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b084      	sub	sp, #16
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
 800b3fe:	460b      	mov	r3, r1
 800b400:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b402:	2300      	movs	r3, #0
 800b404:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b406:	2181      	movs	r1, #129	; 0x81
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f001 fefa 	bl	800d202 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b414:	2101      	movs	r1, #1
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f001 fef3 	bl	800d202 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b424:	2182      	movs	r1, #130	; 0x82
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f001 feeb 	bl	800d202 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00e      	beq.n	800b45a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b44c:	4618      	mov	r0, r3
 800b44e:	f004 fb7d 	bl	800fb4c <free>
    pdev->pClassData = NULL;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b474:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b476:	2300      	movs	r3, #0
 800b478:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b47a:	2300      	movs	r3, #0
 800b47c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b47e:	2300      	movs	r3, #0
 800b480:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d039      	beq.n	800b502 <USBD_CDC_Setup+0x9e>
 800b48e:	2b20      	cmp	r3, #32
 800b490:	d17f      	bne.n	800b592 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	88db      	ldrh	r3, [r3, #6]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d029      	beq.n	800b4ee <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	b25b      	sxtb	r3, r3
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	da11      	bge.n	800b4c8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	683a      	ldr	r2, [r7, #0]
 800b4ae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b4b0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	88d2      	ldrh	r2, [r2, #6]
 800b4b6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b4b8:	6939      	ldr	r1, [r7, #16]
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	88db      	ldrh	r3, [r3, #6]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f001 fa42 	bl	800c94a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b4c6:	e06b      	b.n	800b5a0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	785a      	ldrb	r2, [r3, #1]
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	88db      	ldrh	r3, [r3, #6]
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b4de:	6939      	ldr	r1, [r7, #16]
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	88db      	ldrh	r3, [r3, #6]
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f001 fa5d 	bl	800c9a6 <USBD_CtlPrepareRx>
      break;
 800b4ec:	e058      	b.n	800b5a0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	7850      	ldrb	r0, [r2, #1]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	6839      	ldr	r1, [r7, #0]
 800b4fe:	4798      	blx	r3
      break;
 800b500:	e04e      	b.n	800b5a0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	785b      	ldrb	r3, [r3, #1]
 800b506:	2b0b      	cmp	r3, #11
 800b508:	d02e      	beq.n	800b568 <USBD_CDC_Setup+0x104>
 800b50a:	2b0b      	cmp	r3, #11
 800b50c:	dc38      	bgt.n	800b580 <USBD_CDC_Setup+0x11c>
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d002      	beq.n	800b518 <USBD_CDC_Setup+0xb4>
 800b512:	2b0a      	cmp	r3, #10
 800b514:	d014      	beq.n	800b540 <USBD_CDC_Setup+0xdc>
 800b516:	e033      	b.n	800b580 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b51e:	2b03      	cmp	r3, #3
 800b520:	d107      	bne.n	800b532 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b522:	f107 030c 	add.w	r3, r7, #12
 800b526:	2202      	movs	r2, #2
 800b528:	4619      	mov	r1, r3
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f001 fa0d 	bl	800c94a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b530:	e02e      	b.n	800b590 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b532:	6839      	ldr	r1, [r7, #0]
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f001 f99e 	bl	800c876 <USBD_CtlError>
            ret = USBD_FAIL;
 800b53a:	2302      	movs	r3, #2
 800b53c:	75fb      	strb	r3, [r7, #23]
          break;
 800b53e:	e027      	b.n	800b590 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b546:	2b03      	cmp	r3, #3
 800b548:	d107      	bne.n	800b55a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b54a:	f107 030f 	add.w	r3, r7, #15
 800b54e:	2201      	movs	r2, #1
 800b550:	4619      	mov	r1, r3
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f001 f9f9 	bl	800c94a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b558:	e01a      	b.n	800b590 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b55a:	6839      	ldr	r1, [r7, #0]
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f001 f98a 	bl	800c876 <USBD_CtlError>
            ret = USBD_FAIL;
 800b562:	2302      	movs	r3, #2
 800b564:	75fb      	strb	r3, [r7, #23]
          break;
 800b566:	e013      	b.n	800b590 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b56e:	2b03      	cmp	r3, #3
 800b570:	d00d      	beq.n	800b58e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f001 f97e 	bl	800c876 <USBD_CtlError>
            ret = USBD_FAIL;
 800b57a:	2302      	movs	r3, #2
 800b57c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b57e:	e006      	b.n	800b58e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f001 f977 	bl	800c876 <USBD_CtlError>
          ret = USBD_FAIL;
 800b588:	2302      	movs	r3, #2
 800b58a:	75fb      	strb	r3, [r7, #23]
          break;
 800b58c:	e000      	b.n	800b590 <USBD_CDC_Setup+0x12c>
          break;
 800b58e:	bf00      	nop
      }
      break;
 800b590:	e006      	b.n	800b5a0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f001 f96e 	bl	800c876 <USBD_CtlError>
      ret = USBD_FAIL;
 800b59a:	2302      	movs	r3, #2
 800b59c:	75fb      	strb	r3, [r7, #23]
      break;
 800b59e:	bf00      	nop
  }

  return ret;
 800b5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3718      	adds	r7, #24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b084      	sub	sp, #16
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5bc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5c4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d03a      	beq.n	800b646 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b5d0:	78fa      	ldrb	r2, [r7, #3]
 800b5d2:	6879      	ldr	r1, [r7, #4]
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	4413      	add	r3, r2
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	440b      	add	r3, r1
 800b5de:	331c      	adds	r3, #28
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d029      	beq.n	800b63a <USBD_CDC_DataIn+0x90>
 800b5e6:	78fa      	ldrb	r2, [r7, #3]
 800b5e8:	6879      	ldr	r1, [r7, #4]
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	4413      	add	r3, r2
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	440b      	add	r3, r1
 800b5f4:	331c      	adds	r3, #28
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	78f9      	ldrb	r1, [r7, #3]
 800b5fa:	68b8      	ldr	r0, [r7, #8]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	00db      	lsls	r3, r3, #3
 800b600:	1a5b      	subs	r3, r3, r1
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	4403      	add	r3, r0
 800b606:	3344      	adds	r3, #68	; 0x44
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	fbb2 f1f3 	udiv	r1, r2, r3
 800b60e:	fb03 f301 	mul.w	r3, r3, r1
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	2b00      	cmp	r3, #0
 800b616:	d110      	bne.n	800b63a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b618:	78fa      	ldrb	r2, [r7, #3]
 800b61a:	6879      	ldr	r1, [r7, #4]
 800b61c:	4613      	mov	r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4413      	add	r3, r2
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	440b      	add	r3, r1
 800b626:	331c      	adds	r3, #28
 800b628:	2200      	movs	r2, #0
 800b62a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b62c:	78f9      	ldrb	r1, [r7, #3]
 800b62e:	2300      	movs	r3, #0
 800b630:	2200      	movs	r2, #0
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f001 fe8c 	bl	800d350 <USBD_LL_Transmit>
 800b638:	e003      	b.n	800b642 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	e000      	b.n	800b648 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b646:	2302      	movs	r3, #2
  }
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	460b      	mov	r3, r1
 800b65a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b662:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b664:	78fb      	ldrb	r3, [r7, #3]
 800b666:	4619      	mov	r1, r3
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f001 feb7 	bl	800d3dc <USBD_LL_GetRxDataSize>
 800b66e:	4602      	mov	r2, r0
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00d      	beq.n	800b69c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b694:	4611      	mov	r1, r2
 800b696:	4798      	blx	r3

    return USBD_OK;
 800b698:	2300      	movs	r3, #0
 800b69a:	e000      	b.n	800b69e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b69c:	2302      	movs	r3, #2
  }
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b084      	sub	sp, #16
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6b4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d015      	beq.n	800b6ec <USBD_CDC_EP0_RxReady+0x46>
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b6c6:	2bff      	cmp	r3, #255	; 0xff
 800b6c8:	d010      	beq.n	800b6ec <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b6d8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b6e0:	b292      	uxth	r2, r2
 800b6e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	22ff      	movs	r2, #255	; 0xff
 800b6e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
	...

0800b6f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2243      	movs	r2, #67	; 0x43
 800b704:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b706:	4b03      	ldr	r3, [pc, #12]	; (800b714 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b708:	4618      	mov	r0, r3
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bc80      	pop	{r7}
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	200000b8 	.word	0x200000b8

0800b718 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2243      	movs	r2, #67	; 0x43
 800b724:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b726:	4b03      	ldr	r3, [pc, #12]	; (800b734 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b728:	4618      	mov	r0, r3
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bc80      	pop	{r7}
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	20000074 	.word	0x20000074

0800b738 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2243      	movs	r2, #67	; 0x43
 800b744:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b746:	4b03      	ldr	r3, [pc, #12]	; (800b754 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b748:	4618      	mov	r0, r3
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bc80      	pop	{r7}
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	200000fc 	.word	0x200000fc

0800b758 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	220a      	movs	r2, #10
 800b764:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b766:	4b03      	ldr	r3, [pc, #12]	; (800b774 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b768:	4618      	mov	r0, r3
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bc80      	pop	{r7}
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	20000030 	.word	0x20000030

0800b778 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b782:	2302      	movs	r3, #2
 800b784:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d005      	beq.n	800b798 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b794:	2300      	movs	r3, #0
 800b796:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b798:	7bfb      	ldrb	r3, [r7, #15]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3714      	adds	r7, #20
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bc80      	pop	{r7}
 800b7a2:	4770      	bx	lr

0800b7a4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b087      	sub	sp, #28
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7b8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	68ba      	ldr	r2, [r7, #8]
 800b7be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b7c2:	88fa      	ldrh	r2, [r7, #6]
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	371c      	adds	r7, #28
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bc80      	pop	{r7}
 800b7d4:	4770      	bx	lr

0800b7d6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b085      	sub	sp, #20
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
 800b7de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7e6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	683a      	ldr	r2, [r7, #0]
 800b7ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3714      	adds	r7, #20
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bc80      	pop	{r7}
 800b7fa:	4770      	bx	lr

0800b7fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b80a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b812:	2b00      	cmp	r3, #0
 800b814:	d01c      	beq.n	800b850 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d115      	bne.n	800b84c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2201      	movs	r2, #1
 800b824:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b83e:	b29b      	uxth	r3, r3
 800b840:	2181      	movs	r1, #129	; 0x81
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f001 fd84 	bl	800d350 <USBD_LL_Transmit>

      return USBD_OK;
 800b848:	2300      	movs	r3, #0
 800b84a:	e002      	b.n	800b852 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b84c:	2301      	movs	r3, #1
 800b84e:	e000      	b.n	800b852 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b850:	2302      	movs	r3, #2
  }
}
 800b852:	4618      	mov	r0, r3
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b084      	sub	sp, #16
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b868:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b870:	2b00      	cmp	r3, #0
 800b872:	d017      	beq.n	800b8a4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	7c1b      	ldrb	r3, [r3, #16]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d109      	bne.n	800b890 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b882:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b886:	2101      	movs	r1, #1
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f001 fd84 	bl	800d396 <USBD_LL_PrepareReceive>
 800b88e:	e007      	b.n	800b8a0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b896:	2340      	movs	r3, #64	; 0x40
 800b898:	2101      	movs	r1, #1
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f001 fd7b 	bl	800d396 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	e000      	b.n	800b8a6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b8a4:	2302      	movs	r3, #2
  }
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b084      	sub	sp, #16
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	60f8      	str	r0, [r7, #12]
 800b8b6:	60b9      	str	r1, [r7, #8]
 800b8b8:	4613      	mov	r3, r2
 800b8ba:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d101      	bne.n	800b8c6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b8c2:	2302      	movs	r3, #2
 800b8c4:	e01a      	b.n	800b8fc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d003      	beq.n	800b8d8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d003      	beq.n	800b8e6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	68ba      	ldr	r2, [r7, #8]
 800b8e2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	79fa      	ldrb	r2, [r7, #7]
 800b8f2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f001 fbf9 	bl	800d0ec <USBD_LL_Init>

  return USBD_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3710      	adds	r7, #16
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b90e:	2300      	movs	r3, #0
 800b910:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d006      	beq.n	800b926 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	683a      	ldr	r2, [r7, #0]
 800b91c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b920:	2300      	movs	r3, #0
 800b922:	73fb      	strb	r3, [r7, #15]
 800b924:	e001      	b.n	800b92a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b926:	2302      	movs	r3, #2
 800b928:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	bc80      	pop	{r7}
 800b934:	4770      	bx	lr

0800b936 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b082      	sub	sp, #8
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f001 fc1e 	bl	800d180 <USBD_LL_Start>

  return USBD_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b94e:	b480      	push	{r7}
 800b950:	b083      	sub	sp, #12
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b956:	2300      	movs	r3, #0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bc80      	pop	{r7}
 800b960:	4770      	bx	lr

0800b962 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b084      	sub	sp, #16
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
 800b96a:	460b      	mov	r3, r1
 800b96c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b96e:	2302      	movs	r3, #2
 800b970:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d00c      	beq.n	800b996 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	78fa      	ldrb	r2, [r7, #3]
 800b986:	4611      	mov	r1, r2
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	4798      	blx	r3
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d101      	bne.n	800b996 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b992:	2300      	movs	r3, #0
 800b994:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b996:	7bfb      	ldrb	r3, [r7, #15]
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3710      	adds	r7, #16
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	78fa      	ldrb	r2, [r7, #3]
 800b9b6:	4611      	mov	r1, r2
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	4798      	blx	r3

  return USBD_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3708      	adds	r7, #8
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b082      	sub	sp, #8
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
 800b9ce:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b9d6:	6839      	ldr	r1, [r7, #0]
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f000 ff10 	bl	800c7fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b9fa:	f003 031f 	and.w	r3, r3, #31
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d016      	beq.n	800ba30 <USBD_LL_SetupStage+0x6a>
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	d81c      	bhi.n	800ba40 <USBD_LL_SetupStage+0x7a>
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d002      	beq.n	800ba10 <USBD_LL_SetupStage+0x4a>
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d008      	beq.n	800ba20 <USBD_LL_SetupStage+0x5a>
 800ba0e:	e017      	b.n	800ba40 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ba16:	4619      	mov	r1, r3
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fa03 	bl	800be24 <USBD_StdDevReq>
      break;
 800ba1e:	e01a      	b.n	800ba56 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ba26:	4619      	mov	r1, r3
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 fa65 	bl	800bef8 <USBD_StdItfReq>
      break;
 800ba2e:	e012      	b.n	800ba56 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ba36:	4619      	mov	r1, r3
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 faa5 	bl	800bf88 <USBD_StdEPReq>
      break;
 800ba3e:	e00a      	b.n	800ba56 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ba46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f001 fbf6 	bl	800d240 <USBD_LL_StallEP>
      break;
 800ba54:	bf00      	nop
  }

  return USBD_OK;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3708      	adds	r7, #8
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b086      	sub	sp, #24
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	607a      	str	r2, [r7, #4]
 800ba6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ba6e:	7afb      	ldrb	r3, [r7, #11]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d14b      	bne.n	800bb0c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ba7a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba82:	2b03      	cmp	r3, #3
 800ba84:	d134      	bne.n	800baf0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	68da      	ldr	r2, [r3, #12]
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	691b      	ldr	r3, [r3, #16]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d919      	bls.n	800bac6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	68da      	ldr	r2, [r3, #12]
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	691b      	ldr	r3, [r3, #16]
 800ba9a:	1ad2      	subs	r2, r2, r3
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	68da      	ldr	r2, [r3, #12]
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d203      	bcs.n	800bab4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	e002      	b.n	800baba <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bab8:	b29b      	uxth	r3, r3
 800baba:	461a      	mov	r2, r3
 800babc:	6879      	ldr	r1, [r7, #4]
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f000 ff8f 	bl	800c9e2 <USBD_CtlContinueRx>
 800bac4:	e038      	b.n	800bb38 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00a      	beq.n	800bae8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bad8:	2b03      	cmp	r3, #3
 800bada:	d105      	bne.n	800bae8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bae2:	691b      	ldr	r3, [r3, #16]
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f000 ff8c 	bl	800ca06 <USBD_CtlSendStatus>
 800baee:	e023      	b.n	800bb38 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800baf6:	2b05      	cmp	r3, #5
 800baf8:	d11e      	bne.n	800bb38 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2200      	movs	r2, #0
 800bafe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800bb02:	2100      	movs	r1, #0
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f001 fb9b 	bl	800d240 <USBD_LL_StallEP>
 800bb0a:	e015      	b.n	800bb38 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb12:	699b      	ldr	r3, [r3, #24]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d00d      	beq.n	800bb34 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	d108      	bne.n	800bb34 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb28:	699b      	ldr	r3, [r3, #24]
 800bb2a:	7afa      	ldrb	r2, [r7, #11]
 800bb2c:	4611      	mov	r1, r2
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	4798      	blx	r3
 800bb32:	e001      	b.n	800bb38 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bb34:	2302      	movs	r3, #2
 800bb36:	e000      	b.n	800bb3a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3718      	adds	r7, #24
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b086      	sub	sp, #24
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	60f8      	str	r0, [r7, #12]
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	607a      	str	r2, [r7, #4]
 800bb4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bb50:	7afb      	ldrb	r3, [r7, #11]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d17f      	bne.n	800bc56 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	3314      	adds	r3, #20
 800bb5a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb62:	2b02      	cmp	r3, #2
 800bb64:	d15c      	bne.n	800bc20 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	68da      	ldr	r2, [r3, #12]
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	691b      	ldr	r3, [r3, #16]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d915      	bls.n	800bb9e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	68da      	ldr	r2, [r3, #12]
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	1ad2      	subs	r2, r2, r3
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	461a      	mov	r2, r3
 800bb88:	6879      	ldr	r1, [r7, #4]
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f000 fef9 	bl	800c982 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb90:	2300      	movs	r3, #0
 800bb92:	2200      	movs	r2, #0
 800bb94:	2100      	movs	r1, #0
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	f001 fbfd 	bl	800d396 <USBD_LL_PrepareReceive>
 800bb9c:	e04e      	b.n	800bc3c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	697a      	ldr	r2, [r7, #20]
 800bba4:	6912      	ldr	r2, [r2, #16]
 800bba6:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbaa:	fb02 f201 	mul.w	r2, r2, r1
 800bbae:	1a9b      	subs	r3, r3, r2
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d11c      	bne.n	800bbee <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	689a      	ldr	r2, [r3, #8]
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d316      	bcc.n	800bbee <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	689a      	ldr	r2, [r3, #8]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d20f      	bcs.n	800bbee <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bbce:	2200      	movs	r2, #0
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f000 fed5 	bl	800c982 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f001 fbd5 	bl	800d396 <USBD_LL_PrepareReceive>
 800bbec:	e026      	b.n	800bc3c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00a      	beq.n	800bc10 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bc00:	2b03      	cmp	r3, #3
 800bc02:	d105      	bne.n	800bc10 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bc10:	2180      	movs	r1, #128	; 0x80
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f001 fb14 	bl	800d240 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f000 ff07 	bl	800ca2c <USBD_CtlReceiveStatus>
 800bc1e:	e00d      	b.n	800bc3c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc26:	2b04      	cmp	r3, #4
 800bc28:	d004      	beq.n	800bc34 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d103      	bne.n	800bc3c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bc34:	2180      	movs	r1, #128	; 0x80
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f001 fb02 	bl	800d240 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d11d      	bne.n	800bc82 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f7ff fe81 	bl	800b94e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bc54:	e015      	b.n	800bc82 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d00d      	beq.n	800bc7e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc68:	2b03      	cmp	r3, #3
 800bc6a:	d108      	bne.n	800bc7e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc72:	695b      	ldr	r3, [r3, #20]
 800bc74:	7afa      	ldrb	r2, [r7, #11]
 800bc76:	4611      	mov	r1, r2
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	4798      	blx	r3
 800bc7c:	e001      	b.n	800bc82 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc7e:	2302      	movs	r3, #2
 800bc80:	e000      	b.n	800bc84 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3718      	adds	r7, #24
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc94:	2340      	movs	r3, #64	; 0x40
 800bc96:	2200      	movs	r2, #0
 800bc98:	2100      	movs	r1, #0
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f001 fa8b 	bl	800d1b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2240      	movs	r2, #64	; 0x40
 800bcac:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bcb0:	2340      	movs	r3, #64	; 0x40
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	2180      	movs	r1, #128	; 0x80
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f001 fa7d 	bl	800d1b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2240      	movs	r2, #64	; 0x40
 800bcc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d009      	beq.n	800bd04 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	6852      	ldr	r2, [r2, #4]
 800bcfc:	b2d2      	uxtb	r2, r2
 800bcfe:	4611      	mov	r1, r2
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	4798      	blx	r3
  }

  return USBD_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd0e:	b480      	push	{r7}
 800bd10:	b083      	sub	sp, #12
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	460b      	mov	r3, r1
 800bd18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	78fa      	ldrb	r2, [r7, #3]
 800bd1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bd20:	2300      	movs	r3, #0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	370c      	adds	r7, #12
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bc80      	pop	{r7}
 800bd2a:	4770      	bx	lr

0800bd2c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2204      	movs	r2, #4
 800bd44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	370c      	adds	r7, #12
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bc80      	pop	{r7}
 800bd52:	4770      	bx	lr

0800bd54 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd62:	2b04      	cmp	r3, #4
 800bd64:	d105      	bne.n	800bd72 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bc80      	pop	{r7}
 800bd7c:	4770      	bx	lr

0800bd7e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b082      	sub	sp, #8
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd8c:	2b03      	cmp	r3, #3
 800bd8e:	d10b      	bne.n	800bda8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd96:	69db      	ldr	r3, [r3, #28]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d005      	beq.n	800bda8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bda2:	69db      	ldr	r3, [r3, #28]
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bdb2:	b480      	push	{r7}
 800bdb4:	b083      	sub	sp, #12
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	460b      	mov	r3, r1
 800bdbc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bc80      	pop	{r7}
 800bdc8:	4770      	bx	lr

0800bdca <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bdca:	b480      	push	{r7}
 800bdcc:	b083      	sub	sp, #12
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bdd6:	2300      	movs	r3, #0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bc80      	pop	{r7}
 800bde0:	4770      	bx	lr

0800bde2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bde2:	b480      	push	{r7}
 800bde4:	b083      	sub	sp, #12
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bc80      	pop	{r7}
 800bdf4:	4770      	bx	lr

0800bdf6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b082      	sub	sp, #8
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2201      	movs	r2, #1
 800be02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	6852      	ldr	r2, [r2, #4]
 800be12:	b2d2      	uxtb	r2, r2
 800be14:	4611      	mov	r1, r2
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	4798      	blx	r3

  return USBD_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be2e:	2300      	movs	r3, #0
 800be30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be3a:	2b40      	cmp	r3, #64	; 0x40
 800be3c:	d005      	beq.n	800be4a <USBD_StdDevReq+0x26>
 800be3e:	2b40      	cmp	r3, #64	; 0x40
 800be40:	d84f      	bhi.n	800bee2 <USBD_StdDevReq+0xbe>
 800be42:	2b00      	cmp	r3, #0
 800be44:	d009      	beq.n	800be5a <USBD_StdDevReq+0x36>
 800be46:	2b20      	cmp	r3, #32
 800be48:	d14b      	bne.n	800bee2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	4798      	blx	r3
      break;
 800be58:	e048      	b.n	800beec <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	785b      	ldrb	r3, [r3, #1]
 800be5e:	2b09      	cmp	r3, #9
 800be60:	d839      	bhi.n	800bed6 <USBD_StdDevReq+0xb2>
 800be62:	a201      	add	r2, pc, #4	; (adr r2, 800be68 <USBD_StdDevReq+0x44>)
 800be64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be68:	0800beb9 	.word	0x0800beb9
 800be6c:	0800becd 	.word	0x0800becd
 800be70:	0800bed7 	.word	0x0800bed7
 800be74:	0800bec3 	.word	0x0800bec3
 800be78:	0800bed7 	.word	0x0800bed7
 800be7c:	0800be9b 	.word	0x0800be9b
 800be80:	0800be91 	.word	0x0800be91
 800be84:	0800bed7 	.word	0x0800bed7
 800be88:	0800beaf 	.word	0x0800beaf
 800be8c:	0800bea5 	.word	0x0800bea5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be90:	6839      	ldr	r1, [r7, #0]
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 f9dc 	bl	800c250 <USBD_GetDescriptor>
          break;
 800be98:	e022      	b.n	800bee0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fb3f 	bl	800c520 <USBD_SetAddress>
          break;
 800bea2:	e01d      	b.n	800bee0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fb7e 	bl	800c5a8 <USBD_SetConfig>
          break;
 800beac:	e018      	b.n	800bee0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800beae:	6839      	ldr	r1, [r7, #0]
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 fc07 	bl	800c6c4 <USBD_GetConfig>
          break;
 800beb6:	e013      	b.n	800bee0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800beb8:	6839      	ldr	r1, [r7, #0]
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 fc37 	bl	800c72e <USBD_GetStatus>
          break;
 800bec0:	e00e      	b.n	800bee0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fc65 	bl	800c794 <USBD_SetFeature>
          break;
 800beca:	e009      	b.n	800bee0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800becc:	6839      	ldr	r1, [r7, #0]
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 fc74 	bl	800c7bc <USBD_ClrFeature>
          break;
 800bed4:	e004      	b.n	800bee0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bed6:	6839      	ldr	r1, [r7, #0]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fccc 	bl	800c876 <USBD_CtlError>
          break;
 800bede:	bf00      	nop
      }
      break;
 800bee0:	e004      	b.n	800beec <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bee2:	6839      	ldr	r1, [r7, #0]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fcc6 	bl	800c876 <USBD_CtlError>
      break;
 800beea:	bf00      	nop
  }

  return ret;
 800beec:	7bfb      	ldrb	r3, [r7, #15]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3710      	adds	r7, #16
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop

0800bef8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf02:	2300      	movs	r3, #0
 800bf04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf0e:	2b40      	cmp	r3, #64	; 0x40
 800bf10:	d005      	beq.n	800bf1e <USBD_StdItfReq+0x26>
 800bf12:	2b40      	cmp	r3, #64	; 0x40
 800bf14:	d82e      	bhi.n	800bf74 <USBD_StdItfReq+0x7c>
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d001      	beq.n	800bf1e <USBD_StdItfReq+0x26>
 800bf1a:	2b20      	cmp	r3, #32
 800bf1c:	d12a      	bne.n	800bf74 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf24:	3b01      	subs	r3, #1
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	d81d      	bhi.n	800bf66 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	889b      	ldrh	r3, [r3, #4]
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d813      	bhi.n	800bf5c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	4798      	blx	r3
 800bf42:	4603      	mov	r3, r0
 800bf44:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	88db      	ldrh	r3, [r3, #6]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d110      	bne.n	800bf70 <USBD_StdItfReq+0x78>
 800bf4e:	7bfb      	ldrb	r3, [r7, #15]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10d      	bne.n	800bf70 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 fd56 	bl	800ca06 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf5a:	e009      	b.n	800bf70 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 fc89 	bl	800c876 <USBD_CtlError>
          break;
 800bf64:	e004      	b.n	800bf70 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bf66:	6839      	ldr	r1, [r7, #0]
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 fc84 	bl	800c876 <USBD_CtlError>
          break;
 800bf6e:	e000      	b.n	800bf72 <USBD_StdItfReq+0x7a>
          break;
 800bf70:	bf00      	nop
      }
      break;
 800bf72:	e004      	b.n	800bf7e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bf74:	6839      	ldr	r1, [r7, #0]
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fc7d 	bl	800c876 <USBD_CtlError>
      break;
 800bf7c:	bf00      	nop
  }

  return USBD_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf92:	2300      	movs	r3, #0
 800bf94:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	889b      	ldrh	r3, [r3, #4]
 800bf9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfa4:	2b40      	cmp	r3, #64	; 0x40
 800bfa6:	d007      	beq.n	800bfb8 <USBD_StdEPReq+0x30>
 800bfa8:	2b40      	cmp	r3, #64	; 0x40
 800bfaa:	f200 8146 	bhi.w	800c23a <USBD_StdEPReq+0x2b2>
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00a      	beq.n	800bfc8 <USBD_StdEPReq+0x40>
 800bfb2:	2b20      	cmp	r3, #32
 800bfb4:	f040 8141 	bne.w	800c23a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	6839      	ldr	r1, [r7, #0]
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	4798      	blx	r3
      break;
 800bfc6:	e13d      	b.n	800c244 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfd0:	2b20      	cmp	r3, #32
 800bfd2:	d10a      	bne.n	800bfea <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	6839      	ldr	r1, [r7, #0]
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	4798      	blx	r3
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bfe6:	7bfb      	ldrb	r3, [r7, #15]
 800bfe8:	e12d      	b.n	800c246 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	785b      	ldrb	r3, [r3, #1]
 800bfee:	2b03      	cmp	r3, #3
 800bff0:	d007      	beq.n	800c002 <USBD_StdEPReq+0x7a>
 800bff2:	2b03      	cmp	r3, #3
 800bff4:	f300 811b 	bgt.w	800c22e <USBD_StdEPReq+0x2a6>
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d072      	beq.n	800c0e2 <USBD_StdEPReq+0x15a>
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d03a      	beq.n	800c076 <USBD_StdEPReq+0xee>
 800c000:	e115      	b.n	800c22e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c008:	2b02      	cmp	r3, #2
 800c00a:	d002      	beq.n	800c012 <USBD_StdEPReq+0x8a>
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	d015      	beq.n	800c03c <USBD_StdEPReq+0xb4>
 800c010:	e02b      	b.n	800c06a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c012:	7bbb      	ldrb	r3, [r7, #14]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00c      	beq.n	800c032 <USBD_StdEPReq+0xaa>
 800c018:	7bbb      	ldrb	r3, [r7, #14]
 800c01a:	2b80      	cmp	r3, #128	; 0x80
 800c01c:	d009      	beq.n	800c032 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c01e:	7bbb      	ldrb	r3, [r7, #14]
 800c020:	4619      	mov	r1, r3
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f001 f90c 	bl	800d240 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c028:	2180      	movs	r1, #128	; 0x80
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f001 f908 	bl	800d240 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c030:	e020      	b.n	800c074 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c032:	6839      	ldr	r1, [r7, #0]
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 fc1e 	bl	800c876 <USBD_CtlError>
              break;
 800c03a:	e01b      	b.n	800c074 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	885b      	ldrh	r3, [r3, #2]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d10e      	bne.n	800c062 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00b      	beq.n	800c062 <USBD_StdEPReq+0xda>
 800c04a:	7bbb      	ldrb	r3, [r7, #14]
 800c04c:	2b80      	cmp	r3, #128	; 0x80
 800c04e:	d008      	beq.n	800c062 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	88db      	ldrh	r3, [r3, #6]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d104      	bne.n	800c062 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c058:	7bbb      	ldrb	r3, [r7, #14]
 800c05a:	4619      	mov	r1, r3
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f001 f8ef 	bl	800d240 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fccf 	bl	800ca06 <USBD_CtlSendStatus>

              break;
 800c068:	e004      	b.n	800c074 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c06a:	6839      	ldr	r1, [r7, #0]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 fc02 	bl	800c876 <USBD_CtlError>
              break;
 800c072:	bf00      	nop
          }
          break;
 800c074:	e0e0      	b.n	800c238 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c07c:	2b02      	cmp	r3, #2
 800c07e:	d002      	beq.n	800c086 <USBD_StdEPReq+0xfe>
 800c080:	2b03      	cmp	r3, #3
 800c082:	d015      	beq.n	800c0b0 <USBD_StdEPReq+0x128>
 800c084:	e026      	b.n	800c0d4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c086:	7bbb      	ldrb	r3, [r7, #14]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00c      	beq.n	800c0a6 <USBD_StdEPReq+0x11e>
 800c08c:	7bbb      	ldrb	r3, [r7, #14]
 800c08e:	2b80      	cmp	r3, #128	; 0x80
 800c090:	d009      	beq.n	800c0a6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c092:	7bbb      	ldrb	r3, [r7, #14]
 800c094:	4619      	mov	r1, r3
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f001 f8d2 	bl	800d240 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c09c:	2180      	movs	r1, #128	; 0x80
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f001 f8ce 	bl	800d240 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0a4:	e01c      	b.n	800c0e0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 fbe4 	bl	800c876 <USBD_CtlError>
              break;
 800c0ae:	e017      	b.n	800c0e0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	885b      	ldrh	r3, [r3, #2]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d112      	bne.n	800c0de <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0b8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d004      	beq.n	800c0cc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0c2:	7bbb      	ldrb	r3, [r7, #14]
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f001 f8d9 	bl	800d27e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 fc9a 	bl	800ca06 <USBD_CtlSendStatus>
              }
              break;
 800c0d2:	e004      	b.n	800c0de <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c0d4:	6839      	ldr	r1, [r7, #0]
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 fbcd 	bl	800c876 <USBD_CtlError>
              break;
 800c0dc:	e000      	b.n	800c0e0 <USBD_StdEPReq+0x158>
              break;
 800c0de:	bf00      	nop
          }
          break;
 800c0e0:	e0aa      	b.n	800c238 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	d002      	beq.n	800c0f2 <USBD_StdEPReq+0x16a>
 800c0ec:	2b03      	cmp	r3, #3
 800c0ee:	d032      	beq.n	800c156 <USBD_StdEPReq+0x1ce>
 800c0f0:	e097      	b.n	800c222 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0f2:	7bbb      	ldrb	r3, [r7, #14]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d007      	beq.n	800c108 <USBD_StdEPReq+0x180>
 800c0f8:	7bbb      	ldrb	r3, [r7, #14]
 800c0fa:	2b80      	cmp	r3, #128	; 0x80
 800c0fc:	d004      	beq.n	800c108 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c0fe:	6839      	ldr	r1, [r7, #0]
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 fbb8 	bl	800c876 <USBD_CtlError>
                break;
 800c106:	e091      	b.n	800c22c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	da0b      	bge.n	800c128 <USBD_StdEPReq+0x1a0>
 800c110:	7bbb      	ldrb	r3, [r7, #14]
 800c112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c116:	4613      	mov	r3, r2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	4413      	add	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	3310      	adds	r3, #16
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	4413      	add	r3, r2
 800c124:	3304      	adds	r3, #4
 800c126:	e00b      	b.n	800c140 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c128:	7bbb      	ldrb	r3, [r7, #14]
 800c12a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c12e:	4613      	mov	r3, r2
 800c130:	009b      	lsls	r3, r3, #2
 800c132:	4413      	add	r3, r2
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	4413      	add	r3, r2
 800c13e:	3304      	adds	r3, #4
 800c140:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	2200      	movs	r2, #0
 800c146:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	2202      	movs	r2, #2
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fbfb 	bl	800c94a <USBD_CtlSendData>
              break;
 800c154:	e06a      	b.n	800c22c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c156:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	da11      	bge.n	800c182 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	f003 020f 	and.w	r2, r3, #15
 800c164:	6879      	ldr	r1, [r7, #4]
 800c166:	4613      	mov	r3, r2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	4413      	add	r3, r2
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	440b      	add	r3, r1
 800c170:	3318      	adds	r3, #24
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d117      	bne.n	800c1a8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fb7b 	bl	800c876 <USBD_CtlError>
                  break;
 800c180:	e054      	b.n	800c22c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c182:	7bbb      	ldrb	r3, [r7, #14]
 800c184:	f003 020f 	and.w	r2, r3, #15
 800c188:	6879      	ldr	r1, [r7, #4]
 800c18a:	4613      	mov	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4413      	add	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	440b      	add	r3, r1
 800c194:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d104      	bne.n	800c1a8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c19e:	6839      	ldr	r1, [r7, #0]
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 fb68 	bl	800c876 <USBD_CtlError>
                  break;
 800c1a6:	e041      	b.n	800c22c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	da0b      	bge.n	800c1c8 <USBD_StdEPReq+0x240>
 800c1b0:	7bbb      	ldrb	r3, [r7, #14]
 800c1b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	4413      	add	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	3310      	adds	r3, #16
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	e00b      	b.n	800c1e0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1c8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	4413      	add	r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	4413      	add	r3, r2
 800c1de:	3304      	adds	r3, #4
 800c1e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c1e2:	7bbb      	ldrb	r3, [r7, #14]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <USBD_StdEPReq+0x266>
 800c1e8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ea:	2b80      	cmp	r3, #128	; 0x80
 800c1ec:	d103      	bne.n	800c1f6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	601a      	str	r2, [r3, #0]
 800c1f4:	e00e      	b.n	800c214 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c1f6:	7bbb      	ldrb	r3, [r7, #14]
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f001 f85e 	bl	800d2bc <USBD_LL_IsStallEP>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d003      	beq.n	800c20e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	2201      	movs	r2, #1
 800c20a:	601a      	str	r2, [r3, #0]
 800c20c:	e002      	b.n	800c214 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	2200      	movs	r2, #0
 800c212:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	2202      	movs	r2, #2
 800c218:	4619      	mov	r1, r3
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 fb95 	bl	800c94a <USBD_CtlSendData>
              break;
 800c220:	e004      	b.n	800c22c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c222:	6839      	ldr	r1, [r7, #0]
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 fb26 	bl	800c876 <USBD_CtlError>
              break;
 800c22a:	bf00      	nop
          }
          break;
 800c22c:	e004      	b.n	800c238 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c22e:	6839      	ldr	r1, [r7, #0]
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 fb20 	bl	800c876 <USBD_CtlError>
          break;
 800c236:	bf00      	nop
      }
      break;
 800c238:	e004      	b.n	800c244 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fb1a 	bl	800c876 <USBD_CtlError>
      break;
 800c242:	bf00      	nop
  }

  return ret;
 800c244:	7bfb      	ldrb	r3, [r7, #15]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
	...

0800c250 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c25a:	2300      	movs	r3, #0
 800c25c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c25e:	2300      	movs	r3, #0
 800c260:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c262:	2300      	movs	r3, #0
 800c264:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	885b      	ldrh	r3, [r3, #2]
 800c26a:	0a1b      	lsrs	r3, r3, #8
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	3b01      	subs	r3, #1
 800c270:	2b06      	cmp	r3, #6
 800c272:	f200 8128 	bhi.w	800c4c6 <USBD_GetDescriptor+0x276>
 800c276:	a201      	add	r2, pc, #4	; (adr r2, 800c27c <USBD_GetDescriptor+0x2c>)
 800c278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27c:	0800c299 	.word	0x0800c299
 800c280:	0800c2b1 	.word	0x0800c2b1
 800c284:	0800c2f1 	.word	0x0800c2f1
 800c288:	0800c4c7 	.word	0x0800c4c7
 800c28c:	0800c4c7 	.word	0x0800c4c7
 800c290:	0800c467 	.word	0x0800c467
 800c294:	0800c493 	.word	0x0800c493
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	7c12      	ldrb	r2, [r2, #16]
 800c2a4:	f107 0108 	add.w	r1, r7, #8
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	4798      	blx	r3
 800c2ac:	60f8      	str	r0, [r7, #12]
      break;
 800c2ae:	e112      	b.n	800c4d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	7c1b      	ldrb	r3, [r3, #16]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d10d      	bne.n	800c2d4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c0:	f107 0208 	add.w	r2, r7, #8
 800c2c4:	4610      	mov	r0, r2
 800c2c6:	4798      	blx	r3
 800c2c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c2d2:	e100      	b.n	800c4d6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2dc:	f107 0208 	add.w	r2, r7, #8
 800c2e0:	4610      	mov	r0, r2
 800c2e2:	4798      	blx	r3
 800c2e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	2202      	movs	r2, #2
 800c2ec:	701a      	strb	r2, [r3, #0]
      break;
 800c2ee:	e0f2      	b.n	800c4d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	885b      	ldrh	r3, [r3, #2]
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	2b05      	cmp	r3, #5
 800c2f8:	f200 80ac 	bhi.w	800c454 <USBD_GetDescriptor+0x204>
 800c2fc:	a201      	add	r2, pc, #4	; (adr r2, 800c304 <USBD_GetDescriptor+0xb4>)
 800c2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c302:	bf00      	nop
 800c304:	0800c31d 	.word	0x0800c31d
 800c308:	0800c351 	.word	0x0800c351
 800c30c:	0800c385 	.word	0x0800c385
 800c310:	0800c3b9 	.word	0x0800c3b9
 800c314:	0800c3ed 	.word	0x0800c3ed
 800c318:	0800c421 	.word	0x0800c421
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00b      	beq.n	800c340 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	7c12      	ldrb	r2, [r2, #16]
 800c334:	f107 0108 	add.w	r1, r7, #8
 800c338:	4610      	mov	r0, r2
 800c33a:	4798      	blx	r3
 800c33c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c33e:	e091      	b.n	800c464 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fa97 	bl	800c876 <USBD_CtlError>
            err++;
 800c348:	7afb      	ldrb	r3, [r7, #11]
 800c34a:	3301      	adds	r3, #1
 800c34c:	72fb      	strb	r3, [r7, #11]
          break;
 800c34e:	e089      	b.n	800c464 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00b      	beq.n	800c374 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	7c12      	ldrb	r2, [r2, #16]
 800c368:	f107 0108 	add.w	r1, r7, #8
 800c36c:	4610      	mov	r0, r2
 800c36e:	4798      	blx	r3
 800c370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c372:	e077      	b.n	800c464 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c374:	6839      	ldr	r1, [r7, #0]
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 fa7d 	bl	800c876 <USBD_CtlError>
            err++;
 800c37c:	7afb      	ldrb	r3, [r7, #11]
 800c37e:	3301      	adds	r3, #1
 800c380:	72fb      	strb	r3, [r7, #11]
          break;
 800c382:	e06f      	b.n	800c464 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00b      	beq.n	800c3a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	7c12      	ldrb	r2, [r2, #16]
 800c39c:	f107 0108 	add.w	r1, r7, #8
 800c3a0:	4610      	mov	r0, r2
 800c3a2:	4798      	blx	r3
 800c3a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3a6:	e05d      	b.n	800c464 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3a8:	6839      	ldr	r1, [r7, #0]
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 fa63 	bl	800c876 <USBD_CtlError>
            err++;
 800c3b0:	7afb      	ldrb	r3, [r7, #11]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c3b6:	e055      	b.n	800c464 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3be:	691b      	ldr	r3, [r3, #16]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d00b      	beq.n	800c3dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3ca:	691b      	ldr	r3, [r3, #16]
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	7c12      	ldrb	r2, [r2, #16]
 800c3d0:	f107 0108 	add.w	r1, r7, #8
 800c3d4:	4610      	mov	r0, r2
 800c3d6:	4798      	blx	r3
 800c3d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3da:	e043      	b.n	800c464 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fa49 	bl	800c876 <USBD_CtlError>
            err++;
 800c3e4:	7afb      	ldrb	r3, [r7, #11]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ea:	e03b      	b.n	800c464 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3f2:	695b      	ldr	r3, [r3, #20]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d00b      	beq.n	800c410 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3fe:	695b      	ldr	r3, [r3, #20]
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	7c12      	ldrb	r2, [r2, #16]
 800c404:	f107 0108 	add.w	r1, r7, #8
 800c408:	4610      	mov	r0, r2
 800c40a:	4798      	blx	r3
 800c40c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c40e:	e029      	b.n	800c464 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c410:	6839      	ldr	r1, [r7, #0]
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 fa2f 	bl	800c876 <USBD_CtlError>
            err++;
 800c418:	7afb      	ldrb	r3, [r7, #11]
 800c41a:	3301      	adds	r3, #1
 800c41c:	72fb      	strb	r3, [r7, #11]
          break;
 800c41e:	e021      	b.n	800c464 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c426:	699b      	ldr	r3, [r3, #24]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00b      	beq.n	800c444 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c432:	699b      	ldr	r3, [r3, #24]
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	7c12      	ldrb	r2, [r2, #16]
 800c438:	f107 0108 	add.w	r1, r7, #8
 800c43c:	4610      	mov	r0, r2
 800c43e:	4798      	blx	r3
 800c440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c442:	e00f      	b.n	800c464 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c444:	6839      	ldr	r1, [r7, #0]
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fa15 	bl	800c876 <USBD_CtlError>
            err++;
 800c44c:	7afb      	ldrb	r3, [r7, #11]
 800c44e:	3301      	adds	r3, #1
 800c450:	72fb      	strb	r3, [r7, #11]
          break;
 800c452:	e007      	b.n	800c464 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fa0d 	bl	800c876 <USBD_CtlError>
          err++;
 800c45c:	7afb      	ldrb	r3, [r7, #11]
 800c45e:	3301      	adds	r3, #1
 800c460:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c462:	e038      	b.n	800c4d6 <USBD_GetDescriptor+0x286>
 800c464:	e037      	b.n	800c4d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	7c1b      	ldrb	r3, [r3, #16]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d109      	bne.n	800c482 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c476:	f107 0208 	add.w	r2, r7, #8
 800c47a:	4610      	mov	r0, r2
 800c47c:	4798      	blx	r3
 800c47e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c480:	e029      	b.n	800c4d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 f9f6 	bl	800c876 <USBD_CtlError>
        err++;
 800c48a:	7afb      	ldrb	r3, [r7, #11]
 800c48c:	3301      	adds	r3, #1
 800c48e:	72fb      	strb	r3, [r7, #11]
      break;
 800c490:	e021      	b.n	800c4d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	7c1b      	ldrb	r3, [r3, #16]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d10d      	bne.n	800c4b6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a2:	f107 0208 	add.w	r2, r7, #8
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	4798      	blx	r3
 800c4aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	2207      	movs	r2, #7
 800c4b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4b4:	e00f      	b.n	800c4d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c4b6:	6839      	ldr	r1, [r7, #0]
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 f9dc 	bl	800c876 <USBD_CtlError>
        err++;
 800c4be:	7afb      	ldrb	r3, [r7, #11]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	72fb      	strb	r3, [r7, #11]
      break;
 800c4c4:	e007      	b.n	800c4d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c4c6:	6839      	ldr	r1, [r7, #0]
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 f9d4 	bl	800c876 <USBD_CtlError>
      err++;
 800c4ce:	7afb      	ldrb	r3, [r7, #11]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	72fb      	strb	r3, [r7, #11]
      break;
 800c4d4:	bf00      	nop
  }

  if (err != 0U)
 800c4d6:	7afb      	ldrb	r3, [r7, #11]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d11c      	bne.n	800c516 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c4dc:	893b      	ldrh	r3, [r7, #8]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d011      	beq.n	800c506 <USBD_GetDescriptor+0x2b6>
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	88db      	ldrh	r3, [r3, #6]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00d      	beq.n	800c506 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	88da      	ldrh	r2, [r3, #6]
 800c4ee:	893b      	ldrh	r3, [r7, #8]
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	bf28      	it	cs
 800c4f4:	4613      	movcs	r3, r2
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c4fa:	893b      	ldrh	r3, [r7, #8]
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	68f9      	ldr	r1, [r7, #12]
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 fa22 	bl	800c94a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	88db      	ldrh	r3, [r3, #6]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d104      	bne.n	800c518 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fa79 	bl	800ca06 <USBD_CtlSendStatus>
 800c514:	e000      	b.n	800c518 <USBD_GetDescriptor+0x2c8>
    return;
 800c516:	bf00      	nop
    }
  }
}
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop

0800c520 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	889b      	ldrh	r3, [r3, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d130      	bne.n	800c594 <USBD_SetAddress+0x74>
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	88db      	ldrh	r3, [r3, #6]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d12c      	bne.n	800c594 <USBD_SetAddress+0x74>
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	885b      	ldrh	r3, [r3, #2]
 800c53e:	2b7f      	cmp	r3, #127	; 0x7f
 800c540:	d828      	bhi.n	800c594 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	885b      	ldrh	r3, [r3, #2]
 800c546:	b2db      	uxtb	r3, r3
 800c548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c54c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c554:	2b03      	cmp	r3, #3
 800c556:	d104      	bne.n	800c562 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c558:	6839      	ldr	r1, [r7, #0]
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f98b 	bl	800c876 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c560:	e01d      	b.n	800c59e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	7bfa      	ldrb	r2, [r7, #15]
 800c566:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c56a:	7bfb      	ldrb	r3, [r7, #15]
 800c56c:	4619      	mov	r1, r3
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 fecf 	bl	800d312 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 fa46 	bl	800ca06 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c57a:	7bfb      	ldrb	r3, [r7, #15]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d004      	beq.n	800c58a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2202      	movs	r2, #2
 800c584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c588:	e009      	b.n	800c59e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2201      	movs	r2, #1
 800c58e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c592:	e004      	b.n	800c59e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c594:	6839      	ldr	r1, [r7, #0]
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 f96d 	bl	800c876 <USBD_CtlError>
  }
}
 800c59c:	bf00      	nop
 800c59e:	bf00      	nop
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
	...

0800c5a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	885b      	ldrh	r3, [r3, #2]
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	4b41      	ldr	r3, [pc, #260]	; (800c6c0 <USBD_SetConfig+0x118>)
 800c5ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c5bc:	4b40      	ldr	r3, [pc, #256]	; (800c6c0 <USBD_SetConfig+0x118>)
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d904      	bls.n	800c5ce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c5c4:	6839      	ldr	r1, [r7, #0]
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 f955 	bl	800c876 <USBD_CtlError>
 800c5cc:	e075      	b.n	800c6ba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5d4:	2b02      	cmp	r3, #2
 800c5d6:	d002      	beq.n	800c5de <USBD_SetConfig+0x36>
 800c5d8:	2b03      	cmp	r3, #3
 800c5da:	d023      	beq.n	800c624 <USBD_SetConfig+0x7c>
 800c5dc:	e062      	b.n	800c6a4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c5de:	4b38      	ldr	r3, [pc, #224]	; (800c6c0 <USBD_SetConfig+0x118>)
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d01a      	beq.n	800c61c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c5e6:	4b36      	ldr	r3, [pc, #216]	; (800c6c0 <USBD_SetConfig+0x118>)
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2203      	movs	r2, #3
 800c5f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c5f8:	4b31      	ldr	r3, [pc, #196]	; (800c6c0 <USBD_SetConfig+0x118>)
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f7ff f9af 	bl	800b962 <USBD_SetClassConfig>
 800c604:	4603      	mov	r3, r0
 800c606:	2b02      	cmp	r3, #2
 800c608:	d104      	bne.n	800c614 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c60a:	6839      	ldr	r1, [r7, #0]
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 f932 	bl	800c876 <USBD_CtlError>
            return;
 800c612:	e052      	b.n	800c6ba <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 f9f6 	bl	800ca06 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c61a:	e04e      	b.n	800c6ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 f9f2 	bl	800ca06 <USBD_CtlSendStatus>
        break;
 800c622:	e04a      	b.n	800c6ba <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c624:	4b26      	ldr	r3, [pc, #152]	; (800c6c0 <USBD_SetConfig+0x118>)
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d112      	bne.n	800c652 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2202      	movs	r2, #2
 800c630:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c634:	4b22      	ldr	r3, [pc, #136]	; (800c6c0 <USBD_SetConfig+0x118>)
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	461a      	mov	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c63e:	4b20      	ldr	r3, [pc, #128]	; (800c6c0 <USBD_SetConfig+0x118>)
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	4619      	mov	r1, r3
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f7ff f9ab 	bl	800b9a0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 f9db 	bl	800ca06 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c650:	e033      	b.n	800c6ba <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c652:	4b1b      	ldr	r3, [pc, #108]	; (800c6c0 <USBD_SetConfig+0x118>)
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	461a      	mov	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d01d      	beq.n	800c69c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	b2db      	uxtb	r3, r3
 800c666:	4619      	mov	r1, r3
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f7ff f999 	bl	800b9a0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c66e:	4b14      	ldr	r3, [pc, #80]	; (800c6c0 <USBD_SetConfig+0x118>)
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	461a      	mov	r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c678:	4b11      	ldr	r3, [pc, #68]	; (800c6c0 <USBD_SetConfig+0x118>)
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	4619      	mov	r1, r3
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7ff f96f 	bl	800b962 <USBD_SetClassConfig>
 800c684:	4603      	mov	r3, r0
 800c686:	2b02      	cmp	r3, #2
 800c688:	d104      	bne.n	800c694 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c68a:	6839      	ldr	r1, [r7, #0]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 f8f2 	bl	800c876 <USBD_CtlError>
            return;
 800c692:	e012      	b.n	800c6ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 f9b6 	bl	800ca06 <USBD_CtlSendStatus>
        break;
 800c69a:	e00e      	b.n	800c6ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 f9b2 	bl	800ca06 <USBD_CtlSendStatus>
        break;
 800c6a2:	e00a      	b.n	800c6ba <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c6a4:	6839      	ldr	r1, [r7, #0]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f8e5 	bl	800c876 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c6ac:	4b04      	ldr	r3, [pc, #16]	; (800c6c0 <USBD_SetConfig+0x118>)
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f7ff f974 	bl	800b9a0 <USBD_ClrClassConfig>
        break;
 800c6b8:	bf00      	nop
    }
  }
}
 800c6ba:	3708      	adds	r7, #8
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	200007d0 	.word	0x200007d0

0800c6c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	88db      	ldrh	r3, [r3, #6]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d004      	beq.n	800c6e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c6d6:	6839      	ldr	r1, [r7, #0]
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 f8cc 	bl	800c876 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c6de:	e022      	b.n	800c726 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	dc02      	bgt.n	800c6f0 <USBD_GetConfig+0x2c>
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	dc03      	bgt.n	800c6f6 <USBD_GetConfig+0x32>
 800c6ee:	e015      	b.n	800c71c <USBD_GetConfig+0x58>
 800c6f0:	2b03      	cmp	r3, #3
 800c6f2:	d00b      	beq.n	800c70c <USBD_GetConfig+0x48>
 800c6f4:	e012      	b.n	800c71c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	3308      	adds	r3, #8
 800c700:	2201      	movs	r2, #1
 800c702:	4619      	mov	r1, r3
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 f920 	bl	800c94a <USBD_CtlSendData>
        break;
 800c70a:	e00c      	b.n	800c726 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	3304      	adds	r3, #4
 800c710:	2201      	movs	r2, #1
 800c712:	4619      	mov	r1, r3
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 f918 	bl	800c94a <USBD_CtlSendData>
        break;
 800c71a:	e004      	b.n	800c726 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f8a9 	bl	800c876 <USBD_CtlError>
        break;
 800c724:	bf00      	nop
}
 800c726:	bf00      	nop
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b082      	sub	sp, #8
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c73e:	3b01      	subs	r3, #1
 800c740:	2b02      	cmp	r3, #2
 800c742:	d81e      	bhi.n	800c782 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	88db      	ldrh	r3, [r3, #6]
 800c748:	2b02      	cmp	r3, #2
 800c74a:	d004      	beq.n	800c756 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c74c:	6839      	ldr	r1, [r7, #0]
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 f891 	bl	800c876 <USBD_CtlError>
        break;
 800c754:	e01a      	b.n	800c78c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2201      	movs	r2, #1
 800c75a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c762:	2b00      	cmp	r3, #0
 800c764:	d005      	beq.n	800c772 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	f043 0202 	orr.w	r2, r3, #2
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	330c      	adds	r3, #12
 800c776:	2202      	movs	r2, #2
 800c778:	4619      	mov	r1, r3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 f8e5 	bl	800c94a <USBD_CtlSendData>
      break;
 800c780:	e004      	b.n	800c78c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c782:	6839      	ldr	r1, [r7, #0]
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 f876 	bl	800c876 <USBD_CtlError>
      break;
 800c78a:	bf00      	nop
  }
}
 800c78c:	bf00      	nop
 800c78e:	3708      	adds	r7, #8
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	885b      	ldrh	r3, [r3, #2]
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d106      	bne.n	800c7b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f000 f929 	bl	800ca06 <USBD_CtlSendStatus>
  }
}
 800c7b4:	bf00      	nop
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7cc:	3b01      	subs	r3, #1
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d80b      	bhi.n	800c7ea <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	885b      	ldrh	r3, [r3, #2]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d10c      	bne.n	800c7f4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f90f 	bl	800ca06 <USBD_CtlSendStatus>
      }
      break;
 800c7e8:	e004      	b.n	800c7f4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c7ea:	6839      	ldr	r1, [r7, #0]
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 f842 	bl	800c876 <USBD_CtlError>
      break;
 800c7f2:	e000      	b.n	800c7f6 <USBD_ClrFeature+0x3a>
      break;
 800c7f4:	bf00      	nop
  }
}
 800c7f6:	bf00      	nop
 800c7f8:	3708      	adds	r7, #8
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c7fe:	b480      	push	{r7}
 800c800:	b083      	sub	sp, #12
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	781a      	ldrb	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	785a      	ldrb	r2, [r3, #1]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	3302      	adds	r3, #2
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	b29a      	uxth	r2, r3
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	3303      	adds	r3, #3
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	b29b      	uxth	r3, r3
 800c828:	021b      	lsls	r3, r3, #8
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	4413      	add	r3, r2
 800c82e:	b29a      	uxth	r2, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	3304      	adds	r3, #4
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	3305      	adds	r3, #5
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	b29b      	uxth	r3, r3
 800c844:	021b      	lsls	r3, r3, #8
 800c846:	b29b      	uxth	r3, r3
 800c848:	4413      	add	r3, r2
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	3306      	adds	r3, #6
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	b29a      	uxth	r2, r3
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	3307      	adds	r3, #7
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	b29b      	uxth	r3, r3
 800c860:	021b      	lsls	r3, r3, #8
 800c862:	b29b      	uxth	r3, r3
 800c864:	4413      	add	r3, r2
 800c866:	b29a      	uxth	r2, r3
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	80da      	strh	r2, [r3, #6]

}
 800c86c:	bf00      	nop
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	bc80      	pop	{r7}
 800c874:	4770      	bx	lr

0800c876 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b082      	sub	sp, #8
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
 800c87e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c880:	2180      	movs	r1, #128	; 0x80
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fcdc 	bl	800d240 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c888:	2100      	movs	r1, #0
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 fcd8 	bl	800d240 <USBD_LL_StallEP>
}
 800c890:	bf00      	nop
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b086      	sub	sp, #24
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d032      	beq.n	800c914 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f000 f834 	bl	800c91c <USBD_GetLen>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	005b      	lsls	r3, r3, #1
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c8c2:	7dfb      	ldrb	r3, [r7, #23]
 800c8c4:	1c5a      	adds	r2, r3, #1
 800c8c6:	75fa      	strb	r2, [r7, #23]
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	7812      	ldrb	r2, [r2, #0]
 800c8d2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c8d4:	7dfb      	ldrb	r3, [r7, #23]
 800c8d6:	1c5a      	adds	r2, r3, #1
 800c8d8:	75fa      	strb	r2, [r7, #23]
 800c8da:	461a      	mov	r2, r3
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	4413      	add	r3, r2
 800c8e0:	2203      	movs	r2, #3
 800c8e2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c8e4:	e012      	b.n	800c90c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	1c5a      	adds	r2, r3, #1
 800c8ea:	60fa      	str	r2, [r7, #12]
 800c8ec:	7dfa      	ldrb	r2, [r7, #23]
 800c8ee:	1c51      	adds	r1, r2, #1
 800c8f0:	75f9      	strb	r1, [r7, #23]
 800c8f2:	4611      	mov	r1, r2
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	440a      	add	r2, r1
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c8fc:	7dfb      	ldrb	r3, [r7, #23]
 800c8fe:	1c5a      	adds	r2, r3, #1
 800c900:	75fa      	strb	r2, [r7, #23]
 800c902:	461a      	mov	r2, r3
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	4413      	add	r3, r2
 800c908:	2200      	movs	r2, #0
 800c90a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1e8      	bne.n	800c8e6 <USBD_GetString+0x4e>
    }
  }
}
 800c914:	bf00      	nop
 800c916:	3718      	adds	r7, #24
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c924:	2300      	movs	r3, #0
 800c926:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c928:	e005      	b.n	800c936 <USBD_GetLen+0x1a>
  {
    len++;
 800c92a:	7bfb      	ldrb	r3, [r7, #15]
 800c92c:	3301      	adds	r3, #1
 800c92e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	3301      	adds	r3, #1
 800c934:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1f5      	bne.n	800c92a <USBD_GetLen+0xe>
  }

  return len;
 800c93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c940:	4618      	mov	r0, r3
 800c942:	3714      	adds	r7, #20
 800c944:	46bd      	mov	sp, r7
 800c946:	bc80      	pop	{r7}
 800c948:	4770      	bx	lr

0800c94a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b084      	sub	sp, #16
 800c94e:	af00      	add	r7, sp, #0
 800c950:	60f8      	str	r0, [r7, #12]
 800c952:	60b9      	str	r1, [r7, #8]
 800c954:	4613      	mov	r3, r2
 800c956:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2202      	movs	r2, #2
 800c95c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c960:	88fa      	ldrh	r2, [r7, #6]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c966:	88fa      	ldrh	r2, [r7, #6]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c96c:	88fb      	ldrh	r3, [r7, #6]
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	2100      	movs	r1, #0
 800c972:	68f8      	ldr	r0, [r7, #12]
 800c974:	f000 fcec 	bl	800d350 <USBD_LL_Transmit>

  return USBD_OK;
 800c978:	2300      	movs	r3, #0
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c982:	b580      	push	{r7, lr}
 800c984:	b084      	sub	sp, #16
 800c986:	af00      	add	r7, sp, #0
 800c988:	60f8      	str	r0, [r7, #12]
 800c98a:	60b9      	str	r1, [r7, #8]
 800c98c:	4613      	mov	r3, r2
 800c98e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c990:	88fb      	ldrh	r3, [r7, #6]
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	2100      	movs	r1, #0
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f000 fcda 	bl	800d350 <USBD_LL_Transmit>

  return USBD_OK;
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3710      	adds	r7, #16
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b084      	sub	sp, #16
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	60f8      	str	r0, [r7, #12]
 800c9ae:	60b9      	str	r1, [r7, #8]
 800c9b0:	4613      	mov	r3, r2
 800c9b2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2203      	movs	r2, #3
 800c9b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c9bc:	88fa      	ldrh	r2, [r7, #6]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c9c4:	88fa      	ldrh	r2, [r7, #6]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9cc:	88fb      	ldrh	r3, [r7, #6]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	68f8      	ldr	r0, [r7, #12]
 800c9d4:	f000 fcdf 	bl	800d396 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9d8:	2300      	movs	r3, #0
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b084      	sub	sp, #16
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	60f8      	str	r0, [r7, #12]
 800c9ea:	60b9      	str	r1, [r7, #8]
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9f0:	88fb      	ldrh	r3, [r7, #6]
 800c9f2:	68ba      	ldr	r2, [r7, #8]
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	68f8      	ldr	r0, [r7, #12]
 800c9f8:	f000 fccd 	bl	800d396 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b082      	sub	sp, #8
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2204      	movs	r2, #4
 800ca12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca16:	2300      	movs	r3, #0
 800ca18:	2200      	movs	r2, #0
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 fc97 	bl	800d350 <USBD_LL_Transmit>

  return USBD_OK;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2205      	movs	r2, #5
 800ca38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	2200      	movs	r2, #0
 800ca40:	2100      	movs	r1, #0
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 fca7 	bl	800d396 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca48:	2300      	movs	r3, #0
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3708      	adds	r7, #8
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
	...

0800ca54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	4912      	ldr	r1, [pc, #72]	; (800caa4 <MX_USB_DEVICE_Init+0x50>)
 800ca5c:	4812      	ldr	r0, [pc, #72]	; (800caa8 <MX_USB_DEVICE_Init+0x54>)
 800ca5e:	f7fe ff26 	bl	800b8ae <USBD_Init>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d001      	beq.n	800ca6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ca68:	f7f7 ff46 	bl	80048f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ca6c:	490f      	ldr	r1, [pc, #60]	; (800caac <MX_USB_DEVICE_Init+0x58>)
 800ca6e:	480e      	ldr	r0, [pc, #56]	; (800caa8 <MX_USB_DEVICE_Init+0x54>)
 800ca70:	f7fe ff48 	bl	800b904 <USBD_RegisterClass>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d001      	beq.n	800ca7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ca7a:	f7f7 ff3d 	bl	80048f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ca7e:	490c      	ldr	r1, [pc, #48]	; (800cab0 <MX_USB_DEVICE_Init+0x5c>)
 800ca80:	4809      	ldr	r0, [pc, #36]	; (800caa8 <MX_USB_DEVICE_Init+0x54>)
 800ca82:	f7fe fe79 	bl	800b778 <USBD_CDC_RegisterInterface>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d001      	beq.n	800ca90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ca8c:	f7f7 ff34 	bl	80048f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca90:	4805      	ldr	r0, [pc, #20]	; (800caa8 <MX_USB_DEVICE_Init+0x54>)
 800ca92:	f7fe ff50 	bl	800b936 <USBD_Start>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d001      	beq.n	800caa0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ca9c:	f7f7 ff2c 	bl	80048f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800caa0:	bf00      	nop
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	20000158 	.word	0x20000158
 800caa8:	200007e0 	.word	0x200007e0
 800caac:	2000003c 	.word	0x2000003c
 800cab0:	20000140 	.word	0x20000140

0800cab4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cab8:	2200      	movs	r2, #0
 800caba:	4905      	ldr	r1, [pc, #20]	; (800cad0 <CDC_Init_FS+0x1c>)
 800cabc:	4805      	ldr	r0, [pc, #20]	; (800cad4 <CDC_Init_FS+0x20>)
 800cabe:	f7fe fe71 	bl	800b7a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cac2:	4905      	ldr	r1, [pc, #20]	; (800cad8 <CDC_Init_FS+0x24>)
 800cac4:	4803      	ldr	r0, [pc, #12]	; (800cad4 <CDC_Init_FS+0x20>)
 800cac6:	f7fe fe86 	bl	800b7d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800caca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cacc:	4618      	mov	r0, r3
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	200012a4 	.word	0x200012a4
 800cad4:	200007e0 	.word	0x200007e0
 800cad8:	20000aa4 	.word	0x20000aa4

0800cadc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cadc:	b480      	push	{r7}
 800cade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cae0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bc80      	pop	{r7}
 800cae8:	4770      	bx	lr
	...

0800caec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	4603      	mov	r3, r0
 800caf4:	6039      	str	r1, [r7, #0]
 800caf6:	71fb      	strb	r3, [r7, #7]
 800caf8:	4613      	mov	r3, r2
 800cafa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cafc:	79fb      	ldrb	r3, [r7, #7]
 800cafe:	2b23      	cmp	r3, #35	; 0x23
 800cb00:	d85c      	bhi.n	800cbbc <CDC_Control_FS+0xd0>
 800cb02:	a201      	add	r2, pc, #4	; (adr r2, 800cb08 <CDC_Control_FS+0x1c>)
 800cb04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb08:	0800cbbd 	.word	0x0800cbbd
 800cb0c:	0800cbbd 	.word	0x0800cbbd
 800cb10:	0800cbbd 	.word	0x0800cbbd
 800cb14:	0800cbbd 	.word	0x0800cbbd
 800cb18:	0800cbbd 	.word	0x0800cbbd
 800cb1c:	0800cbbd 	.word	0x0800cbbd
 800cb20:	0800cbbd 	.word	0x0800cbbd
 800cb24:	0800cbbd 	.word	0x0800cbbd
 800cb28:	0800cbbd 	.word	0x0800cbbd
 800cb2c:	0800cbbd 	.word	0x0800cbbd
 800cb30:	0800cbbd 	.word	0x0800cbbd
 800cb34:	0800cbbd 	.word	0x0800cbbd
 800cb38:	0800cbbd 	.word	0x0800cbbd
 800cb3c:	0800cbbd 	.word	0x0800cbbd
 800cb40:	0800cbbd 	.word	0x0800cbbd
 800cb44:	0800cbbd 	.word	0x0800cbbd
 800cb48:	0800cbbd 	.word	0x0800cbbd
 800cb4c:	0800cbbd 	.word	0x0800cbbd
 800cb50:	0800cbbd 	.word	0x0800cbbd
 800cb54:	0800cbbd 	.word	0x0800cbbd
 800cb58:	0800cbbd 	.word	0x0800cbbd
 800cb5c:	0800cbbd 	.word	0x0800cbbd
 800cb60:	0800cbbd 	.word	0x0800cbbd
 800cb64:	0800cbbd 	.word	0x0800cbbd
 800cb68:	0800cbbd 	.word	0x0800cbbd
 800cb6c:	0800cbbd 	.word	0x0800cbbd
 800cb70:	0800cbbd 	.word	0x0800cbbd
 800cb74:	0800cbbd 	.word	0x0800cbbd
 800cb78:	0800cbbd 	.word	0x0800cbbd
 800cb7c:	0800cbbd 	.word	0x0800cbbd
 800cb80:	0800cbbd 	.word	0x0800cbbd
 800cb84:	0800cbbd 	.word	0x0800cbbd
 800cb88:	0800cb99 	.word	0x0800cb99
 800cb8c:	0800cbab 	.word	0x0800cbab
 800cb90:	0800cbbd 	.word	0x0800cbbd
 800cb94:	0800cbbd 	.word	0x0800cbbd
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit

    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };

    case CDC_SET_LINE_CODING:
      memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800cb98:	4b0c      	ldr	r3, [pc, #48]	; (800cbcc <CDC_Control_FS+0xe0>)
 800cb9a:	683a      	ldr	r2, [r7, #0]
 800cb9c:	6810      	ldr	r0, [r2, #0]
 800cb9e:	6018      	str	r0, [r3, #0]
 800cba0:	8891      	ldrh	r1, [r2, #4]
 800cba2:	7992      	ldrb	r2, [r2, #6]
 800cba4:	8099      	strh	r1, [r3, #4]
 800cba6:	719a      	strb	r2, [r3, #6]
    break;
 800cba8:	e009      	b.n	800cbbe <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
      memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	4a07      	ldr	r2, [pc, #28]	; (800cbcc <CDC_Control_FS+0xe0>)
 800cbae:	6810      	ldr	r0, [r2, #0]
 800cbb0:	6018      	str	r0, [r3, #0]
 800cbb2:	8891      	ldrh	r1, [r2, #4]
 800cbb4:	7992      	ldrb	r2, [r2, #6]
 800cbb6:	8099      	strh	r1, [r3, #4]
 800cbb8:	719a      	strb	r2, [r3, #6]
    break;
 800cbba:	e000      	b.n	800cbbe <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cbbc:	bf00      	nop
  }

  return (USBD_OK);
 800cbbe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	370c      	adds	r7, #12
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bc80      	pop	{r7}
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop
 800cbcc:	20000150 	.word	0x20000150

0800cbd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cbda:	6879      	ldr	r1, [r7, #4]
 800cbdc:	4805      	ldr	r0, [pc, #20]	; (800cbf4 <CDC_Receive_FS+0x24>)
 800cbde:	f7fe fdfa 	bl	800b7d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cbe2:	4804      	ldr	r0, [pc, #16]	; (800cbf4 <CDC_Receive_FS+0x24>)
 800cbe4:	f7fe fe39 	bl	800b85a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cbe8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	200007e0 	.word	0x200007e0

0800cbf8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	460b      	mov	r3, r1
 800cc02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cc04:	2300      	movs	r3, #0
 800cc06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cc08:	4b0d      	ldr	r3, [pc, #52]	; (800cc40 <CDC_Transmit_FS+0x48>)
 800cc0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d001      	beq.n	800cc1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e00b      	b.n	800cc36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cc1e:	887b      	ldrh	r3, [r7, #2]
 800cc20:	461a      	mov	r2, r3
 800cc22:	6879      	ldr	r1, [r7, #4]
 800cc24:	4806      	ldr	r0, [pc, #24]	; (800cc40 <CDC_Transmit_FS+0x48>)
 800cc26:	f7fe fdbd 	bl	800b7a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cc2a:	4805      	ldr	r0, [pc, #20]	; (800cc40 <CDC_Transmit_FS+0x48>)
 800cc2c:	f7fe fde6 	bl	800b7fc <USBD_CDC_TransmitPacket>
 800cc30:	4603      	mov	r3, r0
 800cc32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cc34:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	200007e0 	.word	0x200007e0

0800cc44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	6039      	str	r1, [r7, #0]
 800cc4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	2212      	movs	r2, #18
 800cc54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cc56:	4b03      	ldr	r3, [pc, #12]	; (800cc64 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bc80      	pop	{r7}
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	20000174 	.word	0x20000174

0800cc68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	4603      	mov	r3, r0
 800cc70:	6039      	str	r1, [r7, #0]
 800cc72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	2204      	movs	r2, #4
 800cc78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc7a:	4b03      	ldr	r3, [pc, #12]	; (800cc88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	370c      	adds	r7, #12
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bc80      	pop	{r7}
 800cc84:	4770      	bx	lr
 800cc86:	bf00      	nop
 800cc88:	20000188 	.word	0x20000188

0800cc8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	4603      	mov	r3, r0
 800cc94:	6039      	str	r1, [r7, #0]
 800cc96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc98:	79fb      	ldrb	r3, [r7, #7]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d105      	bne.n	800ccaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc9e:	683a      	ldr	r2, [r7, #0]
 800cca0:	4907      	ldr	r1, [pc, #28]	; (800ccc0 <USBD_FS_ProductStrDescriptor+0x34>)
 800cca2:	4808      	ldr	r0, [pc, #32]	; (800ccc4 <USBD_FS_ProductStrDescriptor+0x38>)
 800cca4:	f7ff fdf8 	bl	800c898 <USBD_GetString>
 800cca8:	e004      	b.n	800ccb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ccaa:	683a      	ldr	r2, [r7, #0]
 800ccac:	4904      	ldr	r1, [pc, #16]	; (800ccc0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ccae:	4805      	ldr	r0, [pc, #20]	; (800ccc4 <USBD_FS_ProductStrDescriptor+0x38>)
 800ccb0:	f7ff fdf2 	bl	800c898 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccb4:	4b02      	ldr	r3, [pc, #8]	; (800ccc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	20001aa4 	.word	0x20001aa4
 800ccc4:	08012920 	.word	0x08012920

0800ccc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	4603      	mov	r3, r0
 800ccd0:	6039      	str	r1, [r7, #0]
 800ccd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ccd4:	683a      	ldr	r2, [r7, #0]
 800ccd6:	4904      	ldr	r1, [pc, #16]	; (800cce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ccd8:	4804      	ldr	r0, [pc, #16]	; (800ccec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ccda:	f7ff fddd 	bl	800c898 <USBD_GetString>
  return USBD_StrDesc;
 800ccde:	4b02      	ldr	r3, [pc, #8]	; (800cce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	20001aa4 	.word	0x20001aa4
 800ccec:	08012938 	.word	0x08012938

0800ccf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	6039      	str	r1, [r7, #0]
 800ccfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	221a      	movs	r2, #26
 800cd00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cd02:	f000 f843 	bl	800cd8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cd06:	4b02      	ldr	r3, [pc, #8]	; (800cd10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	2000018c 	.word	0x2000018c

0800cd14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	6039      	str	r1, [r7, #0]
 800cd1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd20:	79fb      	ldrb	r3, [r7, #7]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d105      	bne.n	800cd32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	4907      	ldr	r1, [pc, #28]	; (800cd48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd2a:	4808      	ldr	r0, [pc, #32]	; (800cd4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd2c:	f7ff fdb4 	bl	800c898 <USBD_GetString>
 800cd30:	e004      	b.n	800cd3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd32:	683a      	ldr	r2, [r7, #0]
 800cd34:	4904      	ldr	r1, [pc, #16]	; (800cd48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd36:	4805      	ldr	r0, [pc, #20]	; (800cd4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd38:	f7ff fdae 	bl	800c898 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd3c:	4b02      	ldr	r3, [pc, #8]	; (800cd48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3708      	adds	r7, #8
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	20001aa4 	.word	0x20001aa4
 800cd4c:	0801294c 	.word	0x0801294c

0800cd50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	4603      	mov	r3, r0
 800cd58:	6039      	str	r1, [r7, #0]
 800cd5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd5c:	79fb      	ldrb	r3, [r7, #7]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d105      	bne.n	800cd6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd62:	683a      	ldr	r2, [r7, #0]
 800cd64:	4907      	ldr	r1, [pc, #28]	; (800cd84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd66:	4808      	ldr	r0, [pc, #32]	; (800cd88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd68:	f7ff fd96 	bl	800c898 <USBD_GetString>
 800cd6c:	e004      	b.n	800cd78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd6e:	683a      	ldr	r2, [r7, #0]
 800cd70:	4904      	ldr	r1, [pc, #16]	; (800cd84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd72:	4805      	ldr	r0, [pc, #20]	; (800cd88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd74:	f7ff fd90 	bl	800c898 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd78:	4b02      	ldr	r3, [pc, #8]	; (800cd84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	20001aa4 	.word	0x20001aa4
 800cd88:	08012958 	.word	0x08012958

0800cd8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd92:	4b0f      	ldr	r3, [pc, #60]	; (800cdd0 <Get_SerialNum+0x44>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd98:	4b0e      	ldr	r3, [pc, #56]	; (800cdd4 <Get_SerialNum+0x48>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd9e:	4b0e      	ldr	r3, [pc, #56]	; (800cdd8 <Get_SerialNum+0x4c>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	4413      	add	r3, r2
 800cdaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d009      	beq.n	800cdc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cdb2:	2208      	movs	r2, #8
 800cdb4:	4909      	ldr	r1, [pc, #36]	; (800cddc <Get_SerialNum+0x50>)
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f000 f814 	bl	800cde4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cdbc:	2204      	movs	r2, #4
 800cdbe:	4908      	ldr	r1, [pc, #32]	; (800cde0 <Get_SerialNum+0x54>)
 800cdc0:	68b8      	ldr	r0, [r7, #8]
 800cdc2:	f000 f80f 	bl	800cde4 <IntToUnicode>
  }
}
 800cdc6:	bf00      	nop
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	1fff7a10 	.word	0x1fff7a10
 800cdd4:	1fff7a14 	.word	0x1fff7a14
 800cdd8:	1fff7a18 	.word	0x1fff7a18
 800cddc:	2000018e 	.word	0x2000018e
 800cde0:	2000019e 	.word	0x2000019e

0800cde4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b087      	sub	sp, #28
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	60b9      	str	r1, [r7, #8]
 800cdee:	4613      	mov	r3, r2
 800cdf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	75fb      	strb	r3, [r7, #23]
 800cdfa:	e027      	b.n	800ce4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	0f1b      	lsrs	r3, r3, #28
 800ce00:	2b09      	cmp	r3, #9
 800ce02:	d80b      	bhi.n	800ce1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	0f1b      	lsrs	r3, r3, #28
 800ce08:	b2da      	uxtb	r2, r3
 800ce0a:	7dfb      	ldrb	r3, [r7, #23]
 800ce0c:	005b      	lsls	r3, r3, #1
 800ce0e:	4619      	mov	r1, r3
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	440b      	add	r3, r1
 800ce14:	3230      	adds	r2, #48	; 0x30
 800ce16:	b2d2      	uxtb	r2, r2
 800ce18:	701a      	strb	r2, [r3, #0]
 800ce1a:	e00a      	b.n	800ce32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	0f1b      	lsrs	r3, r3, #28
 800ce20:	b2da      	uxtb	r2, r3
 800ce22:	7dfb      	ldrb	r3, [r7, #23]
 800ce24:	005b      	lsls	r3, r3, #1
 800ce26:	4619      	mov	r1, r3
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	440b      	add	r3, r1
 800ce2c:	3237      	adds	r2, #55	; 0x37
 800ce2e:	b2d2      	uxtb	r2, r2
 800ce30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	011b      	lsls	r3, r3, #4
 800ce36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ce38:	7dfb      	ldrb	r3, [r7, #23]
 800ce3a:	005b      	lsls	r3, r3, #1
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	68ba      	ldr	r2, [r7, #8]
 800ce40:	4413      	add	r3, r2
 800ce42:	2200      	movs	r2, #0
 800ce44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ce46:	7dfb      	ldrb	r3, [r7, #23]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	75fb      	strb	r3, [r7, #23]
 800ce4c:	7dfa      	ldrb	r2, [r7, #23]
 800ce4e:	79fb      	ldrb	r3, [r7, #7]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d3d3      	bcc.n	800cdfc <IntToUnicode+0x18>
  }
}
 800ce54:	bf00      	nop
 800ce56:	bf00      	nop
 800ce58:	371c      	adds	r7, #28
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bc80      	pop	{r7}
 800ce5e:	4770      	bx	lr

0800ce60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b08a      	sub	sp, #40	; 0x28
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce68:	f107 0314 	add.w	r3, r7, #20
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	601a      	str	r2, [r3, #0]
 800ce70:	605a      	str	r2, [r3, #4]
 800ce72:	609a      	str	r2, [r3, #8]
 800ce74:	60da      	str	r2, [r3, #12]
 800ce76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce80:	d13a      	bne.n	800cef8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce82:	2300      	movs	r3, #0
 800ce84:	613b      	str	r3, [r7, #16]
 800ce86:	4b1e      	ldr	r3, [pc, #120]	; (800cf00 <HAL_PCD_MspInit+0xa0>)
 800ce88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce8a:	4a1d      	ldr	r2, [pc, #116]	; (800cf00 <HAL_PCD_MspInit+0xa0>)
 800ce8c:	f043 0301 	orr.w	r3, r3, #1
 800ce90:	6313      	str	r3, [r2, #48]	; 0x30
 800ce92:	4b1b      	ldr	r3, [pc, #108]	; (800cf00 <HAL_PCD_MspInit+0xa0>)
 800ce94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce96:	f003 0301 	and.w	r3, r3, #1
 800ce9a:	613b      	str	r3, [r7, #16]
 800ce9c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ce9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cea4:	2302      	movs	r3, #2
 800cea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ceac:	2303      	movs	r3, #3
 800ceae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ceb0:	230a      	movs	r3, #10
 800ceb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ceb4:	f107 0314 	add.w	r3, r7, #20
 800ceb8:	4619      	mov	r1, r3
 800ceba:	4812      	ldr	r0, [pc, #72]	; (800cf04 <HAL_PCD_MspInit+0xa4>)
 800cebc:	f7f9 f966 	bl	800618c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cec0:	4b0f      	ldr	r3, [pc, #60]	; (800cf00 <HAL_PCD_MspInit+0xa0>)
 800cec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cec4:	4a0e      	ldr	r2, [pc, #56]	; (800cf00 <HAL_PCD_MspInit+0xa0>)
 800cec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceca:	6353      	str	r3, [r2, #52]	; 0x34
 800cecc:	2300      	movs	r3, #0
 800cece:	60fb      	str	r3, [r7, #12]
 800ced0:	4b0b      	ldr	r3, [pc, #44]	; (800cf00 <HAL_PCD_MspInit+0xa0>)
 800ced2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ced4:	4a0a      	ldr	r2, [pc, #40]	; (800cf00 <HAL_PCD_MspInit+0xa0>)
 800ced6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ceda:	6453      	str	r3, [r2, #68]	; 0x44
 800cedc:	4b08      	ldr	r3, [pc, #32]	; (800cf00 <HAL_PCD_MspInit+0xa0>)
 800cede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cee4:	60fb      	str	r3, [r7, #12]
 800cee6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cee8:	2200      	movs	r2, #0
 800ceea:	2100      	movs	r1, #0
 800ceec:	2043      	movs	r0, #67	; 0x43
 800ceee:	f7f9 f908 	bl	8006102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cef2:	2043      	movs	r0, #67	; 0x43
 800cef4:	f7f9 f921 	bl	800613a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cef8:	bf00      	nop
 800cefa:	3728      	adds	r7, #40	; 0x28
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	40023800 	.word	0x40023800
 800cf04:	40020000 	.word	0x40020000

0800cf08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	4610      	mov	r0, r2
 800cf20:	f7fe fd51 	bl	800b9c6 <USBD_LL_SetupStage>
}
 800cf24:	bf00      	nop
 800cf26:	3708      	adds	r7, #8
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	460b      	mov	r3, r1
 800cf36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800cf3e:	78fa      	ldrb	r2, [r7, #3]
 800cf40:	6879      	ldr	r1, [r7, #4]
 800cf42:	4613      	mov	r3, r2
 800cf44:	00db      	lsls	r3, r3, #3
 800cf46:	1a9b      	subs	r3, r3, r2
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	440b      	add	r3, r1
 800cf4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	78fb      	ldrb	r3, [r7, #3]
 800cf54:	4619      	mov	r1, r3
 800cf56:	f7fe fd83 	bl	800ba60 <USBD_LL_DataOutStage>
}
 800cf5a:	bf00      	nop
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b082      	sub	sp, #8
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800cf74:	78fa      	ldrb	r2, [r7, #3]
 800cf76:	6879      	ldr	r1, [r7, #4]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	00db      	lsls	r3, r3, #3
 800cf7c:	1a9b      	subs	r3, r3, r2
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	440b      	add	r3, r1
 800cf82:	3348      	adds	r3, #72	; 0x48
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	78fb      	ldrb	r3, [r7, #3]
 800cf88:	4619      	mov	r1, r3
 800cf8a:	f7fe fdda 	bl	800bb42 <USBD_LL_DataInStage>
}
 800cf8e:	bf00      	nop
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b082      	sub	sp, #8
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7fe feea 	bl	800bd7e <USBD_LL_SOF>
}
 800cfaa:	bf00      	nop
 800cfac:	3708      	adds	r7, #8
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b084      	sub	sp, #16
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d102      	bne.n	800cfcc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	73fb      	strb	r3, [r7, #15]
 800cfca:	e008      	b.n	800cfde <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	d102      	bne.n	800cfda <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	73fb      	strb	r3, [r7, #15]
 800cfd8:	e001      	b.n	800cfde <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cfda:	f7f7 fc8d 	bl	80048f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cfe4:	7bfa      	ldrb	r2, [r7, #15]
 800cfe6:	4611      	mov	r1, r2
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7fe fe90 	bl	800bd0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7fe fe49 	bl	800bc8c <USBD_LL_Reset>
}
 800cffa:	bf00      	nop
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
	...

0800d004 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d012:	4618      	mov	r0, r3
 800d014:	f7fe fe8a 	bl	800bd2c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	6812      	ldr	r2, [r2, #0]
 800d026:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d02a:	f043 0301 	orr.w	r3, r3, #1
 800d02e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6a1b      	ldr	r3, [r3, #32]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d005      	beq.n	800d044 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d038:	4b04      	ldr	r3, [pc, #16]	; (800d04c <HAL_PCD_SuspendCallback+0x48>)
 800d03a:	691b      	ldr	r3, [r3, #16]
 800d03c:	4a03      	ldr	r2, [pc, #12]	; (800d04c <HAL_PCD_SuspendCallback+0x48>)
 800d03e:	f043 0306 	orr.w	r3, r3, #6
 800d042:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d044:	bf00      	nop
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	e000ed00 	.word	0xe000ed00

0800d050 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fe fe78 	bl	800bd54 <USBD_LL_Resume>
}
 800d064:	bf00      	nop
 800d066:	3708      	adds	r7, #8
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	460b      	mov	r3, r1
 800d076:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d07e:	78fa      	ldrb	r2, [r7, #3]
 800d080:	4611      	mov	r1, r2
 800d082:	4618      	mov	r0, r3
 800d084:	f7fe fea1 	bl	800bdca <USBD_LL_IsoOUTIncomplete>
}
 800d088:	bf00      	nop
 800d08a:	3708      	adds	r7, #8
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	460b      	mov	r3, r1
 800d09a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d0a2:	78fa      	ldrb	r2, [r7, #3]
 800d0a4:	4611      	mov	r1, r2
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7fe fe83 	bl	800bdb2 <USBD_LL_IsoINIncomplete>
}
 800d0ac:	bf00      	nop
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fe fe8d 	bl	800bde2 <USBD_LL_DevConnected>
}
 800d0c8:	bf00      	nop
 800d0ca:	3708      	adds	r7, #8
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7fe fe89 	bl	800bdf6 <USBD_LL_DevDisconnected>
}
 800d0e4:	bf00      	nop
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d139      	bne.n	800d170 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d0fc:	4a1f      	ldr	r2, [pc, #124]	; (800d17c <USBD_LL_Init+0x90>)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	4a1d      	ldr	r2, [pc, #116]	; (800d17c <USBD_LL_Init+0x90>)
 800d108:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d10c:	4b1b      	ldr	r3, [pc, #108]	; (800d17c <USBD_LL_Init+0x90>)
 800d10e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d112:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d114:	4b19      	ldr	r3, [pc, #100]	; (800d17c <USBD_LL_Init+0x90>)
 800d116:	2204      	movs	r2, #4
 800d118:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d11a:	4b18      	ldr	r3, [pc, #96]	; (800d17c <USBD_LL_Init+0x90>)
 800d11c:	2202      	movs	r2, #2
 800d11e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d120:	4b16      	ldr	r3, [pc, #88]	; (800d17c <USBD_LL_Init+0x90>)
 800d122:	2200      	movs	r2, #0
 800d124:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d126:	4b15      	ldr	r3, [pc, #84]	; (800d17c <USBD_LL_Init+0x90>)
 800d128:	2202      	movs	r2, #2
 800d12a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d12c:	4b13      	ldr	r3, [pc, #76]	; (800d17c <USBD_LL_Init+0x90>)
 800d12e:	2200      	movs	r2, #0
 800d130:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d132:	4b12      	ldr	r3, [pc, #72]	; (800d17c <USBD_LL_Init+0x90>)
 800d134:	2200      	movs	r2, #0
 800d136:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d138:	4b10      	ldr	r3, [pc, #64]	; (800d17c <USBD_LL_Init+0x90>)
 800d13a:	2200      	movs	r2, #0
 800d13c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d13e:	4b0f      	ldr	r3, [pc, #60]	; (800d17c <USBD_LL_Init+0x90>)
 800d140:	2200      	movs	r2, #0
 800d142:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d144:	480d      	ldr	r0, [pc, #52]	; (800d17c <USBD_LL_Init+0x90>)
 800d146:	f7fa f9dd 	bl	8007504 <HAL_PCD_Init>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d001      	beq.n	800d154 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800d150:	f7f7 fbd2 	bl	80048f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d154:	2180      	movs	r1, #128	; 0x80
 800d156:	4809      	ldr	r0, [pc, #36]	; (800d17c <USBD_LL_Init+0x90>)
 800d158:	f7fb fb1a 	bl	8008790 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d15c:	2240      	movs	r2, #64	; 0x40
 800d15e:	2100      	movs	r1, #0
 800d160:	4806      	ldr	r0, [pc, #24]	; (800d17c <USBD_LL_Init+0x90>)
 800d162:	f7fb facf 	bl	8008704 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d166:	2280      	movs	r2, #128	; 0x80
 800d168:	2101      	movs	r1, #1
 800d16a:	4804      	ldr	r0, [pc, #16]	; (800d17c <USBD_LL_Init+0x90>)
 800d16c:	f7fb faca 	bl	8008704 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	20001ca4 	.word	0x20001ca4

0800d180 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d188:	2300      	movs	r3, #0
 800d18a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d18c:	2300      	movs	r3, #0
 800d18e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d196:	4618      	mov	r0, r3
 800d198:	f7fa fad1 	bl	800773e <HAL_PCD_Start>
 800d19c:	4603      	mov	r3, r0
 800d19e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1a0:	7bfb      	ldrb	r3, [r7, #15]
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f000 f92e 	bl	800d404 <USBD_Get_USB_Status>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}

0800d1b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b084      	sub	sp, #16
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
 800d1be:	4608      	mov	r0, r1
 800d1c0:	4611      	mov	r1, r2
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	70fb      	strb	r3, [r7, #3]
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	70bb      	strb	r3, [r7, #2]
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d1de:	78bb      	ldrb	r3, [r7, #2]
 800d1e0:	883a      	ldrh	r2, [r7, #0]
 800d1e2:	78f9      	ldrb	r1, [r7, #3]
 800d1e4:	f7fa fe96 	bl	8007f14 <HAL_PCD_EP_Open>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1ec:	7bfb      	ldrb	r3, [r7, #15]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f000 f908 	bl	800d404 <USBD_Get_USB_Status>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b084      	sub	sp, #16
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
 800d20a:	460b      	mov	r3, r1
 800d20c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d20e:	2300      	movs	r3, #0
 800d210:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d212:	2300      	movs	r3, #0
 800d214:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d21c:	78fa      	ldrb	r2, [r7, #3]
 800d21e:	4611      	mov	r1, r2
 800d220:	4618      	mov	r0, r3
 800d222:	f7fa fedf 	bl	8007fe4 <HAL_PCD_EP_Close>
 800d226:	4603      	mov	r3, r0
 800d228:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d22a:	7bfb      	ldrb	r3, [r7, #15]
 800d22c:	4618      	mov	r0, r3
 800d22e:	f000 f8e9 	bl	800d404 <USBD_Get_USB_Status>
 800d232:	4603      	mov	r3, r0
 800d234:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d236:	7bbb      	ldrb	r3, [r7, #14]
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	460b      	mov	r3, r1
 800d24a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d24c:	2300      	movs	r3, #0
 800d24e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d250:	2300      	movs	r3, #0
 800d252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d25a:	78fa      	ldrb	r2, [r7, #3]
 800d25c:	4611      	mov	r1, r2
 800d25e:	4618      	mov	r0, r3
 800d260:	f7fa ffb6 	bl	80081d0 <HAL_PCD_EP_SetStall>
 800d264:	4603      	mov	r3, r0
 800d266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d268:	7bfb      	ldrb	r3, [r7, #15]
 800d26a:	4618      	mov	r0, r3
 800d26c:	f000 f8ca 	bl	800d404 <USBD_Get_USB_Status>
 800d270:	4603      	mov	r3, r0
 800d272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d274:	7bbb      	ldrb	r3, [r7, #14]
}
 800d276:	4618      	mov	r0, r3
 800d278:	3710      	adds	r7, #16
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}

0800d27e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d27e:	b580      	push	{r7, lr}
 800d280:	b084      	sub	sp, #16
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
 800d286:	460b      	mov	r3, r1
 800d288:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d28a:	2300      	movs	r3, #0
 800d28c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d28e:	2300      	movs	r3, #0
 800d290:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d298:	78fa      	ldrb	r2, [r7, #3]
 800d29a:	4611      	mov	r1, r2
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7fa fffb 	bl	8008298 <HAL_PCD_EP_ClrStall>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2a6:	7bfb      	ldrb	r3, [r7, #15]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f000 f8ab 	bl	800d404 <USBD_Get_USB_Status>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3710      	adds	r7, #16
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d2d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	da0b      	bge.n	800d2f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d2d8:	78fb      	ldrb	r3, [r7, #3]
 800d2da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d2de:	68f9      	ldr	r1, [r7, #12]
 800d2e0:	4613      	mov	r3, r2
 800d2e2:	00db      	lsls	r3, r3, #3
 800d2e4:	1a9b      	subs	r3, r3, r2
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	440b      	add	r3, r1
 800d2ea:	333e      	adds	r3, #62	; 0x3e
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	e00b      	b.n	800d308 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d2f0:	78fb      	ldrb	r3, [r7, #3]
 800d2f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d2f6:	68f9      	ldr	r1, [r7, #12]
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	00db      	lsls	r3, r3, #3
 800d2fc:	1a9b      	subs	r3, r3, r2
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	440b      	add	r3, r1
 800d302:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d306:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3714      	adds	r7, #20
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bc80      	pop	{r7}
 800d310:	4770      	bx	lr

0800d312 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d312:	b580      	push	{r7, lr}
 800d314:	b084      	sub	sp, #16
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
 800d31a:	460b      	mov	r3, r1
 800d31c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d31e:	2300      	movs	r3, #0
 800d320:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d322:	2300      	movs	r3, #0
 800d324:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d32c:	78fa      	ldrb	r2, [r7, #3]
 800d32e:	4611      	mov	r1, r2
 800d330:	4618      	mov	r0, r3
 800d332:	f7fa fdca 	bl	8007eca <HAL_PCD_SetAddress>
 800d336:	4603      	mov	r3, r0
 800d338:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d33a:	7bfb      	ldrb	r3, [r7, #15]
 800d33c:	4618      	mov	r0, r3
 800d33e:	f000 f861 	bl	800d404 <USBD_Get_USB_Status>
 800d342:	4603      	mov	r3, r0
 800d344:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d346:	7bbb      	ldrb	r3, [r7, #14]
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	607a      	str	r2, [r7, #4]
 800d35a:	461a      	mov	r2, r3
 800d35c:	460b      	mov	r3, r1
 800d35e:	72fb      	strb	r3, [r7, #11]
 800d360:	4613      	mov	r3, r2
 800d362:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d364:	2300      	movs	r3, #0
 800d366:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d368:	2300      	movs	r3, #0
 800d36a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d372:	893b      	ldrh	r3, [r7, #8]
 800d374:	7af9      	ldrb	r1, [r7, #11]
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	f7fa fee0 	bl	800813c <HAL_PCD_EP_Transmit>
 800d37c:	4603      	mov	r3, r0
 800d37e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d380:	7dfb      	ldrb	r3, [r7, #23]
 800d382:	4618      	mov	r0, r3
 800d384:	f000 f83e 	bl	800d404 <USBD_Get_USB_Status>
 800d388:	4603      	mov	r3, r0
 800d38a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d38c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3718      	adds	r7, #24
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}

0800d396 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d396:	b580      	push	{r7, lr}
 800d398:	b086      	sub	sp, #24
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	60f8      	str	r0, [r7, #12]
 800d39e:	607a      	str	r2, [r7, #4]
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	72fb      	strb	r3, [r7, #11]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d3b8:	893b      	ldrh	r3, [r7, #8]
 800d3ba:	7af9      	ldrb	r1, [r7, #11]
 800d3bc:	687a      	ldr	r2, [r7, #4]
 800d3be:	f7fa fe5b 	bl	8008078 <HAL_PCD_EP_Receive>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3c6:	7dfb      	ldrb	r3, [r7, #23]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f000 f81b 	bl	800d404 <USBD_Get_USB_Status>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d3d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3718      	adds	r7, #24
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3ee:	78fa      	ldrb	r2, [r7, #3]
 800d3f0:	4611      	mov	r1, r2
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7fa fe8b 	bl	800810e <HAL_PCD_EP_GetRxCount>
 800d3f8:	4603      	mov	r3, r0
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3708      	adds	r7, #8
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
	...

0800d404 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d404:	b480      	push	{r7}
 800d406:	b085      	sub	sp, #20
 800d408:	af00      	add	r7, sp, #0
 800d40a:	4603      	mov	r3, r0
 800d40c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d40e:	2300      	movs	r3, #0
 800d410:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d412:	79fb      	ldrb	r3, [r7, #7]
 800d414:	2b03      	cmp	r3, #3
 800d416:	d817      	bhi.n	800d448 <USBD_Get_USB_Status+0x44>
 800d418:	a201      	add	r2, pc, #4	; (adr r2, 800d420 <USBD_Get_USB_Status+0x1c>)
 800d41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d41e:	bf00      	nop
 800d420:	0800d431 	.word	0x0800d431
 800d424:	0800d437 	.word	0x0800d437
 800d428:	0800d43d 	.word	0x0800d43d
 800d42c:	0800d443 	.word	0x0800d443
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d430:	2300      	movs	r3, #0
 800d432:	73fb      	strb	r3, [r7, #15]
    break;
 800d434:	e00b      	b.n	800d44e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d436:	2302      	movs	r3, #2
 800d438:	73fb      	strb	r3, [r7, #15]
    break;
 800d43a:	e008      	b.n	800d44e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d43c:	2301      	movs	r3, #1
 800d43e:	73fb      	strb	r3, [r7, #15]
    break;
 800d440:	e005      	b.n	800d44e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d442:	2302      	movs	r3, #2
 800d444:	73fb      	strb	r3, [r7, #15]
    break;
 800d446:	e002      	b.n	800d44e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d448:	2302      	movs	r3, #2
 800d44a:	73fb      	strb	r3, [r7, #15]
    break;
 800d44c:	bf00      	nop
  }
  return usb_status;
 800d44e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3714      	adds	r7, #20
 800d454:	46bd      	mov	sp, r7
 800d456:	bc80      	pop	{r7}
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop

0800d45c <cos>:
 800d45c:	b530      	push	{r4, r5, lr}
 800d45e:	4a1e      	ldr	r2, [pc, #120]	; (800d4d8 <cos+0x7c>)
 800d460:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d464:	4293      	cmp	r3, r2
 800d466:	b087      	sub	sp, #28
 800d468:	dc04      	bgt.n	800d474 <cos+0x18>
 800d46a:	2200      	movs	r2, #0
 800d46c:	2300      	movs	r3, #0
 800d46e:	f001 f933 	bl	800e6d8 <__kernel_cos>
 800d472:	e006      	b.n	800d482 <cos+0x26>
 800d474:	4a19      	ldr	r2, [pc, #100]	; (800d4dc <cos+0x80>)
 800d476:	4293      	cmp	r3, r2
 800d478:	dd05      	ble.n	800d486 <cos+0x2a>
 800d47a:	4602      	mov	r2, r0
 800d47c:	460b      	mov	r3, r1
 800d47e:	f7f2 feaf 	bl	80001e0 <__aeabi_dsub>
 800d482:	b007      	add	sp, #28
 800d484:	bd30      	pop	{r4, r5, pc}
 800d486:	aa02      	add	r2, sp, #8
 800d488:	f000 fa5a 	bl	800d940 <__ieee754_rem_pio2>
 800d48c:	f000 0003 	and.w	r0, r0, #3
 800d490:	2801      	cmp	r0, #1
 800d492:	d007      	beq.n	800d4a4 <cos+0x48>
 800d494:	2802      	cmp	r0, #2
 800d496:	d00f      	beq.n	800d4b8 <cos+0x5c>
 800d498:	b9a8      	cbnz	r0, 800d4c6 <cos+0x6a>
 800d49a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d49e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4a2:	e7e4      	b.n	800d46e <cos+0x12>
 800d4a4:	9000      	str	r0, [sp, #0]
 800d4a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4ae:	f001 fd1b 	bl	800eee8 <__kernel_sin>
 800d4b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d4b6:	e7e4      	b.n	800d482 <cos+0x26>
 800d4b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4c0:	f001 f90a 	bl	800e6d8 <__kernel_cos>
 800d4c4:	e7f5      	b.n	800d4b2 <cos+0x56>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4cc:	9300      	str	r3, [sp, #0]
 800d4ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4d2:	f001 fd09 	bl	800eee8 <__kernel_sin>
 800d4d6:	e7d4      	b.n	800d482 <cos+0x26>
 800d4d8:	3fe921fb 	.word	0x3fe921fb
 800d4dc:	7fefffff 	.word	0x7fefffff

0800d4e0 <sin>:
 800d4e0:	b530      	push	{r4, r5, lr}
 800d4e2:	4a20      	ldr	r2, [pc, #128]	; (800d564 <sin+0x84>)
 800d4e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	b087      	sub	sp, #28
 800d4ec:	dc06      	bgt.n	800d4fc <sin+0x1c>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	9300      	str	r3, [sp, #0]
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	f001 fcf7 	bl	800eee8 <__kernel_sin>
 800d4fa:	e006      	b.n	800d50a <sin+0x2a>
 800d4fc:	4a1a      	ldr	r2, [pc, #104]	; (800d568 <sin+0x88>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	dd05      	ble.n	800d50e <sin+0x2e>
 800d502:	4602      	mov	r2, r0
 800d504:	460b      	mov	r3, r1
 800d506:	f7f2 fe6b 	bl	80001e0 <__aeabi_dsub>
 800d50a:	b007      	add	sp, #28
 800d50c:	bd30      	pop	{r4, r5, pc}
 800d50e:	aa02      	add	r2, sp, #8
 800d510:	f000 fa16 	bl	800d940 <__ieee754_rem_pio2>
 800d514:	f000 0003 	and.w	r0, r0, #3
 800d518:	2801      	cmp	r0, #1
 800d51a:	d009      	beq.n	800d530 <sin+0x50>
 800d51c:	2802      	cmp	r0, #2
 800d51e:	d00e      	beq.n	800d53e <sin+0x5e>
 800d520:	b9c0      	cbnz	r0, 800d554 <sin+0x74>
 800d522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d526:	2301      	movs	r3, #1
 800d528:	9300      	str	r3, [sp, #0]
 800d52a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d52e:	e7e2      	b.n	800d4f6 <sin+0x16>
 800d530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d538:	f001 f8ce 	bl	800e6d8 <__kernel_cos>
 800d53c:	e7e5      	b.n	800d50a <sin+0x2a>
 800d53e:	2301      	movs	r3, #1
 800d540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d544:	9300      	str	r3, [sp, #0]
 800d546:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d54a:	f001 fccd 	bl	800eee8 <__kernel_sin>
 800d54e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d552:	e7da      	b.n	800d50a <sin+0x2a>
 800d554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d55c:	f001 f8bc 	bl	800e6d8 <__kernel_cos>
 800d560:	e7f5      	b.n	800d54e <sin+0x6e>
 800d562:	bf00      	nop
 800d564:	3fe921fb 	.word	0x3fe921fb
 800d568:	7fefffff 	.word	0x7fefffff

0800d56c <atanf>:
 800d56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d570:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800d574:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800d578:	4604      	mov	r4, r0
 800d57a:	4680      	mov	r8, r0
 800d57c:	db0e      	blt.n	800d59c <atanf+0x30>
 800d57e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d582:	dd04      	ble.n	800d58e <atanf+0x22>
 800d584:	4601      	mov	r1, r0
 800d586:	f7f3 fb31 	bl	8000bec <__addsf3>
 800d58a:	4604      	mov	r4, r0
 800d58c:	e003      	b.n	800d596 <atanf+0x2a>
 800d58e:	2800      	cmp	r0, #0
 800d590:	f300 80ce 	bgt.w	800d730 <atanf+0x1c4>
 800d594:	4c67      	ldr	r4, [pc, #412]	; (800d734 <atanf+0x1c8>)
 800d596:	4620      	mov	r0, r4
 800d598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d59c:	4b66      	ldr	r3, [pc, #408]	; (800d738 <atanf+0x1cc>)
 800d59e:	429d      	cmp	r5, r3
 800d5a0:	dc0e      	bgt.n	800d5c0 <atanf+0x54>
 800d5a2:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800d5a6:	da08      	bge.n	800d5ba <atanf+0x4e>
 800d5a8:	4964      	ldr	r1, [pc, #400]	; (800d73c <atanf+0x1d0>)
 800d5aa:	f7f3 fb1f 	bl	8000bec <__addsf3>
 800d5ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d5b2:	f7f3 fddf 	bl	8001174 <__aeabi_fcmpgt>
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	d1ed      	bne.n	800d596 <atanf+0x2a>
 800d5ba:	f04f 36ff 	mov.w	r6, #4294967295
 800d5be:	e01c      	b.n	800d5fa <atanf+0x8e>
 800d5c0:	f000 f914 	bl	800d7ec <fabsf>
 800d5c4:	4b5e      	ldr	r3, [pc, #376]	; (800d740 <atanf+0x1d4>)
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	429d      	cmp	r5, r3
 800d5ca:	dc7c      	bgt.n	800d6c6 <atanf+0x15a>
 800d5cc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800d5d0:	429d      	cmp	r5, r3
 800d5d2:	dc67      	bgt.n	800d6a4 <atanf+0x138>
 800d5d4:	4601      	mov	r1, r0
 800d5d6:	f7f3 fb09 	bl	8000bec <__addsf3>
 800d5da:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d5de:	f7f3 fb03 	bl	8000be8 <__aeabi_fsub>
 800d5e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d5e6:	4605      	mov	r5, r0
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	f7f3 faff 	bl	8000bec <__addsf3>
 800d5ee:	4601      	mov	r1, r0
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	f7f3 fcb7 	bl	8000f64 <__aeabi_fdiv>
 800d5f6:	2600      	movs	r6, #0
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	4621      	mov	r1, r4
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	f7f3 fbfd 	bl	8000dfc <__aeabi_fmul>
 800d602:	4601      	mov	r1, r0
 800d604:	4607      	mov	r7, r0
 800d606:	f7f3 fbf9 	bl	8000dfc <__aeabi_fmul>
 800d60a:	4605      	mov	r5, r0
 800d60c:	494d      	ldr	r1, [pc, #308]	; (800d744 <atanf+0x1d8>)
 800d60e:	f7f3 fbf5 	bl	8000dfc <__aeabi_fmul>
 800d612:	494d      	ldr	r1, [pc, #308]	; (800d748 <atanf+0x1dc>)
 800d614:	f7f3 faea 	bl	8000bec <__addsf3>
 800d618:	4629      	mov	r1, r5
 800d61a:	f7f3 fbef 	bl	8000dfc <__aeabi_fmul>
 800d61e:	494b      	ldr	r1, [pc, #300]	; (800d74c <atanf+0x1e0>)
 800d620:	f7f3 fae4 	bl	8000bec <__addsf3>
 800d624:	4629      	mov	r1, r5
 800d626:	f7f3 fbe9 	bl	8000dfc <__aeabi_fmul>
 800d62a:	4949      	ldr	r1, [pc, #292]	; (800d750 <atanf+0x1e4>)
 800d62c:	f7f3 fade 	bl	8000bec <__addsf3>
 800d630:	4629      	mov	r1, r5
 800d632:	f7f3 fbe3 	bl	8000dfc <__aeabi_fmul>
 800d636:	4947      	ldr	r1, [pc, #284]	; (800d754 <atanf+0x1e8>)
 800d638:	f7f3 fad8 	bl	8000bec <__addsf3>
 800d63c:	4629      	mov	r1, r5
 800d63e:	f7f3 fbdd 	bl	8000dfc <__aeabi_fmul>
 800d642:	4945      	ldr	r1, [pc, #276]	; (800d758 <atanf+0x1ec>)
 800d644:	f7f3 fad2 	bl	8000bec <__addsf3>
 800d648:	4639      	mov	r1, r7
 800d64a:	f7f3 fbd7 	bl	8000dfc <__aeabi_fmul>
 800d64e:	4943      	ldr	r1, [pc, #268]	; (800d75c <atanf+0x1f0>)
 800d650:	4607      	mov	r7, r0
 800d652:	4628      	mov	r0, r5
 800d654:	f7f3 fbd2 	bl	8000dfc <__aeabi_fmul>
 800d658:	4941      	ldr	r1, [pc, #260]	; (800d760 <atanf+0x1f4>)
 800d65a:	f7f3 fac5 	bl	8000be8 <__aeabi_fsub>
 800d65e:	4629      	mov	r1, r5
 800d660:	f7f3 fbcc 	bl	8000dfc <__aeabi_fmul>
 800d664:	493f      	ldr	r1, [pc, #252]	; (800d764 <atanf+0x1f8>)
 800d666:	f7f3 fabf 	bl	8000be8 <__aeabi_fsub>
 800d66a:	4629      	mov	r1, r5
 800d66c:	f7f3 fbc6 	bl	8000dfc <__aeabi_fmul>
 800d670:	493d      	ldr	r1, [pc, #244]	; (800d768 <atanf+0x1fc>)
 800d672:	f7f3 fab9 	bl	8000be8 <__aeabi_fsub>
 800d676:	4629      	mov	r1, r5
 800d678:	f7f3 fbc0 	bl	8000dfc <__aeabi_fmul>
 800d67c:	493b      	ldr	r1, [pc, #236]	; (800d76c <atanf+0x200>)
 800d67e:	f7f3 fab3 	bl	8000be8 <__aeabi_fsub>
 800d682:	4629      	mov	r1, r5
 800d684:	f7f3 fbba 	bl	8000dfc <__aeabi_fmul>
 800d688:	4601      	mov	r1, r0
 800d68a:	4638      	mov	r0, r7
 800d68c:	f7f3 faae 	bl	8000bec <__addsf3>
 800d690:	4621      	mov	r1, r4
 800d692:	f7f3 fbb3 	bl	8000dfc <__aeabi_fmul>
 800d696:	1c73      	adds	r3, r6, #1
 800d698:	4601      	mov	r1, r0
 800d69a:	d133      	bne.n	800d704 <atanf+0x198>
 800d69c:	4620      	mov	r0, r4
 800d69e:	f7f3 faa3 	bl	8000be8 <__aeabi_fsub>
 800d6a2:	e772      	b.n	800d58a <atanf+0x1e>
 800d6a4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d6a8:	f7f3 fa9e 	bl	8000be8 <__aeabi_fsub>
 800d6ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d6b0:	4605      	mov	r5, r0
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	f7f3 fa9a 	bl	8000bec <__addsf3>
 800d6b8:	4601      	mov	r1, r0
 800d6ba:	4628      	mov	r0, r5
 800d6bc:	f7f3 fc52 	bl	8000f64 <__aeabi_fdiv>
 800d6c0:	2601      	movs	r6, #1
 800d6c2:	4604      	mov	r4, r0
 800d6c4:	e799      	b.n	800d5fa <atanf+0x8e>
 800d6c6:	4b2a      	ldr	r3, [pc, #168]	; (800d770 <atanf+0x204>)
 800d6c8:	429d      	cmp	r5, r3
 800d6ca:	dc14      	bgt.n	800d6f6 <atanf+0x18a>
 800d6cc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800d6d0:	f7f3 fa8a 	bl	8000be8 <__aeabi_fsub>
 800d6d4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800d6d8:	4605      	mov	r5, r0
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f7f3 fb8e 	bl	8000dfc <__aeabi_fmul>
 800d6e0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d6e4:	f7f3 fa82 	bl	8000bec <__addsf3>
 800d6e8:	4601      	mov	r1, r0
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	f7f3 fc3a 	bl	8000f64 <__aeabi_fdiv>
 800d6f0:	2602      	movs	r6, #2
 800d6f2:	4604      	mov	r4, r0
 800d6f4:	e781      	b.n	800d5fa <atanf+0x8e>
 800d6f6:	4601      	mov	r1, r0
 800d6f8:	481e      	ldr	r0, [pc, #120]	; (800d774 <atanf+0x208>)
 800d6fa:	f7f3 fc33 	bl	8000f64 <__aeabi_fdiv>
 800d6fe:	2603      	movs	r6, #3
 800d700:	4604      	mov	r4, r0
 800d702:	e77a      	b.n	800d5fa <atanf+0x8e>
 800d704:	4b1c      	ldr	r3, [pc, #112]	; (800d778 <atanf+0x20c>)
 800d706:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800d70a:	f7f3 fa6d 	bl	8000be8 <__aeabi_fsub>
 800d70e:	4621      	mov	r1, r4
 800d710:	f7f3 fa6a 	bl	8000be8 <__aeabi_fsub>
 800d714:	4b19      	ldr	r3, [pc, #100]	; (800d77c <atanf+0x210>)
 800d716:	4601      	mov	r1, r0
 800d718:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d71c:	f7f3 fa64 	bl	8000be8 <__aeabi_fsub>
 800d720:	f1b8 0f00 	cmp.w	r8, #0
 800d724:	4604      	mov	r4, r0
 800d726:	f6bf af36 	bge.w	800d596 <atanf+0x2a>
 800d72a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d72e:	e72c      	b.n	800d58a <atanf+0x1e>
 800d730:	4c13      	ldr	r4, [pc, #76]	; (800d780 <atanf+0x214>)
 800d732:	e730      	b.n	800d596 <atanf+0x2a>
 800d734:	bfc90fdb 	.word	0xbfc90fdb
 800d738:	3edfffff 	.word	0x3edfffff
 800d73c:	7149f2ca 	.word	0x7149f2ca
 800d740:	3f97ffff 	.word	0x3f97ffff
 800d744:	3c8569d7 	.word	0x3c8569d7
 800d748:	3d4bda59 	.word	0x3d4bda59
 800d74c:	3d886b35 	.word	0x3d886b35
 800d750:	3dba2e6e 	.word	0x3dba2e6e
 800d754:	3e124925 	.word	0x3e124925
 800d758:	3eaaaaab 	.word	0x3eaaaaab
 800d75c:	bd15a221 	.word	0xbd15a221
 800d760:	3d6ef16b 	.word	0x3d6ef16b
 800d764:	3d9d8795 	.word	0x3d9d8795
 800d768:	3de38e38 	.word	0x3de38e38
 800d76c:	3e4ccccd 	.word	0x3e4ccccd
 800d770:	401bffff 	.word	0x401bffff
 800d774:	bf800000 	.word	0xbf800000
 800d778:	0801320c 	.word	0x0801320c
 800d77c:	080131fc 	.word	0x080131fc
 800d780:	3fc90fdb 	.word	0x3fc90fdb

0800d784 <cosf>:
 800d784:	b507      	push	{r0, r1, r2, lr}
 800d786:	4a18      	ldr	r2, [pc, #96]	; (800d7e8 <cosf+0x64>)
 800d788:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d78c:	4293      	cmp	r3, r2
 800d78e:	4601      	mov	r1, r0
 800d790:	dc03      	bgt.n	800d79a <cosf+0x16>
 800d792:	2100      	movs	r1, #0
 800d794:	f001 fc5e 	bl	800f054 <__kernel_cosf>
 800d798:	e004      	b.n	800d7a4 <cosf+0x20>
 800d79a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d79e:	db04      	blt.n	800d7aa <cosf+0x26>
 800d7a0:	f7f3 fa22 	bl	8000be8 <__aeabi_fsub>
 800d7a4:	b003      	add	sp, #12
 800d7a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7aa:	4669      	mov	r1, sp
 800d7ac:	f000 fde4 	bl	800e378 <__ieee754_rem_pio2f>
 800d7b0:	f000 0203 	and.w	r2, r0, #3
 800d7b4:	2a01      	cmp	r2, #1
 800d7b6:	d005      	beq.n	800d7c4 <cosf+0x40>
 800d7b8:	2a02      	cmp	r2, #2
 800d7ba:	d00a      	beq.n	800d7d2 <cosf+0x4e>
 800d7bc:	b972      	cbnz	r2, 800d7dc <cosf+0x58>
 800d7be:	9901      	ldr	r1, [sp, #4]
 800d7c0:	9800      	ldr	r0, [sp, #0]
 800d7c2:	e7e7      	b.n	800d794 <cosf+0x10>
 800d7c4:	9901      	ldr	r1, [sp, #4]
 800d7c6:	9800      	ldr	r0, [sp, #0]
 800d7c8:	f001 ff7a 	bl	800f6c0 <__kernel_sinf>
 800d7cc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d7d0:	e7e8      	b.n	800d7a4 <cosf+0x20>
 800d7d2:	9901      	ldr	r1, [sp, #4]
 800d7d4:	9800      	ldr	r0, [sp, #0]
 800d7d6:	f001 fc3d 	bl	800f054 <__kernel_cosf>
 800d7da:	e7f7      	b.n	800d7cc <cosf+0x48>
 800d7dc:	2201      	movs	r2, #1
 800d7de:	9901      	ldr	r1, [sp, #4]
 800d7e0:	9800      	ldr	r0, [sp, #0]
 800d7e2:	f001 ff6d 	bl	800f6c0 <__kernel_sinf>
 800d7e6:	e7dd      	b.n	800d7a4 <cosf+0x20>
 800d7e8:	3f490fd8 	.word	0x3f490fd8

0800d7ec <fabsf>:
 800d7ec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d7f0:	4770      	bx	lr
	...

0800d7f4 <sinf>:
 800d7f4:	b507      	push	{r0, r1, r2, lr}
 800d7f6:	4a19      	ldr	r2, [pc, #100]	; (800d85c <sinf+0x68>)
 800d7f8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	4601      	mov	r1, r0
 800d800:	dc04      	bgt.n	800d80c <sinf+0x18>
 800d802:	2200      	movs	r2, #0
 800d804:	2100      	movs	r1, #0
 800d806:	f001 ff5b 	bl	800f6c0 <__kernel_sinf>
 800d80a:	e004      	b.n	800d816 <sinf+0x22>
 800d80c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d810:	db04      	blt.n	800d81c <sinf+0x28>
 800d812:	f7f3 f9e9 	bl	8000be8 <__aeabi_fsub>
 800d816:	b003      	add	sp, #12
 800d818:	f85d fb04 	ldr.w	pc, [sp], #4
 800d81c:	4669      	mov	r1, sp
 800d81e:	f000 fdab 	bl	800e378 <__ieee754_rem_pio2f>
 800d822:	f000 0003 	and.w	r0, r0, #3
 800d826:	2801      	cmp	r0, #1
 800d828:	d006      	beq.n	800d838 <sinf+0x44>
 800d82a:	2802      	cmp	r0, #2
 800d82c:	d009      	beq.n	800d842 <sinf+0x4e>
 800d82e:	b980      	cbnz	r0, 800d852 <sinf+0x5e>
 800d830:	2201      	movs	r2, #1
 800d832:	9901      	ldr	r1, [sp, #4]
 800d834:	9800      	ldr	r0, [sp, #0]
 800d836:	e7e6      	b.n	800d806 <sinf+0x12>
 800d838:	9901      	ldr	r1, [sp, #4]
 800d83a:	9800      	ldr	r0, [sp, #0]
 800d83c:	f001 fc0a 	bl	800f054 <__kernel_cosf>
 800d840:	e7e9      	b.n	800d816 <sinf+0x22>
 800d842:	2201      	movs	r2, #1
 800d844:	9901      	ldr	r1, [sp, #4]
 800d846:	9800      	ldr	r0, [sp, #0]
 800d848:	f001 ff3a 	bl	800f6c0 <__kernel_sinf>
 800d84c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d850:	e7e1      	b.n	800d816 <sinf+0x22>
 800d852:	9901      	ldr	r1, [sp, #4]
 800d854:	9800      	ldr	r0, [sp, #0]
 800d856:	f001 fbfd 	bl	800f054 <__kernel_cosf>
 800d85a:	e7f7      	b.n	800d84c <sinf+0x58>
 800d85c:	3f490fd8 	.word	0x3f490fd8

0800d860 <acosf>:
 800d860:	b538      	push	{r3, r4, r5, lr}
 800d862:	4604      	mov	r4, r0
 800d864:	f000 fa5c 	bl	800dd20 <__ieee754_acosf>
 800d868:	4b0e      	ldr	r3, [pc, #56]	; (800d8a4 <acosf+0x44>)
 800d86a:	4605      	mov	r5, r0
 800d86c:	f993 3000 	ldrsb.w	r3, [r3]
 800d870:	3301      	adds	r3, #1
 800d872:	d015      	beq.n	800d8a0 <acosf+0x40>
 800d874:	4621      	mov	r1, r4
 800d876:	4620      	mov	r0, r4
 800d878:	f7f3 fc86 	bl	8001188 <__aeabi_fcmpun>
 800d87c:	b980      	cbnz	r0, 800d8a0 <acosf+0x40>
 800d87e:	4620      	mov	r0, r4
 800d880:	f7ff ffb4 	bl	800d7ec <fabsf>
 800d884:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d888:	f7f3 fc74 	bl	8001174 <__aeabi_fcmpgt>
 800d88c:	b140      	cbz	r0, 800d8a0 <acosf+0x40>
 800d88e:	f002 f92b 	bl	800fae8 <__errno>
 800d892:	2321      	movs	r3, #33	; 0x21
 800d894:	6003      	str	r3, [r0, #0]
 800d896:	4804      	ldr	r0, [pc, #16]	; (800d8a8 <acosf+0x48>)
 800d898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d89c:	f002 b8d4 	b.w	800fa48 <nanf>
 800d8a0:	4628      	mov	r0, r5
 800d8a2:	bd38      	pop	{r3, r4, r5, pc}
 800d8a4:	200001a6 	.word	0x200001a6
 800d8a8:	08013a58 	.word	0x08013a58

0800d8ac <asinf>:
 800d8ac:	b538      	push	{r3, r4, r5, lr}
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	f000 fb98 	bl	800dfe4 <__ieee754_asinf>
 800d8b4:	4b0e      	ldr	r3, [pc, #56]	; (800d8f0 <asinf+0x44>)
 800d8b6:	4605      	mov	r5, r0
 800d8b8:	f993 3000 	ldrsb.w	r3, [r3]
 800d8bc:	3301      	adds	r3, #1
 800d8be:	d015      	beq.n	800d8ec <asinf+0x40>
 800d8c0:	4621      	mov	r1, r4
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	f7f3 fc60 	bl	8001188 <__aeabi_fcmpun>
 800d8c8:	b980      	cbnz	r0, 800d8ec <asinf+0x40>
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	f7ff ff8e 	bl	800d7ec <fabsf>
 800d8d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d8d4:	f7f3 fc4e 	bl	8001174 <__aeabi_fcmpgt>
 800d8d8:	b140      	cbz	r0, 800d8ec <asinf+0x40>
 800d8da:	f002 f905 	bl	800fae8 <__errno>
 800d8de:	2321      	movs	r3, #33	; 0x21
 800d8e0:	6003      	str	r3, [r0, #0]
 800d8e2:	4804      	ldr	r0, [pc, #16]	; (800d8f4 <asinf+0x48>)
 800d8e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8e8:	f002 b8ae 	b.w	800fa48 <nanf>
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	bd38      	pop	{r3, r4, r5, pc}
 800d8f0:	200001a6 	.word	0x200001a6
 800d8f4:	08013a58 	.word	0x08013a58

0800d8f8 <atan2f>:
 800d8f8:	f000 bcb8 	b.w	800e26c <__ieee754_atan2f>

0800d8fc <sqrtf>:
 800d8fc:	b538      	push	{r3, r4, r5, lr}
 800d8fe:	4605      	mov	r5, r0
 800d900:	f000 fe98 	bl	800e634 <__ieee754_sqrtf>
 800d904:	4b0d      	ldr	r3, [pc, #52]	; (800d93c <sqrtf+0x40>)
 800d906:	4604      	mov	r4, r0
 800d908:	f993 3000 	ldrsb.w	r3, [r3]
 800d90c:	3301      	adds	r3, #1
 800d90e:	d012      	beq.n	800d936 <sqrtf+0x3a>
 800d910:	4629      	mov	r1, r5
 800d912:	4628      	mov	r0, r5
 800d914:	f7f3 fc38 	bl	8001188 <__aeabi_fcmpun>
 800d918:	b968      	cbnz	r0, 800d936 <sqrtf+0x3a>
 800d91a:	2100      	movs	r1, #0
 800d91c:	4628      	mov	r0, r5
 800d91e:	f7f3 fc0b 	bl	8001138 <__aeabi_fcmplt>
 800d922:	b140      	cbz	r0, 800d936 <sqrtf+0x3a>
 800d924:	f002 f8e0 	bl	800fae8 <__errno>
 800d928:	2321      	movs	r3, #33	; 0x21
 800d92a:	2100      	movs	r1, #0
 800d92c:	6003      	str	r3, [r0, #0]
 800d92e:	4608      	mov	r0, r1
 800d930:	f7f3 fb18 	bl	8000f64 <__aeabi_fdiv>
 800d934:	4604      	mov	r4, r0
 800d936:	4620      	mov	r0, r4
 800d938:	bd38      	pop	{r3, r4, r5, pc}
 800d93a:	bf00      	nop
 800d93c:	200001a6 	.word	0x200001a6

0800d940 <__ieee754_rem_pio2>:
 800d940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d944:	4614      	mov	r4, r2
 800d946:	4ac4      	ldr	r2, [pc, #784]	; (800dc58 <__ieee754_rem_pio2+0x318>)
 800d948:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800d94c:	b08d      	sub	sp, #52	; 0x34
 800d94e:	4592      	cmp	sl, r2
 800d950:	9104      	str	r1, [sp, #16]
 800d952:	dc07      	bgt.n	800d964 <__ieee754_rem_pio2+0x24>
 800d954:	2200      	movs	r2, #0
 800d956:	2300      	movs	r3, #0
 800d958:	e9c4 0100 	strd	r0, r1, [r4]
 800d95c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d960:	2500      	movs	r5, #0
 800d962:	e024      	b.n	800d9ae <__ieee754_rem_pio2+0x6e>
 800d964:	4abd      	ldr	r2, [pc, #756]	; (800dc5c <__ieee754_rem_pio2+0x31c>)
 800d966:	4592      	cmp	sl, r2
 800d968:	dc72      	bgt.n	800da50 <__ieee754_rem_pio2+0x110>
 800d96a:	9b04      	ldr	r3, [sp, #16]
 800d96c:	4dbc      	ldr	r5, [pc, #752]	; (800dc60 <__ieee754_rem_pio2+0x320>)
 800d96e:	2b00      	cmp	r3, #0
 800d970:	a3ab      	add	r3, pc, #684	; (adr r3, 800dc20 <__ieee754_rem_pio2+0x2e0>)
 800d972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d976:	dd36      	ble.n	800d9e6 <__ieee754_rem_pio2+0xa6>
 800d978:	f7f2 fc32 	bl	80001e0 <__aeabi_dsub>
 800d97c:	45aa      	cmp	sl, r5
 800d97e:	4606      	mov	r6, r0
 800d980:	460f      	mov	r7, r1
 800d982:	d018      	beq.n	800d9b6 <__ieee754_rem_pio2+0x76>
 800d984:	a3a8      	add	r3, pc, #672	; (adr r3, 800dc28 <__ieee754_rem_pio2+0x2e8>)
 800d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98a:	f7f2 fc29 	bl	80001e0 <__aeabi_dsub>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	4630      	mov	r0, r6
 800d994:	e9c4 2300 	strd	r2, r3, [r4]
 800d998:	4639      	mov	r1, r7
 800d99a:	f7f2 fc21 	bl	80001e0 <__aeabi_dsub>
 800d99e:	a3a2      	add	r3, pc, #648	; (adr r3, 800dc28 <__ieee754_rem_pio2+0x2e8>)
 800d9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a4:	f7f2 fc1c 	bl	80001e0 <__aeabi_dsub>
 800d9a8:	2501      	movs	r5, #1
 800d9aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	b00d      	add	sp, #52	; 0x34
 800d9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9b6:	a39e      	add	r3, pc, #632	; (adr r3, 800dc30 <__ieee754_rem_pio2+0x2f0>)
 800d9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9bc:	f7f2 fc10 	bl	80001e0 <__aeabi_dsub>
 800d9c0:	a39d      	add	r3, pc, #628	; (adr r3, 800dc38 <__ieee754_rem_pio2+0x2f8>)
 800d9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c6:	4606      	mov	r6, r0
 800d9c8:	460f      	mov	r7, r1
 800d9ca:	f7f2 fc09 	bl	80001e0 <__aeabi_dsub>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	e9c4 2300 	strd	r2, r3, [r4]
 800d9d8:	4639      	mov	r1, r7
 800d9da:	f7f2 fc01 	bl	80001e0 <__aeabi_dsub>
 800d9de:	a396      	add	r3, pc, #600	; (adr r3, 800dc38 <__ieee754_rem_pio2+0x2f8>)
 800d9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e4:	e7de      	b.n	800d9a4 <__ieee754_rem_pio2+0x64>
 800d9e6:	f7f2 fbfd 	bl	80001e4 <__adddf3>
 800d9ea:	45aa      	cmp	sl, r5
 800d9ec:	4606      	mov	r6, r0
 800d9ee:	460f      	mov	r7, r1
 800d9f0:	d016      	beq.n	800da20 <__ieee754_rem_pio2+0xe0>
 800d9f2:	a38d      	add	r3, pc, #564	; (adr r3, 800dc28 <__ieee754_rem_pio2+0x2e8>)
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	f7f2 fbf4 	bl	80001e4 <__adddf3>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	460b      	mov	r3, r1
 800da00:	4630      	mov	r0, r6
 800da02:	e9c4 2300 	strd	r2, r3, [r4]
 800da06:	4639      	mov	r1, r7
 800da08:	f7f2 fbea 	bl	80001e0 <__aeabi_dsub>
 800da0c:	a386      	add	r3, pc, #536	; (adr r3, 800dc28 <__ieee754_rem_pio2+0x2e8>)
 800da0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da12:	f7f2 fbe7 	bl	80001e4 <__adddf3>
 800da16:	f04f 35ff 	mov.w	r5, #4294967295
 800da1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800da1e:	e7c6      	b.n	800d9ae <__ieee754_rem_pio2+0x6e>
 800da20:	a383      	add	r3, pc, #524	; (adr r3, 800dc30 <__ieee754_rem_pio2+0x2f0>)
 800da22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da26:	f7f2 fbdd 	bl	80001e4 <__adddf3>
 800da2a:	a383      	add	r3, pc, #524	; (adr r3, 800dc38 <__ieee754_rem_pio2+0x2f8>)
 800da2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da30:	4606      	mov	r6, r0
 800da32:	460f      	mov	r7, r1
 800da34:	f7f2 fbd6 	bl	80001e4 <__adddf3>
 800da38:	4602      	mov	r2, r0
 800da3a:	460b      	mov	r3, r1
 800da3c:	4630      	mov	r0, r6
 800da3e:	e9c4 2300 	strd	r2, r3, [r4]
 800da42:	4639      	mov	r1, r7
 800da44:	f7f2 fbcc 	bl	80001e0 <__aeabi_dsub>
 800da48:	a37b      	add	r3, pc, #492	; (adr r3, 800dc38 <__ieee754_rem_pio2+0x2f8>)
 800da4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4e:	e7e0      	b.n	800da12 <__ieee754_rem_pio2+0xd2>
 800da50:	4a84      	ldr	r2, [pc, #528]	; (800dc64 <__ieee754_rem_pio2+0x324>)
 800da52:	4592      	cmp	sl, r2
 800da54:	f300 80d5 	bgt.w	800dc02 <__ieee754_rem_pio2+0x2c2>
 800da58:	f001 fea8 	bl	800f7ac <fabs>
 800da5c:	a378      	add	r3, pc, #480	; (adr r3, 800dc40 <__ieee754_rem_pio2+0x300>)
 800da5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da62:	4606      	mov	r6, r0
 800da64:	460f      	mov	r7, r1
 800da66:	f7f2 fd73 	bl	8000550 <__aeabi_dmul>
 800da6a:	2200      	movs	r2, #0
 800da6c:	4b7e      	ldr	r3, [pc, #504]	; (800dc68 <__ieee754_rem_pio2+0x328>)
 800da6e:	f7f2 fbb9 	bl	80001e4 <__adddf3>
 800da72:	f7f3 f81d 	bl	8000ab0 <__aeabi_d2iz>
 800da76:	4605      	mov	r5, r0
 800da78:	f7f2 fd00 	bl	800047c <__aeabi_i2d>
 800da7c:	4602      	mov	r2, r0
 800da7e:	460b      	mov	r3, r1
 800da80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da84:	a366      	add	r3, pc, #408	; (adr r3, 800dc20 <__ieee754_rem_pio2+0x2e0>)
 800da86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8a:	f7f2 fd61 	bl	8000550 <__aeabi_dmul>
 800da8e:	4602      	mov	r2, r0
 800da90:	460b      	mov	r3, r1
 800da92:	4630      	mov	r0, r6
 800da94:	4639      	mov	r1, r7
 800da96:	f7f2 fba3 	bl	80001e0 <__aeabi_dsub>
 800da9a:	a363      	add	r3, pc, #396	; (adr r3, 800dc28 <__ieee754_rem_pio2+0x2e8>)
 800da9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa0:	4680      	mov	r8, r0
 800daa2:	4689      	mov	r9, r1
 800daa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daa8:	f7f2 fd52 	bl	8000550 <__aeabi_dmul>
 800daac:	2d1f      	cmp	r5, #31
 800daae:	4606      	mov	r6, r0
 800dab0:	460f      	mov	r7, r1
 800dab2:	dc0e      	bgt.n	800dad2 <__ieee754_rem_pio2+0x192>
 800dab4:	4b6d      	ldr	r3, [pc, #436]	; (800dc6c <__ieee754_rem_pio2+0x32c>)
 800dab6:	1e6a      	subs	r2, r5, #1
 800dab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dabc:	4553      	cmp	r3, sl
 800dabe:	d008      	beq.n	800dad2 <__ieee754_rem_pio2+0x192>
 800dac0:	4632      	mov	r2, r6
 800dac2:	463b      	mov	r3, r7
 800dac4:	4640      	mov	r0, r8
 800dac6:	4649      	mov	r1, r9
 800dac8:	f7f2 fb8a 	bl	80001e0 <__aeabi_dsub>
 800dacc:	e9c4 0100 	strd	r0, r1, [r4]
 800dad0:	e013      	b.n	800dafa <__ieee754_rem_pio2+0x1ba>
 800dad2:	463b      	mov	r3, r7
 800dad4:	4632      	mov	r2, r6
 800dad6:	4640      	mov	r0, r8
 800dad8:	4649      	mov	r1, r9
 800dada:	f7f2 fb81 	bl	80001e0 <__aeabi_dsub>
 800dade:	ea4f 532a 	mov.w	r3, sl, asr #20
 800dae2:	9305      	str	r3, [sp, #20]
 800dae4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dae8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800daec:	f1ba 0f10 	cmp.w	sl, #16
 800daf0:	dc1f      	bgt.n	800db32 <__ieee754_rem_pio2+0x1f2>
 800daf2:	4602      	mov	r2, r0
 800daf4:	460b      	mov	r3, r1
 800daf6:	e9c4 2300 	strd	r2, r3, [r4]
 800dafa:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800dafe:	4640      	mov	r0, r8
 800db00:	4653      	mov	r3, sl
 800db02:	4649      	mov	r1, r9
 800db04:	f7f2 fb6c 	bl	80001e0 <__aeabi_dsub>
 800db08:	4632      	mov	r2, r6
 800db0a:	463b      	mov	r3, r7
 800db0c:	f7f2 fb68 	bl	80001e0 <__aeabi_dsub>
 800db10:	460b      	mov	r3, r1
 800db12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800db16:	9904      	ldr	r1, [sp, #16]
 800db18:	4602      	mov	r2, r0
 800db1a:	2900      	cmp	r1, #0
 800db1c:	f6bf af47 	bge.w	800d9ae <__ieee754_rem_pio2+0x6e>
 800db20:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800db24:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800db28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800db2c:	60e3      	str	r3, [r4, #12]
 800db2e:	426d      	negs	r5, r5
 800db30:	e73d      	b.n	800d9ae <__ieee754_rem_pio2+0x6e>
 800db32:	a33f      	add	r3, pc, #252	; (adr r3, 800dc30 <__ieee754_rem_pio2+0x2f0>)
 800db34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db3c:	f7f2 fd08 	bl	8000550 <__aeabi_dmul>
 800db40:	4606      	mov	r6, r0
 800db42:	460f      	mov	r7, r1
 800db44:	4602      	mov	r2, r0
 800db46:	460b      	mov	r3, r1
 800db48:	4640      	mov	r0, r8
 800db4a:	4649      	mov	r1, r9
 800db4c:	f7f2 fb48 	bl	80001e0 <__aeabi_dsub>
 800db50:	4602      	mov	r2, r0
 800db52:	460b      	mov	r3, r1
 800db54:	4682      	mov	sl, r0
 800db56:	468b      	mov	fp, r1
 800db58:	4640      	mov	r0, r8
 800db5a:	4649      	mov	r1, r9
 800db5c:	f7f2 fb40 	bl	80001e0 <__aeabi_dsub>
 800db60:	4632      	mov	r2, r6
 800db62:	463b      	mov	r3, r7
 800db64:	f7f2 fb3c 	bl	80001e0 <__aeabi_dsub>
 800db68:	a333      	add	r3, pc, #204	; (adr r3, 800dc38 <__ieee754_rem_pio2+0x2f8>)
 800db6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6e:	4606      	mov	r6, r0
 800db70:	460f      	mov	r7, r1
 800db72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db76:	f7f2 fceb 	bl	8000550 <__aeabi_dmul>
 800db7a:	4632      	mov	r2, r6
 800db7c:	463b      	mov	r3, r7
 800db7e:	f7f2 fb2f 	bl	80001e0 <__aeabi_dsub>
 800db82:	4602      	mov	r2, r0
 800db84:	460b      	mov	r3, r1
 800db86:	4606      	mov	r6, r0
 800db88:	460f      	mov	r7, r1
 800db8a:	4650      	mov	r0, sl
 800db8c:	4659      	mov	r1, fp
 800db8e:	f7f2 fb27 	bl	80001e0 <__aeabi_dsub>
 800db92:	9a05      	ldr	r2, [sp, #20]
 800db94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800db98:	1ad3      	subs	r3, r2, r3
 800db9a:	2b31      	cmp	r3, #49	; 0x31
 800db9c:	dc06      	bgt.n	800dbac <__ieee754_rem_pio2+0x26c>
 800db9e:	4602      	mov	r2, r0
 800dba0:	460b      	mov	r3, r1
 800dba2:	46d0      	mov	r8, sl
 800dba4:	46d9      	mov	r9, fp
 800dba6:	e9c4 2300 	strd	r2, r3, [r4]
 800dbaa:	e7a6      	b.n	800dafa <__ieee754_rem_pio2+0x1ba>
 800dbac:	a326      	add	r3, pc, #152	; (adr r3, 800dc48 <__ieee754_rem_pio2+0x308>)
 800dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbb6:	f7f2 fccb 	bl	8000550 <__aeabi_dmul>
 800dbba:	4606      	mov	r6, r0
 800dbbc:	460f      	mov	r7, r1
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	4650      	mov	r0, sl
 800dbc4:	4659      	mov	r1, fp
 800dbc6:	f7f2 fb0b 	bl	80001e0 <__aeabi_dsub>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	460b      	mov	r3, r1
 800dbce:	4680      	mov	r8, r0
 800dbd0:	4689      	mov	r9, r1
 800dbd2:	4650      	mov	r0, sl
 800dbd4:	4659      	mov	r1, fp
 800dbd6:	f7f2 fb03 	bl	80001e0 <__aeabi_dsub>
 800dbda:	4632      	mov	r2, r6
 800dbdc:	463b      	mov	r3, r7
 800dbde:	f7f2 faff 	bl	80001e0 <__aeabi_dsub>
 800dbe2:	a31b      	add	r3, pc, #108	; (adr r3, 800dc50 <__ieee754_rem_pio2+0x310>)
 800dbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe8:	4606      	mov	r6, r0
 800dbea:	460f      	mov	r7, r1
 800dbec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbf0:	f7f2 fcae 	bl	8000550 <__aeabi_dmul>
 800dbf4:	4632      	mov	r2, r6
 800dbf6:	463b      	mov	r3, r7
 800dbf8:	f7f2 faf2 	bl	80001e0 <__aeabi_dsub>
 800dbfc:	4606      	mov	r6, r0
 800dbfe:	460f      	mov	r7, r1
 800dc00:	e75e      	b.n	800dac0 <__ieee754_rem_pio2+0x180>
 800dc02:	4a1b      	ldr	r2, [pc, #108]	; (800dc70 <__ieee754_rem_pio2+0x330>)
 800dc04:	4592      	cmp	sl, r2
 800dc06:	dd35      	ble.n	800dc74 <__ieee754_rem_pio2+0x334>
 800dc08:	4602      	mov	r2, r0
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	f7f2 fae8 	bl	80001e0 <__aeabi_dsub>
 800dc10:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dc14:	e9c4 0100 	strd	r0, r1, [r4]
 800dc18:	e6a2      	b.n	800d960 <__ieee754_rem_pio2+0x20>
 800dc1a:	bf00      	nop
 800dc1c:	f3af 8000 	nop.w
 800dc20:	54400000 	.word	0x54400000
 800dc24:	3ff921fb 	.word	0x3ff921fb
 800dc28:	1a626331 	.word	0x1a626331
 800dc2c:	3dd0b461 	.word	0x3dd0b461
 800dc30:	1a600000 	.word	0x1a600000
 800dc34:	3dd0b461 	.word	0x3dd0b461
 800dc38:	2e037073 	.word	0x2e037073
 800dc3c:	3ba3198a 	.word	0x3ba3198a
 800dc40:	6dc9c883 	.word	0x6dc9c883
 800dc44:	3fe45f30 	.word	0x3fe45f30
 800dc48:	2e000000 	.word	0x2e000000
 800dc4c:	3ba3198a 	.word	0x3ba3198a
 800dc50:	252049c1 	.word	0x252049c1
 800dc54:	397b839a 	.word	0x397b839a
 800dc58:	3fe921fb 	.word	0x3fe921fb
 800dc5c:	4002d97b 	.word	0x4002d97b
 800dc60:	3ff921fb 	.word	0x3ff921fb
 800dc64:	413921fb 	.word	0x413921fb
 800dc68:	3fe00000 	.word	0x3fe00000
 800dc6c:	0801321c 	.word	0x0801321c
 800dc70:	7fefffff 	.word	0x7fefffff
 800dc74:	ea4f 552a 	mov.w	r5, sl, asr #20
 800dc78:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800dc7c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800dc80:	460f      	mov	r7, r1
 800dc82:	4606      	mov	r6, r0
 800dc84:	f7f2 ff14 	bl	8000ab0 <__aeabi_d2iz>
 800dc88:	f7f2 fbf8 	bl	800047c <__aeabi_i2d>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	4630      	mov	r0, r6
 800dc92:	4639      	mov	r1, r7
 800dc94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dc98:	f7f2 faa2 	bl	80001e0 <__aeabi_dsub>
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	4b1e      	ldr	r3, [pc, #120]	; (800dd18 <__ieee754_rem_pio2+0x3d8>)
 800dca0:	f7f2 fc56 	bl	8000550 <__aeabi_dmul>
 800dca4:	460f      	mov	r7, r1
 800dca6:	4606      	mov	r6, r0
 800dca8:	f7f2 ff02 	bl	8000ab0 <__aeabi_d2iz>
 800dcac:	f7f2 fbe6 	bl	800047c <__aeabi_i2d>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	4630      	mov	r0, r6
 800dcb6:	4639      	mov	r1, r7
 800dcb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dcbc:	f7f2 fa90 	bl	80001e0 <__aeabi_dsub>
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	4b15      	ldr	r3, [pc, #84]	; (800dd18 <__ieee754_rem_pio2+0x3d8>)
 800dcc4:	f7f2 fc44 	bl	8000550 <__aeabi_dmul>
 800dcc8:	f04f 0803 	mov.w	r8, #3
 800dccc:	2600      	movs	r6, #0
 800dcce:	2700      	movs	r7, #0
 800dcd0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dcd4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800dcd8:	4632      	mov	r2, r6
 800dcda:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800dcde:	463b      	mov	r3, r7
 800dce0:	46c2      	mov	sl, r8
 800dce2:	f108 38ff 	add.w	r8, r8, #4294967295
 800dce6:	f7f2 fe9b 	bl	8000a20 <__aeabi_dcmpeq>
 800dcea:	2800      	cmp	r0, #0
 800dcec:	d1f4      	bne.n	800dcd8 <__ieee754_rem_pio2+0x398>
 800dcee:	4b0b      	ldr	r3, [pc, #44]	; (800dd1c <__ieee754_rem_pio2+0x3dc>)
 800dcf0:	462a      	mov	r2, r5
 800dcf2:	9301      	str	r3, [sp, #4]
 800dcf4:	2302      	movs	r3, #2
 800dcf6:	4621      	mov	r1, r4
 800dcf8:	9300      	str	r3, [sp, #0]
 800dcfa:	a806      	add	r0, sp, #24
 800dcfc:	4653      	mov	r3, sl
 800dcfe:	f000 fda9 	bl	800e854 <__kernel_rem_pio2>
 800dd02:	9b04      	ldr	r3, [sp, #16]
 800dd04:	4605      	mov	r5, r0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f6bf ae51 	bge.w	800d9ae <__ieee754_rem_pio2+0x6e>
 800dd0c:	6863      	ldr	r3, [r4, #4]
 800dd0e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dd12:	6063      	str	r3, [r4, #4]
 800dd14:	68e3      	ldr	r3, [r4, #12]
 800dd16:	e707      	b.n	800db28 <__ieee754_rem_pio2+0x1e8>
 800dd18:	41700000 	.word	0x41700000
 800dd1c:	0801329c 	.word	0x0801329c

0800dd20 <__ieee754_acosf>:
 800dd20:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800dd24:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800dd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2a:	4605      	mov	r5, r0
 800dd2c:	d104      	bne.n	800dd38 <__ieee754_acosf+0x18>
 800dd2e:	2800      	cmp	r0, #0
 800dd30:	f300 8135 	bgt.w	800df9e <__ieee754_acosf+0x27e>
 800dd34:	489c      	ldr	r0, [pc, #624]	; (800dfa8 <__ieee754_acosf+0x288>)
 800dd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd38:	dd06      	ble.n	800dd48 <__ieee754_acosf+0x28>
 800dd3a:	4601      	mov	r1, r0
 800dd3c:	f7f2 ff54 	bl	8000be8 <__aeabi_fsub>
 800dd40:	4601      	mov	r1, r0
 800dd42:	f7f3 f90f 	bl	8000f64 <__aeabi_fdiv>
 800dd46:	e7f6      	b.n	800dd36 <__ieee754_acosf+0x16>
 800dd48:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800dd4c:	da57      	bge.n	800ddfe <__ieee754_acosf+0xde>
 800dd4e:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800dd52:	f340 8126 	ble.w	800dfa2 <__ieee754_acosf+0x282>
 800dd56:	4601      	mov	r1, r0
 800dd58:	f7f3 f850 	bl	8000dfc <__aeabi_fmul>
 800dd5c:	4604      	mov	r4, r0
 800dd5e:	4993      	ldr	r1, [pc, #588]	; (800dfac <__ieee754_acosf+0x28c>)
 800dd60:	f7f3 f84c 	bl	8000dfc <__aeabi_fmul>
 800dd64:	4992      	ldr	r1, [pc, #584]	; (800dfb0 <__ieee754_acosf+0x290>)
 800dd66:	f7f2 ff41 	bl	8000bec <__addsf3>
 800dd6a:	4621      	mov	r1, r4
 800dd6c:	f7f3 f846 	bl	8000dfc <__aeabi_fmul>
 800dd70:	4990      	ldr	r1, [pc, #576]	; (800dfb4 <__ieee754_acosf+0x294>)
 800dd72:	f7f2 ff39 	bl	8000be8 <__aeabi_fsub>
 800dd76:	4621      	mov	r1, r4
 800dd78:	f7f3 f840 	bl	8000dfc <__aeabi_fmul>
 800dd7c:	498e      	ldr	r1, [pc, #568]	; (800dfb8 <__ieee754_acosf+0x298>)
 800dd7e:	f7f2 ff35 	bl	8000bec <__addsf3>
 800dd82:	4621      	mov	r1, r4
 800dd84:	f7f3 f83a 	bl	8000dfc <__aeabi_fmul>
 800dd88:	498c      	ldr	r1, [pc, #560]	; (800dfbc <__ieee754_acosf+0x29c>)
 800dd8a:	f7f2 ff2d 	bl	8000be8 <__aeabi_fsub>
 800dd8e:	4621      	mov	r1, r4
 800dd90:	f7f3 f834 	bl	8000dfc <__aeabi_fmul>
 800dd94:	498a      	ldr	r1, [pc, #552]	; (800dfc0 <__ieee754_acosf+0x2a0>)
 800dd96:	f7f2 ff29 	bl	8000bec <__addsf3>
 800dd9a:	4621      	mov	r1, r4
 800dd9c:	f7f3 f82e 	bl	8000dfc <__aeabi_fmul>
 800dda0:	4988      	ldr	r1, [pc, #544]	; (800dfc4 <__ieee754_acosf+0x2a4>)
 800dda2:	4606      	mov	r6, r0
 800dda4:	4620      	mov	r0, r4
 800dda6:	f7f3 f829 	bl	8000dfc <__aeabi_fmul>
 800ddaa:	4987      	ldr	r1, [pc, #540]	; (800dfc8 <__ieee754_acosf+0x2a8>)
 800ddac:	f7f2 ff1c 	bl	8000be8 <__aeabi_fsub>
 800ddb0:	4621      	mov	r1, r4
 800ddb2:	f7f3 f823 	bl	8000dfc <__aeabi_fmul>
 800ddb6:	4985      	ldr	r1, [pc, #532]	; (800dfcc <__ieee754_acosf+0x2ac>)
 800ddb8:	f7f2 ff18 	bl	8000bec <__addsf3>
 800ddbc:	4621      	mov	r1, r4
 800ddbe:	f7f3 f81d 	bl	8000dfc <__aeabi_fmul>
 800ddc2:	4983      	ldr	r1, [pc, #524]	; (800dfd0 <__ieee754_acosf+0x2b0>)
 800ddc4:	f7f2 ff10 	bl	8000be8 <__aeabi_fsub>
 800ddc8:	4621      	mov	r1, r4
 800ddca:	f7f3 f817 	bl	8000dfc <__aeabi_fmul>
 800ddce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ddd2:	f7f2 ff0b 	bl	8000bec <__addsf3>
 800ddd6:	4601      	mov	r1, r0
 800ddd8:	4630      	mov	r0, r6
 800ddda:	f7f3 f8c3 	bl	8000f64 <__aeabi_fdiv>
 800ddde:	4629      	mov	r1, r5
 800dde0:	f7f3 f80c 	bl	8000dfc <__aeabi_fmul>
 800dde4:	4601      	mov	r1, r0
 800dde6:	487b      	ldr	r0, [pc, #492]	; (800dfd4 <__ieee754_acosf+0x2b4>)
 800dde8:	f7f2 fefe 	bl	8000be8 <__aeabi_fsub>
 800ddec:	4601      	mov	r1, r0
 800ddee:	4628      	mov	r0, r5
 800ddf0:	f7f2 fefa 	bl	8000be8 <__aeabi_fsub>
 800ddf4:	4601      	mov	r1, r0
 800ddf6:	4878      	ldr	r0, [pc, #480]	; (800dfd8 <__ieee754_acosf+0x2b8>)
 800ddf8:	f7f2 fef6 	bl	8000be8 <__aeabi_fsub>
 800ddfc:	e79b      	b.n	800dd36 <__ieee754_acosf+0x16>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	da5b      	bge.n	800deba <__ieee754_acosf+0x19a>
 800de02:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800de06:	f7f2 fef1 	bl	8000bec <__addsf3>
 800de0a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800de0e:	f7f2 fff5 	bl	8000dfc <__aeabi_fmul>
 800de12:	4604      	mov	r4, r0
 800de14:	4965      	ldr	r1, [pc, #404]	; (800dfac <__ieee754_acosf+0x28c>)
 800de16:	f7f2 fff1 	bl	8000dfc <__aeabi_fmul>
 800de1a:	4965      	ldr	r1, [pc, #404]	; (800dfb0 <__ieee754_acosf+0x290>)
 800de1c:	f7f2 fee6 	bl	8000bec <__addsf3>
 800de20:	4621      	mov	r1, r4
 800de22:	f7f2 ffeb 	bl	8000dfc <__aeabi_fmul>
 800de26:	4963      	ldr	r1, [pc, #396]	; (800dfb4 <__ieee754_acosf+0x294>)
 800de28:	f7f2 fede 	bl	8000be8 <__aeabi_fsub>
 800de2c:	4621      	mov	r1, r4
 800de2e:	f7f2 ffe5 	bl	8000dfc <__aeabi_fmul>
 800de32:	4961      	ldr	r1, [pc, #388]	; (800dfb8 <__ieee754_acosf+0x298>)
 800de34:	f7f2 feda 	bl	8000bec <__addsf3>
 800de38:	4621      	mov	r1, r4
 800de3a:	f7f2 ffdf 	bl	8000dfc <__aeabi_fmul>
 800de3e:	495f      	ldr	r1, [pc, #380]	; (800dfbc <__ieee754_acosf+0x29c>)
 800de40:	f7f2 fed2 	bl	8000be8 <__aeabi_fsub>
 800de44:	4621      	mov	r1, r4
 800de46:	f7f2 ffd9 	bl	8000dfc <__aeabi_fmul>
 800de4a:	495d      	ldr	r1, [pc, #372]	; (800dfc0 <__ieee754_acosf+0x2a0>)
 800de4c:	f7f2 fece 	bl	8000bec <__addsf3>
 800de50:	4621      	mov	r1, r4
 800de52:	f7f2 ffd3 	bl	8000dfc <__aeabi_fmul>
 800de56:	4606      	mov	r6, r0
 800de58:	4620      	mov	r0, r4
 800de5a:	f000 fbeb 	bl	800e634 <__ieee754_sqrtf>
 800de5e:	4959      	ldr	r1, [pc, #356]	; (800dfc4 <__ieee754_acosf+0x2a4>)
 800de60:	4605      	mov	r5, r0
 800de62:	4620      	mov	r0, r4
 800de64:	f7f2 ffca 	bl	8000dfc <__aeabi_fmul>
 800de68:	4957      	ldr	r1, [pc, #348]	; (800dfc8 <__ieee754_acosf+0x2a8>)
 800de6a:	f7f2 febd 	bl	8000be8 <__aeabi_fsub>
 800de6e:	4621      	mov	r1, r4
 800de70:	f7f2 ffc4 	bl	8000dfc <__aeabi_fmul>
 800de74:	4955      	ldr	r1, [pc, #340]	; (800dfcc <__ieee754_acosf+0x2ac>)
 800de76:	f7f2 feb9 	bl	8000bec <__addsf3>
 800de7a:	4621      	mov	r1, r4
 800de7c:	f7f2 ffbe 	bl	8000dfc <__aeabi_fmul>
 800de80:	4953      	ldr	r1, [pc, #332]	; (800dfd0 <__ieee754_acosf+0x2b0>)
 800de82:	f7f2 feb1 	bl	8000be8 <__aeabi_fsub>
 800de86:	4621      	mov	r1, r4
 800de88:	f7f2 ffb8 	bl	8000dfc <__aeabi_fmul>
 800de8c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800de90:	f7f2 feac 	bl	8000bec <__addsf3>
 800de94:	4601      	mov	r1, r0
 800de96:	4630      	mov	r0, r6
 800de98:	f7f3 f864 	bl	8000f64 <__aeabi_fdiv>
 800de9c:	4629      	mov	r1, r5
 800de9e:	f7f2 ffad 	bl	8000dfc <__aeabi_fmul>
 800dea2:	494c      	ldr	r1, [pc, #304]	; (800dfd4 <__ieee754_acosf+0x2b4>)
 800dea4:	f7f2 fea0 	bl	8000be8 <__aeabi_fsub>
 800dea8:	4629      	mov	r1, r5
 800deaa:	f7f2 fe9f 	bl	8000bec <__addsf3>
 800deae:	4601      	mov	r1, r0
 800deb0:	f7f2 fe9c 	bl	8000bec <__addsf3>
 800deb4:	4601      	mov	r1, r0
 800deb6:	4849      	ldr	r0, [pc, #292]	; (800dfdc <__ieee754_acosf+0x2bc>)
 800deb8:	e79e      	b.n	800ddf8 <__ieee754_acosf+0xd8>
 800deba:	4601      	mov	r1, r0
 800debc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800dec0:	f7f2 fe92 	bl	8000be8 <__aeabi_fsub>
 800dec4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800dec8:	f7f2 ff98 	bl	8000dfc <__aeabi_fmul>
 800decc:	4604      	mov	r4, r0
 800dece:	f000 fbb1 	bl	800e634 <__ieee754_sqrtf>
 800ded2:	4936      	ldr	r1, [pc, #216]	; (800dfac <__ieee754_acosf+0x28c>)
 800ded4:	4606      	mov	r6, r0
 800ded6:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800deda:	4620      	mov	r0, r4
 800dedc:	f7f2 ff8e 	bl	8000dfc <__aeabi_fmul>
 800dee0:	4933      	ldr	r1, [pc, #204]	; (800dfb0 <__ieee754_acosf+0x290>)
 800dee2:	f7f2 fe83 	bl	8000bec <__addsf3>
 800dee6:	4621      	mov	r1, r4
 800dee8:	f7f2 ff88 	bl	8000dfc <__aeabi_fmul>
 800deec:	4931      	ldr	r1, [pc, #196]	; (800dfb4 <__ieee754_acosf+0x294>)
 800deee:	f7f2 fe7b 	bl	8000be8 <__aeabi_fsub>
 800def2:	4621      	mov	r1, r4
 800def4:	f7f2 ff82 	bl	8000dfc <__aeabi_fmul>
 800def8:	492f      	ldr	r1, [pc, #188]	; (800dfb8 <__ieee754_acosf+0x298>)
 800defa:	f7f2 fe77 	bl	8000bec <__addsf3>
 800defe:	4621      	mov	r1, r4
 800df00:	f7f2 ff7c 	bl	8000dfc <__aeabi_fmul>
 800df04:	492d      	ldr	r1, [pc, #180]	; (800dfbc <__ieee754_acosf+0x29c>)
 800df06:	f7f2 fe6f 	bl	8000be8 <__aeabi_fsub>
 800df0a:	4621      	mov	r1, r4
 800df0c:	f7f2 ff76 	bl	8000dfc <__aeabi_fmul>
 800df10:	492b      	ldr	r1, [pc, #172]	; (800dfc0 <__ieee754_acosf+0x2a0>)
 800df12:	f7f2 fe6b 	bl	8000bec <__addsf3>
 800df16:	4621      	mov	r1, r4
 800df18:	f7f2 ff70 	bl	8000dfc <__aeabi_fmul>
 800df1c:	4929      	ldr	r1, [pc, #164]	; (800dfc4 <__ieee754_acosf+0x2a4>)
 800df1e:	4607      	mov	r7, r0
 800df20:	4620      	mov	r0, r4
 800df22:	f7f2 ff6b 	bl	8000dfc <__aeabi_fmul>
 800df26:	4928      	ldr	r1, [pc, #160]	; (800dfc8 <__ieee754_acosf+0x2a8>)
 800df28:	f7f2 fe5e 	bl	8000be8 <__aeabi_fsub>
 800df2c:	4621      	mov	r1, r4
 800df2e:	f7f2 ff65 	bl	8000dfc <__aeabi_fmul>
 800df32:	4926      	ldr	r1, [pc, #152]	; (800dfcc <__ieee754_acosf+0x2ac>)
 800df34:	f7f2 fe5a 	bl	8000bec <__addsf3>
 800df38:	4621      	mov	r1, r4
 800df3a:	f7f2 ff5f 	bl	8000dfc <__aeabi_fmul>
 800df3e:	4924      	ldr	r1, [pc, #144]	; (800dfd0 <__ieee754_acosf+0x2b0>)
 800df40:	f7f2 fe52 	bl	8000be8 <__aeabi_fsub>
 800df44:	4621      	mov	r1, r4
 800df46:	f7f2 ff59 	bl	8000dfc <__aeabi_fmul>
 800df4a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800df4e:	f7f2 fe4d 	bl	8000bec <__addsf3>
 800df52:	4601      	mov	r1, r0
 800df54:	4638      	mov	r0, r7
 800df56:	f7f3 f805 	bl	8000f64 <__aeabi_fdiv>
 800df5a:	4631      	mov	r1, r6
 800df5c:	f7f2 ff4e 	bl	8000dfc <__aeabi_fmul>
 800df60:	f025 050f 	bic.w	r5, r5, #15
 800df64:	4607      	mov	r7, r0
 800df66:	4629      	mov	r1, r5
 800df68:	4628      	mov	r0, r5
 800df6a:	f7f2 ff47 	bl	8000dfc <__aeabi_fmul>
 800df6e:	4601      	mov	r1, r0
 800df70:	4620      	mov	r0, r4
 800df72:	f7f2 fe39 	bl	8000be8 <__aeabi_fsub>
 800df76:	4629      	mov	r1, r5
 800df78:	4604      	mov	r4, r0
 800df7a:	4630      	mov	r0, r6
 800df7c:	f7f2 fe36 	bl	8000bec <__addsf3>
 800df80:	4601      	mov	r1, r0
 800df82:	4620      	mov	r0, r4
 800df84:	f7f2 ffee 	bl	8000f64 <__aeabi_fdiv>
 800df88:	4601      	mov	r1, r0
 800df8a:	4638      	mov	r0, r7
 800df8c:	f7f2 fe2e 	bl	8000bec <__addsf3>
 800df90:	4629      	mov	r1, r5
 800df92:	f7f2 fe2b 	bl	8000bec <__addsf3>
 800df96:	4601      	mov	r1, r0
 800df98:	f7f2 fe28 	bl	8000bec <__addsf3>
 800df9c:	e6cb      	b.n	800dd36 <__ieee754_acosf+0x16>
 800df9e:	2000      	movs	r0, #0
 800dfa0:	e6c9      	b.n	800dd36 <__ieee754_acosf+0x16>
 800dfa2:	480f      	ldr	r0, [pc, #60]	; (800dfe0 <__ieee754_acosf+0x2c0>)
 800dfa4:	e6c7      	b.n	800dd36 <__ieee754_acosf+0x16>
 800dfa6:	bf00      	nop
 800dfa8:	40490fdb 	.word	0x40490fdb
 800dfac:	3811ef08 	.word	0x3811ef08
 800dfb0:	3a4f7f04 	.word	0x3a4f7f04
 800dfb4:	3d241146 	.word	0x3d241146
 800dfb8:	3e4e0aa8 	.word	0x3e4e0aa8
 800dfbc:	3ea6b090 	.word	0x3ea6b090
 800dfc0:	3e2aaaab 	.word	0x3e2aaaab
 800dfc4:	3d9dc62e 	.word	0x3d9dc62e
 800dfc8:	3f303361 	.word	0x3f303361
 800dfcc:	4001572d 	.word	0x4001572d
 800dfd0:	4019d139 	.word	0x4019d139
 800dfd4:	33a22168 	.word	0x33a22168
 800dfd8:	3fc90fda 	.word	0x3fc90fda
 800dfdc:	40490fda 	.word	0x40490fda
 800dfe0:	3fc90fdb 	.word	0x3fc90fdb

0800dfe4 <__ieee754_asinf>:
 800dfe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfe8:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800dfec:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800dff0:	4604      	mov	r4, r0
 800dff2:	4605      	mov	r5, r0
 800dff4:	d10c      	bne.n	800e010 <__ieee754_asinf+0x2c>
 800dff6:	498d      	ldr	r1, [pc, #564]	; (800e22c <__ieee754_asinf+0x248>)
 800dff8:	f7f2 ff00 	bl	8000dfc <__aeabi_fmul>
 800dffc:	498c      	ldr	r1, [pc, #560]	; (800e230 <__ieee754_asinf+0x24c>)
 800dffe:	4605      	mov	r5, r0
 800e000:	4620      	mov	r0, r4
 800e002:	f7f2 fefb 	bl	8000dfc <__aeabi_fmul>
 800e006:	4601      	mov	r1, r0
 800e008:	4628      	mov	r0, r5
 800e00a:	f7f2 fdef 	bl	8000bec <__addsf3>
 800e00e:	e006      	b.n	800e01e <__ieee754_asinf+0x3a>
 800e010:	dd07      	ble.n	800e022 <__ieee754_asinf+0x3e>
 800e012:	4601      	mov	r1, r0
 800e014:	f7f2 fde8 	bl	8000be8 <__aeabi_fsub>
 800e018:	4601      	mov	r1, r0
 800e01a:	f7f2 ffa3 	bl	8000f64 <__aeabi_fdiv>
 800e01e:	4604      	mov	r4, r0
 800e020:	e00e      	b.n	800e040 <__ieee754_asinf+0x5c>
 800e022:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800e026:	da58      	bge.n	800e0da <__ieee754_asinf+0xf6>
 800e028:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800e02c:	da0b      	bge.n	800e046 <__ieee754_asinf+0x62>
 800e02e:	4981      	ldr	r1, [pc, #516]	; (800e234 <__ieee754_asinf+0x250>)
 800e030:	f7f2 fddc 	bl	8000bec <__addsf3>
 800e034:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e038:	f7f3 f89c 	bl	8001174 <__aeabi_fcmpgt>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d04c      	beq.n	800e0da <__ieee754_asinf+0xf6>
 800e040:	4620      	mov	r0, r4
 800e042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e046:	4601      	mov	r1, r0
 800e048:	f7f2 fed8 	bl	8000dfc <__aeabi_fmul>
 800e04c:	4605      	mov	r5, r0
 800e04e:	497a      	ldr	r1, [pc, #488]	; (800e238 <__ieee754_asinf+0x254>)
 800e050:	f7f2 fed4 	bl	8000dfc <__aeabi_fmul>
 800e054:	4979      	ldr	r1, [pc, #484]	; (800e23c <__ieee754_asinf+0x258>)
 800e056:	f7f2 fdc9 	bl	8000bec <__addsf3>
 800e05a:	4629      	mov	r1, r5
 800e05c:	f7f2 fece 	bl	8000dfc <__aeabi_fmul>
 800e060:	4977      	ldr	r1, [pc, #476]	; (800e240 <__ieee754_asinf+0x25c>)
 800e062:	f7f2 fdc1 	bl	8000be8 <__aeabi_fsub>
 800e066:	4629      	mov	r1, r5
 800e068:	f7f2 fec8 	bl	8000dfc <__aeabi_fmul>
 800e06c:	4975      	ldr	r1, [pc, #468]	; (800e244 <__ieee754_asinf+0x260>)
 800e06e:	f7f2 fdbd 	bl	8000bec <__addsf3>
 800e072:	4629      	mov	r1, r5
 800e074:	f7f2 fec2 	bl	8000dfc <__aeabi_fmul>
 800e078:	4973      	ldr	r1, [pc, #460]	; (800e248 <__ieee754_asinf+0x264>)
 800e07a:	f7f2 fdb5 	bl	8000be8 <__aeabi_fsub>
 800e07e:	4629      	mov	r1, r5
 800e080:	f7f2 febc 	bl	8000dfc <__aeabi_fmul>
 800e084:	4971      	ldr	r1, [pc, #452]	; (800e24c <__ieee754_asinf+0x268>)
 800e086:	f7f2 fdb1 	bl	8000bec <__addsf3>
 800e08a:	4629      	mov	r1, r5
 800e08c:	f7f2 feb6 	bl	8000dfc <__aeabi_fmul>
 800e090:	496f      	ldr	r1, [pc, #444]	; (800e250 <__ieee754_asinf+0x26c>)
 800e092:	4606      	mov	r6, r0
 800e094:	4628      	mov	r0, r5
 800e096:	f7f2 feb1 	bl	8000dfc <__aeabi_fmul>
 800e09a:	496e      	ldr	r1, [pc, #440]	; (800e254 <__ieee754_asinf+0x270>)
 800e09c:	f7f2 fda4 	bl	8000be8 <__aeabi_fsub>
 800e0a0:	4629      	mov	r1, r5
 800e0a2:	f7f2 feab 	bl	8000dfc <__aeabi_fmul>
 800e0a6:	496c      	ldr	r1, [pc, #432]	; (800e258 <__ieee754_asinf+0x274>)
 800e0a8:	f7f2 fda0 	bl	8000bec <__addsf3>
 800e0ac:	4629      	mov	r1, r5
 800e0ae:	f7f2 fea5 	bl	8000dfc <__aeabi_fmul>
 800e0b2:	496a      	ldr	r1, [pc, #424]	; (800e25c <__ieee754_asinf+0x278>)
 800e0b4:	f7f2 fd98 	bl	8000be8 <__aeabi_fsub>
 800e0b8:	4629      	mov	r1, r5
 800e0ba:	f7f2 fe9f 	bl	8000dfc <__aeabi_fmul>
 800e0be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e0c2:	f7f2 fd93 	bl	8000bec <__addsf3>
 800e0c6:	4601      	mov	r1, r0
 800e0c8:	4630      	mov	r0, r6
 800e0ca:	f7f2 ff4b 	bl	8000f64 <__aeabi_fdiv>
 800e0ce:	4621      	mov	r1, r4
 800e0d0:	f7f2 fe94 	bl	8000dfc <__aeabi_fmul>
 800e0d4:	4601      	mov	r1, r0
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	e797      	b.n	800e00a <__ieee754_asinf+0x26>
 800e0da:	4620      	mov	r0, r4
 800e0dc:	f7ff fb86 	bl	800d7ec <fabsf>
 800e0e0:	4601      	mov	r1, r0
 800e0e2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e0e6:	f7f2 fd7f 	bl	8000be8 <__aeabi_fsub>
 800e0ea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e0ee:	f7f2 fe85 	bl	8000dfc <__aeabi_fmul>
 800e0f2:	4606      	mov	r6, r0
 800e0f4:	4950      	ldr	r1, [pc, #320]	; (800e238 <__ieee754_asinf+0x254>)
 800e0f6:	f7f2 fe81 	bl	8000dfc <__aeabi_fmul>
 800e0fa:	4950      	ldr	r1, [pc, #320]	; (800e23c <__ieee754_asinf+0x258>)
 800e0fc:	f7f2 fd76 	bl	8000bec <__addsf3>
 800e100:	4631      	mov	r1, r6
 800e102:	f7f2 fe7b 	bl	8000dfc <__aeabi_fmul>
 800e106:	494e      	ldr	r1, [pc, #312]	; (800e240 <__ieee754_asinf+0x25c>)
 800e108:	f7f2 fd6e 	bl	8000be8 <__aeabi_fsub>
 800e10c:	4631      	mov	r1, r6
 800e10e:	f7f2 fe75 	bl	8000dfc <__aeabi_fmul>
 800e112:	494c      	ldr	r1, [pc, #304]	; (800e244 <__ieee754_asinf+0x260>)
 800e114:	f7f2 fd6a 	bl	8000bec <__addsf3>
 800e118:	4631      	mov	r1, r6
 800e11a:	f7f2 fe6f 	bl	8000dfc <__aeabi_fmul>
 800e11e:	494a      	ldr	r1, [pc, #296]	; (800e248 <__ieee754_asinf+0x264>)
 800e120:	f7f2 fd62 	bl	8000be8 <__aeabi_fsub>
 800e124:	4631      	mov	r1, r6
 800e126:	f7f2 fe69 	bl	8000dfc <__aeabi_fmul>
 800e12a:	4948      	ldr	r1, [pc, #288]	; (800e24c <__ieee754_asinf+0x268>)
 800e12c:	f7f2 fd5e 	bl	8000bec <__addsf3>
 800e130:	4631      	mov	r1, r6
 800e132:	f7f2 fe63 	bl	8000dfc <__aeabi_fmul>
 800e136:	4946      	ldr	r1, [pc, #280]	; (800e250 <__ieee754_asinf+0x26c>)
 800e138:	4681      	mov	r9, r0
 800e13a:	4630      	mov	r0, r6
 800e13c:	f7f2 fe5e 	bl	8000dfc <__aeabi_fmul>
 800e140:	4944      	ldr	r1, [pc, #272]	; (800e254 <__ieee754_asinf+0x270>)
 800e142:	f7f2 fd51 	bl	8000be8 <__aeabi_fsub>
 800e146:	4631      	mov	r1, r6
 800e148:	f7f2 fe58 	bl	8000dfc <__aeabi_fmul>
 800e14c:	4942      	ldr	r1, [pc, #264]	; (800e258 <__ieee754_asinf+0x274>)
 800e14e:	f7f2 fd4d 	bl	8000bec <__addsf3>
 800e152:	4631      	mov	r1, r6
 800e154:	f7f2 fe52 	bl	8000dfc <__aeabi_fmul>
 800e158:	4940      	ldr	r1, [pc, #256]	; (800e25c <__ieee754_asinf+0x278>)
 800e15a:	f7f2 fd45 	bl	8000be8 <__aeabi_fsub>
 800e15e:	4631      	mov	r1, r6
 800e160:	f7f2 fe4c 	bl	8000dfc <__aeabi_fmul>
 800e164:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e168:	f7f2 fd40 	bl	8000bec <__addsf3>
 800e16c:	4682      	mov	sl, r0
 800e16e:	4630      	mov	r0, r6
 800e170:	f000 fa60 	bl	800e634 <__ieee754_sqrtf>
 800e174:	4b3a      	ldr	r3, [pc, #232]	; (800e260 <__ieee754_asinf+0x27c>)
 800e176:	4607      	mov	r7, r0
 800e178:	4598      	cmp	r8, r3
 800e17a:	dd1a      	ble.n	800e1b2 <__ieee754_asinf+0x1ce>
 800e17c:	4651      	mov	r1, sl
 800e17e:	4648      	mov	r0, r9
 800e180:	f7f2 fef0 	bl	8000f64 <__aeabi_fdiv>
 800e184:	4639      	mov	r1, r7
 800e186:	f7f2 fe39 	bl	8000dfc <__aeabi_fmul>
 800e18a:	4639      	mov	r1, r7
 800e18c:	f7f2 fd2e 	bl	8000bec <__addsf3>
 800e190:	4601      	mov	r1, r0
 800e192:	f7f2 fd2b 	bl	8000bec <__addsf3>
 800e196:	4933      	ldr	r1, [pc, #204]	; (800e264 <__ieee754_asinf+0x280>)
 800e198:	f7f2 fd28 	bl	8000bec <__addsf3>
 800e19c:	4601      	mov	r1, r0
 800e19e:	4823      	ldr	r0, [pc, #140]	; (800e22c <__ieee754_asinf+0x248>)
 800e1a0:	f7f2 fd22 	bl	8000be8 <__aeabi_fsub>
 800e1a4:	2d00      	cmp	r5, #0
 800e1a6:	4604      	mov	r4, r0
 800e1a8:	f73f af4a 	bgt.w	800e040 <__ieee754_asinf+0x5c>
 800e1ac:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e1b0:	e735      	b.n	800e01e <__ieee754_asinf+0x3a>
 800e1b2:	4601      	mov	r1, r0
 800e1b4:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800e1b8:	f7f2 fd18 	bl	8000bec <__addsf3>
 800e1bc:	4651      	mov	r1, sl
 800e1be:	4604      	mov	r4, r0
 800e1c0:	4648      	mov	r0, r9
 800e1c2:	f7f2 fecf 	bl	8000f64 <__aeabi_fdiv>
 800e1c6:	4601      	mov	r1, r0
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	f7f2 fe17 	bl	8000dfc <__aeabi_fmul>
 800e1ce:	f028 080f 	bic.w	r8, r8, #15
 800e1d2:	4681      	mov	r9, r0
 800e1d4:	4641      	mov	r1, r8
 800e1d6:	4640      	mov	r0, r8
 800e1d8:	f7f2 fe10 	bl	8000dfc <__aeabi_fmul>
 800e1dc:	4601      	mov	r1, r0
 800e1de:	4630      	mov	r0, r6
 800e1e0:	f7f2 fd02 	bl	8000be8 <__aeabi_fsub>
 800e1e4:	4641      	mov	r1, r8
 800e1e6:	4604      	mov	r4, r0
 800e1e8:	4638      	mov	r0, r7
 800e1ea:	f7f2 fcff 	bl	8000bec <__addsf3>
 800e1ee:	4601      	mov	r1, r0
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	f7f2 feb7 	bl	8000f64 <__aeabi_fdiv>
 800e1f6:	4601      	mov	r1, r0
 800e1f8:	f7f2 fcf8 	bl	8000bec <__addsf3>
 800e1fc:	4601      	mov	r1, r0
 800e1fe:	480c      	ldr	r0, [pc, #48]	; (800e230 <__ieee754_asinf+0x24c>)
 800e200:	f7f2 fcf2 	bl	8000be8 <__aeabi_fsub>
 800e204:	4601      	mov	r1, r0
 800e206:	4648      	mov	r0, r9
 800e208:	f7f2 fcee 	bl	8000be8 <__aeabi_fsub>
 800e20c:	4641      	mov	r1, r8
 800e20e:	4604      	mov	r4, r0
 800e210:	4640      	mov	r0, r8
 800e212:	f7f2 fceb 	bl	8000bec <__addsf3>
 800e216:	4601      	mov	r1, r0
 800e218:	4813      	ldr	r0, [pc, #76]	; (800e268 <__ieee754_asinf+0x284>)
 800e21a:	f7f2 fce5 	bl	8000be8 <__aeabi_fsub>
 800e21e:	4601      	mov	r1, r0
 800e220:	4620      	mov	r0, r4
 800e222:	f7f2 fce1 	bl	8000be8 <__aeabi_fsub>
 800e226:	4601      	mov	r1, r0
 800e228:	480f      	ldr	r0, [pc, #60]	; (800e268 <__ieee754_asinf+0x284>)
 800e22a:	e7b9      	b.n	800e1a0 <__ieee754_asinf+0x1bc>
 800e22c:	3fc90fdb 	.word	0x3fc90fdb
 800e230:	b33bbd2e 	.word	0xb33bbd2e
 800e234:	7149f2ca 	.word	0x7149f2ca
 800e238:	3811ef08 	.word	0x3811ef08
 800e23c:	3a4f7f04 	.word	0x3a4f7f04
 800e240:	3d241146 	.word	0x3d241146
 800e244:	3e4e0aa8 	.word	0x3e4e0aa8
 800e248:	3ea6b090 	.word	0x3ea6b090
 800e24c:	3e2aaaab 	.word	0x3e2aaaab
 800e250:	3d9dc62e 	.word	0x3d9dc62e
 800e254:	3f303361 	.word	0x3f303361
 800e258:	4001572d 	.word	0x4001572d
 800e25c:	4019d139 	.word	0x4019d139
 800e260:	3f799999 	.word	0x3f799999
 800e264:	333bbd2e 	.word	0x333bbd2e
 800e268:	3f490fdb 	.word	0x3f490fdb

0800e26c <__ieee754_atan2f>:
 800e26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e26e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e272:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800e276:	4603      	mov	r3, r0
 800e278:	dc05      	bgt.n	800e286 <__ieee754_atan2f+0x1a>
 800e27a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800e27e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e282:	4607      	mov	r7, r0
 800e284:	dd04      	ble.n	800e290 <__ieee754_atan2f+0x24>
 800e286:	4618      	mov	r0, r3
 800e288:	f7f2 fcb0 	bl	8000bec <__addsf3>
 800e28c:	4603      	mov	r3, r0
 800e28e:	e011      	b.n	800e2b4 <__ieee754_atan2f+0x48>
 800e290:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800e294:	d103      	bne.n	800e29e <__ieee754_atan2f+0x32>
 800e296:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e29a:	f7ff b967 	b.w	800d56c <atanf>
 800e29e:	178c      	asrs	r4, r1, #30
 800e2a0:	f004 0402 	and.w	r4, r4, #2
 800e2a4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e2a8:	b932      	cbnz	r2, 800e2b8 <__ieee754_atan2f+0x4c>
 800e2aa:	2c02      	cmp	r4, #2
 800e2ac:	d04c      	beq.n	800e348 <__ieee754_atan2f+0xdc>
 800e2ae:	2c03      	cmp	r4, #3
 800e2b0:	d100      	bne.n	800e2b4 <__ieee754_atan2f+0x48>
 800e2b2:	4b29      	ldr	r3, [pc, #164]	; (800e358 <__ieee754_atan2f+0xec>)
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2b8:	b91e      	cbnz	r6, 800e2c2 <__ieee754_atan2f+0x56>
 800e2ba:	2f00      	cmp	r7, #0
 800e2bc:	da4a      	bge.n	800e354 <__ieee754_atan2f+0xe8>
 800e2be:	4b27      	ldr	r3, [pc, #156]	; (800e35c <__ieee754_atan2f+0xf0>)
 800e2c0:	e7f8      	b.n	800e2b4 <__ieee754_atan2f+0x48>
 800e2c2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800e2c6:	d10e      	bne.n	800e2e6 <__ieee754_atan2f+0x7a>
 800e2c8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e2cc:	f104 34ff 	add.w	r4, r4, #4294967295
 800e2d0:	d105      	bne.n	800e2de <__ieee754_atan2f+0x72>
 800e2d2:	2c02      	cmp	r4, #2
 800e2d4:	d83a      	bhi.n	800e34c <__ieee754_atan2f+0xe0>
 800e2d6:	4b22      	ldr	r3, [pc, #136]	; (800e360 <__ieee754_atan2f+0xf4>)
 800e2d8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e2dc:	e7ea      	b.n	800e2b4 <__ieee754_atan2f+0x48>
 800e2de:	2c02      	cmp	r4, #2
 800e2e0:	d836      	bhi.n	800e350 <__ieee754_atan2f+0xe4>
 800e2e2:	4b20      	ldr	r3, [pc, #128]	; (800e364 <__ieee754_atan2f+0xf8>)
 800e2e4:	e7f8      	b.n	800e2d8 <__ieee754_atan2f+0x6c>
 800e2e6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e2ea:	d0e6      	beq.n	800e2ba <__ieee754_atan2f+0x4e>
 800e2ec:	1b92      	subs	r2, r2, r6
 800e2ee:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800e2f2:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800e2f6:	da17      	bge.n	800e328 <__ieee754_atan2f+0xbc>
 800e2f8:	2900      	cmp	r1, #0
 800e2fa:	da01      	bge.n	800e300 <__ieee754_atan2f+0x94>
 800e2fc:	303c      	adds	r0, #60	; 0x3c
 800e2fe:	db15      	blt.n	800e32c <__ieee754_atan2f+0xc0>
 800e300:	4618      	mov	r0, r3
 800e302:	f7f2 fe2f 	bl	8000f64 <__aeabi_fdiv>
 800e306:	f7ff fa71 	bl	800d7ec <fabsf>
 800e30a:	f7ff f92f 	bl	800d56c <atanf>
 800e30e:	4603      	mov	r3, r0
 800e310:	2c01      	cmp	r4, #1
 800e312:	d00d      	beq.n	800e330 <__ieee754_atan2f+0xc4>
 800e314:	2c02      	cmp	r4, #2
 800e316:	d00e      	beq.n	800e336 <__ieee754_atan2f+0xca>
 800e318:	2c00      	cmp	r4, #0
 800e31a:	d0cb      	beq.n	800e2b4 <__ieee754_atan2f+0x48>
 800e31c:	4912      	ldr	r1, [pc, #72]	; (800e368 <__ieee754_atan2f+0xfc>)
 800e31e:	4618      	mov	r0, r3
 800e320:	f7f2 fc64 	bl	8000bec <__addsf3>
 800e324:	4911      	ldr	r1, [pc, #68]	; (800e36c <__ieee754_atan2f+0x100>)
 800e326:	e00c      	b.n	800e342 <__ieee754_atan2f+0xd6>
 800e328:	4b11      	ldr	r3, [pc, #68]	; (800e370 <__ieee754_atan2f+0x104>)
 800e32a:	e7f1      	b.n	800e310 <__ieee754_atan2f+0xa4>
 800e32c:	2300      	movs	r3, #0
 800e32e:	e7ef      	b.n	800e310 <__ieee754_atan2f+0xa4>
 800e330:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e334:	e7be      	b.n	800e2b4 <__ieee754_atan2f+0x48>
 800e336:	490c      	ldr	r1, [pc, #48]	; (800e368 <__ieee754_atan2f+0xfc>)
 800e338:	4618      	mov	r0, r3
 800e33a:	f7f2 fc57 	bl	8000bec <__addsf3>
 800e33e:	4601      	mov	r1, r0
 800e340:	480a      	ldr	r0, [pc, #40]	; (800e36c <__ieee754_atan2f+0x100>)
 800e342:	f7f2 fc51 	bl	8000be8 <__aeabi_fsub>
 800e346:	e7a1      	b.n	800e28c <__ieee754_atan2f+0x20>
 800e348:	4b08      	ldr	r3, [pc, #32]	; (800e36c <__ieee754_atan2f+0x100>)
 800e34a:	e7b3      	b.n	800e2b4 <__ieee754_atan2f+0x48>
 800e34c:	4b09      	ldr	r3, [pc, #36]	; (800e374 <__ieee754_atan2f+0x108>)
 800e34e:	e7b1      	b.n	800e2b4 <__ieee754_atan2f+0x48>
 800e350:	2300      	movs	r3, #0
 800e352:	e7af      	b.n	800e2b4 <__ieee754_atan2f+0x48>
 800e354:	4b06      	ldr	r3, [pc, #24]	; (800e370 <__ieee754_atan2f+0x104>)
 800e356:	e7ad      	b.n	800e2b4 <__ieee754_atan2f+0x48>
 800e358:	c0490fdb 	.word	0xc0490fdb
 800e35c:	bfc90fdb 	.word	0xbfc90fdb
 800e360:	080133a4 	.word	0x080133a4
 800e364:	080133b0 	.word	0x080133b0
 800e368:	33bbbd2e 	.word	0x33bbbd2e
 800e36c:	40490fdb 	.word	0x40490fdb
 800e370:	3fc90fdb 	.word	0x3fc90fdb
 800e374:	3f490fdb 	.word	0x3f490fdb

0800e378 <__ieee754_rem_pio2f>:
 800e378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e37c:	4aa0      	ldr	r2, [pc, #640]	; (800e600 <__ieee754_rem_pio2f+0x288>)
 800e37e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800e382:	4296      	cmp	r6, r2
 800e384:	460c      	mov	r4, r1
 800e386:	4682      	mov	sl, r0
 800e388:	b087      	sub	sp, #28
 800e38a:	dc04      	bgt.n	800e396 <__ieee754_rem_pio2f+0x1e>
 800e38c:	2300      	movs	r3, #0
 800e38e:	6008      	str	r0, [r1, #0]
 800e390:	604b      	str	r3, [r1, #4]
 800e392:	2500      	movs	r5, #0
 800e394:	e01a      	b.n	800e3cc <__ieee754_rem_pio2f+0x54>
 800e396:	4a9b      	ldr	r2, [pc, #620]	; (800e604 <__ieee754_rem_pio2f+0x28c>)
 800e398:	4296      	cmp	r6, r2
 800e39a:	dc4b      	bgt.n	800e434 <__ieee754_rem_pio2f+0xbc>
 800e39c:	2800      	cmp	r0, #0
 800e39e:	499a      	ldr	r1, [pc, #616]	; (800e608 <__ieee754_rem_pio2f+0x290>)
 800e3a0:	4f9a      	ldr	r7, [pc, #616]	; (800e60c <__ieee754_rem_pio2f+0x294>)
 800e3a2:	f026 060f 	bic.w	r6, r6, #15
 800e3a6:	dd23      	ble.n	800e3f0 <__ieee754_rem_pio2f+0x78>
 800e3a8:	f7f2 fc1e 	bl	8000be8 <__aeabi_fsub>
 800e3ac:	42be      	cmp	r6, r7
 800e3ae:	4605      	mov	r5, r0
 800e3b0:	d010      	beq.n	800e3d4 <__ieee754_rem_pio2f+0x5c>
 800e3b2:	4997      	ldr	r1, [pc, #604]	; (800e610 <__ieee754_rem_pio2f+0x298>)
 800e3b4:	f7f2 fc18 	bl	8000be8 <__aeabi_fsub>
 800e3b8:	4601      	mov	r1, r0
 800e3ba:	6020      	str	r0, [r4, #0]
 800e3bc:	4628      	mov	r0, r5
 800e3be:	f7f2 fc13 	bl	8000be8 <__aeabi_fsub>
 800e3c2:	4993      	ldr	r1, [pc, #588]	; (800e610 <__ieee754_rem_pio2f+0x298>)
 800e3c4:	f7f2 fc10 	bl	8000be8 <__aeabi_fsub>
 800e3c8:	2501      	movs	r5, #1
 800e3ca:	6060      	str	r0, [r4, #4]
 800e3cc:	4628      	mov	r0, r5
 800e3ce:	b007      	add	sp, #28
 800e3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3d4:	498f      	ldr	r1, [pc, #572]	; (800e614 <__ieee754_rem_pio2f+0x29c>)
 800e3d6:	f7f2 fc07 	bl	8000be8 <__aeabi_fsub>
 800e3da:	498f      	ldr	r1, [pc, #572]	; (800e618 <__ieee754_rem_pio2f+0x2a0>)
 800e3dc:	4605      	mov	r5, r0
 800e3de:	f7f2 fc03 	bl	8000be8 <__aeabi_fsub>
 800e3e2:	4601      	mov	r1, r0
 800e3e4:	6020      	str	r0, [r4, #0]
 800e3e6:	4628      	mov	r0, r5
 800e3e8:	f7f2 fbfe 	bl	8000be8 <__aeabi_fsub>
 800e3ec:	498a      	ldr	r1, [pc, #552]	; (800e618 <__ieee754_rem_pio2f+0x2a0>)
 800e3ee:	e7e9      	b.n	800e3c4 <__ieee754_rem_pio2f+0x4c>
 800e3f0:	f7f2 fbfc 	bl	8000bec <__addsf3>
 800e3f4:	42be      	cmp	r6, r7
 800e3f6:	4605      	mov	r5, r0
 800e3f8:	d00e      	beq.n	800e418 <__ieee754_rem_pio2f+0xa0>
 800e3fa:	4985      	ldr	r1, [pc, #532]	; (800e610 <__ieee754_rem_pio2f+0x298>)
 800e3fc:	f7f2 fbf6 	bl	8000bec <__addsf3>
 800e400:	4601      	mov	r1, r0
 800e402:	6020      	str	r0, [r4, #0]
 800e404:	4628      	mov	r0, r5
 800e406:	f7f2 fbef 	bl	8000be8 <__aeabi_fsub>
 800e40a:	4981      	ldr	r1, [pc, #516]	; (800e610 <__ieee754_rem_pio2f+0x298>)
 800e40c:	f7f2 fbee 	bl	8000bec <__addsf3>
 800e410:	f04f 35ff 	mov.w	r5, #4294967295
 800e414:	6060      	str	r0, [r4, #4]
 800e416:	e7d9      	b.n	800e3cc <__ieee754_rem_pio2f+0x54>
 800e418:	497e      	ldr	r1, [pc, #504]	; (800e614 <__ieee754_rem_pio2f+0x29c>)
 800e41a:	f7f2 fbe7 	bl	8000bec <__addsf3>
 800e41e:	497e      	ldr	r1, [pc, #504]	; (800e618 <__ieee754_rem_pio2f+0x2a0>)
 800e420:	4605      	mov	r5, r0
 800e422:	f7f2 fbe3 	bl	8000bec <__addsf3>
 800e426:	4601      	mov	r1, r0
 800e428:	6020      	str	r0, [r4, #0]
 800e42a:	4628      	mov	r0, r5
 800e42c:	f7f2 fbdc 	bl	8000be8 <__aeabi_fsub>
 800e430:	4979      	ldr	r1, [pc, #484]	; (800e618 <__ieee754_rem_pio2f+0x2a0>)
 800e432:	e7eb      	b.n	800e40c <__ieee754_rem_pio2f+0x94>
 800e434:	4a79      	ldr	r2, [pc, #484]	; (800e61c <__ieee754_rem_pio2f+0x2a4>)
 800e436:	4296      	cmp	r6, r2
 800e438:	f300 8091 	bgt.w	800e55e <__ieee754_rem_pio2f+0x1e6>
 800e43c:	f7ff f9d6 	bl	800d7ec <fabsf>
 800e440:	4977      	ldr	r1, [pc, #476]	; (800e620 <__ieee754_rem_pio2f+0x2a8>)
 800e442:	4607      	mov	r7, r0
 800e444:	f7f2 fcda 	bl	8000dfc <__aeabi_fmul>
 800e448:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e44c:	f7f2 fbce 	bl	8000bec <__addsf3>
 800e450:	f7f2 feb0 	bl	80011b4 <__aeabi_f2iz>
 800e454:	4605      	mov	r5, r0
 800e456:	f7f2 fc7d 	bl	8000d54 <__aeabi_i2f>
 800e45a:	496b      	ldr	r1, [pc, #428]	; (800e608 <__ieee754_rem_pio2f+0x290>)
 800e45c:	4681      	mov	r9, r0
 800e45e:	f7f2 fccd 	bl	8000dfc <__aeabi_fmul>
 800e462:	4601      	mov	r1, r0
 800e464:	4638      	mov	r0, r7
 800e466:	f7f2 fbbf 	bl	8000be8 <__aeabi_fsub>
 800e46a:	4969      	ldr	r1, [pc, #420]	; (800e610 <__ieee754_rem_pio2f+0x298>)
 800e46c:	4680      	mov	r8, r0
 800e46e:	4648      	mov	r0, r9
 800e470:	f7f2 fcc4 	bl	8000dfc <__aeabi_fmul>
 800e474:	2d1f      	cmp	r5, #31
 800e476:	4607      	mov	r7, r0
 800e478:	dc0c      	bgt.n	800e494 <__ieee754_rem_pio2f+0x11c>
 800e47a:	4a6a      	ldr	r2, [pc, #424]	; (800e624 <__ieee754_rem_pio2f+0x2ac>)
 800e47c:	1e69      	subs	r1, r5, #1
 800e47e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e482:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800e486:	4293      	cmp	r3, r2
 800e488:	d004      	beq.n	800e494 <__ieee754_rem_pio2f+0x11c>
 800e48a:	4639      	mov	r1, r7
 800e48c:	4640      	mov	r0, r8
 800e48e:	f7f2 fbab 	bl	8000be8 <__aeabi_fsub>
 800e492:	e00b      	b.n	800e4ac <__ieee754_rem_pio2f+0x134>
 800e494:	4639      	mov	r1, r7
 800e496:	4640      	mov	r0, r8
 800e498:	f7f2 fba6 	bl	8000be8 <__aeabi_fsub>
 800e49c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e4a0:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800e4a4:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800e4a8:	2e08      	cmp	r6, #8
 800e4aa:	dc01      	bgt.n	800e4b0 <__ieee754_rem_pio2f+0x138>
 800e4ac:	6020      	str	r0, [r4, #0]
 800e4ae:	e026      	b.n	800e4fe <__ieee754_rem_pio2f+0x186>
 800e4b0:	4958      	ldr	r1, [pc, #352]	; (800e614 <__ieee754_rem_pio2f+0x29c>)
 800e4b2:	4648      	mov	r0, r9
 800e4b4:	f7f2 fca2 	bl	8000dfc <__aeabi_fmul>
 800e4b8:	4607      	mov	r7, r0
 800e4ba:	4601      	mov	r1, r0
 800e4bc:	4640      	mov	r0, r8
 800e4be:	f7f2 fb93 	bl	8000be8 <__aeabi_fsub>
 800e4c2:	4601      	mov	r1, r0
 800e4c4:	4606      	mov	r6, r0
 800e4c6:	4640      	mov	r0, r8
 800e4c8:	f7f2 fb8e 	bl	8000be8 <__aeabi_fsub>
 800e4cc:	4639      	mov	r1, r7
 800e4ce:	f7f2 fb8b 	bl	8000be8 <__aeabi_fsub>
 800e4d2:	4607      	mov	r7, r0
 800e4d4:	4950      	ldr	r1, [pc, #320]	; (800e618 <__ieee754_rem_pio2f+0x2a0>)
 800e4d6:	4648      	mov	r0, r9
 800e4d8:	f7f2 fc90 	bl	8000dfc <__aeabi_fmul>
 800e4dc:	4639      	mov	r1, r7
 800e4de:	f7f2 fb83 	bl	8000be8 <__aeabi_fsub>
 800e4e2:	4601      	mov	r1, r0
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	f7f2 fb7e 	bl	8000be8 <__aeabi_fsub>
 800e4ec:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e4f0:	ebab 0b03 	sub.w	fp, fp, r3
 800e4f4:	f1bb 0f19 	cmp.w	fp, #25
 800e4f8:	dc16      	bgt.n	800e528 <__ieee754_rem_pio2f+0x1b0>
 800e4fa:	46b0      	mov	r8, r6
 800e4fc:	6020      	str	r0, [r4, #0]
 800e4fe:	6826      	ldr	r6, [r4, #0]
 800e500:	4640      	mov	r0, r8
 800e502:	4631      	mov	r1, r6
 800e504:	f7f2 fb70 	bl	8000be8 <__aeabi_fsub>
 800e508:	4639      	mov	r1, r7
 800e50a:	f7f2 fb6d 	bl	8000be8 <__aeabi_fsub>
 800e50e:	f1ba 0f00 	cmp.w	sl, #0
 800e512:	6060      	str	r0, [r4, #4]
 800e514:	f6bf af5a 	bge.w	800e3cc <__ieee754_rem_pio2f+0x54>
 800e518:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800e51c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e520:	6026      	str	r6, [r4, #0]
 800e522:	6060      	str	r0, [r4, #4]
 800e524:	426d      	negs	r5, r5
 800e526:	e751      	b.n	800e3cc <__ieee754_rem_pio2f+0x54>
 800e528:	493f      	ldr	r1, [pc, #252]	; (800e628 <__ieee754_rem_pio2f+0x2b0>)
 800e52a:	4648      	mov	r0, r9
 800e52c:	f7f2 fc66 	bl	8000dfc <__aeabi_fmul>
 800e530:	4607      	mov	r7, r0
 800e532:	4601      	mov	r1, r0
 800e534:	4630      	mov	r0, r6
 800e536:	f7f2 fb57 	bl	8000be8 <__aeabi_fsub>
 800e53a:	4601      	mov	r1, r0
 800e53c:	4680      	mov	r8, r0
 800e53e:	4630      	mov	r0, r6
 800e540:	f7f2 fb52 	bl	8000be8 <__aeabi_fsub>
 800e544:	4639      	mov	r1, r7
 800e546:	f7f2 fb4f 	bl	8000be8 <__aeabi_fsub>
 800e54a:	4606      	mov	r6, r0
 800e54c:	4937      	ldr	r1, [pc, #220]	; (800e62c <__ieee754_rem_pio2f+0x2b4>)
 800e54e:	4648      	mov	r0, r9
 800e550:	f7f2 fc54 	bl	8000dfc <__aeabi_fmul>
 800e554:	4631      	mov	r1, r6
 800e556:	f7f2 fb47 	bl	8000be8 <__aeabi_fsub>
 800e55a:	4607      	mov	r7, r0
 800e55c:	e795      	b.n	800e48a <__ieee754_rem_pio2f+0x112>
 800e55e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800e562:	db05      	blt.n	800e570 <__ieee754_rem_pio2f+0x1f8>
 800e564:	4601      	mov	r1, r0
 800e566:	f7f2 fb3f 	bl	8000be8 <__aeabi_fsub>
 800e56a:	6060      	str	r0, [r4, #4]
 800e56c:	6020      	str	r0, [r4, #0]
 800e56e:	e710      	b.n	800e392 <__ieee754_rem_pio2f+0x1a>
 800e570:	15f7      	asrs	r7, r6, #23
 800e572:	3f86      	subs	r7, #134	; 0x86
 800e574:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800e578:	4630      	mov	r0, r6
 800e57a:	f7f2 fe1b 	bl	80011b4 <__aeabi_f2iz>
 800e57e:	f7f2 fbe9 	bl	8000d54 <__aeabi_i2f>
 800e582:	4601      	mov	r1, r0
 800e584:	9003      	str	r0, [sp, #12]
 800e586:	4630      	mov	r0, r6
 800e588:	f7f2 fb2e 	bl	8000be8 <__aeabi_fsub>
 800e58c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e590:	f7f2 fc34 	bl	8000dfc <__aeabi_fmul>
 800e594:	4606      	mov	r6, r0
 800e596:	f7f2 fe0d 	bl	80011b4 <__aeabi_f2iz>
 800e59a:	f7f2 fbdb 	bl	8000d54 <__aeabi_i2f>
 800e59e:	4601      	mov	r1, r0
 800e5a0:	9004      	str	r0, [sp, #16]
 800e5a2:	4605      	mov	r5, r0
 800e5a4:	4630      	mov	r0, r6
 800e5a6:	f7f2 fb1f 	bl	8000be8 <__aeabi_fsub>
 800e5aa:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e5ae:	f7f2 fc25 	bl	8000dfc <__aeabi_fmul>
 800e5b2:	2100      	movs	r1, #0
 800e5b4:	9005      	str	r0, [sp, #20]
 800e5b6:	f7f2 fdb5 	bl	8001124 <__aeabi_fcmpeq>
 800e5ba:	b1f0      	cbz	r0, 800e5fa <__ieee754_rem_pio2f+0x282>
 800e5bc:	2100      	movs	r1, #0
 800e5be:	4628      	mov	r0, r5
 800e5c0:	f7f2 fdb0 	bl	8001124 <__aeabi_fcmpeq>
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	bf14      	ite	ne
 800e5c8:	2301      	movne	r3, #1
 800e5ca:	2302      	moveq	r3, #2
 800e5cc:	4a18      	ldr	r2, [pc, #96]	; (800e630 <__ieee754_rem_pio2f+0x2b8>)
 800e5ce:	4621      	mov	r1, r4
 800e5d0:	9201      	str	r2, [sp, #4]
 800e5d2:	2202      	movs	r2, #2
 800e5d4:	a803      	add	r0, sp, #12
 800e5d6:	9200      	str	r2, [sp, #0]
 800e5d8:	463a      	mov	r2, r7
 800e5da:	f000 fdbb 	bl	800f154 <__kernel_rem_pio2f>
 800e5de:	f1ba 0f00 	cmp.w	sl, #0
 800e5e2:	4605      	mov	r5, r0
 800e5e4:	f6bf aef2 	bge.w	800e3cc <__ieee754_rem_pio2f+0x54>
 800e5e8:	6823      	ldr	r3, [r4, #0]
 800e5ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e5ee:	6023      	str	r3, [r4, #0]
 800e5f0:	6863      	ldr	r3, [r4, #4]
 800e5f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e5f6:	6063      	str	r3, [r4, #4]
 800e5f8:	e794      	b.n	800e524 <__ieee754_rem_pio2f+0x1ac>
 800e5fa:	2303      	movs	r3, #3
 800e5fc:	e7e6      	b.n	800e5cc <__ieee754_rem_pio2f+0x254>
 800e5fe:	bf00      	nop
 800e600:	3f490fd8 	.word	0x3f490fd8
 800e604:	4016cbe3 	.word	0x4016cbe3
 800e608:	3fc90f80 	.word	0x3fc90f80
 800e60c:	3fc90fd0 	.word	0x3fc90fd0
 800e610:	37354443 	.word	0x37354443
 800e614:	37354400 	.word	0x37354400
 800e618:	2e85a308 	.word	0x2e85a308
 800e61c:	43490f80 	.word	0x43490f80
 800e620:	3f22f984 	.word	0x3f22f984
 800e624:	080133bc 	.word	0x080133bc
 800e628:	2e85a300 	.word	0x2e85a300
 800e62c:	248d3132 	.word	0x248d3132
 800e630:	0801343c 	.word	0x0801343c

0800e634 <__ieee754_sqrtf>:
 800e634:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800e638:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e63c:	b570      	push	{r4, r5, r6, lr}
 800e63e:	4603      	mov	r3, r0
 800e640:	4604      	mov	r4, r0
 800e642:	d309      	bcc.n	800e658 <__ieee754_sqrtf+0x24>
 800e644:	4601      	mov	r1, r0
 800e646:	f7f2 fbd9 	bl	8000dfc <__aeabi_fmul>
 800e64a:	4601      	mov	r1, r0
 800e64c:	4620      	mov	r0, r4
 800e64e:	f7f2 facd 	bl	8000bec <__addsf3>
 800e652:	4604      	mov	r4, r0
 800e654:	4620      	mov	r0, r4
 800e656:	bd70      	pop	{r4, r5, r6, pc}
 800e658:	2a00      	cmp	r2, #0
 800e65a:	d0fb      	beq.n	800e654 <__ieee754_sqrtf+0x20>
 800e65c:	2800      	cmp	r0, #0
 800e65e:	da06      	bge.n	800e66e <__ieee754_sqrtf+0x3a>
 800e660:	4601      	mov	r1, r0
 800e662:	f7f2 fac1 	bl	8000be8 <__aeabi_fsub>
 800e666:	4601      	mov	r1, r0
 800e668:	f7f2 fc7c 	bl	8000f64 <__aeabi_fdiv>
 800e66c:	e7f1      	b.n	800e652 <__ieee754_sqrtf+0x1e>
 800e66e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800e672:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800e676:	d029      	beq.n	800e6cc <__ieee754_sqrtf+0x98>
 800e678:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800e67c:	07cb      	lsls	r3, r1, #31
 800e67e:	f04f 0300 	mov.w	r3, #0
 800e682:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800e686:	f04f 0419 	mov.w	r4, #25
 800e68a:	461e      	mov	r6, r3
 800e68c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800e690:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e694:	bf58      	it	pl
 800e696:	0052      	lslpl	r2, r2, #1
 800e698:	1040      	asrs	r0, r0, #1
 800e69a:	0052      	lsls	r2, r2, #1
 800e69c:	1875      	adds	r5, r6, r1
 800e69e:	4295      	cmp	r5, r2
 800e6a0:	bfde      	ittt	le
 800e6a2:	186e      	addle	r6, r5, r1
 800e6a4:	1b52      	suble	r2, r2, r5
 800e6a6:	185b      	addle	r3, r3, r1
 800e6a8:	3c01      	subs	r4, #1
 800e6aa:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e6ae:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e6b2:	d1f3      	bne.n	800e69c <__ieee754_sqrtf+0x68>
 800e6b4:	b112      	cbz	r2, 800e6bc <__ieee754_sqrtf+0x88>
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	f023 0301 	bic.w	r3, r3, #1
 800e6bc:	105c      	asrs	r4, r3, #1
 800e6be:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800e6c2:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800e6c6:	e7c5      	b.n	800e654 <__ieee754_sqrtf+0x20>
 800e6c8:	005b      	lsls	r3, r3, #1
 800e6ca:	3201      	adds	r2, #1
 800e6cc:	0218      	lsls	r0, r3, #8
 800e6ce:	d5fb      	bpl.n	800e6c8 <__ieee754_sqrtf+0x94>
 800e6d0:	3a01      	subs	r2, #1
 800e6d2:	1a89      	subs	r1, r1, r2
 800e6d4:	e7d0      	b.n	800e678 <__ieee754_sqrtf+0x44>
	...

0800e6d8 <__kernel_cos>:
 800e6d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6dc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e6e0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800e6e4:	4680      	mov	r8, r0
 800e6e6:	460f      	mov	r7, r1
 800e6e8:	e9cd 2300 	strd	r2, r3, [sp]
 800e6ec:	da04      	bge.n	800e6f8 <__kernel_cos+0x20>
 800e6ee:	f7f2 f9df 	bl	8000ab0 <__aeabi_d2iz>
 800e6f2:	2800      	cmp	r0, #0
 800e6f4:	f000 8086 	beq.w	800e804 <__kernel_cos+0x12c>
 800e6f8:	4642      	mov	r2, r8
 800e6fa:	463b      	mov	r3, r7
 800e6fc:	4640      	mov	r0, r8
 800e6fe:	4639      	mov	r1, r7
 800e700:	f7f1 ff26 	bl	8000550 <__aeabi_dmul>
 800e704:	2200      	movs	r2, #0
 800e706:	4b4e      	ldr	r3, [pc, #312]	; (800e840 <__kernel_cos+0x168>)
 800e708:	4604      	mov	r4, r0
 800e70a:	460d      	mov	r5, r1
 800e70c:	f7f1 ff20 	bl	8000550 <__aeabi_dmul>
 800e710:	a33f      	add	r3, pc, #252	; (adr r3, 800e810 <__kernel_cos+0x138>)
 800e712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e716:	4682      	mov	sl, r0
 800e718:	468b      	mov	fp, r1
 800e71a:	4620      	mov	r0, r4
 800e71c:	4629      	mov	r1, r5
 800e71e:	f7f1 ff17 	bl	8000550 <__aeabi_dmul>
 800e722:	a33d      	add	r3, pc, #244	; (adr r3, 800e818 <__kernel_cos+0x140>)
 800e724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e728:	f7f1 fd5c 	bl	80001e4 <__adddf3>
 800e72c:	4622      	mov	r2, r4
 800e72e:	462b      	mov	r3, r5
 800e730:	f7f1 ff0e 	bl	8000550 <__aeabi_dmul>
 800e734:	a33a      	add	r3, pc, #232	; (adr r3, 800e820 <__kernel_cos+0x148>)
 800e736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73a:	f7f1 fd51 	bl	80001e0 <__aeabi_dsub>
 800e73e:	4622      	mov	r2, r4
 800e740:	462b      	mov	r3, r5
 800e742:	f7f1 ff05 	bl	8000550 <__aeabi_dmul>
 800e746:	a338      	add	r3, pc, #224	; (adr r3, 800e828 <__kernel_cos+0x150>)
 800e748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74c:	f7f1 fd4a 	bl	80001e4 <__adddf3>
 800e750:	4622      	mov	r2, r4
 800e752:	462b      	mov	r3, r5
 800e754:	f7f1 fefc 	bl	8000550 <__aeabi_dmul>
 800e758:	a335      	add	r3, pc, #212	; (adr r3, 800e830 <__kernel_cos+0x158>)
 800e75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e75e:	f7f1 fd3f 	bl	80001e0 <__aeabi_dsub>
 800e762:	4622      	mov	r2, r4
 800e764:	462b      	mov	r3, r5
 800e766:	f7f1 fef3 	bl	8000550 <__aeabi_dmul>
 800e76a:	a333      	add	r3, pc, #204	; (adr r3, 800e838 <__kernel_cos+0x160>)
 800e76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e770:	f7f1 fd38 	bl	80001e4 <__adddf3>
 800e774:	4622      	mov	r2, r4
 800e776:	462b      	mov	r3, r5
 800e778:	f7f1 feea 	bl	8000550 <__aeabi_dmul>
 800e77c:	4622      	mov	r2, r4
 800e77e:	462b      	mov	r3, r5
 800e780:	f7f1 fee6 	bl	8000550 <__aeabi_dmul>
 800e784:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e788:	4604      	mov	r4, r0
 800e78a:	460d      	mov	r5, r1
 800e78c:	4640      	mov	r0, r8
 800e78e:	4639      	mov	r1, r7
 800e790:	f7f1 fede 	bl	8000550 <__aeabi_dmul>
 800e794:	460b      	mov	r3, r1
 800e796:	4602      	mov	r2, r0
 800e798:	4629      	mov	r1, r5
 800e79a:	4620      	mov	r0, r4
 800e79c:	f7f1 fd20 	bl	80001e0 <__aeabi_dsub>
 800e7a0:	4b28      	ldr	r3, [pc, #160]	; (800e844 <__kernel_cos+0x16c>)
 800e7a2:	4680      	mov	r8, r0
 800e7a4:	429e      	cmp	r6, r3
 800e7a6:	4689      	mov	r9, r1
 800e7a8:	dc0e      	bgt.n	800e7c8 <__kernel_cos+0xf0>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	4650      	mov	r0, sl
 800e7b0:	4659      	mov	r1, fp
 800e7b2:	f7f1 fd15 	bl	80001e0 <__aeabi_dsub>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	2000      	movs	r0, #0
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	4922      	ldr	r1, [pc, #136]	; (800e848 <__kernel_cos+0x170>)
 800e7be:	f7f1 fd0f 	bl	80001e0 <__aeabi_dsub>
 800e7c2:	b003      	add	sp, #12
 800e7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c8:	2400      	movs	r4, #0
 800e7ca:	4b20      	ldr	r3, [pc, #128]	; (800e84c <__kernel_cos+0x174>)
 800e7cc:	4622      	mov	r2, r4
 800e7ce:	429e      	cmp	r6, r3
 800e7d0:	bfcc      	ite	gt
 800e7d2:	4d1f      	ldrgt	r5, [pc, #124]	; (800e850 <__kernel_cos+0x178>)
 800e7d4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800e7d8:	462b      	mov	r3, r5
 800e7da:	2000      	movs	r0, #0
 800e7dc:	491a      	ldr	r1, [pc, #104]	; (800e848 <__kernel_cos+0x170>)
 800e7de:	f7f1 fcff 	bl	80001e0 <__aeabi_dsub>
 800e7e2:	4622      	mov	r2, r4
 800e7e4:	4606      	mov	r6, r0
 800e7e6:	460f      	mov	r7, r1
 800e7e8:	462b      	mov	r3, r5
 800e7ea:	4650      	mov	r0, sl
 800e7ec:	4659      	mov	r1, fp
 800e7ee:	f7f1 fcf7 	bl	80001e0 <__aeabi_dsub>
 800e7f2:	4642      	mov	r2, r8
 800e7f4:	464b      	mov	r3, r9
 800e7f6:	f7f1 fcf3 	bl	80001e0 <__aeabi_dsub>
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	4630      	mov	r0, r6
 800e800:	4639      	mov	r1, r7
 800e802:	e7dc      	b.n	800e7be <__kernel_cos+0xe6>
 800e804:	2000      	movs	r0, #0
 800e806:	4910      	ldr	r1, [pc, #64]	; (800e848 <__kernel_cos+0x170>)
 800e808:	e7db      	b.n	800e7c2 <__kernel_cos+0xea>
 800e80a:	bf00      	nop
 800e80c:	f3af 8000 	nop.w
 800e810:	be8838d4 	.word	0xbe8838d4
 800e814:	bda8fae9 	.word	0xbda8fae9
 800e818:	bdb4b1c4 	.word	0xbdb4b1c4
 800e81c:	3e21ee9e 	.word	0x3e21ee9e
 800e820:	809c52ad 	.word	0x809c52ad
 800e824:	3e927e4f 	.word	0x3e927e4f
 800e828:	19cb1590 	.word	0x19cb1590
 800e82c:	3efa01a0 	.word	0x3efa01a0
 800e830:	16c15177 	.word	0x16c15177
 800e834:	3f56c16c 	.word	0x3f56c16c
 800e838:	5555554c 	.word	0x5555554c
 800e83c:	3fa55555 	.word	0x3fa55555
 800e840:	3fe00000 	.word	0x3fe00000
 800e844:	3fd33332 	.word	0x3fd33332
 800e848:	3ff00000 	.word	0x3ff00000
 800e84c:	3fe90000 	.word	0x3fe90000
 800e850:	3fd20000 	.word	0x3fd20000

0800e854 <__kernel_rem_pio2>:
 800e854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e858:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e85c:	9308      	str	r3, [sp, #32]
 800e85e:	9101      	str	r1, [sp, #4]
 800e860:	4bc0      	ldr	r3, [pc, #768]	; (800eb64 <__kernel_rem_pio2+0x310>)
 800e862:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e864:	f112 0f14 	cmn.w	r2, #20
 800e868:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e86c:	bfa8      	it	ge
 800e86e:	1ed4      	subge	r4, r2, #3
 800e870:	9304      	str	r3, [sp, #16]
 800e872:	9b08      	ldr	r3, [sp, #32]
 800e874:	bfb8      	it	lt
 800e876:	2400      	movlt	r4, #0
 800e878:	f103 33ff 	add.w	r3, r3, #4294967295
 800e87c:	9306      	str	r3, [sp, #24]
 800e87e:	bfa4      	itt	ge
 800e880:	2318      	movge	r3, #24
 800e882:	fb94 f4f3 	sdivge	r4, r4, r3
 800e886:	f06f 0317 	mvn.w	r3, #23
 800e88a:	fb04 3303 	mla	r3, r4, r3, r3
 800e88e:	eb03 0a02 	add.w	sl, r3, r2
 800e892:	9a06      	ldr	r2, [sp, #24]
 800e894:	9b04      	ldr	r3, [sp, #16]
 800e896:	1aa7      	subs	r7, r4, r2
 800e898:	eb03 0802 	add.w	r8, r3, r2
 800e89c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e89e:	2500      	movs	r5, #0
 800e8a0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	9009      	str	r0, [sp, #36]	; 0x24
 800e8aa:	ae20      	add	r6, sp, #128	; 0x80
 800e8ac:	4545      	cmp	r5, r8
 800e8ae:	dd19      	ble.n	800e8e4 <__kernel_rem_pio2+0x90>
 800e8b0:	9b08      	ldr	r3, [sp, #32]
 800e8b2:	aa20      	add	r2, sp, #128	; 0x80
 800e8b4:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e8b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e8bc:	f1c3 0301 	rsb	r3, r3, #1
 800e8c0:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e8c4:	9307      	str	r3, [sp, #28]
 800e8c6:	9b07      	ldr	r3, [sp, #28]
 800e8c8:	9a04      	ldr	r2, [sp, #16]
 800e8ca:	4443      	add	r3, r8
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	db35      	blt.n	800e93c <__kernel_rem_pio2+0xe8>
 800e8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f1a3 0908 	sub.w	r9, r3, #8
 800e8d8:	2300      	movs	r3, #0
 800e8da:	462f      	mov	r7, r5
 800e8dc:	2600      	movs	r6, #0
 800e8de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e8e2:	e01f      	b.n	800e924 <__kernel_rem_pio2+0xd0>
 800e8e4:	42ef      	cmn	r7, r5
 800e8e6:	d40b      	bmi.n	800e900 <__kernel_rem_pio2+0xac>
 800e8e8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e8ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e8f0:	f7f1 fdc4 	bl	800047c <__aeabi_i2d>
 800e8f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8f8:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e8fc:	3501      	adds	r5, #1
 800e8fe:	e7d5      	b.n	800e8ac <__kernel_rem_pio2+0x58>
 800e900:	4610      	mov	r0, r2
 800e902:	4619      	mov	r1, r3
 800e904:	e7f8      	b.n	800e8f8 <__kernel_rem_pio2+0xa4>
 800e906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e90a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800e90e:	f7f1 fe1f 	bl	8000550 <__aeabi_dmul>
 800e912:	4602      	mov	r2, r0
 800e914:	460b      	mov	r3, r1
 800e916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e91a:	f7f1 fc63 	bl	80001e4 <__adddf3>
 800e91e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e922:	3601      	adds	r6, #1
 800e924:	9b06      	ldr	r3, [sp, #24]
 800e926:	3f08      	subs	r7, #8
 800e928:	429e      	cmp	r6, r3
 800e92a:	ddec      	ble.n	800e906 <__kernel_rem_pio2+0xb2>
 800e92c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e930:	3508      	adds	r5, #8
 800e932:	e8eb 2302 	strd	r2, r3, [fp], #8
 800e936:	f108 0801 	add.w	r8, r8, #1
 800e93a:	e7c4      	b.n	800e8c6 <__kernel_rem_pio2+0x72>
 800e93c:	9b04      	ldr	r3, [sp, #16]
 800e93e:	aa0c      	add	r2, sp, #48	; 0x30
 800e940:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e944:	930b      	str	r3, [sp, #44]	; 0x2c
 800e946:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e948:	9f04      	ldr	r7, [sp, #16]
 800e94a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e94e:	930a      	str	r3, [sp, #40]	; 0x28
 800e950:	463e      	mov	r6, r7
 800e952:	ab98      	add	r3, sp, #608	; 0x260
 800e954:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800e958:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e95c:	f8cd b008 	str.w	fp, [sp, #8]
 800e960:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800e964:	2e00      	cmp	r6, #0
 800e966:	dc71      	bgt.n	800ea4c <__kernel_rem_pio2+0x1f8>
 800e968:	4652      	mov	r2, sl
 800e96a:	4620      	mov	r0, r4
 800e96c:	4629      	mov	r1, r5
 800e96e:	f000 ffa3 	bl	800f8b8 <scalbn>
 800e972:	2200      	movs	r2, #0
 800e974:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e978:	4604      	mov	r4, r0
 800e97a:	460d      	mov	r5, r1
 800e97c:	f7f1 fde8 	bl	8000550 <__aeabi_dmul>
 800e980:	f000 ff1a 	bl	800f7b8 <floor>
 800e984:	2200      	movs	r2, #0
 800e986:	4b78      	ldr	r3, [pc, #480]	; (800eb68 <__kernel_rem_pio2+0x314>)
 800e988:	f7f1 fde2 	bl	8000550 <__aeabi_dmul>
 800e98c:	4602      	mov	r2, r0
 800e98e:	460b      	mov	r3, r1
 800e990:	4620      	mov	r0, r4
 800e992:	4629      	mov	r1, r5
 800e994:	f7f1 fc24 	bl	80001e0 <__aeabi_dsub>
 800e998:	460d      	mov	r5, r1
 800e99a:	4604      	mov	r4, r0
 800e99c:	f7f2 f888 	bl	8000ab0 <__aeabi_d2iz>
 800e9a0:	9007      	str	r0, [sp, #28]
 800e9a2:	f7f1 fd6b 	bl	800047c <__aeabi_i2d>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	4629      	mov	r1, r5
 800e9ae:	f7f1 fc17 	bl	80001e0 <__aeabi_dsub>
 800e9b2:	f1ba 0f00 	cmp.w	sl, #0
 800e9b6:	4680      	mov	r8, r0
 800e9b8:	4689      	mov	r9, r1
 800e9ba:	dd70      	ble.n	800ea9e <__kernel_rem_pio2+0x24a>
 800e9bc:	1e7a      	subs	r2, r7, #1
 800e9be:	ab0c      	add	r3, sp, #48	; 0x30
 800e9c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e9c4:	9c07      	ldr	r4, [sp, #28]
 800e9c6:	f1ca 0118 	rsb	r1, sl, #24
 800e9ca:	fa40 f301 	asr.w	r3, r0, r1
 800e9ce:	441c      	add	r4, r3
 800e9d0:	408b      	lsls	r3, r1
 800e9d2:	1ac0      	subs	r0, r0, r3
 800e9d4:	ab0c      	add	r3, sp, #48	; 0x30
 800e9d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e9da:	f1ca 0317 	rsb	r3, sl, #23
 800e9de:	9407      	str	r4, [sp, #28]
 800e9e0:	fa40 f303 	asr.w	r3, r0, r3
 800e9e4:	9302      	str	r3, [sp, #8]
 800e9e6:	9b02      	ldr	r3, [sp, #8]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	dd66      	ble.n	800eaba <__kernel_rem_pio2+0x266>
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e9f2:	4614      	mov	r4, r2
 800e9f4:	9b07      	ldr	r3, [sp, #28]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	9307      	str	r3, [sp, #28]
 800e9fa:	4297      	cmp	r7, r2
 800e9fc:	f300 809f 	bgt.w	800eb3e <__kernel_rem_pio2+0x2ea>
 800ea00:	f1ba 0f00 	cmp.w	sl, #0
 800ea04:	dd07      	ble.n	800ea16 <__kernel_rem_pio2+0x1c2>
 800ea06:	f1ba 0f01 	cmp.w	sl, #1
 800ea0a:	f000 80b9 	beq.w	800eb80 <__kernel_rem_pio2+0x32c>
 800ea0e:	f1ba 0f02 	cmp.w	sl, #2
 800ea12:	f000 80bf 	beq.w	800eb94 <__kernel_rem_pio2+0x340>
 800ea16:	9b02      	ldr	r3, [sp, #8]
 800ea18:	2b02      	cmp	r3, #2
 800ea1a:	d14e      	bne.n	800eaba <__kernel_rem_pio2+0x266>
 800ea1c:	4642      	mov	r2, r8
 800ea1e:	464b      	mov	r3, r9
 800ea20:	2000      	movs	r0, #0
 800ea22:	4952      	ldr	r1, [pc, #328]	; (800eb6c <__kernel_rem_pio2+0x318>)
 800ea24:	f7f1 fbdc 	bl	80001e0 <__aeabi_dsub>
 800ea28:	4680      	mov	r8, r0
 800ea2a:	4689      	mov	r9, r1
 800ea2c:	2c00      	cmp	r4, #0
 800ea2e:	d044      	beq.n	800eaba <__kernel_rem_pio2+0x266>
 800ea30:	4652      	mov	r2, sl
 800ea32:	2000      	movs	r0, #0
 800ea34:	494d      	ldr	r1, [pc, #308]	; (800eb6c <__kernel_rem_pio2+0x318>)
 800ea36:	f000 ff3f 	bl	800f8b8 <scalbn>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	4640      	mov	r0, r8
 800ea40:	4649      	mov	r1, r9
 800ea42:	f7f1 fbcd 	bl	80001e0 <__aeabi_dsub>
 800ea46:	4680      	mov	r8, r0
 800ea48:	4689      	mov	r9, r1
 800ea4a:	e036      	b.n	800eaba <__kernel_rem_pio2+0x266>
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	4b48      	ldr	r3, [pc, #288]	; (800eb70 <__kernel_rem_pio2+0x31c>)
 800ea50:	4620      	mov	r0, r4
 800ea52:	4629      	mov	r1, r5
 800ea54:	f7f1 fd7c 	bl	8000550 <__aeabi_dmul>
 800ea58:	f7f2 f82a 	bl	8000ab0 <__aeabi_d2iz>
 800ea5c:	f7f1 fd0e 	bl	800047c <__aeabi_i2d>
 800ea60:	2200      	movs	r2, #0
 800ea62:	4b44      	ldr	r3, [pc, #272]	; (800eb74 <__kernel_rem_pio2+0x320>)
 800ea64:	4680      	mov	r8, r0
 800ea66:	4689      	mov	r9, r1
 800ea68:	f7f1 fd72 	bl	8000550 <__aeabi_dmul>
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	460b      	mov	r3, r1
 800ea70:	4620      	mov	r0, r4
 800ea72:	4629      	mov	r1, r5
 800ea74:	f7f1 fbb4 	bl	80001e0 <__aeabi_dsub>
 800ea78:	f7f2 f81a 	bl	8000ab0 <__aeabi_d2iz>
 800ea7c:	9b02      	ldr	r3, [sp, #8]
 800ea7e:	3e01      	subs	r6, #1
 800ea80:	f843 0b04 	str.w	r0, [r3], #4
 800ea84:	9302      	str	r3, [sp, #8]
 800ea86:	ab70      	add	r3, sp, #448	; 0x1c0
 800ea88:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ea8c:	4640      	mov	r0, r8
 800ea8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea92:	4649      	mov	r1, r9
 800ea94:	f7f1 fba6 	bl	80001e4 <__adddf3>
 800ea98:	4604      	mov	r4, r0
 800ea9a:	460d      	mov	r5, r1
 800ea9c:	e762      	b.n	800e964 <__kernel_rem_pio2+0x110>
 800ea9e:	d105      	bne.n	800eaac <__kernel_rem_pio2+0x258>
 800eaa0:	1e7b      	subs	r3, r7, #1
 800eaa2:	aa0c      	add	r2, sp, #48	; 0x30
 800eaa4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800eaa8:	15c3      	asrs	r3, r0, #23
 800eaaa:	e79b      	b.n	800e9e4 <__kernel_rem_pio2+0x190>
 800eaac:	2200      	movs	r2, #0
 800eaae:	4b32      	ldr	r3, [pc, #200]	; (800eb78 <__kernel_rem_pio2+0x324>)
 800eab0:	f7f1 ffd4 	bl	8000a5c <__aeabi_dcmpge>
 800eab4:	2800      	cmp	r0, #0
 800eab6:	d13f      	bne.n	800eb38 <__kernel_rem_pio2+0x2e4>
 800eab8:	9002      	str	r0, [sp, #8]
 800eaba:	2200      	movs	r2, #0
 800eabc:	2300      	movs	r3, #0
 800eabe:	4640      	mov	r0, r8
 800eac0:	4649      	mov	r1, r9
 800eac2:	f7f1 ffad 	bl	8000a20 <__aeabi_dcmpeq>
 800eac6:	2800      	cmp	r0, #0
 800eac8:	f000 80b5 	beq.w	800ec36 <__kernel_rem_pio2+0x3e2>
 800eacc:	1e7c      	subs	r4, r7, #1
 800eace:	4623      	mov	r3, r4
 800ead0:	2200      	movs	r2, #0
 800ead2:	9904      	ldr	r1, [sp, #16]
 800ead4:	428b      	cmp	r3, r1
 800ead6:	da64      	bge.n	800eba2 <__kernel_rem_pio2+0x34e>
 800ead8:	2a00      	cmp	r2, #0
 800eada:	d078      	beq.n	800ebce <__kernel_rem_pio2+0x37a>
 800eadc:	ab0c      	add	r3, sp, #48	; 0x30
 800eade:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800eae2:	f1aa 0a18 	sub.w	sl, sl, #24
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	f000 80a3 	beq.w	800ec32 <__kernel_rem_pio2+0x3de>
 800eaec:	4652      	mov	r2, sl
 800eaee:	2000      	movs	r0, #0
 800eaf0:	491e      	ldr	r1, [pc, #120]	; (800eb6c <__kernel_rem_pio2+0x318>)
 800eaf2:	f000 fee1 	bl	800f8b8 <scalbn>
 800eaf6:	46a2      	mov	sl, r4
 800eaf8:	4606      	mov	r6, r0
 800eafa:	460f      	mov	r7, r1
 800eafc:	f04f 0800 	mov.w	r8, #0
 800eb00:	00e3      	lsls	r3, r4, #3
 800eb02:	9306      	str	r3, [sp, #24]
 800eb04:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800eb70 <__kernel_rem_pio2+0x31c>
 800eb08:	ab70      	add	r3, sp, #448	; 0x1c0
 800eb0a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800eb0e:	f1ba 0f00 	cmp.w	sl, #0
 800eb12:	f280 80c6 	bge.w	800eca2 <__kernel_rem_pio2+0x44e>
 800eb16:	4627      	mov	r7, r4
 800eb18:	f04f 0800 	mov.w	r8, #0
 800eb1c:	2f00      	cmp	r7, #0
 800eb1e:	f2c0 80f3 	blt.w	800ed08 <__kernel_rem_pio2+0x4b4>
 800eb22:	4b16      	ldr	r3, [pc, #88]	; (800eb7c <__kernel_rem_pio2+0x328>)
 800eb24:	f04f 0a00 	mov.w	sl, #0
 800eb28:	461d      	mov	r5, r3
 800eb2a:	ab70      	add	r3, sp, #448	; 0x1c0
 800eb2c:	f04f 0b00 	mov.w	fp, #0
 800eb30:	2600      	movs	r6, #0
 800eb32:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800eb36:	e0d9      	b.n	800ecec <__kernel_rem_pio2+0x498>
 800eb38:	2302      	movs	r3, #2
 800eb3a:	9302      	str	r3, [sp, #8]
 800eb3c:	e756      	b.n	800e9ec <__kernel_rem_pio2+0x198>
 800eb3e:	f8db 3000 	ldr.w	r3, [fp]
 800eb42:	b954      	cbnz	r4, 800eb5a <__kernel_rem_pio2+0x306>
 800eb44:	b123      	cbz	r3, 800eb50 <__kernel_rem_pio2+0x2fc>
 800eb46:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800eb4a:	f8cb 3000 	str.w	r3, [fp]
 800eb4e:	2301      	movs	r3, #1
 800eb50:	461c      	mov	r4, r3
 800eb52:	3201      	adds	r2, #1
 800eb54:	f10b 0b04 	add.w	fp, fp, #4
 800eb58:	e74f      	b.n	800e9fa <__kernel_rem_pio2+0x1a6>
 800eb5a:	1acb      	subs	r3, r1, r3
 800eb5c:	f8cb 3000 	str.w	r3, [fp]
 800eb60:	4623      	mov	r3, r4
 800eb62:	e7f5      	b.n	800eb50 <__kernel_rem_pio2+0x2fc>
 800eb64:	08013798 	.word	0x08013798
 800eb68:	40200000 	.word	0x40200000
 800eb6c:	3ff00000 	.word	0x3ff00000
 800eb70:	3e700000 	.word	0x3e700000
 800eb74:	41700000 	.word	0x41700000
 800eb78:	3fe00000 	.word	0x3fe00000
 800eb7c:	08013758 	.word	0x08013758
 800eb80:	1e7a      	subs	r2, r7, #1
 800eb82:	ab0c      	add	r3, sp, #48	; 0x30
 800eb84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb88:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800eb8c:	a90c      	add	r1, sp, #48	; 0x30
 800eb8e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800eb92:	e740      	b.n	800ea16 <__kernel_rem_pio2+0x1c2>
 800eb94:	1e7a      	subs	r2, r7, #1
 800eb96:	ab0c      	add	r3, sp, #48	; 0x30
 800eb98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb9c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800eba0:	e7f4      	b.n	800eb8c <__kernel_rem_pio2+0x338>
 800eba2:	a90c      	add	r1, sp, #48	; 0x30
 800eba4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800eba8:	3b01      	subs	r3, #1
 800ebaa:	430a      	orrs	r2, r1
 800ebac:	e791      	b.n	800ead2 <__kernel_rem_pio2+0x27e>
 800ebae:	3401      	adds	r4, #1
 800ebb0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ebb4:	2a00      	cmp	r2, #0
 800ebb6:	d0fa      	beq.n	800ebae <__kernel_rem_pio2+0x35a>
 800ebb8:	9b08      	ldr	r3, [sp, #32]
 800ebba:	1c7e      	adds	r6, r7, #1
 800ebbc:	18fd      	adds	r5, r7, r3
 800ebbe:	ab20      	add	r3, sp, #128	; 0x80
 800ebc0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ebc4:	443c      	add	r4, r7
 800ebc6:	42b4      	cmp	r4, r6
 800ebc8:	da04      	bge.n	800ebd4 <__kernel_rem_pio2+0x380>
 800ebca:	4627      	mov	r7, r4
 800ebcc:	e6c0      	b.n	800e950 <__kernel_rem_pio2+0xfc>
 800ebce:	2401      	movs	r4, #1
 800ebd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebd2:	e7ed      	b.n	800ebb0 <__kernel_rem_pio2+0x35c>
 800ebd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebd6:	462f      	mov	r7, r5
 800ebd8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ebdc:	f7f1 fc4e 	bl	800047c <__aeabi_i2d>
 800ebe0:	f04f 0b00 	mov.w	fp, #0
 800ebe4:	f04f 0800 	mov.w	r8, #0
 800ebe8:	f04f 0900 	mov.w	r9, #0
 800ebec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebee:	e8e7 0102 	strd	r0, r1, [r7], #8
 800ebf2:	3b08      	subs	r3, #8
 800ebf4:	9302      	str	r3, [sp, #8]
 800ebf6:	9b06      	ldr	r3, [sp, #24]
 800ebf8:	459b      	cmp	fp, r3
 800ebfa:	dd07      	ble.n	800ec0c <__kernel_rem_pio2+0x3b8>
 800ebfc:	ab70      	add	r3, sp, #448	; 0x1c0
 800ebfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ec02:	463d      	mov	r5, r7
 800ec04:	e9c3 8900 	strd	r8, r9, [r3]
 800ec08:	3601      	adds	r6, #1
 800ec0a:	e7dc      	b.n	800ebc6 <__kernel_rem_pio2+0x372>
 800ec0c:	9902      	ldr	r1, [sp, #8]
 800ec0e:	f10b 0b01 	add.w	fp, fp, #1
 800ec12:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800ec16:	9102      	str	r1, [sp, #8]
 800ec18:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800ec1c:	f7f1 fc98 	bl	8000550 <__aeabi_dmul>
 800ec20:	4602      	mov	r2, r0
 800ec22:	460b      	mov	r3, r1
 800ec24:	4640      	mov	r0, r8
 800ec26:	4649      	mov	r1, r9
 800ec28:	f7f1 fadc 	bl	80001e4 <__adddf3>
 800ec2c:	4680      	mov	r8, r0
 800ec2e:	4689      	mov	r9, r1
 800ec30:	e7e1      	b.n	800ebf6 <__kernel_rem_pio2+0x3a2>
 800ec32:	3c01      	subs	r4, #1
 800ec34:	e752      	b.n	800eadc <__kernel_rem_pio2+0x288>
 800ec36:	f1ca 0200 	rsb	r2, sl, #0
 800ec3a:	4640      	mov	r0, r8
 800ec3c:	4649      	mov	r1, r9
 800ec3e:	f000 fe3b 	bl	800f8b8 <scalbn>
 800ec42:	2200      	movs	r2, #0
 800ec44:	4ba5      	ldr	r3, [pc, #660]	; (800eedc <__kernel_rem_pio2+0x688>)
 800ec46:	4604      	mov	r4, r0
 800ec48:	460d      	mov	r5, r1
 800ec4a:	f7f1 ff07 	bl	8000a5c <__aeabi_dcmpge>
 800ec4e:	b1f8      	cbz	r0, 800ec90 <__kernel_rem_pio2+0x43c>
 800ec50:	2200      	movs	r2, #0
 800ec52:	4ba3      	ldr	r3, [pc, #652]	; (800eee0 <__kernel_rem_pio2+0x68c>)
 800ec54:	4620      	mov	r0, r4
 800ec56:	4629      	mov	r1, r5
 800ec58:	f7f1 fc7a 	bl	8000550 <__aeabi_dmul>
 800ec5c:	f7f1 ff28 	bl	8000ab0 <__aeabi_d2iz>
 800ec60:	4606      	mov	r6, r0
 800ec62:	f7f1 fc0b 	bl	800047c <__aeabi_i2d>
 800ec66:	2200      	movs	r2, #0
 800ec68:	4b9c      	ldr	r3, [pc, #624]	; (800eedc <__kernel_rem_pio2+0x688>)
 800ec6a:	f7f1 fc71 	bl	8000550 <__aeabi_dmul>
 800ec6e:	460b      	mov	r3, r1
 800ec70:	4602      	mov	r2, r0
 800ec72:	4629      	mov	r1, r5
 800ec74:	4620      	mov	r0, r4
 800ec76:	f7f1 fab3 	bl	80001e0 <__aeabi_dsub>
 800ec7a:	f7f1 ff19 	bl	8000ab0 <__aeabi_d2iz>
 800ec7e:	1c7c      	adds	r4, r7, #1
 800ec80:	ab0c      	add	r3, sp, #48	; 0x30
 800ec82:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800ec86:	f10a 0a18 	add.w	sl, sl, #24
 800ec8a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800ec8e:	e72d      	b.n	800eaec <__kernel_rem_pio2+0x298>
 800ec90:	4620      	mov	r0, r4
 800ec92:	4629      	mov	r1, r5
 800ec94:	f7f1 ff0c 	bl	8000ab0 <__aeabi_d2iz>
 800ec98:	ab0c      	add	r3, sp, #48	; 0x30
 800ec9a:	463c      	mov	r4, r7
 800ec9c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800eca0:	e724      	b.n	800eaec <__kernel_rem_pio2+0x298>
 800eca2:	ab0c      	add	r3, sp, #48	; 0x30
 800eca4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800eca8:	f7f1 fbe8 	bl	800047c <__aeabi_i2d>
 800ecac:	4632      	mov	r2, r6
 800ecae:	463b      	mov	r3, r7
 800ecb0:	f7f1 fc4e 	bl	8000550 <__aeabi_dmul>
 800ecb4:	4642      	mov	r2, r8
 800ecb6:	e86b 0102 	strd	r0, r1, [fp], #-8
 800ecba:	464b      	mov	r3, r9
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	4639      	mov	r1, r7
 800ecc0:	f7f1 fc46 	bl	8000550 <__aeabi_dmul>
 800ecc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecc8:	4606      	mov	r6, r0
 800ecca:	460f      	mov	r7, r1
 800eccc:	e71f      	b.n	800eb0e <__kernel_rem_pio2+0x2ba>
 800ecce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ecd2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800ecd6:	f7f1 fc3b 	bl	8000550 <__aeabi_dmul>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	460b      	mov	r3, r1
 800ecde:	4650      	mov	r0, sl
 800ece0:	4659      	mov	r1, fp
 800ece2:	f7f1 fa7f 	bl	80001e4 <__adddf3>
 800ece6:	4682      	mov	sl, r0
 800ece8:	468b      	mov	fp, r1
 800ecea:	3601      	adds	r6, #1
 800ecec:	9b04      	ldr	r3, [sp, #16]
 800ecee:	429e      	cmp	r6, r3
 800ecf0:	dc01      	bgt.n	800ecf6 <__kernel_rem_pio2+0x4a2>
 800ecf2:	45b0      	cmp	r8, r6
 800ecf4:	daeb      	bge.n	800ecce <__kernel_rem_pio2+0x47a>
 800ecf6:	ab48      	add	r3, sp, #288	; 0x120
 800ecf8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ecfc:	e9c3 ab00 	strd	sl, fp, [r3]
 800ed00:	3f01      	subs	r7, #1
 800ed02:	f108 0801 	add.w	r8, r8, #1
 800ed06:	e709      	b.n	800eb1c <__kernel_rem_pio2+0x2c8>
 800ed08:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800ed0a:	2b02      	cmp	r3, #2
 800ed0c:	dc09      	bgt.n	800ed22 <__kernel_rem_pio2+0x4ce>
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	dc34      	bgt.n	800ed7c <__kernel_rem_pio2+0x528>
 800ed12:	d05e      	beq.n	800edd2 <__kernel_rem_pio2+0x57e>
 800ed14:	9b07      	ldr	r3, [sp, #28]
 800ed16:	f003 0007 	and.w	r0, r3, #7
 800ed1a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ed1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed22:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800ed24:	2b03      	cmp	r3, #3
 800ed26:	d1f5      	bne.n	800ed14 <__kernel_rem_pio2+0x4c0>
 800ed28:	9a06      	ldr	r2, [sp, #24]
 800ed2a:	ab48      	add	r3, sp, #288	; 0x120
 800ed2c:	441a      	add	r2, r3
 800ed2e:	4615      	mov	r5, r2
 800ed30:	4692      	mov	sl, r2
 800ed32:	46a3      	mov	fp, r4
 800ed34:	f1bb 0f00 	cmp.w	fp, #0
 800ed38:	dc7a      	bgt.n	800ee30 <__kernel_rem_pio2+0x5dc>
 800ed3a:	46aa      	mov	sl, r5
 800ed3c:	46a3      	mov	fp, r4
 800ed3e:	f1bb 0f01 	cmp.w	fp, #1
 800ed42:	f300 8094 	bgt.w	800ee6e <__kernel_rem_pio2+0x61a>
 800ed46:	2700      	movs	r7, #0
 800ed48:	463e      	mov	r6, r7
 800ed4a:	2c01      	cmp	r4, #1
 800ed4c:	f300 80ae 	bgt.w	800eeac <__kernel_rem_pio2+0x658>
 800ed50:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800ed54:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800ed58:	9b02      	ldr	r3, [sp, #8]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	f040 80b0 	bne.w	800eec0 <__kernel_rem_pio2+0x66c>
 800ed60:	4603      	mov	r3, r0
 800ed62:	462a      	mov	r2, r5
 800ed64:	9801      	ldr	r0, [sp, #4]
 800ed66:	e9c0 2300 	strd	r2, r3, [r0]
 800ed6a:	4622      	mov	r2, r4
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ed72:	463a      	mov	r2, r7
 800ed74:	4633      	mov	r3, r6
 800ed76:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ed7a:	e7cb      	b.n	800ed14 <__kernel_rem_pio2+0x4c0>
 800ed7c:	2000      	movs	r0, #0
 800ed7e:	9a06      	ldr	r2, [sp, #24]
 800ed80:	ab48      	add	r3, sp, #288	; 0x120
 800ed82:	441a      	add	r2, r3
 800ed84:	4615      	mov	r5, r2
 800ed86:	46a0      	mov	r8, r4
 800ed88:	4601      	mov	r1, r0
 800ed8a:	f1b8 0f00 	cmp.w	r8, #0
 800ed8e:	da3c      	bge.n	800ee0a <__kernel_rem_pio2+0x5b6>
 800ed90:	9b02      	ldr	r3, [sp, #8]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d040      	beq.n	800ee18 <__kernel_rem_pio2+0x5c4>
 800ed96:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	462b      	mov	r3, r5
 800ed9e:	9d01      	ldr	r5, [sp, #4]
 800eda0:	2601      	movs	r6, #1
 800eda2:	e9c5 2300 	strd	r2, r3, [r5]
 800eda6:	460b      	mov	r3, r1
 800eda8:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800edac:	f7f1 fa18 	bl	80001e0 <__aeabi_dsub>
 800edb0:	4684      	mov	ip, r0
 800edb2:	460f      	mov	r7, r1
 800edb4:	ad48      	add	r5, sp, #288	; 0x120
 800edb6:	42b4      	cmp	r4, r6
 800edb8:	f105 0508 	add.w	r5, r5, #8
 800edbc:	da2e      	bge.n	800ee1c <__kernel_rem_pio2+0x5c8>
 800edbe:	9b02      	ldr	r3, [sp, #8]
 800edc0:	b10b      	cbz	r3, 800edc6 <__kernel_rem_pio2+0x572>
 800edc2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800edc6:	4662      	mov	r2, ip
 800edc8:	463b      	mov	r3, r7
 800edca:	9901      	ldr	r1, [sp, #4]
 800edcc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800edd0:	e7a0      	b.n	800ed14 <__kernel_rem_pio2+0x4c0>
 800edd2:	9a06      	ldr	r2, [sp, #24]
 800edd4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800edd6:	ab48      	add	r3, sp, #288	; 0x120
 800edd8:	441a      	add	r2, r3
 800edda:	4615      	mov	r5, r2
 800eddc:	4637      	mov	r7, r6
 800edde:	2c00      	cmp	r4, #0
 800ede0:	da09      	bge.n	800edf6 <__kernel_rem_pio2+0x5a2>
 800ede2:	9b02      	ldr	r3, [sp, #8]
 800ede4:	b10b      	cbz	r3, 800edea <__kernel_rem_pio2+0x596>
 800ede6:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800edea:	4632      	mov	r2, r6
 800edec:	463b      	mov	r3, r7
 800edee:	9901      	ldr	r1, [sp, #4]
 800edf0:	e9c1 2300 	strd	r2, r3, [r1]
 800edf4:	e78e      	b.n	800ed14 <__kernel_rem_pio2+0x4c0>
 800edf6:	4630      	mov	r0, r6
 800edf8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800edfc:	4639      	mov	r1, r7
 800edfe:	f7f1 f9f1 	bl	80001e4 <__adddf3>
 800ee02:	3c01      	subs	r4, #1
 800ee04:	4606      	mov	r6, r0
 800ee06:	460f      	mov	r7, r1
 800ee08:	e7e9      	b.n	800edde <__kernel_rem_pio2+0x58a>
 800ee0a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ee0e:	f7f1 f9e9 	bl	80001e4 <__adddf3>
 800ee12:	f108 38ff 	add.w	r8, r8, #4294967295
 800ee16:	e7b8      	b.n	800ed8a <__kernel_rem_pio2+0x536>
 800ee18:	460d      	mov	r5, r1
 800ee1a:	e7be      	b.n	800ed9a <__kernel_rem_pio2+0x546>
 800ee1c:	4660      	mov	r0, ip
 800ee1e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee22:	4639      	mov	r1, r7
 800ee24:	f7f1 f9de 	bl	80001e4 <__adddf3>
 800ee28:	3601      	adds	r6, #1
 800ee2a:	4684      	mov	ip, r0
 800ee2c:	460f      	mov	r7, r1
 800ee2e:	e7c2      	b.n	800edb6 <__kernel_rem_pio2+0x562>
 800ee30:	e9da 6700 	ldrd	r6, r7, [sl]
 800ee34:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800ee38:	4632      	mov	r2, r6
 800ee3a:	463b      	mov	r3, r7
 800ee3c:	4640      	mov	r0, r8
 800ee3e:	4649      	mov	r1, r9
 800ee40:	f7f1 f9d0 	bl	80001e4 <__adddf3>
 800ee44:	4602      	mov	r2, r0
 800ee46:	460b      	mov	r3, r1
 800ee48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee4c:	4640      	mov	r0, r8
 800ee4e:	4649      	mov	r1, r9
 800ee50:	f7f1 f9c6 	bl	80001e0 <__aeabi_dsub>
 800ee54:	4632      	mov	r2, r6
 800ee56:	463b      	mov	r3, r7
 800ee58:	f7f1 f9c4 	bl	80001e4 <__adddf3>
 800ee5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee60:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ee64:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ee68:	e9ca 2300 	strd	r2, r3, [sl]
 800ee6c:	e762      	b.n	800ed34 <__kernel_rem_pio2+0x4e0>
 800ee6e:	e9da 8900 	ldrd	r8, r9, [sl]
 800ee72:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800ee76:	4642      	mov	r2, r8
 800ee78:	464b      	mov	r3, r9
 800ee7a:	4630      	mov	r0, r6
 800ee7c:	4639      	mov	r1, r7
 800ee7e:	f7f1 f9b1 	bl	80001e4 <__adddf3>
 800ee82:	4602      	mov	r2, r0
 800ee84:	460b      	mov	r3, r1
 800ee86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee8a:	4630      	mov	r0, r6
 800ee8c:	4639      	mov	r1, r7
 800ee8e:	f7f1 f9a7 	bl	80001e0 <__aeabi_dsub>
 800ee92:	4642      	mov	r2, r8
 800ee94:	464b      	mov	r3, r9
 800ee96:	f7f1 f9a5 	bl	80001e4 <__adddf3>
 800ee9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee9e:	e86a 0102 	strd	r0, r1, [sl], #-8
 800eea2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eea6:	e9ca 2300 	strd	r2, r3, [sl]
 800eeaa:	e748      	b.n	800ed3e <__kernel_rem_pio2+0x4ea>
 800eeac:	4638      	mov	r0, r7
 800eeae:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800eeb2:	4631      	mov	r1, r6
 800eeb4:	f7f1 f996 	bl	80001e4 <__adddf3>
 800eeb8:	3c01      	subs	r4, #1
 800eeba:	4607      	mov	r7, r0
 800eebc:	460e      	mov	r6, r1
 800eebe:	e744      	b.n	800ed4a <__kernel_rem_pio2+0x4f6>
 800eec0:	9b01      	ldr	r3, [sp, #4]
 800eec2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800eec6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800eeca:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800eece:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800eed2:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800eed6:	601d      	str	r5, [r3, #0]
 800eed8:	615e      	str	r6, [r3, #20]
 800eeda:	e71b      	b.n	800ed14 <__kernel_rem_pio2+0x4c0>
 800eedc:	41700000 	.word	0x41700000
 800eee0:	3e700000 	.word	0x3e700000
 800eee4:	00000000 	.word	0x00000000

0800eee8 <__kernel_sin>:
 800eee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeec:	b086      	sub	sp, #24
 800eeee:	e9cd 2300 	strd	r2, r3, [sp]
 800eef2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eef6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800eefa:	4682      	mov	sl, r0
 800eefc:	460c      	mov	r4, r1
 800eefe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ef00:	da03      	bge.n	800ef0a <__kernel_sin+0x22>
 800ef02:	f7f1 fdd5 	bl	8000ab0 <__aeabi_d2iz>
 800ef06:	2800      	cmp	r0, #0
 800ef08:	d050      	beq.n	800efac <__kernel_sin+0xc4>
 800ef0a:	4652      	mov	r2, sl
 800ef0c:	4623      	mov	r3, r4
 800ef0e:	4650      	mov	r0, sl
 800ef10:	4621      	mov	r1, r4
 800ef12:	f7f1 fb1d 	bl	8000550 <__aeabi_dmul>
 800ef16:	4606      	mov	r6, r0
 800ef18:	460f      	mov	r7, r1
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	4650      	mov	r0, sl
 800ef20:	4621      	mov	r1, r4
 800ef22:	f7f1 fb15 	bl	8000550 <__aeabi_dmul>
 800ef26:	a33e      	add	r3, pc, #248	; (adr r3, 800f020 <__kernel_sin+0x138>)
 800ef28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2c:	4680      	mov	r8, r0
 800ef2e:	4689      	mov	r9, r1
 800ef30:	4630      	mov	r0, r6
 800ef32:	4639      	mov	r1, r7
 800ef34:	f7f1 fb0c 	bl	8000550 <__aeabi_dmul>
 800ef38:	a33b      	add	r3, pc, #236	; (adr r3, 800f028 <__kernel_sin+0x140>)
 800ef3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3e:	f7f1 f94f 	bl	80001e0 <__aeabi_dsub>
 800ef42:	4632      	mov	r2, r6
 800ef44:	463b      	mov	r3, r7
 800ef46:	f7f1 fb03 	bl	8000550 <__aeabi_dmul>
 800ef4a:	a339      	add	r3, pc, #228	; (adr r3, 800f030 <__kernel_sin+0x148>)
 800ef4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef50:	f7f1 f948 	bl	80001e4 <__adddf3>
 800ef54:	4632      	mov	r2, r6
 800ef56:	463b      	mov	r3, r7
 800ef58:	f7f1 fafa 	bl	8000550 <__aeabi_dmul>
 800ef5c:	a336      	add	r3, pc, #216	; (adr r3, 800f038 <__kernel_sin+0x150>)
 800ef5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef62:	f7f1 f93d 	bl	80001e0 <__aeabi_dsub>
 800ef66:	4632      	mov	r2, r6
 800ef68:	463b      	mov	r3, r7
 800ef6a:	f7f1 faf1 	bl	8000550 <__aeabi_dmul>
 800ef6e:	a334      	add	r3, pc, #208	; (adr r3, 800f040 <__kernel_sin+0x158>)
 800ef70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef74:	f7f1 f936 	bl	80001e4 <__adddf3>
 800ef78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef7c:	b9dd      	cbnz	r5, 800efb6 <__kernel_sin+0xce>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	460b      	mov	r3, r1
 800ef82:	4630      	mov	r0, r6
 800ef84:	4639      	mov	r1, r7
 800ef86:	f7f1 fae3 	bl	8000550 <__aeabi_dmul>
 800ef8a:	a32f      	add	r3, pc, #188	; (adr r3, 800f048 <__kernel_sin+0x160>)
 800ef8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef90:	f7f1 f926 	bl	80001e0 <__aeabi_dsub>
 800ef94:	4642      	mov	r2, r8
 800ef96:	464b      	mov	r3, r9
 800ef98:	f7f1 fada 	bl	8000550 <__aeabi_dmul>
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	460b      	mov	r3, r1
 800efa0:	4650      	mov	r0, sl
 800efa2:	4621      	mov	r1, r4
 800efa4:	f7f1 f91e 	bl	80001e4 <__adddf3>
 800efa8:	4682      	mov	sl, r0
 800efaa:	460c      	mov	r4, r1
 800efac:	4650      	mov	r0, sl
 800efae:	4621      	mov	r1, r4
 800efb0:	b006      	add	sp, #24
 800efb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efb6:	2200      	movs	r2, #0
 800efb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800efbc:	4b24      	ldr	r3, [pc, #144]	; (800f050 <__kernel_sin+0x168>)
 800efbe:	f7f1 fac7 	bl	8000550 <__aeabi_dmul>
 800efc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800efca:	4640      	mov	r0, r8
 800efcc:	4649      	mov	r1, r9
 800efce:	f7f1 fabf 	bl	8000550 <__aeabi_dmul>
 800efd2:	4602      	mov	r2, r0
 800efd4:	460b      	mov	r3, r1
 800efd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efda:	f7f1 f901 	bl	80001e0 <__aeabi_dsub>
 800efde:	4632      	mov	r2, r6
 800efe0:	463b      	mov	r3, r7
 800efe2:	f7f1 fab5 	bl	8000550 <__aeabi_dmul>
 800efe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efea:	f7f1 f8f9 	bl	80001e0 <__aeabi_dsub>
 800efee:	a316      	add	r3, pc, #88	; (adr r3, 800f048 <__kernel_sin+0x160>)
 800eff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff4:	4606      	mov	r6, r0
 800eff6:	460f      	mov	r7, r1
 800eff8:	4640      	mov	r0, r8
 800effa:	4649      	mov	r1, r9
 800effc:	f7f1 faa8 	bl	8000550 <__aeabi_dmul>
 800f000:	4602      	mov	r2, r0
 800f002:	460b      	mov	r3, r1
 800f004:	4630      	mov	r0, r6
 800f006:	4639      	mov	r1, r7
 800f008:	f7f1 f8ec 	bl	80001e4 <__adddf3>
 800f00c:	4602      	mov	r2, r0
 800f00e:	460b      	mov	r3, r1
 800f010:	4650      	mov	r0, sl
 800f012:	4621      	mov	r1, r4
 800f014:	f7f1 f8e4 	bl	80001e0 <__aeabi_dsub>
 800f018:	e7c6      	b.n	800efa8 <__kernel_sin+0xc0>
 800f01a:	bf00      	nop
 800f01c:	f3af 8000 	nop.w
 800f020:	5acfd57c 	.word	0x5acfd57c
 800f024:	3de5d93a 	.word	0x3de5d93a
 800f028:	8a2b9ceb 	.word	0x8a2b9ceb
 800f02c:	3e5ae5e6 	.word	0x3e5ae5e6
 800f030:	57b1fe7d 	.word	0x57b1fe7d
 800f034:	3ec71de3 	.word	0x3ec71de3
 800f038:	19c161d5 	.word	0x19c161d5
 800f03c:	3f2a01a0 	.word	0x3f2a01a0
 800f040:	1110f8a6 	.word	0x1110f8a6
 800f044:	3f811111 	.word	0x3f811111
 800f048:	55555549 	.word	0x55555549
 800f04c:	3fc55555 	.word	0x3fc55555
 800f050:	3fe00000 	.word	0x3fe00000

0800f054 <__kernel_cosf>:
 800f054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f058:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800f05c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800f060:	4606      	mov	r6, r0
 800f062:	4688      	mov	r8, r1
 800f064:	da03      	bge.n	800f06e <__kernel_cosf+0x1a>
 800f066:	f7f2 f8a5 	bl	80011b4 <__aeabi_f2iz>
 800f06a:	2800      	cmp	r0, #0
 800f06c:	d05c      	beq.n	800f128 <__kernel_cosf+0xd4>
 800f06e:	4631      	mov	r1, r6
 800f070:	4630      	mov	r0, r6
 800f072:	f7f1 fec3 	bl	8000dfc <__aeabi_fmul>
 800f076:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f07a:	4605      	mov	r5, r0
 800f07c:	f7f1 febe 	bl	8000dfc <__aeabi_fmul>
 800f080:	492b      	ldr	r1, [pc, #172]	; (800f130 <__kernel_cosf+0xdc>)
 800f082:	4607      	mov	r7, r0
 800f084:	4628      	mov	r0, r5
 800f086:	f7f1 feb9 	bl	8000dfc <__aeabi_fmul>
 800f08a:	492a      	ldr	r1, [pc, #168]	; (800f134 <__kernel_cosf+0xe0>)
 800f08c:	f7f1 fdae 	bl	8000bec <__addsf3>
 800f090:	4629      	mov	r1, r5
 800f092:	f7f1 feb3 	bl	8000dfc <__aeabi_fmul>
 800f096:	4928      	ldr	r1, [pc, #160]	; (800f138 <__kernel_cosf+0xe4>)
 800f098:	f7f1 fda6 	bl	8000be8 <__aeabi_fsub>
 800f09c:	4629      	mov	r1, r5
 800f09e:	f7f1 fead 	bl	8000dfc <__aeabi_fmul>
 800f0a2:	4926      	ldr	r1, [pc, #152]	; (800f13c <__kernel_cosf+0xe8>)
 800f0a4:	f7f1 fda2 	bl	8000bec <__addsf3>
 800f0a8:	4629      	mov	r1, r5
 800f0aa:	f7f1 fea7 	bl	8000dfc <__aeabi_fmul>
 800f0ae:	4924      	ldr	r1, [pc, #144]	; (800f140 <__kernel_cosf+0xec>)
 800f0b0:	f7f1 fd9a 	bl	8000be8 <__aeabi_fsub>
 800f0b4:	4629      	mov	r1, r5
 800f0b6:	f7f1 fea1 	bl	8000dfc <__aeabi_fmul>
 800f0ba:	4922      	ldr	r1, [pc, #136]	; (800f144 <__kernel_cosf+0xf0>)
 800f0bc:	f7f1 fd96 	bl	8000bec <__addsf3>
 800f0c0:	4629      	mov	r1, r5
 800f0c2:	f7f1 fe9b 	bl	8000dfc <__aeabi_fmul>
 800f0c6:	4629      	mov	r1, r5
 800f0c8:	f7f1 fe98 	bl	8000dfc <__aeabi_fmul>
 800f0cc:	4641      	mov	r1, r8
 800f0ce:	4605      	mov	r5, r0
 800f0d0:	4630      	mov	r0, r6
 800f0d2:	f7f1 fe93 	bl	8000dfc <__aeabi_fmul>
 800f0d6:	4601      	mov	r1, r0
 800f0d8:	4628      	mov	r0, r5
 800f0da:	f7f1 fd85 	bl	8000be8 <__aeabi_fsub>
 800f0de:	4b1a      	ldr	r3, [pc, #104]	; (800f148 <__kernel_cosf+0xf4>)
 800f0e0:	4605      	mov	r5, r0
 800f0e2:	429c      	cmp	r4, r3
 800f0e4:	dc0a      	bgt.n	800f0fc <__kernel_cosf+0xa8>
 800f0e6:	4601      	mov	r1, r0
 800f0e8:	4638      	mov	r0, r7
 800f0ea:	f7f1 fd7d 	bl	8000be8 <__aeabi_fsub>
 800f0ee:	4601      	mov	r1, r0
 800f0f0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f0f4:	f7f1 fd78 	bl	8000be8 <__aeabi_fsub>
 800f0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0fc:	4b13      	ldr	r3, [pc, #76]	; (800f14c <__kernel_cosf+0xf8>)
 800f0fe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f102:	429c      	cmp	r4, r3
 800f104:	bfcc      	ite	gt
 800f106:	4c12      	ldrgt	r4, [pc, #72]	; (800f150 <__kernel_cosf+0xfc>)
 800f108:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800f10c:	4621      	mov	r1, r4
 800f10e:	f7f1 fd6b 	bl	8000be8 <__aeabi_fsub>
 800f112:	4621      	mov	r1, r4
 800f114:	4606      	mov	r6, r0
 800f116:	4638      	mov	r0, r7
 800f118:	f7f1 fd66 	bl	8000be8 <__aeabi_fsub>
 800f11c:	4629      	mov	r1, r5
 800f11e:	f7f1 fd63 	bl	8000be8 <__aeabi_fsub>
 800f122:	4601      	mov	r1, r0
 800f124:	4630      	mov	r0, r6
 800f126:	e7e5      	b.n	800f0f4 <__kernel_cosf+0xa0>
 800f128:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f12c:	e7e4      	b.n	800f0f8 <__kernel_cosf+0xa4>
 800f12e:	bf00      	nop
 800f130:	ad47d74e 	.word	0xad47d74e
 800f134:	310f74f6 	.word	0x310f74f6
 800f138:	3493f27c 	.word	0x3493f27c
 800f13c:	37d00d01 	.word	0x37d00d01
 800f140:	3ab60b61 	.word	0x3ab60b61
 800f144:	3d2aaaab 	.word	0x3d2aaaab
 800f148:	3e999999 	.word	0x3e999999
 800f14c:	3f480000 	.word	0x3f480000
 800f150:	3e900000 	.word	0x3e900000

0800f154 <__kernel_rem_pio2f>:
 800f154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f158:	b0db      	sub	sp, #364	; 0x16c
 800f15a:	9202      	str	r2, [sp, #8]
 800f15c:	9304      	str	r3, [sp, #16]
 800f15e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f160:	4bc5      	ldr	r3, [pc, #788]	; (800f478 <__kernel_rem_pio2f+0x324>)
 800f162:	9005      	str	r0, [sp, #20]
 800f164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f168:	9100      	str	r1, [sp, #0]
 800f16a:	9301      	str	r3, [sp, #4]
 800f16c:	9b04      	ldr	r3, [sp, #16]
 800f16e:	3b01      	subs	r3, #1
 800f170:	9303      	str	r3, [sp, #12]
 800f172:	9b02      	ldr	r3, [sp, #8]
 800f174:	1d1a      	adds	r2, r3, #4
 800f176:	f2c0 809b 	blt.w	800f2b0 <__kernel_rem_pio2f+0x15c>
 800f17a:	1edc      	subs	r4, r3, #3
 800f17c:	bf48      	it	mi
 800f17e:	1d1c      	addmi	r4, r3, #4
 800f180:	10e4      	asrs	r4, r4, #3
 800f182:	2500      	movs	r5, #0
 800f184:	f04f 0a00 	mov.w	sl, #0
 800f188:	1c67      	adds	r7, r4, #1
 800f18a:	00fb      	lsls	r3, r7, #3
 800f18c:	9306      	str	r3, [sp, #24]
 800f18e:	9b02      	ldr	r3, [sp, #8]
 800f190:	9a03      	ldr	r2, [sp, #12]
 800f192:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800f196:	9b01      	ldr	r3, [sp, #4]
 800f198:	1aa6      	subs	r6, r4, r2
 800f19a:	eb03 0802 	add.w	r8, r3, r2
 800f19e:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800f1a0:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800f1a4:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800f1a8:	4545      	cmp	r5, r8
 800f1aa:	f340 8083 	ble.w	800f2b4 <__kernel_rem_pio2f+0x160>
 800f1ae:	f04f 0800 	mov.w	r8, #0
 800f1b2:	f04f 0b00 	mov.w	fp, #0
 800f1b6:	9b04      	ldr	r3, [sp, #16]
 800f1b8:	aa1e      	add	r2, sp, #120	; 0x78
 800f1ba:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800f1be:	ab46      	add	r3, sp, #280	; 0x118
 800f1c0:	9a01      	ldr	r2, [sp, #4]
 800f1c2:	4590      	cmp	r8, r2
 800f1c4:	f340 809c 	ble.w	800f300 <__kernel_rem_pio2f+0x1ac>
 800f1c8:	4613      	mov	r3, r2
 800f1ca:	aa0a      	add	r2, sp, #40	; 0x28
 800f1cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f1d0:	9308      	str	r3, [sp, #32]
 800f1d2:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800f1d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f1d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f1dc:	9307      	str	r3, [sp, #28]
 800f1de:	ad0a      	add	r5, sp, #40	; 0x28
 800f1e0:	462e      	mov	r6, r5
 800f1e2:	46c3      	mov	fp, r8
 800f1e4:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800f1e8:	ab5a      	add	r3, sp, #360	; 0x168
 800f1ea:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800f1ee:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800f1f2:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800f1f6:	f1bb 0f00 	cmp.w	fp, #0
 800f1fa:	f300 8086 	bgt.w	800f30a <__kernel_rem_pio2f+0x1b6>
 800f1fe:	4639      	mov	r1, r7
 800f200:	4620      	mov	r0, r4
 800f202:	f000 fc25 	bl	800fa50 <scalbnf>
 800f206:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800f20a:	4604      	mov	r4, r0
 800f20c:	f7f1 fdf6 	bl	8000dfc <__aeabi_fmul>
 800f210:	f000 fbd8 	bl	800f9c4 <floorf>
 800f214:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800f218:	f7f1 fdf0 	bl	8000dfc <__aeabi_fmul>
 800f21c:	4601      	mov	r1, r0
 800f21e:	4620      	mov	r0, r4
 800f220:	f7f1 fce2 	bl	8000be8 <__aeabi_fsub>
 800f224:	4604      	mov	r4, r0
 800f226:	f7f1 ffc5 	bl	80011b4 <__aeabi_f2iz>
 800f22a:	4606      	mov	r6, r0
 800f22c:	f7f1 fd92 	bl	8000d54 <__aeabi_i2f>
 800f230:	4601      	mov	r1, r0
 800f232:	4620      	mov	r0, r4
 800f234:	f7f1 fcd8 	bl	8000be8 <__aeabi_fsub>
 800f238:	2f00      	cmp	r7, #0
 800f23a:	4681      	mov	r9, r0
 800f23c:	f340 8084 	ble.w	800f348 <__kernel_rem_pio2f+0x1f4>
 800f240:	f108 32ff 	add.w	r2, r8, #4294967295
 800f244:	ab0a      	add	r3, sp, #40	; 0x28
 800f246:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800f24a:	f1c7 0108 	rsb	r1, r7, #8
 800f24e:	fa44 f301 	asr.w	r3, r4, r1
 800f252:	441e      	add	r6, r3
 800f254:	408b      	lsls	r3, r1
 800f256:	1ae4      	subs	r4, r4, r3
 800f258:	f1c7 0007 	rsb	r0, r7, #7
 800f25c:	ab0a      	add	r3, sp, #40	; 0x28
 800f25e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f262:	4104      	asrs	r4, r0
 800f264:	2c00      	cmp	r4, #0
 800f266:	dd7e      	ble.n	800f366 <__kernel_rem_pio2f+0x212>
 800f268:	2200      	movs	r2, #0
 800f26a:	4692      	mov	sl, r2
 800f26c:	3601      	adds	r6, #1
 800f26e:	4590      	cmp	r8, r2
 800f270:	f300 80b0 	bgt.w	800f3d4 <__kernel_rem_pio2f+0x280>
 800f274:	2f00      	cmp	r7, #0
 800f276:	dd05      	ble.n	800f284 <__kernel_rem_pio2f+0x130>
 800f278:	2f01      	cmp	r7, #1
 800f27a:	f000 80bd 	beq.w	800f3f8 <__kernel_rem_pio2f+0x2a4>
 800f27e:	2f02      	cmp	r7, #2
 800f280:	f000 80c5 	beq.w	800f40e <__kernel_rem_pio2f+0x2ba>
 800f284:	2c02      	cmp	r4, #2
 800f286:	d16e      	bne.n	800f366 <__kernel_rem_pio2f+0x212>
 800f288:	4649      	mov	r1, r9
 800f28a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f28e:	f7f1 fcab 	bl	8000be8 <__aeabi_fsub>
 800f292:	4681      	mov	r9, r0
 800f294:	f1ba 0f00 	cmp.w	sl, #0
 800f298:	d065      	beq.n	800f366 <__kernel_rem_pio2f+0x212>
 800f29a:	4639      	mov	r1, r7
 800f29c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f2a0:	f000 fbd6 	bl	800fa50 <scalbnf>
 800f2a4:	4601      	mov	r1, r0
 800f2a6:	4648      	mov	r0, r9
 800f2a8:	f7f1 fc9e 	bl	8000be8 <__aeabi_fsub>
 800f2ac:	4681      	mov	r9, r0
 800f2ae:	e05a      	b.n	800f366 <__kernel_rem_pio2f+0x212>
 800f2b0:	2400      	movs	r4, #0
 800f2b2:	e766      	b.n	800f182 <__kernel_rem_pio2f+0x2e>
 800f2b4:	42ee      	cmn	r6, r5
 800f2b6:	d407      	bmi.n	800f2c8 <__kernel_rem_pio2f+0x174>
 800f2b8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f2bc:	f7f1 fd4a 	bl	8000d54 <__aeabi_i2f>
 800f2c0:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800f2c4:	3501      	adds	r5, #1
 800f2c6:	e76f      	b.n	800f1a8 <__kernel_rem_pio2f+0x54>
 800f2c8:	4650      	mov	r0, sl
 800f2ca:	e7f9      	b.n	800f2c0 <__kernel_rem_pio2f+0x16c>
 800f2cc:	9b05      	ldr	r3, [sp, #20]
 800f2ce:	f8da 1000 	ldr.w	r1, [sl]
 800f2d2:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800f2d6:	f7f1 fd91 	bl	8000dfc <__aeabi_fmul>
 800f2da:	4601      	mov	r1, r0
 800f2dc:	4630      	mov	r0, r6
 800f2de:	f7f1 fc85 	bl	8000bec <__addsf3>
 800f2e2:	4606      	mov	r6, r0
 800f2e4:	f109 0901 	add.w	r9, r9, #1
 800f2e8:	ab46      	add	r3, sp, #280	; 0x118
 800f2ea:	9a03      	ldr	r2, [sp, #12]
 800f2ec:	f1aa 0a04 	sub.w	sl, sl, #4
 800f2f0:	4591      	cmp	r9, r2
 800f2f2:	ddeb      	ble.n	800f2cc <__kernel_rem_pio2f+0x178>
 800f2f4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f2f8:	3504      	adds	r5, #4
 800f2fa:	f108 0801 	add.w	r8, r8, #1
 800f2fe:	e75f      	b.n	800f1c0 <__kernel_rem_pio2f+0x6c>
 800f300:	46aa      	mov	sl, r5
 800f302:	465e      	mov	r6, fp
 800f304:	f04f 0900 	mov.w	r9, #0
 800f308:	e7ef      	b.n	800f2ea <__kernel_rem_pio2f+0x196>
 800f30a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f30e:	4620      	mov	r0, r4
 800f310:	f7f1 fd74 	bl	8000dfc <__aeabi_fmul>
 800f314:	f7f1 ff4e 	bl	80011b4 <__aeabi_f2iz>
 800f318:	f7f1 fd1c 	bl	8000d54 <__aeabi_i2f>
 800f31c:	4649      	mov	r1, r9
 800f31e:	9009      	str	r0, [sp, #36]	; 0x24
 800f320:	f7f1 fd6c 	bl	8000dfc <__aeabi_fmul>
 800f324:	4601      	mov	r1, r0
 800f326:	4620      	mov	r0, r4
 800f328:	f7f1 fc5e 	bl	8000be8 <__aeabi_fsub>
 800f32c:	f7f1 ff42 	bl	80011b4 <__aeabi_f2iz>
 800f330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f332:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f336:	f846 0b04 	str.w	r0, [r6], #4
 800f33a:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800f33e:	4618      	mov	r0, r3
 800f340:	f7f1 fc54 	bl	8000bec <__addsf3>
 800f344:	4604      	mov	r4, r0
 800f346:	e756      	b.n	800f1f6 <__kernel_rem_pio2f+0xa2>
 800f348:	d106      	bne.n	800f358 <__kernel_rem_pio2f+0x204>
 800f34a:	f108 33ff 	add.w	r3, r8, #4294967295
 800f34e:	aa0a      	add	r2, sp, #40	; 0x28
 800f350:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f354:	1224      	asrs	r4, r4, #8
 800f356:	e785      	b.n	800f264 <__kernel_rem_pio2f+0x110>
 800f358:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f35c:	f7f1 ff00 	bl	8001160 <__aeabi_fcmpge>
 800f360:	4604      	mov	r4, r0
 800f362:	2800      	cmp	r0, #0
 800f364:	d134      	bne.n	800f3d0 <__kernel_rem_pio2f+0x27c>
 800f366:	2100      	movs	r1, #0
 800f368:	4648      	mov	r0, r9
 800f36a:	f7f1 fedb 	bl	8001124 <__aeabi_fcmpeq>
 800f36e:	2800      	cmp	r0, #0
 800f370:	f000 809a 	beq.w	800f4a8 <__kernel_rem_pio2f+0x354>
 800f374:	f108 35ff 	add.w	r5, r8, #4294967295
 800f378:	462b      	mov	r3, r5
 800f37a:	2200      	movs	r2, #0
 800f37c:	9901      	ldr	r1, [sp, #4]
 800f37e:	428b      	cmp	r3, r1
 800f380:	da4d      	bge.n	800f41e <__kernel_rem_pio2f+0x2ca>
 800f382:	2a00      	cmp	r2, #0
 800f384:	d07c      	beq.n	800f480 <__kernel_rem_pio2f+0x32c>
 800f386:	ab0a      	add	r3, sp, #40	; 0x28
 800f388:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f38c:	3f08      	subs	r7, #8
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f000 8088 	beq.w	800f4a4 <__kernel_rem_pio2f+0x350>
 800f394:	4639      	mov	r1, r7
 800f396:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f39a:	f000 fb59 	bl	800fa50 <scalbnf>
 800f39e:	46aa      	mov	sl, r5
 800f3a0:	4681      	mov	r9, r0
 800f3a2:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800f3a6:	af46      	add	r7, sp, #280	; 0x118
 800f3a8:	f1ba 0f00 	cmp.w	sl, #0
 800f3ac:	f280 80b1 	bge.w	800f512 <__kernel_rem_pio2f+0x3be>
 800f3b0:	46a9      	mov	r9, r5
 800f3b2:	f04f 0a00 	mov.w	sl, #0
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f1b9 0f00 	cmp.w	r9, #0
 800f3bc:	f2c0 80db 	blt.w	800f576 <__kernel_rem_pio2f+0x422>
 800f3c0:	a946      	add	r1, sp, #280	; 0x118
 800f3c2:	4617      	mov	r7, r2
 800f3c4:	f04f 0800 	mov.w	r8, #0
 800f3c8:	4b2c      	ldr	r3, [pc, #176]	; (800f47c <__kernel_rem_pio2f+0x328>)
 800f3ca:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800f3ce:	e0c3      	b.n	800f558 <__kernel_rem_pio2f+0x404>
 800f3d0:	2402      	movs	r4, #2
 800f3d2:	e749      	b.n	800f268 <__kernel_rem_pio2f+0x114>
 800f3d4:	682b      	ldr	r3, [r5, #0]
 800f3d6:	f1ba 0f00 	cmp.w	sl, #0
 800f3da:	d108      	bne.n	800f3ee <__kernel_rem_pio2f+0x29a>
 800f3dc:	b11b      	cbz	r3, 800f3e6 <__kernel_rem_pio2f+0x292>
 800f3de:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800f3e2:	602b      	str	r3, [r5, #0]
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	469a      	mov	sl, r3
 800f3e8:	3201      	adds	r2, #1
 800f3ea:	3504      	adds	r5, #4
 800f3ec:	e73f      	b.n	800f26e <__kernel_rem_pio2f+0x11a>
 800f3ee:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f3f2:	602b      	str	r3, [r5, #0]
 800f3f4:	4653      	mov	r3, sl
 800f3f6:	e7f6      	b.n	800f3e6 <__kernel_rem_pio2f+0x292>
 800f3f8:	f108 32ff 	add.w	r2, r8, #4294967295
 800f3fc:	ab0a      	add	r3, sp, #40	; 0x28
 800f3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f406:	a90a      	add	r1, sp, #40	; 0x28
 800f408:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f40c:	e73a      	b.n	800f284 <__kernel_rem_pio2f+0x130>
 800f40e:	f108 32ff 	add.w	r2, r8, #4294967295
 800f412:	ab0a      	add	r3, sp, #40	; 0x28
 800f414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f41c:	e7f3      	b.n	800f406 <__kernel_rem_pio2f+0x2b2>
 800f41e:	a90a      	add	r1, sp, #40	; 0x28
 800f420:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f424:	3b01      	subs	r3, #1
 800f426:	430a      	orrs	r2, r1
 800f428:	e7a8      	b.n	800f37c <__kernel_rem_pio2f+0x228>
 800f42a:	3301      	adds	r3, #1
 800f42c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f430:	2900      	cmp	r1, #0
 800f432:	d0fa      	beq.n	800f42a <__kernel_rem_pio2f+0x2d6>
 800f434:	9a04      	ldr	r2, [sp, #16]
 800f436:	f108 0501 	add.w	r5, r8, #1
 800f43a:	eb08 0402 	add.w	r4, r8, r2
 800f43e:	aa1e      	add	r2, sp, #120	; 0x78
 800f440:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f444:	4498      	add	r8, r3
 800f446:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800f44a:	45a8      	cmp	r8, r5
 800f44c:	f6ff aec7 	blt.w	800f1de <__kernel_rem_pio2f+0x8a>
 800f450:	9b07      	ldr	r3, [sp, #28]
 800f452:	46a3      	mov	fp, r4
 800f454:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f458:	f7f1 fc7c 	bl	8000d54 <__aeabi_i2f>
 800f45c:	f04f 0a00 	mov.w	sl, #0
 800f460:	2600      	movs	r6, #0
 800f462:	f84b 0b04 	str.w	r0, [fp], #4
 800f466:	9b03      	ldr	r3, [sp, #12]
 800f468:	459a      	cmp	sl, r3
 800f46a:	dd0c      	ble.n	800f486 <__kernel_rem_pio2f+0x332>
 800f46c:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800f470:	465c      	mov	r4, fp
 800f472:	3501      	adds	r5, #1
 800f474:	e7e9      	b.n	800f44a <__kernel_rem_pio2f+0x2f6>
 800f476:	bf00      	nop
 800f478:	080137d4 	.word	0x080137d4
 800f47c:	080137a8 	.word	0x080137a8
 800f480:	2301      	movs	r3, #1
 800f482:	9a08      	ldr	r2, [sp, #32]
 800f484:	e7d2      	b.n	800f42c <__kernel_rem_pio2f+0x2d8>
 800f486:	9b05      	ldr	r3, [sp, #20]
 800f488:	f854 0904 	ldr.w	r0, [r4], #-4
 800f48c:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800f490:	f7f1 fcb4 	bl	8000dfc <__aeabi_fmul>
 800f494:	4601      	mov	r1, r0
 800f496:	4630      	mov	r0, r6
 800f498:	f7f1 fba8 	bl	8000bec <__addsf3>
 800f49c:	f10a 0a01 	add.w	sl, sl, #1
 800f4a0:	4606      	mov	r6, r0
 800f4a2:	e7e0      	b.n	800f466 <__kernel_rem_pio2f+0x312>
 800f4a4:	3d01      	subs	r5, #1
 800f4a6:	e76e      	b.n	800f386 <__kernel_rem_pio2f+0x232>
 800f4a8:	9b06      	ldr	r3, [sp, #24]
 800f4aa:	9a02      	ldr	r2, [sp, #8]
 800f4ac:	4648      	mov	r0, r9
 800f4ae:	1a99      	subs	r1, r3, r2
 800f4b0:	f000 face 	bl	800fa50 <scalbnf>
 800f4b4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f4b8:	4605      	mov	r5, r0
 800f4ba:	f7f1 fe51 	bl	8001160 <__aeabi_fcmpge>
 800f4be:	b300      	cbz	r0, 800f502 <__kernel_rem_pio2f+0x3ae>
 800f4c0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	f7f1 fc99 	bl	8000dfc <__aeabi_fmul>
 800f4ca:	f7f1 fe73 	bl	80011b4 <__aeabi_f2iz>
 800f4ce:	f7f1 fc41 	bl	8000d54 <__aeabi_i2f>
 800f4d2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f4d6:	4681      	mov	r9, r0
 800f4d8:	f7f1 fc90 	bl	8000dfc <__aeabi_fmul>
 800f4dc:	4601      	mov	r1, r0
 800f4de:	4628      	mov	r0, r5
 800f4e0:	f7f1 fb82 	bl	8000be8 <__aeabi_fsub>
 800f4e4:	f7f1 fe66 	bl	80011b4 <__aeabi_f2iz>
 800f4e8:	ab0a      	add	r3, sp, #40	; 0x28
 800f4ea:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f4ee:	4648      	mov	r0, r9
 800f4f0:	f7f1 fe60 	bl	80011b4 <__aeabi_f2iz>
 800f4f4:	f108 0501 	add.w	r5, r8, #1
 800f4f8:	ab0a      	add	r3, sp, #40	; 0x28
 800f4fa:	3708      	adds	r7, #8
 800f4fc:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800f500:	e748      	b.n	800f394 <__kernel_rem_pio2f+0x240>
 800f502:	4628      	mov	r0, r5
 800f504:	f7f1 fe56 	bl	80011b4 <__aeabi_f2iz>
 800f508:	ab0a      	add	r3, sp, #40	; 0x28
 800f50a:	4645      	mov	r5, r8
 800f50c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f510:	e740      	b.n	800f394 <__kernel_rem_pio2f+0x240>
 800f512:	ab0a      	add	r3, sp, #40	; 0x28
 800f514:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f518:	f7f1 fc1c 	bl	8000d54 <__aeabi_i2f>
 800f51c:	4649      	mov	r1, r9
 800f51e:	f7f1 fc6d 	bl	8000dfc <__aeabi_fmul>
 800f522:	4641      	mov	r1, r8
 800f524:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800f528:	4648      	mov	r0, r9
 800f52a:	f7f1 fc67 	bl	8000dfc <__aeabi_fmul>
 800f52e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f532:	4681      	mov	r9, r0
 800f534:	e738      	b.n	800f3a8 <__kernel_rem_pio2f+0x254>
 800f536:	f853 0b04 	ldr.w	r0, [r3], #4
 800f53a:	f85b 1b04 	ldr.w	r1, [fp], #4
 800f53e:	9203      	str	r2, [sp, #12]
 800f540:	9302      	str	r3, [sp, #8]
 800f542:	f7f1 fc5b 	bl	8000dfc <__aeabi_fmul>
 800f546:	4601      	mov	r1, r0
 800f548:	4638      	mov	r0, r7
 800f54a:	f7f1 fb4f 	bl	8000bec <__addsf3>
 800f54e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f552:	4607      	mov	r7, r0
 800f554:	f108 0801 	add.w	r8, r8, #1
 800f558:	9901      	ldr	r1, [sp, #4]
 800f55a:	4588      	cmp	r8, r1
 800f55c:	dc01      	bgt.n	800f562 <__kernel_rem_pio2f+0x40e>
 800f55e:	45c2      	cmp	sl, r8
 800f560:	dae9      	bge.n	800f536 <__kernel_rem_pio2f+0x3e2>
 800f562:	ab5a      	add	r3, sp, #360	; 0x168
 800f564:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800f568:	f843 7ca0 	str.w	r7, [r3, #-160]
 800f56c:	f109 39ff 	add.w	r9, r9, #4294967295
 800f570:	f10a 0a01 	add.w	sl, sl, #1
 800f574:	e720      	b.n	800f3b8 <__kernel_rem_pio2f+0x264>
 800f576:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f578:	2b02      	cmp	r3, #2
 800f57a:	dc07      	bgt.n	800f58c <__kernel_rem_pio2f+0x438>
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	dc4d      	bgt.n	800f61c <__kernel_rem_pio2f+0x4c8>
 800f580:	d02e      	beq.n	800f5e0 <__kernel_rem_pio2f+0x48c>
 800f582:	f006 0007 	and.w	r0, r6, #7
 800f586:	b05b      	add	sp, #364	; 0x16c
 800f588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f58c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f58e:	2b03      	cmp	r3, #3
 800f590:	d1f7      	bne.n	800f582 <__kernel_rem_pio2f+0x42e>
 800f592:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800f596:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800f59a:	46b8      	mov	r8, r7
 800f59c:	46aa      	mov	sl, r5
 800f59e:	f1ba 0f00 	cmp.w	sl, #0
 800f5a2:	dc48      	bgt.n	800f636 <__kernel_rem_pio2f+0x4e2>
 800f5a4:	46a9      	mov	r9, r5
 800f5a6:	f1b9 0f01 	cmp.w	r9, #1
 800f5aa:	dc5f      	bgt.n	800f66c <__kernel_rem_pio2f+0x518>
 800f5ac:	2000      	movs	r0, #0
 800f5ae:	2d01      	cmp	r5, #1
 800f5b0:	dc75      	bgt.n	800f69e <__kernel_rem_pio2f+0x54a>
 800f5b2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800f5b4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800f5b6:	2c00      	cmp	r4, #0
 800f5b8:	d177      	bne.n	800f6aa <__kernel_rem_pio2f+0x556>
 800f5ba:	9900      	ldr	r1, [sp, #0]
 800f5bc:	600a      	str	r2, [r1, #0]
 800f5be:	460a      	mov	r2, r1
 800f5c0:	604b      	str	r3, [r1, #4]
 800f5c2:	6090      	str	r0, [r2, #8]
 800f5c4:	e7dd      	b.n	800f582 <__kernel_rem_pio2f+0x42e>
 800f5c6:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800f5ca:	f7f1 fb0f 	bl	8000bec <__addsf3>
 800f5ce:	3d01      	subs	r5, #1
 800f5d0:	2d00      	cmp	r5, #0
 800f5d2:	daf8      	bge.n	800f5c6 <__kernel_rem_pio2f+0x472>
 800f5d4:	b10c      	cbz	r4, 800f5da <__kernel_rem_pio2f+0x486>
 800f5d6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f5da:	9b00      	ldr	r3, [sp, #0]
 800f5dc:	6018      	str	r0, [r3, #0]
 800f5de:	e7d0      	b.n	800f582 <__kernel_rem_pio2f+0x42e>
 800f5e0:	2000      	movs	r0, #0
 800f5e2:	af32      	add	r7, sp, #200	; 0xc8
 800f5e4:	e7f4      	b.n	800f5d0 <__kernel_rem_pio2f+0x47c>
 800f5e6:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800f5ea:	f7f1 faff 	bl	8000bec <__addsf3>
 800f5ee:	3f01      	subs	r7, #1
 800f5f0:	2f00      	cmp	r7, #0
 800f5f2:	daf8      	bge.n	800f5e6 <__kernel_rem_pio2f+0x492>
 800f5f4:	b1bc      	cbz	r4, 800f626 <__kernel_rem_pio2f+0x4d2>
 800f5f6:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800f5fa:	9a00      	ldr	r2, [sp, #0]
 800f5fc:	4601      	mov	r1, r0
 800f5fe:	6013      	str	r3, [r2, #0]
 800f600:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800f602:	f7f1 faf1 	bl	8000be8 <__aeabi_fsub>
 800f606:	2701      	movs	r7, #1
 800f608:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800f60c:	42bd      	cmp	r5, r7
 800f60e:	da0c      	bge.n	800f62a <__kernel_rem_pio2f+0x4d6>
 800f610:	b10c      	cbz	r4, 800f616 <__kernel_rem_pio2f+0x4c2>
 800f612:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f616:	9b00      	ldr	r3, [sp, #0]
 800f618:	6058      	str	r0, [r3, #4]
 800f61a:	e7b2      	b.n	800f582 <__kernel_rem_pio2f+0x42e>
 800f61c:	462f      	mov	r7, r5
 800f61e:	2000      	movs	r0, #0
 800f620:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800f624:	e7e4      	b.n	800f5f0 <__kernel_rem_pio2f+0x49c>
 800f626:	4603      	mov	r3, r0
 800f628:	e7e7      	b.n	800f5fa <__kernel_rem_pio2f+0x4a6>
 800f62a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800f62e:	f7f1 fadd 	bl	8000bec <__addsf3>
 800f632:	3701      	adds	r7, #1
 800f634:	e7ea      	b.n	800f60c <__kernel_rem_pio2f+0x4b8>
 800f636:	f8d8 3000 	ldr.w	r3, [r8]
 800f63a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800f63e:	4619      	mov	r1, r3
 800f640:	4610      	mov	r0, r2
 800f642:	9302      	str	r3, [sp, #8]
 800f644:	9201      	str	r2, [sp, #4]
 800f646:	f7f1 fad1 	bl	8000bec <__addsf3>
 800f64a:	9a01      	ldr	r2, [sp, #4]
 800f64c:	4601      	mov	r1, r0
 800f64e:	4681      	mov	r9, r0
 800f650:	4610      	mov	r0, r2
 800f652:	f7f1 fac9 	bl	8000be8 <__aeabi_fsub>
 800f656:	9b02      	ldr	r3, [sp, #8]
 800f658:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f65c:	4619      	mov	r1, r3
 800f65e:	f7f1 fac5 	bl	8000bec <__addsf3>
 800f662:	f848 0904 	str.w	r0, [r8], #-4
 800f666:	f8c8 9000 	str.w	r9, [r8]
 800f66a:	e798      	b.n	800f59e <__kernel_rem_pio2f+0x44a>
 800f66c:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800f670:	f8d7 a000 	ldr.w	sl, [r7]
 800f674:	4618      	mov	r0, r3
 800f676:	4651      	mov	r1, sl
 800f678:	9301      	str	r3, [sp, #4]
 800f67a:	f7f1 fab7 	bl	8000bec <__addsf3>
 800f67e:	9b01      	ldr	r3, [sp, #4]
 800f680:	4601      	mov	r1, r0
 800f682:	4680      	mov	r8, r0
 800f684:	4618      	mov	r0, r3
 800f686:	f7f1 faaf 	bl	8000be8 <__aeabi_fsub>
 800f68a:	4651      	mov	r1, sl
 800f68c:	f7f1 faae 	bl	8000bec <__addsf3>
 800f690:	f847 0904 	str.w	r0, [r7], #-4
 800f694:	f109 39ff 	add.w	r9, r9, #4294967295
 800f698:	f8c7 8000 	str.w	r8, [r7]
 800f69c:	e783      	b.n	800f5a6 <__kernel_rem_pio2f+0x452>
 800f69e:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800f6a2:	f7f1 faa3 	bl	8000bec <__addsf3>
 800f6a6:	3d01      	subs	r5, #1
 800f6a8:	e781      	b.n	800f5ae <__kernel_rem_pio2f+0x45a>
 800f6aa:	9900      	ldr	r1, [sp, #0]
 800f6ac:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800f6b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f6b4:	600a      	str	r2, [r1, #0]
 800f6b6:	604b      	str	r3, [r1, #4]
 800f6b8:	460a      	mov	r2, r1
 800f6ba:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f6be:	e780      	b.n	800f5c2 <__kernel_rem_pio2f+0x46e>

0800f6c0 <__kernel_sinf>:
 800f6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6c4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f6c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f6cc:	4604      	mov	r4, r0
 800f6ce:	460f      	mov	r7, r1
 800f6d0:	4691      	mov	r9, r2
 800f6d2:	da03      	bge.n	800f6dc <__kernel_sinf+0x1c>
 800f6d4:	f7f1 fd6e 	bl	80011b4 <__aeabi_f2iz>
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	d035      	beq.n	800f748 <__kernel_sinf+0x88>
 800f6dc:	4621      	mov	r1, r4
 800f6de:	4620      	mov	r0, r4
 800f6e0:	f7f1 fb8c 	bl	8000dfc <__aeabi_fmul>
 800f6e4:	4605      	mov	r5, r0
 800f6e6:	4601      	mov	r1, r0
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	f7f1 fb87 	bl	8000dfc <__aeabi_fmul>
 800f6ee:	4929      	ldr	r1, [pc, #164]	; (800f794 <__kernel_sinf+0xd4>)
 800f6f0:	4606      	mov	r6, r0
 800f6f2:	4628      	mov	r0, r5
 800f6f4:	f7f1 fb82 	bl	8000dfc <__aeabi_fmul>
 800f6f8:	4927      	ldr	r1, [pc, #156]	; (800f798 <__kernel_sinf+0xd8>)
 800f6fa:	f7f1 fa75 	bl	8000be8 <__aeabi_fsub>
 800f6fe:	4629      	mov	r1, r5
 800f700:	f7f1 fb7c 	bl	8000dfc <__aeabi_fmul>
 800f704:	4925      	ldr	r1, [pc, #148]	; (800f79c <__kernel_sinf+0xdc>)
 800f706:	f7f1 fa71 	bl	8000bec <__addsf3>
 800f70a:	4629      	mov	r1, r5
 800f70c:	f7f1 fb76 	bl	8000dfc <__aeabi_fmul>
 800f710:	4923      	ldr	r1, [pc, #140]	; (800f7a0 <__kernel_sinf+0xe0>)
 800f712:	f7f1 fa69 	bl	8000be8 <__aeabi_fsub>
 800f716:	4629      	mov	r1, r5
 800f718:	f7f1 fb70 	bl	8000dfc <__aeabi_fmul>
 800f71c:	4921      	ldr	r1, [pc, #132]	; (800f7a4 <__kernel_sinf+0xe4>)
 800f71e:	f7f1 fa65 	bl	8000bec <__addsf3>
 800f722:	4680      	mov	r8, r0
 800f724:	f1b9 0f00 	cmp.w	r9, #0
 800f728:	d111      	bne.n	800f74e <__kernel_sinf+0x8e>
 800f72a:	4601      	mov	r1, r0
 800f72c:	4628      	mov	r0, r5
 800f72e:	f7f1 fb65 	bl	8000dfc <__aeabi_fmul>
 800f732:	491d      	ldr	r1, [pc, #116]	; (800f7a8 <__kernel_sinf+0xe8>)
 800f734:	f7f1 fa58 	bl	8000be8 <__aeabi_fsub>
 800f738:	4631      	mov	r1, r6
 800f73a:	f7f1 fb5f 	bl	8000dfc <__aeabi_fmul>
 800f73e:	4601      	mov	r1, r0
 800f740:	4620      	mov	r0, r4
 800f742:	f7f1 fa53 	bl	8000bec <__addsf3>
 800f746:	4604      	mov	r4, r0
 800f748:	4620      	mov	r0, r4
 800f74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f74e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f752:	4638      	mov	r0, r7
 800f754:	f7f1 fb52 	bl	8000dfc <__aeabi_fmul>
 800f758:	4641      	mov	r1, r8
 800f75a:	4681      	mov	r9, r0
 800f75c:	4630      	mov	r0, r6
 800f75e:	f7f1 fb4d 	bl	8000dfc <__aeabi_fmul>
 800f762:	4601      	mov	r1, r0
 800f764:	4648      	mov	r0, r9
 800f766:	f7f1 fa3f 	bl	8000be8 <__aeabi_fsub>
 800f76a:	4629      	mov	r1, r5
 800f76c:	f7f1 fb46 	bl	8000dfc <__aeabi_fmul>
 800f770:	4639      	mov	r1, r7
 800f772:	f7f1 fa39 	bl	8000be8 <__aeabi_fsub>
 800f776:	490c      	ldr	r1, [pc, #48]	; (800f7a8 <__kernel_sinf+0xe8>)
 800f778:	4605      	mov	r5, r0
 800f77a:	4630      	mov	r0, r6
 800f77c:	f7f1 fb3e 	bl	8000dfc <__aeabi_fmul>
 800f780:	4601      	mov	r1, r0
 800f782:	4628      	mov	r0, r5
 800f784:	f7f1 fa32 	bl	8000bec <__addsf3>
 800f788:	4601      	mov	r1, r0
 800f78a:	4620      	mov	r0, r4
 800f78c:	f7f1 fa2c 	bl	8000be8 <__aeabi_fsub>
 800f790:	e7d9      	b.n	800f746 <__kernel_sinf+0x86>
 800f792:	bf00      	nop
 800f794:	2f2ec9d3 	.word	0x2f2ec9d3
 800f798:	32d72f34 	.word	0x32d72f34
 800f79c:	3638ef1b 	.word	0x3638ef1b
 800f7a0:	39500d01 	.word	0x39500d01
 800f7a4:	3c088889 	.word	0x3c088889
 800f7a8:	3e2aaaab 	.word	0x3e2aaaab

0800f7ac <fabs>:
 800f7ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f7b0:	4770      	bx	lr
 800f7b2:	0000      	movs	r0, r0
 800f7b4:	0000      	movs	r0, r0
	...

0800f7b8 <floor>:
 800f7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7bc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800f7c0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800f7c4:	2e13      	cmp	r6, #19
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	4607      	mov	r7, r0
 800f7cc:	460c      	mov	r4, r1
 800f7ce:	4605      	mov	r5, r0
 800f7d0:	dc34      	bgt.n	800f83c <floor+0x84>
 800f7d2:	2e00      	cmp	r6, #0
 800f7d4:	da15      	bge.n	800f802 <floor+0x4a>
 800f7d6:	a334      	add	r3, pc, #208	; (adr r3, 800f8a8 <floor+0xf0>)
 800f7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7dc:	f7f0 fd02 	bl	80001e4 <__adddf3>
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	f7f1 f944 	bl	8000a70 <__aeabi_dcmpgt>
 800f7e8:	b140      	cbz	r0, 800f7fc <floor+0x44>
 800f7ea:	2c00      	cmp	r4, #0
 800f7ec:	da59      	bge.n	800f8a2 <floor+0xea>
 800f7ee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f7f2:	ea57 0503 	orrs.w	r5, r7, r3
 800f7f6:	d001      	beq.n	800f7fc <floor+0x44>
 800f7f8:	2500      	movs	r5, #0
 800f7fa:	4c2d      	ldr	r4, [pc, #180]	; (800f8b0 <floor+0xf8>)
 800f7fc:	4623      	mov	r3, r4
 800f7fe:	462f      	mov	r7, r5
 800f800:	e025      	b.n	800f84e <floor+0x96>
 800f802:	4a2c      	ldr	r2, [pc, #176]	; (800f8b4 <floor+0xfc>)
 800f804:	fa42 f806 	asr.w	r8, r2, r6
 800f808:	ea01 0208 	and.w	r2, r1, r8
 800f80c:	4302      	orrs	r2, r0
 800f80e:	d01e      	beq.n	800f84e <floor+0x96>
 800f810:	a325      	add	r3, pc, #148	; (adr r3, 800f8a8 <floor+0xf0>)
 800f812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f816:	f7f0 fce5 	bl	80001e4 <__adddf3>
 800f81a:	2200      	movs	r2, #0
 800f81c:	2300      	movs	r3, #0
 800f81e:	f7f1 f927 	bl	8000a70 <__aeabi_dcmpgt>
 800f822:	2800      	cmp	r0, #0
 800f824:	d0ea      	beq.n	800f7fc <floor+0x44>
 800f826:	2c00      	cmp	r4, #0
 800f828:	bfbe      	ittt	lt
 800f82a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f82e:	fa43 f606 	asrlt.w	r6, r3, r6
 800f832:	19a4      	addlt	r4, r4, r6
 800f834:	2500      	movs	r5, #0
 800f836:	ea24 0408 	bic.w	r4, r4, r8
 800f83a:	e7df      	b.n	800f7fc <floor+0x44>
 800f83c:	2e33      	cmp	r6, #51	; 0x33
 800f83e:	dd0a      	ble.n	800f856 <floor+0x9e>
 800f840:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f844:	d103      	bne.n	800f84e <floor+0x96>
 800f846:	f7f0 fccd 	bl	80001e4 <__adddf3>
 800f84a:	4607      	mov	r7, r0
 800f84c:	460b      	mov	r3, r1
 800f84e:	4638      	mov	r0, r7
 800f850:	4619      	mov	r1, r3
 800f852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f856:	f04f 32ff 	mov.w	r2, #4294967295
 800f85a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800f85e:	fa22 f808 	lsr.w	r8, r2, r8
 800f862:	ea18 0f00 	tst.w	r8, r0
 800f866:	d0f2      	beq.n	800f84e <floor+0x96>
 800f868:	a30f      	add	r3, pc, #60	; (adr r3, 800f8a8 <floor+0xf0>)
 800f86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86e:	f7f0 fcb9 	bl	80001e4 <__adddf3>
 800f872:	2200      	movs	r2, #0
 800f874:	2300      	movs	r3, #0
 800f876:	f7f1 f8fb 	bl	8000a70 <__aeabi_dcmpgt>
 800f87a:	2800      	cmp	r0, #0
 800f87c:	d0be      	beq.n	800f7fc <floor+0x44>
 800f87e:	2c00      	cmp	r4, #0
 800f880:	da02      	bge.n	800f888 <floor+0xd0>
 800f882:	2e14      	cmp	r6, #20
 800f884:	d103      	bne.n	800f88e <floor+0xd6>
 800f886:	3401      	adds	r4, #1
 800f888:	ea25 0508 	bic.w	r5, r5, r8
 800f88c:	e7b6      	b.n	800f7fc <floor+0x44>
 800f88e:	2301      	movs	r3, #1
 800f890:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f894:	fa03 f606 	lsl.w	r6, r3, r6
 800f898:	4435      	add	r5, r6
 800f89a:	42bd      	cmp	r5, r7
 800f89c:	bf38      	it	cc
 800f89e:	18e4      	addcc	r4, r4, r3
 800f8a0:	e7f2      	b.n	800f888 <floor+0xd0>
 800f8a2:	2500      	movs	r5, #0
 800f8a4:	462c      	mov	r4, r5
 800f8a6:	e7a9      	b.n	800f7fc <floor+0x44>
 800f8a8:	8800759c 	.word	0x8800759c
 800f8ac:	7e37e43c 	.word	0x7e37e43c
 800f8b0:	bff00000 	.word	0xbff00000
 800f8b4:	000fffff 	.word	0x000fffff

0800f8b8 <scalbn>:
 800f8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800f8be:	4604      	mov	r4, r0
 800f8c0:	460d      	mov	r5, r1
 800f8c2:	4617      	mov	r7, r2
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	b996      	cbnz	r6, 800f8ee <scalbn+0x36>
 800f8c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f8cc:	4303      	orrs	r3, r0
 800f8ce:	d039      	beq.n	800f944 <scalbn+0x8c>
 800f8d0:	4b35      	ldr	r3, [pc, #212]	; (800f9a8 <scalbn+0xf0>)
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	f7f0 fe3c 	bl	8000550 <__aeabi_dmul>
 800f8d8:	4b34      	ldr	r3, [pc, #208]	; (800f9ac <scalbn+0xf4>)
 800f8da:	4604      	mov	r4, r0
 800f8dc:	429f      	cmp	r7, r3
 800f8de:	460d      	mov	r5, r1
 800f8e0:	da0f      	bge.n	800f902 <scalbn+0x4a>
 800f8e2:	a32d      	add	r3, pc, #180	; (adr r3, 800f998 <scalbn+0xe0>)
 800f8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e8:	f7f0 fe32 	bl	8000550 <__aeabi_dmul>
 800f8ec:	e006      	b.n	800f8fc <scalbn+0x44>
 800f8ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f8f2:	4296      	cmp	r6, r2
 800f8f4:	d10a      	bne.n	800f90c <scalbn+0x54>
 800f8f6:	4602      	mov	r2, r0
 800f8f8:	f7f0 fc74 	bl	80001e4 <__adddf3>
 800f8fc:	4604      	mov	r4, r0
 800f8fe:	460d      	mov	r5, r1
 800f900:	e020      	b.n	800f944 <scalbn+0x8c>
 800f902:	460b      	mov	r3, r1
 800f904:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f908:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800f90c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800f910:	19b9      	adds	r1, r7, r6
 800f912:	4291      	cmp	r1, r2
 800f914:	dd0e      	ble.n	800f934 <scalbn+0x7c>
 800f916:	a322      	add	r3, pc, #136	; (adr r3, 800f9a0 <scalbn+0xe8>)
 800f918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800f920:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800f924:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800f928:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800f92c:	4820      	ldr	r0, [pc, #128]	; (800f9b0 <scalbn+0xf8>)
 800f92e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800f932:	e7d9      	b.n	800f8e8 <scalbn+0x30>
 800f934:	2900      	cmp	r1, #0
 800f936:	dd08      	ble.n	800f94a <scalbn+0x92>
 800f938:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f93c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f940:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800f944:	4620      	mov	r0, r4
 800f946:	4629      	mov	r1, r5
 800f948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f94a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800f94e:	da16      	bge.n	800f97e <scalbn+0xc6>
 800f950:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f954:	429f      	cmp	r7, r3
 800f956:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800f95a:	dd08      	ble.n	800f96e <scalbn+0xb6>
 800f95c:	4c15      	ldr	r4, [pc, #84]	; (800f9b4 <scalbn+0xfc>)
 800f95e:	4814      	ldr	r0, [pc, #80]	; (800f9b0 <scalbn+0xf8>)
 800f960:	f363 74df 	bfi	r4, r3, #31, #1
 800f964:	a30e      	add	r3, pc, #56	; (adr r3, 800f9a0 <scalbn+0xe8>)
 800f966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96a:	4621      	mov	r1, r4
 800f96c:	e7bc      	b.n	800f8e8 <scalbn+0x30>
 800f96e:	4c12      	ldr	r4, [pc, #72]	; (800f9b8 <scalbn+0x100>)
 800f970:	4812      	ldr	r0, [pc, #72]	; (800f9bc <scalbn+0x104>)
 800f972:	f363 74df 	bfi	r4, r3, #31, #1
 800f976:	a308      	add	r3, pc, #32	; (adr r3, 800f998 <scalbn+0xe0>)
 800f978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97c:	e7f5      	b.n	800f96a <scalbn+0xb2>
 800f97e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f982:	3136      	adds	r1, #54	; 0x36
 800f984:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f988:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800f98c:	4620      	mov	r0, r4
 800f98e:	4629      	mov	r1, r5
 800f990:	2200      	movs	r2, #0
 800f992:	4b0b      	ldr	r3, [pc, #44]	; (800f9c0 <scalbn+0x108>)
 800f994:	e7a8      	b.n	800f8e8 <scalbn+0x30>
 800f996:	bf00      	nop
 800f998:	c2f8f359 	.word	0xc2f8f359
 800f99c:	01a56e1f 	.word	0x01a56e1f
 800f9a0:	8800759c 	.word	0x8800759c
 800f9a4:	7e37e43c 	.word	0x7e37e43c
 800f9a8:	43500000 	.word	0x43500000
 800f9ac:	ffff3cb0 	.word	0xffff3cb0
 800f9b0:	8800759c 	.word	0x8800759c
 800f9b4:	7e37e43c 	.word	0x7e37e43c
 800f9b8:	01a56e1f 	.word	0x01a56e1f
 800f9bc:	c2f8f359 	.word	0xc2f8f359
 800f9c0:	3c900000 	.word	0x3c900000

0800f9c4 <floorf>:
 800f9c4:	b570      	push	{r4, r5, r6, lr}
 800f9c6:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800f9ca:	3d7f      	subs	r5, #127	; 0x7f
 800f9cc:	2d16      	cmp	r5, #22
 800f9ce:	4601      	mov	r1, r0
 800f9d0:	4604      	mov	r4, r0
 800f9d2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800f9d6:	dc26      	bgt.n	800fa26 <floorf+0x62>
 800f9d8:	2d00      	cmp	r5, #0
 800f9da:	da0e      	bge.n	800f9fa <floorf+0x36>
 800f9dc:	4917      	ldr	r1, [pc, #92]	; (800fa3c <floorf+0x78>)
 800f9de:	f7f1 f905 	bl	8000bec <__addsf3>
 800f9e2:	2100      	movs	r1, #0
 800f9e4:	f7f1 fbc6 	bl	8001174 <__aeabi_fcmpgt>
 800f9e8:	b128      	cbz	r0, 800f9f6 <floorf+0x32>
 800f9ea:	2c00      	cmp	r4, #0
 800f9ec:	da23      	bge.n	800fa36 <floorf+0x72>
 800f9ee:	4b14      	ldr	r3, [pc, #80]	; (800fa40 <floorf+0x7c>)
 800f9f0:	2e00      	cmp	r6, #0
 800f9f2:	bf18      	it	ne
 800f9f4:	461c      	movne	r4, r3
 800f9f6:	4621      	mov	r1, r4
 800f9f8:	e01b      	b.n	800fa32 <floorf+0x6e>
 800f9fa:	4e12      	ldr	r6, [pc, #72]	; (800fa44 <floorf+0x80>)
 800f9fc:	412e      	asrs	r6, r5
 800f9fe:	4230      	tst	r0, r6
 800fa00:	d017      	beq.n	800fa32 <floorf+0x6e>
 800fa02:	490e      	ldr	r1, [pc, #56]	; (800fa3c <floorf+0x78>)
 800fa04:	f7f1 f8f2 	bl	8000bec <__addsf3>
 800fa08:	2100      	movs	r1, #0
 800fa0a:	f7f1 fbb3 	bl	8001174 <__aeabi_fcmpgt>
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	d0f1      	beq.n	800f9f6 <floorf+0x32>
 800fa12:	2c00      	cmp	r4, #0
 800fa14:	bfbe      	ittt	lt
 800fa16:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800fa1a:	fa43 f505 	asrlt.w	r5, r3, r5
 800fa1e:	1964      	addlt	r4, r4, r5
 800fa20:	ea24 0406 	bic.w	r4, r4, r6
 800fa24:	e7e7      	b.n	800f9f6 <floorf+0x32>
 800fa26:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800fa2a:	d302      	bcc.n	800fa32 <floorf+0x6e>
 800fa2c:	f7f1 f8de 	bl	8000bec <__addsf3>
 800fa30:	4601      	mov	r1, r0
 800fa32:	4608      	mov	r0, r1
 800fa34:	bd70      	pop	{r4, r5, r6, pc}
 800fa36:	2400      	movs	r4, #0
 800fa38:	e7dd      	b.n	800f9f6 <floorf+0x32>
 800fa3a:	bf00      	nop
 800fa3c:	7149f2ca 	.word	0x7149f2ca
 800fa40:	bf800000 	.word	0xbf800000
 800fa44:	007fffff 	.word	0x007fffff

0800fa48 <nanf>:
 800fa48:	4800      	ldr	r0, [pc, #0]	; (800fa4c <nanf+0x4>)
 800fa4a:	4770      	bx	lr
 800fa4c:	7fc00000 	.word	0x7fc00000

0800fa50 <scalbnf>:
 800fa50:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800fa54:	b538      	push	{r3, r4, r5, lr}
 800fa56:	4603      	mov	r3, r0
 800fa58:	460d      	mov	r5, r1
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	d02a      	beq.n	800fab4 <scalbnf+0x64>
 800fa5e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fa62:	d304      	bcc.n	800fa6e <scalbnf+0x1e>
 800fa64:	4601      	mov	r1, r0
 800fa66:	f7f1 f8c1 	bl	8000bec <__addsf3>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	e022      	b.n	800fab4 <scalbnf+0x64>
 800fa6e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800fa72:	d117      	bne.n	800faa4 <scalbnf+0x54>
 800fa74:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800fa78:	f7f1 f9c0 	bl	8000dfc <__aeabi_fmul>
 800fa7c:	4a17      	ldr	r2, [pc, #92]	; (800fadc <scalbnf+0x8c>)
 800fa7e:	4603      	mov	r3, r0
 800fa80:	4295      	cmp	r5, r2
 800fa82:	db0b      	blt.n	800fa9c <scalbnf+0x4c>
 800fa84:	4604      	mov	r4, r0
 800fa86:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800fa8a:	3a19      	subs	r2, #25
 800fa8c:	442a      	add	r2, r5
 800fa8e:	2afe      	cmp	r2, #254	; 0xfe
 800fa90:	dd0a      	ble.n	800faa8 <scalbnf+0x58>
 800fa92:	4913      	ldr	r1, [pc, #76]	; (800fae0 <scalbnf+0x90>)
 800fa94:	4618      	mov	r0, r3
 800fa96:	f361 001e 	bfi	r0, r1, #0, #31
 800fa9a:	e000      	b.n	800fa9e <scalbnf+0x4e>
 800fa9c:	4911      	ldr	r1, [pc, #68]	; (800fae4 <scalbnf+0x94>)
 800fa9e:	f7f1 f9ad 	bl	8000dfc <__aeabi_fmul>
 800faa2:	e7e2      	b.n	800fa6a <scalbnf+0x1a>
 800faa4:	0dd2      	lsrs	r2, r2, #23
 800faa6:	e7f1      	b.n	800fa8c <scalbnf+0x3c>
 800faa8:	2a00      	cmp	r2, #0
 800faaa:	dd05      	ble.n	800fab8 <scalbnf+0x68>
 800faac:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800fab0:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800fab4:	4618      	mov	r0, r3
 800fab6:	bd38      	pop	{r3, r4, r5, pc}
 800fab8:	f112 0f16 	cmn.w	r2, #22
 800fabc:	da05      	bge.n	800faca <scalbnf+0x7a>
 800fabe:	f24c 3250 	movw	r2, #50000	; 0xc350
 800fac2:	4295      	cmp	r5, r2
 800fac4:	dce5      	bgt.n	800fa92 <scalbnf+0x42>
 800fac6:	4907      	ldr	r1, [pc, #28]	; (800fae4 <scalbnf+0x94>)
 800fac8:	e7e4      	b.n	800fa94 <scalbnf+0x44>
 800faca:	3219      	adds	r2, #25
 800facc:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800fad0:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800fad4:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800fad8:	e7e1      	b.n	800fa9e <scalbnf+0x4e>
 800fada:	bf00      	nop
 800fadc:	ffff3cb0 	.word	0xffff3cb0
 800fae0:	7149f2ca 	.word	0x7149f2ca
 800fae4:	0da24260 	.word	0x0da24260

0800fae8 <__errno>:
 800fae8:	4b01      	ldr	r3, [pc, #4]	; (800faf0 <__errno+0x8>)
 800faea:	6818      	ldr	r0, [r3, #0]
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop
 800faf0:	200001a8 	.word	0x200001a8

0800faf4 <__libc_init_array>:
 800faf4:	b570      	push	{r4, r5, r6, lr}
 800faf6:	2600      	movs	r6, #0
 800faf8:	4d0c      	ldr	r5, [pc, #48]	; (800fb2c <__libc_init_array+0x38>)
 800fafa:	4c0d      	ldr	r4, [pc, #52]	; (800fb30 <__libc_init_array+0x3c>)
 800fafc:	1b64      	subs	r4, r4, r5
 800fafe:	10a4      	asrs	r4, r4, #2
 800fb00:	42a6      	cmp	r6, r4
 800fb02:	d109      	bne.n	800fb18 <__libc_init_array+0x24>
 800fb04:	f002 fed8 	bl	80128b8 <_init>
 800fb08:	2600      	movs	r6, #0
 800fb0a:	4d0a      	ldr	r5, [pc, #40]	; (800fb34 <__libc_init_array+0x40>)
 800fb0c:	4c0a      	ldr	r4, [pc, #40]	; (800fb38 <__libc_init_array+0x44>)
 800fb0e:	1b64      	subs	r4, r4, r5
 800fb10:	10a4      	asrs	r4, r4, #2
 800fb12:	42a6      	cmp	r6, r4
 800fb14:	d105      	bne.n	800fb22 <__libc_init_array+0x2e>
 800fb16:	bd70      	pop	{r4, r5, r6, pc}
 800fb18:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb1c:	4798      	blx	r3
 800fb1e:	3601      	adds	r6, #1
 800fb20:	e7ee      	b.n	800fb00 <__libc_init_array+0xc>
 800fb22:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb26:	4798      	blx	r3
 800fb28:	3601      	adds	r6, #1
 800fb2a:	e7f2      	b.n	800fb12 <__libc_init_array+0x1e>
 800fb2c:	08013bcc 	.word	0x08013bcc
 800fb30:	08013bcc 	.word	0x08013bcc
 800fb34:	08013bcc 	.word	0x08013bcc
 800fb38:	08013bd4 	.word	0x08013bd4

0800fb3c <malloc>:
 800fb3c:	4b02      	ldr	r3, [pc, #8]	; (800fb48 <malloc+0xc>)
 800fb3e:	4601      	mov	r1, r0
 800fb40:	6818      	ldr	r0, [r3, #0]
 800fb42:	f000 b86d 	b.w	800fc20 <_malloc_r>
 800fb46:	bf00      	nop
 800fb48:	200001a8 	.word	0x200001a8

0800fb4c <free>:
 800fb4c:	4b02      	ldr	r3, [pc, #8]	; (800fb58 <free+0xc>)
 800fb4e:	4601      	mov	r1, r0
 800fb50:	6818      	ldr	r0, [r3, #0]
 800fb52:	f000 b819 	b.w	800fb88 <_free_r>
 800fb56:	bf00      	nop
 800fb58:	200001a8 	.word	0x200001a8

0800fb5c <memcmp>:
 800fb5c:	b530      	push	{r4, r5, lr}
 800fb5e:	2400      	movs	r4, #0
 800fb60:	3901      	subs	r1, #1
 800fb62:	42a2      	cmp	r2, r4
 800fb64:	d101      	bne.n	800fb6a <memcmp+0xe>
 800fb66:	2000      	movs	r0, #0
 800fb68:	e005      	b.n	800fb76 <memcmp+0x1a>
 800fb6a:	5d03      	ldrb	r3, [r0, r4]
 800fb6c:	3401      	adds	r4, #1
 800fb6e:	5d0d      	ldrb	r5, [r1, r4]
 800fb70:	42ab      	cmp	r3, r5
 800fb72:	d0f6      	beq.n	800fb62 <memcmp+0x6>
 800fb74:	1b58      	subs	r0, r3, r5
 800fb76:	bd30      	pop	{r4, r5, pc}

0800fb78 <memset>:
 800fb78:	4603      	mov	r3, r0
 800fb7a:	4402      	add	r2, r0
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	d100      	bne.n	800fb82 <memset+0xa>
 800fb80:	4770      	bx	lr
 800fb82:	f803 1b01 	strb.w	r1, [r3], #1
 800fb86:	e7f9      	b.n	800fb7c <memset+0x4>

0800fb88 <_free_r>:
 800fb88:	b538      	push	{r3, r4, r5, lr}
 800fb8a:	4605      	mov	r5, r0
 800fb8c:	2900      	cmp	r1, #0
 800fb8e:	d043      	beq.n	800fc18 <_free_r+0x90>
 800fb90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb94:	1f0c      	subs	r4, r1, #4
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	bfb8      	it	lt
 800fb9a:	18e4      	addlt	r4, r4, r3
 800fb9c:	f001 fbce 	bl	801133c <__malloc_lock>
 800fba0:	4a1e      	ldr	r2, [pc, #120]	; (800fc1c <_free_r+0x94>)
 800fba2:	6813      	ldr	r3, [r2, #0]
 800fba4:	4610      	mov	r0, r2
 800fba6:	b933      	cbnz	r3, 800fbb6 <_free_r+0x2e>
 800fba8:	6063      	str	r3, [r4, #4]
 800fbaa:	6014      	str	r4, [r2, #0]
 800fbac:	4628      	mov	r0, r5
 800fbae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbb2:	f001 bbc9 	b.w	8011348 <__malloc_unlock>
 800fbb6:	42a3      	cmp	r3, r4
 800fbb8:	d90a      	bls.n	800fbd0 <_free_r+0x48>
 800fbba:	6821      	ldr	r1, [r4, #0]
 800fbbc:	1862      	adds	r2, r4, r1
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	bf01      	itttt	eq
 800fbc2:	681a      	ldreq	r2, [r3, #0]
 800fbc4:	685b      	ldreq	r3, [r3, #4]
 800fbc6:	1852      	addeq	r2, r2, r1
 800fbc8:	6022      	streq	r2, [r4, #0]
 800fbca:	6063      	str	r3, [r4, #4]
 800fbcc:	6004      	str	r4, [r0, #0]
 800fbce:	e7ed      	b.n	800fbac <_free_r+0x24>
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	b10b      	cbz	r3, 800fbda <_free_r+0x52>
 800fbd6:	42a3      	cmp	r3, r4
 800fbd8:	d9fa      	bls.n	800fbd0 <_free_r+0x48>
 800fbda:	6811      	ldr	r1, [r2, #0]
 800fbdc:	1850      	adds	r0, r2, r1
 800fbde:	42a0      	cmp	r0, r4
 800fbe0:	d10b      	bne.n	800fbfa <_free_r+0x72>
 800fbe2:	6820      	ldr	r0, [r4, #0]
 800fbe4:	4401      	add	r1, r0
 800fbe6:	1850      	adds	r0, r2, r1
 800fbe8:	4283      	cmp	r3, r0
 800fbea:	6011      	str	r1, [r2, #0]
 800fbec:	d1de      	bne.n	800fbac <_free_r+0x24>
 800fbee:	6818      	ldr	r0, [r3, #0]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	4401      	add	r1, r0
 800fbf4:	6011      	str	r1, [r2, #0]
 800fbf6:	6053      	str	r3, [r2, #4]
 800fbf8:	e7d8      	b.n	800fbac <_free_r+0x24>
 800fbfa:	d902      	bls.n	800fc02 <_free_r+0x7a>
 800fbfc:	230c      	movs	r3, #12
 800fbfe:	602b      	str	r3, [r5, #0]
 800fc00:	e7d4      	b.n	800fbac <_free_r+0x24>
 800fc02:	6820      	ldr	r0, [r4, #0]
 800fc04:	1821      	adds	r1, r4, r0
 800fc06:	428b      	cmp	r3, r1
 800fc08:	bf01      	itttt	eq
 800fc0a:	6819      	ldreq	r1, [r3, #0]
 800fc0c:	685b      	ldreq	r3, [r3, #4]
 800fc0e:	1809      	addeq	r1, r1, r0
 800fc10:	6021      	streq	r1, [r4, #0]
 800fc12:	6063      	str	r3, [r4, #4]
 800fc14:	6054      	str	r4, [r2, #4]
 800fc16:	e7c9      	b.n	800fbac <_free_r+0x24>
 800fc18:	bd38      	pop	{r3, r4, r5, pc}
 800fc1a:	bf00      	nop
 800fc1c:	200007d4 	.word	0x200007d4

0800fc20 <_malloc_r>:
 800fc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc22:	1ccd      	adds	r5, r1, #3
 800fc24:	f025 0503 	bic.w	r5, r5, #3
 800fc28:	3508      	adds	r5, #8
 800fc2a:	2d0c      	cmp	r5, #12
 800fc2c:	bf38      	it	cc
 800fc2e:	250c      	movcc	r5, #12
 800fc30:	2d00      	cmp	r5, #0
 800fc32:	4606      	mov	r6, r0
 800fc34:	db01      	blt.n	800fc3a <_malloc_r+0x1a>
 800fc36:	42a9      	cmp	r1, r5
 800fc38:	d903      	bls.n	800fc42 <_malloc_r+0x22>
 800fc3a:	230c      	movs	r3, #12
 800fc3c:	6033      	str	r3, [r6, #0]
 800fc3e:	2000      	movs	r0, #0
 800fc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc42:	f001 fb7b 	bl	801133c <__malloc_lock>
 800fc46:	4921      	ldr	r1, [pc, #132]	; (800fccc <_malloc_r+0xac>)
 800fc48:	680a      	ldr	r2, [r1, #0]
 800fc4a:	4614      	mov	r4, r2
 800fc4c:	b99c      	cbnz	r4, 800fc76 <_malloc_r+0x56>
 800fc4e:	4f20      	ldr	r7, [pc, #128]	; (800fcd0 <_malloc_r+0xb0>)
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	b923      	cbnz	r3, 800fc5e <_malloc_r+0x3e>
 800fc54:	4621      	mov	r1, r4
 800fc56:	4630      	mov	r0, r6
 800fc58:	f000 fca4 	bl	80105a4 <_sbrk_r>
 800fc5c:	6038      	str	r0, [r7, #0]
 800fc5e:	4629      	mov	r1, r5
 800fc60:	4630      	mov	r0, r6
 800fc62:	f000 fc9f 	bl	80105a4 <_sbrk_r>
 800fc66:	1c43      	adds	r3, r0, #1
 800fc68:	d123      	bne.n	800fcb2 <_malloc_r+0x92>
 800fc6a:	230c      	movs	r3, #12
 800fc6c:	4630      	mov	r0, r6
 800fc6e:	6033      	str	r3, [r6, #0]
 800fc70:	f001 fb6a 	bl	8011348 <__malloc_unlock>
 800fc74:	e7e3      	b.n	800fc3e <_malloc_r+0x1e>
 800fc76:	6823      	ldr	r3, [r4, #0]
 800fc78:	1b5b      	subs	r3, r3, r5
 800fc7a:	d417      	bmi.n	800fcac <_malloc_r+0x8c>
 800fc7c:	2b0b      	cmp	r3, #11
 800fc7e:	d903      	bls.n	800fc88 <_malloc_r+0x68>
 800fc80:	6023      	str	r3, [r4, #0]
 800fc82:	441c      	add	r4, r3
 800fc84:	6025      	str	r5, [r4, #0]
 800fc86:	e004      	b.n	800fc92 <_malloc_r+0x72>
 800fc88:	6863      	ldr	r3, [r4, #4]
 800fc8a:	42a2      	cmp	r2, r4
 800fc8c:	bf0c      	ite	eq
 800fc8e:	600b      	streq	r3, [r1, #0]
 800fc90:	6053      	strne	r3, [r2, #4]
 800fc92:	4630      	mov	r0, r6
 800fc94:	f001 fb58 	bl	8011348 <__malloc_unlock>
 800fc98:	f104 000b 	add.w	r0, r4, #11
 800fc9c:	1d23      	adds	r3, r4, #4
 800fc9e:	f020 0007 	bic.w	r0, r0, #7
 800fca2:	1ac2      	subs	r2, r0, r3
 800fca4:	d0cc      	beq.n	800fc40 <_malloc_r+0x20>
 800fca6:	1a1b      	subs	r3, r3, r0
 800fca8:	50a3      	str	r3, [r4, r2]
 800fcaa:	e7c9      	b.n	800fc40 <_malloc_r+0x20>
 800fcac:	4622      	mov	r2, r4
 800fcae:	6864      	ldr	r4, [r4, #4]
 800fcb0:	e7cc      	b.n	800fc4c <_malloc_r+0x2c>
 800fcb2:	1cc4      	adds	r4, r0, #3
 800fcb4:	f024 0403 	bic.w	r4, r4, #3
 800fcb8:	42a0      	cmp	r0, r4
 800fcba:	d0e3      	beq.n	800fc84 <_malloc_r+0x64>
 800fcbc:	1a21      	subs	r1, r4, r0
 800fcbe:	4630      	mov	r0, r6
 800fcc0:	f000 fc70 	bl	80105a4 <_sbrk_r>
 800fcc4:	3001      	adds	r0, #1
 800fcc6:	d1dd      	bne.n	800fc84 <_malloc_r+0x64>
 800fcc8:	e7cf      	b.n	800fc6a <_malloc_r+0x4a>
 800fcca:	bf00      	nop
 800fccc:	200007d4 	.word	0x200007d4
 800fcd0:	200007d8 	.word	0x200007d8

0800fcd4 <__cvt>:
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcda:	461f      	mov	r7, r3
 800fcdc:	bfbb      	ittet	lt
 800fcde:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800fce2:	461f      	movlt	r7, r3
 800fce4:	2300      	movge	r3, #0
 800fce6:	232d      	movlt	r3, #45	; 0x2d
 800fce8:	b088      	sub	sp, #32
 800fcea:	4614      	mov	r4, r2
 800fcec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fcee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800fcf0:	7013      	strb	r3, [r2, #0]
 800fcf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fcf4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800fcf8:	f023 0820 	bic.w	r8, r3, #32
 800fcfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fd00:	d005      	beq.n	800fd0e <__cvt+0x3a>
 800fd02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fd06:	d100      	bne.n	800fd0a <__cvt+0x36>
 800fd08:	3501      	adds	r5, #1
 800fd0a:	2302      	movs	r3, #2
 800fd0c:	e000      	b.n	800fd10 <__cvt+0x3c>
 800fd0e:	2303      	movs	r3, #3
 800fd10:	aa07      	add	r2, sp, #28
 800fd12:	9204      	str	r2, [sp, #16]
 800fd14:	aa06      	add	r2, sp, #24
 800fd16:	e9cd a202 	strd	sl, r2, [sp, #8]
 800fd1a:	e9cd 3500 	strd	r3, r5, [sp]
 800fd1e:	4622      	mov	r2, r4
 800fd20:	463b      	mov	r3, r7
 800fd22:	f000 fcfd 	bl	8010720 <_dtoa_r>
 800fd26:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fd2a:	4606      	mov	r6, r0
 800fd2c:	d102      	bne.n	800fd34 <__cvt+0x60>
 800fd2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd30:	07db      	lsls	r3, r3, #31
 800fd32:	d522      	bpl.n	800fd7a <__cvt+0xa6>
 800fd34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fd38:	eb06 0905 	add.w	r9, r6, r5
 800fd3c:	d110      	bne.n	800fd60 <__cvt+0x8c>
 800fd3e:	7833      	ldrb	r3, [r6, #0]
 800fd40:	2b30      	cmp	r3, #48	; 0x30
 800fd42:	d10a      	bne.n	800fd5a <__cvt+0x86>
 800fd44:	2200      	movs	r2, #0
 800fd46:	2300      	movs	r3, #0
 800fd48:	4620      	mov	r0, r4
 800fd4a:	4639      	mov	r1, r7
 800fd4c:	f7f0 fe68 	bl	8000a20 <__aeabi_dcmpeq>
 800fd50:	b918      	cbnz	r0, 800fd5a <__cvt+0x86>
 800fd52:	f1c5 0501 	rsb	r5, r5, #1
 800fd56:	f8ca 5000 	str.w	r5, [sl]
 800fd5a:	f8da 3000 	ldr.w	r3, [sl]
 800fd5e:	4499      	add	r9, r3
 800fd60:	2200      	movs	r2, #0
 800fd62:	2300      	movs	r3, #0
 800fd64:	4620      	mov	r0, r4
 800fd66:	4639      	mov	r1, r7
 800fd68:	f7f0 fe5a 	bl	8000a20 <__aeabi_dcmpeq>
 800fd6c:	b108      	cbz	r0, 800fd72 <__cvt+0x9e>
 800fd6e:	f8cd 901c 	str.w	r9, [sp, #28]
 800fd72:	2230      	movs	r2, #48	; 0x30
 800fd74:	9b07      	ldr	r3, [sp, #28]
 800fd76:	454b      	cmp	r3, r9
 800fd78:	d307      	bcc.n	800fd8a <__cvt+0xb6>
 800fd7a:	4630      	mov	r0, r6
 800fd7c:	9b07      	ldr	r3, [sp, #28]
 800fd7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fd80:	1b9b      	subs	r3, r3, r6
 800fd82:	6013      	str	r3, [r2, #0]
 800fd84:	b008      	add	sp, #32
 800fd86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd8a:	1c59      	adds	r1, r3, #1
 800fd8c:	9107      	str	r1, [sp, #28]
 800fd8e:	701a      	strb	r2, [r3, #0]
 800fd90:	e7f0      	b.n	800fd74 <__cvt+0xa0>

0800fd92 <__exponent>:
 800fd92:	4603      	mov	r3, r0
 800fd94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd96:	2900      	cmp	r1, #0
 800fd98:	f803 2b02 	strb.w	r2, [r3], #2
 800fd9c:	bfb6      	itet	lt
 800fd9e:	222d      	movlt	r2, #45	; 0x2d
 800fda0:	222b      	movge	r2, #43	; 0x2b
 800fda2:	4249      	neglt	r1, r1
 800fda4:	2909      	cmp	r1, #9
 800fda6:	7042      	strb	r2, [r0, #1]
 800fda8:	dd2b      	ble.n	800fe02 <__exponent+0x70>
 800fdaa:	f10d 0407 	add.w	r4, sp, #7
 800fdae:	46a4      	mov	ip, r4
 800fdb0:	270a      	movs	r7, #10
 800fdb2:	fb91 f6f7 	sdiv	r6, r1, r7
 800fdb6:	460a      	mov	r2, r1
 800fdb8:	46a6      	mov	lr, r4
 800fdba:	fb07 1516 	mls	r5, r7, r6, r1
 800fdbe:	2a63      	cmp	r2, #99	; 0x63
 800fdc0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800fdc4:	4631      	mov	r1, r6
 800fdc6:	f104 34ff 	add.w	r4, r4, #4294967295
 800fdca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fdce:	dcf0      	bgt.n	800fdb2 <__exponent+0x20>
 800fdd0:	3130      	adds	r1, #48	; 0x30
 800fdd2:	f1ae 0502 	sub.w	r5, lr, #2
 800fdd6:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fdda:	4629      	mov	r1, r5
 800fddc:	1c44      	adds	r4, r0, #1
 800fdde:	4561      	cmp	r1, ip
 800fde0:	d30a      	bcc.n	800fdf8 <__exponent+0x66>
 800fde2:	f10d 0209 	add.w	r2, sp, #9
 800fde6:	eba2 020e 	sub.w	r2, r2, lr
 800fdea:	4565      	cmp	r5, ip
 800fdec:	bf88      	it	hi
 800fdee:	2200      	movhi	r2, #0
 800fdf0:	4413      	add	r3, r2
 800fdf2:	1a18      	subs	r0, r3, r0
 800fdf4:	b003      	add	sp, #12
 800fdf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdfc:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fe00:	e7ed      	b.n	800fdde <__exponent+0x4c>
 800fe02:	2330      	movs	r3, #48	; 0x30
 800fe04:	3130      	adds	r1, #48	; 0x30
 800fe06:	7083      	strb	r3, [r0, #2]
 800fe08:	70c1      	strb	r1, [r0, #3]
 800fe0a:	1d03      	adds	r3, r0, #4
 800fe0c:	e7f1      	b.n	800fdf2 <__exponent+0x60>
	...

0800fe10 <_printf_float>:
 800fe10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe14:	b091      	sub	sp, #68	; 0x44
 800fe16:	460c      	mov	r4, r1
 800fe18:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800fe1c:	4616      	mov	r6, r2
 800fe1e:	461f      	mov	r7, r3
 800fe20:	4605      	mov	r5, r0
 800fe22:	f001 fa6b 	bl	80112fc <_localeconv_r>
 800fe26:	6803      	ldr	r3, [r0, #0]
 800fe28:	4618      	mov	r0, r3
 800fe2a:	9309      	str	r3, [sp, #36]	; 0x24
 800fe2c:	f7f0 f9cc 	bl	80001c8 <strlen>
 800fe30:	2300      	movs	r3, #0
 800fe32:	930e      	str	r3, [sp, #56]	; 0x38
 800fe34:	f8d8 3000 	ldr.w	r3, [r8]
 800fe38:	900a      	str	r0, [sp, #40]	; 0x28
 800fe3a:	3307      	adds	r3, #7
 800fe3c:	f023 0307 	bic.w	r3, r3, #7
 800fe40:	f103 0208 	add.w	r2, r3, #8
 800fe44:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fe48:	f8d4 b000 	ldr.w	fp, [r4]
 800fe4c:	f8c8 2000 	str.w	r2, [r8]
 800fe50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fe58:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800fe5c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800fe60:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe62:	f04f 32ff 	mov.w	r2, #4294967295
 800fe66:	4640      	mov	r0, r8
 800fe68:	4b9c      	ldr	r3, [pc, #624]	; (80100dc <_printf_float+0x2cc>)
 800fe6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fe6c:	f7f0 fe0a 	bl	8000a84 <__aeabi_dcmpun>
 800fe70:	bb70      	cbnz	r0, 800fed0 <_printf_float+0xc0>
 800fe72:	f04f 32ff 	mov.w	r2, #4294967295
 800fe76:	4640      	mov	r0, r8
 800fe78:	4b98      	ldr	r3, [pc, #608]	; (80100dc <_printf_float+0x2cc>)
 800fe7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fe7c:	f7f0 fde4 	bl	8000a48 <__aeabi_dcmple>
 800fe80:	bb30      	cbnz	r0, 800fed0 <_printf_float+0xc0>
 800fe82:	2200      	movs	r2, #0
 800fe84:	2300      	movs	r3, #0
 800fe86:	4640      	mov	r0, r8
 800fe88:	4651      	mov	r1, sl
 800fe8a:	f7f0 fdd3 	bl	8000a34 <__aeabi_dcmplt>
 800fe8e:	b110      	cbz	r0, 800fe96 <_printf_float+0x86>
 800fe90:	232d      	movs	r3, #45	; 0x2d
 800fe92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe96:	4b92      	ldr	r3, [pc, #584]	; (80100e0 <_printf_float+0x2d0>)
 800fe98:	4892      	ldr	r0, [pc, #584]	; (80100e4 <_printf_float+0x2d4>)
 800fe9a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fe9e:	bf94      	ite	ls
 800fea0:	4698      	movls	r8, r3
 800fea2:	4680      	movhi	r8, r0
 800fea4:	2303      	movs	r3, #3
 800fea6:	f04f 0a00 	mov.w	sl, #0
 800feaa:	6123      	str	r3, [r4, #16]
 800feac:	f02b 0304 	bic.w	r3, fp, #4
 800feb0:	6023      	str	r3, [r4, #0]
 800feb2:	4633      	mov	r3, r6
 800feb4:	4621      	mov	r1, r4
 800feb6:	4628      	mov	r0, r5
 800feb8:	9700      	str	r7, [sp, #0]
 800feba:	aa0f      	add	r2, sp, #60	; 0x3c
 800febc:	f000 f9d4 	bl	8010268 <_printf_common>
 800fec0:	3001      	adds	r0, #1
 800fec2:	f040 8090 	bne.w	800ffe6 <_printf_float+0x1d6>
 800fec6:	f04f 30ff 	mov.w	r0, #4294967295
 800feca:	b011      	add	sp, #68	; 0x44
 800fecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fed0:	4642      	mov	r2, r8
 800fed2:	4653      	mov	r3, sl
 800fed4:	4640      	mov	r0, r8
 800fed6:	4651      	mov	r1, sl
 800fed8:	f7f0 fdd4 	bl	8000a84 <__aeabi_dcmpun>
 800fedc:	b148      	cbz	r0, 800fef2 <_printf_float+0xe2>
 800fede:	f1ba 0f00 	cmp.w	sl, #0
 800fee2:	bfb8      	it	lt
 800fee4:	232d      	movlt	r3, #45	; 0x2d
 800fee6:	4880      	ldr	r0, [pc, #512]	; (80100e8 <_printf_float+0x2d8>)
 800fee8:	bfb8      	it	lt
 800feea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800feee:	4b7f      	ldr	r3, [pc, #508]	; (80100ec <_printf_float+0x2dc>)
 800fef0:	e7d3      	b.n	800fe9a <_printf_float+0x8a>
 800fef2:	6863      	ldr	r3, [r4, #4]
 800fef4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800fef8:	1c5a      	adds	r2, r3, #1
 800fefa:	d142      	bne.n	800ff82 <_printf_float+0x172>
 800fefc:	2306      	movs	r3, #6
 800fefe:	6063      	str	r3, [r4, #4]
 800ff00:	2200      	movs	r2, #0
 800ff02:	9206      	str	r2, [sp, #24]
 800ff04:	aa0e      	add	r2, sp, #56	; 0x38
 800ff06:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800ff0a:	aa0d      	add	r2, sp, #52	; 0x34
 800ff0c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800ff10:	9203      	str	r2, [sp, #12]
 800ff12:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800ff16:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ff1a:	6023      	str	r3, [r4, #0]
 800ff1c:	6863      	ldr	r3, [r4, #4]
 800ff1e:	4642      	mov	r2, r8
 800ff20:	9300      	str	r3, [sp, #0]
 800ff22:	4628      	mov	r0, r5
 800ff24:	4653      	mov	r3, sl
 800ff26:	910b      	str	r1, [sp, #44]	; 0x2c
 800ff28:	f7ff fed4 	bl	800fcd4 <__cvt>
 800ff2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ff2e:	4680      	mov	r8, r0
 800ff30:	2947      	cmp	r1, #71	; 0x47
 800ff32:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ff34:	d108      	bne.n	800ff48 <_printf_float+0x138>
 800ff36:	1cc8      	adds	r0, r1, #3
 800ff38:	db02      	blt.n	800ff40 <_printf_float+0x130>
 800ff3a:	6863      	ldr	r3, [r4, #4]
 800ff3c:	4299      	cmp	r1, r3
 800ff3e:	dd40      	ble.n	800ffc2 <_printf_float+0x1b2>
 800ff40:	f1a9 0902 	sub.w	r9, r9, #2
 800ff44:	fa5f f989 	uxtb.w	r9, r9
 800ff48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ff4c:	d81f      	bhi.n	800ff8e <_printf_float+0x17e>
 800ff4e:	464a      	mov	r2, r9
 800ff50:	3901      	subs	r1, #1
 800ff52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ff56:	910d      	str	r1, [sp, #52]	; 0x34
 800ff58:	f7ff ff1b 	bl	800fd92 <__exponent>
 800ff5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff5e:	4682      	mov	sl, r0
 800ff60:	1813      	adds	r3, r2, r0
 800ff62:	2a01      	cmp	r2, #1
 800ff64:	6123      	str	r3, [r4, #16]
 800ff66:	dc02      	bgt.n	800ff6e <_printf_float+0x15e>
 800ff68:	6822      	ldr	r2, [r4, #0]
 800ff6a:	07d2      	lsls	r2, r2, #31
 800ff6c:	d501      	bpl.n	800ff72 <_printf_float+0x162>
 800ff6e:	3301      	adds	r3, #1
 800ff70:	6123      	str	r3, [r4, #16]
 800ff72:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d09b      	beq.n	800feb2 <_printf_float+0xa2>
 800ff7a:	232d      	movs	r3, #45	; 0x2d
 800ff7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff80:	e797      	b.n	800feb2 <_printf_float+0xa2>
 800ff82:	2947      	cmp	r1, #71	; 0x47
 800ff84:	d1bc      	bne.n	800ff00 <_printf_float+0xf0>
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d1ba      	bne.n	800ff00 <_printf_float+0xf0>
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	e7b7      	b.n	800fefe <_printf_float+0xee>
 800ff8e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ff92:	d118      	bne.n	800ffc6 <_printf_float+0x1b6>
 800ff94:	2900      	cmp	r1, #0
 800ff96:	6863      	ldr	r3, [r4, #4]
 800ff98:	dd0b      	ble.n	800ffb2 <_printf_float+0x1a2>
 800ff9a:	6121      	str	r1, [r4, #16]
 800ff9c:	b913      	cbnz	r3, 800ffa4 <_printf_float+0x194>
 800ff9e:	6822      	ldr	r2, [r4, #0]
 800ffa0:	07d0      	lsls	r0, r2, #31
 800ffa2:	d502      	bpl.n	800ffaa <_printf_float+0x19a>
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	440b      	add	r3, r1
 800ffa8:	6123      	str	r3, [r4, #16]
 800ffaa:	f04f 0a00 	mov.w	sl, #0
 800ffae:	65a1      	str	r1, [r4, #88]	; 0x58
 800ffb0:	e7df      	b.n	800ff72 <_printf_float+0x162>
 800ffb2:	b913      	cbnz	r3, 800ffba <_printf_float+0x1aa>
 800ffb4:	6822      	ldr	r2, [r4, #0]
 800ffb6:	07d2      	lsls	r2, r2, #31
 800ffb8:	d501      	bpl.n	800ffbe <_printf_float+0x1ae>
 800ffba:	3302      	adds	r3, #2
 800ffbc:	e7f4      	b.n	800ffa8 <_printf_float+0x198>
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	e7f2      	b.n	800ffa8 <_printf_float+0x198>
 800ffc2:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ffc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffc8:	4299      	cmp	r1, r3
 800ffca:	db05      	blt.n	800ffd8 <_printf_float+0x1c8>
 800ffcc:	6823      	ldr	r3, [r4, #0]
 800ffce:	6121      	str	r1, [r4, #16]
 800ffd0:	07d8      	lsls	r0, r3, #31
 800ffd2:	d5ea      	bpl.n	800ffaa <_printf_float+0x19a>
 800ffd4:	1c4b      	adds	r3, r1, #1
 800ffd6:	e7e7      	b.n	800ffa8 <_printf_float+0x198>
 800ffd8:	2900      	cmp	r1, #0
 800ffda:	bfcc      	ite	gt
 800ffdc:	2201      	movgt	r2, #1
 800ffde:	f1c1 0202 	rsble	r2, r1, #2
 800ffe2:	4413      	add	r3, r2
 800ffe4:	e7e0      	b.n	800ffa8 <_printf_float+0x198>
 800ffe6:	6823      	ldr	r3, [r4, #0]
 800ffe8:	055a      	lsls	r2, r3, #21
 800ffea:	d407      	bmi.n	800fffc <_printf_float+0x1ec>
 800ffec:	6923      	ldr	r3, [r4, #16]
 800ffee:	4642      	mov	r2, r8
 800fff0:	4631      	mov	r1, r6
 800fff2:	4628      	mov	r0, r5
 800fff4:	47b8      	blx	r7
 800fff6:	3001      	adds	r0, #1
 800fff8:	d12b      	bne.n	8010052 <_printf_float+0x242>
 800fffa:	e764      	b.n	800fec6 <_printf_float+0xb6>
 800fffc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010000:	f240 80dd 	bls.w	80101be <_printf_float+0x3ae>
 8010004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010008:	2200      	movs	r2, #0
 801000a:	2300      	movs	r3, #0
 801000c:	f7f0 fd08 	bl	8000a20 <__aeabi_dcmpeq>
 8010010:	2800      	cmp	r0, #0
 8010012:	d033      	beq.n	801007c <_printf_float+0x26c>
 8010014:	2301      	movs	r3, #1
 8010016:	4631      	mov	r1, r6
 8010018:	4628      	mov	r0, r5
 801001a:	4a35      	ldr	r2, [pc, #212]	; (80100f0 <_printf_float+0x2e0>)
 801001c:	47b8      	blx	r7
 801001e:	3001      	adds	r0, #1
 8010020:	f43f af51 	beq.w	800fec6 <_printf_float+0xb6>
 8010024:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010028:	429a      	cmp	r2, r3
 801002a:	db02      	blt.n	8010032 <_printf_float+0x222>
 801002c:	6823      	ldr	r3, [r4, #0]
 801002e:	07d8      	lsls	r0, r3, #31
 8010030:	d50f      	bpl.n	8010052 <_printf_float+0x242>
 8010032:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010036:	4631      	mov	r1, r6
 8010038:	4628      	mov	r0, r5
 801003a:	47b8      	blx	r7
 801003c:	3001      	adds	r0, #1
 801003e:	f43f af42 	beq.w	800fec6 <_printf_float+0xb6>
 8010042:	f04f 0800 	mov.w	r8, #0
 8010046:	f104 091a 	add.w	r9, r4, #26
 801004a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801004c:	3b01      	subs	r3, #1
 801004e:	4543      	cmp	r3, r8
 8010050:	dc09      	bgt.n	8010066 <_printf_float+0x256>
 8010052:	6823      	ldr	r3, [r4, #0]
 8010054:	079b      	lsls	r3, r3, #30
 8010056:	f100 8102 	bmi.w	801025e <_printf_float+0x44e>
 801005a:	68e0      	ldr	r0, [r4, #12]
 801005c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801005e:	4298      	cmp	r0, r3
 8010060:	bfb8      	it	lt
 8010062:	4618      	movlt	r0, r3
 8010064:	e731      	b.n	800feca <_printf_float+0xba>
 8010066:	2301      	movs	r3, #1
 8010068:	464a      	mov	r2, r9
 801006a:	4631      	mov	r1, r6
 801006c:	4628      	mov	r0, r5
 801006e:	47b8      	blx	r7
 8010070:	3001      	adds	r0, #1
 8010072:	f43f af28 	beq.w	800fec6 <_printf_float+0xb6>
 8010076:	f108 0801 	add.w	r8, r8, #1
 801007a:	e7e6      	b.n	801004a <_printf_float+0x23a>
 801007c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801007e:	2b00      	cmp	r3, #0
 8010080:	dc38      	bgt.n	80100f4 <_printf_float+0x2e4>
 8010082:	2301      	movs	r3, #1
 8010084:	4631      	mov	r1, r6
 8010086:	4628      	mov	r0, r5
 8010088:	4a19      	ldr	r2, [pc, #100]	; (80100f0 <_printf_float+0x2e0>)
 801008a:	47b8      	blx	r7
 801008c:	3001      	adds	r0, #1
 801008e:	f43f af1a 	beq.w	800fec6 <_printf_float+0xb6>
 8010092:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010096:	4313      	orrs	r3, r2
 8010098:	d102      	bne.n	80100a0 <_printf_float+0x290>
 801009a:	6823      	ldr	r3, [r4, #0]
 801009c:	07d9      	lsls	r1, r3, #31
 801009e:	d5d8      	bpl.n	8010052 <_printf_float+0x242>
 80100a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100a4:	4631      	mov	r1, r6
 80100a6:	4628      	mov	r0, r5
 80100a8:	47b8      	blx	r7
 80100aa:	3001      	adds	r0, #1
 80100ac:	f43f af0b 	beq.w	800fec6 <_printf_float+0xb6>
 80100b0:	f04f 0900 	mov.w	r9, #0
 80100b4:	f104 0a1a 	add.w	sl, r4, #26
 80100b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100ba:	425b      	negs	r3, r3
 80100bc:	454b      	cmp	r3, r9
 80100be:	dc01      	bgt.n	80100c4 <_printf_float+0x2b4>
 80100c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100c2:	e794      	b.n	800ffee <_printf_float+0x1de>
 80100c4:	2301      	movs	r3, #1
 80100c6:	4652      	mov	r2, sl
 80100c8:	4631      	mov	r1, r6
 80100ca:	4628      	mov	r0, r5
 80100cc:	47b8      	blx	r7
 80100ce:	3001      	adds	r0, #1
 80100d0:	f43f aef9 	beq.w	800fec6 <_printf_float+0xb6>
 80100d4:	f109 0901 	add.w	r9, r9, #1
 80100d8:	e7ee      	b.n	80100b8 <_printf_float+0x2a8>
 80100da:	bf00      	nop
 80100dc:	7fefffff 	.word	0x7fefffff
 80100e0:	080137e4 	.word	0x080137e4
 80100e4:	080137e8 	.word	0x080137e8
 80100e8:	080137f0 	.word	0x080137f0
 80100ec:	080137ec 	.word	0x080137ec
 80100f0:	080137f4 	.word	0x080137f4
 80100f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80100f8:	429a      	cmp	r2, r3
 80100fa:	bfa8      	it	ge
 80100fc:	461a      	movge	r2, r3
 80100fe:	2a00      	cmp	r2, #0
 8010100:	4691      	mov	r9, r2
 8010102:	dc37      	bgt.n	8010174 <_printf_float+0x364>
 8010104:	f04f 0b00 	mov.w	fp, #0
 8010108:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801010c:	f104 021a 	add.w	r2, r4, #26
 8010110:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010114:	ebaa 0309 	sub.w	r3, sl, r9
 8010118:	455b      	cmp	r3, fp
 801011a:	dc33      	bgt.n	8010184 <_printf_float+0x374>
 801011c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010120:	429a      	cmp	r2, r3
 8010122:	db3b      	blt.n	801019c <_printf_float+0x38c>
 8010124:	6823      	ldr	r3, [r4, #0]
 8010126:	07da      	lsls	r2, r3, #31
 8010128:	d438      	bmi.n	801019c <_printf_float+0x38c>
 801012a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801012c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801012e:	eba2 030a 	sub.w	r3, r2, sl
 8010132:	eba2 0901 	sub.w	r9, r2, r1
 8010136:	4599      	cmp	r9, r3
 8010138:	bfa8      	it	ge
 801013a:	4699      	movge	r9, r3
 801013c:	f1b9 0f00 	cmp.w	r9, #0
 8010140:	dc34      	bgt.n	80101ac <_printf_float+0x39c>
 8010142:	f04f 0800 	mov.w	r8, #0
 8010146:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801014a:	f104 0a1a 	add.w	sl, r4, #26
 801014e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010152:	1a9b      	subs	r3, r3, r2
 8010154:	eba3 0309 	sub.w	r3, r3, r9
 8010158:	4543      	cmp	r3, r8
 801015a:	f77f af7a 	ble.w	8010052 <_printf_float+0x242>
 801015e:	2301      	movs	r3, #1
 8010160:	4652      	mov	r2, sl
 8010162:	4631      	mov	r1, r6
 8010164:	4628      	mov	r0, r5
 8010166:	47b8      	blx	r7
 8010168:	3001      	adds	r0, #1
 801016a:	f43f aeac 	beq.w	800fec6 <_printf_float+0xb6>
 801016e:	f108 0801 	add.w	r8, r8, #1
 8010172:	e7ec      	b.n	801014e <_printf_float+0x33e>
 8010174:	4613      	mov	r3, r2
 8010176:	4631      	mov	r1, r6
 8010178:	4642      	mov	r2, r8
 801017a:	4628      	mov	r0, r5
 801017c:	47b8      	blx	r7
 801017e:	3001      	adds	r0, #1
 8010180:	d1c0      	bne.n	8010104 <_printf_float+0x2f4>
 8010182:	e6a0      	b.n	800fec6 <_printf_float+0xb6>
 8010184:	2301      	movs	r3, #1
 8010186:	4631      	mov	r1, r6
 8010188:	4628      	mov	r0, r5
 801018a:	920b      	str	r2, [sp, #44]	; 0x2c
 801018c:	47b8      	blx	r7
 801018e:	3001      	adds	r0, #1
 8010190:	f43f ae99 	beq.w	800fec6 <_printf_float+0xb6>
 8010194:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010196:	f10b 0b01 	add.w	fp, fp, #1
 801019a:	e7b9      	b.n	8010110 <_printf_float+0x300>
 801019c:	4631      	mov	r1, r6
 801019e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80101a2:	4628      	mov	r0, r5
 80101a4:	47b8      	blx	r7
 80101a6:	3001      	adds	r0, #1
 80101a8:	d1bf      	bne.n	801012a <_printf_float+0x31a>
 80101aa:	e68c      	b.n	800fec6 <_printf_float+0xb6>
 80101ac:	464b      	mov	r3, r9
 80101ae:	4631      	mov	r1, r6
 80101b0:	4628      	mov	r0, r5
 80101b2:	eb08 020a 	add.w	r2, r8, sl
 80101b6:	47b8      	blx	r7
 80101b8:	3001      	adds	r0, #1
 80101ba:	d1c2      	bne.n	8010142 <_printf_float+0x332>
 80101bc:	e683      	b.n	800fec6 <_printf_float+0xb6>
 80101be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80101c0:	2a01      	cmp	r2, #1
 80101c2:	dc01      	bgt.n	80101c8 <_printf_float+0x3b8>
 80101c4:	07db      	lsls	r3, r3, #31
 80101c6:	d537      	bpl.n	8010238 <_printf_float+0x428>
 80101c8:	2301      	movs	r3, #1
 80101ca:	4642      	mov	r2, r8
 80101cc:	4631      	mov	r1, r6
 80101ce:	4628      	mov	r0, r5
 80101d0:	47b8      	blx	r7
 80101d2:	3001      	adds	r0, #1
 80101d4:	f43f ae77 	beq.w	800fec6 <_printf_float+0xb6>
 80101d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80101dc:	4631      	mov	r1, r6
 80101de:	4628      	mov	r0, r5
 80101e0:	47b8      	blx	r7
 80101e2:	3001      	adds	r0, #1
 80101e4:	f43f ae6f 	beq.w	800fec6 <_printf_float+0xb6>
 80101e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80101ec:	2200      	movs	r2, #0
 80101ee:	2300      	movs	r3, #0
 80101f0:	f7f0 fc16 	bl	8000a20 <__aeabi_dcmpeq>
 80101f4:	b9d8      	cbnz	r0, 801022e <_printf_float+0x41e>
 80101f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101f8:	f108 0201 	add.w	r2, r8, #1
 80101fc:	3b01      	subs	r3, #1
 80101fe:	4631      	mov	r1, r6
 8010200:	4628      	mov	r0, r5
 8010202:	47b8      	blx	r7
 8010204:	3001      	adds	r0, #1
 8010206:	d10e      	bne.n	8010226 <_printf_float+0x416>
 8010208:	e65d      	b.n	800fec6 <_printf_float+0xb6>
 801020a:	2301      	movs	r3, #1
 801020c:	464a      	mov	r2, r9
 801020e:	4631      	mov	r1, r6
 8010210:	4628      	mov	r0, r5
 8010212:	47b8      	blx	r7
 8010214:	3001      	adds	r0, #1
 8010216:	f43f ae56 	beq.w	800fec6 <_printf_float+0xb6>
 801021a:	f108 0801 	add.w	r8, r8, #1
 801021e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010220:	3b01      	subs	r3, #1
 8010222:	4543      	cmp	r3, r8
 8010224:	dcf1      	bgt.n	801020a <_printf_float+0x3fa>
 8010226:	4653      	mov	r3, sl
 8010228:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801022c:	e6e0      	b.n	800fff0 <_printf_float+0x1e0>
 801022e:	f04f 0800 	mov.w	r8, #0
 8010232:	f104 091a 	add.w	r9, r4, #26
 8010236:	e7f2      	b.n	801021e <_printf_float+0x40e>
 8010238:	2301      	movs	r3, #1
 801023a:	4642      	mov	r2, r8
 801023c:	e7df      	b.n	80101fe <_printf_float+0x3ee>
 801023e:	2301      	movs	r3, #1
 8010240:	464a      	mov	r2, r9
 8010242:	4631      	mov	r1, r6
 8010244:	4628      	mov	r0, r5
 8010246:	47b8      	blx	r7
 8010248:	3001      	adds	r0, #1
 801024a:	f43f ae3c 	beq.w	800fec6 <_printf_float+0xb6>
 801024e:	f108 0801 	add.w	r8, r8, #1
 8010252:	68e3      	ldr	r3, [r4, #12]
 8010254:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010256:	1a5b      	subs	r3, r3, r1
 8010258:	4543      	cmp	r3, r8
 801025a:	dcf0      	bgt.n	801023e <_printf_float+0x42e>
 801025c:	e6fd      	b.n	801005a <_printf_float+0x24a>
 801025e:	f04f 0800 	mov.w	r8, #0
 8010262:	f104 0919 	add.w	r9, r4, #25
 8010266:	e7f4      	b.n	8010252 <_printf_float+0x442>

08010268 <_printf_common>:
 8010268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801026c:	4616      	mov	r6, r2
 801026e:	4699      	mov	r9, r3
 8010270:	688a      	ldr	r2, [r1, #8]
 8010272:	690b      	ldr	r3, [r1, #16]
 8010274:	4607      	mov	r7, r0
 8010276:	4293      	cmp	r3, r2
 8010278:	bfb8      	it	lt
 801027a:	4613      	movlt	r3, r2
 801027c:	6033      	str	r3, [r6, #0]
 801027e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010282:	460c      	mov	r4, r1
 8010284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010288:	b10a      	cbz	r2, 801028e <_printf_common+0x26>
 801028a:	3301      	adds	r3, #1
 801028c:	6033      	str	r3, [r6, #0]
 801028e:	6823      	ldr	r3, [r4, #0]
 8010290:	0699      	lsls	r1, r3, #26
 8010292:	bf42      	ittt	mi
 8010294:	6833      	ldrmi	r3, [r6, #0]
 8010296:	3302      	addmi	r3, #2
 8010298:	6033      	strmi	r3, [r6, #0]
 801029a:	6825      	ldr	r5, [r4, #0]
 801029c:	f015 0506 	ands.w	r5, r5, #6
 80102a0:	d106      	bne.n	80102b0 <_printf_common+0x48>
 80102a2:	f104 0a19 	add.w	sl, r4, #25
 80102a6:	68e3      	ldr	r3, [r4, #12]
 80102a8:	6832      	ldr	r2, [r6, #0]
 80102aa:	1a9b      	subs	r3, r3, r2
 80102ac:	42ab      	cmp	r3, r5
 80102ae:	dc28      	bgt.n	8010302 <_printf_common+0x9a>
 80102b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80102b4:	1e13      	subs	r3, r2, #0
 80102b6:	6822      	ldr	r2, [r4, #0]
 80102b8:	bf18      	it	ne
 80102ba:	2301      	movne	r3, #1
 80102bc:	0692      	lsls	r2, r2, #26
 80102be:	d42d      	bmi.n	801031c <_printf_common+0xb4>
 80102c0:	4649      	mov	r1, r9
 80102c2:	4638      	mov	r0, r7
 80102c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80102c8:	47c0      	blx	r8
 80102ca:	3001      	adds	r0, #1
 80102cc:	d020      	beq.n	8010310 <_printf_common+0xa8>
 80102ce:	6823      	ldr	r3, [r4, #0]
 80102d0:	68e5      	ldr	r5, [r4, #12]
 80102d2:	f003 0306 	and.w	r3, r3, #6
 80102d6:	2b04      	cmp	r3, #4
 80102d8:	bf18      	it	ne
 80102da:	2500      	movne	r5, #0
 80102dc:	6832      	ldr	r2, [r6, #0]
 80102de:	f04f 0600 	mov.w	r6, #0
 80102e2:	68a3      	ldr	r3, [r4, #8]
 80102e4:	bf08      	it	eq
 80102e6:	1aad      	subeq	r5, r5, r2
 80102e8:	6922      	ldr	r2, [r4, #16]
 80102ea:	bf08      	it	eq
 80102ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102f0:	4293      	cmp	r3, r2
 80102f2:	bfc4      	itt	gt
 80102f4:	1a9b      	subgt	r3, r3, r2
 80102f6:	18ed      	addgt	r5, r5, r3
 80102f8:	341a      	adds	r4, #26
 80102fa:	42b5      	cmp	r5, r6
 80102fc:	d11a      	bne.n	8010334 <_printf_common+0xcc>
 80102fe:	2000      	movs	r0, #0
 8010300:	e008      	b.n	8010314 <_printf_common+0xac>
 8010302:	2301      	movs	r3, #1
 8010304:	4652      	mov	r2, sl
 8010306:	4649      	mov	r1, r9
 8010308:	4638      	mov	r0, r7
 801030a:	47c0      	blx	r8
 801030c:	3001      	adds	r0, #1
 801030e:	d103      	bne.n	8010318 <_printf_common+0xb0>
 8010310:	f04f 30ff 	mov.w	r0, #4294967295
 8010314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010318:	3501      	adds	r5, #1
 801031a:	e7c4      	b.n	80102a6 <_printf_common+0x3e>
 801031c:	2030      	movs	r0, #48	; 0x30
 801031e:	18e1      	adds	r1, r4, r3
 8010320:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010324:	1c5a      	adds	r2, r3, #1
 8010326:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801032a:	4422      	add	r2, r4
 801032c:	3302      	adds	r3, #2
 801032e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010332:	e7c5      	b.n	80102c0 <_printf_common+0x58>
 8010334:	2301      	movs	r3, #1
 8010336:	4622      	mov	r2, r4
 8010338:	4649      	mov	r1, r9
 801033a:	4638      	mov	r0, r7
 801033c:	47c0      	blx	r8
 801033e:	3001      	adds	r0, #1
 8010340:	d0e6      	beq.n	8010310 <_printf_common+0xa8>
 8010342:	3601      	adds	r6, #1
 8010344:	e7d9      	b.n	80102fa <_printf_common+0x92>
	...

08010348 <_printf_i>:
 8010348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801034c:	460c      	mov	r4, r1
 801034e:	7e27      	ldrb	r7, [r4, #24]
 8010350:	4691      	mov	r9, r2
 8010352:	2f78      	cmp	r7, #120	; 0x78
 8010354:	4680      	mov	r8, r0
 8010356:	469a      	mov	sl, r3
 8010358:	990c      	ldr	r1, [sp, #48]	; 0x30
 801035a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801035e:	d807      	bhi.n	8010370 <_printf_i+0x28>
 8010360:	2f62      	cmp	r7, #98	; 0x62
 8010362:	d80a      	bhi.n	801037a <_printf_i+0x32>
 8010364:	2f00      	cmp	r7, #0
 8010366:	f000 80d9 	beq.w	801051c <_printf_i+0x1d4>
 801036a:	2f58      	cmp	r7, #88	; 0x58
 801036c:	f000 80a4 	beq.w	80104b8 <_printf_i+0x170>
 8010370:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010378:	e03a      	b.n	80103f0 <_printf_i+0xa8>
 801037a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801037e:	2b15      	cmp	r3, #21
 8010380:	d8f6      	bhi.n	8010370 <_printf_i+0x28>
 8010382:	a001      	add	r0, pc, #4	; (adr r0, 8010388 <_printf_i+0x40>)
 8010384:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010388:	080103e1 	.word	0x080103e1
 801038c:	080103f5 	.word	0x080103f5
 8010390:	08010371 	.word	0x08010371
 8010394:	08010371 	.word	0x08010371
 8010398:	08010371 	.word	0x08010371
 801039c:	08010371 	.word	0x08010371
 80103a0:	080103f5 	.word	0x080103f5
 80103a4:	08010371 	.word	0x08010371
 80103a8:	08010371 	.word	0x08010371
 80103ac:	08010371 	.word	0x08010371
 80103b0:	08010371 	.word	0x08010371
 80103b4:	08010503 	.word	0x08010503
 80103b8:	08010425 	.word	0x08010425
 80103bc:	080104e5 	.word	0x080104e5
 80103c0:	08010371 	.word	0x08010371
 80103c4:	08010371 	.word	0x08010371
 80103c8:	08010525 	.word	0x08010525
 80103cc:	08010371 	.word	0x08010371
 80103d0:	08010425 	.word	0x08010425
 80103d4:	08010371 	.word	0x08010371
 80103d8:	08010371 	.word	0x08010371
 80103dc:	080104ed 	.word	0x080104ed
 80103e0:	680b      	ldr	r3, [r1, #0]
 80103e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80103e6:	1d1a      	adds	r2, r3, #4
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	600a      	str	r2, [r1, #0]
 80103ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103f0:	2301      	movs	r3, #1
 80103f2:	e0a4      	b.n	801053e <_printf_i+0x1f6>
 80103f4:	6825      	ldr	r5, [r4, #0]
 80103f6:	6808      	ldr	r0, [r1, #0]
 80103f8:	062e      	lsls	r6, r5, #24
 80103fa:	f100 0304 	add.w	r3, r0, #4
 80103fe:	d50a      	bpl.n	8010416 <_printf_i+0xce>
 8010400:	6805      	ldr	r5, [r0, #0]
 8010402:	600b      	str	r3, [r1, #0]
 8010404:	2d00      	cmp	r5, #0
 8010406:	da03      	bge.n	8010410 <_printf_i+0xc8>
 8010408:	232d      	movs	r3, #45	; 0x2d
 801040a:	426d      	negs	r5, r5
 801040c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010410:	230a      	movs	r3, #10
 8010412:	485e      	ldr	r0, [pc, #376]	; (801058c <_printf_i+0x244>)
 8010414:	e019      	b.n	801044a <_printf_i+0x102>
 8010416:	f015 0f40 	tst.w	r5, #64	; 0x40
 801041a:	6805      	ldr	r5, [r0, #0]
 801041c:	600b      	str	r3, [r1, #0]
 801041e:	bf18      	it	ne
 8010420:	b22d      	sxthne	r5, r5
 8010422:	e7ef      	b.n	8010404 <_printf_i+0xbc>
 8010424:	680b      	ldr	r3, [r1, #0]
 8010426:	6825      	ldr	r5, [r4, #0]
 8010428:	1d18      	adds	r0, r3, #4
 801042a:	6008      	str	r0, [r1, #0]
 801042c:	0628      	lsls	r0, r5, #24
 801042e:	d501      	bpl.n	8010434 <_printf_i+0xec>
 8010430:	681d      	ldr	r5, [r3, #0]
 8010432:	e002      	b.n	801043a <_printf_i+0xf2>
 8010434:	0669      	lsls	r1, r5, #25
 8010436:	d5fb      	bpl.n	8010430 <_printf_i+0xe8>
 8010438:	881d      	ldrh	r5, [r3, #0]
 801043a:	2f6f      	cmp	r7, #111	; 0x6f
 801043c:	bf0c      	ite	eq
 801043e:	2308      	moveq	r3, #8
 8010440:	230a      	movne	r3, #10
 8010442:	4852      	ldr	r0, [pc, #328]	; (801058c <_printf_i+0x244>)
 8010444:	2100      	movs	r1, #0
 8010446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801044a:	6866      	ldr	r6, [r4, #4]
 801044c:	2e00      	cmp	r6, #0
 801044e:	bfa8      	it	ge
 8010450:	6821      	ldrge	r1, [r4, #0]
 8010452:	60a6      	str	r6, [r4, #8]
 8010454:	bfa4      	itt	ge
 8010456:	f021 0104 	bicge.w	r1, r1, #4
 801045a:	6021      	strge	r1, [r4, #0]
 801045c:	b90d      	cbnz	r5, 8010462 <_printf_i+0x11a>
 801045e:	2e00      	cmp	r6, #0
 8010460:	d04d      	beq.n	80104fe <_printf_i+0x1b6>
 8010462:	4616      	mov	r6, r2
 8010464:	fbb5 f1f3 	udiv	r1, r5, r3
 8010468:	fb03 5711 	mls	r7, r3, r1, r5
 801046c:	5dc7      	ldrb	r7, [r0, r7]
 801046e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010472:	462f      	mov	r7, r5
 8010474:	42bb      	cmp	r3, r7
 8010476:	460d      	mov	r5, r1
 8010478:	d9f4      	bls.n	8010464 <_printf_i+0x11c>
 801047a:	2b08      	cmp	r3, #8
 801047c:	d10b      	bne.n	8010496 <_printf_i+0x14e>
 801047e:	6823      	ldr	r3, [r4, #0]
 8010480:	07df      	lsls	r7, r3, #31
 8010482:	d508      	bpl.n	8010496 <_printf_i+0x14e>
 8010484:	6923      	ldr	r3, [r4, #16]
 8010486:	6861      	ldr	r1, [r4, #4]
 8010488:	4299      	cmp	r1, r3
 801048a:	bfde      	ittt	le
 801048c:	2330      	movle	r3, #48	; 0x30
 801048e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010492:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010496:	1b92      	subs	r2, r2, r6
 8010498:	6122      	str	r2, [r4, #16]
 801049a:	464b      	mov	r3, r9
 801049c:	4621      	mov	r1, r4
 801049e:	4640      	mov	r0, r8
 80104a0:	f8cd a000 	str.w	sl, [sp]
 80104a4:	aa03      	add	r2, sp, #12
 80104a6:	f7ff fedf 	bl	8010268 <_printf_common>
 80104aa:	3001      	adds	r0, #1
 80104ac:	d14c      	bne.n	8010548 <_printf_i+0x200>
 80104ae:	f04f 30ff 	mov.w	r0, #4294967295
 80104b2:	b004      	add	sp, #16
 80104b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104b8:	4834      	ldr	r0, [pc, #208]	; (801058c <_printf_i+0x244>)
 80104ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80104be:	680e      	ldr	r6, [r1, #0]
 80104c0:	6823      	ldr	r3, [r4, #0]
 80104c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80104c6:	061f      	lsls	r7, r3, #24
 80104c8:	600e      	str	r6, [r1, #0]
 80104ca:	d514      	bpl.n	80104f6 <_printf_i+0x1ae>
 80104cc:	07d9      	lsls	r1, r3, #31
 80104ce:	bf44      	itt	mi
 80104d0:	f043 0320 	orrmi.w	r3, r3, #32
 80104d4:	6023      	strmi	r3, [r4, #0]
 80104d6:	b91d      	cbnz	r5, 80104e0 <_printf_i+0x198>
 80104d8:	6823      	ldr	r3, [r4, #0]
 80104da:	f023 0320 	bic.w	r3, r3, #32
 80104de:	6023      	str	r3, [r4, #0]
 80104e0:	2310      	movs	r3, #16
 80104e2:	e7af      	b.n	8010444 <_printf_i+0xfc>
 80104e4:	6823      	ldr	r3, [r4, #0]
 80104e6:	f043 0320 	orr.w	r3, r3, #32
 80104ea:	6023      	str	r3, [r4, #0]
 80104ec:	2378      	movs	r3, #120	; 0x78
 80104ee:	4828      	ldr	r0, [pc, #160]	; (8010590 <_printf_i+0x248>)
 80104f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80104f4:	e7e3      	b.n	80104be <_printf_i+0x176>
 80104f6:	065e      	lsls	r6, r3, #25
 80104f8:	bf48      	it	mi
 80104fa:	b2ad      	uxthmi	r5, r5
 80104fc:	e7e6      	b.n	80104cc <_printf_i+0x184>
 80104fe:	4616      	mov	r6, r2
 8010500:	e7bb      	b.n	801047a <_printf_i+0x132>
 8010502:	680b      	ldr	r3, [r1, #0]
 8010504:	6826      	ldr	r6, [r4, #0]
 8010506:	1d1d      	adds	r5, r3, #4
 8010508:	6960      	ldr	r0, [r4, #20]
 801050a:	600d      	str	r5, [r1, #0]
 801050c:	0635      	lsls	r5, r6, #24
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	d501      	bpl.n	8010516 <_printf_i+0x1ce>
 8010512:	6018      	str	r0, [r3, #0]
 8010514:	e002      	b.n	801051c <_printf_i+0x1d4>
 8010516:	0671      	lsls	r1, r6, #25
 8010518:	d5fb      	bpl.n	8010512 <_printf_i+0x1ca>
 801051a:	8018      	strh	r0, [r3, #0]
 801051c:	2300      	movs	r3, #0
 801051e:	4616      	mov	r6, r2
 8010520:	6123      	str	r3, [r4, #16]
 8010522:	e7ba      	b.n	801049a <_printf_i+0x152>
 8010524:	680b      	ldr	r3, [r1, #0]
 8010526:	1d1a      	adds	r2, r3, #4
 8010528:	600a      	str	r2, [r1, #0]
 801052a:	681e      	ldr	r6, [r3, #0]
 801052c:	2100      	movs	r1, #0
 801052e:	4630      	mov	r0, r6
 8010530:	6862      	ldr	r2, [r4, #4]
 8010532:	f000 fee7 	bl	8011304 <memchr>
 8010536:	b108      	cbz	r0, 801053c <_printf_i+0x1f4>
 8010538:	1b80      	subs	r0, r0, r6
 801053a:	6060      	str	r0, [r4, #4]
 801053c:	6863      	ldr	r3, [r4, #4]
 801053e:	6123      	str	r3, [r4, #16]
 8010540:	2300      	movs	r3, #0
 8010542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010546:	e7a8      	b.n	801049a <_printf_i+0x152>
 8010548:	4632      	mov	r2, r6
 801054a:	4649      	mov	r1, r9
 801054c:	4640      	mov	r0, r8
 801054e:	6923      	ldr	r3, [r4, #16]
 8010550:	47d0      	blx	sl
 8010552:	3001      	adds	r0, #1
 8010554:	d0ab      	beq.n	80104ae <_printf_i+0x166>
 8010556:	6823      	ldr	r3, [r4, #0]
 8010558:	079b      	lsls	r3, r3, #30
 801055a:	d413      	bmi.n	8010584 <_printf_i+0x23c>
 801055c:	68e0      	ldr	r0, [r4, #12]
 801055e:	9b03      	ldr	r3, [sp, #12]
 8010560:	4298      	cmp	r0, r3
 8010562:	bfb8      	it	lt
 8010564:	4618      	movlt	r0, r3
 8010566:	e7a4      	b.n	80104b2 <_printf_i+0x16a>
 8010568:	2301      	movs	r3, #1
 801056a:	4632      	mov	r2, r6
 801056c:	4649      	mov	r1, r9
 801056e:	4640      	mov	r0, r8
 8010570:	47d0      	blx	sl
 8010572:	3001      	adds	r0, #1
 8010574:	d09b      	beq.n	80104ae <_printf_i+0x166>
 8010576:	3501      	adds	r5, #1
 8010578:	68e3      	ldr	r3, [r4, #12]
 801057a:	9903      	ldr	r1, [sp, #12]
 801057c:	1a5b      	subs	r3, r3, r1
 801057e:	42ab      	cmp	r3, r5
 8010580:	dcf2      	bgt.n	8010568 <_printf_i+0x220>
 8010582:	e7eb      	b.n	801055c <_printf_i+0x214>
 8010584:	2500      	movs	r5, #0
 8010586:	f104 0619 	add.w	r6, r4, #25
 801058a:	e7f5      	b.n	8010578 <_printf_i+0x230>
 801058c:	080137f6 	.word	0x080137f6
 8010590:	08013807 	.word	0x08013807

08010594 <realloc>:
 8010594:	4b02      	ldr	r3, [pc, #8]	; (80105a0 <realloc+0xc>)
 8010596:	460a      	mov	r2, r1
 8010598:	4601      	mov	r1, r0
 801059a:	6818      	ldr	r0, [r3, #0]
 801059c:	f001 ba6a 	b.w	8011a74 <_realloc_r>
 80105a0:	200001a8 	.word	0x200001a8

080105a4 <_sbrk_r>:
 80105a4:	b538      	push	{r3, r4, r5, lr}
 80105a6:	2300      	movs	r3, #0
 80105a8:	4d05      	ldr	r5, [pc, #20]	; (80105c0 <_sbrk_r+0x1c>)
 80105aa:	4604      	mov	r4, r0
 80105ac:	4608      	mov	r0, r1
 80105ae:	602b      	str	r3, [r5, #0]
 80105b0:	f7f5 f89a 	bl	80056e8 <_sbrk>
 80105b4:	1c43      	adds	r3, r0, #1
 80105b6:	d102      	bne.n	80105be <_sbrk_r+0x1a>
 80105b8:	682b      	ldr	r3, [r5, #0]
 80105ba:	b103      	cbz	r3, 80105be <_sbrk_r+0x1a>
 80105bc:	6023      	str	r3, [r4, #0]
 80105be:	bd38      	pop	{r3, r4, r5, pc}
 80105c0:	200020a4 	.word	0x200020a4

080105c4 <siprintf>:
 80105c4:	b40e      	push	{r1, r2, r3}
 80105c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80105ca:	b500      	push	{lr}
 80105cc:	b09c      	sub	sp, #112	; 0x70
 80105ce:	ab1d      	add	r3, sp, #116	; 0x74
 80105d0:	9002      	str	r0, [sp, #8]
 80105d2:	9006      	str	r0, [sp, #24]
 80105d4:	9107      	str	r1, [sp, #28]
 80105d6:	9104      	str	r1, [sp, #16]
 80105d8:	4808      	ldr	r0, [pc, #32]	; (80105fc <siprintf+0x38>)
 80105da:	4909      	ldr	r1, [pc, #36]	; (8010600 <siprintf+0x3c>)
 80105dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80105e0:	9105      	str	r1, [sp, #20]
 80105e2:	6800      	ldr	r0, [r0, #0]
 80105e4:	a902      	add	r1, sp, #8
 80105e6:	9301      	str	r3, [sp, #4]
 80105e8:	f001 fac6 	bl	8011b78 <_svfiprintf_r>
 80105ec:	2200      	movs	r2, #0
 80105ee:	9b02      	ldr	r3, [sp, #8]
 80105f0:	701a      	strb	r2, [r3, #0]
 80105f2:	b01c      	add	sp, #112	; 0x70
 80105f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80105f8:	b003      	add	sp, #12
 80105fa:	4770      	bx	lr
 80105fc:	200001a8 	.word	0x200001a8
 8010600:	ffff0208 	.word	0xffff0208

08010604 <quorem>:
 8010604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010608:	6903      	ldr	r3, [r0, #16]
 801060a:	690c      	ldr	r4, [r1, #16]
 801060c:	4607      	mov	r7, r0
 801060e:	42a3      	cmp	r3, r4
 8010610:	f2c0 8083 	blt.w	801071a <quorem+0x116>
 8010614:	3c01      	subs	r4, #1
 8010616:	f100 0514 	add.w	r5, r0, #20
 801061a:	f101 0814 	add.w	r8, r1, #20
 801061e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010622:	9301      	str	r3, [sp, #4]
 8010624:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010628:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801062c:	3301      	adds	r3, #1
 801062e:	429a      	cmp	r2, r3
 8010630:	fbb2 f6f3 	udiv	r6, r2, r3
 8010634:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010638:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801063c:	d332      	bcc.n	80106a4 <quorem+0xa0>
 801063e:	f04f 0e00 	mov.w	lr, #0
 8010642:	4640      	mov	r0, r8
 8010644:	46ac      	mov	ip, r5
 8010646:	46f2      	mov	sl, lr
 8010648:	f850 2b04 	ldr.w	r2, [r0], #4
 801064c:	b293      	uxth	r3, r2
 801064e:	fb06 e303 	mla	r3, r6, r3, lr
 8010652:	0c12      	lsrs	r2, r2, #16
 8010654:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010658:	fb06 e202 	mla	r2, r6, r2, lr
 801065c:	b29b      	uxth	r3, r3
 801065e:	ebaa 0303 	sub.w	r3, sl, r3
 8010662:	f8dc a000 	ldr.w	sl, [ip]
 8010666:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801066a:	fa1f fa8a 	uxth.w	sl, sl
 801066e:	4453      	add	r3, sl
 8010670:	fa1f fa82 	uxth.w	sl, r2
 8010674:	f8dc 2000 	ldr.w	r2, [ip]
 8010678:	4581      	cmp	r9, r0
 801067a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801067e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010682:	b29b      	uxth	r3, r3
 8010684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010688:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801068c:	f84c 3b04 	str.w	r3, [ip], #4
 8010690:	d2da      	bcs.n	8010648 <quorem+0x44>
 8010692:	f855 300b 	ldr.w	r3, [r5, fp]
 8010696:	b92b      	cbnz	r3, 80106a4 <quorem+0xa0>
 8010698:	9b01      	ldr	r3, [sp, #4]
 801069a:	3b04      	subs	r3, #4
 801069c:	429d      	cmp	r5, r3
 801069e:	461a      	mov	r2, r3
 80106a0:	d32f      	bcc.n	8010702 <quorem+0xfe>
 80106a2:	613c      	str	r4, [r7, #16]
 80106a4:	4638      	mov	r0, r7
 80106a6:	f001 f8cf 	bl	8011848 <__mcmp>
 80106aa:	2800      	cmp	r0, #0
 80106ac:	db25      	blt.n	80106fa <quorem+0xf6>
 80106ae:	4628      	mov	r0, r5
 80106b0:	f04f 0c00 	mov.w	ip, #0
 80106b4:	3601      	adds	r6, #1
 80106b6:	f858 1b04 	ldr.w	r1, [r8], #4
 80106ba:	f8d0 e000 	ldr.w	lr, [r0]
 80106be:	b28b      	uxth	r3, r1
 80106c0:	ebac 0303 	sub.w	r3, ip, r3
 80106c4:	fa1f f28e 	uxth.w	r2, lr
 80106c8:	4413      	add	r3, r2
 80106ca:	0c0a      	lsrs	r2, r1, #16
 80106cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80106d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80106d4:	b29b      	uxth	r3, r3
 80106d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106da:	45c1      	cmp	r9, r8
 80106dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80106e0:	f840 3b04 	str.w	r3, [r0], #4
 80106e4:	d2e7      	bcs.n	80106b6 <quorem+0xb2>
 80106e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80106ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106ee:	b922      	cbnz	r2, 80106fa <quorem+0xf6>
 80106f0:	3b04      	subs	r3, #4
 80106f2:	429d      	cmp	r5, r3
 80106f4:	461a      	mov	r2, r3
 80106f6:	d30a      	bcc.n	801070e <quorem+0x10a>
 80106f8:	613c      	str	r4, [r7, #16]
 80106fa:	4630      	mov	r0, r6
 80106fc:	b003      	add	sp, #12
 80106fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010702:	6812      	ldr	r2, [r2, #0]
 8010704:	3b04      	subs	r3, #4
 8010706:	2a00      	cmp	r2, #0
 8010708:	d1cb      	bne.n	80106a2 <quorem+0x9e>
 801070a:	3c01      	subs	r4, #1
 801070c:	e7c6      	b.n	801069c <quorem+0x98>
 801070e:	6812      	ldr	r2, [r2, #0]
 8010710:	3b04      	subs	r3, #4
 8010712:	2a00      	cmp	r2, #0
 8010714:	d1f0      	bne.n	80106f8 <quorem+0xf4>
 8010716:	3c01      	subs	r4, #1
 8010718:	e7eb      	b.n	80106f2 <quorem+0xee>
 801071a:	2000      	movs	r0, #0
 801071c:	e7ee      	b.n	80106fc <quorem+0xf8>
	...

08010720 <_dtoa_r>:
 8010720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010724:	4616      	mov	r6, r2
 8010726:	461f      	mov	r7, r3
 8010728:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801072a:	b099      	sub	sp, #100	; 0x64
 801072c:	4605      	mov	r5, r0
 801072e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010732:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8010736:	b974      	cbnz	r4, 8010756 <_dtoa_r+0x36>
 8010738:	2010      	movs	r0, #16
 801073a:	f7ff f9ff 	bl	800fb3c <malloc>
 801073e:	4602      	mov	r2, r0
 8010740:	6268      	str	r0, [r5, #36]	; 0x24
 8010742:	b920      	cbnz	r0, 801074e <_dtoa_r+0x2e>
 8010744:	21ea      	movs	r1, #234	; 0xea
 8010746:	4bae      	ldr	r3, [pc, #696]	; (8010a00 <_dtoa_r+0x2e0>)
 8010748:	48ae      	ldr	r0, [pc, #696]	; (8010a04 <_dtoa_r+0x2e4>)
 801074a:	f001 fb15 	bl	8011d78 <__assert_func>
 801074e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010752:	6004      	str	r4, [r0, #0]
 8010754:	60c4      	str	r4, [r0, #12]
 8010756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010758:	6819      	ldr	r1, [r3, #0]
 801075a:	b151      	cbz	r1, 8010772 <_dtoa_r+0x52>
 801075c:	685a      	ldr	r2, [r3, #4]
 801075e:	2301      	movs	r3, #1
 8010760:	4093      	lsls	r3, r2
 8010762:	604a      	str	r2, [r1, #4]
 8010764:	608b      	str	r3, [r1, #8]
 8010766:	4628      	mov	r0, r5
 8010768:	f000 fe34 	bl	80113d4 <_Bfree>
 801076c:	2200      	movs	r2, #0
 801076e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010770:	601a      	str	r2, [r3, #0]
 8010772:	1e3b      	subs	r3, r7, #0
 8010774:	bfaf      	iteee	ge
 8010776:	2300      	movge	r3, #0
 8010778:	2201      	movlt	r2, #1
 801077a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801077e:	9305      	strlt	r3, [sp, #20]
 8010780:	bfa8      	it	ge
 8010782:	f8c8 3000 	strge.w	r3, [r8]
 8010786:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801078a:	4b9f      	ldr	r3, [pc, #636]	; (8010a08 <_dtoa_r+0x2e8>)
 801078c:	bfb8      	it	lt
 801078e:	f8c8 2000 	strlt.w	r2, [r8]
 8010792:	ea33 0309 	bics.w	r3, r3, r9
 8010796:	d119      	bne.n	80107cc <_dtoa_r+0xac>
 8010798:	f242 730f 	movw	r3, #9999	; 0x270f
 801079c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801079e:	6013      	str	r3, [r2, #0]
 80107a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80107a4:	4333      	orrs	r3, r6
 80107a6:	f000 8580 	beq.w	80112aa <_dtoa_r+0xb8a>
 80107aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80107ac:	b953      	cbnz	r3, 80107c4 <_dtoa_r+0xa4>
 80107ae:	4b97      	ldr	r3, [pc, #604]	; (8010a0c <_dtoa_r+0x2ec>)
 80107b0:	e022      	b.n	80107f8 <_dtoa_r+0xd8>
 80107b2:	4b97      	ldr	r3, [pc, #604]	; (8010a10 <_dtoa_r+0x2f0>)
 80107b4:	9308      	str	r3, [sp, #32]
 80107b6:	3308      	adds	r3, #8
 80107b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80107ba:	6013      	str	r3, [r2, #0]
 80107bc:	9808      	ldr	r0, [sp, #32]
 80107be:	b019      	add	sp, #100	; 0x64
 80107c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c4:	4b91      	ldr	r3, [pc, #580]	; (8010a0c <_dtoa_r+0x2ec>)
 80107c6:	9308      	str	r3, [sp, #32]
 80107c8:	3303      	adds	r3, #3
 80107ca:	e7f5      	b.n	80107b8 <_dtoa_r+0x98>
 80107cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80107d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80107d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80107d8:	2200      	movs	r2, #0
 80107da:	2300      	movs	r3, #0
 80107dc:	f7f0 f920 	bl	8000a20 <__aeabi_dcmpeq>
 80107e0:	4680      	mov	r8, r0
 80107e2:	b158      	cbz	r0, 80107fc <_dtoa_r+0xdc>
 80107e4:	2301      	movs	r3, #1
 80107e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80107e8:	6013      	str	r3, [r2, #0]
 80107ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	f000 8559 	beq.w	80112a4 <_dtoa_r+0xb84>
 80107f2:	4888      	ldr	r0, [pc, #544]	; (8010a14 <_dtoa_r+0x2f4>)
 80107f4:	6018      	str	r0, [r3, #0]
 80107f6:	1e43      	subs	r3, r0, #1
 80107f8:	9308      	str	r3, [sp, #32]
 80107fa:	e7df      	b.n	80107bc <_dtoa_r+0x9c>
 80107fc:	ab16      	add	r3, sp, #88	; 0x58
 80107fe:	9301      	str	r3, [sp, #4]
 8010800:	ab17      	add	r3, sp, #92	; 0x5c
 8010802:	9300      	str	r3, [sp, #0]
 8010804:	4628      	mov	r0, r5
 8010806:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801080a:	f001 f8c9 	bl	80119a0 <__d2b>
 801080e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010812:	4682      	mov	sl, r0
 8010814:	2c00      	cmp	r4, #0
 8010816:	d07e      	beq.n	8010916 <_dtoa_r+0x1f6>
 8010818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801081c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801081e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8010822:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010826:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801082a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801082e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8010832:	2200      	movs	r2, #0
 8010834:	4b78      	ldr	r3, [pc, #480]	; (8010a18 <_dtoa_r+0x2f8>)
 8010836:	f7ef fcd3 	bl	80001e0 <__aeabi_dsub>
 801083a:	a36b      	add	r3, pc, #428	; (adr r3, 80109e8 <_dtoa_r+0x2c8>)
 801083c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010840:	f7ef fe86 	bl	8000550 <__aeabi_dmul>
 8010844:	a36a      	add	r3, pc, #424	; (adr r3, 80109f0 <_dtoa_r+0x2d0>)
 8010846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801084a:	f7ef fccb 	bl	80001e4 <__adddf3>
 801084e:	4606      	mov	r6, r0
 8010850:	4620      	mov	r0, r4
 8010852:	460f      	mov	r7, r1
 8010854:	f7ef fe12 	bl	800047c <__aeabi_i2d>
 8010858:	a367      	add	r3, pc, #412	; (adr r3, 80109f8 <_dtoa_r+0x2d8>)
 801085a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085e:	f7ef fe77 	bl	8000550 <__aeabi_dmul>
 8010862:	4602      	mov	r2, r0
 8010864:	460b      	mov	r3, r1
 8010866:	4630      	mov	r0, r6
 8010868:	4639      	mov	r1, r7
 801086a:	f7ef fcbb 	bl	80001e4 <__adddf3>
 801086e:	4606      	mov	r6, r0
 8010870:	460f      	mov	r7, r1
 8010872:	f7f0 f91d 	bl	8000ab0 <__aeabi_d2iz>
 8010876:	2200      	movs	r2, #0
 8010878:	4681      	mov	r9, r0
 801087a:	2300      	movs	r3, #0
 801087c:	4630      	mov	r0, r6
 801087e:	4639      	mov	r1, r7
 8010880:	f7f0 f8d8 	bl	8000a34 <__aeabi_dcmplt>
 8010884:	b148      	cbz	r0, 801089a <_dtoa_r+0x17a>
 8010886:	4648      	mov	r0, r9
 8010888:	f7ef fdf8 	bl	800047c <__aeabi_i2d>
 801088c:	4632      	mov	r2, r6
 801088e:	463b      	mov	r3, r7
 8010890:	f7f0 f8c6 	bl	8000a20 <__aeabi_dcmpeq>
 8010894:	b908      	cbnz	r0, 801089a <_dtoa_r+0x17a>
 8010896:	f109 39ff 	add.w	r9, r9, #4294967295
 801089a:	f1b9 0f16 	cmp.w	r9, #22
 801089e:	d857      	bhi.n	8010950 <_dtoa_r+0x230>
 80108a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80108a4:	4b5d      	ldr	r3, [pc, #372]	; (8010a1c <_dtoa_r+0x2fc>)
 80108a6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80108aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ae:	f7f0 f8c1 	bl	8000a34 <__aeabi_dcmplt>
 80108b2:	2800      	cmp	r0, #0
 80108b4:	d04e      	beq.n	8010954 <_dtoa_r+0x234>
 80108b6:	2300      	movs	r3, #0
 80108b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80108bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80108be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80108c0:	1b1c      	subs	r4, r3, r4
 80108c2:	1e63      	subs	r3, r4, #1
 80108c4:	9309      	str	r3, [sp, #36]	; 0x24
 80108c6:	bf49      	itett	mi
 80108c8:	f1c4 0301 	rsbmi	r3, r4, #1
 80108cc:	2300      	movpl	r3, #0
 80108ce:	9306      	strmi	r3, [sp, #24]
 80108d0:	2300      	movmi	r3, #0
 80108d2:	bf54      	ite	pl
 80108d4:	9306      	strpl	r3, [sp, #24]
 80108d6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80108d8:	f1b9 0f00 	cmp.w	r9, #0
 80108dc:	db3c      	blt.n	8010958 <_dtoa_r+0x238>
 80108de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108e0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80108e4:	444b      	add	r3, r9
 80108e6:	9309      	str	r3, [sp, #36]	; 0x24
 80108e8:	2300      	movs	r3, #0
 80108ea:	930a      	str	r3, [sp, #40]	; 0x28
 80108ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80108ee:	2b09      	cmp	r3, #9
 80108f0:	d86c      	bhi.n	80109cc <_dtoa_r+0x2ac>
 80108f2:	2b05      	cmp	r3, #5
 80108f4:	bfc4      	itt	gt
 80108f6:	3b04      	subgt	r3, #4
 80108f8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80108fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80108fc:	bfc8      	it	gt
 80108fe:	2400      	movgt	r4, #0
 8010900:	f1a3 0302 	sub.w	r3, r3, #2
 8010904:	bfd8      	it	le
 8010906:	2401      	movle	r4, #1
 8010908:	2b03      	cmp	r3, #3
 801090a:	f200 808b 	bhi.w	8010a24 <_dtoa_r+0x304>
 801090e:	e8df f003 	tbb	[pc, r3]
 8010912:	4f2d      	.short	0x4f2d
 8010914:	5b4d      	.short	0x5b4d
 8010916:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 801091a:	441c      	add	r4, r3
 801091c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8010920:	2b20      	cmp	r3, #32
 8010922:	bfc3      	ittte	gt
 8010924:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010928:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 801092c:	fa09 f303 	lslgt.w	r3, r9, r3
 8010930:	f1c3 0320 	rsble	r3, r3, #32
 8010934:	bfc6      	itte	gt
 8010936:	fa26 f000 	lsrgt.w	r0, r6, r0
 801093a:	4318      	orrgt	r0, r3
 801093c:	fa06 f003 	lslle.w	r0, r6, r3
 8010940:	f7ef fd8c 	bl	800045c <__aeabi_ui2d>
 8010944:	2301      	movs	r3, #1
 8010946:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801094a:	3c01      	subs	r4, #1
 801094c:	9313      	str	r3, [sp, #76]	; 0x4c
 801094e:	e770      	b.n	8010832 <_dtoa_r+0x112>
 8010950:	2301      	movs	r3, #1
 8010952:	e7b3      	b.n	80108bc <_dtoa_r+0x19c>
 8010954:	900f      	str	r0, [sp, #60]	; 0x3c
 8010956:	e7b2      	b.n	80108be <_dtoa_r+0x19e>
 8010958:	9b06      	ldr	r3, [sp, #24]
 801095a:	eba3 0309 	sub.w	r3, r3, r9
 801095e:	9306      	str	r3, [sp, #24]
 8010960:	f1c9 0300 	rsb	r3, r9, #0
 8010964:	930a      	str	r3, [sp, #40]	; 0x28
 8010966:	2300      	movs	r3, #0
 8010968:	930e      	str	r3, [sp, #56]	; 0x38
 801096a:	e7bf      	b.n	80108ec <_dtoa_r+0x1cc>
 801096c:	2300      	movs	r3, #0
 801096e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010970:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010972:	2b00      	cmp	r3, #0
 8010974:	dc59      	bgt.n	8010a2a <_dtoa_r+0x30a>
 8010976:	f04f 0b01 	mov.w	fp, #1
 801097a:	465b      	mov	r3, fp
 801097c:	f8cd b008 	str.w	fp, [sp, #8]
 8010980:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8010984:	2200      	movs	r2, #0
 8010986:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8010988:	6042      	str	r2, [r0, #4]
 801098a:	2204      	movs	r2, #4
 801098c:	f102 0614 	add.w	r6, r2, #20
 8010990:	429e      	cmp	r6, r3
 8010992:	6841      	ldr	r1, [r0, #4]
 8010994:	d94f      	bls.n	8010a36 <_dtoa_r+0x316>
 8010996:	4628      	mov	r0, r5
 8010998:	f000 fcdc 	bl	8011354 <_Balloc>
 801099c:	9008      	str	r0, [sp, #32]
 801099e:	2800      	cmp	r0, #0
 80109a0:	d14d      	bne.n	8010a3e <_dtoa_r+0x31e>
 80109a2:	4602      	mov	r2, r0
 80109a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80109a8:	4b1d      	ldr	r3, [pc, #116]	; (8010a20 <_dtoa_r+0x300>)
 80109aa:	e6cd      	b.n	8010748 <_dtoa_r+0x28>
 80109ac:	2301      	movs	r3, #1
 80109ae:	e7de      	b.n	801096e <_dtoa_r+0x24e>
 80109b0:	2300      	movs	r3, #0
 80109b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80109b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80109b6:	eb09 0b03 	add.w	fp, r9, r3
 80109ba:	f10b 0301 	add.w	r3, fp, #1
 80109be:	2b01      	cmp	r3, #1
 80109c0:	9302      	str	r3, [sp, #8]
 80109c2:	bfb8      	it	lt
 80109c4:	2301      	movlt	r3, #1
 80109c6:	e7dd      	b.n	8010984 <_dtoa_r+0x264>
 80109c8:	2301      	movs	r3, #1
 80109ca:	e7f2      	b.n	80109b2 <_dtoa_r+0x292>
 80109cc:	2401      	movs	r4, #1
 80109ce:	2300      	movs	r3, #0
 80109d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80109d2:	9322      	str	r3, [sp, #136]	; 0x88
 80109d4:	f04f 3bff 	mov.w	fp, #4294967295
 80109d8:	2200      	movs	r2, #0
 80109da:	2312      	movs	r3, #18
 80109dc:	f8cd b008 	str.w	fp, [sp, #8]
 80109e0:	9223      	str	r2, [sp, #140]	; 0x8c
 80109e2:	e7cf      	b.n	8010984 <_dtoa_r+0x264>
 80109e4:	f3af 8000 	nop.w
 80109e8:	636f4361 	.word	0x636f4361
 80109ec:	3fd287a7 	.word	0x3fd287a7
 80109f0:	8b60c8b3 	.word	0x8b60c8b3
 80109f4:	3fc68a28 	.word	0x3fc68a28
 80109f8:	509f79fb 	.word	0x509f79fb
 80109fc:	3fd34413 	.word	0x3fd34413
 8010a00:	08013825 	.word	0x08013825
 8010a04:	0801383c 	.word	0x0801383c
 8010a08:	7ff00000 	.word	0x7ff00000
 8010a0c:	08013821 	.word	0x08013821
 8010a10:	08013818 	.word	0x08013818
 8010a14:	080137f5 	.word	0x080137f5
 8010a18:	3ff80000 	.word	0x3ff80000
 8010a1c:	08013938 	.word	0x08013938
 8010a20:	0801389b 	.word	0x0801389b
 8010a24:	2301      	movs	r3, #1
 8010a26:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a28:	e7d4      	b.n	80109d4 <_dtoa_r+0x2b4>
 8010a2a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8010a2e:	465b      	mov	r3, fp
 8010a30:	f8cd b008 	str.w	fp, [sp, #8]
 8010a34:	e7a6      	b.n	8010984 <_dtoa_r+0x264>
 8010a36:	3101      	adds	r1, #1
 8010a38:	6041      	str	r1, [r0, #4]
 8010a3a:	0052      	lsls	r2, r2, #1
 8010a3c:	e7a6      	b.n	801098c <_dtoa_r+0x26c>
 8010a3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010a40:	9a08      	ldr	r2, [sp, #32]
 8010a42:	601a      	str	r2, [r3, #0]
 8010a44:	9b02      	ldr	r3, [sp, #8]
 8010a46:	2b0e      	cmp	r3, #14
 8010a48:	f200 80a8 	bhi.w	8010b9c <_dtoa_r+0x47c>
 8010a4c:	2c00      	cmp	r4, #0
 8010a4e:	f000 80a5 	beq.w	8010b9c <_dtoa_r+0x47c>
 8010a52:	f1b9 0f00 	cmp.w	r9, #0
 8010a56:	dd34      	ble.n	8010ac2 <_dtoa_r+0x3a2>
 8010a58:	4a9a      	ldr	r2, [pc, #616]	; (8010cc4 <_dtoa_r+0x5a4>)
 8010a5a:	f009 030f 	and.w	r3, r9, #15
 8010a5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010a62:	f419 7f80 	tst.w	r9, #256	; 0x100
 8010a66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010a6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8010a6e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8010a72:	d016      	beq.n	8010aa2 <_dtoa_r+0x382>
 8010a74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010a78:	4b93      	ldr	r3, [pc, #588]	; (8010cc8 <_dtoa_r+0x5a8>)
 8010a7a:	2703      	movs	r7, #3
 8010a7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a80:	f7ef fe90 	bl	80007a4 <__aeabi_ddiv>
 8010a84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010a88:	f004 040f 	and.w	r4, r4, #15
 8010a8c:	4e8e      	ldr	r6, [pc, #568]	; (8010cc8 <_dtoa_r+0x5a8>)
 8010a8e:	b954      	cbnz	r4, 8010aa6 <_dtoa_r+0x386>
 8010a90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010a94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a98:	f7ef fe84 	bl	80007a4 <__aeabi_ddiv>
 8010a9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010aa0:	e029      	b.n	8010af6 <_dtoa_r+0x3d6>
 8010aa2:	2702      	movs	r7, #2
 8010aa4:	e7f2      	b.n	8010a8c <_dtoa_r+0x36c>
 8010aa6:	07e1      	lsls	r1, r4, #31
 8010aa8:	d508      	bpl.n	8010abc <_dtoa_r+0x39c>
 8010aaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010aae:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010ab2:	f7ef fd4d 	bl	8000550 <__aeabi_dmul>
 8010ab6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010aba:	3701      	adds	r7, #1
 8010abc:	1064      	asrs	r4, r4, #1
 8010abe:	3608      	adds	r6, #8
 8010ac0:	e7e5      	b.n	8010a8e <_dtoa_r+0x36e>
 8010ac2:	f000 80a5 	beq.w	8010c10 <_dtoa_r+0x4f0>
 8010ac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010aca:	f1c9 0400 	rsb	r4, r9, #0
 8010ace:	4b7d      	ldr	r3, [pc, #500]	; (8010cc4 <_dtoa_r+0x5a4>)
 8010ad0:	f004 020f 	and.w	r2, r4, #15
 8010ad4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010adc:	f7ef fd38 	bl	8000550 <__aeabi_dmul>
 8010ae0:	2702      	movs	r7, #2
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ae8:	4e77      	ldr	r6, [pc, #476]	; (8010cc8 <_dtoa_r+0x5a8>)
 8010aea:	1124      	asrs	r4, r4, #4
 8010aec:	2c00      	cmp	r4, #0
 8010aee:	f040 8084 	bne.w	8010bfa <_dtoa_r+0x4da>
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d1d2      	bne.n	8010a9c <_dtoa_r+0x37c>
 8010af6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	f000 808b 	beq.w	8010c14 <_dtoa_r+0x4f4>
 8010afe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010b02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8010b06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	4b6f      	ldr	r3, [pc, #444]	; (8010ccc <_dtoa_r+0x5ac>)
 8010b0e:	f7ef ff91 	bl	8000a34 <__aeabi_dcmplt>
 8010b12:	2800      	cmp	r0, #0
 8010b14:	d07e      	beq.n	8010c14 <_dtoa_r+0x4f4>
 8010b16:	9b02      	ldr	r3, [sp, #8]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d07b      	beq.n	8010c14 <_dtoa_r+0x4f4>
 8010b1c:	f1bb 0f00 	cmp.w	fp, #0
 8010b20:	dd38      	ble.n	8010b94 <_dtoa_r+0x474>
 8010b22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010b26:	2200      	movs	r2, #0
 8010b28:	4b69      	ldr	r3, [pc, #420]	; (8010cd0 <_dtoa_r+0x5b0>)
 8010b2a:	f7ef fd11 	bl	8000550 <__aeabi_dmul>
 8010b2e:	465c      	mov	r4, fp
 8010b30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b34:	f109 38ff 	add.w	r8, r9, #4294967295
 8010b38:	3701      	adds	r7, #1
 8010b3a:	4638      	mov	r0, r7
 8010b3c:	f7ef fc9e 	bl	800047c <__aeabi_i2d>
 8010b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b44:	f7ef fd04 	bl	8000550 <__aeabi_dmul>
 8010b48:	2200      	movs	r2, #0
 8010b4a:	4b62      	ldr	r3, [pc, #392]	; (8010cd4 <_dtoa_r+0x5b4>)
 8010b4c:	f7ef fb4a 	bl	80001e4 <__adddf3>
 8010b50:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010b54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010b58:	9611      	str	r6, [sp, #68]	; 0x44
 8010b5a:	2c00      	cmp	r4, #0
 8010b5c:	d15d      	bne.n	8010c1a <_dtoa_r+0x4fa>
 8010b5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b62:	2200      	movs	r2, #0
 8010b64:	4b5c      	ldr	r3, [pc, #368]	; (8010cd8 <_dtoa_r+0x5b8>)
 8010b66:	f7ef fb3b 	bl	80001e0 <__aeabi_dsub>
 8010b6a:	4602      	mov	r2, r0
 8010b6c:	460b      	mov	r3, r1
 8010b6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010b72:	4633      	mov	r3, r6
 8010b74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010b76:	f7ef ff7b 	bl	8000a70 <__aeabi_dcmpgt>
 8010b7a:	2800      	cmp	r0, #0
 8010b7c:	f040 829e 	bne.w	80110bc <_dtoa_r+0x99c>
 8010b80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010b86:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010b8a:	f7ef ff53 	bl	8000a34 <__aeabi_dcmplt>
 8010b8e:	2800      	cmp	r0, #0
 8010b90:	f040 8292 	bne.w	80110b8 <_dtoa_r+0x998>
 8010b94:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8010b98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010b9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	f2c0 8153 	blt.w	8010e4a <_dtoa_r+0x72a>
 8010ba4:	f1b9 0f0e 	cmp.w	r9, #14
 8010ba8:	f300 814f 	bgt.w	8010e4a <_dtoa_r+0x72a>
 8010bac:	4b45      	ldr	r3, [pc, #276]	; (8010cc4 <_dtoa_r+0x5a4>)
 8010bae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010bb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010bb6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8010bba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	f280 80db 	bge.w	8010d78 <_dtoa_r+0x658>
 8010bc2:	9b02      	ldr	r3, [sp, #8]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	f300 80d7 	bgt.w	8010d78 <_dtoa_r+0x658>
 8010bca:	f040 8274 	bne.w	80110b6 <_dtoa_r+0x996>
 8010bce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	4b40      	ldr	r3, [pc, #256]	; (8010cd8 <_dtoa_r+0x5b8>)
 8010bd6:	f7ef fcbb 	bl	8000550 <__aeabi_dmul>
 8010bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010bde:	f7ef ff3d 	bl	8000a5c <__aeabi_dcmpge>
 8010be2:	9c02      	ldr	r4, [sp, #8]
 8010be4:	4626      	mov	r6, r4
 8010be6:	2800      	cmp	r0, #0
 8010be8:	f040 824a 	bne.w	8011080 <_dtoa_r+0x960>
 8010bec:	2331      	movs	r3, #49	; 0x31
 8010bee:	9f08      	ldr	r7, [sp, #32]
 8010bf0:	f109 0901 	add.w	r9, r9, #1
 8010bf4:	f807 3b01 	strb.w	r3, [r7], #1
 8010bf8:	e246      	b.n	8011088 <_dtoa_r+0x968>
 8010bfa:	07e2      	lsls	r2, r4, #31
 8010bfc:	d505      	bpl.n	8010c0a <_dtoa_r+0x4ea>
 8010bfe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010c02:	f7ef fca5 	bl	8000550 <__aeabi_dmul>
 8010c06:	2301      	movs	r3, #1
 8010c08:	3701      	adds	r7, #1
 8010c0a:	1064      	asrs	r4, r4, #1
 8010c0c:	3608      	adds	r6, #8
 8010c0e:	e76d      	b.n	8010aec <_dtoa_r+0x3cc>
 8010c10:	2702      	movs	r7, #2
 8010c12:	e770      	b.n	8010af6 <_dtoa_r+0x3d6>
 8010c14:	46c8      	mov	r8, r9
 8010c16:	9c02      	ldr	r4, [sp, #8]
 8010c18:	e78f      	b.n	8010b3a <_dtoa_r+0x41a>
 8010c1a:	9908      	ldr	r1, [sp, #32]
 8010c1c:	4b29      	ldr	r3, [pc, #164]	; (8010cc4 <_dtoa_r+0x5a4>)
 8010c1e:	4421      	add	r1, r4
 8010c20:	9112      	str	r1, [sp, #72]	; 0x48
 8010c22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010c24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010c28:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8010c2c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010c30:	2900      	cmp	r1, #0
 8010c32:	d055      	beq.n	8010ce0 <_dtoa_r+0x5c0>
 8010c34:	2000      	movs	r0, #0
 8010c36:	4929      	ldr	r1, [pc, #164]	; (8010cdc <_dtoa_r+0x5bc>)
 8010c38:	f7ef fdb4 	bl	80007a4 <__aeabi_ddiv>
 8010c3c:	463b      	mov	r3, r7
 8010c3e:	4632      	mov	r2, r6
 8010c40:	f7ef face 	bl	80001e0 <__aeabi_dsub>
 8010c44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010c48:	9f08      	ldr	r7, [sp, #32]
 8010c4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c4e:	f7ef ff2f 	bl	8000ab0 <__aeabi_d2iz>
 8010c52:	4604      	mov	r4, r0
 8010c54:	f7ef fc12 	bl	800047c <__aeabi_i2d>
 8010c58:	4602      	mov	r2, r0
 8010c5a:	460b      	mov	r3, r1
 8010c5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c60:	f7ef fabe 	bl	80001e0 <__aeabi_dsub>
 8010c64:	4602      	mov	r2, r0
 8010c66:	460b      	mov	r3, r1
 8010c68:	3430      	adds	r4, #48	; 0x30
 8010c6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010c6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010c72:	f807 4b01 	strb.w	r4, [r7], #1
 8010c76:	f7ef fedd 	bl	8000a34 <__aeabi_dcmplt>
 8010c7a:	2800      	cmp	r0, #0
 8010c7c:	d174      	bne.n	8010d68 <_dtoa_r+0x648>
 8010c7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c82:	2000      	movs	r0, #0
 8010c84:	4911      	ldr	r1, [pc, #68]	; (8010ccc <_dtoa_r+0x5ac>)
 8010c86:	f7ef faab 	bl	80001e0 <__aeabi_dsub>
 8010c8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010c8e:	f7ef fed1 	bl	8000a34 <__aeabi_dcmplt>
 8010c92:	2800      	cmp	r0, #0
 8010c94:	f040 80b6 	bne.w	8010e04 <_dtoa_r+0x6e4>
 8010c98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010c9a:	429f      	cmp	r7, r3
 8010c9c:	f43f af7a 	beq.w	8010b94 <_dtoa_r+0x474>
 8010ca0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	4b0a      	ldr	r3, [pc, #40]	; (8010cd0 <_dtoa_r+0x5b0>)
 8010ca8:	f7ef fc52 	bl	8000550 <__aeabi_dmul>
 8010cac:	2200      	movs	r2, #0
 8010cae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010cb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010cb6:	4b06      	ldr	r3, [pc, #24]	; (8010cd0 <_dtoa_r+0x5b0>)
 8010cb8:	f7ef fc4a 	bl	8000550 <__aeabi_dmul>
 8010cbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010cc0:	e7c3      	b.n	8010c4a <_dtoa_r+0x52a>
 8010cc2:	bf00      	nop
 8010cc4:	08013938 	.word	0x08013938
 8010cc8:	08013910 	.word	0x08013910
 8010ccc:	3ff00000 	.word	0x3ff00000
 8010cd0:	40240000 	.word	0x40240000
 8010cd4:	401c0000 	.word	0x401c0000
 8010cd8:	40140000 	.word	0x40140000
 8010cdc:	3fe00000 	.word	0x3fe00000
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	4639      	mov	r1, r7
 8010ce4:	f7ef fc34 	bl	8000550 <__aeabi_dmul>
 8010ce8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010cea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010cee:	9c08      	ldr	r4, [sp, #32]
 8010cf0:	9314      	str	r3, [sp, #80]	; 0x50
 8010cf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010cf6:	f7ef fedb 	bl	8000ab0 <__aeabi_d2iz>
 8010cfa:	9015      	str	r0, [sp, #84]	; 0x54
 8010cfc:	f7ef fbbe 	bl	800047c <__aeabi_i2d>
 8010d00:	4602      	mov	r2, r0
 8010d02:	460b      	mov	r3, r1
 8010d04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d08:	f7ef fa6a 	bl	80001e0 <__aeabi_dsub>
 8010d0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d0e:	4606      	mov	r6, r0
 8010d10:	3330      	adds	r3, #48	; 0x30
 8010d12:	f804 3b01 	strb.w	r3, [r4], #1
 8010d16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010d18:	460f      	mov	r7, r1
 8010d1a:	429c      	cmp	r4, r3
 8010d1c:	f04f 0200 	mov.w	r2, #0
 8010d20:	d124      	bne.n	8010d6c <_dtoa_r+0x64c>
 8010d22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010d26:	4bb3      	ldr	r3, [pc, #716]	; (8010ff4 <_dtoa_r+0x8d4>)
 8010d28:	f7ef fa5c 	bl	80001e4 <__adddf3>
 8010d2c:	4602      	mov	r2, r0
 8010d2e:	460b      	mov	r3, r1
 8010d30:	4630      	mov	r0, r6
 8010d32:	4639      	mov	r1, r7
 8010d34:	f7ef fe9c 	bl	8000a70 <__aeabi_dcmpgt>
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	d162      	bne.n	8010e02 <_dtoa_r+0x6e2>
 8010d3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010d40:	2000      	movs	r0, #0
 8010d42:	49ac      	ldr	r1, [pc, #688]	; (8010ff4 <_dtoa_r+0x8d4>)
 8010d44:	f7ef fa4c 	bl	80001e0 <__aeabi_dsub>
 8010d48:	4602      	mov	r2, r0
 8010d4a:	460b      	mov	r3, r1
 8010d4c:	4630      	mov	r0, r6
 8010d4e:	4639      	mov	r1, r7
 8010d50:	f7ef fe70 	bl	8000a34 <__aeabi_dcmplt>
 8010d54:	2800      	cmp	r0, #0
 8010d56:	f43f af1d 	beq.w	8010b94 <_dtoa_r+0x474>
 8010d5a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010d5c:	1e7b      	subs	r3, r7, #1
 8010d5e:	9314      	str	r3, [sp, #80]	; 0x50
 8010d60:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8010d64:	2b30      	cmp	r3, #48	; 0x30
 8010d66:	d0f8      	beq.n	8010d5a <_dtoa_r+0x63a>
 8010d68:	46c1      	mov	r9, r8
 8010d6a:	e03a      	b.n	8010de2 <_dtoa_r+0x6c2>
 8010d6c:	4ba2      	ldr	r3, [pc, #648]	; (8010ff8 <_dtoa_r+0x8d8>)
 8010d6e:	f7ef fbef 	bl	8000550 <__aeabi_dmul>
 8010d72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d76:	e7bc      	b.n	8010cf2 <_dtoa_r+0x5d2>
 8010d78:	9f08      	ldr	r7, [sp, #32]
 8010d7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d82:	f7ef fd0f 	bl	80007a4 <__aeabi_ddiv>
 8010d86:	f7ef fe93 	bl	8000ab0 <__aeabi_d2iz>
 8010d8a:	4604      	mov	r4, r0
 8010d8c:	f7ef fb76 	bl	800047c <__aeabi_i2d>
 8010d90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d94:	f7ef fbdc 	bl	8000550 <__aeabi_dmul>
 8010d98:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8010d9c:	460b      	mov	r3, r1
 8010d9e:	4602      	mov	r2, r0
 8010da0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010da4:	f7ef fa1c 	bl	80001e0 <__aeabi_dsub>
 8010da8:	f807 6b01 	strb.w	r6, [r7], #1
 8010dac:	9e08      	ldr	r6, [sp, #32]
 8010dae:	9b02      	ldr	r3, [sp, #8]
 8010db0:	1bbe      	subs	r6, r7, r6
 8010db2:	42b3      	cmp	r3, r6
 8010db4:	d13a      	bne.n	8010e2c <_dtoa_r+0x70c>
 8010db6:	4602      	mov	r2, r0
 8010db8:	460b      	mov	r3, r1
 8010dba:	f7ef fa13 	bl	80001e4 <__adddf3>
 8010dbe:	4602      	mov	r2, r0
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010dc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010dca:	f7ef fe51 	bl	8000a70 <__aeabi_dcmpgt>
 8010dce:	bb58      	cbnz	r0, 8010e28 <_dtoa_r+0x708>
 8010dd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010dd8:	f7ef fe22 	bl	8000a20 <__aeabi_dcmpeq>
 8010ddc:	b108      	cbz	r0, 8010de2 <_dtoa_r+0x6c2>
 8010dde:	07e1      	lsls	r1, r4, #31
 8010de0:	d422      	bmi.n	8010e28 <_dtoa_r+0x708>
 8010de2:	4628      	mov	r0, r5
 8010de4:	4651      	mov	r1, sl
 8010de6:	f000 faf5 	bl	80113d4 <_Bfree>
 8010dea:	2300      	movs	r3, #0
 8010dec:	703b      	strb	r3, [r7, #0]
 8010dee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010df0:	f109 0001 	add.w	r0, r9, #1
 8010df4:	6018      	str	r0, [r3, #0]
 8010df6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	f43f acdf 	beq.w	80107bc <_dtoa_r+0x9c>
 8010dfe:	601f      	str	r7, [r3, #0]
 8010e00:	e4dc      	b.n	80107bc <_dtoa_r+0x9c>
 8010e02:	4627      	mov	r7, r4
 8010e04:	463b      	mov	r3, r7
 8010e06:	461f      	mov	r7, r3
 8010e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010e0c:	2a39      	cmp	r2, #57	; 0x39
 8010e0e:	d107      	bne.n	8010e20 <_dtoa_r+0x700>
 8010e10:	9a08      	ldr	r2, [sp, #32]
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d1f7      	bne.n	8010e06 <_dtoa_r+0x6e6>
 8010e16:	2230      	movs	r2, #48	; 0x30
 8010e18:	9908      	ldr	r1, [sp, #32]
 8010e1a:	f108 0801 	add.w	r8, r8, #1
 8010e1e:	700a      	strb	r2, [r1, #0]
 8010e20:	781a      	ldrb	r2, [r3, #0]
 8010e22:	3201      	adds	r2, #1
 8010e24:	701a      	strb	r2, [r3, #0]
 8010e26:	e79f      	b.n	8010d68 <_dtoa_r+0x648>
 8010e28:	46c8      	mov	r8, r9
 8010e2a:	e7eb      	b.n	8010e04 <_dtoa_r+0x6e4>
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	4b72      	ldr	r3, [pc, #456]	; (8010ff8 <_dtoa_r+0x8d8>)
 8010e30:	f7ef fb8e 	bl	8000550 <__aeabi_dmul>
 8010e34:	4602      	mov	r2, r0
 8010e36:	460b      	mov	r3, r1
 8010e38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	2300      	movs	r3, #0
 8010e40:	f7ef fdee 	bl	8000a20 <__aeabi_dcmpeq>
 8010e44:	2800      	cmp	r0, #0
 8010e46:	d098      	beq.n	8010d7a <_dtoa_r+0x65a>
 8010e48:	e7cb      	b.n	8010de2 <_dtoa_r+0x6c2>
 8010e4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010e4c:	2a00      	cmp	r2, #0
 8010e4e:	f000 80cd 	beq.w	8010fec <_dtoa_r+0x8cc>
 8010e52:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010e54:	2a01      	cmp	r2, #1
 8010e56:	f300 80af 	bgt.w	8010fb8 <_dtoa_r+0x898>
 8010e5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010e5c:	2a00      	cmp	r2, #0
 8010e5e:	f000 80a7 	beq.w	8010fb0 <_dtoa_r+0x890>
 8010e62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010e66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010e68:	9f06      	ldr	r7, [sp, #24]
 8010e6a:	9a06      	ldr	r2, [sp, #24]
 8010e6c:	2101      	movs	r1, #1
 8010e6e:	441a      	add	r2, r3
 8010e70:	9206      	str	r2, [sp, #24]
 8010e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e74:	4628      	mov	r0, r5
 8010e76:	441a      	add	r2, r3
 8010e78:	9209      	str	r2, [sp, #36]	; 0x24
 8010e7a:	f000 fb65 	bl	8011548 <__i2b>
 8010e7e:	4606      	mov	r6, r0
 8010e80:	2f00      	cmp	r7, #0
 8010e82:	dd0c      	ble.n	8010e9e <_dtoa_r+0x77e>
 8010e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	dd09      	ble.n	8010e9e <_dtoa_r+0x77e>
 8010e8a:	42bb      	cmp	r3, r7
 8010e8c:	bfa8      	it	ge
 8010e8e:	463b      	movge	r3, r7
 8010e90:	9a06      	ldr	r2, [sp, #24]
 8010e92:	1aff      	subs	r7, r7, r3
 8010e94:	1ad2      	subs	r2, r2, r3
 8010e96:	9206      	str	r2, [sp, #24]
 8010e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e9a:	1ad3      	subs	r3, r2, r3
 8010e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8010e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ea0:	b1f3      	cbz	r3, 8010ee0 <_dtoa_r+0x7c0>
 8010ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	f000 80a9 	beq.w	8010ffc <_dtoa_r+0x8dc>
 8010eaa:	2c00      	cmp	r4, #0
 8010eac:	dd10      	ble.n	8010ed0 <_dtoa_r+0x7b0>
 8010eae:	4631      	mov	r1, r6
 8010eb0:	4622      	mov	r2, r4
 8010eb2:	4628      	mov	r0, r5
 8010eb4:	f000 fc02 	bl	80116bc <__pow5mult>
 8010eb8:	4652      	mov	r2, sl
 8010eba:	4601      	mov	r1, r0
 8010ebc:	4606      	mov	r6, r0
 8010ebe:	4628      	mov	r0, r5
 8010ec0:	f000 fb58 	bl	8011574 <__multiply>
 8010ec4:	4680      	mov	r8, r0
 8010ec6:	4651      	mov	r1, sl
 8010ec8:	4628      	mov	r0, r5
 8010eca:	f000 fa83 	bl	80113d4 <_Bfree>
 8010ece:	46c2      	mov	sl, r8
 8010ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ed2:	1b1a      	subs	r2, r3, r4
 8010ed4:	d004      	beq.n	8010ee0 <_dtoa_r+0x7c0>
 8010ed6:	4651      	mov	r1, sl
 8010ed8:	4628      	mov	r0, r5
 8010eda:	f000 fbef 	bl	80116bc <__pow5mult>
 8010ede:	4682      	mov	sl, r0
 8010ee0:	2101      	movs	r1, #1
 8010ee2:	4628      	mov	r0, r5
 8010ee4:	f000 fb30 	bl	8011548 <__i2b>
 8010ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010eea:	4604      	mov	r4, r0
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	f340 8087 	ble.w	8011000 <_dtoa_r+0x8e0>
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	4601      	mov	r1, r0
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	f000 fbe0 	bl	80116bc <__pow5mult>
 8010efc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010efe:	4604      	mov	r4, r0
 8010f00:	2b01      	cmp	r3, #1
 8010f02:	f340 8080 	ble.w	8011006 <_dtoa_r+0x8e6>
 8010f06:	f04f 0800 	mov.w	r8, #0
 8010f0a:	6923      	ldr	r3, [r4, #16]
 8010f0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010f10:	6918      	ldr	r0, [r3, #16]
 8010f12:	f000 facb 	bl	80114ac <__hi0bits>
 8010f16:	f1c0 0020 	rsb	r0, r0, #32
 8010f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f1c:	4418      	add	r0, r3
 8010f1e:	f010 001f 	ands.w	r0, r0, #31
 8010f22:	f000 8092 	beq.w	801104a <_dtoa_r+0x92a>
 8010f26:	f1c0 0320 	rsb	r3, r0, #32
 8010f2a:	2b04      	cmp	r3, #4
 8010f2c:	f340 808a 	ble.w	8011044 <_dtoa_r+0x924>
 8010f30:	f1c0 001c 	rsb	r0, r0, #28
 8010f34:	9b06      	ldr	r3, [sp, #24]
 8010f36:	4407      	add	r7, r0
 8010f38:	4403      	add	r3, r0
 8010f3a:	9306      	str	r3, [sp, #24]
 8010f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f3e:	4403      	add	r3, r0
 8010f40:	9309      	str	r3, [sp, #36]	; 0x24
 8010f42:	9b06      	ldr	r3, [sp, #24]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	dd05      	ble.n	8010f54 <_dtoa_r+0x834>
 8010f48:	4651      	mov	r1, sl
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	f000 fc0f 	bl	8011770 <__lshift>
 8010f52:	4682      	mov	sl, r0
 8010f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	dd05      	ble.n	8010f66 <_dtoa_r+0x846>
 8010f5a:	4621      	mov	r1, r4
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	4628      	mov	r0, r5
 8010f60:	f000 fc06 	bl	8011770 <__lshift>
 8010f64:	4604      	mov	r4, r0
 8010f66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d070      	beq.n	801104e <_dtoa_r+0x92e>
 8010f6c:	4621      	mov	r1, r4
 8010f6e:	4650      	mov	r0, sl
 8010f70:	f000 fc6a 	bl	8011848 <__mcmp>
 8010f74:	2800      	cmp	r0, #0
 8010f76:	da6a      	bge.n	801104e <_dtoa_r+0x92e>
 8010f78:	2300      	movs	r3, #0
 8010f7a:	4651      	mov	r1, sl
 8010f7c:	220a      	movs	r2, #10
 8010f7e:	4628      	mov	r0, r5
 8010f80:	f000 fa4a 	bl	8011418 <__multadd>
 8010f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f86:	4682      	mov	sl, r0
 8010f88:	f109 39ff 	add.w	r9, r9, #4294967295
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	f000 8193 	beq.w	80112b8 <_dtoa_r+0xb98>
 8010f92:	4631      	mov	r1, r6
 8010f94:	2300      	movs	r3, #0
 8010f96:	220a      	movs	r2, #10
 8010f98:	4628      	mov	r0, r5
 8010f9a:	f000 fa3d 	bl	8011418 <__multadd>
 8010f9e:	f1bb 0f00 	cmp.w	fp, #0
 8010fa2:	4606      	mov	r6, r0
 8010fa4:	f300 8093 	bgt.w	80110ce <_dtoa_r+0x9ae>
 8010fa8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010faa:	2b02      	cmp	r3, #2
 8010fac:	dc57      	bgt.n	801105e <_dtoa_r+0x93e>
 8010fae:	e08e      	b.n	80110ce <_dtoa_r+0x9ae>
 8010fb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010fb2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010fb6:	e756      	b.n	8010e66 <_dtoa_r+0x746>
 8010fb8:	9b02      	ldr	r3, [sp, #8]
 8010fba:	1e5c      	subs	r4, r3, #1
 8010fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fbe:	42a3      	cmp	r3, r4
 8010fc0:	bfb7      	itett	lt
 8010fc2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010fc4:	1b1c      	subge	r4, r3, r4
 8010fc6:	1ae2      	sublt	r2, r4, r3
 8010fc8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010fca:	bfbe      	ittt	lt
 8010fcc:	940a      	strlt	r4, [sp, #40]	; 0x28
 8010fce:	189b      	addlt	r3, r3, r2
 8010fd0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010fd2:	9b02      	ldr	r3, [sp, #8]
 8010fd4:	bfb8      	it	lt
 8010fd6:	2400      	movlt	r4, #0
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	bfbb      	ittet	lt
 8010fdc:	9b06      	ldrlt	r3, [sp, #24]
 8010fde:	9a02      	ldrlt	r2, [sp, #8]
 8010fe0:	9f06      	ldrge	r7, [sp, #24]
 8010fe2:	1a9f      	sublt	r7, r3, r2
 8010fe4:	bfac      	ite	ge
 8010fe6:	9b02      	ldrge	r3, [sp, #8]
 8010fe8:	2300      	movlt	r3, #0
 8010fea:	e73e      	b.n	8010e6a <_dtoa_r+0x74a>
 8010fec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010fee:	9f06      	ldr	r7, [sp, #24]
 8010ff0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8010ff2:	e745      	b.n	8010e80 <_dtoa_r+0x760>
 8010ff4:	3fe00000 	.word	0x3fe00000
 8010ff8:	40240000 	.word	0x40240000
 8010ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ffe:	e76a      	b.n	8010ed6 <_dtoa_r+0x7b6>
 8011000:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011002:	2b01      	cmp	r3, #1
 8011004:	dc19      	bgt.n	801103a <_dtoa_r+0x91a>
 8011006:	9b04      	ldr	r3, [sp, #16]
 8011008:	b9bb      	cbnz	r3, 801103a <_dtoa_r+0x91a>
 801100a:	9b05      	ldr	r3, [sp, #20]
 801100c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011010:	b99b      	cbnz	r3, 801103a <_dtoa_r+0x91a>
 8011012:	9b05      	ldr	r3, [sp, #20]
 8011014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011018:	0d1b      	lsrs	r3, r3, #20
 801101a:	051b      	lsls	r3, r3, #20
 801101c:	b183      	cbz	r3, 8011040 <_dtoa_r+0x920>
 801101e:	f04f 0801 	mov.w	r8, #1
 8011022:	9b06      	ldr	r3, [sp, #24]
 8011024:	3301      	adds	r3, #1
 8011026:	9306      	str	r3, [sp, #24]
 8011028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801102a:	3301      	adds	r3, #1
 801102c:	9309      	str	r3, [sp, #36]	; 0x24
 801102e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011030:	2b00      	cmp	r3, #0
 8011032:	f47f af6a 	bne.w	8010f0a <_dtoa_r+0x7ea>
 8011036:	2001      	movs	r0, #1
 8011038:	e76f      	b.n	8010f1a <_dtoa_r+0x7fa>
 801103a:	f04f 0800 	mov.w	r8, #0
 801103e:	e7f6      	b.n	801102e <_dtoa_r+0x90e>
 8011040:	4698      	mov	r8, r3
 8011042:	e7f4      	b.n	801102e <_dtoa_r+0x90e>
 8011044:	f43f af7d 	beq.w	8010f42 <_dtoa_r+0x822>
 8011048:	4618      	mov	r0, r3
 801104a:	301c      	adds	r0, #28
 801104c:	e772      	b.n	8010f34 <_dtoa_r+0x814>
 801104e:	9b02      	ldr	r3, [sp, #8]
 8011050:	2b00      	cmp	r3, #0
 8011052:	dc36      	bgt.n	80110c2 <_dtoa_r+0x9a2>
 8011054:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011056:	2b02      	cmp	r3, #2
 8011058:	dd33      	ble.n	80110c2 <_dtoa_r+0x9a2>
 801105a:	f8dd b008 	ldr.w	fp, [sp, #8]
 801105e:	f1bb 0f00 	cmp.w	fp, #0
 8011062:	d10d      	bne.n	8011080 <_dtoa_r+0x960>
 8011064:	4621      	mov	r1, r4
 8011066:	465b      	mov	r3, fp
 8011068:	2205      	movs	r2, #5
 801106a:	4628      	mov	r0, r5
 801106c:	f000 f9d4 	bl	8011418 <__multadd>
 8011070:	4601      	mov	r1, r0
 8011072:	4604      	mov	r4, r0
 8011074:	4650      	mov	r0, sl
 8011076:	f000 fbe7 	bl	8011848 <__mcmp>
 801107a:	2800      	cmp	r0, #0
 801107c:	f73f adb6 	bgt.w	8010bec <_dtoa_r+0x4cc>
 8011080:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011082:	9f08      	ldr	r7, [sp, #32]
 8011084:	ea6f 0903 	mvn.w	r9, r3
 8011088:	f04f 0800 	mov.w	r8, #0
 801108c:	4621      	mov	r1, r4
 801108e:	4628      	mov	r0, r5
 8011090:	f000 f9a0 	bl	80113d4 <_Bfree>
 8011094:	2e00      	cmp	r6, #0
 8011096:	f43f aea4 	beq.w	8010de2 <_dtoa_r+0x6c2>
 801109a:	f1b8 0f00 	cmp.w	r8, #0
 801109e:	d005      	beq.n	80110ac <_dtoa_r+0x98c>
 80110a0:	45b0      	cmp	r8, r6
 80110a2:	d003      	beq.n	80110ac <_dtoa_r+0x98c>
 80110a4:	4641      	mov	r1, r8
 80110a6:	4628      	mov	r0, r5
 80110a8:	f000 f994 	bl	80113d4 <_Bfree>
 80110ac:	4631      	mov	r1, r6
 80110ae:	4628      	mov	r0, r5
 80110b0:	f000 f990 	bl	80113d4 <_Bfree>
 80110b4:	e695      	b.n	8010de2 <_dtoa_r+0x6c2>
 80110b6:	2400      	movs	r4, #0
 80110b8:	4626      	mov	r6, r4
 80110ba:	e7e1      	b.n	8011080 <_dtoa_r+0x960>
 80110bc:	46c1      	mov	r9, r8
 80110be:	4626      	mov	r6, r4
 80110c0:	e594      	b.n	8010bec <_dtoa_r+0x4cc>
 80110c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110c4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	f000 80fc 	beq.w	80112c6 <_dtoa_r+0xba6>
 80110ce:	2f00      	cmp	r7, #0
 80110d0:	dd05      	ble.n	80110de <_dtoa_r+0x9be>
 80110d2:	4631      	mov	r1, r6
 80110d4:	463a      	mov	r2, r7
 80110d6:	4628      	mov	r0, r5
 80110d8:	f000 fb4a 	bl	8011770 <__lshift>
 80110dc:	4606      	mov	r6, r0
 80110de:	f1b8 0f00 	cmp.w	r8, #0
 80110e2:	d05c      	beq.n	801119e <_dtoa_r+0xa7e>
 80110e4:	4628      	mov	r0, r5
 80110e6:	6871      	ldr	r1, [r6, #4]
 80110e8:	f000 f934 	bl	8011354 <_Balloc>
 80110ec:	4607      	mov	r7, r0
 80110ee:	b928      	cbnz	r0, 80110fc <_dtoa_r+0x9dc>
 80110f0:	4602      	mov	r2, r0
 80110f2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80110f6:	4b7e      	ldr	r3, [pc, #504]	; (80112f0 <_dtoa_r+0xbd0>)
 80110f8:	f7ff bb26 	b.w	8010748 <_dtoa_r+0x28>
 80110fc:	6932      	ldr	r2, [r6, #16]
 80110fe:	f106 010c 	add.w	r1, r6, #12
 8011102:	3202      	adds	r2, #2
 8011104:	0092      	lsls	r2, r2, #2
 8011106:	300c      	adds	r0, #12
 8011108:	f000 f90a 	bl	8011320 <memcpy>
 801110c:	2201      	movs	r2, #1
 801110e:	4639      	mov	r1, r7
 8011110:	4628      	mov	r0, r5
 8011112:	f000 fb2d 	bl	8011770 <__lshift>
 8011116:	46b0      	mov	r8, r6
 8011118:	4606      	mov	r6, r0
 801111a:	9b08      	ldr	r3, [sp, #32]
 801111c:	3301      	adds	r3, #1
 801111e:	9302      	str	r3, [sp, #8]
 8011120:	9b08      	ldr	r3, [sp, #32]
 8011122:	445b      	add	r3, fp
 8011124:	930a      	str	r3, [sp, #40]	; 0x28
 8011126:	9b04      	ldr	r3, [sp, #16]
 8011128:	f003 0301 	and.w	r3, r3, #1
 801112c:	9309      	str	r3, [sp, #36]	; 0x24
 801112e:	9b02      	ldr	r3, [sp, #8]
 8011130:	4621      	mov	r1, r4
 8011132:	4650      	mov	r0, sl
 8011134:	f103 3bff 	add.w	fp, r3, #4294967295
 8011138:	f7ff fa64 	bl	8010604 <quorem>
 801113c:	4603      	mov	r3, r0
 801113e:	4641      	mov	r1, r8
 8011140:	3330      	adds	r3, #48	; 0x30
 8011142:	9004      	str	r0, [sp, #16]
 8011144:	4650      	mov	r0, sl
 8011146:	930b      	str	r3, [sp, #44]	; 0x2c
 8011148:	f000 fb7e 	bl	8011848 <__mcmp>
 801114c:	4632      	mov	r2, r6
 801114e:	9006      	str	r0, [sp, #24]
 8011150:	4621      	mov	r1, r4
 8011152:	4628      	mov	r0, r5
 8011154:	f000 fb94 	bl	8011880 <__mdiff>
 8011158:	68c2      	ldr	r2, [r0, #12]
 801115a:	4607      	mov	r7, r0
 801115c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801115e:	bb02      	cbnz	r2, 80111a2 <_dtoa_r+0xa82>
 8011160:	4601      	mov	r1, r0
 8011162:	4650      	mov	r0, sl
 8011164:	f000 fb70 	bl	8011848 <__mcmp>
 8011168:	4602      	mov	r2, r0
 801116a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801116c:	4639      	mov	r1, r7
 801116e:	4628      	mov	r0, r5
 8011170:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8011174:	f000 f92e 	bl	80113d4 <_Bfree>
 8011178:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801117a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801117c:	9f02      	ldr	r7, [sp, #8]
 801117e:	ea43 0102 	orr.w	r1, r3, r2
 8011182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011184:	430b      	orrs	r3, r1
 8011186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011188:	d10d      	bne.n	80111a6 <_dtoa_r+0xa86>
 801118a:	2b39      	cmp	r3, #57	; 0x39
 801118c:	d027      	beq.n	80111de <_dtoa_r+0xabe>
 801118e:	9a06      	ldr	r2, [sp, #24]
 8011190:	2a00      	cmp	r2, #0
 8011192:	dd01      	ble.n	8011198 <_dtoa_r+0xa78>
 8011194:	9b04      	ldr	r3, [sp, #16]
 8011196:	3331      	adds	r3, #49	; 0x31
 8011198:	f88b 3000 	strb.w	r3, [fp]
 801119c:	e776      	b.n	801108c <_dtoa_r+0x96c>
 801119e:	4630      	mov	r0, r6
 80111a0:	e7b9      	b.n	8011116 <_dtoa_r+0x9f6>
 80111a2:	2201      	movs	r2, #1
 80111a4:	e7e2      	b.n	801116c <_dtoa_r+0xa4c>
 80111a6:	9906      	ldr	r1, [sp, #24]
 80111a8:	2900      	cmp	r1, #0
 80111aa:	db04      	blt.n	80111b6 <_dtoa_r+0xa96>
 80111ac:	9822      	ldr	r0, [sp, #136]	; 0x88
 80111ae:	4301      	orrs	r1, r0
 80111b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111b2:	4301      	orrs	r1, r0
 80111b4:	d120      	bne.n	80111f8 <_dtoa_r+0xad8>
 80111b6:	2a00      	cmp	r2, #0
 80111b8:	ddee      	ble.n	8011198 <_dtoa_r+0xa78>
 80111ba:	4651      	mov	r1, sl
 80111bc:	2201      	movs	r2, #1
 80111be:	4628      	mov	r0, r5
 80111c0:	9302      	str	r3, [sp, #8]
 80111c2:	f000 fad5 	bl	8011770 <__lshift>
 80111c6:	4621      	mov	r1, r4
 80111c8:	4682      	mov	sl, r0
 80111ca:	f000 fb3d 	bl	8011848 <__mcmp>
 80111ce:	2800      	cmp	r0, #0
 80111d0:	9b02      	ldr	r3, [sp, #8]
 80111d2:	dc02      	bgt.n	80111da <_dtoa_r+0xaba>
 80111d4:	d1e0      	bne.n	8011198 <_dtoa_r+0xa78>
 80111d6:	07da      	lsls	r2, r3, #31
 80111d8:	d5de      	bpl.n	8011198 <_dtoa_r+0xa78>
 80111da:	2b39      	cmp	r3, #57	; 0x39
 80111dc:	d1da      	bne.n	8011194 <_dtoa_r+0xa74>
 80111de:	2339      	movs	r3, #57	; 0x39
 80111e0:	f88b 3000 	strb.w	r3, [fp]
 80111e4:	463b      	mov	r3, r7
 80111e6:	461f      	mov	r7, r3
 80111e8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80111ec:	3b01      	subs	r3, #1
 80111ee:	2a39      	cmp	r2, #57	; 0x39
 80111f0:	d050      	beq.n	8011294 <_dtoa_r+0xb74>
 80111f2:	3201      	adds	r2, #1
 80111f4:	701a      	strb	r2, [r3, #0]
 80111f6:	e749      	b.n	801108c <_dtoa_r+0x96c>
 80111f8:	2a00      	cmp	r2, #0
 80111fa:	dd03      	ble.n	8011204 <_dtoa_r+0xae4>
 80111fc:	2b39      	cmp	r3, #57	; 0x39
 80111fe:	d0ee      	beq.n	80111de <_dtoa_r+0xabe>
 8011200:	3301      	adds	r3, #1
 8011202:	e7c9      	b.n	8011198 <_dtoa_r+0xa78>
 8011204:	9a02      	ldr	r2, [sp, #8]
 8011206:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011208:	f802 3c01 	strb.w	r3, [r2, #-1]
 801120c:	428a      	cmp	r2, r1
 801120e:	d02a      	beq.n	8011266 <_dtoa_r+0xb46>
 8011210:	4651      	mov	r1, sl
 8011212:	2300      	movs	r3, #0
 8011214:	220a      	movs	r2, #10
 8011216:	4628      	mov	r0, r5
 8011218:	f000 f8fe 	bl	8011418 <__multadd>
 801121c:	45b0      	cmp	r8, r6
 801121e:	4682      	mov	sl, r0
 8011220:	f04f 0300 	mov.w	r3, #0
 8011224:	f04f 020a 	mov.w	r2, #10
 8011228:	4641      	mov	r1, r8
 801122a:	4628      	mov	r0, r5
 801122c:	d107      	bne.n	801123e <_dtoa_r+0xb1e>
 801122e:	f000 f8f3 	bl	8011418 <__multadd>
 8011232:	4680      	mov	r8, r0
 8011234:	4606      	mov	r6, r0
 8011236:	9b02      	ldr	r3, [sp, #8]
 8011238:	3301      	adds	r3, #1
 801123a:	9302      	str	r3, [sp, #8]
 801123c:	e777      	b.n	801112e <_dtoa_r+0xa0e>
 801123e:	f000 f8eb 	bl	8011418 <__multadd>
 8011242:	4631      	mov	r1, r6
 8011244:	4680      	mov	r8, r0
 8011246:	2300      	movs	r3, #0
 8011248:	220a      	movs	r2, #10
 801124a:	4628      	mov	r0, r5
 801124c:	f000 f8e4 	bl	8011418 <__multadd>
 8011250:	4606      	mov	r6, r0
 8011252:	e7f0      	b.n	8011236 <_dtoa_r+0xb16>
 8011254:	f1bb 0f00 	cmp.w	fp, #0
 8011258:	bfcc      	ite	gt
 801125a:	465f      	movgt	r7, fp
 801125c:	2701      	movle	r7, #1
 801125e:	f04f 0800 	mov.w	r8, #0
 8011262:	9a08      	ldr	r2, [sp, #32]
 8011264:	4417      	add	r7, r2
 8011266:	4651      	mov	r1, sl
 8011268:	2201      	movs	r2, #1
 801126a:	4628      	mov	r0, r5
 801126c:	9302      	str	r3, [sp, #8]
 801126e:	f000 fa7f 	bl	8011770 <__lshift>
 8011272:	4621      	mov	r1, r4
 8011274:	4682      	mov	sl, r0
 8011276:	f000 fae7 	bl	8011848 <__mcmp>
 801127a:	2800      	cmp	r0, #0
 801127c:	dcb2      	bgt.n	80111e4 <_dtoa_r+0xac4>
 801127e:	d102      	bne.n	8011286 <_dtoa_r+0xb66>
 8011280:	9b02      	ldr	r3, [sp, #8]
 8011282:	07db      	lsls	r3, r3, #31
 8011284:	d4ae      	bmi.n	80111e4 <_dtoa_r+0xac4>
 8011286:	463b      	mov	r3, r7
 8011288:	461f      	mov	r7, r3
 801128a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801128e:	2a30      	cmp	r2, #48	; 0x30
 8011290:	d0fa      	beq.n	8011288 <_dtoa_r+0xb68>
 8011292:	e6fb      	b.n	801108c <_dtoa_r+0x96c>
 8011294:	9a08      	ldr	r2, [sp, #32]
 8011296:	429a      	cmp	r2, r3
 8011298:	d1a5      	bne.n	80111e6 <_dtoa_r+0xac6>
 801129a:	2331      	movs	r3, #49	; 0x31
 801129c:	f109 0901 	add.w	r9, r9, #1
 80112a0:	7013      	strb	r3, [r2, #0]
 80112a2:	e6f3      	b.n	801108c <_dtoa_r+0x96c>
 80112a4:	4b13      	ldr	r3, [pc, #76]	; (80112f4 <_dtoa_r+0xbd4>)
 80112a6:	f7ff baa7 	b.w	80107f8 <_dtoa_r+0xd8>
 80112aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	f47f aa80 	bne.w	80107b2 <_dtoa_r+0x92>
 80112b2:	4b11      	ldr	r3, [pc, #68]	; (80112f8 <_dtoa_r+0xbd8>)
 80112b4:	f7ff baa0 	b.w	80107f8 <_dtoa_r+0xd8>
 80112b8:	f1bb 0f00 	cmp.w	fp, #0
 80112bc:	dc03      	bgt.n	80112c6 <_dtoa_r+0xba6>
 80112be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80112c0:	2b02      	cmp	r3, #2
 80112c2:	f73f aecc 	bgt.w	801105e <_dtoa_r+0x93e>
 80112c6:	9f08      	ldr	r7, [sp, #32]
 80112c8:	4621      	mov	r1, r4
 80112ca:	4650      	mov	r0, sl
 80112cc:	f7ff f99a 	bl	8010604 <quorem>
 80112d0:	9a08      	ldr	r2, [sp, #32]
 80112d2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80112d6:	f807 3b01 	strb.w	r3, [r7], #1
 80112da:	1aba      	subs	r2, r7, r2
 80112dc:	4593      	cmp	fp, r2
 80112de:	ddb9      	ble.n	8011254 <_dtoa_r+0xb34>
 80112e0:	4651      	mov	r1, sl
 80112e2:	2300      	movs	r3, #0
 80112e4:	220a      	movs	r2, #10
 80112e6:	4628      	mov	r0, r5
 80112e8:	f000 f896 	bl	8011418 <__multadd>
 80112ec:	4682      	mov	sl, r0
 80112ee:	e7eb      	b.n	80112c8 <_dtoa_r+0xba8>
 80112f0:	0801389b 	.word	0x0801389b
 80112f4:	080137f4 	.word	0x080137f4
 80112f8:	08013818 	.word	0x08013818

080112fc <_localeconv_r>:
 80112fc:	4800      	ldr	r0, [pc, #0]	; (8011300 <_localeconv_r+0x4>)
 80112fe:	4770      	bx	lr
 8011300:	200002fc 	.word	0x200002fc

08011304 <memchr>:
 8011304:	4603      	mov	r3, r0
 8011306:	b510      	push	{r4, lr}
 8011308:	b2c9      	uxtb	r1, r1
 801130a:	4402      	add	r2, r0
 801130c:	4293      	cmp	r3, r2
 801130e:	4618      	mov	r0, r3
 8011310:	d101      	bne.n	8011316 <memchr+0x12>
 8011312:	2000      	movs	r0, #0
 8011314:	e003      	b.n	801131e <memchr+0x1a>
 8011316:	7804      	ldrb	r4, [r0, #0]
 8011318:	3301      	adds	r3, #1
 801131a:	428c      	cmp	r4, r1
 801131c:	d1f6      	bne.n	801130c <memchr+0x8>
 801131e:	bd10      	pop	{r4, pc}

08011320 <memcpy>:
 8011320:	440a      	add	r2, r1
 8011322:	4291      	cmp	r1, r2
 8011324:	f100 33ff 	add.w	r3, r0, #4294967295
 8011328:	d100      	bne.n	801132c <memcpy+0xc>
 801132a:	4770      	bx	lr
 801132c:	b510      	push	{r4, lr}
 801132e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011332:	4291      	cmp	r1, r2
 8011334:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011338:	d1f9      	bne.n	801132e <memcpy+0xe>
 801133a:	bd10      	pop	{r4, pc}

0801133c <__malloc_lock>:
 801133c:	4801      	ldr	r0, [pc, #4]	; (8011344 <__malloc_lock+0x8>)
 801133e:	f000 bd4c 	b.w	8011dda <__retarget_lock_acquire_recursive>
 8011342:	bf00      	nop
 8011344:	200020ac 	.word	0x200020ac

08011348 <__malloc_unlock>:
 8011348:	4801      	ldr	r0, [pc, #4]	; (8011350 <__malloc_unlock+0x8>)
 801134a:	f000 bd47 	b.w	8011ddc <__retarget_lock_release_recursive>
 801134e:	bf00      	nop
 8011350:	200020ac 	.word	0x200020ac

08011354 <_Balloc>:
 8011354:	b570      	push	{r4, r5, r6, lr}
 8011356:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011358:	4604      	mov	r4, r0
 801135a:	460d      	mov	r5, r1
 801135c:	b976      	cbnz	r6, 801137c <_Balloc+0x28>
 801135e:	2010      	movs	r0, #16
 8011360:	f7fe fbec 	bl	800fb3c <malloc>
 8011364:	4602      	mov	r2, r0
 8011366:	6260      	str	r0, [r4, #36]	; 0x24
 8011368:	b920      	cbnz	r0, 8011374 <_Balloc+0x20>
 801136a:	2166      	movs	r1, #102	; 0x66
 801136c:	4b17      	ldr	r3, [pc, #92]	; (80113cc <_Balloc+0x78>)
 801136e:	4818      	ldr	r0, [pc, #96]	; (80113d0 <_Balloc+0x7c>)
 8011370:	f000 fd02 	bl	8011d78 <__assert_func>
 8011374:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011378:	6006      	str	r6, [r0, #0]
 801137a:	60c6      	str	r6, [r0, #12]
 801137c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801137e:	68f3      	ldr	r3, [r6, #12]
 8011380:	b183      	cbz	r3, 80113a4 <_Balloc+0x50>
 8011382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011384:	68db      	ldr	r3, [r3, #12]
 8011386:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801138a:	b9b8      	cbnz	r0, 80113bc <_Balloc+0x68>
 801138c:	2101      	movs	r1, #1
 801138e:	fa01 f605 	lsl.w	r6, r1, r5
 8011392:	1d72      	adds	r2, r6, #5
 8011394:	4620      	mov	r0, r4
 8011396:	0092      	lsls	r2, r2, #2
 8011398:	f000 fb5e 	bl	8011a58 <_calloc_r>
 801139c:	b160      	cbz	r0, 80113b8 <_Balloc+0x64>
 801139e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80113a2:	e00e      	b.n	80113c2 <_Balloc+0x6e>
 80113a4:	2221      	movs	r2, #33	; 0x21
 80113a6:	2104      	movs	r1, #4
 80113a8:	4620      	mov	r0, r4
 80113aa:	f000 fb55 	bl	8011a58 <_calloc_r>
 80113ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113b0:	60f0      	str	r0, [r6, #12]
 80113b2:	68db      	ldr	r3, [r3, #12]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d1e4      	bne.n	8011382 <_Balloc+0x2e>
 80113b8:	2000      	movs	r0, #0
 80113ba:	bd70      	pop	{r4, r5, r6, pc}
 80113bc:	6802      	ldr	r2, [r0, #0]
 80113be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113c2:	2300      	movs	r3, #0
 80113c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80113c8:	e7f7      	b.n	80113ba <_Balloc+0x66>
 80113ca:	bf00      	nop
 80113cc:	08013825 	.word	0x08013825
 80113d0:	080138ac 	.word	0x080138ac

080113d4 <_Bfree>:
 80113d4:	b570      	push	{r4, r5, r6, lr}
 80113d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80113d8:	4605      	mov	r5, r0
 80113da:	460c      	mov	r4, r1
 80113dc:	b976      	cbnz	r6, 80113fc <_Bfree+0x28>
 80113de:	2010      	movs	r0, #16
 80113e0:	f7fe fbac 	bl	800fb3c <malloc>
 80113e4:	4602      	mov	r2, r0
 80113e6:	6268      	str	r0, [r5, #36]	; 0x24
 80113e8:	b920      	cbnz	r0, 80113f4 <_Bfree+0x20>
 80113ea:	218a      	movs	r1, #138	; 0x8a
 80113ec:	4b08      	ldr	r3, [pc, #32]	; (8011410 <_Bfree+0x3c>)
 80113ee:	4809      	ldr	r0, [pc, #36]	; (8011414 <_Bfree+0x40>)
 80113f0:	f000 fcc2 	bl	8011d78 <__assert_func>
 80113f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80113f8:	6006      	str	r6, [r0, #0]
 80113fa:	60c6      	str	r6, [r0, #12]
 80113fc:	b13c      	cbz	r4, 801140e <_Bfree+0x3a>
 80113fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011400:	6862      	ldr	r2, [r4, #4]
 8011402:	68db      	ldr	r3, [r3, #12]
 8011404:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011408:	6021      	str	r1, [r4, #0]
 801140a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801140e:	bd70      	pop	{r4, r5, r6, pc}
 8011410:	08013825 	.word	0x08013825
 8011414:	080138ac 	.word	0x080138ac

08011418 <__multadd>:
 8011418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801141c:	4698      	mov	r8, r3
 801141e:	460c      	mov	r4, r1
 8011420:	2300      	movs	r3, #0
 8011422:	690e      	ldr	r6, [r1, #16]
 8011424:	4607      	mov	r7, r0
 8011426:	f101 0014 	add.w	r0, r1, #20
 801142a:	6805      	ldr	r5, [r0, #0]
 801142c:	3301      	adds	r3, #1
 801142e:	b2a9      	uxth	r1, r5
 8011430:	fb02 8101 	mla	r1, r2, r1, r8
 8011434:	0c2d      	lsrs	r5, r5, #16
 8011436:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801143a:	fb02 c505 	mla	r5, r2, r5, ip
 801143e:	b289      	uxth	r1, r1
 8011440:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011444:	429e      	cmp	r6, r3
 8011446:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801144a:	f840 1b04 	str.w	r1, [r0], #4
 801144e:	dcec      	bgt.n	801142a <__multadd+0x12>
 8011450:	f1b8 0f00 	cmp.w	r8, #0
 8011454:	d022      	beq.n	801149c <__multadd+0x84>
 8011456:	68a3      	ldr	r3, [r4, #8]
 8011458:	42b3      	cmp	r3, r6
 801145a:	dc19      	bgt.n	8011490 <__multadd+0x78>
 801145c:	6861      	ldr	r1, [r4, #4]
 801145e:	4638      	mov	r0, r7
 8011460:	3101      	adds	r1, #1
 8011462:	f7ff ff77 	bl	8011354 <_Balloc>
 8011466:	4605      	mov	r5, r0
 8011468:	b928      	cbnz	r0, 8011476 <__multadd+0x5e>
 801146a:	4602      	mov	r2, r0
 801146c:	21b5      	movs	r1, #181	; 0xb5
 801146e:	4b0d      	ldr	r3, [pc, #52]	; (80114a4 <__multadd+0x8c>)
 8011470:	480d      	ldr	r0, [pc, #52]	; (80114a8 <__multadd+0x90>)
 8011472:	f000 fc81 	bl	8011d78 <__assert_func>
 8011476:	6922      	ldr	r2, [r4, #16]
 8011478:	f104 010c 	add.w	r1, r4, #12
 801147c:	3202      	adds	r2, #2
 801147e:	0092      	lsls	r2, r2, #2
 8011480:	300c      	adds	r0, #12
 8011482:	f7ff ff4d 	bl	8011320 <memcpy>
 8011486:	4621      	mov	r1, r4
 8011488:	4638      	mov	r0, r7
 801148a:	f7ff ffa3 	bl	80113d4 <_Bfree>
 801148e:	462c      	mov	r4, r5
 8011490:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011494:	3601      	adds	r6, #1
 8011496:	f8c3 8014 	str.w	r8, [r3, #20]
 801149a:	6126      	str	r6, [r4, #16]
 801149c:	4620      	mov	r0, r4
 801149e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114a2:	bf00      	nop
 80114a4:	0801389b 	.word	0x0801389b
 80114a8:	080138ac 	.word	0x080138ac

080114ac <__hi0bits>:
 80114ac:	0c02      	lsrs	r2, r0, #16
 80114ae:	0412      	lsls	r2, r2, #16
 80114b0:	4603      	mov	r3, r0
 80114b2:	b9ca      	cbnz	r2, 80114e8 <__hi0bits+0x3c>
 80114b4:	0403      	lsls	r3, r0, #16
 80114b6:	2010      	movs	r0, #16
 80114b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80114bc:	bf04      	itt	eq
 80114be:	021b      	lsleq	r3, r3, #8
 80114c0:	3008      	addeq	r0, #8
 80114c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80114c6:	bf04      	itt	eq
 80114c8:	011b      	lsleq	r3, r3, #4
 80114ca:	3004      	addeq	r0, #4
 80114cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80114d0:	bf04      	itt	eq
 80114d2:	009b      	lsleq	r3, r3, #2
 80114d4:	3002      	addeq	r0, #2
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	db05      	blt.n	80114e6 <__hi0bits+0x3a>
 80114da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80114de:	f100 0001 	add.w	r0, r0, #1
 80114e2:	bf08      	it	eq
 80114e4:	2020      	moveq	r0, #32
 80114e6:	4770      	bx	lr
 80114e8:	2000      	movs	r0, #0
 80114ea:	e7e5      	b.n	80114b8 <__hi0bits+0xc>

080114ec <__lo0bits>:
 80114ec:	6803      	ldr	r3, [r0, #0]
 80114ee:	4602      	mov	r2, r0
 80114f0:	f013 0007 	ands.w	r0, r3, #7
 80114f4:	d00b      	beq.n	801150e <__lo0bits+0x22>
 80114f6:	07d9      	lsls	r1, r3, #31
 80114f8:	d422      	bmi.n	8011540 <__lo0bits+0x54>
 80114fa:	0798      	lsls	r0, r3, #30
 80114fc:	bf49      	itett	mi
 80114fe:	085b      	lsrmi	r3, r3, #1
 8011500:	089b      	lsrpl	r3, r3, #2
 8011502:	2001      	movmi	r0, #1
 8011504:	6013      	strmi	r3, [r2, #0]
 8011506:	bf5c      	itt	pl
 8011508:	2002      	movpl	r0, #2
 801150a:	6013      	strpl	r3, [r2, #0]
 801150c:	4770      	bx	lr
 801150e:	b299      	uxth	r1, r3
 8011510:	b909      	cbnz	r1, 8011516 <__lo0bits+0x2a>
 8011512:	2010      	movs	r0, #16
 8011514:	0c1b      	lsrs	r3, r3, #16
 8011516:	f013 0fff 	tst.w	r3, #255	; 0xff
 801151a:	bf04      	itt	eq
 801151c:	0a1b      	lsreq	r3, r3, #8
 801151e:	3008      	addeq	r0, #8
 8011520:	0719      	lsls	r1, r3, #28
 8011522:	bf04      	itt	eq
 8011524:	091b      	lsreq	r3, r3, #4
 8011526:	3004      	addeq	r0, #4
 8011528:	0799      	lsls	r1, r3, #30
 801152a:	bf04      	itt	eq
 801152c:	089b      	lsreq	r3, r3, #2
 801152e:	3002      	addeq	r0, #2
 8011530:	07d9      	lsls	r1, r3, #31
 8011532:	d403      	bmi.n	801153c <__lo0bits+0x50>
 8011534:	085b      	lsrs	r3, r3, #1
 8011536:	f100 0001 	add.w	r0, r0, #1
 801153a:	d003      	beq.n	8011544 <__lo0bits+0x58>
 801153c:	6013      	str	r3, [r2, #0]
 801153e:	4770      	bx	lr
 8011540:	2000      	movs	r0, #0
 8011542:	4770      	bx	lr
 8011544:	2020      	movs	r0, #32
 8011546:	4770      	bx	lr

08011548 <__i2b>:
 8011548:	b510      	push	{r4, lr}
 801154a:	460c      	mov	r4, r1
 801154c:	2101      	movs	r1, #1
 801154e:	f7ff ff01 	bl	8011354 <_Balloc>
 8011552:	4602      	mov	r2, r0
 8011554:	b928      	cbnz	r0, 8011562 <__i2b+0x1a>
 8011556:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801155a:	4b04      	ldr	r3, [pc, #16]	; (801156c <__i2b+0x24>)
 801155c:	4804      	ldr	r0, [pc, #16]	; (8011570 <__i2b+0x28>)
 801155e:	f000 fc0b 	bl	8011d78 <__assert_func>
 8011562:	2301      	movs	r3, #1
 8011564:	6144      	str	r4, [r0, #20]
 8011566:	6103      	str	r3, [r0, #16]
 8011568:	bd10      	pop	{r4, pc}
 801156a:	bf00      	nop
 801156c:	0801389b 	.word	0x0801389b
 8011570:	080138ac 	.word	0x080138ac

08011574 <__multiply>:
 8011574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011578:	4614      	mov	r4, r2
 801157a:	690a      	ldr	r2, [r1, #16]
 801157c:	6923      	ldr	r3, [r4, #16]
 801157e:	460d      	mov	r5, r1
 8011580:	429a      	cmp	r2, r3
 8011582:	bfbe      	ittt	lt
 8011584:	460b      	movlt	r3, r1
 8011586:	4625      	movlt	r5, r4
 8011588:	461c      	movlt	r4, r3
 801158a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801158e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011592:	68ab      	ldr	r3, [r5, #8]
 8011594:	6869      	ldr	r1, [r5, #4]
 8011596:	eb0a 0709 	add.w	r7, sl, r9
 801159a:	42bb      	cmp	r3, r7
 801159c:	b085      	sub	sp, #20
 801159e:	bfb8      	it	lt
 80115a0:	3101      	addlt	r1, #1
 80115a2:	f7ff fed7 	bl	8011354 <_Balloc>
 80115a6:	b930      	cbnz	r0, 80115b6 <__multiply+0x42>
 80115a8:	4602      	mov	r2, r0
 80115aa:	f240 115d 	movw	r1, #349	; 0x15d
 80115ae:	4b41      	ldr	r3, [pc, #260]	; (80116b4 <__multiply+0x140>)
 80115b0:	4841      	ldr	r0, [pc, #260]	; (80116b8 <__multiply+0x144>)
 80115b2:	f000 fbe1 	bl	8011d78 <__assert_func>
 80115b6:	f100 0614 	add.w	r6, r0, #20
 80115ba:	4633      	mov	r3, r6
 80115bc:	2200      	movs	r2, #0
 80115be:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80115c2:	4543      	cmp	r3, r8
 80115c4:	d31e      	bcc.n	8011604 <__multiply+0x90>
 80115c6:	f105 0c14 	add.w	ip, r5, #20
 80115ca:	f104 0314 	add.w	r3, r4, #20
 80115ce:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80115d2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80115d6:	9202      	str	r2, [sp, #8]
 80115d8:	ebac 0205 	sub.w	r2, ip, r5
 80115dc:	3a15      	subs	r2, #21
 80115de:	f022 0203 	bic.w	r2, r2, #3
 80115e2:	3204      	adds	r2, #4
 80115e4:	f105 0115 	add.w	r1, r5, #21
 80115e8:	458c      	cmp	ip, r1
 80115ea:	bf38      	it	cc
 80115ec:	2204      	movcc	r2, #4
 80115ee:	9201      	str	r2, [sp, #4]
 80115f0:	9a02      	ldr	r2, [sp, #8]
 80115f2:	9303      	str	r3, [sp, #12]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d808      	bhi.n	801160a <__multiply+0x96>
 80115f8:	2f00      	cmp	r7, #0
 80115fa:	dc55      	bgt.n	80116a8 <__multiply+0x134>
 80115fc:	6107      	str	r7, [r0, #16]
 80115fe:	b005      	add	sp, #20
 8011600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011604:	f843 2b04 	str.w	r2, [r3], #4
 8011608:	e7db      	b.n	80115c2 <__multiply+0x4e>
 801160a:	f8b3 a000 	ldrh.w	sl, [r3]
 801160e:	f1ba 0f00 	cmp.w	sl, #0
 8011612:	d020      	beq.n	8011656 <__multiply+0xe2>
 8011614:	46b1      	mov	r9, r6
 8011616:	2200      	movs	r2, #0
 8011618:	f105 0e14 	add.w	lr, r5, #20
 801161c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011620:	f8d9 b000 	ldr.w	fp, [r9]
 8011624:	b2a1      	uxth	r1, r4
 8011626:	fa1f fb8b 	uxth.w	fp, fp
 801162a:	fb0a b101 	mla	r1, sl, r1, fp
 801162e:	4411      	add	r1, r2
 8011630:	f8d9 2000 	ldr.w	r2, [r9]
 8011634:	0c24      	lsrs	r4, r4, #16
 8011636:	0c12      	lsrs	r2, r2, #16
 8011638:	fb0a 2404 	mla	r4, sl, r4, r2
 801163c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011640:	b289      	uxth	r1, r1
 8011642:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011646:	45f4      	cmp	ip, lr
 8011648:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801164c:	f849 1b04 	str.w	r1, [r9], #4
 8011650:	d8e4      	bhi.n	801161c <__multiply+0xa8>
 8011652:	9901      	ldr	r1, [sp, #4]
 8011654:	5072      	str	r2, [r6, r1]
 8011656:	9a03      	ldr	r2, [sp, #12]
 8011658:	3304      	adds	r3, #4
 801165a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801165e:	f1b9 0f00 	cmp.w	r9, #0
 8011662:	d01f      	beq.n	80116a4 <__multiply+0x130>
 8011664:	46b6      	mov	lr, r6
 8011666:	f04f 0a00 	mov.w	sl, #0
 801166a:	6834      	ldr	r4, [r6, #0]
 801166c:	f105 0114 	add.w	r1, r5, #20
 8011670:	880a      	ldrh	r2, [r1, #0]
 8011672:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011676:	b2a4      	uxth	r4, r4
 8011678:	fb09 b202 	mla	r2, r9, r2, fp
 801167c:	4492      	add	sl, r2
 801167e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011682:	f84e 4b04 	str.w	r4, [lr], #4
 8011686:	f851 4b04 	ldr.w	r4, [r1], #4
 801168a:	f8be 2000 	ldrh.w	r2, [lr]
 801168e:	0c24      	lsrs	r4, r4, #16
 8011690:	fb09 2404 	mla	r4, r9, r4, r2
 8011694:	458c      	cmp	ip, r1
 8011696:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801169a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801169e:	d8e7      	bhi.n	8011670 <__multiply+0xfc>
 80116a0:	9a01      	ldr	r2, [sp, #4]
 80116a2:	50b4      	str	r4, [r6, r2]
 80116a4:	3604      	adds	r6, #4
 80116a6:	e7a3      	b.n	80115f0 <__multiply+0x7c>
 80116a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d1a5      	bne.n	80115fc <__multiply+0x88>
 80116b0:	3f01      	subs	r7, #1
 80116b2:	e7a1      	b.n	80115f8 <__multiply+0x84>
 80116b4:	0801389b 	.word	0x0801389b
 80116b8:	080138ac 	.word	0x080138ac

080116bc <__pow5mult>:
 80116bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116c0:	4615      	mov	r5, r2
 80116c2:	f012 0203 	ands.w	r2, r2, #3
 80116c6:	4606      	mov	r6, r0
 80116c8:	460f      	mov	r7, r1
 80116ca:	d007      	beq.n	80116dc <__pow5mult+0x20>
 80116cc:	4c25      	ldr	r4, [pc, #148]	; (8011764 <__pow5mult+0xa8>)
 80116ce:	3a01      	subs	r2, #1
 80116d0:	2300      	movs	r3, #0
 80116d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80116d6:	f7ff fe9f 	bl	8011418 <__multadd>
 80116da:	4607      	mov	r7, r0
 80116dc:	10ad      	asrs	r5, r5, #2
 80116de:	d03d      	beq.n	801175c <__pow5mult+0xa0>
 80116e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80116e2:	b97c      	cbnz	r4, 8011704 <__pow5mult+0x48>
 80116e4:	2010      	movs	r0, #16
 80116e6:	f7fe fa29 	bl	800fb3c <malloc>
 80116ea:	4602      	mov	r2, r0
 80116ec:	6270      	str	r0, [r6, #36]	; 0x24
 80116ee:	b928      	cbnz	r0, 80116fc <__pow5mult+0x40>
 80116f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80116f4:	4b1c      	ldr	r3, [pc, #112]	; (8011768 <__pow5mult+0xac>)
 80116f6:	481d      	ldr	r0, [pc, #116]	; (801176c <__pow5mult+0xb0>)
 80116f8:	f000 fb3e 	bl	8011d78 <__assert_func>
 80116fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011700:	6004      	str	r4, [r0, #0]
 8011702:	60c4      	str	r4, [r0, #12]
 8011704:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011708:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801170c:	b94c      	cbnz	r4, 8011722 <__pow5mult+0x66>
 801170e:	f240 2171 	movw	r1, #625	; 0x271
 8011712:	4630      	mov	r0, r6
 8011714:	f7ff ff18 	bl	8011548 <__i2b>
 8011718:	2300      	movs	r3, #0
 801171a:	4604      	mov	r4, r0
 801171c:	f8c8 0008 	str.w	r0, [r8, #8]
 8011720:	6003      	str	r3, [r0, #0]
 8011722:	f04f 0900 	mov.w	r9, #0
 8011726:	07eb      	lsls	r3, r5, #31
 8011728:	d50a      	bpl.n	8011740 <__pow5mult+0x84>
 801172a:	4639      	mov	r1, r7
 801172c:	4622      	mov	r2, r4
 801172e:	4630      	mov	r0, r6
 8011730:	f7ff ff20 	bl	8011574 <__multiply>
 8011734:	4680      	mov	r8, r0
 8011736:	4639      	mov	r1, r7
 8011738:	4630      	mov	r0, r6
 801173a:	f7ff fe4b 	bl	80113d4 <_Bfree>
 801173e:	4647      	mov	r7, r8
 8011740:	106d      	asrs	r5, r5, #1
 8011742:	d00b      	beq.n	801175c <__pow5mult+0xa0>
 8011744:	6820      	ldr	r0, [r4, #0]
 8011746:	b938      	cbnz	r0, 8011758 <__pow5mult+0x9c>
 8011748:	4622      	mov	r2, r4
 801174a:	4621      	mov	r1, r4
 801174c:	4630      	mov	r0, r6
 801174e:	f7ff ff11 	bl	8011574 <__multiply>
 8011752:	6020      	str	r0, [r4, #0]
 8011754:	f8c0 9000 	str.w	r9, [r0]
 8011758:	4604      	mov	r4, r0
 801175a:	e7e4      	b.n	8011726 <__pow5mult+0x6a>
 801175c:	4638      	mov	r0, r7
 801175e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011762:	bf00      	nop
 8011764:	08013a00 	.word	0x08013a00
 8011768:	08013825 	.word	0x08013825
 801176c:	080138ac 	.word	0x080138ac

08011770 <__lshift>:
 8011770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011774:	460c      	mov	r4, r1
 8011776:	4607      	mov	r7, r0
 8011778:	4691      	mov	r9, r2
 801177a:	6923      	ldr	r3, [r4, #16]
 801177c:	6849      	ldr	r1, [r1, #4]
 801177e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011782:	68a3      	ldr	r3, [r4, #8]
 8011784:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011788:	f108 0601 	add.w	r6, r8, #1
 801178c:	42b3      	cmp	r3, r6
 801178e:	db0b      	blt.n	80117a8 <__lshift+0x38>
 8011790:	4638      	mov	r0, r7
 8011792:	f7ff fddf 	bl	8011354 <_Balloc>
 8011796:	4605      	mov	r5, r0
 8011798:	b948      	cbnz	r0, 80117ae <__lshift+0x3e>
 801179a:	4602      	mov	r2, r0
 801179c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80117a0:	4b27      	ldr	r3, [pc, #156]	; (8011840 <__lshift+0xd0>)
 80117a2:	4828      	ldr	r0, [pc, #160]	; (8011844 <__lshift+0xd4>)
 80117a4:	f000 fae8 	bl	8011d78 <__assert_func>
 80117a8:	3101      	adds	r1, #1
 80117aa:	005b      	lsls	r3, r3, #1
 80117ac:	e7ee      	b.n	801178c <__lshift+0x1c>
 80117ae:	2300      	movs	r3, #0
 80117b0:	f100 0114 	add.w	r1, r0, #20
 80117b4:	f100 0210 	add.w	r2, r0, #16
 80117b8:	4618      	mov	r0, r3
 80117ba:	4553      	cmp	r3, sl
 80117bc:	db33      	blt.n	8011826 <__lshift+0xb6>
 80117be:	6920      	ldr	r0, [r4, #16]
 80117c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80117c4:	f104 0314 	add.w	r3, r4, #20
 80117c8:	f019 091f 	ands.w	r9, r9, #31
 80117cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80117d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80117d4:	d02b      	beq.n	801182e <__lshift+0xbe>
 80117d6:	468a      	mov	sl, r1
 80117d8:	2200      	movs	r2, #0
 80117da:	f1c9 0e20 	rsb	lr, r9, #32
 80117de:	6818      	ldr	r0, [r3, #0]
 80117e0:	fa00 f009 	lsl.w	r0, r0, r9
 80117e4:	4302      	orrs	r2, r0
 80117e6:	f84a 2b04 	str.w	r2, [sl], #4
 80117ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80117ee:	459c      	cmp	ip, r3
 80117f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80117f4:	d8f3      	bhi.n	80117de <__lshift+0x6e>
 80117f6:	ebac 0304 	sub.w	r3, ip, r4
 80117fa:	3b15      	subs	r3, #21
 80117fc:	f023 0303 	bic.w	r3, r3, #3
 8011800:	3304      	adds	r3, #4
 8011802:	f104 0015 	add.w	r0, r4, #21
 8011806:	4584      	cmp	ip, r0
 8011808:	bf38      	it	cc
 801180a:	2304      	movcc	r3, #4
 801180c:	50ca      	str	r2, [r1, r3]
 801180e:	b10a      	cbz	r2, 8011814 <__lshift+0xa4>
 8011810:	f108 0602 	add.w	r6, r8, #2
 8011814:	3e01      	subs	r6, #1
 8011816:	4638      	mov	r0, r7
 8011818:	4621      	mov	r1, r4
 801181a:	612e      	str	r6, [r5, #16]
 801181c:	f7ff fdda 	bl	80113d4 <_Bfree>
 8011820:	4628      	mov	r0, r5
 8011822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011826:	f842 0f04 	str.w	r0, [r2, #4]!
 801182a:	3301      	adds	r3, #1
 801182c:	e7c5      	b.n	80117ba <__lshift+0x4a>
 801182e:	3904      	subs	r1, #4
 8011830:	f853 2b04 	ldr.w	r2, [r3], #4
 8011834:	459c      	cmp	ip, r3
 8011836:	f841 2f04 	str.w	r2, [r1, #4]!
 801183a:	d8f9      	bhi.n	8011830 <__lshift+0xc0>
 801183c:	e7ea      	b.n	8011814 <__lshift+0xa4>
 801183e:	bf00      	nop
 8011840:	0801389b 	.word	0x0801389b
 8011844:	080138ac 	.word	0x080138ac

08011848 <__mcmp>:
 8011848:	4603      	mov	r3, r0
 801184a:	690a      	ldr	r2, [r1, #16]
 801184c:	6900      	ldr	r0, [r0, #16]
 801184e:	b530      	push	{r4, r5, lr}
 8011850:	1a80      	subs	r0, r0, r2
 8011852:	d10d      	bne.n	8011870 <__mcmp+0x28>
 8011854:	3314      	adds	r3, #20
 8011856:	3114      	adds	r1, #20
 8011858:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801185c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011860:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011864:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011868:	4295      	cmp	r5, r2
 801186a:	d002      	beq.n	8011872 <__mcmp+0x2a>
 801186c:	d304      	bcc.n	8011878 <__mcmp+0x30>
 801186e:	2001      	movs	r0, #1
 8011870:	bd30      	pop	{r4, r5, pc}
 8011872:	42a3      	cmp	r3, r4
 8011874:	d3f4      	bcc.n	8011860 <__mcmp+0x18>
 8011876:	e7fb      	b.n	8011870 <__mcmp+0x28>
 8011878:	f04f 30ff 	mov.w	r0, #4294967295
 801187c:	e7f8      	b.n	8011870 <__mcmp+0x28>
	...

08011880 <__mdiff>:
 8011880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011884:	460c      	mov	r4, r1
 8011886:	4606      	mov	r6, r0
 8011888:	4611      	mov	r1, r2
 801188a:	4620      	mov	r0, r4
 801188c:	4692      	mov	sl, r2
 801188e:	f7ff ffdb 	bl	8011848 <__mcmp>
 8011892:	1e05      	subs	r5, r0, #0
 8011894:	d111      	bne.n	80118ba <__mdiff+0x3a>
 8011896:	4629      	mov	r1, r5
 8011898:	4630      	mov	r0, r6
 801189a:	f7ff fd5b 	bl	8011354 <_Balloc>
 801189e:	4602      	mov	r2, r0
 80118a0:	b928      	cbnz	r0, 80118ae <__mdiff+0x2e>
 80118a2:	f240 2132 	movw	r1, #562	; 0x232
 80118a6:	4b3c      	ldr	r3, [pc, #240]	; (8011998 <__mdiff+0x118>)
 80118a8:	483c      	ldr	r0, [pc, #240]	; (801199c <__mdiff+0x11c>)
 80118aa:	f000 fa65 	bl	8011d78 <__assert_func>
 80118ae:	2301      	movs	r3, #1
 80118b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80118b4:	4610      	mov	r0, r2
 80118b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118ba:	bfa4      	itt	ge
 80118bc:	4653      	movge	r3, sl
 80118be:	46a2      	movge	sl, r4
 80118c0:	4630      	mov	r0, r6
 80118c2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80118c6:	bfa6      	itte	ge
 80118c8:	461c      	movge	r4, r3
 80118ca:	2500      	movge	r5, #0
 80118cc:	2501      	movlt	r5, #1
 80118ce:	f7ff fd41 	bl	8011354 <_Balloc>
 80118d2:	4602      	mov	r2, r0
 80118d4:	b918      	cbnz	r0, 80118de <__mdiff+0x5e>
 80118d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80118da:	4b2f      	ldr	r3, [pc, #188]	; (8011998 <__mdiff+0x118>)
 80118dc:	e7e4      	b.n	80118a8 <__mdiff+0x28>
 80118de:	f100 0814 	add.w	r8, r0, #20
 80118e2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80118e6:	60c5      	str	r5, [r0, #12]
 80118e8:	f04f 0c00 	mov.w	ip, #0
 80118ec:	f10a 0514 	add.w	r5, sl, #20
 80118f0:	f10a 0010 	add.w	r0, sl, #16
 80118f4:	46c2      	mov	sl, r8
 80118f6:	6926      	ldr	r6, [r4, #16]
 80118f8:	f104 0914 	add.w	r9, r4, #20
 80118fc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8011900:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011904:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8011908:	f859 3b04 	ldr.w	r3, [r9], #4
 801190c:	fa1f f18b 	uxth.w	r1, fp
 8011910:	4461      	add	r1, ip
 8011912:	fa1f fc83 	uxth.w	ip, r3
 8011916:	0c1b      	lsrs	r3, r3, #16
 8011918:	eba1 010c 	sub.w	r1, r1, ip
 801191c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011920:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011924:	b289      	uxth	r1, r1
 8011926:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801192a:	454e      	cmp	r6, r9
 801192c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011930:	f84a 3b04 	str.w	r3, [sl], #4
 8011934:	d8e6      	bhi.n	8011904 <__mdiff+0x84>
 8011936:	1b33      	subs	r3, r6, r4
 8011938:	3b15      	subs	r3, #21
 801193a:	f023 0303 	bic.w	r3, r3, #3
 801193e:	3415      	adds	r4, #21
 8011940:	3304      	adds	r3, #4
 8011942:	42a6      	cmp	r6, r4
 8011944:	bf38      	it	cc
 8011946:	2304      	movcc	r3, #4
 8011948:	441d      	add	r5, r3
 801194a:	4443      	add	r3, r8
 801194c:	461e      	mov	r6, r3
 801194e:	462c      	mov	r4, r5
 8011950:	4574      	cmp	r4, lr
 8011952:	d30e      	bcc.n	8011972 <__mdiff+0xf2>
 8011954:	f10e 0103 	add.w	r1, lr, #3
 8011958:	1b49      	subs	r1, r1, r5
 801195a:	f021 0103 	bic.w	r1, r1, #3
 801195e:	3d03      	subs	r5, #3
 8011960:	45ae      	cmp	lr, r5
 8011962:	bf38      	it	cc
 8011964:	2100      	movcc	r1, #0
 8011966:	4419      	add	r1, r3
 8011968:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801196c:	b18b      	cbz	r3, 8011992 <__mdiff+0x112>
 801196e:	6117      	str	r7, [r2, #16]
 8011970:	e7a0      	b.n	80118b4 <__mdiff+0x34>
 8011972:	f854 8b04 	ldr.w	r8, [r4], #4
 8011976:	fa1f f188 	uxth.w	r1, r8
 801197a:	4461      	add	r1, ip
 801197c:	1408      	asrs	r0, r1, #16
 801197e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8011982:	b289      	uxth	r1, r1
 8011984:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011988:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801198c:	f846 1b04 	str.w	r1, [r6], #4
 8011990:	e7de      	b.n	8011950 <__mdiff+0xd0>
 8011992:	3f01      	subs	r7, #1
 8011994:	e7e8      	b.n	8011968 <__mdiff+0xe8>
 8011996:	bf00      	nop
 8011998:	0801389b 	.word	0x0801389b
 801199c:	080138ac 	.word	0x080138ac

080119a0 <__d2b>:
 80119a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80119a4:	2101      	movs	r1, #1
 80119a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80119aa:	4690      	mov	r8, r2
 80119ac:	461d      	mov	r5, r3
 80119ae:	f7ff fcd1 	bl	8011354 <_Balloc>
 80119b2:	4604      	mov	r4, r0
 80119b4:	b930      	cbnz	r0, 80119c4 <__d2b+0x24>
 80119b6:	4602      	mov	r2, r0
 80119b8:	f240 310a 	movw	r1, #778	; 0x30a
 80119bc:	4b24      	ldr	r3, [pc, #144]	; (8011a50 <__d2b+0xb0>)
 80119be:	4825      	ldr	r0, [pc, #148]	; (8011a54 <__d2b+0xb4>)
 80119c0:	f000 f9da 	bl	8011d78 <__assert_func>
 80119c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80119c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80119cc:	bb2d      	cbnz	r5, 8011a1a <__d2b+0x7a>
 80119ce:	9301      	str	r3, [sp, #4]
 80119d0:	f1b8 0300 	subs.w	r3, r8, #0
 80119d4:	d026      	beq.n	8011a24 <__d2b+0x84>
 80119d6:	4668      	mov	r0, sp
 80119d8:	9300      	str	r3, [sp, #0]
 80119da:	f7ff fd87 	bl	80114ec <__lo0bits>
 80119de:	9900      	ldr	r1, [sp, #0]
 80119e0:	b1f0      	cbz	r0, 8011a20 <__d2b+0x80>
 80119e2:	9a01      	ldr	r2, [sp, #4]
 80119e4:	f1c0 0320 	rsb	r3, r0, #32
 80119e8:	fa02 f303 	lsl.w	r3, r2, r3
 80119ec:	430b      	orrs	r3, r1
 80119ee:	40c2      	lsrs	r2, r0
 80119f0:	6163      	str	r3, [r4, #20]
 80119f2:	9201      	str	r2, [sp, #4]
 80119f4:	9b01      	ldr	r3, [sp, #4]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	bf14      	ite	ne
 80119fa:	2102      	movne	r1, #2
 80119fc:	2101      	moveq	r1, #1
 80119fe:	61a3      	str	r3, [r4, #24]
 8011a00:	6121      	str	r1, [r4, #16]
 8011a02:	b1c5      	cbz	r5, 8011a36 <__d2b+0x96>
 8011a04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011a08:	4405      	add	r5, r0
 8011a0a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011a0e:	603d      	str	r5, [r7, #0]
 8011a10:	6030      	str	r0, [r6, #0]
 8011a12:	4620      	mov	r0, r4
 8011a14:	b002      	add	sp, #8
 8011a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011a1e:	e7d6      	b.n	80119ce <__d2b+0x2e>
 8011a20:	6161      	str	r1, [r4, #20]
 8011a22:	e7e7      	b.n	80119f4 <__d2b+0x54>
 8011a24:	a801      	add	r0, sp, #4
 8011a26:	f7ff fd61 	bl	80114ec <__lo0bits>
 8011a2a:	2101      	movs	r1, #1
 8011a2c:	9b01      	ldr	r3, [sp, #4]
 8011a2e:	6121      	str	r1, [r4, #16]
 8011a30:	6163      	str	r3, [r4, #20]
 8011a32:	3020      	adds	r0, #32
 8011a34:	e7e5      	b.n	8011a02 <__d2b+0x62>
 8011a36:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8011a3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011a3e:	6038      	str	r0, [r7, #0]
 8011a40:	6918      	ldr	r0, [r3, #16]
 8011a42:	f7ff fd33 	bl	80114ac <__hi0bits>
 8011a46:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8011a4a:	6031      	str	r1, [r6, #0]
 8011a4c:	e7e1      	b.n	8011a12 <__d2b+0x72>
 8011a4e:	bf00      	nop
 8011a50:	0801389b 	.word	0x0801389b
 8011a54:	080138ac 	.word	0x080138ac

08011a58 <_calloc_r>:
 8011a58:	b538      	push	{r3, r4, r5, lr}
 8011a5a:	fb02 f501 	mul.w	r5, r2, r1
 8011a5e:	4629      	mov	r1, r5
 8011a60:	f7fe f8de 	bl	800fc20 <_malloc_r>
 8011a64:	4604      	mov	r4, r0
 8011a66:	b118      	cbz	r0, 8011a70 <_calloc_r+0x18>
 8011a68:	462a      	mov	r2, r5
 8011a6a:	2100      	movs	r1, #0
 8011a6c:	f7fe f884 	bl	800fb78 <memset>
 8011a70:	4620      	mov	r0, r4
 8011a72:	bd38      	pop	{r3, r4, r5, pc}

08011a74 <_realloc_r>:
 8011a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a76:	4607      	mov	r7, r0
 8011a78:	4614      	mov	r4, r2
 8011a7a:	460e      	mov	r6, r1
 8011a7c:	b921      	cbnz	r1, 8011a88 <_realloc_r+0x14>
 8011a7e:	4611      	mov	r1, r2
 8011a80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011a84:	f7fe b8cc 	b.w	800fc20 <_malloc_r>
 8011a88:	b922      	cbnz	r2, 8011a94 <_realloc_r+0x20>
 8011a8a:	f7fe f87d 	bl	800fb88 <_free_r>
 8011a8e:	4625      	mov	r5, r4
 8011a90:	4628      	mov	r0, r5
 8011a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a94:	f000 f9cf 	bl	8011e36 <_malloc_usable_size_r>
 8011a98:	42a0      	cmp	r0, r4
 8011a9a:	d20f      	bcs.n	8011abc <_realloc_r+0x48>
 8011a9c:	4621      	mov	r1, r4
 8011a9e:	4638      	mov	r0, r7
 8011aa0:	f7fe f8be 	bl	800fc20 <_malloc_r>
 8011aa4:	4605      	mov	r5, r0
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	d0f2      	beq.n	8011a90 <_realloc_r+0x1c>
 8011aaa:	4631      	mov	r1, r6
 8011aac:	4622      	mov	r2, r4
 8011aae:	f7ff fc37 	bl	8011320 <memcpy>
 8011ab2:	4631      	mov	r1, r6
 8011ab4:	4638      	mov	r0, r7
 8011ab6:	f7fe f867 	bl	800fb88 <_free_r>
 8011aba:	e7e9      	b.n	8011a90 <_realloc_r+0x1c>
 8011abc:	4635      	mov	r5, r6
 8011abe:	e7e7      	b.n	8011a90 <_realloc_r+0x1c>

08011ac0 <__ssputs_r>:
 8011ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ac4:	688e      	ldr	r6, [r1, #8]
 8011ac6:	4682      	mov	sl, r0
 8011ac8:	429e      	cmp	r6, r3
 8011aca:	460c      	mov	r4, r1
 8011acc:	4690      	mov	r8, r2
 8011ace:	461f      	mov	r7, r3
 8011ad0:	d838      	bhi.n	8011b44 <__ssputs_r+0x84>
 8011ad2:	898a      	ldrh	r2, [r1, #12]
 8011ad4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011ad8:	d032      	beq.n	8011b40 <__ssputs_r+0x80>
 8011ada:	6825      	ldr	r5, [r4, #0]
 8011adc:	6909      	ldr	r1, [r1, #16]
 8011ade:	3301      	adds	r3, #1
 8011ae0:	eba5 0901 	sub.w	r9, r5, r1
 8011ae4:	6965      	ldr	r5, [r4, #20]
 8011ae6:	444b      	add	r3, r9
 8011ae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011aec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011af0:	106d      	asrs	r5, r5, #1
 8011af2:	429d      	cmp	r5, r3
 8011af4:	bf38      	it	cc
 8011af6:	461d      	movcc	r5, r3
 8011af8:	0553      	lsls	r3, r2, #21
 8011afa:	d531      	bpl.n	8011b60 <__ssputs_r+0xa0>
 8011afc:	4629      	mov	r1, r5
 8011afe:	f7fe f88f 	bl	800fc20 <_malloc_r>
 8011b02:	4606      	mov	r6, r0
 8011b04:	b950      	cbnz	r0, 8011b1c <__ssputs_r+0x5c>
 8011b06:	230c      	movs	r3, #12
 8011b08:	f04f 30ff 	mov.w	r0, #4294967295
 8011b0c:	f8ca 3000 	str.w	r3, [sl]
 8011b10:	89a3      	ldrh	r3, [r4, #12]
 8011b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b16:	81a3      	strh	r3, [r4, #12]
 8011b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b1c:	464a      	mov	r2, r9
 8011b1e:	6921      	ldr	r1, [r4, #16]
 8011b20:	f7ff fbfe 	bl	8011320 <memcpy>
 8011b24:	89a3      	ldrh	r3, [r4, #12]
 8011b26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b2e:	81a3      	strh	r3, [r4, #12]
 8011b30:	6126      	str	r6, [r4, #16]
 8011b32:	444e      	add	r6, r9
 8011b34:	6026      	str	r6, [r4, #0]
 8011b36:	463e      	mov	r6, r7
 8011b38:	6165      	str	r5, [r4, #20]
 8011b3a:	eba5 0509 	sub.w	r5, r5, r9
 8011b3e:	60a5      	str	r5, [r4, #8]
 8011b40:	42be      	cmp	r6, r7
 8011b42:	d900      	bls.n	8011b46 <__ssputs_r+0x86>
 8011b44:	463e      	mov	r6, r7
 8011b46:	4632      	mov	r2, r6
 8011b48:	4641      	mov	r1, r8
 8011b4a:	6820      	ldr	r0, [r4, #0]
 8011b4c:	f000 f959 	bl	8011e02 <memmove>
 8011b50:	68a3      	ldr	r3, [r4, #8]
 8011b52:	6822      	ldr	r2, [r4, #0]
 8011b54:	1b9b      	subs	r3, r3, r6
 8011b56:	4432      	add	r2, r6
 8011b58:	2000      	movs	r0, #0
 8011b5a:	60a3      	str	r3, [r4, #8]
 8011b5c:	6022      	str	r2, [r4, #0]
 8011b5e:	e7db      	b.n	8011b18 <__ssputs_r+0x58>
 8011b60:	462a      	mov	r2, r5
 8011b62:	f7ff ff87 	bl	8011a74 <_realloc_r>
 8011b66:	4606      	mov	r6, r0
 8011b68:	2800      	cmp	r0, #0
 8011b6a:	d1e1      	bne.n	8011b30 <__ssputs_r+0x70>
 8011b6c:	4650      	mov	r0, sl
 8011b6e:	6921      	ldr	r1, [r4, #16]
 8011b70:	f7fe f80a 	bl	800fb88 <_free_r>
 8011b74:	e7c7      	b.n	8011b06 <__ssputs_r+0x46>
	...

08011b78 <_svfiprintf_r>:
 8011b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b7c:	4698      	mov	r8, r3
 8011b7e:	898b      	ldrh	r3, [r1, #12]
 8011b80:	4607      	mov	r7, r0
 8011b82:	061b      	lsls	r3, r3, #24
 8011b84:	460d      	mov	r5, r1
 8011b86:	4614      	mov	r4, r2
 8011b88:	b09d      	sub	sp, #116	; 0x74
 8011b8a:	d50e      	bpl.n	8011baa <_svfiprintf_r+0x32>
 8011b8c:	690b      	ldr	r3, [r1, #16]
 8011b8e:	b963      	cbnz	r3, 8011baa <_svfiprintf_r+0x32>
 8011b90:	2140      	movs	r1, #64	; 0x40
 8011b92:	f7fe f845 	bl	800fc20 <_malloc_r>
 8011b96:	6028      	str	r0, [r5, #0]
 8011b98:	6128      	str	r0, [r5, #16]
 8011b9a:	b920      	cbnz	r0, 8011ba6 <_svfiprintf_r+0x2e>
 8011b9c:	230c      	movs	r3, #12
 8011b9e:	603b      	str	r3, [r7, #0]
 8011ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ba4:	e0d1      	b.n	8011d4a <_svfiprintf_r+0x1d2>
 8011ba6:	2340      	movs	r3, #64	; 0x40
 8011ba8:	616b      	str	r3, [r5, #20]
 8011baa:	2300      	movs	r3, #0
 8011bac:	9309      	str	r3, [sp, #36]	; 0x24
 8011bae:	2320      	movs	r3, #32
 8011bb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011bb4:	2330      	movs	r3, #48	; 0x30
 8011bb6:	f04f 0901 	mov.w	r9, #1
 8011bba:	f8cd 800c 	str.w	r8, [sp, #12]
 8011bbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011d64 <_svfiprintf_r+0x1ec>
 8011bc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011bc6:	4623      	mov	r3, r4
 8011bc8:	469a      	mov	sl, r3
 8011bca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bce:	b10a      	cbz	r2, 8011bd4 <_svfiprintf_r+0x5c>
 8011bd0:	2a25      	cmp	r2, #37	; 0x25
 8011bd2:	d1f9      	bne.n	8011bc8 <_svfiprintf_r+0x50>
 8011bd4:	ebba 0b04 	subs.w	fp, sl, r4
 8011bd8:	d00b      	beq.n	8011bf2 <_svfiprintf_r+0x7a>
 8011bda:	465b      	mov	r3, fp
 8011bdc:	4622      	mov	r2, r4
 8011bde:	4629      	mov	r1, r5
 8011be0:	4638      	mov	r0, r7
 8011be2:	f7ff ff6d 	bl	8011ac0 <__ssputs_r>
 8011be6:	3001      	adds	r0, #1
 8011be8:	f000 80aa 	beq.w	8011d40 <_svfiprintf_r+0x1c8>
 8011bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011bee:	445a      	add	r2, fp
 8011bf0:	9209      	str	r2, [sp, #36]	; 0x24
 8011bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	f000 80a2 	beq.w	8011d40 <_svfiprintf_r+0x1c8>
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8011c02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c06:	f10a 0a01 	add.w	sl, sl, #1
 8011c0a:	9304      	str	r3, [sp, #16]
 8011c0c:	9307      	str	r3, [sp, #28]
 8011c0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c12:	931a      	str	r3, [sp, #104]	; 0x68
 8011c14:	4654      	mov	r4, sl
 8011c16:	2205      	movs	r2, #5
 8011c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c1c:	4851      	ldr	r0, [pc, #324]	; (8011d64 <_svfiprintf_r+0x1ec>)
 8011c1e:	f7ff fb71 	bl	8011304 <memchr>
 8011c22:	9a04      	ldr	r2, [sp, #16]
 8011c24:	b9d8      	cbnz	r0, 8011c5e <_svfiprintf_r+0xe6>
 8011c26:	06d0      	lsls	r0, r2, #27
 8011c28:	bf44      	itt	mi
 8011c2a:	2320      	movmi	r3, #32
 8011c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c30:	0711      	lsls	r1, r2, #28
 8011c32:	bf44      	itt	mi
 8011c34:	232b      	movmi	r3, #43	; 0x2b
 8011c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8011c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8011c40:	d015      	beq.n	8011c6e <_svfiprintf_r+0xf6>
 8011c42:	4654      	mov	r4, sl
 8011c44:	2000      	movs	r0, #0
 8011c46:	f04f 0c0a 	mov.w	ip, #10
 8011c4a:	9a07      	ldr	r2, [sp, #28]
 8011c4c:	4621      	mov	r1, r4
 8011c4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c52:	3b30      	subs	r3, #48	; 0x30
 8011c54:	2b09      	cmp	r3, #9
 8011c56:	d94e      	bls.n	8011cf6 <_svfiprintf_r+0x17e>
 8011c58:	b1b0      	cbz	r0, 8011c88 <_svfiprintf_r+0x110>
 8011c5a:	9207      	str	r2, [sp, #28]
 8011c5c:	e014      	b.n	8011c88 <_svfiprintf_r+0x110>
 8011c5e:	eba0 0308 	sub.w	r3, r0, r8
 8011c62:	fa09 f303 	lsl.w	r3, r9, r3
 8011c66:	4313      	orrs	r3, r2
 8011c68:	46a2      	mov	sl, r4
 8011c6a:	9304      	str	r3, [sp, #16]
 8011c6c:	e7d2      	b.n	8011c14 <_svfiprintf_r+0x9c>
 8011c6e:	9b03      	ldr	r3, [sp, #12]
 8011c70:	1d19      	adds	r1, r3, #4
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	9103      	str	r1, [sp, #12]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	bfbb      	ittet	lt
 8011c7a:	425b      	neglt	r3, r3
 8011c7c:	f042 0202 	orrlt.w	r2, r2, #2
 8011c80:	9307      	strge	r3, [sp, #28]
 8011c82:	9307      	strlt	r3, [sp, #28]
 8011c84:	bfb8      	it	lt
 8011c86:	9204      	strlt	r2, [sp, #16]
 8011c88:	7823      	ldrb	r3, [r4, #0]
 8011c8a:	2b2e      	cmp	r3, #46	; 0x2e
 8011c8c:	d10c      	bne.n	8011ca8 <_svfiprintf_r+0x130>
 8011c8e:	7863      	ldrb	r3, [r4, #1]
 8011c90:	2b2a      	cmp	r3, #42	; 0x2a
 8011c92:	d135      	bne.n	8011d00 <_svfiprintf_r+0x188>
 8011c94:	9b03      	ldr	r3, [sp, #12]
 8011c96:	3402      	adds	r4, #2
 8011c98:	1d1a      	adds	r2, r3, #4
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	9203      	str	r2, [sp, #12]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	bfb8      	it	lt
 8011ca2:	f04f 33ff 	movlt.w	r3, #4294967295
 8011ca6:	9305      	str	r3, [sp, #20]
 8011ca8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011d74 <_svfiprintf_r+0x1fc>
 8011cac:	2203      	movs	r2, #3
 8011cae:	4650      	mov	r0, sl
 8011cb0:	7821      	ldrb	r1, [r4, #0]
 8011cb2:	f7ff fb27 	bl	8011304 <memchr>
 8011cb6:	b140      	cbz	r0, 8011cca <_svfiprintf_r+0x152>
 8011cb8:	2340      	movs	r3, #64	; 0x40
 8011cba:	eba0 000a 	sub.w	r0, r0, sl
 8011cbe:	fa03 f000 	lsl.w	r0, r3, r0
 8011cc2:	9b04      	ldr	r3, [sp, #16]
 8011cc4:	3401      	adds	r4, #1
 8011cc6:	4303      	orrs	r3, r0
 8011cc8:	9304      	str	r3, [sp, #16]
 8011cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cce:	2206      	movs	r2, #6
 8011cd0:	4825      	ldr	r0, [pc, #148]	; (8011d68 <_svfiprintf_r+0x1f0>)
 8011cd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011cd6:	f7ff fb15 	bl	8011304 <memchr>
 8011cda:	2800      	cmp	r0, #0
 8011cdc:	d038      	beq.n	8011d50 <_svfiprintf_r+0x1d8>
 8011cde:	4b23      	ldr	r3, [pc, #140]	; (8011d6c <_svfiprintf_r+0x1f4>)
 8011ce0:	bb1b      	cbnz	r3, 8011d2a <_svfiprintf_r+0x1b2>
 8011ce2:	9b03      	ldr	r3, [sp, #12]
 8011ce4:	3307      	adds	r3, #7
 8011ce6:	f023 0307 	bic.w	r3, r3, #7
 8011cea:	3308      	adds	r3, #8
 8011cec:	9303      	str	r3, [sp, #12]
 8011cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cf0:	4433      	add	r3, r6
 8011cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8011cf4:	e767      	b.n	8011bc6 <_svfiprintf_r+0x4e>
 8011cf6:	460c      	mov	r4, r1
 8011cf8:	2001      	movs	r0, #1
 8011cfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8011cfe:	e7a5      	b.n	8011c4c <_svfiprintf_r+0xd4>
 8011d00:	2300      	movs	r3, #0
 8011d02:	f04f 0c0a 	mov.w	ip, #10
 8011d06:	4619      	mov	r1, r3
 8011d08:	3401      	adds	r4, #1
 8011d0a:	9305      	str	r3, [sp, #20]
 8011d0c:	4620      	mov	r0, r4
 8011d0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d12:	3a30      	subs	r2, #48	; 0x30
 8011d14:	2a09      	cmp	r2, #9
 8011d16:	d903      	bls.n	8011d20 <_svfiprintf_r+0x1a8>
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d0c5      	beq.n	8011ca8 <_svfiprintf_r+0x130>
 8011d1c:	9105      	str	r1, [sp, #20]
 8011d1e:	e7c3      	b.n	8011ca8 <_svfiprintf_r+0x130>
 8011d20:	4604      	mov	r4, r0
 8011d22:	2301      	movs	r3, #1
 8011d24:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d28:	e7f0      	b.n	8011d0c <_svfiprintf_r+0x194>
 8011d2a:	ab03      	add	r3, sp, #12
 8011d2c:	9300      	str	r3, [sp, #0]
 8011d2e:	462a      	mov	r2, r5
 8011d30:	4638      	mov	r0, r7
 8011d32:	4b0f      	ldr	r3, [pc, #60]	; (8011d70 <_svfiprintf_r+0x1f8>)
 8011d34:	a904      	add	r1, sp, #16
 8011d36:	f7fe f86b 	bl	800fe10 <_printf_float>
 8011d3a:	1c42      	adds	r2, r0, #1
 8011d3c:	4606      	mov	r6, r0
 8011d3e:	d1d6      	bne.n	8011cee <_svfiprintf_r+0x176>
 8011d40:	89ab      	ldrh	r3, [r5, #12]
 8011d42:	065b      	lsls	r3, r3, #25
 8011d44:	f53f af2c 	bmi.w	8011ba0 <_svfiprintf_r+0x28>
 8011d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d4a:	b01d      	add	sp, #116	; 0x74
 8011d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d50:	ab03      	add	r3, sp, #12
 8011d52:	9300      	str	r3, [sp, #0]
 8011d54:	462a      	mov	r2, r5
 8011d56:	4638      	mov	r0, r7
 8011d58:	4b05      	ldr	r3, [pc, #20]	; (8011d70 <_svfiprintf_r+0x1f8>)
 8011d5a:	a904      	add	r1, sp, #16
 8011d5c:	f7fe faf4 	bl	8010348 <_printf_i>
 8011d60:	e7eb      	b.n	8011d3a <_svfiprintf_r+0x1c2>
 8011d62:	bf00      	nop
 8011d64:	08013a0c 	.word	0x08013a0c
 8011d68:	08013a16 	.word	0x08013a16
 8011d6c:	0800fe11 	.word	0x0800fe11
 8011d70:	08011ac1 	.word	0x08011ac1
 8011d74:	08013a12 	.word	0x08013a12

08011d78 <__assert_func>:
 8011d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d7a:	4614      	mov	r4, r2
 8011d7c:	461a      	mov	r2, r3
 8011d7e:	4b09      	ldr	r3, [pc, #36]	; (8011da4 <__assert_func+0x2c>)
 8011d80:	4605      	mov	r5, r0
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	68d8      	ldr	r0, [r3, #12]
 8011d86:	b14c      	cbz	r4, 8011d9c <__assert_func+0x24>
 8011d88:	4b07      	ldr	r3, [pc, #28]	; (8011da8 <__assert_func+0x30>)
 8011d8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011d8e:	9100      	str	r1, [sp, #0]
 8011d90:	462b      	mov	r3, r5
 8011d92:	4906      	ldr	r1, [pc, #24]	; (8011dac <__assert_func+0x34>)
 8011d94:	f000 f80e 	bl	8011db4 <fiprintf>
 8011d98:	f000 fa7a 	bl	8012290 <abort>
 8011d9c:	4b04      	ldr	r3, [pc, #16]	; (8011db0 <__assert_func+0x38>)
 8011d9e:	461c      	mov	r4, r3
 8011da0:	e7f3      	b.n	8011d8a <__assert_func+0x12>
 8011da2:	bf00      	nop
 8011da4:	200001a8 	.word	0x200001a8
 8011da8:	08013a1d 	.word	0x08013a1d
 8011dac:	08013a2a 	.word	0x08013a2a
 8011db0:	08013a58 	.word	0x08013a58

08011db4 <fiprintf>:
 8011db4:	b40e      	push	{r1, r2, r3}
 8011db6:	b503      	push	{r0, r1, lr}
 8011db8:	4601      	mov	r1, r0
 8011dba:	ab03      	add	r3, sp, #12
 8011dbc:	4805      	ldr	r0, [pc, #20]	; (8011dd4 <fiprintf+0x20>)
 8011dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dc2:	6800      	ldr	r0, [r0, #0]
 8011dc4:	9301      	str	r3, [sp, #4]
 8011dc6:	f000 f865 	bl	8011e94 <_vfiprintf_r>
 8011dca:	b002      	add	sp, #8
 8011dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011dd0:	b003      	add	sp, #12
 8011dd2:	4770      	bx	lr
 8011dd4:	200001a8 	.word	0x200001a8

08011dd8 <__retarget_lock_init_recursive>:
 8011dd8:	4770      	bx	lr

08011dda <__retarget_lock_acquire_recursive>:
 8011dda:	4770      	bx	lr

08011ddc <__retarget_lock_release_recursive>:
 8011ddc:	4770      	bx	lr

08011dde <__ascii_mbtowc>:
 8011dde:	b082      	sub	sp, #8
 8011de0:	b901      	cbnz	r1, 8011de4 <__ascii_mbtowc+0x6>
 8011de2:	a901      	add	r1, sp, #4
 8011de4:	b142      	cbz	r2, 8011df8 <__ascii_mbtowc+0x1a>
 8011de6:	b14b      	cbz	r3, 8011dfc <__ascii_mbtowc+0x1e>
 8011de8:	7813      	ldrb	r3, [r2, #0]
 8011dea:	600b      	str	r3, [r1, #0]
 8011dec:	7812      	ldrb	r2, [r2, #0]
 8011dee:	1e10      	subs	r0, r2, #0
 8011df0:	bf18      	it	ne
 8011df2:	2001      	movne	r0, #1
 8011df4:	b002      	add	sp, #8
 8011df6:	4770      	bx	lr
 8011df8:	4610      	mov	r0, r2
 8011dfa:	e7fb      	b.n	8011df4 <__ascii_mbtowc+0x16>
 8011dfc:	f06f 0001 	mvn.w	r0, #1
 8011e00:	e7f8      	b.n	8011df4 <__ascii_mbtowc+0x16>

08011e02 <memmove>:
 8011e02:	4288      	cmp	r0, r1
 8011e04:	b510      	push	{r4, lr}
 8011e06:	eb01 0402 	add.w	r4, r1, r2
 8011e0a:	d902      	bls.n	8011e12 <memmove+0x10>
 8011e0c:	4284      	cmp	r4, r0
 8011e0e:	4623      	mov	r3, r4
 8011e10:	d807      	bhi.n	8011e22 <memmove+0x20>
 8011e12:	1e43      	subs	r3, r0, #1
 8011e14:	42a1      	cmp	r1, r4
 8011e16:	d008      	beq.n	8011e2a <memmove+0x28>
 8011e18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e20:	e7f8      	b.n	8011e14 <memmove+0x12>
 8011e22:	4601      	mov	r1, r0
 8011e24:	4402      	add	r2, r0
 8011e26:	428a      	cmp	r2, r1
 8011e28:	d100      	bne.n	8011e2c <memmove+0x2a>
 8011e2a:	bd10      	pop	{r4, pc}
 8011e2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e30:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e34:	e7f7      	b.n	8011e26 <memmove+0x24>

08011e36 <_malloc_usable_size_r>:
 8011e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e3a:	1f18      	subs	r0, r3, #4
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	bfbc      	itt	lt
 8011e40:	580b      	ldrlt	r3, [r1, r0]
 8011e42:	18c0      	addlt	r0, r0, r3
 8011e44:	4770      	bx	lr

08011e46 <__sfputc_r>:
 8011e46:	6893      	ldr	r3, [r2, #8]
 8011e48:	b410      	push	{r4}
 8011e4a:	3b01      	subs	r3, #1
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	6093      	str	r3, [r2, #8]
 8011e50:	da07      	bge.n	8011e62 <__sfputc_r+0x1c>
 8011e52:	6994      	ldr	r4, [r2, #24]
 8011e54:	42a3      	cmp	r3, r4
 8011e56:	db01      	blt.n	8011e5c <__sfputc_r+0x16>
 8011e58:	290a      	cmp	r1, #10
 8011e5a:	d102      	bne.n	8011e62 <__sfputc_r+0x1c>
 8011e5c:	bc10      	pop	{r4}
 8011e5e:	f000 b949 	b.w	80120f4 <__swbuf_r>
 8011e62:	6813      	ldr	r3, [r2, #0]
 8011e64:	1c58      	adds	r0, r3, #1
 8011e66:	6010      	str	r0, [r2, #0]
 8011e68:	7019      	strb	r1, [r3, #0]
 8011e6a:	4608      	mov	r0, r1
 8011e6c:	bc10      	pop	{r4}
 8011e6e:	4770      	bx	lr

08011e70 <__sfputs_r>:
 8011e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e72:	4606      	mov	r6, r0
 8011e74:	460f      	mov	r7, r1
 8011e76:	4614      	mov	r4, r2
 8011e78:	18d5      	adds	r5, r2, r3
 8011e7a:	42ac      	cmp	r4, r5
 8011e7c:	d101      	bne.n	8011e82 <__sfputs_r+0x12>
 8011e7e:	2000      	movs	r0, #0
 8011e80:	e007      	b.n	8011e92 <__sfputs_r+0x22>
 8011e82:	463a      	mov	r2, r7
 8011e84:	4630      	mov	r0, r6
 8011e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e8a:	f7ff ffdc 	bl	8011e46 <__sfputc_r>
 8011e8e:	1c43      	adds	r3, r0, #1
 8011e90:	d1f3      	bne.n	8011e7a <__sfputs_r+0xa>
 8011e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e94 <_vfiprintf_r>:
 8011e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e98:	460d      	mov	r5, r1
 8011e9a:	4614      	mov	r4, r2
 8011e9c:	4698      	mov	r8, r3
 8011e9e:	4606      	mov	r6, r0
 8011ea0:	b09d      	sub	sp, #116	; 0x74
 8011ea2:	b118      	cbz	r0, 8011eac <_vfiprintf_r+0x18>
 8011ea4:	6983      	ldr	r3, [r0, #24]
 8011ea6:	b90b      	cbnz	r3, 8011eac <_vfiprintf_r+0x18>
 8011ea8:	f000 fb14 	bl	80124d4 <__sinit>
 8011eac:	4b89      	ldr	r3, [pc, #548]	; (80120d4 <_vfiprintf_r+0x240>)
 8011eae:	429d      	cmp	r5, r3
 8011eb0:	d11b      	bne.n	8011eea <_vfiprintf_r+0x56>
 8011eb2:	6875      	ldr	r5, [r6, #4]
 8011eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011eb6:	07d9      	lsls	r1, r3, #31
 8011eb8:	d405      	bmi.n	8011ec6 <_vfiprintf_r+0x32>
 8011eba:	89ab      	ldrh	r3, [r5, #12]
 8011ebc:	059a      	lsls	r2, r3, #22
 8011ebe:	d402      	bmi.n	8011ec6 <_vfiprintf_r+0x32>
 8011ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ec2:	f7ff ff8a 	bl	8011dda <__retarget_lock_acquire_recursive>
 8011ec6:	89ab      	ldrh	r3, [r5, #12]
 8011ec8:	071b      	lsls	r3, r3, #28
 8011eca:	d501      	bpl.n	8011ed0 <_vfiprintf_r+0x3c>
 8011ecc:	692b      	ldr	r3, [r5, #16]
 8011ece:	b9eb      	cbnz	r3, 8011f0c <_vfiprintf_r+0x78>
 8011ed0:	4629      	mov	r1, r5
 8011ed2:	4630      	mov	r0, r6
 8011ed4:	f000 f96e 	bl	80121b4 <__swsetup_r>
 8011ed8:	b1c0      	cbz	r0, 8011f0c <_vfiprintf_r+0x78>
 8011eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011edc:	07dc      	lsls	r4, r3, #31
 8011ede:	d50e      	bpl.n	8011efe <_vfiprintf_r+0x6a>
 8011ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ee4:	b01d      	add	sp, #116	; 0x74
 8011ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eea:	4b7b      	ldr	r3, [pc, #492]	; (80120d8 <_vfiprintf_r+0x244>)
 8011eec:	429d      	cmp	r5, r3
 8011eee:	d101      	bne.n	8011ef4 <_vfiprintf_r+0x60>
 8011ef0:	68b5      	ldr	r5, [r6, #8]
 8011ef2:	e7df      	b.n	8011eb4 <_vfiprintf_r+0x20>
 8011ef4:	4b79      	ldr	r3, [pc, #484]	; (80120dc <_vfiprintf_r+0x248>)
 8011ef6:	429d      	cmp	r5, r3
 8011ef8:	bf08      	it	eq
 8011efa:	68f5      	ldreq	r5, [r6, #12]
 8011efc:	e7da      	b.n	8011eb4 <_vfiprintf_r+0x20>
 8011efe:	89ab      	ldrh	r3, [r5, #12]
 8011f00:	0598      	lsls	r0, r3, #22
 8011f02:	d4ed      	bmi.n	8011ee0 <_vfiprintf_r+0x4c>
 8011f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f06:	f7ff ff69 	bl	8011ddc <__retarget_lock_release_recursive>
 8011f0a:	e7e9      	b.n	8011ee0 <_vfiprintf_r+0x4c>
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8011f10:	2320      	movs	r3, #32
 8011f12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f16:	2330      	movs	r3, #48	; 0x30
 8011f18:	f04f 0901 	mov.w	r9, #1
 8011f1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f20:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80120e0 <_vfiprintf_r+0x24c>
 8011f24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f28:	4623      	mov	r3, r4
 8011f2a:	469a      	mov	sl, r3
 8011f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f30:	b10a      	cbz	r2, 8011f36 <_vfiprintf_r+0xa2>
 8011f32:	2a25      	cmp	r2, #37	; 0x25
 8011f34:	d1f9      	bne.n	8011f2a <_vfiprintf_r+0x96>
 8011f36:	ebba 0b04 	subs.w	fp, sl, r4
 8011f3a:	d00b      	beq.n	8011f54 <_vfiprintf_r+0xc0>
 8011f3c:	465b      	mov	r3, fp
 8011f3e:	4622      	mov	r2, r4
 8011f40:	4629      	mov	r1, r5
 8011f42:	4630      	mov	r0, r6
 8011f44:	f7ff ff94 	bl	8011e70 <__sfputs_r>
 8011f48:	3001      	adds	r0, #1
 8011f4a:	f000 80aa 	beq.w	80120a2 <_vfiprintf_r+0x20e>
 8011f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f50:	445a      	add	r2, fp
 8011f52:	9209      	str	r2, [sp, #36]	; 0x24
 8011f54:	f89a 3000 	ldrb.w	r3, [sl]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	f000 80a2 	beq.w	80120a2 <_vfiprintf_r+0x20e>
 8011f5e:	2300      	movs	r3, #0
 8011f60:	f04f 32ff 	mov.w	r2, #4294967295
 8011f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f68:	f10a 0a01 	add.w	sl, sl, #1
 8011f6c:	9304      	str	r3, [sp, #16]
 8011f6e:	9307      	str	r3, [sp, #28]
 8011f70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f74:	931a      	str	r3, [sp, #104]	; 0x68
 8011f76:	4654      	mov	r4, sl
 8011f78:	2205      	movs	r2, #5
 8011f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f7e:	4858      	ldr	r0, [pc, #352]	; (80120e0 <_vfiprintf_r+0x24c>)
 8011f80:	f7ff f9c0 	bl	8011304 <memchr>
 8011f84:	9a04      	ldr	r2, [sp, #16]
 8011f86:	b9d8      	cbnz	r0, 8011fc0 <_vfiprintf_r+0x12c>
 8011f88:	06d1      	lsls	r1, r2, #27
 8011f8a:	bf44      	itt	mi
 8011f8c:	2320      	movmi	r3, #32
 8011f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f92:	0713      	lsls	r3, r2, #28
 8011f94:	bf44      	itt	mi
 8011f96:	232b      	movmi	r3, #43	; 0x2b
 8011f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8011fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8011fa2:	d015      	beq.n	8011fd0 <_vfiprintf_r+0x13c>
 8011fa4:	4654      	mov	r4, sl
 8011fa6:	2000      	movs	r0, #0
 8011fa8:	f04f 0c0a 	mov.w	ip, #10
 8011fac:	9a07      	ldr	r2, [sp, #28]
 8011fae:	4621      	mov	r1, r4
 8011fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fb4:	3b30      	subs	r3, #48	; 0x30
 8011fb6:	2b09      	cmp	r3, #9
 8011fb8:	d94e      	bls.n	8012058 <_vfiprintf_r+0x1c4>
 8011fba:	b1b0      	cbz	r0, 8011fea <_vfiprintf_r+0x156>
 8011fbc:	9207      	str	r2, [sp, #28]
 8011fbe:	e014      	b.n	8011fea <_vfiprintf_r+0x156>
 8011fc0:	eba0 0308 	sub.w	r3, r0, r8
 8011fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8011fc8:	4313      	orrs	r3, r2
 8011fca:	46a2      	mov	sl, r4
 8011fcc:	9304      	str	r3, [sp, #16]
 8011fce:	e7d2      	b.n	8011f76 <_vfiprintf_r+0xe2>
 8011fd0:	9b03      	ldr	r3, [sp, #12]
 8011fd2:	1d19      	adds	r1, r3, #4
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	9103      	str	r1, [sp, #12]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	bfbb      	ittet	lt
 8011fdc:	425b      	neglt	r3, r3
 8011fde:	f042 0202 	orrlt.w	r2, r2, #2
 8011fe2:	9307      	strge	r3, [sp, #28]
 8011fe4:	9307      	strlt	r3, [sp, #28]
 8011fe6:	bfb8      	it	lt
 8011fe8:	9204      	strlt	r2, [sp, #16]
 8011fea:	7823      	ldrb	r3, [r4, #0]
 8011fec:	2b2e      	cmp	r3, #46	; 0x2e
 8011fee:	d10c      	bne.n	801200a <_vfiprintf_r+0x176>
 8011ff0:	7863      	ldrb	r3, [r4, #1]
 8011ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8011ff4:	d135      	bne.n	8012062 <_vfiprintf_r+0x1ce>
 8011ff6:	9b03      	ldr	r3, [sp, #12]
 8011ff8:	3402      	adds	r4, #2
 8011ffa:	1d1a      	adds	r2, r3, #4
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	9203      	str	r2, [sp, #12]
 8012000:	2b00      	cmp	r3, #0
 8012002:	bfb8      	it	lt
 8012004:	f04f 33ff 	movlt.w	r3, #4294967295
 8012008:	9305      	str	r3, [sp, #20]
 801200a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80120f0 <_vfiprintf_r+0x25c>
 801200e:	2203      	movs	r2, #3
 8012010:	4650      	mov	r0, sl
 8012012:	7821      	ldrb	r1, [r4, #0]
 8012014:	f7ff f976 	bl	8011304 <memchr>
 8012018:	b140      	cbz	r0, 801202c <_vfiprintf_r+0x198>
 801201a:	2340      	movs	r3, #64	; 0x40
 801201c:	eba0 000a 	sub.w	r0, r0, sl
 8012020:	fa03 f000 	lsl.w	r0, r3, r0
 8012024:	9b04      	ldr	r3, [sp, #16]
 8012026:	3401      	adds	r4, #1
 8012028:	4303      	orrs	r3, r0
 801202a:	9304      	str	r3, [sp, #16]
 801202c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012030:	2206      	movs	r2, #6
 8012032:	482c      	ldr	r0, [pc, #176]	; (80120e4 <_vfiprintf_r+0x250>)
 8012034:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012038:	f7ff f964 	bl	8011304 <memchr>
 801203c:	2800      	cmp	r0, #0
 801203e:	d03f      	beq.n	80120c0 <_vfiprintf_r+0x22c>
 8012040:	4b29      	ldr	r3, [pc, #164]	; (80120e8 <_vfiprintf_r+0x254>)
 8012042:	bb1b      	cbnz	r3, 801208c <_vfiprintf_r+0x1f8>
 8012044:	9b03      	ldr	r3, [sp, #12]
 8012046:	3307      	adds	r3, #7
 8012048:	f023 0307 	bic.w	r3, r3, #7
 801204c:	3308      	adds	r3, #8
 801204e:	9303      	str	r3, [sp, #12]
 8012050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012052:	443b      	add	r3, r7
 8012054:	9309      	str	r3, [sp, #36]	; 0x24
 8012056:	e767      	b.n	8011f28 <_vfiprintf_r+0x94>
 8012058:	460c      	mov	r4, r1
 801205a:	2001      	movs	r0, #1
 801205c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012060:	e7a5      	b.n	8011fae <_vfiprintf_r+0x11a>
 8012062:	2300      	movs	r3, #0
 8012064:	f04f 0c0a 	mov.w	ip, #10
 8012068:	4619      	mov	r1, r3
 801206a:	3401      	adds	r4, #1
 801206c:	9305      	str	r3, [sp, #20]
 801206e:	4620      	mov	r0, r4
 8012070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012074:	3a30      	subs	r2, #48	; 0x30
 8012076:	2a09      	cmp	r2, #9
 8012078:	d903      	bls.n	8012082 <_vfiprintf_r+0x1ee>
 801207a:	2b00      	cmp	r3, #0
 801207c:	d0c5      	beq.n	801200a <_vfiprintf_r+0x176>
 801207e:	9105      	str	r1, [sp, #20]
 8012080:	e7c3      	b.n	801200a <_vfiprintf_r+0x176>
 8012082:	4604      	mov	r4, r0
 8012084:	2301      	movs	r3, #1
 8012086:	fb0c 2101 	mla	r1, ip, r1, r2
 801208a:	e7f0      	b.n	801206e <_vfiprintf_r+0x1da>
 801208c:	ab03      	add	r3, sp, #12
 801208e:	9300      	str	r3, [sp, #0]
 8012090:	462a      	mov	r2, r5
 8012092:	4630      	mov	r0, r6
 8012094:	4b15      	ldr	r3, [pc, #84]	; (80120ec <_vfiprintf_r+0x258>)
 8012096:	a904      	add	r1, sp, #16
 8012098:	f7fd feba 	bl	800fe10 <_printf_float>
 801209c:	4607      	mov	r7, r0
 801209e:	1c78      	adds	r0, r7, #1
 80120a0:	d1d6      	bne.n	8012050 <_vfiprintf_r+0x1bc>
 80120a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80120a4:	07d9      	lsls	r1, r3, #31
 80120a6:	d405      	bmi.n	80120b4 <_vfiprintf_r+0x220>
 80120a8:	89ab      	ldrh	r3, [r5, #12]
 80120aa:	059a      	lsls	r2, r3, #22
 80120ac:	d402      	bmi.n	80120b4 <_vfiprintf_r+0x220>
 80120ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80120b0:	f7ff fe94 	bl	8011ddc <__retarget_lock_release_recursive>
 80120b4:	89ab      	ldrh	r3, [r5, #12]
 80120b6:	065b      	lsls	r3, r3, #25
 80120b8:	f53f af12 	bmi.w	8011ee0 <_vfiprintf_r+0x4c>
 80120bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120be:	e711      	b.n	8011ee4 <_vfiprintf_r+0x50>
 80120c0:	ab03      	add	r3, sp, #12
 80120c2:	9300      	str	r3, [sp, #0]
 80120c4:	462a      	mov	r2, r5
 80120c6:	4630      	mov	r0, r6
 80120c8:	4b08      	ldr	r3, [pc, #32]	; (80120ec <_vfiprintf_r+0x258>)
 80120ca:	a904      	add	r1, sp, #16
 80120cc:	f7fe f93c 	bl	8010348 <_printf_i>
 80120d0:	e7e4      	b.n	801209c <_vfiprintf_r+0x208>
 80120d2:	bf00      	nop
 80120d4:	08013b84 	.word	0x08013b84
 80120d8:	08013ba4 	.word	0x08013ba4
 80120dc:	08013b64 	.word	0x08013b64
 80120e0:	08013a0c 	.word	0x08013a0c
 80120e4:	08013a16 	.word	0x08013a16
 80120e8:	0800fe11 	.word	0x0800fe11
 80120ec:	08011e71 	.word	0x08011e71
 80120f0:	08013a12 	.word	0x08013a12

080120f4 <__swbuf_r>:
 80120f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120f6:	460e      	mov	r6, r1
 80120f8:	4614      	mov	r4, r2
 80120fa:	4605      	mov	r5, r0
 80120fc:	b118      	cbz	r0, 8012106 <__swbuf_r+0x12>
 80120fe:	6983      	ldr	r3, [r0, #24]
 8012100:	b90b      	cbnz	r3, 8012106 <__swbuf_r+0x12>
 8012102:	f000 f9e7 	bl	80124d4 <__sinit>
 8012106:	4b21      	ldr	r3, [pc, #132]	; (801218c <__swbuf_r+0x98>)
 8012108:	429c      	cmp	r4, r3
 801210a:	d12b      	bne.n	8012164 <__swbuf_r+0x70>
 801210c:	686c      	ldr	r4, [r5, #4]
 801210e:	69a3      	ldr	r3, [r4, #24]
 8012110:	60a3      	str	r3, [r4, #8]
 8012112:	89a3      	ldrh	r3, [r4, #12]
 8012114:	071a      	lsls	r2, r3, #28
 8012116:	d52f      	bpl.n	8012178 <__swbuf_r+0x84>
 8012118:	6923      	ldr	r3, [r4, #16]
 801211a:	b36b      	cbz	r3, 8012178 <__swbuf_r+0x84>
 801211c:	6923      	ldr	r3, [r4, #16]
 801211e:	6820      	ldr	r0, [r4, #0]
 8012120:	b2f6      	uxtb	r6, r6
 8012122:	1ac0      	subs	r0, r0, r3
 8012124:	6963      	ldr	r3, [r4, #20]
 8012126:	4637      	mov	r7, r6
 8012128:	4283      	cmp	r3, r0
 801212a:	dc04      	bgt.n	8012136 <__swbuf_r+0x42>
 801212c:	4621      	mov	r1, r4
 801212e:	4628      	mov	r0, r5
 8012130:	f000 f93c 	bl	80123ac <_fflush_r>
 8012134:	bb30      	cbnz	r0, 8012184 <__swbuf_r+0x90>
 8012136:	68a3      	ldr	r3, [r4, #8]
 8012138:	3001      	adds	r0, #1
 801213a:	3b01      	subs	r3, #1
 801213c:	60a3      	str	r3, [r4, #8]
 801213e:	6823      	ldr	r3, [r4, #0]
 8012140:	1c5a      	adds	r2, r3, #1
 8012142:	6022      	str	r2, [r4, #0]
 8012144:	701e      	strb	r6, [r3, #0]
 8012146:	6963      	ldr	r3, [r4, #20]
 8012148:	4283      	cmp	r3, r0
 801214a:	d004      	beq.n	8012156 <__swbuf_r+0x62>
 801214c:	89a3      	ldrh	r3, [r4, #12]
 801214e:	07db      	lsls	r3, r3, #31
 8012150:	d506      	bpl.n	8012160 <__swbuf_r+0x6c>
 8012152:	2e0a      	cmp	r6, #10
 8012154:	d104      	bne.n	8012160 <__swbuf_r+0x6c>
 8012156:	4621      	mov	r1, r4
 8012158:	4628      	mov	r0, r5
 801215a:	f000 f927 	bl	80123ac <_fflush_r>
 801215e:	b988      	cbnz	r0, 8012184 <__swbuf_r+0x90>
 8012160:	4638      	mov	r0, r7
 8012162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012164:	4b0a      	ldr	r3, [pc, #40]	; (8012190 <__swbuf_r+0x9c>)
 8012166:	429c      	cmp	r4, r3
 8012168:	d101      	bne.n	801216e <__swbuf_r+0x7a>
 801216a:	68ac      	ldr	r4, [r5, #8]
 801216c:	e7cf      	b.n	801210e <__swbuf_r+0x1a>
 801216e:	4b09      	ldr	r3, [pc, #36]	; (8012194 <__swbuf_r+0xa0>)
 8012170:	429c      	cmp	r4, r3
 8012172:	bf08      	it	eq
 8012174:	68ec      	ldreq	r4, [r5, #12]
 8012176:	e7ca      	b.n	801210e <__swbuf_r+0x1a>
 8012178:	4621      	mov	r1, r4
 801217a:	4628      	mov	r0, r5
 801217c:	f000 f81a 	bl	80121b4 <__swsetup_r>
 8012180:	2800      	cmp	r0, #0
 8012182:	d0cb      	beq.n	801211c <__swbuf_r+0x28>
 8012184:	f04f 37ff 	mov.w	r7, #4294967295
 8012188:	e7ea      	b.n	8012160 <__swbuf_r+0x6c>
 801218a:	bf00      	nop
 801218c:	08013b84 	.word	0x08013b84
 8012190:	08013ba4 	.word	0x08013ba4
 8012194:	08013b64 	.word	0x08013b64

08012198 <__ascii_wctomb>:
 8012198:	4603      	mov	r3, r0
 801219a:	4608      	mov	r0, r1
 801219c:	b141      	cbz	r1, 80121b0 <__ascii_wctomb+0x18>
 801219e:	2aff      	cmp	r2, #255	; 0xff
 80121a0:	d904      	bls.n	80121ac <__ascii_wctomb+0x14>
 80121a2:	228a      	movs	r2, #138	; 0x8a
 80121a4:	f04f 30ff 	mov.w	r0, #4294967295
 80121a8:	601a      	str	r2, [r3, #0]
 80121aa:	4770      	bx	lr
 80121ac:	2001      	movs	r0, #1
 80121ae:	700a      	strb	r2, [r1, #0]
 80121b0:	4770      	bx	lr
	...

080121b4 <__swsetup_r>:
 80121b4:	4b32      	ldr	r3, [pc, #200]	; (8012280 <__swsetup_r+0xcc>)
 80121b6:	b570      	push	{r4, r5, r6, lr}
 80121b8:	681d      	ldr	r5, [r3, #0]
 80121ba:	4606      	mov	r6, r0
 80121bc:	460c      	mov	r4, r1
 80121be:	b125      	cbz	r5, 80121ca <__swsetup_r+0x16>
 80121c0:	69ab      	ldr	r3, [r5, #24]
 80121c2:	b913      	cbnz	r3, 80121ca <__swsetup_r+0x16>
 80121c4:	4628      	mov	r0, r5
 80121c6:	f000 f985 	bl	80124d4 <__sinit>
 80121ca:	4b2e      	ldr	r3, [pc, #184]	; (8012284 <__swsetup_r+0xd0>)
 80121cc:	429c      	cmp	r4, r3
 80121ce:	d10f      	bne.n	80121f0 <__swsetup_r+0x3c>
 80121d0:	686c      	ldr	r4, [r5, #4]
 80121d2:	89a3      	ldrh	r3, [r4, #12]
 80121d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80121d8:	0719      	lsls	r1, r3, #28
 80121da:	d42c      	bmi.n	8012236 <__swsetup_r+0x82>
 80121dc:	06dd      	lsls	r5, r3, #27
 80121de:	d411      	bmi.n	8012204 <__swsetup_r+0x50>
 80121e0:	2309      	movs	r3, #9
 80121e2:	6033      	str	r3, [r6, #0]
 80121e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80121e8:	f04f 30ff 	mov.w	r0, #4294967295
 80121ec:	81a3      	strh	r3, [r4, #12]
 80121ee:	e03e      	b.n	801226e <__swsetup_r+0xba>
 80121f0:	4b25      	ldr	r3, [pc, #148]	; (8012288 <__swsetup_r+0xd4>)
 80121f2:	429c      	cmp	r4, r3
 80121f4:	d101      	bne.n	80121fa <__swsetup_r+0x46>
 80121f6:	68ac      	ldr	r4, [r5, #8]
 80121f8:	e7eb      	b.n	80121d2 <__swsetup_r+0x1e>
 80121fa:	4b24      	ldr	r3, [pc, #144]	; (801228c <__swsetup_r+0xd8>)
 80121fc:	429c      	cmp	r4, r3
 80121fe:	bf08      	it	eq
 8012200:	68ec      	ldreq	r4, [r5, #12]
 8012202:	e7e6      	b.n	80121d2 <__swsetup_r+0x1e>
 8012204:	0758      	lsls	r0, r3, #29
 8012206:	d512      	bpl.n	801222e <__swsetup_r+0x7a>
 8012208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801220a:	b141      	cbz	r1, 801221e <__swsetup_r+0x6a>
 801220c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012210:	4299      	cmp	r1, r3
 8012212:	d002      	beq.n	801221a <__swsetup_r+0x66>
 8012214:	4630      	mov	r0, r6
 8012216:	f7fd fcb7 	bl	800fb88 <_free_r>
 801221a:	2300      	movs	r3, #0
 801221c:	6363      	str	r3, [r4, #52]	; 0x34
 801221e:	89a3      	ldrh	r3, [r4, #12]
 8012220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012224:	81a3      	strh	r3, [r4, #12]
 8012226:	2300      	movs	r3, #0
 8012228:	6063      	str	r3, [r4, #4]
 801222a:	6923      	ldr	r3, [r4, #16]
 801222c:	6023      	str	r3, [r4, #0]
 801222e:	89a3      	ldrh	r3, [r4, #12]
 8012230:	f043 0308 	orr.w	r3, r3, #8
 8012234:	81a3      	strh	r3, [r4, #12]
 8012236:	6923      	ldr	r3, [r4, #16]
 8012238:	b94b      	cbnz	r3, 801224e <__swsetup_r+0x9a>
 801223a:	89a3      	ldrh	r3, [r4, #12]
 801223c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012244:	d003      	beq.n	801224e <__swsetup_r+0x9a>
 8012246:	4621      	mov	r1, r4
 8012248:	4630      	mov	r0, r6
 801224a:	f000 fa05 	bl	8012658 <__smakebuf_r>
 801224e:	89a0      	ldrh	r0, [r4, #12]
 8012250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012254:	f010 0301 	ands.w	r3, r0, #1
 8012258:	d00a      	beq.n	8012270 <__swsetup_r+0xbc>
 801225a:	2300      	movs	r3, #0
 801225c:	60a3      	str	r3, [r4, #8]
 801225e:	6963      	ldr	r3, [r4, #20]
 8012260:	425b      	negs	r3, r3
 8012262:	61a3      	str	r3, [r4, #24]
 8012264:	6923      	ldr	r3, [r4, #16]
 8012266:	b943      	cbnz	r3, 801227a <__swsetup_r+0xc6>
 8012268:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801226c:	d1ba      	bne.n	80121e4 <__swsetup_r+0x30>
 801226e:	bd70      	pop	{r4, r5, r6, pc}
 8012270:	0781      	lsls	r1, r0, #30
 8012272:	bf58      	it	pl
 8012274:	6963      	ldrpl	r3, [r4, #20]
 8012276:	60a3      	str	r3, [r4, #8]
 8012278:	e7f4      	b.n	8012264 <__swsetup_r+0xb0>
 801227a:	2000      	movs	r0, #0
 801227c:	e7f7      	b.n	801226e <__swsetup_r+0xba>
 801227e:	bf00      	nop
 8012280:	200001a8 	.word	0x200001a8
 8012284:	08013b84 	.word	0x08013b84
 8012288:	08013ba4 	.word	0x08013ba4
 801228c:	08013b64 	.word	0x08013b64

08012290 <abort>:
 8012290:	2006      	movs	r0, #6
 8012292:	b508      	push	{r3, lr}
 8012294:	f000 fa48 	bl	8012728 <raise>
 8012298:	2001      	movs	r0, #1
 801229a:	f7f3 f9b2 	bl	8005602 <_exit>
	...

080122a0 <__sflush_r>:
 80122a0:	898a      	ldrh	r2, [r1, #12]
 80122a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122a6:	4605      	mov	r5, r0
 80122a8:	0710      	lsls	r0, r2, #28
 80122aa:	460c      	mov	r4, r1
 80122ac:	d458      	bmi.n	8012360 <__sflush_r+0xc0>
 80122ae:	684b      	ldr	r3, [r1, #4]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	dc05      	bgt.n	80122c0 <__sflush_r+0x20>
 80122b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	dc02      	bgt.n	80122c0 <__sflush_r+0x20>
 80122ba:	2000      	movs	r0, #0
 80122bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80122c2:	2e00      	cmp	r6, #0
 80122c4:	d0f9      	beq.n	80122ba <__sflush_r+0x1a>
 80122c6:	2300      	movs	r3, #0
 80122c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80122cc:	682f      	ldr	r7, [r5, #0]
 80122ce:	602b      	str	r3, [r5, #0]
 80122d0:	d032      	beq.n	8012338 <__sflush_r+0x98>
 80122d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80122d4:	89a3      	ldrh	r3, [r4, #12]
 80122d6:	075a      	lsls	r2, r3, #29
 80122d8:	d505      	bpl.n	80122e6 <__sflush_r+0x46>
 80122da:	6863      	ldr	r3, [r4, #4]
 80122dc:	1ac0      	subs	r0, r0, r3
 80122de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80122e0:	b10b      	cbz	r3, 80122e6 <__sflush_r+0x46>
 80122e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80122e4:	1ac0      	subs	r0, r0, r3
 80122e6:	2300      	movs	r3, #0
 80122e8:	4602      	mov	r2, r0
 80122ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80122ec:	4628      	mov	r0, r5
 80122ee:	6a21      	ldr	r1, [r4, #32]
 80122f0:	47b0      	blx	r6
 80122f2:	1c43      	adds	r3, r0, #1
 80122f4:	89a3      	ldrh	r3, [r4, #12]
 80122f6:	d106      	bne.n	8012306 <__sflush_r+0x66>
 80122f8:	6829      	ldr	r1, [r5, #0]
 80122fa:	291d      	cmp	r1, #29
 80122fc:	d82c      	bhi.n	8012358 <__sflush_r+0xb8>
 80122fe:	4a2a      	ldr	r2, [pc, #168]	; (80123a8 <__sflush_r+0x108>)
 8012300:	40ca      	lsrs	r2, r1
 8012302:	07d6      	lsls	r6, r2, #31
 8012304:	d528      	bpl.n	8012358 <__sflush_r+0xb8>
 8012306:	2200      	movs	r2, #0
 8012308:	6062      	str	r2, [r4, #4]
 801230a:	6922      	ldr	r2, [r4, #16]
 801230c:	04d9      	lsls	r1, r3, #19
 801230e:	6022      	str	r2, [r4, #0]
 8012310:	d504      	bpl.n	801231c <__sflush_r+0x7c>
 8012312:	1c42      	adds	r2, r0, #1
 8012314:	d101      	bne.n	801231a <__sflush_r+0x7a>
 8012316:	682b      	ldr	r3, [r5, #0]
 8012318:	b903      	cbnz	r3, 801231c <__sflush_r+0x7c>
 801231a:	6560      	str	r0, [r4, #84]	; 0x54
 801231c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801231e:	602f      	str	r7, [r5, #0]
 8012320:	2900      	cmp	r1, #0
 8012322:	d0ca      	beq.n	80122ba <__sflush_r+0x1a>
 8012324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012328:	4299      	cmp	r1, r3
 801232a:	d002      	beq.n	8012332 <__sflush_r+0x92>
 801232c:	4628      	mov	r0, r5
 801232e:	f7fd fc2b 	bl	800fb88 <_free_r>
 8012332:	2000      	movs	r0, #0
 8012334:	6360      	str	r0, [r4, #52]	; 0x34
 8012336:	e7c1      	b.n	80122bc <__sflush_r+0x1c>
 8012338:	6a21      	ldr	r1, [r4, #32]
 801233a:	2301      	movs	r3, #1
 801233c:	4628      	mov	r0, r5
 801233e:	47b0      	blx	r6
 8012340:	1c41      	adds	r1, r0, #1
 8012342:	d1c7      	bne.n	80122d4 <__sflush_r+0x34>
 8012344:	682b      	ldr	r3, [r5, #0]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d0c4      	beq.n	80122d4 <__sflush_r+0x34>
 801234a:	2b1d      	cmp	r3, #29
 801234c:	d001      	beq.n	8012352 <__sflush_r+0xb2>
 801234e:	2b16      	cmp	r3, #22
 8012350:	d101      	bne.n	8012356 <__sflush_r+0xb6>
 8012352:	602f      	str	r7, [r5, #0]
 8012354:	e7b1      	b.n	80122ba <__sflush_r+0x1a>
 8012356:	89a3      	ldrh	r3, [r4, #12]
 8012358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801235c:	81a3      	strh	r3, [r4, #12]
 801235e:	e7ad      	b.n	80122bc <__sflush_r+0x1c>
 8012360:	690f      	ldr	r7, [r1, #16]
 8012362:	2f00      	cmp	r7, #0
 8012364:	d0a9      	beq.n	80122ba <__sflush_r+0x1a>
 8012366:	0793      	lsls	r3, r2, #30
 8012368:	bf18      	it	ne
 801236a:	2300      	movne	r3, #0
 801236c:	680e      	ldr	r6, [r1, #0]
 801236e:	bf08      	it	eq
 8012370:	694b      	ldreq	r3, [r1, #20]
 8012372:	eba6 0807 	sub.w	r8, r6, r7
 8012376:	600f      	str	r7, [r1, #0]
 8012378:	608b      	str	r3, [r1, #8]
 801237a:	f1b8 0f00 	cmp.w	r8, #0
 801237e:	dd9c      	ble.n	80122ba <__sflush_r+0x1a>
 8012380:	4643      	mov	r3, r8
 8012382:	463a      	mov	r2, r7
 8012384:	4628      	mov	r0, r5
 8012386:	6a21      	ldr	r1, [r4, #32]
 8012388:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801238a:	47b0      	blx	r6
 801238c:	2800      	cmp	r0, #0
 801238e:	dc06      	bgt.n	801239e <__sflush_r+0xfe>
 8012390:	89a3      	ldrh	r3, [r4, #12]
 8012392:	f04f 30ff 	mov.w	r0, #4294967295
 8012396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801239a:	81a3      	strh	r3, [r4, #12]
 801239c:	e78e      	b.n	80122bc <__sflush_r+0x1c>
 801239e:	4407      	add	r7, r0
 80123a0:	eba8 0800 	sub.w	r8, r8, r0
 80123a4:	e7e9      	b.n	801237a <__sflush_r+0xda>
 80123a6:	bf00      	nop
 80123a8:	20400001 	.word	0x20400001

080123ac <_fflush_r>:
 80123ac:	b538      	push	{r3, r4, r5, lr}
 80123ae:	690b      	ldr	r3, [r1, #16]
 80123b0:	4605      	mov	r5, r0
 80123b2:	460c      	mov	r4, r1
 80123b4:	b913      	cbnz	r3, 80123bc <_fflush_r+0x10>
 80123b6:	2500      	movs	r5, #0
 80123b8:	4628      	mov	r0, r5
 80123ba:	bd38      	pop	{r3, r4, r5, pc}
 80123bc:	b118      	cbz	r0, 80123c6 <_fflush_r+0x1a>
 80123be:	6983      	ldr	r3, [r0, #24]
 80123c0:	b90b      	cbnz	r3, 80123c6 <_fflush_r+0x1a>
 80123c2:	f000 f887 	bl	80124d4 <__sinit>
 80123c6:	4b14      	ldr	r3, [pc, #80]	; (8012418 <_fflush_r+0x6c>)
 80123c8:	429c      	cmp	r4, r3
 80123ca:	d11b      	bne.n	8012404 <_fflush_r+0x58>
 80123cc:	686c      	ldr	r4, [r5, #4]
 80123ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d0ef      	beq.n	80123b6 <_fflush_r+0xa>
 80123d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80123d8:	07d0      	lsls	r0, r2, #31
 80123da:	d404      	bmi.n	80123e6 <_fflush_r+0x3a>
 80123dc:	0599      	lsls	r1, r3, #22
 80123de:	d402      	bmi.n	80123e6 <_fflush_r+0x3a>
 80123e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80123e2:	f7ff fcfa 	bl	8011dda <__retarget_lock_acquire_recursive>
 80123e6:	4628      	mov	r0, r5
 80123e8:	4621      	mov	r1, r4
 80123ea:	f7ff ff59 	bl	80122a0 <__sflush_r>
 80123ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123f0:	4605      	mov	r5, r0
 80123f2:	07da      	lsls	r2, r3, #31
 80123f4:	d4e0      	bmi.n	80123b8 <_fflush_r+0xc>
 80123f6:	89a3      	ldrh	r3, [r4, #12]
 80123f8:	059b      	lsls	r3, r3, #22
 80123fa:	d4dd      	bmi.n	80123b8 <_fflush_r+0xc>
 80123fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80123fe:	f7ff fced 	bl	8011ddc <__retarget_lock_release_recursive>
 8012402:	e7d9      	b.n	80123b8 <_fflush_r+0xc>
 8012404:	4b05      	ldr	r3, [pc, #20]	; (801241c <_fflush_r+0x70>)
 8012406:	429c      	cmp	r4, r3
 8012408:	d101      	bne.n	801240e <_fflush_r+0x62>
 801240a:	68ac      	ldr	r4, [r5, #8]
 801240c:	e7df      	b.n	80123ce <_fflush_r+0x22>
 801240e:	4b04      	ldr	r3, [pc, #16]	; (8012420 <_fflush_r+0x74>)
 8012410:	429c      	cmp	r4, r3
 8012412:	bf08      	it	eq
 8012414:	68ec      	ldreq	r4, [r5, #12]
 8012416:	e7da      	b.n	80123ce <_fflush_r+0x22>
 8012418:	08013b84 	.word	0x08013b84
 801241c:	08013ba4 	.word	0x08013ba4
 8012420:	08013b64 	.word	0x08013b64

08012424 <std>:
 8012424:	2300      	movs	r3, #0
 8012426:	b510      	push	{r4, lr}
 8012428:	4604      	mov	r4, r0
 801242a:	e9c0 3300 	strd	r3, r3, [r0]
 801242e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012432:	6083      	str	r3, [r0, #8]
 8012434:	8181      	strh	r1, [r0, #12]
 8012436:	6643      	str	r3, [r0, #100]	; 0x64
 8012438:	81c2      	strh	r2, [r0, #14]
 801243a:	6183      	str	r3, [r0, #24]
 801243c:	4619      	mov	r1, r3
 801243e:	2208      	movs	r2, #8
 8012440:	305c      	adds	r0, #92	; 0x5c
 8012442:	f7fd fb99 	bl	800fb78 <memset>
 8012446:	4b05      	ldr	r3, [pc, #20]	; (801245c <std+0x38>)
 8012448:	6224      	str	r4, [r4, #32]
 801244a:	6263      	str	r3, [r4, #36]	; 0x24
 801244c:	4b04      	ldr	r3, [pc, #16]	; (8012460 <std+0x3c>)
 801244e:	62a3      	str	r3, [r4, #40]	; 0x28
 8012450:	4b04      	ldr	r3, [pc, #16]	; (8012464 <std+0x40>)
 8012452:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012454:	4b04      	ldr	r3, [pc, #16]	; (8012468 <std+0x44>)
 8012456:	6323      	str	r3, [r4, #48]	; 0x30
 8012458:	bd10      	pop	{r4, pc}
 801245a:	bf00      	nop
 801245c:	08012761 	.word	0x08012761
 8012460:	08012783 	.word	0x08012783
 8012464:	080127bb 	.word	0x080127bb
 8012468:	080127df 	.word	0x080127df

0801246c <_cleanup_r>:
 801246c:	4901      	ldr	r1, [pc, #4]	; (8012474 <_cleanup_r+0x8>)
 801246e:	f000 b8af 	b.w	80125d0 <_fwalk_reent>
 8012472:	bf00      	nop
 8012474:	080123ad 	.word	0x080123ad

08012478 <__sfmoreglue>:
 8012478:	b570      	push	{r4, r5, r6, lr}
 801247a:	2568      	movs	r5, #104	; 0x68
 801247c:	1e4a      	subs	r2, r1, #1
 801247e:	4355      	muls	r5, r2
 8012480:	460e      	mov	r6, r1
 8012482:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012486:	f7fd fbcb 	bl	800fc20 <_malloc_r>
 801248a:	4604      	mov	r4, r0
 801248c:	b140      	cbz	r0, 80124a0 <__sfmoreglue+0x28>
 801248e:	2100      	movs	r1, #0
 8012490:	e9c0 1600 	strd	r1, r6, [r0]
 8012494:	300c      	adds	r0, #12
 8012496:	60a0      	str	r0, [r4, #8]
 8012498:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801249c:	f7fd fb6c 	bl	800fb78 <memset>
 80124a0:	4620      	mov	r0, r4
 80124a2:	bd70      	pop	{r4, r5, r6, pc}

080124a4 <__sfp_lock_acquire>:
 80124a4:	4801      	ldr	r0, [pc, #4]	; (80124ac <__sfp_lock_acquire+0x8>)
 80124a6:	f7ff bc98 	b.w	8011dda <__retarget_lock_acquire_recursive>
 80124aa:	bf00      	nop
 80124ac:	200020b0 	.word	0x200020b0

080124b0 <__sfp_lock_release>:
 80124b0:	4801      	ldr	r0, [pc, #4]	; (80124b8 <__sfp_lock_release+0x8>)
 80124b2:	f7ff bc93 	b.w	8011ddc <__retarget_lock_release_recursive>
 80124b6:	bf00      	nop
 80124b8:	200020b0 	.word	0x200020b0

080124bc <__sinit_lock_acquire>:
 80124bc:	4801      	ldr	r0, [pc, #4]	; (80124c4 <__sinit_lock_acquire+0x8>)
 80124be:	f7ff bc8c 	b.w	8011dda <__retarget_lock_acquire_recursive>
 80124c2:	bf00      	nop
 80124c4:	200020ab 	.word	0x200020ab

080124c8 <__sinit_lock_release>:
 80124c8:	4801      	ldr	r0, [pc, #4]	; (80124d0 <__sinit_lock_release+0x8>)
 80124ca:	f7ff bc87 	b.w	8011ddc <__retarget_lock_release_recursive>
 80124ce:	bf00      	nop
 80124d0:	200020ab 	.word	0x200020ab

080124d4 <__sinit>:
 80124d4:	b510      	push	{r4, lr}
 80124d6:	4604      	mov	r4, r0
 80124d8:	f7ff fff0 	bl	80124bc <__sinit_lock_acquire>
 80124dc:	69a3      	ldr	r3, [r4, #24]
 80124de:	b11b      	cbz	r3, 80124e8 <__sinit+0x14>
 80124e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124e4:	f7ff bff0 	b.w	80124c8 <__sinit_lock_release>
 80124e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80124ec:	6523      	str	r3, [r4, #80]	; 0x50
 80124ee:	4b13      	ldr	r3, [pc, #76]	; (801253c <__sinit+0x68>)
 80124f0:	4a13      	ldr	r2, [pc, #76]	; (8012540 <__sinit+0x6c>)
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80124f6:	42a3      	cmp	r3, r4
 80124f8:	bf08      	it	eq
 80124fa:	2301      	moveq	r3, #1
 80124fc:	4620      	mov	r0, r4
 80124fe:	bf08      	it	eq
 8012500:	61a3      	streq	r3, [r4, #24]
 8012502:	f000 f81f 	bl	8012544 <__sfp>
 8012506:	6060      	str	r0, [r4, #4]
 8012508:	4620      	mov	r0, r4
 801250a:	f000 f81b 	bl	8012544 <__sfp>
 801250e:	60a0      	str	r0, [r4, #8]
 8012510:	4620      	mov	r0, r4
 8012512:	f000 f817 	bl	8012544 <__sfp>
 8012516:	2200      	movs	r2, #0
 8012518:	2104      	movs	r1, #4
 801251a:	60e0      	str	r0, [r4, #12]
 801251c:	6860      	ldr	r0, [r4, #4]
 801251e:	f7ff ff81 	bl	8012424 <std>
 8012522:	2201      	movs	r2, #1
 8012524:	2109      	movs	r1, #9
 8012526:	68a0      	ldr	r0, [r4, #8]
 8012528:	f7ff ff7c 	bl	8012424 <std>
 801252c:	2202      	movs	r2, #2
 801252e:	2112      	movs	r1, #18
 8012530:	68e0      	ldr	r0, [r4, #12]
 8012532:	f7ff ff77 	bl	8012424 <std>
 8012536:	2301      	movs	r3, #1
 8012538:	61a3      	str	r3, [r4, #24]
 801253a:	e7d1      	b.n	80124e0 <__sinit+0xc>
 801253c:	080137e0 	.word	0x080137e0
 8012540:	0801246d 	.word	0x0801246d

08012544 <__sfp>:
 8012544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012546:	4607      	mov	r7, r0
 8012548:	f7ff ffac 	bl	80124a4 <__sfp_lock_acquire>
 801254c:	4b1e      	ldr	r3, [pc, #120]	; (80125c8 <__sfp+0x84>)
 801254e:	681e      	ldr	r6, [r3, #0]
 8012550:	69b3      	ldr	r3, [r6, #24]
 8012552:	b913      	cbnz	r3, 801255a <__sfp+0x16>
 8012554:	4630      	mov	r0, r6
 8012556:	f7ff ffbd 	bl	80124d4 <__sinit>
 801255a:	3648      	adds	r6, #72	; 0x48
 801255c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012560:	3b01      	subs	r3, #1
 8012562:	d503      	bpl.n	801256c <__sfp+0x28>
 8012564:	6833      	ldr	r3, [r6, #0]
 8012566:	b30b      	cbz	r3, 80125ac <__sfp+0x68>
 8012568:	6836      	ldr	r6, [r6, #0]
 801256a:	e7f7      	b.n	801255c <__sfp+0x18>
 801256c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012570:	b9d5      	cbnz	r5, 80125a8 <__sfp+0x64>
 8012572:	4b16      	ldr	r3, [pc, #88]	; (80125cc <__sfp+0x88>)
 8012574:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012578:	60e3      	str	r3, [r4, #12]
 801257a:	6665      	str	r5, [r4, #100]	; 0x64
 801257c:	f7ff fc2c 	bl	8011dd8 <__retarget_lock_init_recursive>
 8012580:	f7ff ff96 	bl	80124b0 <__sfp_lock_release>
 8012584:	2208      	movs	r2, #8
 8012586:	4629      	mov	r1, r5
 8012588:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801258c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012590:	6025      	str	r5, [r4, #0]
 8012592:	61a5      	str	r5, [r4, #24]
 8012594:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012598:	f7fd faee 	bl	800fb78 <memset>
 801259c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80125a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80125a4:	4620      	mov	r0, r4
 80125a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125a8:	3468      	adds	r4, #104	; 0x68
 80125aa:	e7d9      	b.n	8012560 <__sfp+0x1c>
 80125ac:	2104      	movs	r1, #4
 80125ae:	4638      	mov	r0, r7
 80125b0:	f7ff ff62 	bl	8012478 <__sfmoreglue>
 80125b4:	4604      	mov	r4, r0
 80125b6:	6030      	str	r0, [r6, #0]
 80125b8:	2800      	cmp	r0, #0
 80125ba:	d1d5      	bne.n	8012568 <__sfp+0x24>
 80125bc:	f7ff ff78 	bl	80124b0 <__sfp_lock_release>
 80125c0:	230c      	movs	r3, #12
 80125c2:	603b      	str	r3, [r7, #0]
 80125c4:	e7ee      	b.n	80125a4 <__sfp+0x60>
 80125c6:	bf00      	nop
 80125c8:	080137e0 	.word	0x080137e0
 80125cc:	ffff0001 	.word	0xffff0001

080125d0 <_fwalk_reent>:
 80125d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125d4:	4606      	mov	r6, r0
 80125d6:	4688      	mov	r8, r1
 80125d8:	2700      	movs	r7, #0
 80125da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80125de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80125e2:	f1b9 0901 	subs.w	r9, r9, #1
 80125e6:	d505      	bpl.n	80125f4 <_fwalk_reent+0x24>
 80125e8:	6824      	ldr	r4, [r4, #0]
 80125ea:	2c00      	cmp	r4, #0
 80125ec:	d1f7      	bne.n	80125de <_fwalk_reent+0xe>
 80125ee:	4638      	mov	r0, r7
 80125f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125f4:	89ab      	ldrh	r3, [r5, #12]
 80125f6:	2b01      	cmp	r3, #1
 80125f8:	d907      	bls.n	801260a <_fwalk_reent+0x3a>
 80125fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80125fe:	3301      	adds	r3, #1
 8012600:	d003      	beq.n	801260a <_fwalk_reent+0x3a>
 8012602:	4629      	mov	r1, r5
 8012604:	4630      	mov	r0, r6
 8012606:	47c0      	blx	r8
 8012608:	4307      	orrs	r7, r0
 801260a:	3568      	adds	r5, #104	; 0x68
 801260c:	e7e9      	b.n	80125e2 <_fwalk_reent+0x12>

0801260e <__swhatbuf_r>:
 801260e:	b570      	push	{r4, r5, r6, lr}
 8012610:	460e      	mov	r6, r1
 8012612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012616:	4614      	mov	r4, r2
 8012618:	2900      	cmp	r1, #0
 801261a:	461d      	mov	r5, r3
 801261c:	b096      	sub	sp, #88	; 0x58
 801261e:	da07      	bge.n	8012630 <__swhatbuf_r+0x22>
 8012620:	2300      	movs	r3, #0
 8012622:	602b      	str	r3, [r5, #0]
 8012624:	89b3      	ldrh	r3, [r6, #12]
 8012626:	061a      	lsls	r2, r3, #24
 8012628:	d410      	bmi.n	801264c <__swhatbuf_r+0x3e>
 801262a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801262e:	e00e      	b.n	801264e <__swhatbuf_r+0x40>
 8012630:	466a      	mov	r2, sp
 8012632:	f000 f8fb 	bl	801282c <_fstat_r>
 8012636:	2800      	cmp	r0, #0
 8012638:	dbf2      	blt.n	8012620 <__swhatbuf_r+0x12>
 801263a:	9a01      	ldr	r2, [sp, #4]
 801263c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012640:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012644:	425a      	negs	r2, r3
 8012646:	415a      	adcs	r2, r3
 8012648:	602a      	str	r2, [r5, #0]
 801264a:	e7ee      	b.n	801262a <__swhatbuf_r+0x1c>
 801264c:	2340      	movs	r3, #64	; 0x40
 801264e:	2000      	movs	r0, #0
 8012650:	6023      	str	r3, [r4, #0]
 8012652:	b016      	add	sp, #88	; 0x58
 8012654:	bd70      	pop	{r4, r5, r6, pc}
	...

08012658 <__smakebuf_r>:
 8012658:	898b      	ldrh	r3, [r1, #12]
 801265a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801265c:	079d      	lsls	r5, r3, #30
 801265e:	4606      	mov	r6, r0
 8012660:	460c      	mov	r4, r1
 8012662:	d507      	bpl.n	8012674 <__smakebuf_r+0x1c>
 8012664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012668:	6023      	str	r3, [r4, #0]
 801266a:	6123      	str	r3, [r4, #16]
 801266c:	2301      	movs	r3, #1
 801266e:	6163      	str	r3, [r4, #20]
 8012670:	b002      	add	sp, #8
 8012672:	bd70      	pop	{r4, r5, r6, pc}
 8012674:	466a      	mov	r2, sp
 8012676:	ab01      	add	r3, sp, #4
 8012678:	f7ff ffc9 	bl	801260e <__swhatbuf_r>
 801267c:	9900      	ldr	r1, [sp, #0]
 801267e:	4605      	mov	r5, r0
 8012680:	4630      	mov	r0, r6
 8012682:	f7fd facd 	bl	800fc20 <_malloc_r>
 8012686:	b948      	cbnz	r0, 801269c <__smakebuf_r+0x44>
 8012688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801268c:	059a      	lsls	r2, r3, #22
 801268e:	d4ef      	bmi.n	8012670 <__smakebuf_r+0x18>
 8012690:	f023 0303 	bic.w	r3, r3, #3
 8012694:	f043 0302 	orr.w	r3, r3, #2
 8012698:	81a3      	strh	r3, [r4, #12]
 801269a:	e7e3      	b.n	8012664 <__smakebuf_r+0xc>
 801269c:	4b0d      	ldr	r3, [pc, #52]	; (80126d4 <__smakebuf_r+0x7c>)
 801269e:	62b3      	str	r3, [r6, #40]	; 0x28
 80126a0:	89a3      	ldrh	r3, [r4, #12]
 80126a2:	6020      	str	r0, [r4, #0]
 80126a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126a8:	81a3      	strh	r3, [r4, #12]
 80126aa:	9b00      	ldr	r3, [sp, #0]
 80126ac:	6120      	str	r0, [r4, #16]
 80126ae:	6163      	str	r3, [r4, #20]
 80126b0:	9b01      	ldr	r3, [sp, #4]
 80126b2:	b15b      	cbz	r3, 80126cc <__smakebuf_r+0x74>
 80126b4:	4630      	mov	r0, r6
 80126b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126ba:	f000 f8c9 	bl	8012850 <_isatty_r>
 80126be:	b128      	cbz	r0, 80126cc <__smakebuf_r+0x74>
 80126c0:	89a3      	ldrh	r3, [r4, #12]
 80126c2:	f023 0303 	bic.w	r3, r3, #3
 80126c6:	f043 0301 	orr.w	r3, r3, #1
 80126ca:	81a3      	strh	r3, [r4, #12]
 80126cc:	89a0      	ldrh	r0, [r4, #12]
 80126ce:	4305      	orrs	r5, r0
 80126d0:	81a5      	strh	r5, [r4, #12]
 80126d2:	e7cd      	b.n	8012670 <__smakebuf_r+0x18>
 80126d4:	0801246d 	.word	0x0801246d

080126d8 <_raise_r>:
 80126d8:	291f      	cmp	r1, #31
 80126da:	b538      	push	{r3, r4, r5, lr}
 80126dc:	4604      	mov	r4, r0
 80126de:	460d      	mov	r5, r1
 80126e0:	d904      	bls.n	80126ec <_raise_r+0x14>
 80126e2:	2316      	movs	r3, #22
 80126e4:	6003      	str	r3, [r0, #0]
 80126e6:	f04f 30ff 	mov.w	r0, #4294967295
 80126ea:	bd38      	pop	{r3, r4, r5, pc}
 80126ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80126ee:	b112      	cbz	r2, 80126f6 <_raise_r+0x1e>
 80126f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80126f4:	b94b      	cbnz	r3, 801270a <_raise_r+0x32>
 80126f6:	4620      	mov	r0, r4
 80126f8:	f000 f830 	bl	801275c <_getpid_r>
 80126fc:	462a      	mov	r2, r5
 80126fe:	4601      	mov	r1, r0
 8012700:	4620      	mov	r0, r4
 8012702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012706:	f000 b817 	b.w	8012738 <_kill_r>
 801270a:	2b01      	cmp	r3, #1
 801270c:	d00a      	beq.n	8012724 <_raise_r+0x4c>
 801270e:	1c59      	adds	r1, r3, #1
 8012710:	d103      	bne.n	801271a <_raise_r+0x42>
 8012712:	2316      	movs	r3, #22
 8012714:	6003      	str	r3, [r0, #0]
 8012716:	2001      	movs	r0, #1
 8012718:	e7e7      	b.n	80126ea <_raise_r+0x12>
 801271a:	2400      	movs	r4, #0
 801271c:	4628      	mov	r0, r5
 801271e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012722:	4798      	blx	r3
 8012724:	2000      	movs	r0, #0
 8012726:	e7e0      	b.n	80126ea <_raise_r+0x12>

08012728 <raise>:
 8012728:	4b02      	ldr	r3, [pc, #8]	; (8012734 <raise+0xc>)
 801272a:	4601      	mov	r1, r0
 801272c:	6818      	ldr	r0, [r3, #0]
 801272e:	f7ff bfd3 	b.w	80126d8 <_raise_r>
 8012732:	bf00      	nop
 8012734:	200001a8 	.word	0x200001a8

08012738 <_kill_r>:
 8012738:	b538      	push	{r3, r4, r5, lr}
 801273a:	2300      	movs	r3, #0
 801273c:	4d06      	ldr	r5, [pc, #24]	; (8012758 <_kill_r+0x20>)
 801273e:	4604      	mov	r4, r0
 8012740:	4608      	mov	r0, r1
 8012742:	4611      	mov	r1, r2
 8012744:	602b      	str	r3, [r5, #0]
 8012746:	f7f2 ff4c 	bl	80055e2 <_kill>
 801274a:	1c43      	adds	r3, r0, #1
 801274c:	d102      	bne.n	8012754 <_kill_r+0x1c>
 801274e:	682b      	ldr	r3, [r5, #0]
 8012750:	b103      	cbz	r3, 8012754 <_kill_r+0x1c>
 8012752:	6023      	str	r3, [r4, #0]
 8012754:	bd38      	pop	{r3, r4, r5, pc}
 8012756:	bf00      	nop
 8012758:	200020a4 	.word	0x200020a4

0801275c <_getpid_r>:
 801275c:	f7f2 bf3a 	b.w	80055d4 <_getpid>

08012760 <__sread>:
 8012760:	b510      	push	{r4, lr}
 8012762:	460c      	mov	r4, r1
 8012764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012768:	f000 f894 	bl	8012894 <_read_r>
 801276c:	2800      	cmp	r0, #0
 801276e:	bfab      	itete	ge
 8012770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012772:	89a3      	ldrhlt	r3, [r4, #12]
 8012774:	181b      	addge	r3, r3, r0
 8012776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801277a:	bfac      	ite	ge
 801277c:	6563      	strge	r3, [r4, #84]	; 0x54
 801277e:	81a3      	strhlt	r3, [r4, #12]
 8012780:	bd10      	pop	{r4, pc}

08012782 <__swrite>:
 8012782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012786:	461f      	mov	r7, r3
 8012788:	898b      	ldrh	r3, [r1, #12]
 801278a:	4605      	mov	r5, r0
 801278c:	05db      	lsls	r3, r3, #23
 801278e:	460c      	mov	r4, r1
 8012790:	4616      	mov	r6, r2
 8012792:	d505      	bpl.n	80127a0 <__swrite+0x1e>
 8012794:	2302      	movs	r3, #2
 8012796:	2200      	movs	r2, #0
 8012798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801279c:	f000 f868 	bl	8012870 <_lseek_r>
 80127a0:	89a3      	ldrh	r3, [r4, #12]
 80127a2:	4632      	mov	r2, r6
 80127a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80127a8:	81a3      	strh	r3, [r4, #12]
 80127aa:	4628      	mov	r0, r5
 80127ac:	463b      	mov	r3, r7
 80127ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127b6:	f000 b817 	b.w	80127e8 <_write_r>

080127ba <__sseek>:
 80127ba:	b510      	push	{r4, lr}
 80127bc:	460c      	mov	r4, r1
 80127be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127c2:	f000 f855 	bl	8012870 <_lseek_r>
 80127c6:	1c43      	adds	r3, r0, #1
 80127c8:	89a3      	ldrh	r3, [r4, #12]
 80127ca:	bf15      	itete	ne
 80127cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80127ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80127d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80127d6:	81a3      	strheq	r3, [r4, #12]
 80127d8:	bf18      	it	ne
 80127da:	81a3      	strhne	r3, [r4, #12]
 80127dc:	bd10      	pop	{r4, pc}

080127de <__sclose>:
 80127de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127e2:	f000 b813 	b.w	801280c <_close_r>
	...

080127e8 <_write_r>:
 80127e8:	b538      	push	{r3, r4, r5, lr}
 80127ea:	4604      	mov	r4, r0
 80127ec:	4608      	mov	r0, r1
 80127ee:	4611      	mov	r1, r2
 80127f0:	2200      	movs	r2, #0
 80127f2:	4d05      	ldr	r5, [pc, #20]	; (8012808 <_write_r+0x20>)
 80127f4:	602a      	str	r2, [r5, #0]
 80127f6:	461a      	mov	r2, r3
 80127f8:	f7f2 ff2a 	bl	8005650 <_write>
 80127fc:	1c43      	adds	r3, r0, #1
 80127fe:	d102      	bne.n	8012806 <_write_r+0x1e>
 8012800:	682b      	ldr	r3, [r5, #0]
 8012802:	b103      	cbz	r3, 8012806 <_write_r+0x1e>
 8012804:	6023      	str	r3, [r4, #0]
 8012806:	bd38      	pop	{r3, r4, r5, pc}
 8012808:	200020a4 	.word	0x200020a4

0801280c <_close_r>:
 801280c:	b538      	push	{r3, r4, r5, lr}
 801280e:	2300      	movs	r3, #0
 8012810:	4d05      	ldr	r5, [pc, #20]	; (8012828 <_close_r+0x1c>)
 8012812:	4604      	mov	r4, r0
 8012814:	4608      	mov	r0, r1
 8012816:	602b      	str	r3, [r5, #0]
 8012818:	f7f2 ff36 	bl	8005688 <_close>
 801281c:	1c43      	adds	r3, r0, #1
 801281e:	d102      	bne.n	8012826 <_close_r+0x1a>
 8012820:	682b      	ldr	r3, [r5, #0]
 8012822:	b103      	cbz	r3, 8012826 <_close_r+0x1a>
 8012824:	6023      	str	r3, [r4, #0]
 8012826:	bd38      	pop	{r3, r4, r5, pc}
 8012828:	200020a4 	.word	0x200020a4

0801282c <_fstat_r>:
 801282c:	b538      	push	{r3, r4, r5, lr}
 801282e:	2300      	movs	r3, #0
 8012830:	4d06      	ldr	r5, [pc, #24]	; (801284c <_fstat_r+0x20>)
 8012832:	4604      	mov	r4, r0
 8012834:	4608      	mov	r0, r1
 8012836:	4611      	mov	r1, r2
 8012838:	602b      	str	r3, [r5, #0]
 801283a:	f7f2 ff30 	bl	800569e <_fstat>
 801283e:	1c43      	adds	r3, r0, #1
 8012840:	d102      	bne.n	8012848 <_fstat_r+0x1c>
 8012842:	682b      	ldr	r3, [r5, #0]
 8012844:	b103      	cbz	r3, 8012848 <_fstat_r+0x1c>
 8012846:	6023      	str	r3, [r4, #0]
 8012848:	bd38      	pop	{r3, r4, r5, pc}
 801284a:	bf00      	nop
 801284c:	200020a4 	.word	0x200020a4

08012850 <_isatty_r>:
 8012850:	b538      	push	{r3, r4, r5, lr}
 8012852:	2300      	movs	r3, #0
 8012854:	4d05      	ldr	r5, [pc, #20]	; (801286c <_isatty_r+0x1c>)
 8012856:	4604      	mov	r4, r0
 8012858:	4608      	mov	r0, r1
 801285a:	602b      	str	r3, [r5, #0]
 801285c:	f7f2 ff2e 	bl	80056bc <_isatty>
 8012860:	1c43      	adds	r3, r0, #1
 8012862:	d102      	bne.n	801286a <_isatty_r+0x1a>
 8012864:	682b      	ldr	r3, [r5, #0]
 8012866:	b103      	cbz	r3, 801286a <_isatty_r+0x1a>
 8012868:	6023      	str	r3, [r4, #0]
 801286a:	bd38      	pop	{r3, r4, r5, pc}
 801286c:	200020a4 	.word	0x200020a4

08012870 <_lseek_r>:
 8012870:	b538      	push	{r3, r4, r5, lr}
 8012872:	4604      	mov	r4, r0
 8012874:	4608      	mov	r0, r1
 8012876:	4611      	mov	r1, r2
 8012878:	2200      	movs	r2, #0
 801287a:	4d05      	ldr	r5, [pc, #20]	; (8012890 <_lseek_r+0x20>)
 801287c:	602a      	str	r2, [r5, #0]
 801287e:	461a      	mov	r2, r3
 8012880:	f7f2 ff26 	bl	80056d0 <_lseek>
 8012884:	1c43      	adds	r3, r0, #1
 8012886:	d102      	bne.n	801288e <_lseek_r+0x1e>
 8012888:	682b      	ldr	r3, [r5, #0]
 801288a:	b103      	cbz	r3, 801288e <_lseek_r+0x1e>
 801288c:	6023      	str	r3, [r4, #0]
 801288e:	bd38      	pop	{r3, r4, r5, pc}
 8012890:	200020a4 	.word	0x200020a4

08012894 <_read_r>:
 8012894:	b538      	push	{r3, r4, r5, lr}
 8012896:	4604      	mov	r4, r0
 8012898:	4608      	mov	r0, r1
 801289a:	4611      	mov	r1, r2
 801289c:	2200      	movs	r2, #0
 801289e:	4d05      	ldr	r5, [pc, #20]	; (80128b4 <_read_r+0x20>)
 80128a0:	602a      	str	r2, [r5, #0]
 80128a2:	461a      	mov	r2, r3
 80128a4:	f7f2 feb7 	bl	8005616 <_read>
 80128a8:	1c43      	adds	r3, r0, #1
 80128aa:	d102      	bne.n	80128b2 <_read_r+0x1e>
 80128ac:	682b      	ldr	r3, [r5, #0]
 80128ae:	b103      	cbz	r3, 80128b2 <_read_r+0x1e>
 80128b0:	6023      	str	r3, [r4, #0]
 80128b2:	bd38      	pop	{r3, r4, r5, pc}
 80128b4:	200020a4 	.word	0x200020a4

080128b8 <_init>:
 80128b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ba:	bf00      	nop
 80128bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128be:	bc08      	pop	{r3}
 80128c0:	469e      	mov	lr, r3
 80128c2:	4770      	bx	lr

080128c4 <_fini>:
 80128c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128c6:	bf00      	nop
 80128c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128ca:	bc08      	pop	{r3}
 80128cc:	469e      	mov	lr, r3
 80128ce:	4770      	bx	lr
