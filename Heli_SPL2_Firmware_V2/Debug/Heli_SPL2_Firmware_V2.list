
Heli_SPL2_Firmware_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013efc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012d4  08014088  08014088  00024088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801535c  0801535c  000303b8  2**0
                  CONTENTS
  4 .ARM          00000008  0801535c  0801535c  0002535c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015364  08015364  000303b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08015364  08015364  00025364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015370  08015370  00025370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b8  20000000  08015374  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d70  200003b8  0801572c  000303b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002128  0801572c  00032128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000303b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004d7e5  00000000  00000000  000303e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000063f5  00000000  00000000  0007dbc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002350  00000000  00000000  00083fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002180  00000000  00000000  00086310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bed  00000000  00000000  00088490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028641  00000000  00000000  000b207d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1a4b  00000000  00000000  000da6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ac109  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000afcc  00000000  00000000  001ac15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200003b8 	.word	0x200003b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0801406c 	.word	0x0801406c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200003bc 	.word	0x200003bc
 80001c4:	0801406c 	.word	0x0801406c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_frsub>:
 8000be0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	e002      	b.n	8000bec <__addsf3>
 8000be6:	bf00      	nop

08000be8 <__aeabi_fsub>:
 8000be8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bec <__addsf3>:
 8000bec:	0042      	lsls	r2, r0, #1
 8000bee:	bf1f      	itttt	ne
 8000bf0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bf4:	ea92 0f03 	teqne	r2, r3
 8000bf8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c00:	d06a      	beq.n	8000cd8 <__addsf3+0xec>
 8000c02:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c0a:	bfc1      	itttt	gt
 8000c0c:	18d2      	addgt	r2, r2, r3
 8000c0e:	4041      	eorgt	r1, r0
 8000c10:	4048      	eorgt	r0, r1
 8000c12:	4041      	eorgt	r1, r0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	2b19      	cmp	r3, #25
 8000c1a:	bf88      	it	hi
 8000c1c:	4770      	bxhi	lr
 8000c1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4240      	negne	r0, r0
 8000c2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4249      	negne	r1, r1
 8000c3e:	ea92 0f03 	teq	r2, r3
 8000c42:	d03f      	beq.n	8000cc4 <__addsf3+0xd8>
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	fa41 fc03 	asr.w	ip, r1, r3
 8000c4c:	eb10 000c 	adds.w	r0, r0, ip
 8000c50:	f1c3 0320 	rsb	r3, r3, #32
 8000c54:	fa01 f103 	lsl.w	r1, r1, r3
 8000c58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5c:	d502      	bpl.n	8000c64 <__addsf3+0x78>
 8000c5e:	4249      	negs	r1, r1
 8000c60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c68:	d313      	bcc.n	8000c92 <__addsf3+0xa6>
 8000c6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c6e:	d306      	bcc.n	8000c7e <__addsf3+0x92>
 8000c70:	0840      	lsrs	r0, r0, #1
 8000c72:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c76:	f102 0201 	add.w	r2, r2, #1
 8000c7a:	2afe      	cmp	r2, #254	; 0xfe
 8000c7c:	d251      	bcs.n	8000d22 <__addsf3+0x136>
 8000c7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c86:	bf08      	it	eq
 8000c88:	f020 0001 	biceq.w	r0, r0, #1
 8000c8c:	ea40 0003 	orr.w	r0, r0, r3
 8000c90:	4770      	bx	lr
 8000c92:	0049      	lsls	r1, r1, #1
 8000c94:	eb40 0000 	adc.w	r0, r0, r0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	bf28      	it	cs
 8000c9c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ca0:	d2ed      	bcs.n	8000c7e <__addsf3+0x92>
 8000ca2:	fab0 fc80 	clz	ip, r0
 8000ca6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000caa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cae:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cb2:	bfaa      	itet	ge
 8000cb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb8:	4252      	neglt	r2, r2
 8000cba:	4318      	orrge	r0, r3
 8000cbc:	bfbc      	itt	lt
 8000cbe:	40d0      	lsrlt	r0, r2
 8000cc0:	4318      	orrlt	r0, r3
 8000cc2:	4770      	bx	lr
 8000cc4:	f092 0f00 	teq	r2, #0
 8000cc8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ccc:	bf06      	itte	eq
 8000cce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cd2:	3201      	addeq	r2, #1
 8000cd4:	3b01      	subne	r3, #1
 8000cd6:	e7b5      	b.n	8000c44 <__addsf3+0x58>
 8000cd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce0:	bf18      	it	ne
 8000ce2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce6:	d021      	beq.n	8000d2c <__addsf3+0x140>
 8000ce8:	ea92 0f03 	teq	r2, r3
 8000cec:	d004      	beq.n	8000cf8 <__addsf3+0x10c>
 8000cee:	f092 0f00 	teq	r2, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	4608      	moveq	r0, r1
 8000cf6:	4770      	bx	lr
 8000cf8:	ea90 0f01 	teq	r0, r1
 8000cfc:	bf1c      	itt	ne
 8000cfe:	2000      	movne	r0, #0
 8000d00:	4770      	bxne	lr
 8000d02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d06:	d104      	bne.n	8000d12 <__addsf3+0x126>
 8000d08:	0040      	lsls	r0, r0, #1
 8000d0a:	bf28      	it	cs
 8000d0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d16:	bf3c      	itt	cc
 8000d18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d1c:	4770      	bxcc	lr
 8000d1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2a:	4770      	bx	lr
 8000d2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d30:	bf16      	itet	ne
 8000d32:	4608      	movne	r0, r1
 8000d34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d38:	4601      	movne	r1, r0
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	bf06      	itte	eq
 8000d3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d42:	ea90 0f01 	teqeq	r0, r1
 8000d46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_ui2f>:
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e004      	b.n	8000d5c <__aeabi_i2f+0x8>
 8000d52:	bf00      	nop

08000d54 <__aeabi_i2f>:
 8000d54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d58:	bf48      	it	mi
 8000d5a:	4240      	negmi	r0, r0
 8000d5c:	ea5f 0c00 	movs.w	ip, r0
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d68:	4601      	mov	r1, r0
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	e01c      	b.n	8000daa <__aeabi_l2f+0x2a>

08000d70 <__aeabi_ul2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e00a      	b.n	8000d94 <__aeabi_l2f+0x14>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_l2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d8c:	d502      	bpl.n	8000d94 <__aeabi_l2f+0x14>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	ea5f 0c01 	movs.w	ip, r1
 8000d98:	bf02      	ittt	eq
 8000d9a:	4684      	moveq	ip, r0
 8000d9c:	4601      	moveq	r1, r0
 8000d9e:	2000      	moveq	r0, #0
 8000da0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000da4:	bf08      	it	eq
 8000da6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000daa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dae:	fabc f28c 	clz	r2, ip
 8000db2:	3a08      	subs	r2, #8
 8000db4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db8:	db10      	blt.n	8000ddc <__aeabi_l2f+0x5c>
 8000dba:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dc4:	f1c2 0220 	rsb	r2, r2, #32
 8000dc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dcc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd0:	eb43 0002 	adc.w	r0, r3, r2
 8000dd4:	bf08      	it	eq
 8000dd6:	f020 0001 	biceq.w	r0, r0, #1
 8000dda:	4770      	bx	lr
 8000ddc:	f102 0220 	add.w	r2, r2, #32
 8000de0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dec:	fa21 f202 	lsr.w	r2, r1, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fmul>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d06f      	beq.n	8000ef4 <__aeabi_fmul+0xf8>
 8000e14:	441a      	add	r2, r3
 8000e16:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1a:	0240      	lsls	r0, r0, #9
 8000e1c:	bf18      	it	ne
 8000e1e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e22:	d01e      	beq.n	8000e62 <__aeabi_fmul+0x66>
 8000e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e28:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e2c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e30:	fba0 3101 	umull	r3, r1, r0, r1
 8000e34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e3c:	bf3e      	ittt	cc
 8000e3e:	0049      	lslcc	r1, r1, #1
 8000e40:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e44:	005b      	lslcc	r3, r3, #1
 8000e46:	ea40 0001 	orr.w	r0, r0, r1
 8000e4a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e4e:	2afd      	cmp	r2, #253	; 0xfd
 8000e50:	d81d      	bhi.n	8000e8e <__aeabi_fmul+0x92>
 8000e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e5a:	bf08      	it	eq
 8000e5c:	f020 0001 	biceq.w	r0, r0, #1
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e6a:	bf08      	it	eq
 8000e6c:	0249      	lsleq	r1, r1, #9
 8000e6e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e72:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e76:	3a7f      	subs	r2, #127	; 0x7f
 8000e78:	bfc2      	ittt	gt
 8000e7a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e7e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e82:	4770      	bxgt	lr
 8000e84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	3a01      	subs	r2, #1
 8000e8e:	dc5d      	bgt.n	8000f4c <__aeabi_fmul+0x150>
 8000e90:	f112 0f19 	cmn.w	r2, #25
 8000e94:	bfdc      	itt	le
 8000e96:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e9a:	4770      	bxle	lr
 8000e9c:	f1c2 0200 	rsb	r2, r2, #0
 8000ea0:	0041      	lsls	r1, r0, #1
 8000ea2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ea6:	f1c2 0220 	rsb	r2, r2, #32
 8000eaa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eae:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eb2:	f140 0000 	adc.w	r0, r0, #0
 8000eb6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eba:	bf08      	it	eq
 8000ebc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec0:	4770      	bx	lr
 8000ec2:	f092 0f00 	teq	r2, #0
 8000ec6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0040      	lsleq	r0, r0, #1
 8000ece:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed2:	3a01      	subeq	r2, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fmul+0xce>
 8000ed6:	ea40 000c 	orr.w	r0, r0, ip
 8000eda:	f093 0f00 	teq	r3, #0
 8000ede:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0049      	lsleq	r1, r1, #1
 8000ee6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eea:	3b01      	subeq	r3, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xe6>
 8000eee:	ea41 010c 	orr.w	r1, r1, ip
 8000ef2:	e78f      	b.n	8000e14 <__aeabi_fmul+0x18>
 8000ef4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	bf18      	it	ne
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d00a      	beq.n	8000f1a <__aeabi_fmul+0x11e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	d1d8      	bne.n	8000ec2 <__aeabi_fmul+0xc6>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f18:	4770      	bx	lr
 8000f1a:	f090 0f00 	teq	r0, #0
 8000f1e:	bf17      	itett	ne
 8000f20:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f24:	4608      	moveq	r0, r1
 8000f26:	f091 0f00 	teqne	r1, #0
 8000f2a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f2e:	d014      	beq.n	8000f5a <__aeabi_fmul+0x15e>
 8000f30:	ea92 0f0c 	teq	r2, ip
 8000f34:	d101      	bne.n	8000f3a <__aeabi_fmul+0x13e>
 8000f36:	0242      	lsls	r2, r0, #9
 8000f38:	d10f      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f3a:	ea93 0f0c 	teq	r3, ip
 8000f3e:	d103      	bne.n	8000f48 <__aeabi_fmul+0x14c>
 8000f40:	024b      	lsls	r3, r1, #9
 8000f42:	bf18      	it	ne
 8000f44:	4608      	movne	r0, r1
 8000f46:	d108      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f48:	ea80 0001 	eor.w	r0, r0, r1
 8000f4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f58:	4770      	bx	lr
 8000f5a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f5e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f62:	4770      	bx	lr

08000f64 <__aeabi_fdiv>:
 8000f64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f6c:	bf1e      	ittt	ne
 8000f6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f72:	ea92 0f0c 	teqne	r2, ip
 8000f76:	ea93 0f0c 	teqne	r3, ip
 8000f7a:	d069      	beq.n	8001050 <__aeabi_fdiv+0xec>
 8000f7c:	eba2 0203 	sub.w	r2, r2, r3
 8000f80:	ea80 0c01 	eor.w	ip, r0, r1
 8000f84:	0249      	lsls	r1, r1, #9
 8000f86:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f8a:	d037      	beq.n	8000ffc <__aeabi_fdiv+0x98>
 8000f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f90:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f94:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	bf38      	it	cc
 8000fa0:	005b      	lslcc	r3, r3, #1
 8000fa2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fa6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000faa:	428b      	cmp	r3, r1
 8000fac:	bf24      	itt	cs
 8000fae:	1a5b      	subcs	r3, r3, r1
 8000fb0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fb4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fbe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fc2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fc6:	bf24      	itt	cs
 8000fc8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fcc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fd0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fd4:	bf24      	itt	cs
 8000fd6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fda:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	bf18      	it	ne
 8000fe2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fe6:	d1e0      	bne.n	8000faa <__aeabi_fdiv+0x46>
 8000fe8:	2afd      	cmp	r2, #253	; 0xfd
 8000fea:	f63f af50 	bhi.w	8000e8e <__aeabi_fmul+0x92>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ff4:	bf08      	it	eq
 8000ff6:	f020 0001 	biceq.w	r0, r0, #1
 8000ffa:	4770      	bx	lr
 8000ffc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001000:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001004:	327f      	adds	r2, #127	; 0x7f
 8001006:	bfc2      	ittt	gt
 8001008:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800100c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001010:	4770      	bxgt	lr
 8001012:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	3a01      	subs	r2, #1
 800101c:	e737      	b.n	8000e8e <__aeabi_fmul+0x92>
 800101e:	f092 0f00 	teq	r2, #0
 8001022:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001026:	bf02      	ittt	eq
 8001028:	0040      	lsleq	r0, r0, #1
 800102a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800102e:	3a01      	subeq	r2, #1
 8001030:	d0f9      	beq.n	8001026 <__aeabi_fdiv+0xc2>
 8001032:	ea40 000c 	orr.w	r0, r0, ip
 8001036:	f093 0f00 	teq	r3, #0
 800103a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0049      	lsleq	r1, r1, #1
 8001042:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001046:	3b01      	subeq	r3, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xda>
 800104a:	ea41 010c 	orr.w	r1, r1, ip
 800104e:	e795      	b.n	8000f7c <__aeabi_fdiv+0x18>
 8001050:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001054:	ea92 0f0c 	teq	r2, ip
 8001058:	d108      	bne.n	800106c <__aeabi_fdiv+0x108>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	f47f af7d 	bne.w	8000f5a <__aeabi_fmul+0x15e>
 8001060:	ea93 0f0c 	teq	r3, ip
 8001064:	f47f af70 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001068:	4608      	mov	r0, r1
 800106a:	e776      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800106c:	ea93 0f0c 	teq	r3, ip
 8001070:	d104      	bne.n	800107c <__aeabi_fdiv+0x118>
 8001072:	024b      	lsls	r3, r1, #9
 8001074:	f43f af4c 	beq.w	8000f10 <__aeabi_fmul+0x114>
 8001078:	4608      	mov	r0, r1
 800107a:	e76e      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800107c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001080:	bf18      	it	ne
 8001082:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001086:	d1ca      	bne.n	800101e <__aeabi_fdiv+0xba>
 8001088:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800108c:	f47f af5c 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001090:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001094:	f47f af3c 	bne.w	8000f10 <__aeabi_fmul+0x114>
 8001098:	e75f      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800109a:	bf00      	nop

0800109c <__gesf2>:
 800109c:	f04f 3cff 	mov.w	ip, #4294967295
 80010a0:	e006      	b.n	80010b0 <__cmpsf2+0x4>
 80010a2:	bf00      	nop

080010a4 <__lesf2>:
 80010a4:	f04f 0c01 	mov.w	ip, #1
 80010a8:	e002      	b.n	80010b0 <__cmpsf2+0x4>
 80010aa:	bf00      	nop

080010ac <__cmpsf2>:
 80010ac:	f04f 0c01 	mov.w	ip, #1
 80010b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c0:	bf18      	it	ne
 80010c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010c6:	d011      	beq.n	80010ec <__cmpsf2+0x40>
 80010c8:	b001      	add	sp, #4
 80010ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ce:	bf18      	it	ne
 80010d0:	ea90 0f01 	teqne	r0, r1
 80010d4:	bf58      	it	pl
 80010d6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010da:	bf88      	it	hi
 80010dc:	17c8      	asrhi	r0, r1, #31
 80010de:	bf38      	it	cc
 80010e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010e4:	bf18      	it	ne
 80010e6:	f040 0001 	orrne.w	r0, r0, #1
 80010ea:	4770      	bx	lr
 80010ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f0:	d102      	bne.n	80010f8 <__cmpsf2+0x4c>
 80010f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010f6:	d105      	bne.n	8001104 <__cmpsf2+0x58>
 80010f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010fc:	d1e4      	bne.n	80010c8 <__cmpsf2+0x1c>
 80010fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001102:	d0e1      	beq.n	80010c8 <__cmpsf2+0x1c>
 8001104:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <__aeabi_cfrcmple>:
 800110c:	4684      	mov	ip, r0
 800110e:	4608      	mov	r0, r1
 8001110:	4661      	mov	r1, ip
 8001112:	e7ff      	b.n	8001114 <__aeabi_cfcmpeq>

08001114 <__aeabi_cfcmpeq>:
 8001114:	b50f      	push	{r0, r1, r2, r3, lr}
 8001116:	f7ff ffc9 	bl	80010ac <__cmpsf2>
 800111a:	2800      	cmp	r0, #0
 800111c:	bf48      	it	mi
 800111e:	f110 0f00 	cmnmi.w	r0, #0
 8001122:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001124 <__aeabi_fcmpeq>:
 8001124:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001128:	f7ff fff4 	bl	8001114 <__aeabi_cfcmpeq>
 800112c:	bf0c      	ite	eq
 800112e:	2001      	moveq	r0, #1
 8001130:	2000      	movne	r0, #0
 8001132:	f85d fb08 	ldr.w	pc, [sp], #8
 8001136:	bf00      	nop

08001138 <__aeabi_fcmplt>:
 8001138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800113c:	f7ff ffea 	bl	8001114 <__aeabi_cfcmpeq>
 8001140:	bf34      	ite	cc
 8001142:	2001      	movcc	r0, #1
 8001144:	2000      	movcs	r0, #0
 8001146:	f85d fb08 	ldr.w	pc, [sp], #8
 800114a:	bf00      	nop

0800114c <__aeabi_fcmple>:
 800114c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001150:	f7ff ffe0 	bl	8001114 <__aeabi_cfcmpeq>
 8001154:	bf94      	ite	ls
 8001156:	2001      	movls	r0, #1
 8001158:	2000      	movhi	r0, #0
 800115a:	f85d fb08 	ldr.w	pc, [sp], #8
 800115e:	bf00      	nop

08001160 <__aeabi_fcmpge>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff ffd2 	bl	800110c <__aeabi_cfrcmple>
 8001168:	bf94      	ite	ls
 800116a:	2001      	movls	r0, #1
 800116c:	2000      	movhi	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmpgt>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffc8 	bl	800110c <__aeabi_cfrcmple>
 800117c:	bf34      	ite	cc
 800117e:	2001      	movcc	r0, #1
 8001180:	2000      	movcs	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmpun>:
 8001188:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800118c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001190:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001194:	d102      	bne.n	800119c <__aeabi_fcmpun+0x14>
 8001196:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800119a:	d108      	bne.n	80011ae <__aeabi_fcmpun+0x26>
 800119c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011a0:	d102      	bne.n	80011a8 <__aeabi_fcmpun+0x20>
 80011a2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011a6:	d102      	bne.n	80011ae <__aeabi_fcmpun+0x26>
 80011a8:	f04f 0000 	mov.w	r0, #0
 80011ac:	4770      	bx	lr
 80011ae:	f04f 0001 	mov.w	r0, #1
 80011b2:	4770      	bx	lr

080011b4 <__aeabi_f2iz>:
 80011b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011bc:	d30f      	bcc.n	80011de <__aeabi_f2iz+0x2a>
 80011be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011c6:	d90d      	bls.n	80011e4 <__aeabi_f2iz+0x30>
 80011c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	bf18      	it	ne
 80011da:	4240      	negne	r0, r0
 80011dc:	4770      	bx	lr
 80011de:	f04f 0000 	mov.w	r0, #0
 80011e2:	4770      	bx	lr
 80011e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e8:	d101      	bne.n	80011ee <__aeabi_f2iz+0x3a>
 80011ea:	0242      	lsls	r2, r0, #9
 80011ec:	d105      	bne.n	80011fa <__aeabi_f2iz+0x46>
 80011ee:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011f2:	bf08      	it	eq
 80011f4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011f8:	4770      	bx	lr
 80011fa:	f04f 0000 	mov.w	r0, #0
 80011fe:	4770      	bx	lr

08001200 <__aeabi_f2uiz>:
 8001200:	0042      	lsls	r2, r0, #1
 8001202:	d20e      	bcs.n	8001222 <__aeabi_f2uiz+0x22>
 8001204:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001208:	d30b      	bcc.n	8001222 <__aeabi_f2uiz+0x22>
 800120a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800120e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001212:	d409      	bmi.n	8001228 <__aeabi_f2uiz+0x28>
 8001214:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800121c:	fa23 f002 	lsr.w	r0, r3, r2
 8001220:	4770      	bx	lr
 8001222:	f04f 0000 	mov.w	r0, #0
 8001226:	4770      	bx	lr
 8001228:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800122c:	d101      	bne.n	8001232 <__aeabi_f2uiz+0x32>
 800122e:	0242      	lsls	r2, r0, #9
 8001230:	d102      	bne.n	8001238 <__aeabi_f2uiz+0x38>
 8001232:	f04f 30ff 	mov.w	r0, #4294967295
 8001236:	4770      	bx	lr
 8001238:	f04f 0000 	mov.w	r0, #0
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <__aeabi_uldivmod>:
 8001240:	b953      	cbnz	r3, 8001258 <__aeabi_uldivmod+0x18>
 8001242:	b94a      	cbnz	r2, 8001258 <__aeabi_uldivmod+0x18>
 8001244:	2900      	cmp	r1, #0
 8001246:	bf08      	it	eq
 8001248:	2800      	cmpeq	r0, #0
 800124a:	bf1c      	itt	ne
 800124c:	f04f 31ff 	movne.w	r1, #4294967295
 8001250:	f04f 30ff 	movne.w	r0, #4294967295
 8001254:	f000 b96e 	b.w	8001534 <__aeabi_idiv0>
 8001258:	f1ad 0c08 	sub.w	ip, sp, #8
 800125c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001260:	f000 f806 	bl	8001270 <__udivmoddi4>
 8001264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800126c:	b004      	add	sp, #16
 800126e:	4770      	bx	lr

08001270 <__udivmoddi4>:
 8001270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001274:	9e08      	ldr	r6, [sp, #32]
 8001276:	460d      	mov	r5, r1
 8001278:	4604      	mov	r4, r0
 800127a:	468e      	mov	lr, r1
 800127c:	2b00      	cmp	r3, #0
 800127e:	f040 8083 	bne.w	8001388 <__udivmoddi4+0x118>
 8001282:	428a      	cmp	r2, r1
 8001284:	4617      	mov	r7, r2
 8001286:	d947      	bls.n	8001318 <__udivmoddi4+0xa8>
 8001288:	fab2 f382 	clz	r3, r2
 800128c:	b14b      	cbz	r3, 80012a2 <__udivmoddi4+0x32>
 800128e:	f1c3 0120 	rsb	r1, r3, #32
 8001292:	fa05 fe03 	lsl.w	lr, r5, r3
 8001296:	fa20 f101 	lsr.w	r1, r0, r1
 800129a:	409f      	lsls	r7, r3
 800129c:	ea41 0e0e 	orr.w	lr, r1, lr
 80012a0:	409c      	lsls	r4, r3
 80012a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80012a6:	fbbe fcf8 	udiv	ip, lr, r8
 80012aa:	fa1f f987 	uxth.w	r9, r7
 80012ae:	fb08 e21c 	mls	r2, r8, ip, lr
 80012b2:	fb0c f009 	mul.w	r0, ip, r9
 80012b6:	0c21      	lsrs	r1, r4, #16
 80012b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80012bc:	4290      	cmp	r0, r2
 80012be:	d90a      	bls.n	80012d6 <__udivmoddi4+0x66>
 80012c0:	18ba      	adds	r2, r7, r2
 80012c2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80012c6:	f080 8118 	bcs.w	80014fa <__udivmoddi4+0x28a>
 80012ca:	4290      	cmp	r0, r2
 80012cc:	f240 8115 	bls.w	80014fa <__udivmoddi4+0x28a>
 80012d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80012d4:	443a      	add	r2, r7
 80012d6:	1a12      	subs	r2, r2, r0
 80012d8:	fbb2 f0f8 	udiv	r0, r2, r8
 80012dc:	fb08 2210 	mls	r2, r8, r0, r2
 80012e0:	fb00 f109 	mul.w	r1, r0, r9
 80012e4:	b2a4      	uxth	r4, r4
 80012e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012ea:	42a1      	cmp	r1, r4
 80012ec:	d909      	bls.n	8001302 <__udivmoddi4+0x92>
 80012ee:	193c      	adds	r4, r7, r4
 80012f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80012f4:	f080 8103 	bcs.w	80014fe <__udivmoddi4+0x28e>
 80012f8:	42a1      	cmp	r1, r4
 80012fa:	f240 8100 	bls.w	80014fe <__udivmoddi4+0x28e>
 80012fe:	3802      	subs	r0, #2
 8001300:	443c      	add	r4, r7
 8001302:	1a64      	subs	r4, r4, r1
 8001304:	2100      	movs	r1, #0
 8001306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800130a:	b11e      	cbz	r6, 8001314 <__udivmoddi4+0xa4>
 800130c:	2200      	movs	r2, #0
 800130e:	40dc      	lsrs	r4, r3
 8001310:	e9c6 4200 	strd	r4, r2, [r6]
 8001314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001318:	b902      	cbnz	r2, 800131c <__udivmoddi4+0xac>
 800131a:	deff      	udf	#255	; 0xff
 800131c:	fab2 f382 	clz	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d14f      	bne.n	80013c4 <__udivmoddi4+0x154>
 8001324:	1a8d      	subs	r5, r1, r2
 8001326:	2101      	movs	r1, #1
 8001328:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800132c:	fa1f f882 	uxth.w	r8, r2
 8001330:	fbb5 fcfe 	udiv	ip, r5, lr
 8001334:	fb0e 551c 	mls	r5, lr, ip, r5
 8001338:	fb08 f00c 	mul.w	r0, r8, ip
 800133c:	0c22      	lsrs	r2, r4, #16
 800133e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001342:	42a8      	cmp	r0, r5
 8001344:	d907      	bls.n	8001356 <__udivmoddi4+0xe6>
 8001346:	197d      	adds	r5, r7, r5
 8001348:	f10c 32ff 	add.w	r2, ip, #4294967295
 800134c:	d202      	bcs.n	8001354 <__udivmoddi4+0xe4>
 800134e:	42a8      	cmp	r0, r5
 8001350:	f200 80e9 	bhi.w	8001526 <__udivmoddi4+0x2b6>
 8001354:	4694      	mov	ip, r2
 8001356:	1a2d      	subs	r5, r5, r0
 8001358:	fbb5 f0fe 	udiv	r0, r5, lr
 800135c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001360:	fb08 f800 	mul.w	r8, r8, r0
 8001364:	b2a4      	uxth	r4, r4
 8001366:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800136a:	45a0      	cmp	r8, r4
 800136c:	d907      	bls.n	800137e <__udivmoddi4+0x10e>
 800136e:	193c      	adds	r4, r7, r4
 8001370:	f100 32ff 	add.w	r2, r0, #4294967295
 8001374:	d202      	bcs.n	800137c <__udivmoddi4+0x10c>
 8001376:	45a0      	cmp	r8, r4
 8001378:	f200 80d9 	bhi.w	800152e <__udivmoddi4+0x2be>
 800137c:	4610      	mov	r0, r2
 800137e:	eba4 0408 	sub.w	r4, r4, r8
 8001382:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001386:	e7c0      	b.n	800130a <__udivmoddi4+0x9a>
 8001388:	428b      	cmp	r3, r1
 800138a:	d908      	bls.n	800139e <__udivmoddi4+0x12e>
 800138c:	2e00      	cmp	r6, #0
 800138e:	f000 80b1 	beq.w	80014f4 <__udivmoddi4+0x284>
 8001392:	2100      	movs	r1, #0
 8001394:	e9c6 0500 	strd	r0, r5, [r6]
 8001398:	4608      	mov	r0, r1
 800139a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800139e:	fab3 f183 	clz	r1, r3
 80013a2:	2900      	cmp	r1, #0
 80013a4:	d14b      	bne.n	800143e <__udivmoddi4+0x1ce>
 80013a6:	42ab      	cmp	r3, r5
 80013a8:	d302      	bcc.n	80013b0 <__udivmoddi4+0x140>
 80013aa:	4282      	cmp	r2, r0
 80013ac:	f200 80b9 	bhi.w	8001522 <__udivmoddi4+0x2b2>
 80013b0:	1a84      	subs	r4, r0, r2
 80013b2:	eb65 0303 	sbc.w	r3, r5, r3
 80013b6:	2001      	movs	r0, #1
 80013b8:	469e      	mov	lr, r3
 80013ba:	2e00      	cmp	r6, #0
 80013bc:	d0aa      	beq.n	8001314 <__udivmoddi4+0xa4>
 80013be:	e9c6 4e00 	strd	r4, lr, [r6]
 80013c2:	e7a7      	b.n	8001314 <__udivmoddi4+0xa4>
 80013c4:	409f      	lsls	r7, r3
 80013c6:	f1c3 0220 	rsb	r2, r3, #32
 80013ca:	40d1      	lsrs	r1, r2
 80013cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80013d4:	fa1f f887 	uxth.w	r8, r7
 80013d8:	fb0e 1110 	mls	r1, lr, r0, r1
 80013dc:	fa24 f202 	lsr.w	r2, r4, r2
 80013e0:	409d      	lsls	r5, r3
 80013e2:	fb00 fc08 	mul.w	ip, r0, r8
 80013e6:	432a      	orrs	r2, r5
 80013e8:	0c15      	lsrs	r5, r2, #16
 80013ea:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013ee:	45ac      	cmp	ip, r5
 80013f0:	fa04 f403 	lsl.w	r4, r4, r3
 80013f4:	d909      	bls.n	800140a <__udivmoddi4+0x19a>
 80013f6:	197d      	adds	r5, r7, r5
 80013f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80013fc:	f080 808f 	bcs.w	800151e <__udivmoddi4+0x2ae>
 8001400:	45ac      	cmp	ip, r5
 8001402:	f240 808c 	bls.w	800151e <__udivmoddi4+0x2ae>
 8001406:	3802      	subs	r0, #2
 8001408:	443d      	add	r5, r7
 800140a:	eba5 050c 	sub.w	r5, r5, ip
 800140e:	fbb5 f1fe 	udiv	r1, r5, lr
 8001412:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001416:	fb01 f908 	mul.w	r9, r1, r8
 800141a:	b295      	uxth	r5, r2
 800141c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001420:	45a9      	cmp	r9, r5
 8001422:	d907      	bls.n	8001434 <__udivmoddi4+0x1c4>
 8001424:	197d      	adds	r5, r7, r5
 8001426:	f101 32ff 	add.w	r2, r1, #4294967295
 800142a:	d274      	bcs.n	8001516 <__udivmoddi4+0x2a6>
 800142c:	45a9      	cmp	r9, r5
 800142e:	d972      	bls.n	8001516 <__udivmoddi4+0x2a6>
 8001430:	3902      	subs	r1, #2
 8001432:	443d      	add	r5, r7
 8001434:	eba5 0509 	sub.w	r5, r5, r9
 8001438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800143c:	e778      	b.n	8001330 <__udivmoddi4+0xc0>
 800143e:	f1c1 0720 	rsb	r7, r1, #32
 8001442:	408b      	lsls	r3, r1
 8001444:	fa22 fc07 	lsr.w	ip, r2, r7
 8001448:	ea4c 0c03 	orr.w	ip, ip, r3
 800144c:	fa25 f407 	lsr.w	r4, r5, r7
 8001450:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001454:	fbb4 f9fe 	udiv	r9, r4, lr
 8001458:	fa1f f88c 	uxth.w	r8, ip
 800145c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001460:	fa20 f307 	lsr.w	r3, r0, r7
 8001464:	fb09 fa08 	mul.w	sl, r9, r8
 8001468:	408d      	lsls	r5, r1
 800146a:	431d      	orrs	r5, r3
 800146c:	0c2b      	lsrs	r3, r5, #16
 800146e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001472:	45a2      	cmp	sl, r4
 8001474:	fa02 f201 	lsl.w	r2, r2, r1
 8001478:	fa00 f301 	lsl.w	r3, r0, r1
 800147c:	d909      	bls.n	8001492 <__udivmoddi4+0x222>
 800147e:	eb1c 0404 	adds.w	r4, ip, r4
 8001482:	f109 30ff 	add.w	r0, r9, #4294967295
 8001486:	d248      	bcs.n	800151a <__udivmoddi4+0x2aa>
 8001488:	45a2      	cmp	sl, r4
 800148a:	d946      	bls.n	800151a <__udivmoddi4+0x2aa>
 800148c:	f1a9 0902 	sub.w	r9, r9, #2
 8001490:	4464      	add	r4, ip
 8001492:	eba4 040a 	sub.w	r4, r4, sl
 8001496:	fbb4 f0fe 	udiv	r0, r4, lr
 800149a:	fb0e 4410 	mls	r4, lr, r0, r4
 800149e:	fb00 fa08 	mul.w	sl, r0, r8
 80014a2:	b2ad      	uxth	r5, r5
 80014a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80014a8:	45a2      	cmp	sl, r4
 80014aa:	d908      	bls.n	80014be <__udivmoddi4+0x24e>
 80014ac:	eb1c 0404 	adds.w	r4, ip, r4
 80014b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80014b4:	d22d      	bcs.n	8001512 <__udivmoddi4+0x2a2>
 80014b6:	45a2      	cmp	sl, r4
 80014b8:	d92b      	bls.n	8001512 <__udivmoddi4+0x2a2>
 80014ba:	3802      	subs	r0, #2
 80014bc:	4464      	add	r4, ip
 80014be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80014c2:	fba0 8902 	umull	r8, r9, r0, r2
 80014c6:	eba4 040a 	sub.w	r4, r4, sl
 80014ca:	454c      	cmp	r4, r9
 80014cc:	46c6      	mov	lr, r8
 80014ce:	464d      	mov	r5, r9
 80014d0:	d319      	bcc.n	8001506 <__udivmoddi4+0x296>
 80014d2:	d016      	beq.n	8001502 <__udivmoddi4+0x292>
 80014d4:	b15e      	cbz	r6, 80014ee <__udivmoddi4+0x27e>
 80014d6:	ebb3 020e 	subs.w	r2, r3, lr
 80014da:	eb64 0405 	sbc.w	r4, r4, r5
 80014de:	fa04 f707 	lsl.w	r7, r4, r7
 80014e2:	fa22 f301 	lsr.w	r3, r2, r1
 80014e6:	431f      	orrs	r7, r3
 80014e8:	40cc      	lsrs	r4, r1
 80014ea:	e9c6 7400 	strd	r7, r4, [r6]
 80014ee:	2100      	movs	r1, #0
 80014f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014f4:	4631      	mov	r1, r6
 80014f6:	4630      	mov	r0, r6
 80014f8:	e70c      	b.n	8001314 <__udivmoddi4+0xa4>
 80014fa:	468c      	mov	ip, r1
 80014fc:	e6eb      	b.n	80012d6 <__udivmoddi4+0x66>
 80014fe:	4610      	mov	r0, r2
 8001500:	e6ff      	b.n	8001302 <__udivmoddi4+0x92>
 8001502:	4543      	cmp	r3, r8
 8001504:	d2e6      	bcs.n	80014d4 <__udivmoddi4+0x264>
 8001506:	ebb8 0e02 	subs.w	lr, r8, r2
 800150a:	eb69 050c 	sbc.w	r5, r9, ip
 800150e:	3801      	subs	r0, #1
 8001510:	e7e0      	b.n	80014d4 <__udivmoddi4+0x264>
 8001512:	4628      	mov	r0, r5
 8001514:	e7d3      	b.n	80014be <__udivmoddi4+0x24e>
 8001516:	4611      	mov	r1, r2
 8001518:	e78c      	b.n	8001434 <__udivmoddi4+0x1c4>
 800151a:	4681      	mov	r9, r0
 800151c:	e7b9      	b.n	8001492 <__udivmoddi4+0x222>
 800151e:	4608      	mov	r0, r1
 8001520:	e773      	b.n	800140a <__udivmoddi4+0x19a>
 8001522:	4608      	mov	r0, r1
 8001524:	e749      	b.n	80013ba <__udivmoddi4+0x14a>
 8001526:	f1ac 0c02 	sub.w	ip, ip, #2
 800152a:	443d      	add	r5, r7
 800152c:	e713      	b.n	8001356 <__udivmoddi4+0xe6>
 800152e:	3802      	subs	r0, #2
 8001530:	443c      	add	r4, r7
 8001532:	e724      	b.n	800137e <__udivmoddi4+0x10e>

08001534 <__aeabi_idiv0>:
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop

08001538 <_ZN6I2Cdev7readBitEhhhPh>:
 * @param regAddr Register regAddr to read from
 * @param bitNum Bit position to read (0-7)
 * @param data Container for single bit value
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af04      	add	r7, sp, #16
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	460b      	mov	r3, r1
 8001546:	71bb      	strb	r3, [r7, #6]
 8001548:	4613      	mov	r3, r2
 800154a:	717b      	strb	r3, [r7, #5]
  uint8_t buffer;
  sendBuf[0] = regAddr;
 800154c:	4a1a      	ldr	r2, [pc, #104]	; (80015b8 <_ZN6I2Cdev7readBitEhhhPh+0x80>)
 800154e:	79bb      	ldrb	r3, [r7, #6]
 8001550:	7013      	strb	r3, [r2, #0]
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	b299      	uxth	r1, r3
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	b29a      	uxth	r2, r3
 800155a:	2301      	movs	r3, #1
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	2301      	movs	r3, #1
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	f107 030e 	add.w	r3, r7, #14
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	4814      	ldr	r0, [pc, #80]	; (80015bc <_ZN6I2Cdev7readBitEhhhPh+0x84>)
 800156c:	f006 fa64 	bl	8007a38 <HAL_I2C_Mem_Read>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf14      	ite	ne
 8001576:	2301      	movne	r3, #1
 8001578:	2300      	moveq	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <_ZN6I2Cdev7readBitEhhhPh+0x4e>
	  MX_I2C1_Init();
 8001580:	f003 f96c 	bl	800485c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001584:	e7e5      	b.n	8001552 <_ZN6I2Cdev7readBitEhhhPh+0x1a>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001586:	2301      	movs	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
  *data = buffer & (1 << bitNum);
 800158a:	797b      	ldrb	r3, [r7, #5]
 800158c:	2201      	movs	r2, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	b25a      	sxtb	r2, r3
 8001594:	7bbb      	ldrb	r3, [r7, #14]
 8001596:	b25b      	sxtb	r3, r3
 8001598:	4013      	ands	r3, r2
 800159a:	b25b      	sxtb	r3, r3
 800159c:	b2da      	uxtb	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	701a      	strb	r2, [r3, #0]
  return response == BCM2835_I2C_REASON_OK ;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	b25b      	sxtb	r3, r3
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200003d4 	.word	0x200003d4
 80015bc:	20000650 	.word	0x20000650

080015c0 <_ZN6I2Cdev8readBitsEhhhhPh>:
 * @param bitStart First bit position to read (0-7)
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data) {
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af04      	add	r7, sp, #16
 80015c6:	4604      	mov	r4, r0
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4623      	mov	r3, r4
 80015d0:	71fb      	strb	r3, [r7, #7]
 80015d2:	4603      	mov	r3, r0
 80015d4:	71bb      	strb	r3, [r7, #6]
 80015d6:	460b      	mov	r3, r1
 80015d8:	717b      	strb	r3, [r7, #5]
 80015da:	4613      	mov	r3, r2
 80015dc:	713b      	strb	r3, [r7, #4]
  // 01101001 read byte
  // 76543210 bit numbers
  //    xxx   args: bitStart=4, length=3
  //    010   masked
  //   -> 010 shifted
  sendBuf[0] = regAddr;
 80015de:	4a25      	ldr	r2, [pc, #148]	; (8001674 <_ZN6I2Cdev8readBitsEhhhhPh+0xb4>)
 80015e0:	79bb      	ldrb	r3, [r7, #6]
 80015e2:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	b299      	uxth	r1, r3
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	2301      	movs	r3, #1
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	2301      	movs	r3, #1
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2301      	movs	r3, #1
 80015fc:	481e      	ldr	r0, [pc, #120]	; (8001678 <_ZN6I2Cdev8readBitsEhhhhPh+0xb8>)
 80015fe:	f006 fa1b 	bl	8007a38 <HAL_I2C_Mem_Read>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf14      	ite	ne
 8001608:	2301      	movne	r3, #1
 800160a:	2300      	moveq	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <_ZN6I2Cdev8readBitsEhhhhPh+0x58>
  	  MX_I2C1_Init();
 8001612:	f003 f923 	bl	800485c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001616:	e7e5      	b.n	80015e4 <_ZN6I2Cdev8readBitsEhhhhPh+0x24>
    }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
  uint8_t b = buffer;
 800161c:	7b3b      	ldrb	r3, [r7, #12]
 800161e:	73bb      	strb	r3, [r7, #14]
  if (response == BCM2835_I2C_REASON_OK) {
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d11a      	bne.n	800165c <_ZN6I2Cdev8readBitsEhhhhPh+0x9c>
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001626:	793b      	ldrb	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	1e5a      	subs	r2, r3, #1
 8001630:	7979      	ldrb	r1, [r7, #5]
 8001632:	793b      	ldrb	r3, [r7, #4]
 8001634:	1acb      	subs	r3, r1, r3
 8001636:	3301      	adds	r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	737b      	strb	r3, [r7, #13]
    b &= mask;
 800163e:	7bba      	ldrb	r2, [r7, #14]
 8001640:	7b7b      	ldrb	r3, [r7, #13]
 8001642:	4013      	ands	r3, r2
 8001644:	73bb      	strb	r3, [r7, #14]
    b >>= (bitStart - length + 1);
 8001646:	7bba      	ldrb	r2, [r7, #14]
 8001648:	7979      	ldrb	r1, [r7, #5]
 800164a:	793b      	ldrb	r3, [r7, #4]
 800164c:	1acb      	subs	r3, r1, r3
 800164e:	3301      	adds	r3, #1
 8001650:	fa42 f303 	asr.w	r3, r2, r3
 8001654:	73bb      	strb	r3, [r7, #14]
    *data = b;
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	7bba      	ldrb	r2, [r7, #14]
 800165a:	701a      	strb	r2, [r3, #0]
  }
  return response == BCM2835_I2C_REASON_OK;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	2b01      	cmp	r3, #1
 8001660:	bf0c      	ite	eq
 8001662:	2301      	moveq	r3, #1
 8001664:	2300      	movne	r3, #0
 8001666:	b2db      	uxtb	r3, r3
 8001668:	b25b      	sxtb	r3, r3
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}
 8001672:	bf00      	nop
 8001674:	200003d4 	.word	0x200003d4
 8001678:	20000650 	.word	0x20000650

0800167c <_ZN6I2Cdev8readByteEhhPh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af04      	add	r7, sp, #16
 8001682:	4603      	mov	r3, r0
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	460b      	mov	r3, r1
 800168a:	71bb      	strb	r3, [r7, #6]
  sendBuf[0] = regAddr;
 800168c:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <_ZN6I2Cdev8readByteEhhPh+0x6c>)
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	b299      	uxth	r1, r3
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	b29a      	uxth	r2, r3
 800169a:	2301      	movs	r3, #1
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	2301      	movs	r3, #1
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	f107 030e 	add.w	r3, r7, #14
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	4810      	ldr	r0, [pc, #64]	; (80016ec <_ZN6I2Cdev8readByteEhhPh+0x70>)
 80016ac:	f006 f9c4 	bl	8007a38 <HAL_I2C_Mem_Read>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <_ZN6I2Cdev8readByteEhhPh+0x4a>
    MX_I2C1_Init();
 80016c0:	f003 f8cc 	bl	800485c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80016c4:	e7e5      	b.n	8001692 <_ZN6I2Cdev8readByteEhhPh+0x16>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
  data[0] = buffer;
 80016ca:	7bba      	ldrb	r2, [r7, #14]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	701a      	strb	r2, [r3, #0]
  return response == BCM2835_I2C_REASON_OK;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	bf0c      	ite	eq
 80016d6:	2301      	moveq	r3, #1
 80016d8:	2300      	movne	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	b25b      	sxtb	r3, r3
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200003d4 	.word	0x200003d4
 80016ec:	20000650 	.word	0x20000650

080016f0 <_ZN6I2Cdev9readBytesEhhhPh>:
 * @param regAddr First register regAddr to read from
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @return I2C_TransferReturn_TypeDef http://downloads.energymicro.com/documentation/doxygen/group__I2C.html
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data) {
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af04      	add	r7, sp, #16
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	460b      	mov	r3, r1
 80016fe:	71bb      	strb	r3, [r7, #6]
 8001700:	4613      	mov	r3, r2
 8001702:	717b      	strb	r3, [r7, #5]
  uint8_t response = BCM2835_I2C_REASON_OK;
  int i ;
  for (i = 0; i < length ; i++) {
    data[i] = (uint8_t) buffer[i];
  }
  return response == BCM2835_I2C_REASON_OK;
 8001704:	466b      	mov	r3, sp
 8001706:	461d      	mov	r5, r3
  sendBuf[0] = regAddr;
 8001708:	4a32      	ldr	r2, [pc, #200]	; (80017d4 <_ZN6I2Cdev9readBytesEhhhPh+0xe4>)
 800170a:	79bb      	ldrb	r3, [r7, #6]
 800170c:	7013      	strb	r3, [r2, #0]
  uint8_t buffer[length];
 800170e:	797b      	ldrb	r3, [r7, #5]
 8001710:	1e5c      	subs	r4, r3, #1
 8001712:	613c      	str	r4, [r7, #16]
 8001714:	4623      	mov	r3, r4
 8001716:	3301      	adds	r3, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	00cb      	lsls	r3, r1, #3
 8001728:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800172c:	00c2      	lsls	r2, r0, #3
 800172e:	4623      	mov	r3, r4
 8001730:	3301      	adds	r3, #1
 8001732:	4618      	mov	r0, r3
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	00cb      	lsls	r3, r1, #3
 8001742:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001746:	00c2      	lsls	r2, r0, #3
 8001748:	4623      	mov	r3, r4
 800174a:	3301      	adds	r3, #1
 800174c:	3307      	adds	r3, #7
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	ebad 0d03 	sub.w	sp, sp, r3
 8001756:	ab04      	add	r3, sp, #16
 8001758:	3300      	adds	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	b299      	uxth	r1, r3
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	b298      	uxth	r0, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	797a      	ldrb	r2, [r7, #5]
 8001768:	b292      	uxth	r2, r2
 800176a:	2401      	movs	r4, #1
 800176c:	9402      	str	r4, [sp, #8]
 800176e:	9201      	str	r2, [sp, #4]
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	4602      	mov	r2, r0
 8001776:	4818      	ldr	r0, [pc, #96]	; (80017d8 <_ZN6I2Cdev9readBytesEhhhPh+0xe8>)
 8001778:	f006 f95e 	bl	8007a38 <HAL_I2C_Mem_Read>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <_ZN6I2Cdev9readBytesEhhhPh+0xa2>
    MX_I2C1_Init();
 800178c:	f003 f866 	bl	800485c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 8001790:	e7e4      	b.n	800175c <_ZN6I2Cdev9readBytesEhhhPh+0x6c>
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001792:	2301      	movs	r3, #1
 8001794:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < length ; i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	797b      	ldrb	r3, [r7, #5]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	429a      	cmp	r2, r3
 80017a0:	da0b      	bge.n	80017ba <_ZN6I2Cdev9readBytesEhhhPh+0xca>
    data[i] = (uint8_t) buffer[i];
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	440a      	add	r2, r1
 80017ae:	7812      	ldrb	r2, [r2, #0]
 80017b0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < length ; i++) {
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e7ef      	b.n	800179a <_ZN6I2Cdev9readBytesEhhhPh+0xaa>
  return response == BCM2835_I2C_REASON_OK;
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	46ad      	mov	sp, r5
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bdb0      	pop	{r4, r5, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200003d4 	.word	0x200003d4
 80017d8:	20000650 	.word	0x20000650

080017dc <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af04      	add	r7, sp, #16
 80017e2:	4604      	mov	r4, r0
 80017e4:	4608      	mov	r0, r1
 80017e6:	4611      	mov	r1, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	4623      	mov	r3, r4
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	4603      	mov	r3, r0
 80017f0:	71bb      	strb	r3, [r7, #6]
 80017f2:	460b      	mov	r3, r1
 80017f4:	717b      	strb	r3, [r7, #5]
 80017f6:	4613      	mov	r3, r2
 80017f8:	713b      	strb	r3, [r7, #4]

  //first reading registery value
  sendBuf[0] = regAddr;
 80017fa:	4a34      	ldr	r2, [pc, #208]	; (80018cc <_ZN6I2Cdev8writeBitEhhhh+0xf0>)
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	b299      	uxth	r1, r3
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	b29a      	uxth	r2, r3
 8001808:	2301      	movs	r3, #1
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	2301      	movs	r3, #1
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	f107 030e 	add.w	r3, r7, #14
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	482d      	ldr	r0, [pc, #180]	; (80018d0 <_ZN6I2Cdev8writeBitEhhhh+0xf4>)
 800181a:	f006 f90d 	bl	8007a38 <HAL_I2C_Mem_Read>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf14      	ite	ne
 8001824:	2301      	movne	r3, #1
 8001826:	2300      	moveq	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <_ZN6I2Cdev8writeBitEhhhh+0x58>
    MX_I2C1_Init();
 800182e:	f003 f815 	bl	800485c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001832:	e7e5      	b.n	8001800 <_ZN6I2Cdev8writeBitEhhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d13b      	bne.n	80018b6 <_ZN6I2Cdev8writeBitEhhhh+0xda>
    uint8_t b = buffer ;
 800183e:	7bbb      	ldrb	r3, [r7, #14]
 8001840:	737b      	strb	r3, [r7, #13]
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8001842:	793b      	ldrb	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00a      	beq.n	800185e <_ZN6I2Cdev8writeBitEhhhh+0x82>
 8001848:	797b      	ldrb	r3, [r7, #5]
 800184a:	2201      	movs	r2, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	b25a      	sxtb	r2, r3
 8001852:	7b7b      	ldrb	r3, [r7, #13]
 8001854:	b25b      	sxtb	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b25b      	sxtb	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	e00b      	b.n	8001876 <_ZN6I2Cdev8writeBitEhhhh+0x9a>
 800185e:	797b      	ldrb	r3, [r7, #5]
 8001860:	2201      	movs	r2, #1
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	b25b      	sxtb	r3, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	b25a      	sxtb	r2, r3
 800186c:	7b7b      	ldrb	r3, [r7, #13]
 800186e:	b25b      	sxtb	r3, r3
 8001870:	4013      	ands	r3, r2
 8001872:	b25b      	sxtb	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	737b      	strb	r3, [r7, #13]
    sendBuf[1] = b ;
 8001878:	7b7a      	ldrb	r2, [r7, #13]
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <_ZN6I2Cdev8writeBitEhhhh+0xf0>)
 800187c:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	b299      	uxth	r1, r3
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	b29a      	uxth	r2, r3
 8001886:	2301      	movs	r3, #1
 8001888:	9302      	str	r3, [sp, #8]
 800188a:	2301      	movs	r3, #1
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	f107 030d 	add.w	r3, r7, #13
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2301      	movs	r3, #1
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <_ZN6I2Cdev8writeBitEhhhh+0xf4>)
 8001898:	f005 ffd4 	bl	8007844 <HAL_I2C_Mem_Write>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf14      	ite	ne
 80018a2:	2301      	movne	r3, #1
 80018a4:	2300      	moveq	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <_ZN6I2Cdev8writeBitEhhhh+0xd6>
    	MX_I2C1_Init();
 80018ac:	f002 ffd6 	bl	800485c <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80018b0:	e7e5      	b.n	800187e <_ZN6I2Cdev8writeBitEhhhh+0xa2>
    }
    response = BCM2835_I2C_REASON_OK;
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
  }
  return response == BCM2835_I2C_REASON_OK;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200003d4 	.word	0x200003d4
 80018d0:	20000650 	.word	0x20000650

080018d4 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b089      	sub	sp, #36	; 0x24
 80018d8:	af04      	add	r7, sp, #16
 80018da:	4604      	mov	r4, r0
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	4603      	mov	r3, r0
 80018e8:	71bb      	strb	r3, [r7, #6]
 80018ea:	460b      	mov	r3, r1
 80018ec:	717b      	strb	r3, [r7, #5]
 80018ee:	4613      	mov	r3, r2
 80018f0:	713b      	strb	r3, [r7, #4]
  // 10101111 original value (sample)
  // 10100011 original & ~mask
  // 10101011 masked | value

  //first reading registery value
  sendBuf[0] = regAddr;
 80018f2:	4a3c      	ldr	r2, [pc, #240]	; (80019e4 <_ZN6I2Cdev9writeBitsEhhhhh+0x110>)
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	b299      	uxth	r1, r3
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	2301      	movs	r3, #1
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	2301      	movs	r3, #1
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	f107 030d 	add.w	r3, r7, #13
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2301      	movs	r3, #1
 8001910:	4835      	ldr	r0, [pc, #212]	; (80019e8 <_ZN6I2Cdev9writeBitsEhhhhh+0x114>)
 8001912:	f006 f891 	bl	8007a38 <HAL_I2C_Mem_Read>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf14      	ite	ne
 800191c:	2301      	movne	r3, #1
 800191e:	2300      	moveq	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <_ZN6I2Cdev9writeBitsEhhhhh+0x58>
    MX_I2C1_Init();
 8001926:	f002 ff99 	bl	800485c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800192a:	e7e5      	b.n	80018f8 <_ZN6I2Cdev9writeBitsEhhhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d14c      	bne.n	80019d0 <_ZN6I2Cdev9writeBitsEhhhhh+0xfc>
    uint8_t b = buffer;
 8001936:	7b7b      	ldrb	r3, [r7, #13]
 8001938:	733b      	strb	r3, [r7, #12]
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800193a:	793b      	ldrb	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	7979      	ldrb	r1, [r7, #5]
 8001946:	793b      	ldrb	r3, [r7, #4]
 8001948:	1acb      	subs	r3, r1, r3
 800194a:	3301      	adds	r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	73bb      	strb	r3, [r7, #14]
    data <<= (bitStart - length + 1); // shift data into correct position
 8001952:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001956:	7979      	ldrb	r1, [r7, #5]
 8001958:	793b      	ldrb	r3, [r7, #4]
 800195a:	1acb      	subs	r3, r1, r3
 800195c:	3301      	adds	r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	f887 3020 	strb.w	r3, [r7, #32]
    data &= mask; // zero all non-important bits in data
 8001966:	f897 2020 	ldrb.w	r2, [r7, #32]
 800196a:	7bbb      	ldrb	r3, [r7, #14]
 800196c:	4013      	ands	r3, r2
 800196e:	f887 3020 	strb.w	r3, [r7, #32]
    b &= ~(mask); // zero all important bits in existing byte
 8001972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001976:	43db      	mvns	r3, r3
 8001978:	b25a      	sxtb	r2, r3
 800197a:	7b3b      	ldrb	r3, [r7, #12]
 800197c:	b25b      	sxtb	r3, r3
 800197e:	4013      	ands	r3, r2
 8001980:	b25b      	sxtb	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	733b      	strb	r3, [r7, #12]
    b |= data; // combine data with existing byte
 8001986:	7b3a      	ldrb	r2, [r7, #12]
 8001988:	f897 3020 	ldrb.w	r3, [r7, #32]
 800198c:	4313      	orrs	r3, r2
 800198e:	b2db      	uxtb	r3, r3
 8001990:	733b      	strb	r3, [r7, #12]
    sendBuf[1] = b ;
 8001992:	7b3a      	ldrb	r2, [r7, #12]
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <_ZN6I2Cdev9writeBitsEhhhhh+0x110>)
 8001996:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	b299      	uxth	r1, r3
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	2301      	movs	r3, #1
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	2301      	movs	r3, #1
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2301      	movs	r3, #1
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <_ZN6I2Cdev9writeBitsEhhhhh+0x114>)
 80019b2:	f005 ff47 	bl	8007844 <HAL_I2C_Mem_Write>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf14      	ite	ne
 80019bc:	2301      	movne	r3, #1
 80019be:	2300      	moveq	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <_ZN6I2Cdev9writeBitsEhhhhh+0xf8>
       MX_I2C1_Init();
 80019c6:	f002 ff49 	bl	800485c <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80019ca:	e7e5      	b.n	8001998 <_ZN6I2Cdev9writeBitsEhhhhh+0xc4>
    }
    response = BCM2835_I2C_REASON_OK;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
    }
  return response == BCM2835_I2C_REASON_OK;
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	bf0c      	ite	eq
 80019d6:	2301      	moveq	r3, #1
 80019d8:	2300      	movne	r3, #0
 80019da:	b2db      	uxtb	r3, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	200003d4 	.word	0x200003d4
 80019e8:	20000650 	.word	0x20000650

080019ec <_ZN6I2Cdev9writeByteEhhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af04      	add	r7, sp, #16
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	460b      	mov	r3, r1
 80019f8:	71bb      	strb	r3, [r7, #6]
 80019fa:	4613      	mov	r3, r2
 80019fc:	717b      	strb	r3, [r7, #5]

  sendBuf[0] = regAddr;
 80019fe:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <_ZN6I2Cdev9writeByteEhhh+0x68>)
 8001a00:	79bb      	ldrb	r3, [r7, #6]
 8001a02:	7013      	strb	r3, [r2, #0]
  sendBuf[1] = data;
 8001a04:	797a      	ldrb	r2, [r7, #5]
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <_ZN6I2Cdev9writeByteEhhh+0x68>)
 8001a08:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	b299      	uxth	r1, r3
 8001a0e:	79bb      	ldrb	r3, [r7, #6]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	2301      	movs	r3, #1
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	2301      	movs	r3, #1
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	1d7b      	adds	r3, r7, #5
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	480d      	ldr	r0, [pc, #52]	; (8001a58 <_ZN6I2Cdev9writeByteEhhh+0x6c>)
 8001a22:	f005 ff0f 	bl	8007844 <HAL_I2C_Mem_Write>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <_ZN6I2Cdev9writeByteEhhh+0x50>
     MX_I2C1_Init();
 8001a36:	f002 ff11 	bl	800485c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001a3a:	e7e6      	b.n	8001a0a <_ZN6I2Cdev9writeByteEhhh+0x1e>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200003d4 	.word	0x200003d4
 8001a58:	20000650 	.word	0x20000650

08001a5c <_ZN6I2Cdev9writeWordEhht>:
    data[i] = (buffer[i*2] << 8) | buffer[i*2+1] ;
  }
  return  response == BCM2835_I2C_REASON_OK ;
}

bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af04      	add	r7, sp, #16
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
 8001a66:	460b      	mov	r3, r1
 8001a68:	71bb      	strb	r3, [r7, #6]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	80bb      	strh	r3, [r7, #4]

  sendBuf[0] = (uint8_t) (data >> 8); //MSByte
 8001a6e:	88bb      	ldrh	r3, [r7, #4]
 8001a70:	121b      	asrs	r3, r3, #8
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <_ZN6I2Cdev9writeWordEhht+0x70>)
 8001a76:	701a      	strb	r2, [r3, #0]
  sendBuf[1] = (uint8_t) (data >> 0); //LSByte
 8001a78:	88bb      	ldrh	r3, [r7, #4]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <_ZN6I2Cdev9writeWordEhht+0x70>)
 8001a7e:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	b299      	uxth	r1, r3
 8001a84:	79bb      	ldrb	r3, [r7, #6]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	2301      	movs	r3, #1
 8001a8a:	9302      	str	r3, [sp, #8]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <_ZN6I2Cdev9writeWordEhht+0x70>)
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2301      	movs	r3, #1
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <_ZN6I2Cdev9writeWordEhht+0x74>)
 8001a98:	f005 fed4 	bl	8007844 <HAL_I2C_Mem_Write>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	2300      	moveq	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <_ZN6I2Cdev9writeWordEhht+0x56>
     MX_I2C1_Init();
 8001aac:	f002 fed6 	bl	800485c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 8001ab0:	e7e6      	b.n	8001a80 <_ZN6I2Cdev9writeWordEhht+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200003d4 	.word	0x200003d4
 8001ad0:	20000650 	.word	0x20000650

08001ad4 <_ZN6I2Cdev10writeBytesEhhhPh>:

bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af04      	add	r7, sp, #16
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	71bb      	strb	r3, [r7, #6]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  for (i = 0; i < length; i++) {
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	797b      	ldrb	r3, [r7, #5]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d20a      	bcs.n	8001b0a <_ZN6I2Cdev10writeBytesEhhhPh+0x36>
    sendBuf[i] = data[i] ;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	441a      	add	r2, r3
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	7811      	ldrb	r1, [r2, #0]
 8001afe:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <_ZN6I2Cdev10writeBytesEhhhPh+0x84>)
 8001b00:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < length; i++) {
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	3301      	adds	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e7f0      	b.n	8001aec <_ZN6I2Cdev10writeBytesEhhhPh+0x18>
  }
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	b299      	uxth	r1, r3
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	797b      	ldrb	r3, [r7, #5]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2001      	movs	r0, #1
 8001b18:	9002      	str	r0, [sp, #8]
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <_ZN6I2Cdev10writeBytesEhhhPh+0x84>)
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2301      	movs	r3, #1
 8001b22:	480e      	ldr	r0, [pc, #56]	; (8001b5c <_ZN6I2Cdev10writeBytesEhhhPh+0x88>)
 8001b24:	f005 fe8e 	bl	8007844 <HAL_I2C_Mem_Write>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf14      	ite	ne
 8001b2e:	2301      	movne	r3, #1
 8001b30:	2300      	moveq	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <_ZN6I2Cdev10writeBytesEhhhPh+0x6a>
     MX_I2C1_Init();
 8001b38:	f002 fe90 	bl	800485c <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001b3c:	e7e5      	b.n	8001b0a <_ZN6I2Cdev10writeBytesEhhhPh+0x36>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73bb      	strb	r3, [r7, #14]
  return response == BCM2835_I2C_REASON_OK ;
 8001b42:	7bbb      	ldrb	r3, [r7, #14]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200003d4 	.word	0x200003d4
 8001b5c:	20000650 	.word	0x20000650

08001b60 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f00d fc61 	bl	800f430 <asinf>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f00d fadb 	bl	800f13c <atanf>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f00d fbdb 	bl	800f354 <cosf>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f00d fc07 	bl	800f3c4 <sinf>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f00d fc57 	bl	800f47c <sqrtf>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_ZN26MPU6050_6Axis_MotionApps20C1EhPv>:



class MPU6050_6Axis_MotionApps20 : public MPU6050 {
    public:
        MPU6050_6Axis_MotionApps20(uint8_t address=MPU6050_DEFAULT_ADDRESS, void *wireObj=0) : MPU6050(address) { }
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	460b      	mov	r3, r1
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	72fb      	strb	r3, [r7, #11]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	7afa      	ldrb	r2, [r7, #11]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fd89 	bl	8002704 <_ZN7MPU6050C1Eh>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_Z17MPU6050_resetFIFOv>:
 * @brief Clears the FIFO (First In First Out) of the MPU6050
 * 
 * --Custom Method!
 */
void MPU6050_resetFIFO()
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  //mpu.setFIFOEnabled(false);
  mpu.resetFIFO();
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <_Z17MPU6050_resetFIFOv+0x10>)
 8001c02:	f000 feba 	bl	800297a <_ZN7MPU60509resetFIFOEv>
  //mpu.setFIFOEnabled(true);
  //mpu.getIntStatus();
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200004e8 	.word	0x200004e8

08001c10 <_Z28MPU6050_WaitForQuaternionSetv>:
 * @brief Waits until a new Quaternion-set is available in the FIFO
 * 
 * --Custom Method!
 */
void MPU6050_WaitForQuaternionSet()
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  FIFOCounter = mpu.getFIFOCount();
 8001c14:	480a      	ldr	r0, [pc, #40]	; (8001c40 <_Z28MPU6050_WaitForQuaternionSetv+0x30>)
 8001c16:	f000 ff01 	bl	8002a1c <_ZN7MPU605012getFIFOCountEv>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <_Z28MPU6050_WaitForQuaternionSetv+0x34>)
 8001c20:	801a      	strh	r2, [r3, #0]
  while (FIFOCounter < 42) FIFOCounter = mpu.getFIFOCount();  //wait until there are more than 42 bytes in the FIFO
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <_Z28MPU6050_WaitForQuaternionSetv+0x34>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	2b29      	cmp	r3, #41	; 0x29
 8001c28:	d807      	bhi.n	8001c3a <_Z28MPU6050_WaitForQuaternionSetv+0x2a>
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <_Z28MPU6050_WaitForQuaternionSetv+0x30>)
 8001c2c:	f000 fef6 	bl	8002a1c <_ZN7MPU605012getFIFOCountEv>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <_Z28MPU6050_WaitForQuaternionSetv+0x34>)
 8001c36:	801a      	strh	r2, [r3, #0]
 8001c38:	e7f3      	b.n	8001c22 <_Z28MPU6050_WaitForQuaternionSetv+0x12>
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200004e8 	.word	0x200004e8
 8001c44:	200004e4 	.word	0x200004e4

08001c48 <_Z28MPU6050_ConvertToQuaternionsv>:
 * @brief Reads a Quaternion-set from the FIFO and assembles the data to W,X,Y,Z
 * 
 * --Custom Method!
 */
void MPU6050_ConvertToQuaternions()
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  if ((FIFOCounter == 42) | (FIFOCounter == 84))
 8001c4c:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	2b2a      	cmp	r3, #42	; 0x2a
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	2b54      	cmp	r3, #84	; 0x54
 8001c60:	bf0c      	ite	eq
 8001c62:	2301      	moveq	r3, #1
 8001c64:	2300      	movne	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d070      	beq.n	8001d52 <_Z28MPU6050_ConvertToQuaternionsv+0x10a>
  {
    mpu.getFIFOBytes(MPU6050_RX_buf, 16);
 8001c70:	2210      	movs	r2, #16
 8001c72:	493a      	ldr	r1, [pc, #232]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c74:	483a      	ldr	r0, [pc, #232]	; (8001d60 <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001c76:	f000 feeb 	bl	8002a50 <_ZN7MPU605012getFIFOBytesEPhh>
    MPUoutputQuaternion[0] = (float)(((int32_t)MPU6050_RX_buf[0] << 24)  | ((int32_t)MPU6050_RX_buf[1] << 16)  | ((int32_t)MPU6050_RX_buf[2] << 8)  | MPU6050_RX_buf[3 ]) / 1073741824;
 8001c7a:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	061a      	lsls	r2, r3, #24
 8001c80:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c82:	785b      	ldrb	r3, [r3, #1]
 8001c84:	041b      	lsls	r3, r3, #16
 8001c86:	431a      	orrs	r2, r3
 8001c88:	4b34      	ldr	r3, [pc, #208]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c8a:	789b      	ldrb	r3, [r3, #2]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	4a32      	ldr	r2, [pc, #200]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c92:	78d2      	ldrb	r2, [r2, #3]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f85c 	bl	8000d54 <__aeabi_i2f>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f95e 	bl	8000f64 <__aeabi_fdiv>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <_Z28MPU6050_ConvertToQuaternionsv+0x11c>)
 8001cae:	601a      	str	r2, [r3, #0]
    MPUoutputQuaternion[1] = (float)(((int32_t)MPU6050_RX_buf[4] << 24)  | ((int32_t)MPU6050_RX_buf[5] << 16)  | ((int32_t)MPU6050_RX_buf[6] << 8)  | MPU6050_RX_buf[7 ]) / 1073741824;
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cb2:	791b      	ldrb	r3, [r3, #4]
 8001cb4:	061a      	lsls	r2, r3, #24
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cb8:	795b      	ldrb	r3, [r3, #5]
 8001cba:	041b      	lsls	r3, r3, #16
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cc0:	799b      	ldrb	r3, [r3, #6]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cc8:	79d2      	ldrb	r2, [r2, #7]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f841 	bl	8000d54 <__aeabi_i2f>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff f943 	bl	8000f64 <__aeabi_fdiv>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <_Z28MPU6050_ConvertToQuaternionsv+0x11c>)
 8001ce4:	605a      	str	r2, [r3, #4]
    MPUoutputQuaternion[2] = (float)(((int32_t)MPU6050_RX_buf[8] << 24)  | ((int32_t)MPU6050_RX_buf[9] << 16)  | ((int32_t)MPU6050_RX_buf[10] << 8) | MPU6050_RX_buf[11]) / 1073741824;
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001ce8:	7a1b      	ldrb	r3, [r3, #8]
 8001cea:	061a      	lsls	r2, r3, #24
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cee:	7a5b      	ldrb	r3, [r3, #9]
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cf6:	7a9b      	ldrb	r3, [r3, #10]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cfe:	7ad2      	ldrb	r2, [r2, #11]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f826 	bl	8000d54 <__aeabi_i2f>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f928 	bl	8000f64 <__aeabi_fdiv>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <_Z28MPU6050_ConvertToQuaternionsv+0x11c>)
 8001d1a:	609a      	str	r2, [r3, #8]
    MPUoutputQuaternion[3] = (float)(((int32_t)MPU6050_RX_buf[12] << 24) | ((int32_t)MPU6050_RX_buf[13] << 16) | ((int32_t)MPU6050_RX_buf[14] << 8) | MPU6050_RX_buf[15]) / 1073741824;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d1e:	7b1b      	ldrb	r3, [r3, #12]
 8001d20:	061a      	lsls	r2, r3, #24
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d24:	7b5b      	ldrb	r3, [r3, #13]
 8001d26:	041b      	lsls	r3, r3, #16
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d2c:	7b9b      	ldrb	r3, [r3, #14]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	4313      	orrs	r3, r2
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d34:	7bd2      	ldrb	r2, [r2, #15]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f80b 	bl	8000d54 <__aeabi_i2f>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff f90d 	bl	8000f64 <__aeabi_fdiv>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <_Z28MPU6050_ConvertToQuaternionsv+0x11c>)
 8001d50:	60da      	str	r2, [r3, #12]
  }
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200004e4 	.word	0x200004e4
 8001d5c:	200004d4 	.word	0x200004d4
 8001d60:	200004e8 	.word	0x200004e8
 8001d64:	2000056c 	.word	0x2000056c

08001d68 <_Z27MPU6050_GetOriginQuaternionv>:
 * @brief Saves the current MPU6050 raw Quaternion as the Origin Quaternion
 * 
 * --Custom Method!
 */
void MPU6050_GetOriginQuaternion()
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  OriginQuaternion[0] = MPUoutputQuaternion[0];
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d72:	6013      	str	r3, [r2, #0]
  OriginQuaternion[1] = MPUoutputQuaternion[1];
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d7a:	6053      	str	r3, [r2, #4]
  OriginQuaternion[2] = MPUoutputQuaternion[2];
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d82:	6093      	str	r3, [r2, #8]
  OriginQuaternion[3] = MPUoutputQuaternion[3];
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d8a:	60d3      	str	r3, [r2, #12]
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	2000056c 	.word	0x2000056c
 8001d98:	2000057c 	.word	0x2000057c

08001d9c <_Z28update_FrameOriginQuaternionv>:
 * It does this to then be able to apply that Quaternion rotation to the W-Quaternion
 * 
 * --Custom Method!
 */
void update_FrameOriginQuaternion()//NOTDONE rename and add deadzones
{
 8001d9c:	b5b0      	push	{r4, r5, r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
  float temp_pitch = SBUS_Channels[0];          //deadzones
 8001da2:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <_Z28update_FrameOriginQuaternionv+0x194>)
 8001da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe ffd3 	bl	8000d54 <__aeabi_i2f>
 8001dae:	4603      	mov	r3, r0
 8001db0:	60fb      	str	r3, [r7, #12]
  float temp_roll  = SBUS_Channels[1];
 8001db2:	4b5f      	ldr	r3, [pc, #380]	; (8001f30 <_Z28update_FrameOriginQuaternionv+0x194>)
 8001db4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe ffcb 	bl	8000d54 <__aeabi_i2f>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	60bb      	str	r3, [r7, #8]
  float temp_yaw   = SBUS_Channels[3];
 8001dc2:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <_Z28update_FrameOriginQuaternionv+0x194>)
 8001dc4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe ffc3 	bl	8000d54 <__aeabi_i2f>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	607b      	str	r3, [r7, #4]
  if ((temp_pitch < pitchDeadzone) & (temp_pitch > -pitchDeadzone)) temp_pitch = 0;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	461c      	mov	r4, r3
 8001dd6:	4957      	ldr	r1, [pc, #348]	; (8001f34 <_Z28update_FrameOriginQuaternionv+0x198>)
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f7ff f9ad 	bl	8001138 <__aeabi_fcmplt>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <_Z28update_FrameOriginQuaternionv+0x4c>
 8001de4:	2300      	movs	r3, #0
 8001de6:	461c      	mov	r4, r3
 8001de8:	b2e4      	uxtb	r4, r4
 8001dea:	2301      	movs	r3, #1
 8001dec:	461d      	mov	r5, r3
 8001dee:	4952      	ldr	r1, [pc, #328]	; (8001f38 <_Z28update_FrameOriginQuaternionv+0x19c>)
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f7ff f9bf 	bl	8001174 <__aeabi_fcmpgt>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <_Z28update_FrameOriginQuaternionv+0x64>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	461d      	mov	r5, r3
 8001e00:	b2eb      	uxtb	r3, r5
 8001e02:	4023      	ands	r3, r4
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <_Z28update_FrameOriginQuaternionv+0x74>
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  if ((temp_roll  < rollDeadzone ) & (temp_roll  > -rollDeadzone )) temp_roll  = 0;
 8001e10:	2301      	movs	r3, #1
 8001e12:	461c      	mov	r4, r3
 8001e14:	4947      	ldr	r1, [pc, #284]	; (8001f34 <_Z28update_FrameOriginQuaternionv+0x198>)
 8001e16:	68b8      	ldr	r0, [r7, #8]
 8001e18:	f7ff f98e 	bl	8001138 <__aeabi_fcmplt>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <_Z28update_FrameOriginQuaternionv+0x8a>
 8001e22:	2300      	movs	r3, #0
 8001e24:	461c      	mov	r4, r3
 8001e26:	b2e4      	uxtb	r4, r4
 8001e28:	2301      	movs	r3, #1
 8001e2a:	461d      	mov	r5, r3
 8001e2c:	4942      	ldr	r1, [pc, #264]	; (8001f38 <_Z28update_FrameOriginQuaternionv+0x19c>)
 8001e2e:	68b8      	ldr	r0, [r7, #8]
 8001e30:	f7ff f9a0 	bl	8001174 <__aeabi_fcmpgt>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <_Z28update_FrameOriginQuaternionv+0xa2>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	461d      	mov	r5, r3
 8001e3e:	b2eb      	uxtb	r3, r5
 8001e40:	4023      	ands	r3, r4
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <_Z28update_FrameOriginQuaternionv+0xb2>
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
  if ((temp_yaw   < yawDeadzone  ) & (temp_yaw   > -yawDeadzone  )) temp_yaw   = 0;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	461c      	mov	r4, r3
 8001e52:	4938      	ldr	r1, [pc, #224]	; (8001f34 <_Z28update_FrameOriginQuaternionv+0x198>)
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff f96f 	bl	8001138 <__aeabi_fcmplt>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <_Z28update_FrameOriginQuaternionv+0xc8>
 8001e60:	2300      	movs	r3, #0
 8001e62:	461c      	mov	r4, r3
 8001e64:	b2e4      	uxtb	r4, r4
 8001e66:	2301      	movs	r3, #1
 8001e68:	461d      	mov	r5, r3
 8001e6a:	4933      	ldr	r1, [pc, #204]	; (8001f38 <_Z28update_FrameOriginQuaternionv+0x19c>)
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff f981 	bl	8001174 <__aeabi_fcmpgt>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <_Z28update_FrameOriginQuaternionv+0xe0>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	461d      	mov	r5, r3
 8001e7c:	b2eb      	uxtb	r3, r5
 8001e7e:	4023      	ands	r3, r4
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <_Z28update_FrameOriginQuaternionv+0xf0>
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
  
  updateQuaternion[0] = cos(temp_yaw          / 200000);                   //create rotation Quaternion
 8001e8c:	492b      	ldr	r1, [pc, #172]	; (8001f3c <_Z28update_FrameOriginQuaternionv+0x1a0>)
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff f868 	bl	8000f64 <__aeabi_fdiv>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fe7a 	bl	8001b90 <_ZSt3cosf>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <_Z28update_FrameOriginQuaternionv+0x1a4>)
 8001ea0:	6013      	str	r3, [r2, #0]
  updateQuaternion[1] = (float)sin(temp_pitch / 200000);
 8001ea2:	4926      	ldr	r1, [pc, #152]	; (8001f3c <_Z28update_FrameOriginQuaternionv+0x1a0>)
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7ff f85d 	bl	8000f64 <__aeabi_fdiv>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fe7b 	bl	8001ba8 <_ZSt3sinf>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a22      	ldr	r2, [pc, #136]	; (8001f40 <_Z28update_FrameOriginQuaternionv+0x1a4>)
 8001eb6:	6053      	str	r3, [r2, #4]
  updateQuaternion[2] = (float)sin(temp_roll  / 200000);
 8001eb8:	4920      	ldr	r1, [pc, #128]	; (8001f3c <_Z28update_FrameOriginQuaternionv+0x1a0>)
 8001eba:	68b8      	ldr	r0, [r7, #8]
 8001ebc:	f7ff f852 	bl	8000f64 <__aeabi_fdiv>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fe70 	bl	8001ba8 <_ZSt3sinf>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <_Z28update_FrameOriginQuaternionv+0x1a4>)
 8001ecc:	6093      	str	r3, [r2, #8]
  updateQuaternion[3] = sin(temp_yaw          / 200000);
 8001ece:	491b      	ldr	r1, [pc, #108]	; (8001f3c <_Z28update_FrameOriginQuaternionv+0x1a0>)
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff f847 	bl	8000f64 <__aeabi_fdiv>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fe65 	bl	8001ba8 <_ZSt3sinf>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <_Z28update_FrameOriginQuaternionv+0x1a4>)
 8001ee2:	60d3      	str	r3, [r2, #12]

  float *p3 = QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(FrameOriginQuaternion, LoopWQuaternion)), updateQuaternion));
 8001ee4:	4917      	ldr	r1, [pc, #92]	; (8001f44 <_Z28update_FrameOriginQuaternionv+0x1a8>)
 8001ee6:	4818      	ldr	r0, [pc, #96]	; (8001f48 <_Z28update_FrameOriginQuaternionv+0x1ac>)
 8001ee8:	f000 fb84 	bl	80025f4 <_Z15QuaternionSLERPPfS_>
 8001eec:	4603      	mov	r3, r0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fb92 	bl	8002618 <_Z19QuaternionNormalizePf>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4912      	ldr	r1, [pc, #72]	; (8001f40 <_Z28update_FrameOriginQuaternionv+0x1a4>)
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fa4d 	bl	8002398 <_Z17QuaternionProductPfS_>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fb89 	bl	8002618 <_Z19QuaternionNormalizePf>
 8001f06:	6038      	str	r0, [r7, #0]
  LoopWQuaternion[0] = *p3;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <_Z28update_FrameOriginQuaternionv+0x1a8>)
 8001f0e:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p3 + 1);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <_Z28update_FrameOriginQuaternionv+0x1a8>)
 8001f16:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p3 + 2);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <_Z28update_FrameOriginQuaternionv+0x1a8>)
 8001f1e:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p3 + 3);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <_Z28update_FrameOriginQuaternionv+0x1a8>)
 8001f26:	60d3      	str	r3, [r2, #12]
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f30:	200005f4 	.word	0x200005f4
 8001f34:	40a00000 	.word	0x40a00000
 8001f38:	c0a00000 	.word	0xc0a00000
 8001f3c:	48435000 	.word	0x48435000
 8001f40:	2000059c 	.word	0x2000059c
 8001f44:	20000038 	.word	0x20000038
 8001f48:	20000028 	.word	0x20000028

08001f4c <_Z12MPU6050_initv>:
 * @brief Initializes the MPU6050 and initializes and starts the DMP functionality
 * 
 * --Custom Method!
 */
void MPU6050_init()
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);  //disable SBUS pin interrupt
 8001f52:	2006      	movs	r0, #6
 8001f54:	f004 fd33 	bl	80069be <HAL_NVIC_DisableIRQ>
  HAL_Delay(10);
 8001f58:	200a      	movs	r0, #10
 8001f5a:	f004 f969 	bl	8006230 <HAL_Delay>
  mpu.initialize();                 //initialize that object
 8001f5e:	4826      	ldr	r0, [pc, #152]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001f60:	f000 fbdf 	bl	8002722 <_ZN7MPU605010initializeEv>
  if (mpu.testConnection()) HAL_GPIO_TogglePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin);   //NOTDONE debug
 8001f64:	4824      	ldr	r0, [pc, #144]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001f66:	f000 fbf4 	bl	8002752 <_ZN7MPU605014testConnectionEv>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <_Z12MPU6050_initv+0x2c>
 8001f70:	2110      	movs	r1, #16
 8001f72:	4822      	ldr	r0, [pc, #136]	; (8001ffc <_Z12MPU6050_initv+0xb0>)
 8001f74:	f005 fb09 	bl	800758a <HAL_GPIO_TogglePin>
  uint8_t devStatus = mpu.dmpInitialize();              //initialize DMP (Digital Motion Processing)
 8001f78:	481f      	ldr	r0, [pc, #124]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001f7a:	f001 f979 	bl	8003270 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  
  mpu.setXAccelOffset( 1044);         //apply custom offset values
 8001f82:	f240 4114 	movw	r1, #1044	; 0x414
 8001f86:	481c      	ldr	r0, [pc, #112]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001f88:	f000 fe2a 	bl	8002be0 <_ZN7MPU605015setXAccelOffsetEs>
  mpu.setYAccelOffset(-1699);
 8001f8c:	491c      	ldr	r1, [pc, #112]	; (8002000 <_Z12MPU6050_initv+0xb4>)
 8001f8e:	481a      	ldr	r0, [pc, #104]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001f90:	f000 fe37 	bl	8002c02 <_ZN7MPU605015setYAccelOffsetEs>
  mpu.setZAccelOffset(  692);
 8001f94:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8001f98:	4817      	ldr	r0, [pc, #92]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001f9a:	f000 fe43 	bl	8002c24 <_ZN7MPU605015setZAccelOffsetEs>
  mpu.setXGyroOffset(   -53);
 8001f9e:	f06f 0134 	mvn.w	r1, #52	; 0x34
 8001fa2:	4815      	ldr	r0, [pc, #84]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001fa4:	f000 fe4f 	bl	8002c46 <_ZN7MPU605014setXGyroOffsetEs>
  mpu.setYGyroOffset(   -26);
 8001fa8:	f06f 0119 	mvn.w	r1, #25
 8001fac:	4812      	ldr	r0, [pc, #72]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001fae:	f000 fe5b 	bl	8002c68 <_ZN7MPU605014setYGyroOffsetEs>
  mpu.setZGyroOffset(   -33);
 8001fb2:	f06f 0120 	mvn.w	r1, #32
 8001fb6:	4810      	ldr	r0, [pc, #64]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001fb8:	f000 fe67 	bl	8002c8a <_ZN7MPU605014setZGyroOffsetEs>

  if (devStatus == 0) {
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10a      	bne.n	8001fd8 <_Z12MPU6050_initv+0x8c>
      mpu.setDMPEnabled(true);
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001fc6:	f000 fe71 	bl	8002cac <_ZN7MPU605013setDMPEnabledEb>
      mpu.getIntStatus();
 8001fca:	480b      	ldr	r0, [pc, #44]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001fcc:	f000 fca1 	bl	8002912 <_ZN7MPU605012getIntStatusEv>
      packetSize = 42;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <_Z12MPU6050_initv+0xb8>)
 8001fd2:	222a      	movs	r2, #42	; 0x2a
 8001fd4:	801a      	strh	r2, [r3, #0]
 8001fd6:	e003      	b.n	8001fe0 <_Z12MPU6050_initv+0x94>
  } else {
      HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);   //NOTDONE debug
 8001fd8:	2120      	movs	r1, #32
 8001fda:	4808      	ldr	r0, [pc, #32]	; (8001ffc <_Z12MPU6050_initv+0xb0>)
 8001fdc:	f005 fad5 	bl	800758a <HAL_GPIO_TogglePin>
  }
  HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);   //NOTDONE debug
 8001fe0:	2120      	movs	r1, #32
 8001fe2:	4806      	ldr	r0, [pc, #24]	; (8001ffc <_Z12MPU6050_initv+0xb0>)
 8001fe4:	f005 fad1 	bl	800758a <HAL_GPIO_TogglePin>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   //enable SBUS pin interrupt
 8001fe8:	2006      	movs	r0, #6
 8001fea:	f004 fcda 	bl	80069a2 <HAL_NVIC_EnableIRQ>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200004e8 	.word	0x200004e8
 8001ffc:	40020000 	.word	0x40020000
 8002000:	fffff95d 	.word	0xfffff95d
 8002004:	200004e6 	.word	0x200004e6

08002008 <_Z19MPU6050_calibrationv>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void MPU6050_calibration()//NOTDONE comment
{
 8002008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800200c:	b0e1      	sub	sp, #388	; 0x184
 800200e:	af08      	add	r7, sp, #32
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);  //disable SBUS pin interrupt
 8002010:	2006      	movs	r0, #6
 8002012:	f004 fcd4 	bl	80069be <HAL_NVIC_DisableIRQ>
  uint8_t MPU_calibrated = false;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  while (MPU_calibrated == false)
 800201c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002020:	2b00      	cmp	r3, #0
 8002022:	f040 8193 	bne.w	800234c <_Z19MPU6050_calibrationv+0x344>
  {
    uint16_t counter = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
    MPU6050_resetFIFO();
 800202c:	f7ff fde6 	bl	8001bfc <_Z17MPU6050_resetFIFOv>
    MPU6050_WaitForQuaternionSet();
 8002030:	f7ff fdee 	bl	8001c10 <_Z28MPU6050_WaitForQuaternionSetv>
    MPU6050_ConvertToQuaternions();
 8002034:	f7ff fe08 	bl	8001c48 <_Z28MPU6050_ConvertToQuaternionsv>
    MPU6050_GetOriginQuaternion();
 8002038:	f7ff fe96 	bl	8001d68 <_Z27MPU6050_GetOriginQuaternionv>
    get_XW_diffAngles();
 800203c:	f001 fbe0 	bl	8003800 <_Z17get_XW_diffAnglesv>

    uint16_t oldTime = TIM11->CNT;
 8002040:	4bb8      	ldr	r3, [pc, #736]	; (8002324 <_Z19MPU6050_calibrationv+0x31c>)
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a

    float startAngles[3] = {
    PID_Pitch_xw_diff,
    PID_Roll_xw_diff ,
    PID_Yaw_xw_diff  };
 8002048:	4bb7      	ldr	r3, [pc, #732]	; (8002328 <_Z19MPU6050_calibrationv+0x320>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002050:	4bb6      	ldr	r3, [pc, #728]	; (800232c <_Z19MPU6050_calibrationv+0x324>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002058:	4bb5      	ldr	r3, [pc, #724]	; (8002330 <_Z19MPU6050_calibrationv+0x328>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    while 
    (                                                                                                                                     \
    (startAngles[0] - PID_Pitch_xw_diff < MPU6050_cal_Pitch_MaxDev) & (startAngles[0] - PID_Pitch_xw_diff > -MPU6050_cal_Pitch_MaxDev) &  \
 8002060:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002064:	4ab0      	ldr	r2, [pc, #704]	; (8002328 <_Z19MPU6050_calibrationv+0x320>)
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fdbc 	bl	8000be8 <__aeabi_fsub>
 8002070:	4603      	mov	r3, r0
 8002072:	2201      	movs	r2, #1
 8002074:	4614      	mov	r4, r2
 8002076:	49af      	ldr	r1, [pc, #700]	; (8002334 <_Z19MPU6050_calibrationv+0x32c>)
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff f85d 	bl	8001138 <__aeabi_fcmplt>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <_Z19MPU6050_calibrationv+0x80>
 8002084:	2300      	movs	r3, #0
 8002086:	461c      	mov	r4, r3
 8002088:	b2e4      	uxtb	r4, r4
 800208a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800208e:	4aa6      	ldr	r2, [pc, #664]	; (8002328 <_Z19MPU6050_calibrationv+0x320>)
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fda7 	bl	8000be8 <__aeabi_fsub>
 800209a:	4603      	mov	r3, r0
 800209c:	2201      	movs	r2, #1
 800209e:	4615      	mov	r5, r2
 80020a0:	49a5      	ldr	r1, [pc, #660]	; (8002338 <_Z19MPU6050_calibrationv+0x330>)
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff f866 	bl	8001174 <__aeabi_fcmpgt>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <_Z19MPU6050_calibrationv+0xaa>
 80020ae:	2300      	movs	r3, #0
 80020b0:	461d      	mov	r5, r3
 80020b2:	b2eb      	uxtb	r3, r5
 80020b4:	4023      	ands	r3, r4
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	461c      	mov	r4, r3
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 80020ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80020be:	4a9b      	ldr	r2, [pc, #620]	; (800232c <_Z19MPU6050_calibrationv+0x324>)
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fd8f 	bl	8000be8 <__aeabi_fsub>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2201      	movs	r2, #1
 80020ce:	4615      	mov	r5, r2
 80020d0:	4998      	ldr	r1, [pc, #608]	; (8002334 <_Z19MPU6050_calibrationv+0x32c>)
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f830 	bl	8001138 <__aeabi_fcmplt>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <_Z19MPU6050_calibrationv+0xda>
 80020de:	2300      	movs	r3, #0
 80020e0:	461d      	mov	r5, r3
 80020e2:	b2eb      	uxtb	r3, r5
    (startAngles[0] - PID_Pitch_xw_diff < MPU6050_cal_Pitch_MaxDev) & (startAngles[0] - PID_Pitch_xw_diff > -MPU6050_cal_Pitch_MaxDev) &  \
 80020e4:	401c      	ands	r4, r3
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 80020e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80020ea:	4a90      	ldr	r2, [pc, #576]	; (800232c <_Z19MPU6050_calibrationv+0x324>)
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fd79 	bl	8000be8 <__aeabi_fsub>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2201      	movs	r2, #1
 80020fa:	4615      	mov	r5, r2
 80020fc:	498e      	ldr	r1, [pc, #568]	; (8002338 <_Z19MPU6050_calibrationv+0x330>)
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff f838 	bl	8001174 <__aeabi_fcmpgt>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <_Z19MPU6050_calibrationv+0x106>
 800210a:	2300      	movs	r3, #0
 800210c:	461d      	mov	r5, r3
 800210e:	b2eb      	uxtb	r3, r5
 8002110:	401c      	ands	r4, r3
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 8002112:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002116:	4a86      	ldr	r2, [pc, #536]	; (8002330 <_Z19MPU6050_calibrationv+0x328>)
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fd63 	bl	8000be8 <__aeabi_fsub>
 8002122:	4603      	mov	r3, r0
 8002124:	2201      	movs	r2, #1
 8002126:	4615      	mov	r5, r2
 8002128:	4982      	ldr	r1, [pc, #520]	; (8002334 <_Z19MPU6050_calibrationv+0x32c>)
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff f804 	bl	8001138 <__aeabi_fcmplt>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <_Z19MPU6050_calibrationv+0x132>
 8002136:	2300      	movs	r3, #0
 8002138:	461d      	mov	r5, r3
 800213a:	b2eb      	uxtb	r3, r5
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 800213c:	401c      	ands	r4, r3
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 800213e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002142:	4a7b      	ldr	r2, [pc, #492]	; (8002330 <_Z19MPU6050_calibrationv+0x328>)
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fd4d 	bl	8000be8 <__aeabi_fsub>
 800214e:	4603      	mov	r3, r0
 8002150:	2201      	movs	r2, #1
 8002152:	4615      	mov	r5, r2
 8002154:	4978      	ldr	r1, [pc, #480]	; (8002338 <_Z19MPU6050_calibrationv+0x330>)
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff f80c 	bl	8001174 <__aeabi_fcmpgt>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <_Z19MPU6050_calibrationv+0x15e>
 8002162:	2300      	movs	r3, #0
 8002164:	461d      	mov	r5, r3
 8002166:	b2eb      	uxtb	r3, r5
 8002168:	4023      	ands	r3, r4
    (counter < MPU6050_cal_Time)                                                                                                          \
 800216a:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 800216e:	f640 719f 	movw	r1, #3999	; 0xf9f
 8002172:	428a      	cmp	r2, r1
 8002174:	bf94      	ite	ls
 8002176:	2201      	movls	r2, #1
 8002178:	2200      	movhi	r2, #0
 800217a:	b2d2      	uxtb	r2, r2
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 800217c:	4013      	ands	r3, r2
    (counter < MPU6050_cal_Time)                                                                                                          \
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80c0 	beq.w	8002304 <_Z19MPU6050_calibrationv+0x2fc>
    )                                                                                                                                     \
    {
      MPU6050_resetFIFO();
 8002184:	f7ff fd3a 	bl	8001bfc <_Z17MPU6050_resetFIFOv>
      MPU6050_WaitForQuaternionSet();
 8002188:	f7ff fd42 	bl	8001c10 <_Z28MPU6050_WaitForQuaternionSetv>
      MPU6050_ConvertToQuaternions();
 800218c:	f7ff fd5c 	bl	8001c48 <_Z28MPU6050_ConvertToQuaternionsv>
      get_XW_diffAngles();
 8002190:	f001 fb36 	bl	8003800 <_Z17get_XW_diffAnglesv>
      for (size_t i = 0; i < 1; i++)
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800219a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f040 8097 	bne.w	80022d2 <_Z19MPU6050_calibrationv+0x2ca>
	      uint8_t x = 0;
	      while (msg[x] != NULL) x++;
	      unsigned char msgTransmit[x];
	      for (size_t i = 0; i < x; i++) msgTransmit[i] = msg[i];
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
      }
 80021a4:	466b      	mov	r3, sp
 80021a6:	603b      	str	r3, [r7, #0]
        , MPU6050_RX_buf[0]                    \
 80021a8:	4b64      	ldr	r3, [pc, #400]	; (800233c <_Z19MPU6050_calibrationv+0x334>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
	      sprintf((char*)msg,"%hu %f %f %f %hu %hu \r\n" \
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	4b5e      	ldr	r3, [pc, #376]	; (8002328 <_Z19MPU6050_calibrationv+0x320>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f974 	bl	80004a0 <__aeabi_f2d>
 80021b8:	4604      	mov	r4, r0
 80021ba:	460d      	mov	r5, r1
 80021bc:	4b5b      	ldr	r3, [pc, #364]	; (800232c <_Z19MPU6050_calibrationv+0x324>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f96d 	bl	80004a0 <__aeabi_f2d>
 80021c6:	4680      	mov	r8, r0
 80021c8:	4689      	mov	r9, r1
 80021ca:	4b59      	ldr	r3, [pc, #356]	; (8002330 <_Z19MPU6050_calibrationv+0x328>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f966 	bl	80004a0 <__aeabi_f2d>
 80021d4:	4682      	mov	sl, r0
 80021d6:	468b      	mov	fp, r1
 80021d8:	f8b7 6158 	ldrh.w	r6, [r7, #344]	; 0x158
        , mpu.getFIFOCount());
 80021dc:	4858      	ldr	r0, [pc, #352]	; (8002340 <_Z19MPU6050_calibrationv+0x338>)
 80021de:	f000 fc1d 	bl	8002a1c <_ZN7MPU605012getFIFOCountEv>
 80021e2:	4603      	mov	r3, r0
	      sprintf((char*)msg,"%hu %f %f %f %hu %hu \r\n" \
 80021e4:	461a      	mov	r2, r3
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	9207      	str	r2, [sp, #28]
 80021ec:	9606      	str	r6, [sp, #24]
 80021ee:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80021f2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80021f6:	e9cd 4500 	strd	r4, r5, [sp]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4951      	ldr	r1, [pc, #324]	; (8002344 <_Z19MPU6050_calibrationv+0x33c>)
 80021fe:	4618      	mov	r0, r3
 8002200:	f00f fdc6 	bl	8011d90 <siprintf>
	      uint8_t x = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
	      while (msg[x] != NULL) x++;
 800220a:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 800220e:	f107 020c 	add.w	r2, r7, #12
 8002212:	5cd3      	ldrb	r3, [r2, r3]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <_Z19MPU6050_calibrationv+0x21c>
 8002218:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 800221c:	3301      	adds	r3, #1
 800221e:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
 8002222:	e7f2      	b.n	800220a <_Z19MPU6050_calibrationv+0x202>
	      unsigned char msgTransmit[x];
 8002224:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8002228:	1e5c      	subs	r4, r3, #1
 800222a:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800222e:	4623      	mov	r3, r4
 8002230:	3301      	adds	r3, #1
 8002232:	4618      	mov	r0, r3
 8002234:	f04f 0100 	mov.w	r1, #0
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	00cb      	lsls	r3, r1, #3
 8002242:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002246:	00c2      	lsls	r2, r0, #3
 8002248:	4623      	mov	r3, r4
 800224a:	3301      	adds	r3, #1
 800224c:	4618      	mov	r0, r3
 800224e:	f04f 0100 	mov.w	r1, #0
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	00cb      	lsls	r3, r1, #3
 800225c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002260:	00c2      	lsls	r2, r0, #3
 8002262:	4623      	mov	r3, r4
 8002264:	3301      	adds	r3, #1
 8002266:	3307      	adds	r3, #7
 8002268:	08db      	lsrs	r3, r3, #3
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	ebad 0d03 	sub.w	sp, sp, r3
 8002270:	ab08      	add	r3, sp, #32
 8002272:	3300      	adds	r3, #0
 8002274:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	      for (size_t i = 0; i < x; i++) msgTransmit[i] = msg[i];
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800227e:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8002282:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8002286:	429a      	cmp	r2, r3
 8002288:	d212      	bcs.n	80022b0 <_Z19MPU6050_calibrationv+0x2a8>
 800228a:	f107 020c 	add.w	r2, r7, #12
 800228e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002292:	4413      	add	r3, r2
 8002294:	7819      	ldrb	r1, [r3, #0]
 8002296:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800229a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800229e:	4413      	add	r3, r2
 80022a0:	460a      	mov	r2, r1
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80022a8:	3301      	adds	r3, #1
 80022aa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80022ae:	e7e6      	b.n	800227e <_Z19MPU6050_calibrationv+0x276>
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 80022b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80022b4:	b2a3      	uxth	r3, r4
 80022b6:	3301      	adds	r3, #1
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4619      	mov	r1, r3
 80022bc:	4610      	mov	r0, r2
 80022be:	f00c fa83 	bl	800e7c8 <CDC_Transmit_FS>
 80022c2:	f8d7 d000 	ldr.w	sp, [r7]
      for (size_t i = 0; i < 1; i++)
 80022c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80022ca:	3301      	adds	r3, #1
 80022cc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80022d0:	e763      	b.n	800219a <_Z19MPU6050_calibrationv+0x192>

      while ((TIM11->CNT - oldTime) < 10000) ;
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <_Z19MPU6050_calibrationv+0x31c>)
 80022d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d6:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80022e0:	4293      	cmp	r3, r2
 80022e2:	bf94      	ite	ls
 80022e4:	2301      	movls	r3, #1
 80022e6:	2300      	movhi	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d000      	beq.n	80022f0 <_Z19MPU6050_calibrationv+0x2e8>
 80022ee:	e7f0      	b.n	80022d2 <_Z19MPU6050_calibrationv+0x2ca>
      oldTime = TIM11->CNT;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <_Z19MPU6050_calibrationv+0x31c>)
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
      counter += 10;
 80022f8:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 80022fc:	330a      	adds	r3, #10
 80022fe:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
    while 
 8002302:	e6ad      	b.n	8002060 <_Z19MPU6050_calibrationv+0x58>
    }
    if (counter >= MPU6050_cal_Time)
 8002304:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8002308:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800230c:	d304      	bcc.n	8002318 <_Z19MPU6050_calibrationv+0x310>
    {
      MPU6050_GetOriginQuaternion();
 800230e:	f7ff fd2b 	bl	8001d68 <_Z27MPU6050_GetOriginQuaternionv>
      MPU_calibrated = true;
 8002312:	2301      	movs	r3, #1
 8002314:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
    }
    HAL_GPIO_TogglePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin);
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	480b      	ldr	r0, [pc, #44]	; (8002348 <_Z19MPU6050_calibrationv+0x340>)
 800231c:	f005 f935 	bl	800758a <HAL_GPIO_TogglePin>
  while (MPU_calibrated == false)
 8002320:	e67c      	b.n	800201c <_Z19MPU6050_calibrationv+0x14>
 8002322:	bf00      	nop
 8002324:	40014800 	.word	0x40014800
 8002328:	2000053c 	.word	0x2000053c
 800232c:	20000540 	.word	0x20000540
 8002330:	20000544 	.word	0x20000544
 8002334:	40a00000 	.word	0x40a00000
 8002338:	c0a00000 	.word	0xc0a00000
 800233c:	200004d4 	.word	0x200004d4
 8002340:	200004e8 	.word	0x200004e8
 8002344:	08014088 	.word	0x08014088
 8002348:	40020000 	.word	0x40020000
  }
  MPU6050_GetOriginQuaternion();
 800234c:	f7ff fd0c 	bl	8001d68 <_Z27MPU6050_GetOriginQuaternionv>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   //enable SBUS pin interrupt
 8002350:	2006      	movs	r0, #6
 8002352:	f004 fb26 	bl	80069a2 <HAL_NVIC_EnableIRQ>

  float *p = QuaternionNormalize(GyroOriginQuaternion);
 8002356:	480f      	ldr	r0, [pc, #60]	; (8002394 <_Z19MPU6050_calibrationv+0x38c>)
 8002358:	f000 f95e 	bl	8002618 <_Z19QuaternionNormalizePf>
 800235c:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
  GyroOriginQuaternion[0] = *p;
 8002360:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <_Z19MPU6050_calibrationv+0x38c>)
 8002368:	6013      	str	r3, [r2, #0]
  GyroOriginQuaternion[1] = *(p + 1);
 800236a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4a08      	ldr	r2, [pc, #32]	; (8002394 <_Z19MPU6050_calibrationv+0x38c>)
 8002372:	6053      	str	r3, [r2, #4]
  GyroOriginQuaternion[2] = *(p + 2);
 8002374:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4a06      	ldr	r2, [pc, #24]	; (8002394 <_Z19MPU6050_calibrationv+0x38c>)
 800237c:	6093      	str	r3, [r2, #8]
  GyroOriginQuaternion[3] = *(p + 3);
 800237e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a03      	ldr	r2, [pc, #12]	; (8002394 <_Z19MPU6050_calibrationv+0x38c>)
 8002386:	60d3      	str	r3, [r2, #12]

}
 8002388:	bf00      	nop
 800238a:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 800238e:	46bd      	mov	sp, r7
 8002390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002394:	20000048 	.word	0x20000048

08002398 <_Z17QuaternionProductPfS_>:
 * @return float product-Quaternion
 * 
 * --Custom Method!
 */
float *QuaternionProduct(float *q1, float *q2)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  static float q3[4];
  q3[0] = (q1[0] * q2[0]) - (q1[1] * q2[1]) - (q1[2] * q2[2]) - (q1[3] * q2[3]);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4619      	mov	r1, r3
 80023ac:	4610      	mov	r0, r2
 80023ae:	f7fe fd25 	bl	8000dfc <__aeabi_fmul>
 80023b2:	4603      	mov	r3, r0
 80023b4:	461c      	mov	r4, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3304      	adds	r3, #4
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	3304      	adds	r3, #4
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4619      	mov	r1, r3
 80023c4:	4610      	mov	r0, r2
 80023c6:	f7fe fd19 	bl	8000dfc <__aeabi_fmul>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4619      	mov	r1, r3
 80023ce:	4620      	mov	r0, r4
 80023d0:	f7fe fc0a 	bl	8000be8 <__aeabi_fsub>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461c      	mov	r4, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3308      	adds	r3, #8
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	3308      	adds	r3, #8
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4619      	mov	r1, r3
 80023e6:	4610      	mov	r0, r2
 80023e8:	f7fe fd08 	bl	8000dfc <__aeabi_fmul>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4619      	mov	r1, r3
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7fe fbf9 	bl	8000be8 <__aeabi_fsub>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461c      	mov	r4, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	330c      	adds	r3, #12
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	330c      	adds	r3, #12
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4619      	mov	r1, r3
 8002408:	4610      	mov	r0, r2
 800240a:	f7fe fcf7 	bl	8000dfc <__aeabi_fmul>
 800240e:	4603      	mov	r3, r0
 8002410:	4619      	mov	r1, r3
 8002412:	4620      	mov	r0, r4
 8002414:	f7fe fbe8 	bl	8000be8 <__aeabi_fsub>
 8002418:	4603      	mov	r3, r0
 800241a:	461a      	mov	r2, r3
 800241c:	4b61      	ldr	r3, [pc, #388]	; (80025a4 <_Z17QuaternionProductPfS_+0x20c>)
 800241e:	601a      	str	r2, [r3, #0]
  q3[1] = (q1[0] * q2[1]) + (q1[1] * q2[0]) + (q1[2] * q2[3]) - (q1[3] * q2[2]);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	3304      	adds	r3, #4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4619      	mov	r1, r3
 800242c:	4610      	mov	r0, r2
 800242e:	f7fe fce5 	bl	8000dfc <__aeabi_fmul>
 8002432:	4603      	mov	r3, r0
 8002434:	461c      	mov	r4, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f7fe fcda 	bl	8000dfc <__aeabi_fmul>
 8002448:	4603      	mov	r3, r0
 800244a:	4619      	mov	r1, r3
 800244c:	4620      	mov	r0, r4
 800244e:	f7fe fbcd 	bl	8000bec <__addsf3>
 8002452:	4603      	mov	r3, r0
 8002454:	461c      	mov	r4, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3308      	adds	r3, #8
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	330c      	adds	r3, #12
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4619      	mov	r1, r3
 8002464:	4610      	mov	r0, r2
 8002466:	f7fe fcc9 	bl	8000dfc <__aeabi_fmul>
 800246a:	4603      	mov	r3, r0
 800246c:	4619      	mov	r1, r3
 800246e:	4620      	mov	r0, r4
 8002470:	f7fe fbbc 	bl	8000bec <__addsf3>
 8002474:	4603      	mov	r3, r0
 8002476:	461c      	mov	r4, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	330c      	adds	r3, #12
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	3308      	adds	r3, #8
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	4610      	mov	r0, r2
 8002488:	f7fe fcb8 	bl	8000dfc <__aeabi_fmul>
 800248c:	4603      	mov	r3, r0
 800248e:	4619      	mov	r1, r3
 8002490:	4620      	mov	r0, r4
 8002492:	f7fe fba9 	bl	8000be8 <__aeabi_fsub>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	4b42      	ldr	r3, [pc, #264]	; (80025a4 <_Z17QuaternionProductPfS_+0x20c>)
 800249c:	605a      	str	r2, [r3, #4]
  q3[2] = (q1[0] * q2[2]) - (q1[1] * q2[3]) + (q1[2] * q2[0]) + (q1[3] * q2[1]);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	3308      	adds	r3, #8
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	4610      	mov	r0, r2
 80024ac:	f7fe fca6 	bl	8000dfc <__aeabi_fmul>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461c      	mov	r4, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3304      	adds	r3, #4
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	330c      	adds	r3, #12
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f7fe fc9a 	bl	8000dfc <__aeabi_fmul>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4619      	mov	r1, r3
 80024cc:	4620      	mov	r0, r4
 80024ce:	f7fe fb8b 	bl	8000be8 <__aeabi_fsub>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461c      	mov	r4, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3308      	adds	r3, #8
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f7fe fc8a 	bl	8000dfc <__aeabi_fmul>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4619      	mov	r1, r3
 80024ec:	4620      	mov	r0, r4
 80024ee:	f7fe fb7d 	bl	8000bec <__addsf3>
 80024f2:	4603      	mov	r3, r0
 80024f4:	461c      	mov	r4, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	330c      	adds	r3, #12
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	3304      	adds	r3, #4
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4619      	mov	r1, r3
 8002504:	4610      	mov	r0, r2
 8002506:	f7fe fc79 	bl	8000dfc <__aeabi_fmul>
 800250a:	4603      	mov	r3, r0
 800250c:	4619      	mov	r1, r3
 800250e:	4620      	mov	r0, r4
 8002510:	f7fe fb6c 	bl	8000bec <__addsf3>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <_Z17QuaternionProductPfS_+0x20c>)
 800251a:	609a      	str	r2, [r3, #8]
  q3[3] = (q1[0] * q2[3]) + (q1[1] * q2[2]) - (q1[2] * q2[1]) + (q1[3] * q2[0]);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	330c      	adds	r3, #12
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4619      	mov	r1, r3
 8002528:	4610      	mov	r0, r2
 800252a:	f7fe fc67 	bl	8000dfc <__aeabi_fmul>
 800252e:	4603      	mov	r3, r0
 8002530:	461c      	mov	r4, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3304      	adds	r3, #4
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	3308      	adds	r3, #8
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4619      	mov	r1, r3
 8002540:	4610      	mov	r0, r2
 8002542:	f7fe fc5b 	bl	8000dfc <__aeabi_fmul>
 8002546:	4603      	mov	r3, r0
 8002548:	4619      	mov	r1, r3
 800254a:	4620      	mov	r0, r4
 800254c:	f7fe fb4e 	bl	8000bec <__addsf3>
 8002550:	4603      	mov	r3, r0
 8002552:	461c      	mov	r4, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3308      	adds	r3, #8
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	3304      	adds	r3, #4
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	4610      	mov	r0, r2
 8002564:	f7fe fc4a 	bl	8000dfc <__aeabi_fmul>
 8002568:	4603      	mov	r3, r0
 800256a:	4619      	mov	r1, r3
 800256c:	4620      	mov	r0, r4
 800256e:	f7fe fb3b 	bl	8000be8 <__aeabi_fsub>
 8002572:	4603      	mov	r3, r0
 8002574:	461c      	mov	r4, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	330c      	adds	r3, #12
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f7fe fc3a 	bl	8000dfc <__aeabi_fmul>
 8002588:	4603      	mov	r3, r0
 800258a:	4619      	mov	r1, r3
 800258c:	4620      	mov	r0, r4
 800258e:	f7fe fb2d 	bl	8000bec <__addsf3>
 8002592:	4603      	mov	r3, r0
 8002594:	461a      	mov	r2, r3
 8002596:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <_Z17QuaternionProductPfS_+0x20c>)
 8002598:	60da      	str	r2, [r3, #12]
  return q3;
 800259a:	4b02      	ldr	r3, [pc, #8]	; (80025a4 <_Z17QuaternionProductPfS_+0x20c>)
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd90      	pop	{r4, r7, pc}
 80025a4:	20000508 	.word	0x20000508

080025a8 <_Z17QuaternionInversePf>:
 * @return float inverse Quaternion
 * 
 * --Custom Method!
 */
float *QuaternionInverse(float *q1)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  static float qi[4];
  qi[0] = q1[0];
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <_Z17QuaternionInversePf+0x48>)
 80025b6:	6013      	str	r3, [r2, #0]
  qi[1] = q1[1] * -1;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025c2:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <_Z17QuaternionInversePf+0x48>)
 80025c4:	6053      	str	r3, [r2, #4]
  qi[2] = q1[2] * -1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3308      	adds	r3, #8
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025d0:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <_Z17QuaternionInversePf+0x48>)
 80025d2:	6093      	str	r3, [r2, #8]
  qi[3] = q1[3] * -1;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	330c      	adds	r3, #12
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025de:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <_Z17QuaternionInversePf+0x48>)
 80025e0:	60d3      	str	r3, [r2, #12]
  return qi;
 80025e2:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <_Z17QuaternionInversePf+0x48>)
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000518 	.word	0x20000518

080025f4 <_Z15QuaternionSLERPPfS_>:
 * @return float interpolation quaternion
 * 
 * --Custom Method!
 */
float * QuaternionSLERP(float *q1, float *q2)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  return QuaternionProduct(&q2[0], QuaternionInverse(&q1[0]));
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ffd2 	bl	80025a8 <_Z17QuaternionInversePf>
 8002604:	4603      	mov	r3, r0
 8002606:	4619      	mov	r1, r3
 8002608:	6838      	ldr	r0, [r7, #0]
 800260a:	f7ff fec5 	bl	8002398 <_Z17QuaternionProductPfS_>
 800260e:	4603      	mov	r3, r0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <_Z19QuaternionNormalizePf>:
 * @return float* pointer to normalized quaternion
 * 
 * --Custom Method!
 */
float *QuaternionNormalize(float *q1)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  float vectorlength = sqrt((q1[0] * q1[0]) + (q1[1] * q1[1]) + (q1[2] * q1[2]) + (q1[3] * q1[3]));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	4610      	mov	r0, r2
 800262c:	f7fe fbe6 	bl	8000dfc <__aeabi_fmul>
 8002630:	4603      	mov	r3, r0
 8002632:	461c      	mov	r4, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3304      	adds	r3, #4
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4619      	mov	r1, r3
 8002642:	4610      	mov	r0, r2
 8002644:	f7fe fbda 	bl	8000dfc <__aeabi_fmul>
 8002648:	4603      	mov	r3, r0
 800264a:	4619      	mov	r1, r3
 800264c:	4620      	mov	r0, r4
 800264e:	f7fe facd 	bl	8000bec <__addsf3>
 8002652:	4603      	mov	r3, r0
 8002654:	461c      	mov	r4, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3308      	adds	r3, #8
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3308      	adds	r3, #8
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4619      	mov	r1, r3
 8002664:	4610      	mov	r0, r2
 8002666:	f7fe fbc9 	bl	8000dfc <__aeabi_fmul>
 800266a:	4603      	mov	r3, r0
 800266c:	4619      	mov	r1, r3
 800266e:	4620      	mov	r0, r4
 8002670:	f7fe fabc 	bl	8000bec <__addsf3>
 8002674:	4603      	mov	r3, r0
 8002676:	461c      	mov	r4, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	330c      	adds	r3, #12
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	330c      	adds	r3, #12
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f7fe fbb8 	bl	8000dfc <__aeabi_fmul>
 800268c:	4603      	mov	r3, r0
 800268e:	4619      	mov	r1, r3
 8002690:	4620      	mov	r0, r4
 8002692:	f7fe faab 	bl	8000bec <__addsf3>
 8002696:	4603      	mov	r3, r0
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fa91 	bl	8001bc0 <_ZSt4sqrtf>
 800269e:	60f8      	str	r0, [r7, #12]
  static float qn[4];
  qn[0] = q1[0] / vectorlength;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68f9      	ldr	r1, [r7, #12]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fc5c 	bl	8000f64 <__aeabi_fdiv>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	4b13      	ldr	r3, [pc, #76]	; (8002700 <_Z19QuaternionNormalizePf+0xe8>)
 80026b2:	601a      	str	r2, [r3, #0]
  qn[1] = q1[1] / vectorlength;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3304      	adds	r3, #4
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68f9      	ldr	r1, [r7, #12]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fc51 	bl	8000f64 <__aeabi_fdiv>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <_Z19QuaternionNormalizePf+0xe8>)
 80026c8:	605a      	str	r2, [r3, #4]
  qn[2] = q1[2] / vectorlength;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3308      	adds	r3, #8
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68f9      	ldr	r1, [r7, #12]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fc46 	bl	8000f64 <__aeabi_fdiv>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <_Z19QuaternionNormalizePf+0xe8>)
 80026de:	609a      	str	r2, [r3, #8]
  qn[3] = q1[3] / vectorlength;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	330c      	adds	r3, #12
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68f9      	ldr	r1, [r7, #12]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fc3b 	bl	8000f64 <__aeabi_fdiv>
 80026ee:	4603      	mov	r3, r0
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b03      	ldr	r3, [pc, #12]	; (8002700 <_Z19QuaternionNormalizePf+0xe8>)
 80026f4:	60da      	str	r2, [r3, #12]
  return qn;
 80026f6:	4b02      	ldr	r3, [pc, #8]	; (8002700 <_Z19QuaternionNormalizePf+0xe8>)
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd90      	pop	{r4, r7, pc}
 8002700:	20000528 	.word	0x20000528

08002704 <_ZN7MPU6050C1Eh>:
 * @param address I2C address
 * @see MPU6050_DEFAULT_ADDRESS
 * @see MPU6050_ADDRESS_AD0_LOW
 * @see MPU6050_ADDRESS_AD0_HIGH
 */
MPU6050::MPU6050(uint8_t address) {
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]
    devAddr = address;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	78fa      	ldrb	r2, [r7, #3]
 8002714:	719a      	strb	r2, [r3, #6]
}
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 800272a:	2101      	movs	r1, #1
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f962 	bl	80029f6 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8002732:	2100      	movs	r1, #0
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f854 	bl	80027e2 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 800273a:	2100      	movs	r1, #0
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f863 	bl	8002808 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 8002742:	2100      	movs	r1, #0
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f945 	bl	80029d4 <_ZN7MPU605015setSleepEnabledEb>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <_ZN7MPU605014testConnectionEv>:

/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool MPU6050::testConnection() {
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
    return getDeviceID() == 0x34;
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f991 	bl	8002a82 <_ZN7MPU605011getDeviceIDEv>
 8002760:	4603      	mov	r3, r0
 8002762:	2b34      	cmp	r3, #52	; 0x34
 8002764:	bf0c      	ite	eq
 8002766:	2301      	moveq	r3, #1
 8002768:	2300      	movne	r3, #0
 800276a:	b2db      	uxtb	r3, r3
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <_ZN7MPU60507setRateEh>:
/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050::setRate(uint8_t rate) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	799b      	ldrb	r3, [r3, #6]
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	2119      	movs	r1, #25
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff f92f 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <_ZN7MPU605020setExternalFrameSyncEh>:
/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG
 * @param sync New FSYNC configuration value
 */
void MPU6050::setExternalFrameSync(uint8_t sync) {
 8002796:	b580      	push	{r7, lr}
 8002798:	b084      	sub	sp, #16
 800279a:	af02      	add	r7, sp, #8
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7998      	ldrb	r0, [r3, #6]
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2303      	movs	r3, #3
 80027ac:	2205      	movs	r2, #5
 80027ae:	211a      	movs	r1, #26
 80027b0:	f7ff f890 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_ZN7MPU605011setDLPFModeEh>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7998      	ldrb	r0, [r3, #6]
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	2303      	movs	r3, #3
 80027d2:	2202      	movs	r2, #2
 80027d4:	211a      	movs	r1, #26
 80027d6:	f7ff f87d 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af02      	add	r7, sp, #8
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	460b      	mov	r3, r1
 80027ec:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	7998      	ldrb	r0, [r3, #6]
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2302      	movs	r3, #2
 80027f8:	2204      	movs	r2, #4
 80027fa:	211b      	movs	r1, #27
 80027fc:	f7ff f86a 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af02      	add	r7, sp, #8
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7998      	ldrb	r0, [r3, #6]
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2302      	movs	r3, #2
 800281e:	2204      	movs	r2, #4
 8002820:	211c      	movs	r1, #28
 8002822:	f7ff f857 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <_ZN7MPU605027setMotionDetectionThresholdEh>:
/** Set motion detection event acceleration threshold.
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050::setMotionDetectionThreshold(uint8_t threshold) {
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_THR, threshold);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	799b      	ldrb	r3, [r3, #6]
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	211f      	movs	r1, #31
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff f8d2 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_ZN7MPU605026setMotionDetectionDurationEh>:
/** Set motion detection event duration threshold.
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050::setMotionDetectionDuration(uint8_t duration) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_DUR, duration);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	799b      	ldrb	r3, [r3, #6]
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	2120      	movs	r1, #32
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff f8c1 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
/** Set zero motion detection event acceleration threshold.
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	460b      	mov	r3, r1
 800287c:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	799b      	ldrb	r3, [r3, #6]
 8002882:	78fa      	ldrb	r2, [r7, #3]
 8002884:	2121      	movs	r1, #33	; 0x21
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f8b0 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
/** Set zero motion detection event duration threshold.
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	799b      	ldrb	r3, [r3, #6]
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	2122      	movs	r1, #34	; 0x22
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff f89f 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <_ZN7MPU605015setSlaveAddressEhh>:
 * @param num Slave number (0-3)
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	70fb      	strb	r3, [r7, #3]
 80028c2:	4613      	mov	r3, r2
 80028c4:	70bb      	strb	r3, [r7, #2]
    if (num > 3) return;
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d80d      	bhi.n	80028e8 <_ZN7MPU605015setSlaveAddressEhh+0x32>
    I2Cdev::writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	7998      	ldrb	r0, [r3, #6]
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	461a      	mov	r2, r3
 80028d4:	0052      	lsls	r2, r2, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	3325      	adds	r3, #37	; 0x25
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	78ba      	ldrb	r2, [r7, #2]
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7ff f883 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
 80028e6:	e000      	b.n	80028ea <_ZN7MPU605015setSlaveAddressEhh+0x34>
    if (num > 3) return;
 80028e8:	bf00      	nop
}
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <_ZN7MPU605013setIntEnabledEh>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050::setIntEnabled(uint8_t enabled) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	799b      	ldrb	r3, [r3, #6]
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	2138      	movs	r1, #56	; 0x38
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff f871 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
    I2Cdev::readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	7998      	ldrb	r0, [r3, #6]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3307      	adds	r3, #7
 8002922:	461a      	mov	r2, r3
 8002924:	213a      	movs	r1, #58	; 0x3a
 8002926:	f7fe fea9 	bl	800167c <_ZN6I2Cdev8readByteEhhPh>
    return buffer[0];
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	79db      	ldrb	r3, [r3, #7]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <_ZN7MPU605014setFIFOEnabledEb>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050::setFIFOEnabled(bool enabled) {
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7998      	ldrb	r0, [r3, #6]
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	2206      	movs	r2, #6
 800294a:	216a      	movs	r1, #106	; 0x6a
 800294c:	f7fe ff46 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <_ZN7MPU605023setI2CMasterModeEnabledEb>:
 * @param enabled New I2C Master Mode enabled status
 * @see getI2CMasterModeEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
 */
void MPU6050::setI2CMasterModeEnabled(bool enabled) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7998      	ldrb	r0, [r3, #6]
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	2205      	movs	r2, #5
 800296c:	216a      	movs	r1, #106	; 0x6a
 800296e:	f7fe ff35 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_ZN7MPU60509resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7998      	ldrb	r0, [r3, #6]
 8002986:	2301      	movs	r3, #1
 8002988:	2202      	movs	r2, #2
 800298a:	216a      	movs	r1, #106	; 0x6a
 800298c:	f7fe ff26 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <_ZN7MPU605014resetI2CMasterEv>:
 * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050::resetI2CMaster() {
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	7998      	ldrb	r0, [r3, #6]
 80029a4:	2301      	movs	r3, #1
 80029a6:	2201      	movs	r2, #1
 80029a8:	216a      	movs	r1, #106	; 0x6a
 80029aa:	f7fe ff17 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <_ZN7MPU60505resetEv>:
/** Trigger a full device reset.
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050::reset() {
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	7998      	ldrb	r0, [r3, #6]
 80029c2:	2301      	movs	r3, #1
 80029c4:	2207      	movs	r2, #7
 80029c6:	216b      	movs	r1, #107	; 0x6b
 80029c8:	f7fe ff08 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7998      	ldrb	r0, [r3, #6]
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	2206      	movs	r2, #6
 80029e8:	216b      	movs	r1, #107	; 0x6b
 80029ea:	f7fe fef7 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af02      	add	r7, sp, #8
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	460b      	mov	r3, r1
 8002a00:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7998      	ldrb	r0, [r3, #6]
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	216b      	movs	r1, #107	; 0x6b
 8002a10:	f7fe ff60 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
    I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7998      	ldrb	r0, [r3, #6]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3307      	adds	r3, #7
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	2172      	movs	r1, #114	; 0x72
 8002a30:	f7fe fe5e 	bl	80016f0 <_ZN6I2Cdev9readBytesEhhhPh>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	79db      	ldrb	r3, [r3, #7]
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	b21a      	sxth	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	7a1b      	ldrb	r3, [r3, #8]
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	4313      	orrs	r3, r2
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	b29b      	uxth	r3, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    I2Cdev::readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	71fb      	strb	r3, [r7, #7]
    if(length > 0){
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d007      	beq.n	8002a74 <_ZN7MPU605012getFIFOBytesEPhh+0x24>
        I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	7998      	ldrb	r0, [r3, #6]
 8002a68:	79fa      	ldrb	r2, [r7, #7]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2174      	movs	r1, #116	; 0x74
 8002a6e:	f7fe fe3f 	bl	80016f0 <_ZN6I2Cdev9readBytesEhhhPh>
    } else {
    	*data = 0;
    }
}
 8002a72:	e002      	b.n	8002a7a <_ZN7MPU605012getFIFOBytesEPhh+0x2a>
    	*data = 0;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <_ZN7MPU605011getDeviceIDEv>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af02      	add	r7, sp, #8
 8002a88:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	7998      	ldrb	r0, [r3, #6]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3307      	adds	r3, #7
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2306      	movs	r3, #6
 8002a96:	2206      	movs	r2, #6
 8002a98:	2175      	movs	r1, #117	; 0x75
 8002a9a:	f7fe fd91 	bl	80015c0 <_ZN6I2Cdev8readBitsEhhhhPh>
    return buffer[0];
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	79db      	ldrb	r3, [r3, #7]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <_ZN7MPU605015getOTPBankValidEv>:

// ======== UNDOCUMENTED/DMP REGISTERS/METHODS ========

// XG_OFFS_TC register

uint8_t MPU6050::getOTPBankValid() {
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
    I2Cdev::readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	7998      	ldrb	r0, [r3, #6]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3307      	adds	r3, #7
 8002aba:	2200      	movs	r2, #0
 8002abc:	2100      	movs	r1, #0
 8002abe:	f7fe fd3b 	bl	8001538 <_ZN6I2Cdev7readBitEhhhPh>
    return buffer[0];
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	79db      	ldrb	r3, [r3, #7]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <_ZN7MPU605015setOTPBankValidEb>:
void MPU6050::setOTPBankValid(bool enabled) {
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7998      	ldrb	r0, [r3, #6]
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	f7fe fe7a 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_ZN7MPU605016getXGyroOffsetTCEv>:
int8_t MPU6050::getXGyroOffsetTC() {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7998      	ldrb	r0, [r3, #6]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3307      	adds	r3, #7
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	2306      	movs	r3, #6
 8002b04:	2206      	movs	r2, #6
 8002b06:	2100      	movs	r1, #0
 8002b08:	f7fe fd5a 	bl	80015c0 <_ZN6I2Cdev8readBitsEhhhhPh>
    return buffer[0];
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	79db      	ldrb	r3, [r3, #7]
 8002b10:	b25b      	sxtb	r3, r3
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <_ZN7MPU605016setXGyroOffsetTCEa>:
void MPU6050::setXGyroOffsetTC(int8_t offset) {
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af02      	add	r7, sp, #8
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7998      	ldrb	r0, [r3, #6]
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	2306      	movs	r3, #6
 8002b30:	2206      	movs	r2, #6
 8002b32:	2100      	movs	r1, #0
 8002b34:	f7fe fece 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <_ZN7MPU605016getYGyroOffsetTCEv>:

// YG_OFFS_TC register

int8_t MPU6050::getYGyroOffsetTC() {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7998      	ldrb	r0, [r3, #6]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3307      	adds	r3, #7
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	2306      	movs	r3, #6
 8002b54:	2206      	movs	r2, #6
 8002b56:	2101      	movs	r1, #1
 8002b58:	f7fe fd32 	bl	80015c0 <_ZN6I2Cdev8readBitsEhhhhPh>
    return buffer[0];
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	79db      	ldrb	r3, [r3, #7]
 8002b60:	b25b      	sxtb	r3, r3
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <_ZN7MPU605016setYGyroOffsetTCEa>:
void MPU6050::setYGyroOffsetTC(int8_t offset) {
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af02      	add	r7, sp, #8
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7998      	ldrb	r0, [r3, #6]
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	2306      	movs	r3, #6
 8002b80:	2206      	movs	r2, #6
 8002b82:	2101      	movs	r1, #1
 8002b84:	f7fe fea6 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <_ZN7MPU605016getZGyroOffsetTCEv>:

// ZG_OFFS_TC register

int8_t MPU6050::getZGyroOffsetTC() {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7998      	ldrb	r0, [r3, #6]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3307      	adds	r3, #7
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2306      	movs	r3, #6
 8002ba4:	2206      	movs	r2, #6
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	f7fe fd0a 	bl	80015c0 <_ZN6I2Cdev8readBitsEhhhhPh>
    return buffer[0];
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	79db      	ldrb	r3, [r3, #7]
 8002bb0:	b25b      	sxtb	r3, r3
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <_ZN7MPU605016setZGyroOffsetTCEa>:
void MPU6050::setZGyroOffsetTC(int8_t offset) {
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af02      	add	r7, sp, #8
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	7998      	ldrb	r0, [r3, #6]
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2306      	movs	r3, #6
 8002bd0:	2206      	movs	r2, #6
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	f7fe fe7e 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_ZN7MPU605015setXAccelOffsetEs>:

int16_t MPU6050::getXAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	799b      	ldrb	r3, [r3, #6]
 8002bf0:	887a      	ldrh	r2, [r7, #2]
 8002bf2:	2106      	movs	r1, #6
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe ff31 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <_ZN7MPU605015setYAccelOffsetEs>:

int16_t MPU6050::getYAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	799b      	ldrb	r3, [r3, #6]
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	2108      	movs	r1, #8
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe ff20 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <_ZN7MPU605015setZAccelOffsetEs>:

int16_t MPU6050::getZAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	799b      	ldrb	r3, [r3, #6]
 8002c34:	887a      	ldrh	r2, [r7, #2]
 8002c36:	210a      	movs	r1, #10
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe ff0f 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <_ZN7MPU605014setXGyroOffsetEs>:

int16_t MPU6050::getXGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	799b      	ldrb	r3, [r3, #6]
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	2113      	movs	r1, #19
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fefe 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <_ZN7MPU605014setYGyroOffsetEs>:

int16_t MPU6050::getYGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	799b      	ldrb	r3, [r3, #6]
 8002c78:	887a      	ldrh	r2, [r7, #2]
 8002c7a:	2115      	movs	r1, #21
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe feed 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <_ZN7MPU605014setZGyroOffsetEs>:

int16_t MPU6050::getZGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	799b      	ldrb	r3, [r3, #6]
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	2117      	movs	r1, #23
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fedc 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    I2Cdev::readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7998      	ldrb	r0, [r3, #6]
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	2207      	movs	r2, #7
 8002cc0:	216a      	movs	r1, #106	; 0x6a
 8002cc2:	f7fe fd8b 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <_ZN7MPU60508resetDMPEv>:
void MPU6050::resetDMP() {
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	7998      	ldrb	r0, [r3, #6]
 8002cda:	2301      	movs	r3, #1
 8002cdc:	2203      	movs	r2, #3
 8002cde:	216a      	movs	r1, #106	; 0x6a
 8002ce0:	f7fe fd7c 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_ZN7MPU605013setMemoryBankEhbb>:

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	70fb      	strb	r3, [r7, #3]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	70bb      	strb	r3, [r7, #2]
 8002d02:	4613      	mov	r3, r2
 8002d04:	707b      	strb	r3, [r7, #1]
    bank &= 0x1F;
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	70fb      	strb	r3, [r7, #3]
    if (userBank) bank |= 0x20;
 8002d0e:	787b      	ldrb	r3, [r7, #1]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <_ZN7MPU605013setMemoryBankEhbb+0x30>
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	f043 0320 	orr.w	r3, r3, #32
 8002d1a:	70fb      	strb	r3, [r7, #3]
    if (prefetchEnabled) bank |= 0x40;
 8002d1c:	78bb      	ldrb	r3, [r7, #2]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <_ZN7MPU605013setMemoryBankEhbb+0x3e>
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d28:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	799b      	ldrb	r3, [r3, #6]
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	216d      	movs	r1, #109	; 0x6d
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe fe5a 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_ZN7MPU605021setMemoryStartAddressEh>:

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	799b      	ldrb	r3, [r3, #6]
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	216e      	movs	r1, #110	; 0x6e
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe fe49 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <_ZN7MPU605014readMemoryByteEv>:

// MEM_R_W register

uint8_t MPU6050::readMemoryByte() {
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
    I2Cdev::readByte(devAddr, MPU6050_RA_MEM_R_W, buffer);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	7998      	ldrb	r0, [r3, #6]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3307      	adds	r3, #7
 8002d72:	461a      	mov	r2, r3
 8002d74:	216f      	movs	r1, #111	; 0x6f
 8002d76:	f7fe fc81 	bl	800167c <_ZN6I2Cdev8readByteEhhPh>
    return buffer[0];
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	79db      	ldrb	r3, [r3, #7]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <_ZN7MPU605015readMemoryBlockEPhthh>:
void MPU6050::writeMemoryByte(uint8_t data) {
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_R_W, data);
}
void MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	4611      	mov	r1, r2
 8002d92:	461a      	mov	r2, r3
 8002d94:	460b      	mov	r3, r1
 8002d96:	80fb      	strh	r3, [r7, #6]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002d9c:	7979      	ldrb	r1, [r7, #5]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2200      	movs	r2, #0
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f7ff ffa2 	bl	8002cec <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002da8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dac:	4619      	mov	r1, r3
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f7ff ffc6 	bl	8002d40 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
 8002db4:	2300      	movs	r3, #0
 8002db6:	82bb      	strh	r3, [r7, #20]
 8002db8:	8aba      	ldrh	r2, [r7, #20]
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d244      	bcs.n	8002e4a <_ZN7MPU605015readMemoryBlockEPhthh+0xc4>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002dc0:	2310      	movs	r3, #16
 8002dc2:	75fb      	strb	r3, [r7, #23]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002dc4:	8aba      	ldrh	r2, [r7, #20]
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
 8002dc8:	441a      	add	r2, r3
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	dd05      	ble.n	8002ddc <_ZN7MPU605015readMemoryBlockEPhthh+0x56>
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	8abb      	ldrh	r3, [r7, #20]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	75fb      	strb	r3, [r7, #23]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002ddc:	7dfa      	ldrb	r2, [r7, #23]
 8002dde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002de2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002de6:	429a      	cmp	r2, r3
 8002de8:	dd03      	ble.n	8002df2 <_ZN7MPU605015readMemoryBlockEPhthh+0x6c>
 8002dea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dee:	425b      	negs	r3, r3
 8002df0:	75fb      	strb	r3, [r7, #23]

        // read the chunk of data as specified
        I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	7998      	ldrb	r0, [r3, #6]
 8002df6:	8abb      	ldrh	r3, [r7, #20]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	7dfa      	ldrb	r2, [r7, #23]
 8002dfe:	216f      	movs	r1, #111	; 0x6f
 8002e00:	f7fe fc76 	bl	80016f0 <_ZN6I2Cdev9readBytesEhhhPh>
        
        // increase byte index by [chunkSize]
        i += chunkSize;
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	8abb      	ldrh	r3, [r7, #20]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	82bb      	strh	r3, [r7, #20]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002e0e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002e12:	7dfb      	ldrb	r3, [r7, #23]
 8002e14:	4413      	add	r3, r2
 8002e16:	f887 3020 	strb.w	r3, [r7, #32]

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002e1a:	8aba      	ldrh	r2, [r7, #20]
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d2ca      	bcs.n	8002db8 <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
            if (address == 0) bank++;
 8002e22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <_ZN7MPU605015readMemoryBlockEPhthh+0xaa>
 8002e2a:	797b      	ldrb	r3, [r7, #5]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002e30:	7979      	ldrb	r1, [r7, #5]
 8002e32:	2300      	movs	r3, #0
 8002e34:	2200      	movs	r2, #0
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff ff58 	bl	8002cec <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e40:	4619      	mov	r1, r3
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff ff7c 	bl	8002d40 <_ZN7MPU605021setMemoryStartAddressEh>
    for (uint16_t i = 0; i < dataSize;) {
 8002e48:	e7b6      	b.n	8002db8 <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
        }
    }
}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>:
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b088      	sub	sp, #32
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	461a      	mov	r2, r3
 8002e60:	460b      	mov	r3, r1
 8002e62:	80fb      	strh	r3, [r7, #6]
 8002e64:	4613      	mov	r3, r2
 8002e66:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002e68:	7979      	ldrb	r1, [r7, #5]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f7ff ff3c 	bl	8002cec <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002e74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e78:	4619      	mov	r1, r3
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7ff ff60 	bl	8002d40 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61bb      	str	r3, [r7, #24]
    uint8_t *progBuffer=0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002e88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d004      	beq.n	8002e9a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x48>
 8002e90:	2010      	movs	r0, #16
 8002e92:	f00e fa2b 	bl	80112ec <malloc>
 8002e96:	4603      	mov	r3, r0
 8002e98:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002e9a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5a>
 8002ea2:	2010      	movs	r0, #16
 8002ea4:	f00e fa22 	bl	80112ec <malloc>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	617b      	str	r3, [r7, #20]
    for (i = 0; i < dataSize;) {
 8002eac:	2300      	movs	r3, #0
 8002eae:	827b      	strh	r3, [r7, #18]
 8002eb0:	8a7a      	ldrh	r2, [r7, #18]
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	f080 808e 	bcs.w	8002fd6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x184>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002eba:	2310      	movs	r3, #16
 8002ebc:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002ebe:	8a7a      	ldrh	r2, [r7, #18]
 8002ec0:	7ffb      	ldrb	r3, [r7, #31]
 8002ec2:	441a      	add	r2, r3
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	dd05      	ble.n	8002ed6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x84>
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	8a7b      	ldrh	r3, [r7, #18]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002ed6:	7ffa      	ldrb	r2, [r7, #31]
 8002ed8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002edc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	dd03      	ble.n	8002eec <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x9a>
 8002ee4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ee8:	425b      	negs	r3, r3
 8002eea:	77fb      	strb	r3, [r7, #31]
        
        if (useProgMem) {
 8002eec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d013      	beq.n	8002f1c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xca>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	747b      	strb	r3, [r7, #17]
 8002ef8:	7c7a      	ldrb	r2, [r7, #17]
 8002efa:	7ffb      	ldrb	r3, [r7, #31]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d211      	bcs.n	8002f24 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xd2>
 8002f00:	8a7a      	ldrh	r2, [r7, #18]
 8002f02:	7c7b      	ldrb	r3, [r7, #17]
 8002f04:	4413      	add	r3, r2
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	441a      	add	r2, r3
 8002f0a:	7c7b      	ldrb	r3, [r7, #17]
 8002f0c:	6979      	ldr	r1, [r7, #20]
 8002f0e:	440b      	add	r3, r1
 8002f10:	7812      	ldrb	r2, [r2, #0]
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	7c7b      	ldrb	r3, [r7, #17]
 8002f16:	3301      	adds	r3, #1
 8002f18:	747b      	strb	r3, [r7, #17]
 8002f1a:	e7ed      	b.n	8002ef8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xa6>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 8002f1c:	8a7b      	ldrh	r3, [r7, #18]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	4413      	add	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]
        }

        I2Cdev::writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	7998      	ldrb	r0, [r3, #6]
 8002f28:	7ffa      	ldrb	r2, [r7, #31]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	216f      	movs	r1, #111	; 0x6f
 8002f2e:	f7fe fdd1 	bl	8001ad4 <_ZN6I2Cdev10writeBytesEhhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 8002f32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d02a      	beq.n	8002f90 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d027      	beq.n	8002f90 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
            setMemoryBank(bank);
 8002f40:	7979      	ldrb	r1, [r7, #5]
 8002f42:	2300      	movs	r3, #0
 8002f44:	2200      	movs	r2, #0
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f7ff fed0 	bl	8002cec <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002f4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f50:	4619      	mov	r1, r3
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff fef4 	bl	8002d40 <_ZN7MPU605021setMemoryStartAddressEh>
            I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	7998      	ldrb	r0, [r3, #6]
 8002f5c:	7ffa      	ldrb	r2, [r7, #31]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	216f      	movs	r1, #111	; 0x6f
 8002f62:	f7fe fbc5 	bl	80016f0 <_ZN6I2Cdev9readBytesEhhhPh>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	6978      	ldr	r0, [r7, #20]
 8002f6e:	f00e f9cd 	bl	801130c <memcmp>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
 8002f78:	69b8      	ldr	r0, [r7, #24]
 8002f7a:	f00e f9bf 	bl	80112fc <free>
                if (useProgMem) free(progBuffer);
 8002f7e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
 8002f86:	6978      	ldr	r0, [r7, #20]
 8002f88:	f00e f9b8 	bl	80112fc <free>
                return false; // uh oh.
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e031      	b.n	8002ff4 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a2>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 8002f90:	7ffb      	ldrb	r3, [r7, #31]
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	8a7b      	ldrh	r3, [r7, #18]
 8002f96:	4413      	add	r3, r2
 8002f98:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002f9a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002f9e:	7ffb      	ldrb	r3, [r7, #31]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002fa6:	8a7a      	ldrh	r2, [r7, #18]
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d280      	bcs.n	8002eb0 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
            if (address == 0) bank++;
 8002fae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x16a>
 8002fb6:	797b      	ldrb	r3, [r7, #5]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002fbc:	7979      	ldrb	r1, [r7, #5]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff fe92 	bl	8002cec <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002fc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002fcc:	4619      	mov	r1, r3
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7ff feb6 	bl	8002d40 <_ZN7MPU605021setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 8002fd4:	e76c      	b.n	8002eb0 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
        }
    }
    if (verify) free(verifyBuffer);
 8002fd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x192>
 8002fde:	69b8      	ldr	r0, [r7, #24]
 8002fe0:	f00e f98c 	bl	80112fc <free>
    if (useProgMem) free(progBuffer);
 8002fe4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a0>
 8002fec:	6978      	ldr	r0, [r7, #20]
 8002fee:	f00e f985 	bl	80112fc <free>
    return true;
 8002ff2:	2301      	movs	r3, #1
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3720      	adds	r7, #32
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af04      	add	r7, sp, #16
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	4611      	mov	r1, r2
 8003008:	461a      	mov	r2, r3
 800300a:	460b      	mov	r3, r1
 800300c:	80fb      	strh	r3, [r7, #6]
 800300e:	4613      	mov	r3, r2
 8003010:	717b      	strb	r3, [r7, #5]
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 8003012:	7979      	ldrb	r1, [r7, #5]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	2301      	movs	r3, #1
 8003018:	9302      	str	r3, [sp, #8]
 800301a:	7f3b      	ldrb	r3, [r7, #28]
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	7e3b      	ldrb	r3, [r7, #24]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	460b      	mov	r3, r1
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f7ff ff13 	bl	8002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 800302c:	4603      	mov	r3, r0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>:
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
 8003036:	b580      	push	{r7, lr}
 8003038:	b08c      	sub	sp, #48	; 0x30
 800303a:	af04      	add	r7, sp, #16
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	4611      	mov	r1, r2
 8003042:	461a      	mov	r2, r3
 8003044:	460b      	mov	r3, r1
 8003046:	80fb      	strh	r3, [r7, #6]
 8003048:	4613      	mov	r3, r2
 800304a:	717b      	strb	r3, [r7, #5]
    uint8_t *progBuffer = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
	uint8_t success, special;
    uint16_t i, j;
    if (useProgMem) {
 8003050:	797b      	ldrb	r3, [r7, #5]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2a>
        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
 8003056:	2008      	movs	r0, #8
 8003058:	f00e f948 	bl	80112ec <malloc>
 800305c:	4603      	mov	r3, r0
 800305e:	61fb      	str	r3, [r7, #28]
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
 8003060:	2300      	movs	r3, #0
 8003062:	833b      	strh	r3, [r7, #24]
 8003064:	8b3a      	ldrh	r2, [r7, #24]
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	429a      	cmp	r2, r3
 800306a:	f080 80a1 	bcs.w	80031b0 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x17a>
        if (useProgMem) {
 800306e:	797b      	ldrb	r3, [r7, #5]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d018      	beq.n	80030a6 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x70>
            bank = pgm_read_byte(data + i++);
 8003074:	8b3b      	ldrh	r3, [r7, #24]
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	833a      	strh	r2, [r7, #24]
 800307a:	461a      	mov	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4413      	add	r3, r2
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	757b      	strb	r3, [r7, #21]
            offset = pgm_read_byte(data + i++);
 8003084:	8b3b      	ldrh	r3, [r7, #24]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	833a      	strh	r2, [r7, #24]
 800308a:	461a      	mov	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4413      	add	r3, r2
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	753b      	strb	r3, [r7, #20]
            length = pgm_read_byte(data + i++);
 8003094:	8b3b      	ldrh	r3, [r7, #24]
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	833a      	strh	r2, [r7, #24]
 800309a:	461a      	mov	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4413      	add	r3, r2
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	74fb      	strb	r3, [r7, #19]
 80030a4:	e017      	b.n	80030d6 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xa0>
        } else {
            bank = data[i++];
 80030a6:	8b3b      	ldrh	r3, [r7, #24]
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	833a      	strh	r2, [r7, #24]
 80030ac:	461a      	mov	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4413      	add	r3, r2
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	757b      	strb	r3, [r7, #21]
            offset = data[i++];
 80030b6:	8b3b      	ldrh	r3, [r7, #24]
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	833a      	strh	r2, [r7, #24]
 80030bc:	461a      	mov	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	4413      	add	r3, r2
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	753b      	strb	r3, [r7, #20]
            length = data[i++];
 80030c6:	8b3b      	ldrh	r3, [r7, #24]
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	833a      	strh	r2, [r7, #24]
 80030cc:	461a      	mov	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	4413      	add	r3, r2
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	74fb      	strb	r3, [r7, #19]
        }

        // write data or perform special action
        if (length > 0) {
 80030d6:	7cfb      	ldrb	r3, [r7, #19]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d03a      	beq.n	8003152 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x11c>
            Serial.print(bank);
            Serial.print(", offset ");
            Serial.print(offset);
            Serial.print(", length=");
            Serial.println(length);*/
            if (useProgMem) {
 80030dc:	797b      	ldrb	r3, [r7, #5]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01d      	beq.n	800311e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xe8>
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
 80030e2:	7cfb      	ldrb	r3, [r7, #19]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d905      	bls.n	80030f4 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xbe>
 80030e8:	7cfb      	ldrb	r3, [r7, #19]
 80030ea:	4619      	mov	r1, r3
 80030ec:	69f8      	ldr	r0, [r7, #28]
 80030ee:	f00e fe37 	bl	8011d60 <realloc>
 80030f2:	61f8      	str	r0, [r7, #28]
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 80030f4:	2300      	movs	r3, #0
 80030f6:	82fb      	strh	r3, [r7, #22]
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	8afa      	ldrh	r2, [r7, #22]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d211      	bcs.n	8003126 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xf0>
 8003102:	8b3a      	ldrh	r2, [r7, #24]
 8003104:	8afb      	ldrh	r3, [r7, #22]
 8003106:	4413      	add	r3, r2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	441a      	add	r2, r3
 800310c:	8afb      	ldrh	r3, [r7, #22]
 800310e:	69f9      	ldr	r1, [r7, #28]
 8003110:	440b      	add	r3, r1
 8003112:	7812      	ldrb	r2, [r2, #0]
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	8afb      	ldrh	r3, [r7, #22]
 8003118:	3301      	adds	r3, #1
 800311a:	82fb      	strh	r3, [r7, #22]
 800311c:	e7ec      	b.n	80030f8 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xc2>
            } else {
                progBuffer = (uint8_t *)data + i;
 800311e:	8b3b      	ldrh	r3, [r7, #24]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	4413      	add	r3, r2
 8003124:	61fb      	str	r3, [r7, #28]
            }
            success = writeMemoryBlock(progBuffer, length, bank, offset, true);
 8003126:	7cfb      	ldrb	r3, [r7, #19]
 8003128:	b29a      	uxth	r2, r3
 800312a:	7d79      	ldrb	r1, [r7, #21]
 800312c:	2300      	movs	r3, #0
 800312e:	9302      	str	r3, [sp, #8]
 8003130:	2301      	movs	r3, #1
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	7d3b      	ldrb	r3, [r7, #20]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	460b      	mov	r3, r1
 800313a:	69f9      	ldr	r1, [r7, #28]
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7ff fe88 	bl	8002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 8003142:	4603      	mov	r3, r0
 8003144:	76fb      	strb	r3, [r7, #27]
            i += length;
 8003146:	7cfb      	ldrb	r3, [r7, #19]
 8003148:	b29a      	uxth	r2, r3
 800314a:	8b3b      	ldrh	r3, [r7, #24]
 800314c:	4413      	add	r3, r2
 800314e:	833b      	strh	r3, [r7, #24]
 8003150:	e022      	b.n	8003198 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            // special instruction
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
            if (useProgMem) {
 8003152:	797b      	ldrb	r3, [r7, #5]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x134>
                special = pgm_read_byte(data + i++);
 8003158:	8b3b      	ldrh	r3, [r7, #24]
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	833a      	strh	r2, [r7, #24]
 800315e:	461a      	mov	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4413      	add	r3, r2
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	76bb      	strb	r3, [r7, #26]
 8003168:	e007      	b.n	800317a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x144>
            } else {
                special = data[i++];
 800316a:	8b3b      	ldrh	r3, [r7, #24]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	833a      	strh	r2, [r7, #24]
 8003170:	461a      	mov	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	4413      	add	r3, r2
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	76bb      	strb	r3, [r7, #26]
            }
            /*Serial.print("Special command code ");
            Serial.print(special, HEX);
            Serial.println(" found...");*/
            if (special == 0x01) {
 800317a:	7ebb      	ldrb	r3, [r7, #26]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d109      	bne.n	8003194 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15e>
                // enable DMP-related interrupts
                
                //setIntZeroMotionEnabled(true);
                //setIntFIFOBufferOverflowEnabled(true);
                //setIntDMPEnabled(true);
                I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	799b      	ldrb	r3, [r3, #6]
 8003184:	2232      	movs	r2, #50	; 0x32
 8003186:	2138      	movs	r1, #56	; 0x38
 8003188:	4618      	mov	r0, r3
 800318a:	f7fe fc2f 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>

                success = true;
 800318e:	2301      	movs	r3, #1
 8003190:	76fb      	strb	r3, [r7, #27]
 8003192:	e001      	b.n	8003198 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            } else {
                // unknown special command
                success = false;
 8003194:	2300      	movs	r3, #0
 8003196:	76fb      	strb	r3, [r7, #27]
            }
        }
        
        if (!success) {
 8003198:	7efb      	ldrb	r3, [r7, #27]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f47f af62 	bne.w	8003064 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2e>
            if (useProgMem) free(progBuffer);
 80031a0:	797b      	ldrb	r3, [r7, #5]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x176>
 80031a6:	69f8      	ldr	r0, [r7, #28]
 80031a8:	f00e f8a8 	bl	80112fc <free>
            return false; // uh oh
 80031ac:	2300      	movs	r3, #0
 80031ae:	e006      	b.n	80031be <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x188>
        }
    }
    if (useProgMem) free(progBuffer);
 80031b0:	797b      	ldrb	r3, [r7, #5]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x186>
 80031b6:	69f8      	ldr	r0, [r7, #28]
 80031b8:	f00e f8a0 	bl	80112fc <free>
    return true;
 80031bc:	2301      	movs	r3, #1
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>:
bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	4613      	mov	r3, r2
 80031d2:	80fb      	strh	r3, [r7, #6]
    return writeDMPConfigurationSet(data, dataSize, true);
 80031d4:	88fa      	ldrh	r2, [r7, #6]
 80031d6:	2301      	movs	r3, #1
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7ff ff2b 	bl	8003036 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>
 80031e0:	4603      	mov	r3, r0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <_ZN7MPU605013setDMPConfig1Eh>:

uint8_t MPU6050::getDMPConfig1() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig1(uint8_t config) {
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	799b      	ldrb	r3, [r3, #6]
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	2170      	movs	r1, #112	; 0x70
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe fbf4 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <_ZN7MPU605013setDMPConfig2Eh>:

uint8_t MPU6050::getDMPConfig2() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig2(uint8_t config) {
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	799b      	ldrb	r3, [r3, #6]
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	2171      	movs	r1, #113	; 0x71
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe fbe3 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <_Z41__static_initialization_and_destruction_0ii>:
     } while (!packetReceived);
            HAL_GPIO_TogglePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin);   //NOTDONE debug

     getFIFOBytes(data, length); //Get 1 packet
     return 1;
}
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d109      	bne.n	8003254 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003246:	4293      	cmp	r3, r2
 8003248:	d104      	bne.n	8003254 <_Z41__static_initialization_and_destruction_0ii+0x24>
MPU6050_6Axis_MotionApps20 mpu;                      //create new object
 800324a:	2200      	movs	r2, #0
 800324c:	21d0      	movs	r1, #208	; 0xd0
 800324e:	4803      	ldr	r0, [pc, #12]	; (800325c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8003250:	f7fe fcc2 	bl	8001bd8 <_ZN26MPU6050_6Axis_MotionApps20C1EhPv>
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	200004e8 	.word	0x200004e8

08003260 <_GLOBAL__sub_I_MPU6050_TX_buf>:
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
 8003264:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003268:	2001      	movs	r0, #1
 800326a:	f7ff ffe1 	bl	8003230 <_Z41__static_initialization_and_destruction_0ii>
 800326e:	bd80      	pop	{r7, pc}

08003270 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv>:
#ifndef MPU6050_DMP_FIFO_RATE_DIVISOR 
#define MPU6050_DMP_FIFO_RATE_DIVISOR 0x01 // The New instance of the Firmware has this as the default
#endif

// I Simplified this:
uint8_t MPU6050_6Axis_MotionApps20::dmpInitialize() {
 8003270:	b5b0      	push	{r4, r5, r7, lr}
 8003272:	b0ae      	sub	sp, #184	; 0xb8
 8003274:	af04      	add	r7, sp, #16
 8003276:	6078      	str	r0, [r7, #4]
    // reset device
    DEBUG_PRINTLN(F("\n\nResetting MPU6050..."));
    reset();
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fb9b 	bl	80029b6 <_ZN7MPU60505resetEv>
    HAL_Delay(30); // wait after reset
 8003280:	201e      	movs	r0, #30
 8003282:	f002 ffd5 	bl	8006230 <HAL_Delay>
    Serial.println(F("Enabling wake cycle..."));
    setWakeCycleEnabled(true);*/

    // disable sleep mode
    DEBUG_PRINTLN(F("Disabling sleep mode..."));
    setSleepEnabled(false);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fba2 	bl	80029d4 <_ZN7MPU605015setSleepEnabledEb>

    // get MPU hardware revision
    DEBUG_PRINTLN(F("Selecting user bank 16..."));
    setMemoryBank(0x10, true, true);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	2301      	movs	r3, #1
 8003294:	2201      	movs	r2, #1
 8003296:	2110      	movs	r1, #16
 8003298:	f7ff fd28 	bl	8002cec <_ZN7MPU605013setMemoryBankEhbb>
    DEBUG_PRINTLN(F("Selecting memory byte 6..."));
    setMemoryStartAddress(0x06);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2106      	movs	r1, #6
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fd4d 	bl	8002d40 <_ZN7MPU605021setMemoryStartAddressEh>
    DEBUG_PRINTLN(F("Checking hardware revision..."));
    readMemoryByte();
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fd5a 	bl	8002d62 <_ZN7MPU605014readMemoryByteEv>
    DEBUG_PRINT(F("Revision @ user[16][6] = "));
    DEBUG_PRINTLNF(hwRevision, HEX);
    DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
    setMemoryBank(0, false, false);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	2300      	movs	r3, #0
 80032b2:	2200      	movs	r2, #0
 80032b4:	2100      	movs	r1, #0
 80032b6:	f7ff fd19 	bl	8002cec <_ZN7MPU605013setMemoryBankEhbb>

    // check OTP bank valid
    DEBUG_PRINTLN(F("Reading OTP bank valid flag..."));
    getOTPBankValid();
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fbf4 	bl	8002aaa <_ZN7MPU605015getOTPBankValidEv>
    DEBUG_PRINT(F("OTP bank is "));
    DEBUG_PRINTLN(otpValid ? F("valid!") : F("invalid!"));

    // get X/Y/Z gyro offsets
    DEBUG_PRINTLN(F("Reading gyro offset TC values..."));
    int8_t xgOffsetTC = getXGyroOffsetTC();
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fc13 	bl	8002af0 <_ZN7MPU605016getXGyroOffsetTCEv>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    int8_t ygOffsetTC = getYGyroOffsetTC();
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fc34 	bl	8002b40 <_ZN7MPU605016getYGyroOffsetTCEv>
 80032d8:	4603      	mov	r3, r0
 80032da:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    int8_t zgOffsetTC = getZGyroOffsetTC();
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fc55 	bl	8002b90 <_ZN7MPU605016getZGyroOffsetTCEv>
 80032e6:	4603      	mov	r3, r0
 80032e8:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    DEBUG_PRINT(F("Z gyro offset = "));
    DEBUG_PRINTLN(zgOffsetTC);

    // setup weird slave stuff (?)
    DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
    setSlaveAddress(0, 0x7F);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	227f      	movs	r2, #127	; 0x7f
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff fadf 	bl	80028b6 <_ZN7MPU605015setSlaveAddressEhh>
    DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
    setI2CMasterModeEnabled(false);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fb2b 	bl	8002958 <_ZN7MPU605023setI2CMasterModeEnabledEb>
    DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
    setSlaveAddress(0, 0x68);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2268      	movs	r2, #104	; 0x68
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fad4 	bl	80028b6 <_ZN7MPU605015setSlaveAddressEhh>
    DEBUG_PRINTLN(F("Resetting I2C Master control..."));
    resetI2CMaster();
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fb41 	bl	8002998 <_ZN7MPU605014resetI2CMasterEv>
    HAL_Delay(20);
 8003316:	2014      	movs	r0, #20
 8003318:	f002 ff8a 	bl	8006230 <HAL_Delay>

    // load DMP code into memory banks
    DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
    DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
    DEBUG_PRINTLN(F(" bytes)"));
    if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) {
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	2301      	movs	r3, #1
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	2300      	movs	r3, #0
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	2300      	movs	r3, #0
 8003328:	f240 7289 	movw	r2, #1929	; 0x789
 800332c:	49c7      	ldr	r1, [pc, #796]	; (800364c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3dc>)
 800332e:	f7ff fe65 	bl	8002ffc <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 825c 	beq.w	80037f2 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x582>

        // write DMP configuration
        DEBUG_PRINT(F("Writing DMP configuration to MPU memory banks ("));
        DEBUG_PRINT(MPU6050_DMP_CONFIG_SIZE);
        DEBUG_PRINTLN(F(" bytes in config def)"));
        if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	22c0      	movs	r2, #192	; 0xc0
 800333e:	49c4      	ldr	r1, [pc, #784]	; (8003650 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e0>)
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff40 	bl	80031c6 <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8250 	beq.w	80037ee <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x57e>
            DEBUG_PRINTLN(F("Success! DMP configuration written and verified."));

            DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
            setClockSource(MPU6050_CLOCK_PLL_ZGYRO);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2103      	movs	r1, #3
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fb4f 	bl	80029f6 <_ZN7MPU605014setClockSourceEh>

            DEBUG_PRINTLN(F("Setting DMP and FIFO_OFLOW interrupts enabled..."));
            setIntEnabled(0x12);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2112      	movs	r1, #18
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fac7 	bl	80028f0 <_ZN7MPU605013setIntEnabledEh>

            DEBUG_PRINTLN(F("Setting sample rate to 200Hz..."));
            setRate(4); // 1khz / (1 + 4) = 200 Hz
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2104      	movs	r1, #4
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff fa04 	bl	8002774 <_ZN7MPU60507setRateEh>

            DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
            setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2101      	movs	r1, #1
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fa10 	bl	8002796 <_ZN7MPU605020setExternalFrameSyncEh>

            DEBUG_PRINTLN(F("Setting DLPF bandwidth to 42Hz..."));
            setDLPFMode(MPU6050_DLPF_BW_42);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2103      	movs	r1, #3
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fa1e 	bl	80027bc <_ZN7MPU605011setDLPFModeEh>

            DEBUG_PRINTLN(F("Setting gyro sensitivity to +/- 2000 deg/sec..."));
            setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2103      	movs	r1, #3
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fa2c 	bl	80027e2 <_ZN7MPU605021setFullScaleGyroRangeEh>

            DEBUG_PRINTLN(F("Setting DMP configuration bytes (function unknown)..."));
            setDMPConfig1(0x03);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2103      	movs	r1, #3
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ff2b 	bl	80031ea <_ZN7MPU605013setDMPConfig1Eh>
            setDMPConfig2(0x00);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2100      	movs	r1, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff37 	bl	800320c <_ZN7MPU605013setDMPConfig2Eh>

            DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
            setOTPBankValid(false);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff fb93 	bl	8002ace <_ZN7MPU605015setOTPBankValidEb>

            DEBUG_PRINTLN(F("Setting X/Y/Z gyro offset TCs to previous values..."));
            setXGyroOffsetTC(xgOffsetTC);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f997 20a3 	ldrsb.w	r2, [r7, #163]	; 0xa3
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff fbb2 	bl	8002b1a <_ZN7MPU605016setXGyroOffsetTCEa>
            setYGyroOffsetTC(ygOffsetTC);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f997 20a2 	ldrsb.w	r2, [r7, #162]	; 0xa2
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fbd3 	bl	8002b6a <_ZN7MPU605016setYGyroOffsetTCEa>
            setZGyroOffsetTC(zgOffsetTC);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f997 20a1 	ldrsb.w	r2, [r7, #161]	; 0xa1
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fbf4 	bl	8002bba <_ZN7MPU605016setZGyroOffsetTCEa>
            //setYGyroOffset(0);
            //setZGyroOffset(0);

            DEBUG_PRINTLN(F("Writing final memory update 1/7 (function unknown)..."));
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80033d8:	2300      	movs	r3, #0
 80033da:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80033de:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d906      	bls.n	80033f4 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x184>
 80033e6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80033ea:	1c9a      	adds	r2, r3, #2
 80033ec:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033f0:	429a      	cmp	r2, r3
 80033f2:	db15      	blt.n	8003420 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x1b0>
 80033f4:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80033f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033fc:	4995      	ldr	r1, [pc, #596]	; (8003654 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 80033fe:	5c8a      	ldrb	r2, [r1, r2]
 8003400:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003404:	440b      	add	r3, r1
 8003406:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800340a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800340e:	3301      	adds	r3, #1
 8003410:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003414:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003418:	3301      	adds	r3, #1
 800341a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800341e:	e7de      	b.n	80033de <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x16e>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003426:	3103      	adds	r1, #3
 8003428:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800342c:	b29a      	uxth	r2, r3
 800342e:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 8003432:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003436:	2500      	movs	r5, #0
 8003438:	9502      	str	r5, [sp, #8]
 800343a:	2501      	movs	r5, #1
 800343c:	9501      	str	r5, [sp, #4]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	4623      	mov	r3, r4
 8003442:	f7ff fd06 	bl	8002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Writing final memory update 2/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003446:	2300      	movs	r3, #0
 8003448:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800344c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003450:	2b03      	cmp	r3, #3
 8003452:	d906      	bls.n	8003462 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x1f2>
 8003454:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003458:	1c9a      	adds	r2, r3, #2
 800345a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800345e:	429a      	cmp	r2, r3
 8003460:	db15      	blt.n	800348e <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x21e>
 8003462:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003466:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800346a:	497a      	ldr	r1, [pc, #488]	; (8003654 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 800346c:	5c8a      	ldrb	r2, [r1, r2]
 800346e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003472:	440b      	add	r3, r1
 8003474:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003478:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800347c:	3301      	adds	r3, #1
 800347e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003482:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003486:	3301      	adds	r3, #1
 8003488:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800348c:	e7de      	b.n	800344c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x1dc>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003494:	3103      	adds	r1, #3
 8003496:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800349a:	b29a      	uxth	r2, r3
 800349c:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 80034a0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80034a4:	2500      	movs	r5, #0
 80034a6:	9502      	str	r5, [sp, #8]
 80034a8:	2501      	movs	r5, #1
 80034aa:	9501      	str	r5, [sp, #4]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	4623      	mov	r3, r4
 80034b0:	f7ff fccf 	bl	8002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fa5f 	bl	800297a <_ZN7MPU60509resetFIFOEv>

            DEBUG_PRINTLN(F("Reading FIFO count..."));
            uint16_t fifoCount = getFIFOCount();
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff faac 	bl	8002a1c <_ZN7MPU605012getFIFOCountEv>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            uint8_t fifoBuffer[128];

            DEBUG_PRINT(F("Current FIFO count="));
            DEBUG_PRINTLN(fifoCount);
            getFIFOBytes(fifoBuffer, fifoCount);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	f107 010c 	add.w	r1, r7, #12
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff faba 	bl	8002a50 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
            setMotionDetectionThreshold(2);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2102      	movs	r1, #2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff f9a4 	bl	800282e <_ZN7MPU605027setMotionDetectionThresholdEh>

            DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
            setZeroMotionDetectionThreshold(156);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	219c      	movs	r1, #156	; 0x9c
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff f9c1 	bl	8002872 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>

            DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
            setMotionDetectionDuration(80);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2150      	movs	r1, #80	; 0x50
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff f9ab 	bl	8002850 <_ZN7MPU605026setMotionDetectionDurationEh>

            DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
            setZeroMotionDetectionDuration(0);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff f9c8 	bl	8002894 <_ZN7MPU605030setZeroMotionDetectionDurationEh>

            DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fa37 	bl	800297a <_ZN7MPU60509resetFIFOEv>

            DEBUG_PRINTLN(F("Enabling FIFO..."));
            setFIFOEnabled(true);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2101      	movs	r1, #1
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fa10 	bl	8002936 <_ZN7MPU605014setFIFOEnabledEb>

            DEBUG_PRINTLN(F("Enabling DMP..."));
            setDMPEnabled(true);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2101      	movs	r1, #1
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fbc6 	bl	8002cac <_ZN7MPU605013setDMPEnabledEb>

            DEBUG_PRINTLN(F("Resetting DMP..."));
            resetDMP();
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fbd3 	bl	8002cce <_ZN7MPU60508resetDMPEv>

            DEBUG_PRINTLN(F("Writing final memory update 3/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003528:	2300      	movs	r3, #0
 800352a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800352e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003532:	2b03      	cmp	r3, #3
 8003534:	d906      	bls.n	8003544 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x2d4>
 8003536:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800353a:	1c9a      	adds	r2, r3, #2
 800353c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003540:	429a      	cmp	r2, r3
 8003542:	db15      	blt.n	8003570 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x300>
 8003544:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003548:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800354c:	4941      	ldr	r1, [pc, #260]	; (8003654 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 800354e:	5c8a      	ldrb	r2, [r1, r2]
 8003550:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003554:	440b      	add	r3, r1
 8003556:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800355a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800355e:	3301      	adds	r3, #1
 8003560:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003564:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003568:	3301      	adds	r3, #1
 800356a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800356e:	e7de      	b.n	800352e <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x2be>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003576:	3103      	adds	r1, #3
 8003578:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800357c:	b29a      	uxth	r2, r3
 800357e:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 8003582:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003586:	2500      	movs	r5, #0
 8003588:	9502      	str	r5, [sp, #8]
 800358a:	2501      	movs	r5, #1
 800358c:	9501      	str	r5, [sp, #4]
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	4623      	mov	r3, r4
 8003592:	f7ff fc5e 	bl	8002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Writing final memory update 4/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003596:	2300      	movs	r3, #0
 8003598:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800359c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d906      	bls.n	80035b2 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x342>
 80035a4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80035a8:	1c9a      	adds	r2, r3, #2
 80035aa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80035ae:	429a      	cmp	r2, r3
 80035b0:	db15      	blt.n	80035de <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x36e>
 80035b2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80035b6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80035ba:	4926      	ldr	r1, [pc, #152]	; (8003654 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 80035bc:	5c8a      	ldrb	r2, [r1, r2]
 80035be:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80035c2:	440b      	add	r3, r1
 80035c4:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80035c8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80035cc:	3301      	adds	r3, #1
 80035ce:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80035d2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80035d6:	3301      	adds	r3, #1
 80035d8:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80035dc:	e7de      	b.n	800359c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x32c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80035e4:	3103      	adds	r1, #3
 80035e6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 80035f0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80035f4:	2500      	movs	r5, #0
 80035f6:	9502      	str	r5, [sp, #8]
 80035f8:	2501      	movs	r5, #1
 80035fa:	9501      	str	r5, [sp, #4]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	4623      	mov	r3, r4
 8003600:	f7ff fc27 	bl	8002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Writing final memory update 5/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003604:	2300      	movs	r3, #0
 8003606:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800360a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800360e:	2b03      	cmp	r3, #3
 8003610:	d906      	bls.n	8003620 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3b0>
 8003612:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003616:	1c9a      	adds	r2, r3, #2
 8003618:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800361c:	429a      	cmp	r2, r3
 800361e:	db1b      	blt.n	8003658 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e8>
 8003620:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003624:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003628:	490a      	ldr	r1, [pc, #40]	; (8003654 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 800362a:	5c8a      	ldrb	r2, [r1, r2]
 800362c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003630:	440b      	add	r3, r1
 8003632:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003636:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800363a:	3301      	adds	r3, #1
 800363c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003640:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003644:	3301      	adds	r3, #1
 8003646:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800364a:	e7de      	b.n	800360a <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x39a>
 800364c:	08014110 	.word	0x08014110
 8003650:	0801489c 	.word	0x0801489c
 8003654:	0801495c 	.word	0x0801495c
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800365e:	3103      	adds	r1, #3
 8003660:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003664:	b29a      	uxth	r2, r3
 8003666:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 800366a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800366e:	2500      	movs	r5, #0
 8003670:	9502      	str	r5, [sp, #8]
 8003672:	2501      	movs	r5, #1
 8003674:	9501      	str	r5, [sp, #4]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	4623      	mov	r3, r4
 800367a:	f7ff fbea 	bl	8002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff f9cb 	bl	8002a1c <_ZN7MPU605012getFIFOCountEv>
 8003686:	4603      	mov	r3, r0
 8003688:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800368c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003690:	2b02      	cmp	r3, #2
 8003692:	bf94      	ite	ls
 8003694:	2301      	movls	r3, #1
 8003696:	2300      	movhi	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d000      	beq.n	80036a0 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x430>
 800369e:	e7ee      	b.n	800367e <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x40e>

            DEBUG_PRINT(F("Current FIFO count="));
            DEBUG_PRINTLN(fifoCount);
            DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	f107 010c 	add.w	r1, r7, #12
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff f9cf 	bl	8002a50 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Reading interrupt status..."));
            getIntStatus();
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff f92c 	bl	8002912 <_ZN7MPU605012getIntStatusEv>

            DEBUG_PRINT(F("Current interrupt status="));
            DEBUG_PRINTLNF(mpuIntStatus, HEX);

            DEBUG_PRINTLN(F("Reading final memory update 6/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80036ba:	2300      	movs	r3, #0
 80036bc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80036c0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d906      	bls.n	80036d6 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x466>
 80036c8:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80036cc:	1c9a      	adds	r2, r3, #2
 80036ce:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80036d2:	429a      	cmp	r2, r3
 80036d4:	db15      	blt.n	8003702 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x492>
 80036d6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80036da:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80036de:	4947      	ldr	r1, [pc, #284]	; (80037fc <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x58c>)
 80036e0:	5c8a      	ldrb	r2, [r1, r2]
 80036e2:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80036e6:	440b      	add	r3, r1
 80036e8:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80036ec:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80036f0:	3301      	adds	r3, #1
 80036f2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80036f6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80036fa:	3301      	adds	r3, #1
 80036fc:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003700:	e7de      	b.n	80036c0 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x450>
            readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003708:	3103      	adds	r1, #3
 800370a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800370e:	b29a      	uxth	r2, r3
 8003710:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 8003714:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	4623      	mov	r3, r4
 800371c:	f7ff fb33 	bl	8002d86 <_ZN7MPU605015readMemoryBlockEPhthh>

            DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff f97a 	bl	8002a1c <_ZN7MPU605012getFIFOCountEv>
 8003728:	4603      	mov	r3, r0
 800372a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800372e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003732:	2b02      	cmp	r3, #2
 8003734:	bf94      	ite	ls
 8003736:	2301      	movls	r3, #1
 8003738:	2300      	movhi	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d000      	beq.n	8003742 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x4d2>
 8003740:	e7ee      	b.n	8003720 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x4b0>

            DEBUG_PRINT(F("Current FIFO count="));
            DEBUG_PRINTLN(fifoCount);

            DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	f107 010c 	add.w	r1, r7, #12
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff f97e 	bl	8002a50 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Reading interrupt status..."));
            getIntStatus();
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff f8db 	bl	8002912 <_ZN7MPU605012getIntStatusEv>

            DEBUG_PRINT(F("Current interrupt status="));
            DEBUG_PRINTLNF(mpuIntStatus, HEX);

            DEBUG_PRINTLN(F("Writing final memory update 7/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 800375c:	2300      	movs	r3, #0
 800375e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003762:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003766:	2b03      	cmp	r3, #3
 8003768:	d906      	bls.n	8003778 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x508>
 800376a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800376e:	1c9a      	adds	r2, r3, #2
 8003770:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003774:	429a      	cmp	r2, r3
 8003776:	db15      	blt.n	80037a4 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x534>
 8003778:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800377c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003780:	491e      	ldr	r1, [pc, #120]	; (80037fc <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x58c>)
 8003782:	5c8a      	ldrb	r2, [r1, r2]
 8003784:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003788:	440b      	add	r3, r1
 800378a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800378e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003792:	3301      	adds	r3, #1
 8003794:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003798:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800379c:	3301      	adds	r3, #1
 800379e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80037a2:	e7de      	b.n	8003762 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x4f2>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80037aa:	3103      	adds	r1, #3
 80037ac:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 80037b6:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80037ba:	2500      	movs	r5, #0
 80037bc:	9502      	str	r5, [sp, #8]
 80037be:	2501      	movs	r5, #1
 80037c0:	9501      	str	r5, [sp, #4]
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	4623      	mov	r3, r4
 80037c6:	f7ff fb44 	bl	8002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("DMP is good to go! Finally."));

            DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
            setDMPEnabled(false);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff fa6c 	bl	8002cac <_ZN7MPU605013setDMPEnabledEb>

            DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
            dmpPacketSize = 42;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	222a      	movs	r2, #42	; 0x2a
 80037d8:	839a      	strh	r2, [r3, #28]
            /*if ((dmpPacketBuffer = (uint8_t *)malloc(42)) == 0) {
                return 3; // TODO: proper error code for no memory
            }*/

            DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
            resetFIFO();
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff f8cc 	bl	800297a <_ZN7MPU60509resetFIFOEv>
            getIntStatus();
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff f894 	bl	8002912 <_ZN7MPU605012getIntStatusEv>
        }
    } else {
        DEBUG_PRINTLN(F("ERROR! DMP code verification failed."));
        return 1; // main binary block loading failed
    }
    return 0; // success
 80037ea:	2300      	movs	r3, #0
 80037ec:	e002      	b.n	80037f4 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x584>
            return 2; // configuration block loading failed
 80037ee:	2302      	movs	r3, #2
 80037f0:	e000      	b.n	80037f4 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x584>
        return 1; // main binary block loading failed
 80037f2:	2301      	movs	r3, #1
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	37a8      	adds	r7, #168	; 0xa8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bdb0      	pop	{r4, r5, r7, pc}
 80037fc:	0801495c 	.word	0x0801495c

08003800 <_Z17get_XW_diffAnglesv>:
 * form of a Quaternion and then converts it to usable PITCH,ROLL,YAW angles
 * 
 * --Custom Method!
 */
void get_XW_diffAngles()
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
  //float *p = QuaternionSLERP(QuaternionProduct(QuaternionSLERP(&OriginQuaternion[0], &MPUoutputQuaternion[0]), &FrameOriginQuaternion[0]), &LoopWQuaternion[0]);
  //float *p = QuaternionNormalize(QuaternionSLERP(FrameOriginQuaternion, QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(OriginQuaternion, MPUoutputQuaternion)), FrameOriginQuaternion)), FrameOriginQuaternion)), LoopWQuaternion))));
  float *p = QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(GyroOriginQuaternion, QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(OriginQuaternion, GyroOriginQuaternion)), MPUoutputQuaternion)))), FrameOriginQuaternion)), FrameOriginQuaternion)), LoopWQuaternion));
 8003806:	4960      	ldr	r1, [pc, #384]	; (8003988 <_Z17get_XW_diffAnglesv+0x188>)
 8003808:	4860      	ldr	r0, [pc, #384]	; (800398c <_Z17get_XW_diffAnglesv+0x18c>)
 800380a:	f7fe fef3 	bl	80025f4 <_Z15QuaternionSLERPPfS_>
 800380e:	4603      	mov	r3, r0
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe ff01 	bl	8002618 <_Z19QuaternionNormalizePf>
 8003816:	4603      	mov	r3, r0
 8003818:	495d      	ldr	r1, [pc, #372]	; (8003990 <_Z17get_XW_diffAnglesv+0x190>)
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fdbc 	bl	8002398 <_Z17QuaternionProductPfS_>
 8003820:	4603      	mov	r3, r0
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fef8 	bl	8002618 <_Z19QuaternionNormalizePf>
 8003828:	4603      	mov	r3, r0
 800382a:	4619      	mov	r1, r3
 800382c:	4856      	ldr	r0, [pc, #344]	; (8003988 <_Z17get_XW_diffAnglesv+0x188>)
 800382e:	f7fe fee1 	bl	80025f4 <_Z15QuaternionSLERPPfS_>
 8003832:	4603      	mov	r3, r0
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe feef 	bl	8002618 <_Z19QuaternionNormalizePf>
 800383a:	4603      	mov	r3, r0
 800383c:	4955      	ldr	r1, [pc, #340]	; (8003994 <_Z17get_XW_diffAnglesv+0x194>)
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe fdaa 	bl	8002398 <_Z17QuaternionProductPfS_>
 8003844:	4603      	mov	r3, r0
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fee6 	bl	8002618 <_Z19QuaternionNormalizePf>
 800384c:	4603      	mov	r3, r0
 800384e:	4951      	ldr	r1, [pc, #324]	; (8003994 <_Z17get_XW_diffAnglesv+0x194>)
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe fecf 	bl	80025f4 <_Z15QuaternionSLERPPfS_>
 8003856:	4603      	mov	r3, r0
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe fedd 	bl	8002618 <_Z19QuaternionNormalizePf>
 800385e:	4603      	mov	r3, r0
 8003860:	494d      	ldr	r1, [pc, #308]	; (8003998 <_Z17get_XW_diffAnglesv+0x198>)
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fd98 	bl	8002398 <_Z17QuaternionProductPfS_>
 8003868:	4603      	mov	r3, r0
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe fed4 	bl	8002618 <_Z19QuaternionNormalizePf>
 8003870:	6078      	str	r0, [r7, #4]
  
  LoopXWQuaternion[0] = *p;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a49      	ldr	r2, [pc, #292]	; (800399c <_Z17get_XW_diffAnglesv+0x19c>)
 8003878:	6013      	str	r3, [r2, #0]
  LoopXWQuaternion[1] = *(p + 1);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4a47      	ldr	r2, [pc, #284]	; (800399c <_Z17get_XW_diffAnglesv+0x19c>)
 8003880:	6053      	str	r3, [r2, #4]
  LoopXWQuaternion[2] = *(p + 2);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	4a45      	ldr	r2, [pc, #276]	; (800399c <_Z17get_XW_diffAnglesv+0x19c>)
 8003888:	6093      	str	r3, [r2, #8]
  LoopXWQuaternion[3] = *(p + 3);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	4a43      	ldr	r2, [pc, #268]	; (800399c <_Z17get_XW_diffAnglesv+0x19c>)
 8003890:	60d3      	str	r3, [r2, #12]

  //difference x-w in degrees
  PID_Pitch_xw_diff = 2 * (((float)asin(LoopXWQuaternion[2]) * 180) / M_PI);
 8003892:	4b42      	ldr	r3, [pc, #264]	; (800399c <_Z17get_XW_diffAnglesv+0x19c>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe f962 	bl	8001b60 <_ZSt4asinf>
 800389c:	4603      	mov	r3, r0
 800389e:	4940      	ldr	r1, [pc, #256]	; (80039a0 <_Z17get_XW_diffAnglesv+0x1a0>)
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fd faab 	bl	8000dfc <__aeabi_fmul>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fc fdf9 	bl	80004a0 <__aeabi_f2d>
 80038ae:	a334      	add	r3, pc, #208	; (adr r3, 8003980 <_Z17get_XW_diffAnglesv+0x180>)
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f7fc ff76 	bl	80007a4 <__aeabi_ddiv>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4610      	mov	r0, r2
 80038be:	4619      	mov	r1, r3
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	f7fc fc8e 	bl	80001e4 <__adddf3>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	f7fd f936 	bl	8000b40 <__aeabi_d2f>
 80038d4:	4603      	mov	r3, r0
 80038d6:	4a33      	ldr	r2, [pc, #204]	; (80039a4 <_Z17get_XW_diffAnglesv+0x1a4>)
 80038d8:	6013      	str	r3, [r2, #0]
  PID_Roll_xw_diff  = 2 * (((float)asin(LoopXWQuaternion[1]) * 180) / M_PI);
 80038da:	4b30      	ldr	r3, [pc, #192]	; (800399c <_Z17get_XW_diffAnglesv+0x19c>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fe f93e 	bl	8001b60 <_ZSt4asinf>
 80038e4:	4603      	mov	r3, r0
 80038e6:	492e      	ldr	r1, [pc, #184]	; (80039a0 <_Z17get_XW_diffAnglesv+0x1a0>)
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd fa87 	bl	8000dfc <__aeabi_fmul>
 80038ee:	4603      	mov	r3, r0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fc fdd5 	bl	80004a0 <__aeabi_f2d>
 80038f6:	a322      	add	r3, pc, #136	; (adr r3, 8003980 <_Z17get_XW_diffAnglesv+0x180>)
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	f7fc ff52 	bl	80007a4 <__aeabi_ddiv>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	f7fc fc6a 	bl	80001e4 <__adddf3>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4610      	mov	r0, r2
 8003916:	4619      	mov	r1, r3
 8003918:	f7fd f912 	bl	8000b40 <__aeabi_d2f>
 800391c:	4603      	mov	r3, r0
 800391e:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <_Z17get_XW_diffAnglesv+0x1a8>)
 8003920:	6013      	str	r3, [r2, #0]
  PID_Yaw_xw_diff   = 2 * (((float)atan(LoopXWQuaternion[3] / LoopXWQuaternion[0]) * 180) / M_PI);
 8003922:	4b1e      	ldr	r3, [pc, #120]	; (800399c <_Z17get_XW_diffAnglesv+0x19c>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	4a1d      	ldr	r2, [pc, #116]	; (800399c <_Z17get_XW_diffAnglesv+0x19c>)
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f7fd fb19 	bl	8000f64 <__aeabi_fdiv>
 8003932:	4603      	mov	r3, r0
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe f91f 	bl	8001b78 <_ZSt4atanf>
 800393a:	4603      	mov	r3, r0
 800393c:	4918      	ldr	r1, [pc, #96]	; (80039a0 <_Z17get_XW_diffAnglesv+0x1a0>)
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd fa5c 	bl	8000dfc <__aeabi_fmul>
 8003944:	4603      	mov	r3, r0
 8003946:	4618      	mov	r0, r3
 8003948:	f7fc fdaa 	bl	80004a0 <__aeabi_f2d>
 800394c:	a30c      	add	r3, pc, #48	; (adr r3, 8003980 <_Z17get_XW_diffAnglesv+0x180>)
 800394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003952:	f7fc ff27 	bl	80007a4 <__aeabi_ddiv>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4610      	mov	r0, r2
 800395c:	4619      	mov	r1, r3
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	f7fc fc3f 	bl	80001e4 <__adddf3>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4610      	mov	r0, r2
 800396c:	4619      	mov	r1, r3
 800396e:	f7fd f8e7 	bl	8000b40 <__aeabi_d2f>
 8003972:	4603      	mov	r3, r0
 8003974:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <_Z17get_XW_diffAnglesv+0x1ac>)
 8003976:	6013      	str	r3, [r2, #0]
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	54442d18 	.word	0x54442d18
 8003984:	400921fb 	.word	0x400921fb
 8003988:	20000048 	.word	0x20000048
 800398c:	2000057c 	.word	0x2000057c
 8003990:	2000056c 	.word	0x2000056c
 8003994:	20000028 	.word	0x20000028
 8003998:	20000038 	.word	0x20000038
 800399c:	2000058c 	.word	0x2000058c
 80039a0:	43340000 	.word	0x43340000
 80039a4:	2000053c 	.word	0x2000053c
 80039a8:	20000540 	.word	0x20000540
 80039ac:	20000544 	.word	0x20000544

080039b0 <_Z17reset_WQuaternionv>:
 * @brief 
 * 
 * //NOTDONE
 */
void reset_WQuaternion()
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
  float *p = QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(GyroOriginQuaternion, QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(OriginQuaternion, GyroOriginQuaternion)), MPUoutputQuaternion)))), FrameOriginQuaternion));
 80039b6:	491c      	ldr	r1, [pc, #112]	; (8003a28 <_Z17reset_WQuaternionv+0x78>)
 80039b8:	481c      	ldr	r0, [pc, #112]	; (8003a2c <_Z17reset_WQuaternionv+0x7c>)
 80039ba:	f7fe fe1b 	bl	80025f4 <_Z15QuaternionSLERPPfS_>
 80039be:	4603      	mov	r3, r0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fe fe29 	bl	8002618 <_Z19QuaternionNormalizePf>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4919      	ldr	r1, [pc, #100]	; (8003a30 <_Z17reset_WQuaternionv+0x80>)
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe fce4 	bl	8002398 <_Z17QuaternionProductPfS_>
 80039d0:	4603      	mov	r3, r0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe fe20 	bl	8002618 <_Z19QuaternionNormalizePf>
 80039d8:	4603      	mov	r3, r0
 80039da:	4619      	mov	r1, r3
 80039dc:	4812      	ldr	r0, [pc, #72]	; (8003a28 <_Z17reset_WQuaternionv+0x78>)
 80039de:	f7fe fe09 	bl	80025f4 <_Z15QuaternionSLERPPfS_>
 80039e2:	4603      	mov	r3, r0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe fe17 	bl	8002618 <_Z19QuaternionNormalizePf>
 80039ea:	4603      	mov	r3, r0
 80039ec:	4911      	ldr	r1, [pc, #68]	; (8003a34 <_Z17reset_WQuaternionv+0x84>)
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fcd2 	bl	8002398 <_Z17QuaternionProductPfS_>
 80039f4:	4603      	mov	r3, r0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fe0e 	bl	8002618 <_Z19QuaternionNormalizePf>
 80039fc:	6078      	str	r0, [r7, #4]
  LoopWQuaternion[0] = *p;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <_Z17reset_WQuaternionv+0x88>)
 8003a04:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p + 1);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4a0b      	ldr	r2, [pc, #44]	; (8003a38 <_Z17reset_WQuaternionv+0x88>)
 8003a0c:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p + 2);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <_Z17reset_WQuaternionv+0x88>)
 8003a14:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p + 3);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <_Z17reset_WQuaternionv+0x88>)
 8003a1c:	60d3      	str	r3, [r2, #12]
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000048 	.word	0x20000048
 8003a2c:	2000057c 	.word	0x2000057c
 8003a30:	2000056c 	.word	0x2000056c
 8003a34:	20000028 	.word	0x20000028
 8003a38:	20000038 	.word	0x20000038

08003a3c <_Z10update_PIDv>:
 * @brief Gets PITCH,ROLL,YAW Y values and integrates/differentiates
 * 
 * --Custom Method!
 */
void update_PID()
{
 8003a3c:	b598      	push	{r3, r4, r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  PID_Yaw_xw_diff = -PID_Yaw_xw_diff;
 8003a40:	4b94      	ldr	r3, [pc, #592]	; (8003c94 <_Z10update_PIDv+0x258>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003a48:	4a92      	ldr	r2, [pc, #584]	; (8003c94 <_Z10update_PIDv+0x258>)
 8003a4a:	6013      	str	r3, [r2, #0]
  Pitch_I_Sum += (PID_Pitch_xw_diff * Pitch_PID_k[1]);                                                                                  // integrate
 8003a4c:	4b92      	ldr	r3, [pc, #584]	; (8003c98 <_Z10update_PIDv+0x25c>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4a92      	ldr	r2, [pc, #584]	; (8003c9c <_Z10update_PIDv+0x260>)
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd f9d0 	bl	8000dfc <__aeabi_fmul>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b8f      	ldr	r3, [pc, #572]	; (8003ca0 <_Z10update_PIDv+0x264>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f7fd f8c0 	bl	8000bec <__addsf3>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	461a      	mov	r2, r3
 8003a70:	4b8b      	ldr	r3, [pc, #556]	; (8003ca0 <_Z10update_PIDv+0x264>)
 8003a72:	601a      	str	r2, [r3, #0]
  Roll_I_Sum  += (PID_Roll_xw_diff  * Roll_PID_k[1] );
 8003a74:	4b8b      	ldr	r3, [pc, #556]	; (8003ca4 <_Z10update_PIDv+0x268>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4a8b      	ldr	r2, [pc, #556]	; (8003ca8 <_Z10update_PIDv+0x26c>)
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd f9bc 	bl	8000dfc <__aeabi_fmul>
 8003a84:	4603      	mov	r3, r0
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b88      	ldr	r3, [pc, #544]	; (8003cac <_Z10update_PIDv+0x270>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	f7fd f8ac 	bl	8000bec <__addsf3>
 8003a94:	4603      	mov	r3, r0
 8003a96:	461a      	mov	r2, r3
 8003a98:	4b84      	ldr	r3, [pc, #528]	; (8003cac <_Z10update_PIDv+0x270>)
 8003a9a:	601a      	str	r2, [r3, #0]
  Yaw_I_Sum   += (PID_Yaw_xw_diff   * Yaw_PID_k[1]  );
 8003a9c:	4b84      	ldr	r3, [pc, #528]	; (8003cb0 <_Z10update_PIDv+0x274>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4a7c      	ldr	r2, [pc, #496]	; (8003c94 <_Z10update_PIDv+0x258>)
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd f9a8 	bl	8000dfc <__aeabi_fmul>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4b80      	ldr	r3, [pc, #512]	; (8003cb4 <_Z10update_PIDv+0x278>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	f7fd f898 	bl	8000bec <__addsf3>
 8003abc:	4603      	mov	r3, r0
 8003abe:	461a      	mov	r2, r3
 8003ac0:	4b7c      	ldr	r3, [pc, #496]	; (8003cb4 <_Z10update_PIDv+0x278>)
 8003ac2:	601a      	str	r2, [r3, #0]

  if (Pitch_I_Sum >  50) Pitch_I_Sum =  50;                         //constrain integration (-500 500)
 8003ac4:	4b76      	ldr	r3, [pc, #472]	; (8003ca0 <_Z10update_PIDv+0x264>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	497b      	ldr	r1, [pc, #492]	; (8003cb8 <_Z10update_PIDv+0x27c>)
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fd fb52 	bl	8001174 <__aeabi_fcmpgt>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <_Z10update_PIDv+0xa0>
 8003ad6:	4b72      	ldr	r3, [pc, #456]	; (8003ca0 <_Z10update_PIDv+0x264>)
 8003ad8:	4a77      	ldr	r2, [pc, #476]	; (8003cb8 <_Z10update_PIDv+0x27c>)
 8003ada:	601a      	str	r2, [r3, #0]
  if (Roll_I_Sum  >  50) Roll_I_Sum  =  50;
 8003adc:	4b73      	ldr	r3, [pc, #460]	; (8003cac <_Z10update_PIDv+0x270>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4975      	ldr	r1, [pc, #468]	; (8003cb8 <_Z10update_PIDv+0x27c>)
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fd fb46 	bl	8001174 <__aeabi_fcmpgt>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <_Z10update_PIDv+0xb8>
 8003aee:	4b6f      	ldr	r3, [pc, #444]	; (8003cac <_Z10update_PIDv+0x270>)
 8003af0:	4a71      	ldr	r2, [pc, #452]	; (8003cb8 <_Z10update_PIDv+0x27c>)
 8003af2:	601a      	str	r2, [r3, #0]
  if (Yaw_I_Sum   > 200) Yaw_I_Sum   = 200;
 8003af4:	4b6f      	ldr	r3, [pc, #444]	; (8003cb4 <_Z10update_PIDv+0x278>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4970      	ldr	r1, [pc, #448]	; (8003cbc <_Z10update_PIDv+0x280>)
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd fb3a 	bl	8001174 <__aeabi_fcmpgt>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <_Z10update_PIDv+0xd0>
 8003b06:	4b6b      	ldr	r3, [pc, #428]	; (8003cb4 <_Z10update_PIDv+0x278>)
 8003b08:	4a6c      	ldr	r2, [pc, #432]	; (8003cbc <_Z10update_PIDv+0x280>)
 8003b0a:	601a      	str	r2, [r3, #0]
  if (Pitch_I_Sum < -50) Pitch_I_Sum = -50;       //NOTDONE use defines for values
 8003b0c:	4b64      	ldr	r3, [pc, #400]	; (8003ca0 <_Z10update_PIDv+0x264>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	496b      	ldr	r1, [pc, #428]	; (8003cc0 <_Z10update_PIDv+0x284>)
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fd fb10 	bl	8001138 <__aeabi_fcmplt>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <_Z10update_PIDv+0xe8>
 8003b1e:	4b60      	ldr	r3, [pc, #384]	; (8003ca0 <_Z10update_PIDv+0x264>)
 8003b20:	4a67      	ldr	r2, [pc, #412]	; (8003cc0 <_Z10update_PIDv+0x284>)
 8003b22:	601a      	str	r2, [r3, #0]
  if (Roll_I_Sum  < -50) Roll_I_Sum  = -50;
 8003b24:	4b61      	ldr	r3, [pc, #388]	; (8003cac <_Z10update_PIDv+0x270>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4965      	ldr	r1, [pc, #404]	; (8003cc0 <_Z10update_PIDv+0x284>)
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fd fb04 	bl	8001138 <__aeabi_fcmplt>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <_Z10update_PIDv+0x100>
 8003b36:	4b5d      	ldr	r3, [pc, #372]	; (8003cac <_Z10update_PIDv+0x270>)
 8003b38:	4a61      	ldr	r2, [pc, #388]	; (8003cc0 <_Z10update_PIDv+0x284>)
 8003b3a:	601a      	str	r2, [r3, #0]
  if (Yaw_I_Sum   <   0) Yaw_I_Sum   =   0;
 8003b3c:	4b5d      	ldr	r3, [pc, #372]	; (8003cb4 <_Z10update_PIDv+0x278>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fd faf7 	bl	8001138 <__aeabi_fcmplt>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <_Z10update_PIDv+0x11c>
 8003b50:	4b58      	ldr	r3, [pc, #352]	; (8003cb4 <_Z10update_PIDv+0x278>)
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

  PID_Pitch_y = (PID_Pitch_xw_diff * Pitch_PID_k[0] * 10) + Pitch_I_Sum + ((PID_Pitch_xw_diff - Pitch_D_old) * Pitch_PID_k[2] * 100);   //combine P,I,D values
 8003b58:	4b4f      	ldr	r3, [pc, #316]	; (8003c98 <_Z10update_PIDv+0x25c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a4f      	ldr	r2, [pc, #316]	; (8003c9c <_Z10update_PIDv+0x260>)
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fd f94a 	bl	8000dfc <__aeabi_fmul>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	4956      	ldr	r1, [pc, #344]	; (8003cc4 <_Z10update_PIDv+0x288>)
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fd f945 	bl	8000dfc <__aeabi_fmul>
 8003b72:	4603      	mov	r3, r0
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b4a      	ldr	r3, [pc, #296]	; (8003ca0 <_Z10update_PIDv+0x264>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f7fd f835 	bl	8000bec <__addsf3>
 8003b82:	4603      	mov	r3, r0
 8003b84:	461c      	mov	r4, r3
 8003b86:	4b45      	ldr	r3, [pc, #276]	; (8003c9c <_Z10update_PIDv+0x260>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a4f      	ldr	r2, [pc, #316]	; (8003cc8 <_Z10update_PIDv+0x28c>)
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fd f829 	bl	8000be8 <__aeabi_fsub>
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4b3f      	ldr	r3, [pc, #252]	; (8003c98 <_Z10update_PIDv+0x25c>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	f7fd f92b 	bl	8000dfc <__aeabi_fmul>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4948      	ldr	r1, [pc, #288]	; (8003ccc <_Z10update_PIDv+0x290>)
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fd f926 	bl	8000dfc <__aeabi_fmul>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f7fd f819 	bl	8000bec <__addsf3>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b44      	ldr	r3, [pc, #272]	; (8003cd0 <_Z10update_PIDv+0x294>)
 8003bc0:	601a      	str	r2, [r3, #0]
  PID_Roll_y  = (PID_Roll_xw_diff  * Roll_PID_k[0]  * 10) + Roll_I_Sum  + ((PID_Roll_xw_diff  - Roll_D_old ) * Roll_PID_k[2]  * 100);
 8003bc2:	4b38      	ldr	r3, [pc, #224]	; (8003ca4 <_Z10update_PIDv+0x268>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a38      	ldr	r2, [pc, #224]	; (8003ca8 <_Z10update_PIDv+0x26c>)
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	4611      	mov	r1, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fd f915 	bl	8000dfc <__aeabi_fmul>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	493b      	ldr	r1, [pc, #236]	; (8003cc4 <_Z10update_PIDv+0x288>)
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd f910 	bl	8000dfc <__aeabi_fmul>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	461a      	mov	r2, r3
 8003be0:	4b32      	ldr	r3, [pc, #200]	; (8003cac <_Z10update_PIDv+0x270>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4619      	mov	r1, r3
 8003be6:	4610      	mov	r0, r2
 8003be8:	f7fd f800 	bl	8000bec <__addsf3>
 8003bec:	4603      	mov	r3, r0
 8003bee:	461c      	mov	r4, r3
 8003bf0:	4b2d      	ldr	r3, [pc, #180]	; (8003ca8 <_Z10update_PIDv+0x26c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a37      	ldr	r2, [pc, #220]	; (8003cd4 <_Z10update_PIDv+0x298>)
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fc fff4 	bl	8000be8 <__aeabi_fsub>
 8003c00:	4603      	mov	r3, r0
 8003c02:	461a      	mov	r2, r3
 8003c04:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <_Z10update_PIDv+0x268>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	f7fd f8f6 	bl	8000dfc <__aeabi_fmul>
 8003c10:	4603      	mov	r3, r0
 8003c12:	492e      	ldr	r1, [pc, #184]	; (8003ccc <_Z10update_PIDv+0x290>)
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fd f8f1 	bl	8000dfc <__aeabi_fmul>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f7fc ffe4 	bl	8000bec <__addsf3>
 8003c24:	4603      	mov	r3, r0
 8003c26:	461a      	mov	r2, r3
 8003c28:	4b2b      	ldr	r3, [pc, #172]	; (8003cd8 <_Z10update_PIDv+0x29c>)
 8003c2a:	601a      	str	r2, [r3, #0]
  PID_Yaw_y   = (PID_Yaw_xw_diff   * Yaw_PID_k[0]   * 20) + Yaw_I_Sum   + ((PID_Yaw_xw_diff   - Yaw_D_old  ) * Yaw_PID_k[2]   * 100);          //NOTDONE use defines for values
 8003c2c:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <_Z10update_PIDv+0x274>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <_Z10update_PIDv+0x258>)
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fd f8e0 	bl	8000dfc <__aeabi_fmul>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	4927      	ldr	r1, [pc, #156]	; (8003cdc <_Z10update_PIDv+0x2a0>)
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fd f8db 	bl	8000dfc <__aeabi_fmul>
 8003c46:	4603      	mov	r3, r0
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <_Z10update_PIDv+0x278>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f7fc ffcb 	bl	8000bec <__addsf3>
 8003c56:	4603      	mov	r3, r0
 8003c58:	461c      	mov	r4, r3
 8003c5a:	4b0e      	ldr	r3, [pc, #56]	; (8003c94 <_Z10update_PIDv+0x258>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a20      	ldr	r2, [pc, #128]	; (8003ce0 <_Z10update_PIDv+0x2a4>)
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	4611      	mov	r1, r2
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fc ffbf 	bl	8000be8 <__aeabi_fsub>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <_Z10update_PIDv+0x274>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f7fd f8c1 	bl	8000dfc <__aeabi_fmul>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4913      	ldr	r1, [pc, #76]	; (8003ccc <_Z10update_PIDv+0x290>)
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fd f8bc 	bl	8000dfc <__aeabi_fmul>
 8003c84:	4603      	mov	r3, r0
 8003c86:	4619      	mov	r1, r3
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f7fc ffaf 	bl	8000bec <__addsf3>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	e028      	b.n	8003ce4 <_Z10update_PIDv+0x2a8>
 8003c92:	bf00      	nop
 8003c94:	20000544 	.word	0x20000544
 8003c98:	20000004 	.word	0x20000004
 8003c9c:	2000053c 	.word	0x2000053c
 8003ca0:	20000554 	.word	0x20000554
 8003ca4:	20000010 	.word	0x20000010
 8003ca8:	20000540 	.word	0x20000540
 8003cac:	20000558 	.word	0x20000558
 8003cb0:	2000001c 	.word	0x2000001c
 8003cb4:	2000055c 	.word	0x2000055c
 8003cb8:	42480000 	.word	0x42480000
 8003cbc:	43480000 	.word	0x43480000
 8003cc0:	c2480000 	.word	0xc2480000
 8003cc4:	41200000 	.word	0x41200000
 8003cc8:	20000560 	.word	0x20000560
 8003ccc:	42c80000 	.word	0x42c80000
 8003cd0:	20000548 	.word	0x20000548
 8003cd4:	20000564 	.word	0x20000564
 8003cd8:	2000054c 	.word	0x2000054c
 8003cdc:	41a00000 	.word	0x41a00000
 8003ce0:	20000568 	.word	0x20000568
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <_Z10update_PIDv+0x360>)
 8003ce8:	601a      	str	r2, [r3, #0]

  Pitch_D_old = PID_Pitch_xw_diff;                                                                                                      // differentiate
 8003cea:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <_Z10update_PIDv+0x364>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a2d      	ldr	r2, [pc, #180]	; (8003da4 <_Z10update_PIDv+0x368>)
 8003cf0:	6013      	str	r3, [r2, #0]
  Roll_D_old  = PID_Roll_xw_diff ;
 8003cf2:	4b2d      	ldr	r3, [pc, #180]	; (8003da8 <_Z10update_PIDv+0x36c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a2d      	ldr	r2, [pc, #180]	; (8003dac <_Z10update_PIDv+0x370>)
 8003cf8:	6013      	str	r3, [r2, #0]
  Yaw_D_old   = PID_Yaw_xw_diff  ;
 8003cfa:	4b2d      	ldr	r3, [pc, #180]	; (8003db0 <_Z10update_PIDv+0x374>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2d      	ldr	r2, [pc, #180]	; (8003db4 <_Z10update_PIDv+0x378>)
 8003d00:	6013      	str	r3, [r2, #0]

  if (PID_Pitch_y > 500 ) PID_Pitch_y = 500 ;
 8003d02:	4b2d      	ldr	r3, [pc, #180]	; (8003db8 <_Z10update_PIDv+0x37c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	492d      	ldr	r1, [pc, #180]	; (8003dbc <_Z10update_PIDv+0x380>)
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fd fa33 	bl	8001174 <__aeabi_fcmpgt>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <_Z10update_PIDv+0x2de>
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <_Z10update_PIDv+0x37c>)
 8003d16:	4a29      	ldr	r2, [pc, #164]	; (8003dbc <_Z10update_PIDv+0x380>)
 8003d18:	601a      	str	r2, [r3, #0]
  if (PID_Roll_y  > 500 ) PID_Roll_y  = 500 ;                            //NOTDONE use defines for values
 8003d1a:	4b29      	ldr	r3, [pc, #164]	; (8003dc0 <_Z10update_PIDv+0x384>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4927      	ldr	r1, [pc, #156]	; (8003dbc <_Z10update_PIDv+0x380>)
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fd fa27 	bl	8001174 <__aeabi_fcmpgt>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <_Z10update_PIDv+0x2f6>
 8003d2c:	4b24      	ldr	r3, [pc, #144]	; (8003dc0 <_Z10update_PIDv+0x384>)
 8003d2e:	4a23      	ldr	r2, [pc, #140]	; (8003dbc <_Z10update_PIDv+0x380>)
 8003d30:	601a      	str	r2, [r3, #0]
  if (PID_Yaw_y   > 1000) PID_Yaw_y   = 1000;
 8003d32:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <_Z10update_PIDv+0x360>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4923      	ldr	r1, [pc, #140]	; (8003dc4 <_Z10update_PIDv+0x388>)
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fd fa1b 	bl	8001174 <__aeabi_fcmpgt>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <_Z10update_PIDv+0x30e>
 8003d44:	4b15      	ldr	r3, [pc, #84]	; (8003d9c <_Z10update_PIDv+0x360>)
 8003d46:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <_Z10update_PIDv+0x388>)
 8003d48:	601a      	str	r2, [r3, #0]
  if (PID_Pitch_y < -500) PID_Pitch_y = -500;
 8003d4a:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <_Z10update_PIDv+0x37c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	491e      	ldr	r1, [pc, #120]	; (8003dc8 <_Z10update_PIDv+0x38c>)
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fd f9f1 	bl	8001138 <__aeabi_fcmplt>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <_Z10update_PIDv+0x326>
 8003d5c:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <_Z10update_PIDv+0x37c>)
 8003d5e:	4a1a      	ldr	r2, [pc, #104]	; (8003dc8 <_Z10update_PIDv+0x38c>)
 8003d60:	601a      	str	r2, [r3, #0]
  if (PID_Roll_y  < -500) PID_Roll_y  = -500;
 8003d62:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <_Z10update_PIDv+0x384>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4918      	ldr	r1, [pc, #96]	; (8003dc8 <_Z10update_PIDv+0x38c>)
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fd f9e5 	bl	8001138 <__aeabi_fcmplt>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <_Z10update_PIDv+0x33e>
 8003d74:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <_Z10update_PIDv+0x384>)
 8003d76:	4a14      	ldr	r2, [pc, #80]	; (8003dc8 <_Z10update_PIDv+0x38c>)
 8003d78:	601a      	str	r2, [r3, #0]
  if (PID_Yaw_y   <    0) PID_Yaw_y   =    0;
 8003d7a:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <_Z10update_PIDv+0x360>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f04f 0100 	mov.w	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fd f9d8 	bl	8001138 <__aeabi_fcmplt>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d100      	bne.n	8003d90 <_Z10update_PIDv+0x354>
}
 8003d8e:	e003      	b.n	8003d98 <_Z10update_PIDv+0x35c>
  if (PID_Yaw_y   <    0) PID_Yaw_y   =    0;
 8003d90:	4b02      	ldr	r3, [pc, #8]	; (8003d9c <_Z10update_PIDv+0x360>)
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
}
 8003d98:	bf00      	nop
 8003d9a:	bd98      	pop	{r3, r4, r7, pc}
 8003d9c:	20000550 	.word	0x20000550
 8003da0:	2000053c 	.word	0x2000053c
 8003da4:	20000560 	.word	0x20000560
 8003da8:	20000540 	.word	0x20000540
 8003dac:	20000564 	.word	0x20000564
 8003db0:	20000544 	.word	0x20000544
 8003db4:	20000568 	.word	0x20000568
 8003db8:	20000548 	.word	0x20000548
 8003dbc:	43fa0000 	.word	0x43fa0000
 8003dc0:	2000054c 	.word	0x2000054c
 8003dc4:	447a0000 	.word	0x447a0000
 8003dc8:	c3fa0000 	.word	0xc3fa0000
 8003dcc:	00000000 	.word	0x00000000

08003dd0 <_Z12getPIDValuesv>:
 * @brief This method extracts the PID values for PITCH,ROLL,YAW that can be live tuned on the remote
 * 
 * --Custom Method!
 */
void getPIDValues()
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  if (tuningMode == 1)
 8003dd4:	4bb2      	ldr	r3, [pc, #712]	; (80040a0 <_Z12getPIDValuesv+0x2d0>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	f040 825f 	bne.w	800429c <_Z12getPIDValuesv+0x4cc>
  {
    if ((SBUS_Channels[5] <= 1000) & (SBUS_Channels[5] >= 990))
 8003dde:	4bb1      	ldr	r3, [pc, #708]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8003de0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003de8:	bfd4      	ite	le
 8003dea:	2301      	movle	r3, #1
 8003dec:	2300      	movgt	r3, #0
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	4bac      	ldr	r3, [pc, #688]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8003df2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003df6:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003dfa:	428b      	cmp	r3, r1
 8003dfc:	bfcc      	ite	gt
 8003dfe:	2301      	movgt	r3, #1
 8003e00:	2300      	movle	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	4013      	ands	r3, r2
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80ac 	beq.w	8003f66 <_Z12getPIDValuesv+0x196>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Pitch_PID_k[0] = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) * 0.08;    //NOTDONE use defines for values
 8003e0e:	4ba5      	ldr	r3, [pc, #660]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8003e10:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e18:	bfd4      	ite	le
 8003e1a:	2301      	movle	r3, #1
 8003e1c:	2300      	movgt	r3, #0
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	4ba0      	ldr	r3, [pc, #640]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8003e22:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e26:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003e2a:	428b      	cmp	r3, r1
 8003e2c:	bfcc      	ite	gt
 8003e2e:	2301      	movgt	r3, #1
 8003e30:	2300      	movle	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	4013      	ands	r3, r2
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d022      	beq.n	8003e82 <_Z12getPIDValuesv+0xb2>
 8003e3c:	4b99      	ldr	r3, [pc, #612]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8003e3e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fc ff86 	bl	8000d54 <__aeabi_i2f>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	4997      	ldr	r1, [pc, #604]	; (80040a8 <_Z12getPIDValuesv+0x2d8>)
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fd f889 	bl	8000f64 <__aeabi_fdiv>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fc fec7 	bl	8000bec <__addsf3>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fc fb1d 	bl	80004a0 <__aeabi_f2d>
 8003e66:	a38a      	add	r3, pc, #552	; (adr r3, 8004090 <_Z12getPIDValuesv+0x2c0>)
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f7fc fb70 	bl	8000550 <__aeabi_dmul>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4610      	mov	r0, r2
 8003e76:	4619      	mov	r1, r3
 8003e78:	f7fc fe62 	bl	8000b40 <__aeabi_d2f>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	4a8b      	ldr	r2, [pc, #556]	; (80040ac <_Z12getPIDValuesv+0x2dc>)
 8003e80:	6013      	str	r3, [r2, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Pitch_PID_k[1] = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) * 0.02;    //NOTDONE use defines for values
 8003e82:	4b88      	ldr	r3, [pc, #544]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8003e84:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e88:	2b0a      	cmp	r3, #10
 8003e8a:	bfd4      	ite	le
 8003e8c:	2301      	movle	r3, #1
 8003e8e:	2300      	movgt	r3, #0
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4b84      	ldr	r3, [pc, #528]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8003e94:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e98:	f113 0f0a 	cmn.w	r3, #10
 8003e9c:	bfac      	ite	ge
 8003e9e:	2301      	movge	r3, #1
 8003ea0:	2300      	movlt	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d022      	beq.n	8003ef2 <_Z12getPIDValuesv+0x122>
 8003eac:	4b7d      	ldr	r3, [pc, #500]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8003eae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fc ff4e 	bl	8000d54 <__aeabi_i2f>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	497b      	ldr	r1, [pc, #492]	; (80040a8 <_Z12getPIDValuesv+0x2d8>)
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fd f851 	bl	8000f64 <__aeabi_fdiv>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fc fe8f 	bl	8000bec <__addsf3>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fc fae5 	bl	80004a0 <__aeabi_f2d>
 8003ed6:	a370      	add	r3, pc, #448	; (adr r3, 8004098 <_Z12getPIDValuesv+0x2c8>)
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f7fc fb38 	bl	8000550 <__aeabi_dmul>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	f7fc fe2a 	bl	8000b40 <__aeabi_d2f>
 8003eec:	4603      	mov	r3, r0
 8003eee:	4a6f      	ldr	r2, [pc, #444]	; (80040ac <_Z12getPIDValuesv+0x2dc>)
 8003ef0:	6053      	str	r3, [r2, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Pitch_PID_k[2] = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) * 0.08;    //NOTDONE use defines for values       
 8003ef2:	4b6c      	ldr	r3, [pc, #432]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8003ef4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ef8:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8003efc:	4293      	cmp	r3, r2
 8003efe:	bfb4      	ite	lt
 8003f00:	2301      	movlt	r3, #1
 8003f02:	2300      	movge	r3, #0
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	4b67      	ldr	r3, [pc, #412]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8003f08:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003f0c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003f10:	bfac      	ite	ge
 8003f12:	2301      	movge	r3, #1
 8003f14:	2300      	movlt	r3, #0
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	4013      	ands	r3, r2
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d022      	beq.n	8003f66 <_Z12getPIDValuesv+0x196>
 8003f20:	4b60      	ldr	r3, [pc, #384]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8003f22:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fc ff14 	bl	8000d54 <__aeabi_i2f>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	495e      	ldr	r1, [pc, #376]	; (80040a8 <_Z12getPIDValuesv+0x2d8>)
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fd f817 	bl	8000f64 <__aeabi_fdiv>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fc fe55 	bl	8000bec <__addsf3>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fc faab 	bl	80004a0 <__aeabi_f2d>
 8003f4a:	a351      	add	r3, pc, #324	; (adr r3, 8004090 <_Z12getPIDValuesv+0x2c0>)
 8003f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f50:	f7fc fafe 	bl	8000550 <__aeabi_dmul>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	f7fc fdf0 	bl	8000b40 <__aeabi_d2f>
 8003f60:	4603      	mov	r3, r0
 8003f62:	4a52      	ldr	r2, [pc, #328]	; (80040ac <_Z12getPIDValuesv+0x2dc>)
 8003f64:	6093      	str	r3, [r2, #8]
    }
    if ((SBUS_Channels[5] <= 10) & (SBUS_Channels[5] >= -10))
 8003f66:	4b4f      	ldr	r3, [pc, #316]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8003f68:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003f6c:	2b0a      	cmp	r3, #10
 8003f6e:	bfd4      	ite	le
 8003f70:	2301      	movle	r3, #1
 8003f72:	2300      	movgt	r3, #0
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	4b4b      	ldr	r3, [pc, #300]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8003f78:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003f7c:	f113 0f0a 	cmn.w	r3, #10
 8003f80:	bfac      	ite	ge
 8003f82:	2301      	movge	r3, #1
 8003f84:	2300      	movlt	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	4013      	ands	r3, r2
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80c1 	beq.w	8004114 <_Z12getPIDValuesv+0x344>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Roll_PID_k[0]  = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) * 0.08;    //NOTDONE use defines for values
 8003f92:	4b44      	ldr	r3, [pc, #272]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8003f94:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003f98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f9c:	bfd4      	ite	le
 8003f9e:	2301      	movle	r3, #1
 8003fa0:	2300      	movgt	r3, #0
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	4b3f      	ldr	r3, [pc, #252]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8003fa6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003faa:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003fae:	428b      	cmp	r3, r1
 8003fb0:	bfcc      	ite	gt
 8003fb2:	2301      	movgt	r3, #1
 8003fb4:	2300      	movle	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	4013      	ands	r3, r2
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d022      	beq.n	8004006 <_Z12getPIDValuesv+0x236>
 8003fc0:	4b38      	ldr	r3, [pc, #224]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8003fc2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fc fec4 	bl	8000d54 <__aeabi_i2f>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	4936      	ldr	r1, [pc, #216]	; (80040a8 <_Z12getPIDValuesv+0x2d8>)
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fc ffc7 	bl	8000f64 <__aeabi_fdiv>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fc fe05 	bl	8000bec <__addsf3>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fc fa5b 	bl	80004a0 <__aeabi_f2d>
 8003fea:	a329      	add	r3, pc, #164	; (adr r3, 8004090 <_Z12getPIDValuesv+0x2c0>)
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	f7fc faae 	bl	8000550 <__aeabi_dmul>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f7fc fda0 	bl	8000b40 <__aeabi_d2f>
 8004000:	4603      	mov	r3, r0
 8004002:	4a2b      	ldr	r2, [pc, #172]	; (80040b0 <_Z12getPIDValuesv+0x2e0>)
 8004004:	6013      	str	r3, [r2, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Roll_PID_k[1]  = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) * 0.02;    //NOTDONE use defines for values
 8004006:	4b27      	ldr	r3, [pc, #156]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8004008:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800400c:	2b0a      	cmp	r3, #10
 800400e:	bfd4      	ite	le
 8004010:	2301      	movle	r3, #1
 8004012:	2300      	movgt	r3, #0
 8004014:	b2da      	uxtb	r2, r3
 8004016:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8004018:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800401c:	f113 0f0a 	cmn.w	r3, #10
 8004020:	bfac      	ite	ge
 8004022:	2301      	movge	r3, #1
 8004024:	2300      	movlt	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	4013      	ands	r3, r2
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d022      	beq.n	8004076 <_Z12getPIDValuesv+0x2a6>
 8004030:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8004032:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fc fe8c 	bl	8000d54 <__aeabi_i2f>
 800403c:	4603      	mov	r3, r0
 800403e:	491a      	ldr	r1, [pc, #104]	; (80040a8 <_Z12getPIDValuesv+0x2d8>)
 8004040:	4618      	mov	r0, r3
 8004042:	f7fc ff8f 	bl	8000f64 <__aeabi_fdiv>
 8004046:	4603      	mov	r3, r0
 8004048:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800404c:	4618      	mov	r0, r3
 800404e:	f7fc fdcd 	bl	8000bec <__addsf3>
 8004052:	4603      	mov	r3, r0
 8004054:	4618      	mov	r0, r3
 8004056:	f7fc fa23 	bl	80004a0 <__aeabi_f2d>
 800405a:	a30f      	add	r3, pc, #60	; (adr r3, 8004098 <_Z12getPIDValuesv+0x2c8>)
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f7fc fa76 	bl	8000550 <__aeabi_dmul>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4610      	mov	r0, r2
 800406a:	4619      	mov	r1, r3
 800406c:	f7fc fd68 	bl	8000b40 <__aeabi_d2f>
 8004070:	4603      	mov	r3, r0
 8004072:	4a0f      	ldr	r2, [pc, #60]	; (80040b0 <_Z12getPIDValuesv+0x2e0>)
 8004074:	6053      	str	r3, [r2, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Roll_PID_k[2]  = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) * 0.08;    //NOTDONE use defines for values       
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <_Z12getPIDValuesv+0x2d4>)
 8004078:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800407c:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8004080:	4293      	cmp	r3, r2
 8004082:	bfb4      	ite	lt
 8004084:	2301      	movlt	r3, #1
 8004086:	2300      	movge	r3, #0
 8004088:	b2da      	uxtb	r2, r3
 800408a:	e013      	b.n	80040b4 <_Z12getPIDValuesv+0x2e4>
 800408c:	f3af 8000 	nop.w
 8004090:	47ae147b 	.word	0x47ae147b
 8004094:	3fb47ae1 	.word	0x3fb47ae1
 8004098:	47ae147b 	.word	0x47ae147b
 800409c:	3f947ae1 	.word	0x3f947ae1
 80040a0:	20000000 	.word	0x20000000
 80040a4:	200005f4 	.word	0x200005f4
 80040a8:	447a0000 	.word	0x447a0000
 80040ac:	20000004 	.word	0x20000004
 80040b0:	20000010 	.word	0x20000010
 80040b4:	4b82      	ldr	r3, [pc, #520]	; (80042c0 <_Z12getPIDValuesv+0x4f0>)
 80040b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80040ba:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80040be:	bfac      	ite	ge
 80040c0:	2301      	movge	r3, #1
 80040c2:	2300      	movlt	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	4013      	ands	r3, r2
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d022      	beq.n	8004114 <_Z12getPIDValuesv+0x344>
 80040ce:	4b7c      	ldr	r3, [pc, #496]	; (80042c0 <_Z12getPIDValuesv+0x4f0>)
 80040d0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fc fe3d 	bl	8000d54 <__aeabi_i2f>
 80040da:	4603      	mov	r3, r0
 80040dc:	4979      	ldr	r1, [pc, #484]	; (80042c4 <_Z12getPIDValuesv+0x4f4>)
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fc ff40 	bl	8000f64 <__aeabi_fdiv>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fc fd7e 	bl	8000bec <__addsf3>
 80040f0:	4603      	mov	r3, r0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fc f9d4 	bl	80004a0 <__aeabi_f2d>
 80040f8:	a369      	add	r3, pc, #420	; (adr r3, 80042a0 <_Z12getPIDValuesv+0x4d0>)
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	f7fc fa27 	bl	8000550 <__aeabi_dmul>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	f7fc fd19 	bl	8000b40 <__aeabi_d2f>
 800410e:	4603      	mov	r3, r0
 8004110:	4a6d      	ldr	r2, [pc, #436]	; (80042c8 <_Z12getPIDValuesv+0x4f8>)
 8004112:	6093      	str	r3, [r2, #8]
    }
    if ((SBUS_Channels[5] <= -990) & (SBUS_Channels[5] >= -1000))
 8004114:	4b6a      	ldr	r3, [pc, #424]	; (80042c0 <_Z12getPIDValuesv+0x4f0>)
 8004116:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800411a:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 800411e:	4293      	cmp	r3, r2
 8004120:	bfb4      	ite	lt
 8004122:	2301      	movlt	r3, #1
 8004124:	2300      	movge	r3, #0
 8004126:	b2da      	uxtb	r2, r3
 8004128:	4b65      	ldr	r3, [pc, #404]	; (80042c0 <_Z12getPIDValuesv+0x4f0>)
 800412a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800412e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004132:	bfac      	ite	ge
 8004134:	2301      	movge	r3, #1
 8004136:	2300      	movlt	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	4013      	ands	r3, r2
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 80ac 	beq.w	800429c <_Z12getPIDValuesv+0x4cc>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Yaw_PID_k[0]   = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) * 0.8;    //NOTDONE use defines for values
 8004144:	4b5e      	ldr	r3, [pc, #376]	; (80042c0 <_Z12getPIDValuesv+0x4f0>)
 8004146:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800414a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800414e:	bfd4      	ite	le
 8004150:	2301      	movle	r3, #1
 8004152:	2300      	movgt	r3, #0
 8004154:	b2da      	uxtb	r2, r3
 8004156:	4b5a      	ldr	r3, [pc, #360]	; (80042c0 <_Z12getPIDValuesv+0x4f0>)
 8004158:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800415c:	f240 31dd 	movw	r1, #989	; 0x3dd
 8004160:	428b      	cmp	r3, r1
 8004162:	bfcc      	ite	gt
 8004164:	2301      	movgt	r3, #1
 8004166:	2300      	movle	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	4013      	ands	r3, r2
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d022      	beq.n	80041b8 <_Z12getPIDValuesv+0x3e8>
 8004172:	4b53      	ldr	r3, [pc, #332]	; (80042c0 <_Z12getPIDValuesv+0x4f0>)
 8004174:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004178:	4618      	mov	r0, r3
 800417a:	f7fc fdeb 	bl	8000d54 <__aeabi_i2f>
 800417e:	4603      	mov	r3, r0
 8004180:	4950      	ldr	r1, [pc, #320]	; (80042c4 <_Z12getPIDValuesv+0x4f4>)
 8004182:	4618      	mov	r0, r3
 8004184:	f7fc feee 	bl	8000f64 <__aeabi_fdiv>
 8004188:	4603      	mov	r3, r0
 800418a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800418e:	4618      	mov	r0, r3
 8004190:	f7fc fd2c 	bl	8000bec <__addsf3>
 8004194:	4603      	mov	r3, r0
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc f982 	bl	80004a0 <__aeabi_f2d>
 800419c:	a342      	add	r3, pc, #264	; (adr r3, 80042a8 <_Z12getPIDValuesv+0x4d8>)
 800419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a2:	f7fc f9d5 	bl	8000550 <__aeabi_dmul>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	f7fc fcc7 	bl	8000b40 <__aeabi_d2f>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4a45      	ldr	r2, [pc, #276]	; (80042cc <_Z12getPIDValuesv+0x4fc>)
 80041b6:	6013      	str	r3, [r2, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Yaw_PID_k[1]   = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) * 0.1;    //NOTDONE use defines for values
 80041b8:	4b41      	ldr	r3, [pc, #260]	; (80042c0 <_Z12getPIDValuesv+0x4f0>)
 80041ba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80041be:	2b0a      	cmp	r3, #10
 80041c0:	bfd4      	ite	le
 80041c2:	2301      	movle	r3, #1
 80041c4:	2300      	movgt	r3, #0
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	4b3d      	ldr	r3, [pc, #244]	; (80042c0 <_Z12getPIDValuesv+0x4f0>)
 80041ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80041ce:	f113 0f0a 	cmn.w	r3, #10
 80041d2:	bfac      	ite	ge
 80041d4:	2301      	movge	r3, #1
 80041d6:	2300      	movlt	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	4013      	ands	r3, r2
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d022      	beq.n	8004228 <_Z12getPIDValuesv+0x458>
 80041e2:	4b37      	ldr	r3, [pc, #220]	; (80042c0 <_Z12getPIDValuesv+0x4f0>)
 80041e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fc fdb3 	bl	8000d54 <__aeabi_i2f>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4934      	ldr	r1, [pc, #208]	; (80042c4 <_Z12getPIDValuesv+0x4f4>)
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fc feb6 	bl	8000f64 <__aeabi_fdiv>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fc fcf4 	bl	8000bec <__addsf3>
 8004204:	4603      	mov	r3, r0
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc f94a 	bl	80004a0 <__aeabi_f2d>
 800420c:	a328      	add	r3, pc, #160	; (adr r3, 80042b0 <_Z12getPIDValuesv+0x4e0>)
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	f7fc f99d 	bl	8000550 <__aeabi_dmul>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	f7fc fc8f 	bl	8000b40 <__aeabi_d2f>
 8004222:	4603      	mov	r3, r0
 8004224:	4a29      	ldr	r2, [pc, #164]	; (80042cc <_Z12getPIDValuesv+0x4fc>)
 8004226:	6053      	str	r3, [r2, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Yaw_PID_k[2]   = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) * 3.2;    //NOTDONE use defines for values       
 8004228:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <_Z12getPIDValuesv+0x4f0>)
 800422a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800422e:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8004232:	4293      	cmp	r3, r2
 8004234:	bfb4      	ite	lt
 8004236:	2301      	movlt	r3, #1
 8004238:	2300      	movge	r3, #0
 800423a:	b2da      	uxtb	r2, r3
 800423c:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <_Z12getPIDValuesv+0x4f0>)
 800423e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004242:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004246:	bfac      	ite	ge
 8004248:	2301      	movge	r3, #1
 800424a:	2300      	movlt	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	4013      	ands	r3, r2
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d022      	beq.n	800429c <_Z12getPIDValuesv+0x4cc>
 8004256:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <_Z12getPIDValuesv+0x4f0>)
 8004258:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800425c:	4618      	mov	r0, r3
 800425e:	f7fc fd79 	bl	8000d54 <__aeabi_i2f>
 8004262:	4603      	mov	r3, r0
 8004264:	4917      	ldr	r1, [pc, #92]	; (80042c4 <_Z12getPIDValuesv+0x4f4>)
 8004266:	4618      	mov	r0, r3
 8004268:	f7fc fe7c 	bl	8000f64 <__aeabi_fdiv>
 800426c:	4603      	mov	r3, r0
 800426e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004272:	4618      	mov	r0, r3
 8004274:	f7fc fcba 	bl	8000bec <__addsf3>
 8004278:	4603      	mov	r3, r0
 800427a:	4618      	mov	r0, r3
 800427c:	f7fc f910 	bl	80004a0 <__aeabi_f2d>
 8004280:	a30d      	add	r3, pc, #52	; (adr r3, 80042b8 <_Z12getPIDValuesv+0x4e8>)
 8004282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004286:	f7fc f963 	bl	8000550 <__aeabi_dmul>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4610      	mov	r0, r2
 8004290:	4619      	mov	r1, r3
 8004292:	f7fc fc55 	bl	8000b40 <__aeabi_d2f>
 8004296:	4603      	mov	r3, r0
 8004298:	4a0c      	ldr	r2, [pc, #48]	; (80042cc <_Z12getPIDValuesv+0x4fc>)
 800429a:	6093      	str	r3, [r2, #8]
    }
  }
}
 800429c:	bf00      	nop
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	47ae147b 	.word	0x47ae147b
 80042a4:	3fb47ae1 	.word	0x3fb47ae1
 80042a8:	9999999a 	.word	0x9999999a
 80042ac:	3fe99999 	.word	0x3fe99999
 80042b0:	9999999a 	.word	0x9999999a
 80042b4:	3fb99999 	.word	0x3fb99999
 80042b8:	9999999a 	.word	0x9999999a
 80042bc:	40099999 	.word	0x40099999
 80042c0:	200005f4 	.word	0x200005f4
 80042c4:	447a0000 	.word	0x447a0000
 80042c8:	20000010 	.word	0x20000010
 80042cc:	2000001c 	.word	0x2000001c

080042d0 <_Z14getAngleOffsetv>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void getAngleOffset()
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  if (tuningMode == 2)
 80042d4:	4b54      	ldr	r3, [pc, #336]	; (8004428 <_Z14getAngleOffsetv+0x158>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	f040 809e 	bne.w	800441a <_Z14getAngleOffsetv+0x14a>
  {
    if ((SBUS_Channels[5] <= 1000) & (SBUS_Channels[5] >= 990))
 80042de:	4b53      	ldr	r3, [pc, #332]	; (800442c <_Z14getAngleOffsetv+0x15c>)
 80042e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80042e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042e8:	4b50      	ldr	r3, [pc, #320]	; (800442c <_Z14getAngleOffsetv+0x15c>)
 80042ea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80042ee:	f240 32dd 	movw	r2, #989	; 0x3dd
 80042f2:	4293      	cmp	r3, r2
    {
      //mainMotorMaxOffset = -139 + (((float)SBUS_Channels[7]) / 20);
    }
    if ((SBUS_Channels[5] <= 10) & (SBUS_Channels[5] >= -10))
 80042f4:	4b4d      	ldr	r3, [pc, #308]	; (800442c <_Z14getAngleOffsetv+0x15c>)
 80042f6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80042fa:	2b0a      	cmp	r3, #10
 80042fc:	bfd4      	ite	le
 80042fe:	2301      	movle	r3, #1
 8004300:	2300      	movgt	r3, #0
 8004302:	b2da      	uxtb	r2, r3
 8004304:	4b49      	ldr	r3, [pc, #292]	; (800442c <_Z14getAngleOffsetv+0x15c>)
 8004306:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800430a:	f113 0f0a 	cmn.w	r3, #10
 800430e:	bfac      	ite	ge
 8004310:	2301      	movge	r3, #1
 8004312:	2300      	movlt	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	4013      	ands	r3, r2
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d013      	beq.n	8004346 <_Z14getAngleOffsetv+0x76>
    {
      mainMotorStartOffset = -53 + (((float)SBUS_Channels[7]) / 50);
 800431e:	4b43      	ldr	r3, [pc, #268]	; (800442c <_Z14getAngleOffsetv+0x15c>)
 8004320:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004324:	4618      	mov	r0, r3
 8004326:	f7fc fd15 	bl	8000d54 <__aeabi_i2f>
 800432a:	4603      	mov	r3, r0
 800432c:	4940      	ldr	r1, [pc, #256]	; (8004430 <_Z14getAngleOffsetv+0x160>)
 800432e:	4618      	mov	r0, r3
 8004330:	f7fc fe18 	bl	8000f64 <__aeabi_fdiv>
 8004334:	4603      	mov	r3, r0
 8004336:	493f      	ldr	r1, [pc, #252]	; (8004434 <_Z14getAngleOffsetv+0x164>)
 8004338:	4618      	mov	r0, r3
 800433a:	f7fc fc55 	bl	8000be8 <__aeabi_fsub>
 800433e:	4603      	mov	r3, r0
 8004340:	461a      	mov	r2, r3
 8004342:	4b3d      	ldr	r3, [pc, #244]	; (8004438 <_Z14getAngleOffsetv+0x168>)
 8004344:	601a      	str	r2, [r3, #0]
    }
    if ((SBUS_Channels[5] <= -990) & (SBUS_Channels[5] >= -1000))
 8004346:	4b39      	ldr	r3, [pc, #228]	; (800442c <_Z14getAngleOffsetv+0x15c>)
 8004348:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800434c:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8004350:	4293      	cmp	r3, r2
 8004352:	bfb4      	ite	lt
 8004354:	2301      	movlt	r3, #1
 8004356:	2300      	movge	r3, #0
 8004358:	b2da      	uxtb	r2, r3
 800435a:	4b34      	ldr	r3, [pc, #208]	; (800442c <_Z14getAngleOffsetv+0x15c>)
 800435c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004360:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004364:	bfac      	ite	ge
 8004366:	2301      	movge	r3, #1
 8004368:	2300      	movlt	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	4013      	ands	r3, r2
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d052      	beq.n	800441a <_Z14getAngleOffsetv+0x14a>
    {
      mainMotorSkewOffset = (float)SBUS_Channels[7] / 25;
 8004374:	4b2d      	ldr	r3, [pc, #180]	; (800442c <_Z14getAngleOffsetv+0x15c>)
 8004376:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800437a:	4618      	mov	r0, r3
 800437c:	f7fc fcea 	bl	8000d54 <__aeabi_i2f>
 8004380:	4603      	mov	r3, r0
 8004382:	492e      	ldr	r1, [pc, #184]	; (800443c <_Z14getAngleOffsetv+0x16c>)
 8004384:	4618      	mov	r0, r3
 8004386:	f7fc fded 	bl	8000f64 <__aeabi_fdiv>
 800438a:	4603      	mov	r3, r0
 800438c:	461a      	mov	r2, r3
 800438e:	4b2c      	ldr	r3, [pc, #176]	; (8004440 <_Z14getAngleOffsetv+0x170>)
 8004390:	601a      	str	r2, [r3, #0]
      sin_SkewOffset = sin((mainMotorSkewOffset * M_PI) / 180);
 8004392:	4b2b      	ldr	r3, [pc, #172]	; (8004440 <_Z14getAngleOffsetv+0x170>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7fc f882 	bl	80004a0 <__aeabi_f2d>
 800439c:	a320      	add	r3, pc, #128	; (adr r3, 8004420 <_Z14getAngleOffsetv+0x150>)
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f7fc f8d5 	bl	8000550 <__aeabi_dmul>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4610      	mov	r0, r2
 80043ac:	4619      	mov	r1, r3
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	4b24      	ldr	r3, [pc, #144]	; (8004444 <_Z14getAngleOffsetv+0x174>)
 80043b4:	f7fc f9f6 	bl	80007a4 <__aeabi_ddiv>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	f00a fe76 	bl	800f0b0 <sin>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4610      	mov	r0, r2
 80043ca:	4619      	mov	r1, r3
 80043cc:	f7fc fbb8 	bl	8000b40 <__aeabi_d2f>
 80043d0:	4603      	mov	r3, r0
 80043d2:	4a1d      	ldr	r2, [pc, #116]	; (8004448 <_Z14getAngleOffsetv+0x178>)
 80043d4:	6013      	str	r3, [r2, #0]
      cos_SkewOffset = cos((mainMotorSkewOffset * M_PI) / 180);
 80043d6:	4b1a      	ldr	r3, [pc, #104]	; (8004440 <_Z14getAngleOffsetv+0x170>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fc f860 	bl	80004a0 <__aeabi_f2d>
 80043e0:	a30f      	add	r3, pc, #60	; (adr r3, 8004420 <_Z14getAngleOffsetv+0x150>)
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	f7fc f8b3 	bl	8000550 <__aeabi_dmul>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4610      	mov	r0, r2
 80043f0:	4619      	mov	r1, r3
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	4b13      	ldr	r3, [pc, #76]	; (8004444 <_Z14getAngleOffsetv+0x174>)
 80043f8:	f7fc f9d4 	bl	80007a4 <__aeabi_ddiv>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	f00a fe12 	bl	800f02c <cos>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4610      	mov	r0, r2
 800440e:	4619      	mov	r1, r3
 8004410:	f7fc fb96 	bl	8000b40 <__aeabi_d2f>
 8004414:	4603      	mov	r3, r0
 8004416:	4a0d      	ldr	r2, [pc, #52]	; (800444c <_Z14getAngleOffsetv+0x17c>)
 8004418:	6013      	str	r3, [r2, #0]
    }

  }
}
 800441a:	bf00      	nop
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	54442d18 	.word	0x54442d18
 8004424:	400921fb 	.word	0x400921fb
 8004428:	20000000 	.word	0x20000000
 800442c:	200005f4 	.word	0x200005f4
 8004430:	42480000 	.word	0x42480000
 8004434:	42540000 	.word	0x42540000
 8004438:	20000058 	.word	0x20000058
 800443c:	41c80000 	.word	0x41c80000
 8004440:	20000060 	.word	0x20000060
 8004444:	40668000 	.word	0x40668000
 8004448:	20000834 	.word	0x20000834
 800444c:	20000838 	.word	0x20000838

08004450 <_Z16switchTuningModev>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void switchTuningMode()
{
 8004450:	b598      	push	{r3, r4, r7, lr}
 8004452:	af00      	add	r7, sp, #0
  if ((buttonPressed == false) & (HAL_GPIO_ReadPin(ONBOARD_BUTTON_2_GPIO_Port, ONBOARD_BUTTON_2_Pin) == true))
 8004454:	4b25      	ldr	r3, [pc, #148]	; (80044ec <_Z16switchTuningModev+0x9c>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2dc      	uxtb	r4, r3
 8004462:	2102      	movs	r1, #2
 8004464:	4822      	ldr	r0, [pc, #136]	; (80044f0 <_Z16switchTuningModev+0xa0>)
 8004466:	f003 f861 	bl	800752c <HAL_GPIO_ReadPin>
 800446a:	4603      	mov	r3, r0
 800446c:	2b01      	cmp	r3, #1
 800446e:	bf0c      	ite	eq
 8004470:	2301      	moveq	r3, #1
 8004472:	2300      	movne	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	4023      	ands	r3, r4
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	bf14      	ite	ne
 800447e:	2301      	movne	r3, #1
 8004480:	2300      	moveq	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d011      	beq.n	80044ac <_Z16switchTuningModev+0x5c>
  {
    if (tuningMode == 1) tuningMode = 2;
 8004488:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <_Z16switchTuningModev+0xa4>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d103      	bne.n	8004498 <_Z16switchTuningModev+0x48>
 8004490:	4b18      	ldr	r3, [pc, #96]	; (80044f4 <_Z16switchTuningModev+0xa4>)
 8004492:	2202      	movs	r2, #2
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	e002      	b.n	800449e <_Z16switchTuningModev+0x4e>
    else tuningMode = 1;
 8004498:	4b16      	ldr	r3, [pc, #88]	; (80044f4 <_Z16switchTuningModev+0xa4>)
 800449a:	2201      	movs	r2, #1
 800449c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);
 800449e:	2120      	movs	r1, #32
 80044a0:	4813      	ldr	r0, [pc, #76]	; (80044f0 <_Z16switchTuningModev+0xa0>)
 80044a2:	f003 f872 	bl	800758a <HAL_GPIO_TogglePin>
    buttonPressed = true;
 80044a6:	4b11      	ldr	r3, [pc, #68]	; (80044ec <_Z16switchTuningModev+0x9c>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	701a      	strb	r2, [r3, #0]
  }
  if ((buttonPressed == true) & (HAL_GPIO_ReadPin(ONBOARD_BUTTON_2_GPIO_Port, ONBOARD_BUTTON_2_Pin) == false))
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <_Z16switchTuningModev+0x9c>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2dc      	uxtb	r4, r3
 80044ba:	2102      	movs	r1, #2
 80044bc:	480c      	ldr	r0, [pc, #48]	; (80044f0 <_Z16switchTuningModev+0xa0>)
 80044be:	f003 f835 	bl	800752c <HAL_GPIO_ReadPin>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf0c      	ite	eq
 80044c8:	2301      	moveq	r3, #1
 80044ca:	2300      	movne	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	4023      	ands	r3, r4
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bf14      	ite	ne
 80044d6:	2301      	movne	r3, #1
 80044d8:	2300      	moveq	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <_Z16switchTuningModev+0x96>
  {
    buttonPressed = false;
 80044e0:	4b02      	ldr	r3, [pc, #8]	; (80044ec <_Z16switchTuningModev+0x9c>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
  }
 80044e6:	bf00      	nop
 80044e8:	bd98      	pop	{r3, r4, r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000538 	.word	0x20000538
 80044f0:	40020000 	.word	0x40020000
 80044f4:	20000000 	.word	0x20000000

080044f8 <_Z19SBUS_postProcessingv>:
 * channels.
 * 
 * --Custom Method! //NOTDONE
 */
void SBUS_postProcessing()
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
  //       SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;   //transfer bit
  //     }
  //     bitNumber ++;
  //     bitInChannel ++;
  //   }
    for (size_t i = 0; i < SBUS_NumberOfBytes; i++)
 80044fe:	2300      	movs	r3, #0
 8004500:	607b      	str	r3, [r7, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b18      	cmp	r3, #24
 8004506:	d80c      	bhi.n	8004522 <_Z19SBUS_postProcessingv+0x2a>
    {
      SBUS_Bytes[i] = SBUS_RxBytes[i];
 8004508:	4a67      	ldr	r2, [pc, #412]	; (80046a8 <_Z19SBUS_postProcessingv+0x1b0>)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	7819      	ldrb	r1, [r3, #0]
 8004510:	4a66      	ldr	r2, [pc, #408]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4413      	add	r3, r2
 8004516:	460a      	mov	r2, r1
 8004518:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < SBUS_NumberOfBytes; i++)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3301      	adds	r3, #1
 800451e:	607b      	str	r3, [r7, #4]
 8004520:	e7ef      	b.n	8004502 <_Z19SBUS_postProcessingv+0xa>
    }

    SBUS_TempChannels[0]  = (((uint16_t)SBUS_Bytes[1]       | (uint16_t)SBUS_Bytes[2]  << 8) & 0x07FF);
 8004522:	4b62      	ldr	r3, [pc, #392]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 8004524:	785b      	ldrb	r3, [r3, #1]
 8004526:	b21a      	sxth	r2, r3
 8004528:	4b60      	ldr	r3, [pc, #384]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 800452a:	789b      	ldrb	r3, [r3, #2]
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	b21b      	sxth	r3, r3
 8004530:	4313      	orrs	r3, r2
 8004532:	b21b      	sxth	r3, r3
 8004534:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004538:	b21a      	sxth	r2, r3
 800453a:	4b5d      	ldr	r3, [pc, #372]	; (80046b0 <_Z19SBUS_postProcessingv+0x1b8>)
 800453c:	801a      	strh	r2, [r3, #0]
    SBUS_TempChannels[1]  = (((uint16_t)SBUS_Bytes[2]  >> 3 | (uint16_t)SBUS_Bytes[3]  << 5) & 0x07FF);
 800453e:	4b5b      	ldr	r3, [pc, #364]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 8004540:	789b      	ldrb	r3, [r3, #2]
 8004542:	10db      	asrs	r3, r3, #3
 8004544:	b21a      	sxth	r2, r3
 8004546:	4b59      	ldr	r3, [pc, #356]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 8004548:	78db      	ldrb	r3, [r3, #3]
 800454a:	015b      	lsls	r3, r3, #5
 800454c:	b21b      	sxth	r3, r3
 800454e:	4313      	orrs	r3, r2
 8004550:	b21b      	sxth	r3, r3
 8004552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004556:	b21a      	sxth	r2, r3
 8004558:	4b55      	ldr	r3, [pc, #340]	; (80046b0 <_Z19SBUS_postProcessingv+0x1b8>)
 800455a:	805a      	strh	r2, [r3, #2]
    SBUS_TempChannels[2]  = (((uint16_t)SBUS_Bytes[3]  >> 6 | (uint16_t)SBUS_Bytes[4]  << 2  | (uint16_t)SBUS_Bytes[5] << 10) & 0x07FF);
 800455c:	4b53      	ldr	r3, [pc, #332]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 800455e:	78db      	ldrb	r3, [r3, #3]
 8004560:	119b      	asrs	r3, r3, #6
 8004562:	b21a      	sxth	r2, r3
 8004564:	4b51      	ldr	r3, [pc, #324]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 8004566:	791b      	ldrb	r3, [r3, #4]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	b21b      	sxth	r3, r3
 800456c:	4313      	orrs	r3, r2
 800456e:	b21a      	sxth	r2, r3
 8004570:	4b4e      	ldr	r3, [pc, #312]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 8004572:	795b      	ldrb	r3, [r3, #5]
 8004574:	029b      	lsls	r3, r3, #10
 8004576:	b21b      	sxth	r3, r3
 8004578:	4313      	orrs	r3, r2
 800457a:	b21b      	sxth	r3, r3
 800457c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004580:	b21a      	sxth	r2, r3
 8004582:	4b4b      	ldr	r3, [pc, #300]	; (80046b0 <_Z19SBUS_postProcessingv+0x1b8>)
 8004584:	809a      	strh	r2, [r3, #4]
    SBUS_TempChannels[3]  = (((uint16_t)SBUS_Bytes[5]  >> 1 | (uint16_t)SBUS_Bytes[6]  << 7) & 0x07FF);
 8004586:	4b49      	ldr	r3, [pc, #292]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 8004588:	795b      	ldrb	r3, [r3, #5]
 800458a:	105b      	asrs	r3, r3, #1
 800458c:	b21a      	sxth	r2, r3
 800458e:	4b47      	ldr	r3, [pc, #284]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 8004590:	799b      	ldrb	r3, [r3, #6]
 8004592:	01db      	lsls	r3, r3, #7
 8004594:	b21b      	sxth	r3, r3
 8004596:	4313      	orrs	r3, r2
 8004598:	b21b      	sxth	r3, r3
 800459a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800459e:	b21a      	sxth	r2, r3
 80045a0:	4b43      	ldr	r3, [pc, #268]	; (80046b0 <_Z19SBUS_postProcessingv+0x1b8>)
 80045a2:	80da      	strh	r2, [r3, #6]
    SBUS_TempChannels[4]  = (((uint16_t)SBUS_Bytes[6]  >> 4 | (uint16_t)SBUS_Bytes[7]  << 4) & 0x07FF);
 80045a4:	4b41      	ldr	r3, [pc, #260]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 80045a6:	799b      	ldrb	r3, [r3, #6]
 80045a8:	111b      	asrs	r3, r3, #4
 80045aa:	b21a      	sxth	r2, r3
 80045ac:	4b3f      	ldr	r3, [pc, #252]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 80045ae:	79db      	ldrb	r3, [r3, #7]
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	b21b      	sxth	r3, r3
 80045b4:	4313      	orrs	r3, r2
 80045b6:	b21b      	sxth	r3, r3
 80045b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045bc:	b21a      	sxth	r2, r3
 80045be:	4b3c      	ldr	r3, [pc, #240]	; (80046b0 <_Z19SBUS_postProcessingv+0x1b8>)
 80045c0:	811a      	strh	r2, [r3, #8]
    SBUS_TempChannels[5]  = (((uint16_t)SBUS_Bytes[7]  >> 7 | (uint16_t)SBUS_Bytes[8]  << 1  | (uint16_t)SBUS_Bytes[9] << 9) & 0x07FF);
 80045c2:	4b3a      	ldr	r3, [pc, #232]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 80045c4:	79db      	ldrb	r3, [r3, #7]
 80045c6:	11db      	asrs	r3, r3, #7
 80045c8:	b21a      	sxth	r2, r3
 80045ca:	4b38      	ldr	r3, [pc, #224]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 80045cc:	7a1b      	ldrb	r3, [r3, #8]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	b21b      	sxth	r3, r3
 80045d2:	4313      	orrs	r3, r2
 80045d4:	b21a      	sxth	r2, r3
 80045d6:	4b35      	ldr	r3, [pc, #212]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 80045d8:	7a5b      	ldrb	r3, [r3, #9]
 80045da:	025b      	lsls	r3, r3, #9
 80045dc:	b21b      	sxth	r3, r3
 80045de:	4313      	orrs	r3, r2
 80045e0:	b21b      	sxth	r3, r3
 80045e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045e6:	b21a      	sxth	r2, r3
 80045e8:	4b31      	ldr	r3, [pc, #196]	; (80046b0 <_Z19SBUS_postProcessingv+0x1b8>)
 80045ea:	815a      	strh	r2, [r3, #10]
    SBUS_TempChannels[6]  = (((uint16_t)SBUS_Bytes[9]  >> 2 | (uint16_t)SBUS_Bytes[10] << 6) & 0x07FF);
 80045ec:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 80045ee:	7a5b      	ldrb	r3, [r3, #9]
 80045f0:	109b      	asrs	r3, r3, #2
 80045f2:	b21a      	sxth	r2, r3
 80045f4:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 80045f6:	7a9b      	ldrb	r3, [r3, #10]
 80045f8:	019b      	lsls	r3, r3, #6
 80045fa:	b21b      	sxth	r3, r3
 80045fc:	4313      	orrs	r3, r2
 80045fe:	b21b      	sxth	r3, r3
 8004600:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004604:	b21a      	sxth	r2, r3
 8004606:	4b2a      	ldr	r3, [pc, #168]	; (80046b0 <_Z19SBUS_postProcessingv+0x1b8>)
 8004608:	819a      	strh	r2, [r3, #12]
    SBUS_TempChannels[7]  = (((uint16_t)SBUS_Bytes[10] >> 5 | (uint16_t)SBUS_Bytes[11] << 3) & 0x07FF);
 800460a:	4b28      	ldr	r3, [pc, #160]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 800460c:	7a9b      	ldrb	r3, [r3, #10]
 800460e:	115b      	asrs	r3, r3, #5
 8004610:	b21a      	sxth	r2, r3
 8004612:	4b26      	ldr	r3, [pc, #152]	; (80046ac <_Z19SBUS_postProcessingv+0x1b4>)
 8004614:	7adb      	ldrb	r3, [r3, #11]
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	b21b      	sxth	r3, r3
 800461a:	4313      	orrs	r3, r2
 800461c:	b21b      	sxth	r3, r3
 800461e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004622:	b21a      	sxth	r2, r3
 8004624:	4b22      	ldr	r3, [pc, #136]	; (80046b0 <_Z19SBUS_postProcessingv+0x1b8>)
 8004626:	81da      	strh	r2, [r3, #14]

    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8004628:	2300      	movs	r3, #0
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2b07      	cmp	r3, #7
 8004630:	d828      	bhi.n	8004684 <_Z19SBUS_postProcessingv+0x18c>
    {
      SBUS_Channels[i] = (((float)SBUS_TempChannels[i] - SBUS_rawValueCenter) * (float)SBUS_ConversionRation);            //map from ,  to -1000, 1000 and transfer channel value
 8004632:	4a1f      	ldr	r2, [pc, #124]	; (80046b0 <_Z19SBUS_postProcessingv+0x1b8>)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fc fb8a 	bl	8000d54 <__aeabi_i2f>
 8004640:	4603      	mov	r3, r0
 8004642:	4618      	mov	r0, r3
 8004644:	f7fb ff2c 	bl	80004a0 <__aeabi_f2d>
 8004648:	a313      	add	r3, pc, #76	; (adr r3, 8004698 <_Z19SBUS_postProcessingv+0x1a0>)
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f7fb fdc7 	bl	80001e0 <__aeabi_dsub>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4610      	mov	r0, r2
 8004658:	4619      	mov	r1, r3
 800465a:	a311      	add	r3, pc, #68	; (adr r3, 80046a0 <_Z19SBUS_postProcessingv+0x1a8>)
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f7fb ff76 	bl	8000550 <__aeabi_dmul>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4610      	mov	r0, r2
 800466a:	4619      	mov	r1, r3
 800466c:	f7fc fa20 	bl	8000ab0 <__aeabi_d2iz>
 8004670:	4603      	mov	r3, r0
 8004672:	b219      	sxth	r1, r3
 8004674:	4a0f      	ldr	r2, [pc, #60]	; (80046b4 <_Z19SBUS_postProcessingv+0x1bc>)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	3301      	adds	r3, #1
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	e7d3      	b.n	800462c <_Z19SBUS_postProcessingv+0x134>
    }
    
  // }
  // }
  SBUSNewPackage = false;                                                                                                 //reset flag
 8004684:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <_Z19SBUS_postProcessingv+0x1c0>)
 8004686:	2200      	movs	r2, #0
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	f3af 8000 	nop.w
 8004698:	00000000 	.word	0x00000000
 800469c:	408f0a00 	.word	0x408f0a00
 80046a0:	c0000000 	.word	0xc0000000
 80046a4:	3ff37e8e 	.word	0x3ff37e8e
 80046a8:	200005ac 	.word	0x200005ac
 80046ac:	200005c8 	.word	0x200005c8
 80046b0:	200005e4 	.word	0x200005e4
 80046b4:	200005f4 	.word	0x200005f4
 80046b8:	20000604 	.word	0x20000604

080046bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80046c0:	f001 fd48 	bl	8006154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80046c4:	f000 f83a 	bl	800473c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80046c8:	f000 fa48 	bl	8004b5c <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80046cc:	f000 f888 	bl	80047e0 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 80046d0:	f000 f8c4 	bl	800485c <MX_I2C1_Init>
  MX_TIM3_Init();
 80046d4:	f000 f8f6 	bl	80048c4 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80046d8:	f000 f95c 	bl	8004994 <_ZL12MX_TIM4_Initv>
  MX_TIM11_Init();
 80046dc:	f000 f9c2 	bl	8004a64 <_ZL13MX_TIM11_Initv>
  MX_USB_DEVICE_Init();
 80046e0:	f009 ffa0 	bl	800e624 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80046e4:	f000 fa1a 	bl	8004b1c <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 80046e8:	f000 f9e4 	bl	8004ab4 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim11);    //start TIM11
 80046ec:	480e      	ldr	r0, [pc, #56]	; (8004728 <main+0x6c>)
 80046ee:	f005 fd59 	bl	800a1a4 <HAL_TIM_Base_Start>
  MPU6050_init();
 80046f2:	f7fd fc2b 	bl	8001f4c <_Z12MPU6050_initv>
  PPM_init();
 80046f6:	f000 fe75 	bl	80053e4 <_Z8PPM_initv>
  HAL_UART_Receive_DMA(&huart1, SBUS_RxBytes, SBUS_NumberOfBytes);
 80046fa:	2219      	movs	r2, #25
 80046fc:	490b      	ldr	r1, [pc, #44]	; (800472c <main+0x70>)
 80046fe:	480c      	ldr	r0, [pc, #48]	; (8004730 <main+0x74>)
 8004700:	f006 fb2f 	bl	800ad62 <HAL_UART_Receive_DMA>
  while (SBUS_Bytes[0] != 0x0F)     //only continue if the heli is connected to the remote
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <main+0x78>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b0f      	cmp	r3, #15
 800470a:	d006      	beq.n	800471a <main+0x5e>
  {
    if (SBUSNewPackage == true) SBUS_postProcessing();
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <main+0x7c>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d1f7      	bne.n	8004704 <main+0x48>
 8004714:	f7ff fef0 	bl	80044f8 <_Z19SBUS_postProcessingv>
  while (SBUS_Bytes[0] != 0x0F)     //only continue if the heli is connected to the remote
 8004718:	e7f4      	b.n	8004704 <main+0x48>
  }
  ESCCalibration();
 800471a:	f000 fe71 	bl	8005400 <_Z14ESCCalibrationv>
  MPU6050_calibration();
 800471e:	f7fd fc73 	bl	8002008 <_Z19MPU6050_calibrationv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 8004722:	f001 f817 	bl	8005754 <_Z4loopv>
 8004726:	e7fc      	b.n	8004722 <main+0x66>
 8004728:	20000734 	.word	0x20000734
 800472c:	200005ac 	.word	0x200005ac
 8004730:	2000077c 	.word	0x2000077c
 8004734:	200005c8 	.word	0x200005c8
 8004738:	20000604 	.word	0x20000604

0800473c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b092      	sub	sp, #72	; 0x48
 8004740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004742:	f107 0318 	add.w	r3, r7, #24
 8004746:	2230      	movs	r2, #48	; 0x30
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f00c fdfa 	bl	8011344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004750:	1d3b      	adds	r3, r7, #4
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	609a      	str	r2, [r3, #8]
 800475a:	60da      	str	r2, [r3, #12]
 800475c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800475e:	2301      	movs	r3, #1
 8004760:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004762:	2301      	movs	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004766:	2302      	movs	r3, #2
 8004768:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800476a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800476e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8004770:	230d      	movs	r3, #13
 8004772:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8004774:	23c3      	movs	r3, #195	; 0xc3
 8004776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004778:	2302      	movs	r3, #2
 800477a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800477c:	2305      	movs	r3, #5
 800477e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004780:	f107 0318 	add.w	r3, r7, #24
 8004784:	4618      	mov	r0, r3
 8004786:	f005 f82d 	bl	80097e4 <HAL_RCC_OscConfig>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf14      	ite	ne
 8004790:	2301      	movne	r3, #1
 8004792:	2300      	moveq	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800479a:	f000 fa97 	bl	8004ccc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800479e:	230f      	movs	r3, #15
 80047a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047a2:	2302      	movs	r3, #2
 80047a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80047aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80047ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80047b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80047b6:	1d3b      	adds	r3, r7, #4
 80047b8:	2103      	movs	r1, #3
 80047ba:	4618      	mov	r0, r3
 80047bc:	f005 fa62 	bl	8009c84 <HAL_RCC_ClockConfig>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 80047d0:	f000 fa7c 	bl	8004ccc <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80047d4:	f005 fb42 	bl	8009e5c <HAL_RCC_EnableCSS>
}
 80047d8:	bf00      	nop
 80047da:	3748      	adds	r7, #72	; 0x48
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80047e4:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <_ZL12MX_ADC1_Initv+0x70>)
 80047e6:	4a1b      	ldr	r2, [pc, #108]	; (8004854 <_ZL12MX_ADC1_Initv+0x74>)
 80047e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80047ea:	4b19      	ldr	r3, [pc, #100]	; (8004850 <_ZL12MX_ADC1_Initv+0x70>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80047f0:	4b17      	ldr	r3, [pc, #92]	; (8004850 <_ZL12MX_ADC1_Initv+0x70>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80047f6:	4b16      	ldr	r3, [pc, #88]	; (8004850 <_ZL12MX_ADC1_Initv+0x70>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80047fc:	4b14      	ldr	r3, [pc, #80]	; (8004850 <_ZL12MX_ADC1_Initv+0x70>)
 80047fe:	2201      	movs	r2, #1
 8004800:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004802:	4b13      	ldr	r3, [pc, #76]	; (8004850 <_ZL12MX_ADC1_Initv+0x70>)
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800480a:	4b11      	ldr	r3, [pc, #68]	; (8004850 <_ZL12MX_ADC1_Initv+0x70>)
 800480c:	2200      	movs	r2, #0
 800480e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <_ZL12MX_ADC1_Initv+0x70>)
 8004812:	4a11      	ldr	r2, [pc, #68]	; (8004858 <_ZL12MX_ADC1_Initv+0x78>)
 8004814:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004816:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <_ZL12MX_ADC1_Initv+0x70>)
 8004818:	2200      	movs	r2, #0
 800481a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <_ZL12MX_ADC1_Initv+0x70>)
 800481e:	2201      	movs	r2, #1
 8004820:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004822:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <_ZL12MX_ADC1_Initv+0x70>)
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800482a:	4b09      	ldr	r3, [pc, #36]	; (8004850 <_ZL12MX_ADC1_Initv+0x70>)
 800482c:	2201      	movs	r2, #1
 800482e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004830:	4807      	ldr	r0, [pc, #28]	; (8004850 <_ZL12MX_ADC1_Initv+0x70>)
 8004832:	f001 fd21 	bl	8006278 <HAL_ADC_Init>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf14      	ite	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2300      	moveq	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <_ZL12MX_ADC1_Initv+0x6a>
  {
    Error_Handler();
 8004846:	f000 fa41 	bl	8004ccc <Error_Handler>
  //}
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000608 	.word	0x20000608
 8004854:	40012000 	.word	0x40012000
 8004858:	0f000001 	.word	0x0f000001

0800485c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004860:	4b15      	ldr	r3, [pc, #84]	; (80048b8 <MX_I2C1_Init+0x5c>)
 8004862:	4a16      	ldr	r2, [pc, #88]	; (80048bc <MX_I2C1_Init+0x60>)
 8004864:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004866:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <MX_I2C1_Init+0x5c>)
 8004868:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <MX_I2C1_Init+0x64>)
 800486a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800486c:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <MX_I2C1_Init+0x5c>)
 800486e:	2200      	movs	r2, #0
 8004870:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004872:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <MX_I2C1_Init+0x5c>)
 8004874:	2200      	movs	r2, #0
 8004876:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004878:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <MX_I2C1_Init+0x5c>)
 800487a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800487e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004880:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <MX_I2C1_Init+0x5c>)
 8004882:	2200      	movs	r2, #0
 8004884:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004886:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <MX_I2C1_Init+0x5c>)
 8004888:	2200      	movs	r2, #0
 800488a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800488c:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <MX_I2C1_Init+0x5c>)
 800488e:	2200      	movs	r2, #0
 8004890:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004892:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <MX_I2C1_Init+0x5c>)
 8004894:	2200      	movs	r2, #0
 8004896:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004898:	4807      	ldr	r0, [pc, #28]	; (80048b8 <MX_I2C1_Init+0x5c>)
 800489a:	f002 fe8f 	bl	80075bc <HAL_I2C_Init>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bf14      	ite	ne
 80048a4:	2301      	movne	r3, #1
 80048a6:	2300      	moveq	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <MX_I2C1_Init+0x56>
  {
    Error_Handler();
 80048ae:	f000 fa0d 	bl	8004ccc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20000650 	.word	0x20000650
 80048bc:	40005400 	.word	0x40005400
 80048c0:	00061a80 	.word	0x00061a80

080048c4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	; 0x28
 80048c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048ca:	f107 0320 	add.w	r3, r7, #32
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048d4:	1d3b      	adds	r3, r7, #4
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	605a      	str	r2, [r3, #4]
 80048dc:	609a      	str	r2, [r3, #8]
 80048de:	60da      	str	r2, [r3, #12]
 80048e0:	611a      	str	r2, [r3, #16]
 80048e2:	615a      	str	r2, [r3, #20]
 80048e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80048e6:	4b29      	ldr	r3, [pc, #164]	; (800498c <_ZL12MX_TIM3_Initv+0xc8>)
 80048e8:	4a29      	ldr	r2, [pc, #164]	; (8004990 <_ZL12MX_TIM3_Initv+0xcc>)
 80048ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60 - 1;
 80048ec:	4b27      	ldr	r3, [pc, #156]	; (800498c <_ZL12MX_TIM3_Initv+0xc8>)
 80048ee:	223b      	movs	r2, #59	; 0x3b
 80048f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f2:	4b26      	ldr	r3, [pc, #152]	; (800498c <_ZL12MX_TIM3_Initv+0xc8>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000 - 1;
 80048f8:	4b24      	ldr	r3, [pc, #144]	; (800498c <_ZL12MX_TIM3_Initv+0xc8>)
 80048fa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80048fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004900:	4b22      	ldr	r3, [pc, #136]	; (800498c <_ZL12MX_TIM3_Initv+0xc8>)
 8004902:	2200      	movs	r2, #0
 8004904:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004906:	4b21      	ldr	r3, [pc, #132]	; (800498c <_ZL12MX_TIM3_Initv+0xc8>)
 8004908:	2200      	movs	r2, #0
 800490a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800490c:	481f      	ldr	r0, [pc, #124]	; (800498c <_ZL12MX_TIM3_Initv+0xc8>)
 800490e:	f005 fd1d 	bl	800a34c <HAL_TIM_PWM_Init>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf14      	ite	ne
 8004918:	2301      	movne	r3, #1
 800491a:	2300      	moveq	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8004922:	f000 f9d3 	bl	8004ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004926:	2300      	movs	r3, #0
 8004928:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800492a:	2300      	movs	r3, #0
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800492e:	f107 0320 	add.w	r3, r7, #32
 8004932:	4619      	mov	r1, r3
 8004934:	4815      	ldr	r0, [pc, #84]	; (800498c <_ZL12MX_TIM3_Initv+0xc8>)
 8004936:	f006 f94d 	bl	800abd4 <HAL_TIMEx_MasterConfigSynchronization>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 800494a:	f000 f9bf 	bl	8004ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800494e:	2360      	movs	r3, #96	; 0x60
 8004950:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004952:	2300      	movs	r3, #0
 8004954:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800495e:	1d3b      	adds	r3, r7, #4
 8004960:	2200      	movs	r2, #0
 8004962:	4619      	mov	r1, r3
 8004964:	4809      	ldr	r0, [pc, #36]	; (800498c <_ZL12MX_TIM3_Initv+0xc8>)
 8004966:	f005 fe09 	bl	800a57c <HAL_TIM_PWM_ConfigChannel>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf14      	ite	ne
 8004970:	2301      	movne	r3, #1
 8004972:	2300      	moveq	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 800497a:	f000 f9a7 	bl	8004ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800497e:	4803      	ldr	r0, [pc, #12]	; (800498c <_ZL12MX_TIM3_Initv+0xc8>)
 8004980:	f001 f9aa 	bl	8005cd8 <HAL_TIM_MspPostInit>

}
 8004984:	bf00      	nop
 8004986:	3728      	adds	r7, #40	; 0x28
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	200006a4 	.word	0x200006a4
 8004990:	40000400 	.word	0x40000400

08004994 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	; 0x28
 8004998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800499a:	f107 0320 	add.w	r3, r7, #32
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049a4:	1d3b      	adds	r3, r7, #4
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	605a      	str	r2, [r3, #4]
 80049ac:	609a      	str	r2, [r3, #8]
 80049ae:	60da      	str	r2, [r3, #12]
 80049b0:	611a      	str	r2, [r3, #16]
 80049b2:	615a      	str	r2, [r3, #20]
 80049b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80049b6:	4b29      	ldr	r3, [pc, #164]	; (8004a5c <_ZL12MX_TIM4_Initv+0xc8>)
 80049b8:	4a29      	ldr	r2, [pc, #164]	; (8004a60 <_ZL12MX_TIM4_Initv+0xcc>)
 80049ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60 - 1;
 80049bc:	4b27      	ldr	r3, [pc, #156]	; (8004a5c <_ZL12MX_TIM4_Initv+0xc8>)
 80049be:	223b      	movs	r2, #59	; 0x3b
 80049c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049c2:	4b26      	ldr	r3, [pc, #152]	; (8004a5c <_ZL12MX_TIM4_Initv+0xc8>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2500 -1;
 80049c8:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <_ZL12MX_TIM4_Initv+0xc8>)
 80049ca:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80049ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049d0:	4b22      	ldr	r3, [pc, #136]	; (8004a5c <_ZL12MX_TIM4_Initv+0xc8>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049d6:	4b21      	ldr	r3, [pc, #132]	; (8004a5c <_ZL12MX_TIM4_Initv+0xc8>)
 80049d8:	2200      	movs	r2, #0
 80049da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80049dc:	481f      	ldr	r0, [pc, #124]	; (8004a5c <_ZL12MX_TIM4_Initv+0xc8>)
 80049de:	f005 fcb5 	bl	800a34c <HAL_TIM_PWM_Init>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bf14      	ite	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	2300      	moveq	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 80049f2:	f000 f96b 	bl	8004ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049f6:	2300      	movs	r3, #0
 80049f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049fa:	2300      	movs	r3, #0
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80049fe:	f107 0320 	add.w	r3, r7, #32
 8004a02:	4619      	mov	r1, r3
 8004a04:	4815      	ldr	r0, [pc, #84]	; (8004a5c <_ZL12MX_TIM4_Initv+0xc8>)
 8004a06:	f006 f8e5 	bl	800abd4 <HAL_TIMEx_MasterConfigSynchronization>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 8004a1a:	f000 f957 	bl	8004ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a1e:	2360      	movs	r3, #96	; 0x60
 8004a20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a2e:	1d3b      	adds	r3, r7, #4
 8004a30:	2200      	movs	r2, #0
 8004a32:	4619      	mov	r1, r3
 8004a34:	4809      	ldr	r0, [pc, #36]	; (8004a5c <_ZL12MX_TIM4_Initv+0xc8>)
 8004a36:	f005 fda1 	bl	800a57c <HAL_TIM_PWM_ConfigChannel>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	bf14      	ite	ne
 8004a40:	2301      	movne	r3, #1
 8004a42:	2300      	moveq	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 8004a4a:	f000 f93f 	bl	8004ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004a4e:	4803      	ldr	r0, [pc, #12]	; (8004a5c <_ZL12MX_TIM4_Initv+0xc8>)
 8004a50:	f001 f942 	bl	8005cd8 <HAL_TIM_MspPostInit>

}
 8004a54:	bf00      	nop
 8004a56:	3728      	adds	r7, #40	; 0x28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	200006ec 	.word	0x200006ec
 8004a60:	40000800 	.word	0x40000800

08004a64 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004a68:	4b10      	ldr	r3, [pc, #64]	; (8004aac <_ZL13MX_TIM11_Initv+0x48>)
 8004a6a:	4a11      	ldr	r2, [pc, #68]	; (8004ab0 <_ZL13MX_TIM11_Initv+0x4c>)
 8004a6c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 120 - 1;
 8004a6e:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <_ZL13MX_TIM11_Initv+0x48>)
 8004a70:	2277      	movs	r2, #119	; 0x77
 8004a72:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a74:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <_ZL13MX_TIM11_Initv+0x48>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8004a7a:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <_ZL13MX_TIM11_Initv+0x48>)
 8004a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a80:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a82:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <_ZL13MX_TIM11_Initv+0x48>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a88:	4b08      	ldr	r3, [pc, #32]	; (8004aac <_ZL13MX_TIM11_Initv+0x48>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004a8e:	4807      	ldr	r0, [pc, #28]	; (8004aac <_ZL13MX_TIM11_Initv+0x48>)
 8004a90:	f005 fb38 	bl	800a104 <HAL_TIM_Base_Init>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	bf14      	ite	ne
 8004a9a:	2301      	movne	r3, #1
 8004a9c:	2300      	moveq	r3, #0
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8004aa4:	f000 f912 	bl	8004ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004aa8:	bf00      	nop
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20000734 	.word	0x20000734
 8004ab0:	40014800 	.word	0x40014800

08004ab4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004ab8:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8004aba:	4a16      	ldr	r2, [pc, #88]	; (8004b14 <_ZL19MX_USART1_UART_Initv+0x60>)
 8004abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8004abe:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8004ac0:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <_ZL19MX_USART1_UART_Initv+0x64>)
 8004ac2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8004ac4:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8004ac6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8004acc:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8004ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ad2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8004ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004adc:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8004ade:	220c      	movs	r2, #12
 8004ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8004ae8:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8004aea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004aee:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004af0:	4807      	ldr	r0, [pc, #28]	; (8004b10 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8004af2:	f006 f8e9 	bl	800acc8 <HAL_UART_Init>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf14      	ite	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	2300      	moveq	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <_ZL19MX_USART1_UART_Initv+0x56>
  {
    Error_Handler();
 8004b06:	f000 f8e1 	bl	8004ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004b0a:	bf00      	nop
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	2000077c 	.word	0x2000077c
 8004b14:	40011000 	.word	0x40011000
 8004b18:	000186a0 	.word	0x000186a0

08004b1c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004b22:	2300      	movs	r3, #0
 8004b24:	607b      	str	r3, [r7, #4]
 8004b26:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <_ZL11MX_DMA_Initv+0x3c>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	4a0b      	ldr	r2, [pc, #44]	; (8004b58 <_ZL11MX_DMA_Initv+0x3c>)
 8004b2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b30:	6313      	str	r3, [r2, #48]	; 0x30
 8004b32:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <_ZL11MX_DMA_Initv+0x3c>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b3a:	607b      	str	r3, [r7, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2100      	movs	r1, #0
 8004b42:	203a      	movs	r0, #58	; 0x3a
 8004b44:	f001 ff11 	bl	800696a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004b48:	203a      	movs	r0, #58	; 0x3a
 8004b4a:	f001 ff2a 	bl	80069a2 <HAL_NVIC_EnableIRQ>

}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800

08004b5c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08a      	sub	sp, #40	; 0x28
 8004b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b62:	f107 0314 	add.w	r3, r7, #20
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	605a      	str	r2, [r3, #4]
 8004b6c:	609a      	str	r2, [r3, #8]
 8004b6e:	60da      	str	r2, [r3, #12]
 8004b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	4b3e      	ldr	r3, [pc, #248]	; (8004c70 <_ZL12MX_GPIO_Initv+0x114>)
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	4a3d      	ldr	r2, [pc, #244]	; (8004c70 <_ZL12MX_GPIO_Initv+0x114>)
 8004b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b80:	6313      	str	r3, [r2, #48]	; 0x30
 8004b82:	4b3b      	ldr	r3, [pc, #236]	; (8004c70 <_ZL12MX_GPIO_Initv+0x114>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	4b37      	ldr	r3, [pc, #220]	; (8004c70 <_ZL12MX_GPIO_Initv+0x114>)
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	4a36      	ldr	r2, [pc, #216]	; (8004c70 <_ZL12MX_GPIO_Initv+0x114>)
 8004b98:	f043 0304 	orr.w	r3, r3, #4
 8004b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b9e:	4b34      	ldr	r3, [pc, #208]	; (8004c70 <_ZL12MX_GPIO_Initv+0x114>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	4b30      	ldr	r3, [pc, #192]	; (8004c70 <_ZL12MX_GPIO_Initv+0x114>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	4a2f      	ldr	r2, [pc, #188]	; (8004c70 <_ZL12MX_GPIO_Initv+0x114>)
 8004bb4:	f043 0301 	orr.w	r3, r3, #1
 8004bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bba:	4b2d      	ldr	r3, [pc, #180]	; (8004c70 <_ZL12MX_GPIO_Initv+0x114>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	60bb      	str	r3, [r7, #8]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	4b29      	ldr	r3, [pc, #164]	; (8004c70 <_ZL12MX_GPIO_Initv+0x114>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	4a28      	ldr	r2, [pc, #160]	; (8004c70 <_ZL12MX_GPIO_Initv+0x114>)
 8004bd0:	f043 0302 	orr.w	r3, r3, #2
 8004bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd6:	4b26      	ldr	r3, [pc, #152]	; (8004c70 <_ZL12MX_GPIO_Initv+0x114>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	607b      	str	r3, [r7, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 8004be2:	2200      	movs	r2, #0
 8004be4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8004be8:	4822      	ldr	r0, [pc, #136]	; (8004c74 <_ZL12MX_GPIO_Initv+0x118>)
 8004bea:	f002 fcb6 	bl	800755a <HAL_GPIO_WritePin>
                          |ONBOARD_WRITE_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_RESET);
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bf4:	4820      	ldr	r0, [pc, #128]	; (8004c78 <_ZL12MX_GPIO_Initv+0x11c>)
 8004bf6:	f002 fcb0 	bl	800755a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_READ_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_3_Pin;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_3_GPIO_Port, &GPIO_InitStruct);
 8004c06:	f107 0314 	add.w	r3, r7, #20
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	481a      	ldr	r0, [pc, #104]	; (8004c78 <_ZL12MX_GPIO_Initv+0x11c>)
 8004c0e:	f002 faef 	bl	80071f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_BUTTON_1_Pin ONBOARD_BUTTON_2_Pin ONBOARD_BUTTON_3_Pin ONBOARD_BUTTON_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_BUTTON_1_Pin|ONBOARD_BUTTON_2_Pin|ONBOARD_BUTTON_3_Pin|ONBOARD_BUTTON_4_Pin;
 8004c12:	230f      	movs	r3, #15
 8004c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c1e:	f107 0314 	add.w	r3, r7, #20
 8004c22:	4619      	mov	r1, r3
 8004c24:	4813      	ldr	r0, [pc, #76]	; (8004c74 <_ZL12MX_GPIO_Initv+0x118>)
 8004c26:	f002 fae3 	bl	80071f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_LED_1_Pin ONBOARD_LED_2_Pin ONBOARD_LED_3_Pin ONBOARD_LED_4_Pin
                           ONBOARD_WRITE_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 8004c2a:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8004c2e:	617b      	str	r3, [r7, #20]
                          |ONBOARD_WRITE_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c30:	2301      	movs	r3, #1
 8004c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3c:	f107 0314 	add.w	r3, r7, #20
 8004c40:	4619      	mov	r1, r3
 8004c42:	480c      	ldr	r0, [pc, #48]	; (8004c74 <_ZL12MX_GPIO_Initv+0x118>)
 8004c44:	f002 fad4 	bl	80071f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_WRITE_2_Pin */
  GPIO_InitStruct.Pin = ONBOARD_WRITE_2_Pin;
 8004c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c56:	2300      	movs	r3, #0
 8004c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ONBOARD_WRITE_2_GPIO_Port, &GPIO_InitStruct);
 8004c5a:	f107 0314 	add.w	r3, r7, #20
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4805      	ldr	r0, [pc, #20]	; (8004c78 <_ZL12MX_GPIO_Initv+0x11c>)
 8004c62:	f002 fac5 	bl	80071f0 <HAL_GPIO_Init>

}
 8004c66:	bf00      	nop
 8004c68:	3728      	adds	r7, #40	; 0x28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40023800 	.word	0x40023800
 8004c74:	40020000 	.word	0x40020000
 8004c78:	40020800 	.word	0x40020800

08004c7c <HAL_UART_RxCpltCallback>:
 * 
 * 
 * @param huart 
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  SBUSNewPackage = true;
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_UART_RxCpltCallback+0x20>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart1, SBUS_RxBytes, SBUS_NumberOfBytes);
 8004c8a:	2219      	movs	r2, #25
 8004c8c:	4904      	ldr	r1, [pc, #16]	; (8004ca0 <HAL_UART_RxCpltCallback+0x24>)
 8004c8e:	4805      	ldr	r0, [pc, #20]	; (8004ca4 <HAL_UART_RxCpltCallback+0x28>)
 8004c90:	f006 f867 	bl	800ad62 <HAL_UART_Receive_DMA>
}
 8004c94:	bf00      	nop
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20000604 	.word	0x20000604
 8004ca0:	200005ac 	.word	0x200005ac
 8004ca4:	2000077c 	.word	0x2000077c

08004ca8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart1, SBUS_RxBytes, SBUS_NumberOfBytes);
 8004cb0:	2219      	movs	r2, #25
 8004cb2:	4904      	ldr	r1, [pc, #16]	; (8004cc4 <HAL_UART_ErrorCallback+0x1c>)
 8004cb4:	4804      	ldr	r0, [pc, #16]	; (8004cc8 <HAL_UART_ErrorCallback+0x20>)
 8004cb6:	f006 f854 	bl	800ad62 <HAL_UART_Receive_DMA>
}
 8004cba:	bf00      	nop
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	200005ac 	.word	0x200005ac
 8004cc8:	2000077c 	.word	0x2000077c

08004ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004cd0:	b672      	cpsid	i
}
 8004cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004cd4:	e7fe      	b.n	8004cd4 <Error_Handler+0x8>
	...

08004cd8 <_Z20updateMainMotorSpeedv>:
 * Then it combines the throttle input and the PITCH,ROLL Y values together with the angle to get the new motorspeed
 * 
 * --Custom Method!
 */
void updateMainMotorSpeed()
{
 8004cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
  ADC1->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, ADC_CHANNEL_11);               //reset sample rate
 8004ce0:	4bc1      	ldr	r3, [pc, #772]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4ac0      	ldr	r2, [pc, #768]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004ce6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004cea:	60d3      	str	r3, [r2, #12]
  ADC1->SMPR1 |= ADC_SMPR1(ADC_SAMPLETIME_15CYCLES, ADC_CHANNEL_11);        //set new sample rate Channel 11
 8004cec:	4bbe      	ldr	r3, [pc, #760]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	4abd      	ldr	r2, [pc, #756]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004cf2:	f043 0308 	orr.w	r3, r3, #8
 8004cf6:	60d3      	str	r3, [r2, #12]
  ADC1->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, 1);                              //reset Rank
 8004cf8:	4bbb      	ldr	r3, [pc, #748]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfc:	4aba      	ldr	r2, [pc, #744]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004cfe:	f023 031f 	bic.w	r3, r3, #31
 8004d02:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= ADC_SQR3_RK(ADC_CHANNEL_11, 1);                             //set new Rank Channel 11
 8004d04:	4bb8      	ldr	r3, [pc, #736]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d08:	4ab7      	ldr	r2, [pc, #732]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004d0a:	f043 030b 	orr.w	r3, r3, #11
 8004d0e:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_ADC_Start(&hadc1);                                                    //start ADC
 8004d10:	48b6      	ldr	r0, [pc, #728]	; (8004fec <_Z20updateMainMotorSpeedv+0x314>)
 8004d12:	f001 faf5 	bl	8006300 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 100);
 8004d16:	2164      	movs	r1, #100	; 0x64
 8004d18:	48b4      	ldr	r0, [pc, #720]	; (8004fec <_Z20updateMainMotorSpeedv+0x314>)
 8004d1a:	f001 fba1 	bl	8006460 <HAL_ADC_PollForConversion>
	adcValueChannel11 = (uint16_t)ADC1->DR;                                   //read ADC value
 8004d1e:	4bb2      	ldr	r3, [pc, #712]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	4bb2      	ldr	r3, [pc, #712]	; (8004ff0 <_Z20updateMainMotorSpeedv+0x318>)
 8004d26:	801a      	strh	r2, [r3, #0]

  adc_Timestamp = TIM11->CNT;
 8004d28:	4bb2      	ldr	r3, [pc, #712]	; (8004ff4 <_Z20updateMainMotorSpeedv+0x31c>)
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	4bb2      	ldr	r3, [pc, #712]	; (8004ff8 <_Z20updateMainMotorSpeedv+0x320>)
 8004d30:	801a      	strh	r2, [r3, #0]

	ADC1->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, ADC_CHANNEL_12);               //reset sample rate
 8004d32:	4bad      	ldr	r3, [pc, #692]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	4aac      	ldr	r2, [pc, #688]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004d38:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8004d3c:	60d3      	str	r3, [r2, #12]
  ADC1->SMPR1 |= ADC_SMPR1(ADC_SAMPLETIME_15CYCLES, ADC_CHANNEL_12);        //set new sample rate Channel 12
 8004d3e:	4baa      	ldr	r3, [pc, #680]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	4aa9      	ldr	r2, [pc, #676]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d48:	60d3      	str	r3, [r2, #12]
  ADC1->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, 1);                              //reset Rank
 8004d4a:	4ba7      	ldr	r3, [pc, #668]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4e:	4aa6      	ldr	r2, [pc, #664]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004d50:	f023 031f 	bic.w	r3, r3, #31
 8004d54:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= ADC_SQR3_RK(ADC_CHANNEL_12, 1);                             //set new Rank Channel 12
 8004d56:	4ba4      	ldr	r3, [pc, #656]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5a:	4aa3      	ldr	r2, [pc, #652]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004d5c:	f043 030c 	orr.w	r3, r3, #12
 8004d60:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_ADC_Start(&hadc1);                                                    //start ADC
 8004d62:	48a2      	ldr	r0, [pc, #648]	; (8004fec <_Z20updateMainMotorSpeedv+0x314>)
 8004d64:	f001 facc 	bl	8006300 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 100);
 8004d68:	2164      	movs	r1, #100	; 0x64
 8004d6a:	48a0      	ldr	r0, [pc, #640]	; (8004fec <_Z20updateMainMotorSpeedv+0x314>)
 8004d6c:	f001 fb78 	bl	8006460 <HAL_ADC_PollForConversion>
	adcValueChannel12 = (uint16_t)ADC1->DR;                                   //read ADC value
 8004d70:	4b9d      	ldr	r3, [pc, #628]	; (8004fe8 <_Z20updateMainMotorSpeedv+0x310>)
 8004d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	4ba1      	ldr	r3, [pc, #644]	; (8004ffc <_Z20updateMainMotorSpeedv+0x324>)
 8004d78:	801a      	strh	r2, [r3, #0]

  if (smoothMainMotorSpeed > motorDeadzone)
 8004d7a:	4ba1      	ldr	r3, [pc, #644]	; (8005000 <_Z20updateMainMotorSpeedv+0x328>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	49a1      	ldr	r1, [pc, #644]	; (8005004 <_Z20updateMainMotorSpeedv+0x32c>)
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fc f9f7 	bl	8001174 <__aeabi_fcmpgt>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 81fa 	beq.w	8005182 <_Z20updateMainMotorSpeedv+0x4aa>
  {
    TIM4->CCR1 = (uint16_t)(                                                                                                                                                                                                                                                                                                                                                                \
      fastPPM_CenterTime                                                                                                                                                                                                                                                                                                                                                                    \
    + (smoothMainMotorSpeed * PPMmainMotorScaler)                                                                                                                                                                                                                                                                                                                                           \
 8004d8e:	4b9c      	ldr	r3, [pc, #624]	; (8005000 <_Z20updateMainMotorSpeedv+0x328>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fc f830 	bl	8000dfc <__aeabi_fmul>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	499a      	ldr	r1, [pc, #616]	; (8005008 <_Z20updateMainMotorSpeedv+0x330>)
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fb ff23 	bl	8000bec <__addsf3>
 8004da6:	4603      	mov	r3, r0
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fb fb79 	bl	80004a0 <__aeabi_f2d>
 8004dae:	4604      	mov	r4, r0
 8004db0:	460d      	mov	r5, r1
    + ((((((((float)adcValueChannel12 - hall2_center) * hall2_scaler) / cos_SkewOffset) + ((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * sin_SkewOffset)) * cos_OffsetAngle) - ((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * sin_OffsetAngle)) * (/*((float)SBUS_Channels[1] / 100)*/PID_Pitch_y *  0.01 * (smoothMainMotorSpeed + SBUS_mappedValueMax)))    \
 8004db2:	4b92      	ldr	r3, [pc, #584]	; (8004ffc <_Z20updateMainMotorSpeedv+0x324>)
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fb ffc8 	bl	8000d4c <__aeabi_ui2f>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fb fb6e 	bl	80004a0 <__aeabi_f2d>
 8004dc4:	a37e      	add	r3, pc, #504	; (adr r3, 8004fc0 <_Z20updateMainMotorSpeedv+0x2e8>)
 8004dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dca:	f7fb fa09 	bl	80001e0 <__aeabi_dsub>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	a37c      	add	r3, pc, #496	; (adr r3, 8004fc8 <_Z20updateMainMotorSpeedv+0x2f0>)
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	f7fb fbb8 	bl	8000550 <__aeabi_dmul>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4690      	mov	r8, r2
 8004de6:	4699      	mov	r9, r3
 8004de8:	4b88      	ldr	r3, [pc, #544]	; (800500c <_Z20updateMainMotorSpeedv+0x334>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fb fb57 	bl	80004a0 <__aeabi_f2d>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4640      	mov	r0, r8
 8004df8:	4649      	mov	r1, r9
 8004dfa:	f7fb fcd3 	bl	80007a4 <__aeabi_ddiv>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4690      	mov	r8, r2
 8004e04:	4699      	mov	r9, r3
 8004e06:	4b7a      	ldr	r3, [pc, #488]	; (8004ff0 <_Z20updateMainMotorSpeedv+0x318>)
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fb ff9e 	bl	8000d4c <__aeabi_ui2f>
 8004e10:	4603      	mov	r3, r0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fb fb44 	bl	80004a0 <__aeabi_f2d>
 8004e18:	a36d      	add	r3, pc, #436	; (adr r3, 8004fd0 <_Z20updateMainMotorSpeedv+0x2f8>)
 8004e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1e:	f7fb f9df 	bl	80001e0 <__aeabi_dsub>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	4610      	mov	r0, r2
 8004e28:	4619      	mov	r1, r3
 8004e2a:	a36b      	add	r3, pc, #428	; (adr r3, 8004fd8 <_Z20updateMainMotorSpeedv+0x300>)
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f7fb fb8e 	bl	8000550 <__aeabi_dmul>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4692      	mov	sl, r2
 8004e3a:	469b      	mov	fp, r3
 8004e3c:	4b74      	ldr	r3, [pc, #464]	; (8005010 <_Z20updateMainMotorSpeedv+0x338>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fb fb2d 	bl	80004a0 <__aeabi_f2d>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4650      	mov	r0, sl
 8004e4c:	4659      	mov	r1, fp
 8004e4e:	f7fb fb7f 	bl	8000550 <__aeabi_dmul>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	4640      	mov	r0, r8
 8004e58:	4649      	mov	r1, r9
 8004e5a:	f7fb f9c3 	bl	80001e4 <__adddf3>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4690      	mov	r8, r2
 8004e64:	4699      	mov	r9, r3
 8004e66:	4b6b      	ldr	r3, [pc, #428]	; (8005014 <_Z20updateMainMotorSpeedv+0x33c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fb fb18 	bl	80004a0 <__aeabi_f2d>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4640      	mov	r0, r8
 8004e76:	4649      	mov	r1, r9
 8004e78:	f7fb fb6a 	bl	8000550 <__aeabi_dmul>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4690      	mov	r8, r2
 8004e82:	4699      	mov	r9, r3
 8004e84:	4b5a      	ldr	r3, [pc, #360]	; (8004ff0 <_Z20updateMainMotorSpeedv+0x318>)
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fb ff5f 	bl	8000d4c <__aeabi_ui2f>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fb fb05 	bl	80004a0 <__aeabi_f2d>
 8004e96:	a34e      	add	r3, pc, #312	; (adr r3, 8004fd0 <_Z20updateMainMotorSpeedv+0x2f8>)
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	f7fb f9a0 	bl	80001e0 <__aeabi_dsub>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	a34b      	add	r3, pc, #300	; (adr r3, 8004fd8 <_Z20updateMainMotorSpeedv+0x300>)
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	f7fb fb4f 	bl	8000550 <__aeabi_dmul>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4692      	mov	sl, r2
 8004eb8:	469b      	mov	fp, r3
 8004eba:	4b57      	ldr	r3, [pc, #348]	; (8005018 <_Z20updateMainMotorSpeedv+0x340>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fb faee 	bl	80004a0 <__aeabi_f2d>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4650      	mov	r0, sl
 8004eca:	4659      	mov	r1, fp
 8004ecc:	f7fb fb40 	bl	8000550 <__aeabi_dmul>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4640      	mov	r0, r8
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	f7fb f982 	bl	80001e0 <__aeabi_dsub>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4690      	mov	r8, r2
 8004ee2:	4699      	mov	r9, r3
 8004ee4:	4b4d      	ldr	r3, [pc, #308]	; (800501c <_Z20updateMainMotorSpeedv+0x344>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fb fad9 	bl	80004a0 <__aeabi_f2d>
 8004eee:	a33c      	add	r3, pc, #240	; (adr r3, 8004fe0 <_Z20updateMainMotorSpeedv+0x308>)
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f7fb fb2c 	bl	8000550 <__aeabi_dmul>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4692      	mov	sl, r2
 8004efe:	469b      	mov	fp, r3
 8004f00:	4b3f      	ldr	r3, [pc, #252]	; (8005000 <_Z20updateMainMotorSpeedv+0x328>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4946      	ldr	r1, [pc, #280]	; (8005020 <_Z20updateMainMotorSpeedv+0x348>)
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fb fe70 	bl	8000bec <__addsf3>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fb fac6 	bl	80004a0 <__aeabi_f2d>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4650      	mov	r0, sl
 8004f1a:	4659      	mov	r1, fp
 8004f1c:	f7fb fb18 	bl	8000550 <__aeabi_dmul>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4640      	mov	r0, r8
 8004f26:	4649      	mov	r1, r9
 8004f28:	f7fb fb12 	bl	8000550 <__aeabi_dmul>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4620      	mov	r0, r4
 8004f32:	4629      	mov	r1, r5
 8004f34:	f7fb f956 	bl	80001e4 <__adddf3>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4614      	mov	r4, r2
 8004f3e:	461d      	mov	r5, r3
    + ((((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * cos_OffsetAngle) + ((((((float)adcValueChannel12 - hall2_center) * hall2_scaler) / cos_SkewOffset) + ((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * sin_SkewOffset)) * sin_OffsetAngle)) * (/*((float)SBUS_Channels[0] / 100)*/PID_Roll_y  * -0.01 * (smoothMainMotorSpeed + SBUS_mappedValueMax)))    \
 8004f40:	4b2b      	ldr	r3, [pc, #172]	; (8004ff0 <_Z20updateMainMotorSpeedv+0x318>)
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fb ff01 	bl	8000d4c <__aeabi_ui2f>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fb faa7 	bl	80004a0 <__aeabi_f2d>
 8004f52:	a31f      	add	r3, pc, #124	; (adr r3, 8004fd0 <_Z20updateMainMotorSpeedv+0x2f8>)
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	f7fb f942 	bl	80001e0 <__aeabi_dsub>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4610      	mov	r0, r2
 8004f62:	4619      	mov	r1, r3
 8004f64:	a31c      	add	r3, pc, #112	; (adr r3, 8004fd8 <_Z20updateMainMotorSpeedv+0x300>)
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	f7fb faf1 	bl	8000550 <__aeabi_dmul>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4690      	mov	r8, r2
 8004f74:	4699      	mov	r9, r3
 8004f76:	4b27      	ldr	r3, [pc, #156]	; (8005014 <_Z20updateMainMotorSpeedv+0x33c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fb fa90 	bl	80004a0 <__aeabi_f2d>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4640      	mov	r0, r8
 8004f86:	4649      	mov	r1, r9
 8004f88:	f7fb fae2 	bl	8000550 <__aeabi_dmul>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4690      	mov	r8, r2
 8004f92:	4699      	mov	r9, r3
 8004f94:	4b19      	ldr	r3, [pc, #100]	; (8004ffc <_Z20updateMainMotorSpeedv+0x324>)
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fb fed7 	bl	8000d4c <__aeabi_ui2f>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fb fa7d 	bl	80004a0 <__aeabi_f2d>
 8004fa6:	a306      	add	r3, pc, #24	; (adr r3, 8004fc0 <_Z20updateMainMotorSpeedv+0x2e8>)
 8004fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fac:	f7fb f918 	bl	80001e0 <__aeabi_dsub>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	e034      	b.n	8005024 <_Z20updateMainMotorSpeedv+0x34c>
 8004fba:	bf00      	nop
 8004fbc:	f3af 8000 	nop.w
 8004fc0:	00000000 	.word	0x00000000
 8004fc4:	4093be00 	.word	0x4093be00
 8004fc8:	ae98a1d1 	.word	0xae98a1d1
 8004fcc:	3f4fc46f 	.word	0x3f4fc46f
 8004fd0:	00000000 	.word	0x00000000
 8004fd4:	4093ac00 	.word	0x4093ac00
 8004fd8:	fc7729e9 	.word	0xfc7729e9
 8004fdc:	3f502864 	.word	0x3f502864
 8004fe0:	47ae147b 	.word	0x47ae147b
 8004fe4:	3f847ae1 	.word	0x3f847ae1
 8004fe8:	40012000 	.word	0x40012000
 8004fec:	20000608 	.word	0x20000608
 8004ff0:	20000820 	.word	0x20000820
 8004ff4:	40014800 	.word	0x40014800
 8004ff8:	20000822 	.word	0x20000822
 8004ffc:	20000824 	.word	0x20000824
 8005000:	20000828 	.word	0x20000828
 8005004:	c46d8000 	.word	0xc46d8000
 8005008:	44bb8000 	.word	0x44bb8000
 800500c:	20000838 	.word	0x20000838
 8005010:	20000834 	.word	0x20000834
 8005014:	20000830 	.word	0x20000830
 8005018:	2000082c 	.word	0x2000082c
 800501c:	20000548 	.word	0x20000548
 8005020:	447a0000 	.word	0x447a0000
 8005024:	a35c      	add	r3, pc, #368	; (adr r3, 8005198 <_Z20updateMainMotorSpeedv+0x4c0>)
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	f7fb fa91 	bl	8000550 <__aeabi_dmul>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4692      	mov	sl, r2
 8005034:	469b      	mov	fp, r3
 8005036:	4b60      	ldr	r3, [pc, #384]	; (80051b8 <_Z20updateMainMotorSpeedv+0x4e0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f7fb fa30 	bl	80004a0 <__aeabi_f2d>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4650      	mov	r0, sl
 8005046:	4659      	mov	r1, fp
 8005048:	f7fb fbac 	bl	80007a4 <__aeabi_ddiv>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4692      	mov	sl, r2
 8005052:	469b      	mov	fp, r3
 8005054:	4b59      	ldr	r3, [pc, #356]	; (80051bc <_Z20updateMainMotorSpeedv+0x4e4>)
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f7fb fe77 	bl	8000d4c <__aeabi_ui2f>
 800505e:	4603      	mov	r3, r0
 8005060:	4618      	mov	r0, r3
 8005062:	f7fb fa1d 	bl	80004a0 <__aeabi_f2d>
 8005066:	a34e      	add	r3, pc, #312	; (adr r3, 80051a0 <_Z20updateMainMotorSpeedv+0x4c8>)
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f7fb f8b8 	bl	80001e0 <__aeabi_dsub>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4610      	mov	r0, r2
 8005076:	4619      	mov	r1, r3
 8005078:	a34b      	add	r3, pc, #300	; (adr r3, 80051a8 <_Z20updateMainMotorSpeedv+0x4d0>)
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f7fb fa67 	bl	8000550 <__aeabi_dmul>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	e9c7 2300 	strd	r2, r3, [r7]
 800508a:	4b4d      	ldr	r3, [pc, #308]	; (80051c0 <_Z20updateMainMotorSpeedv+0x4e8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f7fb fa06 	bl	80004a0 <__aeabi_f2d>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800509c:	f7fb fa58 	bl	8000550 <__aeabi_dmul>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4650      	mov	r0, sl
 80050a6:	4659      	mov	r1, fp
 80050a8:	f7fb f89c 	bl	80001e4 <__adddf3>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4692      	mov	sl, r2
 80050b2:	469b      	mov	fp, r3
 80050b4:	4b43      	ldr	r3, [pc, #268]	; (80051c4 <_Z20updateMainMotorSpeedv+0x4ec>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fb f9f1 	bl	80004a0 <__aeabi_f2d>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	4650      	mov	r0, sl
 80050c4:	4659      	mov	r1, fp
 80050c6:	f7fb fa43 	bl	8000550 <__aeabi_dmul>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4640      	mov	r0, r8
 80050d0:	4649      	mov	r1, r9
 80050d2:	f7fb f887 	bl	80001e4 <__adddf3>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	4690      	mov	r8, r2
 80050dc:	4699      	mov	r9, r3
 80050de:	4b3a      	ldr	r3, [pc, #232]	; (80051c8 <_Z20updateMainMotorSpeedv+0x4f0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fb f9dc 	bl	80004a0 <__aeabi_f2d>
 80050e8:	a331      	add	r3, pc, #196	; (adr r3, 80051b0 <_Z20updateMainMotorSpeedv+0x4d8>)
 80050ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ee:	f7fb fa2f 	bl	8000550 <__aeabi_dmul>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4692      	mov	sl, r2
 80050f8:	469b      	mov	fp, r3
 80050fa:	4b34      	ldr	r3, [pc, #208]	; (80051cc <_Z20updateMainMotorSpeedv+0x4f4>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4934      	ldr	r1, [pc, #208]	; (80051d0 <_Z20updateMainMotorSpeedv+0x4f8>)
 8005100:	4618      	mov	r0, r3
 8005102:	f7fb fd73 	bl	8000bec <__addsf3>
 8005106:	4603      	mov	r3, r0
 8005108:	4618      	mov	r0, r3
 800510a:	f7fb f9c9 	bl	80004a0 <__aeabi_f2d>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	4650      	mov	r0, sl
 8005114:	4659      	mov	r1, fp
 8005116:	f7fb fa1b 	bl	8000550 <__aeabi_dmul>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4640      	mov	r0, r8
 8005120:	4649      	mov	r1, r9
 8005122:	f7fb fa15 	bl	8000550 <__aeabi_dmul>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4620      	mov	r0, r4
 800512c:	4629      	mov	r1, r5
 800512e:	f7fb f859 	bl	80001e4 <__adddf3>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
    TIM4->CCR1 = (uint16_t)(                                                                                                                                                                                                                                                                                                                                                                \
 8005136:	4610      	mov	r0, r2
 8005138:	4619      	mov	r1, r3
 800513a:	f7fb fce1 	bl	8000b00 <__aeabi_d2uiz>
 800513e:	4603      	mov	r3, r0
 8005140:	b29a      	uxth	r2, r3
 8005142:	4b24      	ldr	r3, [pc, #144]	; (80051d4 <_Z20updateMainMotorSpeedv+0x4fc>)
 8005144:	635a      	str	r2, [r3, #52]	; 0x34
    );

    
    if (TIM4->CCR1 > fastPPM_MaxTime)
 8005146:	4b23      	ldr	r3, [pc, #140]	; (80051d4 <_Z20updateMainMotorSpeedv+0x4fc>)
 8005148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800514e:	bf8c      	ite	hi
 8005150:	2301      	movhi	r3, #1
 8005152:	2300      	movls	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <_Z20updateMainMotorSpeedv+0x48a>
    {
      TIM4->CCR1 = fastPPM_MaxTime;
 800515a:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <_Z20updateMainMotorSpeedv+0x4fc>)
 800515c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005160:	635a      	str	r2, [r3, #52]	; 0x34
    }
    if (TIM4->CCR1 < fastPPM_MinTime)
 8005162:	4b1c      	ldr	r3, [pc, #112]	; (80051d4 <_Z20updateMainMotorSpeedv+0x4fc>)
 8005164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005166:	f240 32e7 	movw	r2, #999	; 0x3e7
 800516a:	4293      	cmp	r3, r2
 800516c:	bf94      	ite	ls
 800516e:	2301      	movls	r3, #1
 8005170:	2300      	movhi	r3, #0
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d008      	beq.n	800518a <_Z20updateMainMotorSpeedv+0x4b2>
    {
      TIM4->CCR1 = fastPPM_MinTime;
 8005178:	4b16      	ldr	r3, [pc, #88]	; (80051d4 <_Z20updateMainMotorSpeedv+0x4fc>)
 800517a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800517e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    TIM4->CCR1 = fastPPM_MinTime;
  }
}
 8005180:	e003      	b.n	800518a <_Z20updateMainMotorSpeedv+0x4b2>
    TIM4->CCR1 = fastPPM_MinTime;
 8005182:	4b14      	ldr	r3, [pc, #80]	; (80051d4 <_Z20updateMainMotorSpeedv+0x4fc>)
 8005184:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005188:	635a      	str	r2, [r3, #52]	; 0x34
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005194:	f3af 8000 	nop.w
 8005198:	ae98a1d1 	.word	0xae98a1d1
 800519c:	3f4fc46f 	.word	0x3f4fc46f
 80051a0:	00000000 	.word	0x00000000
 80051a4:	4093ac00 	.word	0x4093ac00
 80051a8:	fc7729e9 	.word	0xfc7729e9
 80051ac:	3f502864 	.word	0x3f502864
 80051b0:	47ae147b 	.word	0x47ae147b
 80051b4:	bf847ae1 	.word	0xbf847ae1
 80051b8:	20000838 	.word	0x20000838
 80051bc:	20000820 	.word	0x20000820
 80051c0:	20000834 	.word	0x20000834
 80051c4:	2000082c 	.word	0x2000082c
 80051c8:	2000054c 	.word	0x2000054c
 80051cc:	20000828 	.word	0x20000828
 80051d0:	447a0000 	.word	0x447a0000
 80051d4:	40000800 	.word	0x40000800

080051d8 <_Z13MainMotorDLPFv>:
 * @brief //NOTDONE
 * 
 * 
 */
void MainMotorDLPF()
{
 80051d8:	b5b0      	push	{r4, r5, r7, lr}
 80051da:	af00      	add	r7, sp, #0
  smoothMainMotorSpeed += MainMotorSmoothingFactor * ((float)SBUS_Channels[2] - smoothMainMotorSpeed);
 80051dc:	4b18      	ldr	r3, [pc, #96]	; (8005240 <_Z13MainMotorDLPFv+0x68>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fb f95d 	bl	80004a0 <__aeabi_f2d>
 80051e6:	4604      	mov	r4, r0
 80051e8:	460d      	mov	r5, r1
 80051ea:	4b16      	ldr	r3, [pc, #88]	; (8005244 <_Z13MainMotorDLPFv+0x6c>)
 80051ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fb fdaf 	bl	8000d54 <__aeabi_i2f>
 80051f6:	4602      	mov	r2, r0
 80051f8:	4b11      	ldr	r3, [pc, #68]	; (8005240 <_Z13MainMotorDLPFv+0x68>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4619      	mov	r1, r3
 80051fe:	4610      	mov	r0, r2
 8005200:	f7fb fcf2 	bl	8000be8 <__aeabi_fsub>
 8005204:	4603      	mov	r3, r0
 8005206:	4618      	mov	r0, r3
 8005208:	f7fb f94a 	bl	80004a0 <__aeabi_f2d>
 800520c:	a30a      	add	r3, pc, #40	; (adr r3, 8005238 <_Z13MainMotorDLPFv+0x60>)
 800520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005212:	f7fb f99d 	bl	8000550 <__aeabi_dmul>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4620      	mov	r0, r4
 800521c:	4629      	mov	r1, r5
 800521e:	f7fa ffe1 	bl	80001e4 <__adddf3>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	4610      	mov	r0, r2
 8005228:	4619      	mov	r1, r3
 800522a:	f7fb fc89 	bl	8000b40 <__aeabi_d2f>
 800522e:	4603      	mov	r3, r0
 8005230:	4a03      	ldr	r2, [pc, #12]	; (8005240 <_Z13MainMotorDLPFv+0x68>)
 8005232:	6013      	str	r3, [r2, #0]
}
 8005234:	bf00      	nop
 8005236:	bdb0      	pop	{r4, r5, r7, pc}
 8005238:	9999999a 	.word	0x9999999a
 800523c:	3fa99999 	.word	0x3fa99999
 8005240:	20000828 	.word	0x20000828
 8005244:	200005f4 	.word	0x200005f4

08005248 <_Z20updateTailMotorSpeedv>:
 * If the throttle is above a given deadzone the motor speed is YAW Y value
 * 
 * --Custom Method!
 */
void updateTailMotorSpeed()
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  if (SBUS_Channels[2] > motorDeadzone)
 800524c:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <_Z20updateTailMotorSpeedv+0x58>)
 800524e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005252:	f46f 726d 	mvn.w	r2, #948	; 0x3b4
 8005256:	4293      	cmp	r3, r2
 8005258:	db0e      	blt.n	8005278 <_Z20updateTailMotorSpeedv+0x30>
  {
    TIM3->CCR1 = (uint16_t)(slowPPM1_MinTime + PID_Yaw_y);
 800525a:	4b12      	ldr	r3, [pc, #72]	; (80052a4 <_Z20updateTailMotorSpeedv+0x5c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4912      	ldr	r1, [pc, #72]	; (80052a8 <_Z20updateTailMotorSpeedv+0x60>)
 8005260:	4618      	mov	r0, r3
 8005262:	f7fb fcc3 	bl	8000bec <__addsf3>
 8005266:	4603      	mov	r3, r0
 8005268:	4618      	mov	r0, r3
 800526a:	f7fb ffc9 	bl	8001200 <__aeabi_f2uiz>
 800526e:	4603      	mov	r3, r0
 8005270:	b29a      	uxth	r2, r3
 8005272:	4b0e      	ldr	r3, [pc, #56]	; (80052ac <_Z20updateTailMotorSpeedv+0x64>)
 8005274:	635a      	str	r2, [r3, #52]	; 0x34
    Pitch_I_Sum = 0;
    Roll_I_Sum  = 0;
    Yaw_I_Sum   = 0;
    reset_WQuaternion();
  }
}
 8005276:	e011      	b.n	800529c <_Z20updateTailMotorSpeedv+0x54>
    TIM3->CCR1 = slowPPM1_MinTime;
 8005278:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <_Z20updateTailMotorSpeedv+0x64>)
 800527a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800527e:	635a      	str	r2, [r3, #52]	; 0x34
    Pitch_I_Sum = 0;
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <_Z20updateTailMotorSpeedv+0x68>)
 8005282:	f04f 0200 	mov.w	r2, #0
 8005286:	601a      	str	r2, [r3, #0]
    Roll_I_Sum  = 0;
 8005288:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <_Z20updateTailMotorSpeedv+0x6c>)
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
    Yaw_I_Sum   = 0;
 8005290:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <_Z20updateTailMotorSpeedv+0x70>)
 8005292:	f04f 0200 	mov.w	r2, #0
 8005296:	601a      	str	r2, [r3, #0]
    reset_WQuaternion();
 8005298:	f7fe fb8a 	bl	80039b0 <_Z17reset_WQuaternionv>
}
 800529c:	bf00      	nop
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	200005f4 	.word	0x200005f4
 80052a4:	20000550 	.word	0x20000550
 80052a8:	447a0000 	.word	0x447a0000
 80052ac:	40000400 	.word	0x40000400
 80052b0:	20000554 	.word	0x20000554
 80052b4:	20000558 	.word	0x20000558
 80052b8:	2000055c 	.word	0x2000055c
 80052bc:	00000000 	.word	0x00000000

080052c0 <_Z18getMainMotorOffsetv>:
 * @brief //NOTDONE
 * 
 * 
 */
void getMainMotorOffset()
{
 80052c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80052c4:	b082      	sub	sp, #8
 80052c6:	af00      	add	r7, sp, #0
  float currentAngleOffset = mainMotorStartOffset + (((smoothMainMotorSpeed + SBUS_mappedValueMax) * 0.001) * (mainMotorMaxOffset));
 80052c8:	4b3f      	ldr	r3, [pc, #252]	; (80053c8 <_Z18getMainMotorOffsetv+0x108>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fb f8e7 	bl	80004a0 <__aeabi_f2d>
 80052d2:	4604      	mov	r4, r0
 80052d4:	460d      	mov	r5, r1
 80052d6:	4b3d      	ldr	r3, [pc, #244]	; (80053cc <_Z18getMainMotorOffsetv+0x10c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	493d      	ldr	r1, [pc, #244]	; (80053d0 <_Z18getMainMotorOffsetv+0x110>)
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fb fc85 	bl	8000bec <__addsf3>
 80052e2:	4603      	mov	r3, r0
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fb f8db 	bl	80004a0 <__aeabi_f2d>
 80052ea:	a333      	add	r3, pc, #204	; (adr r3, 80053b8 <_Z18getMainMotorOffsetv+0xf8>)
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	f7fb f92e 	bl	8000550 <__aeabi_dmul>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4690      	mov	r8, r2
 80052fa:	4699      	mov	r9, r3
 80052fc:	4b35      	ldr	r3, [pc, #212]	; (80053d4 <_Z18getMainMotorOffsetv+0x114>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	f7fb f8cd 	bl	80004a0 <__aeabi_f2d>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	4640      	mov	r0, r8
 800530c:	4649      	mov	r1, r9
 800530e:	f7fb f91f 	bl	8000550 <__aeabi_dmul>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4620      	mov	r0, r4
 8005318:	4629      	mov	r1, r5
 800531a:	f7fa ff63 	bl	80001e4 <__adddf3>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4610      	mov	r0, r2
 8005324:	4619      	mov	r1, r3
 8005326:	f7fb fc0b 	bl	8000b40 <__aeabi_d2f>
 800532a:	4603      	mov	r3, r0
 800532c:	607b      	str	r3, [r7, #4]
  sin_OffsetAngle = sin((currentAngleOffset * M_PI) / 180);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fb f8b6 	bl	80004a0 <__aeabi_f2d>
 8005334:	a322      	add	r3, pc, #136	; (adr r3, 80053c0 <_Z18getMainMotorOffsetv+0x100>)
 8005336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533a:	f7fb f909 	bl	8000550 <__aeabi_dmul>
 800533e:	4602      	mov	r2, r0
 8005340:	460b      	mov	r3, r1
 8005342:	4610      	mov	r0, r2
 8005344:	4619      	mov	r1, r3
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	4b23      	ldr	r3, [pc, #140]	; (80053d8 <_Z18getMainMotorOffsetv+0x118>)
 800534c:	f7fb fa2a 	bl	80007a4 <__aeabi_ddiv>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	f009 feaa 	bl	800f0b0 <sin>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4610      	mov	r0, r2
 8005362:	4619      	mov	r1, r3
 8005364:	f7fb fbec 	bl	8000b40 <__aeabi_d2f>
 8005368:	4603      	mov	r3, r0
 800536a:	4a1c      	ldr	r2, [pc, #112]	; (80053dc <_Z18getMainMotorOffsetv+0x11c>)
 800536c:	6013      	str	r3, [r2, #0]
  cos_OffsetAngle = cos((currentAngleOffset * M_PI) / 180);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fb f896 	bl	80004a0 <__aeabi_f2d>
 8005374:	a312      	add	r3, pc, #72	; (adr r3, 80053c0 <_Z18getMainMotorOffsetv+0x100>)
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	f7fb f8e9 	bl	8000550 <__aeabi_dmul>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4610      	mov	r0, r2
 8005384:	4619      	mov	r1, r3
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	4b13      	ldr	r3, [pc, #76]	; (80053d8 <_Z18getMainMotorOffsetv+0x118>)
 800538c:	f7fb fa0a 	bl	80007a4 <__aeabi_ddiv>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4610      	mov	r0, r2
 8005396:	4619      	mov	r1, r3
 8005398:	f009 fe48 	bl	800f02c <cos>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4610      	mov	r0, r2
 80053a2:	4619      	mov	r1, r3
 80053a4:	f7fb fbcc 	bl	8000b40 <__aeabi_d2f>
 80053a8:	4603      	mov	r3, r0
 80053aa:	4a0d      	ldr	r2, [pc, #52]	; (80053e0 <_Z18getMainMotorOffsetv+0x120>)
 80053ac:	6013      	str	r3, [r2, #0]
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80053b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80053bc:	3f50624d 	.word	0x3f50624d
 80053c0:	54442d18 	.word	0x54442d18
 80053c4:	400921fb 	.word	0x400921fb
 80053c8:	20000058 	.word	0x20000058
 80053cc:	20000828 	.word	0x20000828
 80053d0:	447a0000 	.word	0x447a0000
 80053d4:	2000005c 	.word	0x2000005c
 80053d8:	40668000 	.word	0x40668000
 80053dc:	2000082c 	.word	0x2000082c
 80053e0:	20000830 	.word	0x20000830

080053e4 <_Z8PPM_initv>:
 * @brief Initializes TIM 3 and 4 used for generating the PPM signals
 * 
 * --Custom Method!
 */
void PPM_init()
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim3);
 80053e8:	4803      	ldr	r0, [pc, #12]	; (80053f8 <_Z8PPM_initv+0x14>)
 80053ea:	f004 ff41 	bl	800a270 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80053ee:	4803      	ldr	r0, [pc, #12]	; (80053fc <_Z8PPM_initv+0x18>)
 80053f0:	f004 ff3e 	bl	800a270 <HAL_TIM_Base_Start_IT>
}
 80053f4:	bf00      	nop
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	200006a4 	.word	0x200006a4
 80053fc:	200006ec 	.word	0x200006ec

08005400 <_Z14ESCCalibrationv>:
 * If BT1 is not pressed, it gives the ESCs x time to initialize
 * 
 * --Custom Method!
 */
void ESCCalibration()
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == true)
 8005406:	2101      	movs	r1, #1
 8005408:	486d      	ldr	r0, [pc, #436]	; (80055c0 <_Z14ESCCalibrationv+0x1c0>)
 800540a:	f002 f88f 	bl	800752c <HAL_GPIO_ReadPin>
 800540e:	4603      	mov	r3, r0
 8005410:	2b01      	cmp	r3, #1
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 80b8 	beq.w	8005590 <_Z14ESCCalibrationv+0x190>
  {
    uint16_t counter = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);   //NOTDONE debug
 8005424:	2120      	movs	r1, #32
 8005426:	4866      	ldr	r0, [pc, #408]	; (80055c0 <_Z14ESCCalibrationv+0x1c0>)
 8005428:	f002 f8af 	bl	800758a <HAL_GPIO_TogglePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);                                                                             //start PPM for tail motor
 800542c:	2100      	movs	r1, #0
 800542e:	4865      	ldr	r0, [pc, #404]	; (80055c4 <_Z14ESCCalibrationv+0x1c4>)
 8005430:	f004 ffdc 	bl	800a3ec <HAL_TIM_PWM_Start>
    uint16_t oldTime = TIM11->CNT;
 8005434:	4b64      	ldr	r3, [pc, #400]	; (80055c8 <_Z14ESCCalibrationv+0x1c8>)
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	80bb      	strh	r3, [r7, #4]

    //main-motor
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 800543a:	2101      	movs	r1, #1
 800543c:	4860      	ldr	r0, [pc, #384]	; (80055c0 <_Z14ESCCalibrationv+0x1c0>)
 800543e:	f002 f875 	bl	800752c <HAL_GPIO_ReadPin>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	bf0c      	ite	eq
 8005448:	2301      	moveq	r3, #1
 800544a:	2300      	movne	r3, #0
 800544c:	b2da      	uxtb	r2, r3
 800544e:	88fb      	ldrh	r3, [r7, #6]
 8005450:	f240 31e7 	movw	r1, #999	; 0x3e7
 8005454:	428b      	cmp	r3, r1
 8005456:	bf94      	ite	ls
 8005458:	2301      	movls	r3, #1
 800545a:	2300      	movhi	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	4313      	orrs	r3, r2
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	bf14      	ite	ne
 8005466:	2301      	movne	r3, #1
 8005468:	2300      	moveq	r3, #0
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d033      	beq.n	80054d8 <_Z14ESCCalibrationv+0xd8>
    {
      if (SBUSNewPackage == true) SBUS_postProcessing();                                                                  //process new packets
 8005470:	4b56      	ldr	r3, [pc, #344]	; (80055cc <_Z14ESCCalibrationv+0x1cc>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <_Z14ESCCalibrationv+0x7c>
 8005478:	f7ff f83e 	bl	80044f8 <_Z19SBUS_postProcessingv>
      TIM3->CCR1 = (uint16_t)(slowPPM1_CenterTime + (SBUS_Channels[2] * PPMtailMotorScaler));                             //update motor speed
 800547c:	4b54      	ldr	r3, [pc, #336]	; (80055d0 <_Z14ESCCalibrationv+0x1d0>)
 800547e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005482:	4618      	mov	r0, r3
 8005484:	f7fb fc66 	bl	8000d54 <__aeabi_i2f>
 8005488:	4603      	mov	r3, r0
 800548a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800548e:	4618      	mov	r0, r3
 8005490:	f7fb fcb4 	bl	8000dfc <__aeabi_fmul>
 8005494:	4603      	mov	r3, r0
 8005496:	494f      	ldr	r1, [pc, #316]	; (80055d4 <_Z14ESCCalibrationv+0x1d4>)
 8005498:	4618      	mov	r0, r3
 800549a:	f7fb fba7 	bl	8000bec <__addsf3>
 800549e:	4603      	mov	r3, r0
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fb fead 	bl	8001200 <__aeabi_f2uiz>
 80054a6:	4603      	mov	r3, r0
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	4b4b      	ldr	r3, [pc, #300]	; (80055d8 <_Z14ESCCalibrationv+0x1d8>)
 80054ac:	635a      	str	r2, [r3, #52]	; 0x34
      while ((TIM11->CNT - oldTime) < 10000);                                                                             //wait for 10 milliseconds to pass
 80054ae:	4b46      	ldr	r3, [pc, #280]	; (80055c8 <_Z14ESCCalibrationv+0x1c8>)
 80054b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054b2:	88bb      	ldrh	r3, [r7, #4]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f242 720f 	movw	r2, #9999	; 0x270f
 80054ba:	4293      	cmp	r3, r2
 80054bc:	bf94      	ite	ls
 80054be:	2301      	movls	r3, #1
 80054c0:	2300      	movhi	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d000      	beq.n	80054ca <_Z14ESCCalibrationv+0xca>
 80054c8:	e7f1      	b.n	80054ae <_Z14ESCCalibrationv+0xae>
      oldTime = TIM11->CNT;
 80054ca:	4b3f      	ldr	r3, [pc, #252]	; (80055c8 <_Z14ESCCalibrationv+0x1c8>)
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	80bb      	strh	r3, [r7, #4]
      counter += 10;
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	330a      	adds	r3, #10
 80054d4:	80fb      	strh	r3, [r7, #6]
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 80054d6:	e7b0      	b.n	800543a <_Z14ESCCalibrationv+0x3a>
    }

    counter = 0;                                                                                                          //reset counter
 80054d8:	2300      	movs	r3, #0
 80054da:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_TogglePin(ONBOARD_LED_3_GPIO_Port, ONBOARD_LED_3_Pin);   //NOTDONE debug
 80054dc:	2140      	movs	r1, #64	; 0x40
 80054de:	4838      	ldr	r0, [pc, #224]	; (80055c0 <_Z14ESCCalibrationv+0x1c0>)
 80054e0:	f002 f853 	bl	800758a <HAL_GPIO_TogglePin>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);                                                                             //start PPM for main motor
 80054e4:	2100      	movs	r1, #0
 80054e6:	483d      	ldr	r0, [pc, #244]	; (80055dc <_Z14ESCCalibrationv+0x1dc>)
 80054e8:	f004 ff80 	bl	800a3ec <HAL_TIM_PWM_Start>
    oldTime = TIM11->CNT;
 80054ec:	4b36      	ldr	r3, [pc, #216]	; (80055c8 <_Z14ESCCalibrationv+0x1c8>)
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	80bb      	strh	r3, [r7, #4]

    //tail-motor
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 80054f2:	2101      	movs	r1, #1
 80054f4:	4832      	ldr	r0, [pc, #200]	; (80055c0 <_Z14ESCCalibrationv+0x1c0>)
 80054f6:	f002 f819 	bl	800752c <HAL_GPIO_ReadPin>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bf0c      	ite	eq
 8005500:	2301      	moveq	r3, #1
 8005502:	2300      	movne	r3, #0
 8005504:	b2da      	uxtb	r2, r3
 8005506:	88fb      	ldrh	r3, [r7, #6]
 8005508:	f240 31e7 	movw	r1, #999	; 0x3e7
 800550c:	428b      	cmp	r3, r1
 800550e:	bf94      	ite	ls
 8005510:	2301      	movls	r3, #1
 8005512:	2300      	movhi	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	4313      	orrs	r3, r2
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	bf14      	ite	ne
 800551e:	2301      	movne	r3, #1
 8005520:	2300      	moveq	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d047      	beq.n	80055b8 <_Z14ESCCalibrationv+0x1b8>
    {
      if (SBUSNewPackage == true) SBUS_postProcessing();                                                                  //process new packets
 8005528:	4b28      	ldr	r3, [pc, #160]	; (80055cc <_Z14ESCCalibrationv+0x1cc>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <_Z14ESCCalibrationv+0x134>
 8005530:	f7fe ffe2 	bl	80044f8 <_Z19SBUS_postProcessingv>
      TIM4->CCR1 = (uint16_t)(fastPPM_CenterTime + (SBUS_Channels[2] * PPMmainMotorScaler));                              //update motor speed
 8005534:	4b26      	ldr	r3, [pc, #152]	; (80055d0 <_Z14ESCCalibrationv+0x1d0>)
 8005536:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800553a:	4618      	mov	r0, r3
 800553c:	f7fb fc0a 	bl	8000d54 <__aeabi_i2f>
 8005540:	4603      	mov	r3, r0
 8005542:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005546:	4618      	mov	r0, r3
 8005548:	f7fb fc58 	bl	8000dfc <__aeabi_fmul>
 800554c:	4603      	mov	r3, r0
 800554e:	4921      	ldr	r1, [pc, #132]	; (80055d4 <_Z14ESCCalibrationv+0x1d4>)
 8005550:	4618      	mov	r0, r3
 8005552:	f7fb fb4b 	bl	8000bec <__addsf3>
 8005556:	4603      	mov	r3, r0
 8005558:	4618      	mov	r0, r3
 800555a:	f7fb fe51 	bl	8001200 <__aeabi_f2uiz>
 800555e:	4603      	mov	r3, r0
 8005560:	b29a      	uxth	r2, r3
 8005562:	4b1f      	ldr	r3, [pc, #124]	; (80055e0 <_Z14ESCCalibrationv+0x1e0>)
 8005564:	635a      	str	r2, [r3, #52]	; 0x34
      while ((TIM11->CNT - oldTime) < 10000);                                                                             //wait for 10 milliseconds to pass
 8005566:	4b18      	ldr	r3, [pc, #96]	; (80055c8 <_Z14ESCCalibrationv+0x1c8>)
 8005568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800556a:	88bb      	ldrh	r3, [r7, #4]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f242 720f 	movw	r2, #9999	; 0x270f
 8005572:	4293      	cmp	r3, r2
 8005574:	bf94      	ite	ls
 8005576:	2301      	movls	r3, #1
 8005578:	2300      	movhi	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d000      	beq.n	8005582 <_Z14ESCCalibrationv+0x182>
 8005580:	e7f1      	b.n	8005566 <_Z14ESCCalibrationv+0x166>
      oldTime = TIM11->CNT;
 8005582:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <_Z14ESCCalibrationv+0x1c8>)
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	80bb      	strh	r3, [r7, #4]
      counter += 10;
 8005588:	88fb      	ldrh	r3, [r7, #6]
 800558a:	330a      	adds	r3, #10
 800558c:	80fb      	strh	r3, [r7, #6]
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 800558e:	e7b0      	b.n	80054f2 <_Z14ESCCalibrationv+0xf2>
    }
  }
  else
  {
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);                                                                             //start PPM for tail motor
 8005590:	2100      	movs	r1, #0
 8005592:	480c      	ldr	r0, [pc, #48]	; (80055c4 <_Z14ESCCalibrationv+0x1c4>)
 8005594:	f004 ff2a 	bl	800a3ec <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);                                                                             //start PPM for main motor
 8005598:	2100      	movs	r1, #0
 800559a:	4810      	ldr	r0, [pc, #64]	; (80055dc <_Z14ESCCalibrationv+0x1dc>)
 800559c:	f004 ff26 	bl	800a3ec <HAL_TIM_PWM_Start>

    TIM3->CCR1 = slowPPM1_MinTime;                                                                                        //set to 0%
 80055a0:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <_Z14ESCCalibrationv+0x1d8>)
 80055a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055a6:	635a      	str	r2, [r3, #52]	; 0x34
    TIM4->CCR1 = fastPPM_MinTime;                                                                                         //set to 0%
 80055a8:	4b0d      	ldr	r3, [pc, #52]	; (80055e0 <_Z14ESCCalibrationv+0x1e0>)
 80055aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055ae:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(ESC_StartupDelay);
 80055b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055b4:	f000 fe3c 	bl	8006230 <HAL_Delay>
  }
 80055b8:	bf00      	nop
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40020000 	.word	0x40020000
 80055c4:	200006a4 	.word	0x200006a4
 80055c8:	40014800 	.word	0x40014800
 80055cc:	20000604 	.word	0x20000604
 80055d0:	200005f4 	.word	0x200005f4
 80055d4:	44bb8000 	.word	0x44bb8000
 80055d8:	40000400 	.word	0x40000400
 80055dc:	200006ec 	.word	0x200006ec
 80055e0:	40000800 	.word	0x40000800
 80055e4:	00000000 	.word	0x00000000

080055e8 <_Z41__static_initialization_and_destruction_0ii>:
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	f040 808e 	bne.w	8005716 <_Z41__static_initialization_and_destruction_0ii+0x12e>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005600:	4293      	cmp	r3, r2
 8005602:	f040 8088 	bne.w	8005716 <_Z41__static_initialization_and_destruction_0ii+0x12e>
float sin_OffsetAngle = sin(((float)mainMotorStartOffset * M_PI) / 180);
 8005606:	4b48      	ldr	r3, [pc, #288]	; (8005728 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f7fa ff48 	bl	80004a0 <__aeabi_f2d>
 8005610:	a343      	add	r3, pc, #268	; (adr r3, 8005720 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	f7fa ff9b 	bl	8000550 <__aeabi_dmul>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4610      	mov	r0, r2
 8005620:	4619      	mov	r1, r3
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	4b41      	ldr	r3, [pc, #260]	; (800572c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8005628:	f7fb f8bc 	bl	80007a4 <__aeabi_ddiv>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4610      	mov	r0, r2
 8005632:	4619      	mov	r1, r3
 8005634:	f009 fd3c 	bl	800f0b0 <sin>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4610      	mov	r0, r2
 800563e:	4619      	mov	r1, r3
 8005640:	f7fb fa7e 	bl	8000b40 <__aeabi_d2f>
 8005644:	4603      	mov	r3, r0
 8005646:	4a3a      	ldr	r2, [pc, #232]	; (8005730 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8005648:	6013      	str	r3, [r2, #0]
float cos_OffsetAngle = cos(((float)mainMotorStartOffset * M_PI) / 180);
 800564a:	4b37      	ldr	r3, [pc, #220]	; (8005728 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f7fa ff26 	bl	80004a0 <__aeabi_f2d>
 8005654:	a332      	add	r3, pc, #200	; (adr r3, 8005720 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f7fa ff79 	bl	8000550 <__aeabi_dmul>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	4610      	mov	r0, r2
 8005664:	4619      	mov	r1, r3
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	4b30      	ldr	r3, [pc, #192]	; (800572c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800566c:	f7fb f89a 	bl	80007a4 <__aeabi_ddiv>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4610      	mov	r0, r2
 8005676:	4619      	mov	r1, r3
 8005678:	f009 fcd8 	bl	800f02c <cos>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4610      	mov	r0, r2
 8005682:	4619      	mov	r1, r3
 8005684:	f7fb fa5c 	bl	8000b40 <__aeabi_d2f>
 8005688:	4603      	mov	r3, r0
 800568a:	4a2a      	ldr	r2, [pc, #168]	; (8005734 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800568c:	6013      	str	r3, [r2, #0]
float sin_SkewOffset = sin((mainMotorSkewOffset * M_PI) / 180);
 800568e:	4b2a      	ldr	r3, [pc, #168]	; (8005738 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7fa ff04 	bl	80004a0 <__aeabi_f2d>
 8005698:	a321      	add	r3, pc, #132	; (adr r3, 8005720 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	f7fa ff57 	bl	8000550 <__aeabi_dmul>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4610      	mov	r0, r2
 80056a8:	4619      	mov	r1, r3
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	4b1f      	ldr	r3, [pc, #124]	; (800572c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80056b0:	f7fb f878 	bl	80007a4 <__aeabi_ddiv>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	f009 fcf8 	bl	800f0b0 <sin>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4610      	mov	r0, r2
 80056c6:	4619      	mov	r1, r3
 80056c8:	f7fb fa3a 	bl	8000b40 <__aeabi_d2f>
 80056cc:	4603      	mov	r3, r0
 80056ce:	4a1b      	ldr	r2, [pc, #108]	; (800573c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80056d0:	6013      	str	r3, [r2, #0]
float cos_SkewOffset = cos((mainMotorSkewOffset * M_PI) / 180);
 80056d2:	4b19      	ldr	r3, [pc, #100]	; (8005738 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fa fee2 	bl	80004a0 <__aeabi_f2d>
 80056dc:	a310      	add	r3, pc, #64	; (adr r3, 8005720 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	f7fa ff35 	bl	8000550 <__aeabi_dmul>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4610      	mov	r0, r2
 80056ec:	4619      	mov	r1, r3
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	4b0e      	ldr	r3, [pc, #56]	; (800572c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80056f4:	f7fb f856 	bl	80007a4 <__aeabi_ddiv>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4610      	mov	r0, r2
 80056fe:	4619      	mov	r1, r3
 8005700:	f009 fc94 	bl	800f02c <cos>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4610      	mov	r0, r2
 800570a:	4619      	mov	r1, r3
 800570c:	f7fb fa18 	bl	8000b40 <__aeabi_d2f>
 8005710:	4603      	mov	r3, r0
 8005712:	4a0b      	ldr	r2, [pc, #44]	; (8005740 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	54442d18 	.word	0x54442d18
 8005724:	400921fb 	.word	0x400921fb
 8005728:	20000058 	.word	0x20000058
 800572c:	40668000 	.word	0x40668000
 8005730:	2000082c 	.word	0x2000082c
 8005734:	20000830 	.word	0x20000830
 8005738:	20000060 	.word	0x20000060
 800573c:	20000834 	.word	0x20000834
 8005740:	20000838 	.word	0x20000838

08005744 <_GLOBAL__sub_I_adcValueChannel11>:
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
 8005748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800574c:	2001      	movs	r0, #1
 800574e:	f7ff ff4b 	bl	80055e8 <_Z41__static_initialization_and_destruction_0ii>
 8005752:	bd80      	pop	{r7, pc}

08005754 <_Z4loopv>:
#include "PID.h"

uint8_t task;

void loop()
{
 8005754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005758:	b0f7      	sub	sp, #476	; 0x1dc
 800575a:	af16      	add	r7, sp, #88	; 0x58
  if (TIM4->CNT >= (fastPPM_Pulselength - fastPPM_calcutationTime))
 800575c:	4bae      	ldr	r3, [pc, #696]	; (8005a18 <_Z4loopv+0x2c4>)
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	f640 1291 	movw	r2, #2449	; 0x991
 8005764:	4293      	cmp	r3, r2
 8005766:	bf8c      	ite	hi
 8005768:	2301      	movhi	r3, #1
 800576a:	2300      	movls	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 819f 	beq.w	8005ab2 <_Z4loopv+0x35e>
  {
    HAL_GPIO_TogglePin(ONBOARD_WRITE_3_GPIO_Port, ONBOARD_WRITE_3_Pin);
 8005774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005778:	48a8      	ldr	r0, [pc, #672]	; (8005a1c <_Z4loopv+0x2c8>)
 800577a:	f001 ff06 	bl	800758a <HAL_GPIO_TogglePin>
    updateMainMotorSpeed();   //40 us
 800577e:	f7ff faab 	bl	8004cd8 <_Z20updateMainMotorSpeedv>
    HAL_GPIO_TogglePin(ONBOARD_WRITE_3_GPIO_Port, ONBOARD_WRITE_3_Pin);
 8005782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005786:	48a5      	ldr	r0, [pc, #660]	; (8005a1c <_Z4loopv+0x2c8>)
 8005788:	f001 feff 	bl	800758a <HAL_GPIO_TogglePin>

    switch (task)                       //execute the selected task
 800578c:	4ba4      	ldr	r3, [pc, #656]	; (8005a20 <_Z4loopv+0x2cc>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d002      	beq.n	800579a <_Z4loopv+0x46>
 8005794:	2b02      	cmp	r3, #2
 8005796:	d025      	beq.n	80057e4 <_Z4loopv+0x90>
	        CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
        }
      }
      break;
    default:
      break;
 8005798:	e16d      	b.n	8005a76 <_Z4loopv+0x322>
      MPU6050_WaitForQuaternionSet();   //250 us if given 5000 us after FIFO reset
 800579a:	f7fc fa39 	bl	8001c10 <_Z28MPU6050_WaitForQuaternionSetv>
      MPU6050_ConvertToQuaternions();   //450 us
 800579e:	f7fc fa53 	bl	8001c48 <_Z28MPU6050_ConvertToQuaternionsv>
      MPU6050_resetFIFO();    //180 us
 80057a2:	f7fc fa2b 	bl	8001bfc <_Z17MPU6050_resetFIFOv>
      get_XW_diffAngles();    //200 us
 80057a6:	f7fe f82b 	bl	8003800 <_Z17get_XW_diffAnglesv>
      update_PID(); 	  //18 us
 80057aa:	f7fe f947 	bl	8003a3c <_Z10update_PIDv>
      updateTailMotorSpeed();   //90 us
 80057ae:	f7ff fd4b 	bl	8005248 <_Z20updateTailMotorSpeedv>
      update_FrameOriginQuaternion();   //90 us
 80057b2:	f7fc faf3 	bl	8001d9c <_Z28update_FrameOriginQuaternionv>
      if (SBUSNewPackage == true) SBUS_postProcessing();    //30 us
 80057b6:	4b9b      	ldr	r3, [pc, #620]	; (8005a24 <_Z4loopv+0x2d0>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d101      	bne.n	80057c2 <_Z4loopv+0x6e>
 80057be:	f7fe fe9b 	bl	80044f8 <_Z19SBUS_postProcessingv>
      switchTuningMode();   //2 us
 80057c2:	f7fe fe45 	bl	8004450 <_Z16switchTuningModev>
      if (SBUS_Channels[4] == 1000)  //if the set-PID-switch on the remote is on, read the values
 80057c6:	4b98      	ldr	r3, [pc, #608]	; (8005a28 <_Z4loopv+0x2d4>)
 80057c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80057cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057d0:	d103      	bne.n	80057da <_Z4loopv+0x86>
        getPIDValues();   //5 us
 80057d2:	f7fe fafd 	bl	8003dd0 <_Z12getPIDValuesv>
        getAngleOffset();   //4 us
 80057d6:	f7fe fd7b 	bl	80042d0 <_Z14getAngleOffsetv>
      getMainMotorOffset();   //65 us
 80057da:	f7ff fd71 	bl	80052c0 <_Z18getMainMotorOffsetv>
      MainMotorDLPF();    //4 us
 80057de:	f7ff fcfb 	bl	80051d8 <_Z13MainMotorDLPFv>
      break;
 80057e2:	e148      	b.n	8005a76 <_Z4loopv+0x322>
      task = 0;                 //reset to task 1  (keep in mind task ++; below)
 80057e4:	4b8e      	ldr	r3, [pc, #568]	; (8005a20 <_Z4loopv+0x2cc>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	701a      	strb	r2, [r3, #0]
      if (smoothMainMotorSpeed <= motorDeadzone)    //750 us
 80057ea:	4b90      	ldr	r3, [pc, #576]	; (8005a2c <_Z4loopv+0x2d8>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4990      	ldr	r1, [pc, #576]	; (8005a30 <_Z4loopv+0x2dc>)
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fb fcab 	bl	800114c <__aeabi_fcmple>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d100      	bne.n	80057fe <_Z4loopv+0xaa>
      break;
 80057fc:	e13a      	b.n	8005a74 <_Z4loopv+0x320>
        for (size_t i = 0; i < 1; i++)
 80057fe:	2300      	movs	r3, #0
 8005800:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005804:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8005808:	2b00      	cmp	r3, #0
 800580a:	f040 8133 	bne.w	8005a74 <_Z4loopv+0x320>
        }
 800580e:	466b      	mov	r3, sp
 8005810:	461e      	mov	r6, r3
          , Pitch_PID_k[0] * 10                                           \
 8005812:	4b88      	ldr	r3, [pc, #544]	; (8005a34 <_Z4loopv+0x2e0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4988      	ldr	r1, [pc, #544]	; (8005a38 <_Z4loopv+0x2e4>)
 8005818:	4618      	mov	r0, r3
 800581a:	f7fb faef 	bl	8000dfc <__aeabi_fmul>
 800581e:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f \r\n"   \
 8005820:	4618      	mov	r0, r3
 8005822:	f7fa fe3d 	bl	80004a0 <__aeabi_f2d>
 8005826:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
          , Pitch_PID_k[1] * 10                                           \
 800582a:	4b82      	ldr	r3, [pc, #520]	; (8005a34 <_Z4loopv+0x2e0>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	4982      	ldr	r1, [pc, #520]	; (8005a38 <_Z4loopv+0x2e4>)
 8005830:	4618      	mov	r0, r3
 8005832:	f7fb fae3 	bl	8000dfc <__aeabi_fmul>
 8005836:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f \r\n"   \
 8005838:	4618      	mov	r0, r3
 800583a:	f7fa fe31 	bl	80004a0 <__aeabi_f2d>
 800583e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
          , Pitch_PID_k[2] * 10                                           \
 8005842:	4b7c      	ldr	r3, [pc, #496]	; (8005a34 <_Z4loopv+0x2e0>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	497c      	ldr	r1, [pc, #496]	; (8005a38 <_Z4loopv+0x2e4>)
 8005848:	4618      	mov	r0, r3
 800584a:	f7fb fad7 	bl	8000dfc <__aeabi_fmul>
 800584e:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f \r\n"   \
 8005850:	4618      	mov	r0, r3
 8005852:	f7fa fe25 	bl	80004a0 <__aeabi_f2d>
 8005856:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
          , Roll_PID_k[0] * 10                                            \
 800585a:	4b78      	ldr	r3, [pc, #480]	; (8005a3c <_Z4loopv+0x2e8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4976      	ldr	r1, [pc, #472]	; (8005a38 <_Z4loopv+0x2e4>)
 8005860:	4618      	mov	r0, r3
 8005862:	f7fb facb 	bl	8000dfc <__aeabi_fmul>
 8005866:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f \r\n"   \
 8005868:	4618      	mov	r0, r3
 800586a:	f7fa fe19 	bl	80004a0 <__aeabi_f2d>
 800586e:	e9c7 0108 	strd	r0, r1, [r7, #32]
          , Roll_PID_k[1] * 10                                            \
 8005872:	4b72      	ldr	r3, [pc, #456]	; (8005a3c <_Z4loopv+0x2e8>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	4970      	ldr	r1, [pc, #448]	; (8005a38 <_Z4loopv+0x2e4>)
 8005878:	4618      	mov	r0, r3
 800587a:	f7fb fabf 	bl	8000dfc <__aeabi_fmul>
 800587e:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f \r\n"   \
 8005880:	4618      	mov	r0, r3
 8005882:	f7fa fe0d 	bl	80004a0 <__aeabi_f2d>
 8005886:	e9c7 0106 	strd	r0, r1, [r7, #24]
          , Roll_PID_k[2] * 10                                            \
 800588a:	4b6c      	ldr	r3, [pc, #432]	; (8005a3c <_Z4loopv+0x2e8>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	496a      	ldr	r1, [pc, #424]	; (8005a38 <_Z4loopv+0x2e4>)
 8005890:	4618      	mov	r0, r3
 8005892:	f7fb fab3 	bl	8000dfc <__aeabi_fmul>
 8005896:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f \r\n"   \
 8005898:	4618      	mov	r0, r3
 800589a:	f7fa fe01 	bl	80004a0 <__aeabi_f2d>
 800589e:	e9c7 0104 	strd	r0, r1, [r7, #16]
          , Yaw_PID_k[0] * 10                                             \
 80058a2:	4b67      	ldr	r3, [pc, #412]	; (8005a40 <_Z4loopv+0x2ec>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4964      	ldr	r1, [pc, #400]	; (8005a38 <_Z4loopv+0x2e4>)
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fb faa7 	bl	8000dfc <__aeabi_fmul>
 80058ae:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f \r\n"   \
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fa fdf5 	bl	80004a0 <__aeabi_f2d>
 80058b6:	e9c7 0102 	strd	r0, r1, [r7, #8]
          , Yaw_PID_k[1] * 10                                             \
 80058ba:	4b61      	ldr	r3, [pc, #388]	; (8005a40 <_Z4loopv+0x2ec>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	495e      	ldr	r1, [pc, #376]	; (8005a38 <_Z4loopv+0x2e4>)
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fb fa9b 	bl	8000dfc <__aeabi_fmul>
 80058c6:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f \r\n"   \
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fa fde9 	bl	80004a0 <__aeabi_f2d>
 80058ce:	e9c7 0100 	strd	r0, r1, [r7]
          , Yaw_PID_k[2] * 10                                             \
 80058d2:	4b5b      	ldr	r3, [pc, #364]	; (8005a40 <_Z4loopv+0x2ec>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	4958      	ldr	r1, [pc, #352]	; (8005a38 <_Z4loopv+0x2e4>)
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fb fa8f 	bl	8000dfc <__aeabi_fmul>
 80058de:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f \r\n"   \
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fa fddd 	bl	80004a0 <__aeabi_f2d>
 80058e6:	4682      	mov	sl, r0
 80058e8:	468b      	mov	fp, r1
 80058ea:	4b56      	ldr	r3, [pc, #344]	; (8005a44 <_Z4loopv+0x2f0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fa fdd6 	bl	80004a0 <__aeabi_f2d>
 80058f4:	4680      	mov	r8, r0
 80058f6:	4689      	mov	r9, r1
 80058f8:	4b53      	ldr	r3, [pc, #332]	; (8005a48 <_Z4loopv+0x2f4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fa fdcf 	bl	80004a0 <__aeabi_f2d>
 8005902:	4604      	mov	r4, r0
 8005904:	460d      	mov	r5, r1
 8005906:	4b51      	ldr	r3, [pc, #324]	; (8005a4c <_Z4loopv+0x2f8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f7fa fdc8 	bl	80004a0 <__aeabi_f2d>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8005918:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800591c:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8005920:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8005924:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8005928:	e9d7 3400 	ldrd	r3, r4, [r7]
 800592c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005930:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005934:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005938:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800593c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005940:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005944:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005948:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800594c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005950:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005954:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005958:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800595c:	e9cd 3400 	strd	r3, r4, [sp]
 8005960:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005964:	493a      	ldr	r1, [pc, #232]	; (8005a50 <_Z4loopv+0x2fc>)
 8005966:	f00c fa13 	bl	8011d90 <siprintf>
	        uint8_t x = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
	        while (msg[x] != NULL)
 8005970:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005974:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005978:	5cd3      	ldrb	r3, [r2, r3]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <_Z4loopv+0x236>
	        	x++;
 800597e:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005982:	3301      	adds	r3, #1
 8005984:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
	        while (msg[x] != NULL)
 8005988:	e7f2      	b.n	8005970 <_Z4loopv+0x21c>
	        unsigned char msgTransmit[x];
 800598a:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 800598e:	1e5c      	subs	r4, r3, #1
 8005990:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 8005994:	4623      	mov	r3, r4
 8005996:	3301      	adds	r3, #1
 8005998:	4618      	mov	r0, r3
 800599a:	f04f 0100 	mov.w	r1, #0
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	f04f 0300 	mov.w	r3, #0
 80059a6:	00cb      	lsls	r3, r1, #3
 80059a8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80059ac:	00c2      	lsls	r2, r0, #3
 80059ae:	4623      	mov	r3, r4
 80059b0:	3301      	adds	r3, #1
 80059b2:	4618      	mov	r0, r3
 80059b4:	f04f 0100 	mov.w	r1, #0
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	00cb      	lsls	r3, r1, #3
 80059c2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80059c6:	00c2      	lsls	r2, r0, #3
 80059c8:	4623      	mov	r3, r4
 80059ca:	3301      	adds	r3, #1
 80059cc:	3307      	adds	r3, #7
 80059ce:	08db      	lsrs	r3, r3, #3
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	ebad 0d03 	sub.w	sp, sp, r3
 80059d6:	ab16      	add	r3, sp, #88	; 0x58
 80059d8:	3300      	adds	r3, #0
 80059da:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	        for (size_t i = 0; i < x; i++)
 80059de:	2300      	movs	r3, #0
 80059e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80059e4:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 80059e8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d231      	bcs.n	8005a54 <_Z4loopv+0x300>
	        	msgTransmit[i] = msg[i];
 80059f0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80059f4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80059f8:	4413      	add	r3, r2
 80059fa:	7819      	ldrb	r1, [r3, #0]
 80059fc:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8005a00:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8005a04:	4413      	add	r3, r2
 8005a06:	460a      	mov	r2, r1
 8005a08:	701a      	strb	r2, [r3, #0]
	        for (size_t i = 0; i < x; i++)
 8005a0a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8005a0e:	3301      	adds	r3, #1
 8005a10:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005a14:	e7e6      	b.n	80059e4 <_Z4loopv+0x290>
 8005a16:	bf00      	nop
 8005a18:	40000800 	.word	0x40000800
 8005a1c:	40020000 	.word	0x40020000
 8005a20:	2000083c 	.word	0x2000083c
 8005a24:	20000604 	.word	0x20000604
 8005a28:	200005f4 	.word	0x200005f4
 8005a2c:	20000828 	.word	0x20000828
 8005a30:	c46d8000 	.word	0xc46d8000
 8005a34:	20000004 	.word	0x20000004
 8005a38:	41200000 	.word	0x41200000
 8005a3c:	20000010 	.word	0x20000010
 8005a40:	2000001c 	.word	0x2000001c
 8005a44:	20000058 	.word	0x20000058
 8005a48:	20000060 	.word	0x20000060
 8005a4c:	2000005c 	.word	0x2000005c
 8005a50:	080140a0 	.word	0x080140a0
	        CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 8005a54:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8005a58:	b2a3      	uxth	r3, r4
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f008 feb1 	bl	800e7c8 <CDC_Transmit_FS>
 8005a66:	46b5      	mov	sp, r6
        for (size_t i = 0; i < 1; i++)
 8005a68:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005a72:	e6c7      	b.n	8005804 <_Z4loopv+0xb0>
      break;
 8005a74:	bf00      	nop
    }
    task ++;
 8005a76:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <_Z4loopv+0x36c>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	4b10      	ldr	r3, [pc, #64]	; (8005ac0 <_Z4loopv+0x36c>)
 8005a80:	701a      	strb	r2, [r3, #0]

    while (TIM4->CNT > (fastPPM_Pulselength - fastPPM_calcutationTime));     //wait until TIM4 resets to 0
 8005a82:	4b10      	ldr	r3, [pc, #64]	; (8005ac4 <_Z4loopv+0x370>)
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	f640 1292 	movw	r2, #2450	; 0x992
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	bf8c      	ite	hi
 8005a8e:	2301      	movhi	r3, #1
 8005a90:	2300      	movls	r3, #0
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d000      	beq.n	8005a9a <_Z4loopv+0x346>
 8005a98:	e7f3      	b.n	8005a82 <_Z4loopv+0x32e>
    while (TIM4->CNT < (fastPPM_Pulselength - fastPPM_calcutationTime));     //wait until fastPPM_Pulselength - fastPPM_calcutationTime has passed
 8005a9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <_Z4loopv+0x370>)
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	f640 1291 	movw	r2, #2449	; 0x991
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	bf94      	ite	ls
 8005aa6:	2301      	movls	r3, #1
 8005aa8:	2300      	movhi	r3, #0
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d000      	beq.n	8005ab2 <_Z4loopv+0x35e>
 8005ab0:	e7f3      	b.n	8005a9a <_Z4loopv+0x346>
  }
}
 8005ab2:	bf00      	nop
 8005ab4:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005abe:	bf00      	nop
 8005ac0:	2000083c 	.word	0x2000083c
 8005ac4:	40000800 	.word	0x40000800

08005ac8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ace:	2300      	movs	r3, #0
 8005ad0:	607b      	str	r3, [r7, #4]
 8005ad2:	4b0f      	ldr	r3, [pc, #60]	; (8005b10 <HAL_MspInit+0x48>)
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	4a0e      	ldr	r2, [pc, #56]	; (8005b10 <HAL_MspInit+0x48>)
 8005ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005adc:	6453      	str	r3, [r2, #68]	; 0x44
 8005ade:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <HAL_MspInit+0x48>)
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ae6:	607b      	str	r3, [r7, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005aea:	2300      	movs	r3, #0
 8005aec:	603b      	str	r3, [r7, #0]
 8005aee:	4b08      	ldr	r3, [pc, #32]	; (8005b10 <HAL_MspInit+0x48>)
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	4a07      	ldr	r2, [pc, #28]	; (8005b10 <HAL_MspInit+0x48>)
 8005af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af8:	6413      	str	r3, [r2, #64]	; 0x40
 8005afa:	4b05      	ldr	r3, [pc, #20]	; (8005b10 <HAL_MspInit+0x48>)
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr
 8005b10:	40023800 	.word	0x40023800

08005b14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08a      	sub	sp, #40	; 0x28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b1c:	f107 0314 	add.w	r3, r7, #20
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	605a      	str	r2, [r3, #4]
 8005b26:	609a      	str	r2, [r3, #8]
 8005b28:	60da      	str	r2, [r3, #12]
 8005b2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a17      	ldr	r2, [pc, #92]	; (8005b90 <HAL_ADC_MspInit+0x7c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d127      	bne.n	8005b86 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005b36:	2300      	movs	r3, #0
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	4b16      	ldr	r3, [pc, #88]	; (8005b94 <HAL_ADC_MspInit+0x80>)
 8005b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3e:	4a15      	ldr	r2, [pc, #84]	; (8005b94 <HAL_ADC_MspInit+0x80>)
 8005b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b44:	6453      	str	r3, [r2, #68]	; 0x44
 8005b46:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <HAL_ADC_MspInit+0x80>)
 8005b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <HAL_ADC_MspInit+0x80>)
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	4a0e      	ldr	r2, [pc, #56]	; (8005b94 <HAL_ADC_MspInit+0x80>)
 8005b5c:	f043 0304 	orr.w	r3, r3, #4
 8005b60:	6313      	str	r3, [r2, #48]	; 0x30
 8005b62:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <HAL_ADC_MspInit+0x80>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ONBOARD_ADC_2_Pin|ONBOARD_ADC_1_Pin;
 8005b6e:	2306      	movs	r3, #6
 8005b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b72:	2303      	movs	r3, #3
 8005b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b7a:	f107 0314 	add.w	r3, r7, #20
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4805      	ldr	r0, [pc, #20]	; (8005b98 <HAL_ADC_MspInit+0x84>)
 8005b82:	f001 fb35 	bl	80071f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005b86:	bf00      	nop
 8005b88:	3728      	adds	r7, #40	; 0x28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	40012000 	.word	0x40012000
 8005b94:	40023800 	.word	0x40023800
 8005b98:	40020800 	.word	0x40020800

08005b9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08a      	sub	sp, #40	; 0x28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ba4:	f107 0314 	add.w	r3, r7, #20
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	605a      	str	r2, [r3, #4]
 8005bae:	609a      	str	r2, [r3, #8]
 8005bb0:	60da      	str	r2, [r3, #12]
 8005bb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a19      	ldr	r2, [pc, #100]	; (8005c20 <HAL_I2C_MspInit+0x84>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d12c      	bne.n	8005c18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	4b18      	ldr	r3, [pc, #96]	; (8005c24 <HAL_I2C_MspInit+0x88>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc6:	4a17      	ldr	r2, [pc, #92]	; (8005c24 <HAL_I2C_MspInit+0x88>)
 8005bc8:	f043 0302 	orr.w	r3, r3, #2
 8005bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8005bce:	4b15      	ldr	r3, [pc, #84]	; (8005c24 <HAL_I2C_MspInit+0x88>)
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	613b      	str	r3, [r7, #16]
 8005bd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005bda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005be0:	2312      	movs	r3, #18
 8005be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005be8:	2303      	movs	r3, #3
 8005bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005bec:	2304      	movs	r3, #4
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bf0:	f107 0314 	add.w	r3, r7, #20
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	480c      	ldr	r0, [pc, #48]	; (8005c28 <HAL_I2C_MspInit+0x8c>)
 8005bf8:	f001 fafa 	bl	80071f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <HAL_I2C_MspInit+0x88>)
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	4a07      	ldr	r2, [pc, #28]	; (8005c24 <HAL_I2C_MspInit+0x88>)
 8005c06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8005c0c:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <HAL_I2C_MspInit+0x88>)
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005c18:	bf00      	nop
 8005c1a:	3728      	adds	r7, #40	; 0x28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40005400 	.word	0x40005400
 8005c24:	40023800 	.word	0x40023800
 8005c28:	40020400 	.word	0x40020400

08005c2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a14      	ldr	r2, [pc, #80]	; (8005c8c <HAL_TIM_PWM_MspInit+0x60>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d10e      	bne.n	8005c5c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	4b13      	ldr	r3, [pc, #76]	; (8005c90 <HAL_TIM_PWM_MspInit+0x64>)
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	4a12      	ldr	r2, [pc, #72]	; (8005c90 <HAL_TIM_PWM_MspInit+0x64>)
 8005c48:	f043 0302 	orr.w	r3, r3, #2
 8005c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c4e:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <HAL_TIM_PWM_MspInit+0x64>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005c5a:	e012      	b.n	8005c82 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a0c      	ldr	r2, [pc, #48]	; (8005c94 <HAL_TIM_PWM_MspInit+0x68>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d10d      	bne.n	8005c82 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005c66:	2300      	movs	r3, #0
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <HAL_TIM_PWM_MspInit+0x64>)
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	4a08      	ldr	r2, [pc, #32]	; (8005c90 <HAL_TIM_PWM_MspInit+0x64>)
 8005c70:	f043 0304 	orr.w	r3, r3, #4
 8005c74:	6413      	str	r3, [r2, #64]	; 0x40
 8005c76:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <HAL_TIM_PWM_MspInit+0x64>)
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	f003 0304 	and.w	r3, r3, #4
 8005c7e:	60bb      	str	r3, [r7, #8]
 8005c80:	68bb      	ldr	r3, [r7, #8]
}
 8005c82:	bf00      	nop
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40023800 	.word	0x40023800
 8005c94:	40000800 	.word	0x40000800

08005c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a0a      	ldr	r2, [pc, #40]	; (8005cd0 <HAL_TIM_Base_MspInit+0x38>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d10d      	bne.n	8005cc6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	4b09      	ldr	r3, [pc, #36]	; (8005cd4 <HAL_TIM_Base_MspInit+0x3c>)
 8005cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb2:	4a08      	ldr	r2, [pc, #32]	; (8005cd4 <HAL_TIM_Base_MspInit+0x3c>)
 8005cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8005cba:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <HAL_TIM_Base_MspInit+0x3c>)
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bc80      	pop	{r7}
 8005cce:	4770      	bx	lr
 8005cd0:	40014800 	.word	0x40014800
 8005cd4:	40023800 	.word	0x40023800

08005cd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08a      	sub	sp, #40	; 0x28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ce0:	f107 0314 	add.w	r3, r7, #20
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	605a      	str	r2, [r3, #4]
 8005cea:	609a      	str	r2, [r3, #8]
 8005cec:	60da      	str	r2, [r3, #12]
 8005cee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a24      	ldr	r2, [pc, #144]	; (8005d88 <HAL_TIM_MspPostInit+0xb0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d11e      	bne.n	8005d38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	4b23      	ldr	r3, [pc, #140]	; (8005d8c <HAL_TIM_MspPostInit+0xb4>)
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	4a22      	ldr	r2, [pc, #136]	; (8005d8c <HAL_TIM_MspPostInit+0xb4>)
 8005d04:	f043 0304 	orr.w	r3, r3, #4
 8005d08:	6313      	str	r3, [r2, #48]	; 0x30
 8005d0a:	4b20      	ldr	r3, [pc, #128]	; (8005d8c <HAL_TIM_MspPostInit+0xb4>)
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	613b      	str	r3, [r7, #16]
 8005d14:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ONBOARD_WRITE_4_Pin;
 8005d16:	2340      	movs	r3, #64	; 0x40
 8005d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d22:	2300      	movs	r3, #0
 8005d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d26:	2302      	movs	r3, #2
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_4_GPIO_Port, &GPIO_InitStruct);
 8005d2a:	f107 0314 	add.w	r3, r7, #20
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4817      	ldr	r0, [pc, #92]	; (8005d90 <HAL_TIM_MspPostInit+0xb8>)
 8005d32:	f001 fa5d 	bl	80071f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005d36:	e022      	b.n	8005d7e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <HAL_TIM_MspPostInit+0xbc>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d11d      	bne.n	8005d7e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <HAL_TIM_MspPostInit+0xb4>)
 8005d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4a:	4a10      	ldr	r2, [pc, #64]	; (8005d8c <HAL_TIM_MspPostInit+0xb4>)
 8005d4c:	f043 0302 	orr.w	r3, r3, #2
 8005d50:	6313      	str	r3, [r2, #48]	; 0x30
 8005d52:	4b0e      	ldr	r3, [pc, #56]	; (8005d8c <HAL_TIM_MspPostInit+0xb4>)
 8005d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ONBOARD_WRITE_1_Pin;
 8005d5e:	2340      	movs	r3, #64	; 0x40
 8005d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d62:	2302      	movs	r3, #2
 8005d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005d6e:	2302      	movs	r3, #2
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_1_GPIO_Port, &GPIO_InitStruct);
 8005d72:	f107 0314 	add.w	r3, r7, #20
 8005d76:	4619      	mov	r1, r3
 8005d78:	4807      	ldr	r0, [pc, #28]	; (8005d98 <HAL_TIM_MspPostInit+0xc0>)
 8005d7a:	f001 fa39 	bl	80071f0 <HAL_GPIO_Init>
}
 8005d7e:	bf00      	nop
 8005d80:	3728      	adds	r7, #40	; 0x28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40000400 	.word	0x40000400
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	40020800 	.word	0x40020800
 8005d94:	40000800 	.word	0x40000800
 8005d98:	40020400 	.word	0x40020400

08005d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	; 0x28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005da4:	f107 0314 	add.w	r3, r7, #20
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	605a      	str	r2, [r3, #4]
 8005dae:	609a      	str	r2, [r3, #8]
 8005db0:	60da      	str	r2, [r3, #12]
 8005db2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a44      	ldr	r2, [pc, #272]	; (8005ecc <HAL_UART_MspInit+0x130>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	f040 8081 	bne.w	8005ec2 <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	4b42      	ldr	r3, [pc, #264]	; (8005ed0 <HAL_UART_MspInit+0x134>)
 8005dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc8:	4a41      	ldr	r2, [pc, #260]	; (8005ed0 <HAL_UART_MspInit+0x134>)
 8005dca:	f043 0310 	orr.w	r3, r3, #16
 8005dce:	6453      	str	r3, [r2, #68]	; 0x44
 8005dd0:	4b3f      	ldr	r3, [pc, #252]	; (8005ed0 <HAL_UART_MspInit+0x134>)
 8005dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	613b      	str	r3, [r7, #16]
 8005dda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	4b3b      	ldr	r3, [pc, #236]	; (8005ed0 <HAL_UART_MspInit+0x134>)
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	4a3a      	ldr	r2, [pc, #232]	; (8005ed0 <HAL_UART_MspInit+0x134>)
 8005de6:	f043 0301 	orr.w	r3, r3, #1
 8005dea:	6313      	str	r3, [r2, #48]	; 0x30
 8005dec:	4b38      	ldr	r3, [pc, #224]	; (8005ed0 <HAL_UART_MspInit+0x134>)
 8005dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60bb      	str	r3, [r7, #8]
 8005dfc:	4b34      	ldr	r3, [pc, #208]	; (8005ed0 <HAL_UART_MspInit+0x134>)
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e00:	4a33      	ldr	r2, [pc, #204]	; (8005ed0 <HAL_UART_MspInit+0x134>)
 8005e02:	f043 0302 	orr.w	r3, r3, #2
 8005e06:	6313      	str	r3, [r2, #48]	; 0x30
 8005e08:	4b31      	ldr	r3, [pc, #196]	; (8005ed0 <HAL_UART_MspInit+0x134>)
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	60bb      	str	r3, [r7, #8]
 8005e12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e22:	2303      	movs	r3, #3
 8005e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005e26:	2307      	movs	r3, #7
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e2a:	f107 0314 	add.w	r3, r7, #20
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4828      	ldr	r0, [pc, #160]	; (8005ed4 <HAL_UART_MspInit+0x138>)
 8005e32:	f001 f9dd 	bl	80071f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ONBOARD_READ_4_Pin;
 8005e36:	2380      	movs	r3, #128	; 0x80
 8005e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e42:	2303      	movs	r3, #3
 8005e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005e46:	2307      	movs	r3, #7
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_READ_4_GPIO_Port, &GPIO_InitStruct);
 8005e4a:	f107 0314 	add.w	r3, r7, #20
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4821      	ldr	r0, [pc, #132]	; (8005ed8 <HAL_UART_MspInit+0x13c>)
 8005e52:	f001 f9cd 	bl	80071f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005e56:	4b21      	ldr	r3, [pc, #132]	; (8005edc <HAL_UART_MspInit+0x140>)
 8005e58:	4a21      	ldr	r2, [pc, #132]	; (8005ee0 <HAL_UART_MspInit+0x144>)
 8005e5a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005e5c:	4b1f      	ldr	r3, [pc, #124]	; (8005edc <HAL_UART_MspInit+0x140>)
 8005e5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e62:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e64:	4b1d      	ldr	r3, [pc, #116]	; (8005edc <HAL_UART_MspInit+0x140>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e6a:	4b1c      	ldr	r3, [pc, #112]	; (8005edc <HAL_UART_MspInit+0x140>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e70:	4b1a      	ldr	r3, [pc, #104]	; (8005edc <HAL_UART_MspInit+0x140>)
 8005e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e76:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e78:	4b18      	ldr	r3, [pc, #96]	; (8005edc <HAL_UART_MspInit+0x140>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e7e:	4b17      	ldr	r3, [pc, #92]	; (8005edc <HAL_UART_MspInit+0x140>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005e84:	4b15      	ldr	r3, [pc, #84]	; (8005edc <HAL_UART_MspInit+0x140>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e8a:	4b14      	ldr	r3, [pc, #80]	; (8005edc <HAL_UART_MspInit+0x140>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e90:	4b12      	ldr	r3, [pc, #72]	; (8005edc <HAL_UART_MspInit+0x140>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005e96:	4811      	ldr	r0, [pc, #68]	; (8005edc <HAL_UART_MspInit+0x140>)
 8005e98:	f000 fdac 	bl	80069f4 <HAL_DMA_Init>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8005ea2:	f7fe ff13 	bl	8004ccc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a0c      	ldr	r2, [pc, #48]	; (8005edc <HAL_UART_MspInit+0x140>)
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38
 8005eac:	4a0b      	ldr	r2, [pc, #44]	; (8005edc <HAL_UART_MspInit+0x140>)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	2025      	movs	r0, #37	; 0x25
 8005eb8:	f000 fd57 	bl	800696a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005ebc:	2025      	movs	r0, #37	; 0x25
 8005ebe:	f000 fd70 	bl	80069a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005ec2:	bf00      	nop
 8005ec4:	3728      	adds	r7, #40	; 0x28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	40011000 	.word	0x40011000
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	40020000 	.word	0x40020000
 8005ed8:	40020400 	.word	0x40020400
 8005edc:	200007c0 	.word	0x200007c0
 8005ee0:	40026440 	.word	0x40026440

08005ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005ee8:	f004 f8f2 	bl	800a0d0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005eec:	e7fe      	b.n	8005eec <NMI_Handler+0x8>

08005eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ef2:	e7fe      	b.n	8005ef2 <HardFault_Handler+0x4>

08005ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ef8:	e7fe      	b.n	8005ef8 <MemManage_Handler+0x4>

08005efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005efa:	b480      	push	{r7}
 8005efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005efe:	e7fe      	b.n	8005efe <BusFault_Handler+0x4>

08005f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f04:	e7fe      	b.n	8005f04 <UsageFault_Handler+0x4>

08005f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f06:	b480      	push	{r7}
 8005f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f0a:	bf00      	nop
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr

08005f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f12:	b480      	push	{r7}
 8005f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f16:	bf00      	nop
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bc80      	pop	{r7}
 8005f1c:	4770      	bx	lr

08005f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f22:	bf00      	nop
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bc80      	pop	{r7}
 8005f28:	4770      	bx	lr

08005f2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f2e:	f000 f963 	bl	80061f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f32:	bf00      	nop
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005f3c:	4802      	ldr	r0, [pc, #8]	; (8005f48 <USART1_IRQHandler+0x10>)
 8005f3e:	f004 ff41 	bl	800adc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005f42:	bf00      	nop
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	2000077c 	.word	0x2000077c

08005f4c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005f50:	4802      	ldr	r0, [pc, #8]	; (8005f5c <DMA2_Stream2_IRQHandler+0x10>)
 8005f52:	f000 fee7 	bl	8006d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005f56:	bf00      	nop
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	200007c0 	.word	0x200007c0

08005f60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005f64:	4802      	ldr	r0, [pc, #8]	; (8005f70 <OTG_FS_IRQHandler+0x10>)
 8005f66:	f002 fc26 	bl	80087b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005f6a:	bf00      	nop
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20001d18 	.word	0x20001d18

08005f74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
	return 1;
 8005f78:	2301      	movs	r3, #1
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bc80      	pop	{r7}
 8005f80:	4770      	bx	lr

08005f82 <_kill>:

int _kill(int pid, int sig)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005f8c:	f00b f984 	bl	8011298 <__errno>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2216      	movs	r2, #22
 8005f94:	601a      	str	r2, [r3, #0]
	return -1;
 8005f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <_exit>:

void _exit (int status)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b082      	sub	sp, #8
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005faa:	f04f 31ff 	mov.w	r1, #4294967295
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7ff ffe7 	bl	8005f82 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005fb4:	e7fe      	b.n	8005fb4 <_exit+0x12>

08005fb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b086      	sub	sp, #24
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	e00a      	b.n	8005fde <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005fc8:	f3af 8000 	nop.w
 8005fcc:	4601      	mov	r1, r0
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	60ba      	str	r2, [r7, #8]
 8005fd4:	b2ca      	uxtb	r2, r1
 8005fd6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	dbf0      	blt.n	8005fc8 <_read+0x12>
	}

return len;
 8005fe6:	687b      	ldr	r3, [r7, #4]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	e009      	b.n	8006016 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	60ba      	str	r2, [r7, #8]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	4618      	mov	r0, r3
 800600c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	3301      	adds	r3, #1
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	429a      	cmp	r2, r3
 800601c:	dbf1      	blt.n	8006002 <_write+0x12>
	}
	return len;
 800601e:	687b      	ldr	r3, [r7, #4]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <_close>:

int _close(int file)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
	return -1;
 8006030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006034:	4618      	mov	r0, r3
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	bc80      	pop	{r7}
 800603c:	4770      	bx	lr

0800603e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800604e:	605a      	str	r2, [r3, #4]
	return 0;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	bc80      	pop	{r7}
 800605a:	4770      	bx	lr

0800605c <_isatty>:

int _isatty(int file)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	return 1;
 8006064:	2301      	movs	r3, #1
}
 8006066:	4618      	mov	r0, r3
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	bc80      	pop	{r7}
 800606e:	4770      	bx	lr

08006070 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
	return 0;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	bc80      	pop	{r7}
 8006086:	4770      	bx	lr

08006088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006090:	4a14      	ldr	r2, [pc, #80]	; (80060e4 <_sbrk+0x5c>)
 8006092:	4b15      	ldr	r3, [pc, #84]	; (80060e8 <_sbrk+0x60>)
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800609c:	4b13      	ldr	r3, [pc, #76]	; (80060ec <_sbrk+0x64>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d102      	bne.n	80060aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80060a4:	4b11      	ldr	r3, [pc, #68]	; (80060ec <_sbrk+0x64>)
 80060a6:	4a12      	ldr	r2, [pc, #72]	; (80060f0 <_sbrk+0x68>)
 80060a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80060aa:	4b10      	ldr	r3, [pc, #64]	; (80060ec <_sbrk+0x64>)
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4413      	add	r3, r2
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d207      	bcs.n	80060c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80060b8:	f00b f8ee 	bl	8011298 <__errno>
 80060bc:	4603      	mov	r3, r0
 80060be:	220c      	movs	r2, #12
 80060c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80060c2:	f04f 33ff 	mov.w	r3, #4294967295
 80060c6:	e009      	b.n	80060dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80060c8:	4b08      	ldr	r3, [pc, #32]	; (80060ec <_sbrk+0x64>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80060ce:	4b07      	ldr	r3, [pc, #28]	; (80060ec <_sbrk+0x64>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4413      	add	r3, r2
 80060d6:	4a05      	ldr	r2, [pc, #20]	; (80060ec <_sbrk+0x64>)
 80060d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80060da:	68fb      	ldr	r3, [r7, #12]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20020000 	.word	0x20020000
 80060e8:	00000400 	.word	0x00000400
 80060ec:	20000840 	.word	0x20000840
 80060f0:	20002128 	.word	0x20002128

080060f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80060f8:	bf00      	nop
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr

08006100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006138 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006104:	480d      	ldr	r0, [pc, #52]	; (800613c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006106:	490e      	ldr	r1, [pc, #56]	; (8006140 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006108:	4a0e      	ldr	r2, [pc, #56]	; (8006144 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800610a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800610c:	e002      	b.n	8006114 <LoopCopyDataInit>

0800610e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800610e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006112:	3304      	adds	r3, #4

08006114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006118:	d3f9      	bcc.n	800610e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800611a:	4a0b      	ldr	r2, [pc, #44]	; (8006148 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800611c:	4c0b      	ldr	r4, [pc, #44]	; (800614c <LoopFillZerobss+0x26>)
  movs r3, #0
 800611e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006120:	e001      	b.n	8006126 <LoopFillZerobss>

08006122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006124:	3204      	adds	r2, #4

08006126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006128:	d3fb      	bcc.n	8006122 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800612a:	f7ff ffe3 	bl	80060f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800612e:	f00b f8b9 	bl	80112a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006132:	f7fe fac3 	bl	80046bc <main>
  bx  lr    
 8006136:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006138:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800613c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006140:	200003b8 	.word	0x200003b8
  ldr r2, =_sidata
 8006144:	08015374 	.word	0x08015374
  ldr r2, =_sbss
 8006148:	200003b8 	.word	0x200003b8
  ldr r4, =_ebss
 800614c:	20002128 	.word	0x20002128

08006150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006150:	e7fe      	b.n	8006150 <ADC_IRQHandler>
	...

08006154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006158:	4b0e      	ldr	r3, [pc, #56]	; (8006194 <HAL_Init+0x40>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a0d      	ldr	r2, [pc, #52]	; (8006194 <HAL_Init+0x40>)
 800615e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8006164:	4b0b      	ldr	r3, [pc, #44]	; (8006194 <HAL_Init+0x40>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a0a      	ldr	r2, [pc, #40]	; (8006194 <HAL_Init+0x40>)
 800616a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800616e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006170:	4b08      	ldr	r3, [pc, #32]	; (8006194 <HAL_Init+0x40>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a07      	ldr	r2, [pc, #28]	; (8006194 <HAL_Init+0x40>)
 8006176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800617a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800617c:	2003      	movs	r0, #3
 800617e:	f000 fbe9 	bl	8006954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006182:	200f      	movs	r0, #15
 8006184:	f000 f808 	bl	8006198 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006188:	f7ff fc9e 	bl	8005ac8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	40023c00 	.word	0x40023c00

08006198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80061a0:	4b12      	ldr	r3, [pc, #72]	; (80061ec <HAL_InitTick+0x54>)
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b12      	ldr	r3, [pc, #72]	; (80061f0 <HAL_InitTick+0x58>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	4619      	mov	r1, r3
 80061aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80061b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 fc0f 	bl	80069da <HAL_SYSTICK_Config>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e00e      	b.n	80061e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b0f      	cmp	r3, #15
 80061ca:	d80a      	bhi.n	80061e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061cc:	2200      	movs	r2, #0
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	f000 fbc9 	bl	800696a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061d8:	4a06      	ldr	r2, [pc, #24]	; (80061f4 <HAL_InitTick+0x5c>)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	e000      	b.n	80061e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20000064 	.word	0x20000064
 80061f0:	2000006c 	.word	0x2000006c
 80061f4:	20000068 	.word	0x20000068

080061f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061fc:	4b05      	ldr	r3, [pc, #20]	; (8006214 <HAL_IncTick+0x1c>)
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	4b05      	ldr	r3, [pc, #20]	; (8006218 <HAL_IncTick+0x20>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4413      	add	r3, r2
 8006208:	4a03      	ldr	r2, [pc, #12]	; (8006218 <HAL_IncTick+0x20>)
 800620a:	6013      	str	r3, [r2, #0]
}
 800620c:	bf00      	nop
 800620e:	46bd      	mov	sp, r7
 8006210:	bc80      	pop	{r7}
 8006212:	4770      	bx	lr
 8006214:	2000006c 	.word	0x2000006c
 8006218:	20000850 	.word	0x20000850

0800621c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
  return uwTick;
 8006220:	4b02      	ldr	r3, [pc, #8]	; (800622c <HAL_GetTick+0x10>)
 8006222:	681b      	ldr	r3, [r3, #0]
}
 8006224:	4618      	mov	r0, r3
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr
 800622c:	20000850 	.word	0x20000850

08006230 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006238:	f7ff fff0 	bl	800621c <HAL_GetTick>
 800623c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d005      	beq.n	8006256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800624a:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <HAL_Delay+0x44>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006256:	bf00      	nop
 8006258:	f7ff ffe0 	bl	800621c <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	429a      	cmp	r2, r3
 8006266:	d8f7      	bhi.n	8006258 <HAL_Delay+0x28>
  {
  }
}
 8006268:	bf00      	nop
 800626a:	bf00      	nop
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	2000006c 	.word	0x2000006c

08006278 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e033      	b.n	80062f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	2b00      	cmp	r3, #0
 8006294:	d109      	bne.n	80062aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff fc3c 	bl	8005b14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	f003 0310 	and.w	r3, r3, #16
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d118      	bne.n	80062e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80062be:	f023 0302 	bic.w	r3, r3, #2
 80062c2:	f043 0202 	orr.w	r2, r3, #2
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f94c 	bl	8006568 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	f023 0303 	bic.w	r3, r3, #3
 80062de:	f043 0201 	orr.w	r2, r3, #1
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	641a      	str	r2, [r3, #64]	; 0x40
 80062e6:	e001      	b.n	80062ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
	...

08006300 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006312:	2b01      	cmp	r3, #1
 8006314:	d101      	bne.n	800631a <HAL_ADC_Start+0x1a>
 8006316:	2302      	movs	r3, #2
 8006318:	e095      	b.n	8006446 <HAL_ADC_Start+0x146>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b01      	cmp	r3, #1
 800632e:	d018      	beq.n	8006362 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0201 	orr.w	r2, r2, #1
 800633e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006340:	4b43      	ldr	r3, [pc, #268]	; (8006450 <HAL_ADC_Start+0x150>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a43      	ldr	r2, [pc, #268]	; (8006454 <HAL_ADC_Start+0x154>)
 8006346:	fba2 2303 	umull	r2, r3, r2, r3
 800634a:	0c9a      	lsrs	r2, r3, #18
 800634c:	4613      	mov	r3, r2
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	4413      	add	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8006354:	e002      	b.n	800635c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3b01      	subs	r3, #1
 800635a:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1f9      	bne.n	8006356 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b01      	cmp	r3, #1
 800636e:	d15d      	bne.n	800642c <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006378:	f023 0301 	bic.w	r3, r3, #1
 800637c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800639a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ae:	d106      	bne.n	80063be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b4:	f023 0206 	bic.w	r2, r3, #6
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	645a      	str	r2, [r3, #68]	; 0x44
 80063bc:	e002      	b.n	80063c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80063d4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80063d6:	4b20      	ldr	r3, [pc, #128]	; (8006458 <HAL_ADC_Start+0x158>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10f      	bne.n	8006402 <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d129      	bne.n	8006444 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80063fe:	609a      	str	r2, [r3, #8]
 8006400:	e020      	b.n	8006444 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a15      	ldr	r2, [pc, #84]	; (800645c <HAL_ADC_Start+0x15c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d11b      	bne.n	8006444 <HAL_ADC_Start+0x144>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d114      	bne.n	8006444 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006428:	609a      	str	r2, [r3, #8]
 800642a:	e00b      	b.n	8006444 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006430:	f043 0210 	orr.w	r2, r3, #16
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643c:	f043 0201 	orr.w	r2, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	bc80      	pop	{r7}
 800644e:	4770      	bx	lr
 8006450:	20000064 	.word	0x20000064
 8006454:	431bde83 	.word	0x431bde83
 8006458:	40012300 	.word	0x40012300
 800645c:	40012000 	.word	0x40012000

08006460 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800647c:	d113      	bne.n	80064a6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800648c:	d10b      	bne.n	80064a6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	f043 0220 	orr.w	r2, r3, #32
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e05c      	b.n	8006560 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80064a6:	f7ff feb9 	bl	800621c <HAL_GetTick>
 80064aa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80064ac:	e01a      	b.n	80064e4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b4:	d016      	beq.n	80064e4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <HAL_ADC_PollForConversion+0x6c>
 80064bc:	f7ff feae 	bl	800621c <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d20b      	bcs.n	80064e4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	f043 0204 	orr.w	r2, r3, #4
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e03d      	b.n	8006560 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d1dd      	bne.n	80064ae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f06f 0212 	mvn.w	r2, #18
 80064fa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d123      	bne.n	800655e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800651a:	2b00      	cmp	r3, #0
 800651c:	d11f      	bne.n	800655e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006528:	2b00      	cmp	r3, #0
 800652a:	d006      	beq.n	800653a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006536:	2b00      	cmp	r3, #0
 8006538:	d111      	bne.n	800655e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d105      	bne.n	800655e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	f043 0201 	orr.w	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006570:	4b7e      	ldr	r3, [pc, #504]	; (800676c <ADC_Init+0x204>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	4a7d      	ldr	r2, [pc, #500]	; (800676c <ADC_Init+0x204>)
 8006576:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800657a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800657c:	4b7b      	ldr	r3, [pc, #492]	; (800676c <ADC_Init+0x204>)
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	4979      	ldr	r1, [pc, #484]	; (800676c <ADC_Init+0x204>)
 8006586:	4313      	orrs	r3, r2
 8006588:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006598:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6859      	ldr	r1, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	021a      	lsls	r2, r3, #8
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80065bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6859      	ldr	r1, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6899      	ldr	r1, [r3, #8]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68da      	ldr	r2, [r3, #12]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f6:	4a5e      	ldr	r2, [pc, #376]	; (8006770 <ADC_Init+0x208>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d022      	beq.n	8006642 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800660a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6899      	ldr	r1, [r3, #8]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800662c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6899      	ldr	r1, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	609a      	str	r2, [r3, #8]
 8006640:	e00f      	b.n	8006662 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006650:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006660:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0202 	bic.w	r2, r2, #2
 8006670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6899      	ldr	r1, [r3, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	7e1b      	ldrb	r3, [r3, #24]
 800667c:	005a      	lsls	r2, r3, #1
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d027      	beq.n	80066e0 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800669e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80066ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	3b01      	subs	r3, #1
 80066b6:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80066ba:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	fa92 f2a2 	rbit	r2, r2
 80066c2:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	fab2 f282 	clz	r2, r2
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	fa03 f102 	lsl.w	r1, r3, r2
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	605a      	str	r2, [r3, #4]
 80066de:	e007      	b.n	80066f0 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80066fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	3b01      	subs	r3, #1
 800670c:	051a      	lsls	r2, r3, #20
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6899      	ldr	r1, [r3, #8]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006732:	025a      	lsls	r2, r3, #9
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800674a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6899      	ldr	r1, [r3, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	029a      	lsls	r2, r3, #10
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	609a      	str	r2, [r3, #8]
}
 8006760:	bf00      	nop
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	bc80      	pop	{r7}
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40012300 	.word	0x40012300
 8006770:	0f000001 	.word	0x0f000001

08006774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f003 0307 	and.w	r3, r3, #7
 8006782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006784:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <__NVIC_SetPriorityGrouping+0x44>)
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006790:	4013      	ands	r3, r2
 8006792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800679c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80067a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067a6:	4a04      	ldr	r2, [pc, #16]	; (80067b8 <__NVIC_SetPriorityGrouping+0x44>)
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	60d3      	str	r3, [r2, #12]
}
 80067ac:	bf00      	nop
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bc80      	pop	{r7}
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	e000ed00 	.word	0xe000ed00

080067bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067c0:	4b04      	ldr	r3, [pc, #16]	; (80067d4 <__NVIC_GetPriorityGrouping+0x18>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	0a1b      	lsrs	r3, r3, #8
 80067c6:	f003 0307 	and.w	r3, r3, #7
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bc80      	pop	{r7}
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	e000ed00 	.word	0xe000ed00

080067d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	db0b      	blt.n	8006802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067ea:	79fb      	ldrb	r3, [r7, #7]
 80067ec:	f003 021f 	and.w	r2, r3, #31
 80067f0:	4906      	ldr	r1, [pc, #24]	; (800680c <__NVIC_EnableIRQ+0x34>)
 80067f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	2001      	movs	r0, #1
 80067fa:	fa00 f202 	lsl.w	r2, r0, r2
 80067fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr
 800680c:	e000e100 	.word	0xe000e100

08006810 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800681a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681e:	2b00      	cmp	r3, #0
 8006820:	db12      	blt.n	8006848 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006822:	79fb      	ldrb	r3, [r7, #7]
 8006824:	f003 021f 	and.w	r2, r3, #31
 8006828:	490a      	ldr	r1, [pc, #40]	; (8006854 <__NVIC_DisableIRQ+0x44>)
 800682a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800682e:	095b      	lsrs	r3, r3, #5
 8006830:	2001      	movs	r0, #1
 8006832:	fa00 f202 	lsl.w	r2, r0, r2
 8006836:	3320      	adds	r3, #32
 8006838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800683c:	f3bf 8f4f 	dsb	sy
}
 8006840:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006842:	f3bf 8f6f 	isb	sy
}
 8006846:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	bc80      	pop	{r7}
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	e000e100 	.word	0xe000e100

08006858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	4603      	mov	r3, r0
 8006860:	6039      	str	r1, [r7, #0]
 8006862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006868:	2b00      	cmp	r3, #0
 800686a:	db0a      	blt.n	8006882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	b2da      	uxtb	r2, r3
 8006870:	490c      	ldr	r1, [pc, #48]	; (80068a4 <__NVIC_SetPriority+0x4c>)
 8006872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006876:	0112      	lsls	r2, r2, #4
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	440b      	add	r3, r1
 800687c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006880:	e00a      	b.n	8006898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	b2da      	uxtb	r2, r3
 8006886:	4908      	ldr	r1, [pc, #32]	; (80068a8 <__NVIC_SetPriority+0x50>)
 8006888:	79fb      	ldrb	r3, [r7, #7]
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	3b04      	subs	r3, #4
 8006890:	0112      	lsls	r2, r2, #4
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	440b      	add	r3, r1
 8006896:	761a      	strb	r2, [r3, #24]
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	bc80      	pop	{r7}
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	e000e100 	.word	0xe000e100
 80068a8:	e000ed00 	.word	0xe000ed00

080068ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b089      	sub	sp, #36	; 0x24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f003 0307 	and.w	r3, r3, #7
 80068be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f1c3 0307 	rsb	r3, r3, #7
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	bf28      	it	cs
 80068ca:	2304      	movcs	r3, #4
 80068cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	3304      	adds	r3, #4
 80068d2:	2b06      	cmp	r3, #6
 80068d4:	d902      	bls.n	80068dc <NVIC_EncodePriority+0x30>
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	3b03      	subs	r3, #3
 80068da:	e000      	b.n	80068de <NVIC_EncodePriority+0x32>
 80068dc:	2300      	movs	r3, #0
 80068de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068e0:	f04f 32ff 	mov.w	r2, #4294967295
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ea:	43da      	mvns	r2, r3
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	401a      	ands	r2, r3
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068f4:	f04f 31ff 	mov.w	r1, #4294967295
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	fa01 f303 	lsl.w	r3, r1, r3
 80068fe:	43d9      	mvns	r1, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006904:	4313      	orrs	r3, r2
         );
}
 8006906:	4618      	mov	r0, r3
 8006908:	3724      	adds	r7, #36	; 0x24
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr

08006910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3b01      	subs	r3, #1
 800691c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006920:	d301      	bcc.n	8006926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006922:	2301      	movs	r3, #1
 8006924:	e00f      	b.n	8006946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006926:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <SysTick_Config+0x40>)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3b01      	subs	r3, #1
 800692c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800692e:	210f      	movs	r1, #15
 8006930:	f04f 30ff 	mov.w	r0, #4294967295
 8006934:	f7ff ff90 	bl	8006858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006938:	4b05      	ldr	r3, [pc, #20]	; (8006950 <SysTick_Config+0x40>)
 800693a:	2200      	movs	r2, #0
 800693c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800693e:	4b04      	ldr	r3, [pc, #16]	; (8006950 <SysTick_Config+0x40>)
 8006940:	2207      	movs	r2, #7
 8006942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	e000e010 	.word	0xe000e010

08006954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff ff09 	bl	8006774 <__NVIC_SetPriorityGrouping>
}
 8006962:	bf00      	nop
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800696a:	b580      	push	{r7, lr}
 800696c:	b086      	sub	sp, #24
 800696e:	af00      	add	r7, sp, #0
 8006970:	4603      	mov	r3, r0
 8006972:	60b9      	str	r1, [r7, #8]
 8006974:	607a      	str	r2, [r7, #4]
 8006976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006978:	2300      	movs	r3, #0
 800697a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800697c:	f7ff ff1e 	bl	80067bc <__NVIC_GetPriorityGrouping>
 8006980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	68b9      	ldr	r1, [r7, #8]
 8006986:	6978      	ldr	r0, [r7, #20]
 8006988:	f7ff ff90 	bl	80068ac <NVIC_EncodePriority>
 800698c:	4602      	mov	r2, r0
 800698e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006992:	4611      	mov	r1, r2
 8006994:	4618      	mov	r0, r3
 8006996:	f7ff ff5f 	bl	8006858 <__NVIC_SetPriority>
}
 800699a:	bf00      	nop
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b082      	sub	sp, #8
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	4603      	mov	r3, r0
 80069aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff ff11 	bl	80067d8 <__NVIC_EnableIRQ>
}
 80069b6:	bf00      	nop
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	4603      	mov	r3, r0
 80069c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80069c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff ff1f 	bl	8006810 <__NVIC_DisableIRQ>
}
 80069d2:	bf00      	nop
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff ff94 	bl	8006910 <SysTick_Config>
 80069e8:	4603      	mov	r3, r0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006a00:	f7ff fc0c 	bl	800621c <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e099      	b.n	8006b44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f022 0201 	bic.w	r2, r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a30:	e00f      	b.n	8006a52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a32:	f7ff fbf3 	bl	800621c <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b05      	cmp	r3, #5
 8006a3e:	d908      	bls.n	8006a52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2220      	movs	r2, #32
 8006a44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2203      	movs	r2, #3
 8006a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e078      	b.n	8006b44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e8      	bne.n	8006a32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4b38      	ldr	r3, [pc, #224]	; (8006b4c <HAL_DMA_Init+0x158>)
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d107      	bne.n	8006abc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f023 0307 	bic.w	r3, r3, #7
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	2b04      	cmp	r3, #4
 8006ae4:	d117      	bne.n	8006b16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00e      	beq.n	8006b16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 faff 	bl	80070fc <DMA_CheckFifoParam>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d008      	beq.n	8006b16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2240      	movs	r2, #64	; 0x40
 8006b08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006b12:	2301      	movs	r3, #1
 8006b14:	e016      	b.n	8006b44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fab8 	bl	8007094 <DMA_CalcBaseAndBitshift>
 8006b24:	4603      	mov	r3, r0
 8006b26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b2c:	223f      	movs	r2, #63	; 0x3f
 8006b2e:	409a      	lsls	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	f010803f 	.word	0xf010803f

08006b50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <HAL_DMA_Start_IT+0x26>
 8006b72:	2302      	movs	r3, #2
 8006b74:	e040      	b.n	8006bf8 <HAL_DMA_Start_IT+0xa8>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d12f      	bne.n	8006bea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	68b9      	ldr	r1, [r7, #8]
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 fa4a 	bl	8007038 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba8:	223f      	movs	r2, #63	; 0x3f
 8006baa:	409a      	lsls	r2, r3
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0216 	orr.w	r2, r2, #22
 8006bbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d007      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0208 	orr.w	r2, r2, #8
 8006bd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0201 	orr.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	e005      	b.n	8006bf6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006c0e:	f7ff fb05 	bl	800621c <HAL_GetTick>
 8006c12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d008      	beq.n	8006c32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2280      	movs	r2, #128	; 0x80
 8006c24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e052      	b.n	8006cd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0216 	bic.w	r2, r2, #22
 8006c40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	695a      	ldr	r2, [r3, #20]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d103      	bne.n	8006c62 <HAL_DMA_Abort+0x62>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d007      	beq.n	8006c72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0208 	bic.w	r2, r2, #8
 8006c70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0201 	bic.w	r2, r2, #1
 8006c80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c82:	e013      	b.n	8006cac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c84:	f7ff faca 	bl	800621c <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b05      	cmp	r3, #5
 8006c90:	d90c      	bls.n	8006cac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2203      	movs	r2, #3
 8006c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e015      	b.n	8006cd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e4      	bne.n	8006c84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cbe:	223f      	movs	r2, #63	; 0x3f
 8006cc0:	409a      	lsls	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d004      	beq.n	8006cfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2280      	movs	r2, #128	; 0x80
 8006cf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e00c      	b.n	8006d18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2205      	movs	r2, #5
 8006d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 0201 	bic.w	r2, r2, #1
 8006d14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bc80      	pop	{r7}
 8006d20:	4770      	bx	lr
	...

08006d24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d30:	4b92      	ldr	r3, [pc, #584]	; (8006f7c <HAL_DMA_IRQHandler+0x258>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a92      	ldr	r2, [pc, #584]	; (8006f80 <HAL_DMA_IRQHandler+0x25c>)
 8006d36:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3a:	0a9b      	lsrs	r3, r3, #10
 8006d3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d4e:	2208      	movs	r2, #8
 8006d50:	409a      	lsls	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4013      	ands	r3, r2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01a      	beq.n	8006d90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d013      	beq.n	8006d90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0204 	bic.w	r2, r2, #4
 8006d76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	409a      	lsls	r2, r3
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d88:	f043 0201 	orr.w	r2, r3, #1
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d94:	2201      	movs	r2, #1
 8006d96:	409a      	lsls	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d012      	beq.n	8006dc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00b      	beq.n	8006dc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db2:	2201      	movs	r2, #1
 8006db4:	409a      	lsls	r2, r3
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dbe:	f043 0202 	orr.w	r2, r3, #2
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dca:	2204      	movs	r2, #4
 8006dcc:	409a      	lsls	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d012      	beq.n	8006dfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00b      	beq.n	8006dfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de8:	2204      	movs	r2, #4
 8006dea:	409a      	lsls	r2, r3
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df4:	f043 0204 	orr.w	r2, r3, #4
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e00:	2210      	movs	r2, #16
 8006e02:	409a      	lsls	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4013      	ands	r3, r2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d043      	beq.n	8006e94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0308 	and.w	r3, r3, #8
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d03c      	beq.n	8006e94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e1e:	2210      	movs	r2, #16
 8006e20:	409a      	lsls	r2, r3
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d018      	beq.n	8006e66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d108      	bne.n	8006e54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d024      	beq.n	8006e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	4798      	blx	r3
 8006e52:	e01f      	b.n	8006e94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01b      	beq.n	8006e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	4798      	blx	r3
 8006e64:	e016      	b.n	8006e94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d107      	bne.n	8006e84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0208 	bic.w	r2, r2, #8
 8006e82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e98:	2220      	movs	r2, #32
 8006e9a:	409a      	lsls	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 808e 	beq.w	8006fc2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0310 	and.w	r3, r3, #16
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 8086 	beq.w	8006fc2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eba:	2220      	movs	r2, #32
 8006ebc:	409a      	lsls	r2, r3
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b05      	cmp	r3, #5
 8006ecc:	d136      	bne.n	8006f3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0216 	bic.w	r2, r2, #22
 8006edc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695a      	ldr	r2, [r3, #20]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006eec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d103      	bne.n	8006efe <HAL_DMA_IRQHandler+0x1da>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d007      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0208 	bic.w	r2, r2, #8
 8006f0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f12:	223f      	movs	r2, #63	; 0x3f
 8006f14:	409a      	lsls	r2, r3
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d07d      	beq.n	800702e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	4798      	blx	r3
        }
        return;
 8006f3a:	e078      	b.n	800702e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d01c      	beq.n	8006f84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d108      	bne.n	8006f6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d030      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
 8006f68:	e02b      	b.n	8006fc2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d027      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	4798      	blx	r3
 8006f7a:	e022      	b.n	8006fc2 <HAL_DMA_IRQHandler+0x29e>
 8006f7c:	20000064 	.word	0x20000064
 8006f80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10f      	bne.n	8006fb2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0210 	bic.w	r2, r2, #16
 8006fa0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d032      	beq.n	8007030 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d022      	beq.n	800701c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2205      	movs	r2, #5
 8006fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0201 	bic.w	r2, r2, #1
 8006fec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	60bb      	str	r3, [r7, #8]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d307      	bcc.n	800700a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1f2      	bne.n	8006fee <HAL_DMA_IRQHandler+0x2ca>
 8007008:	e000      	b.n	800700c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800700a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007020:	2b00      	cmp	r3, #0
 8007022:	d005      	beq.n	8007030 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	4798      	blx	r3
 800702c:	e000      	b.n	8007030 <HAL_DMA_IRQHandler+0x30c>
        return;
 800702e:	bf00      	nop
    }
  }
}
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop

08007038 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007054:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	2b40      	cmp	r3, #64	; 0x40
 8007064:	d108      	bne.n	8007078 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007076:	e007      	b.n	8007088 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	60da      	str	r2, [r3, #12]
}
 8007088:	bf00      	nop
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	bc80      	pop	{r7}
 8007090:	4770      	bx	lr
	...

08007094 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	3b10      	subs	r3, #16
 80070a4:	4a13      	ldr	r2, [pc, #76]	; (80070f4 <DMA_CalcBaseAndBitshift+0x60>)
 80070a6:	fba2 2303 	umull	r2, r3, r2, r3
 80070aa:	091b      	lsrs	r3, r3, #4
 80070ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80070ae:	4a12      	ldr	r2, [pc, #72]	; (80070f8 <DMA_CalcBaseAndBitshift+0x64>)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d909      	bls.n	80070d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80070ca:	f023 0303 	bic.w	r3, r3, #3
 80070ce:	1d1a      	adds	r2, r3, #4
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	659a      	str	r2, [r3, #88]	; 0x58
 80070d4:	e007      	b.n	80070e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80070de:	f023 0303 	bic.w	r3, r3, #3
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr
 80070f4:	aaaaaaab 	.word	0xaaaaaaab
 80070f8:	080149a4 	.word	0x080149a4

080070fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d11f      	bne.n	8007156 <DMA_CheckFifoParam+0x5a>
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b03      	cmp	r3, #3
 800711a:	d856      	bhi.n	80071ca <DMA_CheckFifoParam+0xce>
 800711c:	a201      	add	r2, pc, #4	; (adr r2, 8007124 <DMA_CheckFifoParam+0x28>)
 800711e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007122:	bf00      	nop
 8007124:	08007135 	.word	0x08007135
 8007128:	08007147 	.word	0x08007147
 800712c:	08007135 	.word	0x08007135
 8007130:	080071cb 	.word	0x080071cb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d046      	beq.n	80071ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007144:	e043      	b.n	80071ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800714e:	d140      	bne.n	80071d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007154:	e03d      	b.n	80071d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800715e:	d121      	bne.n	80071a4 <DMA_CheckFifoParam+0xa8>
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2b03      	cmp	r3, #3
 8007164:	d837      	bhi.n	80071d6 <DMA_CheckFifoParam+0xda>
 8007166:	a201      	add	r2, pc, #4	; (adr r2, 800716c <DMA_CheckFifoParam+0x70>)
 8007168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716c:	0800717d 	.word	0x0800717d
 8007170:	08007183 	.word	0x08007183
 8007174:	0800717d 	.word	0x0800717d
 8007178:	08007195 	.word	0x08007195
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	73fb      	strb	r3, [r7, #15]
      break;
 8007180:	e030      	b.n	80071e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d025      	beq.n	80071da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007192:	e022      	b.n	80071da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800719c:	d11f      	bne.n	80071de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80071a2:	e01c      	b.n	80071de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d903      	bls.n	80071b2 <DMA_CheckFifoParam+0xb6>
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	d003      	beq.n	80071b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80071b0:	e018      	b.n	80071e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	73fb      	strb	r3, [r7, #15]
      break;
 80071b6:	e015      	b.n	80071e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00e      	beq.n	80071e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	73fb      	strb	r3, [r7, #15]
      break;
 80071c8:	e00b      	b.n	80071e2 <DMA_CheckFifoParam+0xe6>
      break;
 80071ca:	bf00      	nop
 80071cc:	e00a      	b.n	80071e4 <DMA_CheckFifoParam+0xe8>
      break;
 80071ce:	bf00      	nop
 80071d0:	e008      	b.n	80071e4 <DMA_CheckFifoParam+0xe8>
      break;
 80071d2:	bf00      	nop
 80071d4:	e006      	b.n	80071e4 <DMA_CheckFifoParam+0xe8>
      break;
 80071d6:	bf00      	nop
 80071d8:	e004      	b.n	80071e4 <DMA_CheckFifoParam+0xe8>
      break;
 80071da:	bf00      	nop
 80071dc:	e002      	b.n	80071e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80071de:	bf00      	nop
 80071e0:	e000      	b.n	80071e4 <DMA_CheckFifoParam+0xe8>
      break;
 80071e2:	bf00      	nop
    }
  } 
  
  return status; 
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr

080071f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80071fe:	e16f      	b.n	80074e0 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	2101      	movs	r1, #1
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	fa01 f303 	lsl.w	r3, r1, r3
 800720c:	4013      	ands	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 8161 	beq.w	80074da <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f003 0303 	and.w	r3, r3, #3
 8007220:	2b01      	cmp	r3, #1
 8007222:	d005      	beq.n	8007230 <HAL_GPIO_Init+0x40>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f003 0303 	and.w	r3, r3, #3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d130      	bne.n	8007292 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	2203      	movs	r2, #3
 800723c:	fa02 f303 	lsl.w	r3, r2, r3
 8007240:	43db      	mvns	r3, r3
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	4013      	ands	r3, r2
 8007246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	68da      	ldr	r2, [r3, #12]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	005b      	lsls	r3, r3, #1
 8007250:	fa02 f303 	lsl.w	r3, r2, r3
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	4313      	orrs	r3, r2
 8007258:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007266:	2201      	movs	r2, #1
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	fa02 f303 	lsl.w	r3, r2, r3
 800726e:	43db      	mvns	r3, r3
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	4013      	ands	r3, r2
 8007274:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	091b      	lsrs	r3, r3, #4
 800727c:	f003 0201 	and.w	r2, r3, #1
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	fa02 f303 	lsl.w	r3, r2, r3
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	4313      	orrs	r3, r2
 800728a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f003 0303 	and.w	r3, r3, #3
 800729a:	2b03      	cmp	r3, #3
 800729c:	d017      	beq.n	80072ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	2203      	movs	r2, #3
 80072aa:	fa02 f303 	lsl.w	r3, r2, r3
 80072ae:	43db      	mvns	r3, r3
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	4013      	ands	r3, r2
 80072b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	fa02 f303 	lsl.w	r3, r2, r3
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f003 0303 	and.w	r3, r3, #3
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d123      	bne.n	8007322 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	08da      	lsrs	r2, r3, #3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	3208      	adds	r2, #8
 80072e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	220f      	movs	r2, #15
 80072f2:	fa02 f303 	lsl.w	r3, r2, r3
 80072f6:	43db      	mvns	r3, r3
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	4013      	ands	r3, r2
 80072fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	691a      	ldr	r2, [r3, #16]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	fa02 f303 	lsl.w	r3, r2, r3
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	4313      	orrs	r3, r2
 8007312:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	08da      	lsrs	r2, r3, #3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3208      	adds	r2, #8
 800731c:	6939      	ldr	r1, [r7, #16]
 800731e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	2203      	movs	r2, #3
 800732e:	fa02 f303 	lsl.w	r3, r2, r3
 8007332:	43db      	mvns	r3, r3
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4013      	ands	r3, r2
 8007338:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f003 0203 	and.w	r2, r3, #3
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	fa02 f303 	lsl.w	r3, r2, r3
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 80bb 	beq.w	80074da <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007364:	2300      	movs	r3, #0
 8007366:	60bb      	str	r3, [r7, #8]
 8007368:	4b64      	ldr	r3, [pc, #400]	; (80074fc <HAL_GPIO_Init+0x30c>)
 800736a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736c:	4a63      	ldr	r2, [pc, #396]	; (80074fc <HAL_GPIO_Init+0x30c>)
 800736e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007372:	6453      	str	r3, [r2, #68]	; 0x44
 8007374:	4b61      	ldr	r3, [pc, #388]	; (80074fc <HAL_GPIO_Init+0x30c>)
 8007376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800737c:	60bb      	str	r3, [r7, #8]
 800737e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007380:	4a5f      	ldr	r2, [pc, #380]	; (8007500 <HAL_GPIO_Init+0x310>)
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	089b      	lsrs	r3, r3, #2
 8007386:	3302      	adds	r3, #2
 8007388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800738c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	220f      	movs	r2, #15
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	43db      	mvns	r3, r3
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	4013      	ands	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a57      	ldr	r2, [pc, #348]	; (8007504 <HAL_GPIO_Init+0x314>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d031      	beq.n	8007410 <HAL_GPIO_Init+0x220>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a56      	ldr	r2, [pc, #344]	; (8007508 <HAL_GPIO_Init+0x318>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d02b      	beq.n	800740c <HAL_GPIO_Init+0x21c>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a55      	ldr	r2, [pc, #340]	; (800750c <HAL_GPIO_Init+0x31c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d025      	beq.n	8007408 <HAL_GPIO_Init+0x218>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a54      	ldr	r2, [pc, #336]	; (8007510 <HAL_GPIO_Init+0x320>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d01f      	beq.n	8007404 <HAL_GPIO_Init+0x214>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a53      	ldr	r2, [pc, #332]	; (8007514 <HAL_GPIO_Init+0x324>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d019      	beq.n	8007400 <HAL_GPIO_Init+0x210>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a52      	ldr	r2, [pc, #328]	; (8007518 <HAL_GPIO_Init+0x328>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d013      	beq.n	80073fc <HAL_GPIO_Init+0x20c>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a51      	ldr	r2, [pc, #324]	; (800751c <HAL_GPIO_Init+0x32c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d00d      	beq.n	80073f8 <HAL_GPIO_Init+0x208>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a50      	ldr	r2, [pc, #320]	; (8007520 <HAL_GPIO_Init+0x330>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d007      	beq.n	80073f4 <HAL_GPIO_Init+0x204>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a4f      	ldr	r2, [pc, #316]	; (8007524 <HAL_GPIO_Init+0x334>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d101      	bne.n	80073f0 <HAL_GPIO_Init+0x200>
 80073ec:	2308      	movs	r3, #8
 80073ee:	e010      	b.n	8007412 <HAL_GPIO_Init+0x222>
 80073f0:	2309      	movs	r3, #9
 80073f2:	e00e      	b.n	8007412 <HAL_GPIO_Init+0x222>
 80073f4:	2307      	movs	r3, #7
 80073f6:	e00c      	b.n	8007412 <HAL_GPIO_Init+0x222>
 80073f8:	2306      	movs	r3, #6
 80073fa:	e00a      	b.n	8007412 <HAL_GPIO_Init+0x222>
 80073fc:	2305      	movs	r3, #5
 80073fe:	e008      	b.n	8007412 <HAL_GPIO_Init+0x222>
 8007400:	2304      	movs	r3, #4
 8007402:	e006      	b.n	8007412 <HAL_GPIO_Init+0x222>
 8007404:	2303      	movs	r3, #3
 8007406:	e004      	b.n	8007412 <HAL_GPIO_Init+0x222>
 8007408:	2302      	movs	r3, #2
 800740a:	e002      	b.n	8007412 <HAL_GPIO_Init+0x222>
 800740c:	2301      	movs	r3, #1
 800740e:	e000      	b.n	8007412 <HAL_GPIO_Init+0x222>
 8007410:	2300      	movs	r3, #0
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	f002 0203 	and.w	r2, r2, #3
 8007418:	0092      	lsls	r2, r2, #2
 800741a:	4093      	lsls	r3, r2
 800741c:	461a      	mov	r2, r3
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007424:	4936      	ldr	r1, [pc, #216]	; (8007500 <HAL_GPIO_Init+0x310>)
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	089b      	lsrs	r3, r3, #2
 800742a:	3302      	adds	r3, #2
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007432:	4b3d      	ldr	r3, [pc, #244]	; (8007528 <HAL_GPIO_Init+0x338>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	43db      	mvns	r3, r3
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	4013      	ands	r3, r2
 8007440:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007456:	4a34      	ldr	r2, [pc, #208]	; (8007528 <HAL_GPIO_Init+0x338>)
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800745c:	4b32      	ldr	r3, [pc, #200]	; (8007528 <HAL_GPIO_Init+0x338>)
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	43db      	mvns	r3, r3
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	4013      	ands	r3, r2
 800746a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4313      	orrs	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007480:	4a29      	ldr	r2, [pc, #164]	; (8007528 <HAL_GPIO_Init+0x338>)
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007486:	4b28      	ldr	r3, [pc, #160]	; (8007528 <HAL_GPIO_Init+0x338>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	43db      	mvns	r3, r3
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	4013      	ands	r3, r2
 8007494:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80074aa:	4a1f      	ldr	r2, [pc, #124]	; (8007528 <HAL_GPIO_Init+0x338>)
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80074b0:	4b1d      	ldr	r3, [pc, #116]	; (8007528 <HAL_GPIO_Init+0x338>)
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	43db      	mvns	r3, r3
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	4013      	ands	r3, r2
 80074be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80074d4:	4a14      	ldr	r2, [pc, #80]	; (8007528 <HAL_GPIO_Init+0x338>)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	3301      	adds	r3, #1
 80074de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f47f ae88 	bne.w	8007200 <HAL_GPIO_Init+0x10>
  }
}
 80074f0:	bf00      	nop
 80074f2:	bf00      	nop
 80074f4:	371c      	adds	r7, #28
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc80      	pop	{r7}
 80074fa:	4770      	bx	lr
 80074fc:	40023800 	.word	0x40023800
 8007500:	40013800 	.word	0x40013800
 8007504:	40020000 	.word	0x40020000
 8007508:	40020400 	.word	0x40020400
 800750c:	40020800 	.word	0x40020800
 8007510:	40020c00 	.word	0x40020c00
 8007514:	40021000 	.word	0x40021000
 8007518:	40021400 	.word	0x40021400
 800751c:	40021800 	.word	0x40021800
 8007520:	40021c00 	.word	0x40021c00
 8007524:	40022000 	.word	0x40022000
 8007528:	40013c00 	.word	0x40013c00

0800752c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691a      	ldr	r2, [r3, #16]
 800753c:	887b      	ldrh	r3, [r7, #2]
 800753e:	4013      	ands	r3, r2
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007544:	2301      	movs	r3, #1
 8007546:	73fb      	strb	r3, [r7, #15]
 8007548:	e001      	b.n	800754e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800754e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr

0800755a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	460b      	mov	r3, r1
 8007564:	807b      	strh	r3, [r7, #2]
 8007566:	4613      	mov	r3, r2
 8007568:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800756a:	787b      	ldrb	r3, [r7, #1]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007570:	887a      	ldrh	r2, [r7, #2]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007576:	e003      	b.n	8007580 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007578:	887b      	ldrh	r3, [r7, #2]
 800757a:	041a      	lsls	r2, r3, #16
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	619a      	str	r2, [r3, #24]
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	bc80      	pop	{r7}
 8007588:	4770      	bx	lr

0800758a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800758a:	b480      	push	{r7}
 800758c:	b085      	sub	sp, #20
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800759c:	887a      	ldrh	r2, [r7, #2]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4013      	ands	r3, r2
 80075a2:	041a      	lsls	r2, r3, #16
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	43d9      	mvns	r1, r3
 80075a8:	887b      	ldrh	r3, [r7, #2]
 80075aa:	400b      	ands	r3, r1
 80075ac:	431a      	orrs	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	619a      	str	r2, [r3, #24]
}
 80075b2:	bf00      	nop
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bc80      	pop	{r7}
 80075ba:	4770      	bx	lr

080075bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e12b      	b.n	8007826 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d106      	bne.n	80075e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7fe fada 	bl	8005b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2224      	movs	r2, #36	; 0x24
 80075ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0201 	bic.w	r2, r2, #1
 80075fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800760e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800761e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007620:	f002 fd12 	bl	800a048 <HAL_RCC_GetPCLK1Freq>
 8007624:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	4a81      	ldr	r2, [pc, #516]	; (8007830 <HAL_I2C_Init+0x274>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d807      	bhi.n	8007640 <HAL_I2C_Init+0x84>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4a80      	ldr	r2, [pc, #512]	; (8007834 <HAL_I2C_Init+0x278>)
 8007634:	4293      	cmp	r3, r2
 8007636:	bf94      	ite	ls
 8007638:	2301      	movls	r3, #1
 800763a:	2300      	movhi	r3, #0
 800763c:	b2db      	uxtb	r3, r3
 800763e:	e006      	b.n	800764e <HAL_I2C_Init+0x92>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4a7d      	ldr	r2, [pc, #500]	; (8007838 <HAL_I2C_Init+0x27c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	bf94      	ite	ls
 8007648:	2301      	movls	r3, #1
 800764a:	2300      	movhi	r3, #0
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e0e7      	b.n	8007826 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4a78      	ldr	r2, [pc, #480]	; (800783c <HAL_I2C_Init+0x280>)
 800765a:	fba2 2303 	umull	r2, r3, r2, r3
 800765e:	0c9b      	lsrs	r3, r3, #18
 8007660:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	4a6a      	ldr	r2, [pc, #424]	; (8007830 <HAL_I2C_Init+0x274>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d802      	bhi.n	8007690 <HAL_I2C_Init+0xd4>
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	3301      	adds	r3, #1
 800768e:	e009      	b.n	80076a4 <HAL_I2C_Init+0xe8>
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007696:	fb02 f303 	mul.w	r3, r2, r3
 800769a:	4a69      	ldr	r2, [pc, #420]	; (8007840 <HAL_I2C_Init+0x284>)
 800769c:	fba2 2303 	umull	r2, r3, r2, r3
 80076a0:	099b      	lsrs	r3, r3, #6
 80076a2:	3301      	adds	r3, #1
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	6812      	ldr	r2, [r2, #0]
 80076a8:	430b      	orrs	r3, r1
 80076aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80076b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	495c      	ldr	r1, [pc, #368]	; (8007830 <HAL_I2C_Init+0x274>)
 80076c0:	428b      	cmp	r3, r1
 80076c2:	d819      	bhi.n	80076f8 <HAL_I2C_Init+0x13c>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	1e59      	subs	r1, r3, #1
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80076d2:	1c59      	adds	r1, r3, #1
 80076d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80076d8:	400b      	ands	r3, r1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <HAL_I2C_Init+0x138>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	1e59      	subs	r1, r3, #1
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80076ec:	3301      	adds	r3, #1
 80076ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076f2:	e051      	b.n	8007798 <HAL_I2C_Init+0x1dc>
 80076f4:	2304      	movs	r3, #4
 80076f6:	e04f      	b.n	8007798 <HAL_I2C_Init+0x1dc>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d111      	bne.n	8007724 <HAL_I2C_Init+0x168>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	1e58      	subs	r0, r3, #1
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6859      	ldr	r1, [r3, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	440b      	add	r3, r1
 800770e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007712:	3301      	adds	r3, #1
 8007714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007718:	2b00      	cmp	r3, #0
 800771a:	bf0c      	ite	eq
 800771c:	2301      	moveq	r3, #1
 800771e:	2300      	movne	r3, #0
 8007720:	b2db      	uxtb	r3, r3
 8007722:	e012      	b.n	800774a <HAL_I2C_Init+0x18e>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	1e58      	subs	r0, r3, #1
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6859      	ldr	r1, [r3, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	440b      	add	r3, r1
 8007732:	0099      	lsls	r1, r3, #2
 8007734:	440b      	add	r3, r1
 8007736:	fbb0 f3f3 	udiv	r3, r0, r3
 800773a:	3301      	adds	r3, #1
 800773c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007740:	2b00      	cmp	r3, #0
 8007742:	bf0c      	ite	eq
 8007744:	2301      	moveq	r3, #1
 8007746:	2300      	movne	r3, #0
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <HAL_I2C_Init+0x196>
 800774e:	2301      	movs	r3, #1
 8007750:	e022      	b.n	8007798 <HAL_I2C_Init+0x1dc>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10e      	bne.n	8007778 <HAL_I2C_Init+0x1bc>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	1e58      	subs	r0, r3, #1
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6859      	ldr	r1, [r3, #4]
 8007762:	460b      	mov	r3, r1
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	440b      	add	r3, r1
 8007768:	fbb0 f3f3 	udiv	r3, r0, r3
 800776c:	3301      	adds	r3, #1
 800776e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007776:	e00f      	b.n	8007798 <HAL_I2C_Init+0x1dc>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	1e58      	subs	r0, r3, #1
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6859      	ldr	r1, [r3, #4]
 8007780:	460b      	mov	r3, r1
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	440b      	add	r3, r1
 8007786:	0099      	lsls	r1, r3, #2
 8007788:	440b      	add	r3, r1
 800778a:	fbb0 f3f3 	udiv	r3, r0, r3
 800778e:	3301      	adds	r3, #1
 8007790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007794:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	6809      	ldr	r1, [r1, #0]
 800779c:	4313      	orrs	r3, r2
 800779e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69da      	ldr	r2, [r3, #28]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	431a      	orrs	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80077c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	6911      	ldr	r1, [r2, #16]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	68d2      	ldr	r2, [r2, #12]
 80077d2:	4311      	orrs	r1, r2
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	6812      	ldr	r2, [r2, #0]
 80077d8:	430b      	orrs	r3, r1
 80077da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	695a      	ldr	r2, [r3, #20]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	431a      	orrs	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f042 0201 	orr.w	r2, r2, #1
 8007806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2220      	movs	r2, #32
 8007812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	000186a0 	.word	0x000186a0
 8007834:	001e847f 	.word	0x001e847f
 8007838:	003d08ff 	.word	0x003d08ff
 800783c:	431bde83 	.word	0x431bde83
 8007840:	10624dd3 	.word	0x10624dd3

08007844 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af02      	add	r7, sp, #8
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	4608      	mov	r0, r1
 800784e:	4611      	mov	r1, r2
 8007850:	461a      	mov	r2, r3
 8007852:	4603      	mov	r3, r0
 8007854:	817b      	strh	r3, [r7, #10]
 8007856:	460b      	mov	r3, r1
 8007858:	813b      	strh	r3, [r7, #8]
 800785a:	4613      	mov	r3, r2
 800785c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800785e:	f7fe fcdd 	bl	800621c <HAL_GetTick>
 8007862:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b20      	cmp	r3, #32
 800786e:	f040 80d9 	bne.w	8007a24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	2319      	movs	r3, #25
 8007878:	2201      	movs	r2, #1
 800787a:	496d      	ldr	r1, [pc, #436]	; (8007a30 <HAL_I2C_Mem_Write+0x1ec>)
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 fc7f 	bl	8008180 <I2C_WaitOnFlagUntilTimeout>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007888:	2302      	movs	r3, #2
 800788a:	e0cc      	b.n	8007a26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007892:	2b01      	cmp	r3, #1
 8007894:	d101      	bne.n	800789a <HAL_I2C_Mem_Write+0x56>
 8007896:	2302      	movs	r3, #2
 8007898:	e0c5      	b.n	8007a26 <HAL_I2C_Mem_Write+0x1e2>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d007      	beq.n	80078c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0201 	orr.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2221      	movs	r2, #33	; 0x21
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2240      	movs	r2, #64	; 0x40
 80078dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a3a      	ldr	r2, [r7, #32]
 80078ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80078f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4a4d      	ldr	r2, [pc, #308]	; (8007a34 <HAL_I2C_Mem_Write+0x1f0>)
 8007900:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007902:	88f8      	ldrh	r0, [r7, #6]
 8007904:	893a      	ldrh	r2, [r7, #8]
 8007906:	8979      	ldrh	r1, [r7, #10]
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	9301      	str	r3, [sp, #4]
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	4603      	mov	r3, r0
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 fab6 	bl	8007e84 <I2C_RequestMemoryWrite>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d052      	beq.n	80079c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e081      	b.n	8007a26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 fd00 	bl	800832c <I2C_WaitOnTXEFlagUntilTimeout>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00d      	beq.n	800794e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	2b04      	cmp	r3, #4
 8007938:	d107      	bne.n	800794a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007948:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e06b      	b.n	8007a26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007952:	781a      	ldrb	r2, [r3, #0]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007968:	3b01      	subs	r3, #1
 800796a:	b29a      	uxth	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007974:	b29b      	uxth	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	b29a      	uxth	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b04      	cmp	r3, #4
 800798a:	d11b      	bne.n	80079c4 <HAL_I2C_Mem_Write+0x180>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007990:	2b00      	cmp	r3, #0
 8007992:	d017      	beq.n	80079c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	781a      	ldrb	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	3b01      	subs	r3, #1
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1aa      	bne.n	8007922 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 fcec 	bl	80083ae <I2C_WaitOnBTFFlagUntilTimeout>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00d      	beq.n	80079f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d107      	bne.n	80079f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e016      	b.n	8007a26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	e000      	b.n	8007a26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007a24:	2302      	movs	r3, #2
  }
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3718      	adds	r7, #24
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	00100002 	.word	0x00100002
 8007a34:	ffff0000 	.word	0xffff0000

08007a38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08c      	sub	sp, #48	; 0x30
 8007a3c:	af02      	add	r7, sp, #8
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	4608      	mov	r0, r1
 8007a42:	4611      	mov	r1, r2
 8007a44:	461a      	mov	r2, r3
 8007a46:	4603      	mov	r3, r0
 8007a48:	817b      	strh	r3, [r7, #10]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	813b      	strh	r3, [r7, #8]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a52:	f7fe fbe3 	bl	800621c <HAL_GetTick>
 8007a56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b20      	cmp	r3, #32
 8007a62:	f040 8208 	bne.w	8007e76 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	2319      	movs	r3, #25
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	497b      	ldr	r1, [pc, #492]	; (8007c5c <HAL_I2C_Mem_Read+0x224>)
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fb85 	bl	8008180 <I2C_WaitOnFlagUntilTimeout>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	e1fb      	b.n	8007e78 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d101      	bne.n	8007a8e <HAL_I2C_Mem_Read+0x56>
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	e1f4      	b.n	8007e78 <HAL_I2C_Mem_Read+0x440>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d007      	beq.n	8007ab4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f042 0201 	orr.w	r2, r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ac2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2222      	movs	r2, #34	; 0x22
 8007ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2240      	movs	r2, #64	; 0x40
 8007ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ade:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4a5b      	ldr	r2, [pc, #364]	; (8007c60 <HAL_I2C_Mem_Read+0x228>)
 8007af4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007af6:	88f8      	ldrh	r0, [r7, #6]
 8007af8:	893a      	ldrh	r2, [r7, #8]
 8007afa:	8979      	ldrh	r1, [r7, #10]
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	4603      	mov	r3, r0
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 fa52 	bl	8007fb0 <I2C_RequestMemoryRead>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e1b0      	b.n	8007e78 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d113      	bne.n	8007b46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b1e:	2300      	movs	r3, #0
 8007b20:	623b      	str	r3, [r7, #32]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	623b      	str	r3, [r7, #32]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	623b      	str	r3, [r7, #32]
 8007b32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	e184      	b.n	8007e50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d11b      	bne.n	8007b86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b5e:	2300      	movs	r3, #0
 8007b60:	61fb      	str	r3, [r7, #28]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	61fb      	str	r3, [r7, #28]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	61fb      	str	r3, [r7, #28]
 8007b72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	e164      	b.n	8007e50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d11b      	bne.n	8007bc6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bae:	2300      	movs	r3, #0
 8007bb0:	61bb      	str	r3, [r7, #24]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	61bb      	str	r3, [r7, #24]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	61bb      	str	r3, [r7, #24]
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	e144      	b.n	8007e50 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	617b      	str	r3, [r7, #20]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	617b      	str	r3, [r7, #20]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	617b      	str	r3, [r7, #20]
 8007bda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007bdc:	e138      	b.n	8007e50 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	f200 80f1 	bhi.w	8007dca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d123      	bne.n	8007c38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 fc1b 	bl	8008430 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e139      	b.n	8007e78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	691a      	ldr	r2, [r3, #16]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c16:	1c5a      	adds	r2, r3, #1
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c20:	3b01      	subs	r3, #1
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c36:	e10b      	b.n	8007e50 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d14e      	bne.n	8007cde <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	2200      	movs	r2, #0
 8007c48:	4906      	ldr	r1, [pc, #24]	; (8007c64 <HAL_I2C_Mem_Read+0x22c>)
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 fa98 	bl	8008180 <I2C_WaitOnFlagUntilTimeout>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d008      	beq.n	8007c68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e10e      	b.n	8007e78 <HAL_I2C_Mem_Read+0x440>
 8007c5a:	bf00      	nop
 8007c5c:	00100002 	.word	0x00100002
 8007c60:	ffff0000 	.word	0xffff0000
 8007c64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	691a      	ldr	r2, [r3, #16]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c94:	3b01      	subs	r3, #1
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	691a      	ldr	r2, [r3, #16]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	b2d2      	uxtb	r2, r2
 8007cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007cdc:	e0b8      	b.n	8007e50 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	4966      	ldr	r1, [pc, #408]	; (8007e80 <HAL_I2C_Mem_Read+0x448>)
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 fa49 	bl	8008180 <I2C_WaitOnFlagUntilTimeout>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e0bf      	b.n	8007e78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	691a      	ldr	r2, [r3, #16]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d12:	b2d2      	uxtb	r2, r2
 8007d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d24:	3b01      	subs	r3, #1
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	3b01      	subs	r3, #1
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	2200      	movs	r2, #0
 8007d42:	494f      	ldr	r1, [pc, #316]	; (8007e80 <HAL_I2C_Mem_Read+0x448>)
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 fa1b 	bl	8008180 <I2C_WaitOnFlagUntilTimeout>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e091      	b.n	8007e78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	691a      	ldr	r2, [r3, #16]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	b2d2      	uxtb	r2, r2
 8007d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d80:	3b01      	subs	r3, #1
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	691a      	ldr	r2, [r3, #16]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007dc8:	e042      	b.n	8007e50 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 fb2e 	bl	8008430 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e04c      	b.n	8007e78 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	691a      	ldr	r2, [r3, #16]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de8:	b2d2      	uxtb	r2, r2
 8007dea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	f003 0304 	and.w	r3, r3, #4
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d118      	bne.n	8007e50 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	691a      	ldr	r2, [r3, #16]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	b2d2      	uxtb	r2, r2
 8007e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	1c5a      	adds	r2, r3, #1
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f47f aec2 	bne.w	8007bde <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	e000      	b.n	8007e78 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007e76:	2302      	movs	r3, #2
  }
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3728      	adds	r7, #40	; 0x28
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	00010004 	.word	0x00010004

08007e84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af02      	add	r7, sp, #8
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	4608      	mov	r0, r1
 8007e8e:	4611      	mov	r1, r2
 8007e90:	461a      	mov	r2, r3
 8007e92:	4603      	mov	r3, r0
 8007e94:	817b      	strh	r3, [r7, #10]
 8007e96:	460b      	mov	r3, r1
 8007e98:	813b      	strh	r3, [r7, #8]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 f960 	bl	8008180 <I2C_WaitOnFlagUntilTimeout>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00d      	beq.n	8007ee2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ed4:	d103      	bne.n	8007ede <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007edc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e05f      	b.n	8007fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ee2:	897b      	ldrh	r3, [r7, #10]
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ef0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	6a3a      	ldr	r2, [r7, #32]
 8007ef6:	492d      	ldr	r1, [pc, #180]	; (8007fac <I2C_RequestMemoryWrite+0x128>)
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 f998 	bl	800822e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d001      	beq.n	8007f08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e04c      	b.n	8007fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f08:	2300      	movs	r3, #0
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	617b      	str	r3, [r7, #20]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f20:	6a39      	ldr	r1, [r7, #32]
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 fa02 	bl	800832c <I2C_WaitOnTXEFlagUntilTimeout>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00d      	beq.n	8007f4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	d107      	bne.n	8007f46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e02b      	b.n	8007fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f4a:	88fb      	ldrh	r3, [r7, #6]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d105      	bne.n	8007f5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f50:	893b      	ldrh	r3, [r7, #8]
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	611a      	str	r2, [r3, #16]
 8007f5a:	e021      	b.n	8007fa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007f5c:	893b      	ldrh	r3, [r7, #8]
 8007f5e:	0a1b      	lsrs	r3, r3, #8
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f6c:	6a39      	ldr	r1, [r7, #32]
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 f9dc 	bl	800832c <I2C_WaitOnTXEFlagUntilTimeout>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00d      	beq.n	8007f96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d107      	bne.n	8007f92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e005      	b.n	8007fa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f96:	893b      	ldrh	r3, [r7, #8]
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	00010002 	.word	0x00010002

08007fb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b088      	sub	sp, #32
 8007fb4:	af02      	add	r7, sp, #8
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	4608      	mov	r0, r1
 8007fba:	4611      	mov	r1, r2
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	817b      	strh	r3, [r7, #10]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	813b      	strh	r3, [r7, #8]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fe8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f000 f8c2 	bl	8008180 <I2C_WaitOnFlagUntilTimeout>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00d      	beq.n	800801e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008010:	d103      	bne.n	800801a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008018:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e0aa      	b.n	8008174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800801e:	897b      	ldrh	r3, [r7, #10]
 8008020:	b2db      	uxtb	r3, r3
 8008022:	461a      	mov	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800802c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	6a3a      	ldr	r2, [r7, #32]
 8008032:	4952      	ldr	r1, [pc, #328]	; (800817c <I2C_RequestMemoryRead+0x1cc>)
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f8fa 	bl	800822e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e097      	b.n	8008174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008044:	2300      	movs	r3, #0
 8008046:	617b      	str	r3, [r7, #20]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	617b      	str	r3, [r7, #20]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800805a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805c:	6a39      	ldr	r1, [r7, #32]
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 f964 	bl	800832c <I2C_WaitOnTXEFlagUntilTimeout>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00d      	beq.n	8008086 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806e:	2b04      	cmp	r3, #4
 8008070:	d107      	bne.n	8008082 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008080:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e076      	b.n	8008174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d105      	bne.n	8008098 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800808c:	893b      	ldrh	r3, [r7, #8]
 800808e:	b2da      	uxtb	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	611a      	str	r2, [r3, #16]
 8008096:	e021      	b.n	80080dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008098:	893b      	ldrh	r3, [r7, #8]
 800809a:	0a1b      	lsrs	r3, r3, #8
 800809c:	b29b      	uxth	r3, r3
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080a8:	6a39      	ldr	r1, [r7, #32]
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 f93e 	bl	800832c <I2C_WaitOnTXEFlagUntilTimeout>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00d      	beq.n	80080d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d107      	bne.n	80080ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e050      	b.n	8008174 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080d2:	893b      	ldrh	r3, [r7, #8]
 80080d4:	b2da      	uxtb	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080de:	6a39      	ldr	r1, [r7, #32]
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 f923 	bl	800832c <I2C_WaitOnTXEFlagUntilTimeout>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00d      	beq.n	8008108 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f0:	2b04      	cmp	r3, #4
 80080f2:	d107      	bne.n	8008104 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008102:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e035      	b.n	8008174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008116:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	2200      	movs	r2, #0
 8008120:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 f82b 	bl	8008180 <I2C_WaitOnFlagUntilTimeout>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00d      	beq.n	800814c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800813a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800813e:	d103      	bne.n	8008148 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008146:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e013      	b.n	8008174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800814c:	897b      	ldrh	r3, [r7, #10]
 800814e:	b2db      	uxtb	r3, r3
 8008150:	f043 0301 	orr.w	r3, r3, #1
 8008154:	b2da      	uxtb	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	6a3a      	ldr	r2, [r7, #32]
 8008160:	4906      	ldr	r1, [pc, #24]	; (800817c <I2C_RequestMemoryRead+0x1cc>)
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 f863 	bl	800822e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e000      	b.n	8008174 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	00010002 	.word	0x00010002

08008180 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	603b      	str	r3, [r7, #0]
 800818c:	4613      	mov	r3, r2
 800818e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008190:	e025      	b.n	80081de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008198:	d021      	beq.n	80081de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800819a:	f7fe f83f 	bl	800621c <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d302      	bcc.n	80081b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d116      	bne.n	80081de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	f043 0220 	orr.w	r2, r3, #32
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e023      	b.n	8008226 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	0c1b      	lsrs	r3, r3, #16
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d10d      	bne.n	8008204 <I2C_WaitOnFlagUntilTimeout+0x84>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	43da      	mvns	r2, r3
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	4013      	ands	r3, r2
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	bf0c      	ite	eq
 80081fa:	2301      	moveq	r3, #1
 80081fc:	2300      	movne	r3, #0
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	461a      	mov	r2, r3
 8008202:	e00c      	b.n	800821e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	43da      	mvns	r2, r3
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	4013      	ands	r3, r2
 8008210:	b29b      	uxth	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	bf0c      	ite	eq
 8008216:	2301      	moveq	r3, #1
 8008218:	2300      	movne	r3, #0
 800821a:	b2db      	uxtb	r3, r3
 800821c:	461a      	mov	r2, r3
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	429a      	cmp	r2, r3
 8008222:	d0b6      	beq.n	8008192 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	60b9      	str	r1, [r7, #8]
 8008238:	607a      	str	r2, [r7, #4]
 800823a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800823c:	e051      	b.n	80082e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800824c:	d123      	bne.n	8008296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800825c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008266:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2220      	movs	r2, #32
 8008272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	f043 0204 	orr.w	r2, r3, #4
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e046      	b.n	8008324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829c:	d021      	beq.n	80082e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800829e:	f7fd ffbd 	bl	800621c <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d302      	bcc.n	80082b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d116      	bne.n	80082e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2220      	movs	r2, #32
 80082be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	f043 0220 	orr.w	r2, r3, #32
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e020      	b.n	8008324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	0c1b      	lsrs	r3, r3, #16
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d10c      	bne.n	8008306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	43da      	mvns	r2, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	4013      	ands	r3, r2
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	bf14      	ite	ne
 80082fe:	2301      	movne	r3, #1
 8008300:	2300      	moveq	r3, #0
 8008302:	b2db      	uxtb	r3, r3
 8008304:	e00b      	b.n	800831e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	43da      	mvns	r2, r3
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	4013      	ands	r3, r2
 8008312:	b29b      	uxth	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	bf14      	ite	ne
 8008318:	2301      	movne	r3, #1
 800831a:	2300      	moveq	r3, #0
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d18d      	bne.n	800823e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008338:	e02d      	b.n	8008396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f000 f8ce 	bl	80084dc <I2C_IsAcknowledgeFailed>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e02d      	b.n	80083a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008350:	d021      	beq.n	8008396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008352:	f7fd ff63 	bl	800621c <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	429a      	cmp	r2, r3
 8008360:	d302      	bcc.n	8008368 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d116      	bne.n	8008396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2220      	movs	r2, #32
 8008372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008382:	f043 0220 	orr.w	r2, r3, #32
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e007      	b.n	80083a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083a0:	2b80      	cmp	r3, #128	; 0x80
 80083a2:	d1ca      	bne.n	800833a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	60b9      	str	r1, [r7, #8]
 80083b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80083ba:	e02d      	b.n	8008418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 f88d 	bl	80084dc <I2C_IsAcknowledgeFailed>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e02d      	b.n	8008428 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d2:	d021      	beq.n	8008418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083d4:	f7fd ff22 	bl	800621c <HAL_GetTick>
 80083d8:	4602      	mov	r2, r0
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d302      	bcc.n	80083ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d116      	bne.n	8008418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2220      	movs	r2, #32
 80083f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008404:	f043 0220 	orr.w	r2, r3, #32
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e007      	b.n	8008428 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	f003 0304 	and.w	r3, r3, #4
 8008422:	2b04      	cmp	r3, #4
 8008424:	d1ca      	bne.n	80083bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800843c:	e042      	b.n	80084c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	f003 0310 	and.w	r3, r3, #16
 8008448:	2b10      	cmp	r3, #16
 800844a:	d119      	bne.n	8008480 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f06f 0210 	mvn.w	r2, #16
 8008454:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2220      	movs	r2, #32
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e029      	b.n	80084d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008480:	f7fd fecc 	bl	800621c <HAL_GetTick>
 8008484:	4602      	mov	r2, r0
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	429a      	cmp	r2, r3
 800848e:	d302      	bcc.n	8008496 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d116      	bne.n	80084c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2220      	movs	r2, #32
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b0:	f043 0220 	orr.w	r2, r3, #32
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e007      	b.n	80084d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ce:	2b40      	cmp	r3, #64	; 0x40
 80084d0:	d1b5      	bne.n	800843e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084f2:	d11b      	bne.n	800852c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2220      	movs	r2, #32
 8008508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008518:	f043 0204 	orr.w	r2, r3, #4
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e000      	b.n	800852e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	bc80      	pop	{r7}
 8008536:	4770      	bx	lr

08008538 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800853a:	b08f      	sub	sp, #60	; 0x3c
 800853c:	af0a      	add	r7, sp, #40	; 0x28
 800853e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e10f      	b.n	800876a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b00      	cmp	r3, #0
 800855a:	d106      	bne.n	800856a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f006 fa63 	bl	800ea30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2203      	movs	r2, #3
 800856e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857a:	2b00      	cmp	r3, #0
 800857c:	d102      	bne.n	8008584 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4618      	mov	r0, r3
 800858a:	f003 fa53 	bl	800ba34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	603b      	str	r3, [r7, #0]
 8008594:	687e      	ldr	r6, [r7, #4]
 8008596:	466d      	mov	r5, sp
 8008598:	f106 0410 	add.w	r4, r6, #16
 800859c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800859e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80085a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80085ac:	1d33      	adds	r3, r6, #4
 80085ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085b0:	6838      	ldr	r0, [r7, #0]
 80085b2:	f003 f935 	bl	800b820 <USB_CoreInit>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d005      	beq.n	80085c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2202      	movs	r2, #2
 80085c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e0d0      	b.n	800876a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2100      	movs	r1, #0
 80085ce:	4618      	mov	r0, r3
 80085d0:	f003 fa40 	bl	800ba54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085d4:	2300      	movs	r3, #0
 80085d6:	73fb      	strb	r3, [r7, #15]
 80085d8:	e04a      	b.n	8008670 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80085da:	7bfa      	ldrb	r2, [r7, #15]
 80085dc:	6879      	ldr	r1, [r7, #4]
 80085de:	4613      	mov	r3, r2
 80085e0:	00db      	lsls	r3, r3, #3
 80085e2:	1a9b      	subs	r3, r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	440b      	add	r3, r1
 80085e8:	333d      	adds	r3, #61	; 0x3d
 80085ea:	2201      	movs	r2, #1
 80085ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80085ee:	7bfa      	ldrb	r2, [r7, #15]
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	4613      	mov	r3, r2
 80085f4:	00db      	lsls	r3, r3, #3
 80085f6:	1a9b      	subs	r3, r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	440b      	add	r3, r1
 80085fc:	333c      	adds	r3, #60	; 0x3c
 80085fe:	7bfa      	ldrb	r2, [r7, #15]
 8008600:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008602:	7bfa      	ldrb	r2, [r7, #15]
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	b298      	uxth	r0, r3
 8008608:	6879      	ldr	r1, [r7, #4]
 800860a:	4613      	mov	r3, r2
 800860c:	00db      	lsls	r3, r3, #3
 800860e:	1a9b      	subs	r3, r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	440b      	add	r3, r1
 8008614:	3342      	adds	r3, #66	; 0x42
 8008616:	4602      	mov	r2, r0
 8008618:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800861a:	7bfa      	ldrb	r2, [r7, #15]
 800861c:	6879      	ldr	r1, [r7, #4]
 800861e:	4613      	mov	r3, r2
 8008620:	00db      	lsls	r3, r3, #3
 8008622:	1a9b      	subs	r3, r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	440b      	add	r3, r1
 8008628:	333f      	adds	r3, #63	; 0x3f
 800862a:	2200      	movs	r2, #0
 800862c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800862e:	7bfa      	ldrb	r2, [r7, #15]
 8008630:	6879      	ldr	r1, [r7, #4]
 8008632:	4613      	mov	r3, r2
 8008634:	00db      	lsls	r3, r3, #3
 8008636:	1a9b      	subs	r3, r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	440b      	add	r3, r1
 800863c:	3344      	adds	r3, #68	; 0x44
 800863e:	2200      	movs	r2, #0
 8008640:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008642:	7bfa      	ldrb	r2, [r7, #15]
 8008644:	6879      	ldr	r1, [r7, #4]
 8008646:	4613      	mov	r3, r2
 8008648:	00db      	lsls	r3, r3, #3
 800864a:	1a9b      	subs	r3, r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	440b      	add	r3, r1
 8008650:	3348      	adds	r3, #72	; 0x48
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008656:	7bfa      	ldrb	r2, [r7, #15]
 8008658:	6879      	ldr	r1, [r7, #4]
 800865a:	4613      	mov	r3, r2
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	1a9b      	subs	r3, r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	440b      	add	r3, r1
 8008664:	3350      	adds	r3, #80	; 0x50
 8008666:	2200      	movs	r2, #0
 8008668:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800866a:	7bfb      	ldrb	r3, [r7, #15]
 800866c:	3301      	adds	r3, #1
 800866e:	73fb      	strb	r3, [r7, #15]
 8008670:	7bfa      	ldrb	r2, [r7, #15]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	429a      	cmp	r2, r3
 8008678:	d3af      	bcc.n	80085da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800867a:	2300      	movs	r3, #0
 800867c:	73fb      	strb	r3, [r7, #15]
 800867e:	e044      	b.n	800870a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008680:	7bfa      	ldrb	r2, [r7, #15]
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	4613      	mov	r3, r2
 8008686:	00db      	lsls	r3, r3, #3
 8008688:	1a9b      	subs	r3, r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	440b      	add	r3, r1
 800868e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008692:	2200      	movs	r2, #0
 8008694:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008696:	7bfa      	ldrb	r2, [r7, #15]
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	4613      	mov	r3, r2
 800869c:	00db      	lsls	r3, r3, #3
 800869e:	1a9b      	subs	r3, r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	440b      	add	r3, r1
 80086a4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80086a8:	7bfa      	ldrb	r2, [r7, #15]
 80086aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80086ac:	7bfa      	ldrb	r2, [r7, #15]
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	4613      	mov	r3, r2
 80086b2:	00db      	lsls	r3, r3, #3
 80086b4:	1a9b      	subs	r3, r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	440b      	add	r3, r1
 80086ba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80086be:	2200      	movs	r2, #0
 80086c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80086c2:	7bfa      	ldrb	r2, [r7, #15]
 80086c4:	6879      	ldr	r1, [r7, #4]
 80086c6:	4613      	mov	r3, r2
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	1a9b      	subs	r3, r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	440b      	add	r3, r1
 80086d0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80086d4:	2200      	movs	r2, #0
 80086d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80086d8:	7bfa      	ldrb	r2, [r7, #15]
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	4613      	mov	r3, r2
 80086de:	00db      	lsls	r3, r3, #3
 80086e0:	1a9b      	subs	r3, r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	440b      	add	r3, r1
 80086e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80086ee:	7bfa      	ldrb	r2, [r7, #15]
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	4613      	mov	r3, r2
 80086f4:	00db      	lsls	r3, r3, #3
 80086f6:	1a9b      	subs	r3, r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	440b      	add	r3, r1
 80086fc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008700:	2200      	movs	r2, #0
 8008702:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	3301      	adds	r3, #1
 8008708:	73fb      	strb	r3, [r7, #15]
 800870a:	7bfa      	ldrb	r2, [r7, #15]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	429a      	cmp	r2, r3
 8008712:	d3b5      	bcc.n	8008680 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	603b      	str	r3, [r7, #0]
 800871a:	687e      	ldr	r6, [r7, #4]
 800871c:	466d      	mov	r5, sp
 800871e:	f106 0410 	add.w	r4, r6, #16
 8008722:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008724:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800872a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800872e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008732:	1d33      	adds	r3, r6, #4
 8008734:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008736:	6838      	ldr	r0, [r7, #0]
 8008738:	f003 f9d8 	bl	800baec <USB_DevInit>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d005      	beq.n	800874e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2202      	movs	r2, #2
 8008746:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e00d      	b.n	800876a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4618      	mov	r0, r3
 8008764:	f004 fa49 	bl	800cbfa <USB_DevDisconnect>

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008772 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b082      	sub	sp, #8
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008780:	2b01      	cmp	r3, #1
 8008782:	d101      	bne.n	8008788 <HAL_PCD_Start+0x16>
 8008784:	2302      	movs	r3, #2
 8008786:	e012      	b.n	80087ae <HAL_PCD_Start+0x3c>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4618      	mov	r0, r3
 8008796:	f003 f93d 	bl	800ba14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4618      	mov	r0, r3
 80087a0:	f004 fa0b 	bl	800cbba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80087b6:	b590      	push	{r4, r7, lr}
 80087b8:	b08d      	sub	sp, #52	; 0x34
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f004 fac2 	bl	800cd56 <USB_GetMode>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f040 838f 	bne.w	8008ef8 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4618      	mov	r0, r3
 80087e0:	f004 fa2b 	bl	800cc3a <USB_ReadInterrupts>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 8385 	beq.w	8008ef6 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f004 fa22 	bl	800cc3a <USB_ReadInterrupts>
 80087f6:	4603      	mov	r3, r0
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d107      	bne.n	8008810 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	695a      	ldr	r2, [r3, #20]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f002 0202 	and.w	r2, r2, #2
 800880e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4618      	mov	r0, r3
 8008816:	f004 fa10 	bl	800cc3a <USB_ReadInterrupts>
 800881a:	4603      	mov	r3, r0
 800881c:	f003 0310 	and.w	r3, r3, #16
 8008820:	2b10      	cmp	r3, #16
 8008822:	d161      	bne.n	80088e8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	699a      	ldr	r2, [r3, #24]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f022 0210 	bic.w	r2, r2, #16
 8008832:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	f003 020f 	and.w	r2, r3, #15
 8008840:	4613      	mov	r3, r2
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	1a9b      	subs	r3, r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	4413      	add	r3, r2
 8008850:	3304      	adds	r3, #4
 8008852:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	0c5b      	lsrs	r3, r3, #17
 8008858:	f003 030f 	and.w	r3, r3, #15
 800885c:	2b02      	cmp	r3, #2
 800885e:	d124      	bne.n	80088aa <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008866:	4013      	ands	r3, r2
 8008868:	2b00      	cmp	r3, #0
 800886a:	d035      	beq.n	80088d8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	091b      	lsrs	r3, r3, #4
 8008874:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800887a:	b29b      	uxth	r3, r3
 800887c:	461a      	mov	r2, r3
 800887e:	6a38      	ldr	r0, [r7, #32]
 8008880:	f004 f84d 	bl	800c91e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	68da      	ldr	r2, [r3, #12]
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	091b      	lsrs	r3, r3, #4
 800888c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008890:	441a      	add	r2, r3
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	699a      	ldr	r2, [r3, #24]
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	091b      	lsrs	r3, r3, #4
 800889e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088a2:	441a      	add	r2, r3
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	619a      	str	r2, [r3, #24]
 80088a8:	e016      	b.n	80088d8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	0c5b      	lsrs	r3, r3, #17
 80088ae:	f003 030f 	and.w	r3, r3, #15
 80088b2:	2b06      	cmp	r3, #6
 80088b4:	d110      	bne.n	80088d8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80088bc:	2208      	movs	r2, #8
 80088be:	4619      	mov	r1, r3
 80088c0:	6a38      	ldr	r0, [r7, #32]
 80088c2:	f004 f82c 	bl	800c91e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	699a      	ldr	r2, [r3, #24]
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	091b      	lsrs	r3, r3, #4
 80088ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088d2:	441a      	add	r2, r3
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	699a      	ldr	r2, [r3, #24]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f042 0210 	orr.w	r2, r2, #16
 80088e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f004 f9a4 	bl	800cc3a <USB_ReadInterrupts>
 80088f2:	4603      	mov	r3, r0
 80088f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80088fc:	d16e      	bne.n	80089dc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80088fe:	2300      	movs	r3, #0
 8008900:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4618      	mov	r0, r3
 8008908:	f004 f9a9 	bl	800cc5e <USB_ReadDevAllOutEpInterrupt>
 800890c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800890e:	e062      	b.n	80089d6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	2b00      	cmp	r3, #0
 8008918:	d057      	beq.n	80089ca <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008920:	b2d2      	uxtb	r2, r2
 8008922:	4611      	mov	r1, r2
 8008924:	4618      	mov	r0, r3
 8008926:	f004 f9cc 	bl	800ccc2 <USB_ReadDevOutEPInterrupt>
 800892a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00c      	beq.n	8008950 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	015a      	lsls	r2, r3, #5
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	4413      	add	r3, r2
 800893e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008942:	461a      	mov	r2, r3
 8008944:	2301      	movs	r3, #1
 8008946:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008948:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fda2 	bl	8009494 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	f003 0308 	and.w	r3, r3, #8
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00c      	beq.n	8008974 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	015a      	lsls	r2, r3, #5
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	4413      	add	r3, r2
 8008962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008966:	461a      	mov	r2, r3
 8008968:	2308      	movs	r3, #8
 800896a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800896c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fe9c 	bl	80096ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	f003 0310 	and.w	r3, r3, #16
 800897a:	2b00      	cmp	r3, #0
 800897c:	d008      	beq.n	8008990 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	015a      	lsls	r2, r3, #5
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	4413      	add	r3, r2
 8008986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800898a:	461a      	mov	r2, r3
 800898c:	2310      	movs	r3, #16
 800898e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f003 0320 	and.w	r3, r3, #32
 8008996:	2b00      	cmp	r3, #0
 8008998:	d008      	beq.n	80089ac <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a6:	461a      	mov	r2, r3
 80089a8:	2320      	movs	r3, #32
 80089aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d009      	beq.n	80089ca <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c2:	461a      	mov	r2, r3
 80089c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089c8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	3301      	adds	r3, #1
 80089ce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80089d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d2:	085b      	lsrs	r3, r3, #1
 80089d4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d199      	bne.n	8008910 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4618      	mov	r0, r3
 80089e2:	f004 f92a 	bl	800cc3a <USB_ReadInterrupts>
 80089e6:	4603      	mov	r3, r0
 80089e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80089f0:	f040 80c0 	bne.w	8008b74 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f004 f949 	bl	800cc90 <USB_ReadDevAllInEpInterrupt>
 80089fe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008a04:	e0b2      	b.n	8008b6c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 80a7 	beq.w	8008b60 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a18:	b2d2      	uxtb	r2, r2
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f004 f96d 	bl	800ccfc <USB_ReadDevInEPInterrupt>
 8008a22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d057      	beq.n	8008ade <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	f003 030f 	and.w	r3, r3, #15
 8008a34:	2201      	movs	r2, #1
 8008a36:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	43db      	mvns	r3, r3
 8008a48:	69f9      	ldr	r1, [r7, #28]
 8008a4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a4e:	4013      	ands	r3, r2
 8008a50:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a5e:	461a      	mov	r2, r3
 8008a60:	2301      	movs	r3, #1
 8008a62:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d132      	bne.n	8008ad2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008a6c:	6879      	ldr	r1, [r7, #4]
 8008a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a70:	4613      	mov	r3, r2
 8008a72:	00db      	lsls	r3, r3, #3
 8008a74:	1a9b      	subs	r3, r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	440b      	add	r3, r1
 8008a7a:	3348      	adds	r3, #72	; 0x48
 8008a7c:	6819      	ldr	r1, [r3, #0]
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a82:	4613      	mov	r3, r2
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	1a9b      	subs	r3, r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4403      	add	r3, r0
 8008a8c:	3344      	adds	r3, #68	; 0x44
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4419      	add	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a96:	4613      	mov	r3, r2
 8008a98:	00db      	lsls	r3, r3, #3
 8008a9a:	1a9b      	subs	r3, r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4403      	add	r3, r0
 8008aa0:	3348      	adds	r3, #72	; 0x48
 8008aa2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d113      	bne.n	8008ad2 <HAL_PCD_IRQHandler+0x31c>
 8008aaa:	6879      	ldr	r1, [r7, #4]
 8008aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aae:	4613      	mov	r3, r2
 8008ab0:	00db      	lsls	r3, r3, #3
 8008ab2:	1a9b      	subs	r3, r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	440b      	add	r3, r1
 8008ab8:	3350      	adds	r3, #80	; 0x50
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d108      	bne.n	8008ad2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6818      	ldr	r0, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008aca:	461a      	mov	r2, r3
 8008acc:	2101      	movs	r1, #1
 8008ace:	f004 f971 	bl	800cdb4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f006 f82a 	bl	800eb32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	f003 0308 	and.w	r3, r3, #8
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d008      	beq.n	8008afa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	015a      	lsls	r2, r3, #5
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af4:	461a      	mov	r2, r3
 8008af6:	2308      	movs	r3, #8
 8008af8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f003 0310 	and.w	r3, r3, #16
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d008      	beq.n	8008b16 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b10:	461a      	mov	r2, r3
 8008b12:	2310      	movs	r3, #16
 8008b14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d008      	beq.n	8008b32 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	2340      	movs	r3, #64	; 0x40
 8008b30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d008      	beq.n	8008b4e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b48:	461a      	mov	r2, r3
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d003      	beq.n	8008b60 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008b58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fc0c 	bl	8009378 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	3301      	adds	r3, #1
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b68:	085b      	lsrs	r3, r3, #1
 8008b6a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f47f af49 	bne.w	8008a06 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f004 f85e 	bl	800cc3a <USB_ReadInterrupts>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b88:	d114      	bne.n	8008bb4 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	69fa      	ldr	r2, [r7, #28]
 8008b94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b98:	f023 0301 	bic.w	r3, r3, #1
 8008b9c:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f006 f83e 	bl	800ec20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	695a      	ldr	r2, [r3, #20]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f004 f83e 	bl	800cc3a <USB_ReadInterrupts>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bc8:	d112      	bne.n	8008bf0 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d102      	bne.n	8008be0 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f005 fffa 	bl	800ebd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	695a      	ldr	r2, [r3, #20]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008bee:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f004 f820 	bl	800cc3a <USB_ReadInterrupts>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c04:	f040 80c7 	bne.w	8008d96 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	69fa      	ldr	r2, [r7, #28]
 8008c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c16:	f023 0301 	bic.w	r3, r3, #1
 8008c1a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2110      	movs	r1, #16
 8008c22:	4618      	mov	r0, r3
 8008c24:	f003 f8c6 	bl	800bdb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c2c:	e056      	b.n	8008cdc <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c40:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c52:	0151      	lsls	r1, r2, #5
 8008c54:	69fa      	ldr	r2, [r7, #28]
 8008c56:	440a      	add	r2, r1
 8008c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c60:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c72:	0151      	lsls	r1, r2, #5
 8008c74:	69fa      	ldr	r2, [r7, #28]
 8008c76:	440a      	add	r2, r1
 8008c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c8e:	461a      	mov	r2, r3
 8008c90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c94:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c98:	015a      	lsls	r2, r3, #5
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ca6:	0151      	lsls	r1, r2, #5
 8008ca8:	69fa      	ldr	r2, [r7, #28]
 8008caa:	440a      	add	r2, r1
 8008cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cb4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb8:	015a      	lsls	r2, r3, #5
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cc6:	0151      	lsls	r1, r2, #5
 8008cc8:	69fa      	ldr	r2, [r7, #28]
 8008cca:	440a      	add	r2, r1
 8008ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cd4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd8:	3301      	adds	r3, #1
 8008cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d3a3      	bcc.n	8008c2e <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cf4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008cf8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d016      	beq.n	8008d30 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d0c:	69fa      	ldr	r2, [r7, #28]
 8008d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d12:	f043 030b 	orr.w	r3, r3, #11
 8008d16:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d22:	69fa      	ldr	r2, [r7, #28]
 8008d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d28:	f043 030b 	orr.w	r3, r3, #11
 8008d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8008d2e:	e015      	b.n	8008d5c <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	69fa      	ldr	r2, [r7, #28]
 8008d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008d42:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008d46:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	69fa      	ldr	r2, [r7, #28]
 8008d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d56:	f043 030b 	orr.w	r3, r3, #11
 8008d5a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	69fa      	ldr	r2, [r7, #28]
 8008d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008d6e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6818      	ldr	r0, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008d80:	461a      	mov	r2, r3
 8008d82:	f004 f817 	bl	800cdb4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	695a      	ldr	r2, [r3, #20]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f003 ff4d 	bl	800cc3a <USB_ReadInterrupts>
 8008da0:	4603      	mov	r3, r0
 8008da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008daa:	d124      	bne.n	8008df6 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f003 ffdd 	bl	800cd70 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f003 f856 	bl	800be6c <USB_GetDevSpeed>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681c      	ldr	r4, [r3, #0]
 8008dcc:	f001 f932 	bl	800a034 <HAL_RCC_GetHCLKFreq>
 8008dd0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	461a      	mov	r2, r3
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f002 fd78 	bl	800b8d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f005 fece 	bl	800eb82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	695a      	ldr	r2, [r3, #20]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008df4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f003 ff1d 	bl	800cc3a <USB_ReadInterrupts>
 8008e00:	4603      	mov	r3, r0
 8008e02:	f003 0308 	and.w	r3, r3, #8
 8008e06:	2b08      	cmp	r3, #8
 8008e08:	d10a      	bne.n	8008e20 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f005 feab 	bl	800eb66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	695a      	ldr	r2, [r3, #20]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f002 0208 	and.w	r2, r2, #8
 8008e1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f003 ff08 	bl	800cc3a <USB_ReadInterrupts>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e34:	d10f      	bne.n	8008e56 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	4619      	mov	r1, r3
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f005 ff0d 	bl	800ec60 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	695a      	ldr	r2, [r3, #20]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008e54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f003 feed 	bl	800cc3a <USB_ReadInterrupts>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e6a:	d10f      	bne.n	8008e8c <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	4619      	mov	r1, r3
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f005 fee0 	bl	800ec3c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	695a      	ldr	r2, [r3, #20]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008e8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f003 fed2 	bl	800cc3a <USB_ReadInterrupts>
 8008e96:	4603      	mov	r3, r0
 8008e98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea0:	d10a      	bne.n	8008eb8 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f005 feee 	bl	800ec84 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	695a      	ldr	r2, [r3, #20]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f003 febc 	bl	800cc3a <USB_ReadInterrupts>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	f003 0304 	and.w	r3, r3, #4
 8008ec8:	2b04      	cmp	r3, #4
 8008eca:	d115      	bne.n	8008ef8 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	f003 0304 	and.w	r3, r3, #4
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f005 fede 	bl	800eca0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6859      	ldr	r1, [r3, #4]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69ba      	ldr	r2, [r7, #24]
 8008ef0:	430a      	orrs	r2, r1
 8008ef2:	605a      	str	r2, [r3, #4]
 8008ef4:	e000      	b.n	8008ef8 <HAL_PCD_IRQHandler+0x742>
      return;
 8008ef6:	bf00      	nop
    }
  }
}
 8008ef8:	3734      	adds	r7, #52	; 0x34
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd90      	pop	{r4, r7, pc}

08008efe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b082      	sub	sp, #8
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	460b      	mov	r3, r1
 8008f08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d101      	bne.n	8008f18 <HAL_PCD_SetAddress+0x1a>
 8008f14:	2302      	movs	r3, #2
 8008f16:	e013      	b.n	8008f40 <HAL_PCD_SetAddress+0x42>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	78fa      	ldrb	r2, [r7, #3]
 8008f2e:	4611      	mov	r1, r2
 8008f30:	4618      	mov	r0, r3
 8008f32:	f003 fe1d 	bl	800cb70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	4608      	mov	r0, r1
 8008f52:	4611      	mov	r1, r2
 8008f54:	461a      	mov	r2, r3
 8008f56:	4603      	mov	r3, r0
 8008f58:	70fb      	strb	r3, [r7, #3]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	803b      	strh	r3, [r7, #0]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	da0f      	bge.n	8008f8e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f6e:	78fb      	ldrb	r3, [r7, #3]
 8008f70:	f003 020f 	and.w	r2, r3, #15
 8008f74:	4613      	mov	r3, r2
 8008f76:	00db      	lsls	r3, r3, #3
 8008f78:	1a9b      	subs	r3, r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	3338      	adds	r3, #56	; 0x38
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	4413      	add	r3, r2
 8008f82:	3304      	adds	r3, #4
 8008f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	705a      	strb	r2, [r3, #1]
 8008f8c:	e00f      	b.n	8008fae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f8e:	78fb      	ldrb	r3, [r7, #3]
 8008f90:	f003 020f 	and.w	r2, r3, #15
 8008f94:	4613      	mov	r3, r2
 8008f96:	00db      	lsls	r3, r3, #3
 8008f98:	1a9b      	subs	r3, r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008fae:	78fb      	ldrb	r3, [r7, #3]
 8008fb0:	f003 030f 	and.w	r3, r3, #15
 8008fb4:	b2da      	uxtb	r2, r3
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008fba:	883a      	ldrh	r2, [r7, #0]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	78ba      	ldrb	r2, [r7, #2]
 8008fc4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	785b      	ldrb	r3, [r3, #1]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d004      	beq.n	8008fd8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008fd8:	78bb      	ldrb	r3, [r7, #2]
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d102      	bne.n	8008fe4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d101      	bne.n	8008ff2 <HAL_PCD_EP_Open+0xaa>
 8008fee:	2302      	movs	r3, #2
 8008ff0:	e00e      	b.n	8009010 <HAL_PCD_EP_Open+0xc8>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68f9      	ldr	r1, [r7, #12]
 8009000:	4618      	mov	r0, r3
 8009002:	f002 ff57 	bl	800beb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800900e:	7afb      	ldrb	r3, [r7, #11]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	460b      	mov	r3, r1
 8009022:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009028:	2b00      	cmp	r3, #0
 800902a:	da0f      	bge.n	800904c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800902c:	78fb      	ldrb	r3, [r7, #3]
 800902e:	f003 020f 	and.w	r2, r3, #15
 8009032:	4613      	mov	r3, r2
 8009034:	00db      	lsls	r3, r3, #3
 8009036:	1a9b      	subs	r3, r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	3338      	adds	r3, #56	; 0x38
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	4413      	add	r3, r2
 8009040:	3304      	adds	r3, #4
 8009042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2201      	movs	r2, #1
 8009048:	705a      	strb	r2, [r3, #1]
 800904a:	e00f      	b.n	800906c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800904c:	78fb      	ldrb	r3, [r7, #3]
 800904e:	f003 020f 	and.w	r2, r3, #15
 8009052:	4613      	mov	r3, r2
 8009054:	00db      	lsls	r3, r3, #3
 8009056:	1a9b      	subs	r3, r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	4413      	add	r3, r2
 8009062:	3304      	adds	r3, #4
 8009064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800906c:	78fb      	ldrb	r3, [r7, #3]
 800906e:	f003 030f 	and.w	r3, r3, #15
 8009072:	b2da      	uxtb	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800907e:	2b01      	cmp	r3, #1
 8009080:	d101      	bne.n	8009086 <HAL_PCD_EP_Close+0x6e>
 8009082:	2302      	movs	r3, #2
 8009084:	e00e      	b.n	80090a4 <HAL_PCD_EP_Close+0x8c>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68f9      	ldr	r1, [r7, #12]
 8009094:	4618      	mov	r0, r3
 8009096:	f002 ff93 	bl	800bfc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	607a      	str	r2, [r7, #4]
 80090b6:	603b      	str	r3, [r7, #0]
 80090b8:	460b      	mov	r3, r1
 80090ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090bc:	7afb      	ldrb	r3, [r7, #11]
 80090be:	f003 020f 	and.w	r2, r3, #15
 80090c2:	4613      	mov	r3, r2
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	1a9b      	subs	r3, r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	4413      	add	r3, r2
 80090d2:	3304      	adds	r3, #4
 80090d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2200      	movs	r2, #0
 80090e6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	2200      	movs	r2, #0
 80090ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090ee:	7afb      	ldrb	r3, [r7, #11]
 80090f0:	f003 030f 	and.w	r3, r3, #15
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d102      	bne.n	8009108 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009108:	7afb      	ldrb	r3, [r7, #11]
 800910a:	f003 030f 	and.w	r3, r3, #15
 800910e:	2b00      	cmp	r3, #0
 8009110:	d109      	bne.n	8009126 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6818      	ldr	r0, [r3, #0]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	b2db      	uxtb	r3, r3
 800911c:	461a      	mov	r2, r3
 800911e:	6979      	ldr	r1, [r7, #20]
 8009120:	f003 fa6e 	bl	800c600 <USB_EP0StartXfer>
 8009124:	e008      	b.n	8009138 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6818      	ldr	r0, [r3, #0]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	b2db      	uxtb	r3, r3
 8009130:	461a      	mov	r2, r3
 8009132:	6979      	ldr	r1, [r7, #20]
 8009134:	f003 f820 	bl	800c178 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009142:	b480      	push	{r7}
 8009144:	b083      	sub	sp, #12
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	460b      	mov	r3, r1
 800914c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800914e:	78fb      	ldrb	r3, [r7, #3]
 8009150:	f003 020f 	and.w	r2, r3, #15
 8009154:	6879      	ldr	r1, [r7, #4]
 8009156:	4613      	mov	r3, r2
 8009158:	00db      	lsls	r3, r3, #3
 800915a:	1a9b      	subs	r3, r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	440b      	add	r3, r1
 8009160:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009164:	681b      	ldr	r3, [r3, #0]
}
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	bc80      	pop	{r7}
 800916e:	4770      	bx	lr

08009170 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	607a      	str	r2, [r7, #4]
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	460b      	mov	r3, r1
 800917e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009180:	7afb      	ldrb	r3, [r7, #11]
 8009182:	f003 020f 	and.w	r2, r3, #15
 8009186:	4613      	mov	r3, r2
 8009188:	00db      	lsls	r3, r3, #3
 800918a:	1a9b      	subs	r3, r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	3338      	adds	r3, #56	; 0x38
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	4413      	add	r3, r2
 8009194:	3304      	adds	r3, #4
 8009196:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	2200      	movs	r2, #0
 80091a8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2201      	movs	r2, #1
 80091ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091b0:	7afb      	ldrb	r3, [r7, #11]
 80091b2:	f003 030f 	and.w	r3, r3, #15
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d102      	bne.n	80091ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80091ca:	7afb      	ldrb	r3, [r7, #11]
 80091cc:	f003 030f 	and.w	r3, r3, #15
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d109      	bne.n	80091e8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	461a      	mov	r2, r3
 80091e0:	6979      	ldr	r1, [r7, #20]
 80091e2:	f003 fa0d 	bl	800c600 <USB_EP0StartXfer>
 80091e6:	e008      	b.n	80091fa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6818      	ldr	r0, [r3, #0]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	461a      	mov	r2, r3
 80091f4:	6979      	ldr	r1, [r7, #20]
 80091f6:	f002 ffbf 	bl	800c178 <USB_EPStartXfer>
  }

  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	f003 020f 	and.w	r2, r3, #15
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	429a      	cmp	r2, r3
 800921c:	d901      	bls.n	8009222 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e050      	b.n	80092c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009226:	2b00      	cmp	r3, #0
 8009228:	da0f      	bge.n	800924a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800922a:	78fb      	ldrb	r3, [r7, #3]
 800922c:	f003 020f 	and.w	r2, r3, #15
 8009230:	4613      	mov	r3, r2
 8009232:	00db      	lsls	r3, r3, #3
 8009234:	1a9b      	subs	r3, r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	3338      	adds	r3, #56	; 0x38
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	4413      	add	r3, r2
 800923e:	3304      	adds	r3, #4
 8009240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2201      	movs	r2, #1
 8009246:	705a      	strb	r2, [r3, #1]
 8009248:	e00d      	b.n	8009266 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800924a:	78fa      	ldrb	r2, [r7, #3]
 800924c:	4613      	mov	r3, r2
 800924e:	00db      	lsls	r3, r3, #3
 8009250:	1a9b      	subs	r3, r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	4413      	add	r3, r2
 800925c:	3304      	adds	r3, #4
 800925e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2201      	movs	r2, #1
 800926a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800926c:	78fb      	ldrb	r3, [r7, #3]
 800926e:	f003 030f 	and.w	r3, r3, #15
 8009272:	b2da      	uxtb	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800927e:	2b01      	cmp	r3, #1
 8009280:	d101      	bne.n	8009286 <HAL_PCD_EP_SetStall+0x82>
 8009282:	2302      	movs	r3, #2
 8009284:	e01e      	b.n	80092c4 <HAL_PCD_EP_SetStall+0xc0>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68f9      	ldr	r1, [r7, #12]
 8009294:	4618      	mov	r0, r3
 8009296:	f003 fb99 	bl	800c9cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800929a:	78fb      	ldrb	r3, [r7, #3]
 800929c:	f003 030f 	and.w	r3, r3, #15
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10a      	bne.n	80092ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6818      	ldr	r0, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	b2d9      	uxtb	r1, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80092b4:	461a      	mov	r2, r3
 80092b6:	f003 fd7d 	bl	800cdb4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	460b      	mov	r3, r1
 80092d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80092d8:	78fb      	ldrb	r3, [r7, #3]
 80092da:	f003 020f 	and.w	r2, r3, #15
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d901      	bls.n	80092ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e042      	b.n	8009370 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80092ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	da0f      	bge.n	8009312 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092f2:	78fb      	ldrb	r3, [r7, #3]
 80092f4:	f003 020f 	and.w	r2, r3, #15
 80092f8:	4613      	mov	r3, r2
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	1a9b      	subs	r3, r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	3338      	adds	r3, #56	; 0x38
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	4413      	add	r3, r2
 8009306:	3304      	adds	r3, #4
 8009308:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2201      	movs	r2, #1
 800930e:	705a      	strb	r2, [r3, #1]
 8009310:	e00f      	b.n	8009332 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009312:	78fb      	ldrb	r3, [r7, #3]
 8009314:	f003 020f 	and.w	r2, r3, #15
 8009318:	4613      	mov	r3, r2
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	1a9b      	subs	r3, r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	4413      	add	r3, r2
 8009328:	3304      	adds	r3, #4
 800932a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009338:	78fb      	ldrb	r3, [r7, #3]
 800933a:	f003 030f 	and.w	r3, r3, #15
 800933e:	b2da      	uxtb	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800934a:	2b01      	cmp	r3, #1
 800934c:	d101      	bne.n	8009352 <HAL_PCD_EP_ClrStall+0x86>
 800934e:	2302      	movs	r3, #2
 8009350:	e00e      	b.n	8009370 <HAL_PCD_EP_ClrStall+0xa4>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68f9      	ldr	r1, [r7, #12]
 8009360:	4618      	mov	r0, r3
 8009362:	f003 fba0 	bl	800caa6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b08a      	sub	sp, #40	; 0x28
 800937c:	af02      	add	r7, sp, #8
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	4613      	mov	r3, r2
 8009390:	00db      	lsls	r3, r3, #3
 8009392:	1a9b      	subs	r3, r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	3338      	adds	r3, #56	; 0x38
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	4413      	add	r3, r2
 800939c:	3304      	adds	r3, #4
 800939e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	699a      	ldr	r2, [r3, #24]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d901      	bls.n	80093b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e06c      	b.n	800948a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	695a      	ldr	r2, [r3, #20]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	69fa      	ldr	r2, [r7, #28]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d902      	bls.n	80093cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	3303      	adds	r3, #3
 80093d0:	089b      	lsrs	r3, r3, #2
 80093d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80093d4:	e02b      	b.n	800942e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	695a      	ldr	r2, [r3, #20]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	69fa      	ldr	r2, [r7, #28]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d902      	bls.n	80093f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	3303      	adds	r3, #3
 80093f6:	089b      	lsrs	r3, r3, #2
 80093f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	68d9      	ldr	r1, [r3, #12]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	b2da      	uxtb	r2, r3
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800940a:	b2db      	uxtb	r3, r3
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	4603      	mov	r3, r0
 8009410:	6978      	ldr	r0, [r7, #20]
 8009412:	f003 fa47 	bl	800c8a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	68da      	ldr	r2, [r3, #12]
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	441a      	add	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	699a      	ldr	r2, [r3, #24]
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	441a      	add	r2, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	015a      	lsls	r2, r3, #5
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	4413      	add	r3, r2
 8009436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	b29b      	uxth	r3, r3
 800943e:	69ba      	ldr	r2, [r7, #24]
 8009440:	429a      	cmp	r2, r3
 8009442:	d809      	bhi.n	8009458 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	699a      	ldr	r2, [r3, #24]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800944c:	429a      	cmp	r2, r3
 800944e:	d203      	bcs.n	8009458 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	695b      	ldr	r3, [r3, #20]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1be      	bne.n	80093d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	695a      	ldr	r2, [r3, #20]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	429a      	cmp	r2, r3
 8009462:	d811      	bhi.n	8009488 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	f003 030f 	and.w	r3, r3, #15
 800946a:	2201      	movs	r2, #1
 800946c:	fa02 f303 	lsl.w	r3, r2, r3
 8009470:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	43db      	mvns	r3, r3
 800947e:	6939      	ldr	r1, [r7, #16]
 8009480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009484:	4013      	ands	r3, r2
 8009486:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3720      	adds	r7, #32
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
	...

08009494 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	333c      	adds	r3, #60	; 0x3c
 80094ac:	3304      	adds	r3, #4
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	015a      	lsls	r2, r3, #5
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	4413      	add	r3, r2
 80094ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	f040 80a0 	bne.w	800960c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f003 0308 	and.w	r3, r3, #8
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d015      	beq.n	8009502 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	4a72      	ldr	r2, [pc, #456]	; (80096a4 <PCD_EP_OutXfrComplete_int+0x210>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	f240 80dd 	bls.w	800969a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f000 80d7 	beq.w	800969a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	015a      	lsls	r2, r3, #5
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f8:	461a      	mov	r2, r3
 80094fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094fe:	6093      	str	r3, [r2, #8]
 8009500:	e0cb      	b.n	800969a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	f003 0320 	and.w	r3, r3, #32
 8009508:	2b00      	cmp	r3, #0
 800950a:	d009      	beq.n	8009520 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	4413      	add	r3, r2
 8009514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009518:	461a      	mov	r2, r3
 800951a:	2320      	movs	r3, #32
 800951c:	6093      	str	r3, [r2, #8]
 800951e:	e0bc      	b.n	800969a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009526:	2b00      	cmp	r3, #0
 8009528:	f040 80b7 	bne.w	800969a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4a5d      	ldr	r2, [pc, #372]	; (80096a4 <PCD_EP_OutXfrComplete_int+0x210>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d90f      	bls.n	8009554 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00a      	beq.n	8009554 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	015a      	lsls	r2, r3, #5
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	4413      	add	r3, r2
 8009546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800954a:	461a      	mov	r2, r3
 800954c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009550:	6093      	str	r3, [r2, #8]
 8009552:	e0a2      	b.n	800969a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	4613      	mov	r3, r2
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	1a9b      	subs	r3, r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	440b      	add	r3, r1
 8009562:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009566:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	0159      	lsls	r1, r3, #5
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	440b      	add	r3, r1
 8009570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800957a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	4613      	mov	r3, r2
 8009582:	00db      	lsls	r3, r3, #3
 8009584:	1a9b      	subs	r3, r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4403      	add	r3, r0
 800958a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800958e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009590:	6879      	ldr	r1, [r7, #4]
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	4613      	mov	r3, r2
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	1a9b      	subs	r3, r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	440b      	add	r3, r1
 800959e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80095a2:	6819      	ldr	r1, [r3, #0]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	683a      	ldr	r2, [r7, #0]
 80095a8:	4613      	mov	r3, r2
 80095aa:	00db      	lsls	r3, r3, #3
 80095ac:	1a9b      	subs	r3, r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4403      	add	r3, r0
 80095b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4419      	add	r1, r3
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	4613      	mov	r3, r2
 80095c0:	00db      	lsls	r3, r3, #3
 80095c2:	1a9b      	subs	r3, r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	4403      	add	r3, r0
 80095c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80095cc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d114      	bne.n	80095fe <PCD_EP_OutXfrComplete_int+0x16a>
 80095d4:	6879      	ldr	r1, [r7, #4]
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	4613      	mov	r3, r2
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	1a9b      	subs	r3, r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	440b      	add	r3, r1
 80095e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d108      	bne.n	80095fe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6818      	ldr	r0, [r3, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80095f6:	461a      	mov	r2, r3
 80095f8:	2101      	movs	r1, #1
 80095fa:	f003 fbdb 	bl	800cdb4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	b2db      	uxtb	r3, r3
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f005 fa79 	bl	800eafc <HAL_PCD_DataOutStageCallback>
 800960a:	e046      	b.n	800969a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4a26      	ldr	r2, [pc, #152]	; (80096a8 <PCD_EP_OutXfrComplete_int+0x214>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d124      	bne.n	800965e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00a      	beq.n	8009634 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	015a      	lsls	r2, r3, #5
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	4413      	add	r3, r2
 8009626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962a:	461a      	mov	r2, r3
 800962c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009630:	6093      	str	r3, [r2, #8]
 8009632:	e032      	b.n	800969a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	f003 0320 	and.w	r3, r3, #32
 800963a:	2b00      	cmp	r3, #0
 800963c:	d008      	beq.n	8009650 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	015a      	lsls	r2, r3, #5
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	4413      	add	r3, r2
 8009646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800964a:	461a      	mov	r2, r3
 800964c:	2320      	movs	r3, #32
 800964e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	b2db      	uxtb	r3, r3
 8009654:	4619      	mov	r1, r3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f005 fa50 	bl	800eafc <HAL_PCD_DataOutStageCallback>
 800965c:	e01d      	b.n	800969a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d114      	bne.n	800968e <PCD_EP_OutXfrComplete_int+0x1fa>
 8009664:	6879      	ldr	r1, [r7, #4]
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	4613      	mov	r3, r2
 800966a:	00db      	lsls	r3, r3, #3
 800966c:	1a9b      	subs	r3, r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	440b      	add	r3, r1
 8009672:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d108      	bne.n	800968e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6818      	ldr	r0, [r3, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009686:	461a      	mov	r2, r3
 8009688:	2100      	movs	r1, #0
 800968a:	f003 fb93 	bl	800cdb4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	b2db      	uxtb	r3, r3
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f005 fa31 	bl	800eafc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	4f54300a 	.word	0x4f54300a
 80096a8:	4f54310a 	.word	0x4f54310a

080096ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	333c      	adds	r3, #60	; 0x3c
 80096c4:	3304      	adds	r3, #4
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	015a      	lsls	r2, r3, #5
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	4a15      	ldr	r2, [pc, #84]	; (8009734 <PCD_EP_OutSetupPacket_int+0x88>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d90e      	bls.n	8009700 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d009      	beq.n	8009700 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f8:	461a      	mov	r2, r3
 80096fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f005 f9e9 	bl	800ead8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4a0a      	ldr	r2, [pc, #40]	; (8009734 <PCD_EP_OutSetupPacket_int+0x88>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d90c      	bls.n	8009728 <PCD_EP_OutSetupPacket_int+0x7c>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d108      	bne.n	8009728 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6818      	ldr	r0, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009720:	461a      	mov	r2, r3
 8009722:	2101      	movs	r1, #1
 8009724:	f003 fb46 	bl	800cdb4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	4f54300a 	.word	0x4f54300a

08009738 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	70fb      	strb	r3, [r7, #3]
 8009744:	4613      	mov	r3, r2
 8009746:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009750:	78fb      	ldrb	r3, [r7, #3]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d107      	bne.n	8009766 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009756:	883b      	ldrh	r3, [r7, #0]
 8009758:	0419      	lsls	r1, r3, #16
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	430a      	orrs	r2, r1
 8009762:	629a      	str	r2, [r3, #40]	; 0x28
 8009764:	e028      	b.n	80097b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976c:	0c1b      	lsrs	r3, r3, #16
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	4413      	add	r3, r2
 8009772:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009774:	2300      	movs	r3, #0
 8009776:	73fb      	strb	r3, [r7, #15]
 8009778:	e00d      	b.n	8009796 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	7bfb      	ldrb	r3, [r7, #15]
 8009780:	3340      	adds	r3, #64	; 0x40
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4413      	add	r3, r2
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	0c1b      	lsrs	r3, r3, #16
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	4413      	add	r3, r2
 800978e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009790:	7bfb      	ldrb	r3, [r7, #15]
 8009792:	3301      	adds	r3, #1
 8009794:	73fb      	strb	r3, [r7, #15]
 8009796:	7bfa      	ldrb	r2, [r7, #15]
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	3b01      	subs	r3, #1
 800979c:	429a      	cmp	r2, r3
 800979e:	d3ec      	bcc.n	800977a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80097a0:	883b      	ldrh	r3, [r7, #0]
 80097a2:	0418      	lsls	r0, r3, #16
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6819      	ldr	r1, [r3, #0]
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	4302      	orrs	r2, r0
 80097b0:	3340      	adds	r3, #64	; 0x40
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	440b      	add	r3, r1
 80097b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	bc80      	pop	{r7}
 80097c2:	4770      	bx	lr

080097c4 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	887a      	ldrh	r2, [r7, #2]
 80097d6:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	bc80      	pop	{r7}
 80097e2:	4770      	bx	lr

080097e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08a      	sub	sp, #40	; 0x28
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e237      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0301 	and.w	r3, r3, #1
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d050      	beq.n	80098a4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009802:	4ba3      	ldr	r3, [pc, #652]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f003 030c 	and.w	r3, r3, #12
 800980a:	2b04      	cmp	r3, #4
 800980c:	d00c      	beq.n	8009828 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800980e:	4ba0      	ldr	r3, [pc, #640]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009816:	2b08      	cmp	r3, #8
 8009818:	d112      	bne.n	8009840 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800981a:	4b9d      	ldr	r3, [pc, #628]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009826:	d10b      	bne.n	8009840 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009828:	4b99      	ldr	r3, [pc, #612]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009830:	2b00      	cmp	r3, #0
 8009832:	d036      	beq.n	80098a2 <HAL_RCC_OscConfig+0xbe>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d132      	bne.n	80098a2 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e212      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	4b93      	ldr	r3, [pc, #588]	; (8009a94 <HAL_RCC_OscConfig+0x2b0>)
 8009846:	b2d2      	uxtb	r2, r2
 8009848:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d013      	beq.n	800987a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009852:	f7fc fce3 	bl	800621c <HAL_GetTick>
 8009856:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009858:	e008      	b.n	800986c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800985a:	f7fc fcdf 	bl	800621c <HAL_GetTick>
 800985e:	4602      	mov	r2, r0
 8009860:	6a3b      	ldr	r3, [r7, #32]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	2b64      	cmp	r3, #100	; 0x64
 8009866:	d901      	bls.n	800986c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8009868:	2303      	movs	r3, #3
 800986a:	e1fc      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800986c:	4b88      	ldr	r3, [pc, #544]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d0f0      	beq.n	800985a <HAL_RCC_OscConfig+0x76>
 8009878:	e014      	b.n	80098a4 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800987a:	f7fc fccf 	bl	800621c <HAL_GetTick>
 800987e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009880:	e008      	b.n	8009894 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009882:	f7fc fccb 	bl	800621c <HAL_GetTick>
 8009886:	4602      	mov	r2, r0
 8009888:	6a3b      	ldr	r3, [r7, #32]
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	2b64      	cmp	r3, #100	; 0x64
 800988e:	d901      	bls.n	8009894 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	e1e8      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009894:	4b7e      	ldr	r3, [pc, #504]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1f0      	bne.n	8009882 <HAL_RCC_OscConfig+0x9e>
 80098a0:	e000      	b.n	80098a4 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 0302 	and.w	r3, r3, #2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d077      	beq.n	80099a0 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80098b0:	4b77      	ldr	r3, [pc, #476]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	f003 030c 	and.w	r3, r3, #12
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00b      	beq.n	80098d4 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098bc:	4b74      	ldr	r3, [pc, #464]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80098c4:	2b08      	cmp	r3, #8
 80098c6:	d126      	bne.n	8009916 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098c8:	4b71      	ldr	r3, [pc, #452]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d120      	bne.n	8009916 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098d4:	4b6e      	ldr	r3, [pc, #440]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 0302 	and.w	r3, r3, #2
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d005      	beq.n	80098ec <HAL_RCC_OscConfig+0x108>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d001      	beq.n	80098ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	e1bc      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098ec:	4b68      	ldr	r3, [pc, #416]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	21f8      	movs	r1, #248	; 0xf8
 80098fa:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098fc:	69b9      	ldr	r1, [r7, #24]
 80098fe:	fa91 f1a1 	rbit	r1, r1
 8009902:	6179      	str	r1, [r7, #20]
  return result;
 8009904:	6979      	ldr	r1, [r7, #20]
 8009906:	fab1 f181 	clz	r1, r1
 800990a:	b2c9      	uxtb	r1, r1
 800990c:	408b      	lsls	r3, r1
 800990e:	4960      	ldr	r1, [pc, #384]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 8009910:	4313      	orrs	r3, r2
 8009912:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009914:	e044      	b.n	80099a0 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d02a      	beq.n	8009974 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800991e:	4b5e      	ldr	r3, [pc, #376]	; (8009a98 <HAL_RCC_OscConfig+0x2b4>)
 8009920:	2201      	movs	r2, #1
 8009922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009924:	f7fc fc7a 	bl	800621c <HAL_GetTick>
 8009928:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800992a:	e008      	b.n	800993e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800992c:	f7fc fc76 	bl	800621c <HAL_GetTick>
 8009930:	4602      	mov	r2, r0
 8009932:	6a3b      	ldr	r3, [r7, #32]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	2b02      	cmp	r3, #2
 8009938:	d901      	bls.n	800993e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800993a:	2303      	movs	r3, #3
 800993c:	e193      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800993e:	4b54      	ldr	r3, [pc, #336]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f003 0302 	and.w	r3, r3, #2
 8009946:	2b00      	cmp	r3, #0
 8009948:	d0f0      	beq.n	800992c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800994a:	4b51      	ldr	r3, [pc, #324]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	21f8      	movs	r1, #248	; 0xf8
 8009958:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800995a:	6939      	ldr	r1, [r7, #16]
 800995c:	fa91 f1a1 	rbit	r1, r1
 8009960:	60f9      	str	r1, [r7, #12]
  return result;
 8009962:	68f9      	ldr	r1, [r7, #12]
 8009964:	fab1 f181 	clz	r1, r1
 8009968:	b2c9      	uxtb	r1, r1
 800996a:	408b      	lsls	r3, r1
 800996c:	4948      	ldr	r1, [pc, #288]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 800996e:	4313      	orrs	r3, r2
 8009970:	600b      	str	r3, [r1, #0]
 8009972:	e015      	b.n	80099a0 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009974:	4b48      	ldr	r3, [pc, #288]	; (8009a98 <HAL_RCC_OscConfig+0x2b4>)
 8009976:	2200      	movs	r2, #0
 8009978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800997a:	f7fc fc4f 	bl	800621c <HAL_GetTick>
 800997e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009980:	e008      	b.n	8009994 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009982:	f7fc fc4b 	bl	800621c <HAL_GetTick>
 8009986:	4602      	mov	r2, r0
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	2b02      	cmp	r3, #2
 800998e:	d901      	bls.n	8009994 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8009990:	2303      	movs	r3, #3
 8009992:	e168      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009994:	4b3e      	ldr	r3, [pc, #248]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 0302 	and.w	r3, r3, #2
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1f0      	bne.n	8009982 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 0308 	and.w	r3, r3, #8
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d030      	beq.n	8009a0e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	695b      	ldr	r3, [r3, #20]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d016      	beq.n	80099e2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80099b4:	4b39      	ldr	r3, [pc, #228]	; (8009a9c <HAL_RCC_OscConfig+0x2b8>)
 80099b6:	2201      	movs	r2, #1
 80099b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099ba:	f7fc fc2f 	bl	800621c <HAL_GetTick>
 80099be:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099c0:	e008      	b.n	80099d4 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099c2:	f7fc fc2b 	bl	800621c <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	6a3b      	ldr	r3, [r7, #32]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d901      	bls.n	80099d4 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e148      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099d4:	4b2e      	ldr	r3, [pc, #184]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 80099d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099d8:	f003 0302 	and.w	r3, r3, #2
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d0f0      	beq.n	80099c2 <HAL_RCC_OscConfig+0x1de>
 80099e0:	e015      	b.n	8009a0e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80099e2:	4b2e      	ldr	r3, [pc, #184]	; (8009a9c <HAL_RCC_OscConfig+0x2b8>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099e8:	f7fc fc18 	bl	800621c <HAL_GetTick>
 80099ec:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099ee:	e008      	b.n	8009a02 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099f0:	f7fc fc14 	bl	800621c <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d901      	bls.n	8009a02 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e131      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a02:	4b23      	ldr	r3, [pc, #140]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 8009a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a06:	f003 0302 	and.w	r3, r3, #2
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1f0      	bne.n	80099f0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0304 	and.w	r3, r3, #4
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 8088 	beq.w	8009b2c <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a22:	4b1b      	ldr	r3, [pc, #108]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 8009a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d110      	bne.n	8009a50 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60bb      	str	r3, [r7, #8]
 8009a32:	4b17      	ldr	r3, [pc, #92]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 8009a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a36:	4a16      	ldr	r2, [pc, #88]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 8009a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8009a3e:	4b14      	ldr	r3, [pc, #80]	; (8009a90 <HAL_RCC_OscConfig+0x2ac>)
 8009a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a46:	60bb      	str	r3, [r7, #8]
 8009a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009a50:	4b13      	ldr	r3, [pc, #76]	; (8009aa0 <HAL_RCC_OscConfig+0x2bc>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a12      	ldr	r2, [pc, #72]	; (8009aa0 <HAL_RCC_OscConfig+0x2bc>)
 8009a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a5a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a5c:	4b10      	ldr	r3, [pc, #64]	; (8009aa0 <HAL_RCC_OscConfig+0x2bc>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d123      	bne.n	8009ab0 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a68:	4b0d      	ldr	r3, [pc, #52]	; (8009aa0 <HAL_RCC_OscConfig+0x2bc>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a0c      	ldr	r2, [pc, #48]	; (8009aa0 <HAL_RCC_OscConfig+0x2bc>)
 8009a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a74:	f7fc fbd2 	bl	800621c <HAL_GetTick>
 8009a78:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a7a:	e013      	b.n	8009aa4 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a7c:	f7fc fbce 	bl	800621c <HAL_GetTick>
 8009a80:	4602      	mov	r2, r0
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d90c      	bls.n	8009aa4 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e0eb      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
 8009a8e:	bf00      	nop
 8009a90:	40023800 	.word	0x40023800
 8009a94:	40023802 	.word	0x40023802
 8009a98:	42470000 	.word	0x42470000
 8009a9c:	42470e80 	.word	0x42470e80
 8009aa0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009aa4:	4b72      	ldr	r3, [pc, #456]	; (8009c70 <HAL_RCC_OscConfig+0x48c>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d0e5      	beq.n	8009a7c <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	689a      	ldr	r2, [r3, #8]
 8009ab4:	4b6f      	ldr	r3, [pc, #444]	; (8009c74 <HAL_RCC_OscConfig+0x490>)
 8009ab6:	b2d2      	uxtb	r2, r2
 8009ab8:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d015      	beq.n	8009aee <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ac2:	f7fc fbab 	bl	800621c <HAL_GetTick>
 8009ac6:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ac8:	e00a      	b.n	8009ae0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009aca:	f7fc fba7 	bl	800621c <HAL_GetTick>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
 8009ad2:	1ad3      	subs	r3, r2, r3
 8009ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d901      	bls.n	8009ae0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009adc:	2303      	movs	r3, #3
 8009ade:	e0c2      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ae0:	4b65      	ldr	r3, [pc, #404]	; (8009c78 <HAL_RCC_OscConfig+0x494>)
 8009ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae4:	f003 0302 	and.w	r3, r3, #2
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d0ee      	beq.n	8009aca <HAL_RCC_OscConfig+0x2e6>
 8009aec:	e014      	b.n	8009b18 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009aee:	f7fc fb95 	bl	800621c <HAL_GetTick>
 8009af2:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009af4:	e00a      	b.n	8009b0c <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009af6:	f7fc fb91 	bl	800621c <HAL_GetTick>
 8009afa:	4602      	mov	r2, r0
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d901      	bls.n	8009b0c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e0ac      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b0c:	4b5a      	ldr	r3, [pc, #360]	; (8009c78 <HAL_RCC_OscConfig+0x494>)
 8009b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b10:	f003 0302 	and.w	r3, r3, #2
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1ee      	bne.n	8009af6 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d105      	bne.n	8009b2c <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b20:	4b55      	ldr	r3, [pc, #340]	; (8009c78 <HAL_RCC_OscConfig+0x494>)
 8009b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b24:	4a54      	ldr	r2, [pc, #336]	; (8009c78 <HAL_RCC_OscConfig+0x494>)
 8009b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f000 8097 	beq.w	8009c64 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b36:	4b50      	ldr	r3, [pc, #320]	; (8009c78 <HAL_RCC_OscConfig+0x494>)
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	f003 030c 	and.w	r3, r3, #12
 8009b3e:	2b08      	cmp	r3, #8
 8009b40:	d061      	beq.n	8009c06 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d146      	bne.n	8009bd8 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b4a:	4b4c      	ldr	r3, [pc, #304]	; (8009c7c <HAL_RCC_OscConfig+0x498>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b50:	f7fc fb64 	bl	800621c <HAL_GetTick>
 8009b54:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b56:	e008      	b.n	8009b6a <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b58:	f7fc fb60 	bl	800621c <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b64      	cmp	r3, #100	; 0x64
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e07d      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b6a:	4b43      	ldr	r3, [pc, #268]	; (8009c78 <HAL_RCC_OscConfig+0x494>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1f0      	bne.n	8009b58 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b76:	4b40      	ldr	r3, [pc, #256]	; (8009c78 <HAL_RCC_OscConfig+0x494>)
 8009b78:	685a      	ldr	r2, [r3, #4]
 8009b7a:	4b41      	ldr	r3, [pc, #260]	; (8009c80 <HAL_RCC_OscConfig+0x49c>)
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	69d1      	ldr	r1, [r2, #28]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	6a12      	ldr	r2, [r2, #32]
 8009b86:	4311      	orrs	r1, r2
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009b8c:	0192      	lsls	r2, r2, #6
 8009b8e:	4311      	orrs	r1, r2
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009b94:	0612      	lsls	r2, r2, #24
 8009b96:	4311      	orrs	r1, r2
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009b9c:	0852      	lsrs	r2, r2, #1
 8009b9e:	3a01      	subs	r2, #1
 8009ba0:	0412      	lsls	r2, r2, #16
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	4934      	ldr	r1, [pc, #208]	; (8009c78 <HAL_RCC_OscConfig+0x494>)
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009baa:	4b34      	ldr	r3, [pc, #208]	; (8009c7c <HAL_RCC_OscConfig+0x498>)
 8009bac:	2201      	movs	r2, #1
 8009bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bb0:	f7fc fb34 	bl	800621c <HAL_GetTick>
 8009bb4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bb6:	e008      	b.n	8009bca <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bb8:	f7fc fb30 	bl	800621c <HAL_GetTick>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	6a3b      	ldr	r3, [r7, #32]
 8009bc0:	1ad3      	subs	r3, r2, r3
 8009bc2:	2b64      	cmp	r3, #100	; 0x64
 8009bc4:	d901      	bls.n	8009bca <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	e04d      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bca:	4b2b      	ldr	r3, [pc, #172]	; (8009c78 <HAL_RCC_OscConfig+0x494>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d0f0      	beq.n	8009bb8 <HAL_RCC_OscConfig+0x3d4>
 8009bd6:	e045      	b.n	8009c64 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bd8:	4b28      	ldr	r3, [pc, #160]	; (8009c7c <HAL_RCC_OscConfig+0x498>)
 8009bda:	2200      	movs	r2, #0
 8009bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bde:	f7fc fb1d 	bl	800621c <HAL_GetTick>
 8009be2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009be4:	e008      	b.n	8009bf8 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009be6:	f7fc fb19 	bl	800621c <HAL_GetTick>
 8009bea:	4602      	mov	r2, r0
 8009bec:	6a3b      	ldr	r3, [r7, #32]
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	2b64      	cmp	r3, #100	; 0x64
 8009bf2:	d901      	bls.n	8009bf8 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	e036      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bf8:	4b1f      	ldr	r3, [pc, #124]	; (8009c78 <HAL_RCC_OscConfig+0x494>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1f0      	bne.n	8009be6 <HAL_RCC_OscConfig+0x402>
 8009c04:	e02e      	b.n	8009c64 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d101      	bne.n	8009c12 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e029      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8009c12:	4b19      	ldr	r3, [pc, #100]	; (8009c78 <HAL_RCC_OscConfig+0x494>)
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	69db      	ldr	r3, [r3, #28]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d11c      	bne.n	8009c60 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d115      	bne.n	8009c60 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	099b      	lsrs	r3, r3, #6
 8009c38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d10d      	bne.n	8009c60 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d106      	bne.n	8009c60 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d001      	beq.n	8009c64 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e000      	b.n	8009c66 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3728      	adds	r7, #40	; 0x28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	40007000 	.word	0x40007000
 8009c74:	40023870 	.word	0x40023870
 8009c78:	40023800 	.word	0x40023800
 8009c7c:	42470060 	.word	0x42470060
 8009c80:	f0bc8000 	.word	0xf0bc8000

08009c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	e0d2      	b.n	8009e3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c98:	4b6b      	ldr	r3, [pc, #428]	; (8009e48 <HAL_RCC_ClockConfig+0x1c4>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 030f 	and.w	r3, r3, #15
 8009ca0:	683a      	ldr	r2, [r7, #0]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d90c      	bls.n	8009cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ca6:	4b68      	ldr	r3, [pc, #416]	; (8009e48 <HAL_RCC_ClockConfig+0x1c4>)
 8009ca8:	683a      	ldr	r2, [r7, #0]
 8009caa:	b2d2      	uxtb	r2, r2
 8009cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cae:	4b66      	ldr	r3, [pc, #408]	; (8009e48 <HAL_RCC_ClockConfig+0x1c4>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f003 030f 	and.w	r3, r3, #15
 8009cb6:	683a      	ldr	r2, [r7, #0]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d001      	beq.n	8009cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e0be      	b.n	8009e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 0302 	and.w	r3, r3, #2
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d020      	beq.n	8009d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 0304 	and.w	r3, r3, #4
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d005      	beq.n	8009ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009cd8:	4b5c      	ldr	r3, [pc, #368]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	4a5b      	ldr	r2, [pc, #364]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 0308 	and.w	r3, r3, #8
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d005      	beq.n	8009cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8009cf0:	4b56      	ldr	r3, [pc, #344]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	4a55      	ldr	r2, [pc, #340]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009cfa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cfc:	4b53      	ldr	r3, [pc, #332]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	4950      	ldr	r1, [pc, #320]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f003 0301 	and.w	r3, r3, #1
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d040      	beq.n	8009d9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d107      	bne.n	8009d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d22:	4b4a      	ldr	r3, [pc, #296]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d115      	bne.n	8009d5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e085      	b.n	8009e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d107      	bne.n	8009d4a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d3a:	4b44      	ldr	r3, [pc, #272]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d109      	bne.n	8009d5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e079      	b.n	8009e3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d4a:	4b40      	ldr	r3, [pc, #256]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f003 0302 	and.w	r3, r3, #2
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e071      	b.n	8009e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d5a:	4b3c      	ldr	r3, [pc, #240]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	f023 0203 	bic.w	r2, r3, #3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	4939      	ldr	r1, [pc, #228]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d6c:	f7fc fa56 	bl	800621c <HAL_GetTick>
 8009d70:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d72:	e00a      	b.n	8009d8a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d74:	f7fc fa52 	bl	800621c <HAL_GetTick>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d901      	bls.n	8009d8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009d86:	2303      	movs	r3, #3
 8009d88:	e059      	b.n	8009e3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d8a:	4b30      	ldr	r3, [pc, #192]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f003 020c 	and.w	r2, r3, #12
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d1eb      	bne.n	8009d74 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d9c:	4b2a      	ldr	r3, [pc, #168]	; (8009e48 <HAL_RCC_ClockConfig+0x1c4>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 030f 	and.w	r3, r3, #15
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d20c      	bcs.n	8009dc4 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009daa:	4b27      	ldr	r3, [pc, #156]	; (8009e48 <HAL_RCC_ClockConfig+0x1c4>)
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	b2d2      	uxtb	r2, r2
 8009db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009db2:	4b25      	ldr	r3, [pc, #148]	; (8009e48 <HAL_RCC_ClockConfig+0x1c4>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 030f 	and.w	r3, r3, #15
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d001      	beq.n	8009dc4 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e03c      	b.n	8009e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 0304 	and.w	r3, r3, #4
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d008      	beq.n	8009de2 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009dd0:	4b1e      	ldr	r3, [pc, #120]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	491b      	ldr	r1, [pc, #108]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009dde:	4313      	orrs	r3, r2
 8009de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 0308 	and.w	r3, r3, #8
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d009      	beq.n	8009e02 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009dee:	4b17      	ldr	r3, [pc, #92]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	00db      	lsls	r3, r3, #3
 8009dfc:	4913      	ldr	r1, [pc, #76]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8009e02:	f000 f837 	bl	8009e74 <HAL_RCC_GetSysClockFreq>
 8009e06:	4601      	mov	r1, r0
 8009e08:	4b10      	ldr	r3, [pc, #64]	; (8009e4c <HAL_RCC_ClockConfig+0x1c8>)
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e10:	22f0      	movs	r2, #240	; 0xf0
 8009e12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	fa92 f2a2 	rbit	r2, r2
 8009e1a:	60fa      	str	r2, [r7, #12]
  return result;
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	fab2 f282 	clz	r2, r2
 8009e22:	b2d2      	uxtb	r2, r2
 8009e24:	40d3      	lsrs	r3, r2
 8009e26:	4a0a      	ldr	r2, [pc, #40]	; (8009e50 <HAL_RCC_ClockConfig+0x1cc>)
 8009e28:	5cd3      	ldrb	r3, [r2, r3]
 8009e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8009e2e:	4a09      	ldr	r2, [pc, #36]	; (8009e54 <HAL_RCC_ClockConfig+0x1d0>)
 8009e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009e32:	4b09      	ldr	r3, [pc, #36]	; (8009e58 <HAL_RCC_ClockConfig+0x1d4>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fc f9ae 	bl	8006198 <HAL_InitTick>

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3718      	adds	r7, #24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	40023c00 	.word	0x40023c00
 8009e4c:	40023800 	.word	0x40023800
 8009e50:	0801498c 	.word	0x0801498c
 8009e54:	20000064 	.word	0x20000064
 8009e58:	20000068 	.word	0x20000068

08009e5c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8009e60:	4b03      	ldr	r3, [pc, #12]	; (8009e70 <HAL_RCC_EnableCSS+0x14>)
 8009e62:	2201      	movs	r2, #1
 8009e64:	601a      	str	r2, [r3, #0]
}
 8009e66:	bf00      	nop
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bc80      	pop	{r7}
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	4247004c 	.word	0x4247004c

08009e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009e78:	b084      	sub	sp, #16
 8009e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	607b      	str	r3, [r7, #4]
 8009e80:	2300      	movs	r3, #0
 8009e82:	60fb      	str	r3, [r7, #12]
 8009e84:	2300      	movs	r3, #0
 8009e86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e8c:	4b67      	ldr	r3, [pc, #412]	; (800a02c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f003 030c 	and.w	r3, r3, #12
 8009e94:	2b08      	cmp	r3, #8
 8009e96:	d00d      	beq.n	8009eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8009e98:	2b08      	cmp	r3, #8
 8009e9a:	f200 80bd 	bhi.w	800a018 <HAL_RCC_GetSysClockFreq+0x1a4>
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d002      	beq.n	8009ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8009ea2:	2b04      	cmp	r3, #4
 8009ea4:	d003      	beq.n	8009eae <HAL_RCC_GetSysClockFreq+0x3a>
 8009ea6:	e0b7      	b.n	800a018 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009ea8:	4b61      	ldr	r3, [pc, #388]	; (800a030 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009eaa:	60bb      	str	r3, [r7, #8]
       break;
 8009eac:	e0b7      	b.n	800a01e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009eae:	4b60      	ldr	r3, [pc, #384]	; (800a030 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009eb0:	60bb      	str	r3, [r7, #8]
      break;
 8009eb2:	e0b4      	b.n	800a01e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009eb4:	4b5d      	ldr	r3, [pc, #372]	; (800a02c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ebc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009ebe:	4b5b      	ldr	r3, [pc, #364]	; (800a02c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d04d      	beq.n	8009f66 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009eca:	4b58      	ldr	r3, [pc, #352]	; (800a02c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	099b      	lsrs	r3, r3, #6
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	f04f 0300 	mov.w	r3, #0
 8009ed6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009eda:	f04f 0100 	mov.w	r1, #0
 8009ede:	ea02 0800 	and.w	r8, r2, r0
 8009ee2:	ea03 0901 	and.w	r9, r3, r1
 8009ee6:	4640      	mov	r0, r8
 8009ee8:	4649      	mov	r1, r9
 8009eea:	f04f 0200 	mov.w	r2, #0
 8009eee:	f04f 0300 	mov.w	r3, #0
 8009ef2:	014b      	lsls	r3, r1, #5
 8009ef4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009ef8:	0142      	lsls	r2, r0, #5
 8009efa:	4610      	mov	r0, r2
 8009efc:	4619      	mov	r1, r3
 8009efe:	ebb0 0008 	subs.w	r0, r0, r8
 8009f02:	eb61 0109 	sbc.w	r1, r1, r9
 8009f06:	f04f 0200 	mov.w	r2, #0
 8009f0a:	f04f 0300 	mov.w	r3, #0
 8009f0e:	018b      	lsls	r3, r1, #6
 8009f10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009f14:	0182      	lsls	r2, r0, #6
 8009f16:	1a12      	subs	r2, r2, r0
 8009f18:	eb63 0301 	sbc.w	r3, r3, r1
 8009f1c:	f04f 0000 	mov.w	r0, #0
 8009f20:	f04f 0100 	mov.w	r1, #0
 8009f24:	00d9      	lsls	r1, r3, #3
 8009f26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009f2a:	00d0      	lsls	r0, r2, #3
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	eb12 0208 	adds.w	r2, r2, r8
 8009f34:	eb43 0309 	adc.w	r3, r3, r9
 8009f38:	f04f 0000 	mov.w	r0, #0
 8009f3c:	f04f 0100 	mov.w	r1, #0
 8009f40:	0299      	lsls	r1, r3, #10
 8009f42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009f46:	0290      	lsls	r0, r2, #10
 8009f48:	4602      	mov	r2, r0
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	4619      	mov	r1, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	461a      	mov	r2, r3
 8009f54:	f04f 0300 	mov.w	r3, #0
 8009f58:	f7f7 f972 	bl	8001240 <__aeabi_uldivmod>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	4613      	mov	r3, r2
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	e04a      	b.n	8009ffc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f66:	4b31      	ldr	r3, [pc, #196]	; (800a02c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	099b      	lsrs	r3, r3, #6
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	f04f 0300 	mov.w	r3, #0
 8009f72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009f76:	f04f 0100 	mov.w	r1, #0
 8009f7a:	ea02 0400 	and.w	r4, r2, r0
 8009f7e:	ea03 0501 	and.w	r5, r3, r1
 8009f82:	4620      	mov	r0, r4
 8009f84:	4629      	mov	r1, r5
 8009f86:	f04f 0200 	mov.w	r2, #0
 8009f8a:	f04f 0300 	mov.w	r3, #0
 8009f8e:	014b      	lsls	r3, r1, #5
 8009f90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009f94:	0142      	lsls	r2, r0, #5
 8009f96:	4610      	mov	r0, r2
 8009f98:	4619      	mov	r1, r3
 8009f9a:	1b00      	subs	r0, r0, r4
 8009f9c:	eb61 0105 	sbc.w	r1, r1, r5
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	f04f 0300 	mov.w	r3, #0
 8009fa8:	018b      	lsls	r3, r1, #6
 8009faa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009fae:	0182      	lsls	r2, r0, #6
 8009fb0:	1a12      	subs	r2, r2, r0
 8009fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8009fb6:	f04f 0000 	mov.w	r0, #0
 8009fba:	f04f 0100 	mov.w	r1, #0
 8009fbe:	00d9      	lsls	r1, r3, #3
 8009fc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009fc4:	00d0      	lsls	r0, r2, #3
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	460b      	mov	r3, r1
 8009fca:	1912      	adds	r2, r2, r4
 8009fcc:	eb45 0303 	adc.w	r3, r5, r3
 8009fd0:	f04f 0000 	mov.w	r0, #0
 8009fd4:	f04f 0100 	mov.w	r1, #0
 8009fd8:	0299      	lsls	r1, r3, #10
 8009fda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009fde:	0290      	lsls	r0, r2, #10
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	461a      	mov	r2, r3
 8009fec:	f04f 0300 	mov.w	r3, #0
 8009ff0:	f7f7 f926 	bl	8001240 <__aeabi_uldivmod>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009ffc:	4b0b      	ldr	r3, [pc, #44]	; (800a02c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	0c1b      	lsrs	r3, r3, #16
 800a002:	f003 0303 	and.w	r3, r3, #3
 800a006:	3301      	adds	r3, #1
 800a008:	005b      	lsls	r3, r3, #1
 800a00a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	fbb2 f3f3 	udiv	r3, r2, r3
 800a014:	60bb      	str	r3, [r7, #8]
      break;
 800a016:	e002      	b.n	800a01e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a018:	4b05      	ldr	r3, [pc, #20]	; (800a030 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a01a:	60bb      	str	r3, [r7, #8]
      break;
 800a01c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a01e:	68bb      	ldr	r3, [r7, #8]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a02a:	bf00      	nop
 800a02c:	40023800 	.word	0x40023800
 800a030:	00f42400 	.word	0x00f42400

0800a034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a034:	b480      	push	{r7}
 800a036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a038:	4b02      	ldr	r3, [pc, #8]	; (800a044 <HAL_RCC_GetHCLKFreq+0x10>)
 800a03a:	681b      	ldr	r3, [r3, #0]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	46bd      	mov	sp, r7
 800a040:	bc80      	pop	{r7}
 800a042:	4770      	bx	lr
 800a044:	20000064 	.word	0x20000064

0800a048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800a04e:	f7ff fff1 	bl	800a034 <HAL_RCC_GetHCLKFreq>
 800a052:	4601      	mov	r1, r0
 800a054:	4b0b      	ldr	r3, [pc, #44]	; (800a084 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800a05c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800a060:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	fa92 f2a2 	rbit	r2, r2
 800a068:	603a      	str	r2, [r7, #0]
  return result;
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	fab2 f282 	clz	r2, r2
 800a070:	b2d2      	uxtb	r2, r2
 800a072:	40d3      	lsrs	r3, r2
 800a074:	4a04      	ldr	r2, [pc, #16]	; (800a088 <HAL_RCC_GetPCLK1Freq+0x40>)
 800a076:	5cd3      	ldrb	r3, [r2, r3]
 800a078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	40023800 	.word	0x40023800
 800a088:	0801499c 	.word	0x0801499c

0800a08c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800a092:	f7ff ffcf 	bl	800a034 <HAL_RCC_GetHCLKFreq>
 800a096:	4601      	mov	r1, r0
 800a098:	4b0b      	ldr	r3, [pc, #44]	; (800a0c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a0a0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800a0a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	fa92 f2a2 	rbit	r2, r2
 800a0ac:	603a      	str	r2, [r7, #0]
  return result;
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	fab2 f282 	clz	r2, r2
 800a0b4:	b2d2      	uxtb	r2, r2
 800a0b6:	40d3      	lsrs	r3, r2
 800a0b8:	4a04      	ldr	r2, [pc, #16]	; (800a0cc <HAL_RCC_GetPCLK2Freq+0x40>)
 800a0ba:	5cd3      	ldrb	r3, [r2, r3]
 800a0bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	40023800 	.word	0x40023800
 800a0cc:	0801499c 	.word	0x0801499c

0800a0d0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a0d4:	4b06      	ldr	r3, [pc, #24]	; (800a0f0 <HAL_RCC_NMI_IRQHandler+0x20>)
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0dc:	2b80      	cmp	r3, #128	; 0x80
 800a0de:	d104      	bne.n	800a0ea <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a0e0:	f000 f80a 	bl	800a0f8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a0e4:	4b03      	ldr	r3, [pc, #12]	; (800a0f4 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a0e6:	2280      	movs	r2, #128	; 0x80
 800a0e8:	701a      	strb	r2, [r3, #0]
  }
}
 800a0ea:	bf00      	nop
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	40023800 	.word	0x40023800
 800a0f4:	4002380e 	.word	0x4002380e

0800a0f8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800a0fc:	bf00      	nop
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bc80      	pop	{r7}
 800a102:	4770      	bx	lr

0800a104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d101      	bne.n	800a116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e041      	b.n	800a19a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d106      	bne.n	800a130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7fb fdb4 	bl	8005c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2202      	movs	r2, #2
 800a134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	3304      	adds	r3, #4
 800a140:	4619      	mov	r1, r3
 800a142:	4610      	mov	r0, r2
 800a144:	f000 fad8 	bl	800a6f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
	...

0800a1a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d001      	beq.n	800a1bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e046      	b.n	800a24a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a22      	ldr	r2, [pc, #136]	; (800a254 <HAL_TIM_Base_Start+0xb0>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d022      	beq.n	800a214 <HAL_TIM_Base_Start+0x70>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d6:	d01d      	beq.n	800a214 <HAL_TIM_Base_Start+0x70>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a1e      	ldr	r2, [pc, #120]	; (800a258 <HAL_TIM_Base_Start+0xb4>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d018      	beq.n	800a214 <HAL_TIM_Base_Start+0x70>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a1d      	ldr	r2, [pc, #116]	; (800a25c <HAL_TIM_Base_Start+0xb8>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d013      	beq.n	800a214 <HAL_TIM_Base_Start+0x70>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a1b      	ldr	r2, [pc, #108]	; (800a260 <HAL_TIM_Base_Start+0xbc>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d00e      	beq.n	800a214 <HAL_TIM_Base_Start+0x70>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a1a      	ldr	r2, [pc, #104]	; (800a264 <HAL_TIM_Base_Start+0xc0>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d009      	beq.n	800a214 <HAL_TIM_Base_Start+0x70>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a18      	ldr	r2, [pc, #96]	; (800a268 <HAL_TIM_Base_Start+0xc4>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d004      	beq.n	800a214 <HAL_TIM_Base_Start+0x70>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a17      	ldr	r2, [pc, #92]	; (800a26c <HAL_TIM_Base_Start+0xc8>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d111      	bne.n	800a238 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	f003 0307 	and.w	r3, r3, #7
 800a21e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b06      	cmp	r3, #6
 800a224:	d010      	beq.n	800a248 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f042 0201 	orr.w	r2, r2, #1
 800a234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a236:	e007      	b.n	800a248 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f042 0201 	orr.w	r2, r2, #1
 800a246:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	bc80      	pop	{r7}
 800a252:	4770      	bx	lr
 800a254:	40010000 	.word	0x40010000
 800a258:	40000400 	.word	0x40000400
 800a25c:	40000800 	.word	0x40000800
 800a260:	40000c00 	.word	0x40000c00
 800a264:	40010400 	.word	0x40010400
 800a268:	40014000 	.word	0x40014000
 800a26c:	40001800 	.word	0x40001800

0800a270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b01      	cmp	r3, #1
 800a282:	d001      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e04e      	b.n	800a326 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f042 0201 	orr.w	r2, r2, #1
 800a29e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a22      	ldr	r2, [pc, #136]	; (800a330 <HAL_TIM_Base_Start_IT+0xc0>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d022      	beq.n	800a2f0 <HAL_TIM_Base_Start_IT+0x80>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2b2:	d01d      	beq.n	800a2f0 <HAL_TIM_Base_Start_IT+0x80>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a1e      	ldr	r2, [pc, #120]	; (800a334 <HAL_TIM_Base_Start_IT+0xc4>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d018      	beq.n	800a2f0 <HAL_TIM_Base_Start_IT+0x80>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a1d      	ldr	r2, [pc, #116]	; (800a338 <HAL_TIM_Base_Start_IT+0xc8>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d013      	beq.n	800a2f0 <HAL_TIM_Base_Start_IT+0x80>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a1b      	ldr	r2, [pc, #108]	; (800a33c <HAL_TIM_Base_Start_IT+0xcc>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d00e      	beq.n	800a2f0 <HAL_TIM_Base_Start_IT+0x80>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a1a      	ldr	r2, [pc, #104]	; (800a340 <HAL_TIM_Base_Start_IT+0xd0>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d009      	beq.n	800a2f0 <HAL_TIM_Base_Start_IT+0x80>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a18      	ldr	r2, [pc, #96]	; (800a344 <HAL_TIM_Base_Start_IT+0xd4>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d004      	beq.n	800a2f0 <HAL_TIM_Base_Start_IT+0x80>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a17      	ldr	r2, [pc, #92]	; (800a348 <HAL_TIM_Base_Start_IT+0xd8>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d111      	bne.n	800a314 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	f003 0307 	and.w	r3, r3, #7
 800a2fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2b06      	cmp	r3, #6
 800a300:	d010      	beq.n	800a324 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f042 0201 	orr.w	r2, r2, #1
 800a310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a312:	e007      	b.n	800a324 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f042 0201 	orr.w	r2, r2, #1
 800a322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3714      	adds	r7, #20
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bc80      	pop	{r7}
 800a32e:	4770      	bx	lr
 800a330:	40010000 	.word	0x40010000
 800a334:	40000400 	.word	0x40000400
 800a338:	40000800 	.word	0x40000800
 800a33c:	40000c00 	.word	0x40000c00
 800a340:	40010400 	.word	0x40010400
 800a344:	40014000 	.word	0x40014000
 800a348:	40001800 	.word	0x40001800

0800a34c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d101      	bne.n	800a35e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e041      	b.n	800a3e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d106      	bne.n	800a378 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f7fb fc5a 	bl	8005c2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2202      	movs	r2, #2
 800a37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	3304      	adds	r3, #4
 800a388:	4619      	mov	r1, r3
 800a38a:	4610      	mov	r0, r2
 800a38c:	f000 f9b4 	bl	800a6f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
	...

0800a3ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d109      	bne.n	800a410 <HAL_TIM_PWM_Start+0x24>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b01      	cmp	r3, #1
 800a406:	bf14      	ite	ne
 800a408:	2301      	movne	r3, #1
 800a40a:	2300      	moveq	r3, #0
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	e022      	b.n	800a456 <HAL_TIM_PWM_Start+0x6a>
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	2b04      	cmp	r3, #4
 800a414:	d109      	bne.n	800a42a <HAL_TIM_PWM_Start+0x3e>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	2b01      	cmp	r3, #1
 800a420:	bf14      	ite	ne
 800a422:	2301      	movne	r3, #1
 800a424:	2300      	moveq	r3, #0
 800a426:	b2db      	uxtb	r3, r3
 800a428:	e015      	b.n	800a456 <HAL_TIM_PWM_Start+0x6a>
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b08      	cmp	r3, #8
 800a42e:	d109      	bne.n	800a444 <HAL_TIM_PWM_Start+0x58>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2b01      	cmp	r3, #1
 800a43a:	bf14      	ite	ne
 800a43c:	2301      	movne	r3, #1
 800a43e:	2300      	moveq	r3, #0
 800a440:	b2db      	uxtb	r3, r3
 800a442:	e008      	b.n	800a456 <HAL_TIM_PWM_Start+0x6a>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	bf14      	ite	ne
 800a450:	2301      	movne	r3, #1
 800a452:	2300      	moveq	r3, #0
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e07c      	b.n	800a558 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d104      	bne.n	800a46e <HAL_TIM_PWM_Start+0x82>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2202      	movs	r2, #2
 800a468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a46c:	e013      	b.n	800a496 <HAL_TIM_PWM_Start+0xaa>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b04      	cmp	r3, #4
 800a472:	d104      	bne.n	800a47e <HAL_TIM_PWM_Start+0x92>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2202      	movs	r2, #2
 800a478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a47c:	e00b      	b.n	800a496 <HAL_TIM_PWM_Start+0xaa>
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	2b08      	cmp	r3, #8
 800a482:	d104      	bne.n	800a48e <HAL_TIM_PWM_Start+0xa2>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2202      	movs	r2, #2
 800a488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a48c:	e003      	b.n	800a496 <HAL_TIM_PWM_Start+0xaa>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2202      	movs	r2, #2
 800a492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2201      	movs	r2, #1
 800a49c:	6839      	ldr	r1, [r7, #0]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 fb74 	bl	800ab8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a2d      	ldr	r2, [pc, #180]	; (800a560 <HAL_TIM_PWM_Start+0x174>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d004      	beq.n	800a4b8 <HAL_TIM_PWM_Start+0xcc>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a2c      	ldr	r2, [pc, #176]	; (800a564 <HAL_TIM_PWM_Start+0x178>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d101      	bne.n	800a4bc <HAL_TIM_PWM_Start+0xd0>
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e000      	b.n	800a4be <HAL_TIM_PWM_Start+0xd2>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d007      	beq.n	800a4d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a22      	ldr	r2, [pc, #136]	; (800a560 <HAL_TIM_PWM_Start+0x174>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d022      	beq.n	800a522 <HAL_TIM_PWM_Start+0x136>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4e4:	d01d      	beq.n	800a522 <HAL_TIM_PWM_Start+0x136>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a1f      	ldr	r2, [pc, #124]	; (800a568 <HAL_TIM_PWM_Start+0x17c>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d018      	beq.n	800a522 <HAL_TIM_PWM_Start+0x136>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a1d      	ldr	r2, [pc, #116]	; (800a56c <HAL_TIM_PWM_Start+0x180>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d013      	beq.n	800a522 <HAL_TIM_PWM_Start+0x136>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a1c      	ldr	r2, [pc, #112]	; (800a570 <HAL_TIM_PWM_Start+0x184>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d00e      	beq.n	800a522 <HAL_TIM_PWM_Start+0x136>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a16      	ldr	r2, [pc, #88]	; (800a564 <HAL_TIM_PWM_Start+0x178>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d009      	beq.n	800a522 <HAL_TIM_PWM_Start+0x136>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a18      	ldr	r2, [pc, #96]	; (800a574 <HAL_TIM_PWM_Start+0x188>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d004      	beq.n	800a522 <HAL_TIM_PWM_Start+0x136>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a16      	ldr	r2, [pc, #88]	; (800a578 <HAL_TIM_PWM_Start+0x18c>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d111      	bne.n	800a546 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f003 0307 	and.w	r3, r3, #7
 800a52c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2b06      	cmp	r3, #6
 800a532:	d010      	beq.n	800a556 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f042 0201 	orr.w	r2, r2, #1
 800a542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a544:	e007      	b.n	800a556 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f042 0201 	orr.w	r2, r2, #1
 800a554:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	40010000 	.word	0x40010000
 800a564:	40010400 	.word	0x40010400
 800a568:	40000400 	.word	0x40000400
 800a56c:	40000800 	.word	0x40000800
 800a570:	40000c00 	.word	0x40000c00
 800a574:	40014000 	.word	0x40014000
 800a578:	40001800 	.word	0x40001800

0800a57c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d101      	bne.n	800a596 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a592:	2302      	movs	r3, #2
 800a594:	e0ac      	b.n	800a6f0 <HAL_TIM_PWM_ConfigChannel+0x174>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2201      	movs	r2, #1
 800a59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b0c      	cmp	r3, #12
 800a5a2:	f200 809f 	bhi.w	800a6e4 <HAL_TIM_PWM_ConfigChannel+0x168>
 800a5a6:	a201      	add	r2, pc, #4	; (adr r2, 800a5ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ac:	0800a5e1 	.word	0x0800a5e1
 800a5b0:	0800a6e5 	.word	0x0800a6e5
 800a5b4:	0800a6e5 	.word	0x0800a6e5
 800a5b8:	0800a6e5 	.word	0x0800a6e5
 800a5bc:	0800a621 	.word	0x0800a621
 800a5c0:	0800a6e5 	.word	0x0800a6e5
 800a5c4:	0800a6e5 	.word	0x0800a6e5
 800a5c8:	0800a6e5 	.word	0x0800a6e5
 800a5cc:	0800a663 	.word	0x0800a663
 800a5d0:	0800a6e5 	.word	0x0800a6e5
 800a5d4:	0800a6e5 	.word	0x0800a6e5
 800a5d8:	0800a6e5 	.word	0x0800a6e5
 800a5dc:	0800a6a3 	.word	0x0800a6a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68b9      	ldr	r1, [r7, #8]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 f924 	bl	800a834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	699a      	ldr	r2, [r3, #24]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f042 0208 	orr.w	r2, r2, #8
 800a5fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	699a      	ldr	r2, [r3, #24]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f022 0204 	bic.w	r2, r2, #4
 800a60a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	6999      	ldr	r1, [r3, #24]
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	691a      	ldr	r2, [r3, #16]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	430a      	orrs	r2, r1
 800a61c:	619a      	str	r2, [r3, #24]
      break;
 800a61e:	e062      	b.n	800a6e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68b9      	ldr	r1, [r7, #8]
 800a626:	4618      	mov	r0, r3
 800a628:	f000 f974 	bl	800a914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	699a      	ldr	r2, [r3, #24]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a63a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	699a      	ldr	r2, [r3, #24]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a64a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6999      	ldr	r1, [r3, #24]
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	021a      	lsls	r2, r3, #8
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	430a      	orrs	r2, r1
 800a65e:	619a      	str	r2, [r3, #24]
      break;
 800a660:	e041      	b.n	800a6e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68b9      	ldr	r1, [r7, #8]
 800a668:	4618      	mov	r0, r3
 800a66a:	f000 f9c7 	bl	800a9fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	69da      	ldr	r2, [r3, #28]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f042 0208 	orr.w	r2, r2, #8
 800a67c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69da      	ldr	r2, [r3, #28]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f022 0204 	bic.w	r2, r2, #4
 800a68c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	69d9      	ldr	r1, [r3, #28]
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	691a      	ldr	r2, [r3, #16]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	430a      	orrs	r2, r1
 800a69e:	61da      	str	r2, [r3, #28]
      break;
 800a6a0:	e021      	b.n	800a6e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68b9      	ldr	r1, [r7, #8]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f000 fa1b 	bl	800aae4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	69da      	ldr	r2, [r3, #28]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	69da      	ldr	r2, [r3, #28]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	69d9      	ldr	r1, [r3, #28]
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	021a      	lsls	r2, r3, #8
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	61da      	str	r2, [r3, #28]
      break;
 800a6e2:	e000      	b.n	800a6e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800a6e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a3f      	ldr	r2, [pc, #252]	; (800a808 <TIM_Base_SetConfig+0x110>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d013      	beq.n	800a738 <TIM_Base_SetConfig+0x40>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a716:	d00f      	beq.n	800a738 <TIM_Base_SetConfig+0x40>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a3c      	ldr	r2, [pc, #240]	; (800a80c <TIM_Base_SetConfig+0x114>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d00b      	beq.n	800a738 <TIM_Base_SetConfig+0x40>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a3b      	ldr	r2, [pc, #236]	; (800a810 <TIM_Base_SetConfig+0x118>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d007      	beq.n	800a738 <TIM_Base_SetConfig+0x40>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a3a      	ldr	r2, [pc, #232]	; (800a814 <TIM_Base_SetConfig+0x11c>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d003      	beq.n	800a738 <TIM_Base_SetConfig+0x40>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a39      	ldr	r2, [pc, #228]	; (800a818 <TIM_Base_SetConfig+0x120>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d108      	bne.n	800a74a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a73e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	4313      	orrs	r3, r2
 800a748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4a2e      	ldr	r2, [pc, #184]	; (800a808 <TIM_Base_SetConfig+0x110>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d02b      	beq.n	800a7aa <TIM_Base_SetConfig+0xb2>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a758:	d027      	beq.n	800a7aa <TIM_Base_SetConfig+0xb2>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4a2b      	ldr	r2, [pc, #172]	; (800a80c <TIM_Base_SetConfig+0x114>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d023      	beq.n	800a7aa <TIM_Base_SetConfig+0xb2>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4a2a      	ldr	r2, [pc, #168]	; (800a810 <TIM_Base_SetConfig+0x118>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d01f      	beq.n	800a7aa <TIM_Base_SetConfig+0xb2>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a29      	ldr	r2, [pc, #164]	; (800a814 <TIM_Base_SetConfig+0x11c>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d01b      	beq.n	800a7aa <TIM_Base_SetConfig+0xb2>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a28      	ldr	r2, [pc, #160]	; (800a818 <TIM_Base_SetConfig+0x120>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d017      	beq.n	800a7aa <TIM_Base_SetConfig+0xb2>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a27      	ldr	r2, [pc, #156]	; (800a81c <TIM_Base_SetConfig+0x124>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d013      	beq.n	800a7aa <TIM_Base_SetConfig+0xb2>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a26      	ldr	r2, [pc, #152]	; (800a820 <TIM_Base_SetConfig+0x128>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d00f      	beq.n	800a7aa <TIM_Base_SetConfig+0xb2>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a25      	ldr	r2, [pc, #148]	; (800a824 <TIM_Base_SetConfig+0x12c>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d00b      	beq.n	800a7aa <TIM_Base_SetConfig+0xb2>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a24      	ldr	r2, [pc, #144]	; (800a828 <TIM_Base_SetConfig+0x130>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d007      	beq.n	800a7aa <TIM_Base_SetConfig+0xb2>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a23      	ldr	r2, [pc, #140]	; (800a82c <TIM_Base_SetConfig+0x134>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d003      	beq.n	800a7aa <TIM_Base_SetConfig+0xb2>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a22      	ldr	r2, [pc, #136]	; (800a830 <TIM_Base_SetConfig+0x138>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d108      	bne.n	800a7bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	689a      	ldr	r2, [r3, #8]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a09      	ldr	r2, [pc, #36]	; (800a808 <TIM_Base_SetConfig+0x110>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d003      	beq.n	800a7f0 <TIM_Base_SetConfig+0xf8>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a0b      	ldr	r2, [pc, #44]	; (800a818 <TIM_Base_SetConfig+0x120>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d103      	bne.n	800a7f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	691a      	ldr	r2, [r3, #16]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	615a      	str	r2, [r3, #20]
}
 800a7fe:	bf00      	nop
 800a800:	3714      	adds	r7, #20
 800a802:	46bd      	mov	sp, r7
 800a804:	bc80      	pop	{r7}
 800a806:	4770      	bx	lr
 800a808:	40010000 	.word	0x40010000
 800a80c:	40000400 	.word	0x40000400
 800a810:	40000800 	.word	0x40000800
 800a814:	40000c00 	.word	0x40000c00
 800a818:	40010400 	.word	0x40010400
 800a81c:	40014000 	.word	0x40014000
 800a820:	40014400 	.word	0x40014400
 800a824:	40014800 	.word	0x40014800
 800a828:	40001800 	.word	0x40001800
 800a82c:	40001c00 	.word	0x40001c00
 800a830:	40002000 	.word	0x40002000

0800a834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a834:	b480      	push	{r7}
 800a836:	b087      	sub	sp, #28
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6a1b      	ldr	r3, [r3, #32]
 800a842:	f023 0201 	bic.w	r2, r3, #1
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a1b      	ldr	r3, [r3, #32]
 800a84e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f023 0303 	bic.w	r3, r3, #3
 800a86a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	4313      	orrs	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	f023 0302 	bic.w	r3, r3, #2
 800a87c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	697a      	ldr	r2, [r7, #20]
 800a884:	4313      	orrs	r3, r2
 800a886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a20      	ldr	r2, [pc, #128]	; (800a90c <TIM_OC1_SetConfig+0xd8>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d003      	beq.n	800a898 <TIM_OC1_SetConfig+0x64>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a1f      	ldr	r2, [pc, #124]	; (800a910 <TIM_OC1_SetConfig+0xdc>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d10c      	bne.n	800a8b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	f023 0308 	bic.w	r3, r3, #8
 800a89e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	f023 0304 	bic.w	r3, r3, #4
 800a8b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a15      	ldr	r2, [pc, #84]	; (800a90c <TIM_OC1_SetConfig+0xd8>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d003      	beq.n	800a8c2 <TIM_OC1_SetConfig+0x8e>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4a14      	ldr	r2, [pc, #80]	; (800a910 <TIM_OC1_SetConfig+0xdc>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d111      	bne.n	800a8e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	699b      	ldr	r3, [r3, #24]
 800a8e0:	693a      	ldr	r2, [r7, #16]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	685a      	ldr	r2, [r3, #4]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	697a      	ldr	r2, [r7, #20]
 800a8fe:	621a      	str	r2, [r3, #32]
}
 800a900:	bf00      	nop
 800a902:	371c      	adds	r7, #28
 800a904:	46bd      	mov	sp, r7
 800a906:	bc80      	pop	{r7}
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	40010000 	.word	0x40010000
 800a910:	40010400 	.word	0x40010400

0800a914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a914:	b480      	push	{r7}
 800a916:	b087      	sub	sp, #28
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a1b      	ldr	r3, [r3, #32]
 800a922:	f023 0210 	bic.w	r2, r3, #16
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a1b      	ldr	r3, [r3, #32]
 800a92e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	699b      	ldr	r3, [r3, #24]
 800a93a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a94a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	021b      	lsls	r3, r3, #8
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	4313      	orrs	r3, r2
 800a956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	f023 0320 	bic.w	r3, r3, #32
 800a95e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	011b      	lsls	r3, r3, #4
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	4313      	orrs	r3, r2
 800a96a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a21      	ldr	r2, [pc, #132]	; (800a9f4 <TIM_OC2_SetConfig+0xe0>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d003      	beq.n	800a97c <TIM_OC2_SetConfig+0x68>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a20      	ldr	r2, [pc, #128]	; (800a9f8 <TIM_OC2_SetConfig+0xe4>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d10d      	bne.n	800a998 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	011b      	lsls	r3, r3, #4
 800a98a:	697a      	ldr	r2, [r7, #20]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a996:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4a16      	ldr	r2, [pc, #88]	; (800a9f4 <TIM_OC2_SetConfig+0xe0>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d003      	beq.n	800a9a8 <TIM_OC2_SetConfig+0x94>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a15      	ldr	r2, [pc, #84]	; (800a9f8 <TIM_OC2_SetConfig+0xe4>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d113      	bne.n	800a9d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	693a      	ldr	r2, [r7, #16]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	693a      	ldr	r2, [r7, #16]
 800a9d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	685a      	ldr	r2, [r3, #4]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	621a      	str	r2, [r3, #32]
}
 800a9ea:	bf00      	nop
 800a9ec:	371c      	adds	r7, #28
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bc80      	pop	{r7}
 800a9f2:	4770      	bx	lr
 800a9f4:	40010000 	.word	0x40010000
 800a9f8:	40010400 	.word	0x40010400

0800a9fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b087      	sub	sp, #28
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	69db      	ldr	r3, [r3, #28]
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f023 0303 	bic.w	r3, r3, #3
 800aa32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	021b      	lsls	r3, r3, #8
 800aa4c:	697a      	ldr	r2, [r7, #20]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a21      	ldr	r2, [pc, #132]	; (800aadc <TIM_OC3_SetConfig+0xe0>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d003      	beq.n	800aa62 <TIM_OC3_SetConfig+0x66>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a20      	ldr	r2, [pc, #128]	; (800aae0 <TIM_OC3_SetConfig+0xe4>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d10d      	bne.n	800aa7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	021b      	lsls	r3, r3, #8
 800aa70:	697a      	ldr	r2, [r7, #20]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a16      	ldr	r2, [pc, #88]	; (800aadc <TIM_OC3_SetConfig+0xe0>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d003      	beq.n	800aa8e <TIM_OC3_SetConfig+0x92>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a15      	ldr	r2, [pc, #84]	; (800aae0 <TIM_OC3_SetConfig+0xe4>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d113      	bne.n	800aab6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	695b      	ldr	r3, [r3, #20]
 800aaa2:	011b      	lsls	r3, r3, #4
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	011b      	lsls	r3, r3, #4
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	697a      	ldr	r2, [r7, #20]
 800aace:	621a      	str	r2, [r3, #32]
}
 800aad0:	bf00      	nop
 800aad2:	371c      	adds	r7, #28
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bc80      	pop	{r7}
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	40010000 	.word	0x40010000
 800aae0:	40010400 	.word	0x40010400

0800aae4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b087      	sub	sp, #28
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a1b      	ldr	r3, [r3, #32]
 800aaf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	69db      	ldr	r3, [r3, #28]
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	021b      	lsls	r3, r3, #8
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	4313      	orrs	r3, r2
 800ab26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	031b      	lsls	r3, r3, #12
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a11      	ldr	r2, [pc, #68]	; (800ab84 <TIM_OC4_SetConfig+0xa0>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d003      	beq.n	800ab4c <TIM_OC4_SetConfig+0x68>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a10      	ldr	r2, [pc, #64]	; (800ab88 <TIM_OC4_SetConfig+0xa4>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d109      	bne.n	800ab60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	695b      	ldr	r3, [r3, #20]
 800ab58:	019b      	lsls	r3, r3, #6
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	685a      	ldr	r2, [r3, #4]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	693a      	ldr	r2, [r7, #16]
 800ab78:	621a      	str	r2, [r3, #32]
}
 800ab7a:	bf00      	nop
 800ab7c:	371c      	adds	r7, #28
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bc80      	pop	{r7}
 800ab82:	4770      	bx	lr
 800ab84:	40010000 	.word	0x40010000
 800ab88:	40010400 	.word	0x40010400

0800ab8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b087      	sub	sp, #28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	f003 031f 	and.w	r3, r3, #31
 800ab9e:	2201      	movs	r2, #1
 800aba0:	fa02 f303 	lsl.w	r3, r2, r3
 800aba4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6a1a      	ldr	r2, [r3, #32]
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	43db      	mvns	r3, r3
 800abae:	401a      	ands	r2, r3
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6a1a      	ldr	r2, [r3, #32]
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	f003 031f 	and.w	r3, r3, #31
 800abbe:	6879      	ldr	r1, [r7, #4]
 800abc0:	fa01 f303 	lsl.w	r3, r1, r3
 800abc4:	431a      	orrs	r2, r3
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	621a      	str	r2, [r3, #32]
}
 800abca:	bf00      	nop
 800abcc:	371c      	adds	r7, #28
 800abce:	46bd      	mov	sp, r7
 800abd0:	bc80      	pop	{r7}
 800abd2:	4770      	bx	lr

0800abd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d101      	bne.n	800abec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abe8:	2302      	movs	r3, #2
 800abea:	e05a      	b.n	800aca2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2202      	movs	r2, #2
 800abf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a20      	ldr	r2, [pc, #128]	; (800acac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d022      	beq.n	800ac76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac38:	d01d      	beq.n	800ac76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a1c      	ldr	r2, [pc, #112]	; (800acb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d018      	beq.n	800ac76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a1a      	ldr	r2, [pc, #104]	; (800acb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d013      	beq.n	800ac76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a19      	ldr	r2, [pc, #100]	; (800acb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d00e      	beq.n	800ac76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a17      	ldr	r2, [pc, #92]	; (800acbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d009      	beq.n	800ac76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a16      	ldr	r2, [pc, #88]	; (800acc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d004      	beq.n	800ac76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a14      	ldr	r2, [pc, #80]	; (800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d10c      	bne.n	800ac90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	68ba      	ldr	r2, [r7, #8]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	68ba      	ldr	r2, [r7, #8]
 800ac8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3714      	adds	r7, #20
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bc80      	pop	{r7}
 800acaa:	4770      	bx	lr
 800acac:	40010000 	.word	0x40010000
 800acb0:	40000400 	.word	0x40000400
 800acb4:	40000800 	.word	0x40000800
 800acb8:	40000c00 	.word	0x40000c00
 800acbc:	40010400 	.word	0x40010400
 800acc0:	40014000 	.word	0x40014000
 800acc4:	40001800 	.word	0x40001800

0800acc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d101      	bne.n	800acda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	e03f      	b.n	800ad5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d106      	bne.n	800acf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f7fb f854 	bl	8005d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2224      	movs	r2, #36	; 0x24
 800acf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68da      	ldr	r2, [r3, #12]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 fc9d 	bl	800b64c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	691a      	ldr	r2, [r3, #16]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	695a      	ldr	r2, [r3, #20]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68da      	ldr	r2, [r3, #12]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2220      	movs	r2, #32
 800ad4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2220      	movs	r2, #32
 800ad54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b084      	sub	sp, #16
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	60f8      	str	r0, [r7, #12]
 800ad6a:	60b9      	str	r1, [r7, #8]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	2b20      	cmp	r3, #32
 800ad7a:	d11d      	bne.n	800adb8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d002      	beq.n	800ad88 <HAL_UART_Receive_DMA+0x26>
 800ad82:	88fb      	ldrh	r3, [r7, #6]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d101      	bne.n	800ad8c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e016      	b.n	800adba <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d101      	bne.n	800ad9a <HAL_UART_Receive_DMA+0x38>
 800ad96:	2302      	movs	r3, #2
 800ad98:	e00f      	b.n	800adba <HAL_UART_Receive_DMA+0x58>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800ada8:	88fb      	ldrh	r3, [r7, #6]
 800adaa:	461a      	mov	r2, r3
 800adac:	68b9      	ldr	r1, [r7, #8]
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f000 fa82 	bl	800b2b8 <UART_Start_Receive_DMA>
 800adb4:	4603      	mov	r3, r0
 800adb6:	e000      	b.n	800adba <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800adb8:	2302      	movs	r3, #2
  }
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
	...

0800adc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b08a      	sub	sp, #40	; 0x28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	695b      	ldr	r3, [r3, #20]
 800ade2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800ade4:	2300      	movs	r3, #0
 800ade6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800ade8:	2300      	movs	r3, #0
 800adea:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	f003 030f 	and.w	r3, r3, #15
 800adf2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10d      	bne.n	800ae16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	f003 0320 	and.w	r3, r3, #32
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d008      	beq.n	800ae16 <HAL_UART_IRQHandler+0x52>
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	f003 0320 	and.w	r3, r3, #32
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d003      	beq.n	800ae16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fb72 	bl	800b4f8 <UART_Receive_IT>
      return;
 800ae14:	e17c      	b.n	800b110 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f000 80b1 	beq.w	800af80 <HAL_UART_IRQHandler+0x1bc>
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	f003 0301 	and.w	r3, r3, #1
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d105      	bne.n	800ae34 <HAL_UART_IRQHandler+0x70>
 800ae28:	6a3b      	ldr	r3, [r7, #32]
 800ae2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f000 80a6 	beq.w	800af80 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	f003 0301 	and.w	r3, r3, #1
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00a      	beq.n	800ae54 <HAL_UART_IRQHandler+0x90>
 800ae3e:	6a3b      	ldr	r3, [r7, #32]
 800ae40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d005      	beq.n	800ae54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4c:	f043 0201 	orr.w	r2, r3, #1
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	f003 0304 	and.w	r3, r3, #4
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00a      	beq.n	800ae74 <HAL_UART_IRQHandler+0xb0>
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	f003 0301 	and.w	r3, r3, #1
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d005      	beq.n	800ae74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6c:	f043 0202 	orr.w	r2, r3, #2
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae76:	f003 0302 	and.w	r3, r3, #2
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00a      	beq.n	800ae94 <HAL_UART_IRQHandler+0xd0>
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d005      	beq.n	800ae94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8c:	f043 0204 	orr.w	r2, r3, #4
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800ae94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae96:	f003 0308 	and.w	r3, r3, #8
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00f      	beq.n	800aebe <HAL_UART_IRQHandler+0xfa>
 800ae9e:	6a3b      	ldr	r3, [r7, #32]
 800aea0:	f003 0320 	and.w	r3, r3, #32
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d104      	bne.n	800aeb2 <HAL_UART_IRQHandler+0xee>
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	f003 0301 	and.w	r3, r3, #1
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d005      	beq.n	800aebe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb6:	f043 0208 	orr.w	r2, r3, #8
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 811f 	beq.w	800b106 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeca:	f003 0320 	and.w	r3, r3, #32
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d007      	beq.n	800aee2 <HAL_UART_IRQHandler+0x11e>
 800aed2:	6a3b      	ldr	r3, [r7, #32]
 800aed4:	f003 0320 	and.w	r3, r3, #32
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d002      	beq.n	800aee2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fb0b 	bl	800b4f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	695b      	ldr	r3, [r3, #20]
 800aee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeec:	2b40      	cmp	r3, #64	; 0x40
 800aeee:	bf0c      	ite	eq
 800aef0:	2301      	moveq	r3, #1
 800aef2:	2300      	movne	r3, #0
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefc:	f003 0308 	and.w	r3, r3, #8
 800af00:	2b00      	cmp	r3, #0
 800af02:	d102      	bne.n	800af0a <HAL_UART_IRQHandler+0x146>
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d031      	beq.n	800af6e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fa4d 	bl	800b3aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af1a:	2b40      	cmp	r3, #64	; 0x40
 800af1c:	d123      	bne.n	800af66 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	695a      	ldr	r2, [r3, #20]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af2c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af32:	2b00      	cmp	r3, #0
 800af34:	d013      	beq.n	800af5e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3a:	4a77      	ldr	r2, [pc, #476]	; (800b118 <HAL_UART_IRQHandler+0x354>)
 800af3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af42:	4618      	mov	r0, r3
 800af44:	f7fb fecc 	bl	8006ce0 <HAL_DMA_Abort_IT>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d016      	beq.n	800af7c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800af58:	4610      	mov	r0, r2
 800af5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af5c:	e00e      	b.n	800af7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f7f9 fea2 	bl	8004ca8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af64:	e00a      	b.n	800af7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f7f9 fe9e 	bl	8004ca8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af6c:	e006      	b.n	800af7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7f9 fe9a 	bl	8004ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800af7a:	e0c4      	b.n	800b106 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af7c:	bf00      	nop
    return;
 800af7e:	e0c2      	b.n	800b106 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af84:	2b01      	cmp	r3, #1
 800af86:	f040 80a2 	bne.w	800b0ce <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800af8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8c:	f003 0310 	and.w	r3, r3, #16
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 809c 	beq.w	800b0ce <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800af96:	6a3b      	ldr	r3, [r7, #32]
 800af98:	f003 0310 	and.w	r3, r3, #16
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	f000 8096 	beq.w	800b0ce <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800afa2:	2300      	movs	r3, #0
 800afa4:	60fb      	str	r3, [r7, #12]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	60fb      	str	r3, [r7, #12]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	60fb      	str	r3, [r7, #12]
 800afb6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	695b      	ldr	r3, [r3, #20]
 800afbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc2:	2b40      	cmp	r3, #64	; 0x40
 800afc4:	d14f      	bne.n	800b066 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800afd0:	8a3b      	ldrh	r3, [r7, #16]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f000 8099 	beq.w	800b10a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800afdc:	8a3a      	ldrh	r2, [r7, #16]
 800afde:	429a      	cmp	r2, r3
 800afe0:	f080 8093 	bcs.w	800b10a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	8a3a      	ldrh	r2, [r7, #16]
 800afe8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afee:	69db      	ldr	r3, [r3, #28]
 800aff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aff4:	d02b      	beq.n	800b04e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68da      	ldr	r2, [r3, #12]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b004:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	695a      	ldr	r2, [r3, #20]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f022 0201 	bic.w	r2, r2, #1
 800b014:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	695a      	ldr	r2, [r3, #20]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b024:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2220      	movs	r2, #32
 800b02a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68da      	ldr	r2, [r3, #12]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f022 0210 	bic.w	r2, r2, #16
 800b042:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b048:	4618      	mov	r0, r3
 800b04a:	f7fb fdd9 	bl	8006c00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b056:	b29b      	uxth	r3, r3
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	4619      	mov	r1, r3
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f86e 	bl	800b140 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b064:	e051      	b.n	800b10a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b06e:	b29b      	uxth	r3, r3
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b078:	b29b      	uxth	r3, r3
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d047      	beq.n	800b10e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800b07e:	8a7b      	ldrh	r3, [r7, #18]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d044      	beq.n	800b10e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	68da      	ldr	r2, [r3, #12]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b092:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	695a      	ldr	r2, [r3, #20]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f022 0201 	bic.w	r2, r2, #1
 800b0a2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2220      	movs	r2, #32
 800b0a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	68da      	ldr	r2, [r3, #12]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f022 0210 	bic.w	r2, r2, #16
 800b0c0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b0c2:	8a7b      	ldrh	r3, [r7, #18]
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f83a 	bl	800b140 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b0cc:	e01f      	b.n	800b10e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d008      	beq.n	800b0ea <HAL_UART_IRQHandler+0x326>
 800b0d8:	6a3b      	ldr	r3, [r7, #32]
 800b0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f000 f9a1 	bl	800b42a <UART_Transmit_IT>
    return;
 800b0e8:	e012      	b.n	800b110 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00d      	beq.n	800b110 <HAL_UART_IRQHandler+0x34c>
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d008      	beq.n	800b110 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f9e2 	bl	800b4c8 <UART_EndTransmit_IT>
    return;
 800b104:	e004      	b.n	800b110 <HAL_UART_IRQHandler+0x34c>
    return;
 800b106:	bf00      	nop
 800b108:	e002      	b.n	800b110 <HAL_UART_IRQHandler+0x34c>
      return;
 800b10a:	bf00      	nop
 800b10c:	e000      	b.n	800b110 <HAL_UART_IRQHandler+0x34c>
      return;
 800b10e:	bf00      	nop
  }
}
 800b110:	3728      	adds	r7, #40	; 0x28
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	0800b403 	.word	0x0800b403

0800b11c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b124:	bf00      	nop
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	bc80      	pop	{r7}
 800b12c:	4770      	bx	lr

0800b12e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b12e:	b480      	push	{r7}
 800b130:	b083      	sub	sp, #12
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b136:	bf00      	nop
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bc80      	pop	{r7}
 800b13e:	4770      	bx	lr

0800b140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b14c:	bf00      	nop
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	bc80      	pop	{r7}
 800b154:	4770      	bx	lr

0800b156 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b162:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d12a      	bne.n	800b1c8 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	68da      	ldr	r2, [r3, #12]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b186:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	695a      	ldr	r2, [r3, #20]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f022 0201 	bic.w	r2, r2, #1
 800b196:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	695a      	ldr	r2, [r3, #20]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1a6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2220      	movs	r2, #32
 800b1ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d107      	bne.n	800b1c8 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68da      	ldr	r2, [r3, #12]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f022 0210 	bic.w	r2, r2, #16
 800b1c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d106      	bne.n	800b1de <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f7ff ffb2 	bl	800b140 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1dc:	e002      	b.n	800b1e4 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f7f9 fd4c 	bl	8004c7c <HAL_UART_RxCpltCallback>
}
 800b1e4:	bf00      	nop
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d108      	bne.n	800b214 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b206:	085b      	lsrs	r3, r3, #1
 800b208:	b29b      	uxth	r3, r3
 800b20a:	4619      	mov	r1, r3
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f7ff ff97 	bl	800b140 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b212:	e002      	b.n	800b21a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f7ff ff8a 	bl	800b12e <HAL_UART_RxHalfCpltCallback>
}
 800b21a:	bf00      	nop
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b084      	sub	sp, #16
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b22a:	2300      	movs	r3, #0
 800b22c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b232:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	695b      	ldr	r3, [r3, #20]
 800b23a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b23e:	2b80      	cmp	r3, #128	; 0x80
 800b240:	bf0c      	ite	eq
 800b242:	2301      	moveq	r3, #1
 800b244:	2300      	movne	r3, #0
 800b246:	b2db      	uxtb	r3, r3
 800b248:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b250:	b2db      	uxtb	r3, r3
 800b252:	2b21      	cmp	r3, #33	; 0x21
 800b254:	d108      	bne.n	800b268 <UART_DMAError+0x46>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d005      	beq.n	800b268 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	2200      	movs	r2, #0
 800b260:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b262:	68b8      	ldr	r0, [r7, #8]
 800b264:	f000 f88c 	bl	800b380 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	695b      	ldr	r3, [r3, #20]
 800b26e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b272:	2b40      	cmp	r3, #64	; 0x40
 800b274:	bf0c      	ite	eq
 800b276:	2301      	moveq	r3, #1
 800b278:	2300      	movne	r3, #0
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b284:	b2db      	uxtb	r3, r3
 800b286:	2b22      	cmp	r3, #34	; 0x22
 800b288:	d108      	bne.n	800b29c <UART_DMAError+0x7a>
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d005      	beq.n	800b29c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	2200      	movs	r2, #0
 800b294:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b296:	68b8      	ldr	r0, [r7, #8]
 800b298:	f000 f887 	bl	800b3aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a0:	f043 0210 	orr.w	r2, r3, #16
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2a8:	68b8      	ldr	r0, [r7, #8]
 800b2aa:	f7f9 fcfd 	bl	8004ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2ae:	bf00      	nop
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	88fa      	ldrh	r2, [r7, #6]
 800b2d0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2222      	movs	r2, #34	; 0x22
 800b2dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e4:	4a23      	ldr	r2, [pc, #140]	; (800b374 <UART_Start_Receive_DMA+0xbc>)
 800b2e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ec:	4a22      	ldr	r2, [pc, #136]	; (800b378 <UART_Start_Receive_DMA+0xc0>)
 800b2ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f4:	4a21      	ldr	r2, [pc, #132]	; (800b37c <UART_Start_Receive_DMA+0xc4>)
 800b2f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b300:	f107 0308 	add.w	r3, r7, #8
 800b304:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	3304      	adds	r3, #4
 800b310:	4619      	mov	r1, r3
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	88fb      	ldrh	r3, [r7, #6]
 800b318:	f7fb fc1a 	bl	8006b50 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b31c:	2300      	movs	r3, #0
 800b31e:	613b      	str	r3, [r7, #16]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	613b      	str	r3, [r7, #16]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	613b      	str	r3, [r7, #16]
 800b330:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68da      	ldr	r2, [r3, #12]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b348:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	695a      	ldr	r2, [r3, #20]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f042 0201 	orr.w	r2, r2, #1
 800b358:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	695a      	ldr	r2, [r3, #20]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b368:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3718      	adds	r7, #24
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	0800b157 	.word	0x0800b157
 800b378:	0800b1ed 	.word	0x0800b1ed
 800b37c:	0800b223 	.word	0x0800b223

0800b380 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68da      	ldr	r2, [r3, #12]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b396:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2220      	movs	r2, #32
 800b39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b3a0:	bf00      	nop
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bc80      	pop	{r7}
 800b3a8:	4770      	bx	lr

0800b3aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b083      	sub	sp, #12
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	68da      	ldr	r2, [r3, #12]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b3c0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	695a      	ldr	r2, [r3, #20]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f022 0201 	bic.w	r2, r2, #1
 800b3d0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d107      	bne.n	800b3ea <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68da      	ldr	r2, [r3, #12]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f022 0210 	bic.w	r2, r2, #16
 800b3e8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2220      	movs	r2, #32
 800b3ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bc80      	pop	{r7}
 800b400:	4770      	bx	lr

0800b402 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b084      	sub	sp, #16
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b40e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2200      	movs	r2, #0
 800b41a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f7f9 fc43 	bl	8004ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b422:	bf00      	nop
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b085      	sub	sp, #20
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	2b21      	cmp	r3, #33	; 0x21
 800b43c:	d13e      	bne.n	800b4bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b446:	d114      	bne.n	800b472 <UART_Transmit_IT+0x48>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d110      	bne.n	800b472 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a1b      	ldr	r3, [r3, #32]
 800b454:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	881b      	ldrh	r3, [r3, #0]
 800b45a:	461a      	mov	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b464:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6a1b      	ldr	r3, [r3, #32]
 800b46a:	1c9a      	adds	r2, r3, #2
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	621a      	str	r2, [r3, #32]
 800b470:	e008      	b.n	800b484 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a1b      	ldr	r3, [r3, #32]
 800b476:	1c59      	adds	r1, r3, #1
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	6211      	str	r1, [r2, #32]
 800b47c:	781a      	ldrb	r2, [r3, #0]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b488:	b29b      	uxth	r3, r3
 800b48a:	3b01      	subs	r3, #1
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	4619      	mov	r1, r3
 800b492:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10f      	bne.n	800b4b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	68da      	ldr	r2, [r3, #12]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	68da      	ldr	r2, [r3, #12]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	e000      	b.n	800b4be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b4bc:	2302      	movs	r3, #2
  }
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3714      	adds	r7, #20
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bc80      	pop	{r7}
 800b4c6:	4770      	bx	lr

0800b4c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68da      	ldr	r2, [r3, #12]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2220      	movs	r2, #32
 800b4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7ff fe17 	bl	800b11c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b506:	b2db      	uxtb	r3, r3
 800b508:	2b22      	cmp	r3, #34	; 0x22
 800b50a:	f040 8099 	bne.w	800b640 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b516:	d117      	bne.n	800b548 <UART_Receive_IT+0x50>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d113      	bne.n	800b548 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b520:	2300      	movs	r3, #0
 800b522:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b528:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	b29b      	uxth	r3, r3
 800b532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b536:	b29a      	uxth	r2, r3
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b540:	1c9a      	adds	r2, r3, #2
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	629a      	str	r2, [r3, #40]	; 0x28
 800b546:	e026      	b.n	800b596 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800b54e:	2300      	movs	r3, #0
 800b550:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b55a:	d007      	beq.n	800b56c <UART_Receive_IT+0x74>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10a      	bne.n	800b57a <UART_Receive_IT+0x82>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d106      	bne.n	800b57a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	b2da      	uxtb	r2, r3
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	701a      	strb	r2, [r3, #0]
 800b578:	e008      	b.n	800b58c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	b2db      	uxtb	r3, r3
 800b582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b586:	b2da      	uxtb	r2, r3
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b590:	1c5a      	adds	r2, r3, #1
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	3b01      	subs	r3, #1
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d148      	bne.n	800b63c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	68da      	ldr	r2, [r3, #12]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f022 0220 	bic.w	r2, r2, #32
 800b5b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68da      	ldr	r2, [r3, #12]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	695a      	ldr	r2, [r3, #20]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f022 0201 	bic.w	r2, r2, #1
 800b5d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2220      	movs	r2, #32
 800b5de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d123      	bne.n	800b632 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68da      	ldr	r2, [r3, #12]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f022 0210 	bic.w	r2, r2, #16
 800b5fe:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f003 0310 	and.w	r3, r3, #16
 800b60a:	2b10      	cmp	r3, #16
 800b60c:	d10a      	bne.n	800b624 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b60e:	2300      	movs	r3, #0
 800b610:	60fb      	str	r3, [r7, #12]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	60fb      	str	r3, [r7, #12]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	60fb      	str	r3, [r7, #12]
 800b622:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7ff fd88 	bl	800b140 <HAL_UARTEx_RxEventCallback>
 800b630:	e002      	b.n	800b638 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7f9 fb22 	bl	8004c7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b638:	2300      	movs	r3, #0
 800b63a:	e002      	b.n	800b642 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	e000      	b.n	800b642 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800b640:	2302      	movs	r3, #2
  }
}
 800b642:	4618      	mov	r0, r3
 800b644:	3718      	adds	r7, #24
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
	...

0800b64c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	68da      	ldr	r2, [r3, #12]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	430a      	orrs	r2, r1
 800b668:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	689a      	ldr	r2, [r3, #8]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	431a      	orrs	r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	695b      	ldr	r3, [r3, #20]
 800b678:	431a      	orrs	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	69db      	ldr	r3, [r3, #28]
 800b67e:	4313      	orrs	r3, r2
 800b680:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b68c:	f023 030c 	bic.w	r3, r3, #12
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	6812      	ldr	r2, [r2, #0]
 800b694:	68b9      	ldr	r1, [r7, #8]
 800b696:	430b      	orrs	r3, r1
 800b698:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	695b      	ldr	r3, [r3, #20]
 800b6a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	699a      	ldr	r2, [r3, #24]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	430a      	orrs	r2, r1
 800b6ae:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a57      	ldr	r2, [pc, #348]	; (800b814 <UART_SetConfig+0x1c8>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d004      	beq.n	800b6c4 <UART_SetConfig+0x78>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a56      	ldr	r2, [pc, #344]	; (800b818 <UART_SetConfig+0x1cc>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d103      	bne.n	800b6cc <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b6c4:	f7fe fce2 	bl	800a08c <HAL_RCC_GetPCLK2Freq>
 800b6c8:	60f8      	str	r0, [r7, #12]
 800b6ca:	e002      	b.n	800b6d2 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b6cc:	f7fe fcbc 	bl	800a048 <HAL_RCC_GetPCLK1Freq>
 800b6d0:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	69db      	ldr	r3, [r3, #28]
 800b6d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6da:	d14c      	bne.n	800b776 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	4413      	add	r3, r2
 800b6e4:	009a      	lsls	r2, r3, #2
 800b6e6:	441a      	add	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	005b      	lsls	r3, r3, #1
 800b6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6f2:	4a4a      	ldr	r2, [pc, #296]	; (800b81c <UART_SetConfig+0x1d0>)
 800b6f4:	fba2 2303 	umull	r2, r3, r2, r3
 800b6f8:	095b      	lsrs	r3, r3, #5
 800b6fa:	0119      	lsls	r1, r3, #4
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	4613      	mov	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	4413      	add	r3, r2
 800b704:	009a      	lsls	r2, r3, #2
 800b706:	441a      	add	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	005b      	lsls	r3, r3, #1
 800b70e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b712:	4b42      	ldr	r3, [pc, #264]	; (800b81c <UART_SetConfig+0x1d0>)
 800b714:	fba3 0302 	umull	r0, r3, r3, r2
 800b718:	095b      	lsrs	r3, r3, #5
 800b71a:	2064      	movs	r0, #100	; 0x64
 800b71c:	fb00 f303 	mul.w	r3, r0, r3
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	00db      	lsls	r3, r3, #3
 800b724:	3332      	adds	r3, #50	; 0x32
 800b726:	4a3d      	ldr	r2, [pc, #244]	; (800b81c <UART_SetConfig+0x1d0>)
 800b728:	fba2 2303 	umull	r2, r3, r2, r3
 800b72c:	095b      	lsrs	r3, r3, #5
 800b72e:	005b      	lsls	r3, r3, #1
 800b730:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b734:	4419      	add	r1, r3
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	4613      	mov	r3, r2
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	4413      	add	r3, r2
 800b73e:	009a      	lsls	r2, r3, #2
 800b740:	441a      	add	r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	005b      	lsls	r3, r3, #1
 800b748:	fbb2 f2f3 	udiv	r2, r2, r3
 800b74c:	4b33      	ldr	r3, [pc, #204]	; (800b81c <UART_SetConfig+0x1d0>)
 800b74e:	fba3 0302 	umull	r0, r3, r3, r2
 800b752:	095b      	lsrs	r3, r3, #5
 800b754:	2064      	movs	r0, #100	; 0x64
 800b756:	fb00 f303 	mul.w	r3, r0, r3
 800b75a:	1ad3      	subs	r3, r2, r3
 800b75c:	00db      	lsls	r3, r3, #3
 800b75e:	3332      	adds	r3, #50	; 0x32
 800b760:	4a2e      	ldr	r2, [pc, #184]	; (800b81c <UART_SetConfig+0x1d0>)
 800b762:	fba2 2303 	umull	r2, r3, r2, r3
 800b766:	095b      	lsrs	r3, r3, #5
 800b768:	f003 0207 	and.w	r2, r3, #7
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	440a      	add	r2, r1
 800b772:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b774:	e04a      	b.n	800b80c <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	4613      	mov	r3, r2
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	4413      	add	r3, r2
 800b77e:	009a      	lsls	r2, r3, #2
 800b780:	441a      	add	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	fbb2 f3f3 	udiv	r3, r2, r3
 800b78c:	4a23      	ldr	r2, [pc, #140]	; (800b81c <UART_SetConfig+0x1d0>)
 800b78e:	fba2 2303 	umull	r2, r3, r2, r3
 800b792:	095b      	lsrs	r3, r3, #5
 800b794:	0119      	lsls	r1, r3, #4
 800b796:	68fa      	ldr	r2, [r7, #12]
 800b798:	4613      	mov	r3, r2
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	4413      	add	r3, r2
 800b79e:	009a      	lsls	r2, r3, #2
 800b7a0:	441a      	add	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	fbb2 f2f3 	udiv	r2, r2, r3
 800b7ac:	4b1b      	ldr	r3, [pc, #108]	; (800b81c <UART_SetConfig+0x1d0>)
 800b7ae:	fba3 0302 	umull	r0, r3, r3, r2
 800b7b2:	095b      	lsrs	r3, r3, #5
 800b7b4:	2064      	movs	r0, #100	; 0x64
 800b7b6:	fb00 f303 	mul.w	r3, r0, r3
 800b7ba:	1ad3      	subs	r3, r2, r3
 800b7bc:	011b      	lsls	r3, r3, #4
 800b7be:	3332      	adds	r3, #50	; 0x32
 800b7c0:	4a16      	ldr	r2, [pc, #88]	; (800b81c <UART_SetConfig+0x1d0>)
 800b7c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7c6:	095b      	lsrs	r3, r3, #5
 800b7c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7cc:	4419      	add	r1, r3
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4413      	add	r3, r2
 800b7d6:	009a      	lsls	r2, r3, #2
 800b7d8:	441a      	add	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	fbb2 f2f3 	udiv	r2, r2, r3
 800b7e4:	4b0d      	ldr	r3, [pc, #52]	; (800b81c <UART_SetConfig+0x1d0>)
 800b7e6:	fba3 0302 	umull	r0, r3, r3, r2
 800b7ea:	095b      	lsrs	r3, r3, #5
 800b7ec:	2064      	movs	r0, #100	; 0x64
 800b7ee:	fb00 f303 	mul.w	r3, r0, r3
 800b7f2:	1ad3      	subs	r3, r2, r3
 800b7f4:	011b      	lsls	r3, r3, #4
 800b7f6:	3332      	adds	r3, #50	; 0x32
 800b7f8:	4a08      	ldr	r2, [pc, #32]	; (800b81c <UART_SetConfig+0x1d0>)
 800b7fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b7fe:	095b      	lsrs	r3, r3, #5
 800b800:	f003 020f 	and.w	r2, r3, #15
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	440a      	add	r2, r1
 800b80a:	609a      	str	r2, [r3, #8]
}
 800b80c:	bf00      	nop
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	40011000 	.word	0x40011000
 800b818:	40011400 	.word	0x40011400
 800b81c:	51eb851f 	.word	0x51eb851f

0800b820 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b820:	b084      	sub	sp, #16
 800b822:	b580      	push	{r7, lr}
 800b824:	b084      	sub	sp, #16
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	f107 001c 	add.w	r0, r7, #28
 800b82e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b834:	2b01      	cmp	r3, #1
 800b836:	d122      	bne.n	800b87e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b83c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b84c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b862:	2b01      	cmp	r3, #1
 800b864:	d105      	bne.n	800b872 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f001 fafa 	bl	800ce6c <USB_CoreReset>
 800b878:	4603      	mov	r3, r0
 800b87a:	73fb      	strb	r3, [r7, #15]
 800b87c:	e010      	b.n	800b8a0 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f001 faee 	bl	800ce6c <USB_CoreReset>
 800b890:	4603      	mov	r3, r0
 800b892:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b898:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d10b      	bne.n	800b8be <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	f043 0206 	orr.w	r2, r3, #6
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	f043 0220 	orr.w	r2, r3, #32
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b8ca:	b004      	add	sp, #16
 800b8cc:	4770      	bx	lr
	...

0800b8d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b087      	sub	sp, #28
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b8de:	79fb      	ldrb	r3, [r7, #7]
 800b8e0:	2b02      	cmp	r3, #2
 800b8e2:	d165      	bne.n	800b9b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	4a41      	ldr	r2, [pc, #260]	; (800b9ec <USB_SetTurnaroundTime+0x11c>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d906      	bls.n	800b8fa <USB_SetTurnaroundTime+0x2a>
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	4a40      	ldr	r2, [pc, #256]	; (800b9f0 <USB_SetTurnaroundTime+0x120>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d202      	bcs.n	800b8fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b8f4:	230f      	movs	r3, #15
 800b8f6:	617b      	str	r3, [r7, #20]
 800b8f8:	e062      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	4a3c      	ldr	r2, [pc, #240]	; (800b9f0 <USB_SetTurnaroundTime+0x120>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d306      	bcc.n	800b910 <USB_SetTurnaroundTime+0x40>
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	4a3b      	ldr	r2, [pc, #236]	; (800b9f4 <USB_SetTurnaroundTime+0x124>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d202      	bcs.n	800b910 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b90a:	230e      	movs	r3, #14
 800b90c:	617b      	str	r3, [r7, #20]
 800b90e:	e057      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	4a38      	ldr	r2, [pc, #224]	; (800b9f4 <USB_SetTurnaroundTime+0x124>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d306      	bcc.n	800b926 <USB_SetTurnaroundTime+0x56>
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	4a37      	ldr	r2, [pc, #220]	; (800b9f8 <USB_SetTurnaroundTime+0x128>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d202      	bcs.n	800b926 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b920:	230d      	movs	r3, #13
 800b922:	617b      	str	r3, [r7, #20]
 800b924:	e04c      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	4a33      	ldr	r2, [pc, #204]	; (800b9f8 <USB_SetTurnaroundTime+0x128>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d306      	bcc.n	800b93c <USB_SetTurnaroundTime+0x6c>
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	4a32      	ldr	r2, [pc, #200]	; (800b9fc <USB_SetTurnaroundTime+0x12c>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d802      	bhi.n	800b93c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b936:	230c      	movs	r3, #12
 800b938:	617b      	str	r3, [r7, #20]
 800b93a:	e041      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	4a2f      	ldr	r2, [pc, #188]	; (800b9fc <USB_SetTurnaroundTime+0x12c>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d906      	bls.n	800b952 <USB_SetTurnaroundTime+0x82>
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	4a2e      	ldr	r2, [pc, #184]	; (800ba00 <USB_SetTurnaroundTime+0x130>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d802      	bhi.n	800b952 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b94c:	230b      	movs	r3, #11
 800b94e:	617b      	str	r3, [r7, #20]
 800b950:	e036      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	4a2a      	ldr	r2, [pc, #168]	; (800ba00 <USB_SetTurnaroundTime+0x130>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d906      	bls.n	800b968 <USB_SetTurnaroundTime+0x98>
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	4a29      	ldr	r2, [pc, #164]	; (800ba04 <USB_SetTurnaroundTime+0x134>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d802      	bhi.n	800b968 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b962:	230a      	movs	r3, #10
 800b964:	617b      	str	r3, [r7, #20]
 800b966:	e02b      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	4a26      	ldr	r2, [pc, #152]	; (800ba04 <USB_SetTurnaroundTime+0x134>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d906      	bls.n	800b97e <USB_SetTurnaroundTime+0xae>
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	4a25      	ldr	r2, [pc, #148]	; (800ba08 <USB_SetTurnaroundTime+0x138>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d202      	bcs.n	800b97e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b978:	2309      	movs	r3, #9
 800b97a:	617b      	str	r3, [r7, #20]
 800b97c:	e020      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	4a21      	ldr	r2, [pc, #132]	; (800ba08 <USB_SetTurnaroundTime+0x138>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d306      	bcc.n	800b994 <USB_SetTurnaroundTime+0xc4>
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	4a20      	ldr	r2, [pc, #128]	; (800ba0c <USB_SetTurnaroundTime+0x13c>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d802      	bhi.n	800b994 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b98e:	2308      	movs	r3, #8
 800b990:	617b      	str	r3, [r7, #20]
 800b992:	e015      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	4a1d      	ldr	r2, [pc, #116]	; (800ba0c <USB_SetTurnaroundTime+0x13c>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d906      	bls.n	800b9aa <USB_SetTurnaroundTime+0xda>
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	4a1c      	ldr	r2, [pc, #112]	; (800ba10 <USB_SetTurnaroundTime+0x140>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d202      	bcs.n	800b9aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b9a4:	2307      	movs	r3, #7
 800b9a6:	617b      	str	r3, [r7, #20]
 800b9a8:	e00a      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b9aa:	2306      	movs	r3, #6
 800b9ac:	617b      	str	r3, [r7, #20]
 800b9ae:	e007      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b9b0:	79fb      	ldrb	r3, [r7, #7]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d102      	bne.n	800b9bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b9b6:	2309      	movs	r3, #9
 800b9b8:	617b      	str	r3, [r7, #20]
 800b9ba:	e001      	b.n	800b9c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b9bc:	2309      	movs	r3, #9
 800b9be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	68da      	ldr	r2, [r3, #12]
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	029b      	lsls	r3, r3, #10
 800b9d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b9d8:	431a      	orrs	r2, r3
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	371c      	adds	r7, #28
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bc80      	pop	{r7}
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	00d8acbf 	.word	0x00d8acbf
 800b9f0:	00e4e1c0 	.word	0x00e4e1c0
 800b9f4:	00f42400 	.word	0x00f42400
 800b9f8:	01067380 	.word	0x01067380
 800b9fc:	011a499f 	.word	0x011a499f
 800ba00:	01312cff 	.word	0x01312cff
 800ba04:	014ca43f 	.word	0x014ca43f
 800ba08:	016e3600 	.word	0x016e3600
 800ba0c:	01a6ab1f 	.word	0x01a6ab1f
 800ba10:	01e84800 	.word	0x01e84800

0800ba14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	f043 0201 	orr.w	r2, r3, #1
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	370c      	adds	r7, #12
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bc80      	pop	{r7}
 800ba32:	4770      	bx	lr

0800ba34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	f023 0201 	bic.w	r2, r3, #1
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bc80      	pop	{r7}
 800ba52:	4770      	bx	lr

0800ba54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ba60:	2300      	movs	r3, #0
 800ba62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ba70:	78fb      	ldrb	r3, [r7, #3]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d115      	bne.n	800baa2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ba82:	2001      	movs	r0, #1
 800ba84:	f7fa fbd4 	bl	8006230 <HAL_Delay>
      ms++;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f001 f961 	bl	800cd56 <USB_GetMode>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d01e      	beq.n	800bad8 <USB_SetCurrentMode+0x84>
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2b31      	cmp	r3, #49	; 0x31
 800ba9e:	d9f0      	bls.n	800ba82 <USB_SetCurrentMode+0x2e>
 800baa0:	e01a      	b.n	800bad8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800baa2:	78fb      	ldrb	r3, [r7, #3]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d115      	bne.n	800bad4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bab4:	2001      	movs	r0, #1
 800bab6:	f7fa fbbb 	bl	8006230 <HAL_Delay>
      ms++;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	3301      	adds	r3, #1
 800babe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f001 f948 	bl	800cd56 <USB_GetMode>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d005      	beq.n	800bad8 <USB_SetCurrentMode+0x84>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2b31      	cmp	r3, #49	; 0x31
 800bad0:	d9f0      	bls.n	800bab4 <USB_SetCurrentMode+0x60>
 800bad2:	e001      	b.n	800bad8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e005      	b.n	800bae4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2b32      	cmp	r3, #50	; 0x32
 800badc:	d101      	bne.n	800bae2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	e000      	b.n	800bae4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800baec:	b084      	sub	sp, #16
 800baee:	b580      	push	{r7, lr}
 800baf0:	b086      	sub	sp, #24
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bafa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bb06:	2300      	movs	r3, #0
 800bb08:	613b      	str	r3, [r7, #16]
 800bb0a:	e009      	b.n	800bb20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	3340      	adds	r3, #64	; 0x40
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	2200      	movs	r2, #0
 800bb18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	613b      	str	r3, [r7, #16]
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	2b0e      	cmp	r3, #14
 800bb24:	d9f2      	bls.n	800bb0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bb26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d11c      	bne.n	800bb66 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb3a:	f043 0302 	orr.w	r3, r3, #2
 800bb3e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb50:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb5c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	639a      	str	r2, [r3, #56]	; 0x38
 800bb64:	e00b      	b.n	800bb7e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb84:	461a      	mov	r2, r3
 800bb86:	2300      	movs	r3, #0
 800bb88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb90:	4619      	mov	r1, r3
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb98:	461a      	mov	r2, r3
 800bb9a:	680b      	ldr	r3, [r1, #0]
 800bb9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d10c      	bne.n	800bbbe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d104      	bne.n	800bbb4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bbaa:	2100      	movs	r1, #0
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 f945 	bl	800be3c <USB_SetDevSpeed>
 800bbb2:	e008      	b.n	800bbc6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bbb4:	2101      	movs	r1, #1
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 f940 	bl	800be3c <USB_SetDevSpeed>
 800bbbc:	e003      	b.n	800bbc6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bbbe:	2103      	movs	r1, #3
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f93b 	bl	800be3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bbc6:	2110      	movs	r1, #16
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 f8f3 	bl	800bdb4 <USB_FlushTxFifo>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d001      	beq.n	800bbd8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 f90f 	bl	800bdfc <USB_FlushRxFifo>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d001      	beq.n	800bbe8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbee:	461a      	mov	r2, r3
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc06:	461a      	mov	r2, r3
 800bc08:	2300      	movs	r3, #0
 800bc0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	613b      	str	r3, [r7, #16]
 800bc10:	e043      	b.n	800bc9a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	015a      	lsls	r2, r3, #5
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	4413      	add	r3, r2
 800bc1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc28:	d118      	bne.n	800bc5c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d10a      	bne.n	800bc46 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	015a      	lsls	r2, r3, #5
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	4413      	add	r3, r2
 800bc38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bc42:	6013      	str	r3, [r2, #0]
 800bc44:	e013      	b.n	800bc6e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	015a      	lsls	r2, r3, #5
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc52:	461a      	mov	r2, r3
 800bc54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bc58:	6013      	str	r3, [r2, #0]
 800bc5a:	e008      	b.n	800bc6e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	015a      	lsls	r2, r3, #5
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4413      	add	r3, r2
 800bc64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc68:	461a      	mov	r2, r3
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	015a      	lsls	r2, r3, #5
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	4413      	add	r3, r2
 800bc76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	015a      	lsls	r2, r3, #5
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	4413      	add	r3, r2
 800bc88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bc92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	3301      	adds	r3, #1
 800bc98:	613b      	str	r3, [r7, #16]
 800bc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9c:	693a      	ldr	r2, [r7, #16]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d3b7      	bcc.n	800bc12 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bca2:	2300      	movs	r3, #0
 800bca4:	613b      	str	r3, [r7, #16]
 800bca6:	e043      	b.n	800bd30 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	015a      	lsls	r2, r3, #5
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	4413      	add	r3, r2
 800bcb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcbe:	d118      	bne.n	800bcf2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d10a      	bne.n	800bcdc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	015a      	lsls	r2, r3, #5
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	4413      	add	r3, r2
 800bcce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bcd8:	6013      	str	r3, [r2, #0]
 800bcda:	e013      	b.n	800bd04 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	015a      	lsls	r2, r3, #5
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	4413      	add	r3, r2
 800bce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce8:	461a      	mov	r2, r3
 800bcea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bcee:	6013      	str	r3, [r2, #0]
 800bcf0:	e008      	b.n	800bd04 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	015a      	lsls	r2, r3, #5
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcfe:	461a      	mov	r2, r3
 800bd00:	2300      	movs	r3, #0
 800bd02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	015a      	lsls	r2, r3, #5
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd10:	461a      	mov	r2, r3
 800bd12:	2300      	movs	r3, #0
 800bd14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	015a      	lsls	r2, r3, #5
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd22:	461a      	mov	r2, r3
 800bd24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bd28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	613b      	str	r3, [r7, #16]
 800bd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd32:	693a      	ldr	r2, [r7, #16]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d3b7      	bcc.n	800bca8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd3e:	691b      	ldr	r3, [r3, #16]
 800bd40:	68fa      	ldr	r2, [r7, #12]
 800bd42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bd58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d105      	bne.n	800bd6c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	699b      	ldr	r3, [r3, #24]
 800bd64:	f043 0210 	orr.w	r2, r3, #16
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	699a      	ldr	r2, [r3, #24]
 800bd70:	4b0f      	ldr	r3, [pc, #60]	; (800bdb0 <USB_DevInit+0x2c4>)
 800bd72:	4313      	orrs	r3, r2
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d005      	beq.n	800bd8a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	699b      	ldr	r3, [r3, #24]
 800bd82:	f043 0208 	orr.w	r2, r3, #8
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bd8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d107      	bne.n	800bda0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	699b      	ldr	r3, [r3, #24]
 800bd94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd98:	f043 0304 	orr.w	r3, r3, #4
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bda0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3718      	adds	r7, #24
 800bda6:	46bd      	mov	sp, r7
 800bda8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bdac:	b004      	add	sp, #16
 800bdae:	4770      	bx	lr
 800bdb0:	803c3800 	.word	0x803c3800

0800bdb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	019b      	lsls	r3, r3, #6
 800bdc6:	f043 0220 	orr.w	r2, r3, #32
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	60fb      	str	r3, [r7, #12]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	4a08      	ldr	r2, [pc, #32]	; (800bdf8 <USB_FlushTxFifo+0x44>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d901      	bls.n	800bde0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bddc:	2303      	movs	r3, #3
 800bdde:	e006      	b.n	800bdee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	f003 0320 	and.w	r3, r3, #32
 800bde8:	2b20      	cmp	r3, #32
 800bdea:	d0f0      	beq.n	800bdce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3714      	adds	r7, #20
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bc80      	pop	{r7}
 800bdf6:	4770      	bx	lr
 800bdf8:	00030d40 	.word	0x00030d40

0800bdfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800be04:	2300      	movs	r3, #0
 800be06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2210      	movs	r2, #16
 800be0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	3301      	adds	r3, #1
 800be12:	60fb      	str	r3, [r7, #12]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	4a08      	ldr	r2, [pc, #32]	; (800be38 <USB_FlushRxFifo+0x3c>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d901      	bls.n	800be20 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800be1c:	2303      	movs	r3, #3
 800be1e:	e006      	b.n	800be2e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	f003 0310 	and.w	r3, r3, #16
 800be28:	2b10      	cmp	r3, #16
 800be2a:	d0f0      	beq.n	800be0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3714      	adds	r7, #20
 800be32:	46bd      	mov	sp, r7
 800be34:	bc80      	pop	{r7}
 800be36:	4770      	bx	lr
 800be38:	00030d40 	.word	0x00030d40

0800be3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	460b      	mov	r3, r1
 800be46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	78fb      	ldrb	r3, [r7, #3]
 800be56:	68f9      	ldr	r1, [r7, #12]
 800be58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be5c:	4313      	orrs	r3, r2
 800be5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800be60:	2300      	movs	r3, #0
}
 800be62:	4618      	mov	r0, r3
 800be64:	3714      	adds	r7, #20
 800be66:	46bd      	mov	sp, r7
 800be68:	bc80      	pop	{r7}
 800be6a:	4770      	bx	lr

0800be6c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b087      	sub	sp, #28
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	f003 0306 	and.w	r3, r3, #6
 800be84:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d102      	bne.n	800be92 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800be8c:	2300      	movs	r3, #0
 800be8e:	75fb      	strb	r3, [r7, #23]
 800be90:	e00a      	b.n	800bea8 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2b02      	cmp	r3, #2
 800be96:	d002      	beq.n	800be9e <USB_GetDevSpeed+0x32>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2b06      	cmp	r3, #6
 800be9c:	d102      	bne.n	800bea4 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800be9e:	2302      	movs	r3, #2
 800bea0:	75fb      	strb	r3, [r7, #23]
 800bea2:	e001      	b.n	800bea8 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bea4:	230f      	movs	r3, #15
 800bea6:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bea8:	7dfb      	ldrb	r3, [r7, #23]
}
 800beaa:	4618      	mov	r0, r3
 800beac:	371c      	adds	r7, #28
 800beae:	46bd      	mov	sp, r7
 800beb0:	bc80      	pop	{r7}
 800beb2:	4770      	bx	lr

0800beb4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b085      	sub	sp, #20
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	785b      	ldrb	r3, [r3, #1]
 800becc:	2b01      	cmp	r3, #1
 800bece:	d13a      	bne.n	800bf46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bed6:	69da      	ldr	r2, [r3, #28]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	f003 030f 	and.w	r3, r3, #15
 800bee0:	2101      	movs	r1, #1
 800bee2:	fa01 f303 	lsl.w	r3, r1, r3
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	68f9      	ldr	r1, [r7, #12]
 800beea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800beee:	4313      	orrs	r3, r2
 800bef0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	015a      	lsls	r2, r3, #5
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	4413      	add	r3, r2
 800befa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d155      	bne.n	800bfb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	015a      	lsls	r2, r3, #5
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	4413      	add	r3, r2
 800bf10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	78db      	ldrb	r3, [r3, #3]
 800bf22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	059b      	lsls	r3, r3, #22
 800bf2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	68ba      	ldr	r2, [r7, #8]
 800bf30:	0151      	lsls	r1, r2, #5
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	440a      	add	r2, r1
 800bf36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf42:	6013      	str	r3, [r2, #0]
 800bf44:	e036      	b.n	800bfb4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf4c:	69da      	ldr	r2, [r3, #28]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	f003 030f 	and.w	r3, r3, #15
 800bf56:	2101      	movs	r1, #1
 800bf58:	fa01 f303 	lsl.w	r3, r1, r3
 800bf5c:	041b      	lsls	r3, r3, #16
 800bf5e:	68f9      	ldr	r1, [r7, #12]
 800bf60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf64:	4313      	orrs	r3, r2
 800bf66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	015a      	lsls	r2, r3, #5
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	4413      	add	r3, r2
 800bf70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d11a      	bne.n	800bfb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	015a      	lsls	r2, r3, #5
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	4413      	add	r3, r2
 800bf86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	78db      	ldrb	r3, [r3, #3]
 800bf98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bf9a:	430b      	orrs	r3, r1
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	0151      	lsls	r1, r2, #5
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	440a      	add	r2, r1
 800bfa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfb2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3714      	adds	r7, #20
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bc80      	pop	{r7}
 800bfbe:	4770      	bx	lr

0800bfc0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	785b      	ldrb	r3, [r3, #1]
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d161      	bne.n	800c0a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	015a      	lsls	r2, r3, #5
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bff2:	d11f      	bne.n	800c034 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	015a      	lsls	r2, r3, #5
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	4413      	add	r3, r2
 800bffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	0151      	lsls	r1, r2, #5
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	440a      	add	r2, r1
 800c00a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c00e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c012:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	015a      	lsls	r2, r3, #5
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	4413      	add	r3, r2
 800c01c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	0151      	lsls	r1, r2, #5
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	440a      	add	r2, r1
 800c02a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c02e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c032:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c03a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	f003 030f 	and.w	r3, r3, #15
 800c044:	2101      	movs	r1, #1
 800c046:	fa01 f303 	lsl.w	r3, r1, r3
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	43db      	mvns	r3, r3
 800c04e:	68f9      	ldr	r1, [r7, #12]
 800c050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c054:	4013      	ands	r3, r2
 800c056:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c05e:	69da      	ldr	r2, [r3, #28]
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	f003 030f 	and.w	r3, r3, #15
 800c068:	2101      	movs	r1, #1
 800c06a:	fa01 f303 	lsl.w	r3, r1, r3
 800c06e:	b29b      	uxth	r3, r3
 800c070:	43db      	mvns	r3, r3
 800c072:	68f9      	ldr	r1, [r7, #12]
 800c074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c078:	4013      	ands	r3, r2
 800c07a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	015a      	lsls	r2, r3, #5
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	4413      	add	r3, r2
 800c084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	0159      	lsls	r1, r3, #5
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	440b      	add	r3, r1
 800c092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c096:	4619      	mov	r1, r3
 800c098:	4b35      	ldr	r3, [pc, #212]	; (800c170 <USB_DeactivateEndpoint+0x1b0>)
 800c09a:	4013      	ands	r3, r2
 800c09c:	600b      	str	r3, [r1, #0]
 800c09e:	e060      	b.n	800c162 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	015a      	lsls	r2, r3, #5
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0b6:	d11f      	bne.n	800c0f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	015a      	lsls	r2, r3, #5
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	4413      	add	r3, r2
 800c0c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	68ba      	ldr	r2, [r7, #8]
 800c0c8:	0151      	lsls	r1, r2, #5
 800c0ca:	68fa      	ldr	r2, [r7, #12]
 800c0cc:	440a      	add	r2, r1
 800c0ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c0d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	015a      	lsls	r2, r3, #5
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	4413      	add	r3, r2
 800c0e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	68ba      	ldr	r2, [r7, #8]
 800c0e8:	0151      	lsls	r1, r2, #5
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	440a      	add	r2, r1
 800c0ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	f003 030f 	and.w	r3, r3, #15
 800c108:	2101      	movs	r1, #1
 800c10a:	fa01 f303 	lsl.w	r3, r1, r3
 800c10e:	041b      	lsls	r3, r3, #16
 800c110:	43db      	mvns	r3, r3
 800c112:	68f9      	ldr	r1, [r7, #12]
 800c114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c118:	4013      	ands	r3, r2
 800c11a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c122:	69da      	ldr	r2, [r3, #28]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	f003 030f 	and.w	r3, r3, #15
 800c12c:	2101      	movs	r1, #1
 800c12e:	fa01 f303 	lsl.w	r3, r1, r3
 800c132:	041b      	lsls	r3, r3, #16
 800c134:	43db      	mvns	r3, r3
 800c136:	68f9      	ldr	r1, [r7, #12]
 800c138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c13c:	4013      	ands	r3, r2
 800c13e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	015a      	lsls	r2, r3, #5
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	4413      	add	r3, r2
 800c148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	0159      	lsls	r1, r3, #5
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	440b      	add	r3, r1
 800c156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c15a:	4619      	mov	r1, r3
 800c15c:	4b05      	ldr	r3, [pc, #20]	; (800c174 <USB_DeactivateEndpoint+0x1b4>)
 800c15e:	4013      	ands	r3, r2
 800c160:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	bc80      	pop	{r7}
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	ec337800 	.word	0xec337800
 800c174:	eff37800 	.word	0xeff37800

0800c178 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b08a      	sub	sp, #40	; 0x28
 800c17c:	af02      	add	r7, sp, #8
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	4613      	mov	r3, r2
 800c184:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	785b      	ldrb	r3, [r3, #1]
 800c194:	2b01      	cmp	r3, #1
 800c196:	f040 815c 	bne.w	800c452 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	695b      	ldr	r3, [r3, #20]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d132      	bne.n	800c208 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	015a      	lsls	r2, r3, #5
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ae:	691b      	ldr	r3, [r3, #16]
 800c1b0:	69ba      	ldr	r2, [r7, #24]
 800c1b2:	0151      	lsls	r1, r2, #5
 800c1b4:	69fa      	ldr	r2, [r7, #28]
 800c1b6:	440a      	add	r2, r1
 800c1b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c1c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c1c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	015a      	lsls	r2, r3, #5
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	69ba      	ldr	r2, [r7, #24]
 800c1d6:	0151      	lsls	r1, r2, #5
 800c1d8:	69fa      	ldr	r2, [r7, #28]
 800c1da:	440a      	add	r2, r1
 800c1dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	015a      	lsls	r2, r3, #5
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1f2:	691b      	ldr	r3, [r3, #16]
 800c1f4:	69ba      	ldr	r2, [r7, #24]
 800c1f6:	0151      	lsls	r1, r2, #5
 800c1f8:	69fa      	ldr	r2, [r7, #28]
 800c1fa:	440a      	add	r2, r1
 800c1fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c200:	0cdb      	lsrs	r3, r3, #19
 800c202:	04db      	lsls	r3, r3, #19
 800c204:	6113      	str	r3, [r2, #16]
 800c206:	e074      	b.n	800c2f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c208:	69bb      	ldr	r3, [r7, #24]
 800c20a:	015a      	lsls	r2, r3, #5
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	4413      	add	r3, r2
 800c210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	69ba      	ldr	r2, [r7, #24]
 800c218:	0151      	lsls	r1, r2, #5
 800c21a:	69fa      	ldr	r2, [r7, #28]
 800c21c:	440a      	add	r2, r1
 800c21e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c222:	0cdb      	lsrs	r3, r3, #19
 800c224:	04db      	lsls	r3, r3, #19
 800c226:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	015a      	lsls	r2, r3, #5
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	4413      	add	r3, r2
 800c230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	69ba      	ldr	r2, [r7, #24]
 800c238:	0151      	lsls	r1, r2, #5
 800c23a:	69fa      	ldr	r2, [r7, #28]
 800c23c:	440a      	add	r2, r1
 800c23e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c242:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c246:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c24a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	015a      	lsls	r2, r3, #5
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	4413      	add	r3, r2
 800c254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c258:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	6959      	ldr	r1, [r3, #20]
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	440b      	add	r3, r1
 800c264:	1e59      	subs	r1, r3, #1
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c26e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c270:	4b9d      	ldr	r3, [pc, #628]	; (800c4e8 <USB_EPStartXfer+0x370>)
 800c272:	400b      	ands	r3, r1
 800c274:	69b9      	ldr	r1, [r7, #24]
 800c276:	0148      	lsls	r0, r1, #5
 800c278:	69f9      	ldr	r1, [r7, #28]
 800c27a:	4401      	add	r1, r0
 800c27c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c280:	4313      	orrs	r3, r2
 800c282:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	015a      	lsls	r2, r3, #5
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	4413      	add	r3, r2
 800c28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c290:	691a      	ldr	r2, [r3, #16]
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	695b      	ldr	r3, [r3, #20]
 800c296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c29a:	69b9      	ldr	r1, [r7, #24]
 800c29c:	0148      	lsls	r0, r1, #5
 800c29e:	69f9      	ldr	r1, [r7, #28]
 800c2a0:	4401      	add	r1, r0
 800c2a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	78db      	ldrb	r3, [r3, #3]
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d11f      	bne.n	800c2f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	015a      	lsls	r2, r3, #5
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2be:	691b      	ldr	r3, [r3, #16]
 800c2c0:	69ba      	ldr	r2, [r7, #24]
 800c2c2:	0151      	lsls	r1, r2, #5
 800c2c4:	69fa      	ldr	r2, [r7, #28]
 800c2c6:	440a      	add	r2, r1
 800c2c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c2d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	015a      	lsls	r2, r3, #5
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	4413      	add	r3, r2
 800c2da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2de:	691b      	ldr	r3, [r3, #16]
 800c2e0:	69ba      	ldr	r2, [r7, #24]
 800c2e2:	0151      	lsls	r1, r2, #5
 800c2e4:	69fa      	ldr	r2, [r7, #28]
 800c2e6:	440a      	add	r2, r1
 800c2e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c2f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c2f2:	79fb      	ldrb	r3, [r7, #7]
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d14b      	bne.n	800c390 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	691b      	ldr	r3, [r3, #16]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d009      	beq.n	800c314 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	015a      	lsls	r2, r3, #5
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	4413      	add	r3, r2
 800c308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c30c:	461a      	mov	r2, r3
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	691b      	ldr	r3, [r3, #16]
 800c312:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	78db      	ldrb	r3, [r3, #3]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d128      	bne.n	800c36e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d110      	bne.n	800c34e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	015a      	lsls	r2, r3, #5
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	4413      	add	r3, r2
 800c334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	69ba      	ldr	r2, [r7, #24]
 800c33c:	0151      	lsls	r1, r2, #5
 800c33e:	69fa      	ldr	r2, [r7, #28]
 800c340:	440a      	add	r2, r1
 800c342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c346:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c34a:	6013      	str	r3, [r2, #0]
 800c34c:	e00f      	b.n	800c36e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	015a      	lsls	r2, r3, #5
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	4413      	add	r3, r2
 800c356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	69ba      	ldr	r2, [r7, #24]
 800c35e:	0151      	lsls	r1, r2, #5
 800c360:	69fa      	ldr	r2, [r7, #28]
 800c362:	440a      	add	r2, r1
 800c364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c36c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	015a      	lsls	r2, r3, #5
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	4413      	add	r3, r2
 800c376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	69ba      	ldr	r2, [r7, #24]
 800c37e:	0151      	lsls	r1, r2, #5
 800c380:	69fa      	ldr	r2, [r7, #28]
 800c382:	440a      	add	r2, r1
 800c384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c388:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c38c:	6013      	str	r3, [r2, #0]
 800c38e:	e12f      	b.n	800c5f0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	015a      	lsls	r2, r3, #5
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	4413      	add	r3, r2
 800c398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	69ba      	ldr	r2, [r7, #24]
 800c3a0:	0151      	lsls	r1, r2, #5
 800c3a2:	69fa      	ldr	r2, [r7, #28]
 800c3a4:	440a      	add	r2, r1
 800c3a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	78db      	ldrb	r3, [r3, #3]
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d015      	beq.n	800c3e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	695b      	ldr	r3, [r3, #20]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f000 8117 	beq.w	800c5f0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	f003 030f 	and.w	r3, r3, #15
 800c3d2:	2101      	movs	r1, #1
 800c3d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c3d8:	69f9      	ldr	r1, [r7, #28]
 800c3da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	634b      	str	r3, [r1, #52]	; 0x34
 800c3e2:	e105      	b.n	800c5f0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d110      	bne.n	800c416 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	015a      	lsls	r2, r3, #5
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	69ba      	ldr	r2, [r7, #24]
 800c404:	0151      	lsls	r1, r2, #5
 800c406:	69fa      	ldr	r2, [r7, #28]
 800c408:	440a      	add	r2, r1
 800c40a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c40e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c412:	6013      	str	r3, [r2, #0]
 800c414:	e00f      	b.n	800c436 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	015a      	lsls	r2, r3, #5
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	4413      	add	r3, r2
 800c41e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	69ba      	ldr	r2, [r7, #24]
 800c426:	0151      	lsls	r1, r2, #5
 800c428:	69fa      	ldr	r2, [r7, #28]
 800c42a:	440a      	add	r2, r1
 800c42c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c434:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	68d9      	ldr	r1, [r3, #12]
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	781a      	ldrb	r2, [r3, #0]
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	695b      	ldr	r3, [r3, #20]
 800c442:	b298      	uxth	r0, r3
 800c444:	79fb      	ldrb	r3, [r7, #7]
 800c446:	9300      	str	r3, [sp, #0]
 800c448:	4603      	mov	r3, r0
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	f000 fa2a 	bl	800c8a4 <USB_WritePacket>
 800c450:	e0ce      	b.n	800c5f0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	015a      	lsls	r2, r3, #5
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	4413      	add	r3, r2
 800c45a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	69ba      	ldr	r2, [r7, #24]
 800c462:	0151      	lsls	r1, r2, #5
 800c464:	69fa      	ldr	r2, [r7, #28]
 800c466:	440a      	add	r2, r1
 800c468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c46c:	0cdb      	lsrs	r3, r3, #19
 800c46e:	04db      	lsls	r3, r3, #19
 800c470:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	015a      	lsls	r2, r3, #5
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	4413      	add	r3, r2
 800c47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c47e:	691b      	ldr	r3, [r3, #16]
 800c480:	69ba      	ldr	r2, [r7, #24]
 800c482:	0151      	lsls	r1, r2, #5
 800c484:	69fa      	ldr	r2, [r7, #28]
 800c486:	440a      	add	r2, r1
 800c488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c48c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c490:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c494:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	695b      	ldr	r3, [r3, #20]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d126      	bne.n	800c4ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	015a      	lsls	r2, r3, #5
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	4413      	add	r3, r2
 800c4a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4aa:	691a      	ldr	r2, [r3, #16]
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4b4:	69b9      	ldr	r1, [r7, #24]
 800c4b6:	0148      	lsls	r0, r1, #5
 800c4b8:	69f9      	ldr	r1, [r7, #28]
 800c4ba:	4401      	add	r1, r0
 800c4bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c4c4:	69bb      	ldr	r3, [r7, #24]
 800c4c6:	015a      	lsls	r2, r3, #5
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	4413      	add	r3, r2
 800c4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4d0:	691b      	ldr	r3, [r3, #16]
 800c4d2:	69ba      	ldr	r2, [r7, #24]
 800c4d4:	0151      	lsls	r1, r2, #5
 800c4d6:	69fa      	ldr	r2, [r7, #28]
 800c4d8:	440a      	add	r2, r1
 800c4da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c4e2:	6113      	str	r3, [r2, #16]
 800c4e4:	e036      	b.n	800c554 <USB_EPStartXfer+0x3dc>
 800c4e6:	bf00      	nop
 800c4e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	695a      	ldr	r2, [r3, #20]
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	1e5a      	subs	r2, r3, #1
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c500:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c502:	69bb      	ldr	r3, [r7, #24]
 800c504:	015a      	lsls	r2, r3, #5
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	4413      	add	r3, r2
 800c50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c50e:	691a      	ldr	r2, [r3, #16]
 800c510:	8afb      	ldrh	r3, [r7, #22]
 800c512:	04d9      	lsls	r1, r3, #19
 800c514:	4b39      	ldr	r3, [pc, #228]	; (800c5fc <USB_EPStartXfer+0x484>)
 800c516:	400b      	ands	r3, r1
 800c518:	69b9      	ldr	r1, [r7, #24]
 800c51a:	0148      	lsls	r0, r1, #5
 800c51c:	69f9      	ldr	r1, [r7, #28]
 800c51e:	4401      	add	r1, r0
 800c520:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c524:	4313      	orrs	r3, r2
 800c526:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c528:	69bb      	ldr	r3, [r7, #24]
 800c52a:	015a      	lsls	r2, r3, #5
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	4413      	add	r3, r2
 800c530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c534:	691a      	ldr	r2, [r3, #16]
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	8af9      	ldrh	r1, [r7, #22]
 800c53c:	fb01 f303 	mul.w	r3, r1, r3
 800c540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c544:	69b9      	ldr	r1, [r7, #24]
 800c546:	0148      	lsls	r0, r1, #5
 800c548:	69f9      	ldr	r1, [r7, #28]
 800c54a:	4401      	add	r1, r0
 800c54c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c550:	4313      	orrs	r3, r2
 800c552:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c554:	79fb      	ldrb	r3, [r7, #7]
 800c556:	2b01      	cmp	r3, #1
 800c558:	d10d      	bne.n	800c576 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d009      	beq.n	800c576 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	68d9      	ldr	r1, [r3, #12]
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	015a      	lsls	r2, r3, #5
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	4413      	add	r3, r2
 800c56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c572:	460a      	mov	r2, r1
 800c574:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	78db      	ldrb	r3, [r3, #3]
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d128      	bne.n	800c5d0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d110      	bne.n	800c5b0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	015a      	lsls	r2, r3, #5
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	4413      	add	r3, r2
 800c596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	69ba      	ldr	r2, [r7, #24]
 800c59e:	0151      	lsls	r1, r2, #5
 800c5a0:	69fa      	ldr	r2, [r7, #28]
 800c5a2:	440a      	add	r2, r1
 800c5a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5ac:	6013      	str	r3, [r2, #0]
 800c5ae:	e00f      	b.n	800c5d0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	015a      	lsls	r2, r3, #5
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	69ba      	ldr	r2, [r7, #24]
 800c5c0:	0151      	lsls	r1, r2, #5
 800c5c2:	69fa      	ldr	r2, [r7, #28]
 800c5c4:	440a      	add	r2, r1
 800c5c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	015a      	lsls	r2, r3, #5
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	4413      	add	r3, r2
 800c5d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	69ba      	ldr	r2, [r7, #24]
 800c5e0:	0151      	lsls	r1, r2, #5
 800c5e2:	69fa      	ldr	r2, [r7, #28]
 800c5e4:	440a      	add	r2, r1
 800c5e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3720      	adds	r7, #32
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	1ff80000 	.word	0x1ff80000

0800c600 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c600:	b480      	push	{r7}
 800c602:	b087      	sub	sp, #28
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	4613      	mov	r3, r2
 800c60c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	785b      	ldrb	r3, [r3, #1]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	f040 80cd 	bne.w	800c7bc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	695b      	ldr	r3, [r3, #20]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d132      	bne.n	800c690 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	015a      	lsls	r2, r3, #5
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	4413      	add	r3, r2
 800c632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c636:	691b      	ldr	r3, [r3, #16]
 800c638:	693a      	ldr	r2, [r7, #16]
 800c63a:	0151      	lsls	r1, r2, #5
 800c63c:	697a      	ldr	r2, [r7, #20]
 800c63e:	440a      	add	r2, r1
 800c640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c644:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c648:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c64c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	015a      	lsls	r2, r3, #5
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	4413      	add	r3, r2
 800c656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c65a:	691b      	ldr	r3, [r3, #16]
 800c65c:	693a      	ldr	r2, [r7, #16]
 800c65e:	0151      	lsls	r1, r2, #5
 800c660:	697a      	ldr	r2, [r7, #20]
 800c662:	440a      	add	r2, r1
 800c664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c668:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c66c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	015a      	lsls	r2, r3, #5
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	4413      	add	r3, r2
 800c676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c67a:	691b      	ldr	r3, [r3, #16]
 800c67c:	693a      	ldr	r2, [r7, #16]
 800c67e:	0151      	lsls	r1, r2, #5
 800c680:	697a      	ldr	r2, [r7, #20]
 800c682:	440a      	add	r2, r1
 800c684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c688:	0cdb      	lsrs	r3, r3, #19
 800c68a:	04db      	lsls	r3, r3, #19
 800c68c:	6113      	str	r3, [r2, #16]
 800c68e:	e04e      	b.n	800c72e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	015a      	lsls	r2, r3, #5
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	4413      	add	r3, r2
 800c698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c69c:	691b      	ldr	r3, [r3, #16]
 800c69e:	693a      	ldr	r2, [r7, #16]
 800c6a0:	0151      	lsls	r1, r2, #5
 800c6a2:	697a      	ldr	r2, [r7, #20]
 800c6a4:	440a      	add	r2, r1
 800c6a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6aa:	0cdb      	lsrs	r3, r3, #19
 800c6ac:	04db      	lsls	r3, r3, #19
 800c6ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	015a      	lsls	r2, r3, #5
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6bc:	691b      	ldr	r3, [r3, #16]
 800c6be:	693a      	ldr	r2, [r7, #16]
 800c6c0:	0151      	lsls	r1, r2, #5
 800c6c2:	697a      	ldr	r2, [r7, #20]
 800c6c4:	440a      	add	r2, r1
 800c6c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c6ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c6d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	695a      	ldr	r2, [r3, #20]
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d903      	bls.n	800c6e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	689a      	ldr	r2, [r3, #8]
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	015a      	lsls	r2, r3, #5
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	693a      	ldr	r2, [r7, #16]
 800c6f8:	0151      	lsls	r1, r2, #5
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	440a      	add	r2, r1
 800c6fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c702:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c706:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	015a      	lsls	r2, r3, #5
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	4413      	add	r3, r2
 800c710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c714:	691a      	ldr	r2, [r3, #16]
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	695b      	ldr	r3, [r3, #20]
 800c71a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c71e:	6939      	ldr	r1, [r7, #16]
 800c720:	0148      	lsls	r0, r1, #5
 800c722:	6979      	ldr	r1, [r7, #20]
 800c724:	4401      	add	r1, r0
 800c726:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c72a:	4313      	orrs	r3, r2
 800c72c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c72e:	79fb      	ldrb	r3, [r7, #7]
 800c730:	2b01      	cmp	r3, #1
 800c732:	d11e      	bne.n	800c772 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	691b      	ldr	r3, [r3, #16]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d009      	beq.n	800c750 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	015a      	lsls	r2, r3, #5
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	4413      	add	r3, r2
 800c744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c748:	461a      	mov	r2, r3
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	691b      	ldr	r3, [r3, #16]
 800c74e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	015a      	lsls	r2, r3, #5
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	4413      	add	r3, r2
 800c758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	693a      	ldr	r2, [r7, #16]
 800c760:	0151      	lsls	r1, r2, #5
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	440a      	add	r2, r1
 800c766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c76a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c76e:	6013      	str	r3, [r2, #0]
 800c770:	e092      	b.n	800c898 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	015a      	lsls	r2, r3, #5
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	4413      	add	r3, r2
 800c77a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	693a      	ldr	r2, [r7, #16]
 800c782:	0151      	lsls	r1, r2, #5
 800c784:	697a      	ldr	r2, [r7, #20]
 800c786:	440a      	add	r2, r1
 800c788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c78c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c790:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	695b      	ldr	r3, [r3, #20]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d07e      	beq.n	800c898 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	f003 030f 	and.w	r3, r3, #15
 800c7aa:	2101      	movs	r1, #1
 800c7ac:	fa01 f303 	lsl.w	r3, r1, r3
 800c7b0:	6979      	ldr	r1, [r7, #20]
 800c7b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	634b      	str	r3, [r1, #52]	; 0x34
 800c7ba:	e06d      	b.n	800c898 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	015a      	lsls	r2, r3, #5
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7c8:	691b      	ldr	r3, [r3, #16]
 800c7ca:	693a      	ldr	r2, [r7, #16]
 800c7cc:	0151      	lsls	r1, r2, #5
 800c7ce:	697a      	ldr	r2, [r7, #20]
 800c7d0:	440a      	add	r2, r1
 800c7d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7d6:	0cdb      	lsrs	r3, r3, #19
 800c7d8:	04db      	lsls	r3, r3, #19
 800c7da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	015a      	lsls	r2, r3, #5
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7e8:	691b      	ldr	r3, [r3, #16]
 800c7ea:	693a      	ldr	r2, [r7, #16]
 800c7ec:	0151      	lsls	r1, r2, #5
 800c7ee:	697a      	ldr	r2, [r7, #20]
 800c7f0:	440a      	add	r2, r1
 800c7f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c7fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c7fe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	695b      	ldr	r3, [r3, #20]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d003      	beq.n	800c810 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	689a      	ldr	r2, [r3, #8]
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	015a      	lsls	r2, r3, #5
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	4413      	add	r3, r2
 800c818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c81c:	691b      	ldr	r3, [r3, #16]
 800c81e:	693a      	ldr	r2, [r7, #16]
 800c820:	0151      	lsls	r1, r2, #5
 800c822:	697a      	ldr	r2, [r7, #20]
 800c824:	440a      	add	r2, r1
 800c826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c82a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c82e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	015a      	lsls	r2, r3, #5
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	4413      	add	r3, r2
 800c838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c83c:	691a      	ldr	r2, [r3, #16]
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c846:	6939      	ldr	r1, [r7, #16]
 800c848:	0148      	lsls	r0, r1, #5
 800c84a:	6979      	ldr	r1, [r7, #20]
 800c84c:	4401      	add	r1, r0
 800c84e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c852:	4313      	orrs	r3, r2
 800c854:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c856:	79fb      	ldrb	r3, [r7, #7]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d10d      	bne.n	800c878 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d009      	beq.n	800c878 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	68d9      	ldr	r1, [r3, #12]
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	015a      	lsls	r2, r3, #5
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	4413      	add	r3, r2
 800c870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c874:	460a      	mov	r2, r1
 800c876:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	015a      	lsls	r2, r3, #5
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	4413      	add	r3, r2
 800c880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	0151      	lsls	r1, r2, #5
 800c88a:	697a      	ldr	r2, [r7, #20]
 800c88c:	440a      	add	r2, r1
 800c88e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c892:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c896:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	371c      	adds	r7, #28
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bc80      	pop	{r7}
 800c8a2:	4770      	bx	lr

0800c8a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b089      	sub	sp, #36	; 0x24
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	4611      	mov	r1, r2
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	71fb      	strb	r3, [r7, #7]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c8c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d123      	bne.n	800c912 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c8ca:	88bb      	ldrh	r3, [r7, #4]
 800c8cc:	3303      	adds	r3, #3
 800c8ce:	089b      	lsrs	r3, r3, #2
 800c8d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	61bb      	str	r3, [r7, #24]
 800c8d6:	e018      	b.n	800c90a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c8d8:	79fb      	ldrb	r3, [r7, #7]
 800c8da:	031a      	lsls	r2, r3, #12
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	4413      	add	r3, r2
 800c8e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	69fb      	ldr	r3, [r7, #28]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	3301      	adds	r3, #1
 800c902:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	3301      	adds	r3, #1
 800c908:	61bb      	str	r3, [r7, #24]
 800c90a:	69ba      	ldr	r2, [r7, #24]
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	429a      	cmp	r2, r3
 800c910:	d3e2      	bcc.n	800c8d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c912:	2300      	movs	r3, #0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3724      	adds	r7, #36	; 0x24
 800c918:	46bd      	mov	sp, r7
 800c91a:	bc80      	pop	{r7}
 800c91c:	4770      	bx	lr

0800c91e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c91e:	b480      	push	{r7}
 800c920:	b08b      	sub	sp, #44	; 0x2c
 800c922:	af00      	add	r7, sp, #0
 800c924:	60f8      	str	r0, [r7, #12]
 800c926:	60b9      	str	r1, [r7, #8]
 800c928:	4613      	mov	r3, r2
 800c92a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c934:	88fb      	ldrh	r3, [r7, #6]
 800c936:	089b      	lsrs	r3, r3, #2
 800c938:	b29b      	uxth	r3, r3
 800c93a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c93c:	88fb      	ldrh	r3, [r7, #6]
 800c93e:	f003 0303 	and.w	r3, r3, #3
 800c942:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c944:	2300      	movs	r3, #0
 800c946:	623b      	str	r3, [r7, #32]
 800c948:	e014      	b.n	800c974 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c954:	601a      	str	r2, [r3, #0]
    pDest++;
 800c956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c958:	3301      	adds	r3, #1
 800c95a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	3301      	adds	r3, #1
 800c960:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c964:	3301      	adds	r3, #1
 800c966:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96a:	3301      	adds	r3, #1
 800c96c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c96e:	6a3b      	ldr	r3, [r7, #32]
 800c970:	3301      	adds	r3, #1
 800c972:	623b      	str	r3, [r7, #32]
 800c974:	6a3a      	ldr	r2, [r7, #32]
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d3e6      	bcc.n	800c94a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c97c:	8bfb      	ldrh	r3, [r7, #30]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d01e      	beq.n	800c9c0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c982:	2300      	movs	r3, #0
 800c984:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c98c:	461a      	mov	r2, r3
 800c98e:	f107 0310 	add.w	r3, r7, #16
 800c992:	6812      	ldr	r2, [r2, #0]
 800c994:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c996:	693a      	ldr	r2, [r7, #16]
 800c998:	6a3b      	ldr	r3, [r7, #32]
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	00db      	lsls	r3, r3, #3
 800c99e:	fa22 f303 	lsr.w	r3, r2, r3
 800c9a2:	b2da      	uxtb	r2, r3
 800c9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a6:	701a      	strb	r2, [r3, #0]
      i++;
 800c9a8:	6a3b      	ldr	r3, [r7, #32]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	623b      	str	r3, [r7, #32]
      pDest++;
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c9b4:	8bfb      	ldrh	r3, [r7, #30]
 800c9b6:	3b01      	subs	r3, #1
 800c9b8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c9ba:	8bfb      	ldrh	r3, [r7, #30]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d1ea      	bne.n	800c996 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	372c      	adds	r7, #44	; 0x2c
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bc80      	pop	{r7}
 800c9ca:	4770      	bx	lr

0800c9cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	785b      	ldrb	r3, [r3, #1]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d12c      	bne.n	800ca42 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	015a      	lsls	r2, r3, #5
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	4413      	add	r3, r2
 800c9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	db12      	blt.n	800ca20 <USB_EPSetStall+0x54>
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00f      	beq.n	800ca20 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	015a      	lsls	r2, r3, #5
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	4413      	add	r3, r2
 800ca08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	0151      	lsls	r1, r2, #5
 800ca12:	68fa      	ldr	r2, [r7, #12]
 800ca14:	440a      	add	r2, r1
 800ca16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ca1e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	015a      	lsls	r2, r3, #5
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	4413      	add	r3, r2
 800ca28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	68ba      	ldr	r2, [r7, #8]
 800ca30:	0151      	lsls	r1, r2, #5
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	440a      	add	r2, r1
 800ca36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca3e:	6013      	str	r3, [r2, #0]
 800ca40:	e02b      	b.n	800ca9a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	015a      	lsls	r2, r3, #5
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	4413      	add	r3, r2
 800ca4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	db12      	blt.n	800ca7a <USB_EPSetStall+0xae>
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d00f      	beq.n	800ca7a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	015a      	lsls	r2, r3, #5
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	4413      	add	r3, r2
 800ca62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	0151      	lsls	r1, r2, #5
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	440a      	add	r2, r1
 800ca70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ca78:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	015a      	lsls	r2, r3, #5
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	4413      	add	r3, r2
 800ca82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	0151      	lsls	r1, r2, #5
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	440a      	add	r2, r1
 800ca90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca9a:	2300      	movs	r3, #0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3714      	adds	r7, #20
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bc80      	pop	{r7}
 800caa4:	4770      	bx	lr

0800caa6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800caa6:	b480      	push	{r7}
 800caa8:	b085      	sub	sp, #20
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
 800caae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	785b      	ldrb	r3, [r3, #1]
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	d128      	bne.n	800cb14 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	015a      	lsls	r2, r3, #5
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	4413      	add	r3, r2
 800caca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	0151      	lsls	r1, r2, #5
 800cad4:	68fa      	ldr	r2, [r7, #12]
 800cad6:	440a      	add	r2, r1
 800cad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cadc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cae0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	78db      	ldrb	r3, [r3, #3]
 800cae6:	2b03      	cmp	r3, #3
 800cae8:	d003      	beq.n	800caf2 <USB_EPClearStall+0x4c>
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	78db      	ldrb	r3, [r3, #3]
 800caee:	2b02      	cmp	r3, #2
 800caf0:	d138      	bne.n	800cb64 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	015a      	lsls	r2, r3, #5
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	4413      	add	r3, r2
 800cafa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	0151      	lsls	r1, r2, #5
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	440a      	add	r2, r1
 800cb08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb10:	6013      	str	r3, [r2, #0]
 800cb12:	e027      	b.n	800cb64 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	015a      	lsls	r2, r3, #5
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	0151      	lsls	r1, r2, #5
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	440a      	add	r2, r1
 800cb2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	78db      	ldrb	r3, [r3, #3]
 800cb38:	2b03      	cmp	r3, #3
 800cb3a:	d003      	beq.n	800cb44 <USB_EPClearStall+0x9e>
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	78db      	ldrb	r3, [r3, #3]
 800cb40:	2b02      	cmp	r3, #2
 800cb42:	d10f      	bne.n	800cb64 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	015a      	lsls	r2, r3, #5
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	4413      	add	r3, r2
 800cb4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	68ba      	ldr	r2, [r7, #8]
 800cb54:	0151      	lsls	r1, r2, #5
 800cb56:	68fa      	ldr	r2, [r7, #12]
 800cb58:	440a      	add	r2, r1
 800cb5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb62:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3714      	adds	r7, #20
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bc80      	pop	{r7}
 800cb6e:	4770      	bx	lr

0800cb70 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b085      	sub	sp, #20
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	460b      	mov	r3, r1
 800cb7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cb92:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	78fb      	ldrb	r3, [r7, #3]
 800cb9e:	011b      	lsls	r3, r3, #4
 800cba0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cba4:	68f9      	ldr	r1, [r7, #12]
 800cba6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3714      	adds	r7, #20
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bc80      	pop	{r7}
 800cbb8:	4770      	bx	lr

0800cbba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cbba:	b480      	push	{r7}
 800cbbc:	b085      	sub	sp, #20
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	68fa      	ldr	r2, [r7, #12]
 800cbd0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cbd4:	f023 0303 	bic.w	r3, r3, #3
 800cbd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbe8:	f023 0302 	bic.w	r3, r3, #2
 800cbec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cbee:	2300      	movs	r3, #0
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3714      	adds	r7, #20
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bc80      	pop	{r7}
 800cbf8:	4770      	bx	lr

0800cbfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cbfa:	b480      	push	{r7}
 800cbfc:	b085      	sub	sp, #20
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc14:	f023 0303 	bic.w	r3, r3, #3
 800cc18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc28:	f043 0302 	orr.w	r3, r3, #2
 800cc2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bc80      	pop	{r7}
 800cc38:	4770      	bx	lr

0800cc3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cc3a:	b480      	push	{r7}
 800cc3c:	b085      	sub	sp, #20
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	695b      	ldr	r3, [r3, #20]
 800cc46:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	699b      	ldr	r3, [r3, #24]
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	4013      	ands	r3, r2
 800cc50:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cc52:	68fb      	ldr	r3, [r7, #12]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3714      	adds	r7, #20
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bc80      	pop	{r7}
 800cc5c:	4770      	bx	lr

0800cc5e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc5e:	b480      	push	{r7}
 800cc60:	b085      	sub	sp, #20
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc70:	699b      	ldr	r3, [r3, #24]
 800cc72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc7a:	69db      	ldr	r3, [r3, #28]
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	4013      	ands	r3, r2
 800cc80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	0c1b      	lsrs	r3, r3, #16
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3714      	adds	r7, #20
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bc80      	pop	{r7}
 800cc8e:	4770      	bx	lr

0800cc90 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cca2:	699b      	ldr	r3, [r3, #24]
 800cca4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccac:	69db      	ldr	r3, [r3, #28]
 800ccae:	68ba      	ldr	r2, [r7, #8]
 800ccb0:	4013      	ands	r3, r2
 800ccb2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	b29b      	uxth	r3, r3
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3714      	adds	r7, #20
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bc80      	pop	{r7}
 800ccc0:	4770      	bx	lr

0800ccc2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ccc2:	b480      	push	{r7}
 800ccc4:	b085      	sub	sp, #20
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
 800ccca:	460b      	mov	r3, r1
 800cccc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ccd2:	78fb      	ldrb	r3, [r7, #3]
 800ccd4:	015a      	lsls	r2, r3, #5
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	4413      	add	r3, r2
 800ccda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cce8:	695b      	ldr	r3, [r3, #20]
 800ccea:	68ba      	ldr	r2, [r7, #8]
 800ccec:	4013      	ands	r3, r2
 800ccee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ccf0:	68bb      	ldr	r3, [r7, #8]
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3714      	adds	r7, #20
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bc80      	pop	{r7}
 800ccfa:	4770      	bx	lr

0800ccfc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b087      	sub	sp, #28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	460b      	mov	r3, r1
 800cd06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd12:	691b      	ldr	r3, [r3, #16]
 800cd14:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd1e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cd20:	78fb      	ldrb	r3, [r7, #3]
 800cd22:	f003 030f 	and.w	r3, r3, #15
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	fa22 f303 	lsr.w	r3, r2, r3
 800cd2c:	01db      	lsls	r3, r3, #7
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	693a      	ldr	r2, [r7, #16]
 800cd32:	4313      	orrs	r3, r2
 800cd34:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cd36:	78fb      	ldrb	r3, [r7, #3]
 800cd38:	015a      	lsls	r2, r3, #5
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd42:	689b      	ldr	r3, [r3, #8]
 800cd44:	693a      	ldr	r2, [r7, #16]
 800cd46:	4013      	ands	r3, r2
 800cd48:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cd4a:	68bb      	ldr	r3, [r7, #8]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	371c      	adds	r7, #28
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bc80      	pop	{r7}
 800cd54:	4770      	bx	lr

0800cd56 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cd56:	b480      	push	{r7}
 800cd58:	b083      	sub	sp, #12
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	695b      	ldr	r3, [r3, #20]
 800cd62:	f003 0301 	and.w	r3, r3, #1
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bc80      	pop	{r7}
 800cd6e:	4770      	bx	lr

0800cd70 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b085      	sub	sp, #20
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	68fa      	ldr	r2, [r7, #12]
 800cd86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd8a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cd8e:	f023 0307 	bic.w	r3, r3, #7
 800cd92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cda2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cda6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cda8:	2300      	movs	r3, #0
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3714      	adds	r7, #20
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bc80      	pop	{r7}
 800cdb2:	4770      	bx	lr

0800cdb4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b087      	sub	sp, #28
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	460b      	mov	r3, r1
 800cdbe:	607a      	str	r2, [r7, #4]
 800cdc0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	333c      	adds	r3, #60	; 0x3c
 800cdca:	3304      	adds	r3, #4
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	4a25      	ldr	r2, [pc, #148]	; (800ce68 <USB_EP0_OutStart+0xb4>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d90a      	bls.n	800cdee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cde4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cde8:	d101      	bne.n	800cdee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cdea:	2300      	movs	r3, #0
 800cdec:	e037      	b.n	800ce5e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce00:	691b      	ldr	r3, [r3, #16]
 800ce02:	697a      	ldr	r2, [r7, #20]
 800ce04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	697a      	ldr	r2, [r7, #20]
 800ce18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce1c:	f043 0318 	orr.w	r3, r3, #24
 800ce20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	697a      	ldr	r2, [r7, #20]
 800ce2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce30:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ce34:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ce36:	7afb      	ldrb	r3, [r7, #11]
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d10f      	bne.n	800ce5c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce42:	461a      	mov	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	697a      	ldr	r2, [r7, #20]
 800ce52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce56:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ce5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	371c      	adds	r7, #28
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bc80      	pop	{r7}
 800ce66:	4770      	bx	lr
 800ce68:	4f54300a 	.word	0x4f54300a

0800ce6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b085      	sub	sp, #20
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ce74:	2300      	movs	r3, #0
 800ce76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	60fb      	str	r3, [r7, #12]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	4a12      	ldr	r2, [pc, #72]	; (800cecc <USB_CoreReset+0x60>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d901      	bls.n	800ce8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ce86:	2303      	movs	r3, #3
 800ce88:	e01b      	b.n	800cec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	691b      	ldr	r3, [r3, #16]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	daf2      	bge.n	800ce78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ce92:	2300      	movs	r3, #0
 800ce94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	691b      	ldr	r3, [r3, #16]
 800ce9a:	f043 0201 	orr.w	r2, r3, #1
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	3301      	adds	r3, #1
 800cea6:	60fb      	str	r3, [r7, #12]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	4a08      	ldr	r2, [pc, #32]	; (800cecc <USB_CoreReset+0x60>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d901      	bls.n	800ceb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ceb0:	2303      	movs	r3, #3
 800ceb2:	e006      	b.n	800cec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	691b      	ldr	r3, [r3, #16]
 800ceb8:	f003 0301 	and.w	r3, r3, #1
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	d0f0      	beq.n	800cea2 <USB_CoreReset+0x36>

  return HAL_OK;
 800cec0:	2300      	movs	r3, #0
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3714      	adds	r7, #20
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bc80      	pop	{r7}
 800ceca:	4770      	bx	lr
 800cecc:	00030d40 	.word	0x00030d40

0800ced0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	460b      	mov	r3, r1
 800ceda:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800cedc:	2300      	movs	r3, #0
 800cede:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	7c1b      	ldrb	r3, [r3, #16]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d115      	bne.n	800cf14 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ceec:	2202      	movs	r2, #2
 800ceee:	2181      	movs	r1, #129	; 0x81
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f001 ff48 	bl	800ed86 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2201      	movs	r2, #1
 800cefa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cefc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf00:	2202      	movs	r2, #2
 800cf02:	2101      	movs	r1, #1
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f001 ff3e 	bl	800ed86 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800cf12:	e012      	b.n	800cf3a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cf14:	2340      	movs	r3, #64	; 0x40
 800cf16:	2202      	movs	r2, #2
 800cf18:	2181      	movs	r1, #129	; 0x81
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f001 ff33 	bl	800ed86 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cf26:	2340      	movs	r3, #64	; 0x40
 800cf28:	2202      	movs	r2, #2
 800cf2a:	2101      	movs	r1, #1
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f001 ff2a 	bl	800ed86 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2201      	movs	r2, #1
 800cf36:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cf3a:	2308      	movs	r3, #8
 800cf3c:	2203      	movs	r2, #3
 800cf3e:	2182      	movs	r1, #130	; 0x82
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f001 ff20 	bl	800ed86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2201      	movs	r2, #1
 800cf4a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cf4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cf50:	f004 f9cc 	bl	80112ec <malloc>
 800cf54:	4603      	mov	r3, r0
 800cf56:	461a      	mov	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d102      	bne.n	800cf6e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	73fb      	strb	r3, [r7, #15]
 800cf6c:	e026      	b.n	800cfbc <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf74:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	2200      	movs	r2, #0
 800cf84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	7c1b      	ldrb	r3, [r3, #16]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d109      	bne.n	800cfac <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cf9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfa2:	2101      	movs	r1, #1
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f001 ffde 	bl	800ef66 <USBD_LL_PrepareReceive>
 800cfaa:	e007      	b.n	800cfbc <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cfb2:	2340      	movs	r3, #64	; 0x40
 800cfb4:	2101      	movs	r1, #1
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f001 ffd5 	bl	800ef66 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800cfbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b084      	sub	sp, #16
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
 800cfce:	460b      	mov	r3, r1
 800cfd0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cfd6:	2181      	movs	r1, #129	; 0x81
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f001 fefa 	bl	800edd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cfe4:	2101      	movs	r1, #1
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f001 fef3 	bl	800edd2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cff4:	2182      	movs	r1, #130	; 0x82
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f001 feeb 	bl	800edd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2200      	movs	r2, #0
 800d000:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00e      	beq.n	800d02a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d01c:	4618      	mov	r0, r3
 800d01e:	f004 f96d 	bl	80112fc <free>
    pdev->pClassData = NULL;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800d02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3710      	adds	r7, #16
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b086      	sub	sp, #24
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d044:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d046:	2300      	movs	r3, #0
 800d048:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d04a:	2300      	movs	r3, #0
 800d04c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800d04e:	2300      	movs	r3, #0
 800d050:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d039      	beq.n	800d0d2 <USBD_CDC_Setup+0x9e>
 800d05e:	2b20      	cmp	r3, #32
 800d060:	d17f      	bne.n	800d162 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	88db      	ldrh	r3, [r3, #6]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d029      	beq.n	800d0be <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	b25b      	sxtb	r3, r3
 800d070:	2b00      	cmp	r3, #0
 800d072:	da11      	bge.n	800d098 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d07a:	689b      	ldr	r3, [r3, #8]
 800d07c:	683a      	ldr	r2, [r7, #0]
 800d07e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800d080:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d082:	683a      	ldr	r2, [r7, #0]
 800d084:	88d2      	ldrh	r2, [r2, #6]
 800d086:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d088:	6939      	ldr	r1, [r7, #16]
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	88db      	ldrh	r3, [r3, #6]
 800d08e:	461a      	mov	r2, r3
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f001 fa42 	bl	800e51a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800d096:	e06b      	b.n	800d170 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	785a      	ldrb	r2, [r3, #1]
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	88db      	ldrh	r3, [r3, #6]
 800d0a6:	b2da      	uxtb	r2, r3
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d0ae:	6939      	ldr	r1, [r7, #16]
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	88db      	ldrh	r3, [r3, #6]
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f001 fa5d 	bl	800e576 <USBD_CtlPrepareRx>
      break;
 800d0bc:	e058      	b.n	800d170 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0c4:	689b      	ldr	r3, [r3, #8]
 800d0c6:	683a      	ldr	r2, [r7, #0]
 800d0c8:	7850      	ldrb	r0, [r2, #1]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	4798      	blx	r3
      break;
 800d0d0:	e04e      	b.n	800d170 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	785b      	ldrb	r3, [r3, #1]
 800d0d6:	2b0b      	cmp	r3, #11
 800d0d8:	d02e      	beq.n	800d138 <USBD_CDC_Setup+0x104>
 800d0da:	2b0b      	cmp	r3, #11
 800d0dc:	dc38      	bgt.n	800d150 <USBD_CDC_Setup+0x11c>
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d002      	beq.n	800d0e8 <USBD_CDC_Setup+0xb4>
 800d0e2:	2b0a      	cmp	r3, #10
 800d0e4:	d014      	beq.n	800d110 <USBD_CDC_Setup+0xdc>
 800d0e6:	e033      	b.n	800d150 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0ee:	2b03      	cmp	r3, #3
 800d0f0:	d107      	bne.n	800d102 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800d0f2:	f107 030c 	add.w	r3, r7, #12
 800d0f6:	2202      	movs	r2, #2
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f001 fa0d 	bl	800e51a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d100:	e02e      	b.n	800d160 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800d102:	6839      	ldr	r1, [r7, #0]
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f001 f99e 	bl	800e446 <USBD_CtlError>
            ret = USBD_FAIL;
 800d10a:	2302      	movs	r3, #2
 800d10c:	75fb      	strb	r3, [r7, #23]
          break;
 800d10e:	e027      	b.n	800d160 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d116:	2b03      	cmp	r3, #3
 800d118:	d107      	bne.n	800d12a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800d11a:	f107 030f 	add.w	r3, r7, #15
 800d11e:	2201      	movs	r2, #1
 800d120:	4619      	mov	r1, r3
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f001 f9f9 	bl	800e51a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d128:	e01a      	b.n	800d160 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800d12a:	6839      	ldr	r1, [r7, #0]
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f001 f98a 	bl	800e446 <USBD_CtlError>
            ret = USBD_FAIL;
 800d132:	2302      	movs	r3, #2
 800d134:	75fb      	strb	r3, [r7, #23]
          break;
 800d136:	e013      	b.n	800d160 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d13e:	2b03      	cmp	r3, #3
 800d140:	d00d      	beq.n	800d15e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800d142:	6839      	ldr	r1, [r7, #0]
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f001 f97e 	bl	800e446 <USBD_CtlError>
            ret = USBD_FAIL;
 800d14a:	2302      	movs	r3, #2
 800d14c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d14e:	e006      	b.n	800d15e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800d150:	6839      	ldr	r1, [r7, #0]
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f001 f977 	bl	800e446 <USBD_CtlError>
          ret = USBD_FAIL;
 800d158:	2302      	movs	r3, #2
 800d15a:	75fb      	strb	r3, [r7, #23]
          break;
 800d15c:	e000      	b.n	800d160 <USBD_CDC_Setup+0x12c>
          break;
 800d15e:	bf00      	nop
      }
      break;
 800d160:	e006      	b.n	800d170 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d162:	6839      	ldr	r1, [r7, #0]
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f001 f96e 	bl	800e446 <USBD_CtlError>
      ret = USBD_FAIL;
 800d16a:	2302      	movs	r3, #2
 800d16c:	75fb      	strb	r3, [r7, #23]
      break;
 800d16e:	bf00      	nop
  }

  return ret;
 800d170:	7dfb      	ldrb	r3, [r7, #23]
}
 800d172:	4618      	mov	r0, r3
 800d174:	3718      	adds	r7, #24
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}

0800d17a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b084      	sub	sp, #16
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
 800d182:	460b      	mov	r3, r1
 800d184:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d18c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d194:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d03a      	beq.n	800d216 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d1a0:	78fa      	ldrb	r2, [r7, #3]
 800d1a2:	6879      	ldr	r1, [r7, #4]
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4413      	add	r3, r2
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	440b      	add	r3, r1
 800d1ae:	331c      	adds	r3, #28
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d029      	beq.n	800d20a <USBD_CDC_DataIn+0x90>
 800d1b6:	78fa      	ldrb	r2, [r7, #3]
 800d1b8:	6879      	ldr	r1, [r7, #4]
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	4413      	add	r3, r2
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	440b      	add	r3, r1
 800d1c4:	331c      	adds	r3, #28
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	78f9      	ldrb	r1, [r7, #3]
 800d1ca:	68b8      	ldr	r0, [r7, #8]
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	00db      	lsls	r3, r3, #3
 800d1d0:	1a5b      	subs	r3, r3, r1
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	4403      	add	r3, r0
 800d1d6:	3344      	adds	r3, #68	; 0x44
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	fbb2 f1f3 	udiv	r1, r2, r3
 800d1de:	fb03 f301 	mul.w	r3, r3, r1
 800d1e2:	1ad3      	subs	r3, r2, r3
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d110      	bne.n	800d20a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d1e8:	78fa      	ldrb	r2, [r7, #3]
 800d1ea:	6879      	ldr	r1, [r7, #4]
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	4413      	add	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	440b      	add	r3, r1
 800d1f6:	331c      	adds	r3, #28
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d1fc:	78f9      	ldrb	r1, [r7, #3]
 800d1fe:	2300      	movs	r3, #0
 800d200:	2200      	movs	r2, #0
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f001 fe8c 	bl	800ef20 <USBD_LL_Transmit>
 800d208:	e003      	b.n	800d212 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2200      	movs	r2, #0
 800d20e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800d212:	2300      	movs	r3, #0
 800d214:	e000      	b.n	800d218 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800d216:	2302      	movs	r3, #2
  }
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3710      	adds	r7, #16
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	460b      	mov	r3, r1
 800d22a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d232:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d234:	78fb      	ldrb	r3, [r7, #3]
 800d236:	4619      	mov	r1, r3
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f001 feb7 	bl	800efac <USBD_LL_GetRxDataSize>
 800d23e:	4602      	mov	r2, r0
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00d      	beq.n	800d26c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	68fa      	ldr	r2, [r7, #12]
 800d25a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d264:	4611      	mov	r1, r2
 800d266:	4798      	blx	r3

    return USBD_OK;
 800d268:	2300      	movs	r3, #0
 800d26a:	e000      	b.n	800d26e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800d26c:	2302      	movs	r3, #2
  }
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b084      	sub	sp, #16
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d284:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d015      	beq.n	800d2bc <USBD_CDC_EP0_RxReady+0x46>
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d296:	2bff      	cmp	r3, #255	; 0xff
 800d298:	d010      	beq.n	800d2bc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2a0:	689b      	ldr	r3, [r3, #8]
 800d2a2:	68fa      	ldr	r2, [r7, #12]
 800d2a4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800d2a8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d2aa:	68fa      	ldr	r2, [r7, #12]
 800d2ac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d2b0:	b292      	uxth	r2, r2
 800d2b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	22ff      	movs	r2, #255	; 0xff
 800d2b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800d2bc:	2300      	movs	r3, #0
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
	...

0800d2c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2243      	movs	r2, #67	; 0x43
 800d2d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d2d6:	4b03      	ldr	r3, [pc, #12]	; (800d2e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bc80      	pop	{r7}
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	200000f8 	.word	0x200000f8

0800d2e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b083      	sub	sp, #12
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2243      	movs	r2, #67	; 0x43
 800d2f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d2f6:	4b03      	ldr	r3, [pc, #12]	; (800d304 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bc80      	pop	{r7}
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	200000b4 	.word	0x200000b4

0800d308 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d308:	b480      	push	{r7}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2243      	movs	r2, #67	; 0x43
 800d314:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d316:	4b03      	ldr	r3, [pc, #12]	; (800d324 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d318:	4618      	mov	r0, r3
 800d31a:	370c      	adds	r7, #12
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bc80      	pop	{r7}
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop
 800d324:	2000013c 	.word	0x2000013c

0800d328 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	220a      	movs	r2, #10
 800d334:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d336:	4b03      	ldr	r3, [pc, #12]	; (800d344 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d338:	4618      	mov	r0, r3
 800d33a:	370c      	adds	r7, #12
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bc80      	pop	{r7}
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop
 800d344:	20000070 	.word	0x20000070

0800d348 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800d348:	b480      	push	{r7}
 800d34a:	b085      	sub	sp, #20
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d352:	2302      	movs	r3, #2
 800d354:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d005      	beq.n	800d368 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	683a      	ldr	r2, [r7, #0]
 800d360:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800d364:	2300      	movs	r3, #0
 800d366:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d368:	7bfb      	ldrb	r3, [r7, #15]
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3714      	adds	r7, #20
 800d36e:	46bd      	mov	sp, r7
 800d370:	bc80      	pop	{r7}
 800d372:	4770      	bx	lr

0800d374 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800d374:	b480      	push	{r7}
 800d376:	b087      	sub	sp, #28
 800d378:	af00      	add	r7, sp, #0
 800d37a:	60f8      	str	r0, [r7, #12]
 800d37c:	60b9      	str	r1, [r7, #8]
 800d37e:	4613      	mov	r3, r2
 800d380:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d388:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	68ba      	ldr	r2, [r7, #8]
 800d38e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d392:	88fa      	ldrh	r2, [r7, #6]
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800d39a:	2300      	movs	r3, #0
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	371c      	adds	r7, #28
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bc80      	pop	{r7}
 800d3a4:	4770      	bx	lr

0800d3a6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800d3a6:	b480      	push	{r7}
 800d3a8:	b085      	sub	sp, #20
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
 800d3ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3b6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	683a      	ldr	r2, [r7, #0]
 800d3bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800d3c0:	2300      	movs	r3, #0
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3714      	adds	r7, #20
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bc80      	pop	{r7}
 800d3ca:	4770      	bx	lr

0800d3cc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d01c      	beq.n	800d420 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d115      	bne.n	800d41c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d40e:	b29b      	uxth	r3, r3
 800d410:	2181      	movs	r1, #129	; 0x81
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f001 fd84 	bl	800ef20 <USBD_LL_Transmit>

      return USBD_OK;
 800d418:	2300      	movs	r3, #0
 800d41a:	e002      	b.n	800d422 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800d41c:	2301      	movs	r3, #1
 800d41e:	e000      	b.n	800d422 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800d420:	2302      	movs	r3, #2
  }
}
 800d422:	4618      	mov	r0, r3
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b084      	sub	sp, #16
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d438:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d440:	2b00      	cmp	r3, #0
 800d442:	d017      	beq.n	800d474 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	7c1b      	ldrb	r3, [r3, #16]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d109      	bne.n	800d460 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d452:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d456:	2101      	movs	r1, #1
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f001 fd84 	bl	800ef66 <USBD_LL_PrepareReceive>
 800d45e:	e007      	b.n	800d470 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d466:	2340      	movs	r3, #64	; 0x40
 800d468:	2101      	movs	r1, #1
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f001 fd7b 	bl	800ef66 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d470:	2300      	movs	r3, #0
 800d472:	e000      	b.n	800d476 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d474:	2302      	movs	r3, #2
  }
}
 800d476:	4618      	mov	r0, r3
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d47e:	b580      	push	{r7, lr}
 800d480:	b084      	sub	sp, #16
 800d482:	af00      	add	r7, sp, #0
 800d484:	60f8      	str	r0, [r7, #12]
 800d486:	60b9      	str	r1, [r7, #8]
 800d488:	4613      	mov	r3, r2
 800d48a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d101      	bne.n	800d496 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d492:	2302      	movs	r3, #2
 800d494:	e01a      	b.n	800d4cc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d003      	beq.n	800d4a8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d003      	beq.n	800d4b6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	68ba      	ldr	r2, [r7, #8]
 800d4b2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	79fa      	ldrb	r2, [r7, #7]
 800d4c2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f001 fbf9 	bl	800ecbc <USBD_LL_Init>

  return USBD_OK;
 800d4ca:	2300      	movs	r3, #0
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3710      	adds	r7, #16
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b085      	sub	sp, #20
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d006      	beq.n	800d4f6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	683a      	ldr	r2, [r7, #0]
 800d4ec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	73fb      	strb	r3, [r7, #15]
 800d4f4:	e001      	b.n	800d4fa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d4f6:	2302      	movs	r3, #2
 800d4f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3714      	adds	r7, #20
 800d500:	46bd      	mov	sp, r7
 800d502:	bc80      	pop	{r7}
 800d504:	4770      	bx	lr

0800d506 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d506:	b580      	push	{r7, lr}
 800d508:	b082      	sub	sp, #8
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f001 fc1e 	bl	800ed50 <USBD_LL_Start>

  return USBD_OK;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	3708      	adds	r7, #8
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d51e:	b480      	push	{r7}
 800d520:	b083      	sub	sp, #12
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d526:	2300      	movs	r3, #0
}
 800d528:	4618      	mov	r0, r3
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bc80      	pop	{r7}
 800d530:	4770      	bx	lr

0800d532 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d532:	b580      	push	{r7, lr}
 800d534:	b084      	sub	sp, #16
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
 800d53a:	460b      	mov	r3, r1
 800d53c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d53e:	2302      	movs	r3, #2
 800d540:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00c      	beq.n	800d566 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	78fa      	ldrb	r2, [r7, #3]
 800d556:	4611      	mov	r1, r2
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	4798      	blx	r3
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d101      	bne.n	800d566 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d562:	2300      	movs	r3, #0
 800d564:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d566:	7bfb      	ldrb	r3, [r7, #15]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3710      	adds	r7, #16
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	460b      	mov	r3, r1
 800d57a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	78fa      	ldrb	r2, [r7, #3]
 800d586:	4611      	mov	r1, r2
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	4798      	blx	r3

  return USBD_OK;
 800d58c:	2300      	movs	r3, #0
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3708      	adds	r7, #8
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b082      	sub	sp, #8
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d5a6:	6839      	ldr	r1, [r7, #0]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f000 ff10 	bl	800e3ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d5bc:	461a      	mov	r2, r3
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d5ca:	f003 031f 	and.w	r3, r3, #31
 800d5ce:	2b02      	cmp	r3, #2
 800d5d0:	d016      	beq.n	800d600 <USBD_LL_SetupStage+0x6a>
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	d81c      	bhi.n	800d610 <USBD_LL_SetupStage+0x7a>
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d002      	beq.n	800d5e0 <USBD_LL_SetupStage+0x4a>
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d008      	beq.n	800d5f0 <USBD_LL_SetupStage+0x5a>
 800d5de:	e017      	b.n	800d610 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 fa03 	bl	800d9f4 <USBD_StdDevReq>
      break;
 800d5ee:	e01a      	b.n	800d626 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f000 fa65 	bl	800dac8 <USBD_StdItfReq>
      break;
 800d5fe:	e012      	b.n	800d626 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d606:	4619      	mov	r1, r3
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 faa5 	bl	800db58 <USBD_StdEPReq>
      break;
 800d60e:	e00a      	b.n	800d626 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d616:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d61a:	b2db      	uxtb	r3, r3
 800d61c:	4619      	mov	r1, r3
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f001 fbf6 	bl	800ee10 <USBD_LL_StallEP>
      break;
 800d624:	bf00      	nop
  }

  return USBD_OK;
 800d626:	2300      	movs	r3, #0
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b086      	sub	sp, #24
 800d634:	af00      	add	r7, sp, #0
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	460b      	mov	r3, r1
 800d63a:	607a      	str	r2, [r7, #4]
 800d63c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d63e:	7afb      	ldrb	r3, [r7, #11]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d14b      	bne.n	800d6dc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d64a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d652:	2b03      	cmp	r3, #3
 800d654:	d134      	bne.n	800d6c0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	68da      	ldr	r2, [r3, #12]
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	691b      	ldr	r3, [r3, #16]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d919      	bls.n	800d696 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	68da      	ldr	r2, [r3, #12]
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	691b      	ldr	r3, [r3, #16]
 800d66a:	1ad2      	subs	r2, r2, r3
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	68da      	ldr	r2, [r3, #12]
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d678:	429a      	cmp	r2, r3
 800d67a:	d203      	bcs.n	800d684 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800d680:	b29b      	uxth	r3, r3
 800d682:	e002      	b.n	800d68a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d688:	b29b      	uxth	r3, r3
 800d68a:	461a      	mov	r2, r3
 800d68c:	6879      	ldr	r1, [r7, #4]
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	f000 ff8f 	bl	800e5b2 <USBD_CtlContinueRx>
 800d694:	e038      	b.n	800d708 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d69c:	691b      	ldr	r3, [r3, #16]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00a      	beq.n	800d6b8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d6a8:	2b03      	cmp	r3, #3
 800d6aa:	d105      	bne.n	800d6b8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	68f8      	ldr	r0, [r7, #12]
 800d6b6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d6b8:	68f8      	ldr	r0, [r7, #12]
 800d6ba:	f000 ff8c 	bl	800e5d6 <USBD_CtlSendStatus>
 800d6be:	e023      	b.n	800d708 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d6c6:	2b05      	cmp	r3, #5
 800d6c8:	d11e      	bne.n	800d708 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f001 fb9b 	bl	800ee10 <USBD_LL_StallEP>
 800d6da:	e015      	b.n	800d708 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6e2:	699b      	ldr	r3, [r3, #24]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00d      	beq.n	800d704 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d6ee:	2b03      	cmp	r3, #3
 800d6f0:	d108      	bne.n	800d704 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6f8:	699b      	ldr	r3, [r3, #24]
 800d6fa:	7afa      	ldrb	r2, [r7, #11]
 800d6fc:	4611      	mov	r1, r2
 800d6fe:	68f8      	ldr	r0, [r7, #12]
 800d700:	4798      	blx	r3
 800d702:	e001      	b.n	800d708 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d704:	2302      	movs	r3, #2
 800d706:	e000      	b.n	800d70a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d708:	2300      	movs	r3, #0
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3718      	adds	r7, #24
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}

0800d712 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d712:	b580      	push	{r7, lr}
 800d714:	b086      	sub	sp, #24
 800d716:	af00      	add	r7, sp, #0
 800d718:	60f8      	str	r0, [r7, #12]
 800d71a:	460b      	mov	r3, r1
 800d71c:	607a      	str	r2, [r7, #4]
 800d71e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d720:	7afb      	ldrb	r3, [r7, #11]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d17f      	bne.n	800d826 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	3314      	adds	r3, #20
 800d72a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d732:	2b02      	cmp	r3, #2
 800d734:	d15c      	bne.n	800d7f0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	68da      	ldr	r2, [r3, #12]
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	691b      	ldr	r3, [r3, #16]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d915      	bls.n	800d76e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	68da      	ldr	r2, [r3, #12]
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	691b      	ldr	r3, [r3, #16]
 800d74a:	1ad2      	subs	r2, r2, r3
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	68db      	ldr	r3, [r3, #12]
 800d754:	b29b      	uxth	r3, r3
 800d756:	461a      	mov	r2, r3
 800d758:	6879      	ldr	r1, [r7, #4]
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	f000 fef9 	bl	800e552 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d760:	2300      	movs	r3, #0
 800d762:	2200      	movs	r2, #0
 800d764:	2100      	movs	r1, #0
 800d766:	68f8      	ldr	r0, [r7, #12]
 800d768:	f001 fbfd 	bl	800ef66 <USBD_LL_PrepareReceive>
 800d76c:	e04e      	b.n	800d80c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	689b      	ldr	r3, [r3, #8]
 800d772:	697a      	ldr	r2, [r7, #20]
 800d774:	6912      	ldr	r2, [r2, #16]
 800d776:	fbb3 f1f2 	udiv	r1, r3, r2
 800d77a:	fb02 f201 	mul.w	r2, r2, r1
 800d77e:	1a9b      	subs	r3, r3, r2
 800d780:	2b00      	cmp	r3, #0
 800d782:	d11c      	bne.n	800d7be <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	689a      	ldr	r2, [r3, #8]
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d316      	bcc.n	800d7be <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	689a      	ldr	r2, [r3, #8]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d20f      	bcs.n	800d7be <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d79e:	2200      	movs	r2, #0
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	68f8      	ldr	r0, [r7, #12]
 800d7a4:	f000 fed5 	bl	800e552 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	2100      	movs	r1, #0
 800d7b6:	68f8      	ldr	r0, [r7, #12]
 800d7b8:	f001 fbd5 	bl	800ef66 <USBD_LL_PrepareReceive>
 800d7bc:	e026      	b.n	800d80c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7c4:	68db      	ldr	r3, [r3, #12]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00a      	beq.n	800d7e0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d7d0:	2b03      	cmp	r3, #3
 800d7d2:	d105      	bne.n	800d7e0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d7e0:	2180      	movs	r1, #128	; 0x80
 800d7e2:	68f8      	ldr	r0, [r7, #12]
 800d7e4:	f001 fb14 	bl	800ee10 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	f000 ff07 	bl	800e5fc <USBD_CtlReceiveStatus>
 800d7ee:	e00d      	b.n	800d80c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d7f6:	2b04      	cmp	r3, #4
 800d7f8:	d004      	beq.n	800d804 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d800:	2b00      	cmp	r3, #0
 800d802:	d103      	bne.n	800d80c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d804:	2180      	movs	r1, #128	; 0x80
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f001 fb02 	bl	800ee10 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d812:	2b01      	cmp	r3, #1
 800d814:	d11d      	bne.n	800d852 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f7ff fe81 	bl	800d51e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2200      	movs	r2, #0
 800d820:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d824:	e015      	b.n	800d852 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d82c:	695b      	ldr	r3, [r3, #20]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00d      	beq.n	800d84e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d838:	2b03      	cmp	r3, #3
 800d83a:	d108      	bne.n	800d84e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d842:	695b      	ldr	r3, [r3, #20]
 800d844:	7afa      	ldrb	r2, [r7, #11]
 800d846:	4611      	mov	r1, r2
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	4798      	blx	r3
 800d84c:	e001      	b.n	800d852 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d84e:	2302      	movs	r3, #2
 800d850:	e000      	b.n	800d854 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d852:	2300      	movs	r3, #0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3718      	adds	r7, #24
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d864:	2340      	movs	r3, #64	; 0x40
 800d866:	2200      	movs	r2, #0
 800d868:	2100      	movs	r1, #0
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f001 fa8b 	bl	800ed86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2201      	movs	r2, #1
 800d874:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2240      	movs	r2, #64	; 0x40
 800d87c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d880:	2340      	movs	r3, #64	; 0x40
 800d882:	2200      	movs	r2, #0
 800d884:	2180      	movs	r1, #128	; 0x80
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f001 fa7d 	bl	800ed86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2201      	movs	r2, #1
 800d890:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2240      	movs	r2, #64	; 0x40
 800d896:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d009      	beq.n	800d8d4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	6852      	ldr	r2, [r2, #4]
 800d8cc:	b2d2      	uxtb	r2, r2
 800d8ce:	4611      	mov	r1, r2
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	4798      	blx	r3
  }

  return USBD_OK;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3708      	adds	r7, #8
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d8de:	b480      	push	{r7}
 800d8e0:	b083      	sub	sp, #12
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	78fa      	ldrb	r2, [r7, #3]
 800d8ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	370c      	adds	r7, #12
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bc80      	pop	{r7}
 800d8fa:	4770      	bx	lr

0800d8fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2204      	movs	r2, #4
 800d914:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d918:	2300      	movs	r3, #0
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	370c      	adds	r7, #12
 800d91e:	46bd      	mov	sp, r7
 800d920:	bc80      	pop	{r7}
 800d922:	4770      	bx	lr

0800d924 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d932:	2b04      	cmp	r3, #4
 800d934:	d105      	bne.n	800d942 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d942:	2300      	movs	r3, #0
}
 800d944:	4618      	mov	r0, r3
 800d946:	370c      	adds	r7, #12
 800d948:	46bd      	mov	sp, r7
 800d94a:	bc80      	pop	{r7}
 800d94c:	4770      	bx	lr

0800d94e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b082      	sub	sp, #8
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d95c:	2b03      	cmp	r3, #3
 800d95e:	d10b      	bne.n	800d978 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d966:	69db      	ldr	r3, [r3, #28]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d005      	beq.n	800d978 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d972:	69db      	ldr	r3, [r3, #28]
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d978:	2300      	movs	r3, #0
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3708      	adds	r7, #8
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}

0800d982 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d982:	b480      	push	{r7}
 800d984:	b083      	sub	sp, #12
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
 800d98a:	460b      	mov	r3, r1
 800d98c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800d98e:	2300      	movs	r3, #0
}
 800d990:	4618      	mov	r0, r3
 800d992:	370c      	adds	r7, #12
 800d994:	46bd      	mov	sp, r7
 800d996:	bc80      	pop	{r7}
 800d998:	4770      	bx	lr

0800d99a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d99a:	b480      	push	{r7}
 800d99c:	b083      	sub	sp, #12
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	370c      	adds	r7, #12
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bc80      	pop	{r7}
 800d9b0:	4770      	bx	lr

0800d9b2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d9b2:	b480      	push	{r7}
 800d9b4:	b083      	sub	sp, #12
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d9ba:	2300      	movs	r3, #0
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	370c      	adds	r7, #12
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bc80      	pop	{r7}
 800d9c4:	4770      	bx	lr

0800d9c6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b082      	sub	sp, #8
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	6852      	ldr	r2, [r2, #4]
 800d9e2:	b2d2      	uxtb	r2, r2
 800d9e4:	4611      	mov	r1, r2
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	4798      	blx	r3

  return USBD_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9fe:	2300      	movs	r3, #0
 800da00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da0a:	2b40      	cmp	r3, #64	; 0x40
 800da0c:	d005      	beq.n	800da1a <USBD_StdDevReq+0x26>
 800da0e:	2b40      	cmp	r3, #64	; 0x40
 800da10:	d84f      	bhi.n	800dab2 <USBD_StdDevReq+0xbe>
 800da12:	2b00      	cmp	r3, #0
 800da14:	d009      	beq.n	800da2a <USBD_StdDevReq+0x36>
 800da16:	2b20      	cmp	r3, #32
 800da18:	d14b      	bne.n	800dab2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da20:	689b      	ldr	r3, [r3, #8]
 800da22:	6839      	ldr	r1, [r7, #0]
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	4798      	blx	r3
      break;
 800da28:	e048      	b.n	800dabc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	785b      	ldrb	r3, [r3, #1]
 800da2e:	2b09      	cmp	r3, #9
 800da30:	d839      	bhi.n	800daa6 <USBD_StdDevReq+0xb2>
 800da32:	a201      	add	r2, pc, #4	; (adr r2, 800da38 <USBD_StdDevReq+0x44>)
 800da34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da38:	0800da89 	.word	0x0800da89
 800da3c:	0800da9d 	.word	0x0800da9d
 800da40:	0800daa7 	.word	0x0800daa7
 800da44:	0800da93 	.word	0x0800da93
 800da48:	0800daa7 	.word	0x0800daa7
 800da4c:	0800da6b 	.word	0x0800da6b
 800da50:	0800da61 	.word	0x0800da61
 800da54:	0800daa7 	.word	0x0800daa7
 800da58:	0800da7f 	.word	0x0800da7f
 800da5c:	0800da75 	.word	0x0800da75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800da60:	6839      	ldr	r1, [r7, #0]
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 f9dc 	bl	800de20 <USBD_GetDescriptor>
          break;
 800da68:	e022      	b.n	800dab0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800da6a:	6839      	ldr	r1, [r7, #0]
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 fb3f 	bl	800e0f0 <USBD_SetAddress>
          break;
 800da72:	e01d      	b.n	800dab0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800da74:	6839      	ldr	r1, [r7, #0]
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 fb7e 	bl	800e178 <USBD_SetConfig>
          break;
 800da7c:	e018      	b.n	800dab0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800da7e:	6839      	ldr	r1, [r7, #0]
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 fc07 	bl	800e294 <USBD_GetConfig>
          break;
 800da86:	e013      	b.n	800dab0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800da88:	6839      	ldr	r1, [r7, #0]
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 fc37 	bl	800e2fe <USBD_GetStatus>
          break;
 800da90:	e00e      	b.n	800dab0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800da92:	6839      	ldr	r1, [r7, #0]
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f000 fc65 	bl	800e364 <USBD_SetFeature>
          break;
 800da9a:	e009      	b.n	800dab0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800da9c:	6839      	ldr	r1, [r7, #0]
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 fc74 	bl	800e38c <USBD_ClrFeature>
          break;
 800daa4:	e004      	b.n	800dab0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800daa6:	6839      	ldr	r1, [r7, #0]
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f000 fccc 	bl	800e446 <USBD_CtlError>
          break;
 800daae:	bf00      	nop
      }
      break;
 800dab0:	e004      	b.n	800dabc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800dab2:	6839      	ldr	r1, [r7, #0]
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 fcc6 	bl	800e446 <USBD_CtlError>
      break;
 800daba:	bf00      	nop
  }

  return ret;
 800dabc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop

0800dac8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dad2:	2300      	movs	r3, #0
 800dad4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dade:	2b40      	cmp	r3, #64	; 0x40
 800dae0:	d005      	beq.n	800daee <USBD_StdItfReq+0x26>
 800dae2:	2b40      	cmp	r3, #64	; 0x40
 800dae4:	d82e      	bhi.n	800db44 <USBD_StdItfReq+0x7c>
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d001      	beq.n	800daee <USBD_StdItfReq+0x26>
 800daea:	2b20      	cmp	r3, #32
 800daec:	d12a      	bne.n	800db44 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daf4:	3b01      	subs	r3, #1
 800daf6:	2b02      	cmp	r3, #2
 800daf8:	d81d      	bhi.n	800db36 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	889b      	ldrh	r3, [r3, #4]
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	2b01      	cmp	r3, #1
 800db02:	d813      	bhi.n	800db2c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db0a:	689b      	ldr	r3, [r3, #8]
 800db0c:	6839      	ldr	r1, [r7, #0]
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	4798      	blx	r3
 800db12:	4603      	mov	r3, r0
 800db14:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	88db      	ldrh	r3, [r3, #6]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d110      	bne.n	800db40 <USBD_StdItfReq+0x78>
 800db1e:	7bfb      	ldrb	r3, [r7, #15]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d10d      	bne.n	800db40 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f000 fd56 	bl	800e5d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800db2a:	e009      	b.n	800db40 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800db2c:	6839      	ldr	r1, [r7, #0]
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 fc89 	bl	800e446 <USBD_CtlError>
          break;
 800db34:	e004      	b.n	800db40 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800db36:	6839      	ldr	r1, [r7, #0]
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 fc84 	bl	800e446 <USBD_CtlError>
          break;
 800db3e:	e000      	b.n	800db42 <USBD_StdItfReq+0x7a>
          break;
 800db40:	bf00      	nop
      }
      break;
 800db42:	e004      	b.n	800db4e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800db44:	6839      	ldr	r1, [r7, #0]
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 fc7d 	bl	800e446 <USBD_CtlError>
      break;
 800db4c:	bf00      	nop
  }

  return USBD_OK;
 800db4e:	2300      	movs	r3, #0
}
 800db50:	4618      	mov	r0, r3
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800db62:	2300      	movs	r3, #0
 800db64:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	889b      	ldrh	r3, [r3, #4]
 800db6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db74:	2b40      	cmp	r3, #64	; 0x40
 800db76:	d007      	beq.n	800db88 <USBD_StdEPReq+0x30>
 800db78:	2b40      	cmp	r3, #64	; 0x40
 800db7a:	f200 8146 	bhi.w	800de0a <USBD_StdEPReq+0x2b2>
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00a      	beq.n	800db98 <USBD_StdEPReq+0x40>
 800db82:	2b20      	cmp	r3, #32
 800db84:	f040 8141 	bne.w	800de0a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db8e:	689b      	ldr	r3, [r3, #8]
 800db90:	6839      	ldr	r1, [r7, #0]
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	4798      	blx	r3
      break;
 800db96:	e13d      	b.n	800de14 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dba0:	2b20      	cmp	r3, #32
 800dba2:	d10a      	bne.n	800dbba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbaa:	689b      	ldr	r3, [r3, #8]
 800dbac:	6839      	ldr	r1, [r7, #0]
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	4798      	blx	r3
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800dbb6:	7bfb      	ldrb	r3, [r7, #15]
 800dbb8:	e12d      	b.n	800de16 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	785b      	ldrb	r3, [r3, #1]
 800dbbe:	2b03      	cmp	r3, #3
 800dbc0:	d007      	beq.n	800dbd2 <USBD_StdEPReq+0x7a>
 800dbc2:	2b03      	cmp	r3, #3
 800dbc4:	f300 811b 	bgt.w	800ddfe <USBD_StdEPReq+0x2a6>
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d072      	beq.n	800dcb2 <USBD_StdEPReq+0x15a>
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d03a      	beq.n	800dc46 <USBD_StdEPReq+0xee>
 800dbd0:	e115      	b.n	800ddfe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d002      	beq.n	800dbe2 <USBD_StdEPReq+0x8a>
 800dbdc:	2b03      	cmp	r3, #3
 800dbde:	d015      	beq.n	800dc0c <USBD_StdEPReq+0xb4>
 800dbe0:	e02b      	b.n	800dc3a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dbe2:	7bbb      	ldrb	r3, [r7, #14]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d00c      	beq.n	800dc02 <USBD_StdEPReq+0xaa>
 800dbe8:	7bbb      	ldrb	r3, [r7, #14]
 800dbea:	2b80      	cmp	r3, #128	; 0x80
 800dbec:	d009      	beq.n	800dc02 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800dbee:	7bbb      	ldrb	r3, [r7, #14]
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f001 f90c 	bl	800ee10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800dbf8:	2180      	movs	r1, #128	; 0x80
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f001 f908 	bl	800ee10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc00:	e020      	b.n	800dc44 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800dc02:	6839      	ldr	r1, [r7, #0]
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f000 fc1e 	bl	800e446 <USBD_CtlError>
              break;
 800dc0a:	e01b      	b.n	800dc44 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	885b      	ldrh	r3, [r3, #2]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d10e      	bne.n	800dc32 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800dc14:	7bbb      	ldrb	r3, [r7, #14]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00b      	beq.n	800dc32 <USBD_StdEPReq+0xda>
 800dc1a:	7bbb      	ldrb	r3, [r7, #14]
 800dc1c:	2b80      	cmp	r3, #128	; 0x80
 800dc1e:	d008      	beq.n	800dc32 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	88db      	ldrh	r3, [r3, #6]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d104      	bne.n	800dc32 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800dc28:	7bbb      	ldrb	r3, [r7, #14]
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f001 f8ef 	bl	800ee10 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f000 fccf 	bl	800e5d6 <USBD_CtlSendStatus>

              break;
 800dc38:	e004      	b.n	800dc44 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800dc3a:	6839      	ldr	r1, [r7, #0]
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 fc02 	bl	800e446 <USBD_CtlError>
              break;
 800dc42:	bf00      	nop
          }
          break;
 800dc44:	e0e0      	b.n	800de08 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc4c:	2b02      	cmp	r3, #2
 800dc4e:	d002      	beq.n	800dc56 <USBD_StdEPReq+0xfe>
 800dc50:	2b03      	cmp	r3, #3
 800dc52:	d015      	beq.n	800dc80 <USBD_StdEPReq+0x128>
 800dc54:	e026      	b.n	800dca4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc56:	7bbb      	ldrb	r3, [r7, #14]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d00c      	beq.n	800dc76 <USBD_StdEPReq+0x11e>
 800dc5c:	7bbb      	ldrb	r3, [r7, #14]
 800dc5e:	2b80      	cmp	r3, #128	; 0x80
 800dc60:	d009      	beq.n	800dc76 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800dc62:	7bbb      	ldrb	r3, [r7, #14]
 800dc64:	4619      	mov	r1, r3
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f001 f8d2 	bl	800ee10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800dc6c:	2180      	movs	r1, #128	; 0x80
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f001 f8ce 	bl	800ee10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc74:	e01c      	b.n	800dcb0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800dc76:	6839      	ldr	r1, [r7, #0]
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 fbe4 	bl	800e446 <USBD_CtlError>
              break;
 800dc7e:	e017      	b.n	800dcb0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	885b      	ldrh	r3, [r3, #2]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d112      	bne.n	800dcae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dc88:	7bbb      	ldrb	r3, [r7, #14]
 800dc8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d004      	beq.n	800dc9c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800dc92:	7bbb      	ldrb	r3, [r7, #14]
 800dc94:	4619      	mov	r1, r3
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f001 f8d9 	bl	800ee4e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 fc9a 	bl	800e5d6 <USBD_CtlSendStatus>
              }
              break;
 800dca2:	e004      	b.n	800dcae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800dca4:	6839      	ldr	r1, [r7, #0]
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 fbcd 	bl	800e446 <USBD_CtlError>
              break;
 800dcac:	e000      	b.n	800dcb0 <USBD_StdEPReq+0x158>
              break;
 800dcae:	bf00      	nop
          }
          break;
 800dcb0:	e0aa      	b.n	800de08 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcb8:	2b02      	cmp	r3, #2
 800dcba:	d002      	beq.n	800dcc2 <USBD_StdEPReq+0x16a>
 800dcbc:	2b03      	cmp	r3, #3
 800dcbe:	d032      	beq.n	800dd26 <USBD_StdEPReq+0x1ce>
 800dcc0:	e097      	b.n	800ddf2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dcc2:	7bbb      	ldrb	r3, [r7, #14]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d007      	beq.n	800dcd8 <USBD_StdEPReq+0x180>
 800dcc8:	7bbb      	ldrb	r3, [r7, #14]
 800dcca:	2b80      	cmp	r3, #128	; 0x80
 800dccc:	d004      	beq.n	800dcd8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800dcce:	6839      	ldr	r1, [r7, #0]
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 fbb8 	bl	800e446 <USBD_CtlError>
                break;
 800dcd6:	e091      	b.n	800ddfc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dcd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	da0b      	bge.n	800dcf8 <USBD_StdEPReq+0x1a0>
 800dce0:	7bbb      	ldrb	r3, [r7, #14]
 800dce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dce6:	4613      	mov	r3, r2
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	4413      	add	r3, r2
 800dcec:	009b      	lsls	r3, r3, #2
 800dcee:	3310      	adds	r3, #16
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	3304      	adds	r3, #4
 800dcf6:	e00b      	b.n	800dd10 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dcf8:	7bbb      	ldrb	r3, [r7, #14]
 800dcfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dcfe:	4613      	mov	r3, r2
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	4413      	add	r3, r2
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	3304      	adds	r3, #4
 800dd10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	2200      	movs	r2, #0
 800dd16:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	2202      	movs	r2, #2
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 fbfb 	bl	800e51a <USBD_CtlSendData>
              break;
 800dd24:	e06a      	b.n	800ddfc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dd26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	da11      	bge.n	800dd52 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dd2e:	7bbb      	ldrb	r3, [r7, #14]
 800dd30:	f003 020f 	and.w	r2, r3, #15
 800dd34:	6879      	ldr	r1, [r7, #4]
 800dd36:	4613      	mov	r3, r2
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	4413      	add	r3, r2
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	440b      	add	r3, r1
 800dd40:	3318      	adds	r3, #24
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d117      	bne.n	800dd78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800dd48:	6839      	ldr	r1, [r7, #0]
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f000 fb7b 	bl	800e446 <USBD_CtlError>
                  break;
 800dd50:	e054      	b.n	800ddfc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dd52:	7bbb      	ldrb	r3, [r7, #14]
 800dd54:	f003 020f 	and.w	r2, r3, #15
 800dd58:	6879      	ldr	r1, [r7, #4]
 800dd5a:	4613      	mov	r3, r2
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	4413      	add	r3, r2
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	440b      	add	r3, r1
 800dd64:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d104      	bne.n	800dd78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800dd6e:	6839      	ldr	r1, [r7, #0]
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f000 fb68 	bl	800e446 <USBD_CtlError>
                  break;
 800dd76:	e041      	b.n	800ddfc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	da0b      	bge.n	800dd98 <USBD_StdEPReq+0x240>
 800dd80:	7bbb      	ldrb	r3, [r7, #14]
 800dd82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd86:	4613      	mov	r3, r2
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	4413      	add	r3, r2
 800dd8c:	009b      	lsls	r3, r3, #2
 800dd8e:	3310      	adds	r3, #16
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	4413      	add	r3, r2
 800dd94:	3304      	adds	r3, #4
 800dd96:	e00b      	b.n	800ddb0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dd98:	7bbb      	ldrb	r3, [r7, #14]
 800dd9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd9e:	4613      	mov	r3, r2
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	4413      	add	r3, r2
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	4413      	add	r3, r2
 800ddae:	3304      	adds	r3, #4
 800ddb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ddb2:	7bbb      	ldrb	r3, [r7, #14]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d002      	beq.n	800ddbe <USBD_StdEPReq+0x266>
 800ddb8:	7bbb      	ldrb	r3, [r7, #14]
 800ddba:	2b80      	cmp	r3, #128	; 0x80
 800ddbc:	d103      	bne.n	800ddc6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	601a      	str	r2, [r3, #0]
 800ddc4:	e00e      	b.n	800dde4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ddc6:	7bbb      	ldrb	r3, [r7, #14]
 800ddc8:	4619      	mov	r1, r3
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f001 f85e 	bl	800ee8c <USBD_LL_IsStallEP>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d003      	beq.n	800ddde <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	2201      	movs	r2, #1
 800ddda:	601a      	str	r2, [r3, #0]
 800dddc:	e002      	b.n	800dde4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	2200      	movs	r2, #0
 800dde2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	2202      	movs	r2, #2
 800dde8:	4619      	mov	r1, r3
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 fb95 	bl	800e51a <USBD_CtlSendData>
              break;
 800ddf0:	e004      	b.n	800ddfc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ddf2:	6839      	ldr	r1, [r7, #0]
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f000 fb26 	bl	800e446 <USBD_CtlError>
              break;
 800ddfa:	bf00      	nop
          }
          break;
 800ddfc:	e004      	b.n	800de08 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ddfe:	6839      	ldr	r1, [r7, #0]
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 fb20 	bl	800e446 <USBD_CtlError>
          break;
 800de06:	bf00      	nop
      }
      break;
 800de08:	e004      	b.n	800de14 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800de0a:	6839      	ldr	r1, [r7, #0]
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 fb1a 	bl	800e446 <USBD_CtlError>
      break;
 800de12:	bf00      	nop
  }

  return ret;
 800de14:	7bfb      	ldrb	r3, [r7, #15]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
	...

0800de20 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800de2a:	2300      	movs	r3, #0
 800de2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800de2e:	2300      	movs	r3, #0
 800de30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800de32:	2300      	movs	r3, #0
 800de34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	885b      	ldrh	r3, [r3, #2]
 800de3a:	0a1b      	lsrs	r3, r3, #8
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	3b01      	subs	r3, #1
 800de40:	2b06      	cmp	r3, #6
 800de42:	f200 8128 	bhi.w	800e096 <USBD_GetDescriptor+0x276>
 800de46:	a201      	add	r2, pc, #4	; (adr r2, 800de4c <USBD_GetDescriptor+0x2c>)
 800de48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de4c:	0800de69 	.word	0x0800de69
 800de50:	0800de81 	.word	0x0800de81
 800de54:	0800dec1 	.word	0x0800dec1
 800de58:	0800e097 	.word	0x0800e097
 800de5c:	0800e097 	.word	0x0800e097
 800de60:	0800e037 	.word	0x0800e037
 800de64:	0800e063 	.word	0x0800e063
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	687a      	ldr	r2, [r7, #4]
 800de72:	7c12      	ldrb	r2, [r2, #16]
 800de74:	f107 0108 	add.w	r1, r7, #8
 800de78:	4610      	mov	r0, r2
 800de7a:	4798      	blx	r3
 800de7c:	60f8      	str	r0, [r7, #12]
      break;
 800de7e:	e112      	b.n	800e0a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	7c1b      	ldrb	r3, [r3, #16]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d10d      	bne.n	800dea4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de90:	f107 0208 	add.w	r2, r7, #8
 800de94:	4610      	mov	r0, r2
 800de96:	4798      	blx	r3
 800de98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	3301      	adds	r3, #1
 800de9e:	2202      	movs	r2, #2
 800dea0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dea2:	e100      	b.n	800e0a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800deaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deac:	f107 0208 	add.w	r2, r7, #8
 800deb0:	4610      	mov	r0, r2
 800deb2:	4798      	blx	r3
 800deb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	3301      	adds	r3, #1
 800deba:	2202      	movs	r2, #2
 800debc:	701a      	strb	r2, [r3, #0]
      break;
 800debe:	e0f2      	b.n	800e0a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	885b      	ldrh	r3, [r3, #2]
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b05      	cmp	r3, #5
 800dec8:	f200 80ac 	bhi.w	800e024 <USBD_GetDescriptor+0x204>
 800decc:	a201      	add	r2, pc, #4	; (adr r2, 800ded4 <USBD_GetDescriptor+0xb4>)
 800dece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded2:	bf00      	nop
 800ded4:	0800deed 	.word	0x0800deed
 800ded8:	0800df21 	.word	0x0800df21
 800dedc:	0800df55 	.word	0x0800df55
 800dee0:	0800df89 	.word	0x0800df89
 800dee4:	0800dfbd 	.word	0x0800dfbd
 800dee8:	0800dff1 	.word	0x0800dff1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d00b      	beq.n	800df10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	7c12      	ldrb	r2, [r2, #16]
 800df04:	f107 0108 	add.w	r1, r7, #8
 800df08:	4610      	mov	r0, r2
 800df0a:	4798      	blx	r3
 800df0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df0e:	e091      	b.n	800e034 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800df10:	6839      	ldr	r1, [r7, #0]
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 fa97 	bl	800e446 <USBD_CtlError>
            err++;
 800df18:	7afb      	ldrb	r3, [r7, #11]
 800df1a:	3301      	adds	r3, #1
 800df1c:	72fb      	strb	r3, [r7, #11]
          break;
 800df1e:	e089      	b.n	800e034 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d00b      	beq.n	800df44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800df32:	689b      	ldr	r3, [r3, #8]
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	7c12      	ldrb	r2, [r2, #16]
 800df38:	f107 0108 	add.w	r1, r7, #8
 800df3c:	4610      	mov	r0, r2
 800df3e:	4798      	blx	r3
 800df40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df42:	e077      	b.n	800e034 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800df44:	6839      	ldr	r1, [r7, #0]
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 fa7d 	bl	800e446 <USBD_CtlError>
            err++;
 800df4c:	7afb      	ldrb	r3, [r7, #11]
 800df4e:	3301      	adds	r3, #1
 800df50:	72fb      	strb	r3, [r7, #11]
          break;
 800df52:	e06f      	b.n	800e034 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d00b      	beq.n	800df78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	687a      	ldr	r2, [r7, #4]
 800df6a:	7c12      	ldrb	r2, [r2, #16]
 800df6c:	f107 0108 	add.w	r1, r7, #8
 800df70:	4610      	mov	r0, r2
 800df72:	4798      	blx	r3
 800df74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df76:	e05d      	b.n	800e034 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800df78:	6839      	ldr	r1, [r7, #0]
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 fa63 	bl	800e446 <USBD_CtlError>
            err++;
 800df80:	7afb      	ldrb	r3, [r7, #11]
 800df82:	3301      	adds	r3, #1
 800df84:	72fb      	strb	r3, [r7, #11]
          break;
 800df86:	e055      	b.n	800e034 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800df8e:	691b      	ldr	r3, [r3, #16]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d00b      	beq.n	800dfac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800df9a:	691b      	ldr	r3, [r3, #16]
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	7c12      	ldrb	r2, [r2, #16]
 800dfa0:	f107 0108 	add.w	r1, r7, #8
 800dfa4:	4610      	mov	r0, r2
 800dfa6:	4798      	blx	r3
 800dfa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfaa:	e043      	b.n	800e034 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dfac:	6839      	ldr	r1, [r7, #0]
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 fa49 	bl	800e446 <USBD_CtlError>
            err++;
 800dfb4:	7afb      	ldrb	r3, [r7, #11]
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	72fb      	strb	r3, [r7, #11]
          break;
 800dfba:	e03b      	b.n	800e034 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dfc2:	695b      	ldr	r3, [r3, #20]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d00b      	beq.n	800dfe0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dfce:	695b      	ldr	r3, [r3, #20]
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	7c12      	ldrb	r2, [r2, #16]
 800dfd4:	f107 0108 	add.w	r1, r7, #8
 800dfd8:	4610      	mov	r0, r2
 800dfda:	4798      	blx	r3
 800dfdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfde:	e029      	b.n	800e034 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dfe0:	6839      	ldr	r1, [r7, #0]
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 fa2f 	bl	800e446 <USBD_CtlError>
            err++;
 800dfe8:	7afb      	ldrb	r3, [r7, #11]
 800dfea:	3301      	adds	r3, #1
 800dfec:	72fb      	strb	r3, [r7, #11]
          break;
 800dfee:	e021      	b.n	800e034 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dff6:	699b      	ldr	r3, [r3, #24]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d00b      	beq.n	800e014 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e002:	699b      	ldr	r3, [r3, #24]
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	7c12      	ldrb	r2, [r2, #16]
 800e008:	f107 0108 	add.w	r1, r7, #8
 800e00c:	4610      	mov	r0, r2
 800e00e:	4798      	blx	r3
 800e010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e012:	e00f      	b.n	800e034 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e014:	6839      	ldr	r1, [r7, #0]
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 fa15 	bl	800e446 <USBD_CtlError>
            err++;
 800e01c:	7afb      	ldrb	r3, [r7, #11]
 800e01e:	3301      	adds	r3, #1
 800e020:	72fb      	strb	r3, [r7, #11]
          break;
 800e022:	e007      	b.n	800e034 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800e024:	6839      	ldr	r1, [r7, #0]
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 fa0d 	bl	800e446 <USBD_CtlError>
          err++;
 800e02c:	7afb      	ldrb	r3, [r7, #11]
 800e02e:	3301      	adds	r3, #1
 800e030:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800e032:	e038      	b.n	800e0a6 <USBD_GetDescriptor+0x286>
 800e034:	e037      	b.n	800e0a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	7c1b      	ldrb	r3, [r3, #16]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d109      	bne.n	800e052 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e046:	f107 0208 	add.w	r2, r7, #8
 800e04a:	4610      	mov	r0, r2
 800e04c:	4798      	blx	r3
 800e04e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e050:	e029      	b.n	800e0a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e052:	6839      	ldr	r1, [r7, #0]
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f000 f9f6 	bl	800e446 <USBD_CtlError>
        err++;
 800e05a:	7afb      	ldrb	r3, [r7, #11]
 800e05c:	3301      	adds	r3, #1
 800e05e:	72fb      	strb	r3, [r7, #11]
      break;
 800e060:	e021      	b.n	800e0a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	7c1b      	ldrb	r3, [r3, #16]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d10d      	bne.n	800e086 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e072:	f107 0208 	add.w	r2, r7, #8
 800e076:	4610      	mov	r0, r2
 800e078:	4798      	blx	r3
 800e07a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	3301      	adds	r3, #1
 800e080:	2207      	movs	r2, #7
 800e082:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e084:	e00f      	b.n	800e0a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e086:	6839      	ldr	r1, [r7, #0]
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f000 f9dc 	bl	800e446 <USBD_CtlError>
        err++;
 800e08e:	7afb      	ldrb	r3, [r7, #11]
 800e090:	3301      	adds	r3, #1
 800e092:	72fb      	strb	r3, [r7, #11]
      break;
 800e094:	e007      	b.n	800e0a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e096:	6839      	ldr	r1, [r7, #0]
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 f9d4 	bl	800e446 <USBD_CtlError>
      err++;
 800e09e:	7afb      	ldrb	r3, [r7, #11]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	72fb      	strb	r3, [r7, #11]
      break;
 800e0a4:	bf00      	nop
  }

  if (err != 0U)
 800e0a6:	7afb      	ldrb	r3, [r7, #11]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d11c      	bne.n	800e0e6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800e0ac:	893b      	ldrh	r3, [r7, #8]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d011      	beq.n	800e0d6 <USBD_GetDescriptor+0x2b6>
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	88db      	ldrh	r3, [r3, #6]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d00d      	beq.n	800e0d6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	88da      	ldrh	r2, [r3, #6]
 800e0be:	893b      	ldrh	r3, [r7, #8]
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	bf28      	it	cs
 800e0c4:	4613      	movcs	r3, r2
 800e0c6:	b29b      	uxth	r3, r3
 800e0c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e0ca:	893b      	ldrh	r3, [r7, #8]
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	68f9      	ldr	r1, [r7, #12]
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f000 fa22 	bl	800e51a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	88db      	ldrh	r3, [r3, #6]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d104      	bne.n	800e0e8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 fa79 	bl	800e5d6 <USBD_CtlSendStatus>
 800e0e4:	e000      	b.n	800e0e8 <USBD_GetDescriptor+0x2c8>
    return;
 800e0e6:	bf00      	nop
    }
  }
}
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop

0800e0f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	889b      	ldrh	r3, [r3, #4]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d130      	bne.n	800e164 <USBD_SetAddress+0x74>
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	88db      	ldrh	r3, [r3, #6]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d12c      	bne.n	800e164 <USBD_SetAddress+0x74>
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	885b      	ldrh	r3, [r3, #2]
 800e10e:	2b7f      	cmp	r3, #127	; 0x7f
 800e110:	d828      	bhi.n	800e164 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	885b      	ldrh	r3, [r3, #2]
 800e116:	b2db      	uxtb	r3, r3
 800e118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e11c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e124:	2b03      	cmp	r3, #3
 800e126:	d104      	bne.n	800e132 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800e128:	6839      	ldr	r1, [r7, #0]
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 f98b 	bl	800e446 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e130:	e01d      	b.n	800e16e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	7bfa      	ldrb	r2, [r7, #15]
 800e136:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e13a:	7bfb      	ldrb	r3, [r7, #15]
 800e13c:	4619      	mov	r1, r3
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 fecf 	bl	800eee2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f000 fa46 	bl	800e5d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e14a:	7bfb      	ldrb	r3, [r7, #15]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d004      	beq.n	800e15a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2202      	movs	r2, #2
 800e154:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e158:	e009      	b.n	800e16e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2201      	movs	r2, #1
 800e15e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e162:	e004      	b.n	800e16e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e164:	6839      	ldr	r1, [r7, #0]
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 f96d 	bl	800e446 <USBD_CtlError>
  }
}
 800e16c:	bf00      	nop
 800e16e:	bf00      	nop
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
	...

0800e178 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	885b      	ldrh	r3, [r3, #2]
 800e186:	b2da      	uxtb	r2, r3
 800e188:	4b41      	ldr	r3, [pc, #260]	; (800e290 <USBD_SetConfig+0x118>)
 800e18a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e18c:	4b40      	ldr	r3, [pc, #256]	; (800e290 <USBD_SetConfig+0x118>)
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	2b01      	cmp	r3, #1
 800e192:	d904      	bls.n	800e19e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800e194:	6839      	ldr	r1, [r7, #0]
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f000 f955 	bl	800e446 <USBD_CtlError>
 800e19c:	e075      	b.n	800e28a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	d002      	beq.n	800e1ae <USBD_SetConfig+0x36>
 800e1a8:	2b03      	cmp	r3, #3
 800e1aa:	d023      	beq.n	800e1f4 <USBD_SetConfig+0x7c>
 800e1ac:	e062      	b.n	800e274 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800e1ae:	4b38      	ldr	r3, [pc, #224]	; (800e290 <USBD_SetConfig+0x118>)
 800e1b0:	781b      	ldrb	r3, [r3, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d01a      	beq.n	800e1ec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800e1b6:	4b36      	ldr	r3, [pc, #216]	; (800e290 <USBD_SetConfig+0x118>)
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2203      	movs	r2, #3
 800e1c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e1c8:	4b31      	ldr	r3, [pc, #196]	; (800e290 <USBD_SetConfig+0x118>)
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f7ff f9af 	bl	800d532 <USBD_SetClassConfig>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b02      	cmp	r3, #2
 800e1d8:	d104      	bne.n	800e1e4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800e1da:	6839      	ldr	r1, [r7, #0]
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 f932 	bl	800e446 <USBD_CtlError>
            return;
 800e1e2:	e052      	b.n	800e28a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 f9f6 	bl	800e5d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e1ea:	e04e      	b.n	800e28a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 f9f2 	bl	800e5d6 <USBD_CtlSendStatus>
        break;
 800e1f2:	e04a      	b.n	800e28a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800e1f4:	4b26      	ldr	r3, [pc, #152]	; (800e290 <USBD_SetConfig+0x118>)
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d112      	bne.n	800e222 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2202      	movs	r2, #2
 800e200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800e204:	4b22      	ldr	r3, [pc, #136]	; (800e290 <USBD_SetConfig+0x118>)
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	461a      	mov	r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800e20e:	4b20      	ldr	r3, [pc, #128]	; (800e290 <USBD_SetConfig+0x118>)
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	4619      	mov	r1, r3
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f7ff f9ab 	bl	800d570 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 f9db 	bl	800e5d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e220:	e033      	b.n	800e28a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800e222:	4b1b      	ldr	r3, [pc, #108]	; (800e290 <USBD_SetConfig+0x118>)
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	461a      	mov	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	685b      	ldr	r3, [r3, #4]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d01d      	beq.n	800e26c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	b2db      	uxtb	r3, r3
 800e236:	4619      	mov	r1, r3
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f7ff f999 	bl	800d570 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800e23e:	4b14      	ldr	r3, [pc, #80]	; (800e290 <USBD_SetConfig+0x118>)
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	461a      	mov	r2, r3
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e248:	4b11      	ldr	r3, [pc, #68]	; (800e290 <USBD_SetConfig+0x118>)
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	4619      	mov	r1, r3
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f7ff f96f 	bl	800d532 <USBD_SetClassConfig>
 800e254:	4603      	mov	r3, r0
 800e256:	2b02      	cmp	r3, #2
 800e258:	d104      	bne.n	800e264 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800e25a:	6839      	ldr	r1, [r7, #0]
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f000 f8f2 	bl	800e446 <USBD_CtlError>
            return;
 800e262:	e012      	b.n	800e28a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f000 f9b6 	bl	800e5d6 <USBD_CtlSendStatus>
        break;
 800e26a:	e00e      	b.n	800e28a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f000 f9b2 	bl	800e5d6 <USBD_CtlSendStatus>
        break;
 800e272:	e00a      	b.n	800e28a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800e274:	6839      	ldr	r1, [r7, #0]
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 f8e5 	bl	800e446 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800e27c:	4b04      	ldr	r3, [pc, #16]	; (800e290 <USBD_SetConfig+0x118>)
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	4619      	mov	r1, r3
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f7ff f974 	bl	800d570 <USBD_ClrClassConfig>
        break;
 800e288:	bf00      	nop
    }
  }
}
 800e28a:	3708      	adds	r7, #8
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}
 800e290:	20000844 	.word	0x20000844

0800e294 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b082      	sub	sp, #8
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	88db      	ldrh	r3, [r3, #6]
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d004      	beq.n	800e2b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e2a6:	6839      	ldr	r1, [r7, #0]
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f000 f8cc 	bl	800e446 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e2ae:	e022      	b.n	800e2f6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2b6:	2b02      	cmp	r3, #2
 800e2b8:	dc02      	bgt.n	800e2c0 <USBD_GetConfig+0x2c>
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	dc03      	bgt.n	800e2c6 <USBD_GetConfig+0x32>
 800e2be:	e015      	b.n	800e2ec <USBD_GetConfig+0x58>
 800e2c0:	2b03      	cmp	r3, #3
 800e2c2:	d00b      	beq.n	800e2dc <USBD_GetConfig+0x48>
 800e2c4:	e012      	b.n	800e2ec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	3308      	adds	r3, #8
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f000 f920 	bl	800e51a <USBD_CtlSendData>
        break;
 800e2da:	e00c      	b.n	800e2f6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	3304      	adds	r3, #4
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	4619      	mov	r1, r3
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f000 f918 	bl	800e51a <USBD_CtlSendData>
        break;
 800e2ea:	e004      	b.n	800e2f6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800e2ec:	6839      	ldr	r1, [r7, #0]
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 f8a9 	bl	800e446 <USBD_CtlError>
        break;
 800e2f4:	bf00      	nop
}
 800e2f6:	bf00      	nop
 800e2f8:	3708      	adds	r7, #8
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}

0800e2fe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b082      	sub	sp, #8
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
 800e306:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e30e:	3b01      	subs	r3, #1
 800e310:	2b02      	cmp	r3, #2
 800e312:	d81e      	bhi.n	800e352 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	88db      	ldrh	r3, [r3, #6]
 800e318:	2b02      	cmp	r3, #2
 800e31a:	d004      	beq.n	800e326 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800e31c:	6839      	ldr	r1, [r7, #0]
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f000 f891 	bl	800e446 <USBD_CtlError>
        break;
 800e324:	e01a      	b.n	800e35c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2201      	movs	r2, #1
 800e32a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e332:	2b00      	cmp	r3, #0
 800e334:	d005      	beq.n	800e342 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	f043 0202 	orr.w	r2, r3, #2
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	330c      	adds	r3, #12
 800e346:	2202      	movs	r2, #2
 800e348:	4619      	mov	r1, r3
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 f8e5 	bl	800e51a <USBD_CtlSendData>
      break;
 800e350:	e004      	b.n	800e35c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800e352:	6839      	ldr	r1, [r7, #0]
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 f876 	bl	800e446 <USBD_CtlError>
      break;
 800e35a:	bf00      	nop
  }
}
 800e35c:	bf00      	nop
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	885b      	ldrh	r3, [r3, #2]
 800e372:	2b01      	cmp	r3, #1
 800e374:	d106      	bne.n	800e384 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2201      	movs	r2, #1
 800e37a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f000 f929 	bl	800e5d6 <USBD_CtlSendStatus>
  }
}
 800e384:	bf00      	nop
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e39c:	3b01      	subs	r3, #1
 800e39e:	2b02      	cmp	r3, #2
 800e3a0:	d80b      	bhi.n	800e3ba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	885b      	ldrh	r3, [r3, #2]
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d10c      	bne.n	800e3c4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 f90f 	bl	800e5d6 <USBD_CtlSendStatus>
      }
      break;
 800e3b8:	e004      	b.n	800e3c4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800e3ba:	6839      	ldr	r1, [r7, #0]
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 f842 	bl	800e446 <USBD_CtlError>
      break;
 800e3c2:	e000      	b.n	800e3c6 <USBD_ClrFeature+0x3a>
      break;
 800e3c4:	bf00      	nop
  }
}
 800e3c6:	bf00      	nop
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e3ce:	b480      	push	{r7}
 800e3d0:	b083      	sub	sp, #12
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
 800e3d6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	781a      	ldrb	r2, [r3, #0]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	785a      	ldrb	r2, [r3, #1]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	3302      	adds	r3, #2
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	3303      	adds	r3, #3
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	021b      	lsls	r3, r3, #8
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	4413      	add	r3, r2
 800e3fe:	b29a      	uxth	r2, r3
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	3304      	adds	r3, #4
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	b29a      	uxth	r2, r3
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	3305      	adds	r3, #5
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	b29b      	uxth	r3, r3
 800e414:	021b      	lsls	r3, r3, #8
 800e416:	b29b      	uxth	r3, r3
 800e418:	4413      	add	r3, r2
 800e41a:	b29a      	uxth	r2, r3
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	3306      	adds	r3, #6
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	b29a      	uxth	r2, r3
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	3307      	adds	r3, #7
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	b29b      	uxth	r3, r3
 800e430:	021b      	lsls	r3, r3, #8
 800e432:	b29b      	uxth	r3, r3
 800e434:	4413      	add	r3, r2
 800e436:	b29a      	uxth	r2, r3
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	80da      	strh	r2, [r3, #6]

}
 800e43c:	bf00      	nop
 800e43e:	370c      	adds	r7, #12
 800e440:	46bd      	mov	sp, r7
 800e442:	bc80      	pop	{r7}
 800e444:	4770      	bx	lr

0800e446 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800e446:	b580      	push	{r7, lr}
 800e448:	b082      	sub	sp, #8
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
 800e44e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800e450:	2180      	movs	r1, #128	; 0x80
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 fcdc 	bl	800ee10 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e458:	2100      	movs	r1, #0
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 fcd8 	bl	800ee10 <USBD_LL_StallEP>
}
 800e460:	bf00      	nop
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b086      	sub	sp, #24
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	60f8      	str	r0, [r7, #12]
 800e470:	60b9      	str	r1, [r7, #8]
 800e472:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e474:	2300      	movs	r3, #0
 800e476:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d032      	beq.n	800e4e4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e47e:	68f8      	ldr	r0, [r7, #12]
 800e480:	f000 f834 	bl	800e4ec <USBD_GetLen>
 800e484:	4603      	mov	r3, r0
 800e486:	3301      	adds	r3, #1
 800e488:	b29b      	uxth	r3, r3
 800e48a:	005b      	lsls	r3, r3, #1
 800e48c:	b29a      	uxth	r2, r3
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e492:	7dfb      	ldrb	r3, [r7, #23]
 800e494:	1c5a      	adds	r2, r3, #1
 800e496:	75fa      	strb	r2, [r7, #23]
 800e498:	461a      	mov	r2, r3
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	4413      	add	r3, r2
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	7812      	ldrb	r2, [r2, #0]
 800e4a2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e4a4:	7dfb      	ldrb	r3, [r7, #23]
 800e4a6:	1c5a      	adds	r2, r3, #1
 800e4a8:	75fa      	strb	r2, [r7, #23]
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	4413      	add	r3, r2
 800e4b0:	2203      	movs	r2, #3
 800e4b2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e4b4:	e012      	b.n	800e4dc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	1c5a      	adds	r2, r3, #1
 800e4ba:	60fa      	str	r2, [r7, #12]
 800e4bc:	7dfa      	ldrb	r2, [r7, #23]
 800e4be:	1c51      	adds	r1, r2, #1
 800e4c0:	75f9      	strb	r1, [r7, #23]
 800e4c2:	4611      	mov	r1, r2
 800e4c4:	68ba      	ldr	r2, [r7, #8]
 800e4c6:	440a      	add	r2, r1
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e4cc:	7dfb      	ldrb	r3, [r7, #23]
 800e4ce:	1c5a      	adds	r2, r3, #1
 800e4d0:	75fa      	strb	r2, [r7, #23]
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	4413      	add	r3, r2
 800e4d8:	2200      	movs	r2, #0
 800e4da:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d1e8      	bne.n	800e4b6 <USBD_GetString+0x4e>
    }
  }
}
 800e4e4:	bf00      	nop
 800e4e6:	3718      	adds	r7, #24
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b085      	sub	sp, #20
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800e4f8:	e005      	b.n	800e506 <USBD_GetLen+0x1a>
  {
    len++;
 800e4fa:	7bfb      	ldrb	r3, [r7, #15]
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	73fb      	strb	r3, [r7, #15]
    buf++;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	3301      	adds	r3, #1
 800e504:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d1f5      	bne.n	800e4fa <USBD_GetLen+0xe>
  }

  return len;
 800e50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3714      	adds	r7, #20
 800e514:	46bd      	mov	sp, r7
 800e516:	bc80      	pop	{r7}
 800e518:	4770      	bx	lr

0800e51a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e51a:	b580      	push	{r7, lr}
 800e51c:	b084      	sub	sp, #16
 800e51e:	af00      	add	r7, sp, #0
 800e520:	60f8      	str	r0, [r7, #12]
 800e522:	60b9      	str	r1, [r7, #8]
 800e524:	4613      	mov	r3, r2
 800e526:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2202      	movs	r2, #2
 800e52c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e530:	88fa      	ldrh	r2, [r7, #6]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e536:	88fa      	ldrh	r2, [r7, #6]
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e53c:	88fb      	ldrh	r3, [r7, #6]
 800e53e:	68ba      	ldr	r2, [r7, #8]
 800e540:	2100      	movs	r1, #0
 800e542:	68f8      	ldr	r0, [r7, #12]
 800e544:	f000 fcec 	bl	800ef20 <USBD_LL_Transmit>

  return USBD_OK;
 800e548:	2300      	movs	r3, #0
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3710      	adds	r7, #16
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}

0800e552 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e552:	b580      	push	{r7, lr}
 800e554:	b084      	sub	sp, #16
 800e556:	af00      	add	r7, sp, #0
 800e558:	60f8      	str	r0, [r7, #12]
 800e55a:	60b9      	str	r1, [r7, #8]
 800e55c:	4613      	mov	r3, r2
 800e55e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e560:	88fb      	ldrh	r3, [r7, #6]
 800e562:	68ba      	ldr	r2, [r7, #8]
 800e564:	2100      	movs	r1, #0
 800e566:	68f8      	ldr	r0, [r7, #12]
 800e568:	f000 fcda 	bl	800ef20 <USBD_LL_Transmit>

  return USBD_OK;
 800e56c:	2300      	movs	r3, #0
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3710      	adds	r7, #16
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}

0800e576 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800e576:	b580      	push	{r7, lr}
 800e578:	b084      	sub	sp, #16
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	60f8      	str	r0, [r7, #12]
 800e57e:	60b9      	str	r1, [r7, #8]
 800e580:	4613      	mov	r3, r2
 800e582:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2203      	movs	r2, #3
 800e588:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e58c:	88fa      	ldrh	r2, [r7, #6]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800e594:	88fa      	ldrh	r2, [r7, #6]
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e59c:	88fb      	ldrh	r3, [r7, #6]
 800e59e:	68ba      	ldr	r2, [r7, #8]
 800e5a0:	2100      	movs	r1, #0
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	f000 fcdf 	bl	800ef66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e5a8:	2300      	movs	r3, #0
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3710      	adds	r7, #16
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}

0800e5b2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800e5b2:	b580      	push	{r7, lr}
 800e5b4:	b084      	sub	sp, #16
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	60f8      	str	r0, [r7, #12]
 800e5ba:	60b9      	str	r1, [r7, #8]
 800e5bc:	4613      	mov	r3, r2
 800e5be:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e5c0:	88fb      	ldrh	r3, [r7, #6]
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	2100      	movs	r1, #0
 800e5c6:	68f8      	ldr	r0, [r7, #12]
 800e5c8:	f000 fccd 	bl	800ef66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e5cc:	2300      	movs	r3, #0
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}

0800e5d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e5d6:	b580      	push	{r7, lr}
 800e5d8:	b082      	sub	sp, #8
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2204      	movs	r2, #4
 800e5e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 fc97 	bl	800ef20 <USBD_LL_Transmit>

  return USBD_OK;
 800e5f2:	2300      	movs	r3, #0
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3708      	adds	r7, #8
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2205      	movs	r2, #5
 800e608:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e60c:	2300      	movs	r3, #0
 800e60e:	2200      	movs	r2, #0
 800e610:	2100      	movs	r1, #0
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 fca7 	bl	800ef66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e618:	2300      	movs	r3, #0
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3708      	adds	r7, #8
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
	...

0800e624 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e628:	2200      	movs	r2, #0
 800e62a:	4912      	ldr	r1, [pc, #72]	; (800e674 <MX_USB_DEVICE_Init+0x50>)
 800e62c:	4812      	ldr	r0, [pc, #72]	; (800e678 <MX_USB_DEVICE_Init+0x54>)
 800e62e:	f7fe ff26 	bl	800d47e <USBD_Init>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d001      	beq.n	800e63c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e638:	f7f6 fb48 	bl	8004ccc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e63c:	490f      	ldr	r1, [pc, #60]	; (800e67c <MX_USB_DEVICE_Init+0x58>)
 800e63e:	480e      	ldr	r0, [pc, #56]	; (800e678 <MX_USB_DEVICE_Init+0x54>)
 800e640:	f7fe ff48 	bl	800d4d4 <USBD_RegisterClass>
 800e644:	4603      	mov	r3, r0
 800e646:	2b00      	cmp	r3, #0
 800e648:	d001      	beq.n	800e64e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e64a:	f7f6 fb3f 	bl	8004ccc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e64e:	490c      	ldr	r1, [pc, #48]	; (800e680 <MX_USB_DEVICE_Init+0x5c>)
 800e650:	4809      	ldr	r0, [pc, #36]	; (800e678 <MX_USB_DEVICE_Init+0x54>)
 800e652:	f7fe fe79 	bl	800d348 <USBD_CDC_RegisterInterface>
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d001      	beq.n	800e660 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e65c:	f7f6 fb36 	bl	8004ccc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e660:	4805      	ldr	r0, [pc, #20]	; (800e678 <MX_USB_DEVICE_Init+0x54>)
 800e662:	f7fe ff50 	bl	800d506 <USBD_Start>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d001      	beq.n	800e670 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e66c:	f7f6 fb2e 	bl	8004ccc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e670:	bf00      	nop
 800e672:	bd80      	pop	{r7, pc}
 800e674:	20000198 	.word	0x20000198
 800e678:	20000854 	.word	0x20000854
 800e67c:	2000007c 	.word	0x2000007c
 800e680:	20000180 	.word	0x20000180

0800e684 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e688:	2200      	movs	r2, #0
 800e68a:	4905      	ldr	r1, [pc, #20]	; (800e6a0 <CDC_Init_FS+0x1c>)
 800e68c:	4805      	ldr	r0, [pc, #20]	; (800e6a4 <CDC_Init_FS+0x20>)
 800e68e:	f7fe fe71 	bl	800d374 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e692:	4905      	ldr	r1, [pc, #20]	; (800e6a8 <CDC_Init_FS+0x24>)
 800e694:	4803      	ldr	r0, [pc, #12]	; (800e6a4 <CDC_Init_FS+0x20>)
 800e696:	f7fe fe86 	bl	800d3a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e69a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	20001318 	.word	0x20001318
 800e6a4:	20000854 	.word	0x20000854
 800e6a8:	20000b18 	.word	0x20000b18

0800e6ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e6b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bc80      	pop	{r7}
 800e6b8:	4770      	bx	lr
	...

0800e6bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	6039      	str	r1, [r7, #0]
 800e6c6:	71fb      	strb	r3, [r7, #7]
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e6cc:	79fb      	ldrb	r3, [r7, #7]
 800e6ce:	2b23      	cmp	r3, #35	; 0x23
 800e6d0:	d85c      	bhi.n	800e78c <CDC_Control_FS+0xd0>
 800e6d2:	a201      	add	r2, pc, #4	; (adr r2, 800e6d8 <CDC_Control_FS+0x1c>)
 800e6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6d8:	0800e78d 	.word	0x0800e78d
 800e6dc:	0800e78d 	.word	0x0800e78d
 800e6e0:	0800e78d 	.word	0x0800e78d
 800e6e4:	0800e78d 	.word	0x0800e78d
 800e6e8:	0800e78d 	.word	0x0800e78d
 800e6ec:	0800e78d 	.word	0x0800e78d
 800e6f0:	0800e78d 	.word	0x0800e78d
 800e6f4:	0800e78d 	.word	0x0800e78d
 800e6f8:	0800e78d 	.word	0x0800e78d
 800e6fc:	0800e78d 	.word	0x0800e78d
 800e700:	0800e78d 	.word	0x0800e78d
 800e704:	0800e78d 	.word	0x0800e78d
 800e708:	0800e78d 	.word	0x0800e78d
 800e70c:	0800e78d 	.word	0x0800e78d
 800e710:	0800e78d 	.word	0x0800e78d
 800e714:	0800e78d 	.word	0x0800e78d
 800e718:	0800e78d 	.word	0x0800e78d
 800e71c:	0800e78d 	.word	0x0800e78d
 800e720:	0800e78d 	.word	0x0800e78d
 800e724:	0800e78d 	.word	0x0800e78d
 800e728:	0800e78d 	.word	0x0800e78d
 800e72c:	0800e78d 	.word	0x0800e78d
 800e730:	0800e78d 	.word	0x0800e78d
 800e734:	0800e78d 	.word	0x0800e78d
 800e738:	0800e78d 	.word	0x0800e78d
 800e73c:	0800e78d 	.word	0x0800e78d
 800e740:	0800e78d 	.word	0x0800e78d
 800e744:	0800e78d 	.word	0x0800e78d
 800e748:	0800e78d 	.word	0x0800e78d
 800e74c:	0800e78d 	.word	0x0800e78d
 800e750:	0800e78d 	.word	0x0800e78d
 800e754:	0800e78d 	.word	0x0800e78d
 800e758:	0800e769 	.word	0x0800e769
 800e75c:	0800e77b 	.word	0x0800e77b
 800e760:	0800e78d 	.word	0x0800e78d
 800e764:	0800e78d 	.word	0x0800e78d
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit

    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };

    case CDC_SET_LINE_CODING:
      memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800e768:	4b0c      	ldr	r3, [pc, #48]	; (800e79c <CDC_Control_FS+0xe0>)
 800e76a:	683a      	ldr	r2, [r7, #0]
 800e76c:	6810      	ldr	r0, [r2, #0]
 800e76e:	6018      	str	r0, [r3, #0]
 800e770:	8891      	ldrh	r1, [r2, #4]
 800e772:	7992      	ldrb	r2, [r2, #6]
 800e774:	8099      	strh	r1, [r3, #4]
 800e776:	719a      	strb	r2, [r3, #6]
    break;
 800e778:	e009      	b.n	800e78e <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
      memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	4a07      	ldr	r2, [pc, #28]	; (800e79c <CDC_Control_FS+0xe0>)
 800e77e:	6810      	ldr	r0, [r2, #0]
 800e780:	6018      	str	r0, [r3, #0]
 800e782:	8891      	ldrh	r1, [r2, #4]
 800e784:	7992      	ldrb	r2, [r2, #6]
 800e786:	8099      	strh	r1, [r3, #4]
 800e788:	719a      	strb	r2, [r3, #6]
    break;
 800e78a:	e000      	b.n	800e78e <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e78c:	bf00      	nop
  }

  return (USBD_OK);
 800e78e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e790:	4618      	mov	r0, r3
 800e792:	370c      	adds	r7, #12
 800e794:	46bd      	mov	sp, r7
 800e796:	bc80      	pop	{r7}
 800e798:	4770      	bx	lr
 800e79a:	bf00      	nop
 800e79c:	20000190 	.word	0x20000190

0800e7a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e7aa:	6879      	ldr	r1, [r7, #4]
 800e7ac:	4805      	ldr	r0, [pc, #20]	; (800e7c4 <CDC_Receive_FS+0x24>)
 800e7ae:	f7fe fdfa 	bl	800d3a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e7b2:	4804      	ldr	r0, [pc, #16]	; (800e7c4 <CDC_Receive_FS+0x24>)
 800e7b4:	f7fe fe39 	bl	800d42a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e7b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3708      	adds	r7, #8
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	20000854 	.word	0x20000854

0800e7c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e7d8:	4b0d      	ldr	r3, [pc, #52]	; (800e810 <CDC_Transmit_FS+0x48>)
 800e7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d001      	beq.n	800e7ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e00b      	b.n	800e806 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e7ee:	887b      	ldrh	r3, [r7, #2]
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	6879      	ldr	r1, [r7, #4]
 800e7f4:	4806      	ldr	r0, [pc, #24]	; (800e810 <CDC_Transmit_FS+0x48>)
 800e7f6:	f7fe fdbd 	bl	800d374 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e7fa:	4805      	ldr	r0, [pc, #20]	; (800e810 <CDC_Transmit_FS+0x48>)
 800e7fc:	f7fe fde6 	bl	800d3cc <USBD_CDC_TransmitPacket>
 800e800:	4603      	mov	r3, r0
 800e802:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e804:	7bfb      	ldrb	r3, [r7, #15]
}
 800e806:	4618      	mov	r0, r3
 800e808:	3710      	adds	r7, #16
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	bf00      	nop
 800e810:	20000854 	.word	0x20000854

0800e814 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e814:	b480      	push	{r7}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
 800e81a:	4603      	mov	r3, r0
 800e81c:	6039      	str	r1, [r7, #0]
 800e81e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	2212      	movs	r2, #18
 800e824:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e826:	4b03      	ldr	r3, [pc, #12]	; (800e834 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e828:	4618      	mov	r0, r3
 800e82a:	370c      	adds	r7, #12
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bc80      	pop	{r7}
 800e830:	4770      	bx	lr
 800e832:	bf00      	nop
 800e834:	200001b4 	.word	0x200001b4

0800e838 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e838:	b480      	push	{r7}
 800e83a:	b083      	sub	sp, #12
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	4603      	mov	r3, r0
 800e840:	6039      	str	r1, [r7, #0]
 800e842:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	2204      	movs	r2, #4
 800e848:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e84a:	4b03      	ldr	r3, [pc, #12]	; (800e858 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	370c      	adds	r7, #12
 800e850:	46bd      	mov	sp, r7
 800e852:	bc80      	pop	{r7}
 800e854:	4770      	bx	lr
 800e856:	bf00      	nop
 800e858:	200001c8 	.word	0x200001c8

0800e85c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	4603      	mov	r3, r0
 800e864:	6039      	str	r1, [r7, #0]
 800e866:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e868:	79fb      	ldrb	r3, [r7, #7]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d105      	bne.n	800e87a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e86e:	683a      	ldr	r2, [r7, #0]
 800e870:	4907      	ldr	r1, [pc, #28]	; (800e890 <USBD_FS_ProductStrDescriptor+0x34>)
 800e872:	4808      	ldr	r0, [pc, #32]	; (800e894 <USBD_FS_ProductStrDescriptor+0x38>)
 800e874:	f7ff fdf8 	bl	800e468 <USBD_GetString>
 800e878:	e004      	b.n	800e884 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e87a:	683a      	ldr	r2, [r7, #0]
 800e87c:	4904      	ldr	r1, [pc, #16]	; (800e890 <USBD_FS_ProductStrDescriptor+0x34>)
 800e87e:	4805      	ldr	r0, [pc, #20]	; (800e894 <USBD_FS_ProductStrDescriptor+0x38>)
 800e880:	f7ff fdf2 	bl	800e468 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e884:	4b02      	ldr	r3, [pc, #8]	; (800e890 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e886:	4618      	mov	r0, r3
 800e888:	3708      	adds	r7, #8
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	20001b18 	.word	0x20001b18
 800e894:	080140c8 	.word	0x080140c8

0800e898 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	4603      	mov	r3, r0
 800e8a0:	6039      	str	r1, [r7, #0]
 800e8a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e8a4:	683a      	ldr	r2, [r7, #0]
 800e8a6:	4904      	ldr	r1, [pc, #16]	; (800e8b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e8a8:	4804      	ldr	r0, [pc, #16]	; (800e8bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e8aa:	f7ff fddd 	bl	800e468 <USBD_GetString>
  return USBD_StrDesc;
 800e8ae:	4b02      	ldr	r3, [pc, #8]	; (800e8b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	20001b18 	.word	0x20001b18
 800e8bc:	080140e0 	.word	0x080140e0

0800e8c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	6039      	str	r1, [r7, #0]
 800e8ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	221a      	movs	r2, #26
 800e8d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e8d2:	f000 f843 	bl	800e95c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e8d6:	4b02      	ldr	r3, [pc, #8]	; (800e8e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3708      	adds	r7, #8
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}
 800e8e0:	200001cc 	.word	0x200001cc

0800e8e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	6039      	str	r1, [r7, #0]
 800e8ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e8f0:	79fb      	ldrb	r3, [r7, #7]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d105      	bne.n	800e902 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e8f6:	683a      	ldr	r2, [r7, #0]
 800e8f8:	4907      	ldr	r1, [pc, #28]	; (800e918 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e8fa:	4808      	ldr	r0, [pc, #32]	; (800e91c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e8fc:	f7ff fdb4 	bl	800e468 <USBD_GetString>
 800e900:	e004      	b.n	800e90c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e902:	683a      	ldr	r2, [r7, #0]
 800e904:	4904      	ldr	r1, [pc, #16]	; (800e918 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e906:	4805      	ldr	r0, [pc, #20]	; (800e91c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e908:	f7ff fdae 	bl	800e468 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e90c:	4b02      	ldr	r3, [pc, #8]	; (800e918 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3708      	adds	r7, #8
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	20001b18 	.word	0x20001b18
 800e91c:	080140f4 	.word	0x080140f4

0800e920 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	4603      	mov	r3, r0
 800e928:	6039      	str	r1, [r7, #0]
 800e92a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e92c:	79fb      	ldrb	r3, [r7, #7]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d105      	bne.n	800e93e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e932:	683a      	ldr	r2, [r7, #0]
 800e934:	4907      	ldr	r1, [pc, #28]	; (800e954 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e936:	4808      	ldr	r0, [pc, #32]	; (800e958 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e938:	f7ff fd96 	bl	800e468 <USBD_GetString>
 800e93c:	e004      	b.n	800e948 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e93e:	683a      	ldr	r2, [r7, #0]
 800e940:	4904      	ldr	r1, [pc, #16]	; (800e954 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e942:	4805      	ldr	r0, [pc, #20]	; (800e958 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e944:	f7ff fd90 	bl	800e468 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e948:	4b02      	ldr	r3, [pc, #8]	; (800e954 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3708      	adds	r7, #8
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
 800e952:	bf00      	nop
 800e954:	20001b18 	.word	0x20001b18
 800e958:	08014100 	.word	0x08014100

0800e95c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e962:	4b0f      	ldr	r3, [pc, #60]	; (800e9a0 <Get_SerialNum+0x44>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e968:	4b0e      	ldr	r3, [pc, #56]	; (800e9a4 <Get_SerialNum+0x48>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e96e:	4b0e      	ldr	r3, [pc, #56]	; (800e9a8 <Get_SerialNum+0x4c>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e974:	68fa      	ldr	r2, [r7, #12]
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	4413      	add	r3, r2
 800e97a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d009      	beq.n	800e996 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e982:	2208      	movs	r2, #8
 800e984:	4909      	ldr	r1, [pc, #36]	; (800e9ac <Get_SerialNum+0x50>)
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	f000 f814 	bl	800e9b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e98c:	2204      	movs	r2, #4
 800e98e:	4908      	ldr	r1, [pc, #32]	; (800e9b0 <Get_SerialNum+0x54>)
 800e990:	68b8      	ldr	r0, [r7, #8]
 800e992:	f000 f80f 	bl	800e9b4 <IntToUnicode>
  }
}
 800e996:	bf00      	nop
 800e998:	3710      	adds	r7, #16
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	1fff7a10 	.word	0x1fff7a10
 800e9a4:	1fff7a14 	.word	0x1fff7a14
 800e9a8:	1fff7a18 	.word	0x1fff7a18
 800e9ac:	200001ce 	.word	0x200001ce
 800e9b0:	200001de 	.word	0x200001de

0800e9b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b087      	sub	sp, #28
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	4613      	mov	r3, r2
 800e9c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	75fb      	strb	r3, [r7, #23]
 800e9ca:	e027      	b.n	800ea1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	0f1b      	lsrs	r3, r3, #28
 800e9d0:	2b09      	cmp	r3, #9
 800e9d2:	d80b      	bhi.n	800e9ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	0f1b      	lsrs	r3, r3, #28
 800e9d8:	b2da      	uxtb	r2, r3
 800e9da:	7dfb      	ldrb	r3, [r7, #23]
 800e9dc:	005b      	lsls	r3, r3, #1
 800e9de:	4619      	mov	r1, r3
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	440b      	add	r3, r1
 800e9e4:	3230      	adds	r2, #48	; 0x30
 800e9e6:	b2d2      	uxtb	r2, r2
 800e9e8:	701a      	strb	r2, [r3, #0]
 800e9ea:	e00a      	b.n	800ea02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	0f1b      	lsrs	r3, r3, #28
 800e9f0:	b2da      	uxtb	r2, r3
 800e9f2:	7dfb      	ldrb	r3, [r7, #23]
 800e9f4:	005b      	lsls	r3, r3, #1
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	440b      	add	r3, r1
 800e9fc:	3237      	adds	r2, #55	; 0x37
 800e9fe:	b2d2      	uxtb	r2, r2
 800ea00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	011b      	lsls	r3, r3, #4
 800ea06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ea08:	7dfb      	ldrb	r3, [r7, #23]
 800ea0a:	005b      	lsls	r3, r3, #1
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	68ba      	ldr	r2, [r7, #8]
 800ea10:	4413      	add	r3, r2
 800ea12:	2200      	movs	r2, #0
 800ea14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ea16:	7dfb      	ldrb	r3, [r7, #23]
 800ea18:	3301      	adds	r3, #1
 800ea1a:	75fb      	strb	r3, [r7, #23]
 800ea1c:	7dfa      	ldrb	r2, [r7, #23]
 800ea1e:	79fb      	ldrb	r3, [r7, #7]
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d3d3      	bcc.n	800e9cc <IntToUnicode+0x18>
  }
}
 800ea24:	bf00      	nop
 800ea26:	bf00      	nop
 800ea28:	371c      	adds	r7, #28
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bc80      	pop	{r7}
 800ea2e:	4770      	bx	lr

0800ea30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b08a      	sub	sp, #40	; 0x28
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea38:	f107 0314 	add.w	r3, r7, #20
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	601a      	str	r2, [r3, #0]
 800ea40:	605a      	str	r2, [r3, #4]
 800ea42:	609a      	str	r2, [r3, #8]
 800ea44:	60da      	str	r2, [r3, #12]
 800ea46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ea50:	d13a      	bne.n	800eac8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ea52:	2300      	movs	r3, #0
 800ea54:	613b      	str	r3, [r7, #16]
 800ea56:	4b1e      	ldr	r3, [pc, #120]	; (800ead0 <HAL_PCD_MspInit+0xa0>)
 800ea58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea5a:	4a1d      	ldr	r2, [pc, #116]	; (800ead0 <HAL_PCD_MspInit+0xa0>)
 800ea5c:	f043 0301 	orr.w	r3, r3, #1
 800ea60:	6313      	str	r3, [r2, #48]	; 0x30
 800ea62:	4b1b      	ldr	r3, [pc, #108]	; (800ead0 <HAL_PCD_MspInit+0xa0>)
 800ea64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea66:	f003 0301 	and.w	r3, r3, #1
 800ea6a:	613b      	str	r3, [r7, #16]
 800ea6c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ea6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ea72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea74:	2302      	movs	r3, #2
 800ea76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea7c:	2303      	movs	r3, #3
 800ea7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ea80:	230a      	movs	r3, #10
 800ea82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ea84:	f107 0314 	add.w	r3, r7, #20
 800ea88:	4619      	mov	r1, r3
 800ea8a:	4812      	ldr	r0, [pc, #72]	; (800ead4 <HAL_PCD_MspInit+0xa4>)
 800ea8c:	f7f8 fbb0 	bl	80071f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ea90:	4b0f      	ldr	r3, [pc, #60]	; (800ead0 <HAL_PCD_MspInit+0xa0>)
 800ea92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea94:	4a0e      	ldr	r2, [pc, #56]	; (800ead0 <HAL_PCD_MspInit+0xa0>)
 800ea96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea9a:	6353      	str	r3, [r2, #52]	; 0x34
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	60fb      	str	r3, [r7, #12]
 800eaa0:	4b0b      	ldr	r3, [pc, #44]	; (800ead0 <HAL_PCD_MspInit+0xa0>)
 800eaa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaa4:	4a0a      	ldr	r2, [pc, #40]	; (800ead0 <HAL_PCD_MspInit+0xa0>)
 800eaa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eaaa:	6453      	str	r3, [r2, #68]	; 0x44
 800eaac:	4b08      	ldr	r3, [pc, #32]	; (800ead0 <HAL_PCD_MspInit+0xa0>)
 800eaae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eab4:	60fb      	str	r3, [r7, #12]
 800eab6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eab8:	2200      	movs	r2, #0
 800eaba:	2100      	movs	r1, #0
 800eabc:	2043      	movs	r0, #67	; 0x43
 800eabe:	f7f7 ff54 	bl	800696a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eac2:	2043      	movs	r0, #67	; 0x43
 800eac4:	f7f7 ff6d 	bl	80069a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eac8:	bf00      	nop
 800eaca:	3728      	adds	r7, #40	; 0x28
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	40023800 	.word	0x40023800
 800ead4:	40020000 	.word	0x40020000

0800ead8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800eaec:	4619      	mov	r1, r3
 800eaee:	4610      	mov	r0, r2
 800eaf0:	f7fe fd51 	bl	800d596 <USBD_LL_SetupStage>
}
 800eaf4:	bf00      	nop
 800eaf6:	3708      	adds	r7, #8
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	460b      	mov	r3, r1
 800eb06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800eb0e:	78fa      	ldrb	r2, [r7, #3]
 800eb10:	6879      	ldr	r1, [r7, #4]
 800eb12:	4613      	mov	r3, r2
 800eb14:	00db      	lsls	r3, r3, #3
 800eb16:	1a9b      	subs	r3, r3, r2
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	440b      	add	r3, r1
 800eb1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	78fb      	ldrb	r3, [r7, #3]
 800eb24:	4619      	mov	r1, r3
 800eb26:	f7fe fd83 	bl	800d630 <USBD_LL_DataOutStage>
}
 800eb2a:	bf00      	nop
 800eb2c:	3708      	adds	r7, #8
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}

0800eb32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b082      	sub	sp, #8
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	6078      	str	r0, [r7, #4]
 800eb3a:	460b      	mov	r3, r1
 800eb3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800eb44:	78fa      	ldrb	r2, [r7, #3]
 800eb46:	6879      	ldr	r1, [r7, #4]
 800eb48:	4613      	mov	r3, r2
 800eb4a:	00db      	lsls	r3, r3, #3
 800eb4c:	1a9b      	subs	r3, r3, r2
 800eb4e:	009b      	lsls	r3, r3, #2
 800eb50:	440b      	add	r3, r1
 800eb52:	3348      	adds	r3, #72	; 0x48
 800eb54:	681a      	ldr	r2, [r3, #0]
 800eb56:	78fb      	ldrb	r3, [r7, #3]
 800eb58:	4619      	mov	r1, r3
 800eb5a:	f7fe fdda 	bl	800d712 <USBD_LL_DataInStage>
}
 800eb5e:	bf00      	nop
 800eb60:	3708      	adds	r7, #8
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb66:	b580      	push	{r7, lr}
 800eb68:	b082      	sub	sp, #8
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7fe feea 	bl	800d94e <USBD_LL_SOF>
}
 800eb7a:	bf00      	nop
 800eb7c:	3708      	adds	r7, #8
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}

0800eb82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb82:	b580      	push	{r7, lr}
 800eb84:	b084      	sub	sp, #16
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d102      	bne.n	800eb9c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800eb96:	2300      	movs	r3, #0
 800eb98:	73fb      	strb	r3, [r7, #15]
 800eb9a:	e008      	b.n	800ebae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	2b02      	cmp	r3, #2
 800eba2:	d102      	bne.n	800ebaa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800eba4:	2301      	movs	r3, #1
 800eba6:	73fb      	strb	r3, [r7, #15]
 800eba8:	e001      	b.n	800ebae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ebaa:	f7f6 f88f 	bl	8004ccc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ebb4:	7bfa      	ldrb	r2, [r7, #15]
 800ebb6:	4611      	mov	r1, r2
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7fe fe90 	bl	800d8de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7fe fe49 	bl	800d85c <USBD_LL_Reset>
}
 800ebca:	bf00      	nop
 800ebcc:	3710      	adds	r7, #16
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
	...

0800ebd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7fe fe8a 	bl	800d8fc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	6812      	ldr	r2, [r2, #0]
 800ebf6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ebfa:	f043 0301 	orr.w	r3, r3, #1
 800ebfe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6a1b      	ldr	r3, [r3, #32]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d005      	beq.n	800ec14 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec08:	4b04      	ldr	r3, [pc, #16]	; (800ec1c <HAL_PCD_SuspendCallback+0x48>)
 800ec0a:	691b      	ldr	r3, [r3, #16]
 800ec0c:	4a03      	ldr	r2, [pc, #12]	; (800ec1c <HAL_PCD_SuspendCallback+0x48>)
 800ec0e:	f043 0306 	orr.w	r3, r3, #6
 800ec12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ec14:	bf00      	nop
 800ec16:	3708      	adds	r7, #8
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}
 800ec1c:	e000ed00 	.word	0xe000ed00

0800ec20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7fe fe78 	bl	800d924 <USBD_LL_Resume>
}
 800ec34:	bf00      	nop
 800ec36:	3708      	adds	r7, #8
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	460b      	mov	r3, r1
 800ec46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ec4e:	78fa      	ldrb	r2, [r7, #3]
 800ec50:	4611      	mov	r1, r2
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7fe fea1 	bl	800d99a <USBD_LL_IsoOUTIncomplete>
}
 800ec58:	bf00      	nop
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	460b      	mov	r3, r1
 800ec6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ec72:	78fa      	ldrb	r2, [r7, #3]
 800ec74:	4611      	mov	r1, r2
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7fe fe83 	bl	800d982 <USBD_LL_IsoINIncomplete>
}
 800ec7c:	bf00      	nop
 800ec7e:	3708      	adds	r7, #8
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7fe fe8d 	bl	800d9b2 <USBD_LL_DevConnected>
}
 800ec98:	bf00      	nop
 800ec9a:	3708      	adds	r7, #8
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7fe fe89 	bl	800d9c6 <USBD_LL_DevDisconnected>
}
 800ecb4:	bf00      	nop
 800ecb6:	3708      	adds	r7, #8
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d139      	bne.n	800ed40 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eccc:	4a1f      	ldr	r2, [pc, #124]	; (800ed4c <USBD_LL_Init+0x90>)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	4a1d      	ldr	r2, [pc, #116]	; (800ed4c <USBD_LL_Init+0x90>)
 800ecd8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ecdc:	4b1b      	ldr	r3, [pc, #108]	; (800ed4c <USBD_LL_Init+0x90>)
 800ecde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ece2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ece4:	4b19      	ldr	r3, [pc, #100]	; (800ed4c <USBD_LL_Init+0x90>)
 800ece6:	2204      	movs	r2, #4
 800ece8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ecea:	4b18      	ldr	r3, [pc, #96]	; (800ed4c <USBD_LL_Init+0x90>)
 800ecec:	2202      	movs	r2, #2
 800ecee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ecf0:	4b16      	ldr	r3, [pc, #88]	; (800ed4c <USBD_LL_Init+0x90>)
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ecf6:	4b15      	ldr	r3, [pc, #84]	; (800ed4c <USBD_LL_Init+0x90>)
 800ecf8:	2202      	movs	r2, #2
 800ecfa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ecfc:	4b13      	ldr	r3, [pc, #76]	; (800ed4c <USBD_LL_Init+0x90>)
 800ecfe:	2200      	movs	r2, #0
 800ed00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ed02:	4b12      	ldr	r3, [pc, #72]	; (800ed4c <USBD_LL_Init+0x90>)
 800ed04:	2200      	movs	r2, #0
 800ed06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ed08:	4b10      	ldr	r3, [pc, #64]	; (800ed4c <USBD_LL_Init+0x90>)
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ed0e:	4b0f      	ldr	r3, [pc, #60]	; (800ed4c <USBD_LL_Init+0x90>)
 800ed10:	2200      	movs	r2, #0
 800ed12:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ed14:	480d      	ldr	r0, [pc, #52]	; (800ed4c <USBD_LL_Init+0x90>)
 800ed16:	f7f9 fc0f 	bl	8008538 <HAL_PCD_Init>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d001      	beq.n	800ed24 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800ed20:	f7f5 ffd4 	bl	8004ccc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ed24:	2180      	movs	r1, #128	; 0x80
 800ed26:	4809      	ldr	r0, [pc, #36]	; (800ed4c <USBD_LL_Init+0x90>)
 800ed28:	f7fa fd4c 	bl	80097c4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ed2c:	2240      	movs	r2, #64	; 0x40
 800ed2e:	2100      	movs	r1, #0
 800ed30:	4806      	ldr	r0, [pc, #24]	; (800ed4c <USBD_LL_Init+0x90>)
 800ed32:	f7fa fd01 	bl	8009738 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ed36:	2280      	movs	r2, #128	; 0x80
 800ed38:	2101      	movs	r1, #1
 800ed3a:	4804      	ldr	r0, [pc, #16]	; (800ed4c <USBD_LL_Init+0x90>)
 800ed3c:	f7fa fcfc 	bl	8009738 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ed40:	2300      	movs	r3, #0
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3708      	adds	r7, #8
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	20001d18 	.word	0x20001d18

0800ed50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7f9 fd03 	bl	8008772 <HAL_PCD_Start>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed70:	7bfb      	ldrb	r3, [r7, #15]
 800ed72:	4618      	mov	r0, r3
 800ed74:	f000 f92e 	bl	800efd4 <USBD_Get_USB_Status>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3710      	adds	r7, #16
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ed86:	b580      	push	{r7, lr}
 800ed88:	b084      	sub	sp, #16
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
 800ed8e:	4608      	mov	r0, r1
 800ed90:	4611      	mov	r1, r2
 800ed92:	461a      	mov	r2, r3
 800ed94:	4603      	mov	r3, r0
 800ed96:	70fb      	strb	r3, [r7, #3]
 800ed98:	460b      	mov	r3, r1
 800ed9a:	70bb      	strb	r3, [r7, #2]
 800ed9c:	4613      	mov	r3, r2
 800ed9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eda0:	2300      	movs	r3, #0
 800eda2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eda4:	2300      	movs	r3, #0
 800eda6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800edae:	78bb      	ldrb	r3, [r7, #2]
 800edb0:	883a      	ldrh	r2, [r7, #0]
 800edb2:	78f9      	ldrb	r1, [r7, #3]
 800edb4:	f7fa f8c8 	bl	8008f48 <HAL_PCD_EP_Open>
 800edb8:	4603      	mov	r3, r0
 800edba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
 800edbe:	4618      	mov	r0, r3
 800edc0:	f000 f908 	bl	800efd4 <USBD_Get_USB_Status>
 800edc4:	4603      	mov	r3, r0
 800edc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3710      	adds	r7, #16
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}

0800edd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edd2:	b580      	push	{r7, lr}
 800edd4:	b084      	sub	sp, #16
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	6078      	str	r0, [r7, #4]
 800edda:	460b      	mov	r3, r1
 800eddc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edde:	2300      	movs	r3, #0
 800ede0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ede2:	2300      	movs	r3, #0
 800ede4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800edec:	78fa      	ldrb	r2, [r7, #3]
 800edee:	4611      	mov	r1, r2
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7fa f911 	bl	8009018 <HAL_PCD_EP_Close>
 800edf6:	4603      	mov	r3, r0
 800edf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edfa:	7bfb      	ldrb	r3, [r7, #15]
 800edfc:	4618      	mov	r0, r3
 800edfe:	f000 f8e9 	bl	800efd4 <USBD_Get_USB_Status>
 800ee02:	4603      	mov	r3, r0
 800ee04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3710      	adds	r7, #16
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	460b      	mov	r3, r1
 800ee1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee20:	2300      	movs	r3, #0
 800ee22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee2a:	78fa      	ldrb	r2, [r7, #3]
 800ee2c:	4611      	mov	r1, r2
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7fa f9e8 	bl	8009204 <HAL_PCD_EP_SetStall>
 800ee34:	4603      	mov	r3, r0
 800ee36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee38:	7bfb      	ldrb	r3, [r7, #15]
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f000 f8ca 	bl	800efd4 <USBD_Get_USB_Status>
 800ee40:	4603      	mov	r3, r0
 800ee42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3710      	adds	r7, #16
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}

0800ee4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b084      	sub	sp, #16
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	6078      	str	r0, [r7, #4]
 800ee56:	460b      	mov	r3, r1
 800ee58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee68:	78fa      	ldrb	r2, [r7, #3]
 800ee6a:	4611      	mov	r1, r2
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7fa fa2d 	bl	80092cc <HAL_PCD_EP_ClrStall>
 800ee72:	4603      	mov	r3, r0
 800ee74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee76:	7bfb      	ldrb	r3, [r7, #15]
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f000 f8ab 	bl	800efd4 <USBD_Get_USB_Status>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee82:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	3710      	adds	r7, #16
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b085      	sub	sp, #20
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	460b      	mov	r3, r1
 800ee96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	da0b      	bge.n	800eec0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eea8:	78fb      	ldrb	r3, [r7, #3]
 800eeaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eeae:	68f9      	ldr	r1, [r7, #12]
 800eeb0:	4613      	mov	r3, r2
 800eeb2:	00db      	lsls	r3, r3, #3
 800eeb4:	1a9b      	subs	r3, r3, r2
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	440b      	add	r3, r1
 800eeba:	333e      	adds	r3, #62	; 0x3e
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	e00b      	b.n	800eed8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eec0:	78fb      	ldrb	r3, [r7, #3]
 800eec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eec6:	68f9      	ldr	r1, [r7, #12]
 800eec8:	4613      	mov	r3, r2
 800eeca:	00db      	lsls	r3, r3, #3
 800eecc:	1a9b      	subs	r3, r3, r2
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	440b      	add	r3, r1
 800eed2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eed6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3714      	adds	r7, #20
 800eedc:	46bd      	mov	sp, r7
 800eede:	bc80      	pop	{r7}
 800eee0:	4770      	bx	lr

0800eee2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eee2:	b580      	push	{r7, lr}
 800eee4:	b084      	sub	sp, #16
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
 800eeea:	460b      	mov	r3, r1
 800eeec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eeee:	2300      	movs	r3, #0
 800eef0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eef2:	2300      	movs	r3, #0
 800eef4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eefc:	78fa      	ldrb	r2, [r7, #3]
 800eefe:	4611      	mov	r1, r2
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7f9 fffc 	bl	8008efe <HAL_PCD_SetAddress>
 800ef06:	4603      	mov	r3, r0
 800ef08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef0a:	7bfb      	ldrb	r3, [r7, #15]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f000 f861 	bl	800efd4 <USBD_Get_USB_Status>
 800ef12:	4603      	mov	r3, r0
 800ef14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3710      	adds	r7, #16
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b086      	sub	sp, #24
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	60f8      	str	r0, [r7, #12]
 800ef28:	607a      	str	r2, [r7, #4]
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	460b      	mov	r3, r1
 800ef2e:	72fb      	strb	r3, [r7, #11]
 800ef30:	4613      	mov	r3, r2
 800ef32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef34:	2300      	movs	r3, #0
 800ef36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ef42:	893b      	ldrh	r3, [r7, #8]
 800ef44:	7af9      	ldrb	r1, [r7, #11]
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	f7fa f912 	bl	8009170 <HAL_PCD_EP_Transmit>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef50:	7dfb      	ldrb	r3, [r7, #23]
 800ef52:	4618      	mov	r0, r3
 800ef54:	f000 f83e 	bl	800efd4 <USBD_Get_USB_Status>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ef5c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3718      	adds	r7, #24
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}

0800ef66 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ef66:	b580      	push	{r7, lr}
 800ef68:	b086      	sub	sp, #24
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	60f8      	str	r0, [r7, #12]
 800ef6e:	607a      	str	r2, [r7, #4]
 800ef70:	461a      	mov	r2, r3
 800ef72:	460b      	mov	r3, r1
 800ef74:	72fb      	strb	r3, [r7, #11]
 800ef76:	4613      	mov	r3, r2
 800ef78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ef88:	893b      	ldrh	r3, [r7, #8]
 800ef8a:	7af9      	ldrb	r1, [r7, #11]
 800ef8c:	687a      	ldr	r2, [r7, #4]
 800ef8e:	f7fa f88d 	bl	80090ac <HAL_PCD_EP_Receive>
 800ef92:	4603      	mov	r3, r0
 800ef94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef96:	7dfb      	ldrb	r3, [r7, #23]
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f000 f81b 	bl	800efd4 <USBD_Get_USB_Status>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800efa2:	7dbb      	ldrb	r3, [r7, #22]
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3718      	adds	r7, #24
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}

0800efac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	460b      	mov	r3, r1
 800efb6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800efbe:	78fa      	ldrb	r2, [r7, #3]
 800efc0:	4611      	mov	r1, r2
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fa f8bd 	bl	8009142 <HAL_PCD_EP_GetRxCount>
 800efc8:	4603      	mov	r3, r0
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3708      	adds	r7, #8
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}
	...

0800efd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800efd4:	b480      	push	{r7}
 800efd6:	b085      	sub	sp, #20
 800efd8:	af00      	add	r7, sp, #0
 800efda:	4603      	mov	r3, r0
 800efdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efde:	2300      	movs	r3, #0
 800efe0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800efe2:	79fb      	ldrb	r3, [r7, #7]
 800efe4:	2b03      	cmp	r3, #3
 800efe6:	d817      	bhi.n	800f018 <USBD_Get_USB_Status+0x44>
 800efe8:	a201      	add	r2, pc, #4	; (adr r2, 800eff0 <USBD_Get_USB_Status+0x1c>)
 800efea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efee:	bf00      	nop
 800eff0:	0800f001 	.word	0x0800f001
 800eff4:	0800f007 	.word	0x0800f007
 800eff8:	0800f00d 	.word	0x0800f00d
 800effc:	0800f013 	.word	0x0800f013
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f000:	2300      	movs	r3, #0
 800f002:	73fb      	strb	r3, [r7, #15]
    break;
 800f004:	e00b      	b.n	800f01e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f006:	2302      	movs	r3, #2
 800f008:	73fb      	strb	r3, [r7, #15]
    break;
 800f00a:	e008      	b.n	800f01e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f00c:	2301      	movs	r3, #1
 800f00e:	73fb      	strb	r3, [r7, #15]
    break;
 800f010:	e005      	b.n	800f01e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f012:	2302      	movs	r3, #2
 800f014:	73fb      	strb	r3, [r7, #15]
    break;
 800f016:	e002      	b.n	800f01e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f018:	2302      	movs	r3, #2
 800f01a:	73fb      	strb	r3, [r7, #15]
    break;
 800f01c:	bf00      	nop
  }
  return usb_status;
 800f01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f020:	4618      	mov	r0, r3
 800f022:	3714      	adds	r7, #20
 800f024:	46bd      	mov	sp, r7
 800f026:	bc80      	pop	{r7}
 800f028:	4770      	bx	lr
 800f02a:	bf00      	nop

0800f02c <cos>:
 800f02c:	b530      	push	{r4, r5, lr}
 800f02e:	4a1e      	ldr	r2, [pc, #120]	; (800f0a8 <cos+0x7c>)
 800f030:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f034:	4293      	cmp	r3, r2
 800f036:	b087      	sub	sp, #28
 800f038:	dc04      	bgt.n	800f044 <cos+0x18>
 800f03a:	2200      	movs	r2, #0
 800f03c:	2300      	movs	r3, #0
 800f03e:	f000 ff23 	bl	800fe88 <__kernel_cos>
 800f042:	e006      	b.n	800f052 <cos+0x26>
 800f044:	4a19      	ldr	r2, [pc, #100]	; (800f0ac <cos+0x80>)
 800f046:	4293      	cmp	r3, r2
 800f048:	dd05      	ble.n	800f056 <cos+0x2a>
 800f04a:	4602      	mov	r2, r0
 800f04c:	460b      	mov	r3, r1
 800f04e:	f7f1 f8c7 	bl	80001e0 <__aeabi_dsub>
 800f052:	b007      	add	sp, #28
 800f054:	bd30      	pop	{r4, r5, pc}
 800f056:	aa02      	add	r2, sp, #8
 800f058:	f000 fa32 	bl	800f4c0 <__ieee754_rem_pio2>
 800f05c:	f000 0003 	and.w	r0, r0, #3
 800f060:	2801      	cmp	r0, #1
 800f062:	d007      	beq.n	800f074 <cos+0x48>
 800f064:	2802      	cmp	r0, #2
 800f066:	d00f      	beq.n	800f088 <cos+0x5c>
 800f068:	b9a8      	cbnz	r0, 800f096 <cos+0x6a>
 800f06a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f06e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f072:	e7e4      	b.n	800f03e <cos+0x12>
 800f074:	9000      	str	r0, [sp, #0]
 800f076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f07a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f07e:	f001 fb0b 	bl	8010698 <__kernel_sin>
 800f082:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800f086:	e7e4      	b.n	800f052 <cos+0x26>
 800f088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f08c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f090:	f000 fefa 	bl	800fe88 <__kernel_cos>
 800f094:	e7f5      	b.n	800f082 <cos+0x56>
 800f096:	2301      	movs	r3, #1
 800f098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f09c:	9300      	str	r3, [sp, #0]
 800f09e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0a2:	f001 faf9 	bl	8010698 <__kernel_sin>
 800f0a6:	e7d4      	b.n	800f052 <cos+0x26>
 800f0a8:	3fe921fb 	.word	0x3fe921fb
 800f0ac:	7fefffff 	.word	0x7fefffff

0800f0b0 <sin>:
 800f0b0:	b530      	push	{r4, r5, lr}
 800f0b2:	4a20      	ldr	r2, [pc, #128]	; (800f134 <sin+0x84>)
 800f0b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	b087      	sub	sp, #28
 800f0bc:	dc06      	bgt.n	800f0cc <sin+0x1c>
 800f0be:	2300      	movs	r3, #0
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	9300      	str	r3, [sp, #0]
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	f001 fae7 	bl	8010698 <__kernel_sin>
 800f0ca:	e006      	b.n	800f0da <sin+0x2a>
 800f0cc:	4a1a      	ldr	r2, [pc, #104]	; (800f138 <sin+0x88>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	dd05      	ble.n	800f0de <sin+0x2e>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	f7f1 f883 	bl	80001e0 <__aeabi_dsub>
 800f0da:	b007      	add	sp, #28
 800f0dc:	bd30      	pop	{r4, r5, pc}
 800f0de:	aa02      	add	r2, sp, #8
 800f0e0:	f000 f9ee 	bl	800f4c0 <__ieee754_rem_pio2>
 800f0e4:	f000 0003 	and.w	r0, r0, #3
 800f0e8:	2801      	cmp	r0, #1
 800f0ea:	d009      	beq.n	800f100 <sin+0x50>
 800f0ec:	2802      	cmp	r0, #2
 800f0ee:	d00e      	beq.n	800f10e <sin+0x5e>
 800f0f0:	b9c0      	cbnz	r0, 800f124 <sin+0x74>
 800f0f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	9300      	str	r3, [sp, #0]
 800f0fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0fe:	e7e2      	b.n	800f0c6 <sin+0x16>
 800f100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f108:	f000 febe 	bl	800fe88 <__kernel_cos>
 800f10c:	e7e5      	b.n	800f0da <sin+0x2a>
 800f10e:	2301      	movs	r3, #1
 800f110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f114:	9300      	str	r3, [sp, #0]
 800f116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f11a:	f001 fabd 	bl	8010698 <__kernel_sin>
 800f11e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800f122:	e7da      	b.n	800f0da <sin+0x2a>
 800f124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f128:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f12c:	f000 feac 	bl	800fe88 <__kernel_cos>
 800f130:	e7f5      	b.n	800f11e <sin+0x6e>
 800f132:	bf00      	nop
 800f134:	3fe921fb 	.word	0x3fe921fb
 800f138:	7fefffff 	.word	0x7fefffff

0800f13c <atanf>:
 800f13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f140:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800f144:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800f148:	4604      	mov	r4, r0
 800f14a:	4680      	mov	r8, r0
 800f14c:	db0e      	blt.n	800f16c <atanf+0x30>
 800f14e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f152:	dd04      	ble.n	800f15e <atanf+0x22>
 800f154:	4601      	mov	r1, r0
 800f156:	f7f1 fd49 	bl	8000bec <__addsf3>
 800f15a:	4604      	mov	r4, r0
 800f15c:	e003      	b.n	800f166 <atanf+0x2a>
 800f15e:	2800      	cmp	r0, #0
 800f160:	f300 80ce 	bgt.w	800f300 <atanf+0x1c4>
 800f164:	4c67      	ldr	r4, [pc, #412]	; (800f304 <atanf+0x1c8>)
 800f166:	4620      	mov	r0, r4
 800f168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f16c:	4b66      	ldr	r3, [pc, #408]	; (800f308 <atanf+0x1cc>)
 800f16e:	429d      	cmp	r5, r3
 800f170:	dc0e      	bgt.n	800f190 <atanf+0x54>
 800f172:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800f176:	da08      	bge.n	800f18a <atanf+0x4e>
 800f178:	4964      	ldr	r1, [pc, #400]	; (800f30c <atanf+0x1d0>)
 800f17a:	f7f1 fd37 	bl	8000bec <__addsf3>
 800f17e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f182:	f7f1 fff7 	bl	8001174 <__aeabi_fcmpgt>
 800f186:	2800      	cmp	r0, #0
 800f188:	d1ed      	bne.n	800f166 <atanf+0x2a>
 800f18a:	f04f 36ff 	mov.w	r6, #4294967295
 800f18e:	e01c      	b.n	800f1ca <atanf+0x8e>
 800f190:	f000 f914 	bl	800f3bc <fabsf>
 800f194:	4b5e      	ldr	r3, [pc, #376]	; (800f310 <atanf+0x1d4>)
 800f196:	4604      	mov	r4, r0
 800f198:	429d      	cmp	r5, r3
 800f19a:	dc7c      	bgt.n	800f296 <atanf+0x15a>
 800f19c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800f1a0:	429d      	cmp	r5, r3
 800f1a2:	dc67      	bgt.n	800f274 <atanf+0x138>
 800f1a4:	4601      	mov	r1, r0
 800f1a6:	f7f1 fd21 	bl	8000bec <__addsf3>
 800f1aa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f1ae:	f7f1 fd1b 	bl	8000be8 <__aeabi_fsub>
 800f1b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f7f1 fd17 	bl	8000bec <__addsf3>
 800f1be:	4601      	mov	r1, r0
 800f1c0:	4628      	mov	r0, r5
 800f1c2:	f7f1 fecf 	bl	8000f64 <__aeabi_fdiv>
 800f1c6:	2600      	movs	r6, #0
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	4621      	mov	r1, r4
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	f7f1 fe15 	bl	8000dfc <__aeabi_fmul>
 800f1d2:	4601      	mov	r1, r0
 800f1d4:	4607      	mov	r7, r0
 800f1d6:	f7f1 fe11 	bl	8000dfc <__aeabi_fmul>
 800f1da:	4605      	mov	r5, r0
 800f1dc:	494d      	ldr	r1, [pc, #308]	; (800f314 <atanf+0x1d8>)
 800f1de:	f7f1 fe0d 	bl	8000dfc <__aeabi_fmul>
 800f1e2:	494d      	ldr	r1, [pc, #308]	; (800f318 <atanf+0x1dc>)
 800f1e4:	f7f1 fd02 	bl	8000bec <__addsf3>
 800f1e8:	4629      	mov	r1, r5
 800f1ea:	f7f1 fe07 	bl	8000dfc <__aeabi_fmul>
 800f1ee:	494b      	ldr	r1, [pc, #300]	; (800f31c <atanf+0x1e0>)
 800f1f0:	f7f1 fcfc 	bl	8000bec <__addsf3>
 800f1f4:	4629      	mov	r1, r5
 800f1f6:	f7f1 fe01 	bl	8000dfc <__aeabi_fmul>
 800f1fa:	4949      	ldr	r1, [pc, #292]	; (800f320 <atanf+0x1e4>)
 800f1fc:	f7f1 fcf6 	bl	8000bec <__addsf3>
 800f200:	4629      	mov	r1, r5
 800f202:	f7f1 fdfb 	bl	8000dfc <__aeabi_fmul>
 800f206:	4947      	ldr	r1, [pc, #284]	; (800f324 <atanf+0x1e8>)
 800f208:	f7f1 fcf0 	bl	8000bec <__addsf3>
 800f20c:	4629      	mov	r1, r5
 800f20e:	f7f1 fdf5 	bl	8000dfc <__aeabi_fmul>
 800f212:	4945      	ldr	r1, [pc, #276]	; (800f328 <atanf+0x1ec>)
 800f214:	f7f1 fcea 	bl	8000bec <__addsf3>
 800f218:	4639      	mov	r1, r7
 800f21a:	f7f1 fdef 	bl	8000dfc <__aeabi_fmul>
 800f21e:	4943      	ldr	r1, [pc, #268]	; (800f32c <atanf+0x1f0>)
 800f220:	4607      	mov	r7, r0
 800f222:	4628      	mov	r0, r5
 800f224:	f7f1 fdea 	bl	8000dfc <__aeabi_fmul>
 800f228:	4941      	ldr	r1, [pc, #260]	; (800f330 <atanf+0x1f4>)
 800f22a:	f7f1 fcdd 	bl	8000be8 <__aeabi_fsub>
 800f22e:	4629      	mov	r1, r5
 800f230:	f7f1 fde4 	bl	8000dfc <__aeabi_fmul>
 800f234:	493f      	ldr	r1, [pc, #252]	; (800f334 <atanf+0x1f8>)
 800f236:	f7f1 fcd7 	bl	8000be8 <__aeabi_fsub>
 800f23a:	4629      	mov	r1, r5
 800f23c:	f7f1 fdde 	bl	8000dfc <__aeabi_fmul>
 800f240:	493d      	ldr	r1, [pc, #244]	; (800f338 <atanf+0x1fc>)
 800f242:	f7f1 fcd1 	bl	8000be8 <__aeabi_fsub>
 800f246:	4629      	mov	r1, r5
 800f248:	f7f1 fdd8 	bl	8000dfc <__aeabi_fmul>
 800f24c:	493b      	ldr	r1, [pc, #236]	; (800f33c <atanf+0x200>)
 800f24e:	f7f1 fccb 	bl	8000be8 <__aeabi_fsub>
 800f252:	4629      	mov	r1, r5
 800f254:	f7f1 fdd2 	bl	8000dfc <__aeabi_fmul>
 800f258:	4601      	mov	r1, r0
 800f25a:	4638      	mov	r0, r7
 800f25c:	f7f1 fcc6 	bl	8000bec <__addsf3>
 800f260:	4621      	mov	r1, r4
 800f262:	f7f1 fdcb 	bl	8000dfc <__aeabi_fmul>
 800f266:	1c73      	adds	r3, r6, #1
 800f268:	4601      	mov	r1, r0
 800f26a:	d133      	bne.n	800f2d4 <atanf+0x198>
 800f26c:	4620      	mov	r0, r4
 800f26e:	f7f1 fcbb 	bl	8000be8 <__aeabi_fsub>
 800f272:	e772      	b.n	800f15a <atanf+0x1e>
 800f274:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f278:	f7f1 fcb6 	bl	8000be8 <__aeabi_fsub>
 800f27c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f280:	4605      	mov	r5, r0
 800f282:	4620      	mov	r0, r4
 800f284:	f7f1 fcb2 	bl	8000bec <__addsf3>
 800f288:	4601      	mov	r1, r0
 800f28a:	4628      	mov	r0, r5
 800f28c:	f7f1 fe6a 	bl	8000f64 <__aeabi_fdiv>
 800f290:	2601      	movs	r6, #1
 800f292:	4604      	mov	r4, r0
 800f294:	e799      	b.n	800f1ca <atanf+0x8e>
 800f296:	4b2a      	ldr	r3, [pc, #168]	; (800f340 <atanf+0x204>)
 800f298:	429d      	cmp	r5, r3
 800f29a:	dc14      	bgt.n	800f2c6 <atanf+0x18a>
 800f29c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800f2a0:	f7f1 fca2 	bl	8000be8 <__aeabi_fsub>
 800f2a4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800f2a8:	4605      	mov	r5, r0
 800f2aa:	4620      	mov	r0, r4
 800f2ac:	f7f1 fda6 	bl	8000dfc <__aeabi_fmul>
 800f2b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f2b4:	f7f1 fc9a 	bl	8000bec <__addsf3>
 800f2b8:	4601      	mov	r1, r0
 800f2ba:	4628      	mov	r0, r5
 800f2bc:	f7f1 fe52 	bl	8000f64 <__aeabi_fdiv>
 800f2c0:	2602      	movs	r6, #2
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	e781      	b.n	800f1ca <atanf+0x8e>
 800f2c6:	4601      	mov	r1, r0
 800f2c8:	481e      	ldr	r0, [pc, #120]	; (800f344 <atanf+0x208>)
 800f2ca:	f7f1 fe4b 	bl	8000f64 <__aeabi_fdiv>
 800f2ce:	2603      	movs	r6, #3
 800f2d0:	4604      	mov	r4, r0
 800f2d2:	e77a      	b.n	800f1ca <atanf+0x8e>
 800f2d4:	4b1c      	ldr	r3, [pc, #112]	; (800f348 <atanf+0x20c>)
 800f2d6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800f2da:	f7f1 fc85 	bl	8000be8 <__aeabi_fsub>
 800f2de:	4621      	mov	r1, r4
 800f2e0:	f7f1 fc82 	bl	8000be8 <__aeabi_fsub>
 800f2e4:	4b19      	ldr	r3, [pc, #100]	; (800f34c <atanf+0x210>)
 800f2e6:	4601      	mov	r1, r0
 800f2e8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f2ec:	f7f1 fc7c 	bl	8000be8 <__aeabi_fsub>
 800f2f0:	f1b8 0f00 	cmp.w	r8, #0
 800f2f4:	4604      	mov	r4, r0
 800f2f6:	f6bf af36 	bge.w	800f166 <atanf+0x2a>
 800f2fa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f2fe:	e72c      	b.n	800f15a <atanf+0x1e>
 800f300:	4c13      	ldr	r4, [pc, #76]	; (800f350 <atanf+0x214>)
 800f302:	e730      	b.n	800f166 <atanf+0x2a>
 800f304:	bfc90fdb 	.word	0xbfc90fdb
 800f308:	3edfffff 	.word	0x3edfffff
 800f30c:	7149f2ca 	.word	0x7149f2ca
 800f310:	3f97ffff 	.word	0x3f97ffff
 800f314:	3c8569d7 	.word	0x3c8569d7
 800f318:	3d4bda59 	.word	0x3d4bda59
 800f31c:	3d886b35 	.word	0x3d886b35
 800f320:	3dba2e6e 	.word	0x3dba2e6e
 800f324:	3e124925 	.word	0x3e124925
 800f328:	3eaaaaab 	.word	0x3eaaaaab
 800f32c:	bd15a221 	.word	0xbd15a221
 800f330:	3d6ef16b 	.word	0x3d6ef16b
 800f334:	3d9d8795 	.word	0x3d9d8795
 800f338:	3de38e38 	.word	0x3de38e38
 800f33c:	3e4ccccd 	.word	0x3e4ccccd
 800f340:	401bffff 	.word	0x401bffff
 800f344:	bf800000 	.word	0xbf800000
 800f348:	080149bc 	.word	0x080149bc
 800f34c:	080149ac 	.word	0x080149ac
 800f350:	3fc90fdb 	.word	0x3fc90fdb

0800f354 <cosf>:
 800f354:	b507      	push	{r0, r1, r2, lr}
 800f356:	4a18      	ldr	r2, [pc, #96]	; (800f3b8 <cosf+0x64>)
 800f358:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f35c:	4293      	cmp	r3, r2
 800f35e:	4601      	mov	r1, r0
 800f360:	dc03      	bgt.n	800f36a <cosf+0x16>
 800f362:	2100      	movs	r1, #0
 800f364:	f001 fa4e 	bl	8010804 <__kernel_cosf>
 800f368:	e004      	b.n	800f374 <cosf+0x20>
 800f36a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f36e:	db04      	blt.n	800f37a <cosf+0x26>
 800f370:	f7f1 fc3a 	bl	8000be8 <__aeabi_fsub>
 800f374:	b003      	add	sp, #12
 800f376:	f85d fb04 	ldr.w	pc, [sp], #4
 800f37a:	4669      	mov	r1, sp
 800f37c:	f000 fbd4 	bl	800fb28 <__ieee754_rem_pio2f>
 800f380:	f000 0203 	and.w	r2, r0, #3
 800f384:	2a01      	cmp	r2, #1
 800f386:	d005      	beq.n	800f394 <cosf+0x40>
 800f388:	2a02      	cmp	r2, #2
 800f38a:	d00a      	beq.n	800f3a2 <cosf+0x4e>
 800f38c:	b972      	cbnz	r2, 800f3ac <cosf+0x58>
 800f38e:	9901      	ldr	r1, [sp, #4]
 800f390:	9800      	ldr	r0, [sp, #0]
 800f392:	e7e7      	b.n	800f364 <cosf+0x10>
 800f394:	9901      	ldr	r1, [sp, #4]
 800f396:	9800      	ldr	r0, [sp, #0]
 800f398:	f001 fd6a 	bl	8010e70 <__kernel_sinf>
 800f39c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f3a0:	e7e8      	b.n	800f374 <cosf+0x20>
 800f3a2:	9901      	ldr	r1, [sp, #4]
 800f3a4:	9800      	ldr	r0, [sp, #0]
 800f3a6:	f001 fa2d 	bl	8010804 <__kernel_cosf>
 800f3aa:	e7f7      	b.n	800f39c <cosf+0x48>
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	9901      	ldr	r1, [sp, #4]
 800f3b0:	9800      	ldr	r0, [sp, #0]
 800f3b2:	f001 fd5d 	bl	8010e70 <__kernel_sinf>
 800f3b6:	e7dd      	b.n	800f374 <cosf+0x20>
 800f3b8:	3f490fd8 	.word	0x3f490fd8

0800f3bc <fabsf>:
 800f3bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f3c0:	4770      	bx	lr
	...

0800f3c4 <sinf>:
 800f3c4:	b507      	push	{r0, r1, r2, lr}
 800f3c6:	4a19      	ldr	r2, [pc, #100]	; (800f42c <sinf+0x68>)
 800f3c8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	4601      	mov	r1, r0
 800f3d0:	dc04      	bgt.n	800f3dc <sinf+0x18>
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	2100      	movs	r1, #0
 800f3d6:	f001 fd4b 	bl	8010e70 <__kernel_sinf>
 800f3da:	e004      	b.n	800f3e6 <sinf+0x22>
 800f3dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f3e0:	db04      	blt.n	800f3ec <sinf+0x28>
 800f3e2:	f7f1 fc01 	bl	8000be8 <__aeabi_fsub>
 800f3e6:	b003      	add	sp, #12
 800f3e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f3ec:	4669      	mov	r1, sp
 800f3ee:	f000 fb9b 	bl	800fb28 <__ieee754_rem_pio2f>
 800f3f2:	f000 0003 	and.w	r0, r0, #3
 800f3f6:	2801      	cmp	r0, #1
 800f3f8:	d006      	beq.n	800f408 <sinf+0x44>
 800f3fa:	2802      	cmp	r0, #2
 800f3fc:	d009      	beq.n	800f412 <sinf+0x4e>
 800f3fe:	b980      	cbnz	r0, 800f422 <sinf+0x5e>
 800f400:	2201      	movs	r2, #1
 800f402:	9901      	ldr	r1, [sp, #4]
 800f404:	9800      	ldr	r0, [sp, #0]
 800f406:	e7e6      	b.n	800f3d6 <sinf+0x12>
 800f408:	9901      	ldr	r1, [sp, #4]
 800f40a:	9800      	ldr	r0, [sp, #0]
 800f40c:	f001 f9fa 	bl	8010804 <__kernel_cosf>
 800f410:	e7e9      	b.n	800f3e6 <sinf+0x22>
 800f412:	2201      	movs	r2, #1
 800f414:	9901      	ldr	r1, [sp, #4]
 800f416:	9800      	ldr	r0, [sp, #0]
 800f418:	f001 fd2a 	bl	8010e70 <__kernel_sinf>
 800f41c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f420:	e7e1      	b.n	800f3e6 <sinf+0x22>
 800f422:	9901      	ldr	r1, [sp, #4]
 800f424:	9800      	ldr	r0, [sp, #0]
 800f426:	f001 f9ed 	bl	8010804 <__kernel_cosf>
 800f42a:	e7f7      	b.n	800f41c <sinf+0x58>
 800f42c:	3f490fd8 	.word	0x3f490fd8

0800f430 <asinf>:
 800f430:	b538      	push	{r3, r4, r5, lr}
 800f432:	4604      	mov	r4, r0
 800f434:	f000 fa34 	bl	800f8a0 <__ieee754_asinf>
 800f438:	4b0e      	ldr	r3, [pc, #56]	; (800f474 <asinf+0x44>)
 800f43a:	4605      	mov	r5, r0
 800f43c:	f993 3000 	ldrsb.w	r3, [r3]
 800f440:	3301      	adds	r3, #1
 800f442:	d015      	beq.n	800f470 <asinf+0x40>
 800f444:	4621      	mov	r1, r4
 800f446:	4620      	mov	r0, r4
 800f448:	f7f1 fe9e 	bl	8001188 <__aeabi_fcmpun>
 800f44c:	b980      	cbnz	r0, 800f470 <asinf+0x40>
 800f44e:	4620      	mov	r0, r4
 800f450:	f7ff ffb4 	bl	800f3bc <fabsf>
 800f454:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f458:	f7f1 fe8c 	bl	8001174 <__aeabi_fcmpgt>
 800f45c:	b140      	cbz	r0, 800f470 <asinf+0x40>
 800f45e:	f001 ff1b 	bl	8011298 <__errno>
 800f462:	2321      	movs	r3, #33	; 0x21
 800f464:	6003      	str	r3, [r0, #0]
 800f466:	4804      	ldr	r0, [pc, #16]	; (800f478 <asinf+0x48>)
 800f468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f46c:	f001 bec4 	b.w	80111f8 <nanf>
 800f470:	4628      	mov	r0, r5
 800f472:	bd38      	pop	{r3, r4, r5, pc}
 800f474:	200001e6 	.word	0x200001e6
 800f478:	080151f0 	.word	0x080151f0

0800f47c <sqrtf>:
 800f47c:	b538      	push	{r3, r4, r5, lr}
 800f47e:	4605      	mov	r5, r0
 800f480:	f000 fcb0 	bl	800fde4 <__ieee754_sqrtf>
 800f484:	4b0d      	ldr	r3, [pc, #52]	; (800f4bc <sqrtf+0x40>)
 800f486:	4604      	mov	r4, r0
 800f488:	f993 3000 	ldrsb.w	r3, [r3]
 800f48c:	3301      	adds	r3, #1
 800f48e:	d012      	beq.n	800f4b6 <sqrtf+0x3a>
 800f490:	4629      	mov	r1, r5
 800f492:	4628      	mov	r0, r5
 800f494:	f7f1 fe78 	bl	8001188 <__aeabi_fcmpun>
 800f498:	b968      	cbnz	r0, 800f4b6 <sqrtf+0x3a>
 800f49a:	2100      	movs	r1, #0
 800f49c:	4628      	mov	r0, r5
 800f49e:	f7f1 fe4b 	bl	8001138 <__aeabi_fcmplt>
 800f4a2:	b140      	cbz	r0, 800f4b6 <sqrtf+0x3a>
 800f4a4:	f001 fef8 	bl	8011298 <__errno>
 800f4a8:	2321      	movs	r3, #33	; 0x21
 800f4aa:	2100      	movs	r1, #0
 800f4ac:	6003      	str	r3, [r0, #0]
 800f4ae:	4608      	mov	r0, r1
 800f4b0:	f7f1 fd58 	bl	8000f64 <__aeabi_fdiv>
 800f4b4:	4604      	mov	r4, r0
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	bd38      	pop	{r3, r4, r5, pc}
 800f4ba:	bf00      	nop
 800f4bc:	200001e6 	.word	0x200001e6

0800f4c0 <__ieee754_rem_pio2>:
 800f4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4c4:	4614      	mov	r4, r2
 800f4c6:	4ac4      	ldr	r2, [pc, #784]	; (800f7d8 <__ieee754_rem_pio2+0x318>)
 800f4c8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800f4cc:	b08d      	sub	sp, #52	; 0x34
 800f4ce:	4592      	cmp	sl, r2
 800f4d0:	9104      	str	r1, [sp, #16]
 800f4d2:	dc07      	bgt.n	800f4e4 <__ieee754_rem_pio2+0x24>
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	e9c4 0100 	strd	r0, r1, [r4]
 800f4dc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f4e0:	2500      	movs	r5, #0
 800f4e2:	e024      	b.n	800f52e <__ieee754_rem_pio2+0x6e>
 800f4e4:	4abd      	ldr	r2, [pc, #756]	; (800f7dc <__ieee754_rem_pio2+0x31c>)
 800f4e6:	4592      	cmp	sl, r2
 800f4e8:	dc72      	bgt.n	800f5d0 <__ieee754_rem_pio2+0x110>
 800f4ea:	9b04      	ldr	r3, [sp, #16]
 800f4ec:	4dbc      	ldr	r5, [pc, #752]	; (800f7e0 <__ieee754_rem_pio2+0x320>)
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	a3ab      	add	r3, pc, #684	; (adr r3, 800f7a0 <__ieee754_rem_pio2+0x2e0>)
 800f4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f6:	dd36      	ble.n	800f566 <__ieee754_rem_pio2+0xa6>
 800f4f8:	f7f0 fe72 	bl	80001e0 <__aeabi_dsub>
 800f4fc:	45aa      	cmp	sl, r5
 800f4fe:	4606      	mov	r6, r0
 800f500:	460f      	mov	r7, r1
 800f502:	d018      	beq.n	800f536 <__ieee754_rem_pio2+0x76>
 800f504:	a3a8      	add	r3, pc, #672	; (adr r3, 800f7a8 <__ieee754_rem_pio2+0x2e8>)
 800f506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50a:	f7f0 fe69 	bl	80001e0 <__aeabi_dsub>
 800f50e:	4602      	mov	r2, r0
 800f510:	460b      	mov	r3, r1
 800f512:	4630      	mov	r0, r6
 800f514:	e9c4 2300 	strd	r2, r3, [r4]
 800f518:	4639      	mov	r1, r7
 800f51a:	f7f0 fe61 	bl	80001e0 <__aeabi_dsub>
 800f51e:	a3a2      	add	r3, pc, #648	; (adr r3, 800f7a8 <__ieee754_rem_pio2+0x2e8>)
 800f520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f524:	f7f0 fe5c 	bl	80001e0 <__aeabi_dsub>
 800f528:	2501      	movs	r5, #1
 800f52a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f52e:	4628      	mov	r0, r5
 800f530:	b00d      	add	sp, #52	; 0x34
 800f532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f536:	a39e      	add	r3, pc, #632	; (adr r3, 800f7b0 <__ieee754_rem_pio2+0x2f0>)
 800f538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53c:	f7f0 fe50 	bl	80001e0 <__aeabi_dsub>
 800f540:	a39d      	add	r3, pc, #628	; (adr r3, 800f7b8 <__ieee754_rem_pio2+0x2f8>)
 800f542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f546:	4606      	mov	r6, r0
 800f548:	460f      	mov	r7, r1
 800f54a:	f7f0 fe49 	bl	80001e0 <__aeabi_dsub>
 800f54e:	4602      	mov	r2, r0
 800f550:	460b      	mov	r3, r1
 800f552:	4630      	mov	r0, r6
 800f554:	e9c4 2300 	strd	r2, r3, [r4]
 800f558:	4639      	mov	r1, r7
 800f55a:	f7f0 fe41 	bl	80001e0 <__aeabi_dsub>
 800f55e:	a396      	add	r3, pc, #600	; (adr r3, 800f7b8 <__ieee754_rem_pio2+0x2f8>)
 800f560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f564:	e7de      	b.n	800f524 <__ieee754_rem_pio2+0x64>
 800f566:	f7f0 fe3d 	bl	80001e4 <__adddf3>
 800f56a:	45aa      	cmp	sl, r5
 800f56c:	4606      	mov	r6, r0
 800f56e:	460f      	mov	r7, r1
 800f570:	d016      	beq.n	800f5a0 <__ieee754_rem_pio2+0xe0>
 800f572:	a38d      	add	r3, pc, #564	; (adr r3, 800f7a8 <__ieee754_rem_pio2+0x2e8>)
 800f574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f578:	f7f0 fe34 	bl	80001e4 <__adddf3>
 800f57c:	4602      	mov	r2, r0
 800f57e:	460b      	mov	r3, r1
 800f580:	4630      	mov	r0, r6
 800f582:	e9c4 2300 	strd	r2, r3, [r4]
 800f586:	4639      	mov	r1, r7
 800f588:	f7f0 fe2a 	bl	80001e0 <__aeabi_dsub>
 800f58c:	a386      	add	r3, pc, #536	; (adr r3, 800f7a8 <__ieee754_rem_pio2+0x2e8>)
 800f58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f592:	f7f0 fe27 	bl	80001e4 <__adddf3>
 800f596:	f04f 35ff 	mov.w	r5, #4294967295
 800f59a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f59e:	e7c6      	b.n	800f52e <__ieee754_rem_pio2+0x6e>
 800f5a0:	a383      	add	r3, pc, #524	; (adr r3, 800f7b0 <__ieee754_rem_pio2+0x2f0>)
 800f5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a6:	f7f0 fe1d 	bl	80001e4 <__adddf3>
 800f5aa:	a383      	add	r3, pc, #524	; (adr r3, 800f7b8 <__ieee754_rem_pio2+0x2f8>)
 800f5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b0:	4606      	mov	r6, r0
 800f5b2:	460f      	mov	r7, r1
 800f5b4:	f7f0 fe16 	bl	80001e4 <__adddf3>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	460b      	mov	r3, r1
 800f5bc:	4630      	mov	r0, r6
 800f5be:	e9c4 2300 	strd	r2, r3, [r4]
 800f5c2:	4639      	mov	r1, r7
 800f5c4:	f7f0 fe0c 	bl	80001e0 <__aeabi_dsub>
 800f5c8:	a37b      	add	r3, pc, #492	; (adr r3, 800f7b8 <__ieee754_rem_pio2+0x2f8>)
 800f5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ce:	e7e0      	b.n	800f592 <__ieee754_rem_pio2+0xd2>
 800f5d0:	4a84      	ldr	r2, [pc, #528]	; (800f7e4 <__ieee754_rem_pio2+0x324>)
 800f5d2:	4592      	cmp	sl, r2
 800f5d4:	f300 80d5 	bgt.w	800f782 <__ieee754_rem_pio2+0x2c2>
 800f5d8:	f001 fcc0 	bl	8010f5c <fabs>
 800f5dc:	a378      	add	r3, pc, #480	; (adr r3, 800f7c0 <__ieee754_rem_pio2+0x300>)
 800f5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e2:	4606      	mov	r6, r0
 800f5e4:	460f      	mov	r7, r1
 800f5e6:	f7f0 ffb3 	bl	8000550 <__aeabi_dmul>
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	4b7e      	ldr	r3, [pc, #504]	; (800f7e8 <__ieee754_rem_pio2+0x328>)
 800f5ee:	f7f0 fdf9 	bl	80001e4 <__adddf3>
 800f5f2:	f7f1 fa5d 	bl	8000ab0 <__aeabi_d2iz>
 800f5f6:	4605      	mov	r5, r0
 800f5f8:	f7f0 ff40 	bl	800047c <__aeabi_i2d>
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	460b      	mov	r3, r1
 800f600:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f604:	a366      	add	r3, pc, #408	; (adr r3, 800f7a0 <__ieee754_rem_pio2+0x2e0>)
 800f606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60a:	f7f0 ffa1 	bl	8000550 <__aeabi_dmul>
 800f60e:	4602      	mov	r2, r0
 800f610:	460b      	mov	r3, r1
 800f612:	4630      	mov	r0, r6
 800f614:	4639      	mov	r1, r7
 800f616:	f7f0 fde3 	bl	80001e0 <__aeabi_dsub>
 800f61a:	a363      	add	r3, pc, #396	; (adr r3, 800f7a8 <__ieee754_rem_pio2+0x2e8>)
 800f61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f620:	4680      	mov	r8, r0
 800f622:	4689      	mov	r9, r1
 800f624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f628:	f7f0 ff92 	bl	8000550 <__aeabi_dmul>
 800f62c:	2d1f      	cmp	r5, #31
 800f62e:	4606      	mov	r6, r0
 800f630:	460f      	mov	r7, r1
 800f632:	dc0e      	bgt.n	800f652 <__ieee754_rem_pio2+0x192>
 800f634:	4b6d      	ldr	r3, [pc, #436]	; (800f7ec <__ieee754_rem_pio2+0x32c>)
 800f636:	1e6a      	subs	r2, r5, #1
 800f638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f63c:	4553      	cmp	r3, sl
 800f63e:	d008      	beq.n	800f652 <__ieee754_rem_pio2+0x192>
 800f640:	4632      	mov	r2, r6
 800f642:	463b      	mov	r3, r7
 800f644:	4640      	mov	r0, r8
 800f646:	4649      	mov	r1, r9
 800f648:	f7f0 fdca 	bl	80001e0 <__aeabi_dsub>
 800f64c:	e9c4 0100 	strd	r0, r1, [r4]
 800f650:	e013      	b.n	800f67a <__ieee754_rem_pio2+0x1ba>
 800f652:	463b      	mov	r3, r7
 800f654:	4632      	mov	r2, r6
 800f656:	4640      	mov	r0, r8
 800f658:	4649      	mov	r1, r9
 800f65a:	f7f0 fdc1 	bl	80001e0 <__aeabi_dsub>
 800f65e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800f662:	9305      	str	r3, [sp, #20]
 800f664:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f668:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800f66c:	f1ba 0f10 	cmp.w	sl, #16
 800f670:	dc1f      	bgt.n	800f6b2 <__ieee754_rem_pio2+0x1f2>
 800f672:	4602      	mov	r2, r0
 800f674:	460b      	mov	r3, r1
 800f676:	e9c4 2300 	strd	r2, r3, [r4]
 800f67a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800f67e:	4640      	mov	r0, r8
 800f680:	4653      	mov	r3, sl
 800f682:	4649      	mov	r1, r9
 800f684:	f7f0 fdac 	bl	80001e0 <__aeabi_dsub>
 800f688:	4632      	mov	r2, r6
 800f68a:	463b      	mov	r3, r7
 800f68c:	f7f0 fda8 	bl	80001e0 <__aeabi_dsub>
 800f690:	460b      	mov	r3, r1
 800f692:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f696:	9904      	ldr	r1, [sp, #16]
 800f698:	4602      	mov	r2, r0
 800f69a:	2900      	cmp	r1, #0
 800f69c:	f6bf af47 	bge.w	800f52e <__ieee754_rem_pio2+0x6e>
 800f6a0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800f6a4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f6a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f6ac:	60e3      	str	r3, [r4, #12]
 800f6ae:	426d      	negs	r5, r5
 800f6b0:	e73d      	b.n	800f52e <__ieee754_rem_pio2+0x6e>
 800f6b2:	a33f      	add	r3, pc, #252	; (adr r3, 800f7b0 <__ieee754_rem_pio2+0x2f0>)
 800f6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6bc:	f7f0 ff48 	bl	8000550 <__aeabi_dmul>
 800f6c0:	4606      	mov	r6, r0
 800f6c2:	460f      	mov	r7, r1
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	460b      	mov	r3, r1
 800f6c8:	4640      	mov	r0, r8
 800f6ca:	4649      	mov	r1, r9
 800f6cc:	f7f0 fd88 	bl	80001e0 <__aeabi_dsub>
 800f6d0:	4602      	mov	r2, r0
 800f6d2:	460b      	mov	r3, r1
 800f6d4:	4682      	mov	sl, r0
 800f6d6:	468b      	mov	fp, r1
 800f6d8:	4640      	mov	r0, r8
 800f6da:	4649      	mov	r1, r9
 800f6dc:	f7f0 fd80 	bl	80001e0 <__aeabi_dsub>
 800f6e0:	4632      	mov	r2, r6
 800f6e2:	463b      	mov	r3, r7
 800f6e4:	f7f0 fd7c 	bl	80001e0 <__aeabi_dsub>
 800f6e8:	a333      	add	r3, pc, #204	; (adr r3, 800f7b8 <__ieee754_rem_pio2+0x2f8>)
 800f6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ee:	4606      	mov	r6, r0
 800f6f0:	460f      	mov	r7, r1
 800f6f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6f6:	f7f0 ff2b 	bl	8000550 <__aeabi_dmul>
 800f6fa:	4632      	mov	r2, r6
 800f6fc:	463b      	mov	r3, r7
 800f6fe:	f7f0 fd6f 	bl	80001e0 <__aeabi_dsub>
 800f702:	4602      	mov	r2, r0
 800f704:	460b      	mov	r3, r1
 800f706:	4606      	mov	r6, r0
 800f708:	460f      	mov	r7, r1
 800f70a:	4650      	mov	r0, sl
 800f70c:	4659      	mov	r1, fp
 800f70e:	f7f0 fd67 	bl	80001e0 <__aeabi_dsub>
 800f712:	9a05      	ldr	r2, [sp, #20]
 800f714:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f718:	1ad3      	subs	r3, r2, r3
 800f71a:	2b31      	cmp	r3, #49	; 0x31
 800f71c:	dc06      	bgt.n	800f72c <__ieee754_rem_pio2+0x26c>
 800f71e:	4602      	mov	r2, r0
 800f720:	460b      	mov	r3, r1
 800f722:	46d0      	mov	r8, sl
 800f724:	46d9      	mov	r9, fp
 800f726:	e9c4 2300 	strd	r2, r3, [r4]
 800f72a:	e7a6      	b.n	800f67a <__ieee754_rem_pio2+0x1ba>
 800f72c:	a326      	add	r3, pc, #152	; (adr r3, 800f7c8 <__ieee754_rem_pio2+0x308>)
 800f72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f736:	f7f0 ff0b 	bl	8000550 <__aeabi_dmul>
 800f73a:	4606      	mov	r6, r0
 800f73c:	460f      	mov	r7, r1
 800f73e:	4602      	mov	r2, r0
 800f740:	460b      	mov	r3, r1
 800f742:	4650      	mov	r0, sl
 800f744:	4659      	mov	r1, fp
 800f746:	f7f0 fd4b 	bl	80001e0 <__aeabi_dsub>
 800f74a:	4602      	mov	r2, r0
 800f74c:	460b      	mov	r3, r1
 800f74e:	4680      	mov	r8, r0
 800f750:	4689      	mov	r9, r1
 800f752:	4650      	mov	r0, sl
 800f754:	4659      	mov	r1, fp
 800f756:	f7f0 fd43 	bl	80001e0 <__aeabi_dsub>
 800f75a:	4632      	mov	r2, r6
 800f75c:	463b      	mov	r3, r7
 800f75e:	f7f0 fd3f 	bl	80001e0 <__aeabi_dsub>
 800f762:	a31b      	add	r3, pc, #108	; (adr r3, 800f7d0 <__ieee754_rem_pio2+0x310>)
 800f764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f768:	4606      	mov	r6, r0
 800f76a:	460f      	mov	r7, r1
 800f76c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f770:	f7f0 feee 	bl	8000550 <__aeabi_dmul>
 800f774:	4632      	mov	r2, r6
 800f776:	463b      	mov	r3, r7
 800f778:	f7f0 fd32 	bl	80001e0 <__aeabi_dsub>
 800f77c:	4606      	mov	r6, r0
 800f77e:	460f      	mov	r7, r1
 800f780:	e75e      	b.n	800f640 <__ieee754_rem_pio2+0x180>
 800f782:	4a1b      	ldr	r2, [pc, #108]	; (800f7f0 <__ieee754_rem_pio2+0x330>)
 800f784:	4592      	cmp	sl, r2
 800f786:	dd35      	ble.n	800f7f4 <__ieee754_rem_pio2+0x334>
 800f788:	4602      	mov	r2, r0
 800f78a:	460b      	mov	r3, r1
 800f78c:	f7f0 fd28 	bl	80001e0 <__aeabi_dsub>
 800f790:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f794:	e9c4 0100 	strd	r0, r1, [r4]
 800f798:	e6a2      	b.n	800f4e0 <__ieee754_rem_pio2+0x20>
 800f79a:	bf00      	nop
 800f79c:	f3af 8000 	nop.w
 800f7a0:	54400000 	.word	0x54400000
 800f7a4:	3ff921fb 	.word	0x3ff921fb
 800f7a8:	1a626331 	.word	0x1a626331
 800f7ac:	3dd0b461 	.word	0x3dd0b461
 800f7b0:	1a600000 	.word	0x1a600000
 800f7b4:	3dd0b461 	.word	0x3dd0b461
 800f7b8:	2e037073 	.word	0x2e037073
 800f7bc:	3ba3198a 	.word	0x3ba3198a
 800f7c0:	6dc9c883 	.word	0x6dc9c883
 800f7c4:	3fe45f30 	.word	0x3fe45f30
 800f7c8:	2e000000 	.word	0x2e000000
 800f7cc:	3ba3198a 	.word	0x3ba3198a
 800f7d0:	252049c1 	.word	0x252049c1
 800f7d4:	397b839a 	.word	0x397b839a
 800f7d8:	3fe921fb 	.word	0x3fe921fb
 800f7dc:	4002d97b 	.word	0x4002d97b
 800f7e0:	3ff921fb 	.word	0x3ff921fb
 800f7e4:	413921fb 	.word	0x413921fb
 800f7e8:	3fe00000 	.word	0x3fe00000
 800f7ec:	080149cc 	.word	0x080149cc
 800f7f0:	7fefffff 	.word	0x7fefffff
 800f7f4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800f7f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800f7fc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800f800:	460f      	mov	r7, r1
 800f802:	4606      	mov	r6, r0
 800f804:	f7f1 f954 	bl	8000ab0 <__aeabi_d2iz>
 800f808:	f7f0 fe38 	bl	800047c <__aeabi_i2d>
 800f80c:	4602      	mov	r2, r0
 800f80e:	460b      	mov	r3, r1
 800f810:	4630      	mov	r0, r6
 800f812:	4639      	mov	r1, r7
 800f814:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f818:	f7f0 fce2 	bl	80001e0 <__aeabi_dsub>
 800f81c:	2200      	movs	r2, #0
 800f81e:	4b1e      	ldr	r3, [pc, #120]	; (800f898 <__ieee754_rem_pio2+0x3d8>)
 800f820:	f7f0 fe96 	bl	8000550 <__aeabi_dmul>
 800f824:	460f      	mov	r7, r1
 800f826:	4606      	mov	r6, r0
 800f828:	f7f1 f942 	bl	8000ab0 <__aeabi_d2iz>
 800f82c:	f7f0 fe26 	bl	800047c <__aeabi_i2d>
 800f830:	4602      	mov	r2, r0
 800f832:	460b      	mov	r3, r1
 800f834:	4630      	mov	r0, r6
 800f836:	4639      	mov	r1, r7
 800f838:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f83c:	f7f0 fcd0 	bl	80001e0 <__aeabi_dsub>
 800f840:	2200      	movs	r2, #0
 800f842:	4b15      	ldr	r3, [pc, #84]	; (800f898 <__ieee754_rem_pio2+0x3d8>)
 800f844:	f7f0 fe84 	bl	8000550 <__aeabi_dmul>
 800f848:	f04f 0803 	mov.w	r8, #3
 800f84c:	2600      	movs	r6, #0
 800f84e:	2700      	movs	r7, #0
 800f850:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f854:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800f858:	4632      	mov	r2, r6
 800f85a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800f85e:	463b      	mov	r3, r7
 800f860:	46c2      	mov	sl, r8
 800f862:	f108 38ff 	add.w	r8, r8, #4294967295
 800f866:	f7f1 f8db 	bl	8000a20 <__aeabi_dcmpeq>
 800f86a:	2800      	cmp	r0, #0
 800f86c:	d1f4      	bne.n	800f858 <__ieee754_rem_pio2+0x398>
 800f86e:	4b0b      	ldr	r3, [pc, #44]	; (800f89c <__ieee754_rem_pio2+0x3dc>)
 800f870:	462a      	mov	r2, r5
 800f872:	9301      	str	r3, [sp, #4]
 800f874:	2302      	movs	r3, #2
 800f876:	4621      	mov	r1, r4
 800f878:	9300      	str	r3, [sp, #0]
 800f87a:	a806      	add	r0, sp, #24
 800f87c:	4653      	mov	r3, sl
 800f87e:	f000 fbc1 	bl	8010004 <__kernel_rem_pio2>
 800f882:	9b04      	ldr	r3, [sp, #16]
 800f884:	4605      	mov	r5, r0
 800f886:	2b00      	cmp	r3, #0
 800f888:	f6bf ae51 	bge.w	800f52e <__ieee754_rem_pio2+0x6e>
 800f88c:	6863      	ldr	r3, [r4, #4]
 800f88e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f892:	6063      	str	r3, [r4, #4]
 800f894:	68e3      	ldr	r3, [r4, #12]
 800f896:	e707      	b.n	800f6a8 <__ieee754_rem_pio2+0x1e8>
 800f898:	41700000 	.word	0x41700000
 800f89c:	08014a4c 	.word	0x08014a4c

0800f8a0 <__ieee754_asinf>:
 800f8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8a4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800f8a8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f8ac:	4604      	mov	r4, r0
 800f8ae:	4605      	mov	r5, r0
 800f8b0:	d10c      	bne.n	800f8cc <__ieee754_asinf+0x2c>
 800f8b2:	498d      	ldr	r1, [pc, #564]	; (800fae8 <__ieee754_asinf+0x248>)
 800f8b4:	f7f1 faa2 	bl	8000dfc <__aeabi_fmul>
 800f8b8:	498c      	ldr	r1, [pc, #560]	; (800faec <__ieee754_asinf+0x24c>)
 800f8ba:	4605      	mov	r5, r0
 800f8bc:	4620      	mov	r0, r4
 800f8be:	f7f1 fa9d 	bl	8000dfc <__aeabi_fmul>
 800f8c2:	4601      	mov	r1, r0
 800f8c4:	4628      	mov	r0, r5
 800f8c6:	f7f1 f991 	bl	8000bec <__addsf3>
 800f8ca:	e006      	b.n	800f8da <__ieee754_asinf+0x3a>
 800f8cc:	dd07      	ble.n	800f8de <__ieee754_asinf+0x3e>
 800f8ce:	4601      	mov	r1, r0
 800f8d0:	f7f1 f98a 	bl	8000be8 <__aeabi_fsub>
 800f8d4:	4601      	mov	r1, r0
 800f8d6:	f7f1 fb45 	bl	8000f64 <__aeabi_fdiv>
 800f8da:	4604      	mov	r4, r0
 800f8dc:	e00e      	b.n	800f8fc <__ieee754_asinf+0x5c>
 800f8de:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800f8e2:	da58      	bge.n	800f996 <__ieee754_asinf+0xf6>
 800f8e4:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800f8e8:	da0b      	bge.n	800f902 <__ieee754_asinf+0x62>
 800f8ea:	4981      	ldr	r1, [pc, #516]	; (800faf0 <__ieee754_asinf+0x250>)
 800f8ec:	f7f1 f97e 	bl	8000bec <__addsf3>
 800f8f0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f8f4:	f7f1 fc3e 	bl	8001174 <__aeabi_fcmpgt>
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	d04c      	beq.n	800f996 <__ieee754_asinf+0xf6>
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f902:	4601      	mov	r1, r0
 800f904:	f7f1 fa7a 	bl	8000dfc <__aeabi_fmul>
 800f908:	4605      	mov	r5, r0
 800f90a:	497a      	ldr	r1, [pc, #488]	; (800faf4 <__ieee754_asinf+0x254>)
 800f90c:	f7f1 fa76 	bl	8000dfc <__aeabi_fmul>
 800f910:	4979      	ldr	r1, [pc, #484]	; (800faf8 <__ieee754_asinf+0x258>)
 800f912:	f7f1 f96b 	bl	8000bec <__addsf3>
 800f916:	4629      	mov	r1, r5
 800f918:	f7f1 fa70 	bl	8000dfc <__aeabi_fmul>
 800f91c:	4977      	ldr	r1, [pc, #476]	; (800fafc <__ieee754_asinf+0x25c>)
 800f91e:	f7f1 f963 	bl	8000be8 <__aeabi_fsub>
 800f922:	4629      	mov	r1, r5
 800f924:	f7f1 fa6a 	bl	8000dfc <__aeabi_fmul>
 800f928:	4975      	ldr	r1, [pc, #468]	; (800fb00 <__ieee754_asinf+0x260>)
 800f92a:	f7f1 f95f 	bl	8000bec <__addsf3>
 800f92e:	4629      	mov	r1, r5
 800f930:	f7f1 fa64 	bl	8000dfc <__aeabi_fmul>
 800f934:	4973      	ldr	r1, [pc, #460]	; (800fb04 <__ieee754_asinf+0x264>)
 800f936:	f7f1 f957 	bl	8000be8 <__aeabi_fsub>
 800f93a:	4629      	mov	r1, r5
 800f93c:	f7f1 fa5e 	bl	8000dfc <__aeabi_fmul>
 800f940:	4971      	ldr	r1, [pc, #452]	; (800fb08 <__ieee754_asinf+0x268>)
 800f942:	f7f1 f953 	bl	8000bec <__addsf3>
 800f946:	4629      	mov	r1, r5
 800f948:	f7f1 fa58 	bl	8000dfc <__aeabi_fmul>
 800f94c:	496f      	ldr	r1, [pc, #444]	; (800fb0c <__ieee754_asinf+0x26c>)
 800f94e:	4606      	mov	r6, r0
 800f950:	4628      	mov	r0, r5
 800f952:	f7f1 fa53 	bl	8000dfc <__aeabi_fmul>
 800f956:	496e      	ldr	r1, [pc, #440]	; (800fb10 <__ieee754_asinf+0x270>)
 800f958:	f7f1 f946 	bl	8000be8 <__aeabi_fsub>
 800f95c:	4629      	mov	r1, r5
 800f95e:	f7f1 fa4d 	bl	8000dfc <__aeabi_fmul>
 800f962:	496c      	ldr	r1, [pc, #432]	; (800fb14 <__ieee754_asinf+0x274>)
 800f964:	f7f1 f942 	bl	8000bec <__addsf3>
 800f968:	4629      	mov	r1, r5
 800f96a:	f7f1 fa47 	bl	8000dfc <__aeabi_fmul>
 800f96e:	496a      	ldr	r1, [pc, #424]	; (800fb18 <__ieee754_asinf+0x278>)
 800f970:	f7f1 f93a 	bl	8000be8 <__aeabi_fsub>
 800f974:	4629      	mov	r1, r5
 800f976:	f7f1 fa41 	bl	8000dfc <__aeabi_fmul>
 800f97a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f97e:	f7f1 f935 	bl	8000bec <__addsf3>
 800f982:	4601      	mov	r1, r0
 800f984:	4630      	mov	r0, r6
 800f986:	f7f1 faed 	bl	8000f64 <__aeabi_fdiv>
 800f98a:	4621      	mov	r1, r4
 800f98c:	f7f1 fa36 	bl	8000dfc <__aeabi_fmul>
 800f990:	4601      	mov	r1, r0
 800f992:	4620      	mov	r0, r4
 800f994:	e797      	b.n	800f8c6 <__ieee754_asinf+0x26>
 800f996:	4620      	mov	r0, r4
 800f998:	f7ff fd10 	bl	800f3bc <fabsf>
 800f99c:	4601      	mov	r1, r0
 800f99e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f9a2:	f7f1 f921 	bl	8000be8 <__aeabi_fsub>
 800f9a6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f9aa:	f7f1 fa27 	bl	8000dfc <__aeabi_fmul>
 800f9ae:	4606      	mov	r6, r0
 800f9b0:	4950      	ldr	r1, [pc, #320]	; (800faf4 <__ieee754_asinf+0x254>)
 800f9b2:	f7f1 fa23 	bl	8000dfc <__aeabi_fmul>
 800f9b6:	4950      	ldr	r1, [pc, #320]	; (800faf8 <__ieee754_asinf+0x258>)
 800f9b8:	f7f1 f918 	bl	8000bec <__addsf3>
 800f9bc:	4631      	mov	r1, r6
 800f9be:	f7f1 fa1d 	bl	8000dfc <__aeabi_fmul>
 800f9c2:	494e      	ldr	r1, [pc, #312]	; (800fafc <__ieee754_asinf+0x25c>)
 800f9c4:	f7f1 f910 	bl	8000be8 <__aeabi_fsub>
 800f9c8:	4631      	mov	r1, r6
 800f9ca:	f7f1 fa17 	bl	8000dfc <__aeabi_fmul>
 800f9ce:	494c      	ldr	r1, [pc, #304]	; (800fb00 <__ieee754_asinf+0x260>)
 800f9d0:	f7f1 f90c 	bl	8000bec <__addsf3>
 800f9d4:	4631      	mov	r1, r6
 800f9d6:	f7f1 fa11 	bl	8000dfc <__aeabi_fmul>
 800f9da:	494a      	ldr	r1, [pc, #296]	; (800fb04 <__ieee754_asinf+0x264>)
 800f9dc:	f7f1 f904 	bl	8000be8 <__aeabi_fsub>
 800f9e0:	4631      	mov	r1, r6
 800f9e2:	f7f1 fa0b 	bl	8000dfc <__aeabi_fmul>
 800f9e6:	4948      	ldr	r1, [pc, #288]	; (800fb08 <__ieee754_asinf+0x268>)
 800f9e8:	f7f1 f900 	bl	8000bec <__addsf3>
 800f9ec:	4631      	mov	r1, r6
 800f9ee:	f7f1 fa05 	bl	8000dfc <__aeabi_fmul>
 800f9f2:	4946      	ldr	r1, [pc, #280]	; (800fb0c <__ieee754_asinf+0x26c>)
 800f9f4:	4681      	mov	r9, r0
 800f9f6:	4630      	mov	r0, r6
 800f9f8:	f7f1 fa00 	bl	8000dfc <__aeabi_fmul>
 800f9fc:	4944      	ldr	r1, [pc, #272]	; (800fb10 <__ieee754_asinf+0x270>)
 800f9fe:	f7f1 f8f3 	bl	8000be8 <__aeabi_fsub>
 800fa02:	4631      	mov	r1, r6
 800fa04:	f7f1 f9fa 	bl	8000dfc <__aeabi_fmul>
 800fa08:	4942      	ldr	r1, [pc, #264]	; (800fb14 <__ieee754_asinf+0x274>)
 800fa0a:	f7f1 f8ef 	bl	8000bec <__addsf3>
 800fa0e:	4631      	mov	r1, r6
 800fa10:	f7f1 f9f4 	bl	8000dfc <__aeabi_fmul>
 800fa14:	4940      	ldr	r1, [pc, #256]	; (800fb18 <__ieee754_asinf+0x278>)
 800fa16:	f7f1 f8e7 	bl	8000be8 <__aeabi_fsub>
 800fa1a:	4631      	mov	r1, r6
 800fa1c:	f7f1 f9ee 	bl	8000dfc <__aeabi_fmul>
 800fa20:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fa24:	f7f1 f8e2 	bl	8000bec <__addsf3>
 800fa28:	4682      	mov	sl, r0
 800fa2a:	4630      	mov	r0, r6
 800fa2c:	f000 f9da 	bl	800fde4 <__ieee754_sqrtf>
 800fa30:	4b3a      	ldr	r3, [pc, #232]	; (800fb1c <__ieee754_asinf+0x27c>)
 800fa32:	4607      	mov	r7, r0
 800fa34:	4598      	cmp	r8, r3
 800fa36:	dd1a      	ble.n	800fa6e <__ieee754_asinf+0x1ce>
 800fa38:	4651      	mov	r1, sl
 800fa3a:	4648      	mov	r0, r9
 800fa3c:	f7f1 fa92 	bl	8000f64 <__aeabi_fdiv>
 800fa40:	4639      	mov	r1, r7
 800fa42:	f7f1 f9db 	bl	8000dfc <__aeabi_fmul>
 800fa46:	4639      	mov	r1, r7
 800fa48:	f7f1 f8d0 	bl	8000bec <__addsf3>
 800fa4c:	4601      	mov	r1, r0
 800fa4e:	f7f1 f8cd 	bl	8000bec <__addsf3>
 800fa52:	4933      	ldr	r1, [pc, #204]	; (800fb20 <__ieee754_asinf+0x280>)
 800fa54:	f7f1 f8ca 	bl	8000bec <__addsf3>
 800fa58:	4601      	mov	r1, r0
 800fa5a:	4823      	ldr	r0, [pc, #140]	; (800fae8 <__ieee754_asinf+0x248>)
 800fa5c:	f7f1 f8c4 	bl	8000be8 <__aeabi_fsub>
 800fa60:	2d00      	cmp	r5, #0
 800fa62:	4604      	mov	r4, r0
 800fa64:	f73f af4a 	bgt.w	800f8fc <__ieee754_asinf+0x5c>
 800fa68:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800fa6c:	e735      	b.n	800f8da <__ieee754_asinf+0x3a>
 800fa6e:	4601      	mov	r1, r0
 800fa70:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800fa74:	f7f1 f8ba 	bl	8000bec <__addsf3>
 800fa78:	4651      	mov	r1, sl
 800fa7a:	4604      	mov	r4, r0
 800fa7c:	4648      	mov	r0, r9
 800fa7e:	f7f1 fa71 	bl	8000f64 <__aeabi_fdiv>
 800fa82:	4601      	mov	r1, r0
 800fa84:	4620      	mov	r0, r4
 800fa86:	f7f1 f9b9 	bl	8000dfc <__aeabi_fmul>
 800fa8a:	f028 080f 	bic.w	r8, r8, #15
 800fa8e:	4681      	mov	r9, r0
 800fa90:	4641      	mov	r1, r8
 800fa92:	4640      	mov	r0, r8
 800fa94:	f7f1 f9b2 	bl	8000dfc <__aeabi_fmul>
 800fa98:	4601      	mov	r1, r0
 800fa9a:	4630      	mov	r0, r6
 800fa9c:	f7f1 f8a4 	bl	8000be8 <__aeabi_fsub>
 800faa0:	4641      	mov	r1, r8
 800faa2:	4604      	mov	r4, r0
 800faa4:	4638      	mov	r0, r7
 800faa6:	f7f1 f8a1 	bl	8000bec <__addsf3>
 800faaa:	4601      	mov	r1, r0
 800faac:	4620      	mov	r0, r4
 800faae:	f7f1 fa59 	bl	8000f64 <__aeabi_fdiv>
 800fab2:	4601      	mov	r1, r0
 800fab4:	f7f1 f89a 	bl	8000bec <__addsf3>
 800fab8:	4601      	mov	r1, r0
 800faba:	480c      	ldr	r0, [pc, #48]	; (800faec <__ieee754_asinf+0x24c>)
 800fabc:	f7f1 f894 	bl	8000be8 <__aeabi_fsub>
 800fac0:	4601      	mov	r1, r0
 800fac2:	4648      	mov	r0, r9
 800fac4:	f7f1 f890 	bl	8000be8 <__aeabi_fsub>
 800fac8:	4641      	mov	r1, r8
 800faca:	4604      	mov	r4, r0
 800facc:	4640      	mov	r0, r8
 800face:	f7f1 f88d 	bl	8000bec <__addsf3>
 800fad2:	4601      	mov	r1, r0
 800fad4:	4813      	ldr	r0, [pc, #76]	; (800fb24 <__ieee754_asinf+0x284>)
 800fad6:	f7f1 f887 	bl	8000be8 <__aeabi_fsub>
 800fada:	4601      	mov	r1, r0
 800fadc:	4620      	mov	r0, r4
 800fade:	f7f1 f883 	bl	8000be8 <__aeabi_fsub>
 800fae2:	4601      	mov	r1, r0
 800fae4:	480f      	ldr	r0, [pc, #60]	; (800fb24 <__ieee754_asinf+0x284>)
 800fae6:	e7b9      	b.n	800fa5c <__ieee754_asinf+0x1bc>
 800fae8:	3fc90fdb 	.word	0x3fc90fdb
 800faec:	b33bbd2e 	.word	0xb33bbd2e
 800faf0:	7149f2ca 	.word	0x7149f2ca
 800faf4:	3811ef08 	.word	0x3811ef08
 800faf8:	3a4f7f04 	.word	0x3a4f7f04
 800fafc:	3d241146 	.word	0x3d241146
 800fb00:	3e4e0aa8 	.word	0x3e4e0aa8
 800fb04:	3ea6b090 	.word	0x3ea6b090
 800fb08:	3e2aaaab 	.word	0x3e2aaaab
 800fb0c:	3d9dc62e 	.word	0x3d9dc62e
 800fb10:	3f303361 	.word	0x3f303361
 800fb14:	4001572d 	.word	0x4001572d
 800fb18:	4019d139 	.word	0x4019d139
 800fb1c:	3f799999 	.word	0x3f799999
 800fb20:	333bbd2e 	.word	0x333bbd2e
 800fb24:	3f490fdb 	.word	0x3f490fdb

0800fb28 <__ieee754_rem_pio2f>:
 800fb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb2c:	4aa0      	ldr	r2, [pc, #640]	; (800fdb0 <__ieee754_rem_pio2f+0x288>)
 800fb2e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800fb32:	4296      	cmp	r6, r2
 800fb34:	460c      	mov	r4, r1
 800fb36:	4682      	mov	sl, r0
 800fb38:	b087      	sub	sp, #28
 800fb3a:	dc04      	bgt.n	800fb46 <__ieee754_rem_pio2f+0x1e>
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	6008      	str	r0, [r1, #0]
 800fb40:	604b      	str	r3, [r1, #4]
 800fb42:	2500      	movs	r5, #0
 800fb44:	e01a      	b.n	800fb7c <__ieee754_rem_pio2f+0x54>
 800fb46:	4a9b      	ldr	r2, [pc, #620]	; (800fdb4 <__ieee754_rem_pio2f+0x28c>)
 800fb48:	4296      	cmp	r6, r2
 800fb4a:	dc4b      	bgt.n	800fbe4 <__ieee754_rem_pio2f+0xbc>
 800fb4c:	2800      	cmp	r0, #0
 800fb4e:	499a      	ldr	r1, [pc, #616]	; (800fdb8 <__ieee754_rem_pio2f+0x290>)
 800fb50:	4f9a      	ldr	r7, [pc, #616]	; (800fdbc <__ieee754_rem_pio2f+0x294>)
 800fb52:	f026 060f 	bic.w	r6, r6, #15
 800fb56:	dd23      	ble.n	800fba0 <__ieee754_rem_pio2f+0x78>
 800fb58:	f7f1 f846 	bl	8000be8 <__aeabi_fsub>
 800fb5c:	42be      	cmp	r6, r7
 800fb5e:	4605      	mov	r5, r0
 800fb60:	d010      	beq.n	800fb84 <__ieee754_rem_pio2f+0x5c>
 800fb62:	4997      	ldr	r1, [pc, #604]	; (800fdc0 <__ieee754_rem_pio2f+0x298>)
 800fb64:	f7f1 f840 	bl	8000be8 <__aeabi_fsub>
 800fb68:	4601      	mov	r1, r0
 800fb6a:	6020      	str	r0, [r4, #0]
 800fb6c:	4628      	mov	r0, r5
 800fb6e:	f7f1 f83b 	bl	8000be8 <__aeabi_fsub>
 800fb72:	4993      	ldr	r1, [pc, #588]	; (800fdc0 <__ieee754_rem_pio2f+0x298>)
 800fb74:	f7f1 f838 	bl	8000be8 <__aeabi_fsub>
 800fb78:	2501      	movs	r5, #1
 800fb7a:	6060      	str	r0, [r4, #4]
 800fb7c:	4628      	mov	r0, r5
 800fb7e:	b007      	add	sp, #28
 800fb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb84:	498f      	ldr	r1, [pc, #572]	; (800fdc4 <__ieee754_rem_pio2f+0x29c>)
 800fb86:	f7f1 f82f 	bl	8000be8 <__aeabi_fsub>
 800fb8a:	498f      	ldr	r1, [pc, #572]	; (800fdc8 <__ieee754_rem_pio2f+0x2a0>)
 800fb8c:	4605      	mov	r5, r0
 800fb8e:	f7f1 f82b 	bl	8000be8 <__aeabi_fsub>
 800fb92:	4601      	mov	r1, r0
 800fb94:	6020      	str	r0, [r4, #0]
 800fb96:	4628      	mov	r0, r5
 800fb98:	f7f1 f826 	bl	8000be8 <__aeabi_fsub>
 800fb9c:	498a      	ldr	r1, [pc, #552]	; (800fdc8 <__ieee754_rem_pio2f+0x2a0>)
 800fb9e:	e7e9      	b.n	800fb74 <__ieee754_rem_pio2f+0x4c>
 800fba0:	f7f1 f824 	bl	8000bec <__addsf3>
 800fba4:	42be      	cmp	r6, r7
 800fba6:	4605      	mov	r5, r0
 800fba8:	d00e      	beq.n	800fbc8 <__ieee754_rem_pio2f+0xa0>
 800fbaa:	4985      	ldr	r1, [pc, #532]	; (800fdc0 <__ieee754_rem_pio2f+0x298>)
 800fbac:	f7f1 f81e 	bl	8000bec <__addsf3>
 800fbb0:	4601      	mov	r1, r0
 800fbb2:	6020      	str	r0, [r4, #0]
 800fbb4:	4628      	mov	r0, r5
 800fbb6:	f7f1 f817 	bl	8000be8 <__aeabi_fsub>
 800fbba:	4981      	ldr	r1, [pc, #516]	; (800fdc0 <__ieee754_rem_pio2f+0x298>)
 800fbbc:	f7f1 f816 	bl	8000bec <__addsf3>
 800fbc0:	f04f 35ff 	mov.w	r5, #4294967295
 800fbc4:	6060      	str	r0, [r4, #4]
 800fbc6:	e7d9      	b.n	800fb7c <__ieee754_rem_pio2f+0x54>
 800fbc8:	497e      	ldr	r1, [pc, #504]	; (800fdc4 <__ieee754_rem_pio2f+0x29c>)
 800fbca:	f7f1 f80f 	bl	8000bec <__addsf3>
 800fbce:	497e      	ldr	r1, [pc, #504]	; (800fdc8 <__ieee754_rem_pio2f+0x2a0>)
 800fbd0:	4605      	mov	r5, r0
 800fbd2:	f7f1 f80b 	bl	8000bec <__addsf3>
 800fbd6:	4601      	mov	r1, r0
 800fbd8:	6020      	str	r0, [r4, #0]
 800fbda:	4628      	mov	r0, r5
 800fbdc:	f7f1 f804 	bl	8000be8 <__aeabi_fsub>
 800fbe0:	4979      	ldr	r1, [pc, #484]	; (800fdc8 <__ieee754_rem_pio2f+0x2a0>)
 800fbe2:	e7eb      	b.n	800fbbc <__ieee754_rem_pio2f+0x94>
 800fbe4:	4a79      	ldr	r2, [pc, #484]	; (800fdcc <__ieee754_rem_pio2f+0x2a4>)
 800fbe6:	4296      	cmp	r6, r2
 800fbe8:	f300 8091 	bgt.w	800fd0e <__ieee754_rem_pio2f+0x1e6>
 800fbec:	f7ff fbe6 	bl	800f3bc <fabsf>
 800fbf0:	4977      	ldr	r1, [pc, #476]	; (800fdd0 <__ieee754_rem_pio2f+0x2a8>)
 800fbf2:	4607      	mov	r7, r0
 800fbf4:	f7f1 f902 	bl	8000dfc <__aeabi_fmul>
 800fbf8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800fbfc:	f7f0 fff6 	bl	8000bec <__addsf3>
 800fc00:	f7f1 fad8 	bl	80011b4 <__aeabi_f2iz>
 800fc04:	4605      	mov	r5, r0
 800fc06:	f7f1 f8a5 	bl	8000d54 <__aeabi_i2f>
 800fc0a:	496b      	ldr	r1, [pc, #428]	; (800fdb8 <__ieee754_rem_pio2f+0x290>)
 800fc0c:	4681      	mov	r9, r0
 800fc0e:	f7f1 f8f5 	bl	8000dfc <__aeabi_fmul>
 800fc12:	4601      	mov	r1, r0
 800fc14:	4638      	mov	r0, r7
 800fc16:	f7f0 ffe7 	bl	8000be8 <__aeabi_fsub>
 800fc1a:	4969      	ldr	r1, [pc, #420]	; (800fdc0 <__ieee754_rem_pio2f+0x298>)
 800fc1c:	4680      	mov	r8, r0
 800fc1e:	4648      	mov	r0, r9
 800fc20:	f7f1 f8ec 	bl	8000dfc <__aeabi_fmul>
 800fc24:	2d1f      	cmp	r5, #31
 800fc26:	4607      	mov	r7, r0
 800fc28:	dc0c      	bgt.n	800fc44 <__ieee754_rem_pio2f+0x11c>
 800fc2a:	4a6a      	ldr	r2, [pc, #424]	; (800fdd4 <__ieee754_rem_pio2f+0x2ac>)
 800fc2c:	1e69      	subs	r1, r5, #1
 800fc2e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800fc32:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d004      	beq.n	800fc44 <__ieee754_rem_pio2f+0x11c>
 800fc3a:	4639      	mov	r1, r7
 800fc3c:	4640      	mov	r0, r8
 800fc3e:	f7f0 ffd3 	bl	8000be8 <__aeabi_fsub>
 800fc42:	e00b      	b.n	800fc5c <__ieee754_rem_pio2f+0x134>
 800fc44:	4639      	mov	r1, r7
 800fc46:	4640      	mov	r0, r8
 800fc48:	f7f0 ffce 	bl	8000be8 <__aeabi_fsub>
 800fc4c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800fc50:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800fc54:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800fc58:	2e08      	cmp	r6, #8
 800fc5a:	dc01      	bgt.n	800fc60 <__ieee754_rem_pio2f+0x138>
 800fc5c:	6020      	str	r0, [r4, #0]
 800fc5e:	e026      	b.n	800fcae <__ieee754_rem_pio2f+0x186>
 800fc60:	4958      	ldr	r1, [pc, #352]	; (800fdc4 <__ieee754_rem_pio2f+0x29c>)
 800fc62:	4648      	mov	r0, r9
 800fc64:	f7f1 f8ca 	bl	8000dfc <__aeabi_fmul>
 800fc68:	4607      	mov	r7, r0
 800fc6a:	4601      	mov	r1, r0
 800fc6c:	4640      	mov	r0, r8
 800fc6e:	f7f0 ffbb 	bl	8000be8 <__aeabi_fsub>
 800fc72:	4601      	mov	r1, r0
 800fc74:	4606      	mov	r6, r0
 800fc76:	4640      	mov	r0, r8
 800fc78:	f7f0 ffb6 	bl	8000be8 <__aeabi_fsub>
 800fc7c:	4639      	mov	r1, r7
 800fc7e:	f7f0 ffb3 	bl	8000be8 <__aeabi_fsub>
 800fc82:	4607      	mov	r7, r0
 800fc84:	4950      	ldr	r1, [pc, #320]	; (800fdc8 <__ieee754_rem_pio2f+0x2a0>)
 800fc86:	4648      	mov	r0, r9
 800fc88:	f7f1 f8b8 	bl	8000dfc <__aeabi_fmul>
 800fc8c:	4639      	mov	r1, r7
 800fc8e:	f7f0 ffab 	bl	8000be8 <__aeabi_fsub>
 800fc92:	4601      	mov	r1, r0
 800fc94:	4607      	mov	r7, r0
 800fc96:	4630      	mov	r0, r6
 800fc98:	f7f0 ffa6 	bl	8000be8 <__aeabi_fsub>
 800fc9c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800fca0:	ebab 0b03 	sub.w	fp, fp, r3
 800fca4:	f1bb 0f19 	cmp.w	fp, #25
 800fca8:	dc16      	bgt.n	800fcd8 <__ieee754_rem_pio2f+0x1b0>
 800fcaa:	46b0      	mov	r8, r6
 800fcac:	6020      	str	r0, [r4, #0]
 800fcae:	6826      	ldr	r6, [r4, #0]
 800fcb0:	4640      	mov	r0, r8
 800fcb2:	4631      	mov	r1, r6
 800fcb4:	f7f0 ff98 	bl	8000be8 <__aeabi_fsub>
 800fcb8:	4639      	mov	r1, r7
 800fcba:	f7f0 ff95 	bl	8000be8 <__aeabi_fsub>
 800fcbe:	f1ba 0f00 	cmp.w	sl, #0
 800fcc2:	6060      	str	r0, [r4, #4]
 800fcc4:	f6bf af5a 	bge.w	800fb7c <__ieee754_rem_pio2f+0x54>
 800fcc8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800fccc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800fcd0:	6026      	str	r6, [r4, #0]
 800fcd2:	6060      	str	r0, [r4, #4]
 800fcd4:	426d      	negs	r5, r5
 800fcd6:	e751      	b.n	800fb7c <__ieee754_rem_pio2f+0x54>
 800fcd8:	493f      	ldr	r1, [pc, #252]	; (800fdd8 <__ieee754_rem_pio2f+0x2b0>)
 800fcda:	4648      	mov	r0, r9
 800fcdc:	f7f1 f88e 	bl	8000dfc <__aeabi_fmul>
 800fce0:	4607      	mov	r7, r0
 800fce2:	4601      	mov	r1, r0
 800fce4:	4630      	mov	r0, r6
 800fce6:	f7f0 ff7f 	bl	8000be8 <__aeabi_fsub>
 800fcea:	4601      	mov	r1, r0
 800fcec:	4680      	mov	r8, r0
 800fcee:	4630      	mov	r0, r6
 800fcf0:	f7f0 ff7a 	bl	8000be8 <__aeabi_fsub>
 800fcf4:	4639      	mov	r1, r7
 800fcf6:	f7f0 ff77 	bl	8000be8 <__aeabi_fsub>
 800fcfa:	4606      	mov	r6, r0
 800fcfc:	4937      	ldr	r1, [pc, #220]	; (800fddc <__ieee754_rem_pio2f+0x2b4>)
 800fcfe:	4648      	mov	r0, r9
 800fd00:	f7f1 f87c 	bl	8000dfc <__aeabi_fmul>
 800fd04:	4631      	mov	r1, r6
 800fd06:	f7f0 ff6f 	bl	8000be8 <__aeabi_fsub>
 800fd0a:	4607      	mov	r7, r0
 800fd0c:	e795      	b.n	800fc3a <__ieee754_rem_pio2f+0x112>
 800fd0e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800fd12:	db05      	blt.n	800fd20 <__ieee754_rem_pio2f+0x1f8>
 800fd14:	4601      	mov	r1, r0
 800fd16:	f7f0 ff67 	bl	8000be8 <__aeabi_fsub>
 800fd1a:	6060      	str	r0, [r4, #4]
 800fd1c:	6020      	str	r0, [r4, #0]
 800fd1e:	e710      	b.n	800fb42 <__ieee754_rem_pio2f+0x1a>
 800fd20:	15f7      	asrs	r7, r6, #23
 800fd22:	3f86      	subs	r7, #134	; 0x86
 800fd24:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800fd28:	4630      	mov	r0, r6
 800fd2a:	f7f1 fa43 	bl	80011b4 <__aeabi_f2iz>
 800fd2e:	f7f1 f811 	bl	8000d54 <__aeabi_i2f>
 800fd32:	4601      	mov	r1, r0
 800fd34:	9003      	str	r0, [sp, #12]
 800fd36:	4630      	mov	r0, r6
 800fd38:	f7f0 ff56 	bl	8000be8 <__aeabi_fsub>
 800fd3c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800fd40:	f7f1 f85c 	bl	8000dfc <__aeabi_fmul>
 800fd44:	4606      	mov	r6, r0
 800fd46:	f7f1 fa35 	bl	80011b4 <__aeabi_f2iz>
 800fd4a:	f7f1 f803 	bl	8000d54 <__aeabi_i2f>
 800fd4e:	4601      	mov	r1, r0
 800fd50:	9004      	str	r0, [sp, #16]
 800fd52:	4605      	mov	r5, r0
 800fd54:	4630      	mov	r0, r6
 800fd56:	f7f0 ff47 	bl	8000be8 <__aeabi_fsub>
 800fd5a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800fd5e:	f7f1 f84d 	bl	8000dfc <__aeabi_fmul>
 800fd62:	2100      	movs	r1, #0
 800fd64:	9005      	str	r0, [sp, #20]
 800fd66:	f7f1 f9dd 	bl	8001124 <__aeabi_fcmpeq>
 800fd6a:	b1f0      	cbz	r0, 800fdaa <__ieee754_rem_pio2f+0x282>
 800fd6c:	2100      	movs	r1, #0
 800fd6e:	4628      	mov	r0, r5
 800fd70:	f7f1 f9d8 	bl	8001124 <__aeabi_fcmpeq>
 800fd74:	2800      	cmp	r0, #0
 800fd76:	bf14      	ite	ne
 800fd78:	2301      	movne	r3, #1
 800fd7a:	2302      	moveq	r3, #2
 800fd7c:	4a18      	ldr	r2, [pc, #96]	; (800fde0 <__ieee754_rem_pio2f+0x2b8>)
 800fd7e:	4621      	mov	r1, r4
 800fd80:	9201      	str	r2, [sp, #4]
 800fd82:	2202      	movs	r2, #2
 800fd84:	a803      	add	r0, sp, #12
 800fd86:	9200      	str	r2, [sp, #0]
 800fd88:	463a      	mov	r2, r7
 800fd8a:	f000 fdbb 	bl	8010904 <__kernel_rem_pio2f>
 800fd8e:	f1ba 0f00 	cmp.w	sl, #0
 800fd92:	4605      	mov	r5, r0
 800fd94:	f6bf aef2 	bge.w	800fb7c <__ieee754_rem_pio2f+0x54>
 800fd98:	6823      	ldr	r3, [r4, #0]
 800fd9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fd9e:	6023      	str	r3, [r4, #0]
 800fda0:	6863      	ldr	r3, [r4, #4]
 800fda2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fda6:	6063      	str	r3, [r4, #4]
 800fda8:	e794      	b.n	800fcd4 <__ieee754_rem_pio2f+0x1ac>
 800fdaa:	2303      	movs	r3, #3
 800fdac:	e7e6      	b.n	800fd7c <__ieee754_rem_pio2f+0x254>
 800fdae:	bf00      	nop
 800fdb0:	3f490fd8 	.word	0x3f490fd8
 800fdb4:	4016cbe3 	.word	0x4016cbe3
 800fdb8:	3fc90f80 	.word	0x3fc90f80
 800fdbc:	3fc90fd0 	.word	0x3fc90fd0
 800fdc0:	37354443 	.word	0x37354443
 800fdc4:	37354400 	.word	0x37354400
 800fdc8:	2e85a308 	.word	0x2e85a308
 800fdcc:	43490f80 	.word	0x43490f80
 800fdd0:	3f22f984 	.word	0x3f22f984
 800fdd4:	08014b54 	.word	0x08014b54
 800fdd8:	2e85a300 	.word	0x2e85a300
 800fddc:	248d3132 	.word	0x248d3132
 800fde0:	08014bd4 	.word	0x08014bd4

0800fde4 <__ieee754_sqrtf>:
 800fde4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800fde8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fdec:	b570      	push	{r4, r5, r6, lr}
 800fdee:	4603      	mov	r3, r0
 800fdf0:	4604      	mov	r4, r0
 800fdf2:	d309      	bcc.n	800fe08 <__ieee754_sqrtf+0x24>
 800fdf4:	4601      	mov	r1, r0
 800fdf6:	f7f1 f801 	bl	8000dfc <__aeabi_fmul>
 800fdfa:	4601      	mov	r1, r0
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	f7f0 fef5 	bl	8000bec <__addsf3>
 800fe02:	4604      	mov	r4, r0
 800fe04:	4620      	mov	r0, r4
 800fe06:	bd70      	pop	{r4, r5, r6, pc}
 800fe08:	2a00      	cmp	r2, #0
 800fe0a:	d0fb      	beq.n	800fe04 <__ieee754_sqrtf+0x20>
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	da06      	bge.n	800fe1e <__ieee754_sqrtf+0x3a>
 800fe10:	4601      	mov	r1, r0
 800fe12:	f7f0 fee9 	bl	8000be8 <__aeabi_fsub>
 800fe16:	4601      	mov	r1, r0
 800fe18:	f7f1 f8a4 	bl	8000f64 <__aeabi_fdiv>
 800fe1c:	e7f1      	b.n	800fe02 <__ieee754_sqrtf+0x1e>
 800fe1e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800fe22:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800fe26:	d029      	beq.n	800fe7c <__ieee754_sqrtf+0x98>
 800fe28:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800fe2c:	07cb      	lsls	r3, r1, #31
 800fe2e:	f04f 0300 	mov.w	r3, #0
 800fe32:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800fe36:	f04f 0419 	mov.w	r4, #25
 800fe3a:	461e      	mov	r6, r3
 800fe3c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800fe40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800fe44:	bf58      	it	pl
 800fe46:	0052      	lslpl	r2, r2, #1
 800fe48:	1040      	asrs	r0, r0, #1
 800fe4a:	0052      	lsls	r2, r2, #1
 800fe4c:	1875      	adds	r5, r6, r1
 800fe4e:	4295      	cmp	r5, r2
 800fe50:	bfde      	ittt	le
 800fe52:	186e      	addle	r6, r5, r1
 800fe54:	1b52      	suble	r2, r2, r5
 800fe56:	185b      	addle	r3, r3, r1
 800fe58:	3c01      	subs	r4, #1
 800fe5a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fe5e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fe62:	d1f3      	bne.n	800fe4c <__ieee754_sqrtf+0x68>
 800fe64:	b112      	cbz	r2, 800fe6c <__ieee754_sqrtf+0x88>
 800fe66:	3301      	adds	r3, #1
 800fe68:	f023 0301 	bic.w	r3, r3, #1
 800fe6c:	105c      	asrs	r4, r3, #1
 800fe6e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800fe72:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800fe76:	e7c5      	b.n	800fe04 <__ieee754_sqrtf+0x20>
 800fe78:	005b      	lsls	r3, r3, #1
 800fe7a:	3201      	adds	r2, #1
 800fe7c:	0218      	lsls	r0, r3, #8
 800fe7e:	d5fb      	bpl.n	800fe78 <__ieee754_sqrtf+0x94>
 800fe80:	3a01      	subs	r2, #1
 800fe82:	1a89      	subs	r1, r1, r2
 800fe84:	e7d0      	b.n	800fe28 <__ieee754_sqrtf+0x44>
	...

0800fe88 <__kernel_cos>:
 800fe88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe8c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800fe90:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800fe94:	4680      	mov	r8, r0
 800fe96:	460f      	mov	r7, r1
 800fe98:	e9cd 2300 	strd	r2, r3, [sp]
 800fe9c:	da04      	bge.n	800fea8 <__kernel_cos+0x20>
 800fe9e:	f7f0 fe07 	bl	8000ab0 <__aeabi_d2iz>
 800fea2:	2800      	cmp	r0, #0
 800fea4:	f000 8086 	beq.w	800ffb4 <__kernel_cos+0x12c>
 800fea8:	4642      	mov	r2, r8
 800feaa:	463b      	mov	r3, r7
 800feac:	4640      	mov	r0, r8
 800feae:	4639      	mov	r1, r7
 800feb0:	f7f0 fb4e 	bl	8000550 <__aeabi_dmul>
 800feb4:	2200      	movs	r2, #0
 800feb6:	4b4e      	ldr	r3, [pc, #312]	; (800fff0 <__kernel_cos+0x168>)
 800feb8:	4604      	mov	r4, r0
 800feba:	460d      	mov	r5, r1
 800febc:	f7f0 fb48 	bl	8000550 <__aeabi_dmul>
 800fec0:	a33f      	add	r3, pc, #252	; (adr r3, 800ffc0 <__kernel_cos+0x138>)
 800fec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec6:	4682      	mov	sl, r0
 800fec8:	468b      	mov	fp, r1
 800feca:	4620      	mov	r0, r4
 800fecc:	4629      	mov	r1, r5
 800fece:	f7f0 fb3f 	bl	8000550 <__aeabi_dmul>
 800fed2:	a33d      	add	r3, pc, #244	; (adr r3, 800ffc8 <__kernel_cos+0x140>)
 800fed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed8:	f7f0 f984 	bl	80001e4 <__adddf3>
 800fedc:	4622      	mov	r2, r4
 800fede:	462b      	mov	r3, r5
 800fee0:	f7f0 fb36 	bl	8000550 <__aeabi_dmul>
 800fee4:	a33a      	add	r3, pc, #232	; (adr r3, 800ffd0 <__kernel_cos+0x148>)
 800fee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feea:	f7f0 f979 	bl	80001e0 <__aeabi_dsub>
 800feee:	4622      	mov	r2, r4
 800fef0:	462b      	mov	r3, r5
 800fef2:	f7f0 fb2d 	bl	8000550 <__aeabi_dmul>
 800fef6:	a338      	add	r3, pc, #224	; (adr r3, 800ffd8 <__kernel_cos+0x150>)
 800fef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fefc:	f7f0 f972 	bl	80001e4 <__adddf3>
 800ff00:	4622      	mov	r2, r4
 800ff02:	462b      	mov	r3, r5
 800ff04:	f7f0 fb24 	bl	8000550 <__aeabi_dmul>
 800ff08:	a335      	add	r3, pc, #212	; (adr r3, 800ffe0 <__kernel_cos+0x158>)
 800ff0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0e:	f7f0 f967 	bl	80001e0 <__aeabi_dsub>
 800ff12:	4622      	mov	r2, r4
 800ff14:	462b      	mov	r3, r5
 800ff16:	f7f0 fb1b 	bl	8000550 <__aeabi_dmul>
 800ff1a:	a333      	add	r3, pc, #204	; (adr r3, 800ffe8 <__kernel_cos+0x160>)
 800ff1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff20:	f7f0 f960 	bl	80001e4 <__adddf3>
 800ff24:	4622      	mov	r2, r4
 800ff26:	462b      	mov	r3, r5
 800ff28:	f7f0 fb12 	bl	8000550 <__aeabi_dmul>
 800ff2c:	4622      	mov	r2, r4
 800ff2e:	462b      	mov	r3, r5
 800ff30:	f7f0 fb0e 	bl	8000550 <__aeabi_dmul>
 800ff34:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff38:	4604      	mov	r4, r0
 800ff3a:	460d      	mov	r5, r1
 800ff3c:	4640      	mov	r0, r8
 800ff3e:	4639      	mov	r1, r7
 800ff40:	f7f0 fb06 	bl	8000550 <__aeabi_dmul>
 800ff44:	460b      	mov	r3, r1
 800ff46:	4602      	mov	r2, r0
 800ff48:	4629      	mov	r1, r5
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	f7f0 f948 	bl	80001e0 <__aeabi_dsub>
 800ff50:	4b28      	ldr	r3, [pc, #160]	; (800fff4 <__kernel_cos+0x16c>)
 800ff52:	4680      	mov	r8, r0
 800ff54:	429e      	cmp	r6, r3
 800ff56:	4689      	mov	r9, r1
 800ff58:	dc0e      	bgt.n	800ff78 <__kernel_cos+0xf0>
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	460b      	mov	r3, r1
 800ff5e:	4650      	mov	r0, sl
 800ff60:	4659      	mov	r1, fp
 800ff62:	f7f0 f93d 	bl	80001e0 <__aeabi_dsub>
 800ff66:	4602      	mov	r2, r0
 800ff68:	2000      	movs	r0, #0
 800ff6a:	460b      	mov	r3, r1
 800ff6c:	4922      	ldr	r1, [pc, #136]	; (800fff8 <__kernel_cos+0x170>)
 800ff6e:	f7f0 f937 	bl	80001e0 <__aeabi_dsub>
 800ff72:	b003      	add	sp, #12
 800ff74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff78:	2400      	movs	r4, #0
 800ff7a:	4b20      	ldr	r3, [pc, #128]	; (800fffc <__kernel_cos+0x174>)
 800ff7c:	4622      	mov	r2, r4
 800ff7e:	429e      	cmp	r6, r3
 800ff80:	bfcc      	ite	gt
 800ff82:	4d1f      	ldrgt	r5, [pc, #124]	; (8010000 <__kernel_cos+0x178>)
 800ff84:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ff88:	462b      	mov	r3, r5
 800ff8a:	2000      	movs	r0, #0
 800ff8c:	491a      	ldr	r1, [pc, #104]	; (800fff8 <__kernel_cos+0x170>)
 800ff8e:	f7f0 f927 	bl	80001e0 <__aeabi_dsub>
 800ff92:	4622      	mov	r2, r4
 800ff94:	4606      	mov	r6, r0
 800ff96:	460f      	mov	r7, r1
 800ff98:	462b      	mov	r3, r5
 800ff9a:	4650      	mov	r0, sl
 800ff9c:	4659      	mov	r1, fp
 800ff9e:	f7f0 f91f 	bl	80001e0 <__aeabi_dsub>
 800ffa2:	4642      	mov	r2, r8
 800ffa4:	464b      	mov	r3, r9
 800ffa6:	f7f0 f91b 	bl	80001e0 <__aeabi_dsub>
 800ffaa:	4602      	mov	r2, r0
 800ffac:	460b      	mov	r3, r1
 800ffae:	4630      	mov	r0, r6
 800ffb0:	4639      	mov	r1, r7
 800ffb2:	e7dc      	b.n	800ff6e <__kernel_cos+0xe6>
 800ffb4:	2000      	movs	r0, #0
 800ffb6:	4910      	ldr	r1, [pc, #64]	; (800fff8 <__kernel_cos+0x170>)
 800ffb8:	e7db      	b.n	800ff72 <__kernel_cos+0xea>
 800ffba:	bf00      	nop
 800ffbc:	f3af 8000 	nop.w
 800ffc0:	be8838d4 	.word	0xbe8838d4
 800ffc4:	bda8fae9 	.word	0xbda8fae9
 800ffc8:	bdb4b1c4 	.word	0xbdb4b1c4
 800ffcc:	3e21ee9e 	.word	0x3e21ee9e
 800ffd0:	809c52ad 	.word	0x809c52ad
 800ffd4:	3e927e4f 	.word	0x3e927e4f
 800ffd8:	19cb1590 	.word	0x19cb1590
 800ffdc:	3efa01a0 	.word	0x3efa01a0
 800ffe0:	16c15177 	.word	0x16c15177
 800ffe4:	3f56c16c 	.word	0x3f56c16c
 800ffe8:	5555554c 	.word	0x5555554c
 800ffec:	3fa55555 	.word	0x3fa55555
 800fff0:	3fe00000 	.word	0x3fe00000
 800fff4:	3fd33332 	.word	0x3fd33332
 800fff8:	3ff00000 	.word	0x3ff00000
 800fffc:	3fe90000 	.word	0x3fe90000
 8010000:	3fd20000 	.word	0x3fd20000

08010004 <__kernel_rem_pio2>:
 8010004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010008:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801000c:	9308      	str	r3, [sp, #32]
 801000e:	9101      	str	r1, [sp, #4]
 8010010:	4bc0      	ldr	r3, [pc, #768]	; (8010314 <__kernel_rem_pio2+0x310>)
 8010012:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8010014:	f112 0f14 	cmn.w	r2, #20
 8010018:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801001c:	bfa8      	it	ge
 801001e:	1ed4      	subge	r4, r2, #3
 8010020:	9304      	str	r3, [sp, #16]
 8010022:	9b08      	ldr	r3, [sp, #32]
 8010024:	bfb8      	it	lt
 8010026:	2400      	movlt	r4, #0
 8010028:	f103 33ff 	add.w	r3, r3, #4294967295
 801002c:	9306      	str	r3, [sp, #24]
 801002e:	bfa4      	itt	ge
 8010030:	2318      	movge	r3, #24
 8010032:	fb94 f4f3 	sdivge	r4, r4, r3
 8010036:	f06f 0317 	mvn.w	r3, #23
 801003a:	fb04 3303 	mla	r3, r4, r3, r3
 801003e:	eb03 0a02 	add.w	sl, r3, r2
 8010042:	9a06      	ldr	r2, [sp, #24]
 8010044:	9b04      	ldr	r3, [sp, #16]
 8010046:	1aa7      	subs	r7, r4, r2
 8010048:	eb03 0802 	add.w	r8, r3, r2
 801004c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801004e:	2500      	movs	r5, #0
 8010050:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010054:	2200      	movs	r2, #0
 8010056:	2300      	movs	r3, #0
 8010058:	9009      	str	r0, [sp, #36]	; 0x24
 801005a:	ae20      	add	r6, sp, #128	; 0x80
 801005c:	4545      	cmp	r5, r8
 801005e:	dd19      	ble.n	8010094 <__kernel_rem_pio2+0x90>
 8010060:	9b08      	ldr	r3, [sp, #32]
 8010062:	aa20      	add	r2, sp, #128	; 0x80
 8010064:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010068:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801006c:	f1c3 0301 	rsb	r3, r3, #1
 8010070:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010074:	9307      	str	r3, [sp, #28]
 8010076:	9b07      	ldr	r3, [sp, #28]
 8010078:	9a04      	ldr	r2, [sp, #16]
 801007a:	4443      	add	r3, r8
 801007c:	429a      	cmp	r2, r3
 801007e:	db35      	blt.n	80100ec <__kernel_rem_pio2+0xe8>
 8010080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010082:	2200      	movs	r2, #0
 8010084:	f1a3 0908 	sub.w	r9, r3, #8
 8010088:	2300      	movs	r3, #0
 801008a:	462f      	mov	r7, r5
 801008c:	2600      	movs	r6, #0
 801008e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010092:	e01f      	b.n	80100d4 <__kernel_rem_pio2+0xd0>
 8010094:	42ef      	cmn	r7, r5
 8010096:	d40b      	bmi.n	80100b0 <__kernel_rem_pio2+0xac>
 8010098:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801009c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80100a0:	f7f0 f9ec 	bl	800047c <__aeabi_i2d>
 80100a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100a8:	e8e6 0102 	strd	r0, r1, [r6], #8
 80100ac:	3501      	adds	r5, #1
 80100ae:	e7d5      	b.n	801005c <__kernel_rem_pio2+0x58>
 80100b0:	4610      	mov	r0, r2
 80100b2:	4619      	mov	r1, r3
 80100b4:	e7f8      	b.n	80100a8 <__kernel_rem_pio2+0xa4>
 80100b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100ba:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80100be:	f7f0 fa47 	bl	8000550 <__aeabi_dmul>
 80100c2:	4602      	mov	r2, r0
 80100c4:	460b      	mov	r3, r1
 80100c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100ca:	f7f0 f88b 	bl	80001e4 <__adddf3>
 80100ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100d2:	3601      	adds	r6, #1
 80100d4:	9b06      	ldr	r3, [sp, #24]
 80100d6:	3f08      	subs	r7, #8
 80100d8:	429e      	cmp	r6, r3
 80100da:	ddec      	ble.n	80100b6 <__kernel_rem_pio2+0xb2>
 80100dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100e0:	3508      	adds	r5, #8
 80100e2:	e8eb 2302 	strd	r2, r3, [fp], #8
 80100e6:	f108 0801 	add.w	r8, r8, #1
 80100ea:	e7c4      	b.n	8010076 <__kernel_rem_pio2+0x72>
 80100ec:	9b04      	ldr	r3, [sp, #16]
 80100ee:	aa0c      	add	r2, sp, #48	; 0x30
 80100f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80100f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80100f6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80100f8:	9f04      	ldr	r7, [sp, #16]
 80100fa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80100fe:	930a      	str	r3, [sp, #40]	; 0x28
 8010100:	463e      	mov	r6, r7
 8010102:	ab98      	add	r3, sp, #608	; 0x260
 8010104:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8010108:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801010c:	f8cd b008 	str.w	fp, [sp, #8]
 8010110:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8010114:	2e00      	cmp	r6, #0
 8010116:	dc71      	bgt.n	80101fc <__kernel_rem_pio2+0x1f8>
 8010118:	4652      	mov	r2, sl
 801011a:	4620      	mov	r0, r4
 801011c:	4629      	mov	r1, r5
 801011e:	f000 ffa3 	bl	8011068 <scalbn>
 8010122:	2200      	movs	r2, #0
 8010124:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010128:	4604      	mov	r4, r0
 801012a:	460d      	mov	r5, r1
 801012c:	f7f0 fa10 	bl	8000550 <__aeabi_dmul>
 8010130:	f000 ff1a 	bl	8010f68 <floor>
 8010134:	2200      	movs	r2, #0
 8010136:	4b78      	ldr	r3, [pc, #480]	; (8010318 <__kernel_rem_pio2+0x314>)
 8010138:	f7f0 fa0a 	bl	8000550 <__aeabi_dmul>
 801013c:	4602      	mov	r2, r0
 801013e:	460b      	mov	r3, r1
 8010140:	4620      	mov	r0, r4
 8010142:	4629      	mov	r1, r5
 8010144:	f7f0 f84c 	bl	80001e0 <__aeabi_dsub>
 8010148:	460d      	mov	r5, r1
 801014a:	4604      	mov	r4, r0
 801014c:	f7f0 fcb0 	bl	8000ab0 <__aeabi_d2iz>
 8010150:	9007      	str	r0, [sp, #28]
 8010152:	f7f0 f993 	bl	800047c <__aeabi_i2d>
 8010156:	4602      	mov	r2, r0
 8010158:	460b      	mov	r3, r1
 801015a:	4620      	mov	r0, r4
 801015c:	4629      	mov	r1, r5
 801015e:	f7f0 f83f 	bl	80001e0 <__aeabi_dsub>
 8010162:	f1ba 0f00 	cmp.w	sl, #0
 8010166:	4680      	mov	r8, r0
 8010168:	4689      	mov	r9, r1
 801016a:	dd70      	ble.n	801024e <__kernel_rem_pio2+0x24a>
 801016c:	1e7a      	subs	r2, r7, #1
 801016e:	ab0c      	add	r3, sp, #48	; 0x30
 8010170:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010174:	9c07      	ldr	r4, [sp, #28]
 8010176:	f1ca 0118 	rsb	r1, sl, #24
 801017a:	fa40 f301 	asr.w	r3, r0, r1
 801017e:	441c      	add	r4, r3
 8010180:	408b      	lsls	r3, r1
 8010182:	1ac0      	subs	r0, r0, r3
 8010184:	ab0c      	add	r3, sp, #48	; 0x30
 8010186:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801018a:	f1ca 0317 	rsb	r3, sl, #23
 801018e:	9407      	str	r4, [sp, #28]
 8010190:	fa40 f303 	asr.w	r3, r0, r3
 8010194:	9302      	str	r3, [sp, #8]
 8010196:	9b02      	ldr	r3, [sp, #8]
 8010198:	2b00      	cmp	r3, #0
 801019a:	dd66      	ble.n	801026a <__kernel_rem_pio2+0x266>
 801019c:	2200      	movs	r2, #0
 801019e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80101a2:	4614      	mov	r4, r2
 80101a4:	9b07      	ldr	r3, [sp, #28]
 80101a6:	3301      	adds	r3, #1
 80101a8:	9307      	str	r3, [sp, #28]
 80101aa:	4297      	cmp	r7, r2
 80101ac:	f300 809f 	bgt.w	80102ee <__kernel_rem_pio2+0x2ea>
 80101b0:	f1ba 0f00 	cmp.w	sl, #0
 80101b4:	dd07      	ble.n	80101c6 <__kernel_rem_pio2+0x1c2>
 80101b6:	f1ba 0f01 	cmp.w	sl, #1
 80101ba:	f000 80b9 	beq.w	8010330 <__kernel_rem_pio2+0x32c>
 80101be:	f1ba 0f02 	cmp.w	sl, #2
 80101c2:	f000 80bf 	beq.w	8010344 <__kernel_rem_pio2+0x340>
 80101c6:	9b02      	ldr	r3, [sp, #8]
 80101c8:	2b02      	cmp	r3, #2
 80101ca:	d14e      	bne.n	801026a <__kernel_rem_pio2+0x266>
 80101cc:	4642      	mov	r2, r8
 80101ce:	464b      	mov	r3, r9
 80101d0:	2000      	movs	r0, #0
 80101d2:	4952      	ldr	r1, [pc, #328]	; (801031c <__kernel_rem_pio2+0x318>)
 80101d4:	f7f0 f804 	bl	80001e0 <__aeabi_dsub>
 80101d8:	4680      	mov	r8, r0
 80101da:	4689      	mov	r9, r1
 80101dc:	2c00      	cmp	r4, #0
 80101de:	d044      	beq.n	801026a <__kernel_rem_pio2+0x266>
 80101e0:	4652      	mov	r2, sl
 80101e2:	2000      	movs	r0, #0
 80101e4:	494d      	ldr	r1, [pc, #308]	; (801031c <__kernel_rem_pio2+0x318>)
 80101e6:	f000 ff3f 	bl	8011068 <scalbn>
 80101ea:	4602      	mov	r2, r0
 80101ec:	460b      	mov	r3, r1
 80101ee:	4640      	mov	r0, r8
 80101f0:	4649      	mov	r1, r9
 80101f2:	f7ef fff5 	bl	80001e0 <__aeabi_dsub>
 80101f6:	4680      	mov	r8, r0
 80101f8:	4689      	mov	r9, r1
 80101fa:	e036      	b.n	801026a <__kernel_rem_pio2+0x266>
 80101fc:	2200      	movs	r2, #0
 80101fe:	4b48      	ldr	r3, [pc, #288]	; (8010320 <__kernel_rem_pio2+0x31c>)
 8010200:	4620      	mov	r0, r4
 8010202:	4629      	mov	r1, r5
 8010204:	f7f0 f9a4 	bl	8000550 <__aeabi_dmul>
 8010208:	f7f0 fc52 	bl	8000ab0 <__aeabi_d2iz>
 801020c:	f7f0 f936 	bl	800047c <__aeabi_i2d>
 8010210:	2200      	movs	r2, #0
 8010212:	4b44      	ldr	r3, [pc, #272]	; (8010324 <__kernel_rem_pio2+0x320>)
 8010214:	4680      	mov	r8, r0
 8010216:	4689      	mov	r9, r1
 8010218:	f7f0 f99a 	bl	8000550 <__aeabi_dmul>
 801021c:	4602      	mov	r2, r0
 801021e:	460b      	mov	r3, r1
 8010220:	4620      	mov	r0, r4
 8010222:	4629      	mov	r1, r5
 8010224:	f7ef ffdc 	bl	80001e0 <__aeabi_dsub>
 8010228:	f7f0 fc42 	bl	8000ab0 <__aeabi_d2iz>
 801022c:	9b02      	ldr	r3, [sp, #8]
 801022e:	3e01      	subs	r6, #1
 8010230:	f843 0b04 	str.w	r0, [r3], #4
 8010234:	9302      	str	r3, [sp, #8]
 8010236:	ab70      	add	r3, sp, #448	; 0x1c0
 8010238:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801023c:	4640      	mov	r0, r8
 801023e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010242:	4649      	mov	r1, r9
 8010244:	f7ef ffce 	bl	80001e4 <__adddf3>
 8010248:	4604      	mov	r4, r0
 801024a:	460d      	mov	r5, r1
 801024c:	e762      	b.n	8010114 <__kernel_rem_pio2+0x110>
 801024e:	d105      	bne.n	801025c <__kernel_rem_pio2+0x258>
 8010250:	1e7b      	subs	r3, r7, #1
 8010252:	aa0c      	add	r2, sp, #48	; 0x30
 8010254:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010258:	15c3      	asrs	r3, r0, #23
 801025a:	e79b      	b.n	8010194 <__kernel_rem_pio2+0x190>
 801025c:	2200      	movs	r2, #0
 801025e:	4b32      	ldr	r3, [pc, #200]	; (8010328 <__kernel_rem_pio2+0x324>)
 8010260:	f7f0 fbfc 	bl	8000a5c <__aeabi_dcmpge>
 8010264:	2800      	cmp	r0, #0
 8010266:	d13f      	bne.n	80102e8 <__kernel_rem_pio2+0x2e4>
 8010268:	9002      	str	r0, [sp, #8]
 801026a:	2200      	movs	r2, #0
 801026c:	2300      	movs	r3, #0
 801026e:	4640      	mov	r0, r8
 8010270:	4649      	mov	r1, r9
 8010272:	f7f0 fbd5 	bl	8000a20 <__aeabi_dcmpeq>
 8010276:	2800      	cmp	r0, #0
 8010278:	f000 80b5 	beq.w	80103e6 <__kernel_rem_pio2+0x3e2>
 801027c:	1e7c      	subs	r4, r7, #1
 801027e:	4623      	mov	r3, r4
 8010280:	2200      	movs	r2, #0
 8010282:	9904      	ldr	r1, [sp, #16]
 8010284:	428b      	cmp	r3, r1
 8010286:	da64      	bge.n	8010352 <__kernel_rem_pio2+0x34e>
 8010288:	2a00      	cmp	r2, #0
 801028a:	d078      	beq.n	801037e <__kernel_rem_pio2+0x37a>
 801028c:	ab0c      	add	r3, sp, #48	; 0x30
 801028e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010292:	f1aa 0a18 	sub.w	sl, sl, #24
 8010296:	2b00      	cmp	r3, #0
 8010298:	f000 80a3 	beq.w	80103e2 <__kernel_rem_pio2+0x3de>
 801029c:	4652      	mov	r2, sl
 801029e:	2000      	movs	r0, #0
 80102a0:	491e      	ldr	r1, [pc, #120]	; (801031c <__kernel_rem_pio2+0x318>)
 80102a2:	f000 fee1 	bl	8011068 <scalbn>
 80102a6:	46a2      	mov	sl, r4
 80102a8:	4606      	mov	r6, r0
 80102aa:	460f      	mov	r7, r1
 80102ac:	f04f 0800 	mov.w	r8, #0
 80102b0:	00e3      	lsls	r3, r4, #3
 80102b2:	9306      	str	r3, [sp, #24]
 80102b4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8010320 <__kernel_rem_pio2+0x31c>
 80102b8:	ab70      	add	r3, sp, #448	; 0x1c0
 80102ba:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80102be:	f1ba 0f00 	cmp.w	sl, #0
 80102c2:	f280 80c6 	bge.w	8010452 <__kernel_rem_pio2+0x44e>
 80102c6:	4627      	mov	r7, r4
 80102c8:	f04f 0800 	mov.w	r8, #0
 80102cc:	2f00      	cmp	r7, #0
 80102ce:	f2c0 80f3 	blt.w	80104b8 <__kernel_rem_pio2+0x4b4>
 80102d2:	4b16      	ldr	r3, [pc, #88]	; (801032c <__kernel_rem_pio2+0x328>)
 80102d4:	f04f 0a00 	mov.w	sl, #0
 80102d8:	461d      	mov	r5, r3
 80102da:	ab70      	add	r3, sp, #448	; 0x1c0
 80102dc:	f04f 0b00 	mov.w	fp, #0
 80102e0:	2600      	movs	r6, #0
 80102e2:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80102e6:	e0d9      	b.n	801049c <__kernel_rem_pio2+0x498>
 80102e8:	2302      	movs	r3, #2
 80102ea:	9302      	str	r3, [sp, #8]
 80102ec:	e756      	b.n	801019c <__kernel_rem_pio2+0x198>
 80102ee:	f8db 3000 	ldr.w	r3, [fp]
 80102f2:	b954      	cbnz	r4, 801030a <__kernel_rem_pio2+0x306>
 80102f4:	b123      	cbz	r3, 8010300 <__kernel_rem_pio2+0x2fc>
 80102f6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80102fa:	f8cb 3000 	str.w	r3, [fp]
 80102fe:	2301      	movs	r3, #1
 8010300:	461c      	mov	r4, r3
 8010302:	3201      	adds	r2, #1
 8010304:	f10b 0b04 	add.w	fp, fp, #4
 8010308:	e74f      	b.n	80101aa <__kernel_rem_pio2+0x1a6>
 801030a:	1acb      	subs	r3, r1, r3
 801030c:	f8cb 3000 	str.w	r3, [fp]
 8010310:	4623      	mov	r3, r4
 8010312:	e7f5      	b.n	8010300 <__kernel_rem_pio2+0x2fc>
 8010314:	08014f30 	.word	0x08014f30
 8010318:	40200000 	.word	0x40200000
 801031c:	3ff00000 	.word	0x3ff00000
 8010320:	3e700000 	.word	0x3e700000
 8010324:	41700000 	.word	0x41700000
 8010328:	3fe00000 	.word	0x3fe00000
 801032c:	08014ef0 	.word	0x08014ef0
 8010330:	1e7a      	subs	r2, r7, #1
 8010332:	ab0c      	add	r3, sp, #48	; 0x30
 8010334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010338:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801033c:	a90c      	add	r1, sp, #48	; 0x30
 801033e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010342:	e740      	b.n	80101c6 <__kernel_rem_pio2+0x1c2>
 8010344:	1e7a      	subs	r2, r7, #1
 8010346:	ab0c      	add	r3, sp, #48	; 0x30
 8010348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801034c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010350:	e7f4      	b.n	801033c <__kernel_rem_pio2+0x338>
 8010352:	a90c      	add	r1, sp, #48	; 0x30
 8010354:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010358:	3b01      	subs	r3, #1
 801035a:	430a      	orrs	r2, r1
 801035c:	e791      	b.n	8010282 <__kernel_rem_pio2+0x27e>
 801035e:	3401      	adds	r4, #1
 8010360:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010364:	2a00      	cmp	r2, #0
 8010366:	d0fa      	beq.n	801035e <__kernel_rem_pio2+0x35a>
 8010368:	9b08      	ldr	r3, [sp, #32]
 801036a:	1c7e      	adds	r6, r7, #1
 801036c:	18fd      	adds	r5, r7, r3
 801036e:	ab20      	add	r3, sp, #128	; 0x80
 8010370:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010374:	443c      	add	r4, r7
 8010376:	42b4      	cmp	r4, r6
 8010378:	da04      	bge.n	8010384 <__kernel_rem_pio2+0x380>
 801037a:	4627      	mov	r7, r4
 801037c:	e6c0      	b.n	8010100 <__kernel_rem_pio2+0xfc>
 801037e:	2401      	movs	r4, #1
 8010380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010382:	e7ed      	b.n	8010360 <__kernel_rem_pio2+0x35c>
 8010384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010386:	462f      	mov	r7, r5
 8010388:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801038c:	f7f0 f876 	bl	800047c <__aeabi_i2d>
 8010390:	f04f 0b00 	mov.w	fp, #0
 8010394:	f04f 0800 	mov.w	r8, #0
 8010398:	f04f 0900 	mov.w	r9, #0
 801039c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801039e:	e8e7 0102 	strd	r0, r1, [r7], #8
 80103a2:	3b08      	subs	r3, #8
 80103a4:	9302      	str	r3, [sp, #8]
 80103a6:	9b06      	ldr	r3, [sp, #24]
 80103a8:	459b      	cmp	fp, r3
 80103aa:	dd07      	ble.n	80103bc <__kernel_rem_pio2+0x3b8>
 80103ac:	ab70      	add	r3, sp, #448	; 0x1c0
 80103ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80103b2:	463d      	mov	r5, r7
 80103b4:	e9c3 8900 	strd	r8, r9, [r3]
 80103b8:	3601      	adds	r6, #1
 80103ba:	e7dc      	b.n	8010376 <__kernel_rem_pio2+0x372>
 80103bc:	9902      	ldr	r1, [sp, #8]
 80103be:	f10b 0b01 	add.w	fp, fp, #1
 80103c2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80103c6:	9102      	str	r1, [sp, #8]
 80103c8:	e875 0102 	ldrd	r0, r1, [r5], #-8
 80103cc:	f7f0 f8c0 	bl	8000550 <__aeabi_dmul>
 80103d0:	4602      	mov	r2, r0
 80103d2:	460b      	mov	r3, r1
 80103d4:	4640      	mov	r0, r8
 80103d6:	4649      	mov	r1, r9
 80103d8:	f7ef ff04 	bl	80001e4 <__adddf3>
 80103dc:	4680      	mov	r8, r0
 80103de:	4689      	mov	r9, r1
 80103e0:	e7e1      	b.n	80103a6 <__kernel_rem_pio2+0x3a2>
 80103e2:	3c01      	subs	r4, #1
 80103e4:	e752      	b.n	801028c <__kernel_rem_pio2+0x288>
 80103e6:	f1ca 0200 	rsb	r2, sl, #0
 80103ea:	4640      	mov	r0, r8
 80103ec:	4649      	mov	r1, r9
 80103ee:	f000 fe3b 	bl	8011068 <scalbn>
 80103f2:	2200      	movs	r2, #0
 80103f4:	4ba5      	ldr	r3, [pc, #660]	; (801068c <__kernel_rem_pio2+0x688>)
 80103f6:	4604      	mov	r4, r0
 80103f8:	460d      	mov	r5, r1
 80103fa:	f7f0 fb2f 	bl	8000a5c <__aeabi_dcmpge>
 80103fe:	b1f8      	cbz	r0, 8010440 <__kernel_rem_pio2+0x43c>
 8010400:	2200      	movs	r2, #0
 8010402:	4ba3      	ldr	r3, [pc, #652]	; (8010690 <__kernel_rem_pio2+0x68c>)
 8010404:	4620      	mov	r0, r4
 8010406:	4629      	mov	r1, r5
 8010408:	f7f0 f8a2 	bl	8000550 <__aeabi_dmul>
 801040c:	f7f0 fb50 	bl	8000ab0 <__aeabi_d2iz>
 8010410:	4606      	mov	r6, r0
 8010412:	f7f0 f833 	bl	800047c <__aeabi_i2d>
 8010416:	2200      	movs	r2, #0
 8010418:	4b9c      	ldr	r3, [pc, #624]	; (801068c <__kernel_rem_pio2+0x688>)
 801041a:	f7f0 f899 	bl	8000550 <__aeabi_dmul>
 801041e:	460b      	mov	r3, r1
 8010420:	4602      	mov	r2, r0
 8010422:	4629      	mov	r1, r5
 8010424:	4620      	mov	r0, r4
 8010426:	f7ef fedb 	bl	80001e0 <__aeabi_dsub>
 801042a:	f7f0 fb41 	bl	8000ab0 <__aeabi_d2iz>
 801042e:	1c7c      	adds	r4, r7, #1
 8010430:	ab0c      	add	r3, sp, #48	; 0x30
 8010432:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8010436:	f10a 0a18 	add.w	sl, sl, #24
 801043a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 801043e:	e72d      	b.n	801029c <__kernel_rem_pio2+0x298>
 8010440:	4620      	mov	r0, r4
 8010442:	4629      	mov	r1, r5
 8010444:	f7f0 fb34 	bl	8000ab0 <__aeabi_d2iz>
 8010448:	ab0c      	add	r3, sp, #48	; 0x30
 801044a:	463c      	mov	r4, r7
 801044c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8010450:	e724      	b.n	801029c <__kernel_rem_pio2+0x298>
 8010452:	ab0c      	add	r3, sp, #48	; 0x30
 8010454:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8010458:	f7f0 f810 	bl	800047c <__aeabi_i2d>
 801045c:	4632      	mov	r2, r6
 801045e:	463b      	mov	r3, r7
 8010460:	f7f0 f876 	bl	8000550 <__aeabi_dmul>
 8010464:	4642      	mov	r2, r8
 8010466:	e86b 0102 	strd	r0, r1, [fp], #-8
 801046a:	464b      	mov	r3, r9
 801046c:	4630      	mov	r0, r6
 801046e:	4639      	mov	r1, r7
 8010470:	f7f0 f86e 	bl	8000550 <__aeabi_dmul>
 8010474:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010478:	4606      	mov	r6, r0
 801047a:	460f      	mov	r7, r1
 801047c:	e71f      	b.n	80102be <__kernel_rem_pio2+0x2ba>
 801047e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8010482:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8010486:	f7f0 f863 	bl	8000550 <__aeabi_dmul>
 801048a:	4602      	mov	r2, r0
 801048c:	460b      	mov	r3, r1
 801048e:	4650      	mov	r0, sl
 8010490:	4659      	mov	r1, fp
 8010492:	f7ef fea7 	bl	80001e4 <__adddf3>
 8010496:	4682      	mov	sl, r0
 8010498:	468b      	mov	fp, r1
 801049a:	3601      	adds	r6, #1
 801049c:	9b04      	ldr	r3, [sp, #16]
 801049e:	429e      	cmp	r6, r3
 80104a0:	dc01      	bgt.n	80104a6 <__kernel_rem_pio2+0x4a2>
 80104a2:	45b0      	cmp	r8, r6
 80104a4:	daeb      	bge.n	801047e <__kernel_rem_pio2+0x47a>
 80104a6:	ab48      	add	r3, sp, #288	; 0x120
 80104a8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80104ac:	e9c3 ab00 	strd	sl, fp, [r3]
 80104b0:	3f01      	subs	r7, #1
 80104b2:	f108 0801 	add.w	r8, r8, #1
 80104b6:	e709      	b.n	80102cc <__kernel_rem_pio2+0x2c8>
 80104b8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80104ba:	2b02      	cmp	r3, #2
 80104bc:	dc09      	bgt.n	80104d2 <__kernel_rem_pio2+0x4ce>
 80104be:	2b00      	cmp	r3, #0
 80104c0:	dc34      	bgt.n	801052c <__kernel_rem_pio2+0x528>
 80104c2:	d05e      	beq.n	8010582 <__kernel_rem_pio2+0x57e>
 80104c4:	9b07      	ldr	r3, [sp, #28]
 80104c6:	f003 0007 	and.w	r0, r3, #7
 80104ca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80104ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104d2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80104d4:	2b03      	cmp	r3, #3
 80104d6:	d1f5      	bne.n	80104c4 <__kernel_rem_pio2+0x4c0>
 80104d8:	9a06      	ldr	r2, [sp, #24]
 80104da:	ab48      	add	r3, sp, #288	; 0x120
 80104dc:	441a      	add	r2, r3
 80104de:	4615      	mov	r5, r2
 80104e0:	4692      	mov	sl, r2
 80104e2:	46a3      	mov	fp, r4
 80104e4:	f1bb 0f00 	cmp.w	fp, #0
 80104e8:	dc7a      	bgt.n	80105e0 <__kernel_rem_pio2+0x5dc>
 80104ea:	46aa      	mov	sl, r5
 80104ec:	46a3      	mov	fp, r4
 80104ee:	f1bb 0f01 	cmp.w	fp, #1
 80104f2:	f300 8094 	bgt.w	801061e <__kernel_rem_pio2+0x61a>
 80104f6:	2700      	movs	r7, #0
 80104f8:	463e      	mov	r6, r7
 80104fa:	2c01      	cmp	r4, #1
 80104fc:	f300 80ae 	bgt.w	801065c <__kernel_rem_pio2+0x658>
 8010500:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8010504:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8010508:	9b02      	ldr	r3, [sp, #8]
 801050a:	2b00      	cmp	r3, #0
 801050c:	f040 80b0 	bne.w	8010670 <__kernel_rem_pio2+0x66c>
 8010510:	4603      	mov	r3, r0
 8010512:	462a      	mov	r2, r5
 8010514:	9801      	ldr	r0, [sp, #4]
 8010516:	e9c0 2300 	strd	r2, r3, [r0]
 801051a:	4622      	mov	r2, r4
 801051c:	460b      	mov	r3, r1
 801051e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010522:	463a      	mov	r2, r7
 8010524:	4633      	mov	r3, r6
 8010526:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801052a:	e7cb      	b.n	80104c4 <__kernel_rem_pio2+0x4c0>
 801052c:	2000      	movs	r0, #0
 801052e:	9a06      	ldr	r2, [sp, #24]
 8010530:	ab48      	add	r3, sp, #288	; 0x120
 8010532:	441a      	add	r2, r3
 8010534:	4615      	mov	r5, r2
 8010536:	46a0      	mov	r8, r4
 8010538:	4601      	mov	r1, r0
 801053a:	f1b8 0f00 	cmp.w	r8, #0
 801053e:	da3c      	bge.n	80105ba <__kernel_rem_pio2+0x5b6>
 8010540:	9b02      	ldr	r3, [sp, #8]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d040      	beq.n	80105c8 <__kernel_rem_pio2+0x5c4>
 8010546:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 801054a:	4602      	mov	r2, r0
 801054c:	462b      	mov	r3, r5
 801054e:	9d01      	ldr	r5, [sp, #4]
 8010550:	2601      	movs	r6, #1
 8010552:	e9c5 2300 	strd	r2, r3, [r5]
 8010556:	460b      	mov	r3, r1
 8010558:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801055c:	f7ef fe40 	bl	80001e0 <__aeabi_dsub>
 8010560:	4684      	mov	ip, r0
 8010562:	460f      	mov	r7, r1
 8010564:	ad48      	add	r5, sp, #288	; 0x120
 8010566:	42b4      	cmp	r4, r6
 8010568:	f105 0508 	add.w	r5, r5, #8
 801056c:	da2e      	bge.n	80105cc <__kernel_rem_pio2+0x5c8>
 801056e:	9b02      	ldr	r3, [sp, #8]
 8010570:	b10b      	cbz	r3, 8010576 <__kernel_rem_pio2+0x572>
 8010572:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8010576:	4662      	mov	r2, ip
 8010578:	463b      	mov	r3, r7
 801057a:	9901      	ldr	r1, [sp, #4]
 801057c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8010580:	e7a0      	b.n	80104c4 <__kernel_rem_pio2+0x4c0>
 8010582:	9a06      	ldr	r2, [sp, #24]
 8010584:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8010586:	ab48      	add	r3, sp, #288	; 0x120
 8010588:	441a      	add	r2, r3
 801058a:	4615      	mov	r5, r2
 801058c:	4637      	mov	r7, r6
 801058e:	2c00      	cmp	r4, #0
 8010590:	da09      	bge.n	80105a6 <__kernel_rem_pio2+0x5a2>
 8010592:	9b02      	ldr	r3, [sp, #8]
 8010594:	b10b      	cbz	r3, 801059a <__kernel_rem_pio2+0x596>
 8010596:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 801059a:	4632      	mov	r2, r6
 801059c:	463b      	mov	r3, r7
 801059e:	9901      	ldr	r1, [sp, #4]
 80105a0:	e9c1 2300 	strd	r2, r3, [r1]
 80105a4:	e78e      	b.n	80104c4 <__kernel_rem_pio2+0x4c0>
 80105a6:	4630      	mov	r0, r6
 80105a8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80105ac:	4639      	mov	r1, r7
 80105ae:	f7ef fe19 	bl	80001e4 <__adddf3>
 80105b2:	3c01      	subs	r4, #1
 80105b4:	4606      	mov	r6, r0
 80105b6:	460f      	mov	r7, r1
 80105b8:	e7e9      	b.n	801058e <__kernel_rem_pio2+0x58a>
 80105ba:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80105be:	f7ef fe11 	bl	80001e4 <__adddf3>
 80105c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80105c6:	e7b8      	b.n	801053a <__kernel_rem_pio2+0x536>
 80105c8:	460d      	mov	r5, r1
 80105ca:	e7be      	b.n	801054a <__kernel_rem_pio2+0x546>
 80105cc:	4660      	mov	r0, ip
 80105ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 80105d2:	4639      	mov	r1, r7
 80105d4:	f7ef fe06 	bl	80001e4 <__adddf3>
 80105d8:	3601      	adds	r6, #1
 80105da:	4684      	mov	ip, r0
 80105dc:	460f      	mov	r7, r1
 80105de:	e7c2      	b.n	8010566 <__kernel_rem_pio2+0x562>
 80105e0:	e9da 6700 	ldrd	r6, r7, [sl]
 80105e4:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80105e8:	4632      	mov	r2, r6
 80105ea:	463b      	mov	r3, r7
 80105ec:	4640      	mov	r0, r8
 80105ee:	4649      	mov	r1, r9
 80105f0:	f7ef fdf8 	bl	80001e4 <__adddf3>
 80105f4:	4602      	mov	r2, r0
 80105f6:	460b      	mov	r3, r1
 80105f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105fc:	4640      	mov	r0, r8
 80105fe:	4649      	mov	r1, r9
 8010600:	f7ef fdee 	bl	80001e0 <__aeabi_dsub>
 8010604:	4632      	mov	r2, r6
 8010606:	463b      	mov	r3, r7
 8010608:	f7ef fdec 	bl	80001e4 <__adddf3>
 801060c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010610:	e86a 0102 	strd	r0, r1, [sl], #-8
 8010614:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010618:	e9ca 2300 	strd	r2, r3, [sl]
 801061c:	e762      	b.n	80104e4 <__kernel_rem_pio2+0x4e0>
 801061e:	e9da 8900 	ldrd	r8, r9, [sl]
 8010622:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8010626:	4642      	mov	r2, r8
 8010628:	464b      	mov	r3, r9
 801062a:	4630      	mov	r0, r6
 801062c:	4639      	mov	r1, r7
 801062e:	f7ef fdd9 	bl	80001e4 <__adddf3>
 8010632:	4602      	mov	r2, r0
 8010634:	460b      	mov	r3, r1
 8010636:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801063a:	4630      	mov	r0, r6
 801063c:	4639      	mov	r1, r7
 801063e:	f7ef fdcf 	bl	80001e0 <__aeabi_dsub>
 8010642:	4642      	mov	r2, r8
 8010644:	464b      	mov	r3, r9
 8010646:	f7ef fdcd 	bl	80001e4 <__adddf3>
 801064a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801064e:	e86a 0102 	strd	r0, r1, [sl], #-8
 8010652:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010656:	e9ca 2300 	strd	r2, r3, [sl]
 801065a:	e748      	b.n	80104ee <__kernel_rem_pio2+0x4ea>
 801065c:	4638      	mov	r0, r7
 801065e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8010662:	4631      	mov	r1, r6
 8010664:	f7ef fdbe 	bl	80001e4 <__adddf3>
 8010668:	3c01      	subs	r4, #1
 801066a:	4607      	mov	r7, r0
 801066c:	460e      	mov	r6, r1
 801066e:	e744      	b.n	80104fa <__kernel_rem_pio2+0x4f6>
 8010670:	9b01      	ldr	r3, [sp, #4]
 8010672:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010676:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801067a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 801067e:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8010682:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8010686:	601d      	str	r5, [r3, #0]
 8010688:	615e      	str	r6, [r3, #20]
 801068a:	e71b      	b.n	80104c4 <__kernel_rem_pio2+0x4c0>
 801068c:	41700000 	.word	0x41700000
 8010690:	3e700000 	.word	0x3e700000
 8010694:	00000000 	.word	0x00000000

08010698 <__kernel_sin>:
 8010698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801069c:	b086      	sub	sp, #24
 801069e:	e9cd 2300 	strd	r2, r3, [sp]
 80106a2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80106a6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80106aa:	4682      	mov	sl, r0
 80106ac:	460c      	mov	r4, r1
 80106ae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80106b0:	da03      	bge.n	80106ba <__kernel_sin+0x22>
 80106b2:	f7f0 f9fd 	bl	8000ab0 <__aeabi_d2iz>
 80106b6:	2800      	cmp	r0, #0
 80106b8:	d050      	beq.n	801075c <__kernel_sin+0xc4>
 80106ba:	4652      	mov	r2, sl
 80106bc:	4623      	mov	r3, r4
 80106be:	4650      	mov	r0, sl
 80106c0:	4621      	mov	r1, r4
 80106c2:	f7ef ff45 	bl	8000550 <__aeabi_dmul>
 80106c6:	4606      	mov	r6, r0
 80106c8:	460f      	mov	r7, r1
 80106ca:	4602      	mov	r2, r0
 80106cc:	460b      	mov	r3, r1
 80106ce:	4650      	mov	r0, sl
 80106d0:	4621      	mov	r1, r4
 80106d2:	f7ef ff3d 	bl	8000550 <__aeabi_dmul>
 80106d6:	a33e      	add	r3, pc, #248	; (adr r3, 80107d0 <__kernel_sin+0x138>)
 80106d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106dc:	4680      	mov	r8, r0
 80106de:	4689      	mov	r9, r1
 80106e0:	4630      	mov	r0, r6
 80106e2:	4639      	mov	r1, r7
 80106e4:	f7ef ff34 	bl	8000550 <__aeabi_dmul>
 80106e8:	a33b      	add	r3, pc, #236	; (adr r3, 80107d8 <__kernel_sin+0x140>)
 80106ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ee:	f7ef fd77 	bl	80001e0 <__aeabi_dsub>
 80106f2:	4632      	mov	r2, r6
 80106f4:	463b      	mov	r3, r7
 80106f6:	f7ef ff2b 	bl	8000550 <__aeabi_dmul>
 80106fa:	a339      	add	r3, pc, #228	; (adr r3, 80107e0 <__kernel_sin+0x148>)
 80106fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010700:	f7ef fd70 	bl	80001e4 <__adddf3>
 8010704:	4632      	mov	r2, r6
 8010706:	463b      	mov	r3, r7
 8010708:	f7ef ff22 	bl	8000550 <__aeabi_dmul>
 801070c:	a336      	add	r3, pc, #216	; (adr r3, 80107e8 <__kernel_sin+0x150>)
 801070e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010712:	f7ef fd65 	bl	80001e0 <__aeabi_dsub>
 8010716:	4632      	mov	r2, r6
 8010718:	463b      	mov	r3, r7
 801071a:	f7ef ff19 	bl	8000550 <__aeabi_dmul>
 801071e:	a334      	add	r3, pc, #208	; (adr r3, 80107f0 <__kernel_sin+0x158>)
 8010720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010724:	f7ef fd5e 	bl	80001e4 <__adddf3>
 8010728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801072c:	b9dd      	cbnz	r5, 8010766 <__kernel_sin+0xce>
 801072e:	4602      	mov	r2, r0
 8010730:	460b      	mov	r3, r1
 8010732:	4630      	mov	r0, r6
 8010734:	4639      	mov	r1, r7
 8010736:	f7ef ff0b 	bl	8000550 <__aeabi_dmul>
 801073a:	a32f      	add	r3, pc, #188	; (adr r3, 80107f8 <__kernel_sin+0x160>)
 801073c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010740:	f7ef fd4e 	bl	80001e0 <__aeabi_dsub>
 8010744:	4642      	mov	r2, r8
 8010746:	464b      	mov	r3, r9
 8010748:	f7ef ff02 	bl	8000550 <__aeabi_dmul>
 801074c:	4602      	mov	r2, r0
 801074e:	460b      	mov	r3, r1
 8010750:	4650      	mov	r0, sl
 8010752:	4621      	mov	r1, r4
 8010754:	f7ef fd46 	bl	80001e4 <__adddf3>
 8010758:	4682      	mov	sl, r0
 801075a:	460c      	mov	r4, r1
 801075c:	4650      	mov	r0, sl
 801075e:	4621      	mov	r1, r4
 8010760:	b006      	add	sp, #24
 8010762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010766:	2200      	movs	r2, #0
 8010768:	e9dd 0100 	ldrd	r0, r1, [sp]
 801076c:	4b24      	ldr	r3, [pc, #144]	; (8010800 <__kernel_sin+0x168>)
 801076e:	f7ef feef 	bl	8000550 <__aeabi_dmul>
 8010772:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010776:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801077a:	4640      	mov	r0, r8
 801077c:	4649      	mov	r1, r9
 801077e:	f7ef fee7 	bl	8000550 <__aeabi_dmul>
 8010782:	4602      	mov	r2, r0
 8010784:	460b      	mov	r3, r1
 8010786:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801078a:	f7ef fd29 	bl	80001e0 <__aeabi_dsub>
 801078e:	4632      	mov	r2, r6
 8010790:	463b      	mov	r3, r7
 8010792:	f7ef fedd 	bl	8000550 <__aeabi_dmul>
 8010796:	e9dd 2300 	ldrd	r2, r3, [sp]
 801079a:	f7ef fd21 	bl	80001e0 <__aeabi_dsub>
 801079e:	a316      	add	r3, pc, #88	; (adr r3, 80107f8 <__kernel_sin+0x160>)
 80107a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a4:	4606      	mov	r6, r0
 80107a6:	460f      	mov	r7, r1
 80107a8:	4640      	mov	r0, r8
 80107aa:	4649      	mov	r1, r9
 80107ac:	f7ef fed0 	bl	8000550 <__aeabi_dmul>
 80107b0:	4602      	mov	r2, r0
 80107b2:	460b      	mov	r3, r1
 80107b4:	4630      	mov	r0, r6
 80107b6:	4639      	mov	r1, r7
 80107b8:	f7ef fd14 	bl	80001e4 <__adddf3>
 80107bc:	4602      	mov	r2, r0
 80107be:	460b      	mov	r3, r1
 80107c0:	4650      	mov	r0, sl
 80107c2:	4621      	mov	r1, r4
 80107c4:	f7ef fd0c 	bl	80001e0 <__aeabi_dsub>
 80107c8:	e7c6      	b.n	8010758 <__kernel_sin+0xc0>
 80107ca:	bf00      	nop
 80107cc:	f3af 8000 	nop.w
 80107d0:	5acfd57c 	.word	0x5acfd57c
 80107d4:	3de5d93a 	.word	0x3de5d93a
 80107d8:	8a2b9ceb 	.word	0x8a2b9ceb
 80107dc:	3e5ae5e6 	.word	0x3e5ae5e6
 80107e0:	57b1fe7d 	.word	0x57b1fe7d
 80107e4:	3ec71de3 	.word	0x3ec71de3
 80107e8:	19c161d5 	.word	0x19c161d5
 80107ec:	3f2a01a0 	.word	0x3f2a01a0
 80107f0:	1110f8a6 	.word	0x1110f8a6
 80107f4:	3f811111 	.word	0x3f811111
 80107f8:	55555549 	.word	0x55555549
 80107fc:	3fc55555 	.word	0x3fc55555
 8010800:	3fe00000 	.word	0x3fe00000

08010804 <__kernel_cosf>:
 8010804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010808:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 801080c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8010810:	4606      	mov	r6, r0
 8010812:	4688      	mov	r8, r1
 8010814:	da03      	bge.n	801081e <__kernel_cosf+0x1a>
 8010816:	f7f0 fccd 	bl	80011b4 <__aeabi_f2iz>
 801081a:	2800      	cmp	r0, #0
 801081c:	d05c      	beq.n	80108d8 <__kernel_cosf+0xd4>
 801081e:	4631      	mov	r1, r6
 8010820:	4630      	mov	r0, r6
 8010822:	f7f0 faeb 	bl	8000dfc <__aeabi_fmul>
 8010826:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801082a:	4605      	mov	r5, r0
 801082c:	f7f0 fae6 	bl	8000dfc <__aeabi_fmul>
 8010830:	492b      	ldr	r1, [pc, #172]	; (80108e0 <__kernel_cosf+0xdc>)
 8010832:	4607      	mov	r7, r0
 8010834:	4628      	mov	r0, r5
 8010836:	f7f0 fae1 	bl	8000dfc <__aeabi_fmul>
 801083a:	492a      	ldr	r1, [pc, #168]	; (80108e4 <__kernel_cosf+0xe0>)
 801083c:	f7f0 f9d6 	bl	8000bec <__addsf3>
 8010840:	4629      	mov	r1, r5
 8010842:	f7f0 fadb 	bl	8000dfc <__aeabi_fmul>
 8010846:	4928      	ldr	r1, [pc, #160]	; (80108e8 <__kernel_cosf+0xe4>)
 8010848:	f7f0 f9ce 	bl	8000be8 <__aeabi_fsub>
 801084c:	4629      	mov	r1, r5
 801084e:	f7f0 fad5 	bl	8000dfc <__aeabi_fmul>
 8010852:	4926      	ldr	r1, [pc, #152]	; (80108ec <__kernel_cosf+0xe8>)
 8010854:	f7f0 f9ca 	bl	8000bec <__addsf3>
 8010858:	4629      	mov	r1, r5
 801085a:	f7f0 facf 	bl	8000dfc <__aeabi_fmul>
 801085e:	4924      	ldr	r1, [pc, #144]	; (80108f0 <__kernel_cosf+0xec>)
 8010860:	f7f0 f9c2 	bl	8000be8 <__aeabi_fsub>
 8010864:	4629      	mov	r1, r5
 8010866:	f7f0 fac9 	bl	8000dfc <__aeabi_fmul>
 801086a:	4922      	ldr	r1, [pc, #136]	; (80108f4 <__kernel_cosf+0xf0>)
 801086c:	f7f0 f9be 	bl	8000bec <__addsf3>
 8010870:	4629      	mov	r1, r5
 8010872:	f7f0 fac3 	bl	8000dfc <__aeabi_fmul>
 8010876:	4629      	mov	r1, r5
 8010878:	f7f0 fac0 	bl	8000dfc <__aeabi_fmul>
 801087c:	4641      	mov	r1, r8
 801087e:	4605      	mov	r5, r0
 8010880:	4630      	mov	r0, r6
 8010882:	f7f0 fabb 	bl	8000dfc <__aeabi_fmul>
 8010886:	4601      	mov	r1, r0
 8010888:	4628      	mov	r0, r5
 801088a:	f7f0 f9ad 	bl	8000be8 <__aeabi_fsub>
 801088e:	4b1a      	ldr	r3, [pc, #104]	; (80108f8 <__kernel_cosf+0xf4>)
 8010890:	4605      	mov	r5, r0
 8010892:	429c      	cmp	r4, r3
 8010894:	dc0a      	bgt.n	80108ac <__kernel_cosf+0xa8>
 8010896:	4601      	mov	r1, r0
 8010898:	4638      	mov	r0, r7
 801089a:	f7f0 f9a5 	bl	8000be8 <__aeabi_fsub>
 801089e:	4601      	mov	r1, r0
 80108a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80108a4:	f7f0 f9a0 	bl	8000be8 <__aeabi_fsub>
 80108a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108ac:	4b13      	ldr	r3, [pc, #76]	; (80108fc <__kernel_cosf+0xf8>)
 80108ae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80108b2:	429c      	cmp	r4, r3
 80108b4:	bfcc      	ite	gt
 80108b6:	4c12      	ldrgt	r4, [pc, #72]	; (8010900 <__kernel_cosf+0xfc>)
 80108b8:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 80108bc:	4621      	mov	r1, r4
 80108be:	f7f0 f993 	bl	8000be8 <__aeabi_fsub>
 80108c2:	4621      	mov	r1, r4
 80108c4:	4606      	mov	r6, r0
 80108c6:	4638      	mov	r0, r7
 80108c8:	f7f0 f98e 	bl	8000be8 <__aeabi_fsub>
 80108cc:	4629      	mov	r1, r5
 80108ce:	f7f0 f98b 	bl	8000be8 <__aeabi_fsub>
 80108d2:	4601      	mov	r1, r0
 80108d4:	4630      	mov	r0, r6
 80108d6:	e7e5      	b.n	80108a4 <__kernel_cosf+0xa0>
 80108d8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80108dc:	e7e4      	b.n	80108a8 <__kernel_cosf+0xa4>
 80108de:	bf00      	nop
 80108e0:	ad47d74e 	.word	0xad47d74e
 80108e4:	310f74f6 	.word	0x310f74f6
 80108e8:	3493f27c 	.word	0x3493f27c
 80108ec:	37d00d01 	.word	0x37d00d01
 80108f0:	3ab60b61 	.word	0x3ab60b61
 80108f4:	3d2aaaab 	.word	0x3d2aaaab
 80108f8:	3e999999 	.word	0x3e999999
 80108fc:	3f480000 	.word	0x3f480000
 8010900:	3e900000 	.word	0x3e900000

08010904 <__kernel_rem_pio2f>:
 8010904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010908:	b0db      	sub	sp, #364	; 0x16c
 801090a:	9202      	str	r2, [sp, #8]
 801090c:	9304      	str	r3, [sp, #16]
 801090e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8010910:	4bc5      	ldr	r3, [pc, #788]	; (8010c28 <__kernel_rem_pio2f+0x324>)
 8010912:	9005      	str	r0, [sp, #20]
 8010914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010918:	9100      	str	r1, [sp, #0]
 801091a:	9301      	str	r3, [sp, #4]
 801091c:	9b04      	ldr	r3, [sp, #16]
 801091e:	3b01      	subs	r3, #1
 8010920:	9303      	str	r3, [sp, #12]
 8010922:	9b02      	ldr	r3, [sp, #8]
 8010924:	1d1a      	adds	r2, r3, #4
 8010926:	f2c0 809b 	blt.w	8010a60 <__kernel_rem_pio2f+0x15c>
 801092a:	1edc      	subs	r4, r3, #3
 801092c:	bf48      	it	mi
 801092e:	1d1c      	addmi	r4, r3, #4
 8010930:	10e4      	asrs	r4, r4, #3
 8010932:	2500      	movs	r5, #0
 8010934:	f04f 0a00 	mov.w	sl, #0
 8010938:	1c67      	adds	r7, r4, #1
 801093a:	00fb      	lsls	r3, r7, #3
 801093c:	9306      	str	r3, [sp, #24]
 801093e:	9b02      	ldr	r3, [sp, #8]
 8010940:	9a03      	ldr	r2, [sp, #12]
 8010942:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8010946:	9b01      	ldr	r3, [sp, #4]
 8010948:	1aa6      	subs	r6, r4, r2
 801094a:	eb03 0802 	add.w	r8, r3, r2
 801094e:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8010950:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 8010954:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 8010958:	4545      	cmp	r5, r8
 801095a:	f340 8083 	ble.w	8010a64 <__kernel_rem_pio2f+0x160>
 801095e:	f04f 0800 	mov.w	r8, #0
 8010962:	f04f 0b00 	mov.w	fp, #0
 8010966:	9b04      	ldr	r3, [sp, #16]
 8010968:	aa1e      	add	r2, sp, #120	; 0x78
 801096a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801096e:	ab46      	add	r3, sp, #280	; 0x118
 8010970:	9a01      	ldr	r2, [sp, #4]
 8010972:	4590      	cmp	r8, r2
 8010974:	f340 809c 	ble.w	8010ab0 <__kernel_rem_pio2f+0x1ac>
 8010978:	4613      	mov	r3, r2
 801097a:	aa0a      	add	r2, sp, #40	; 0x28
 801097c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010980:	9308      	str	r3, [sp, #32]
 8010982:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8010984:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010988:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801098c:	9307      	str	r3, [sp, #28]
 801098e:	ad0a      	add	r5, sp, #40	; 0x28
 8010990:	462e      	mov	r6, r5
 8010992:	46c3      	mov	fp, r8
 8010994:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8010998:	ab5a      	add	r3, sp, #360	; 0x168
 801099a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801099e:	f853 4c50 	ldr.w	r4, [r3, #-80]
 80109a2:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 80109a6:	f1bb 0f00 	cmp.w	fp, #0
 80109aa:	f300 8086 	bgt.w	8010aba <__kernel_rem_pio2f+0x1b6>
 80109ae:	4639      	mov	r1, r7
 80109b0:	4620      	mov	r0, r4
 80109b2:	f000 fc25 	bl	8011200 <scalbnf>
 80109b6:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80109ba:	4604      	mov	r4, r0
 80109bc:	f7f0 fa1e 	bl	8000dfc <__aeabi_fmul>
 80109c0:	f000 fbd8 	bl	8011174 <floorf>
 80109c4:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80109c8:	f7f0 fa18 	bl	8000dfc <__aeabi_fmul>
 80109cc:	4601      	mov	r1, r0
 80109ce:	4620      	mov	r0, r4
 80109d0:	f7f0 f90a 	bl	8000be8 <__aeabi_fsub>
 80109d4:	4604      	mov	r4, r0
 80109d6:	f7f0 fbed 	bl	80011b4 <__aeabi_f2iz>
 80109da:	4606      	mov	r6, r0
 80109dc:	f7f0 f9ba 	bl	8000d54 <__aeabi_i2f>
 80109e0:	4601      	mov	r1, r0
 80109e2:	4620      	mov	r0, r4
 80109e4:	f7f0 f900 	bl	8000be8 <__aeabi_fsub>
 80109e8:	2f00      	cmp	r7, #0
 80109ea:	4681      	mov	r9, r0
 80109ec:	f340 8084 	ble.w	8010af8 <__kernel_rem_pio2f+0x1f4>
 80109f0:	f108 32ff 	add.w	r2, r8, #4294967295
 80109f4:	ab0a      	add	r3, sp, #40	; 0x28
 80109f6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80109fa:	f1c7 0108 	rsb	r1, r7, #8
 80109fe:	fa44 f301 	asr.w	r3, r4, r1
 8010a02:	441e      	add	r6, r3
 8010a04:	408b      	lsls	r3, r1
 8010a06:	1ae4      	subs	r4, r4, r3
 8010a08:	f1c7 0007 	rsb	r0, r7, #7
 8010a0c:	ab0a      	add	r3, sp, #40	; 0x28
 8010a0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010a12:	4104      	asrs	r4, r0
 8010a14:	2c00      	cmp	r4, #0
 8010a16:	dd7e      	ble.n	8010b16 <__kernel_rem_pio2f+0x212>
 8010a18:	2200      	movs	r2, #0
 8010a1a:	4692      	mov	sl, r2
 8010a1c:	3601      	adds	r6, #1
 8010a1e:	4590      	cmp	r8, r2
 8010a20:	f300 80b0 	bgt.w	8010b84 <__kernel_rem_pio2f+0x280>
 8010a24:	2f00      	cmp	r7, #0
 8010a26:	dd05      	ble.n	8010a34 <__kernel_rem_pio2f+0x130>
 8010a28:	2f01      	cmp	r7, #1
 8010a2a:	f000 80bd 	beq.w	8010ba8 <__kernel_rem_pio2f+0x2a4>
 8010a2e:	2f02      	cmp	r7, #2
 8010a30:	f000 80c5 	beq.w	8010bbe <__kernel_rem_pio2f+0x2ba>
 8010a34:	2c02      	cmp	r4, #2
 8010a36:	d16e      	bne.n	8010b16 <__kernel_rem_pio2f+0x212>
 8010a38:	4649      	mov	r1, r9
 8010a3a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010a3e:	f7f0 f8d3 	bl	8000be8 <__aeabi_fsub>
 8010a42:	4681      	mov	r9, r0
 8010a44:	f1ba 0f00 	cmp.w	sl, #0
 8010a48:	d065      	beq.n	8010b16 <__kernel_rem_pio2f+0x212>
 8010a4a:	4639      	mov	r1, r7
 8010a4c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010a50:	f000 fbd6 	bl	8011200 <scalbnf>
 8010a54:	4601      	mov	r1, r0
 8010a56:	4648      	mov	r0, r9
 8010a58:	f7f0 f8c6 	bl	8000be8 <__aeabi_fsub>
 8010a5c:	4681      	mov	r9, r0
 8010a5e:	e05a      	b.n	8010b16 <__kernel_rem_pio2f+0x212>
 8010a60:	2400      	movs	r4, #0
 8010a62:	e766      	b.n	8010932 <__kernel_rem_pio2f+0x2e>
 8010a64:	42ee      	cmn	r6, r5
 8010a66:	d407      	bmi.n	8010a78 <__kernel_rem_pio2f+0x174>
 8010a68:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010a6c:	f7f0 f972 	bl	8000d54 <__aeabi_i2f>
 8010a70:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8010a74:	3501      	adds	r5, #1
 8010a76:	e76f      	b.n	8010958 <__kernel_rem_pio2f+0x54>
 8010a78:	4650      	mov	r0, sl
 8010a7a:	e7f9      	b.n	8010a70 <__kernel_rem_pio2f+0x16c>
 8010a7c:	9b05      	ldr	r3, [sp, #20]
 8010a7e:	f8da 1000 	ldr.w	r1, [sl]
 8010a82:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8010a86:	f7f0 f9b9 	bl	8000dfc <__aeabi_fmul>
 8010a8a:	4601      	mov	r1, r0
 8010a8c:	4630      	mov	r0, r6
 8010a8e:	f7f0 f8ad 	bl	8000bec <__addsf3>
 8010a92:	4606      	mov	r6, r0
 8010a94:	f109 0901 	add.w	r9, r9, #1
 8010a98:	ab46      	add	r3, sp, #280	; 0x118
 8010a9a:	9a03      	ldr	r2, [sp, #12]
 8010a9c:	f1aa 0a04 	sub.w	sl, sl, #4
 8010aa0:	4591      	cmp	r9, r2
 8010aa2:	ddeb      	ble.n	8010a7c <__kernel_rem_pio2f+0x178>
 8010aa4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8010aa8:	3504      	adds	r5, #4
 8010aaa:	f108 0801 	add.w	r8, r8, #1
 8010aae:	e75f      	b.n	8010970 <__kernel_rem_pio2f+0x6c>
 8010ab0:	46aa      	mov	sl, r5
 8010ab2:	465e      	mov	r6, fp
 8010ab4:	f04f 0900 	mov.w	r9, #0
 8010ab8:	e7ef      	b.n	8010a9a <__kernel_rem_pio2f+0x196>
 8010aba:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8010abe:	4620      	mov	r0, r4
 8010ac0:	f7f0 f99c 	bl	8000dfc <__aeabi_fmul>
 8010ac4:	f7f0 fb76 	bl	80011b4 <__aeabi_f2iz>
 8010ac8:	f7f0 f944 	bl	8000d54 <__aeabi_i2f>
 8010acc:	4649      	mov	r1, r9
 8010ace:	9009      	str	r0, [sp, #36]	; 0x24
 8010ad0:	f7f0 f994 	bl	8000dfc <__aeabi_fmul>
 8010ad4:	4601      	mov	r1, r0
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f7f0 f886 	bl	8000be8 <__aeabi_fsub>
 8010adc:	f7f0 fb6a 	bl	80011b4 <__aeabi_f2iz>
 8010ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ae2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010ae6:	f846 0b04 	str.w	r0, [r6], #4
 8010aea:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7f0 f87c 	bl	8000bec <__addsf3>
 8010af4:	4604      	mov	r4, r0
 8010af6:	e756      	b.n	80109a6 <__kernel_rem_pio2f+0xa2>
 8010af8:	d106      	bne.n	8010b08 <__kernel_rem_pio2f+0x204>
 8010afa:	f108 33ff 	add.w	r3, r8, #4294967295
 8010afe:	aa0a      	add	r2, sp, #40	; 0x28
 8010b00:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010b04:	1224      	asrs	r4, r4, #8
 8010b06:	e785      	b.n	8010a14 <__kernel_rem_pio2f+0x110>
 8010b08:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8010b0c:	f7f0 fb28 	bl	8001160 <__aeabi_fcmpge>
 8010b10:	4604      	mov	r4, r0
 8010b12:	2800      	cmp	r0, #0
 8010b14:	d134      	bne.n	8010b80 <__kernel_rem_pio2f+0x27c>
 8010b16:	2100      	movs	r1, #0
 8010b18:	4648      	mov	r0, r9
 8010b1a:	f7f0 fb03 	bl	8001124 <__aeabi_fcmpeq>
 8010b1e:	2800      	cmp	r0, #0
 8010b20:	f000 809a 	beq.w	8010c58 <__kernel_rem_pio2f+0x354>
 8010b24:	f108 35ff 	add.w	r5, r8, #4294967295
 8010b28:	462b      	mov	r3, r5
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	9901      	ldr	r1, [sp, #4]
 8010b2e:	428b      	cmp	r3, r1
 8010b30:	da4d      	bge.n	8010bce <__kernel_rem_pio2f+0x2ca>
 8010b32:	2a00      	cmp	r2, #0
 8010b34:	d07c      	beq.n	8010c30 <__kernel_rem_pio2f+0x32c>
 8010b36:	ab0a      	add	r3, sp, #40	; 0x28
 8010b38:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010b3c:	3f08      	subs	r7, #8
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	f000 8088 	beq.w	8010c54 <__kernel_rem_pio2f+0x350>
 8010b44:	4639      	mov	r1, r7
 8010b46:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010b4a:	f000 fb59 	bl	8011200 <scalbnf>
 8010b4e:	46aa      	mov	sl, r5
 8010b50:	4681      	mov	r9, r0
 8010b52:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8010b56:	af46      	add	r7, sp, #280	; 0x118
 8010b58:	f1ba 0f00 	cmp.w	sl, #0
 8010b5c:	f280 80b1 	bge.w	8010cc2 <__kernel_rem_pio2f+0x3be>
 8010b60:	46a9      	mov	r9, r5
 8010b62:	f04f 0a00 	mov.w	sl, #0
 8010b66:	2200      	movs	r2, #0
 8010b68:	f1b9 0f00 	cmp.w	r9, #0
 8010b6c:	f2c0 80db 	blt.w	8010d26 <__kernel_rem_pio2f+0x422>
 8010b70:	a946      	add	r1, sp, #280	; 0x118
 8010b72:	4617      	mov	r7, r2
 8010b74:	f04f 0800 	mov.w	r8, #0
 8010b78:	4b2c      	ldr	r3, [pc, #176]	; (8010c2c <__kernel_rem_pio2f+0x328>)
 8010b7a:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 8010b7e:	e0c3      	b.n	8010d08 <__kernel_rem_pio2f+0x404>
 8010b80:	2402      	movs	r4, #2
 8010b82:	e749      	b.n	8010a18 <__kernel_rem_pio2f+0x114>
 8010b84:	682b      	ldr	r3, [r5, #0]
 8010b86:	f1ba 0f00 	cmp.w	sl, #0
 8010b8a:	d108      	bne.n	8010b9e <__kernel_rem_pio2f+0x29a>
 8010b8c:	b11b      	cbz	r3, 8010b96 <__kernel_rem_pio2f+0x292>
 8010b8e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8010b92:	602b      	str	r3, [r5, #0]
 8010b94:	2301      	movs	r3, #1
 8010b96:	469a      	mov	sl, r3
 8010b98:	3201      	adds	r2, #1
 8010b9a:	3504      	adds	r5, #4
 8010b9c:	e73f      	b.n	8010a1e <__kernel_rem_pio2f+0x11a>
 8010b9e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010ba2:	602b      	str	r3, [r5, #0]
 8010ba4:	4653      	mov	r3, sl
 8010ba6:	e7f6      	b.n	8010b96 <__kernel_rem_pio2f+0x292>
 8010ba8:	f108 32ff 	add.w	r2, r8, #4294967295
 8010bac:	ab0a      	add	r3, sp, #40	; 0x28
 8010bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bb6:	a90a      	add	r1, sp, #40	; 0x28
 8010bb8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010bbc:	e73a      	b.n	8010a34 <__kernel_rem_pio2f+0x130>
 8010bbe:	f108 32ff 	add.w	r2, r8, #4294967295
 8010bc2:	ab0a      	add	r3, sp, #40	; 0x28
 8010bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010bcc:	e7f3      	b.n	8010bb6 <__kernel_rem_pio2f+0x2b2>
 8010bce:	a90a      	add	r1, sp, #40	; 0x28
 8010bd0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010bd4:	3b01      	subs	r3, #1
 8010bd6:	430a      	orrs	r2, r1
 8010bd8:	e7a8      	b.n	8010b2c <__kernel_rem_pio2f+0x228>
 8010bda:	3301      	adds	r3, #1
 8010bdc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010be0:	2900      	cmp	r1, #0
 8010be2:	d0fa      	beq.n	8010bda <__kernel_rem_pio2f+0x2d6>
 8010be4:	9a04      	ldr	r2, [sp, #16]
 8010be6:	f108 0501 	add.w	r5, r8, #1
 8010bea:	eb08 0402 	add.w	r4, r8, r2
 8010bee:	aa1e      	add	r2, sp, #120	; 0x78
 8010bf0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010bf4:	4498      	add	r8, r3
 8010bf6:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8010bfa:	45a8      	cmp	r8, r5
 8010bfc:	f6ff aec7 	blt.w	801098e <__kernel_rem_pio2f+0x8a>
 8010c00:	9b07      	ldr	r3, [sp, #28]
 8010c02:	46a3      	mov	fp, r4
 8010c04:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010c08:	f7f0 f8a4 	bl	8000d54 <__aeabi_i2f>
 8010c0c:	f04f 0a00 	mov.w	sl, #0
 8010c10:	2600      	movs	r6, #0
 8010c12:	f84b 0b04 	str.w	r0, [fp], #4
 8010c16:	9b03      	ldr	r3, [sp, #12]
 8010c18:	459a      	cmp	sl, r3
 8010c1a:	dd0c      	ble.n	8010c36 <__kernel_rem_pio2f+0x332>
 8010c1c:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8010c20:	465c      	mov	r4, fp
 8010c22:	3501      	adds	r5, #1
 8010c24:	e7e9      	b.n	8010bfa <__kernel_rem_pio2f+0x2f6>
 8010c26:	bf00      	nop
 8010c28:	08014f6c 	.word	0x08014f6c
 8010c2c:	08014f40 	.word	0x08014f40
 8010c30:	2301      	movs	r3, #1
 8010c32:	9a08      	ldr	r2, [sp, #32]
 8010c34:	e7d2      	b.n	8010bdc <__kernel_rem_pio2f+0x2d8>
 8010c36:	9b05      	ldr	r3, [sp, #20]
 8010c38:	f854 0904 	ldr.w	r0, [r4], #-4
 8010c3c:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8010c40:	f7f0 f8dc 	bl	8000dfc <__aeabi_fmul>
 8010c44:	4601      	mov	r1, r0
 8010c46:	4630      	mov	r0, r6
 8010c48:	f7ef ffd0 	bl	8000bec <__addsf3>
 8010c4c:	f10a 0a01 	add.w	sl, sl, #1
 8010c50:	4606      	mov	r6, r0
 8010c52:	e7e0      	b.n	8010c16 <__kernel_rem_pio2f+0x312>
 8010c54:	3d01      	subs	r5, #1
 8010c56:	e76e      	b.n	8010b36 <__kernel_rem_pio2f+0x232>
 8010c58:	9b06      	ldr	r3, [sp, #24]
 8010c5a:	9a02      	ldr	r2, [sp, #8]
 8010c5c:	4648      	mov	r0, r9
 8010c5e:	1a99      	subs	r1, r3, r2
 8010c60:	f000 face 	bl	8011200 <scalbnf>
 8010c64:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8010c68:	4605      	mov	r5, r0
 8010c6a:	f7f0 fa79 	bl	8001160 <__aeabi_fcmpge>
 8010c6e:	b300      	cbz	r0, 8010cb2 <__kernel_rem_pio2f+0x3ae>
 8010c70:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8010c74:	4628      	mov	r0, r5
 8010c76:	f7f0 f8c1 	bl	8000dfc <__aeabi_fmul>
 8010c7a:	f7f0 fa9b 	bl	80011b4 <__aeabi_f2iz>
 8010c7e:	f7f0 f869 	bl	8000d54 <__aeabi_i2f>
 8010c82:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8010c86:	4681      	mov	r9, r0
 8010c88:	f7f0 f8b8 	bl	8000dfc <__aeabi_fmul>
 8010c8c:	4601      	mov	r1, r0
 8010c8e:	4628      	mov	r0, r5
 8010c90:	f7ef ffaa 	bl	8000be8 <__aeabi_fsub>
 8010c94:	f7f0 fa8e 	bl	80011b4 <__aeabi_f2iz>
 8010c98:	ab0a      	add	r3, sp, #40	; 0x28
 8010c9a:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010c9e:	4648      	mov	r0, r9
 8010ca0:	f7f0 fa88 	bl	80011b4 <__aeabi_f2iz>
 8010ca4:	f108 0501 	add.w	r5, r8, #1
 8010ca8:	ab0a      	add	r3, sp, #40	; 0x28
 8010caa:	3708      	adds	r7, #8
 8010cac:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8010cb0:	e748      	b.n	8010b44 <__kernel_rem_pio2f+0x240>
 8010cb2:	4628      	mov	r0, r5
 8010cb4:	f7f0 fa7e 	bl	80011b4 <__aeabi_f2iz>
 8010cb8:	ab0a      	add	r3, sp, #40	; 0x28
 8010cba:	4645      	mov	r5, r8
 8010cbc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010cc0:	e740      	b.n	8010b44 <__kernel_rem_pio2f+0x240>
 8010cc2:	ab0a      	add	r3, sp, #40	; 0x28
 8010cc4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8010cc8:	f7f0 f844 	bl	8000d54 <__aeabi_i2f>
 8010ccc:	4649      	mov	r1, r9
 8010cce:	f7f0 f895 	bl	8000dfc <__aeabi_fmul>
 8010cd2:	4641      	mov	r1, r8
 8010cd4:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8010cd8:	4648      	mov	r0, r9
 8010cda:	f7f0 f88f 	bl	8000dfc <__aeabi_fmul>
 8010cde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010ce2:	4681      	mov	r9, r0
 8010ce4:	e738      	b.n	8010b58 <__kernel_rem_pio2f+0x254>
 8010ce6:	f853 0b04 	ldr.w	r0, [r3], #4
 8010cea:	f85b 1b04 	ldr.w	r1, [fp], #4
 8010cee:	9203      	str	r2, [sp, #12]
 8010cf0:	9302      	str	r3, [sp, #8]
 8010cf2:	f7f0 f883 	bl	8000dfc <__aeabi_fmul>
 8010cf6:	4601      	mov	r1, r0
 8010cf8:	4638      	mov	r0, r7
 8010cfa:	f7ef ff77 	bl	8000bec <__addsf3>
 8010cfe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010d02:	4607      	mov	r7, r0
 8010d04:	f108 0801 	add.w	r8, r8, #1
 8010d08:	9901      	ldr	r1, [sp, #4]
 8010d0a:	4588      	cmp	r8, r1
 8010d0c:	dc01      	bgt.n	8010d12 <__kernel_rem_pio2f+0x40e>
 8010d0e:	45c2      	cmp	sl, r8
 8010d10:	dae9      	bge.n	8010ce6 <__kernel_rem_pio2f+0x3e2>
 8010d12:	ab5a      	add	r3, sp, #360	; 0x168
 8010d14:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8010d18:	f843 7ca0 	str.w	r7, [r3, #-160]
 8010d1c:	f109 39ff 	add.w	r9, r9, #4294967295
 8010d20:	f10a 0a01 	add.w	sl, sl, #1
 8010d24:	e720      	b.n	8010b68 <__kernel_rem_pio2f+0x264>
 8010d26:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010d28:	2b02      	cmp	r3, #2
 8010d2a:	dc07      	bgt.n	8010d3c <__kernel_rem_pio2f+0x438>
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	dc4d      	bgt.n	8010dcc <__kernel_rem_pio2f+0x4c8>
 8010d30:	d02e      	beq.n	8010d90 <__kernel_rem_pio2f+0x48c>
 8010d32:	f006 0007 	and.w	r0, r6, #7
 8010d36:	b05b      	add	sp, #364	; 0x16c
 8010d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d3c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010d3e:	2b03      	cmp	r3, #3
 8010d40:	d1f7      	bne.n	8010d32 <__kernel_rem_pio2f+0x42e>
 8010d42:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8010d46:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 8010d4a:	46b8      	mov	r8, r7
 8010d4c:	46aa      	mov	sl, r5
 8010d4e:	f1ba 0f00 	cmp.w	sl, #0
 8010d52:	dc48      	bgt.n	8010de6 <__kernel_rem_pio2f+0x4e2>
 8010d54:	46a9      	mov	r9, r5
 8010d56:	f1b9 0f01 	cmp.w	r9, #1
 8010d5a:	dc5f      	bgt.n	8010e1c <__kernel_rem_pio2f+0x518>
 8010d5c:	2000      	movs	r0, #0
 8010d5e:	2d01      	cmp	r5, #1
 8010d60:	dc75      	bgt.n	8010e4e <__kernel_rem_pio2f+0x54a>
 8010d62:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8010d64:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8010d66:	2c00      	cmp	r4, #0
 8010d68:	d177      	bne.n	8010e5a <__kernel_rem_pio2f+0x556>
 8010d6a:	9900      	ldr	r1, [sp, #0]
 8010d6c:	600a      	str	r2, [r1, #0]
 8010d6e:	460a      	mov	r2, r1
 8010d70:	604b      	str	r3, [r1, #4]
 8010d72:	6090      	str	r0, [r2, #8]
 8010d74:	e7dd      	b.n	8010d32 <__kernel_rem_pio2f+0x42e>
 8010d76:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 8010d7a:	f7ef ff37 	bl	8000bec <__addsf3>
 8010d7e:	3d01      	subs	r5, #1
 8010d80:	2d00      	cmp	r5, #0
 8010d82:	daf8      	bge.n	8010d76 <__kernel_rem_pio2f+0x472>
 8010d84:	b10c      	cbz	r4, 8010d8a <__kernel_rem_pio2f+0x486>
 8010d86:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010d8a:	9b00      	ldr	r3, [sp, #0]
 8010d8c:	6018      	str	r0, [r3, #0]
 8010d8e:	e7d0      	b.n	8010d32 <__kernel_rem_pio2f+0x42e>
 8010d90:	2000      	movs	r0, #0
 8010d92:	af32      	add	r7, sp, #200	; 0xc8
 8010d94:	e7f4      	b.n	8010d80 <__kernel_rem_pio2f+0x47c>
 8010d96:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8010d9a:	f7ef ff27 	bl	8000bec <__addsf3>
 8010d9e:	3f01      	subs	r7, #1
 8010da0:	2f00      	cmp	r7, #0
 8010da2:	daf8      	bge.n	8010d96 <__kernel_rem_pio2f+0x492>
 8010da4:	b1bc      	cbz	r4, 8010dd6 <__kernel_rem_pio2f+0x4d2>
 8010da6:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8010daa:	9a00      	ldr	r2, [sp, #0]
 8010dac:	4601      	mov	r1, r0
 8010dae:	6013      	str	r3, [r2, #0]
 8010db0:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8010db2:	f7ef ff19 	bl	8000be8 <__aeabi_fsub>
 8010db6:	2701      	movs	r7, #1
 8010db8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8010dbc:	42bd      	cmp	r5, r7
 8010dbe:	da0c      	bge.n	8010dda <__kernel_rem_pio2f+0x4d6>
 8010dc0:	b10c      	cbz	r4, 8010dc6 <__kernel_rem_pio2f+0x4c2>
 8010dc2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010dc6:	9b00      	ldr	r3, [sp, #0]
 8010dc8:	6058      	str	r0, [r3, #4]
 8010dca:	e7b2      	b.n	8010d32 <__kernel_rem_pio2f+0x42e>
 8010dcc:	462f      	mov	r7, r5
 8010dce:	2000      	movs	r0, #0
 8010dd0:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8010dd4:	e7e4      	b.n	8010da0 <__kernel_rem_pio2f+0x49c>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	e7e7      	b.n	8010daa <__kernel_rem_pio2f+0x4a6>
 8010dda:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8010dde:	f7ef ff05 	bl	8000bec <__addsf3>
 8010de2:	3701      	adds	r7, #1
 8010de4:	e7ea      	b.n	8010dbc <__kernel_rem_pio2f+0x4b8>
 8010de6:	f8d8 3000 	ldr.w	r3, [r8]
 8010dea:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8010dee:	4619      	mov	r1, r3
 8010df0:	4610      	mov	r0, r2
 8010df2:	9302      	str	r3, [sp, #8]
 8010df4:	9201      	str	r2, [sp, #4]
 8010df6:	f7ef fef9 	bl	8000bec <__addsf3>
 8010dfa:	9a01      	ldr	r2, [sp, #4]
 8010dfc:	4601      	mov	r1, r0
 8010dfe:	4681      	mov	r9, r0
 8010e00:	4610      	mov	r0, r2
 8010e02:	f7ef fef1 	bl	8000be8 <__aeabi_fsub>
 8010e06:	9b02      	ldr	r3, [sp, #8]
 8010e08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	f7ef feed 	bl	8000bec <__addsf3>
 8010e12:	f848 0904 	str.w	r0, [r8], #-4
 8010e16:	f8c8 9000 	str.w	r9, [r8]
 8010e1a:	e798      	b.n	8010d4e <__kernel_rem_pio2f+0x44a>
 8010e1c:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8010e20:	f8d7 a000 	ldr.w	sl, [r7]
 8010e24:	4618      	mov	r0, r3
 8010e26:	4651      	mov	r1, sl
 8010e28:	9301      	str	r3, [sp, #4]
 8010e2a:	f7ef fedf 	bl	8000bec <__addsf3>
 8010e2e:	9b01      	ldr	r3, [sp, #4]
 8010e30:	4601      	mov	r1, r0
 8010e32:	4680      	mov	r8, r0
 8010e34:	4618      	mov	r0, r3
 8010e36:	f7ef fed7 	bl	8000be8 <__aeabi_fsub>
 8010e3a:	4651      	mov	r1, sl
 8010e3c:	f7ef fed6 	bl	8000bec <__addsf3>
 8010e40:	f847 0904 	str.w	r0, [r7], #-4
 8010e44:	f109 39ff 	add.w	r9, r9, #4294967295
 8010e48:	f8c7 8000 	str.w	r8, [r7]
 8010e4c:	e783      	b.n	8010d56 <__kernel_rem_pio2f+0x452>
 8010e4e:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 8010e52:	f7ef fecb 	bl	8000bec <__addsf3>
 8010e56:	3d01      	subs	r5, #1
 8010e58:	e781      	b.n	8010d5e <__kernel_rem_pio2f+0x45a>
 8010e5a:	9900      	ldr	r1, [sp, #0]
 8010e5c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8010e60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010e64:	600a      	str	r2, [r1, #0]
 8010e66:	604b      	str	r3, [r1, #4]
 8010e68:	460a      	mov	r2, r1
 8010e6a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010e6e:	e780      	b.n	8010d72 <__kernel_rem_pio2f+0x46e>

08010e70 <__kernel_sinf>:
 8010e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e74:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8010e78:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8010e7c:	4604      	mov	r4, r0
 8010e7e:	460f      	mov	r7, r1
 8010e80:	4691      	mov	r9, r2
 8010e82:	da03      	bge.n	8010e8c <__kernel_sinf+0x1c>
 8010e84:	f7f0 f996 	bl	80011b4 <__aeabi_f2iz>
 8010e88:	2800      	cmp	r0, #0
 8010e8a:	d035      	beq.n	8010ef8 <__kernel_sinf+0x88>
 8010e8c:	4621      	mov	r1, r4
 8010e8e:	4620      	mov	r0, r4
 8010e90:	f7ef ffb4 	bl	8000dfc <__aeabi_fmul>
 8010e94:	4605      	mov	r5, r0
 8010e96:	4601      	mov	r1, r0
 8010e98:	4620      	mov	r0, r4
 8010e9a:	f7ef ffaf 	bl	8000dfc <__aeabi_fmul>
 8010e9e:	4929      	ldr	r1, [pc, #164]	; (8010f44 <__kernel_sinf+0xd4>)
 8010ea0:	4606      	mov	r6, r0
 8010ea2:	4628      	mov	r0, r5
 8010ea4:	f7ef ffaa 	bl	8000dfc <__aeabi_fmul>
 8010ea8:	4927      	ldr	r1, [pc, #156]	; (8010f48 <__kernel_sinf+0xd8>)
 8010eaa:	f7ef fe9d 	bl	8000be8 <__aeabi_fsub>
 8010eae:	4629      	mov	r1, r5
 8010eb0:	f7ef ffa4 	bl	8000dfc <__aeabi_fmul>
 8010eb4:	4925      	ldr	r1, [pc, #148]	; (8010f4c <__kernel_sinf+0xdc>)
 8010eb6:	f7ef fe99 	bl	8000bec <__addsf3>
 8010eba:	4629      	mov	r1, r5
 8010ebc:	f7ef ff9e 	bl	8000dfc <__aeabi_fmul>
 8010ec0:	4923      	ldr	r1, [pc, #140]	; (8010f50 <__kernel_sinf+0xe0>)
 8010ec2:	f7ef fe91 	bl	8000be8 <__aeabi_fsub>
 8010ec6:	4629      	mov	r1, r5
 8010ec8:	f7ef ff98 	bl	8000dfc <__aeabi_fmul>
 8010ecc:	4921      	ldr	r1, [pc, #132]	; (8010f54 <__kernel_sinf+0xe4>)
 8010ece:	f7ef fe8d 	bl	8000bec <__addsf3>
 8010ed2:	4680      	mov	r8, r0
 8010ed4:	f1b9 0f00 	cmp.w	r9, #0
 8010ed8:	d111      	bne.n	8010efe <__kernel_sinf+0x8e>
 8010eda:	4601      	mov	r1, r0
 8010edc:	4628      	mov	r0, r5
 8010ede:	f7ef ff8d 	bl	8000dfc <__aeabi_fmul>
 8010ee2:	491d      	ldr	r1, [pc, #116]	; (8010f58 <__kernel_sinf+0xe8>)
 8010ee4:	f7ef fe80 	bl	8000be8 <__aeabi_fsub>
 8010ee8:	4631      	mov	r1, r6
 8010eea:	f7ef ff87 	bl	8000dfc <__aeabi_fmul>
 8010eee:	4601      	mov	r1, r0
 8010ef0:	4620      	mov	r0, r4
 8010ef2:	f7ef fe7b 	bl	8000bec <__addsf3>
 8010ef6:	4604      	mov	r4, r0
 8010ef8:	4620      	mov	r0, r4
 8010efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010efe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8010f02:	4638      	mov	r0, r7
 8010f04:	f7ef ff7a 	bl	8000dfc <__aeabi_fmul>
 8010f08:	4641      	mov	r1, r8
 8010f0a:	4681      	mov	r9, r0
 8010f0c:	4630      	mov	r0, r6
 8010f0e:	f7ef ff75 	bl	8000dfc <__aeabi_fmul>
 8010f12:	4601      	mov	r1, r0
 8010f14:	4648      	mov	r0, r9
 8010f16:	f7ef fe67 	bl	8000be8 <__aeabi_fsub>
 8010f1a:	4629      	mov	r1, r5
 8010f1c:	f7ef ff6e 	bl	8000dfc <__aeabi_fmul>
 8010f20:	4639      	mov	r1, r7
 8010f22:	f7ef fe61 	bl	8000be8 <__aeabi_fsub>
 8010f26:	490c      	ldr	r1, [pc, #48]	; (8010f58 <__kernel_sinf+0xe8>)
 8010f28:	4605      	mov	r5, r0
 8010f2a:	4630      	mov	r0, r6
 8010f2c:	f7ef ff66 	bl	8000dfc <__aeabi_fmul>
 8010f30:	4601      	mov	r1, r0
 8010f32:	4628      	mov	r0, r5
 8010f34:	f7ef fe5a 	bl	8000bec <__addsf3>
 8010f38:	4601      	mov	r1, r0
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	f7ef fe54 	bl	8000be8 <__aeabi_fsub>
 8010f40:	e7d9      	b.n	8010ef6 <__kernel_sinf+0x86>
 8010f42:	bf00      	nop
 8010f44:	2f2ec9d3 	.word	0x2f2ec9d3
 8010f48:	32d72f34 	.word	0x32d72f34
 8010f4c:	3638ef1b 	.word	0x3638ef1b
 8010f50:	39500d01 	.word	0x39500d01
 8010f54:	3c088889 	.word	0x3c088889
 8010f58:	3e2aaaab 	.word	0x3e2aaaab

08010f5c <fabs>:
 8010f5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010f60:	4770      	bx	lr
 8010f62:	0000      	movs	r0, r0
 8010f64:	0000      	movs	r0, r0
	...

08010f68 <floor>:
 8010f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f6c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8010f70:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8010f74:	2e13      	cmp	r6, #19
 8010f76:	4602      	mov	r2, r0
 8010f78:	460b      	mov	r3, r1
 8010f7a:	4607      	mov	r7, r0
 8010f7c:	460c      	mov	r4, r1
 8010f7e:	4605      	mov	r5, r0
 8010f80:	dc34      	bgt.n	8010fec <floor+0x84>
 8010f82:	2e00      	cmp	r6, #0
 8010f84:	da15      	bge.n	8010fb2 <floor+0x4a>
 8010f86:	a334      	add	r3, pc, #208	; (adr r3, 8011058 <floor+0xf0>)
 8010f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8c:	f7ef f92a 	bl	80001e4 <__adddf3>
 8010f90:	2200      	movs	r2, #0
 8010f92:	2300      	movs	r3, #0
 8010f94:	f7ef fd6c 	bl	8000a70 <__aeabi_dcmpgt>
 8010f98:	b140      	cbz	r0, 8010fac <floor+0x44>
 8010f9a:	2c00      	cmp	r4, #0
 8010f9c:	da59      	bge.n	8011052 <floor+0xea>
 8010f9e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010fa2:	ea57 0503 	orrs.w	r5, r7, r3
 8010fa6:	d001      	beq.n	8010fac <floor+0x44>
 8010fa8:	2500      	movs	r5, #0
 8010faa:	4c2d      	ldr	r4, [pc, #180]	; (8011060 <floor+0xf8>)
 8010fac:	4623      	mov	r3, r4
 8010fae:	462f      	mov	r7, r5
 8010fb0:	e025      	b.n	8010ffe <floor+0x96>
 8010fb2:	4a2c      	ldr	r2, [pc, #176]	; (8011064 <floor+0xfc>)
 8010fb4:	fa42 f806 	asr.w	r8, r2, r6
 8010fb8:	ea01 0208 	and.w	r2, r1, r8
 8010fbc:	4302      	orrs	r2, r0
 8010fbe:	d01e      	beq.n	8010ffe <floor+0x96>
 8010fc0:	a325      	add	r3, pc, #148	; (adr r3, 8011058 <floor+0xf0>)
 8010fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc6:	f7ef f90d 	bl	80001e4 <__adddf3>
 8010fca:	2200      	movs	r2, #0
 8010fcc:	2300      	movs	r3, #0
 8010fce:	f7ef fd4f 	bl	8000a70 <__aeabi_dcmpgt>
 8010fd2:	2800      	cmp	r0, #0
 8010fd4:	d0ea      	beq.n	8010fac <floor+0x44>
 8010fd6:	2c00      	cmp	r4, #0
 8010fd8:	bfbe      	ittt	lt
 8010fda:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010fde:	fa43 f606 	asrlt.w	r6, r3, r6
 8010fe2:	19a4      	addlt	r4, r4, r6
 8010fe4:	2500      	movs	r5, #0
 8010fe6:	ea24 0408 	bic.w	r4, r4, r8
 8010fea:	e7df      	b.n	8010fac <floor+0x44>
 8010fec:	2e33      	cmp	r6, #51	; 0x33
 8010fee:	dd0a      	ble.n	8011006 <floor+0x9e>
 8010ff0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010ff4:	d103      	bne.n	8010ffe <floor+0x96>
 8010ff6:	f7ef f8f5 	bl	80001e4 <__adddf3>
 8010ffa:	4607      	mov	r7, r0
 8010ffc:	460b      	mov	r3, r1
 8010ffe:	4638      	mov	r0, r7
 8011000:	4619      	mov	r1, r3
 8011002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011006:	f04f 32ff 	mov.w	r2, #4294967295
 801100a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801100e:	fa22 f808 	lsr.w	r8, r2, r8
 8011012:	ea18 0f00 	tst.w	r8, r0
 8011016:	d0f2      	beq.n	8010ffe <floor+0x96>
 8011018:	a30f      	add	r3, pc, #60	; (adr r3, 8011058 <floor+0xf0>)
 801101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101e:	f7ef f8e1 	bl	80001e4 <__adddf3>
 8011022:	2200      	movs	r2, #0
 8011024:	2300      	movs	r3, #0
 8011026:	f7ef fd23 	bl	8000a70 <__aeabi_dcmpgt>
 801102a:	2800      	cmp	r0, #0
 801102c:	d0be      	beq.n	8010fac <floor+0x44>
 801102e:	2c00      	cmp	r4, #0
 8011030:	da02      	bge.n	8011038 <floor+0xd0>
 8011032:	2e14      	cmp	r6, #20
 8011034:	d103      	bne.n	801103e <floor+0xd6>
 8011036:	3401      	adds	r4, #1
 8011038:	ea25 0508 	bic.w	r5, r5, r8
 801103c:	e7b6      	b.n	8010fac <floor+0x44>
 801103e:	2301      	movs	r3, #1
 8011040:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011044:	fa03 f606 	lsl.w	r6, r3, r6
 8011048:	4435      	add	r5, r6
 801104a:	42bd      	cmp	r5, r7
 801104c:	bf38      	it	cc
 801104e:	18e4      	addcc	r4, r4, r3
 8011050:	e7f2      	b.n	8011038 <floor+0xd0>
 8011052:	2500      	movs	r5, #0
 8011054:	462c      	mov	r4, r5
 8011056:	e7a9      	b.n	8010fac <floor+0x44>
 8011058:	8800759c 	.word	0x8800759c
 801105c:	7e37e43c 	.word	0x7e37e43c
 8011060:	bff00000 	.word	0xbff00000
 8011064:	000fffff 	.word	0x000fffff

08011068 <scalbn>:
 8011068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801106a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 801106e:	4604      	mov	r4, r0
 8011070:	460d      	mov	r5, r1
 8011072:	4617      	mov	r7, r2
 8011074:	460b      	mov	r3, r1
 8011076:	b996      	cbnz	r6, 801109e <scalbn+0x36>
 8011078:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801107c:	4303      	orrs	r3, r0
 801107e:	d039      	beq.n	80110f4 <scalbn+0x8c>
 8011080:	4b35      	ldr	r3, [pc, #212]	; (8011158 <scalbn+0xf0>)
 8011082:	2200      	movs	r2, #0
 8011084:	f7ef fa64 	bl	8000550 <__aeabi_dmul>
 8011088:	4b34      	ldr	r3, [pc, #208]	; (801115c <scalbn+0xf4>)
 801108a:	4604      	mov	r4, r0
 801108c:	429f      	cmp	r7, r3
 801108e:	460d      	mov	r5, r1
 8011090:	da0f      	bge.n	80110b2 <scalbn+0x4a>
 8011092:	a32d      	add	r3, pc, #180	; (adr r3, 8011148 <scalbn+0xe0>)
 8011094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011098:	f7ef fa5a 	bl	8000550 <__aeabi_dmul>
 801109c:	e006      	b.n	80110ac <scalbn+0x44>
 801109e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80110a2:	4296      	cmp	r6, r2
 80110a4:	d10a      	bne.n	80110bc <scalbn+0x54>
 80110a6:	4602      	mov	r2, r0
 80110a8:	f7ef f89c 	bl	80001e4 <__adddf3>
 80110ac:	4604      	mov	r4, r0
 80110ae:	460d      	mov	r5, r1
 80110b0:	e020      	b.n	80110f4 <scalbn+0x8c>
 80110b2:	460b      	mov	r3, r1
 80110b4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80110b8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80110bc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80110c0:	19b9      	adds	r1, r7, r6
 80110c2:	4291      	cmp	r1, r2
 80110c4:	dd0e      	ble.n	80110e4 <scalbn+0x7c>
 80110c6:	a322      	add	r3, pc, #136	; (adr r3, 8011150 <scalbn+0xe8>)
 80110c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110cc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80110d0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80110d4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80110d8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80110dc:	4820      	ldr	r0, [pc, #128]	; (8011160 <scalbn+0xf8>)
 80110de:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80110e2:	e7d9      	b.n	8011098 <scalbn+0x30>
 80110e4:	2900      	cmp	r1, #0
 80110e6:	dd08      	ble.n	80110fa <scalbn+0x92>
 80110e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80110ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80110f0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80110f4:	4620      	mov	r0, r4
 80110f6:	4629      	mov	r1, r5
 80110f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110fa:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80110fe:	da16      	bge.n	801112e <scalbn+0xc6>
 8011100:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011104:	429f      	cmp	r7, r3
 8011106:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 801110a:	dd08      	ble.n	801111e <scalbn+0xb6>
 801110c:	4c15      	ldr	r4, [pc, #84]	; (8011164 <scalbn+0xfc>)
 801110e:	4814      	ldr	r0, [pc, #80]	; (8011160 <scalbn+0xf8>)
 8011110:	f363 74df 	bfi	r4, r3, #31, #1
 8011114:	a30e      	add	r3, pc, #56	; (adr r3, 8011150 <scalbn+0xe8>)
 8011116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111a:	4621      	mov	r1, r4
 801111c:	e7bc      	b.n	8011098 <scalbn+0x30>
 801111e:	4c12      	ldr	r4, [pc, #72]	; (8011168 <scalbn+0x100>)
 8011120:	4812      	ldr	r0, [pc, #72]	; (801116c <scalbn+0x104>)
 8011122:	f363 74df 	bfi	r4, r3, #31, #1
 8011126:	a308      	add	r3, pc, #32	; (adr r3, 8011148 <scalbn+0xe0>)
 8011128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112c:	e7f5      	b.n	801111a <scalbn+0xb2>
 801112e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011132:	3136      	adds	r1, #54	; 0x36
 8011134:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011138:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 801113c:	4620      	mov	r0, r4
 801113e:	4629      	mov	r1, r5
 8011140:	2200      	movs	r2, #0
 8011142:	4b0b      	ldr	r3, [pc, #44]	; (8011170 <scalbn+0x108>)
 8011144:	e7a8      	b.n	8011098 <scalbn+0x30>
 8011146:	bf00      	nop
 8011148:	c2f8f359 	.word	0xc2f8f359
 801114c:	01a56e1f 	.word	0x01a56e1f
 8011150:	8800759c 	.word	0x8800759c
 8011154:	7e37e43c 	.word	0x7e37e43c
 8011158:	43500000 	.word	0x43500000
 801115c:	ffff3cb0 	.word	0xffff3cb0
 8011160:	8800759c 	.word	0x8800759c
 8011164:	7e37e43c 	.word	0x7e37e43c
 8011168:	01a56e1f 	.word	0x01a56e1f
 801116c:	c2f8f359 	.word	0xc2f8f359
 8011170:	3c900000 	.word	0x3c900000

08011174 <floorf>:
 8011174:	b570      	push	{r4, r5, r6, lr}
 8011176:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 801117a:	3d7f      	subs	r5, #127	; 0x7f
 801117c:	2d16      	cmp	r5, #22
 801117e:	4601      	mov	r1, r0
 8011180:	4604      	mov	r4, r0
 8011182:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8011186:	dc26      	bgt.n	80111d6 <floorf+0x62>
 8011188:	2d00      	cmp	r5, #0
 801118a:	da0e      	bge.n	80111aa <floorf+0x36>
 801118c:	4917      	ldr	r1, [pc, #92]	; (80111ec <floorf+0x78>)
 801118e:	f7ef fd2d 	bl	8000bec <__addsf3>
 8011192:	2100      	movs	r1, #0
 8011194:	f7ef ffee 	bl	8001174 <__aeabi_fcmpgt>
 8011198:	b128      	cbz	r0, 80111a6 <floorf+0x32>
 801119a:	2c00      	cmp	r4, #0
 801119c:	da23      	bge.n	80111e6 <floorf+0x72>
 801119e:	4b14      	ldr	r3, [pc, #80]	; (80111f0 <floorf+0x7c>)
 80111a0:	2e00      	cmp	r6, #0
 80111a2:	bf18      	it	ne
 80111a4:	461c      	movne	r4, r3
 80111a6:	4621      	mov	r1, r4
 80111a8:	e01b      	b.n	80111e2 <floorf+0x6e>
 80111aa:	4e12      	ldr	r6, [pc, #72]	; (80111f4 <floorf+0x80>)
 80111ac:	412e      	asrs	r6, r5
 80111ae:	4230      	tst	r0, r6
 80111b0:	d017      	beq.n	80111e2 <floorf+0x6e>
 80111b2:	490e      	ldr	r1, [pc, #56]	; (80111ec <floorf+0x78>)
 80111b4:	f7ef fd1a 	bl	8000bec <__addsf3>
 80111b8:	2100      	movs	r1, #0
 80111ba:	f7ef ffdb 	bl	8001174 <__aeabi_fcmpgt>
 80111be:	2800      	cmp	r0, #0
 80111c0:	d0f1      	beq.n	80111a6 <floorf+0x32>
 80111c2:	2c00      	cmp	r4, #0
 80111c4:	bfbe      	ittt	lt
 80111c6:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80111ca:	fa43 f505 	asrlt.w	r5, r3, r5
 80111ce:	1964      	addlt	r4, r4, r5
 80111d0:	ea24 0406 	bic.w	r4, r4, r6
 80111d4:	e7e7      	b.n	80111a6 <floorf+0x32>
 80111d6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80111da:	d302      	bcc.n	80111e2 <floorf+0x6e>
 80111dc:	f7ef fd06 	bl	8000bec <__addsf3>
 80111e0:	4601      	mov	r1, r0
 80111e2:	4608      	mov	r0, r1
 80111e4:	bd70      	pop	{r4, r5, r6, pc}
 80111e6:	2400      	movs	r4, #0
 80111e8:	e7dd      	b.n	80111a6 <floorf+0x32>
 80111ea:	bf00      	nop
 80111ec:	7149f2ca 	.word	0x7149f2ca
 80111f0:	bf800000 	.word	0xbf800000
 80111f4:	007fffff 	.word	0x007fffff

080111f8 <nanf>:
 80111f8:	4800      	ldr	r0, [pc, #0]	; (80111fc <nanf+0x4>)
 80111fa:	4770      	bx	lr
 80111fc:	7fc00000 	.word	0x7fc00000

08011200 <scalbnf>:
 8011200:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8011204:	b538      	push	{r3, r4, r5, lr}
 8011206:	4603      	mov	r3, r0
 8011208:	460d      	mov	r5, r1
 801120a:	4604      	mov	r4, r0
 801120c:	d02a      	beq.n	8011264 <scalbnf+0x64>
 801120e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011212:	d304      	bcc.n	801121e <scalbnf+0x1e>
 8011214:	4601      	mov	r1, r0
 8011216:	f7ef fce9 	bl	8000bec <__addsf3>
 801121a:	4603      	mov	r3, r0
 801121c:	e022      	b.n	8011264 <scalbnf+0x64>
 801121e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8011222:	d117      	bne.n	8011254 <scalbnf+0x54>
 8011224:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8011228:	f7ef fde8 	bl	8000dfc <__aeabi_fmul>
 801122c:	4a17      	ldr	r2, [pc, #92]	; (801128c <scalbnf+0x8c>)
 801122e:	4603      	mov	r3, r0
 8011230:	4295      	cmp	r5, r2
 8011232:	db0b      	blt.n	801124c <scalbnf+0x4c>
 8011234:	4604      	mov	r4, r0
 8011236:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801123a:	3a19      	subs	r2, #25
 801123c:	442a      	add	r2, r5
 801123e:	2afe      	cmp	r2, #254	; 0xfe
 8011240:	dd0a      	ble.n	8011258 <scalbnf+0x58>
 8011242:	4913      	ldr	r1, [pc, #76]	; (8011290 <scalbnf+0x90>)
 8011244:	4618      	mov	r0, r3
 8011246:	f361 001e 	bfi	r0, r1, #0, #31
 801124a:	e000      	b.n	801124e <scalbnf+0x4e>
 801124c:	4911      	ldr	r1, [pc, #68]	; (8011294 <scalbnf+0x94>)
 801124e:	f7ef fdd5 	bl	8000dfc <__aeabi_fmul>
 8011252:	e7e2      	b.n	801121a <scalbnf+0x1a>
 8011254:	0dd2      	lsrs	r2, r2, #23
 8011256:	e7f1      	b.n	801123c <scalbnf+0x3c>
 8011258:	2a00      	cmp	r2, #0
 801125a:	dd05      	ble.n	8011268 <scalbnf+0x68>
 801125c:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8011260:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8011264:	4618      	mov	r0, r3
 8011266:	bd38      	pop	{r3, r4, r5, pc}
 8011268:	f112 0f16 	cmn.w	r2, #22
 801126c:	da05      	bge.n	801127a <scalbnf+0x7a>
 801126e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011272:	4295      	cmp	r5, r2
 8011274:	dce5      	bgt.n	8011242 <scalbnf+0x42>
 8011276:	4907      	ldr	r1, [pc, #28]	; (8011294 <scalbnf+0x94>)
 8011278:	e7e4      	b.n	8011244 <scalbnf+0x44>
 801127a:	3219      	adds	r2, #25
 801127c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8011280:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8011284:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8011288:	e7e1      	b.n	801124e <scalbnf+0x4e>
 801128a:	bf00      	nop
 801128c:	ffff3cb0 	.word	0xffff3cb0
 8011290:	7149f2ca 	.word	0x7149f2ca
 8011294:	0da24260 	.word	0x0da24260

08011298 <__errno>:
 8011298:	4b01      	ldr	r3, [pc, #4]	; (80112a0 <__errno+0x8>)
 801129a:	6818      	ldr	r0, [r3, #0]
 801129c:	4770      	bx	lr
 801129e:	bf00      	nop
 80112a0:	200001e8 	.word	0x200001e8

080112a4 <__libc_init_array>:
 80112a4:	b570      	push	{r4, r5, r6, lr}
 80112a6:	2600      	movs	r6, #0
 80112a8:	4d0c      	ldr	r5, [pc, #48]	; (80112dc <__libc_init_array+0x38>)
 80112aa:	4c0d      	ldr	r4, [pc, #52]	; (80112e0 <__libc_init_array+0x3c>)
 80112ac:	1b64      	subs	r4, r4, r5
 80112ae:	10a4      	asrs	r4, r4, #2
 80112b0:	42a6      	cmp	r6, r4
 80112b2:	d109      	bne.n	80112c8 <__libc_init_array+0x24>
 80112b4:	f002 feda 	bl	801406c <_init>
 80112b8:	2600      	movs	r6, #0
 80112ba:	4d0a      	ldr	r5, [pc, #40]	; (80112e4 <__libc_init_array+0x40>)
 80112bc:	4c0a      	ldr	r4, [pc, #40]	; (80112e8 <__libc_init_array+0x44>)
 80112be:	1b64      	subs	r4, r4, r5
 80112c0:	10a4      	asrs	r4, r4, #2
 80112c2:	42a6      	cmp	r6, r4
 80112c4:	d105      	bne.n	80112d2 <__libc_init_array+0x2e>
 80112c6:	bd70      	pop	{r4, r5, r6, pc}
 80112c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80112cc:	4798      	blx	r3
 80112ce:	3601      	adds	r6, #1
 80112d0:	e7ee      	b.n	80112b0 <__libc_init_array+0xc>
 80112d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80112d6:	4798      	blx	r3
 80112d8:	3601      	adds	r6, #1
 80112da:	e7f2      	b.n	80112c2 <__libc_init_array+0x1e>
 80112dc:	08015364 	.word	0x08015364
 80112e0:	08015364 	.word	0x08015364
 80112e4:	08015364 	.word	0x08015364
 80112e8:	08015370 	.word	0x08015370

080112ec <malloc>:
 80112ec:	4b02      	ldr	r3, [pc, #8]	; (80112f8 <malloc+0xc>)
 80112ee:	4601      	mov	r1, r0
 80112f0:	6818      	ldr	r0, [r3, #0]
 80112f2:	f000 b87b 	b.w	80113ec <_malloc_r>
 80112f6:	bf00      	nop
 80112f8:	200001e8 	.word	0x200001e8

080112fc <free>:
 80112fc:	4b02      	ldr	r3, [pc, #8]	; (8011308 <free+0xc>)
 80112fe:	4601      	mov	r1, r0
 8011300:	6818      	ldr	r0, [r3, #0]
 8011302:	f000 b827 	b.w	8011354 <_free_r>
 8011306:	bf00      	nop
 8011308:	200001e8 	.word	0x200001e8

0801130c <memcmp>:
 801130c:	b530      	push	{r4, r5, lr}
 801130e:	2400      	movs	r4, #0
 8011310:	3901      	subs	r1, #1
 8011312:	42a2      	cmp	r2, r4
 8011314:	d101      	bne.n	801131a <memcmp+0xe>
 8011316:	2000      	movs	r0, #0
 8011318:	e005      	b.n	8011326 <memcmp+0x1a>
 801131a:	5d03      	ldrb	r3, [r0, r4]
 801131c:	3401      	adds	r4, #1
 801131e:	5d0d      	ldrb	r5, [r1, r4]
 8011320:	42ab      	cmp	r3, r5
 8011322:	d0f6      	beq.n	8011312 <memcmp+0x6>
 8011324:	1b58      	subs	r0, r3, r5
 8011326:	bd30      	pop	{r4, r5, pc}

08011328 <memcpy>:
 8011328:	440a      	add	r2, r1
 801132a:	4291      	cmp	r1, r2
 801132c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011330:	d100      	bne.n	8011334 <memcpy+0xc>
 8011332:	4770      	bx	lr
 8011334:	b510      	push	{r4, lr}
 8011336:	f811 4b01 	ldrb.w	r4, [r1], #1
 801133a:	4291      	cmp	r1, r2
 801133c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011340:	d1f9      	bne.n	8011336 <memcpy+0xe>
 8011342:	bd10      	pop	{r4, pc}

08011344 <memset>:
 8011344:	4603      	mov	r3, r0
 8011346:	4402      	add	r2, r0
 8011348:	4293      	cmp	r3, r2
 801134a:	d100      	bne.n	801134e <memset+0xa>
 801134c:	4770      	bx	lr
 801134e:	f803 1b01 	strb.w	r1, [r3], #1
 8011352:	e7f9      	b.n	8011348 <memset+0x4>

08011354 <_free_r>:
 8011354:	b538      	push	{r3, r4, r5, lr}
 8011356:	4605      	mov	r5, r0
 8011358:	2900      	cmp	r1, #0
 801135a:	d043      	beq.n	80113e4 <_free_r+0x90>
 801135c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011360:	1f0c      	subs	r4, r1, #4
 8011362:	2b00      	cmp	r3, #0
 8011364:	bfb8      	it	lt
 8011366:	18e4      	addlt	r4, r4, r3
 8011368:	f001 fbc2 	bl	8012af0 <__malloc_lock>
 801136c:	4a1e      	ldr	r2, [pc, #120]	; (80113e8 <_free_r+0x94>)
 801136e:	6813      	ldr	r3, [r2, #0]
 8011370:	4610      	mov	r0, r2
 8011372:	b933      	cbnz	r3, 8011382 <_free_r+0x2e>
 8011374:	6063      	str	r3, [r4, #4]
 8011376:	6014      	str	r4, [r2, #0]
 8011378:	4628      	mov	r0, r5
 801137a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801137e:	f001 bbbd 	b.w	8012afc <__malloc_unlock>
 8011382:	42a3      	cmp	r3, r4
 8011384:	d90a      	bls.n	801139c <_free_r+0x48>
 8011386:	6821      	ldr	r1, [r4, #0]
 8011388:	1862      	adds	r2, r4, r1
 801138a:	4293      	cmp	r3, r2
 801138c:	bf01      	itttt	eq
 801138e:	681a      	ldreq	r2, [r3, #0]
 8011390:	685b      	ldreq	r3, [r3, #4]
 8011392:	1852      	addeq	r2, r2, r1
 8011394:	6022      	streq	r2, [r4, #0]
 8011396:	6063      	str	r3, [r4, #4]
 8011398:	6004      	str	r4, [r0, #0]
 801139a:	e7ed      	b.n	8011378 <_free_r+0x24>
 801139c:	461a      	mov	r2, r3
 801139e:	685b      	ldr	r3, [r3, #4]
 80113a0:	b10b      	cbz	r3, 80113a6 <_free_r+0x52>
 80113a2:	42a3      	cmp	r3, r4
 80113a4:	d9fa      	bls.n	801139c <_free_r+0x48>
 80113a6:	6811      	ldr	r1, [r2, #0]
 80113a8:	1850      	adds	r0, r2, r1
 80113aa:	42a0      	cmp	r0, r4
 80113ac:	d10b      	bne.n	80113c6 <_free_r+0x72>
 80113ae:	6820      	ldr	r0, [r4, #0]
 80113b0:	4401      	add	r1, r0
 80113b2:	1850      	adds	r0, r2, r1
 80113b4:	4283      	cmp	r3, r0
 80113b6:	6011      	str	r1, [r2, #0]
 80113b8:	d1de      	bne.n	8011378 <_free_r+0x24>
 80113ba:	6818      	ldr	r0, [r3, #0]
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	4401      	add	r1, r0
 80113c0:	6011      	str	r1, [r2, #0]
 80113c2:	6053      	str	r3, [r2, #4]
 80113c4:	e7d8      	b.n	8011378 <_free_r+0x24>
 80113c6:	d902      	bls.n	80113ce <_free_r+0x7a>
 80113c8:	230c      	movs	r3, #12
 80113ca:	602b      	str	r3, [r5, #0]
 80113cc:	e7d4      	b.n	8011378 <_free_r+0x24>
 80113ce:	6820      	ldr	r0, [r4, #0]
 80113d0:	1821      	adds	r1, r4, r0
 80113d2:	428b      	cmp	r3, r1
 80113d4:	bf01      	itttt	eq
 80113d6:	6819      	ldreq	r1, [r3, #0]
 80113d8:	685b      	ldreq	r3, [r3, #4]
 80113da:	1809      	addeq	r1, r1, r0
 80113dc:	6021      	streq	r1, [r4, #0]
 80113de:	6063      	str	r3, [r4, #4]
 80113e0:	6054      	str	r4, [r2, #4]
 80113e2:	e7c9      	b.n	8011378 <_free_r+0x24>
 80113e4:	bd38      	pop	{r3, r4, r5, pc}
 80113e6:	bf00      	nop
 80113e8:	20000848 	.word	0x20000848

080113ec <_malloc_r>:
 80113ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ee:	1ccd      	adds	r5, r1, #3
 80113f0:	f025 0503 	bic.w	r5, r5, #3
 80113f4:	3508      	adds	r5, #8
 80113f6:	2d0c      	cmp	r5, #12
 80113f8:	bf38      	it	cc
 80113fa:	250c      	movcc	r5, #12
 80113fc:	2d00      	cmp	r5, #0
 80113fe:	4606      	mov	r6, r0
 8011400:	db01      	blt.n	8011406 <_malloc_r+0x1a>
 8011402:	42a9      	cmp	r1, r5
 8011404:	d903      	bls.n	801140e <_malloc_r+0x22>
 8011406:	230c      	movs	r3, #12
 8011408:	6033      	str	r3, [r6, #0]
 801140a:	2000      	movs	r0, #0
 801140c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801140e:	f001 fb6f 	bl	8012af0 <__malloc_lock>
 8011412:	4921      	ldr	r1, [pc, #132]	; (8011498 <_malloc_r+0xac>)
 8011414:	680a      	ldr	r2, [r1, #0]
 8011416:	4614      	mov	r4, r2
 8011418:	b99c      	cbnz	r4, 8011442 <_malloc_r+0x56>
 801141a:	4f20      	ldr	r7, [pc, #128]	; (801149c <_malloc_r+0xb0>)
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	b923      	cbnz	r3, 801142a <_malloc_r+0x3e>
 8011420:	4621      	mov	r1, r4
 8011422:	4630      	mov	r0, r6
 8011424:	f000 fca4 	bl	8011d70 <_sbrk_r>
 8011428:	6038      	str	r0, [r7, #0]
 801142a:	4629      	mov	r1, r5
 801142c:	4630      	mov	r0, r6
 801142e:	f000 fc9f 	bl	8011d70 <_sbrk_r>
 8011432:	1c43      	adds	r3, r0, #1
 8011434:	d123      	bne.n	801147e <_malloc_r+0x92>
 8011436:	230c      	movs	r3, #12
 8011438:	4630      	mov	r0, r6
 801143a:	6033      	str	r3, [r6, #0]
 801143c:	f001 fb5e 	bl	8012afc <__malloc_unlock>
 8011440:	e7e3      	b.n	801140a <_malloc_r+0x1e>
 8011442:	6823      	ldr	r3, [r4, #0]
 8011444:	1b5b      	subs	r3, r3, r5
 8011446:	d417      	bmi.n	8011478 <_malloc_r+0x8c>
 8011448:	2b0b      	cmp	r3, #11
 801144a:	d903      	bls.n	8011454 <_malloc_r+0x68>
 801144c:	6023      	str	r3, [r4, #0]
 801144e:	441c      	add	r4, r3
 8011450:	6025      	str	r5, [r4, #0]
 8011452:	e004      	b.n	801145e <_malloc_r+0x72>
 8011454:	6863      	ldr	r3, [r4, #4]
 8011456:	42a2      	cmp	r2, r4
 8011458:	bf0c      	ite	eq
 801145a:	600b      	streq	r3, [r1, #0]
 801145c:	6053      	strne	r3, [r2, #4]
 801145e:	4630      	mov	r0, r6
 8011460:	f001 fb4c 	bl	8012afc <__malloc_unlock>
 8011464:	f104 000b 	add.w	r0, r4, #11
 8011468:	1d23      	adds	r3, r4, #4
 801146a:	f020 0007 	bic.w	r0, r0, #7
 801146e:	1ac2      	subs	r2, r0, r3
 8011470:	d0cc      	beq.n	801140c <_malloc_r+0x20>
 8011472:	1a1b      	subs	r3, r3, r0
 8011474:	50a3      	str	r3, [r4, r2]
 8011476:	e7c9      	b.n	801140c <_malloc_r+0x20>
 8011478:	4622      	mov	r2, r4
 801147a:	6864      	ldr	r4, [r4, #4]
 801147c:	e7cc      	b.n	8011418 <_malloc_r+0x2c>
 801147e:	1cc4      	adds	r4, r0, #3
 8011480:	f024 0403 	bic.w	r4, r4, #3
 8011484:	42a0      	cmp	r0, r4
 8011486:	d0e3      	beq.n	8011450 <_malloc_r+0x64>
 8011488:	1a21      	subs	r1, r4, r0
 801148a:	4630      	mov	r0, r6
 801148c:	f000 fc70 	bl	8011d70 <_sbrk_r>
 8011490:	3001      	adds	r0, #1
 8011492:	d1dd      	bne.n	8011450 <_malloc_r+0x64>
 8011494:	e7cf      	b.n	8011436 <_malloc_r+0x4a>
 8011496:	bf00      	nop
 8011498:	20000848 	.word	0x20000848
 801149c:	2000084c 	.word	0x2000084c

080114a0 <__cvt>:
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114a6:	461f      	mov	r7, r3
 80114a8:	bfbb      	ittet	lt
 80114aa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80114ae:	461f      	movlt	r7, r3
 80114b0:	2300      	movge	r3, #0
 80114b2:	232d      	movlt	r3, #45	; 0x2d
 80114b4:	b088      	sub	sp, #32
 80114b6:	4614      	mov	r4, r2
 80114b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80114ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80114bc:	7013      	strb	r3, [r2, #0]
 80114be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80114c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80114c4:	f023 0820 	bic.w	r8, r3, #32
 80114c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80114cc:	d005      	beq.n	80114da <__cvt+0x3a>
 80114ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80114d2:	d100      	bne.n	80114d6 <__cvt+0x36>
 80114d4:	3501      	adds	r5, #1
 80114d6:	2302      	movs	r3, #2
 80114d8:	e000      	b.n	80114dc <__cvt+0x3c>
 80114da:	2303      	movs	r3, #3
 80114dc:	aa07      	add	r2, sp, #28
 80114de:	9204      	str	r2, [sp, #16]
 80114e0:	aa06      	add	r2, sp, #24
 80114e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80114e6:	e9cd 3500 	strd	r3, r5, [sp]
 80114ea:	4622      	mov	r2, r4
 80114ec:	463b      	mov	r3, r7
 80114ee:	f000 fcff 	bl	8011ef0 <_dtoa_r>
 80114f2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80114f6:	4606      	mov	r6, r0
 80114f8:	d102      	bne.n	8011500 <__cvt+0x60>
 80114fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80114fc:	07db      	lsls	r3, r3, #31
 80114fe:	d522      	bpl.n	8011546 <__cvt+0xa6>
 8011500:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011504:	eb06 0905 	add.w	r9, r6, r5
 8011508:	d110      	bne.n	801152c <__cvt+0x8c>
 801150a:	7833      	ldrb	r3, [r6, #0]
 801150c:	2b30      	cmp	r3, #48	; 0x30
 801150e:	d10a      	bne.n	8011526 <__cvt+0x86>
 8011510:	2200      	movs	r2, #0
 8011512:	2300      	movs	r3, #0
 8011514:	4620      	mov	r0, r4
 8011516:	4639      	mov	r1, r7
 8011518:	f7ef fa82 	bl	8000a20 <__aeabi_dcmpeq>
 801151c:	b918      	cbnz	r0, 8011526 <__cvt+0x86>
 801151e:	f1c5 0501 	rsb	r5, r5, #1
 8011522:	f8ca 5000 	str.w	r5, [sl]
 8011526:	f8da 3000 	ldr.w	r3, [sl]
 801152a:	4499      	add	r9, r3
 801152c:	2200      	movs	r2, #0
 801152e:	2300      	movs	r3, #0
 8011530:	4620      	mov	r0, r4
 8011532:	4639      	mov	r1, r7
 8011534:	f7ef fa74 	bl	8000a20 <__aeabi_dcmpeq>
 8011538:	b108      	cbz	r0, 801153e <__cvt+0x9e>
 801153a:	f8cd 901c 	str.w	r9, [sp, #28]
 801153e:	2230      	movs	r2, #48	; 0x30
 8011540:	9b07      	ldr	r3, [sp, #28]
 8011542:	454b      	cmp	r3, r9
 8011544:	d307      	bcc.n	8011556 <__cvt+0xb6>
 8011546:	4630      	mov	r0, r6
 8011548:	9b07      	ldr	r3, [sp, #28]
 801154a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801154c:	1b9b      	subs	r3, r3, r6
 801154e:	6013      	str	r3, [r2, #0]
 8011550:	b008      	add	sp, #32
 8011552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011556:	1c59      	adds	r1, r3, #1
 8011558:	9107      	str	r1, [sp, #28]
 801155a:	701a      	strb	r2, [r3, #0]
 801155c:	e7f0      	b.n	8011540 <__cvt+0xa0>

0801155e <__exponent>:
 801155e:	4603      	mov	r3, r0
 8011560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011562:	2900      	cmp	r1, #0
 8011564:	f803 2b02 	strb.w	r2, [r3], #2
 8011568:	bfb6      	itet	lt
 801156a:	222d      	movlt	r2, #45	; 0x2d
 801156c:	222b      	movge	r2, #43	; 0x2b
 801156e:	4249      	neglt	r1, r1
 8011570:	2909      	cmp	r1, #9
 8011572:	7042      	strb	r2, [r0, #1]
 8011574:	dd2b      	ble.n	80115ce <__exponent+0x70>
 8011576:	f10d 0407 	add.w	r4, sp, #7
 801157a:	46a4      	mov	ip, r4
 801157c:	270a      	movs	r7, #10
 801157e:	fb91 f6f7 	sdiv	r6, r1, r7
 8011582:	460a      	mov	r2, r1
 8011584:	46a6      	mov	lr, r4
 8011586:	fb07 1516 	mls	r5, r7, r6, r1
 801158a:	2a63      	cmp	r2, #99	; 0x63
 801158c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8011590:	4631      	mov	r1, r6
 8011592:	f104 34ff 	add.w	r4, r4, #4294967295
 8011596:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801159a:	dcf0      	bgt.n	801157e <__exponent+0x20>
 801159c:	3130      	adds	r1, #48	; 0x30
 801159e:	f1ae 0502 	sub.w	r5, lr, #2
 80115a2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80115a6:	4629      	mov	r1, r5
 80115a8:	1c44      	adds	r4, r0, #1
 80115aa:	4561      	cmp	r1, ip
 80115ac:	d30a      	bcc.n	80115c4 <__exponent+0x66>
 80115ae:	f10d 0209 	add.w	r2, sp, #9
 80115b2:	eba2 020e 	sub.w	r2, r2, lr
 80115b6:	4565      	cmp	r5, ip
 80115b8:	bf88      	it	hi
 80115ba:	2200      	movhi	r2, #0
 80115bc:	4413      	add	r3, r2
 80115be:	1a18      	subs	r0, r3, r0
 80115c0:	b003      	add	sp, #12
 80115c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115c8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80115cc:	e7ed      	b.n	80115aa <__exponent+0x4c>
 80115ce:	2330      	movs	r3, #48	; 0x30
 80115d0:	3130      	adds	r1, #48	; 0x30
 80115d2:	7083      	strb	r3, [r0, #2]
 80115d4:	70c1      	strb	r1, [r0, #3]
 80115d6:	1d03      	adds	r3, r0, #4
 80115d8:	e7f1      	b.n	80115be <__exponent+0x60>
	...

080115dc <_printf_float>:
 80115dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e0:	b091      	sub	sp, #68	; 0x44
 80115e2:	460c      	mov	r4, r1
 80115e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80115e8:	4616      	mov	r6, r2
 80115ea:	461f      	mov	r7, r3
 80115ec:	4605      	mov	r5, r0
 80115ee:	f001 fa6d 	bl	8012acc <_localeconv_r>
 80115f2:	6803      	ldr	r3, [r0, #0]
 80115f4:	4618      	mov	r0, r3
 80115f6:	9309      	str	r3, [sp, #36]	; 0x24
 80115f8:	f7ee fde6 	bl	80001c8 <strlen>
 80115fc:	2300      	movs	r3, #0
 80115fe:	930e      	str	r3, [sp, #56]	; 0x38
 8011600:	f8d8 3000 	ldr.w	r3, [r8]
 8011604:	900a      	str	r0, [sp, #40]	; 0x28
 8011606:	3307      	adds	r3, #7
 8011608:	f023 0307 	bic.w	r3, r3, #7
 801160c:	f103 0208 	add.w	r2, r3, #8
 8011610:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011614:	f8d4 b000 	ldr.w	fp, [r4]
 8011618:	f8c8 2000 	str.w	r2, [r8]
 801161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011620:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011624:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8011628:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 801162c:	930b      	str	r3, [sp, #44]	; 0x2c
 801162e:	f04f 32ff 	mov.w	r2, #4294967295
 8011632:	4640      	mov	r0, r8
 8011634:	4b9c      	ldr	r3, [pc, #624]	; (80118a8 <_printf_float+0x2cc>)
 8011636:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011638:	f7ef fa24 	bl	8000a84 <__aeabi_dcmpun>
 801163c:	bb70      	cbnz	r0, 801169c <_printf_float+0xc0>
 801163e:	f04f 32ff 	mov.w	r2, #4294967295
 8011642:	4640      	mov	r0, r8
 8011644:	4b98      	ldr	r3, [pc, #608]	; (80118a8 <_printf_float+0x2cc>)
 8011646:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011648:	f7ef f9fe 	bl	8000a48 <__aeabi_dcmple>
 801164c:	bb30      	cbnz	r0, 801169c <_printf_float+0xc0>
 801164e:	2200      	movs	r2, #0
 8011650:	2300      	movs	r3, #0
 8011652:	4640      	mov	r0, r8
 8011654:	4651      	mov	r1, sl
 8011656:	f7ef f9ed 	bl	8000a34 <__aeabi_dcmplt>
 801165a:	b110      	cbz	r0, 8011662 <_printf_float+0x86>
 801165c:	232d      	movs	r3, #45	; 0x2d
 801165e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011662:	4b92      	ldr	r3, [pc, #584]	; (80118ac <_printf_float+0x2d0>)
 8011664:	4892      	ldr	r0, [pc, #584]	; (80118b0 <_printf_float+0x2d4>)
 8011666:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801166a:	bf94      	ite	ls
 801166c:	4698      	movls	r8, r3
 801166e:	4680      	movhi	r8, r0
 8011670:	2303      	movs	r3, #3
 8011672:	f04f 0a00 	mov.w	sl, #0
 8011676:	6123      	str	r3, [r4, #16]
 8011678:	f02b 0304 	bic.w	r3, fp, #4
 801167c:	6023      	str	r3, [r4, #0]
 801167e:	4633      	mov	r3, r6
 8011680:	4621      	mov	r1, r4
 8011682:	4628      	mov	r0, r5
 8011684:	9700      	str	r7, [sp, #0]
 8011686:	aa0f      	add	r2, sp, #60	; 0x3c
 8011688:	f000 f9d4 	bl	8011a34 <_printf_common>
 801168c:	3001      	adds	r0, #1
 801168e:	f040 8090 	bne.w	80117b2 <_printf_float+0x1d6>
 8011692:	f04f 30ff 	mov.w	r0, #4294967295
 8011696:	b011      	add	sp, #68	; 0x44
 8011698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801169c:	4642      	mov	r2, r8
 801169e:	4653      	mov	r3, sl
 80116a0:	4640      	mov	r0, r8
 80116a2:	4651      	mov	r1, sl
 80116a4:	f7ef f9ee 	bl	8000a84 <__aeabi_dcmpun>
 80116a8:	b148      	cbz	r0, 80116be <_printf_float+0xe2>
 80116aa:	f1ba 0f00 	cmp.w	sl, #0
 80116ae:	bfb8      	it	lt
 80116b0:	232d      	movlt	r3, #45	; 0x2d
 80116b2:	4880      	ldr	r0, [pc, #512]	; (80118b4 <_printf_float+0x2d8>)
 80116b4:	bfb8      	it	lt
 80116b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80116ba:	4b7f      	ldr	r3, [pc, #508]	; (80118b8 <_printf_float+0x2dc>)
 80116bc:	e7d3      	b.n	8011666 <_printf_float+0x8a>
 80116be:	6863      	ldr	r3, [r4, #4]
 80116c0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80116c4:	1c5a      	adds	r2, r3, #1
 80116c6:	d142      	bne.n	801174e <_printf_float+0x172>
 80116c8:	2306      	movs	r3, #6
 80116ca:	6063      	str	r3, [r4, #4]
 80116cc:	2200      	movs	r2, #0
 80116ce:	9206      	str	r2, [sp, #24]
 80116d0:	aa0e      	add	r2, sp, #56	; 0x38
 80116d2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80116d6:	aa0d      	add	r2, sp, #52	; 0x34
 80116d8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80116dc:	9203      	str	r2, [sp, #12]
 80116de:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80116e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80116e6:	6023      	str	r3, [r4, #0]
 80116e8:	6863      	ldr	r3, [r4, #4]
 80116ea:	4642      	mov	r2, r8
 80116ec:	9300      	str	r3, [sp, #0]
 80116ee:	4628      	mov	r0, r5
 80116f0:	4653      	mov	r3, sl
 80116f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80116f4:	f7ff fed4 	bl	80114a0 <__cvt>
 80116f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80116fa:	4680      	mov	r8, r0
 80116fc:	2947      	cmp	r1, #71	; 0x47
 80116fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011700:	d108      	bne.n	8011714 <_printf_float+0x138>
 8011702:	1cc8      	adds	r0, r1, #3
 8011704:	db02      	blt.n	801170c <_printf_float+0x130>
 8011706:	6863      	ldr	r3, [r4, #4]
 8011708:	4299      	cmp	r1, r3
 801170a:	dd40      	ble.n	801178e <_printf_float+0x1b2>
 801170c:	f1a9 0902 	sub.w	r9, r9, #2
 8011710:	fa5f f989 	uxtb.w	r9, r9
 8011714:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011718:	d81f      	bhi.n	801175a <_printf_float+0x17e>
 801171a:	464a      	mov	r2, r9
 801171c:	3901      	subs	r1, #1
 801171e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011722:	910d      	str	r1, [sp, #52]	; 0x34
 8011724:	f7ff ff1b 	bl	801155e <__exponent>
 8011728:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801172a:	4682      	mov	sl, r0
 801172c:	1813      	adds	r3, r2, r0
 801172e:	2a01      	cmp	r2, #1
 8011730:	6123      	str	r3, [r4, #16]
 8011732:	dc02      	bgt.n	801173a <_printf_float+0x15e>
 8011734:	6822      	ldr	r2, [r4, #0]
 8011736:	07d2      	lsls	r2, r2, #31
 8011738:	d501      	bpl.n	801173e <_printf_float+0x162>
 801173a:	3301      	adds	r3, #1
 801173c:	6123      	str	r3, [r4, #16]
 801173e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011742:	2b00      	cmp	r3, #0
 8011744:	d09b      	beq.n	801167e <_printf_float+0xa2>
 8011746:	232d      	movs	r3, #45	; 0x2d
 8011748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801174c:	e797      	b.n	801167e <_printf_float+0xa2>
 801174e:	2947      	cmp	r1, #71	; 0x47
 8011750:	d1bc      	bne.n	80116cc <_printf_float+0xf0>
 8011752:	2b00      	cmp	r3, #0
 8011754:	d1ba      	bne.n	80116cc <_printf_float+0xf0>
 8011756:	2301      	movs	r3, #1
 8011758:	e7b7      	b.n	80116ca <_printf_float+0xee>
 801175a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801175e:	d118      	bne.n	8011792 <_printf_float+0x1b6>
 8011760:	2900      	cmp	r1, #0
 8011762:	6863      	ldr	r3, [r4, #4]
 8011764:	dd0b      	ble.n	801177e <_printf_float+0x1a2>
 8011766:	6121      	str	r1, [r4, #16]
 8011768:	b913      	cbnz	r3, 8011770 <_printf_float+0x194>
 801176a:	6822      	ldr	r2, [r4, #0]
 801176c:	07d0      	lsls	r0, r2, #31
 801176e:	d502      	bpl.n	8011776 <_printf_float+0x19a>
 8011770:	3301      	adds	r3, #1
 8011772:	440b      	add	r3, r1
 8011774:	6123      	str	r3, [r4, #16]
 8011776:	f04f 0a00 	mov.w	sl, #0
 801177a:	65a1      	str	r1, [r4, #88]	; 0x58
 801177c:	e7df      	b.n	801173e <_printf_float+0x162>
 801177e:	b913      	cbnz	r3, 8011786 <_printf_float+0x1aa>
 8011780:	6822      	ldr	r2, [r4, #0]
 8011782:	07d2      	lsls	r2, r2, #31
 8011784:	d501      	bpl.n	801178a <_printf_float+0x1ae>
 8011786:	3302      	adds	r3, #2
 8011788:	e7f4      	b.n	8011774 <_printf_float+0x198>
 801178a:	2301      	movs	r3, #1
 801178c:	e7f2      	b.n	8011774 <_printf_float+0x198>
 801178e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011794:	4299      	cmp	r1, r3
 8011796:	db05      	blt.n	80117a4 <_printf_float+0x1c8>
 8011798:	6823      	ldr	r3, [r4, #0]
 801179a:	6121      	str	r1, [r4, #16]
 801179c:	07d8      	lsls	r0, r3, #31
 801179e:	d5ea      	bpl.n	8011776 <_printf_float+0x19a>
 80117a0:	1c4b      	adds	r3, r1, #1
 80117a2:	e7e7      	b.n	8011774 <_printf_float+0x198>
 80117a4:	2900      	cmp	r1, #0
 80117a6:	bfcc      	ite	gt
 80117a8:	2201      	movgt	r2, #1
 80117aa:	f1c1 0202 	rsble	r2, r1, #2
 80117ae:	4413      	add	r3, r2
 80117b0:	e7e0      	b.n	8011774 <_printf_float+0x198>
 80117b2:	6823      	ldr	r3, [r4, #0]
 80117b4:	055a      	lsls	r2, r3, #21
 80117b6:	d407      	bmi.n	80117c8 <_printf_float+0x1ec>
 80117b8:	6923      	ldr	r3, [r4, #16]
 80117ba:	4642      	mov	r2, r8
 80117bc:	4631      	mov	r1, r6
 80117be:	4628      	mov	r0, r5
 80117c0:	47b8      	blx	r7
 80117c2:	3001      	adds	r0, #1
 80117c4:	d12b      	bne.n	801181e <_printf_float+0x242>
 80117c6:	e764      	b.n	8011692 <_printf_float+0xb6>
 80117c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80117cc:	f240 80dd 	bls.w	801198a <_printf_float+0x3ae>
 80117d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80117d4:	2200      	movs	r2, #0
 80117d6:	2300      	movs	r3, #0
 80117d8:	f7ef f922 	bl	8000a20 <__aeabi_dcmpeq>
 80117dc:	2800      	cmp	r0, #0
 80117de:	d033      	beq.n	8011848 <_printf_float+0x26c>
 80117e0:	2301      	movs	r3, #1
 80117e2:	4631      	mov	r1, r6
 80117e4:	4628      	mov	r0, r5
 80117e6:	4a35      	ldr	r2, [pc, #212]	; (80118bc <_printf_float+0x2e0>)
 80117e8:	47b8      	blx	r7
 80117ea:	3001      	adds	r0, #1
 80117ec:	f43f af51 	beq.w	8011692 <_printf_float+0xb6>
 80117f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80117f4:	429a      	cmp	r2, r3
 80117f6:	db02      	blt.n	80117fe <_printf_float+0x222>
 80117f8:	6823      	ldr	r3, [r4, #0]
 80117fa:	07d8      	lsls	r0, r3, #31
 80117fc:	d50f      	bpl.n	801181e <_printf_float+0x242>
 80117fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011802:	4631      	mov	r1, r6
 8011804:	4628      	mov	r0, r5
 8011806:	47b8      	blx	r7
 8011808:	3001      	adds	r0, #1
 801180a:	f43f af42 	beq.w	8011692 <_printf_float+0xb6>
 801180e:	f04f 0800 	mov.w	r8, #0
 8011812:	f104 091a 	add.w	r9, r4, #26
 8011816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011818:	3b01      	subs	r3, #1
 801181a:	4543      	cmp	r3, r8
 801181c:	dc09      	bgt.n	8011832 <_printf_float+0x256>
 801181e:	6823      	ldr	r3, [r4, #0]
 8011820:	079b      	lsls	r3, r3, #30
 8011822:	f100 8102 	bmi.w	8011a2a <_printf_float+0x44e>
 8011826:	68e0      	ldr	r0, [r4, #12]
 8011828:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801182a:	4298      	cmp	r0, r3
 801182c:	bfb8      	it	lt
 801182e:	4618      	movlt	r0, r3
 8011830:	e731      	b.n	8011696 <_printf_float+0xba>
 8011832:	2301      	movs	r3, #1
 8011834:	464a      	mov	r2, r9
 8011836:	4631      	mov	r1, r6
 8011838:	4628      	mov	r0, r5
 801183a:	47b8      	blx	r7
 801183c:	3001      	adds	r0, #1
 801183e:	f43f af28 	beq.w	8011692 <_printf_float+0xb6>
 8011842:	f108 0801 	add.w	r8, r8, #1
 8011846:	e7e6      	b.n	8011816 <_printf_float+0x23a>
 8011848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801184a:	2b00      	cmp	r3, #0
 801184c:	dc38      	bgt.n	80118c0 <_printf_float+0x2e4>
 801184e:	2301      	movs	r3, #1
 8011850:	4631      	mov	r1, r6
 8011852:	4628      	mov	r0, r5
 8011854:	4a19      	ldr	r2, [pc, #100]	; (80118bc <_printf_float+0x2e0>)
 8011856:	47b8      	blx	r7
 8011858:	3001      	adds	r0, #1
 801185a:	f43f af1a 	beq.w	8011692 <_printf_float+0xb6>
 801185e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011862:	4313      	orrs	r3, r2
 8011864:	d102      	bne.n	801186c <_printf_float+0x290>
 8011866:	6823      	ldr	r3, [r4, #0]
 8011868:	07d9      	lsls	r1, r3, #31
 801186a:	d5d8      	bpl.n	801181e <_printf_float+0x242>
 801186c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011870:	4631      	mov	r1, r6
 8011872:	4628      	mov	r0, r5
 8011874:	47b8      	blx	r7
 8011876:	3001      	adds	r0, #1
 8011878:	f43f af0b 	beq.w	8011692 <_printf_float+0xb6>
 801187c:	f04f 0900 	mov.w	r9, #0
 8011880:	f104 0a1a 	add.w	sl, r4, #26
 8011884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011886:	425b      	negs	r3, r3
 8011888:	454b      	cmp	r3, r9
 801188a:	dc01      	bgt.n	8011890 <_printf_float+0x2b4>
 801188c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801188e:	e794      	b.n	80117ba <_printf_float+0x1de>
 8011890:	2301      	movs	r3, #1
 8011892:	4652      	mov	r2, sl
 8011894:	4631      	mov	r1, r6
 8011896:	4628      	mov	r0, r5
 8011898:	47b8      	blx	r7
 801189a:	3001      	adds	r0, #1
 801189c:	f43f aef9 	beq.w	8011692 <_printf_float+0xb6>
 80118a0:	f109 0901 	add.w	r9, r9, #1
 80118a4:	e7ee      	b.n	8011884 <_printf_float+0x2a8>
 80118a6:	bf00      	nop
 80118a8:	7fefffff 	.word	0x7fefffff
 80118ac:	08014f7c 	.word	0x08014f7c
 80118b0:	08014f80 	.word	0x08014f80
 80118b4:	08014f88 	.word	0x08014f88
 80118b8:	08014f84 	.word	0x08014f84
 80118bc:	08014f8c 	.word	0x08014f8c
 80118c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80118c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80118c4:	429a      	cmp	r2, r3
 80118c6:	bfa8      	it	ge
 80118c8:	461a      	movge	r2, r3
 80118ca:	2a00      	cmp	r2, #0
 80118cc:	4691      	mov	r9, r2
 80118ce:	dc37      	bgt.n	8011940 <_printf_float+0x364>
 80118d0:	f04f 0b00 	mov.w	fp, #0
 80118d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80118d8:	f104 021a 	add.w	r2, r4, #26
 80118dc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80118e0:	ebaa 0309 	sub.w	r3, sl, r9
 80118e4:	455b      	cmp	r3, fp
 80118e6:	dc33      	bgt.n	8011950 <_printf_float+0x374>
 80118e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80118ec:	429a      	cmp	r2, r3
 80118ee:	db3b      	blt.n	8011968 <_printf_float+0x38c>
 80118f0:	6823      	ldr	r3, [r4, #0]
 80118f2:	07da      	lsls	r2, r3, #31
 80118f4:	d438      	bmi.n	8011968 <_printf_float+0x38c>
 80118f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80118f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80118fa:	eba2 030a 	sub.w	r3, r2, sl
 80118fe:	eba2 0901 	sub.w	r9, r2, r1
 8011902:	4599      	cmp	r9, r3
 8011904:	bfa8      	it	ge
 8011906:	4699      	movge	r9, r3
 8011908:	f1b9 0f00 	cmp.w	r9, #0
 801190c:	dc34      	bgt.n	8011978 <_printf_float+0x39c>
 801190e:	f04f 0800 	mov.w	r8, #0
 8011912:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011916:	f104 0a1a 	add.w	sl, r4, #26
 801191a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801191e:	1a9b      	subs	r3, r3, r2
 8011920:	eba3 0309 	sub.w	r3, r3, r9
 8011924:	4543      	cmp	r3, r8
 8011926:	f77f af7a 	ble.w	801181e <_printf_float+0x242>
 801192a:	2301      	movs	r3, #1
 801192c:	4652      	mov	r2, sl
 801192e:	4631      	mov	r1, r6
 8011930:	4628      	mov	r0, r5
 8011932:	47b8      	blx	r7
 8011934:	3001      	adds	r0, #1
 8011936:	f43f aeac 	beq.w	8011692 <_printf_float+0xb6>
 801193a:	f108 0801 	add.w	r8, r8, #1
 801193e:	e7ec      	b.n	801191a <_printf_float+0x33e>
 8011940:	4613      	mov	r3, r2
 8011942:	4631      	mov	r1, r6
 8011944:	4642      	mov	r2, r8
 8011946:	4628      	mov	r0, r5
 8011948:	47b8      	blx	r7
 801194a:	3001      	adds	r0, #1
 801194c:	d1c0      	bne.n	80118d0 <_printf_float+0x2f4>
 801194e:	e6a0      	b.n	8011692 <_printf_float+0xb6>
 8011950:	2301      	movs	r3, #1
 8011952:	4631      	mov	r1, r6
 8011954:	4628      	mov	r0, r5
 8011956:	920b      	str	r2, [sp, #44]	; 0x2c
 8011958:	47b8      	blx	r7
 801195a:	3001      	adds	r0, #1
 801195c:	f43f ae99 	beq.w	8011692 <_printf_float+0xb6>
 8011960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011962:	f10b 0b01 	add.w	fp, fp, #1
 8011966:	e7b9      	b.n	80118dc <_printf_float+0x300>
 8011968:	4631      	mov	r1, r6
 801196a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801196e:	4628      	mov	r0, r5
 8011970:	47b8      	blx	r7
 8011972:	3001      	adds	r0, #1
 8011974:	d1bf      	bne.n	80118f6 <_printf_float+0x31a>
 8011976:	e68c      	b.n	8011692 <_printf_float+0xb6>
 8011978:	464b      	mov	r3, r9
 801197a:	4631      	mov	r1, r6
 801197c:	4628      	mov	r0, r5
 801197e:	eb08 020a 	add.w	r2, r8, sl
 8011982:	47b8      	blx	r7
 8011984:	3001      	adds	r0, #1
 8011986:	d1c2      	bne.n	801190e <_printf_float+0x332>
 8011988:	e683      	b.n	8011692 <_printf_float+0xb6>
 801198a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801198c:	2a01      	cmp	r2, #1
 801198e:	dc01      	bgt.n	8011994 <_printf_float+0x3b8>
 8011990:	07db      	lsls	r3, r3, #31
 8011992:	d537      	bpl.n	8011a04 <_printf_float+0x428>
 8011994:	2301      	movs	r3, #1
 8011996:	4642      	mov	r2, r8
 8011998:	4631      	mov	r1, r6
 801199a:	4628      	mov	r0, r5
 801199c:	47b8      	blx	r7
 801199e:	3001      	adds	r0, #1
 80119a0:	f43f ae77 	beq.w	8011692 <_printf_float+0xb6>
 80119a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119a8:	4631      	mov	r1, r6
 80119aa:	4628      	mov	r0, r5
 80119ac:	47b8      	blx	r7
 80119ae:	3001      	adds	r0, #1
 80119b0:	f43f ae6f 	beq.w	8011692 <_printf_float+0xb6>
 80119b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80119b8:	2200      	movs	r2, #0
 80119ba:	2300      	movs	r3, #0
 80119bc:	f7ef f830 	bl	8000a20 <__aeabi_dcmpeq>
 80119c0:	b9d8      	cbnz	r0, 80119fa <_printf_float+0x41e>
 80119c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119c4:	f108 0201 	add.w	r2, r8, #1
 80119c8:	3b01      	subs	r3, #1
 80119ca:	4631      	mov	r1, r6
 80119cc:	4628      	mov	r0, r5
 80119ce:	47b8      	blx	r7
 80119d0:	3001      	adds	r0, #1
 80119d2:	d10e      	bne.n	80119f2 <_printf_float+0x416>
 80119d4:	e65d      	b.n	8011692 <_printf_float+0xb6>
 80119d6:	2301      	movs	r3, #1
 80119d8:	464a      	mov	r2, r9
 80119da:	4631      	mov	r1, r6
 80119dc:	4628      	mov	r0, r5
 80119de:	47b8      	blx	r7
 80119e0:	3001      	adds	r0, #1
 80119e2:	f43f ae56 	beq.w	8011692 <_printf_float+0xb6>
 80119e6:	f108 0801 	add.w	r8, r8, #1
 80119ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119ec:	3b01      	subs	r3, #1
 80119ee:	4543      	cmp	r3, r8
 80119f0:	dcf1      	bgt.n	80119d6 <_printf_float+0x3fa>
 80119f2:	4653      	mov	r3, sl
 80119f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80119f8:	e6e0      	b.n	80117bc <_printf_float+0x1e0>
 80119fa:	f04f 0800 	mov.w	r8, #0
 80119fe:	f104 091a 	add.w	r9, r4, #26
 8011a02:	e7f2      	b.n	80119ea <_printf_float+0x40e>
 8011a04:	2301      	movs	r3, #1
 8011a06:	4642      	mov	r2, r8
 8011a08:	e7df      	b.n	80119ca <_printf_float+0x3ee>
 8011a0a:	2301      	movs	r3, #1
 8011a0c:	464a      	mov	r2, r9
 8011a0e:	4631      	mov	r1, r6
 8011a10:	4628      	mov	r0, r5
 8011a12:	47b8      	blx	r7
 8011a14:	3001      	adds	r0, #1
 8011a16:	f43f ae3c 	beq.w	8011692 <_printf_float+0xb6>
 8011a1a:	f108 0801 	add.w	r8, r8, #1
 8011a1e:	68e3      	ldr	r3, [r4, #12]
 8011a20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011a22:	1a5b      	subs	r3, r3, r1
 8011a24:	4543      	cmp	r3, r8
 8011a26:	dcf0      	bgt.n	8011a0a <_printf_float+0x42e>
 8011a28:	e6fd      	b.n	8011826 <_printf_float+0x24a>
 8011a2a:	f04f 0800 	mov.w	r8, #0
 8011a2e:	f104 0919 	add.w	r9, r4, #25
 8011a32:	e7f4      	b.n	8011a1e <_printf_float+0x442>

08011a34 <_printf_common>:
 8011a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a38:	4616      	mov	r6, r2
 8011a3a:	4699      	mov	r9, r3
 8011a3c:	688a      	ldr	r2, [r1, #8]
 8011a3e:	690b      	ldr	r3, [r1, #16]
 8011a40:	4607      	mov	r7, r0
 8011a42:	4293      	cmp	r3, r2
 8011a44:	bfb8      	it	lt
 8011a46:	4613      	movlt	r3, r2
 8011a48:	6033      	str	r3, [r6, #0]
 8011a4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011a4e:	460c      	mov	r4, r1
 8011a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011a54:	b10a      	cbz	r2, 8011a5a <_printf_common+0x26>
 8011a56:	3301      	adds	r3, #1
 8011a58:	6033      	str	r3, [r6, #0]
 8011a5a:	6823      	ldr	r3, [r4, #0]
 8011a5c:	0699      	lsls	r1, r3, #26
 8011a5e:	bf42      	ittt	mi
 8011a60:	6833      	ldrmi	r3, [r6, #0]
 8011a62:	3302      	addmi	r3, #2
 8011a64:	6033      	strmi	r3, [r6, #0]
 8011a66:	6825      	ldr	r5, [r4, #0]
 8011a68:	f015 0506 	ands.w	r5, r5, #6
 8011a6c:	d106      	bne.n	8011a7c <_printf_common+0x48>
 8011a6e:	f104 0a19 	add.w	sl, r4, #25
 8011a72:	68e3      	ldr	r3, [r4, #12]
 8011a74:	6832      	ldr	r2, [r6, #0]
 8011a76:	1a9b      	subs	r3, r3, r2
 8011a78:	42ab      	cmp	r3, r5
 8011a7a:	dc28      	bgt.n	8011ace <_printf_common+0x9a>
 8011a7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011a80:	1e13      	subs	r3, r2, #0
 8011a82:	6822      	ldr	r2, [r4, #0]
 8011a84:	bf18      	it	ne
 8011a86:	2301      	movne	r3, #1
 8011a88:	0692      	lsls	r2, r2, #26
 8011a8a:	d42d      	bmi.n	8011ae8 <_printf_common+0xb4>
 8011a8c:	4649      	mov	r1, r9
 8011a8e:	4638      	mov	r0, r7
 8011a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011a94:	47c0      	blx	r8
 8011a96:	3001      	adds	r0, #1
 8011a98:	d020      	beq.n	8011adc <_printf_common+0xa8>
 8011a9a:	6823      	ldr	r3, [r4, #0]
 8011a9c:	68e5      	ldr	r5, [r4, #12]
 8011a9e:	f003 0306 	and.w	r3, r3, #6
 8011aa2:	2b04      	cmp	r3, #4
 8011aa4:	bf18      	it	ne
 8011aa6:	2500      	movne	r5, #0
 8011aa8:	6832      	ldr	r2, [r6, #0]
 8011aaa:	f04f 0600 	mov.w	r6, #0
 8011aae:	68a3      	ldr	r3, [r4, #8]
 8011ab0:	bf08      	it	eq
 8011ab2:	1aad      	subeq	r5, r5, r2
 8011ab4:	6922      	ldr	r2, [r4, #16]
 8011ab6:	bf08      	it	eq
 8011ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011abc:	4293      	cmp	r3, r2
 8011abe:	bfc4      	itt	gt
 8011ac0:	1a9b      	subgt	r3, r3, r2
 8011ac2:	18ed      	addgt	r5, r5, r3
 8011ac4:	341a      	adds	r4, #26
 8011ac6:	42b5      	cmp	r5, r6
 8011ac8:	d11a      	bne.n	8011b00 <_printf_common+0xcc>
 8011aca:	2000      	movs	r0, #0
 8011acc:	e008      	b.n	8011ae0 <_printf_common+0xac>
 8011ace:	2301      	movs	r3, #1
 8011ad0:	4652      	mov	r2, sl
 8011ad2:	4649      	mov	r1, r9
 8011ad4:	4638      	mov	r0, r7
 8011ad6:	47c0      	blx	r8
 8011ad8:	3001      	adds	r0, #1
 8011ada:	d103      	bne.n	8011ae4 <_printf_common+0xb0>
 8011adc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ae4:	3501      	adds	r5, #1
 8011ae6:	e7c4      	b.n	8011a72 <_printf_common+0x3e>
 8011ae8:	2030      	movs	r0, #48	; 0x30
 8011aea:	18e1      	adds	r1, r4, r3
 8011aec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011af0:	1c5a      	adds	r2, r3, #1
 8011af2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011af6:	4422      	add	r2, r4
 8011af8:	3302      	adds	r3, #2
 8011afa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011afe:	e7c5      	b.n	8011a8c <_printf_common+0x58>
 8011b00:	2301      	movs	r3, #1
 8011b02:	4622      	mov	r2, r4
 8011b04:	4649      	mov	r1, r9
 8011b06:	4638      	mov	r0, r7
 8011b08:	47c0      	blx	r8
 8011b0a:	3001      	adds	r0, #1
 8011b0c:	d0e6      	beq.n	8011adc <_printf_common+0xa8>
 8011b0e:	3601      	adds	r6, #1
 8011b10:	e7d9      	b.n	8011ac6 <_printf_common+0x92>
	...

08011b14 <_printf_i>:
 8011b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b18:	460c      	mov	r4, r1
 8011b1a:	7e27      	ldrb	r7, [r4, #24]
 8011b1c:	4691      	mov	r9, r2
 8011b1e:	2f78      	cmp	r7, #120	; 0x78
 8011b20:	4680      	mov	r8, r0
 8011b22:	469a      	mov	sl, r3
 8011b24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011b26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011b2a:	d807      	bhi.n	8011b3c <_printf_i+0x28>
 8011b2c:	2f62      	cmp	r7, #98	; 0x62
 8011b2e:	d80a      	bhi.n	8011b46 <_printf_i+0x32>
 8011b30:	2f00      	cmp	r7, #0
 8011b32:	f000 80d9 	beq.w	8011ce8 <_printf_i+0x1d4>
 8011b36:	2f58      	cmp	r7, #88	; 0x58
 8011b38:	f000 80a4 	beq.w	8011c84 <_printf_i+0x170>
 8011b3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011b44:	e03a      	b.n	8011bbc <_printf_i+0xa8>
 8011b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011b4a:	2b15      	cmp	r3, #21
 8011b4c:	d8f6      	bhi.n	8011b3c <_printf_i+0x28>
 8011b4e:	a001      	add	r0, pc, #4	; (adr r0, 8011b54 <_printf_i+0x40>)
 8011b50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011b54:	08011bad 	.word	0x08011bad
 8011b58:	08011bc1 	.word	0x08011bc1
 8011b5c:	08011b3d 	.word	0x08011b3d
 8011b60:	08011b3d 	.word	0x08011b3d
 8011b64:	08011b3d 	.word	0x08011b3d
 8011b68:	08011b3d 	.word	0x08011b3d
 8011b6c:	08011bc1 	.word	0x08011bc1
 8011b70:	08011b3d 	.word	0x08011b3d
 8011b74:	08011b3d 	.word	0x08011b3d
 8011b78:	08011b3d 	.word	0x08011b3d
 8011b7c:	08011b3d 	.word	0x08011b3d
 8011b80:	08011ccf 	.word	0x08011ccf
 8011b84:	08011bf1 	.word	0x08011bf1
 8011b88:	08011cb1 	.word	0x08011cb1
 8011b8c:	08011b3d 	.word	0x08011b3d
 8011b90:	08011b3d 	.word	0x08011b3d
 8011b94:	08011cf1 	.word	0x08011cf1
 8011b98:	08011b3d 	.word	0x08011b3d
 8011b9c:	08011bf1 	.word	0x08011bf1
 8011ba0:	08011b3d 	.word	0x08011b3d
 8011ba4:	08011b3d 	.word	0x08011b3d
 8011ba8:	08011cb9 	.word	0x08011cb9
 8011bac:	680b      	ldr	r3, [r1, #0]
 8011bae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011bb2:	1d1a      	adds	r2, r3, #4
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	600a      	str	r2, [r1, #0]
 8011bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	e0a4      	b.n	8011d0a <_printf_i+0x1f6>
 8011bc0:	6825      	ldr	r5, [r4, #0]
 8011bc2:	6808      	ldr	r0, [r1, #0]
 8011bc4:	062e      	lsls	r6, r5, #24
 8011bc6:	f100 0304 	add.w	r3, r0, #4
 8011bca:	d50a      	bpl.n	8011be2 <_printf_i+0xce>
 8011bcc:	6805      	ldr	r5, [r0, #0]
 8011bce:	600b      	str	r3, [r1, #0]
 8011bd0:	2d00      	cmp	r5, #0
 8011bd2:	da03      	bge.n	8011bdc <_printf_i+0xc8>
 8011bd4:	232d      	movs	r3, #45	; 0x2d
 8011bd6:	426d      	negs	r5, r5
 8011bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011bdc:	230a      	movs	r3, #10
 8011bde:	485e      	ldr	r0, [pc, #376]	; (8011d58 <_printf_i+0x244>)
 8011be0:	e019      	b.n	8011c16 <_printf_i+0x102>
 8011be2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011be6:	6805      	ldr	r5, [r0, #0]
 8011be8:	600b      	str	r3, [r1, #0]
 8011bea:	bf18      	it	ne
 8011bec:	b22d      	sxthne	r5, r5
 8011bee:	e7ef      	b.n	8011bd0 <_printf_i+0xbc>
 8011bf0:	680b      	ldr	r3, [r1, #0]
 8011bf2:	6825      	ldr	r5, [r4, #0]
 8011bf4:	1d18      	adds	r0, r3, #4
 8011bf6:	6008      	str	r0, [r1, #0]
 8011bf8:	0628      	lsls	r0, r5, #24
 8011bfa:	d501      	bpl.n	8011c00 <_printf_i+0xec>
 8011bfc:	681d      	ldr	r5, [r3, #0]
 8011bfe:	e002      	b.n	8011c06 <_printf_i+0xf2>
 8011c00:	0669      	lsls	r1, r5, #25
 8011c02:	d5fb      	bpl.n	8011bfc <_printf_i+0xe8>
 8011c04:	881d      	ldrh	r5, [r3, #0]
 8011c06:	2f6f      	cmp	r7, #111	; 0x6f
 8011c08:	bf0c      	ite	eq
 8011c0a:	2308      	moveq	r3, #8
 8011c0c:	230a      	movne	r3, #10
 8011c0e:	4852      	ldr	r0, [pc, #328]	; (8011d58 <_printf_i+0x244>)
 8011c10:	2100      	movs	r1, #0
 8011c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c16:	6866      	ldr	r6, [r4, #4]
 8011c18:	2e00      	cmp	r6, #0
 8011c1a:	bfa8      	it	ge
 8011c1c:	6821      	ldrge	r1, [r4, #0]
 8011c1e:	60a6      	str	r6, [r4, #8]
 8011c20:	bfa4      	itt	ge
 8011c22:	f021 0104 	bicge.w	r1, r1, #4
 8011c26:	6021      	strge	r1, [r4, #0]
 8011c28:	b90d      	cbnz	r5, 8011c2e <_printf_i+0x11a>
 8011c2a:	2e00      	cmp	r6, #0
 8011c2c:	d04d      	beq.n	8011cca <_printf_i+0x1b6>
 8011c2e:	4616      	mov	r6, r2
 8011c30:	fbb5 f1f3 	udiv	r1, r5, r3
 8011c34:	fb03 5711 	mls	r7, r3, r1, r5
 8011c38:	5dc7      	ldrb	r7, [r0, r7]
 8011c3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011c3e:	462f      	mov	r7, r5
 8011c40:	42bb      	cmp	r3, r7
 8011c42:	460d      	mov	r5, r1
 8011c44:	d9f4      	bls.n	8011c30 <_printf_i+0x11c>
 8011c46:	2b08      	cmp	r3, #8
 8011c48:	d10b      	bne.n	8011c62 <_printf_i+0x14e>
 8011c4a:	6823      	ldr	r3, [r4, #0]
 8011c4c:	07df      	lsls	r7, r3, #31
 8011c4e:	d508      	bpl.n	8011c62 <_printf_i+0x14e>
 8011c50:	6923      	ldr	r3, [r4, #16]
 8011c52:	6861      	ldr	r1, [r4, #4]
 8011c54:	4299      	cmp	r1, r3
 8011c56:	bfde      	ittt	le
 8011c58:	2330      	movle	r3, #48	; 0x30
 8011c5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011c5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011c62:	1b92      	subs	r2, r2, r6
 8011c64:	6122      	str	r2, [r4, #16]
 8011c66:	464b      	mov	r3, r9
 8011c68:	4621      	mov	r1, r4
 8011c6a:	4640      	mov	r0, r8
 8011c6c:	f8cd a000 	str.w	sl, [sp]
 8011c70:	aa03      	add	r2, sp, #12
 8011c72:	f7ff fedf 	bl	8011a34 <_printf_common>
 8011c76:	3001      	adds	r0, #1
 8011c78:	d14c      	bne.n	8011d14 <_printf_i+0x200>
 8011c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8011c7e:	b004      	add	sp, #16
 8011c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c84:	4834      	ldr	r0, [pc, #208]	; (8011d58 <_printf_i+0x244>)
 8011c86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011c8a:	680e      	ldr	r6, [r1, #0]
 8011c8c:	6823      	ldr	r3, [r4, #0]
 8011c8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8011c92:	061f      	lsls	r7, r3, #24
 8011c94:	600e      	str	r6, [r1, #0]
 8011c96:	d514      	bpl.n	8011cc2 <_printf_i+0x1ae>
 8011c98:	07d9      	lsls	r1, r3, #31
 8011c9a:	bf44      	itt	mi
 8011c9c:	f043 0320 	orrmi.w	r3, r3, #32
 8011ca0:	6023      	strmi	r3, [r4, #0]
 8011ca2:	b91d      	cbnz	r5, 8011cac <_printf_i+0x198>
 8011ca4:	6823      	ldr	r3, [r4, #0]
 8011ca6:	f023 0320 	bic.w	r3, r3, #32
 8011caa:	6023      	str	r3, [r4, #0]
 8011cac:	2310      	movs	r3, #16
 8011cae:	e7af      	b.n	8011c10 <_printf_i+0xfc>
 8011cb0:	6823      	ldr	r3, [r4, #0]
 8011cb2:	f043 0320 	orr.w	r3, r3, #32
 8011cb6:	6023      	str	r3, [r4, #0]
 8011cb8:	2378      	movs	r3, #120	; 0x78
 8011cba:	4828      	ldr	r0, [pc, #160]	; (8011d5c <_printf_i+0x248>)
 8011cbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011cc0:	e7e3      	b.n	8011c8a <_printf_i+0x176>
 8011cc2:	065e      	lsls	r6, r3, #25
 8011cc4:	bf48      	it	mi
 8011cc6:	b2ad      	uxthmi	r5, r5
 8011cc8:	e7e6      	b.n	8011c98 <_printf_i+0x184>
 8011cca:	4616      	mov	r6, r2
 8011ccc:	e7bb      	b.n	8011c46 <_printf_i+0x132>
 8011cce:	680b      	ldr	r3, [r1, #0]
 8011cd0:	6826      	ldr	r6, [r4, #0]
 8011cd2:	1d1d      	adds	r5, r3, #4
 8011cd4:	6960      	ldr	r0, [r4, #20]
 8011cd6:	600d      	str	r5, [r1, #0]
 8011cd8:	0635      	lsls	r5, r6, #24
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	d501      	bpl.n	8011ce2 <_printf_i+0x1ce>
 8011cde:	6018      	str	r0, [r3, #0]
 8011ce0:	e002      	b.n	8011ce8 <_printf_i+0x1d4>
 8011ce2:	0671      	lsls	r1, r6, #25
 8011ce4:	d5fb      	bpl.n	8011cde <_printf_i+0x1ca>
 8011ce6:	8018      	strh	r0, [r3, #0]
 8011ce8:	2300      	movs	r3, #0
 8011cea:	4616      	mov	r6, r2
 8011cec:	6123      	str	r3, [r4, #16]
 8011cee:	e7ba      	b.n	8011c66 <_printf_i+0x152>
 8011cf0:	680b      	ldr	r3, [r1, #0]
 8011cf2:	1d1a      	adds	r2, r3, #4
 8011cf4:	600a      	str	r2, [r1, #0]
 8011cf6:	681e      	ldr	r6, [r3, #0]
 8011cf8:	2100      	movs	r1, #0
 8011cfa:	4630      	mov	r0, r6
 8011cfc:	6862      	ldr	r2, [r4, #4]
 8011cfe:	f000 fee9 	bl	8012ad4 <memchr>
 8011d02:	b108      	cbz	r0, 8011d08 <_printf_i+0x1f4>
 8011d04:	1b80      	subs	r0, r0, r6
 8011d06:	6060      	str	r0, [r4, #4]
 8011d08:	6863      	ldr	r3, [r4, #4]
 8011d0a:	6123      	str	r3, [r4, #16]
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d12:	e7a8      	b.n	8011c66 <_printf_i+0x152>
 8011d14:	4632      	mov	r2, r6
 8011d16:	4649      	mov	r1, r9
 8011d18:	4640      	mov	r0, r8
 8011d1a:	6923      	ldr	r3, [r4, #16]
 8011d1c:	47d0      	blx	sl
 8011d1e:	3001      	adds	r0, #1
 8011d20:	d0ab      	beq.n	8011c7a <_printf_i+0x166>
 8011d22:	6823      	ldr	r3, [r4, #0]
 8011d24:	079b      	lsls	r3, r3, #30
 8011d26:	d413      	bmi.n	8011d50 <_printf_i+0x23c>
 8011d28:	68e0      	ldr	r0, [r4, #12]
 8011d2a:	9b03      	ldr	r3, [sp, #12]
 8011d2c:	4298      	cmp	r0, r3
 8011d2e:	bfb8      	it	lt
 8011d30:	4618      	movlt	r0, r3
 8011d32:	e7a4      	b.n	8011c7e <_printf_i+0x16a>
 8011d34:	2301      	movs	r3, #1
 8011d36:	4632      	mov	r2, r6
 8011d38:	4649      	mov	r1, r9
 8011d3a:	4640      	mov	r0, r8
 8011d3c:	47d0      	blx	sl
 8011d3e:	3001      	adds	r0, #1
 8011d40:	d09b      	beq.n	8011c7a <_printf_i+0x166>
 8011d42:	3501      	adds	r5, #1
 8011d44:	68e3      	ldr	r3, [r4, #12]
 8011d46:	9903      	ldr	r1, [sp, #12]
 8011d48:	1a5b      	subs	r3, r3, r1
 8011d4a:	42ab      	cmp	r3, r5
 8011d4c:	dcf2      	bgt.n	8011d34 <_printf_i+0x220>
 8011d4e:	e7eb      	b.n	8011d28 <_printf_i+0x214>
 8011d50:	2500      	movs	r5, #0
 8011d52:	f104 0619 	add.w	r6, r4, #25
 8011d56:	e7f5      	b.n	8011d44 <_printf_i+0x230>
 8011d58:	08014f8e 	.word	0x08014f8e
 8011d5c:	08014f9f 	.word	0x08014f9f

08011d60 <realloc>:
 8011d60:	4b02      	ldr	r3, [pc, #8]	; (8011d6c <realloc+0xc>)
 8011d62:	460a      	mov	r2, r1
 8011d64:	4601      	mov	r1, r0
 8011d66:	6818      	ldr	r0, [r3, #0]
 8011d68:	f001 ba5e 	b.w	8013228 <_realloc_r>
 8011d6c:	200001e8 	.word	0x200001e8

08011d70 <_sbrk_r>:
 8011d70:	b538      	push	{r3, r4, r5, lr}
 8011d72:	2300      	movs	r3, #0
 8011d74:	4d05      	ldr	r5, [pc, #20]	; (8011d8c <_sbrk_r+0x1c>)
 8011d76:	4604      	mov	r4, r0
 8011d78:	4608      	mov	r0, r1
 8011d7a:	602b      	str	r3, [r5, #0]
 8011d7c:	f7f4 f984 	bl	8006088 <_sbrk>
 8011d80:	1c43      	adds	r3, r0, #1
 8011d82:	d102      	bne.n	8011d8a <_sbrk_r+0x1a>
 8011d84:	682b      	ldr	r3, [r5, #0]
 8011d86:	b103      	cbz	r3, 8011d8a <_sbrk_r+0x1a>
 8011d88:	6023      	str	r3, [r4, #0]
 8011d8a:	bd38      	pop	{r3, r4, r5, pc}
 8011d8c:	20002118 	.word	0x20002118

08011d90 <siprintf>:
 8011d90:	b40e      	push	{r1, r2, r3}
 8011d92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011d96:	b500      	push	{lr}
 8011d98:	b09c      	sub	sp, #112	; 0x70
 8011d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8011d9c:	9002      	str	r0, [sp, #8]
 8011d9e:	9006      	str	r0, [sp, #24]
 8011da0:	9107      	str	r1, [sp, #28]
 8011da2:	9104      	str	r1, [sp, #16]
 8011da4:	4808      	ldr	r0, [pc, #32]	; (8011dc8 <siprintf+0x38>)
 8011da6:	4909      	ldr	r1, [pc, #36]	; (8011dcc <siprintf+0x3c>)
 8011da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dac:	9105      	str	r1, [sp, #20]
 8011dae:	6800      	ldr	r0, [r0, #0]
 8011db0:	a902      	add	r1, sp, #8
 8011db2:	9301      	str	r3, [sp, #4]
 8011db4:	f001 faba 	bl	801332c <_svfiprintf_r>
 8011db8:	2200      	movs	r2, #0
 8011dba:	9b02      	ldr	r3, [sp, #8]
 8011dbc:	701a      	strb	r2, [r3, #0]
 8011dbe:	b01c      	add	sp, #112	; 0x70
 8011dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011dc4:	b003      	add	sp, #12
 8011dc6:	4770      	bx	lr
 8011dc8:	200001e8 	.word	0x200001e8
 8011dcc:	ffff0208 	.word	0xffff0208

08011dd0 <quorem>:
 8011dd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dd4:	6903      	ldr	r3, [r0, #16]
 8011dd6:	690c      	ldr	r4, [r1, #16]
 8011dd8:	4607      	mov	r7, r0
 8011dda:	42a3      	cmp	r3, r4
 8011ddc:	f2c0 8083 	blt.w	8011ee6 <quorem+0x116>
 8011de0:	3c01      	subs	r4, #1
 8011de2:	f100 0514 	add.w	r5, r0, #20
 8011de6:	f101 0814 	add.w	r8, r1, #20
 8011dea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011dee:	9301      	str	r3, [sp, #4]
 8011df0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011df4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011df8:	3301      	adds	r3, #1
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	fbb2 f6f3 	udiv	r6, r2, r3
 8011e00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011e04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011e08:	d332      	bcc.n	8011e70 <quorem+0xa0>
 8011e0a:	f04f 0e00 	mov.w	lr, #0
 8011e0e:	4640      	mov	r0, r8
 8011e10:	46ac      	mov	ip, r5
 8011e12:	46f2      	mov	sl, lr
 8011e14:	f850 2b04 	ldr.w	r2, [r0], #4
 8011e18:	b293      	uxth	r3, r2
 8011e1a:	fb06 e303 	mla	r3, r6, r3, lr
 8011e1e:	0c12      	lsrs	r2, r2, #16
 8011e20:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011e24:	fb06 e202 	mla	r2, r6, r2, lr
 8011e28:	b29b      	uxth	r3, r3
 8011e2a:	ebaa 0303 	sub.w	r3, sl, r3
 8011e2e:	f8dc a000 	ldr.w	sl, [ip]
 8011e32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011e36:	fa1f fa8a 	uxth.w	sl, sl
 8011e3a:	4453      	add	r3, sl
 8011e3c:	fa1f fa82 	uxth.w	sl, r2
 8011e40:	f8dc 2000 	ldr.w	r2, [ip]
 8011e44:	4581      	cmp	r9, r0
 8011e46:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011e4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e4e:	b29b      	uxth	r3, r3
 8011e50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e54:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011e58:	f84c 3b04 	str.w	r3, [ip], #4
 8011e5c:	d2da      	bcs.n	8011e14 <quorem+0x44>
 8011e5e:	f855 300b 	ldr.w	r3, [r5, fp]
 8011e62:	b92b      	cbnz	r3, 8011e70 <quorem+0xa0>
 8011e64:	9b01      	ldr	r3, [sp, #4]
 8011e66:	3b04      	subs	r3, #4
 8011e68:	429d      	cmp	r5, r3
 8011e6a:	461a      	mov	r2, r3
 8011e6c:	d32f      	bcc.n	8011ece <quorem+0xfe>
 8011e6e:	613c      	str	r4, [r7, #16]
 8011e70:	4638      	mov	r0, r7
 8011e72:	f001 f8c3 	bl	8012ffc <__mcmp>
 8011e76:	2800      	cmp	r0, #0
 8011e78:	db25      	blt.n	8011ec6 <quorem+0xf6>
 8011e7a:	4628      	mov	r0, r5
 8011e7c:	f04f 0c00 	mov.w	ip, #0
 8011e80:	3601      	adds	r6, #1
 8011e82:	f858 1b04 	ldr.w	r1, [r8], #4
 8011e86:	f8d0 e000 	ldr.w	lr, [r0]
 8011e8a:	b28b      	uxth	r3, r1
 8011e8c:	ebac 0303 	sub.w	r3, ip, r3
 8011e90:	fa1f f28e 	uxth.w	r2, lr
 8011e94:	4413      	add	r3, r2
 8011e96:	0c0a      	lsrs	r2, r1, #16
 8011e98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011e9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011ea0:	b29b      	uxth	r3, r3
 8011ea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ea6:	45c1      	cmp	r9, r8
 8011ea8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011eac:	f840 3b04 	str.w	r3, [r0], #4
 8011eb0:	d2e7      	bcs.n	8011e82 <quorem+0xb2>
 8011eb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011eb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011eba:	b922      	cbnz	r2, 8011ec6 <quorem+0xf6>
 8011ebc:	3b04      	subs	r3, #4
 8011ebe:	429d      	cmp	r5, r3
 8011ec0:	461a      	mov	r2, r3
 8011ec2:	d30a      	bcc.n	8011eda <quorem+0x10a>
 8011ec4:	613c      	str	r4, [r7, #16]
 8011ec6:	4630      	mov	r0, r6
 8011ec8:	b003      	add	sp, #12
 8011eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ece:	6812      	ldr	r2, [r2, #0]
 8011ed0:	3b04      	subs	r3, #4
 8011ed2:	2a00      	cmp	r2, #0
 8011ed4:	d1cb      	bne.n	8011e6e <quorem+0x9e>
 8011ed6:	3c01      	subs	r4, #1
 8011ed8:	e7c6      	b.n	8011e68 <quorem+0x98>
 8011eda:	6812      	ldr	r2, [r2, #0]
 8011edc:	3b04      	subs	r3, #4
 8011ede:	2a00      	cmp	r2, #0
 8011ee0:	d1f0      	bne.n	8011ec4 <quorem+0xf4>
 8011ee2:	3c01      	subs	r4, #1
 8011ee4:	e7eb      	b.n	8011ebe <quorem+0xee>
 8011ee6:	2000      	movs	r0, #0
 8011ee8:	e7ee      	b.n	8011ec8 <quorem+0xf8>
 8011eea:	0000      	movs	r0, r0
 8011eec:	0000      	movs	r0, r0
	...

08011ef0 <_dtoa_r>:
 8011ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef4:	4616      	mov	r6, r2
 8011ef6:	461f      	mov	r7, r3
 8011ef8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011efa:	b099      	sub	sp, #100	; 0x64
 8011efc:	4605      	mov	r5, r0
 8011efe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011f02:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8011f06:	b974      	cbnz	r4, 8011f26 <_dtoa_r+0x36>
 8011f08:	2010      	movs	r0, #16
 8011f0a:	f7ff f9ef 	bl	80112ec <malloc>
 8011f0e:	4602      	mov	r2, r0
 8011f10:	6268      	str	r0, [r5, #36]	; 0x24
 8011f12:	b920      	cbnz	r0, 8011f1e <_dtoa_r+0x2e>
 8011f14:	21ea      	movs	r1, #234	; 0xea
 8011f16:	4bae      	ldr	r3, [pc, #696]	; (80121d0 <_dtoa_r+0x2e0>)
 8011f18:	48ae      	ldr	r0, [pc, #696]	; (80121d4 <_dtoa_r+0x2e4>)
 8011f1a:	f001 fb07 	bl	801352c <__assert_func>
 8011f1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011f22:	6004      	str	r4, [r0, #0]
 8011f24:	60c4      	str	r4, [r0, #12]
 8011f26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011f28:	6819      	ldr	r1, [r3, #0]
 8011f2a:	b151      	cbz	r1, 8011f42 <_dtoa_r+0x52>
 8011f2c:	685a      	ldr	r2, [r3, #4]
 8011f2e:	2301      	movs	r3, #1
 8011f30:	4093      	lsls	r3, r2
 8011f32:	604a      	str	r2, [r1, #4]
 8011f34:	608b      	str	r3, [r1, #8]
 8011f36:	4628      	mov	r0, r5
 8011f38:	f000 fe26 	bl	8012b88 <_Bfree>
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011f40:	601a      	str	r2, [r3, #0]
 8011f42:	1e3b      	subs	r3, r7, #0
 8011f44:	bfaf      	iteee	ge
 8011f46:	2300      	movge	r3, #0
 8011f48:	2201      	movlt	r2, #1
 8011f4a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011f4e:	9305      	strlt	r3, [sp, #20]
 8011f50:	bfa8      	it	ge
 8011f52:	f8c8 3000 	strge.w	r3, [r8]
 8011f56:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011f5a:	4b9f      	ldr	r3, [pc, #636]	; (80121d8 <_dtoa_r+0x2e8>)
 8011f5c:	bfb8      	it	lt
 8011f5e:	f8c8 2000 	strlt.w	r2, [r8]
 8011f62:	ea33 0309 	bics.w	r3, r3, r9
 8011f66:	d119      	bne.n	8011f9c <_dtoa_r+0xac>
 8011f68:	f242 730f 	movw	r3, #9999	; 0x270f
 8011f6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011f6e:	6013      	str	r3, [r2, #0]
 8011f70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011f74:	4333      	orrs	r3, r6
 8011f76:	f000 8580 	beq.w	8012a7a <_dtoa_r+0xb8a>
 8011f7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011f7c:	b953      	cbnz	r3, 8011f94 <_dtoa_r+0xa4>
 8011f7e:	4b97      	ldr	r3, [pc, #604]	; (80121dc <_dtoa_r+0x2ec>)
 8011f80:	e022      	b.n	8011fc8 <_dtoa_r+0xd8>
 8011f82:	4b97      	ldr	r3, [pc, #604]	; (80121e0 <_dtoa_r+0x2f0>)
 8011f84:	9308      	str	r3, [sp, #32]
 8011f86:	3308      	adds	r3, #8
 8011f88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011f8a:	6013      	str	r3, [r2, #0]
 8011f8c:	9808      	ldr	r0, [sp, #32]
 8011f8e:	b019      	add	sp, #100	; 0x64
 8011f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f94:	4b91      	ldr	r3, [pc, #580]	; (80121dc <_dtoa_r+0x2ec>)
 8011f96:	9308      	str	r3, [sp, #32]
 8011f98:	3303      	adds	r3, #3
 8011f9a:	e7f5      	b.n	8011f88 <_dtoa_r+0x98>
 8011f9c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011fa0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8011fa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011fa8:	2200      	movs	r2, #0
 8011faa:	2300      	movs	r3, #0
 8011fac:	f7ee fd38 	bl	8000a20 <__aeabi_dcmpeq>
 8011fb0:	4680      	mov	r8, r0
 8011fb2:	b158      	cbz	r0, 8011fcc <_dtoa_r+0xdc>
 8011fb4:	2301      	movs	r3, #1
 8011fb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011fb8:	6013      	str	r3, [r2, #0]
 8011fba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	f000 8559 	beq.w	8012a74 <_dtoa_r+0xb84>
 8011fc2:	4888      	ldr	r0, [pc, #544]	; (80121e4 <_dtoa_r+0x2f4>)
 8011fc4:	6018      	str	r0, [r3, #0]
 8011fc6:	1e43      	subs	r3, r0, #1
 8011fc8:	9308      	str	r3, [sp, #32]
 8011fca:	e7df      	b.n	8011f8c <_dtoa_r+0x9c>
 8011fcc:	ab16      	add	r3, sp, #88	; 0x58
 8011fce:	9301      	str	r3, [sp, #4]
 8011fd0:	ab17      	add	r3, sp, #92	; 0x5c
 8011fd2:	9300      	str	r3, [sp, #0]
 8011fd4:	4628      	mov	r0, r5
 8011fd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011fda:	f001 f8bb 	bl	8013154 <__d2b>
 8011fde:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011fe2:	4682      	mov	sl, r0
 8011fe4:	2c00      	cmp	r4, #0
 8011fe6:	d07e      	beq.n	80120e6 <_dtoa_r+0x1f6>
 8011fe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8011ff2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ff6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8011ffa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8011ffe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8012002:	2200      	movs	r2, #0
 8012004:	4b78      	ldr	r3, [pc, #480]	; (80121e8 <_dtoa_r+0x2f8>)
 8012006:	f7ee f8eb 	bl	80001e0 <__aeabi_dsub>
 801200a:	a36b      	add	r3, pc, #428	; (adr r3, 80121b8 <_dtoa_r+0x2c8>)
 801200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012010:	f7ee fa9e 	bl	8000550 <__aeabi_dmul>
 8012014:	a36a      	add	r3, pc, #424	; (adr r3, 80121c0 <_dtoa_r+0x2d0>)
 8012016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801201a:	f7ee f8e3 	bl	80001e4 <__adddf3>
 801201e:	4606      	mov	r6, r0
 8012020:	4620      	mov	r0, r4
 8012022:	460f      	mov	r7, r1
 8012024:	f7ee fa2a 	bl	800047c <__aeabi_i2d>
 8012028:	a367      	add	r3, pc, #412	; (adr r3, 80121c8 <_dtoa_r+0x2d8>)
 801202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202e:	f7ee fa8f 	bl	8000550 <__aeabi_dmul>
 8012032:	4602      	mov	r2, r0
 8012034:	460b      	mov	r3, r1
 8012036:	4630      	mov	r0, r6
 8012038:	4639      	mov	r1, r7
 801203a:	f7ee f8d3 	bl	80001e4 <__adddf3>
 801203e:	4606      	mov	r6, r0
 8012040:	460f      	mov	r7, r1
 8012042:	f7ee fd35 	bl	8000ab0 <__aeabi_d2iz>
 8012046:	2200      	movs	r2, #0
 8012048:	4681      	mov	r9, r0
 801204a:	2300      	movs	r3, #0
 801204c:	4630      	mov	r0, r6
 801204e:	4639      	mov	r1, r7
 8012050:	f7ee fcf0 	bl	8000a34 <__aeabi_dcmplt>
 8012054:	b148      	cbz	r0, 801206a <_dtoa_r+0x17a>
 8012056:	4648      	mov	r0, r9
 8012058:	f7ee fa10 	bl	800047c <__aeabi_i2d>
 801205c:	4632      	mov	r2, r6
 801205e:	463b      	mov	r3, r7
 8012060:	f7ee fcde 	bl	8000a20 <__aeabi_dcmpeq>
 8012064:	b908      	cbnz	r0, 801206a <_dtoa_r+0x17a>
 8012066:	f109 39ff 	add.w	r9, r9, #4294967295
 801206a:	f1b9 0f16 	cmp.w	r9, #22
 801206e:	d857      	bhi.n	8012120 <_dtoa_r+0x230>
 8012070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012074:	4b5d      	ldr	r3, [pc, #372]	; (80121ec <_dtoa_r+0x2fc>)
 8012076:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801207e:	f7ee fcd9 	bl	8000a34 <__aeabi_dcmplt>
 8012082:	2800      	cmp	r0, #0
 8012084:	d04e      	beq.n	8012124 <_dtoa_r+0x234>
 8012086:	2300      	movs	r3, #0
 8012088:	f109 39ff 	add.w	r9, r9, #4294967295
 801208c:	930f      	str	r3, [sp, #60]	; 0x3c
 801208e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012090:	1b1c      	subs	r4, r3, r4
 8012092:	1e63      	subs	r3, r4, #1
 8012094:	9309      	str	r3, [sp, #36]	; 0x24
 8012096:	bf49      	itett	mi
 8012098:	f1c4 0301 	rsbmi	r3, r4, #1
 801209c:	2300      	movpl	r3, #0
 801209e:	9306      	strmi	r3, [sp, #24]
 80120a0:	2300      	movmi	r3, #0
 80120a2:	bf54      	ite	pl
 80120a4:	9306      	strpl	r3, [sp, #24]
 80120a6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80120a8:	f1b9 0f00 	cmp.w	r9, #0
 80120ac:	db3c      	blt.n	8012128 <_dtoa_r+0x238>
 80120ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120b0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80120b4:	444b      	add	r3, r9
 80120b6:	9309      	str	r3, [sp, #36]	; 0x24
 80120b8:	2300      	movs	r3, #0
 80120ba:	930a      	str	r3, [sp, #40]	; 0x28
 80120bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80120be:	2b09      	cmp	r3, #9
 80120c0:	d86c      	bhi.n	801219c <_dtoa_r+0x2ac>
 80120c2:	2b05      	cmp	r3, #5
 80120c4:	bfc4      	itt	gt
 80120c6:	3b04      	subgt	r3, #4
 80120c8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80120ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80120cc:	bfc8      	it	gt
 80120ce:	2400      	movgt	r4, #0
 80120d0:	f1a3 0302 	sub.w	r3, r3, #2
 80120d4:	bfd8      	it	le
 80120d6:	2401      	movle	r4, #1
 80120d8:	2b03      	cmp	r3, #3
 80120da:	f200 808b 	bhi.w	80121f4 <_dtoa_r+0x304>
 80120de:	e8df f003 	tbb	[pc, r3]
 80120e2:	4f2d      	.short	0x4f2d
 80120e4:	5b4d      	.short	0x5b4d
 80120e6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80120ea:	441c      	add	r4, r3
 80120ec:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80120f0:	2b20      	cmp	r3, #32
 80120f2:	bfc3      	ittte	gt
 80120f4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80120f8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80120fc:	fa09 f303 	lslgt.w	r3, r9, r3
 8012100:	f1c3 0320 	rsble	r3, r3, #32
 8012104:	bfc6      	itte	gt
 8012106:	fa26 f000 	lsrgt.w	r0, r6, r0
 801210a:	4318      	orrgt	r0, r3
 801210c:	fa06 f003 	lslle.w	r0, r6, r3
 8012110:	f7ee f9a4 	bl	800045c <__aeabi_ui2d>
 8012114:	2301      	movs	r3, #1
 8012116:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801211a:	3c01      	subs	r4, #1
 801211c:	9313      	str	r3, [sp, #76]	; 0x4c
 801211e:	e770      	b.n	8012002 <_dtoa_r+0x112>
 8012120:	2301      	movs	r3, #1
 8012122:	e7b3      	b.n	801208c <_dtoa_r+0x19c>
 8012124:	900f      	str	r0, [sp, #60]	; 0x3c
 8012126:	e7b2      	b.n	801208e <_dtoa_r+0x19e>
 8012128:	9b06      	ldr	r3, [sp, #24]
 801212a:	eba3 0309 	sub.w	r3, r3, r9
 801212e:	9306      	str	r3, [sp, #24]
 8012130:	f1c9 0300 	rsb	r3, r9, #0
 8012134:	930a      	str	r3, [sp, #40]	; 0x28
 8012136:	2300      	movs	r3, #0
 8012138:	930e      	str	r3, [sp, #56]	; 0x38
 801213a:	e7bf      	b.n	80120bc <_dtoa_r+0x1cc>
 801213c:	2300      	movs	r3, #0
 801213e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012140:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012142:	2b00      	cmp	r3, #0
 8012144:	dc59      	bgt.n	80121fa <_dtoa_r+0x30a>
 8012146:	f04f 0b01 	mov.w	fp, #1
 801214a:	465b      	mov	r3, fp
 801214c:	f8cd b008 	str.w	fp, [sp, #8]
 8012150:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8012154:	2200      	movs	r2, #0
 8012156:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8012158:	6042      	str	r2, [r0, #4]
 801215a:	2204      	movs	r2, #4
 801215c:	f102 0614 	add.w	r6, r2, #20
 8012160:	429e      	cmp	r6, r3
 8012162:	6841      	ldr	r1, [r0, #4]
 8012164:	d94f      	bls.n	8012206 <_dtoa_r+0x316>
 8012166:	4628      	mov	r0, r5
 8012168:	f000 fcce 	bl	8012b08 <_Balloc>
 801216c:	9008      	str	r0, [sp, #32]
 801216e:	2800      	cmp	r0, #0
 8012170:	d14d      	bne.n	801220e <_dtoa_r+0x31e>
 8012172:	4602      	mov	r2, r0
 8012174:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012178:	4b1d      	ldr	r3, [pc, #116]	; (80121f0 <_dtoa_r+0x300>)
 801217a:	e6cd      	b.n	8011f18 <_dtoa_r+0x28>
 801217c:	2301      	movs	r3, #1
 801217e:	e7de      	b.n	801213e <_dtoa_r+0x24e>
 8012180:	2300      	movs	r3, #0
 8012182:	930b      	str	r3, [sp, #44]	; 0x2c
 8012184:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012186:	eb09 0b03 	add.w	fp, r9, r3
 801218a:	f10b 0301 	add.w	r3, fp, #1
 801218e:	2b01      	cmp	r3, #1
 8012190:	9302      	str	r3, [sp, #8]
 8012192:	bfb8      	it	lt
 8012194:	2301      	movlt	r3, #1
 8012196:	e7dd      	b.n	8012154 <_dtoa_r+0x264>
 8012198:	2301      	movs	r3, #1
 801219a:	e7f2      	b.n	8012182 <_dtoa_r+0x292>
 801219c:	2401      	movs	r4, #1
 801219e:	2300      	movs	r3, #0
 80121a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80121a2:	9322      	str	r3, [sp, #136]	; 0x88
 80121a4:	f04f 3bff 	mov.w	fp, #4294967295
 80121a8:	2200      	movs	r2, #0
 80121aa:	2312      	movs	r3, #18
 80121ac:	f8cd b008 	str.w	fp, [sp, #8]
 80121b0:	9223      	str	r2, [sp, #140]	; 0x8c
 80121b2:	e7cf      	b.n	8012154 <_dtoa_r+0x264>
 80121b4:	f3af 8000 	nop.w
 80121b8:	636f4361 	.word	0x636f4361
 80121bc:	3fd287a7 	.word	0x3fd287a7
 80121c0:	8b60c8b3 	.word	0x8b60c8b3
 80121c4:	3fc68a28 	.word	0x3fc68a28
 80121c8:	509f79fb 	.word	0x509f79fb
 80121cc:	3fd34413 	.word	0x3fd34413
 80121d0:	08014fbd 	.word	0x08014fbd
 80121d4:	08014fd4 	.word	0x08014fd4
 80121d8:	7ff00000 	.word	0x7ff00000
 80121dc:	08014fb9 	.word	0x08014fb9
 80121e0:	08014fb0 	.word	0x08014fb0
 80121e4:	08014f8d 	.word	0x08014f8d
 80121e8:	3ff80000 	.word	0x3ff80000
 80121ec:	080150d0 	.word	0x080150d0
 80121f0:	08015033 	.word	0x08015033
 80121f4:	2301      	movs	r3, #1
 80121f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80121f8:	e7d4      	b.n	80121a4 <_dtoa_r+0x2b4>
 80121fa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80121fe:	465b      	mov	r3, fp
 8012200:	f8cd b008 	str.w	fp, [sp, #8]
 8012204:	e7a6      	b.n	8012154 <_dtoa_r+0x264>
 8012206:	3101      	adds	r1, #1
 8012208:	6041      	str	r1, [r0, #4]
 801220a:	0052      	lsls	r2, r2, #1
 801220c:	e7a6      	b.n	801215c <_dtoa_r+0x26c>
 801220e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012210:	9a08      	ldr	r2, [sp, #32]
 8012212:	601a      	str	r2, [r3, #0]
 8012214:	9b02      	ldr	r3, [sp, #8]
 8012216:	2b0e      	cmp	r3, #14
 8012218:	f200 80a8 	bhi.w	801236c <_dtoa_r+0x47c>
 801221c:	2c00      	cmp	r4, #0
 801221e:	f000 80a5 	beq.w	801236c <_dtoa_r+0x47c>
 8012222:	f1b9 0f00 	cmp.w	r9, #0
 8012226:	dd34      	ble.n	8012292 <_dtoa_r+0x3a2>
 8012228:	4a9a      	ldr	r2, [pc, #616]	; (8012494 <_dtoa_r+0x5a4>)
 801222a:	f009 030f 	and.w	r3, r9, #15
 801222e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012232:	f419 7f80 	tst.w	r9, #256	; 0x100
 8012236:	e9d3 3400 	ldrd	r3, r4, [r3]
 801223a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801223e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8012242:	d016      	beq.n	8012272 <_dtoa_r+0x382>
 8012244:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012248:	4b93      	ldr	r3, [pc, #588]	; (8012498 <_dtoa_r+0x5a8>)
 801224a:	2703      	movs	r7, #3
 801224c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012250:	f7ee faa8 	bl	80007a4 <__aeabi_ddiv>
 8012254:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012258:	f004 040f 	and.w	r4, r4, #15
 801225c:	4e8e      	ldr	r6, [pc, #568]	; (8012498 <_dtoa_r+0x5a8>)
 801225e:	b954      	cbnz	r4, 8012276 <_dtoa_r+0x386>
 8012260:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012268:	f7ee fa9c 	bl	80007a4 <__aeabi_ddiv>
 801226c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012270:	e029      	b.n	80122c6 <_dtoa_r+0x3d6>
 8012272:	2702      	movs	r7, #2
 8012274:	e7f2      	b.n	801225c <_dtoa_r+0x36c>
 8012276:	07e1      	lsls	r1, r4, #31
 8012278:	d508      	bpl.n	801228c <_dtoa_r+0x39c>
 801227a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801227e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012282:	f7ee f965 	bl	8000550 <__aeabi_dmul>
 8012286:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801228a:	3701      	adds	r7, #1
 801228c:	1064      	asrs	r4, r4, #1
 801228e:	3608      	adds	r6, #8
 8012290:	e7e5      	b.n	801225e <_dtoa_r+0x36e>
 8012292:	f000 80a5 	beq.w	80123e0 <_dtoa_r+0x4f0>
 8012296:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801229a:	f1c9 0400 	rsb	r4, r9, #0
 801229e:	4b7d      	ldr	r3, [pc, #500]	; (8012494 <_dtoa_r+0x5a4>)
 80122a0:	f004 020f 	and.w	r2, r4, #15
 80122a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80122a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ac:	f7ee f950 	bl	8000550 <__aeabi_dmul>
 80122b0:	2702      	movs	r7, #2
 80122b2:	2300      	movs	r3, #0
 80122b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80122b8:	4e77      	ldr	r6, [pc, #476]	; (8012498 <_dtoa_r+0x5a8>)
 80122ba:	1124      	asrs	r4, r4, #4
 80122bc:	2c00      	cmp	r4, #0
 80122be:	f040 8084 	bne.w	80123ca <_dtoa_r+0x4da>
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d1d2      	bne.n	801226c <_dtoa_r+0x37c>
 80122c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	f000 808b 	beq.w	80123e4 <_dtoa_r+0x4f4>
 80122ce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80122d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80122d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80122da:	2200      	movs	r2, #0
 80122dc:	4b6f      	ldr	r3, [pc, #444]	; (801249c <_dtoa_r+0x5ac>)
 80122de:	f7ee fba9 	bl	8000a34 <__aeabi_dcmplt>
 80122e2:	2800      	cmp	r0, #0
 80122e4:	d07e      	beq.n	80123e4 <_dtoa_r+0x4f4>
 80122e6:	9b02      	ldr	r3, [sp, #8]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d07b      	beq.n	80123e4 <_dtoa_r+0x4f4>
 80122ec:	f1bb 0f00 	cmp.w	fp, #0
 80122f0:	dd38      	ble.n	8012364 <_dtoa_r+0x474>
 80122f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80122f6:	2200      	movs	r2, #0
 80122f8:	4b69      	ldr	r3, [pc, #420]	; (80124a0 <_dtoa_r+0x5b0>)
 80122fa:	f7ee f929 	bl	8000550 <__aeabi_dmul>
 80122fe:	465c      	mov	r4, fp
 8012300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012304:	f109 38ff 	add.w	r8, r9, #4294967295
 8012308:	3701      	adds	r7, #1
 801230a:	4638      	mov	r0, r7
 801230c:	f7ee f8b6 	bl	800047c <__aeabi_i2d>
 8012310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012314:	f7ee f91c 	bl	8000550 <__aeabi_dmul>
 8012318:	2200      	movs	r2, #0
 801231a:	4b62      	ldr	r3, [pc, #392]	; (80124a4 <_dtoa_r+0x5b4>)
 801231c:	f7ed ff62 	bl	80001e4 <__adddf3>
 8012320:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012324:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012328:	9611      	str	r6, [sp, #68]	; 0x44
 801232a:	2c00      	cmp	r4, #0
 801232c:	d15d      	bne.n	80123ea <_dtoa_r+0x4fa>
 801232e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012332:	2200      	movs	r2, #0
 8012334:	4b5c      	ldr	r3, [pc, #368]	; (80124a8 <_dtoa_r+0x5b8>)
 8012336:	f7ed ff53 	bl	80001e0 <__aeabi_dsub>
 801233a:	4602      	mov	r2, r0
 801233c:	460b      	mov	r3, r1
 801233e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012342:	4633      	mov	r3, r6
 8012344:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012346:	f7ee fb93 	bl	8000a70 <__aeabi_dcmpgt>
 801234a:	2800      	cmp	r0, #0
 801234c:	f040 829e 	bne.w	801288c <_dtoa_r+0x99c>
 8012350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012354:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012356:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801235a:	f7ee fb6b 	bl	8000a34 <__aeabi_dcmplt>
 801235e:	2800      	cmp	r0, #0
 8012360:	f040 8292 	bne.w	8012888 <_dtoa_r+0x998>
 8012364:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8012368:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801236c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801236e:	2b00      	cmp	r3, #0
 8012370:	f2c0 8153 	blt.w	801261a <_dtoa_r+0x72a>
 8012374:	f1b9 0f0e 	cmp.w	r9, #14
 8012378:	f300 814f 	bgt.w	801261a <_dtoa_r+0x72a>
 801237c:	4b45      	ldr	r3, [pc, #276]	; (8012494 <_dtoa_r+0x5a4>)
 801237e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8012382:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012386:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801238a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801238c:	2b00      	cmp	r3, #0
 801238e:	f280 80db 	bge.w	8012548 <_dtoa_r+0x658>
 8012392:	9b02      	ldr	r3, [sp, #8]
 8012394:	2b00      	cmp	r3, #0
 8012396:	f300 80d7 	bgt.w	8012548 <_dtoa_r+0x658>
 801239a:	f040 8274 	bne.w	8012886 <_dtoa_r+0x996>
 801239e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123a2:	2200      	movs	r2, #0
 80123a4:	4b40      	ldr	r3, [pc, #256]	; (80124a8 <_dtoa_r+0x5b8>)
 80123a6:	f7ee f8d3 	bl	8000550 <__aeabi_dmul>
 80123aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123ae:	f7ee fb55 	bl	8000a5c <__aeabi_dcmpge>
 80123b2:	9c02      	ldr	r4, [sp, #8]
 80123b4:	4626      	mov	r6, r4
 80123b6:	2800      	cmp	r0, #0
 80123b8:	f040 824a 	bne.w	8012850 <_dtoa_r+0x960>
 80123bc:	2331      	movs	r3, #49	; 0x31
 80123be:	9f08      	ldr	r7, [sp, #32]
 80123c0:	f109 0901 	add.w	r9, r9, #1
 80123c4:	f807 3b01 	strb.w	r3, [r7], #1
 80123c8:	e246      	b.n	8012858 <_dtoa_r+0x968>
 80123ca:	07e2      	lsls	r2, r4, #31
 80123cc:	d505      	bpl.n	80123da <_dtoa_r+0x4ea>
 80123ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80123d2:	f7ee f8bd 	bl	8000550 <__aeabi_dmul>
 80123d6:	2301      	movs	r3, #1
 80123d8:	3701      	adds	r7, #1
 80123da:	1064      	asrs	r4, r4, #1
 80123dc:	3608      	adds	r6, #8
 80123de:	e76d      	b.n	80122bc <_dtoa_r+0x3cc>
 80123e0:	2702      	movs	r7, #2
 80123e2:	e770      	b.n	80122c6 <_dtoa_r+0x3d6>
 80123e4:	46c8      	mov	r8, r9
 80123e6:	9c02      	ldr	r4, [sp, #8]
 80123e8:	e78f      	b.n	801230a <_dtoa_r+0x41a>
 80123ea:	9908      	ldr	r1, [sp, #32]
 80123ec:	4b29      	ldr	r3, [pc, #164]	; (8012494 <_dtoa_r+0x5a4>)
 80123ee:	4421      	add	r1, r4
 80123f0:	9112      	str	r1, [sp, #72]	; 0x48
 80123f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80123f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80123f8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80123fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012400:	2900      	cmp	r1, #0
 8012402:	d055      	beq.n	80124b0 <_dtoa_r+0x5c0>
 8012404:	2000      	movs	r0, #0
 8012406:	4929      	ldr	r1, [pc, #164]	; (80124ac <_dtoa_r+0x5bc>)
 8012408:	f7ee f9cc 	bl	80007a4 <__aeabi_ddiv>
 801240c:	463b      	mov	r3, r7
 801240e:	4632      	mov	r2, r6
 8012410:	f7ed fee6 	bl	80001e0 <__aeabi_dsub>
 8012414:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012418:	9f08      	ldr	r7, [sp, #32]
 801241a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801241e:	f7ee fb47 	bl	8000ab0 <__aeabi_d2iz>
 8012422:	4604      	mov	r4, r0
 8012424:	f7ee f82a 	bl	800047c <__aeabi_i2d>
 8012428:	4602      	mov	r2, r0
 801242a:	460b      	mov	r3, r1
 801242c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012430:	f7ed fed6 	bl	80001e0 <__aeabi_dsub>
 8012434:	4602      	mov	r2, r0
 8012436:	460b      	mov	r3, r1
 8012438:	3430      	adds	r4, #48	; 0x30
 801243a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801243e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012442:	f807 4b01 	strb.w	r4, [r7], #1
 8012446:	f7ee faf5 	bl	8000a34 <__aeabi_dcmplt>
 801244a:	2800      	cmp	r0, #0
 801244c:	d174      	bne.n	8012538 <_dtoa_r+0x648>
 801244e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012452:	2000      	movs	r0, #0
 8012454:	4911      	ldr	r1, [pc, #68]	; (801249c <_dtoa_r+0x5ac>)
 8012456:	f7ed fec3 	bl	80001e0 <__aeabi_dsub>
 801245a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801245e:	f7ee fae9 	bl	8000a34 <__aeabi_dcmplt>
 8012462:	2800      	cmp	r0, #0
 8012464:	f040 80b6 	bne.w	80125d4 <_dtoa_r+0x6e4>
 8012468:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801246a:	429f      	cmp	r7, r3
 801246c:	f43f af7a 	beq.w	8012364 <_dtoa_r+0x474>
 8012470:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012474:	2200      	movs	r2, #0
 8012476:	4b0a      	ldr	r3, [pc, #40]	; (80124a0 <_dtoa_r+0x5b0>)
 8012478:	f7ee f86a 	bl	8000550 <__aeabi_dmul>
 801247c:	2200      	movs	r2, #0
 801247e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012486:	4b06      	ldr	r3, [pc, #24]	; (80124a0 <_dtoa_r+0x5b0>)
 8012488:	f7ee f862 	bl	8000550 <__aeabi_dmul>
 801248c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012490:	e7c3      	b.n	801241a <_dtoa_r+0x52a>
 8012492:	bf00      	nop
 8012494:	080150d0 	.word	0x080150d0
 8012498:	080150a8 	.word	0x080150a8
 801249c:	3ff00000 	.word	0x3ff00000
 80124a0:	40240000 	.word	0x40240000
 80124a4:	401c0000 	.word	0x401c0000
 80124a8:	40140000 	.word	0x40140000
 80124ac:	3fe00000 	.word	0x3fe00000
 80124b0:	4630      	mov	r0, r6
 80124b2:	4639      	mov	r1, r7
 80124b4:	f7ee f84c 	bl	8000550 <__aeabi_dmul>
 80124b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80124ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80124be:	9c08      	ldr	r4, [sp, #32]
 80124c0:	9314      	str	r3, [sp, #80]	; 0x50
 80124c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80124c6:	f7ee faf3 	bl	8000ab0 <__aeabi_d2iz>
 80124ca:	9015      	str	r0, [sp, #84]	; 0x54
 80124cc:	f7ed ffd6 	bl	800047c <__aeabi_i2d>
 80124d0:	4602      	mov	r2, r0
 80124d2:	460b      	mov	r3, r1
 80124d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80124d8:	f7ed fe82 	bl	80001e0 <__aeabi_dsub>
 80124dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80124de:	4606      	mov	r6, r0
 80124e0:	3330      	adds	r3, #48	; 0x30
 80124e2:	f804 3b01 	strb.w	r3, [r4], #1
 80124e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80124e8:	460f      	mov	r7, r1
 80124ea:	429c      	cmp	r4, r3
 80124ec:	f04f 0200 	mov.w	r2, #0
 80124f0:	d124      	bne.n	801253c <_dtoa_r+0x64c>
 80124f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80124f6:	4bb3      	ldr	r3, [pc, #716]	; (80127c4 <_dtoa_r+0x8d4>)
 80124f8:	f7ed fe74 	bl	80001e4 <__adddf3>
 80124fc:	4602      	mov	r2, r0
 80124fe:	460b      	mov	r3, r1
 8012500:	4630      	mov	r0, r6
 8012502:	4639      	mov	r1, r7
 8012504:	f7ee fab4 	bl	8000a70 <__aeabi_dcmpgt>
 8012508:	2800      	cmp	r0, #0
 801250a:	d162      	bne.n	80125d2 <_dtoa_r+0x6e2>
 801250c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012510:	2000      	movs	r0, #0
 8012512:	49ac      	ldr	r1, [pc, #688]	; (80127c4 <_dtoa_r+0x8d4>)
 8012514:	f7ed fe64 	bl	80001e0 <__aeabi_dsub>
 8012518:	4602      	mov	r2, r0
 801251a:	460b      	mov	r3, r1
 801251c:	4630      	mov	r0, r6
 801251e:	4639      	mov	r1, r7
 8012520:	f7ee fa88 	bl	8000a34 <__aeabi_dcmplt>
 8012524:	2800      	cmp	r0, #0
 8012526:	f43f af1d 	beq.w	8012364 <_dtoa_r+0x474>
 801252a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801252c:	1e7b      	subs	r3, r7, #1
 801252e:	9314      	str	r3, [sp, #80]	; 0x50
 8012530:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8012534:	2b30      	cmp	r3, #48	; 0x30
 8012536:	d0f8      	beq.n	801252a <_dtoa_r+0x63a>
 8012538:	46c1      	mov	r9, r8
 801253a:	e03a      	b.n	80125b2 <_dtoa_r+0x6c2>
 801253c:	4ba2      	ldr	r3, [pc, #648]	; (80127c8 <_dtoa_r+0x8d8>)
 801253e:	f7ee f807 	bl	8000550 <__aeabi_dmul>
 8012542:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012546:	e7bc      	b.n	80124c2 <_dtoa_r+0x5d2>
 8012548:	9f08      	ldr	r7, [sp, #32]
 801254a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801254e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012552:	f7ee f927 	bl	80007a4 <__aeabi_ddiv>
 8012556:	f7ee faab 	bl	8000ab0 <__aeabi_d2iz>
 801255a:	4604      	mov	r4, r0
 801255c:	f7ed ff8e 	bl	800047c <__aeabi_i2d>
 8012560:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012564:	f7ed fff4 	bl	8000550 <__aeabi_dmul>
 8012568:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801256c:	460b      	mov	r3, r1
 801256e:	4602      	mov	r2, r0
 8012570:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012574:	f7ed fe34 	bl	80001e0 <__aeabi_dsub>
 8012578:	f807 6b01 	strb.w	r6, [r7], #1
 801257c:	9e08      	ldr	r6, [sp, #32]
 801257e:	9b02      	ldr	r3, [sp, #8]
 8012580:	1bbe      	subs	r6, r7, r6
 8012582:	42b3      	cmp	r3, r6
 8012584:	d13a      	bne.n	80125fc <_dtoa_r+0x70c>
 8012586:	4602      	mov	r2, r0
 8012588:	460b      	mov	r3, r1
 801258a:	f7ed fe2b 	bl	80001e4 <__adddf3>
 801258e:	4602      	mov	r2, r0
 8012590:	460b      	mov	r3, r1
 8012592:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012596:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801259a:	f7ee fa69 	bl	8000a70 <__aeabi_dcmpgt>
 801259e:	bb58      	cbnz	r0, 80125f8 <_dtoa_r+0x708>
 80125a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80125a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125a8:	f7ee fa3a 	bl	8000a20 <__aeabi_dcmpeq>
 80125ac:	b108      	cbz	r0, 80125b2 <_dtoa_r+0x6c2>
 80125ae:	07e1      	lsls	r1, r4, #31
 80125b0:	d422      	bmi.n	80125f8 <_dtoa_r+0x708>
 80125b2:	4628      	mov	r0, r5
 80125b4:	4651      	mov	r1, sl
 80125b6:	f000 fae7 	bl	8012b88 <_Bfree>
 80125ba:	2300      	movs	r3, #0
 80125bc:	703b      	strb	r3, [r7, #0]
 80125be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80125c0:	f109 0001 	add.w	r0, r9, #1
 80125c4:	6018      	str	r0, [r3, #0]
 80125c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	f43f acdf 	beq.w	8011f8c <_dtoa_r+0x9c>
 80125ce:	601f      	str	r7, [r3, #0]
 80125d0:	e4dc      	b.n	8011f8c <_dtoa_r+0x9c>
 80125d2:	4627      	mov	r7, r4
 80125d4:	463b      	mov	r3, r7
 80125d6:	461f      	mov	r7, r3
 80125d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80125dc:	2a39      	cmp	r2, #57	; 0x39
 80125de:	d107      	bne.n	80125f0 <_dtoa_r+0x700>
 80125e0:	9a08      	ldr	r2, [sp, #32]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d1f7      	bne.n	80125d6 <_dtoa_r+0x6e6>
 80125e6:	2230      	movs	r2, #48	; 0x30
 80125e8:	9908      	ldr	r1, [sp, #32]
 80125ea:	f108 0801 	add.w	r8, r8, #1
 80125ee:	700a      	strb	r2, [r1, #0]
 80125f0:	781a      	ldrb	r2, [r3, #0]
 80125f2:	3201      	adds	r2, #1
 80125f4:	701a      	strb	r2, [r3, #0]
 80125f6:	e79f      	b.n	8012538 <_dtoa_r+0x648>
 80125f8:	46c8      	mov	r8, r9
 80125fa:	e7eb      	b.n	80125d4 <_dtoa_r+0x6e4>
 80125fc:	2200      	movs	r2, #0
 80125fe:	4b72      	ldr	r3, [pc, #456]	; (80127c8 <_dtoa_r+0x8d8>)
 8012600:	f7ed ffa6 	bl	8000550 <__aeabi_dmul>
 8012604:	4602      	mov	r2, r0
 8012606:	460b      	mov	r3, r1
 8012608:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801260c:	2200      	movs	r2, #0
 801260e:	2300      	movs	r3, #0
 8012610:	f7ee fa06 	bl	8000a20 <__aeabi_dcmpeq>
 8012614:	2800      	cmp	r0, #0
 8012616:	d098      	beq.n	801254a <_dtoa_r+0x65a>
 8012618:	e7cb      	b.n	80125b2 <_dtoa_r+0x6c2>
 801261a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801261c:	2a00      	cmp	r2, #0
 801261e:	f000 80cd 	beq.w	80127bc <_dtoa_r+0x8cc>
 8012622:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012624:	2a01      	cmp	r2, #1
 8012626:	f300 80af 	bgt.w	8012788 <_dtoa_r+0x898>
 801262a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801262c:	2a00      	cmp	r2, #0
 801262e:	f000 80a7 	beq.w	8012780 <_dtoa_r+0x890>
 8012632:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012636:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012638:	9f06      	ldr	r7, [sp, #24]
 801263a:	9a06      	ldr	r2, [sp, #24]
 801263c:	2101      	movs	r1, #1
 801263e:	441a      	add	r2, r3
 8012640:	9206      	str	r2, [sp, #24]
 8012642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012644:	4628      	mov	r0, r5
 8012646:	441a      	add	r2, r3
 8012648:	9209      	str	r2, [sp, #36]	; 0x24
 801264a:	f000 fb57 	bl	8012cfc <__i2b>
 801264e:	4606      	mov	r6, r0
 8012650:	2f00      	cmp	r7, #0
 8012652:	dd0c      	ble.n	801266e <_dtoa_r+0x77e>
 8012654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012656:	2b00      	cmp	r3, #0
 8012658:	dd09      	ble.n	801266e <_dtoa_r+0x77e>
 801265a:	42bb      	cmp	r3, r7
 801265c:	bfa8      	it	ge
 801265e:	463b      	movge	r3, r7
 8012660:	9a06      	ldr	r2, [sp, #24]
 8012662:	1aff      	subs	r7, r7, r3
 8012664:	1ad2      	subs	r2, r2, r3
 8012666:	9206      	str	r2, [sp, #24]
 8012668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801266a:	1ad3      	subs	r3, r2, r3
 801266c:	9309      	str	r3, [sp, #36]	; 0x24
 801266e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012670:	b1f3      	cbz	r3, 80126b0 <_dtoa_r+0x7c0>
 8012672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012674:	2b00      	cmp	r3, #0
 8012676:	f000 80a9 	beq.w	80127cc <_dtoa_r+0x8dc>
 801267a:	2c00      	cmp	r4, #0
 801267c:	dd10      	ble.n	80126a0 <_dtoa_r+0x7b0>
 801267e:	4631      	mov	r1, r6
 8012680:	4622      	mov	r2, r4
 8012682:	4628      	mov	r0, r5
 8012684:	f000 fbf4 	bl	8012e70 <__pow5mult>
 8012688:	4652      	mov	r2, sl
 801268a:	4601      	mov	r1, r0
 801268c:	4606      	mov	r6, r0
 801268e:	4628      	mov	r0, r5
 8012690:	f000 fb4a 	bl	8012d28 <__multiply>
 8012694:	4680      	mov	r8, r0
 8012696:	4651      	mov	r1, sl
 8012698:	4628      	mov	r0, r5
 801269a:	f000 fa75 	bl	8012b88 <_Bfree>
 801269e:	46c2      	mov	sl, r8
 80126a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126a2:	1b1a      	subs	r2, r3, r4
 80126a4:	d004      	beq.n	80126b0 <_dtoa_r+0x7c0>
 80126a6:	4651      	mov	r1, sl
 80126a8:	4628      	mov	r0, r5
 80126aa:	f000 fbe1 	bl	8012e70 <__pow5mult>
 80126ae:	4682      	mov	sl, r0
 80126b0:	2101      	movs	r1, #1
 80126b2:	4628      	mov	r0, r5
 80126b4:	f000 fb22 	bl	8012cfc <__i2b>
 80126b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80126ba:	4604      	mov	r4, r0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	f340 8087 	ble.w	80127d0 <_dtoa_r+0x8e0>
 80126c2:	461a      	mov	r2, r3
 80126c4:	4601      	mov	r1, r0
 80126c6:	4628      	mov	r0, r5
 80126c8:	f000 fbd2 	bl	8012e70 <__pow5mult>
 80126cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80126ce:	4604      	mov	r4, r0
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	f340 8080 	ble.w	80127d6 <_dtoa_r+0x8e6>
 80126d6:	f04f 0800 	mov.w	r8, #0
 80126da:	6923      	ldr	r3, [r4, #16]
 80126dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80126e0:	6918      	ldr	r0, [r3, #16]
 80126e2:	f000 fabd 	bl	8012c60 <__hi0bits>
 80126e6:	f1c0 0020 	rsb	r0, r0, #32
 80126ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126ec:	4418      	add	r0, r3
 80126ee:	f010 001f 	ands.w	r0, r0, #31
 80126f2:	f000 8092 	beq.w	801281a <_dtoa_r+0x92a>
 80126f6:	f1c0 0320 	rsb	r3, r0, #32
 80126fa:	2b04      	cmp	r3, #4
 80126fc:	f340 808a 	ble.w	8012814 <_dtoa_r+0x924>
 8012700:	f1c0 001c 	rsb	r0, r0, #28
 8012704:	9b06      	ldr	r3, [sp, #24]
 8012706:	4407      	add	r7, r0
 8012708:	4403      	add	r3, r0
 801270a:	9306      	str	r3, [sp, #24]
 801270c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801270e:	4403      	add	r3, r0
 8012710:	9309      	str	r3, [sp, #36]	; 0x24
 8012712:	9b06      	ldr	r3, [sp, #24]
 8012714:	2b00      	cmp	r3, #0
 8012716:	dd05      	ble.n	8012724 <_dtoa_r+0x834>
 8012718:	4651      	mov	r1, sl
 801271a:	461a      	mov	r2, r3
 801271c:	4628      	mov	r0, r5
 801271e:	f000 fc01 	bl	8012f24 <__lshift>
 8012722:	4682      	mov	sl, r0
 8012724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012726:	2b00      	cmp	r3, #0
 8012728:	dd05      	ble.n	8012736 <_dtoa_r+0x846>
 801272a:	4621      	mov	r1, r4
 801272c:	461a      	mov	r2, r3
 801272e:	4628      	mov	r0, r5
 8012730:	f000 fbf8 	bl	8012f24 <__lshift>
 8012734:	4604      	mov	r4, r0
 8012736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012738:	2b00      	cmp	r3, #0
 801273a:	d070      	beq.n	801281e <_dtoa_r+0x92e>
 801273c:	4621      	mov	r1, r4
 801273e:	4650      	mov	r0, sl
 8012740:	f000 fc5c 	bl	8012ffc <__mcmp>
 8012744:	2800      	cmp	r0, #0
 8012746:	da6a      	bge.n	801281e <_dtoa_r+0x92e>
 8012748:	2300      	movs	r3, #0
 801274a:	4651      	mov	r1, sl
 801274c:	220a      	movs	r2, #10
 801274e:	4628      	mov	r0, r5
 8012750:	f000 fa3c 	bl	8012bcc <__multadd>
 8012754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012756:	4682      	mov	sl, r0
 8012758:	f109 39ff 	add.w	r9, r9, #4294967295
 801275c:	2b00      	cmp	r3, #0
 801275e:	f000 8193 	beq.w	8012a88 <_dtoa_r+0xb98>
 8012762:	4631      	mov	r1, r6
 8012764:	2300      	movs	r3, #0
 8012766:	220a      	movs	r2, #10
 8012768:	4628      	mov	r0, r5
 801276a:	f000 fa2f 	bl	8012bcc <__multadd>
 801276e:	f1bb 0f00 	cmp.w	fp, #0
 8012772:	4606      	mov	r6, r0
 8012774:	f300 8093 	bgt.w	801289e <_dtoa_r+0x9ae>
 8012778:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801277a:	2b02      	cmp	r3, #2
 801277c:	dc57      	bgt.n	801282e <_dtoa_r+0x93e>
 801277e:	e08e      	b.n	801289e <_dtoa_r+0x9ae>
 8012780:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012782:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012786:	e756      	b.n	8012636 <_dtoa_r+0x746>
 8012788:	9b02      	ldr	r3, [sp, #8]
 801278a:	1e5c      	subs	r4, r3, #1
 801278c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801278e:	42a3      	cmp	r3, r4
 8012790:	bfb7      	itett	lt
 8012792:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012794:	1b1c      	subge	r4, r3, r4
 8012796:	1ae2      	sublt	r2, r4, r3
 8012798:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801279a:	bfbe      	ittt	lt
 801279c:	940a      	strlt	r4, [sp, #40]	; 0x28
 801279e:	189b      	addlt	r3, r3, r2
 80127a0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80127a2:	9b02      	ldr	r3, [sp, #8]
 80127a4:	bfb8      	it	lt
 80127a6:	2400      	movlt	r4, #0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	bfbb      	ittet	lt
 80127ac:	9b06      	ldrlt	r3, [sp, #24]
 80127ae:	9a02      	ldrlt	r2, [sp, #8]
 80127b0:	9f06      	ldrge	r7, [sp, #24]
 80127b2:	1a9f      	sublt	r7, r3, r2
 80127b4:	bfac      	ite	ge
 80127b6:	9b02      	ldrge	r3, [sp, #8]
 80127b8:	2300      	movlt	r3, #0
 80127ba:	e73e      	b.n	801263a <_dtoa_r+0x74a>
 80127bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80127be:	9f06      	ldr	r7, [sp, #24]
 80127c0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80127c2:	e745      	b.n	8012650 <_dtoa_r+0x760>
 80127c4:	3fe00000 	.word	0x3fe00000
 80127c8:	40240000 	.word	0x40240000
 80127cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80127ce:	e76a      	b.n	80126a6 <_dtoa_r+0x7b6>
 80127d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80127d2:	2b01      	cmp	r3, #1
 80127d4:	dc19      	bgt.n	801280a <_dtoa_r+0x91a>
 80127d6:	9b04      	ldr	r3, [sp, #16]
 80127d8:	b9bb      	cbnz	r3, 801280a <_dtoa_r+0x91a>
 80127da:	9b05      	ldr	r3, [sp, #20]
 80127dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80127e0:	b99b      	cbnz	r3, 801280a <_dtoa_r+0x91a>
 80127e2:	9b05      	ldr	r3, [sp, #20]
 80127e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127e8:	0d1b      	lsrs	r3, r3, #20
 80127ea:	051b      	lsls	r3, r3, #20
 80127ec:	b183      	cbz	r3, 8012810 <_dtoa_r+0x920>
 80127ee:	f04f 0801 	mov.w	r8, #1
 80127f2:	9b06      	ldr	r3, [sp, #24]
 80127f4:	3301      	adds	r3, #1
 80127f6:	9306      	str	r3, [sp, #24]
 80127f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127fa:	3301      	adds	r3, #1
 80127fc:	9309      	str	r3, [sp, #36]	; 0x24
 80127fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012800:	2b00      	cmp	r3, #0
 8012802:	f47f af6a 	bne.w	80126da <_dtoa_r+0x7ea>
 8012806:	2001      	movs	r0, #1
 8012808:	e76f      	b.n	80126ea <_dtoa_r+0x7fa>
 801280a:	f04f 0800 	mov.w	r8, #0
 801280e:	e7f6      	b.n	80127fe <_dtoa_r+0x90e>
 8012810:	4698      	mov	r8, r3
 8012812:	e7f4      	b.n	80127fe <_dtoa_r+0x90e>
 8012814:	f43f af7d 	beq.w	8012712 <_dtoa_r+0x822>
 8012818:	4618      	mov	r0, r3
 801281a:	301c      	adds	r0, #28
 801281c:	e772      	b.n	8012704 <_dtoa_r+0x814>
 801281e:	9b02      	ldr	r3, [sp, #8]
 8012820:	2b00      	cmp	r3, #0
 8012822:	dc36      	bgt.n	8012892 <_dtoa_r+0x9a2>
 8012824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012826:	2b02      	cmp	r3, #2
 8012828:	dd33      	ble.n	8012892 <_dtoa_r+0x9a2>
 801282a:	f8dd b008 	ldr.w	fp, [sp, #8]
 801282e:	f1bb 0f00 	cmp.w	fp, #0
 8012832:	d10d      	bne.n	8012850 <_dtoa_r+0x960>
 8012834:	4621      	mov	r1, r4
 8012836:	465b      	mov	r3, fp
 8012838:	2205      	movs	r2, #5
 801283a:	4628      	mov	r0, r5
 801283c:	f000 f9c6 	bl	8012bcc <__multadd>
 8012840:	4601      	mov	r1, r0
 8012842:	4604      	mov	r4, r0
 8012844:	4650      	mov	r0, sl
 8012846:	f000 fbd9 	bl	8012ffc <__mcmp>
 801284a:	2800      	cmp	r0, #0
 801284c:	f73f adb6 	bgt.w	80123bc <_dtoa_r+0x4cc>
 8012850:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012852:	9f08      	ldr	r7, [sp, #32]
 8012854:	ea6f 0903 	mvn.w	r9, r3
 8012858:	f04f 0800 	mov.w	r8, #0
 801285c:	4621      	mov	r1, r4
 801285e:	4628      	mov	r0, r5
 8012860:	f000 f992 	bl	8012b88 <_Bfree>
 8012864:	2e00      	cmp	r6, #0
 8012866:	f43f aea4 	beq.w	80125b2 <_dtoa_r+0x6c2>
 801286a:	f1b8 0f00 	cmp.w	r8, #0
 801286e:	d005      	beq.n	801287c <_dtoa_r+0x98c>
 8012870:	45b0      	cmp	r8, r6
 8012872:	d003      	beq.n	801287c <_dtoa_r+0x98c>
 8012874:	4641      	mov	r1, r8
 8012876:	4628      	mov	r0, r5
 8012878:	f000 f986 	bl	8012b88 <_Bfree>
 801287c:	4631      	mov	r1, r6
 801287e:	4628      	mov	r0, r5
 8012880:	f000 f982 	bl	8012b88 <_Bfree>
 8012884:	e695      	b.n	80125b2 <_dtoa_r+0x6c2>
 8012886:	2400      	movs	r4, #0
 8012888:	4626      	mov	r6, r4
 801288a:	e7e1      	b.n	8012850 <_dtoa_r+0x960>
 801288c:	46c1      	mov	r9, r8
 801288e:	4626      	mov	r6, r4
 8012890:	e594      	b.n	80123bc <_dtoa_r+0x4cc>
 8012892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012894:	f8dd b008 	ldr.w	fp, [sp, #8]
 8012898:	2b00      	cmp	r3, #0
 801289a:	f000 80fc 	beq.w	8012a96 <_dtoa_r+0xba6>
 801289e:	2f00      	cmp	r7, #0
 80128a0:	dd05      	ble.n	80128ae <_dtoa_r+0x9be>
 80128a2:	4631      	mov	r1, r6
 80128a4:	463a      	mov	r2, r7
 80128a6:	4628      	mov	r0, r5
 80128a8:	f000 fb3c 	bl	8012f24 <__lshift>
 80128ac:	4606      	mov	r6, r0
 80128ae:	f1b8 0f00 	cmp.w	r8, #0
 80128b2:	d05c      	beq.n	801296e <_dtoa_r+0xa7e>
 80128b4:	4628      	mov	r0, r5
 80128b6:	6871      	ldr	r1, [r6, #4]
 80128b8:	f000 f926 	bl	8012b08 <_Balloc>
 80128bc:	4607      	mov	r7, r0
 80128be:	b928      	cbnz	r0, 80128cc <_dtoa_r+0x9dc>
 80128c0:	4602      	mov	r2, r0
 80128c2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80128c6:	4b7e      	ldr	r3, [pc, #504]	; (8012ac0 <_dtoa_r+0xbd0>)
 80128c8:	f7ff bb26 	b.w	8011f18 <_dtoa_r+0x28>
 80128cc:	6932      	ldr	r2, [r6, #16]
 80128ce:	f106 010c 	add.w	r1, r6, #12
 80128d2:	3202      	adds	r2, #2
 80128d4:	0092      	lsls	r2, r2, #2
 80128d6:	300c      	adds	r0, #12
 80128d8:	f7fe fd26 	bl	8011328 <memcpy>
 80128dc:	2201      	movs	r2, #1
 80128de:	4639      	mov	r1, r7
 80128e0:	4628      	mov	r0, r5
 80128e2:	f000 fb1f 	bl	8012f24 <__lshift>
 80128e6:	46b0      	mov	r8, r6
 80128e8:	4606      	mov	r6, r0
 80128ea:	9b08      	ldr	r3, [sp, #32]
 80128ec:	3301      	adds	r3, #1
 80128ee:	9302      	str	r3, [sp, #8]
 80128f0:	9b08      	ldr	r3, [sp, #32]
 80128f2:	445b      	add	r3, fp
 80128f4:	930a      	str	r3, [sp, #40]	; 0x28
 80128f6:	9b04      	ldr	r3, [sp, #16]
 80128f8:	f003 0301 	and.w	r3, r3, #1
 80128fc:	9309      	str	r3, [sp, #36]	; 0x24
 80128fe:	9b02      	ldr	r3, [sp, #8]
 8012900:	4621      	mov	r1, r4
 8012902:	4650      	mov	r0, sl
 8012904:	f103 3bff 	add.w	fp, r3, #4294967295
 8012908:	f7ff fa62 	bl	8011dd0 <quorem>
 801290c:	4603      	mov	r3, r0
 801290e:	4641      	mov	r1, r8
 8012910:	3330      	adds	r3, #48	; 0x30
 8012912:	9004      	str	r0, [sp, #16]
 8012914:	4650      	mov	r0, sl
 8012916:	930b      	str	r3, [sp, #44]	; 0x2c
 8012918:	f000 fb70 	bl	8012ffc <__mcmp>
 801291c:	4632      	mov	r2, r6
 801291e:	9006      	str	r0, [sp, #24]
 8012920:	4621      	mov	r1, r4
 8012922:	4628      	mov	r0, r5
 8012924:	f000 fb86 	bl	8013034 <__mdiff>
 8012928:	68c2      	ldr	r2, [r0, #12]
 801292a:	4607      	mov	r7, r0
 801292c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801292e:	bb02      	cbnz	r2, 8012972 <_dtoa_r+0xa82>
 8012930:	4601      	mov	r1, r0
 8012932:	4650      	mov	r0, sl
 8012934:	f000 fb62 	bl	8012ffc <__mcmp>
 8012938:	4602      	mov	r2, r0
 801293a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801293c:	4639      	mov	r1, r7
 801293e:	4628      	mov	r0, r5
 8012940:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8012944:	f000 f920 	bl	8012b88 <_Bfree>
 8012948:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801294a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801294c:	9f02      	ldr	r7, [sp, #8]
 801294e:	ea43 0102 	orr.w	r1, r3, r2
 8012952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012954:	430b      	orrs	r3, r1
 8012956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012958:	d10d      	bne.n	8012976 <_dtoa_r+0xa86>
 801295a:	2b39      	cmp	r3, #57	; 0x39
 801295c:	d027      	beq.n	80129ae <_dtoa_r+0xabe>
 801295e:	9a06      	ldr	r2, [sp, #24]
 8012960:	2a00      	cmp	r2, #0
 8012962:	dd01      	ble.n	8012968 <_dtoa_r+0xa78>
 8012964:	9b04      	ldr	r3, [sp, #16]
 8012966:	3331      	adds	r3, #49	; 0x31
 8012968:	f88b 3000 	strb.w	r3, [fp]
 801296c:	e776      	b.n	801285c <_dtoa_r+0x96c>
 801296e:	4630      	mov	r0, r6
 8012970:	e7b9      	b.n	80128e6 <_dtoa_r+0x9f6>
 8012972:	2201      	movs	r2, #1
 8012974:	e7e2      	b.n	801293c <_dtoa_r+0xa4c>
 8012976:	9906      	ldr	r1, [sp, #24]
 8012978:	2900      	cmp	r1, #0
 801297a:	db04      	blt.n	8012986 <_dtoa_r+0xa96>
 801297c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801297e:	4301      	orrs	r1, r0
 8012980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012982:	4301      	orrs	r1, r0
 8012984:	d120      	bne.n	80129c8 <_dtoa_r+0xad8>
 8012986:	2a00      	cmp	r2, #0
 8012988:	ddee      	ble.n	8012968 <_dtoa_r+0xa78>
 801298a:	4651      	mov	r1, sl
 801298c:	2201      	movs	r2, #1
 801298e:	4628      	mov	r0, r5
 8012990:	9302      	str	r3, [sp, #8]
 8012992:	f000 fac7 	bl	8012f24 <__lshift>
 8012996:	4621      	mov	r1, r4
 8012998:	4682      	mov	sl, r0
 801299a:	f000 fb2f 	bl	8012ffc <__mcmp>
 801299e:	2800      	cmp	r0, #0
 80129a0:	9b02      	ldr	r3, [sp, #8]
 80129a2:	dc02      	bgt.n	80129aa <_dtoa_r+0xaba>
 80129a4:	d1e0      	bne.n	8012968 <_dtoa_r+0xa78>
 80129a6:	07da      	lsls	r2, r3, #31
 80129a8:	d5de      	bpl.n	8012968 <_dtoa_r+0xa78>
 80129aa:	2b39      	cmp	r3, #57	; 0x39
 80129ac:	d1da      	bne.n	8012964 <_dtoa_r+0xa74>
 80129ae:	2339      	movs	r3, #57	; 0x39
 80129b0:	f88b 3000 	strb.w	r3, [fp]
 80129b4:	463b      	mov	r3, r7
 80129b6:	461f      	mov	r7, r3
 80129b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80129bc:	3b01      	subs	r3, #1
 80129be:	2a39      	cmp	r2, #57	; 0x39
 80129c0:	d050      	beq.n	8012a64 <_dtoa_r+0xb74>
 80129c2:	3201      	adds	r2, #1
 80129c4:	701a      	strb	r2, [r3, #0]
 80129c6:	e749      	b.n	801285c <_dtoa_r+0x96c>
 80129c8:	2a00      	cmp	r2, #0
 80129ca:	dd03      	ble.n	80129d4 <_dtoa_r+0xae4>
 80129cc:	2b39      	cmp	r3, #57	; 0x39
 80129ce:	d0ee      	beq.n	80129ae <_dtoa_r+0xabe>
 80129d0:	3301      	adds	r3, #1
 80129d2:	e7c9      	b.n	8012968 <_dtoa_r+0xa78>
 80129d4:	9a02      	ldr	r2, [sp, #8]
 80129d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80129d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80129dc:	428a      	cmp	r2, r1
 80129de:	d02a      	beq.n	8012a36 <_dtoa_r+0xb46>
 80129e0:	4651      	mov	r1, sl
 80129e2:	2300      	movs	r3, #0
 80129e4:	220a      	movs	r2, #10
 80129e6:	4628      	mov	r0, r5
 80129e8:	f000 f8f0 	bl	8012bcc <__multadd>
 80129ec:	45b0      	cmp	r8, r6
 80129ee:	4682      	mov	sl, r0
 80129f0:	f04f 0300 	mov.w	r3, #0
 80129f4:	f04f 020a 	mov.w	r2, #10
 80129f8:	4641      	mov	r1, r8
 80129fa:	4628      	mov	r0, r5
 80129fc:	d107      	bne.n	8012a0e <_dtoa_r+0xb1e>
 80129fe:	f000 f8e5 	bl	8012bcc <__multadd>
 8012a02:	4680      	mov	r8, r0
 8012a04:	4606      	mov	r6, r0
 8012a06:	9b02      	ldr	r3, [sp, #8]
 8012a08:	3301      	adds	r3, #1
 8012a0a:	9302      	str	r3, [sp, #8]
 8012a0c:	e777      	b.n	80128fe <_dtoa_r+0xa0e>
 8012a0e:	f000 f8dd 	bl	8012bcc <__multadd>
 8012a12:	4631      	mov	r1, r6
 8012a14:	4680      	mov	r8, r0
 8012a16:	2300      	movs	r3, #0
 8012a18:	220a      	movs	r2, #10
 8012a1a:	4628      	mov	r0, r5
 8012a1c:	f000 f8d6 	bl	8012bcc <__multadd>
 8012a20:	4606      	mov	r6, r0
 8012a22:	e7f0      	b.n	8012a06 <_dtoa_r+0xb16>
 8012a24:	f1bb 0f00 	cmp.w	fp, #0
 8012a28:	bfcc      	ite	gt
 8012a2a:	465f      	movgt	r7, fp
 8012a2c:	2701      	movle	r7, #1
 8012a2e:	f04f 0800 	mov.w	r8, #0
 8012a32:	9a08      	ldr	r2, [sp, #32]
 8012a34:	4417      	add	r7, r2
 8012a36:	4651      	mov	r1, sl
 8012a38:	2201      	movs	r2, #1
 8012a3a:	4628      	mov	r0, r5
 8012a3c:	9302      	str	r3, [sp, #8]
 8012a3e:	f000 fa71 	bl	8012f24 <__lshift>
 8012a42:	4621      	mov	r1, r4
 8012a44:	4682      	mov	sl, r0
 8012a46:	f000 fad9 	bl	8012ffc <__mcmp>
 8012a4a:	2800      	cmp	r0, #0
 8012a4c:	dcb2      	bgt.n	80129b4 <_dtoa_r+0xac4>
 8012a4e:	d102      	bne.n	8012a56 <_dtoa_r+0xb66>
 8012a50:	9b02      	ldr	r3, [sp, #8]
 8012a52:	07db      	lsls	r3, r3, #31
 8012a54:	d4ae      	bmi.n	80129b4 <_dtoa_r+0xac4>
 8012a56:	463b      	mov	r3, r7
 8012a58:	461f      	mov	r7, r3
 8012a5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a5e:	2a30      	cmp	r2, #48	; 0x30
 8012a60:	d0fa      	beq.n	8012a58 <_dtoa_r+0xb68>
 8012a62:	e6fb      	b.n	801285c <_dtoa_r+0x96c>
 8012a64:	9a08      	ldr	r2, [sp, #32]
 8012a66:	429a      	cmp	r2, r3
 8012a68:	d1a5      	bne.n	80129b6 <_dtoa_r+0xac6>
 8012a6a:	2331      	movs	r3, #49	; 0x31
 8012a6c:	f109 0901 	add.w	r9, r9, #1
 8012a70:	7013      	strb	r3, [r2, #0]
 8012a72:	e6f3      	b.n	801285c <_dtoa_r+0x96c>
 8012a74:	4b13      	ldr	r3, [pc, #76]	; (8012ac4 <_dtoa_r+0xbd4>)
 8012a76:	f7ff baa7 	b.w	8011fc8 <_dtoa_r+0xd8>
 8012a7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	f47f aa80 	bne.w	8011f82 <_dtoa_r+0x92>
 8012a82:	4b11      	ldr	r3, [pc, #68]	; (8012ac8 <_dtoa_r+0xbd8>)
 8012a84:	f7ff baa0 	b.w	8011fc8 <_dtoa_r+0xd8>
 8012a88:	f1bb 0f00 	cmp.w	fp, #0
 8012a8c:	dc03      	bgt.n	8012a96 <_dtoa_r+0xba6>
 8012a8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012a90:	2b02      	cmp	r3, #2
 8012a92:	f73f aecc 	bgt.w	801282e <_dtoa_r+0x93e>
 8012a96:	9f08      	ldr	r7, [sp, #32]
 8012a98:	4621      	mov	r1, r4
 8012a9a:	4650      	mov	r0, sl
 8012a9c:	f7ff f998 	bl	8011dd0 <quorem>
 8012aa0:	9a08      	ldr	r2, [sp, #32]
 8012aa2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012aa6:	f807 3b01 	strb.w	r3, [r7], #1
 8012aaa:	1aba      	subs	r2, r7, r2
 8012aac:	4593      	cmp	fp, r2
 8012aae:	ddb9      	ble.n	8012a24 <_dtoa_r+0xb34>
 8012ab0:	4651      	mov	r1, sl
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	220a      	movs	r2, #10
 8012ab6:	4628      	mov	r0, r5
 8012ab8:	f000 f888 	bl	8012bcc <__multadd>
 8012abc:	4682      	mov	sl, r0
 8012abe:	e7eb      	b.n	8012a98 <_dtoa_r+0xba8>
 8012ac0:	08015033 	.word	0x08015033
 8012ac4:	08014f8c 	.word	0x08014f8c
 8012ac8:	08014fb0 	.word	0x08014fb0

08012acc <_localeconv_r>:
 8012acc:	4800      	ldr	r0, [pc, #0]	; (8012ad0 <_localeconv_r+0x4>)
 8012ace:	4770      	bx	lr
 8012ad0:	2000033c 	.word	0x2000033c

08012ad4 <memchr>:
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	b510      	push	{r4, lr}
 8012ad8:	b2c9      	uxtb	r1, r1
 8012ada:	4402      	add	r2, r0
 8012adc:	4293      	cmp	r3, r2
 8012ade:	4618      	mov	r0, r3
 8012ae0:	d101      	bne.n	8012ae6 <memchr+0x12>
 8012ae2:	2000      	movs	r0, #0
 8012ae4:	e003      	b.n	8012aee <memchr+0x1a>
 8012ae6:	7804      	ldrb	r4, [r0, #0]
 8012ae8:	3301      	adds	r3, #1
 8012aea:	428c      	cmp	r4, r1
 8012aec:	d1f6      	bne.n	8012adc <memchr+0x8>
 8012aee:	bd10      	pop	{r4, pc}

08012af0 <__malloc_lock>:
 8012af0:	4801      	ldr	r0, [pc, #4]	; (8012af8 <__malloc_lock+0x8>)
 8012af2:	f000 bd4c 	b.w	801358e <__retarget_lock_acquire_recursive>
 8012af6:	bf00      	nop
 8012af8:	20002120 	.word	0x20002120

08012afc <__malloc_unlock>:
 8012afc:	4801      	ldr	r0, [pc, #4]	; (8012b04 <__malloc_unlock+0x8>)
 8012afe:	f000 bd47 	b.w	8013590 <__retarget_lock_release_recursive>
 8012b02:	bf00      	nop
 8012b04:	20002120 	.word	0x20002120

08012b08 <_Balloc>:
 8012b08:	b570      	push	{r4, r5, r6, lr}
 8012b0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012b0c:	4604      	mov	r4, r0
 8012b0e:	460d      	mov	r5, r1
 8012b10:	b976      	cbnz	r6, 8012b30 <_Balloc+0x28>
 8012b12:	2010      	movs	r0, #16
 8012b14:	f7fe fbea 	bl	80112ec <malloc>
 8012b18:	4602      	mov	r2, r0
 8012b1a:	6260      	str	r0, [r4, #36]	; 0x24
 8012b1c:	b920      	cbnz	r0, 8012b28 <_Balloc+0x20>
 8012b1e:	2166      	movs	r1, #102	; 0x66
 8012b20:	4b17      	ldr	r3, [pc, #92]	; (8012b80 <_Balloc+0x78>)
 8012b22:	4818      	ldr	r0, [pc, #96]	; (8012b84 <_Balloc+0x7c>)
 8012b24:	f000 fd02 	bl	801352c <__assert_func>
 8012b28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012b2c:	6006      	str	r6, [r0, #0]
 8012b2e:	60c6      	str	r6, [r0, #12]
 8012b30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012b32:	68f3      	ldr	r3, [r6, #12]
 8012b34:	b183      	cbz	r3, 8012b58 <_Balloc+0x50>
 8012b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b38:	68db      	ldr	r3, [r3, #12]
 8012b3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012b3e:	b9b8      	cbnz	r0, 8012b70 <_Balloc+0x68>
 8012b40:	2101      	movs	r1, #1
 8012b42:	fa01 f605 	lsl.w	r6, r1, r5
 8012b46:	1d72      	adds	r2, r6, #5
 8012b48:	4620      	mov	r0, r4
 8012b4a:	0092      	lsls	r2, r2, #2
 8012b4c:	f000 fb5e 	bl	801320c <_calloc_r>
 8012b50:	b160      	cbz	r0, 8012b6c <_Balloc+0x64>
 8012b52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012b56:	e00e      	b.n	8012b76 <_Balloc+0x6e>
 8012b58:	2221      	movs	r2, #33	; 0x21
 8012b5a:	2104      	movs	r1, #4
 8012b5c:	4620      	mov	r0, r4
 8012b5e:	f000 fb55 	bl	801320c <_calloc_r>
 8012b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b64:	60f0      	str	r0, [r6, #12]
 8012b66:	68db      	ldr	r3, [r3, #12]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d1e4      	bne.n	8012b36 <_Balloc+0x2e>
 8012b6c:	2000      	movs	r0, #0
 8012b6e:	bd70      	pop	{r4, r5, r6, pc}
 8012b70:	6802      	ldr	r2, [r0, #0]
 8012b72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012b76:	2300      	movs	r3, #0
 8012b78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012b7c:	e7f7      	b.n	8012b6e <_Balloc+0x66>
 8012b7e:	bf00      	nop
 8012b80:	08014fbd 	.word	0x08014fbd
 8012b84:	08015044 	.word	0x08015044

08012b88 <_Bfree>:
 8012b88:	b570      	push	{r4, r5, r6, lr}
 8012b8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012b8c:	4605      	mov	r5, r0
 8012b8e:	460c      	mov	r4, r1
 8012b90:	b976      	cbnz	r6, 8012bb0 <_Bfree+0x28>
 8012b92:	2010      	movs	r0, #16
 8012b94:	f7fe fbaa 	bl	80112ec <malloc>
 8012b98:	4602      	mov	r2, r0
 8012b9a:	6268      	str	r0, [r5, #36]	; 0x24
 8012b9c:	b920      	cbnz	r0, 8012ba8 <_Bfree+0x20>
 8012b9e:	218a      	movs	r1, #138	; 0x8a
 8012ba0:	4b08      	ldr	r3, [pc, #32]	; (8012bc4 <_Bfree+0x3c>)
 8012ba2:	4809      	ldr	r0, [pc, #36]	; (8012bc8 <_Bfree+0x40>)
 8012ba4:	f000 fcc2 	bl	801352c <__assert_func>
 8012ba8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012bac:	6006      	str	r6, [r0, #0]
 8012bae:	60c6      	str	r6, [r0, #12]
 8012bb0:	b13c      	cbz	r4, 8012bc2 <_Bfree+0x3a>
 8012bb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012bb4:	6862      	ldr	r2, [r4, #4]
 8012bb6:	68db      	ldr	r3, [r3, #12]
 8012bb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012bbc:	6021      	str	r1, [r4, #0]
 8012bbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012bc2:	bd70      	pop	{r4, r5, r6, pc}
 8012bc4:	08014fbd 	.word	0x08014fbd
 8012bc8:	08015044 	.word	0x08015044

08012bcc <__multadd>:
 8012bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bd0:	4698      	mov	r8, r3
 8012bd2:	460c      	mov	r4, r1
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	690e      	ldr	r6, [r1, #16]
 8012bd8:	4607      	mov	r7, r0
 8012bda:	f101 0014 	add.w	r0, r1, #20
 8012bde:	6805      	ldr	r5, [r0, #0]
 8012be0:	3301      	adds	r3, #1
 8012be2:	b2a9      	uxth	r1, r5
 8012be4:	fb02 8101 	mla	r1, r2, r1, r8
 8012be8:	0c2d      	lsrs	r5, r5, #16
 8012bea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012bee:	fb02 c505 	mla	r5, r2, r5, ip
 8012bf2:	b289      	uxth	r1, r1
 8012bf4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012bf8:	429e      	cmp	r6, r3
 8012bfa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012bfe:	f840 1b04 	str.w	r1, [r0], #4
 8012c02:	dcec      	bgt.n	8012bde <__multadd+0x12>
 8012c04:	f1b8 0f00 	cmp.w	r8, #0
 8012c08:	d022      	beq.n	8012c50 <__multadd+0x84>
 8012c0a:	68a3      	ldr	r3, [r4, #8]
 8012c0c:	42b3      	cmp	r3, r6
 8012c0e:	dc19      	bgt.n	8012c44 <__multadd+0x78>
 8012c10:	6861      	ldr	r1, [r4, #4]
 8012c12:	4638      	mov	r0, r7
 8012c14:	3101      	adds	r1, #1
 8012c16:	f7ff ff77 	bl	8012b08 <_Balloc>
 8012c1a:	4605      	mov	r5, r0
 8012c1c:	b928      	cbnz	r0, 8012c2a <__multadd+0x5e>
 8012c1e:	4602      	mov	r2, r0
 8012c20:	21b5      	movs	r1, #181	; 0xb5
 8012c22:	4b0d      	ldr	r3, [pc, #52]	; (8012c58 <__multadd+0x8c>)
 8012c24:	480d      	ldr	r0, [pc, #52]	; (8012c5c <__multadd+0x90>)
 8012c26:	f000 fc81 	bl	801352c <__assert_func>
 8012c2a:	6922      	ldr	r2, [r4, #16]
 8012c2c:	f104 010c 	add.w	r1, r4, #12
 8012c30:	3202      	adds	r2, #2
 8012c32:	0092      	lsls	r2, r2, #2
 8012c34:	300c      	adds	r0, #12
 8012c36:	f7fe fb77 	bl	8011328 <memcpy>
 8012c3a:	4621      	mov	r1, r4
 8012c3c:	4638      	mov	r0, r7
 8012c3e:	f7ff ffa3 	bl	8012b88 <_Bfree>
 8012c42:	462c      	mov	r4, r5
 8012c44:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012c48:	3601      	adds	r6, #1
 8012c4a:	f8c3 8014 	str.w	r8, [r3, #20]
 8012c4e:	6126      	str	r6, [r4, #16]
 8012c50:	4620      	mov	r0, r4
 8012c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c56:	bf00      	nop
 8012c58:	08015033 	.word	0x08015033
 8012c5c:	08015044 	.word	0x08015044

08012c60 <__hi0bits>:
 8012c60:	0c02      	lsrs	r2, r0, #16
 8012c62:	0412      	lsls	r2, r2, #16
 8012c64:	4603      	mov	r3, r0
 8012c66:	b9ca      	cbnz	r2, 8012c9c <__hi0bits+0x3c>
 8012c68:	0403      	lsls	r3, r0, #16
 8012c6a:	2010      	movs	r0, #16
 8012c6c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012c70:	bf04      	itt	eq
 8012c72:	021b      	lsleq	r3, r3, #8
 8012c74:	3008      	addeq	r0, #8
 8012c76:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012c7a:	bf04      	itt	eq
 8012c7c:	011b      	lsleq	r3, r3, #4
 8012c7e:	3004      	addeq	r0, #4
 8012c80:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012c84:	bf04      	itt	eq
 8012c86:	009b      	lsleq	r3, r3, #2
 8012c88:	3002      	addeq	r0, #2
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	db05      	blt.n	8012c9a <__hi0bits+0x3a>
 8012c8e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8012c92:	f100 0001 	add.w	r0, r0, #1
 8012c96:	bf08      	it	eq
 8012c98:	2020      	moveq	r0, #32
 8012c9a:	4770      	bx	lr
 8012c9c:	2000      	movs	r0, #0
 8012c9e:	e7e5      	b.n	8012c6c <__hi0bits+0xc>

08012ca0 <__lo0bits>:
 8012ca0:	6803      	ldr	r3, [r0, #0]
 8012ca2:	4602      	mov	r2, r0
 8012ca4:	f013 0007 	ands.w	r0, r3, #7
 8012ca8:	d00b      	beq.n	8012cc2 <__lo0bits+0x22>
 8012caa:	07d9      	lsls	r1, r3, #31
 8012cac:	d422      	bmi.n	8012cf4 <__lo0bits+0x54>
 8012cae:	0798      	lsls	r0, r3, #30
 8012cb0:	bf49      	itett	mi
 8012cb2:	085b      	lsrmi	r3, r3, #1
 8012cb4:	089b      	lsrpl	r3, r3, #2
 8012cb6:	2001      	movmi	r0, #1
 8012cb8:	6013      	strmi	r3, [r2, #0]
 8012cba:	bf5c      	itt	pl
 8012cbc:	2002      	movpl	r0, #2
 8012cbe:	6013      	strpl	r3, [r2, #0]
 8012cc0:	4770      	bx	lr
 8012cc2:	b299      	uxth	r1, r3
 8012cc4:	b909      	cbnz	r1, 8012cca <__lo0bits+0x2a>
 8012cc6:	2010      	movs	r0, #16
 8012cc8:	0c1b      	lsrs	r3, r3, #16
 8012cca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012cce:	bf04      	itt	eq
 8012cd0:	0a1b      	lsreq	r3, r3, #8
 8012cd2:	3008      	addeq	r0, #8
 8012cd4:	0719      	lsls	r1, r3, #28
 8012cd6:	bf04      	itt	eq
 8012cd8:	091b      	lsreq	r3, r3, #4
 8012cda:	3004      	addeq	r0, #4
 8012cdc:	0799      	lsls	r1, r3, #30
 8012cde:	bf04      	itt	eq
 8012ce0:	089b      	lsreq	r3, r3, #2
 8012ce2:	3002      	addeq	r0, #2
 8012ce4:	07d9      	lsls	r1, r3, #31
 8012ce6:	d403      	bmi.n	8012cf0 <__lo0bits+0x50>
 8012ce8:	085b      	lsrs	r3, r3, #1
 8012cea:	f100 0001 	add.w	r0, r0, #1
 8012cee:	d003      	beq.n	8012cf8 <__lo0bits+0x58>
 8012cf0:	6013      	str	r3, [r2, #0]
 8012cf2:	4770      	bx	lr
 8012cf4:	2000      	movs	r0, #0
 8012cf6:	4770      	bx	lr
 8012cf8:	2020      	movs	r0, #32
 8012cfa:	4770      	bx	lr

08012cfc <__i2b>:
 8012cfc:	b510      	push	{r4, lr}
 8012cfe:	460c      	mov	r4, r1
 8012d00:	2101      	movs	r1, #1
 8012d02:	f7ff ff01 	bl	8012b08 <_Balloc>
 8012d06:	4602      	mov	r2, r0
 8012d08:	b928      	cbnz	r0, 8012d16 <__i2b+0x1a>
 8012d0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012d0e:	4b04      	ldr	r3, [pc, #16]	; (8012d20 <__i2b+0x24>)
 8012d10:	4804      	ldr	r0, [pc, #16]	; (8012d24 <__i2b+0x28>)
 8012d12:	f000 fc0b 	bl	801352c <__assert_func>
 8012d16:	2301      	movs	r3, #1
 8012d18:	6144      	str	r4, [r0, #20]
 8012d1a:	6103      	str	r3, [r0, #16]
 8012d1c:	bd10      	pop	{r4, pc}
 8012d1e:	bf00      	nop
 8012d20:	08015033 	.word	0x08015033
 8012d24:	08015044 	.word	0x08015044

08012d28 <__multiply>:
 8012d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d2c:	4614      	mov	r4, r2
 8012d2e:	690a      	ldr	r2, [r1, #16]
 8012d30:	6923      	ldr	r3, [r4, #16]
 8012d32:	460d      	mov	r5, r1
 8012d34:	429a      	cmp	r2, r3
 8012d36:	bfbe      	ittt	lt
 8012d38:	460b      	movlt	r3, r1
 8012d3a:	4625      	movlt	r5, r4
 8012d3c:	461c      	movlt	r4, r3
 8012d3e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012d42:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012d46:	68ab      	ldr	r3, [r5, #8]
 8012d48:	6869      	ldr	r1, [r5, #4]
 8012d4a:	eb0a 0709 	add.w	r7, sl, r9
 8012d4e:	42bb      	cmp	r3, r7
 8012d50:	b085      	sub	sp, #20
 8012d52:	bfb8      	it	lt
 8012d54:	3101      	addlt	r1, #1
 8012d56:	f7ff fed7 	bl	8012b08 <_Balloc>
 8012d5a:	b930      	cbnz	r0, 8012d6a <__multiply+0x42>
 8012d5c:	4602      	mov	r2, r0
 8012d5e:	f240 115d 	movw	r1, #349	; 0x15d
 8012d62:	4b41      	ldr	r3, [pc, #260]	; (8012e68 <__multiply+0x140>)
 8012d64:	4841      	ldr	r0, [pc, #260]	; (8012e6c <__multiply+0x144>)
 8012d66:	f000 fbe1 	bl	801352c <__assert_func>
 8012d6a:	f100 0614 	add.w	r6, r0, #20
 8012d6e:	4633      	mov	r3, r6
 8012d70:	2200      	movs	r2, #0
 8012d72:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012d76:	4543      	cmp	r3, r8
 8012d78:	d31e      	bcc.n	8012db8 <__multiply+0x90>
 8012d7a:	f105 0c14 	add.w	ip, r5, #20
 8012d7e:	f104 0314 	add.w	r3, r4, #20
 8012d82:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012d86:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012d8a:	9202      	str	r2, [sp, #8]
 8012d8c:	ebac 0205 	sub.w	r2, ip, r5
 8012d90:	3a15      	subs	r2, #21
 8012d92:	f022 0203 	bic.w	r2, r2, #3
 8012d96:	3204      	adds	r2, #4
 8012d98:	f105 0115 	add.w	r1, r5, #21
 8012d9c:	458c      	cmp	ip, r1
 8012d9e:	bf38      	it	cc
 8012da0:	2204      	movcc	r2, #4
 8012da2:	9201      	str	r2, [sp, #4]
 8012da4:	9a02      	ldr	r2, [sp, #8]
 8012da6:	9303      	str	r3, [sp, #12]
 8012da8:	429a      	cmp	r2, r3
 8012daa:	d808      	bhi.n	8012dbe <__multiply+0x96>
 8012dac:	2f00      	cmp	r7, #0
 8012dae:	dc55      	bgt.n	8012e5c <__multiply+0x134>
 8012db0:	6107      	str	r7, [r0, #16]
 8012db2:	b005      	add	sp, #20
 8012db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012db8:	f843 2b04 	str.w	r2, [r3], #4
 8012dbc:	e7db      	b.n	8012d76 <__multiply+0x4e>
 8012dbe:	f8b3 a000 	ldrh.w	sl, [r3]
 8012dc2:	f1ba 0f00 	cmp.w	sl, #0
 8012dc6:	d020      	beq.n	8012e0a <__multiply+0xe2>
 8012dc8:	46b1      	mov	r9, r6
 8012dca:	2200      	movs	r2, #0
 8012dcc:	f105 0e14 	add.w	lr, r5, #20
 8012dd0:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012dd4:	f8d9 b000 	ldr.w	fp, [r9]
 8012dd8:	b2a1      	uxth	r1, r4
 8012dda:	fa1f fb8b 	uxth.w	fp, fp
 8012dde:	fb0a b101 	mla	r1, sl, r1, fp
 8012de2:	4411      	add	r1, r2
 8012de4:	f8d9 2000 	ldr.w	r2, [r9]
 8012de8:	0c24      	lsrs	r4, r4, #16
 8012dea:	0c12      	lsrs	r2, r2, #16
 8012dec:	fb0a 2404 	mla	r4, sl, r4, r2
 8012df0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012df4:	b289      	uxth	r1, r1
 8012df6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012dfa:	45f4      	cmp	ip, lr
 8012dfc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012e00:	f849 1b04 	str.w	r1, [r9], #4
 8012e04:	d8e4      	bhi.n	8012dd0 <__multiply+0xa8>
 8012e06:	9901      	ldr	r1, [sp, #4]
 8012e08:	5072      	str	r2, [r6, r1]
 8012e0a:	9a03      	ldr	r2, [sp, #12]
 8012e0c:	3304      	adds	r3, #4
 8012e0e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012e12:	f1b9 0f00 	cmp.w	r9, #0
 8012e16:	d01f      	beq.n	8012e58 <__multiply+0x130>
 8012e18:	46b6      	mov	lr, r6
 8012e1a:	f04f 0a00 	mov.w	sl, #0
 8012e1e:	6834      	ldr	r4, [r6, #0]
 8012e20:	f105 0114 	add.w	r1, r5, #20
 8012e24:	880a      	ldrh	r2, [r1, #0]
 8012e26:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012e2a:	b2a4      	uxth	r4, r4
 8012e2c:	fb09 b202 	mla	r2, r9, r2, fp
 8012e30:	4492      	add	sl, r2
 8012e32:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012e36:	f84e 4b04 	str.w	r4, [lr], #4
 8012e3a:	f851 4b04 	ldr.w	r4, [r1], #4
 8012e3e:	f8be 2000 	ldrh.w	r2, [lr]
 8012e42:	0c24      	lsrs	r4, r4, #16
 8012e44:	fb09 2404 	mla	r4, r9, r4, r2
 8012e48:	458c      	cmp	ip, r1
 8012e4a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012e4e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012e52:	d8e7      	bhi.n	8012e24 <__multiply+0xfc>
 8012e54:	9a01      	ldr	r2, [sp, #4]
 8012e56:	50b4      	str	r4, [r6, r2]
 8012e58:	3604      	adds	r6, #4
 8012e5a:	e7a3      	b.n	8012da4 <__multiply+0x7c>
 8012e5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d1a5      	bne.n	8012db0 <__multiply+0x88>
 8012e64:	3f01      	subs	r7, #1
 8012e66:	e7a1      	b.n	8012dac <__multiply+0x84>
 8012e68:	08015033 	.word	0x08015033
 8012e6c:	08015044 	.word	0x08015044

08012e70 <__pow5mult>:
 8012e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e74:	4615      	mov	r5, r2
 8012e76:	f012 0203 	ands.w	r2, r2, #3
 8012e7a:	4606      	mov	r6, r0
 8012e7c:	460f      	mov	r7, r1
 8012e7e:	d007      	beq.n	8012e90 <__pow5mult+0x20>
 8012e80:	4c25      	ldr	r4, [pc, #148]	; (8012f18 <__pow5mult+0xa8>)
 8012e82:	3a01      	subs	r2, #1
 8012e84:	2300      	movs	r3, #0
 8012e86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012e8a:	f7ff fe9f 	bl	8012bcc <__multadd>
 8012e8e:	4607      	mov	r7, r0
 8012e90:	10ad      	asrs	r5, r5, #2
 8012e92:	d03d      	beq.n	8012f10 <__pow5mult+0xa0>
 8012e94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012e96:	b97c      	cbnz	r4, 8012eb8 <__pow5mult+0x48>
 8012e98:	2010      	movs	r0, #16
 8012e9a:	f7fe fa27 	bl	80112ec <malloc>
 8012e9e:	4602      	mov	r2, r0
 8012ea0:	6270      	str	r0, [r6, #36]	; 0x24
 8012ea2:	b928      	cbnz	r0, 8012eb0 <__pow5mult+0x40>
 8012ea4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012ea8:	4b1c      	ldr	r3, [pc, #112]	; (8012f1c <__pow5mult+0xac>)
 8012eaa:	481d      	ldr	r0, [pc, #116]	; (8012f20 <__pow5mult+0xb0>)
 8012eac:	f000 fb3e 	bl	801352c <__assert_func>
 8012eb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012eb4:	6004      	str	r4, [r0, #0]
 8012eb6:	60c4      	str	r4, [r0, #12]
 8012eb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012ebc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012ec0:	b94c      	cbnz	r4, 8012ed6 <__pow5mult+0x66>
 8012ec2:	f240 2171 	movw	r1, #625	; 0x271
 8012ec6:	4630      	mov	r0, r6
 8012ec8:	f7ff ff18 	bl	8012cfc <__i2b>
 8012ecc:	2300      	movs	r3, #0
 8012ece:	4604      	mov	r4, r0
 8012ed0:	f8c8 0008 	str.w	r0, [r8, #8]
 8012ed4:	6003      	str	r3, [r0, #0]
 8012ed6:	f04f 0900 	mov.w	r9, #0
 8012eda:	07eb      	lsls	r3, r5, #31
 8012edc:	d50a      	bpl.n	8012ef4 <__pow5mult+0x84>
 8012ede:	4639      	mov	r1, r7
 8012ee0:	4622      	mov	r2, r4
 8012ee2:	4630      	mov	r0, r6
 8012ee4:	f7ff ff20 	bl	8012d28 <__multiply>
 8012ee8:	4680      	mov	r8, r0
 8012eea:	4639      	mov	r1, r7
 8012eec:	4630      	mov	r0, r6
 8012eee:	f7ff fe4b 	bl	8012b88 <_Bfree>
 8012ef2:	4647      	mov	r7, r8
 8012ef4:	106d      	asrs	r5, r5, #1
 8012ef6:	d00b      	beq.n	8012f10 <__pow5mult+0xa0>
 8012ef8:	6820      	ldr	r0, [r4, #0]
 8012efa:	b938      	cbnz	r0, 8012f0c <__pow5mult+0x9c>
 8012efc:	4622      	mov	r2, r4
 8012efe:	4621      	mov	r1, r4
 8012f00:	4630      	mov	r0, r6
 8012f02:	f7ff ff11 	bl	8012d28 <__multiply>
 8012f06:	6020      	str	r0, [r4, #0]
 8012f08:	f8c0 9000 	str.w	r9, [r0]
 8012f0c:	4604      	mov	r4, r0
 8012f0e:	e7e4      	b.n	8012eda <__pow5mult+0x6a>
 8012f10:	4638      	mov	r0, r7
 8012f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f16:	bf00      	nop
 8012f18:	08015198 	.word	0x08015198
 8012f1c:	08014fbd 	.word	0x08014fbd
 8012f20:	08015044 	.word	0x08015044

08012f24 <__lshift>:
 8012f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f28:	460c      	mov	r4, r1
 8012f2a:	4607      	mov	r7, r0
 8012f2c:	4691      	mov	r9, r2
 8012f2e:	6923      	ldr	r3, [r4, #16]
 8012f30:	6849      	ldr	r1, [r1, #4]
 8012f32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012f36:	68a3      	ldr	r3, [r4, #8]
 8012f38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012f3c:	f108 0601 	add.w	r6, r8, #1
 8012f40:	42b3      	cmp	r3, r6
 8012f42:	db0b      	blt.n	8012f5c <__lshift+0x38>
 8012f44:	4638      	mov	r0, r7
 8012f46:	f7ff fddf 	bl	8012b08 <_Balloc>
 8012f4a:	4605      	mov	r5, r0
 8012f4c:	b948      	cbnz	r0, 8012f62 <__lshift+0x3e>
 8012f4e:	4602      	mov	r2, r0
 8012f50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012f54:	4b27      	ldr	r3, [pc, #156]	; (8012ff4 <__lshift+0xd0>)
 8012f56:	4828      	ldr	r0, [pc, #160]	; (8012ff8 <__lshift+0xd4>)
 8012f58:	f000 fae8 	bl	801352c <__assert_func>
 8012f5c:	3101      	adds	r1, #1
 8012f5e:	005b      	lsls	r3, r3, #1
 8012f60:	e7ee      	b.n	8012f40 <__lshift+0x1c>
 8012f62:	2300      	movs	r3, #0
 8012f64:	f100 0114 	add.w	r1, r0, #20
 8012f68:	f100 0210 	add.w	r2, r0, #16
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	4553      	cmp	r3, sl
 8012f70:	db33      	blt.n	8012fda <__lshift+0xb6>
 8012f72:	6920      	ldr	r0, [r4, #16]
 8012f74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012f78:	f104 0314 	add.w	r3, r4, #20
 8012f7c:	f019 091f 	ands.w	r9, r9, #31
 8012f80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012f84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012f88:	d02b      	beq.n	8012fe2 <__lshift+0xbe>
 8012f8a:	468a      	mov	sl, r1
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	f1c9 0e20 	rsb	lr, r9, #32
 8012f92:	6818      	ldr	r0, [r3, #0]
 8012f94:	fa00 f009 	lsl.w	r0, r0, r9
 8012f98:	4302      	orrs	r2, r0
 8012f9a:	f84a 2b04 	str.w	r2, [sl], #4
 8012f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fa2:	459c      	cmp	ip, r3
 8012fa4:	fa22 f20e 	lsr.w	r2, r2, lr
 8012fa8:	d8f3      	bhi.n	8012f92 <__lshift+0x6e>
 8012faa:	ebac 0304 	sub.w	r3, ip, r4
 8012fae:	3b15      	subs	r3, #21
 8012fb0:	f023 0303 	bic.w	r3, r3, #3
 8012fb4:	3304      	adds	r3, #4
 8012fb6:	f104 0015 	add.w	r0, r4, #21
 8012fba:	4584      	cmp	ip, r0
 8012fbc:	bf38      	it	cc
 8012fbe:	2304      	movcc	r3, #4
 8012fc0:	50ca      	str	r2, [r1, r3]
 8012fc2:	b10a      	cbz	r2, 8012fc8 <__lshift+0xa4>
 8012fc4:	f108 0602 	add.w	r6, r8, #2
 8012fc8:	3e01      	subs	r6, #1
 8012fca:	4638      	mov	r0, r7
 8012fcc:	4621      	mov	r1, r4
 8012fce:	612e      	str	r6, [r5, #16]
 8012fd0:	f7ff fdda 	bl	8012b88 <_Bfree>
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fda:	f842 0f04 	str.w	r0, [r2, #4]!
 8012fde:	3301      	adds	r3, #1
 8012fe0:	e7c5      	b.n	8012f6e <__lshift+0x4a>
 8012fe2:	3904      	subs	r1, #4
 8012fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fe8:	459c      	cmp	ip, r3
 8012fea:	f841 2f04 	str.w	r2, [r1, #4]!
 8012fee:	d8f9      	bhi.n	8012fe4 <__lshift+0xc0>
 8012ff0:	e7ea      	b.n	8012fc8 <__lshift+0xa4>
 8012ff2:	bf00      	nop
 8012ff4:	08015033 	.word	0x08015033
 8012ff8:	08015044 	.word	0x08015044

08012ffc <__mcmp>:
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	690a      	ldr	r2, [r1, #16]
 8013000:	6900      	ldr	r0, [r0, #16]
 8013002:	b530      	push	{r4, r5, lr}
 8013004:	1a80      	subs	r0, r0, r2
 8013006:	d10d      	bne.n	8013024 <__mcmp+0x28>
 8013008:	3314      	adds	r3, #20
 801300a:	3114      	adds	r1, #20
 801300c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013010:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013014:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013018:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801301c:	4295      	cmp	r5, r2
 801301e:	d002      	beq.n	8013026 <__mcmp+0x2a>
 8013020:	d304      	bcc.n	801302c <__mcmp+0x30>
 8013022:	2001      	movs	r0, #1
 8013024:	bd30      	pop	{r4, r5, pc}
 8013026:	42a3      	cmp	r3, r4
 8013028:	d3f4      	bcc.n	8013014 <__mcmp+0x18>
 801302a:	e7fb      	b.n	8013024 <__mcmp+0x28>
 801302c:	f04f 30ff 	mov.w	r0, #4294967295
 8013030:	e7f8      	b.n	8013024 <__mcmp+0x28>
	...

08013034 <__mdiff>:
 8013034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013038:	460c      	mov	r4, r1
 801303a:	4606      	mov	r6, r0
 801303c:	4611      	mov	r1, r2
 801303e:	4620      	mov	r0, r4
 8013040:	4692      	mov	sl, r2
 8013042:	f7ff ffdb 	bl	8012ffc <__mcmp>
 8013046:	1e05      	subs	r5, r0, #0
 8013048:	d111      	bne.n	801306e <__mdiff+0x3a>
 801304a:	4629      	mov	r1, r5
 801304c:	4630      	mov	r0, r6
 801304e:	f7ff fd5b 	bl	8012b08 <_Balloc>
 8013052:	4602      	mov	r2, r0
 8013054:	b928      	cbnz	r0, 8013062 <__mdiff+0x2e>
 8013056:	f240 2132 	movw	r1, #562	; 0x232
 801305a:	4b3c      	ldr	r3, [pc, #240]	; (801314c <__mdiff+0x118>)
 801305c:	483c      	ldr	r0, [pc, #240]	; (8013150 <__mdiff+0x11c>)
 801305e:	f000 fa65 	bl	801352c <__assert_func>
 8013062:	2301      	movs	r3, #1
 8013064:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013068:	4610      	mov	r0, r2
 801306a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801306e:	bfa4      	itt	ge
 8013070:	4653      	movge	r3, sl
 8013072:	46a2      	movge	sl, r4
 8013074:	4630      	mov	r0, r6
 8013076:	f8da 1004 	ldr.w	r1, [sl, #4]
 801307a:	bfa6      	itte	ge
 801307c:	461c      	movge	r4, r3
 801307e:	2500      	movge	r5, #0
 8013080:	2501      	movlt	r5, #1
 8013082:	f7ff fd41 	bl	8012b08 <_Balloc>
 8013086:	4602      	mov	r2, r0
 8013088:	b918      	cbnz	r0, 8013092 <__mdiff+0x5e>
 801308a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801308e:	4b2f      	ldr	r3, [pc, #188]	; (801314c <__mdiff+0x118>)
 8013090:	e7e4      	b.n	801305c <__mdiff+0x28>
 8013092:	f100 0814 	add.w	r8, r0, #20
 8013096:	f8da 7010 	ldr.w	r7, [sl, #16]
 801309a:	60c5      	str	r5, [r0, #12]
 801309c:	f04f 0c00 	mov.w	ip, #0
 80130a0:	f10a 0514 	add.w	r5, sl, #20
 80130a4:	f10a 0010 	add.w	r0, sl, #16
 80130a8:	46c2      	mov	sl, r8
 80130aa:	6926      	ldr	r6, [r4, #16]
 80130ac:	f104 0914 	add.w	r9, r4, #20
 80130b0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80130b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80130b8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80130bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80130c0:	fa1f f18b 	uxth.w	r1, fp
 80130c4:	4461      	add	r1, ip
 80130c6:	fa1f fc83 	uxth.w	ip, r3
 80130ca:	0c1b      	lsrs	r3, r3, #16
 80130cc:	eba1 010c 	sub.w	r1, r1, ip
 80130d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80130d4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80130d8:	b289      	uxth	r1, r1
 80130da:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80130de:	454e      	cmp	r6, r9
 80130e0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80130e4:	f84a 3b04 	str.w	r3, [sl], #4
 80130e8:	d8e6      	bhi.n	80130b8 <__mdiff+0x84>
 80130ea:	1b33      	subs	r3, r6, r4
 80130ec:	3b15      	subs	r3, #21
 80130ee:	f023 0303 	bic.w	r3, r3, #3
 80130f2:	3415      	adds	r4, #21
 80130f4:	3304      	adds	r3, #4
 80130f6:	42a6      	cmp	r6, r4
 80130f8:	bf38      	it	cc
 80130fa:	2304      	movcc	r3, #4
 80130fc:	441d      	add	r5, r3
 80130fe:	4443      	add	r3, r8
 8013100:	461e      	mov	r6, r3
 8013102:	462c      	mov	r4, r5
 8013104:	4574      	cmp	r4, lr
 8013106:	d30e      	bcc.n	8013126 <__mdiff+0xf2>
 8013108:	f10e 0103 	add.w	r1, lr, #3
 801310c:	1b49      	subs	r1, r1, r5
 801310e:	f021 0103 	bic.w	r1, r1, #3
 8013112:	3d03      	subs	r5, #3
 8013114:	45ae      	cmp	lr, r5
 8013116:	bf38      	it	cc
 8013118:	2100      	movcc	r1, #0
 801311a:	4419      	add	r1, r3
 801311c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8013120:	b18b      	cbz	r3, 8013146 <__mdiff+0x112>
 8013122:	6117      	str	r7, [r2, #16]
 8013124:	e7a0      	b.n	8013068 <__mdiff+0x34>
 8013126:	f854 8b04 	ldr.w	r8, [r4], #4
 801312a:	fa1f f188 	uxth.w	r1, r8
 801312e:	4461      	add	r1, ip
 8013130:	1408      	asrs	r0, r1, #16
 8013132:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8013136:	b289      	uxth	r1, r1
 8013138:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801313c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013140:	f846 1b04 	str.w	r1, [r6], #4
 8013144:	e7de      	b.n	8013104 <__mdiff+0xd0>
 8013146:	3f01      	subs	r7, #1
 8013148:	e7e8      	b.n	801311c <__mdiff+0xe8>
 801314a:	bf00      	nop
 801314c:	08015033 	.word	0x08015033
 8013150:	08015044 	.word	0x08015044

08013154 <__d2b>:
 8013154:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013158:	2101      	movs	r1, #1
 801315a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801315e:	4690      	mov	r8, r2
 8013160:	461d      	mov	r5, r3
 8013162:	f7ff fcd1 	bl	8012b08 <_Balloc>
 8013166:	4604      	mov	r4, r0
 8013168:	b930      	cbnz	r0, 8013178 <__d2b+0x24>
 801316a:	4602      	mov	r2, r0
 801316c:	f240 310a 	movw	r1, #778	; 0x30a
 8013170:	4b24      	ldr	r3, [pc, #144]	; (8013204 <__d2b+0xb0>)
 8013172:	4825      	ldr	r0, [pc, #148]	; (8013208 <__d2b+0xb4>)
 8013174:	f000 f9da 	bl	801352c <__assert_func>
 8013178:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801317c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8013180:	bb2d      	cbnz	r5, 80131ce <__d2b+0x7a>
 8013182:	9301      	str	r3, [sp, #4]
 8013184:	f1b8 0300 	subs.w	r3, r8, #0
 8013188:	d026      	beq.n	80131d8 <__d2b+0x84>
 801318a:	4668      	mov	r0, sp
 801318c:	9300      	str	r3, [sp, #0]
 801318e:	f7ff fd87 	bl	8012ca0 <__lo0bits>
 8013192:	9900      	ldr	r1, [sp, #0]
 8013194:	b1f0      	cbz	r0, 80131d4 <__d2b+0x80>
 8013196:	9a01      	ldr	r2, [sp, #4]
 8013198:	f1c0 0320 	rsb	r3, r0, #32
 801319c:	fa02 f303 	lsl.w	r3, r2, r3
 80131a0:	430b      	orrs	r3, r1
 80131a2:	40c2      	lsrs	r2, r0
 80131a4:	6163      	str	r3, [r4, #20]
 80131a6:	9201      	str	r2, [sp, #4]
 80131a8:	9b01      	ldr	r3, [sp, #4]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	bf14      	ite	ne
 80131ae:	2102      	movne	r1, #2
 80131b0:	2101      	moveq	r1, #1
 80131b2:	61a3      	str	r3, [r4, #24]
 80131b4:	6121      	str	r1, [r4, #16]
 80131b6:	b1c5      	cbz	r5, 80131ea <__d2b+0x96>
 80131b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80131bc:	4405      	add	r5, r0
 80131be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80131c2:	603d      	str	r5, [r7, #0]
 80131c4:	6030      	str	r0, [r6, #0]
 80131c6:	4620      	mov	r0, r4
 80131c8:	b002      	add	sp, #8
 80131ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80131d2:	e7d6      	b.n	8013182 <__d2b+0x2e>
 80131d4:	6161      	str	r1, [r4, #20]
 80131d6:	e7e7      	b.n	80131a8 <__d2b+0x54>
 80131d8:	a801      	add	r0, sp, #4
 80131da:	f7ff fd61 	bl	8012ca0 <__lo0bits>
 80131de:	2101      	movs	r1, #1
 80131e0:	9b01      	ldr	r3, [sp, #4]
 80131e2:	6121      	str	r1, [r4, #16]
 80131e4:	6163      	str	r3, [r4, #20]
 80131e6:	3020      	adds	r0, #32
 80131e8:	e7e5      	b.n	80131b6 <__d2b+0x62>
 80131ea:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80131ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80131f2:	6038      	str	r0, [r7, #0]
 80131f4:	6918      	ldr	r0, [r3, #16]
 80131f6:	f7ff fd33 	bl	8012c60 <__hi0bits>
 80131fa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80131fe:	6031      	str	r1, [r6, #0]
 8013200:	e7e1      	b.n	80131c6 <__d2b+0x72>
 8013202:	bf00      	nop
 8013204:	08015033 	.word	0x08015033
 8013208:	08015044 	.word	0x08015044

0801320c <_calloc_r>:
 801320c:	b538      	push	{r3, r4, r5, lr}
 801320e:	fb02 f501 	mul.w	r5, r2, r1
 8013212:	4629      	mov	r1, r5
 8013214:	f7fe f8ea 	bl	80113ec <_malloc_r>
 8013218:	4604      	mov	r4, r0
 801321a:	b118      	cbz	r0, 8013224 <_calloc_r+0x18>
 801321c:	462a      	mov	r2, r5
 801321e:	2100      	movs	r1, #0
 8013220:	f7fe f890 	bl	8011344 <memset>
 8013224:	4620      	mov	r0, r4
 8013226:	bd38      	pop	{r3, r4, r5, pc}

08013228 <_realloc_r>:
 8013228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801322a:	4607      	mov	r7, r0
 801322c:	4614      	mov	r4, r2
 801322e:	460e      	mov	r6, r1
 8013230:	b921      	cbnz	r1, 801323c <_realloc_r+0x14>
 8013232:	4611      	mov	r1, r2
 8013234:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013238:	f7fe b8d8 	b.w	80113ec <_malloc_r>
 801323c:	b922      	cbnz	r2, 8013248 <_realloc_r+0x20>
 801323e:	f7fe f889 	bl	8011354 <_free_r>
 8013242:	4625      	mov	r5, r4
 8013244:	4628      	mov	r0, r5
 8013246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013248:	f000 f9cf 	bl	80135ea <_malloc_usable_size_r>
 801324c:	42a0      	cmp	r0, r4
 801324e:	d20f      	bcs.n	8013270 <_realloc_r+0x48>
 8013250:	4621      	mov	r1, r4
 8013252:	4638      	mov	r0, r7
 8013254:	f7fe f8ca 	bl	80113ec <_malloc_r>
 8013258:	4605      	mov	r5, r0
 801325a:	2800      	cmp	r0, #0
 801325c:	d0f2      	beq.n	8013244 <_realloc_r+0x1c>
 801325e:	4631      	mov	r1, r6
 8013260:	4622      	mov	r2, r4
 8013262:	f7fe f861 	bl	8011328 <memcpy>
 8013266:	4631      	mov	r1, r6
 8013268:	4638      	mov	r0, r7
 801326a:	f7fe f873 	bl	8011354 <_free_r>
 801326e:	e7e9      	b.n	8013244 <_realloc_r+0x1c>
 8013270:	4635      	mov	r5, r6
 8013272:	e7e7      	b.n	8013244 <_realloc_r+0x1c>

08013274 <__ssputs_r>:
 8013274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013278:	688e      	ldr	r6, [r1, #8]
 801327a:	4682      	mov	sl, r0
 801327c:	429e      	cmp	r6, r3
 801327e:	460c      	mov	r4, r1
 8013280:	4690      	mov	r8, r2
 8013282:	461f      	mov	r7, r3
 8013284:	d838      	bhi.n	80132f8 <__ssputs_r+0x84>
 8013286:	898a      	ldrh	r2, [r1, #12]
 8013288:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801328c:	d032      	beq.n	80132f4 <__ssputs_r+0x80>
 801328e:	6825      	ldr	r5, [r4, #0]
 8013290:	6909      	ldr	r1, [r1, #16]
 8013292:	3301      	adds	r3, #1
 8013294:	eba5 0901 	sub.w	r9, r5, r1
 8013298:	6965      	ldr	r5, [r4, #20]
 801329a:	444b      	add	r3, r9
 801329c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80132a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80132a4:	106d      	asrs	r5, r5, #1
 80132a6:	429d      	cmp	r5, r3
 80132a8:	bf38      	it	cc
 80132aa:	461d      	movcc	r5, r3
 80132ac:	0553      	lsls	r3, r2, #21
 80132ae:	d531      	bpl.n	8013314 <__ssputs_r+0xa0>
 80132b0:	4629      	mov	r1, r5
 80132b2:	f7fe f89b 	bl	80113ec <_malloc_r>
 80132b6:	4606      	mov	r6, r0
 80132b8:	b950      	cbnz	r0, 80132d0 <__ssputs_r+0x5c>
 80132ba:	230c      	movs	r3, #12
 80132bc:	f04f 30ff 	mov.w	r0, #4294967295
 80132c0:	f8ca 3000 	str.w	r3, [sl]
 80132c4:	89a3      	ldrh	r3, [r4, #12]
 80132c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132ca:	81a3      	strh	r3, [r4, #12]
 80132cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132d0:	464a      	mov	r2, r9
 80132d2:	6921      	ldr	r1, [r4, #16]
 80132d4:	f7fe f828 	bl	8011328 <memcpy>
 80132d8:	89a3      	ldrh	r3, [r4, #12]
 80132da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80132de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132e2:	81a3      	strh	r3, [r4, #12]
 80132e4:	6126      	str	r6, [r4, #16]
 80132e6:	444e      	add	r6, r9
 80132e8:	6026      	str	r6, [r4, #0]
 80132ea:	463e      	mov	r6, r7
 80132ec:	6165      	str	r5, [r4, #20]
 80132ee:	eba5 0509 	sub.w	r5, r5, r9
 80132f2:	60a5      	str	r5, [r4, #8]
 80132f4:	42be      	cmp	r6, r7
 80132f6:	d900      	bls.n	80132fa <__ssputs_r+0x86>
 80132f8:	463e      	mov	r6, r7
 80132fa:	4632      	mov	r2, r6
 80132fc:	4641      	mov	r1, r8
 80132fe:	6820      	ldr	r0, [r4, #0]
 8013300:	f000 f959 	bl	80135b6 <memmove>
 8013304:	68a3      	ldr	r3, [r4, #8]
 8013306:	6822      	ldr	r2, [r4, #0]
 8013308:	1b9b      	subs	r3, r3, r6
 801330a:	4432      	add	r2, r6
 801330c:	2000      	movs	r0, #0
 801330e:	60a3      	str	r3, [r4, #8]
 8013310:	6022      	str	r2, [r4, #0]
 8013312:	e7db      	b.n	80132cc <__ssputs_r+0x58>
 8013314:	462a      	mov	r2, r5
 8013316:	f7ff ff87 	bl	8013228 <_realloc_r>
 801331a:	4606      	mov	r6, r0
 801331c:	2800      	cmp	r0, #0
 801331e:	d1e1      	bne.n	80132e4 <__ssputs_r+0x70>
 8013320:	4650      	mov	r0, sl
 8013322:	6921      	ldr	r1, [r4, #16]
 8013324:	f7fe f816 	bl	8011354 <_free_r>
 8013328:	e7c7      	b.n	80132ba <__ssputs_r+0x46>
	...

0801332c <_svfiprintf_r>:
 801332c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013330:	4698      	mov	r8, r3
 8013332:	898b      	ldrh	r3, [r1, #12]
 8013334:	4607      	mov	r7, r0
 8013336:	061b      	lsls	r3, r3, #24
 8013338:	460d      	mov	r5, r1
 801333a:	4614      	mov	r4, r2
 801333c:	b09d      	sub	sp, #116	; 0x74
 801333e:	d50e      	bpl.n	801335e <_svfiprintf_r+0x32>
 8013340:	690b      	ldr	r3, [r1, #16]
 8013342:	b963      	cbnz	r3, 801335e <_svfiprintf_r+0x32>
 8013344:	2140      	movs	r1, #64	; 0x40
 8013346:	f7fe f851 	bl	80113ec <_malloc_r>
 801334a:	6028      	str	r0, [r5, #0]
 801334c:	6128      	str	r0, [r5, #16]
 801334e:	b920      	cbnz	r0, 801335a <_svfiprintf_r+0x2e>
 8013350:	230c      	movs	r3, #12
 8013352:	603b      	str	r3, [r7, #0]
 8013354:	f04f 30ff 	mov.w	r0, #4294967295
 8013358:	e0d1      	b.n	80134fe <_svfiprintf_r+0x1d2>
 801335a:	2340      	movs	r3, #64	; 0x40
 801335c:	616b      	str	r3, [r5, #20]
 801335e:	2300      	movs	r3, #0
 8013360:	9309      	str	r3, [sp, #36]	; 0x24
 8013362:	2320      	movs	r3, #32
 8013364:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013368:	2330      	movs	r3, #48	; 0x30
 801336a:	f04f 0901 	mov.w	r9, #1
 801336e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013372:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013518 <_svfiprintf_r+0x1ec>
 8013376:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801337a:	4623      	mov	r3, r4
 801337c:	469a      	mov	sl, r3
 801337e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013382:	b10a      	cbz	r2, 8013388 <_svfiprintf_r+0x5c>
 8013384:	2a25      	cmp	r2, #37	; 0x25
 8013386:	d1f9      	bne.n	801337c <_svfiprintf_r+0x50>
 8013388:	ebba 0b04 	subs.w	fp, sl, r4
 801338c:	d00b      	beq.n	80133a6 <_svfiprintf_r+0x7a>
 801338e:	465b      	mov	r3, fp
 8013390:	4622      	mov	r2, r4
 8013392:	4629      	mov	r1, r5
 8013394:	4638      	mov	r0, r7
 8013396:	f7ff ff6d 	bl	8013274 <__ssputs_r>
 801339a:	3001      	adds	r0, #1
 801339c:	f000 80aa 	beq.w	80134f4 <_svfiprintf_r+0x1c8>
 80133a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133a2:	445a      	add	r2, fp
 80133a4:	9209      	str	r2, [sp, #36]	; 0x24
 80133a6:	f89a 3000 	ldrb.w	r3, [sl]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	f000 80a2 	beq.w	80134f4 <_svfiprintf_r+0x1c8>
 80133b0:	2300      	movs	r3, #0
 80133b2:	f04f 32ff 	mov.w	r2, #4294967295
 80133b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80133ba:	f10a 0a01 	add.w	sl, sl, #1
 80133be:	9304      	str	r3, [sp, #16]
 80133c0:	9307      	str	r3, [sp, #28]
 80133c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80133c6:	931a      	str	r3, [sp, #104]	; 0x68
 80133c8:	4654      	mov	r4, sl
 80133ca:	2205      	movs	r2, #5
 80133cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133d0:	4851      	ldr	r0, [pc, #324]	; (8013518 <_svfiprintf_r+0x1ec>)
 80133d2:	f7ff fb7f 	bl	8012ad4 <memchr>
 80133d6:	9a04      	ldr	r2, [sp, #16]
 80133d8:	b9d8      	cbnz	r0, 8013412 <_svfiprintf_r+0xe6>
 80133da:	06d0      	lsls	r0, r2, #27
 80133dc:	bf44      	itt	mi
 80133de:	2320      	movmi	r3, #32
 80133e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133e4:	0711      	lsls	r1, r2, #28
 80133e6:	bf44      	itt	mi
 80133e8:	232b      	movmi	r3, #43	; 0x2b
 80133ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133ee:	f89a 3000 	ldrb.w	r3, [sl]
 80133f2:	2b2a      	cmp	r3, #42	; 0x2a
 80133f4:	d015      	beq.n	8013422 <_svfiprintf_r+0xf6>
 80133f6:	4654      	mov	r4, sl
 80133f8:	2000      	movs	r0, #0
 80133fa:	f04f 0c0a 	mov.w	ip, #10
 80133fe:	9a07      	ldr	r2, [sp, #28]
 8013400:	4621      	mov	r1, r4
 8013402:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013406:	3b30      	subs	r3, #48	; 0x30
 8013408:	2b09      	cmp	r3, #9
 801340a:	d94e      	bls.n	80134aa <_svfiprintf_r+0x17e>
 801340c:	b1b0      	cbz	r0, 801343c <_svfiprintf_r+0x110>
 801340e:	9207      	str	r2, [sp, #28]
 8013410:	e014      	b.n	801343c <_svfiprintf_r+0x110>
 8013412:	eba0 0308 	sub.w	r3, r0, r8
 8013416:	fa09 f303 	lsl.w	r3, r9, r3
 801341a:	4313      	orrs	r3, r2
 801341c:	46a2      	mov	sl, r4
 801341e:	9304      	str	r3, [sp, #16]
 8013420:	e7d2      	b.n	80133c8 <_svfiprintf_r+0x9c>
 8013422:	9b03      	ldr	r3, [sp, #12]
 8013424:	1d19      	adds	r1, r3, #4
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	9103      	str	r1, [sp, #12]
 801342a:	2b00      	cmp	r3, #0
 801342c:	bfbb      	ittet	lt
 801342e:	425b      	neglt	r3, r3
 8013430:	f042 0202 	orrlt.w	r2, r2, #2
 8013434:	9307      	strge	r3, [sp, #28]
 8013436:	9307      	strlt	r3, [sp, #28]
 8013438:	bfb8      	it	lt
 801343a:	9204      	strlt	r2, [sp, #16]
 801343c:	7823      	ldrb	r3, [r4, #0]
 801343e:	2b2e      	cmp	r3, #46	; 0x2e
 8013440:	d10c      	bne.n	801345c <_svfiprintf_r+0x130>
 8013442:	7863      	ldrb	r3, [r4, #1]
 8013444:	2b2a      	cmp	r3, #42	; 0x2a
 8013446:	d135      	bne.n	80134b4 <_svfiprintf_r+0x188>
 8013448:	9b03      	ldr	r3, [sp, #12]
 801344a:	3402      	adds	r4, #2
 801344c:	1d1a      	adds	r2, r3, #4
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	9203      	str	r2, [sp, #12]
 8013452:	2b00      	cmp	r3, #0
 8013454:	bfb8      	it	lt
 8013456:	f04f 33ff 	movlt.w	r3, #4294967295
 801345a:	9305      	str	r3, [sp, #20]
 801345c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013528 <_svfiprintf_r+0x1fc>
 8013460:	2203      	movs	r2, #3
 8013462:	4650      	mov	r0, sl
 8013464:	7821      	ldrb	r1, [r4, #0]
 8013466:	f7ff fb35 	bl	8012ad4 <memchr>
 801346a:	b140      	cbz	r0, 801347e <_svfiprintf_r+0x152>
 801346c:	2340      	movs	r3, #64	; 0x40
 801346e:	eba0 000a 	sub.w	r0, r0, sl
 8013472:	fa03 f000 	lsl.w	r0, r3, r0
 8013476:	9b04      	ldr	r3, [sp, #16]
 8013478:	3401      	adds	r4, #1
 801347a:	4303      	orrs	r3, r0
 801347c:	9304      	str	r3, [sp, #16]
 801347e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013482:	2206      	movs	r2, #6
 8013484:	4825      	ldr	r0, [pc, #148]	; (801351c <_svfiprintf_r+0x1f0>)
 8013486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801348a:	f7ff fb23 	bl	8012ad4 <memchr>
 801348e:	2800      	cmp	r0, #0
 8013490:	d038      	beq.n	8013504 <_svfiprintf_r+0x1d8>
 8013492:	4b23      	ldr	r3, [pc, #140]	; (8013520 <_svfiprintf_r+0x1f4>)
 8013494:	bb1b      	cbnz	r3, 80134de <_svfiprintf_r+0x1b2>
 8013496:	9b03      	ldr	r3, [sp, #12]
 8013498:	3307      	adds	r3, #7
 801349a:	f023 0307 	bic.w	r3, r3, #7
 801349e:	3308      	adds	r3, #8
 80134a0:	9303      	str	r3, [sp, #12]
 80134a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134a4:	4433      	add	r3, r6
 80134a6:	9309      	str	r3, [sp, #36]	; 0x24
 80134a8:	e767      	b.n	801337a <_svfiprintf_r+0x4e>
 80134aa:	460c      	mov	r4, r1
 80134ac:	2001      	movs	r0, #1
 80134ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80134b2:	e7a5      	b.n	8013400 <_svfiprintf_r+0xd4>
 80134b4:	2300      	movs	r3, #0
 80134b6:	f04f 0c0a 	mov.w	ip, #10
 80134ba:	4619      	mov	r1, r3
 80134bc:	3401      	adds	r4, #1
 80134be:	9305      	str	r3, [sp, #20]
 80134c0:	4620      	mov	r0, r4
 80134c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134c6:	3a30      	subs	r2, #48	; 0x30
 80134c8:	2a09      	cmp	r2, #9
 80134ca:	d903      	bls.n	80134d4 <_svfiprintf_r+0x1a8>
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d0c5      	beq.n	801345c <_svfiprintf_r+0x130>
 80134d0:	9105      	str	r1, [sp, #20]
 80134d2:	e7c3      	b.n	801345c <_svfiprintf_r+0x130>
 80134d4:	4604      	mov	r4, r0
 80134d6:	2301      	movs	r3, #1
 80134d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80134dc:	e7f0      	b.n	80134c0 <_svfiprintf_r+0x194>
 80134de:	ab03      	add	r3, sp, #12
 80134e0:	9300      	str	r3, [sp, #0]
 80134e2:	462a      	mov	r2, r5
 80134e4:	4638      	mov	r0, r7
 80134e6:	4b0f      	ldr	r3, [pc, #60]	; (8013524 <_svfiprintf_r+0x1f8>)
 80134e8:	a904      	add	r1, sp, #16
 80134ea:	f7fe f877 	bl	80115dc <_printf_float>
 80134ee:	1c42      	adds	r2, r0, #1
 80134f0:	4606      	mov	r6, r0
 80134f2:	d1d6      	bne.n	80134a2 <_svfiprintf_r+0x176>
 80134f4:	89ab      	ldrh	r3, [r5, #12]
 80134f6:	065b      	lsls	r3, r3, #25
 80134f8:	f53f af2c 	bmi.w	8013354 <_svfiprintf_r+0x28>
 80134fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80134fe:	b01d      	add	sp, #116	; 0x74
 8013500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013504:	ab03      	add	r3, sp, #12
 8013506:	9300      	str	r3, [sp, #0]
 8013508:	462a      	mov	r2, r5
 801350a:	4638      	mov	r0, r7
 801350c:	4b05      	ldr	r3, [pc, #20]	; (8013524 <_svfiprintf_r+0x1f8>)
 801350e:	a904      	add	r1, sp, #16
 8013510:	f7fe fb00 	bl	8011b14 <_printf_i>
 8013514:	e7eb      	b.n	80134ee <_svfiprintf_r+0x1c2>
 8013516:	bf00      	nop
 8013518:	080151a4 	.word	0x080151a4
 801351c:	080151ae 	.word	0x080151ae
 8013520:	080115dd 	.word	0x080115dd
 8013524:	08013275 	.word	0x08013275
 8013528:	080151aa 	.word	0x080151aa

0801352c <__assert_func>:
 801352c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801352e:	4614      	mov	r4, r2
 8013530:	461a      	mov	r2, r3
 8013532:	4b09      	ldr	r3, [pc, #36]	; (8013558 <__assert_func+0x2c>)
 8013534:	4605      	mov	r5, r0
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	68d8      	ldr	r0, [r3, #12]
 801353a:	b14c      	cbz	r4, 8013550 <__assert_func+0x24>
 801353c:	4b07      	ldr	r3, [pc, #28]	; (801355c <__assert_func+0x30>)
 801353e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013542:	9100      	str	r1, [sp, #0]
 8013544:	462b      	mov	r3, r5
 8013546:	4906      	ldr	r1, [pc, #24]	; (8013560 <__assert_func+0x34>)
 8013548:	f000 f80e 	bl	8013568 <fiprintf>
 801354c:	f000 fa7a 	bl	8013a44 <abort>
 8013550:	4b04      	ldr	r3, [pc, #16]	; (8013564 <__assert_func+0x38>)
 8013552:	461c      	mov	r4, r3
 8013554:	e7f3      	b.n	801353e <__assert_func+0x12>
 8013556:	bf00      	nop
 8013558:	200001e8 	.word	0x200001e8
 801355c:	080151b5 	.word	0x080151b5
 8013560:	080151c2 	.word	0x080151c2
 8013564:	080151f0 	.word	0x080151f0

08013568 <fiprintf>:
 8013568:	b40e      	push	{r1, r2, r3}
 801356a:	b503      	push	{r0, r1, lr}
 801356c:	4601      	mov	r1, r0
 801356e:	ab03      	add	r3, sp, #12
 8013570:	4805      	ldr	r0, [pc, #20]	; (8013588 <fiprintf+0x20>)
 8013572:	f853 2b04 	ldr.w	r2, [r3], #4
 8013576:	6800      	ldr	r0, [r0, #0]
 8013578:	9301      	str	r3, [sp, #4]
 801357a:	f000 f865 	bl	8013648 <_vfiprintf_r>
 801357e:	b002      	add	sp, #8
 8013580:	f85d eb04 	ldr.w	lr, [sp], #4
 8013584:	b003      	add	sp, #12
 8013586:	4770      	bx	lr
 8013588:	200001e8 	.word	0x200001e8

0801358c <__retarget_lock_init_recursive>:
 801358c:	4770      	bx	lr

0801358e <__retarget_lock_acquire_recursive>:
 801358e:	4770      	bx	lr

08013590 <__retarget_lock_release_recursive>:
 8013590:	4770      	bx	lr

08013592 <__ascii_mbtowc>:
 8013592:	b082      	sub	sp, #8
 8013594:	b901      	cbnz	r1, 8013598 <__ascii_mbtowc+0x6>
 8013596:	a901      	add	r1, sp, #4
 8013598:	b142      	cbz	r2, 80135ac <__ascii_mbtowc+0x1a>
 801359a:	b14b      	cbz	r3, 80135b0 <__ascii_mbtowc+0x1e>
 801359c:	7813      	ldrb	r3, [r2, #0]
 801359e:	600b      	str	r3, [r1, #0]
 80135a0:	7812      	ldrb	r2, [r2, #0]
 80135a2:	1e10      	subs	r0, r2, #0
 80135a4:	bf18      	it	ne
 80135a6:	2001      	movne	r0, #1
 80135a8:	b002      	add	sp, #8
 80135aa:	4770      	bx	lr
 80135ac:	4610      	mov	r0, r2
 80135ae:	e7fb      	b.n	80135a8 <__ascii_mbtowc+0x16>
 80135b0:	f06f 0001 	mvn.w	r0, #1
 80135b4:	e7f8      	b.n	80135a8 <__ascii_mbtowc+0x16>

080135b6 <memmove>:
 80135b6:	4288      	cmp	r0, r1
 80135b8:	b510      	push	{r4, lr}
 80135ba:	eb01 0402 	add.w	r4, r1, r2
 80135be:	d902      	bls.n	80135c6 <memmove+0x10>
 80135c0:	4284      	cmp	r4, r0
 80135c2:	4623      	mov	r3, r4
 80135c4:	d807      	bhi.n	80135d6 <memmove+0x20>
 80135c6:	1e43      	subs	r3, r0, #1
 80135c8:	42a1      	cmp	r1, r4
 80135ca:	d008      	beq.n	80135de <memmove+0x28>
 80135cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80135d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80135d4:	e7f8      	b.n	80135c8 <memmove+0x12>
 80135d6:	4601      	mov	r1, r0
 80135d8:	4402      	add	r2, r0
 80135da:	428a      	cmp	r2, r1
 80135dc:	d100      	bne.n	80135e0 <memmove+0x2a>
 80135de:	bd10      	pop	{r4, pc}
 80135e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80135e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80135e8:	e7f7      	b.n	80135da <memmove+0x24>

080135ea <_malloc_usable_size_r>:
 80135ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135ee:	1f18      	subs	r0, r3, #4
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	bfbc      	itt	lt
 80135f4:	580b      	ldrlt	r3, [r1, r0]
 80135f6:	18c0      	addlt	r0, r0, r3
 80135f8:	4770      	bx	lr

080135fa <__sfputc_r>:
 80135fa:	6893      	ldr	r3, [r2, #8]
 80135fc:	b410      	push	{r4}
 80135fe:	3b01      	subs	r3, #1
 8013600:	2b00      	cmp	r3, #0
 8013602:	6093      	str	r3, [r2, #8]
 8013604:	da07      	bge.n	8013616 <__sfputc_r+0x1c>
 8013606:	6994      	ldr	r4, [r2, #24]
 8013608:	42a3      	cmp	r3, r4
 801360a:	db01      	blt.n	8013610 <__sfputc_r+0x16>
 801360c:	290a      	cmp	r1, #10
 801360e:	d102      	bne.n	8013616 <__sfputc_r+0x1c>
 8013610:	bc10      	pop	{r4}
 8013612:	f000 b949 	b.w	80138a8 <__swbuf_r>
 8013616:	6813      	ldr	r3, [r2, #0]
 8013618:	1c58      	adds	r0, r3, #1
 801361a:	6010      	str	r0, [r2, #0]
 801361c:	7019      	strb	r1, [r3, #0]
 801361e:	4608      	mov	r0, r1
 8013620:	bc10      	pop	{r4}
 8013622:	4770      	bx	lr

08013624 <__sfputs_r>:
 8013624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013626:	4606      	mov	r6, r0
 8013628:	460f      	mov	r7, r1
 801362a:	4614      	mov	r4, r2
 801362c:	18d5      	adds	r5, r2, r3
 801362e:	42ac      	cmp	r4, r5
 8013630:	d101      	bne.n	8013636 <__sfputs_r+0x12>
 8013632:	2000      	movs	r0, #0
 8013634:	e007      	b.n	8013646 <__sfputs_r+0x22>
 8013636:	463a      	mov	r2, r7
 8013638:	4630      	mov	r0, r6
 801363a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801363e:	f7ff ffdc 	bl	80135fa <__sfputc_r>
 8013642:	1c43      	adds	r3, r0, #1
 8013644:	d1f3      	bne.n	801362e <__sfputs_r+0xa>
 8013646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013648 <_vfiprintf_r>:
 8013648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801364c:	460d      	mov	r5, r1
 801364e:	4614      	mov	r4, r2
 8013650:	4698      	mov	r8, r3
 8013652:	4606      	mov	r6, r0
 8013654:	b09d      	sub	sp, #116	; 0x74
 8013656:	b118      	cbz	r0, 8013660 <_vfiprintf_r+0x18>
 8013658:	6983      	ldr	r3, [r0, #24]
 801365a:	b90b      	cbnz	r3, 8013660 <_vfiprintf_r+0x18>
 801365c:	f000 fb14 	bl	8013c88 <__sinit>
 8013660:	4b89      	ldr	r3, [pc, #548]	; (8013888 <_vfiprintf_r+0x240>)
 8013662:	429d      	cmp	r5, r3
 8013664:	d11b      	bne.n	801369e <_vfiprintf_r+0x56>
 8013666:	6875      	ldr	r5, [r6, #4]
 8013668:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801366a:	07d9      	lsls	r1, r3, #31
 801366c:	d405      	bmi.n	801367a <_vfiprintf_r+0x32>
 801366e:	89ab      	ldrh	r3, [r5, #12]
 8013670:	059a      	lsls	r2, r3, #22
 8013672:	d402      	bmi.n	801367a <_vfiprintf_r+0x32>
 8013674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013676:	f7ff ff8a 	bl	801358e <__retarget_lock_acquire_recursive>
 801367a:	89ab      	ldrh	r3, [r5, #12]
 801367c:	071b      	lsls	r3, r3, #28
 801367e:	d501      	bpl.n	8013684 <_vfiprintf_r+0x3c>
 8013680:	692b      	ldr	r3, [r5, #16]
 8013682:	b9eb      	cbnz	r3, 80136c0 <_vfiprintf_r+0x78>
 8013684:	4629      	mov	r1, r5
 8013686:	4630      	mov	r0, r6
 8013688:	f000 f96e 	bl	8013968 <__swsetup_r>
 801368c:	b1c0      	cbz	r0, 80136c0 <_vfiprintf_r+0x78>
 801368e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013690:	07dc      	lsls	r4, r3, #31
 8013692:	d50e      	bpl.n	80136b2 <_vfiprintf_r+0x6a>
 8013694:	f04f 30ff 	mov.w	r0, #4294967295
 8013698:	b01d      	add	sp, #116	; 0x74
 801369a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801369e:	4b7b      	ldr	r3, [pc, #492]	; (801388c <_vfiprintf_r+0x244>)
 80136a0:	429d      	cmp	r5, r3
 80136a2:	d101      	bne.n	80136a8 <_vfiprintf_r+0x60>
 80136a4:	68b5      	ldr	r5, [r6, #8]
 80136a6:	e7df      	b.n	8013668 <_vfiprintf_r+0x20>
 80136a8:	4b79      	ldr	r3, [pc, #484]	; (8013890 <_vfiprintf_r+0x248>)
 80136aa:	429d      	cmp	r5, r3
 80136ac:	bf08      	it	eq
 80136ae:	68f5      	ldreq	r5, [r6, #12]
 80136b0:	e7da      	b.n	8013668 <_vfiprintf_r+0x20>
 80136b2:	89ab      	ldrh	r3, [r5, #12]
 80136b4:	0598      	lsls	r0, r3, #22
 80136b6:	d4ed      	bmi.n	8013694 <_vfiprintf_r+0x4c>
 80136b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80136ba:	f7ff ff69 	bl	8013590 <__retarget_lock_release_recursive>
 80136be:	e7e9      	b.n	8013694 <_vfiprintf_r+0x4c>
 80136c0:	2300      	movs	r3, #0
 80136c2:	9309      	str	r3, [sp, #36]	; 0x24
 80136c4:	2320      	movs	r3, #32
 80136c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80136ca:	2330      	movs	r3, #48	; 0x30
 80136cc:	f04f 0901 	mov.w	r9, #1
 80136d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80136d4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8013894 <_vfiprintf_r+0x24c>
 80136d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136dc:	4623      	mov	r3, r4
 80136de:	469a      	mov	sl, r3
 80136e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136e4:	b10a      	cbz	r2, 80136ea <_vfiprintf_r+0xa2>
 80136e6:	2a25      	cmp	r2, #37	; 0x25
 80136e8:	d1f9      	bne.n	80136de <_vfiprintf_r+0x96>
 80136ea:	ebba 0b04 	subs.w	fp, sl, r4
 80136ee:	d00b      	beq.n	8013708 <_vfiprintf_r+0xc0>
 80136f0:	465b      	mov	r3, fp
 80136f2:	4622      	mov	r2, r4
 80136f4:	4629      	mov	r1, r5
 80136f6:	4630      	mov	r0, r6
 80136f8:	f7ff ff94 	bl	8013624 <__sfputs_r>
 80136fc:	3001      	adds	r0, #1
 80136fe:	f000 80aa 	beq.w	8013856 <_vfiprintf_r+0x20e>
 8013702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013704:	445a      	add	r2, fp
 8013706:	9209      	str	r2, [sp, #36]	; 0x24
 8013708:	f89a 3000 	ldrb.w	r3, [sl]
 801370c:	2b00      	cmp	r3, #0
 801370e:	f000 80a2 	beq.w	8013856 <_vfiprintf_r+0x20e>
 8013712:	2300      	movs	r3, #0
 8013714:	f04f 32ff 	mov.w	r2, #4294967295
 8013718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801371c:	f10a 0a01 	add.w	sl, sl, #1
 8013720:	9304      	str	r3, [sp, #16]
 8013722:	9307      	str	r3, [sp, #28]
 8013724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013728:	931a      	str	r3, [sp, #104]	; 0x68
 801372a:	4654      	mov	r4, sl
 801372c:	2205      	movs	r2, #5
 801372e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013732:	4858      	ldr	r0, [pc, #352]	; (8013894 <_vfiprintf_r+0x24c>)
 8013734:	f7ff f9ce 	bl	8012ad4 <memchr>
 8013738:	9a04      	ldr	r2, [sp, #16]
 801373a:	b9d8      	cbnz	r0, 8013774 <_vfiprintf_r+0x12c>
 801373c:	06d1      	lsls	r1, r2, #27
 801373e:	bf44      	itt	mi
 8013740:	2320      	movmi	r3, #32
 8013742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013746:	0713      	lsls	r3, r2, #28
 8013748:	bf44      	itt	mi
 801374a:	232b      	movmi	r3, #43	; 0x2b
 801374c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013750:	f89a 3000 	ldrb.w	r3, [sl]
 8013754:	2b2a      	cmp	r3, #42	; 0x2a
 8013756:	d015      	beq.n	8013784 <_vfiprintf_r+0x13c>
 8013758:	4654      	mov	r4, sl
 801375a:	2000      	movs	r0, #0
 801375c:	f04f 0c0a 	mov.w	ip, #10
 8013760:	9a07      	ldr	r2, [sp, #28]
 8013762:	4621      	mov	r1, r4
 8013764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013768:	3b30      	subs	r3, #48	; 0x30
 801376a:	2b09      	cmp	r3, #9
 801376c:	d94e      	bls.n	801380c <_vfiprintf_r+0x1c4>
 801376e:	b1b0      	cbz	r0, 801379e <_vfiprintf_r+0x156>
 8013770:	9207      	str	r2, [sp, #28]
 8013772:	e014      	b.n	801379e <_vfiprintf_r+0x156>
 8013774:	eba0 0308 	sub.w	r3, r0, r8
 8013778:	fa09 f303 	lsl.w	r3, r9, r3
 801377c:	4313      	orrs	r3, r2
 801377e:	46a2      	mov	sl, r4
 8013780:	9304      	str	r3, [sp, #16]
 8013782:	e7d2      	b.n	801372a <_vfiprintf_r+0xe2>
 8013784:	9b03      	ldr	r3, [sp, #12]
 8013786:	1d19      	adds	r1, r3, #4
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	9103      	str	r1, [sp, #12]
 801378c:	2b00      	cmp	r3, #0
 801378e:	bfbb      	ittet	lt
 8013790:	425b      	neglt	r3, r3
 8013792:	f042 0202 	orrlt.w	r2, r2, #2
 8013796:	9307      	strge	r3, [sp, #28]
 8013798:	9307      	strlt	r3, [sp, #28]
 801379a:	bfb8      	it	lt
 801379c:	9204      	strlt	r2, [sp, #16]
 801379e:	7823      	ldrb	r3, [r4, #0]
 80137a0:	2b2e      	cmp	r3, #46	; 0x2e
 80137a2:	d10c      	bne.n	80137be <_vfiprintf_r+0x176>
 80137a4:	7863      	ldrb	r3, [r4, #1]
 80137a6:	2b2a      	cmp	r3, #42	; 0x2a
 80137a8:	d135      	bne.n	8013816 <_vfiprintf_r+0x1ce>
 80137aa:	9b03      	ldr	r3, [sp, #12]
 80137ac:	3402      	adds	r4, #2
 80137ae:	1d1a      	adds	r2, r3, #4
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	9203      	str	r2, [sp, #12]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	bfb8      	it	lt
 80137b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80137bc:	9305      	str	r3, [sp, #20]
 80137be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80138a4 <_vfiprintf_r+0x25c>
 80137c2:	2203      	movs	r2, #3
 80137c4:	4650      	mov	r0, sl
 80137c6:	7821      	ldrb	r1, [r4, #0]
 80137c8:	f7ff f984 	bl	8012ad4 <memchr>
 80137cc:	b140      	cbz	r0, 80137e0 <_vfiprintf_r+0x198>
 80137ce:	2340      	movs	r3, #64	; 0x40
 80137d0:	eba0 000a 	sub.w	r0, r0, sl
 80137d4:	fa03 f000 	lsl.w	r0, r3, r0
 80137d8:	9b04      	ldr	r3, [sp, #16]
 80137da:	3401      	adds	r4, #1
 80137dc:	4303      	orrs	r3, r0
 80137de:	9304      	str	r3, [sp, #16]
 80137e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137e4:	2206      	movs	r2, #6
 80137e6:	482c      	ldr	r0, [pc, #176]	; (8013898 <_vfiprintf_r+0x250>)
 80137e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80137ec:	f7ff f972 	bl	8012ad4 <memchr>
 80137f0:	2800      	cmp	r0, #0
 80137f2:	d03f      	beq.n	8013874 <_vfiprintf_r+0x22c>
 80137f4:	4b29      	ldr	r3, [pc, #164]	; (801389c <_vfiprintf_r+0x254>)
 80137f6:	bb1b      	cbnz	r3, 8013840 <_vfiprintf_r+0x1f8>
 80137f8:	9b03      	ldr	r3, [sp, #12]
 80137fa:	3307      	adds	r3, #7
 80137fc:	f023 0307 	bic.w	r3, r3, #7
 8013800:	3308      	adds	r3, #8
 8013802:	9303      	str	r3, [sp, #12]
 8013804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013806:	443b      	add	r3, r7
 8013808:	9309      	str	r3, [sp, #36]	; 0x24
 801380a:	e767      	b.n	80136dc <_vfiprintf_r+0x94>
 801380c:	460c      	mov	r4, r1
 801380e:	2001      	movs	r0, #1
 8013810:	fb0c 3202 	mla	r2, ip, r2, r3
 8013814:	e7a5      	b.n	8013762 <_vfiprintf_r+0x11a>
 8013816:	2300      	movs	r3, #0
 8013818:	f04f 0c0a 	mov.w	ip, #10
 801381c:	4619      	mov	r1, r3
 801381e:	3401      	adds	r4, #1
 8013820:	9305      	str	r3, [sp, #20]
 8013822:	4620      	mov	r0, r4
 8013824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013828:	3a30      	subs	r2, #48	; 0x30
 801382a:	2a09      	cmp	r2, #9
 801382c:	d903      	bls.n	8013836 <_vfiprintf_r+0x1ee>
 801382e:	2b00      	cmp	r3, #0
 8013830:	d0c5      	beq.n	80137be <_vfiprintf_r+0x176>
 8013832:	9105      	str	r1, [sp, #20]
 8013834:	e7c3      	b.n	80137be <_vfiprintf_r+0x176>
 8013836:	4604      	mov	r4, r0
 8013838:	2301      	movs	r3, #1
 801383a:	fb0c 2101 	mla	r1, ip, r1, r2
 801383e:	e7f0      	b.n	8013822 <_vfiprintf_r+0x1da>
 8013840:	ab03      	add	r3, sp, #12
 8013842:	9300      	str	r3, [sp, #0]
 8013844:	462a      	mov	r2, r5
 8013846:	4630      	mov	r0, r6
 8013848:	4b15      	ldr	r3, [pc, #84]	; (80138a0 <_vfiprintf_r+0x258>)
 801384a:	a904      	add	r1, sp, #16
 801384c:	f7fd fec6 	bl	80115dc <_printf_float>
 8013850:	4607      	mov	r7, r0
 8013852:	1c78      	adds	r0, r7, #1
 8013854:	d1d6      	bne.n	8013804 <_vfiprintf_r+0x1bc>
 8013856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013858:	07d9      	lsls	r1, r3, #31
 801385a:	d405      	bmi.n	8013868 <_vfiprintf_r+0x220>
 801385c:	89ab      	ldrh	r3, [r5, #12]
 801385e:	059a      	lsls	r2, r3, #22
 8013860:	d402      	bmi.n	8013868 <_vfiprintf_r+0x220>
 8013862:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013864:	f7ff fe94 	bl	8013590 <__retarget_lock_release_recursive>
 8013868:	89ab      	ldrh	r3, [r5, #12]
 801386a:	065b      	lsls	r3, r3, #25
 801386c:	f53f af12 	bmi.w	8013694 <_vfiprintf_r+0x4c>
 8013870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013872:	e711      	b.n	8013698 <_vfiprintf_r+0x50>
 8013874:	ab03      	add	r3, sp, #12
 8013876:	9300      	str	r3, [sp, #0]
 8013878:	462a      	mov	r2, r5
 801387a:	4630      	mov	r0, r6
 801387c:	4b08      	ldr	r3, [pc, #32]	; (80138a0 <_vfiprintf_r+0x258>)
 801387e:	a904      	add	r1, sp, #16
 8013880:	f7fe f948 	bl	8011b14 <_printf_i>
 8013884:	e7e4      	b.n	8013850 <_vfiprintf_r+0x208>
 8013886:	bf00      	nop
 8013888:	0801531c 	.word	0x0801531c
 801388c:	0801533c 	.word	0x0801533c
 8013890:	080152fc 	.word	0x080152fc
 8013894:	080151a4 	.word	0x080151a4
 8013898:	080151ae 	.word	0x080151ae
 801389c:	080115dd 	.word	0x080115dd
 80138a0:	08013625 	.word	0x08013625
 80138a4:	080151aa 	.word	0x080151aa

080138a8 <__swbuf_r>:
 80138a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138aa:	460e      	mov	r6, r1
 80138ac:	4614      	mov	r4, r2
 80138ae:	4605      	mov	r5, r0
 80138b0:	b118      	cbz	r0, 80138ba <__swbuf_r+0x12>
 80138b2:	6983      	ldr	r3, [r0, #24]
 80138b4:	b90b      	cbnz	r3, 80138ba <__swbuf_r+0x12>
 80138b6:	f000 f9e7 	bl	8013c88 <__sinit>
 80138ba:	4b21      	ldr	r3, [pc, #132]	; (8013940 <__swbuf_r+0x98>)
 80138bc:	429c      	cmp	r4, r3
 80138be:	d12b      	bne.n	8013918 <__swbuf_r+0x70>
 80138c0:	686c      	ldr	r4, [r5, #4]
 80138c2:	69a3      	ldr	r3, [r4, #24]
 80138c4:	60a3      	str	r3, [r4, #8]
 80138c6:	89a3      	ldrh	r3, [r4, #12]
 80138c8:	071a      	lsls	r2, r3, #28
 80138ca:	d52f      	bpl.n	801392c <__swbuf_r+0x84>
 80138cc:	6923      	ldr	r3, [r4, #16]
 80138ce:	b36b      	cbz	r3, 801392c <__swbuf_r+0x84>
 80138d0:	6923      	ldr	r3, [r4, #16]
 80138d2:	6820      	ldr	r0, [r4, #0]
 80138d4:	b2f6      	uxtb	r6, r6
 80138d6:	1ac0      	subs	r0, r0, r3
 80138d8:	6963      	ldr	r3, [r4, #20]
 80138da:	4637      	mov	r7, r6
 80138dc:	4283      	cmp	r3, r0
 80138de:	dc04      	bgt.n	80138ea <__swbuf_r+0x42>
 80138e0:	4621      	mov	r1, r4
 80138e2:	4628      	mov	r0, r5
 80138e4:	f000 f93c 	bl	8013b60 <_fflush_r>
 80138e8:	bb30      	cbnz	r0, 8013938 <__swbuf_r+0x90>
 80138ea:	68a3      	ldr	r3, [r4, #8]
 80138ec:	3001      	adds	r0, #1
 80138ee:	3b01      	subs	r3, #1
 80138f0:	60a3      	str	r3, [r4, #8]
 80138f2:	6823      	ldr	r3, [r4, #0]
 80138f4:	1c5a      	adds	r2, r3, #1
 80138f6:	6022      	str	r2, [r4, #0]
 80138f8:	701e      	strb	r6, [r3, #0]
 80138fa:	6963      	ldr	r3, [r4, #20]
 80138fc:	4283      	cmp	r3, r0
 80138fe:	d004      	beq.n	801390a <__swbuf_r+0x62>
 8013900:	89a3      	ldrh	r3, [r4, #12]
 8013902:	07db      	lsls	r3, r3, #31
 8013904:	d506      	bpl.n	8013914 <__swbuf_r+0x6c>
 8013906:	2e0a      	cmp	r6, #10
 8013908:	d104      	bne.n	8013914 <__swbuf_r+0x6c>
 801390a:	4621      	mov	r1, r4
 801390c:	4628      	mov	r0, r5
 801390e:	f000 f927 	bl	8013b60 <_fflush_r>
 8013912:	b988      	cbnz	r0, 8013938 <__swbuf_r+0x90>
 8013914:	4638      	mov	r0, r7
 8013916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013918:	4b0a      	ldr	r3, [pc, #40]	; (8013944 <__swbuf_r+0x9c>)
 801391a:	429c      	cmp	r4, r3
 801391c:	d101      	bne.n	8013922 <__swbuf_r+0x7a>
 801391e:	68ac      	ldr	r4, [r5, #8]
 8013920:	e7cf      	b.n	80138c2 <__swbuf_r+0x1a>
 8013922:	4b09      	ldr	r3, [pc, #36]	; (8013948 <__swbuf_r+0xa0>)
 8013924:	429c      	cmp	r4, r3
 8013926:	bf08      	it	eq
 8013928:	68ec      	ldreq	r4, [r5, #12]
 801392a:	e7ca      	b.n	80138c2 <__swbuf_r+0x1a>
 801392c:	4621      	mov	r1, r4
 801392e:	4628      	mov	r0, r5
 8013930:	f000 f81a 	bl	8013968 <__swsetup_r>
 8013934:	2800      	cmp	r0, #0
 8013936:	d0cb      	beq.n	80138d0 <__swbuf_r+0x28>
 8013938:	f04f 37ff 	mov.w	r7, #4294967295
 801393c:	e7ea      	b.n	8013914 <__swbuf_r+0x6c>
 801393e:	bf00      	nop
 8013940:	0801531c 	.word	0x0801531c
 8013944:	0801533c 	.word	0x0801533c
 8013948:	080152fc 	.word	0x080152fc

0801394c <__ascii_wctomb>:
 801394c:	4603      	mov	r3, r0
 801394e:	4608      	mov	r0, r1
 8013950:	b141      	cbz	r1, 8013964 <__ascii_wctomb+0x18>
 8013952:	2aff      	cmp	r2, #255	; 0xff
 8013954:	d904      	bls.n	8013960 <__ascii_wctomb+0x14>
 8013956:	228a      	movs	r2, #138	; 0x8a
 8013958:	f04f 30ff 	mov.w	r0, #4294967295
 801395c:	601a      	str	r2, [r3, #0]
 801395e:	4770      	bx	lr
 8013960:	2001      	movs	r0, #1
 8013962:	700a      	strb	r2, [r1, #0]
 8013964:	4770      	bx	lr
	...

08013968 <__swsetup_r>:
 8013968:	4b32      	ldr	r3, [pc, #200]	; (8013a34 <__swsetup_r+0xcc>)
 801396a:	b570      	push	{r4, r5, r6, lr}
 801396c:	681d      	ldr	r5, [r3, #0]
 801396e:	4606      	mov	r6, r0
 8013970:	460c      	mov	r4, r1
 8013972:	b125      	cbz	r5, 801397e <__swsetup_r+0x16>
 8013974:	69ab      	ldr	r3, [r5, #24]
 8013976:	b913      	cbnz	r3, 801397e <__swsetup_r+0x16>
 8013978:	4628      	mov	r0, r5
 801397a:	f000 f985 	bl	8013c88 <__sinit>
 801397e:	4b2e      	ldr	r3, [pc, #184]	; (8013a38 <__swsetup_r+0xd0>)
 8013980:	429c      	cmp	r4, r3
 8013982:	d10f      	bne.n	80139a4 <__swsetup_r+0x3c>
 8013984:	686c      	ldr	r4, [r5, #4]
 8013986:	89a3      	ldrh	r3, [r4, #12]
 8013988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801398c:	0719      	lsls	r1, r3, #28
 801398e:	d42c      	bmi.n	80139ea <__swsetup_r+0x82>
 8013990:	06dd      	lsls	r5, r3, #27
 8013992:	d411      	bmi.n	80139b8 <__swsetup_r+0x50>
 8013994:	2309      	movs	r3, #9
 8013996:	6033      	str	r3, [r6, #0]
 8013998:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801399c:	f04f 30ff 	mov.w	r0, #4294967295
 80139a0:	81a3      	strh	r3, [r4, #12]
 80139a2:	e03e      	b.n	8013a22 <__swsetup_r+0xba>
 80139a4:	4b25      	ldr	r3, [pc, #148]	; (8013a3c <__swsetup_r+0xd4>)
 80139a6:	429c      	cmp	r4, r3
 80139a8:	d101      	bne.n	80139ae <__swsetup_r+0x46>
 80139aa:	68ac      	ldr	r4, [r5, #8]
 80139ac:	e7eb      	b.n	8013986 <__swsetup_r+0x1e>
 80139ae:	4b24      	ldr	r3, [pc, #144]	; (8013a40 <__swsetup_r+0xd8>)
 80139b0:	429c      	cmp	r4, r3
 80139b2:	bf08      	it	eq
 80139b4:	68ec      	ldreq	r4, [r5, #12]
 80139b6:	e7e6      	b.n	8013986 <__swsetup_r+0x1e>
 80139b8:	0758      	lsls	r0, r3, #29
 80139ba:	d512      	bpl.n	80139e2 <__swsetup_r+0x7a>
 80139bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139be:	b141      	cbz	r1, 80139d2 <__swsetup_r+0x6a>
 80139c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139c4:	4299      	cmp	r1, r3
 80139c6:	d002      	beq.n	80139ce <__swsetup_r+0x66>
 80139c8:	4630      	mov	r0, r6
 80139ca:	f7fd fcc3 	bl	8011354 <_free_r>
 80139ce:	2300      	movs	r3, #0
 80139d0:	6363      	str	r3, [r4, #52]	; 0x34
 80139d2:	89a3      	ldrh	r3, [r4, #12]
 80139d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80139d8:	81a3      	strh	r3, [r4, #12]
 80139da:	2300      	movs	r3, #0
 80139dc:	6063      	str	r3, [r4, #4]
 80139de:	6923      	ldr	r3, [r4, #16]
 80139e0:	6023      	str	r3, [r4, #0]
 80139e2:	89a3      	ldrh	r3, [r4, #12]
 80139e4:	f043 0308 	orr.w	r3, r3, #8
 80139e8:	81a3      	strh	r3, [r4, #12]
 80139ea:	6923      	ldr	r3, [r4, #16]
 80139ec:	b94b      	cbnz	r3, 8013a02 <__swsetup_r+0x9a>
 80139ee:	89a3      	ldrh	r3, [r4, #12]
 80139f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80139f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139f8:	d003      	beq.n	8013a02 <__swsetup_r+0x9a>
 80139fa:	4621      	mov	r1, r4
 80139fc:	4630      	mov	r0, r6
 80139fe:	f000 fa05 	bl	8013e0c <__smakebuf_r>
 8013a02:	89a0      	ldrh	r0, [r4, #12]
 8013a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a08:	f010 0301 	ands.w	r3, r0, #1
 8013a0c:	d00a      	beq.n	8013a24 <__swsetup_r+0xbc>
 8013a0e:	2300      	movs	r3, #0
 8013a10:	60a3      	str	r3, [r4, #8]
 8013a12:	6963      	ldr	r3, [r4, #20]
 8013a14:	425b      	negs	r3, r3
 8013a16:	61a3      	str	r3, [r4, #24]
 8013a18:	6923      	ldr	r3, [r4, #16]
 8013a1a:	b943      	cbnz	r3, 8013a2e <__swsetup_r+0xc6>
 8013a1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013a20:	d1ba      	bne.n	8013998 <__swsetup_r+0x30>
 8013a22:	bd70      	pop	{r4, r5, r6, pc}
 8013a24:	0781      	lsls	r1, r0, #30
 8013a26:	bf58      	it	pl
 8013a28:	6963      	ldrpl	r3, [r4, #20]
 8013a2a:	60a3      	str	r3, [r4, #8]
 8013a2c:	e7f4      	b.n	8013a18 <__swsetup_r+0xb0>
 8013a2e:	2000      	movs	r0, #0
 8013a30:	e7f7      	b.n	8013a22 <__swsetup_r+0xba>
 8013a32:	bf00      	nop
 8013a34:	200001e8 	.word	0x200001e8
 8013a38:	0801531c 	.word	0x0801531c
 8013a3c:	0801533c 	.word	0x0801533c
 8013a40:	080152fc 	.word	0x080152fc

08013a44 <abort>:
 8013a44:	2006      	movs	r0, #6
 8013a46:	b508      	push	{r3, lr}
 8013a48:	f000 fa48 	bl	8013edc <raise>
 8013a4c:	2001      	movs	r0, #1
 8013a4e:	f7f2 faa8 	bl	8005fa2 <_exit>
	...

08013a54 <__sflush_r>:
 8013a54:	898a      	ldrh	r2, [r1, #12]
 8013a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a5a:	4605      	mov	r5, r0
 8013a5c:	0710      	lsls	r0, r2, #28
 8013a5e:	460c      	mov	r4, r1
 8013a60:	d458      	bmi.n	8013b14 <__sflush_r+0xc0>
 8013a62:	684b      	ldr	r3, [r1, #4]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	dc05      	bgt.n	8013a74 <__sflush_r+0x20>
 8013a68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	dc02      	bgt.n	8013a74 <__sflush_r+0x20>
 8013a6e:	2000      	movs	r0, #0
 8013a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a76:	2e00      	cmp	r6, #0
 8013a78:	d0f9      	beq.n	8013a6e <__sflush_r+0x1a>
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013a80:	682f      	ldr	r7, [r5, #0]
 8013a82:	602b      	str	r3, [r5, #0]
 8013a84:	d032      	beq.n	8013aec <__sflush_r+0x98>
 8013a86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013a88:	89a3      	ldrh	r3, [r4, #12]
 8013a8a:	075a      	lsls	r2, r3, #29
 8013a8c:	d505      	bpl.n	8013a9a <__sflush_r+0x46>
 8013a8e:	6863      	ldr	r3, [r4, #4]
 8013a90:	1ac0      	subs	r0, r0, r3
 8013a92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013a94:	b10b      	cbz	r3, 8013a9a <__sflush_r+0x46>
 8013a96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013a98:	1ac0      	subs	r0, r0, r3
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	4602      	mov	r2, r0
 8013a9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013aa0:	4628      	mov	r0, r5
 8013aa2:	6a21      	ldr	r1, [r4, #32]
 8013aa4:	47b0      	blx	r6
 8013aa6:	1c43      	adds	r3, r0, #1
 8013aa8:	89a3      	ldrh	r3, [r4, #12]
 8013aaa:	d106      	bne.n	8013aba <__sflush_r+0x66>
 8013aac:	6829      	ldr	r1, [r5, #0]
 8013aae:	291d      	cmp	r1, #29
 8013ab0:	d82c      	bhi.n	8013b0c <__sflush_r+0xb8>
 8013ab2:	4a2a      	ldr	r2, [pc, #168]	; (8013b5c <__sflush_r+0x108>)
 8013ab4:	40ca      	lsrs	r2, r1
 8013ab6:	07d6      	lsls	r6, r2, #31
 8013ab8:	d528      	bpl.n	8013b0c <__sflush_r+0xb8>
 8013aba:	2200      	movs	r2, #0
 8013abc:	6062      	str	r2, [r4, #4]
 8013abe:	6922      	ldr	r2, [r4, #16]
 8013ac0:	04d9      	lsls	r1, r3, #19
 8013ac2:	6022      	str	r2, [r4, #0]
 8013ac4:	d504      	bpl.n	8013ad0 <__sflush_r+0x7c>
 8013ac6:	1c42      	adds	r2, r0, #1
 8013ac8:	d101      	bne.n	8013ace <__sflush_r+0x7a>
 8013aca:	682b      	ldr	r3, [r5, #0]
 8013acc:	b903      	cbnz	r3, 8013ad0 <__sflush_r+0x7c>
 8013ace:	6560      	str	r0, [r4, #84]	; 0x54
 8013ad0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ad2:	602f      	str	r7, [r5, #0]
 8013ad4:	2900      	cmp	r1, #0
 8013ad6:	d0ca      	beq.n	8013a6e <__sflush_r+0x1a>
 8013ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013adc:	4299      	cmp	r1, r3
 8013ade:	d002      	beq.n	8013ae6 <__sflush_r+0x92>
 8013ae0:	4628      	mov	r0, r5
 8013ae2:	f7fd fc37 	bl	8011354 <_free_r>
 8013ae6:	2000      	movs	r0, #0
 8013ae8:	6360      	str	r0, [r4, #52]	; 0x34
 8013aea:	e7c1      	b.n	8013a70 <__sflush_r+0x1c>
 8013aec:	6a21      	ldr	r1, [r4, #32]
 8013aee:	2301      	movs	r3, #1
 8013af0:	4628      	mov	r0, r5
 8013af2:	47b0      	blx	r6
 8013af4:	1c41      	adds	r1, r0, #1
 8013af6:	d1c7      	bne.n	8013a88 <__sflush_r+0x34>
 8013af8:	682b      	ldr	r3, [r5, #0]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d0c4      	beq.n	8013a88 <__sflush_r+0x34>
 8013afe:	2b1d      	cmp	r3, #29
 8013b00:	d001      	beq.n	8013b06 <__sflush_r+0xb2>
 8013b02:	2b16      	cmp	r3, #22
 8013b04:	d101      	bne.n	8013b0a <__sflush_r+0xb6>
 8013b06:	602f      	str	r7, [r5, #0]
 8013b08:	e7b1      	b.n	8013a6e <__sflush_r+0x1a>
 8013b0a:	89a3      	ldrh	r3, [r4, #12]
 8013b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b10:	81a3      	strh	r3, [r4, #12]
 8013b12:	e7ad      	b.n	8013a70 <__sflush_r+0x1c>
 8013b14:	690f      	ldr	r7, [r1, #16]
 8013b16:	2f00      	cmp	r7, #0
 8013b18:	d0a9      	beq.n	8013a6e <__sflush_r+0x1a>
 8013b1a:	0793      	lsls	r3, r2, #30
 8013b1c:	bf18      	it	ne
 8013b1e:	2300      	movne	r3, #0
 8013b20:	680e      	ldr	r6, [r1, #0]
 8013b22:	bf08      	it	eq
 8013b24:	694b      	ldreq	r3, [r1, #20]
 8013b26:	eba6 0807 	sub.w	r8, r6, r7
 8013b2a:	600f      	str	r7, [r1, #0]
 8013b2c:	608b      	str	r3, [r1, #8]
 8013b2e:	f1b8 0f00 	cmp.w	r8, #0
 8013b32:	dd9c      	ble.n	8013a6e <__sflush_r+0x1a>
 8013b34:	4643      	mov	r3, r8
 8013b36:	463a      	mov	r2, r7
 8013b38:	4628      	mov	r0, r5
 8013b3a:	6a21      	ldr	r1, [r4, #32]
 8013b3c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013b3e:	47b0      	blx	r6
 8013b40:	2800      	cmp	r0, #0
 8013b42:	dc06      	bgt.n	8013b52 <__sflush_r+0xfe>
 8013b44:	89a3      	ldrh	r3, [r4, #12]
 8013b46:	f04f 30ff 	mov.w	r0, #4294967295
 8013b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b4e:	81a3      	strh	r3, [r4, #12]
 8013b50:	e78e      	b.n	8013a70 <__sflush_r+0x1c>
 8013b52:	4407      	add	r7, r0
 8013b54:	eba8 0800 	sub.w	r8, r8, r0
 8013b58:	e7e9      	b.n	8013b2e <__sflush_r+0xda>
 8013b5a:	bf00      	nop
 8013b5c:	20400001 	.word	0x20400001

08013b60 <_fflush_r>:
 8013b60:	b538      	push	{r3, r4, r5, lr}
 8013b62:	690b      	ldr	r3, [r1, #16]
 8013b64:	4605      	mov	r5, r0
 8013b66:	460c      	mov	r4, r1
 8013b68:	b913      	cbnz	r3, 8013b70 <_fflush_r+0x10>
 8013b6a:	2500      	movs	r5, #0
 8013b6c:	4628      	mov	r0, r5
 8013b6e:	bd38      	pop	{r3, r4, r5, pc}
 8013b70:	b118      	cbz	r0, 8013b7a <_fflush_r+0x1a>
 8013b72:	6983      	ldr	r3, [r0, #24]
 8013b74:	b90b      	cbnz	r3, 8013b7a <_fflush_r+0x1a>
 8013b76:	f000 f887 	bl	8013c88 <__sinit>
 8013b7a:	4b14      	ldr	r3, [pc, #80]	; (8013bcc <_fflush_r+0x6c>)
 8013b7c:	429c      	cmp	r4, r3
 8013b7e:	d11b      	bne.n	8013bb8 <_fflush_r+0x58>
 8013b80:	686c      	ldr	r4, [r5, #4]
 8013b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d0ef      	beq.n	8013b6a <_fflush_r+0xa>
 8013b8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013b8c:	07d0      	lsls	r0, r2, #31
 8013b8e:	d404      	bmi.n	8013b9a <_fflush_r+0x3a>
 8013b90:	0599      	lsls	r1, r3, #22
 8013b92:	d402      	bmi.n	8013b9a <_fflush_r+0x3a>
 8013b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b96:	f7ff fcfa 	bl	801358e <__retarget_lock_acquire_recursive>
 8013b9a:	4628      	mov	r0, r5
 8013b9c:	4621      	mov	r1, r4
 8013b9e:	f7ff ff59 	bl	8013a54 <__sflush_r>
 8013ba2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ba4:	4605      	mov	r5, r0
 8013ba6:	07da      	lsls	r2, r3, #31
 8013ba8:	d4e0      	bmi.n	8013b6c <_fflush_r+0xc>
 8013baa:	89a3      	ldrh	r3, [r4, #12]
 8013bac:	059b      	lsls	r3, r3, #22
 8013bae:	d4dd      	bmi.n	8013b6c <_fflush_r+0xc>
 8013bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013bb2:	f7ff fced 	bl	8013590 <__retarget_lock_release_recursive>
 8013bb6:	e7d9      	b.n	8013b6c <_fflush_r+0xc>
 8013bb8:	4b05      	ldr	r3, [pc, #20]	; (8013bd0 <_fflush_r+0x70>)
 8013bba:	429c      	cmp	r4, r3
 8013bbc:	d101      	bne.n	8013bc2 <_fflush_r+0x62>
 8013bbe:	68ac      	ldr	r4, [r5, #8]
 8013bc0:	e7df      	b.n	8013b82 <_fflush_r+0x22>
 8013bc2:	4b04      	ldr	r3, [pc, #16]	; (8013bd4 <_fflush_r+0x74>)
 8013bc4:	429c      	cmp	r4, r3
 8013bc6:	bf08      	it	eq
 8013bc8:	68ec      	ldreq	r4, [r5, #12]
 8013bca:	e7da      	b.n	8013b82 <_fflush_r+0x22>
 8013bcc:	0801531c 	.word	0x0801531c
 8013bd0:	0801533c 	.word	0x0801533c
 8013bd4:	080152fc 	.word	0x080152fc

08013bd8 <std>:
 8013bd8:	2300      	movs	r3, #0
 8013bda:	b510      	push	{r4, lr}
 8013bdc:	4604      	mov	r4, r0
 8013bde:	e9c0 3300 	strd	r3, r3, [r0]
 8013be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013be6:	6083      	str	r3, [r0, #8]
 8013be8:	8181      	strh	r1, [r0, #12]
 8013bea:	6643      	str	r3, [r0, #100]	; 0x64
 8013bec:	81c2      	strh	r2, [r0, #14]
 8013bee:	6183      	str	r3, [r0, #24]
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	2208      	movs	r2, #8
 8013bf4:	305c      	adds	r0, #92	; 0x5c
 8013bf6:	f7fd fba5 	bl	8011344 <memset>
 8013bfa:	4b05      	ldr	r3, [pc, #20]	; (8013c10 <std+0x38>)
 8013bfc:	6224      	str	r4, [r4, #32]
 8013bfe:	6263      	str	r3, [r4, #36]	; 0x24
 8013c00:	4b04      	ldr	r3, [pc, #16]	; (8013c14 <std+0x3c>)
 8013c02:	62a3      	str	r3, [r4, #40]	; 0x28
 8013c04:	4b04      	ldr	r3, [pc, #16]	; (8013c18 <std+0x40>)
 8013c06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013c08:	4b04      	ldr	r3, [pc, #16]	; (8013c1c <std+0x44>)
 8013c0a:	6323      	str	r3, [r4, #48]	; 0x30
 8013c0c:	bd10      	pop	{r4, pc}
 8013c0e:	bf00      	nop
 8013c10:	08013f15 	.word	0x08013f15
 8013c14:	08013f37 	.word	0x08013f37
 8013c18:	08013f6f 	.word	0x08013f6f
 8013c1c:	08013f93 	.word	0x08013f93

08013c20 <_cleanup_r>:
 8013c20:	4901      	ldr	r1, [pc, #4]	; (8013c28 <_cleanup_r+0x8>)
 8013c22:	f000 b8af 	b.w	8013d84 <_fwalk_reent>
 8013c26:	bf00      	nop
 8013c28:	08013b61 	.word	0x08013b61

08013c2c <__sfmoreglue>:
 8013c2c:	b570      	push	{r4, r5, r6, lr}
 8013c2e:	2568      	movs	r5, #104	; 0x68
 8013c30:	1e4a      	subs	r2, r1, #1
 8013c32:	4355      	muls	r5, r2
 8013c34:	460e      	mov	r6, r1
 8013c36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013c3a:	f7fd fbd7 	bl	80113ec <_malloc_r>
 8013c3e:	4604      	mov	r4, r0
 8013c40:	b140      	cbz	r0, 8013c54 <__sfmoreglue+0x28>
 8013c42:	2100      	movs	r1, #0
 8013c44:	e9c0 1600 	strd	r1, r6, [r0]
 8013c48:	300c      	adds	r0, #12
 8013c4a:	60a0      	str	r0, [r4, #8]
 8013c4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013c50:	f7fd fb78 	bl	8011344 <memset>
 8013c54:	4620      	mov	r0, r4
 8013c56:	bd70      	pop	{r4, r5, r6, pc}

08013c58 <__sfp_lock_acquire>:
 8013c58:	4801      	ldr	r0, [pc, #4]	; (8013c60 <__sfp_lock_acquire+0x8>)
 8013c5a:	f7ff bc98 	b.w	801358e <__retarget_lock_acquire_recursive>
 8013c5e:	bf00      	nop
 8013c60:	20002124 	.word	0x20002124

08013c64 <__sfp_lock_release>:
 8013c64:	4801      	ldr	r0, [pc, #4]	; (8013c6c <__sfp_lock_release+0x8>)
 8013c66:	f7ff bc93 	b.w	8013590 <__retarget_lock_release_recursive>
 8013c6a:	bf00      	nop
 8013c6c:	20002124 	.word	0x20002124

08013c70 <__sinit_lock_acquire>:
 8013c70:	4801      	ldr	r0, [pc, #4]	; (8013c78 <__sinit_lock_acquire+0x8>)
 8013c72:	f7ff bc8c 	b.w	801358e <__retarget_lock_acquire_recursive>
 8013c76:	bf00      	nop
 8013c78:	2000211f 	.word	0x2000211f

08013c7c <__sinit_lock_release>:
 8013c7c:	4801      	ldr	r0, [pc, #4]	; (8013c84 <__sinit_lock_release+0x8>)
 8013c7e:	f7ff bc87 	b.w	8013590 <__retarget_lock_release_recursive>
 8013c82:	bf00      	nop
 8013c84:	2000211f 	.word	0x2000211f

08013c88 <__sinit>:
 8013c88:	b510      	push	{r4, lr}
 8013c8a:	4604      	mov	r4, r0
 8013c8c:	f7ff fff0 	bl	8013c70 <__sinit_lock_acquire>
 8013c90:	69a3      	ldr	r3, [r4, #24]
 8013c92:	b11b      	cbz	r3, 8013c9c <__sinit+0x14>
 8013c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c98:	f7ff bff0 	b.w	8013c7c <__sinit_lock_release>
 8013c9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013ca0:	6523      	str	r3, [r4, #80]	; 0x50
 8013ca2:	4b13      	ldr	r3, [pc, #76]	; (8013cf0 <__sinit+0x68>)
 8013ca4:	4a13      	ldr	r2, [pc, #76]	; (8013cf4 <__sinit+0x6c>)
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	62a2      	str	r2, [r4, #40]	; 0x28
 8013caa:	42a3      	cmp	r3, r4
 8013cac:	bf08      	it	eq
 8013cae:	2301      	moveq	r3, #1
 8013cb0:	4620      	mov	r0, r4
 8013cb2:	bf08      	it	eq
 8013cb4:	61a3      	streq	r3, [r4, #24]
 8013cb6:	f000 f81f 	bl	8013cf8 <__sfp>
 8013cba:	6060      	str	r0, [r4, #4]
 8013cbc:	4620      	mov	r0, r4
 8013cbe:	f000 f81b 	bl	8013cf8 <__sfp>
 8013cc2:	60a0      	str	r0, [r4, #8]
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	f000 f817 	bl	8013cf8 <__sfp>
 8013cca:	2200      	movs	r2, #0
 8013ccc:	2104      	movs	r1, #4
 8013cce:	60e0      	str	r0, [r4, #12]
 8013cd0:	6860      	ldr	r0, [r4, #4]
 8013cd2:	f7ff ff81 	bl	8013bd8 <std>
 8013cd6:	2201      	movs	r2, #1
 8013cd8:	2109      	movs	r1, #9
 8013cda:	68a0      	ldr	r0, [r4, #8]
 8013cdc:	f7ff ff7c 	bl	8013bd8 <std>
 8013ce0:	2202      	movs	r2, #2
 8013ce2:	2112      	movs	r1, #18
 8013ce4:	68e0      	ldr	r0, [r4, #12]
 8013ce6:	f7ff ff77 	bl	8013bd8 <std>
 8013cea:	2301      	movs	r3, #1
 8013cec:	61a3      	str	r3, [r4, #24]
 8013cee:	e7d1      	b.n	8013c94 <__sinit+0xc>
 8013cf0:	08014f78 	.word	0x08014f78
 8013cf4:	08013c21 	.word	0x08013c21

08013cf8 <__sfp>:
 8013cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cfa:	4607      	mov	r7, r0
 8013cfc:	f7ff ffac 	bl	8013c58 <__sfp_lock_acquire>
 8013d00:	4b1e      	ldr	r3, [pc, #120]	; (8013d7c <__sfp+0x84>)
 8013d02:	681e      	ldr	r6, [r3, #0]
 8013d04:	69b3      	ldr	r3, [r6, #24]
 8013d06:	b913      	cbnz	r3, 8013d0e <__sfp+0x16>
 8013d08:	4630      	mov	r0, r6
 8013d0a:	f7ff ffbd 	bl	8013c88 <__sinit>
 8013d0e:	3648      	adds	r6, #72	; 0x48
 8013d10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013d14:	3b01      	subs	r3, #1
 8013d16:	d503      	bpl.n	8013d20 <__sfp+0x28>
 8013d18:	6833      	ldr	r3, [r6, #0]
 8013d1a:	b30b      	cbz	r3, 8013d60 <__sfp+0x68>
 8013d1c:	6836      	ldr	r6, [r6, #0]
 8013d1e:	e7f7      	b.n	8013d10 <__sfp+0x18>
 8013d20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013d24:	b9d5      	cbnz	r5, 8013d5c <__sfp+0x64>
 8013d26:	4b16      	ldr	r3, [pc, #88]	; (8013d80 <__sfp+0x88>)
 8013d28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013d2c:	60e3      	str	r3, [r4, #12]
 8013d2e:	6665      	str	r5, [r4, #100]	; 0x64
 8013d30:	f7ff fc2c 	bl	801358c <__retarget_lock_init_recursive>
 8013d34:	f7ff ff96 	bl	8013c64 <__sfp_lock_release>
 8013d38:	2208      	movs	r2, #8
 8013d3a:	4629      	mov	r1, r5
 8013d3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013d40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013d44:	6025      	str	r5, [r4, #0]
 8013d46:	61a5      	str	r5, [r4, #24]
 8013d48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013d4c:	f7fd fafa 	bl	8011344 <memset>
 8013d50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013d54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013d58:	4620      	mov	r0, r4
 8013d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d5c:	3468      	adds	r4, #104	; 0x68
 8013d5e:	e7d9      	b.n	8013d14 <__sfp+0x1c>
 8013d60:	2104      	movs	r1, #4
 8013d62:	4638      	mov	r0, r7
 8013d64:	f7ff ff62 	bl	8013c2c <__sfmoreglue>
 8013d68:	4604      	mov	r4, r0
 8013d6a:	6030      	str	r0, [r6, #0]
 8013d6c:	2800      	cmp	r0, #0
 8013d6e:	d1d5      	bne.n	8013d1c <__sfp+0x24>
 8013d70:	f7ff ff78 	bl	8013c64 <__sfp_lock_release>
 8013d74:	230c      	movs	r3, #12
 8013d76:	603b      	str	r3, [r7, #0]
 8013d78:	e7ee      	b.n	8013d58 <__sfp+0x60>
 8013d7a:	bf00      	nop
 8013d7c:	08014f78 	.word	0x08014f78
 8013d80:	ffff0001 	.word	0xffff0001

08013d84 <_fwalk_reent>:
 8013d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d88:	4606      	mov	r6, r0
 8013d8a:	4688      	mov	r8, r1
 8013d8c:	2700      	movs	r7, #0
 8013d8e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013d92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013d96:	f1b9 0901 	subs.w	r9, r9, #1
 8013d9a:	d505      	bpl.n	8013da8 <_fwalk_reent+0x24>
 8013d9c:	6824      	ldr	r4, [r4, #0]
 8013d9e:	2c00      	cmp	r4, #0
 8013da0:	d1f7      	bne.n	8013d92 <_fwalk_reent+0xe>
 8013da2:	4638      	mov	r0, r7
 8013da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013da8:	89ab      	ldrh	r3, [r5, #12]
 8013daa:	2b01      	cmp	r3, #1
 8013dac:	d907      	bls.n	8013dbe <_fwalk_reent+0x3a>
 8013dae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013db2:	3301      	adds	r3, #1
 8013db4:	d003      	beq.n	8013dbe <_fwalk_reent+0x3a>
 8013db6:	4629      	mov	r1, r5
 8013db8:	4630      	mov	r0, r6
 8013dba:	47c0      	blx	r8
 8013dbc:	4307      	orrs	r7, r0
 8013dbe:	3568      	adds	r5, #104	; 0x68
 8013dc0:	e7e9      	b.n	8013d96 <_fwalk_reent+0x12>

08013dc2 <__swhatbuf_r>:
 8013dc2:	b570      	push	{r4, r5, r6, lr}
 8013dc4:	460e      	mov	r6, r1
 8013dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dca:	4614      	mov	r4, r2
 8013dcc:	2900      	cmp	r1, #0
 8013dce:	461d      	mov	r5, r3
 8013dd0:	b096      	sub	sp, #88	; 0x58
 8013dd2:	da07      	bge.n	8013de4 <__swhatbuf_r+0x22>
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	602b      	str	r3, [r5, #0]
 8013dd8:	89b3      	ldrh	r3, [r6, #12]
 8013dda:	061a      	lsls	r2, r3, #24
 8013ddc:	d410      	bmi.n	8013e00 <__swhatbuf_r+0x3e>
 8013dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013de2:	e00e      	b.n	8013e02 <__swhatbuf_r+0x40>
 8013de4:	466a      	mov	r2, sp
 8013de6:	f000 f8fb 	bl	8013fe0 <_fstat_r>
 8013dea:	2800      	cmp	r0, #0
 8013dec:	dbf2      	blt.n	8013dd4 <__swhatbuf_r+0x12>
 8013dee:	9a01      	ldr	r2, [sp, #4]
 8013df0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013df4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013df8:	425a      	negs	r2, r3
 8013dfa:	415a      	adcs	r2, r3
 8013dfc:	602a      	str	r2, [r5, #0]
 8013dfe:	e7ee      	b.n	8013dde <__swhatbuf_r+0x1c>
 8013e00:	2340      	movs	r3, #64	; 0x40
 8013e02:	2000      	movs	r0, #0
 8013e04:	6023      	str	r3, [r4, #0]
 8013e06:	b016      	add	sp, #88	; 0x58
 8013e08:	bd70      	pop	{r4, r5, r6, pc}
	...

08013e0c <__smakebuf_r>:
 8013e0c:	898b      	ldrh	r3, [r1, #12]
 8013e0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013e10:	079d      	lsls	r5, r3, #30
 8013e12:	4606      	mov	r6, r0
 8013e14:	460c      	mov	r4, r1
 8013e16:	d507      	bpl.n	8013e28 <__smakebuf_r+0x1c>
 8013e18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013e1c:	6023      	str	r3, [r4, #0]
 8013e1e:	6123      	str	r3, [r4, #16]
 8013e20:	2301      	movs	r3, #1
 8013e22:	6163      	str	r3, [r4, #20]
 8013e24:	b002      	add	sp, #8
 8013e26:	bd70      	pop	{r4, r5, r6, pc}
 8013e28:	466a      	mov	r2, sp
 8013e2a:	ab01      	add	r3, sp, #4
 8013e2c:	f7ff ffc9 	bl	8013dc2 <__swhatbuf_r>
 8013e30:	9900      	ldr	r1, [sp, #0]
 8013e32:	4605      	mov	r5, r0
 8013e34:	4630      	mov	r0, r6
 8013e36:	f7fd fad9 	bl	80113ec <_malloc_r>
 8013e3a:	b948      	cbnz	r0, 8013e50 <__smakebuf_r+0x44>
 8013e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e40:	059a      	lsls	r2, r3, #22
 8013e42:	d4ef      	bmi.n	8013e24 <__smakebuf_r+0x18>
 8013e44:	f023 0303 	bic.w	r3, r3, #3
 8013e48:	f043 0302 	orr.w	r3, r3, #2
 8013e4c:	81a3      	strh	r3, [r4, #12]
 8013e4e:	e7e3      	b.n	8013e18 <__smakebuf_r+0xc>
 8013e50:	4b0d      	ldr	r3, [pc, #52]	; (8013e88 <__smakebuf_r+0x7c>)
 8013e52:	62b3      	str	r3, [r6, #40]	; 0x28
 8013e54:	89a3      	ldrh	r3, [r4, #12]
 8013e56:	6020      	str	r0, [r4, #0]
 8013e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e5c:	81a3      	strh	r3, [r4, #12]
 8013e5e:	9b00      	ldr	r3, [sp, #0]
 8013e60:	6120      	str	r0, [r4, #16]
 8013e62:	6163      	str	r3, [r4, #20]
 8013e64:	9b01      	ldr	r3, [sp, #4]
 8013e66:	b15b      	cbz	r3, 8013e80 <__smakebuf_r+0x74>
 8013e68:	4630      	mov	r0, r6
 8013e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e6e:	f000 f8c9 	bl	8014004 <_isatty_r>
 8013e72:	b128      	cbz	r0, 8013e80 <__smakebuf_r+0x74>
 8013e74:	89a3      	ldrh	r3, [r4, #12]
 8013e76:	f023 0303 	bic.w	r3, r3, #3
 8013e7a:	f043 0301 	orr.w	r3, r3, #1
 8013e7e:	81a3      	strh	r3, [r4, #12]
 8013e80:	89a0      	ldrh	r0, [r4, #12]
 8013e82:	4305      	orrs	r5, r0
 8013e84:	81a5      	strh	r5, [r4, #12]
 8013e86:	e7cd      	b.n	8013e24 <__smakebuf_r+0x18>
 8013e88:	08013c21 	.word	0x08013c21

08013e8c <_raise_r>:
 8013e8c:	291f      	cmp	r1, #31
 8013e8e:	b538      	push	{r3, r4, r5, lr}
 8013e90:	4604      	mov	r4, r0
 8013e92:	460d      	mov	r5, r1
 8013e94:	d904      	bls.n	8013ea0 <_raise_r+0x14>
 8013e96:	2316      	movs	r3, #22
 8013e98:	6003      	str	r3, [r0, #0]
 8013e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8013e9e:	bd38      	pop	{r3, r4, r5, pc}
 8013ea0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013ea2:	b112      	cbz	r2, 8013eaa <_raise_r+0x1e>
 8013ea4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013ea8:	b94b      	cbnz	r3, 8013ebe <_raise_r+0x32>
 8013eaa:	4620      	mov	r0, r4
 8013eac:	f000 f830 	bl	8013f10 <_getpid_r>
 8013eb0:	462a      	mov	r2, r5
 8013eb2:	4601      	mov	r1, r0
 8013eb4:	4620      	mov	r0, r4
 8013eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013eba:	f000 b817 	b.w	8013eec <_kill_r>
 8013ebe:	2b01      	cmp	r3, #1
 8013ec0:	d00a      	beq.n	8013ed8 <_raise_r+0x4c>
 8013ec2:	1c59      	adds	r1, r3, #1
 8013ec4:	d103      	bne.n	8013ece <_raise_r+0x42>
 8013ec6:	2316      	movs	r3, #22
 8013ec8:	6003      	str	r3, [r0, #0]
 8013eca:	2001      	movs	r0, #1
 8013ecc:	e7e7      	b.n	8013e9e <_raise_r+0x12>
 8013ece:	2400      	movs	r4, #0
 8013ed0:	4628      	mov	r0, r5
 8013ed2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013ed6:	4798      	blx	r3
 8013ed8:	2000      	movs	r0, #0
 8013eda:	e7e0      	b.n	8013e9e <_raise_r+0x12>

08013edc <raise>:
 8013edc:	4b02      	ldr	r3, [pc, #8]	; (8013ee8 <raise+0xc>)
 8013ede:	4601      	mov	r1, r0
 8013ee0:	6818      	ldr	r0, [r3, #0]
 8013ee2:	f7ff bfd3 	b.w	8013e8c <_raise_r>
 8013ee6:	bf00      	nop
 8013ee8:	200001e8 	.word	0x200001e8

08013eec <_kill_r>:
 8013eec:	b538      	push	{r3, r4, r5, lr}
 8013eee:	2300      	movs	r3, #0
 8013ef0:	4d06      	ldr	r5, [pc, #24]	; (8013f0c <_kill_r+0x20>)
 8013ef2:	4604      	mov	r4, r0
 8013ef4:	4608      	mov	r0, r1
 8013ef6:	4611      	mov	r1, r2
 8013ef8:	602b      	str	r3, [r5, #0]
 8013efa:	f7f2 f842 	bl	8005f82 <_kill>
 8013efe:	1c43      	adds	r3, r0, #1
 8013f00:	d102      	bne.n	8013f08 <_kill_r+0x1c>
 8013f02:	682b      	ldr	r3, [r5, #0]
 8013f04:	b103      	cbz	r3, 8013f08 <_kill_r+0x1c>
 8013f06:	6023      	str	r3, [r4, #0]
 8013f08:	bd38      	pop	{r3, r4, r5, pc}
 8013f0a:	bf00      	nop
 8013f0c:	20002118 	.word	0x20002118

08013f10 <_getpid_r>:
 8013f10:	f7f2 b830 	b.w	8005f74 <_getpid>

08013f14 <__sread>:
 8013f14:	b510      	push	{r4, lr}
 8013f16:	460c      	mov	r4, r1
 8013f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f1c:	f000 f894 	bl	8014048 <_read_r>
 8013f20:	2800      	cmp	r0, #0
 8013f22:	bfab      	itete	ge
 8013f24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013f26:	89a3      	ldrhlt	r3, [r4, #12]
 8013f28:	181b      	addge	r3, r3, r0
 8013f2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013f2e:	bfac      	ite	ge
 8013f30:	6563      	strge	r3, [r4, #84]	; 0x54
 8013f32:	81a3      	strhlt	r3, [r4, #12]
 8013f34:	bd10      	pop	{r4, pc}

08013f36 <__swrite>:
 8013f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f3a:	461f      	mov	r7, r3
 8013f3c:	898b      	ldrh	r3, [r1, #12]
 8013f3e:	4605      	mov	r5, r0
 8013f40:	05db      	lsls	r3, r3, #23
 8013f42:	460c      	mov	r4, r1
 8013f44:	4616      	mov	r6, r2
 8013f46:	d505      	bpl.n	8013f54 <__swrite+0x1e>
 8013f48:	2302      	movs	r3, #2
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f50:	f000 f868 	bl	8014024 <_lseek_r>
 8013f54:	89a3      	ldrh	r3, [r4, #12]
 8013f56:	4632      	mov	r2, r6
 8013f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013f5c:	81a3      	strh	r3, [r4, #12]
 8013f5e:	4628      	mov	r0, r5
 8013f60:	463b      	mov	r3, r7
 8013f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f6a:	f000 b817 	b.w	8013f9c <_write_r>

08013f6e <__sseek>:
 8013f6e:	b510      	push	{r4, lr}
 8013f70:	460c      	mov	r4, r1
 8013f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f76:	f000 f855 	bl	8014024 <_lseek_r>
 8013f7a:	1c43      	adds	r3, r0, #1
 8013f7c:	89a3      	ldrh	r3, [r4, #12]
 8013f7e:	bf15      	itete	ne
 8013f80:	6560      	strne	r0, [r4, #84]	; 0x54
 8013f82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013f86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013f8a:	81a3      	strheq	r3, [r4, #12]
 8013f8c:	bf18      	it	ne
 8013f8e:	81a3      	strhne	r3, [r4, #12]
 8013f90:	bd10      	pop	{r4, pc}

08013f92 <__sclose>:
 8013f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f96:	f000 b813 	b.w	8013fc0 <_close_r>
	...

08013f9c <_write_r>:
 8013f9c:	b538      	push	{r3, r4, r5, lr}
 8013f9e:	4604      	mov	r4, r0
 8013fa0:	4608      	mov	r0, r1
 8013fa2:	4611      	mov	r1, r2
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	4d05      	ldr	r5, [pc, #20]	; (8013fbc <_write_r+0x20>)
 8013fa8:	602a      	str	r2, [r5, #0]
 8013faa:	461a      	mov	r2, r3
 8013fac:	f7f2 f820 	bl	8005ff0 <_write>
 8013fb0:	1c43      	adds	r3, r0, #1
 8013fb2:	d102      	bne.n	8013fba <_write_r+0x1e>
 8013fb4:	682b      	ldr	r3, [r5, #0]
 8013fb6:	b103      	cbz	r3, 8013fba <_write_r+0x1e>
 8013fb8:	6023      	str	r3, [r4, #0]
 8013fba:	bd38      	pop	{r3, r4, r5, pc}
 8013fbc:	20002118 	.word	0x20002118

08013fc0 <_close_r>:
 8013fc0:	b538      	push	{r3, r4, r5, lr}
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	4d05      	ldr	r5, [pc, #20]	; (8013fdc <_close_r+0x1c>)
 8013fc6:	4604      	mov	r4, r0
 8013fc8:	4608      	mov	r0, r1
 8013fca:	602b      	str	r3, [r5, #0]
 8013fcc:	f7f2 f82c 	bl	8006028 <_close>
 8013fd0:	1c43      	adds	r3, r0, #1
 8013fd2:	d102      	bne.n	8013fda <_close_r+0x1a>
 8013fd4:	682b      	ldr	r3, [r5, #0]
 8013fd6:	b103      	cbz	r3, 8013fda <_close_r+0x1a>
 8013fd8:	6023      	str	r3, [r4, #0]
 8013fda:	bd38      	pop	{r3, r4, r5, pc}
 8013fdc:	20002118 	.word	0x20002118

08013fe0 <_fstat_r>:
 8013fe0:	b538      	push	{r3, r4, r5, lr}
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	4d06      	ldr	r5, [pc, #24]	; (8014000 <_fstat_r+0x20>)
 8013fe6:	4604      	mov	r4, r0
 8013fe8:	4608      	mov	r0, r1
 8013fea:	4611      	mov	r1, r2
 8013fec:	602b      	str	r3, [r5, #0]
 8013fee:	f7f2 f826 	bl	800603e <_fstat>
 8013ff2:	1c43      	adds	r3, r0, #1
 8013ff4:	d102      	bne.n	8013ffc <_fstat_r+0x1c>
 8013ff6:	682b      	ldr	r3, [r5, #0]
 8013ff8:	b103      	cbz	r3, 8013ffc <_fstat_r+0x1c>
 8013ffa:	6023      	str	r3, [r4, #0]
 8013ffc:	bd38      	pop	{r3, r4, r5, pc}
 8013ffe:	bf00      	nop
 8014000:	20002118 	.word	0x20002118

08014004 <_isatty_r>:
 8014004:	b538      	push	{r3, r4, r5, lr}
 8014006:	2300      	movs	r3, #0
 8014008:	4d05      	ldr	r5, [pc, #20]	; (8014020 <_isatty_r+0x1c>)
 801400a:	4604      	mov	r4, r0
 801400c:	4608      	mov	r0, r1
 801400e:	602b      	str	r3, [r5, #0]
 8014010:	f7f2 f824 	bl	800605c <_isatty>
 8014014:	1c43      	adds	r3, r0, #1
 8014016:	d102      	bne.n	801401e <_isatty_r+0x1a>
 8014018:	682b      	ldr	r3, [r5, #0]
 801401a:	b103      	cbz	r3, 801401e <_isatty_r+0x1a>
 801401c:	6023      	str	r3, [r4, #0]
 801401e:	bd38      	pop	{r3, r4, r5, pc}
 8014020:	20002118 	.word	0x20002118

08014024 <_lseek_r>:
 8014024:	b538      	push	{r3, r4, r5, lr}
 8014026:	4604      	mov	r4, r0
 8014028:	4608      	mov	r0, r1
 801402a:	4611      	mov	r1, r2
 801402c:	2200      	movs	r2, #0
 801402e:	4d05      	ldr	r5, [pc, #20]	; (8014044 <_lseek_r+0x20>)
 8014030:	602a      	str	r2, [r5, #0]
 8014032:	461a      	mov	r2, r3
 8014034:	f7f2 f81c 	bl	8006070 <_lseek>
 8014038:	1c43      	adds	r3, r0, #1
 801403a:	d102      	bne.n	8014042 <_lseek_r+0x1e>
 801403c:	682b      	ldr	r3, [r5, #0]
 801403e:	b103      	cbz	r3, 8014042 <_lseek_r+0x1e>
 8014040:	6023      	str	r3, [r4, #0]
 8014042:	bd38      	pop	{r3, r4, r5, pc}
 8014044:	20002118 	.word	0x20002118

08014048 <_read_r>:
 8014048:	b538      	push	{r3, r4, r5, lr}
 801404a:	4604      	mov	r4, r0
 801404c:	4608      	mov	r0, r1
 801404e:	4611      	mov	r1, r2
 8014050:	2200      	movs	r2, #0
 8014052:	4d05      	ldr	r5, [pc, #20]	; (8014068 <_read_r+0x20>)
 8014054:	602a      	str	r2, [r5, #0]
 8014056:	461a      	mov	r2, r3
 8014058:	f7f1 ffad 	bl	8005fb6 <_read>
 801405c:	1c43      	adds	r3, r0, #1
 801405e:	d102      	bne.n	8014066 <_read_r+0x1e>
 8014060:	682b      	ldr	r3, [r5, #0]
 8014062:	b103      	cbz	r3, 8014066 <_read_r+0x1e>
 8014064:	6023      	str	r3, [r4, #0]
 8014066:	bd38      	pop	{r3, r4, r5, pc}
 8014068:	20002118 	.word	0x20002118

0801406c <_init>:
 801406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801406e:	bf00      	nop
 8014070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014072:	bc08      	pop	{r3}
 8014074:	469e      	mov	lr, r3
 8014076:	4770      	bx	lr

08014078 <_fini>:
 8014078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801407a:	bf00      	nop
 801407c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801407e:	bc08      	pop	{r3}
 8014080:	469e      	mov	lr, r3
 8014082:	4770      	bx	lr
