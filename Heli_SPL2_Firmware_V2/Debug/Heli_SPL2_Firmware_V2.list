
Heli_SPL2_Firmware_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ad4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012e4  08014c60  08014c60  00024c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f44  08015f44  000303b0  2**0
                  CONTENTS
  4 .ARM          00000008  08015f44  08015f44  00025f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015f4c  08015f4c  000303b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08015f4c  08015f4c  00025f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015f58  08015f58  00025f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b0  20000000  08015f5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e1c  200003b0  0801630c  000303b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021cc  0801630c  000321cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f7e1  00000000  00000000  000303d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006613  00000000  00000000  0007fbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023d8  00000000  00000000  000861d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021f8  00000000  00000000  000885a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a0aa  00000000  00000000  0008a7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000294bc  00000000  00000000  000b484a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d206b  00000000  00000000  000ddd06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001afd71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b168  00000000  00000000  001afdc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200003b0 	.word	0x200003b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08014c44 	.word	0x08014c44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200003b4 	.word	0x200003b4
 80001c4:	08014c44 	.word	0x08014c44

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_frsub>:
 8000be0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	e002      	b.n	8000bec <__addsf3>
 8000be6:	bf00      	nop

08000be8 <__aeabi_fsub>:
 8000be8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bec <__addsf3>:
 8000bec:	0042      	lsls	r2, r0, #1
 8000bee:	bf1f      	itttt	ne
 8000bf0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bf4:	ea92 0f03 	teqne	r2, r3
 8000bf8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c00:	d06a      	beq.n	8000cd8 <__addsf3+0xec>
 8000c02:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c0a:	bfc1      	itttt	gt
 8000c0c:	18d2      	addgt	r2, r2, r3
 8000c0e:	4041      	eorgt	r1, r0
 8000c10:	4048      	eorgt	r0, r1
 8000c12:	4041      	eorgt	r1, r0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	2b19      	cmp	r3, #25
 8000c1a:	bf88      	it	hi
 8000c1c:	4770      	bxhi	lr
 8000c1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4240      	negne	r0, r0
 8000c2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4249      	negne	r1, r1
 8000c3e:	ea92 0f03 	teq	r2, r3
 8000c42:	d03f      	beq.n	8000cc4 <__addsf3+0xd8>
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	fa41 fc03 	asr.w	ip, r1, r3
 8000c4c:	eb10 000c 	adds.w	r0, r0, ip
 8000c50:	f1c3 0320 	rsb	r3, r3, #32
 8000c54:	fa01 f103 	lsl.w	r1, r1, r3
 8000c58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5c:	d502      	bpl.n	8000c64 <__addsf3+0x78>
 8000c5e:	4249      	negs	r1, r1
 8000c60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c68:	d313      	bcc.n	8000c92 <__addsf3+0xa6>
 8000c6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c6e:	d306      	bcc.n	8000c7e <__addsf3+0x92>
 8000c70:	0840      	lsrs	r0, r0, #1
 8000c72:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c76:	f102 0201 	add.w	r2, r2, #1
 8000c7a:	2afe      	cmp	r2, #254	; 0xfe
 8000c7c:	d251      	bcs.n	8000d22 <__addsf3+0x136>
 8000c7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c86:	bf08      	it	eq
 8000c88:	f020 0001 	biceq.w	r0, r0, #1
 8000c8c:	ea40 0003 	orr.w	r0, r0, r3
 8000c90:	4770      	bx	lr
 8000c92:	0049      	lsls	r1, r1, #1
 8000c94:	eb40 0000 	adc.w	r0, r0, r0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	bf28      	it	cs
 8000c9c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ca0:	d2ed      	bcs.n	8000c7e <__addsf3+0x92>
 8000ca2:	fab0 fc80 	clz	ip, r0
 8000ca6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000caa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cae:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cb2:	bfaa      	itet	ge
 8000cb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb8:	4252      	neglt	r2, r2
 8000cba:	4318      	orrge	r0, r3
 8000cbc:	bfbc      	itt	lt
 8000cbe:	40d0      	lsrlt	r0, r2
 8000cc0:	4318      	orrlt	r0, r3
 8000cc2:	4770      	bx	lr
 8000cc4:	f092 0f00 	teq	r2, #0
 8000cc8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ccc:	bf06      	itte	eq
 8000cce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cd2:	3201      	addeq	r2, #1
 8000cd4:	3b01      	subne	r3, #1
 8000cd6:	e7b5      	b.n	8000c44 <__addsf3+0x58>
 8000cd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce0:	bf18      	it	ne
 8000ce2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce6:	d021      	beq.n	8000d2c <__addsf3+0x140>
 8000ce8:	ea92 0f03 	teq	r2, r3
 8000cec:	d004      	beq.n	8000cf8 <__addsf3+0x10c>
 8000cee:	f092 0f00 	teq	r2, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	4608      	moveq	r0, r1
 8000cf6:	4770      	bx	lr
 8000cf8:	ea90 0f01 	teq	r0, r1
 8000cfc:	bf1c      	itt	ne
 8000cfe:	2000      	movne	r0, #0
 8000d00:	4770      	bxne	lr
 8000d02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d06:	d104      	bne.n	8000d12 <__addsf3+0x126>
 8000d08:	0040      	lsls	r0, r0, #1
 8000d0a:	bf28      	it	cs
 8000d0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d16:	bf3c      	itt	cc
 8000d18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d1c:	4770      	bxcc	lr
 8000d1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2a:	4770      	bx	lr
 8000d2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d30:	bf16      	itet	ne
 8000d32:	4608      	movne	r0, r1
 8000d34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d38:	4601      	movne	r1, r0
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	bf06      	itte	eq
 8000d3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d42:	ea90 0f01 	teqeq	r0, r1
 8000d46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_ui2f>:
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e004      	b.n	8000d5c <__aeabi_i2f+0x8>
 8000d52:	bf00      	nop

08000d54 <__aeabi_i2f>:
 8000d54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d58:	bf48      	it	mi
 8000d5a:	4240      	negmi	r0, r0
 8000d5c:	ea5f 0c00 	movs.w	ip, r0
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d68:	4601      	mov	r1, r0
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	e01c      	b.n	8000daa <__aeabi_l2f+0x2a>

08000d70 <__aeabi_ul2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e00a      	b.n	8000d94 <__aeabi_l2f+0x14>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_l2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d8c:	d502      	bpl.n	8000d94 <__aeabi_l2f+0x14>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	ea5f 0c01 	movs.w	ip, r1
 8000d98:	bf02      	ittt	eq
 8000d9a:	4684      	moveq	ip, r0
 8000d9c:	4601      	moveq	r1, r0
 8000d9e:	2000      	moveq	r0, #0
 8000da0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000da4:	bf08      	it	eq
 8000da6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000daa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dae:	fabc f28c 	clz	r2, ip
 8000db2:	3a08      	subs	r2, #8
 8000db4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db8:	db10      	blt.n	8000ddc <__aeabi_l2f+0x5c>
 8000dba:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dc4:	f1c2 0220 	rsb	r2, r2, #32
 8000dc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dcc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd0:	eb43 0002 	adc.w	r0, r3, r2
 8000dd4:	bf08      	it	eq
 8000dd6:	f020 0001 	biceq.w	r0, r0, #1
 8000dda:	4770      	bx	lr
 8000ddc:	f102 0220 	add.w	r2, r2, #32
 8000de0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dec:	fa21 f202 	lsr.w	r2, r1, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fmul>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d06f      	beq.n	8000ef4 <__aeabi_fmul+0xf8>
 8000e14:	441a      	add	r2, r3
 8000e16:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1a:	0240      	lsls	r0, r0, #9
 8000e1c:	bf18      	it	ne
 8000e1e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e22:	d01e      	beq.n	8000e62 <__aeabi_fmul+0x66>
 8000e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e28:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e2c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e30:	fba0 3101 	umull	r3, r1, r0, r1
 8000e34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e3c:	bf3e      	ittt	cc
 8000e3e:	0049      	lslcc	r1, r1, #1
 8000e40:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e44:	005b      	lslcc	r3, r3, #1
 8000e46:	ea40 0001 	orr.w	r0, r0, r1
 8000e4a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e4e:	2afd      	cmp	r2, #253	; 0xfd
 8000e50:	d81d      	bhi.n	8000e8e <__aeabi_fmul+0x92>
 8000e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e5a:	bf08      	it	eq
 8000e5c:	f020 0001 	biceq.w	r0, r0, #1
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e6a:	bf08      	it	eq
 8000e6c:	0249      	lsleq	r1, r1, #9
 8000e6e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e72:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e76:	3a7f      	subs	r2, #127	; 0x7f
 8000e78:	bfc2      	ittt	gt
 8000e7a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e7e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e82:	4770      	bxgt	lr
 8000e84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	3a01      	subs	r2, #1
 8000e8e:	dc5d      	bgt.n	8000f4c <__aeabi_fmul+0x150>
 8000e90:	f112 0f19 	cmn.w	r2, #25
 8000e94:	bfdc      	itt	le
 8000e96:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e9a:	4770      	bxle	lr
 8000e9c:	f1c2 0200 	rsb	r2, r2, #0
 8000ea0:	0041      	lsls	r1, r0, #1
 8000ea2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ea6:	f1c2 0220 	rsb	r2, r2, #32
 8000eaa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eae:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eb2:	f140 0000 	adc.w	r0, r0, #0
 8000eb6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eba:	bf08      	it	eq
 8000ebc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec0:	4770      	bx	lr
 8000ec2:	f092 0f00 	teq	r2, #0
 8000ec6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0040      	lsleq	r0, r0, #1
 8000ece:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed2:	3a01      	subeq	r2, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fmul+0xce>
 8000ed6:	ea40 000c 	orr.w	r0, r0, ip
 8000eda:	f093 0f00 	teq	r3, #0
 8000ede:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0049      	lsleq	r1, r1, #1
 8000ee6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eea:	3b01      	subeq	r3, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xe6>
 8000eee:	ea41 010c 	orr.w	r1, r1, ip
 8000ef2:	e78f      	b.n	8000e14 <__aeabi_fmul+0x18>
 8000ef4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	bf18      	it	ne
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d00a      	beq.n	8000f1a <__aeabi_fmul+0x11e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	d1d8      	bne.n	8000ec2 <__aeabi_fmul+0xc6>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f18:	4770      	bx	lr
 8000f1a:	f090 0f00 	teq	r0, #0
 8000f1e:	bf17      	itett	ne
 8000f20:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f24:	4608      	moveq	r0, r1
 8000f26:	f091 0f00 	teqne	r1, #0
 8000f2a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f2e:	d014      	beq.n	8000f5a <__aeabi_fmul+0x15e>
 8000f30:	ea92 0f0c 	teq	r2, ip
 8000f34:	d101      	bne.n	8000f3a <__aeabi_fmul+0x13e>
 8000f36:	0242      	lsls	r2, r0, #9
 8000f38:	d10f      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f3a:	ea93 0f0c 	teq	r3, ip
 8000f3e:	d103      	bne.n	8000f48 <__aeabi_fmul+0x14c>
 8000f40:	024b      	lsls	r3, r1, #9
 8000f42:	bf18      	it	ne
 8000f44:	4608      	movne	r0, r1
 8000f46:	d108      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f48:	ea80 0001 	eor.w	r0, r0, r1
 8000f4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f58:	4770      	bx	lr
 8000f5a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f5e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f62:	4770      	bx	lr

08000f64 <__aeabi_fdiv>:
 8000f64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f6c:	bf1e      	ittt	ne
 8000f6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f72:	ea92 0f0c 	teqne	r2, ip
 8000f76:	ea93 0f0c 	teqne	r3, ip
 8000f7a:	d069      	beq.n	8001050 <__aeabi_fdiv+0xec>
 8000f7c:	eba2 0203 	sub.w	r2, r2, r3
 8000f80:	ea80 0c01 	eor.w	ip, r0, r1
 8000f84:	0249      	lsls	r1, r1, #9
 8000f86:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f8a:	d037      	beq.n	8000ffc <__aeabi_fdiv+0x98>
 8000f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f90:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f94:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	bf38      	it	cc
 8000fa0:	005b      	lslcc	r3, r3, #1
 8000fa2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fa6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000faa:	428b      	cmp	r3, r1
 8000fac:	bf24      	itt	cs
 8000fae:	1a5b      	subcs	r3, r3, r1
 8000fb0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fb4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fbe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fc2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fc6:	bf24      	itt	cs
 8000fc8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fcc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fd0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fd4:	bf24      	itt	cs
 8000fd6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fda:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	bf18      	it	ne
 8000fe2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fe6:	d1e0      	bne.n	8000faa <__aeabi_fdiv+0x46>
 8000fe8:	2afd      	cmp	r2, #253	; 0xfd
 8000fea:	f63f af50 	bhi.w	8000e8e <__aeabi_fmul+0x92>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ff4:	bf08      	it	eq
 8000ff6:	f020 0001 	biceq.w	r0, r0, #1
 8000ffa:	4770      	bx	lr
 8000ffc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001000:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001004:	327f      	adds	r2, #127	; 0x7f
 8001006:	bfc2      	ittt	gt
 8001008:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800100c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001010:	4770      	bxgt	lr
 8001012:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	3a01      	subs	r2, #1
 800101c:	e737      	b.n	8000e8e <__aeabi_fmul+0x92>
 800101e:	f092 0f00 	teq	r2, #0
 8001022:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001026:	bf02      	ittt	eq
 8001028:	0040      	lsleq	r0, r0, #1
 800102a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800102e:	3a01      	subeq	r2, #1
 8001030:	d0f9      	beq.n	8001026 <__aeabi_fdiv+0xc2>
 8001032:	ea40 000c 	orr.w	r0, r0, ip
 8001036:	f093 0f00 	teq	r3, #0
 800103a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0049      	lsleq	r1, r1, #1
 8001042:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001046:	3b01      	subeq	r3, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xda>
 800104a:	ea41 010c 	orr.w	r1, r1, ip
 800104e:	e795      	b.n	8000f7c <__aeabi_fdiv+0x18>
 8001050:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001054:	ea92 0f0c 	teq	r2, ip
 8001058:	d108      	bne.n	800106c <__aeabi_fdiv+0x108>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	f47f af7d 	bne.w	8000f5a <__aeabi_fmul+0x15e>
 8001060:	ea93 0f0c 	teq	r3, ip
 8001064:	f47f af70 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001068:	4608      	mov	r0, r1
 800106a:	e776      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800106c:	ea93 0f0c 	teq	r3, ip
 8001070:	d104      	bne.n	800107c <__aeabi_fdiv+0x118>
 8001072:	024b      	lsls	r3, r1, #9
 8001074:	f43f af4c 	beq.w	8000f10 <__aeabi_fmul+0x114>
 8001078:	4608      	mov	r0, r1
 800107a:	e76e      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800107c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001080:	bf18      	it	ne
 8001082:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001086:	d1ca      	bne.n	800101e <__aeabi_fdiv+0xba>
 8001088:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800108c:	f47f af5c 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001090:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001094:	f47f af3c 	bne.w	8000f10 <__aeabi_fmul+0x114>
 8001098:	e75f      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800109a:	bf00      	nop

0800109c <__gesf2>:
 800109c:	f04f 3cff 	mov.w	ip, #4294967295
 80010a0:	e006      	b.n	80010b0 <__cmpsf2+0x4>
 80010a2:	bf00      	nop

080010a4 <__lesf2>:
 80010a4:	f04f 0c01 	mov.w	ip, #1
 80010a8:	e002      	b.n	80010b0 <__cmpsf2+0x4>
 80010aa:	bf00      	nop

080010ac <__cmpsf2>:
 80010ac:	f04f 0c01 	mov.w	ip, #1
 80010b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c0:	bf18      	it	ne
 80010c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010c6:	d011      	beq.n	80010ec <__cmpsf2+0x40>
 80010c8:	b001      	add	sp, #4
 80010ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ce:	bf18      	it	ne
 80010d0:	ea90 0f01 	teqne	r0, r1
 80010d4:	bf58      	it	pl
 80010d6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010da:	bf88      	it	hi
 80010dc:	17c8      	asrhi	r0, r1, #31
 80010de:	bf38      	it	cc
 80010e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010e4:	bf18      	it	ne
 80010e6:	f040 0001 	orrne.w	r0, r0, #1
 80010ea:	4770      	bx	lr
 80010ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f0:	d102      	bne.n	80010f8 <__cmpsf2+0x4c>
 80010f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010f6:	d105      	bne.n	8001104 <__cmpsf2+0x58>
 80010f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010fc:	d1e4      	bne.n	80010c8 <__cmpsf2+0x1c>
 80010fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001102:	d0e1      	beq.n	80010c8 <__cmpsf2+0x1c>
 8001104:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <__aeabi_cfrcmple>:
 800110c:	4684      	mov	ip, r0
 800110e:	4608      	mov	r0, r1
 8001110:	4661      	mov	r1, ip
 8001112:	e7ff      	b.n	8001114 <__aeabi_cfcmpeq>

08001114 <__aeabi_cfcmpeq>:
 8001114:	b50f      	push	{r0, r1, r2, r3, lr}
 8001116:	f7ff ffc9 	bl	80010ac <__cmpsf2>
 800111a:	2800      	cmp	r0, #0
 800111c:	bf48      	it	mi
 800111e:	f110 0f00 	cmnmi.w	r0, #0
 8001122:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001124 <__aeabi_fcmpeq>:
 8001124:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001128:	f7ff fff4 	bl	8001114 <__aeabi_cfcmpeq>
 800112c:	bf0c      	ite	eq
 800112e:	2001      	moveq	r0, #1
 8001130:	2000      	movne	r0, #0
 8001132:	f85d fb08 	ldr.w	pc, [sp], #8
 8001136:	bf00      	nop

08001138 <__aeabi_fcmplt>:
 8001138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800113c:	f7ff ffea 	bl	8001114 <__aeabi_cfcmpeq>
 8001140:	bf34      	ite	cc
 8001142:	2001      	movcc	r0, #1
 8001144:	2000      	movcs	r0, #0
 8001146:	f85d fb08 	ldr.w	pc, [sp], #8
 800114a:	bf00      	nop

0800114c <__aeabi_fcmple>:
 800114c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001150:	f7ff ffe0 	bl	8001114 <__aeabi_cfcmpeq>
 8001154:	bf94      	ite	ls
 8001156:	2001      	movls	r0, #1
 8001158:	2000      	movhi	r0, #0
 800115a:	f85d fb08 	ldr.w	pc, [sp], #8
 800115e:	bf00      	nop

08001160 <__aeabi_fcmpge>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff ffd2 	bl	800110c <__aeabi_cfrcmple>
 8001168:	bf94      	ite	ls
 800116a:	2001      	movls	r0, #1
 800116c:	2000      	movhi	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmpgt>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffc8 	bl	800110c <__aeabi_cfrcmple>
 800117c:	bf34      	ite	cc
 800117e:	2001      	movcc	r0, #1
 8001180:	2000      	movcs	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmpun>:
 8001188:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800118c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001190:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001194:	d102      	bne.n	800119c <__aeabi_fcmpun+0x14>
 8001196:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800119a:	d108      	bne.n	80011ae <__aeabi_fcmpun+0x26>
 800119c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011a0:	d102      	bne.n	80011a8 <__aeabi_fcmpun+0x20>
 80011a2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011a6:	d102      	bne.n	80011ae <__aeabi_fcmpun+0x26>
 80011a8:	f04f 0000 	mov.w	r0, #0
 80011ac:	4770      	bx	lr
 80011ae:	f04f 0001 	mov.w	r0, #1
 80011b2:	4770      	bx	lr

080011b4 <__aeabi_f2iz>:
 80011b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011bc:	d30f      	bcc.n	80011de <__aeabi_f2iz+0x2a>
 80011be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011c6:	d90d      	bls.n	80011e4 <__aeabi_f2iz+0x30>
 80011c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	bf18      	it	ne
 80011da:	4240      	negne	r0, r0
 80011dc:	4770      	bx	lr
 80011de:	f04f 0000 	mov.w	r0, #0
 80011e2:	4770      	bx	lr
 80011e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e8:	d101      	bne.n	80011ee <__aeabi_f2iz+0x3a>
 80011ea:	0242      	lsls	r2, r0, #9
 80011ec:	d105      	bne.n	80011fa <__aeabi_f2iz+0x46>
 80011ee:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011f2:	bf08      	it	eq
 80011f4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011f8:	4770      	bx	lr
 80011fa:	f04f 0000 	mov.w	r0, #0
 80011fe:	4770      	bx	lr

08001200 <__aeabi_f2uiz>:
 8001200:	0042      	lsls	r2, r0, #1
 8001202:	d20e      	bcs.n	8001222 <__aeabi_f2uiz+0x22>
 8001204:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001208:	d30b      	bcc.n	8001222 <__aeabi_f2uiz+0x22>
 800120a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800120e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001212:	d409      	bmi.n	8001228 <__aeabi_f2uiz+0x28>
 8001214:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800121c:	fa23 f002 	lsr.w	r0, r3, r2
 8001220:	4770      	bx	lr
 8001222:	f04f 0000 	mov.w	r0, #0
 8001226:	4770      	bx	lr
 8001228:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800122c:	d101      	bne.n	8001232 <__aeabi_f2uiz+0x32>
 800122e:	0242      	lsls	r2, r0, #9
 8001230:	d102      	bne.n	8001238 <__aeabi_f2uiz+0x38>
 8001232:	f04f 30ff 	mov.w	r0, #4294967295
 8001236:	4770      	bx	lr
 8001238:	f04f 0000 	mov.w	r0, #0
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <__aeabi_uldivmod>:
 8001240:	b953      	cbnz	r3, 8001258 <__aeabi_uldivmod+0x18>
 8001242:	b94a      	cbnz	r2, 8001258 <__aeabi_uldivmod+0x18>
 8001244:	2900      	cmp	r1, #0
 8001246:	bf08      	it	eq
 8001248:	2800      	cmpeq	r0, #0
 800124a:	bf1c      	itt	ne
 800124c:	f04f 31ff 	movne.w	r1, #4294967295
 8001250:	f04f 30ff 	movne.w	r0, #4294967295
 8001254:	f000 b96e 	b.w	8001534 <__aeabi_idiv0>
 8001258:	f1ad 0c08 	sub.w	ip, sp, #8
 800125c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001260:	f000 f806 	bl	8001270 <__udivmoddi4>
 8001264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800126c:	b004      	add	sp, #16
 800126e:	4770      	bx	lr

08001270 <__udivmoddi4>:
 8001270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001274:	9e08      	ldr	r6, [sp, #32]
 8001276:	460d      	mov	r5, r1
 8001278:	4604      	mov	r4, r0
 800127a:	468e      	mov	lr, r1
 800127c:	2b00      	cmp	r3, #0
 800127e:	f040 8083 	bne.w	8001388 <__udivmoddi4+0x118>
 8001282:	428a      	cmp	r2, r1
 8001284:	4617      	mov	r7, r2
 8001286:	d947      	bls.n	8001318 <__udivmoddi4+0xa8>
 8001288:	fab2 f382 	clz	r3, r2
 800128c:	b14b      	cbz	r3, 80012a2 <__udivmoddi4+0x32>
 800128e:	f1c3 0120 	rsb	r1, r3, #32
 8001292:	fa05 fe03 	lsl.w	lr, r5, r3
 8001296:	fa20 f101 	lsr.w	r1, r0, r1
 800129a:	409f      	lsls	r7, r3
 800129c:	ea41 0e0e 	orr.w	lr, r1, lr
 80012a0:	409c      	lsls	r4, r3
 80012a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80012a6:	fbbe fcf8 	udiv	ip, lr, r8
 80012aa:	fa1f f987 	uxth.w	r9, r7
 80012ae:	fb08 e21c 	mls	r2, r8, ip, lr
 80012b2:	fb0c f009 	mul.w	r0, ip, r9
 80012b6:	0c21      	lsrs	r1, r4, #16
 80012b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80012bc:	4290      	cmp	r0, r2
 80012be:	d90a      	bls.n	80012d6 <__udivmoddi4+0x66>
 80012c0:	18ba      	adds	r2, r7, r2
 80012c2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80012c6:	f080 8118 	bcs.w	80014fa <__udivmoddi4+0x28a>
 80012ca:	4290      	cmp	r0, r2
 80012cc:	f240 8115 	bls.w	80014fa <__udivmoddi4+0x28a>
 80012d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80012d4:	443a      	add	r2, r7
 80012d6:	1a12      	subs	r2, r2, r0
 80012d8:	fbb2 f0f8 	udiv	r0, r2, r8
 80012dc:	fb08 2210 	mls	r2, r8, r0, r2
 80012e0:	fb00 f109 	mul.w	r1, r0, r9
 80012e4:	b2a4      	uxth	r4, r4
 80012e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012ea:	42a1      	cmp	r1, r4
 80012ec:	d909      	bls.n	8001302 <__udivmoddi4+0x92>
 80012ee:	193c      	adds	r4, r7, r4
 80012f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80012f4:	f080 8103 	bcs.w	80014fe <__udivmoddi4+0x28e>
 80012f8:	42a1      	cmp	r1, r4
 80012fa:	f240 8100 	bls.w	80014fe <__udivmoddi4+0x28e>
 80012fe:	3802      	subs	r0, #2
 8001300:	443c      	add	r4, r7
 8001302:	1a64      	subs	r4, r4, r1
 8001304:	2100      	movs	r1, #0
 8001306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800130a:	b11e      	cbz	r6, 8001314 <__udivmoddi4+0xa4>
 800130c:	2200      	movs	r2, #0
 800130e:	40dc      	lsrs	r4, r3
 8001310:	e9c6 4200 	strd	r4, r2, [r6]
 8001314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001318:	b902      	cbnz	r2, 800131c <__udivmoddi4+0xac>
 800131a:	deff      	udf	#255	; 0xff
 800131c:	fab2 f382 	clz	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d14f      	bne.n	80013c4 <__udivmoddi4+0x154>
 8001324:	1a8d      	subs	r5, r1, r2
 8001326:	2101      	movs	r1, #1
 8001328:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800132c:	fa1f f882 	uxth.w	r8, r2
 8001330:	fbb5 fcfe 	udiv	ip, r5, lr
 8001334:	fb0e 551c 	mls	r5, lr, ip, r5
 8001338:	fb08 f00c 	mul.w	r0, r8, ip
 800133c:	0c22      	lsrs	r2, r4, #16
 800133e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001342:	42a8      	cmp	r0, r5
 8001344:	d907      	bls.n	8001356 <__udivmoddi4+0xe6>
 8001346:	197d      	adds	r5, r7, r5
 8001348:	f10c 32ff 	add.w	r2, ip, #4294967295
 800134c:	d202      	bcs.n	8001354 <__udivmoddi4+0xe4>
 800134e:	42a8      	cmp	r0, r5
 8001350:	f200 80e9 	bhi.w	8001526 <__udivmoddi4+0x2b6>
 8001354:	4694      	mov	ip, r2
 8001356:	1a2d      	subs	r5, r5, r0
 8001358:	fbb5 f0fe 	udiv	r0, r5, lr
 800135c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001360:	fb08 f800 	mul.w	r8, r8, r0
 8001364:	b2a4      	uxth	r4, r4
 8001366:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800136a:	45a0      	cmp	r8, r4
 800136c:	d907      	bls.n	800137e <__udivmoddi4+0x10e>
 800136e:	193c      	adds	r4, r7, r4
 8001370:	f100 32ff 	add.w	r2, r0, #4294967295
 8001374:	d202      	bcs.n	800137c <__udivmoddi4+0x10c>
 8001376:	45a0      	cmp	r8, r4
 8001378:	f200 80d9 	bhi.w	800152e <__udivmoddi4+0x2be>
 800137c:	4610      	mov	r0, r2
 800137e:	eba4 0408 	sub.w	r4, r4, r8
 8001382:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001386:	e7c0      	b.n	800130a <__udivmoddi4+0x9a>
 8001388:	428b      	cmp	r3, r1
 800138a:	d908      	bls.n	800139e <__udivmoddi4+0x12e>
 800138c:	2e00      	cmp	r6, #0
 800138e:	f000 80b1 	beq.w	80014f4 <__udivmoddi4+0x284>
 8001392:	2100      	movs	r1, #0
 8001394:	e9c6 0500 	strd	r0, r5, [r6]
 8001398:	4608      	mov	r0, r1
 800139a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800139e:	fab3 f183 	clz	r1, r3
 80013a2:	2900      	cmp	r1, #0
 80013a4:	d14b      	bne.n	800143e <__udivmoddi4+0x1ce>
 80013a6:	42ab      	cmp	r3, r5
 80013a8:	d302      	bcc.n	80013b0 <__udivmoddi4+0x140>
 80013aa:	4282      	cmp	r2, r0
 80013ac:	f200 80b9 	bhi.w	8001522 <__udivmoddi4+0x2b2>
 80013b0:	1a84      	subs	r4, r0, r2
 80013b2:	eb65 0303 	sbc.w	r3, r5, r3
 80013b6:	2001      	movs	r0, #1
 80013b8:	469e      	mov	lr, r3
 80013ba:	2e00      	cmp	r6, #0
 80013bc:	d0aa      	beq.n	8001314 <__udivmoddi4+0xa4>
 80013be:	e9c6 4e00 	strd	r4, lr, [r6]
 80013c2:	e7a7      	b.n	8001314 <__udivmoddi4+0xa4>
 80013c4:	409f      	lsls	r7, r3
 80013c6:	f1c3 0220 	rsb	r2, r3, #32
 80013ca:	40d1      	lsrs	r1, r2
 80013cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80013d4:	fa1f f887 	uxth.w	r8, r7
 80013d8:	fb0e 1110 	mls	r1, lr, r0, r1
 80013dc:	fa24 f202 	lsr.w	r2, r4, r2
 80013e0:	409d      	lsls	r5, r3
 80013e2:	fb00 fc08 	mul.w	ip, r0, r8
 80013e6:	432a      	orrs	r2, r5
 80013e8:	0c15      	lsrs	r5, r2, #16
 80013ea:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013ee:	45ac      	cmp	ip, r5
 80013f0:	fa04 f403 	lsl.w	r4, r4, r3
 80013f4:	d909      	bls.n	800140a <__udivmoddi4+0x19a>
 80013f6:	197d      	adds	r5, r7, r5
 80013f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80013fc:	f080 808f 	bcs.w	800151e <__udivmoddi4+0x2ae>
 8001400:	45ac      	cmp	ip, r5
 8001402:	f240 808c 	bls.w	800151e <__udivmoddi4+0x2ae>
 8001406:	3802      	subs	r0, #2
 8001408:	443d      	add	r5, r7
 800140a:	eba5 050c 	sub.w	r5, r5, ip
 800140e:	fbb5 f1fe 	udiv	r1, r5, lr
 8001412:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001416:	fb01 f908 	mul.w	r9, r1, r8
 800141a:	b295      	uxth	r5, r2
 800141c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001420:	45a9      	cmp	r9, r5
 8001422:	d907      	bls.n	8001434 <__udivmoddi4+0x1c4>
 8001424:	197d      	adds	r5, r7, r5
 8001426:	f101 32ff 	add.w	r2, r1, #4294967295
 800142a:	d274      	bcs.n	8001516 <__udivmoddi4+0x2a6>
 800142c:	45a9      	cmp	r9, r5
 800142e:	d972      	bls.n	8001516 <__udivmoddi4+0x2a6>
 8001430:	3902      	subs	r1, #2
 8001432:	443d      	add	r5, r7
 8001434:	eba5 0509 	sub.w	r5, r5, r9
 8001438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800143c:	e778      	b.n	8001330 <__udivmoddi4+0xc0>
 800143e:	f1c1 0720 	rsb	r7, r1, #32
 8001442:	408b      	lsls	r3, r1
 8001444:	fa22 fc07 	lsr.w	ip, r2, r7
 8001448:	ea4c 0c03 	orr.w	ip, ip, r3
 800144c:	fa25 f407 	lsr.w	r4, r5, r7
 8001450:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001454:	fbb4 f9fe 	udiv	r9, r4, lr
 8001458:	fa1f f88c 	uxth.w	r8, ip
 800145c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001460:	fa20 f307 	lsr.w	r3, r0, r7
 8001464:	fb09 fa08 	mul.w	sl, r9, r8
 8001468:	408d      	lsls	r5, r1
 800146a:	431d      	orrs	r5, r3
 800146c:	0c2b      	lsrs	r3, r5, #16
 800146e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001472:	45a2      	cmp	sl, r4
 8001474:	fa02 f201 	lsl.w	r2, r2, r1
 8001478:	fa00 f301 	lsl.w	r3, r0, r1
 800147c:	d909      	bls.n	8001492 <__udivmoddi4+0x222>
 800147e:	eb1c 0404 	adds.w	r4, ip, r4
 8001482:	f109 30ff 	add.w	r0, r9, #4294967295
 8001486:	d248      	bcs.n	800151a <__udivmoddi4+0x2aa>
 8001488:	45a2      	cmp	sl, r4
 800148a:	d946      	bls.n	800151a <__udivmoddi4+0x2aa>
 800148c:	f1a9 0902 	sub.w	r9, r9, #2
 8001490:	4464      	add	r4, ip
 8001492:	eba4 040a 	sub.w	r4, r4, sl
 8001496:	fbb4 f0fe 	udiv	r0, r4, lr
 800149a:	fb0e 4410 	mls	r4, lr, r0, r4
 800149e:	fb00 fa08 	mul.w	sl, r0, r8
 80014a2:	b2ad      	uxth	r5, r5
 80014a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80014a8:	45a2      	cmp	sl, r4
 80014aa:	d908      	bls.n	80014be <__udivmoddi4+0x24e>
 80014ac:	eb1c 0404 	adds.w	r4, ip, r4
 80014b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80014b4:	d22d      	bcs.n	8001512 <__udivmoddi4+0x2a2>
 80014b6:	45a2      	cmp	sl, r4
 80014b8:	d92b      	bls.n	8001512 <__udivmoddi4+0x2a2>
 80014ba:	3802      	subs	r0, #2
 80014bc:	4464      	add	r4, ip
 80014be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80014c2:	fba0 8902 	umull	r8, r9, r0, r2
 80014c6:	eba4 040a 	sub.w	r4, r4, sl
 80014ca:	454c      	cmp	r4, r9
 80014cc:	46c6      	mov	lr, r8
 80014ce:	464d      	mov	r5, r9
 80014d0:	d319      	bcc.n	8001506 <__udivmoddi4+0x296>
 80014d2:	d016      	beq.n	8001502 <__udivmoddi4+0x292>
 80014d4:	b15e      	cbz	r6, 80014ee <__udivmoddi4+0x27e>
 80014d6:	ebb3 020e 	subs.w	r2, r3, lr
 80014da:	eb64 0405 	sbc.w	r4, r4, r5
 80014de:	fa04 f707 	lsl.w	r7, r4, r7
 80014e2:	fa22 f301 	lsr.w	r3, r2, r1
 80014e6:	431f      	orrs	r7, r3
 80014e8:	40cc      	lsrs	r4, r1
 80014ea:	e9c6 7400 	strd	r7, r4, [r6]
 80014ee:	2100      	movs	r1, #0
 80014f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014f4:	4631      	mov	r1, r6
 80014f6:	4630      	mov	r0, r6
 80014f8:	e70c      	b.n	8001314 <__udivmoddi4+0xa4>
 80014fa:	468c      	mov	ip, r1
 80014fc:	e6eb      	b.n	80012d6 <__udivmoddi4+0x66>
 80014fe:	4610      	mov	r0, r2
 8001500:	e6ff      	b.n	8001302 <__udivmoddi4+0x92>
 8001502:	4543      	cmp	r3, r8
 8001504:	d2e6      	bcs.n	80014d4 <__udivmoddi4+0x264>
 8001506:	ebb8 0e02 	subs.w	lr, r8, r2
 800150a:	eb69 050c 	sbc.w	r5, r9, ip
 800150e:	3801      	subs	r0, #1
 8001510:	e7e0      	b.n	80014d4 <__udivmoddi4+0x264>
 8001512:	4628      	mov	r0, r5
 8001514:	e7d3      	b.n	80014be <__udivmoddi4+0x24e>
 8001516:	4611      	mov	r1, r2
 8001518:	e78c      	b.n	8001434 <__udivmoddi4+0x1c4>
 800151a:	4681      	mov	r9, r0
 800151c:	e7b9      	b.n	8001492 <__udivmoddi4+0x222>
 800151e:	4608      	mov	r0, r1
 8001520:	e773      	b.n	800140a <__udivmoddi4+0x19a>
 8001522:	4608      	mov	r0, r1
 8001524:	e749      	b.n	80013ba <__udivmoddi4+0x14a>
 8001526:	f1ac 0c02 	sub.w	ip, ip, #2
 800152a:	443d      	add	r5, r7
 800152c:	e713      	b.n	8001356 <__udivmoddi4+0xe6>
 800152e:	3802      	subs	r0, #2
 8001530:	443c      	add	r4, r7
 8001532:	e724      	b.n	800137e <__udivmoddi4+0x10e>

08001534 <__aeabi_idiv0>:
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop

08001538 <_ZN6I2Cdev7readBitEhhhPh>:
 * @param regAddr Register regAddr to read from
 * @param bitNum Bit position to read (0-7)
 * @param data Container for single bit value
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af04      	add	r7, sp, #16
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	460b      	mov	r3, r1
 8001546:	71bb      	strb	r3, [r7, #6]
 8001548:	4613      	mov	r3, r2
 800154a:	717b      	strb	r3, [r7, #5]
  uint8_t buffer;
  sendBuf[0] = regAddr;
 800154c:	4a1a      	ldr	r2, [pc, #104]	; (80015b8 <_ZN6I2Cdev7readBitEhhhPh+0x80>)
 800154e:	79bb      	ldrb	r3, [r7, #6]
 8001550:	7013      	strb	r3, [r2, #0]
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	b299      	uxth	r1, r3
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	b29a      	uxth	r2, r3
 800155a:	2301      	movs	r3, #1
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	2301      	movs	r3, #1
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	f107 030e 	add.w	r3, r7, #14
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	4814      	ldr	r0, [pc, #80]	; (80015bc <_ZN6I2Cdev7readBitEhhhPh+0x84>)
 800156c:	f007 f850 	bl	8008610 <HAL_I2C_Mem_Read>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf14      	ite	ne
 8001576:	2301      	movne	r3, #1
 8001578:	2300      	moveq	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <_ZN6I2Cdev7readBitEhhhPh+0x4e>
	  MX_I2C1_Init();
 8001580:	f003 fe2c 	bl	80051dc <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001584:	e7e5      	b.n	8001552 <_ZN6I2Cdev7readBitEhhhPh+0x1a>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001586:	2301      	movs	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
  *data = buffer & (1 << bitNum);
 800158a:	797b      	ldrb	r3, [r7, #5]
 800158c:	2201      	movs	r2, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	b25a      	sxtb	r2, r3
 8001594:	7bbb      	ldrb	r3, [r7, #14]
 8001596:	b25b      	sxtb	r3, r3
 8001598:	4013      	ands	r3, r2
 800159a:	b25b      	sxtb	r3, r3
 800159c:	b2da      	uxtb	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	701a      	strb	r2, [r3, #0]
  return response == BCM2835_I2C_REASON_OK ;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	b25b      	sxtb	r3, r3
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200003cc 	.word	0x200003cc
 80015bc:	200006cc 	.word	0x200006cc

080015c0 <_ZN6I2Cdev8readBitsEhhhhPh>:
 * @param bitStart First bit position to read (0-7)
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data) {
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af04      	add	r7, sp, #16
 80015c6:	4604      	mov	r4, r0
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4623      	mov	r3, r4
 80015d0:	71fb      	strb	r3, [r7, #7]
 80015d2:	4603      	mov	r3, r0
 80015d4:	71bb      	strb	r3, [r7, #6]
 80015d6:	460b      	mov	r3, r1
 80015d8:	717b      	strb	r3, [r7, #5]
 80015da:	4613      	mov	r3, r2
 80015dc:	713b      	strb	r3, [r7, #4]
  // 01101001 read byte
  // 76543210 bit numbers
  //    xxx   args: bitStart=4, length=3
  //    010   masked
  //   -> 010 shifted
  sendBuf[0] = regAddr;
 80015de:	4a25      	ldr	r2, [pc, #148]	; (8001674 <_ZN6I2Cdev8readBitsEhhhhPh+0xb4>)
 80015e0:	79bb      	ldrb	r3, [r7, #6]
 80015e2:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	b299      	uxth	r1, r3
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	2301      	movs	r3, #1
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	2301      	movs	r3, #1
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2301      	movs	r3, #1
 80015fc:	481e      	ldr	r0, [pc, #120]	; (8001678 <_ZN6I2Cdev8readBitsEhhhhPh+0xb8>)
 80015fe:	f007 f807 	bl	8008610 <HAL_I2C_Mem_Read>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf14      	ite	ne
 8001608:	2301      	movne	r3, #1
 800160a:	2300      	moveq	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <_ZN6I2Cdev8readBitsEhhhhPh+0x58>
  	  MX_I2C1_Init();
 8001612:	f003 fde3 	bl	80051dc <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001616:	e7e5      	b.n	80015e4 <_ZN6I2Cdev8readBitsEhhhhPh+0x24>
    }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
  uint8_t b = buffer;
 800161c:	7b3b      	ldrb	r3, [r7, #12]
 800161e:	73bb      	strb	r3, [r7, #14]
  if (response == BCM2835_I2C_REASON_OK) {
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d11a      	bne.n	800165c <_ZN6I2Cdev8readBitsEhhhhPh+0x9c>
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001626:	793b      	ldrb	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	1e5a      	subs	r2, r3, #1
 8001630:	7979      	ldrb	r1, [r7, #5]
 8001632:	793b      	ldrb	r3, [r7, #4]
 8001634:	1acb      	subs	r3, r1, r3
 8001636:	3301      	adds	r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	737b      	strb	r3, [r7, #13]
    b &= mask;
 800163e:	7bba      	ldrb	r2, [r7, #14]
 8001640:	7b7b      	ldrb	r3, [r7, #13]
 8001642:	4013      	ands	r3, r2
 8001644:	73bb      	strb	r3, [r7, #14]
    b >>= (bitStart - length + 1);
 8001646:	7bba      	ldrb	r2, [r7, #14]
 8001648:	7979      	ldrb	r1, [r7, #5]
 800164a:	793b      	ldrb	r3, [r7, #4]
 800164c:	1acb      	subs	r3, r1, r3
 800164e:	3301      	adds	r3, #1
 8001650:	fa42 f303 	asr.w	r3, r2, r3
 8001654:	73bb      	strb	r3, [r7, #14]
    *data = b;
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	7bba      	ldrb	r2, [r7, #14]
 800165a:	701a      	strb	r2, [r3, #0]
  }
  return response == BCM2835_I2C_REASON_OK;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	2b01      	cmp	r3, #1
 8001660:	bf0c      	ite	eq
 8001662:	2301      	moveq	r3, #1
 8001664:	2300      	movne	r3, #0
 8001666:	b2db      	uxtb	r3, r3
 8001668:	b25b      	sxtb	r3, r3
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}
 8001672:	bf00      	nop
 8001674:	200003cc 	.word	0x200003cc
 8001678:	200006cc 	.word	0x200006cc

0800167c <_ZN6I2Cdev8readByteEhhPh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af04      	add	r7, sp, #16
 8001682:	4603      	mov	r3, r0
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	460b      	mov	r3, r1
 800168a:	71bb      	strb	r3, [r7, #6]
  sendBuf[0] = regAddr;
 800168c:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <_ZN6I2Cdev8readByteEhhPh+0x6c>)
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	b299      	uxth	r1, r3
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	b29a      	uxth	r2, r3
 800169a:	2301      	movs	r3, #1
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	2301      	movs	r3, #1
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	f107 030e 	add.w	r3, r7, #14
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	4810      	ldr	r0, [pc, #64]	; (80016ec <_ZN6I2Cdev8readByteEhhPh+0x70>)
 80016ac:	f006 ffb0 	bl	8008610 <HAL_I2C_Mem_Read>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <_ZN6I2Cdev8readByteEhhPh+0x4a>
    MX_I2C1_Init();
 80016c0:	f003 fd8c 	bl	80051dc <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80016c4:	e7e5      	b.n	8001692 <_ZN6I2Cdev8readByteEhhPh+0x16>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
  data[0] = buffer;
 80016ca:	7bba      	ldrb	r2, [r7, #14]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	701a      	strb	r2, [r3, #0]
  return response == BCM2835_I2C_REASON_OK;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	bf0c      	ite	eq
 80016d6:	2301      	moveq	r3, #1
 80016d8:	2300      	movne	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	b25b      	sxtb	r3, r3
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200003cc 	.word	0x200003cc
 80016ec:	200006cc 	.word	0x200006cc

080016f0 <_ZN6I2Cdev9readBytesEhhhPh>:
 * @param regAddr First register regAddr to read from
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @return I2C_TransferReturn_TypeDef http://downloads.energymicro.com/documentation/doxygen/group__I2C.html
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data) {
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af04      	add	r7, sp, #16
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	460b      	mov	r3, r1
 80016fe:	71bb      	strb	r3, [r7, #6]
 8001700:	4613      	mov	r3, r2
 8001702:	717b      	strb	r3, [r7, #5]
  uint8_t response = BCM2835_I2C_REASON_OK;
  int i ;
  for (i = 0; i < length ; i++) {
    data[i] = (uint8_t) buffer[i];
  }
  return response == BCM2835_I2C_REASON_OK;
 8001704:	466b      	mov	r3, sp
 8001706:	461d      	mov	r5, r3
  sendBuf[0] = regAddr;
 8001708:	4a32      	ldr	r2, [pc, #200]	; (80017d4 <_ZN6I2Cdev9readBytesEhhhPh+0xe4>)
 800170a:	79bb      	ldrb	r3, [r7, #6]
 800170c:	7013      	strb	r3, [r2, #0]
  uint8_t buffer[length];
 800170e:	797b      	ldrb	r3, [r7, #5]
 8001710:	1e5c      	subs	r4, r3, #1
 8001712:	613c      	str	r4, [r7, #16]
 8001714:	4623      	mov	r3, r4
 8001716:	3301      	adds	r3, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	00cb      	lsls	r3, r1, #3
 8001728:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800172c:	00c2      	lsls	r2, r0, #3
 800172e:	4623      	mov	r3, r4
 8001730:	3301      	adds	r3, #1
 8001732:	4618      	mov	r0, r3
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	00cb      	lsls	r3, r1, #3
 8001742:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001746:	00c2      	lsls	r2, r0, #3
 8001748:	4623      	mov	r3, r4
 800174a:	3301      	adds	r3, #1
 800174c:	3307      	adds	r3, #7
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	ebad 0d03 	sub.w	sp, sp, r3
 8001756:	ab04      	add	r3, sp, #16
 8001758:	3300      	adds	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	b299      	uxth	r1, r3
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	b298      	uxth	r0, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	797a      	ldrb	r2, [r7, #5]
 8001768:	b292      	uxth	r2, r2
 800176a:	2401      	movs	r4, #1
 800176c:	9402      	str	r4, [sp, #8]
 800176e:	9201      	str	r2, [sp, #4]
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	4602      	mov	r2, r0
 8001776:	4818      	ldr	r0, [pc, #96]	; (80017d8 <_ZN6I2Cdev9readBytesEhhhPh+0xe8>)
 8001778:	f006 ff4a 	bl	8008610 <HAL_I2C_Mem_Read>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <_ZN6I2Cdev9readBytesEhhhPh+0xa2>
    MX_I2C1_Init();
 800178c:	f003 fd26 	bl	80051dc <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 8001790:	e7e4      	b.n	800175c <_ZN6I2Cdev9readBytesEhhhPh+0x6c>
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001792:	2301      	movs	r3, #1
 8001794:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < length ; i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	797b      	ldrb	r3, [r7, #5]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	429a      	cmp	r2, r3
 80017a0:	da0b      	bge.n	80017ba <_ZN6I2Cdev9readBytesEhhhPh+0xca>
    data[i] = (uint8_t) buffer[i];
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	440a      	add	r2, r1
 80017ae:	7812      	ldrb	r2, [r2, #0]
 80017b0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < length ; i++) {
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e7ef      	b.n	800179a <_ZN6I2Cdev9readBytesEhhhPh+0xaa>
  return response == BCM2835_I2C_REASON_OK;
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	46ad      	mov	sp, r5
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bdb0      	pop	{r4, r5, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200003cc 	.word	0x200003cc
 80017d8:	200006cc 	.word	0x200006cc

080017dc <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af04      	add	r7, sp, #16
 80017e2:	4604      	mov	r4, r0
 80017e4:	4608      	mov	r0, r1
 80017e6:	4611      	mov	r1, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	4623      	mov	r3, r4
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	4603      	mov	r3, r0
 80017f0:	71bb      	strb	r3, [r7, #6]
 80017f2:	460b      	mov	r3, r1
 80017f4:	717b      	strb	r3, [r7, #5]
 80017f6:	4613      	mov	r3, r2
 80017f8:	713b      	strb	r3, [r7, #4]

  //first reading registery value
  sendBuf[0] = regAddr;
 80017fa:	4a34      	ldr	r2, [pc, #208]	; (80018cc <_ZN6I2Cdev8writeBitEhhhh+0xf0>)
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	b299      	uxth	r1, r3
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	b29a      	uxth	r2, r3
 8001808:	2301      	movs	r3, #1
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	2301      	movs	r3, #1
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	f107 030e 	add.w	r3, r7, #14
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	482d      	ldr	r0, [pc, #180]	; (80018d0 <_ZN6I2Cdev8writeBitEhhhh+0xf4>)
 800181a:	f006 fef9 	bl	8008610 <HAL_I2C_Mem_Read>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf14      	ite	ne
 8001824:	2301      	movne	r3, #1
 8001826:	2300      	moveq	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <_ZN6I2Cdev8writeBitEhhhh+0x58>
    MX_I2C1_Init();
 800182e:	f003 fcd5 	bl	80051dc <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001832:	e7e5      	b.n	8001800 <_ZN6I2Cdev8writeBitEhhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d13b      	bne.n	80018b6 <_ZN6I2Cdev8writeBitEhhhh+0xda>
    uint8_t b = buffer ;
 800183e:	7bbb      	ldrb	r3, [r7, #14]
 8001840:	737b      	strb	r3, [r7, #13]
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8001842:	793b      	ldrb	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00a      	beq.n	800185e <_ZN6I2Cdev8writeBitEhhhh+0x82>
 8001848:	797b      	ldrb	r3, [r7, #5]
 800184a:	2201      	movs	r2, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	b25a      	sxtb	r2, r3
 8001852:	7b7b      	ldrb	r3, [r7, #13]
 8001854:	b25b      	sxtb	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b25b      	sxtb	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	e00b      	b.n	8001876 <_ZN6I2Cdev8writeBitEhhhh+0x9a>
 800185e:	797b      	ldrb	r3, [r7, #5]
 8001860:	2201      	movs	r2, #1
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	b25b      	sxtb	r3, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	b25a      	sxtb	r2, r3
 800186c:	7b7b      	ldrb	r3, [r7, #13]
 800186e:	b25b      	sxtb	r3, r3
 8001870:	4013      	ands	r3, r2
 8001872:	b25b      	sxtb	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	737b      	strb	r3, [r7, #13]
    sendBuf[1] = b ;
 8001878:	7b7a      	ldrb	r2, [r7, #13]
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <_ZN6I2Cdev8writeBitEhhhh+0xf0>)
 800187c:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	b299      	uxth	r1, r3
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	b29a      	uxth	r2, r3
 8001886:	2301      	movs	r3, #1
 8001888:	9302      	str	r3, [sp, #8]
 800188a:	2301      	movs	r3, #1
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	f107 030d 	add.w	r3, r7, #13
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2301      	movs	r3, #1
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <_ZN6I2Cdev8writeBitEhhhh+0xf4>)
 8001898:	f006 fdc0 	bl	800841c <HAL_I2C_Mem_Write>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf14      	ite	ne
 80018a2:	2301      	movne	r3, #1
 80018a4:	2300      	moveq	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <_ZN6I2Cdev8writeBitEhhhh+0xd6>
    	MX_I2C1_Init();
 80018ac:	f003 fc96 	bl	80051dc <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80018b0:	e7e5      	b.n	800187e <_ZN6I2Cdev8writeBitEhhhh+0xa2>
    }
    response = BCM2835_I2C_REASON_OK;
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
  }
  return response == BCM2835_I2C_REASON_OK;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200003cc 	.word	0x200003cc
 80018d0:	200006cc 	.word	0x200006cc

080018d4 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b089      	sub	sp, #36	; 0x24
 80018d8:	af04      	add	r7, sp, #16
 80018da:	4604      	mov	r4, r0
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	4603      	mov	r3, r0
 80018e8:	71bb      	strb	r3, [r7, #6]
 80018ea:	460b      	mov	r3, r1
 80018ec:	717b      	strb	r3, [r7, #5]
 80018ee:	4613      	mov	r3, r2
 80018f0:	713b      	strb	r3, [r7, #4]
  // 10101111 original value (sample)
  // 10100011 original & ~mask
  // 10101011 masked | value

  //first reading registery value
  sendBuf[0] = regAddr;
 80018f2:	4a3c      	ldr	r2, [pc, #240]	; (80019e4 <_ZN6I2Cdev9writeBitsEhhhhh+0x110>)
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	b299      	uxth	r1, r3
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	2301      	movs	r3, #1
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	2301      	movs	r3, #1
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	f107 030d 	add.w	r3, r7, #13
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2301      	movs	r3, #1
 8001910:	4835      	ldr	r0, [pc, #212]	; (80019e8 <_ZN6I2Cdev9writeBitsEhhhhh+0x114>)
 8001912:	f006 fe7d 	bl	8008610 <HAL_I2C_Mem_Read>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf14      	ite	ne
 800191c:	2301      	movne	r3, #1
 800191e:	2300      	moveq	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <_ZN6I2Cdev9writeBitsEhhhhh+0x58>
    MX_I2C1_Init();
 8001926:	f003 fc59 	bl	80051dc <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800192a:	e7e5      	b.n	80018f8 <_ZN6I2Cdev9writeBitsEhhhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d14c      	bne.n	80019d0 <_ZN6I2Cdev9writeBitsEhhhhh+0xfc>
    uint8_t b = buffer;
 8001936:	7b7b      	ldrb	r3, [r7, #13]
 8001938:	733b      	strb	r3, [r7, #12]
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800193a:	793b      	ldrb	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	7979      	ldrb	r1, [r7, #5]
 8001946:	793b      	ldrb	r3, [r7, #4]
 8001948:	1acb      	subs	r3, r1, r3
 800194a:	3301      	adds	r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	73bb      	strb	r3, [r7, #14]
    data <<= (bitStart - length + 1); // shift data into correct position
 8001952:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001956:	7979      	ldrb	r1, [r7, #5]
 8001958:	793b      	ldrb	r3, [r7, #4]
 800195a:	1acb      	subs	r3, r1, r3
 800195c:	3301      	adds	r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	f887 3020 	strb.w	r3, [r7, #32]
    data &= mask; // zero all non-important bits in data
 8001966:	f897 2020 	ldrb.w	r2, [r7, #32]
 800196a:	7bbb      	ldrb	r3, [r7, #14]
 800196c:	4013      	ands	r3, r2
 800196e:	f887 3020 	strb.w	r3, [r7, #32]
    b &= ~(mask); // zero all important bits in existing byte
 8001972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001976:	43db      	mvns	r3, r3
 8001978:	b25a      	sxtb	r2, r3
 800197a:	7b3b      	ldrb	r3, [r7, #12]
 800197c:	b25b      	sxtb	r3, r3
 800197e:	4013      	ands	r3, r2
 8001980:	b25b      	sxtb	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	733b      	strb	r3, [r7, #12]
    b |= data; // combine data with existing byte
 8001986:	7b3a      	ldrb	r2, [r7, #12]
 8001988:	f897 3020 	ldrb.w	r3, [r7, #32]
 800198c:	4313      	orrs	r3, r2
 800198e:	b2db      	uxtb	r3, r3
 8001990:	733b      	strb	r3, [r7, #12]
    sendBuf[1] = b ;
 8001992:	7b3a      	ldrb	r2, [r7, #12]
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <_ZN6I2Cdev9writeBitsEhhhhh+0x110>)
 8001996:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	b299      	uxth	r1, r3
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	2301      	movs	r3, #1
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	2301      	movs	r3, #1
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2301      	movs	r3, #1
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <_ZN6I2Cdev9writeBitsEhhhhh+0x114>)
 80019b2:	f006 fd33 	bl	800841c <HAL_I2C_Mem_Write>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf14      	ite	ne
 80019bc:	2301      	movne	r3, #1
 80019be:	2300      	moveq	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <_ZN6I2Cdev9writeBitsEhhhhh+0xf8>
       MX_I2C1_Init();
 80019c6:	f003 fc09 	bl	80051dc <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80019ca:	e7e5      	b.n	8001998 <_ZN6I2Cdev9writeBitsEhhhhh+0xc4>
    }
    response = BCM2835_I2C_REASON_OK;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
    }
  return response == BCM2835_I2C_REASON_OK;
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	bf0c      	ite	eq
 80019d6:	2301      	moveq	r3, #1
 80019d8:	2300      	movne	r3, #0
 80019da:	b2db      	uxtb	r3, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	200003cc 	.word	0x200003cc
 80019e8:	200006cc 	.word	0x200006cc

080019ec <_ZN6I2Cdev9writeByteEhhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af04      	add	r7, sp, #16
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	460b      	mov	r3, r1
 80019f8:	71bb      	strb	r3, [r7, #6]
 80019fa:	4613      	mov	r3, r2
 80019fc:	717b      	strb	r3, [r7, #5]

  sendBuf[0] = regAddr;
 80019fe:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <_ZN6I2Cdev9writeByteEhhh+0x68>)
 8001a00:	79bb      	ldrb	r3, [r7, #6]
 8001a02:	7013      	strb	r3, [r2, #0]
  sendBuf[1] = data;
 8001a04:	797a      	ldrb	r2, [r7, #5]
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <_ZN6I2Cdev9writeByteEhhh+0x68>)
 8001a08:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	b299      	uxth	r1, r3
 8001a0e:	79bb      	ldrb	r3, [r7, #6]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	2301      	movs	r3, #1
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	2301      	movs	r3, #1
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	1d7b      	adds	r3, r7, #5
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	480d      	ldr	r0, [pc, #52]	; (8001a58 <_ZN6I2Cdev9writeByteEhhh+0x6c>)
 8001a22:	f006 fcfb 	bl	800841c <HAL_I2C_Mem_Write>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <_ZN6I2Cdev9writeByteEhhh+0x50>
     MX_I2C1_Init();
 8001a36:	f003 fbd1 	bl	80051dc <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001a3a:	e7e6      	b.n	8001a0a <_ZN6I2Cdev9writeByteEhhh+0x1e>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200003cc 	.word	0x200003cc
 8001a58:	200006cc 	.word	0x200006cc

08001a5c <_ZN6I2Cdev9writeWordEhht>:
    data[i] = (buffer[i*2] << 8) | buffer[i*2+1] ;
  }
  return  response == BCM2835_I2C_REASON_OK ;
}

bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af04      	add	r7, sp, #16
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
 8001a66:	460b      	mov	r3, r1
 8001a68:	71bb      	strb	r3, [r7, #6]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	80bb      	strh	r3, [r7, #4]

  sendBuf[0] = (uint8_t) (data >> 8); //MSByte
 8001a6e:	88bb      	ldrh	r3, [r7, #4]
 8001a70:	121b      	asrs	r3, r3, #8
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <_ZN6I2Cdev9writeWordEhht+0x70>)
 8001a76:	701a      	strb	r2, [r3, #0]
  sendBuf[1] = (uint8_t) (data >> 0); //LSByte
 8001a78:	88bb      	ldrh	r3, [r7, #4]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <_ZN6I2Cdev9writeWordEhht+0x70>)
 8001a7e:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	b299      	uxth	r1, r3
 8001a84:	79bb      	ldrb	r3, [r7, #6]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	2301      	movs	r3, #1
 8001a8a:	9302      	str	r3, [sp, #8]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <_ZN6I2Cdev9writeWordEhht+0x70>)
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2301      	movs	r3, #1
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <_ZN6I2Cdev9writeWordEhht+0x74>)
 8001a98:	f006 fcc0 	bl	800841c <HAL_I2C_Mem_Write>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	2300      	moveq	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <_ZN6I2Cdev9writeWordEhht+0x56>
     MX_I2C1_Init();
 8001aac:	f003 fb96 	bl	80051dc <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 8001ab0:	e7e6      	b.n	8001a80 <_ZN6I2Cdev9writeWordEhht+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200003cc 	.word	0x200003cc
 8001ad0:	200006cc 	.word	0x200006cc

08001ad4 <_ZN6I2Cdev10writeBytesEhhhPh>:

bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af04      	add	r7, sp, #16
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	71bb      	strb	r3, [r7, #6]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  for (i = 0; i < length; i++) {
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	797b      	ldrb	r3, [r7, #5]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d20a      	bcs.n	8001b0a <_ZN6I2Cdev10writeBytesEhhhPh+0x36>
    sendBuf[i] = data[i] ;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	441a      	add	r2, r3
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	7811      	ldrb	r1, [r2, #0]
 8001afe:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <_ZN6I2Cdev10writeBytesEhhhPh+0x84>)
 8001b00:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < length; i++) {
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	3301      	adds	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e7f0      	b.n	8001aec <_ZN6I2Cdev10writeBytesEhhhPh+0x18>
  }
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	b299      	uxth	r1, r3
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	797b      	ldrb	r3, [r7, #5]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2001      	movs	r0, #1
 8001b18:	9002      	str	r0, [sp, #8]
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <_ZN6I2Cdev10writeBytesEhhhPh+0x84>)
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2301      	movs	r3, #1
 8001b22:	480e      	ldr	r0, [pc, #56]	; (8001b5c <_ZN6I2Cdev10writeBytesEhhhPh+0x88>)
 8001b24:	f006 fc7a 	bl	800841c <HAL_I2C_Mem_Write>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf14      	ite	ne
 8001b2e:	2301      	movne	r3, #1
 8001b30:	2300      	moveq	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <_ZN6I2Cdev10writeBytesEhhhPh+0x6a>
     MX_I2C1_Init();
 8001b38:	f003 fb50 	bl	80051dc <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001b3c:	e7e5      	b.n	8001b0a <_ZN6I2Cdev10writeBytesEhhhPh+0x36>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73bb      	strb	r3, [r7, #14]
  return response == BCM2835_I2C_REASON_OK ;
 8001b42:	7bbb      	ldrb	r3, [r7, #14]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200003cc 	.word	0x200003cc
 8001b5c:	200006cc 	.word	0x200006cc

08001b60 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f00e fa4d 	bl	8010008 <asinf>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f00e f8c7 	bl	800fd14 <atanf>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f00e f9c7 	bl	800ff2c <cosf>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f00e f9f3 	bl	800ff9c <sinf>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f00e fa43 	bl	8010054 <sqrtf>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_ZN26MPU6050_6Axis_MotionApps20C1EhPv>:



class MPU6050_6Axis_MotionApps20 : public MPU6050 {
    public:
        MPU6050_6Axis_MotionApps20(uint8_t address=MPU6050_DEFAULT_ADDRESS, void *wireObj=0) : MPU6050(address) { }
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	460b      	mov	r3, r1
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	72fb      	strb	r3, [r7, #11]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	7afa      	ldrb	r2, [r7, #11]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fd83 	bl	80026f8 <_ZN7MPU6050C1Eh>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_Z17MPU6050_resetFIFOv>:
 * @brief Clears the FIFO (First In First Out) of the MPU6050
 * 
 * --Custom Method!
 */
void MPU6050_resetFIFO()
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  //mpu.setFIFOEnabled(false);
  mpu.resetFIFO();
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <_Z17MPU6050_resetFIFOv+0x10>)
 8001c02:	f000 feb4 	bl	800296e <_ZN7MPU60509resetFIFOEv>
  //mpu.setFIFOEnabled(true);
  //mpu.getIntStatus();
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200004e0 	.word	0x200004e0

08001c10 <_Z28MPU6050_WaitForQuaternionSetv>:
 * @brief Waits until a new Quaternion-set is available in the FIFO
 * 
 * --Custom Method!
 */
void MPU6050_WaitForQuaternionSet()
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  FIFOCounter = mpu.getFIFOCount();
 8001c14:	480a      	ldr	r0, [pc, #40]	; (8001c40 <_Z28MPU6050_WaitForQuaternionSetv+0x30>)
 8001c16:	f000 fefb 	bl	8002a10 <_ZN7MPU605012getFIFOCountEv>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <_Z28MPU6050_WaitForQuaternionSetv+0x34>)
 8001c20:	801a      	strh	r2, [r3, #0]
  while (FIFOCounter < 42) FIFOCounter = mpu.getFIFOCount();  //wait until there are more than 42 bytes in the FIFO
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <_Z28MPU6050_WaitForQuaternionSetv+0x34>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	2b29      	cmp	r3, #41	; 0x29
 8001c28:	d807      	bhi.n	8001c3a <_Z28MPU6050_WaitForQuaternionSetv+0x2a>
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <_Z28MPU6050_WaitForQuaternionSetv+0x30>)
 8001c2c:	f000 fef0 	bl	8002a10 <_ZN7MPU605012getFIFOCountEv>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <_Z28MPU6050_WaitForQuaternionSetv+0x34>)
 8001c36:	801a      	strh	r2, [r3, #0]
 8001c38:	e7f3      	b.n	8001c22 <_Z28MPU6050_WaitForQuaternionSetv+0x12>
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200004e0 	.word	0x200004e0
 8001c44:	200004dc 	.word	0x200004dc

08001c48 <_Z28MPU6050_ConvertToQuaternionsv>:
 * @brief Reads a Quaternion-set from the FIFO and assembles the data to W,X,Y,Z
 * 
 * --Custom Method!
 */
void MPU6050_ConvertToQuaternions()
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  if ((FIFOCounter == 42) | (FIFOCounter == 84))
 8001c4c:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	2b2a      	cmp	r3, #42	; 0x2a
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	2b54      	cmp	r3, #84	; 0x54
 8001c60:	bf0c      	ite	eq
 8001c62:	2301      	moveq	r3, #1
 8001c64:	2300      	movne	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d070      	beq.n	8001d52 <_Z28MPU6050_ConvertToQuaternionsv+0x10a>
  {
    mpu.getFIFOBytes(MPU6050_RX_buf, 16);
 8001c70:	2210      	movs	r2, #16
 8001c72:	493a      	ldr	r1, [pc, #232]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c74:	483a      	ldr	r0, [pc, #232]	; (8001d60 <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001c76:	f000 fee5 	bl	8002a44 <_ZN7MPU605012getFIFOBytesEPhh>
    MPUoutputQuaternion[0] = (float)(((int32_t)MPU6050_RX_buf[0] << 24)  | ((int32_t)MPU6050_RX_buf[1] << 16)  | ((int32_t)MPU6050_RX_buf[2] << 8)  | MPU6050_RX_buf[3 ]) / 1073741824;
 8001c7a:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	061a      	lsls	r2, r3, #24
 8001c80:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c82:	785b      	ldrb	r3, [r3, #1]
 8001c84:	041b      	lsls	r3, r3, #16
 8001c86:	431a      	orrs	r2, r3
 8001c88:	4b34      	ldr	r3, [pc, #208]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c8a:	789b      	ldrb	r3, [r3, #2]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	4a32      	ldr	r2, [pc, #200]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c92:	78d2      	ldrb	r2, [r2, #3]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f85c 	bl	8000d54 <__aeabi_i2f>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f95e 	bl	8000f64 <__aeabi_fdiv>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <_Z28MPU6050_ConvertToQuaternionsv+0x11c>)
 8001cae:	601a      	str	r2, [r3, #0]
    MPUoutputQuaternion[1] = (float)(((int32_t)MPU6050_RX_buf[4] << 24)  | ((int32_t)MPU6050_RX_buf[5] << 16)  | ((int32_t)MPU6050_RX_buf[6] << 8)  | MPU6050_RX_buf[7 ]) / 1073741824;
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cb2:	791b      	ldrb	r3, [r3, #4]
 8001cb4:	061a      	lsls	r2, r3, #24
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cb8:	795b      	ldrb	r3, [r3, #5]
 8001cba:	041b      	lsls	r3, r3, #16
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cc0:	799b      	ldrb	r3, [r3, #6]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cc8:	79d2      	ldrb	r2, [r2, #7]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f841 	bl	8000d54 <__aeabi_i2f>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff f943 	bl	8000f64 <__aeabi_fdiv>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <_Z28MPU6050_ConvertToQuaternionsv+0x11c>)
 8001ce4:	605a      	str	r2, [r3, #4]
    MPUoutputQuaternion[2] = (float)(((int32_t)MPU6050_RX_buf[8] << 24)  | ((int32_t)MPU6050_RX_buf[9] << 16)  | ((int32_t)MPU6050_RX_buf[10] << 8) | MPU6050_RX_buf[11]) / 1073741824;
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001ce8:	7a1b      	ldrb	r3, [r3, #8]
 8001cea:	061a      	lsls	r2, r3, #24
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cee:	7a5b      	ldrb	r3, [r3, #9]
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cf6:	7a9b      	ldrb	r3, [r3, #10]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cfe:	7ad2      	ldrb	r2, [r2, #11]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f826 	bl	8000d54 <__aeabi_i2f>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f928 	bl	8000f64 <__aeabi_fdiv>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <_Z28MPU6050_ConvertToQuaternionsv+0x11c>)
 8001d1a:	609a      	str	r2, [r3, #8]
    MPUoutputQuaternion[3] = (float)(((int32_t)MPU6050_RX_buf[12] << 24) | ((int32_t)MPU6050_RX_buf[13] << 16) | ((int32_t)MPU6050_RX_buf[14] << 8) | MPU6050_RX_buf[15]) / 1073741824;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d1e:	7b1b      	ldrb	r3, [r3, #12]
 8001d20:	061a      	lsls	r2, r3, #24
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d24:	7b5b      	ldrb	r3, [r3, #13]
 8001d26:	041b      	lsls	r3, r3, #16
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d2c:	7b9b      	ldrb	r3, [r3, #14]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	4313      	orrs	r3, r2
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d34:	7bd2      	ldrb	r2, [r2, #15]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f80b 	bl	8000d54 <__aeabi_i2f>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff f90d 	bl	8000f64 <__aeabi_fdiv>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <_Z28MPU6050_ConvertToQuaternionsv+0x11c>)
 8001d50:	60da      	str	r2, [r3, #12]
  }
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200004dc 	.word	0x200004dc
 8001d5c:	200004cc 	.word	0x200004cc
 8001d60:	200004e0 	.word	0x200004e0
 8001d64:	200005d0 	.word	0x200005d0

08001d68 <_Z27MPU6050_GetOriginQuaternionv>:
 * @brief Saves the current MPU6050 raw Quaternion as the Origin Quaternion
 * 
 * --Custom Method!
 */
void MPU6050_GetOriginQuaternion()
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  OriginQuaternion[0] = MPUoutputQuaternion[0];
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d72:	6013      	str	r3, [r2, #0]
  OriginQuaternion[1] = MPUoutputQuaternion[1];
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d7a:	6053      	str	r3, [r2, #4]
  OriginQuaternion[2] = MPUoutputQuaternion[2];
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d82:	6093      	str	r3, [r2, #8]
  OriginQuaternion[3] = MPUoutputQuaternion[3];
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d8a:	60d3      	str	r3, [r2, #12]
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	200005d0 	.word	0x200005d0
 8001d98:	200005e0 	.word	0x200005e0

08001d9c <_Z28update_FrameOriginQuaternionv>:
 * It does this to then be able to apply that Quaternion rotation to the W-Quaternion
 * 
 * --Custom Method!
 */
void update_FrameOriginQuaternion()//NOTDONE rename and add deadzones
{
 8001d9c:	b5b0      	push	{r4, r5, r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
  float temp_pitch = SBUS_Channels[0];          //deadzones
 8001da2:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <_Z28update_FrameOriginQuaternionv+0x194>)
 8001da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe ffd3 	bl	8000d54 <__aeabi_i2f>
 8001dae:	4603      	mov	r3, r0
 8001db0:	60fb      	str	r3, [r7, #12]
  float temp_roll  = SBUS_Channels[1];
 8001db2:	4b5f      	ldr	r3, [pc, #380]	; (8001f30 <_Z28update_FrameOriginQuaternionv+0x194>)
 8001db4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe ffcb 	bl	8000d54 <__aeabi_i2f>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	60bb      	str	r3, [r7, #8]
  float temp_yaw   = SBUS_Channels[3];
 8001dc2:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <_Z28update_FrameOriginQuaternionv+0x194>)
 8001dc4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe ffc3 	bl	8000d54 <__aeabi_i2f>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	607b      	str	r3, [r7, #4]
  if ((temp_pitch < pitchDeadzone) & (temp_pitch > -pitchDeadzone)) temp_pitch = 0;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	461c      	mov	r4, r3
 8001dd6:	4957      	ldr	r1, [pc, #348]	; (8001f34 <_Z28update_FrameOriginQuaternionv+0x198>)
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f7ff f9ad 	bl	8001138 <__aeabi_fcmplt>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <_Z28update_FrameOriginQuaternionv+0x4c>
 8001de4:	2300      	movs	r3, #0
 8001de6:	461c      	mov	r4, r3
 8001de8:	b2e4      	uxtb	r4, r4
 8001dea:	2301      	movs	r3, #1
 8001dec:	461d      	mov	r5, r3
 8001dee:	4952      	ldr	r1, [pc, #328]	; (8001f38 <_Z28update_FrameOriginQuaternionv+0x19c>)
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f7ff f9bf 	bl	8001174 <__aeabi_fcmpgt>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <_Z28update_FrameOriginQuaternionv+0x64>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	461d      	mov	r5, r3
 8001e00:	b2eb      	uxtb	r3, r5
 8001e02:	4023      	ands	r3, r4
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <_Z28update_FrameOriginQuaternionv+0x74>
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  if ((temp_roll  < rollDeadzone ) & (temp_roll  > -rollDeadzone )) temp_roll  = 0;
 8001e10:	2301      	movs	r3, #1
 8001e12:	461c      	mov	r4, r3
 8001e14:	4947      	ldr	r1, [pc, #284]	; (8001f34 <_Z28update_FrameOriginQuaternionv+0x198>)
 8001e16:	68b8      	ldr	r0, [r7, #8]
 8001e18:	f7ff f98e 	bl	8001138 <__aeabi_fcmplt>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <_Z28update_FrameOriginQuaternionv+0x8a>
 8001e22:	2300      	movs	r3, #0
 8001e24:	461c      	mov	r4, r3
 8001e26:	b2e4      	uxtb	r4, r4
 8001e28:	2301      	movs	r3, #1
 8001e2a:	461d      	mov	r5, r3
 8001e2c:	4942      	ldr	r1, [pc, #264]	; (8001f38 <_Z28update_FrameOriginQuaternionv+0x19c>)
 8001e2e:	68b8      	ldr	r0, [r7, #8]
 8001e30:	f7ff f9a0 	bl	8001174 <__aeabi_fcmpgt>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <_Z28update_FrameOriginQuaternionv+0xa2>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	461d      	mov	r5, r3
 8001e3e:	b2eb      	uxtb	r3, r5
 8001e40:	4023      	ands	r3, r4
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <_Z28update_FrameOriginQuaternionv+0xb2>
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
  if ((temp_yaw   < yawDeadzone  ) & (temp_yaw   > -yawDeadzone  )) temp_yaw   = 0;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	461c      	mov	r4, r3
 8001e52:	4938      	ldr	r1, [pc, #224]	; (8001f34 <_Z28update_FrameOriginQuaternionv+0x198>)
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff f96f 	bl	8001138 <__aeabi_fcmplt>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <_Z28update_FrameOriginQuaternionv+0xc8>
 8001e60:	2300      	movs	r3, #0
 8001e62:	461c      	mov	r4, r3
 8001e64:	b2e4      	uxtb	r4, r4
 8001e66:	2301      	movs	r3, #1
 8001e68:	461d      	mov	r5, r3
 8001e6a:	4933      	ldr	r1, [pc, #204]	; (8001f38 <_Z28update_FrameOriginQuaternionv+0x19c>)
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff f981 	bl	8001174 <__aeabi_fcmpgt>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <_Z28update_FrameOriginQuaternionv+0xe0>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	461d      	mov	r5, r3
 8001e7c:	b2eb      	uxtb	r3, r5
 8001e7e:	4023      	ands	r3, r4
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <_Z28update_FrameOriginQuaternionv+0xf0>
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
  
  updateQuaternion[0] = cos(temp_yaw          / 200000);                   //create rotation Quaternion
 8001e8c:	492b      	ldr	r1, [pc, #172]	; (8001f3c <_Z28update_FrameOriginQuaternionv+0x1a0>)
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff f868 	bl	8000f64 <__aeabi_fdiv>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fe7a 	bl	8001b90 <_ZSt3cosf>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <_Z28update_FrameOriginQuaternionv+0x1a4>)
 8001ea0:	6013      	str	r3, [r2, #0]
  updateQuaternion[1] = (float)sin(temp_pitch / 200000);
 8001ea2:	4926      	ldr	r1, [pc, #152]	; (8001f3c <_Z28update_FrameOriginQuaternionv+0x1a0>)
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7ff f85d 	bl	8000f64 <__aeabi_fdiv>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fe7b 	bl	8001ba8 <_ZSt3sinf>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a22      	ldr	r2, [pc, #136]	; (8001f40 <_Z28update_FrameOriginQuaternionv+0x1a4>)
 8001eb6:	6053      	str	r3, [r2, #4]
  updateQuaternion[2] = (float)sin(temp_roll  / 200000);
 8001eb8:	4920      	ldr	r1, [pc, #128]	; (8001f3c <_Z28update_FrameOriginQuaternionv+0x1a0>)
 8001eba:	68b8      	ldr	r0, [r7, #8]
 8001ebc:	f7ff f852 	bl	8000f64 <__aeabi_fdiv>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fe70 	bl	8001ba8 <_ZSt3sinf>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <_Z28update_FrameOriginQuaternionv+0x1a4>)
 8001ecc:	6093      	str	r3, [r2, #8]
  updateQuaternion[3] = sin(temp_yaw          / 100000);
 8001ece:	491d      	ldr	r1, [pc, #116]	; (8001f44 <_Z28update_FrameOriginQuaternionv+0x1a8>)
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff f847 	bl	8000f64 <__aeabi_fdiv>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fe65 	bl	8001ba8 <_ZSt3sinf>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <_Z28update_FrameOriginQuaternionv+0x1a4>)
 8001ee2:	60d3      	str	r3, [r2, #12]

  float *p3 = QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(FrameOriginQuaternion, LoopWQuaternion)), updateQuaternion));
 8001ee4:	4918      	ldr	r1, [pc, #96]	; (8001f48 <_Z28update_FrameOriginQuaternionv+0x1ac>)
 8001ee6:	4819      	ldr	r0, [pc, #100]	; (8001f4c <_Z28update_FrameOriginQuaternionv+0x1b0>)
 8001ee8:	f000 fb7e 	bl	80025e8 <_Z15QuaternionSLERPPfS_>
 8001eec:	4603      	mov	r3, r0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fb8c 	bl	800260c <_Z19QuaternionNormalizePf>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4912      	ldr	r1, [pc, #72]	; (8001f40 <_Z28update_FrameOriginQuaternionv+0x1a4>)
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fa47 	bl	800238c <_Z17QuaternionProductPfS_>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fb83 	bl	800260c <_Z19QuaternionNormalizePf>
 8001f06:	6038      	str	r0, [r7, #0]
  LoopWQuaternion[0] = *p3;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <_Z28update_FrameOriginQuaternionv+0x1ac>)
 8001f0e:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p3 + 1);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <_Z28update_FrameOriginQuaternionv+0x1ac>)
 8001f16:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p3 + 2);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <_Z28update_FrameOriginQuaternionv+0x1ac>)
 8001f1e:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p3 + 3);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <_Z28update_FrameOriginQuaternionv+0x1ac>)
 8001f26:	60d3      	str	r3, [r2, #12]
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f30:	20000658 	.word	0x20000658
 8001f34:	40a00000 	.word	0x40a00000
 8001f38:	c0a00000 	.word	0xc0a00000
 8001f3c:	48435000 	.word	0x48435000
 8001f40:	20000600 	.word	0x20000600
 8001f44:	47c35000 	.word	0x47c35000
 8001f48:	2000002c 	.word	0x2000002c
 8001f4c:	2000001c 	.word	0x2000001c

08001f50 <_Z12MPU6050_initv>:
 * @brief Initializes the MPU6050 and initializes and starts the DMP functionality
 * 
 * --Custom Method!
 */
void MPU6050_init()
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);  //disable SBUS pin interrupt
 8001f56:	2006      	movs	r0, #6
 8001f58:	f005 fb1d 	bl	8007596 <HAL_NVIC_DisableIRQ>
  HAL_Delay(10);
 8001f5c:	200a      	movs	r0, #10
 8001f5e:	f004 ff53 	bl	8006e08 <HAL_Delay>
  mpu.initialize();                 //initialize that object
 8001f62:	4824      	ldr	r0, [pc, #144]	; (8001ff4 <_Z12MPU6050_initv+0xa4>)
 8001f64:	f000 fbd7 	bl	8002716 <_ZN7MPU605010initializeEv>
  if (mpu.testConnection()) 
 8001f68:	4822      	ldr	r0, [pc, #136]	; (8001ff4 <_Z12MPU6050_initv+0xa4>)
 8001f6a:	f000 fbec 	bl	8002746 <_ZN7MPU605014testConnectionEv>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d027      	beq.n	8001fc4 <_Z12MPU6050_initv+0x74>
  {
    LED_status_MPU_init();   //NOTDONE debug
 8001f74:	f002 fe78 	bl	8004c68 <_Z19LED_status_MPU_initv>
    {
      LED_status_MPU_initFail();
    }
  }
  
  uint8_t devStatus = mpu.dmpInitialize();              //initialize DMP (Digital Motion Processing)
 8001f78:	481e      	ldr	r0, [pc, #120]	; (8001ff4 <_Z12MPU6050_initv+0xa4>)
 8001f7a:	f001 f973 	bl	8003264 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  
  mpu.setXAccelOffset(  955);         //apply custom offset values
 8001f82:	f240 31bb 	movw	r1, #955	; 0x3bb
 8001f86:	481b      	ldr	r0, [pc, #108]	; (8001ff4 <_Z12MPU6050_initv+0xa4>)
 8001f88:	f000 fe24 	bl	8002bd4 <_ZN7MPU605015setXAccelOffsetEs>
  mpu.setYAccelOffset(-1707);
 8001f8c:	491a      	ldr	r1, [pc, #104]	; (8001ff8 <_Z12MPU6050_initv+0xa8>)
 8001f8e:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <_Z12MPU6050_initv+0xa4>)
 8001f90:	f000 fe31 	bl	8002bf6 <_ZN7MPU605015setYAccelOffsetEs>
  mpu.setZAccelOffset(  802);
 8001f94:	f240 3122 	movw	r1, #802	; 0x322
 8001f98:	4816      	ldr	r0, [pc, #88]	; (8001ff4 <_Z12MPU6050_initv+0xa4>)
 8001f9a:	f000 fe3d 	bl	8002c18 <_ZN7MPU605015setZAccelOffsetEs>
  mpu.setXGyroOffset(   -12);
 8001f9e:	f06f 010b 	mvn.w	r1, #11
 8001fa2:	4814      	ldr	r0, [pc, #80]	; (8001ff4 <_Z12MPU6050_initv+0xa4>)
 8001fa4:	f000 fe49 	bl	8002c3a <_ZN7MPU605014setXGyroOffsetEs>
  mpu.setYGyroOffset(    -4);
 8001fa8:	f06f 0103 	mvn.w	r1, #3
 8001fac:	4811      	ldr	r0, [pc, #68]	; (8001ff4 <_Z12MPU6050_initv+0xa4>)
 8001fae:	f000 fe55 	bl	8002c5c <_ZN7MPU605014setYGyroOffsetEs>
  mpu.setZGyroOffset(   -27);
 8001fb2:	f06f 011a 	mvn.w	r1, #26
 8001fb6:	480f      	ldr	r0, [pc, #60]	; (8001ff4 <_Z12MPU6050_initv+0xa4>)
 8001fb8:	f000 fe61 	bl	8002c7e <_ZN7MPU605014setZGyroOffsetEs>

  if (devStatus == 0) {
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10e      	bne.n	8001fe0 <_Z12MPU6050_initv+0x90>
 8001fc2:	e002      	b.n	8001fca <_Z12MPU6050_initv+0x7a>
      LED_status_MPU_initFail();
 8001fc4:	f002 fe56 	bl	8004c74 <_Z23LED_status_MPU_initFailv>
 8001fc8:	e7fc      	b.n	8001fc4 <_Z12MPU6050_initv+0x74>
      mpu.setDMPEnabled(true);
 8001fca:	2101      	movs	r1, #1
 8001fcc:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <_Z12MPU6050_initv+0xa4>)
 8001fce:	f000 fe67 	bl	8002ca0 <_ZN7MPU605013setDMPEnabledEb>
      mpu.getIntStatus();
 8001fd2:	4808      	ldr	r0, [pc, #32]	; (8001ff4 <_Z12MPU6050_initv+0xa4>)
 8001fd4:	f000 fc97 	bl	8002906 <_ZN7MPU605012getIntStatusEv>
      packetSize = 42;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <_Z12MPU6050_initv+0xac>)
 8001fda:	222a      	movs	r2, #42	; 0x2a
 8001fdc:	801a      	strh	r2, [r3, #0]
 8001fde:	e002      	b.n	8001fe6 <_Z12MPU6050_initv+0x96>
  } else {
    while (1)
    {
      LED_status_MPU_initFail();
 8001fe0:	f002 fe48 	bl	8004c74 <_Z23LED_status_MPU_initFailv>
 8001fe4:	e7fc      	b.n	8001fe0 <_Z12MPU6050_initv+0x90>
    }
  }
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   //enable SBUS pin interrupt
 8001fe6:	2006      	movs	r0, #6
 8001fe8:	f005 fac7 	bl	800757a <HAL_NVIC_EnableIRQ>
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	200004e0 	.word	0x200004e0
 8001ff8:	fffff955 	.word	0xfffff955
 8001ffc:	200004de 	.word	0x200004de

08002000 <_Z19MPU6050_calibrationv>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void MPU6050_calibration()//NOTDONE comment
{
 8002000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002004:	b0e1      	sub	sp, #388	; 0x184
 8002006:	af08      	add	r7, sp, #32
  LED_ResetAll();  
 8002008:	f002 fdfe 	bl	8004c08 <_Z12LED_ResetAllv>
  uint8_t MPU_calibrated = false;
 800200c:	2300      	movs	r3, #0
 800200e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

  while (MPU_calibrated == false)
 8002012:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 8194 	bne.w	8002344 <_Z19MPU6050_calibrationv+0x344>
  {
    uint16_t counter = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
    MPU6050_resetFIFO();
 8002022:	f7ff fdeb 	bl	8001bfc <_Z17MPU6050_resetFIFOv>
    MPU6050_WaitForQuaternionSet();
 8002026:	f7ff fdf3 	bl	8001c10 <_Z28MPU6050_WaitForQuaternionSetv>
    MPU6050_ConvertToQuaternions();
 800202a:	f7ff fe0d 	bl	8001c48 <_Z28MPU6050_ConvertToQuaternionsv>
    MPU6050_GetOriginQuaternion();
 800202e:	f7ff fe9b 	bl	8001d68 <_Z27MPU6050_GetOriginQuaternionv>
    get_XW_diffAngles();
 8002032:	f001 fbe1 	bl	80037f8 <_Z17get_XW_diffAnglesv>

    uint16_t oldTime = TIM11->CNT;
 8002036:	4bba      	ldr	r3, [pc, #744]	; (8002320 <_Z19MPU6050_calibrationv+0x320>)
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a

    float startAngles[3] = {
    PID_Pitch_xw_diff,
    PID_Roll_xw_diff ,
    PID_Yaw_xw_diff  };
 800203e:	4bb9      	ldr	r3, [pc, #740]	; (8002324 <_Z19MPU6050_calibrationv+0x324>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002046:	4bb8      	ldr	r3, [pc, #736]	; (8002328 <_Z19MPU6050_calibrationv+0x328>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800204e:	4bb7      	ldr	r3, [pc, #732]	; (800232c <_Z19MPU6050_calibrationv+0x32c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    while 
    (                                                                                                                                     \
    (startAngles[0] - PID_Pitch_xw_diff < MPU6050_cal_Pitch_MaxDev) & (startAngles[0] - PID_Pitch_xw_diff > -MPU6050_cal_Pitch_MaxDev) &  \
 8002056:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800205a:	4ab2      	ldr	r2, [pc, #712]	; (8002324 <_Z19MPU6050_calibrationv+0x324>)
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fdc1 	bl	8000be8 <__aeabi_fsub>
 8002066:	4603      	mov	r3, r0
 8002068:	2201      	movs	r2, #1
 800206a:	4614      	mov	r4, r2
 800206c:	49b0      	ldr	r1, [pc, #704]	; (8002330 <_Z19MPU6050_calibrationv+0x330>)
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff f862 	bl	8001138 <__aeabi_fcmplt>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <_Z19MPU6050_calibrationv+0x7e>
 800207a:	2300      	movs	r3, #0
 800207c:	461c      	mov	r4, r3
 800207e:	b2e4      	uxtb	r4, r4
 8002080:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002084:	4aa7      	ldr	r2, [pc, #668]	; (8002324 <_Z19MPU6050_calibrationv+0x324>)
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fdac 	bl	8000be8 <__aeabi_fsub>
 8002090:	4603      	mov	r3, r0
 8002092:	2201      	movs	r2, #1
 8002094:	4615      	mov	r5, r2
 8002096:	49a7      	ldr	r1, [pc, #668]	; (8002334 <_Z19MPU6050_calibrationv+0x334>)
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f86b 	bl	8001174 <__aeabi_fcmpgt>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <_Z19MPU6050_calibrationv+0xa8>
 80020a4:	2300      	movs	r3, #0
 80020a6:	461d      	mov	r5, r3
 80020a8:	b2eb      	uxtb	r3, r5
 80020aa:	4023      	ands	r3, r4
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461c      	mov	r4, r3
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 80020b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80020b4:	4a9c      	ldr	r2, [pc, #624]	; (8002328 <_Z19MPU6050_calibrationv+0x328>)
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fd94 	bl	8000be8 <__aeabi_fsub>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2201      	movs	r2, #1
 80020c4:	4615      	mov	r5, r2
 80020c6:	499a      	ldr	r1, [pc, #616]	; (8002330 <_Z19MPU6050_calibrationv+0x330>)
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff f835 	bl	8001138 <__aeabi_fcmplt>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <_Z19MPU6050_calibrationv+0xd8>
 80020d4:	2300      	movs	r3, #0
 80020d6:	461d      	mov	r5, r3
 80020d8:	b2eb      	uxtb	r3, r5
    (startAngles[0] - PID_Pitch_xw_diff < MPU6050_cal_Pitch_MaxDev) & (startAngles[0] - PID_Pitch_xw_diff > -MPU6050_cal_Pitch_MaxDev) &  \
 80020da:	401c      	ands	r4, r3
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 80020dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80020e0:	4a91      	ldr	r2, [pc, #580]	; (8002328 <_Z19MPU6050_calibrationv+0x328>)
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fd7e 	bl	8000be8 <__aeabi_fsub>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2201      	movs	r2, #1
 80020f0:	4615      	mov	r5, r2
 80020f2:	4990      	ldr	r1, [pc, #576]	; (8002334 <_Z19MPU6050_calibrationv+0x334>)
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff f83d 	bl	8001174 <__aeabi_fcmpgt>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <_Z19MPU6050_calibrationv+0x104>
 8002100:	2300      	movs	r3, #0
 8002102:	461d      	mov	r5, r3
 8002104:	b2eb      	uxtb	r3, r5
 8002106:	401c      	ands	r4, r3
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 8002108:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800210c:	4a87      	ldr	r2, [pc, #540]	; (800232c <_Z19MPU6050_calibrationv+0x32c>)
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fd68 	bl	8000be8 <__aeabi_fsub>
 8002118:	4603      	mov	r3, r0
 800211a:	2201      	movs	r2, #1
 800211c:	4615      	mov	r5, r2
 800211e:	4984      	ldr	r1, [pc, #528]	; (8002330 <_Z19MPU6050_calibrationv+0x330>)
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff f809 	bl	8001138 <__aeabi_fcmplt>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <_Z19MPU6050_calibrationv+0x130>
 800212c:	2300      	movs	r3, #0
 800212e:	461d      	mov	r5, r3
 8002130:	b2eb      	uxtb	r3, r5
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 8002132:	401c      	ands	r4, r3
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 8002134:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002138:	4a7c      	ldr	r2, [pc, #496]	; (800232c <_Z19MPU6050_calibrationv+0x32c>)
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fd52 	bl	8000be8 <__aeabi_fsub>
 8002144:	4603      	mov	r3, r0
 8002146:	2201      	movs	r2, #1
 8002148:	4615      	mov	r5, r2
 800214a:	497a      	ldr	r1, [pc, #488]	; (8002334 <_Z19MPU6050_calibrationv+0x334>)
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff f811 	bl	8001174 <__aeabi_fcmpgt>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <_Z19MPU6050_calibrationv+0x15c>
 8002158:	2300      	movs	r3, #0
 800215a:	461d      	mov	r5, r3
 800215c:	b2eb      	uxtb	r3, r5
 800215e:	4023      	ands	r3, r4
    (counter < MPU6050_cal_Time)                                                                                                          \
 8002160:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8002164:	f640 719f 	movw	r1, #3999	; 0xf9f
 8002168:	428a      	cmp	r2, r1
 800216a:	bf94      	ite	ls
 800216c:	2201      	movls	r2, #1
 800216e:	2200      	movhi	r2, #0
 8002170:	b2d2      	uxtb	r2, r2
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 8002172:	4013      	ands	r3, r2
    (counter < MPU6050_cal_Time)                                                                                                          \
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80c2 	beq.w	80022fe <_Z19MPU6050_calibrationv+0x2fe>
    )                                                                                                                                     \
    {
      LED_status_Gyro_cal();
 800217a:	f002 fe8f 	bl	8004e9c <_Z19LED_status_Gyro_calv>

      MPU6050_resetFIFO();
 800217e:	f7ff fd3d 	bl	8001bfc <_Z17MPU6050_resetFIFOv>
      MPU6050_WaitForQuaternionSet();
 8002182:	f7ff fd45 	bl	8001c10 <_Z28MPU6050_WaitForQuaternionSetv>
      MPU6050_ConvertToQuaternions();
 8002186:	f7ff fd5f 	bl	8001c48 <_Z28MPU6050_ConvertToQuaternionsv>
      get_XW_diffAngles();
 800218a:	f001 fb35 	bl	80037f8 <_Z17get_XW_diffAnglesv>
      for (size_t i = 0; i < 1; i++)
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002194:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002198:	2b00      	cmp	r3, #0
 800219a:	f040 8097 	bne.w	80022cc <_Z19MPU6050_calibrationv+0x2cc>
	      uint8_t x = 0;
	      while (msg[x] != NULL) x++;
	      unsigned char msgTransmit[x];
	      for (size_t i = 0; i < x; i++) msgTransmit[i] = msg[i];
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
      }
 800219e:	466b      	mov	r3, sp
 80021a0:	603b      	str	r3, [r7, #0]
        , MPU6050_RX_buf[0]                    \
 80021a2:	4b65      	ldr	r3, [pc, #404]	; (8002338 <_Z19MPU6050_calibrationv+0x338>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
	      sprintf((char*)msg,"%hu %f %f %f %hu %hu \r\n" \
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	4b5e      	ldr	r3, [pc, #376]	; (8002324 <_Z19MPU6050_calibrationv+0x324>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f977 	bl	80004a0 <__aeabi_f2d>
 80021b2:	4604      	mov	r4, r0
 80021b4:	460d      	mov	r5, r1
 80021b6:	4b5c      	ldr	r3, [pc, #368]	; (8002328 <_Z19MPU6050_calibrationv+0x328>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f970 	bl	80004a0 <__aeabi_f2d>
 80021c0:	4680      	mov	r8, r0
 80021c2:	4689      	mov	r9, r1
 80021c4:	4b59      	ldr	r3, [pc, #356]	; (800232c <_Z19MPU6050_calibrationv+0x32c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe f969 	bl	80004a0 <__aeabi_f2d>
 80021ce:	4682      	mov	sl, r0
 80021d0:	468b      	mov	fp, r1
 80021d2:	f8b7 6158 	ldrh.w	r6, [r7, #344]	; 0x158
        , mpu.getFIFOCount());
 80021d6:	4859      	ldr	r0, [pc, #356]	; (800233c <_Z19MPU6050_calibrationv+0x33c>)
 80021d8:	f000 fc1a 	bl	8002a10 <_ZN7MPU605012getFIFOCountEv>
 80021dc:	4603      	mov	r3, r0
	      sprintf((char*)msg,"%hu %f %f %f %hu %hu \r\n" \
 80021de:	461a      	mov	r2, r3
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	9207      	str	r2, [sp, #28]
 80021e6:	9606      	str	r6, [sp, #24]
 80021e8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80021ec:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80021f0:	e9cd 4500 	strd	r4, r5, [sp]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	4952      	ldr	r1, [pc, #328]	; (8002340 <_Z19MPU6050_calibrationv+0x340>)
 80021f8:	4618      	mov	r0, r3
 80021fa:	f010 fbb5 	bl	8012968 <siprintf>
	      uint8_t x = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
	      while (msg[x] != NULL) x++;
 8002204:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8002208:	f107 020c 	add.w	r2, r7, #12
 800220c:	5cd3      	ldrb	r3, [r2, r3]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <_Z19MPU6050_calibrationv+0x21e>
 8002212:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8002216:	3301      	adds	r3, #1
 8002218:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
 800221c:	e7f2      	b.n	8002204 <_Z19MPU6050_calibrationv+0x204>
	      unsigned char msgTransmit[x];
 800221e:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8002222:	1e5c      	subs	r4, r3, #1
 8002224:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8002228:	4623      	mov	r3, r4
 800222a:	3301      	adds	r3, #1
 800222c:	4618      	mov	r0, r3
 800222e:	f04f 0100 	mov.w	r1, #0
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	00cb      	lsls	r3, r1, #3
 800223c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002240:	00c2      	lsls	r2, r0, #3
 8002242:	4623      	mov	r3, r4
 8002244:	3301      	adds	r3, #1
 8002246:	4618      	mov	r0, r3
 8002248:	f04f 0100 	mov.w	r1, #0
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	00cb      	lsls	r3, r1, #3
 8002256:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800225a:	00c2      	lsls	r2, r0, #3
 800225c:	4623      	mov	r3, r4
 800225e:	3301      	adds	r3, #1
 8002260:	3307      	adds	r3, #7
 8002262:	08db      	lsrs	r3, r3, #3
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	ebad 0d03 	sub.w	sp, sp, r3
 800226a:	ab08      	add	r3, sp, #32
 800226c:	3300      	adds	r3, #0
 800226e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	      for (size_t i = 0; i < x; i++) msgTransmit[i] = msg[i];
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002278:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 800227c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8002280:	429a      	cmp	r2, r3
 8002282:	d212      	bcs.n	80022aa <_Z19MPU6050_calibrationv+0x2aa>
 8002284:	f107 020c 	add.w	r2, r7, #12
 8002288:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800228c:	4413      	add	r3, r2
 800228e:	7819      	ldrb	r1, [r3, #0]
 8002290:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002294:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002298:	4413      	add	r3, r2
 800229a:	460a      	mov	r2, r1
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80022a2:	3301      	adds	r3, #1
 80022a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80022a8:	e7e6      	b.n	8002278 <_Z19MPU6050_calibrationv+0x278>
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 80022aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80022ae:	b2a3      	uxth	r3, r4
 80022b0:	3301      	adds	r3, #1
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	4610      	mov	r0, r2
 80022b8:	f00d f872 	bl	800f3a0 <CDC_Transmit_FS>
 80022bc:	f8d7 d000 	ldr.w	sp, [r7]
      for (size_t i = 0; i < 1; i++)
 80022c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80022c4:	3301      	adds	r3, #1
 80022c6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80022ca:	e763      	b.n	8002194 <_Z19MPU6050_calibrationv+0x194>

      while ((TIM11->CNT - oldTime) < 10000) ;
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <_Z19MPU6050_calibrationv+0x320>)
 80022ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d0:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80022da:	4293      	cmp	r3, r2
 80022dc:	bf94      	ite	ls
 80022de:	2301      	movls	r3, #1
 80022e0:	2300      	movhi	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d000      	beq.n	80022ea <_Z19MPU6050_calibrationv+0x2ea>
 80022e8:	e7f0      	b.n	80022cc <_Z19MPU6050_calibrationv+0x2cc>
      oldTime = TIM11->CNT;
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <_Z19MPU6050_calibrationv+0x320>)
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
      counter += 10;
 80022f2:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 80022f6:	330a      	adds	r3, #10
 80022f8:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
    while 
 80022fc:	e6ab      	b.n	8002056 <_Z19MPU6050_calibrationv+0x56>
    }
    if (counter >= MPU6050_cal_Time)
 80022fe:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8002302:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002306:	d302      	bcc.n	800230e <_Z19MPU6050_calibrationv+0x30e>
    {
      MPU_calibrated = true;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
    }

    if (MPU_calibrated == false)
 800230e:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002312:	2b00      	cmp	r3, #0
 8002314:	f47f ae7d 	bne.w	8002012 <_Z19MPU6050_calibrationv+0x12>
    {
      LED_status_Gyro_calFail();
 8002318:	f002 fe3c 	bl	8004f94 <_Z23LED_status_Gyro_calFailv>
  while (MPU_calibrated == false)
 800231c:	e679      	b.n	8002012 <_Z19MPU6050_calibrationv+0x12>
 800231e:	bf00      	nop
 8002320:	40014800 	.word	0x40014800
 8002324:	20000534 	.word	0x20000534
 8002328:	20000538 	.word	0x20000538
 800232c:	2000053c 	.word	0x2000053c
 8002330:	40a00000 	.word	0x40a00000
 8002334:	c0a00000 	.word	0xc0a00000
 8002338:	200004cc 	.word	0x200004cc
 800233c:	200004e0 	.word	0x200004e0
 8002340:	08014c60 	.word	0x08014c60
    }
  }
  MPU6050_GetOriginQuaternion();
 8002344:	f7ff fd10 	bl	8001d68 <_Z27MPU6050_GetOriginQuaternionv>

  float *p = QuaternionNormalize(GyroOriginQuaternion);
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <_Z19MPU6050_calibrationv+0x388>)
 800234a:	f000 f95f 	bl	800260c <_Z19QuaternionNormalizePf>
 800234e:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
  GyroOriginQuaternion[0] = *p;
 8002352:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0b      	ldr	r2, [pc, #44]	; (8002388 <_Z19MPU6050_calibrationv+0x388>)
 800235a:	6013      	str	r3, [r2, #0]
  GyroOriginQuaternion[1] = *(p + 1);
 800235c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4a09      	ldr	r2, [pc, #36]	; (8002388 <_Z19MPU6050_calibrationv+0x388>)
 8002364:	6053      	str	r3, [r2, #4]
  GyroOriginQuaternion[2] = *(p + 2);
 8002366:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4a06      	ldr	r2, [pc, #24]	; (8002388 <_Z19MPU6050_calibrationv+0x388>)
 800236e:	6093      	str	r3, [r2, #8]
  GyroOriginQuaternion[3] = *(p + 3);
 8002370:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	4a04      	ldr	r2, [pc, #16]	; (8002388 <_Z19MPU6050_calibrationv+0x388>)
 8002378:	60d3      	str	r3, [r2, #12]

}
 800237a:	bf00      	nop
 800237c:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8002380:	46bd      	mov	sp, r7
 8002382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002386:	bf00      	nop
 8002388:	2000003c 	.word	0x2000003c

0800238c <_Z17QuaternionProductPfS_>:
 * @return float product-Quaternion
 * 
 * --Custom Method!
 */
float *QuaternionProduct(float *q1, float *q2)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  static float q3[4];
  q3[0] = (q1[0] * q2[0]) - (q1[1] * q2[1]) - (q1[2] * q2[2]) - (q1[3] * q2[3]);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4619      	mov	r1, r3
 80023a0:	4610      	mov	r0, r2
 80023a2:	f7fe fd2b 	bl	8000dfc <__aeabi_fmul>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461c      	mov	r4, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3304      	adds	r3, #4
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	3304      	adds	r3, #4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4619      	mov	r1, r3
 80023b8:	4610      	mov	r0, r2
 80023ba:	f7fe fd1f 	bl	8000dfc <__aeabi_fmul>
 80023be:	4603      	mov	r3, r0
 80023c0:	4619      	mov	r1, r3
 80023c2:	4620      	mov	r0, r4
 80023c4:	f7fe fc10 	bl	8000be8 <__aeabi_fsub>
 80023c8:	4603      	mov	r3, r0
 80023ca:	461c      	mov	r4, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3308      	adds	r3, #8
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	3308      	adds	r3, #8
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	4610      	mov	r0, r2
 80023dc:	f7fe fd0e 	bl	8000dfc <__aeabi_fmul>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4619      	mov	r1, r3
 80023e4:	4620      	mov	r0, r4
 80023e6:	f7fe fbff 	bl	8000be8 <__aeabi_fsub>
 80023ea:	4603      	mov	r3, r0
 80023ec:	461c      	mov	r4, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	330c      	adds	r3, #12
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	330c      	adds	r3, #12
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4619      	mov	r1, r3
 80023fc:	4610      	mov	r0, r2
 80023fe:	f7fe fcfd 	bl	8000dfc <__aeabi_fmul>
 8002402:	4603      	mov	r3, r0
 8002404:	4619      	mov	r1, r3
 8002406:	4620      	mov	r0, r4
 8002408:	f7fe fbee 	bl	8000be8 <__aeabi_fsub>
 800240c:	4603      	mov	r3, r0
 800240e:	461a      	mov	r2, r3
 8002410:	4b61      	ldr	r3, [pc, #388]	; (8002598 <_Z17QuaternionProductPfS_+0x20c>)
 8002412:	601a      	str	r2, [r3, #0]
  q3[1] = (q1[0] * q2[1]) + (q1[1] * q2[0]) + (q1[2] * q2[3]) - (q1[3] * q2[2]);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	3304      	adds	r3, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	4610      	mov	r0, r2
 8002422:	f7fe fceb 	bl	8000dfc <__aeabi_fmul>
 8002426:	4603      	mov	r3, r0
 8002428:	461c      	mov	r4, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	4610      	mov	r0, r2
 8002438:	f7fe fce0 	bl	8000dfc <__aeabi_fmul>
 800243c:	4603      	mov	r3, r0
 800243e:	4619      	mov	r1, r3
 8002440:	4620      	mov	r0, r4
 8002442:	f7fe fbd3 	bl	8000bec <__addsf3>
 8002446:	4603      	mov	r3, r0
 8002448:	461c      	mov	r4, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3308      	adds	r3, #8
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	330c      	adds	r3, #12
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4619      	mov	r1, r3
 8002458:	4610      	mov	r0, r2
 800245a:	f7fe fccf 	bl	8000dfc <__aeabi_fmul>
 800245e:	4603      	mov	r3, r0
 8002460:	4619      	mov	r1, r3
 8002462:	4620      	mov	r0, r4
 8002464:	f7fe fbc2 	bl	8000bec <__addsf3>
 8002468:	4603      	mov	r3, r0
 800246a:	461c      	mov	r4, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	330c      	adds	r3, #12
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	3308      	adds	r3, #8
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4619      	mov	r1, r3
 800247a:	4610      	mov	r0, r2
 800247c:	f7fe fcbe 	bl	8000dfc <__aeabi_fmul>
 8002480:	4603      	mov	r3, r0
 8002482:	4619      	mov	r1, r3
 8002484:	4620      	mov	r0, r4
 8002486:	f7fe fbaf 	bl	8000be8 <__aeabi_fsub>
 800248a:	4603      	mov	r3, r0
 800248c:	461a      	mov	r2, r3
 800248e:	4b42      	ldr	r3, [pc, #264]	; (8002598 <_Z17QuaternionProductPfS_+0x20c>)
 8002490:	605a      	str	r2, [r3, #4]
  q3[2] = (q1[0] * q2[2]) - (q1[1] * q2[3]) + (q1[2] * q2[0]) + (q1[3] * q2[1]);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	3308      	adds	r3, #8
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	4610      	mov	r0, r2
 80024a0:	f7fe fcac 	bl	8000dfc <__aeabi_fmul>
 80024a4:	4603      	mov	r3, r0
 80024a6:	461c      	mov	r4, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3304      	adds	r3, #4
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	330c      	adds	r3, #12
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f7fe fca0 	bl	8000dfc <__aeabi_fmul>
 80024bc:	4603      	mov	r3, r0
 80024be:	4619      	mov	r1, r3
 80024c0:	4620      	mov	r0, r4
 80024c2:	f7fe fb91 	bl	8000be8 <__aeabi_fsub>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461c      	mov	r4, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3308      	adds	r3, #8
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f7fe fc90 	bl	8000dfc <__aeabi_fmul>
 80024dc:	4603      	mov	r3, r0
 80024de:	4619      	mov	r1, r3
 80024e0:	4620      	mov	r0, r4
 80024e2:	f7fe fb83 	bl	8000bec <__addsf3>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461c      	mov	r4, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	330c      	adds	r3, #12
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	3304      	adds	r3, #4
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4619      	mov	r1, r3
 80024f8:	4610      	mov	r0, r2
 80024fa:	f7fe fc7f 	bl	8000dfc <__aeabi_fmul>
 80024fe:	4603      	mov	r3, r0
 8002500:	4619      	mov	r1, r3
 8002502:	4620      	mov	r0, r4
 8002504:	f7fe fb72 	bl	8000bec <__addsf3>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	4b22      	ldr	r3, [pc, #136]	; (8002598 <_Z17QuaternionProductPfS_+0x20c>)
 800250e:	609a      	str	r2, [r3, #8]
  q3[3] = (q1[0] * q2[3]) + (q1[1] * q2[2]) - (q1[2] * q2[1]) + (q1[3] * q2[0]);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	330c      	adds	r3, #12
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4619      	mov	r1, r3
 800251c:	4610      	mov	r0, r2
 800251e:	f7fe fc6d 	bl	8000dfc <__aeabi_fmul>
 8002522:	4603      	mov	r3, r0
 8002524:	461c      	mov	r4, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3304      	adds	r3, #4
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	3308      	adds	r3, #8
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4619      	mov	r1, r3
 8002534:	4610      	mov	r0, r2
 8002536:	f7fe fc61 	bl	8000dfc <__aeabi_fmul>
 800253a:	4603      	mov	r3, r0
 800253c:	4619      	mov	r1, r3
 800253e:	4620      	mov	r0, r4
 8002540:	f7fe fb54 	bl	8000bec <__addsf3>
 8002544:	4603      	mov	r3, r0
 8002546:	461c      	mov	r4, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3308      	adds	r3, #8
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	3304      	adds	r3, #4
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f7fe fc50 	bl	8000dfc <__aeabi_fmul>
 800255c:	4603      	mov	r3, r0
 800255e:	4619      	mov	r1, r3
 8002560:	4620      	mov	r0, r4
 8002562:	f7fe fb41 	bl	8000be8 <__aeabi_fsub>
 8002566:	4603      	mov	r3, r0
 8002568:	461c      	mov	r4, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	330c      	adds	r3, #12
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f7fe fc40 	bl	8000dfc <__aeabi_fmul>
 800257c:	4603      	mov	r3, r0
 800257e:	4619      	mov	r1, r3
 8002580:	4620      	mov	r0, r4
 8002582:	f7fe fb33 	bl	8000bec <__addsf3>
 8002586:	4603      	mov	r3, r0
 8002588:	461a      	mov	r2, r3
 800258a:	4b03      	ldr	r3, [pc, #12]	; (8002598 <_Z17QuaternionProductPfS_+0x20c>)
 800258c:	60da      	str	r2, [r3, #12]
  return q3;
 800258e:	4b02      	ldr	r3, [pc, #8]	; (8002598 <_Z17QuaternionProductPfS_+0x20c>)
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}
 8002598:	20000500 	.word	0x20000500

0800259c <_Z17QuaternionInversePf>:
 * @return float inverse Quaternion
 * 
 * --Custom Method!
 */
float *QuaternionInverse(float *q1)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  static float qi[4];
  qi[0] = q1[0];
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <_Z17QuaternionInversePf+0x48>)
 80025aa:	6013      	str	r3, [r2, #0]
  qi[1] = q1[1] * -1;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3304      	adds	r3, #4
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025b6:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <_Z17QuaternionInversePf+0x48>)
 80025b8:	6053      	str	r3, [r2, #4]
  qi[2] = q1[2] * -1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3308      	adds	r3, #8
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025c4:	4a07      	ldr	r2, [pc, #28]	; (80025e4 <_Z17QuaternionInversePf+0x48>)
 80025c6:	6093      	str	r3, [r2, #8]
  qi[3] = q1[3] * -1;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	330c      	adds	r3, #12
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025d2:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <_Z17QuaternionInversePf+0x48>)
 80025d4:	60d3      	str	r3, [r2, #12]
  return qi;
 80025d6:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <_Z17QuaternionInversePf+0x48>)
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000510 	.word	0x20000510

080025e8 <_Z15QuaternionSLERPPfS_>:
 * @return float interpolation quaternion
 * 
 * --Custom Method!
 */
float * QuaternionSLERP(float *q1, float *q2)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  return QuaternionProduct(&q2[0], QuaternionInverse(&q1[0]));
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff ffd2 	bl	800259c <_Z17QuaternionInversePf>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4619      	mov	r1, r3
 80025fc:	6838      	ldr	r0, [r7, #0]
 80025fe:	f7ff fec5 	bl	800238c <_Z17QuaternionProductPfS_>
 8002602:	4603      	mov	r3, r0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <_Z19QuaternionNormalizePf>:
 * @return float* pointer to normalized quaternion
 * 
 * --Custom Method!
 */
float *QuaternionNormalize(float *q1)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  float vectorlength = sqrt((q1[0] * q1[0]) + (q1[1] * q1[1]) + (q1[2] * q1[2]) + (q1[3] * q1[3]));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4619      	mov	r1, r3
 800261e:	4610      	mov	r0, r2
 8002620:	f7fe fbec 	bl	8000dfc <__aeabi_fmul>
 8002624:	4603      	mov	r3, r0
 8002626:	461c      	mov	r4, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3304      	adds	r3, #4
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f7fe fbe0 	bl	8000dfc <__aeabi_fmul>
 800263c:	4603      	mov	r3, r0
 800263e:	4619      	mov	r1, r3
 8002640:	4620      	mov	r0, r4
 8002642:	f7fe fad3 	bl	8000bec <__addsf3>
 8002646:	4603      	mov	r3, r0
 8002648:	461c      	mov	r4, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3308      	adds	r3, #8
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3308      	adds	r3, #8
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4619      	mov	r1, r3
 8002658:	4610      	mov	r0, r2
 800265a:	f7fe fbcf 	bl	8000dfc <__aeabi_fmul>
 800265e:	4603      	mov	r3, r0
 8002660:	4619      	mov	r1, r3
 8002662:	4620      	mov	r0, r4
 8002664:	f7fe fac2 	bl	8000bec <__addsf3>
 8002668:	4603      	mov	r3, r0
 800266a:	461c      	mov	r4, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	330c      	adds	r3, #12
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	330c      	adds	r3, #12
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4619      	mov	r1, r3
 800267a:	4610      	mov	r0, r2
 800267c:	f7fe fbbe 	bl	8000dfc <__aeabi_fmul>
 8002680:	4603      	mov	r3, r0
 8002682:	4619      	mov	r1, r3
 8002684:	4620      	mov	r0, r4
 8002686:	f7fe fab1 	bl	8000bec <__addsf3>
 800268a:	4603      	mov	r3, r0
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fa97 	bl	8001bc0 <_ZSt4sqrtf>
 8002692:	60f8      	str	r0, [r7, #12]
  static float qn[4];
  qn[0] = q1[0] / vectorlength;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68f9      	ldr	r1, [r7, #12]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fc62 	bl	8000f64 <__aeabi_fdiv>
 80026a0:	4603      	mov	r3, r0
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <_Z19QuaternionNormalizePf+0xe8>)
 80026a6:	601a      	str	r2, [r3, #0]
  qn[1] = q1[1] / vectorlength;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3304      	adds	r3, #4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68f9      	ldr	r1, [r7, #12]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe fc57 	bl	8000f64 <__aeabi_fdiv>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <_Z19QuaternionNormalizePf+0xe8>)
 80026bc:	605a      	str	r2, [r3, #4]
  qn[2] = q1[2] / vectorlength;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3308      	adds	r3, #8
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68f9      	ldr	r1, [r7, #12]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fc4c 	bl	8000f64 <__aeabi_fdiv>
 80026cc:	4603      	mov	r3, r0
 80026ce:	461a      	mov	r2, r3
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <_Z19QuaternionNormalizePf+0xe8>)
 80026d2:	609a      	str	r2, [r3, #8]
  qn[3] = q1[3] / vectorlength;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	330c      	adds	r3, #12
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68f9      	ldr	r1, [r7, #12]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fc41 	bl	8000f64 <__aeabi_fdiv>
 80026e2:	4603      	mov	r3, r0
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <_Z19QuaternionNormalizePf+0xe8>)
 80026e8:	60da      	str	r2, [r3, #12]
  return qn;
 80026ea:	4b02      	ldr	r3, [pc, #8]	; (80026f4 <_Z19QuaternionNormalizePf+0xe8>)
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd90      	pop	{r4, r7, pc}
 80026f4:	20000520 	.word	0x20000520

080026f8 <_ZN7MPU6050C1Eh>:
 * @param address I2C address
 * @see MPU6050_DEFAULT_ADDRESS
 * @see MPU6050_ADDRESS_AD0_LOW
 * @see MPU6050_ADDRESS_AD0_HIGH
 */
MPU6050::MPU6050(uint8_t address) {
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	70fb      	strb	r3, [r7, #3]
    devAddr = address;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	78fa      	ldrb	r2, [r7, #3]
 8002708:	719a      	strb	r2, [r3, #6]
}
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr

08002716 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 800271e:	2101      	movs	r1, #1
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f962 	bl	80029ea <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8002726:	2100      	movs	r1, #0
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f854 	bl	80027d6 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 800272e:	2100      	movs	r1, #0
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f863 	bl	80027fc <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 8002736:	2100      	movs	r1, #0
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f945 	bl	80029c8 <_ZN7MPU605015setSleepEnabledEb>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <_ZN7MPU605014testConnectionEv>:

/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool MPU6050::testConnection() {
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
    return getDeviceID() == 0x34;
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f991 	bl	8002a76 <_ZN7MPU605011getDeviceIDEv>
 8002754:	4603      	mov	r3, r0
 8002756:	2b34      	cmp	r3, #52	; 0x34
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <_ZN7MPU60507setRateEh>:
/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050::setRate(uint8_t rate) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	799b      	ldrb	r3, [r3, #6]
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	2119      	movs	r1, #25
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff f935 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <_ZN7MPU605020setExternalFrameSyncEh>:
/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG
 * @param sync New FSYNC configuration value
 */
void MPU6050::setExternalFrameSync(uint8_t sync) {
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af02      	add	r7, sp, #8
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	7998      	ldrb	r0, [r3, #6]
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	2303      	movs	r3, #3
 80027a0:	2205      	movs	r2, #5
 80027a2:	211a      	movs	r1, #26
 80027a4:	f7ff f896 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <_ZN7MPU605011setDLPFModeEh>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7998      	ldrb	r0, [r3, #6]
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2303      	movs	r3, #3
 80027c6:	2202      	movs	r2, #2
 80027c8:	211a      	movs	r1, #26
 80027ca:	f7ff f883 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af02      	add	r7, sp, #8
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	7998      	ldrb	r0, [r3, #6]
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	2302      	movs	r3, #2
 80027ec:	2204      	movs	r2, #4
 80027ee:	211b      	movs	r1, #27
 80027f0:	f7ff f870 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af02      	add	r7, sp, #8
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	7998      	ldrb	r0, [r3, #6]
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2302      	movs	r3, #2
 8002812:	2204      	movs	r2, #4
 8002814:	211c      	movs	r1, #28
 8002816:	f7ff f85d 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <_ZN7MPU605027setMotionDetectionThresholdEh>:
/** Set motion detection event acceleration threshold.
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050::setMotionDetectionThreshold(uint8_t threshold) {
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	460b      	mov	r3, r1
 800282c:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_THR, threshold);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	799b      	ldrb	r3, [r3, #6]
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	211f      	movs	r1, #31
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff f8d8 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <_ZN7MPU605026setMotionDetectionDurationEh>:
/** Set motion detection event duration threshold.
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050::setMotionDetectionDuration(uint8_t duration) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_DUR, duration);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	799b      	ldrb	r3, [r3, #6]
 8002854:	78fa      	ldrb	r2, [r7, #3]
 8002856:	2120      	movs	r1, #32
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff f8c7 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
/** Set zero motion detection event acceleration threshold.
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	799b      	ldrb	r3, [r3, #6]
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	2121      	movs	r1, #33	; 0x21
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff f8b6 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
/** Set zero motion detection event duration threshold.
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	799b      	ldrb	r3, [r3, #6]
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	2122      	movs	r1, #34	; 0x22
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff f8a5 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <_ZN7MPU605015setSlaveAddressEhh>:
 * @param num Slave number (0-3)
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	460b      	mov	r3, r1
 80028b4:	70fb      	strb	r3, [r7, #3]
 80028b6:	4613      	mov	r3, r2
 80028b8:	70bb      	strb	r3, [r7, #2]
    if (num > 3) return;
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d80d      	bhi.n	80028dc <_ZN7MPU605015setSlaveAddressEhh+0x32>
    I2Cdev::writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7998      	ldrb	r0, [r3, #6]
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	461a      	mov	r2, r3
 80028c8:	0052      	lsls	r2, r2, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	3325      	adds	r3, #37	; 0x25
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	78ba      	ldrb	r2, [r7, #2]
 80028d4:	4619      	mov	r1, r3
 80028d6:	f7ff f889 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
 80028da:	e000      	b.n	80028de <_ZN7MPU605015setSlaveAddressEhh+0x34>
    if (num > 3) return;
 80028dc:	bf00      	nop
}
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <_ZN7MPU605013setIntEnabledEh>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050::setIntEnabled(uint8_t enabled) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	799b      	ldrb	r3, [r3, #6]
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	2138      	movs	r1, #56	; 0x38
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff f877 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
    I2Cdev::readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7998      	ldrb	r0, [r3, #6]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3307      	adds	r3, #7
 8002916:	461a      	mov	r2, r3
 8002918:	213a      	movs	r1, #58	; 0x3a
 800291a:	f7fe feaf 	bl	800167c <_ZN6I2Cdev8readByteEhhPh>
    return buffer[0];
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	79db      	ldrb	r3, [r3, #7]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <_ZN7MPU605014setFIFOEnabledEb>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050::setFIFOEnabled(bool enabled) {
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	460b      	mov	r3, r1
 8002934:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	7998      	ldrb	r0, [r3, #6]
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	2206      	movs	r2, #6
 800293e:	216a      	movs	r1, #106	; 0x6a
 8002940:	f7fe ff4c 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <_ZN7MPU605023setI2CMasterModeEnabledEb>:
 * @param enabled New I2C Master Mode enabled status
 * @see getI2CMasterModeEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
 */
void MPU6050::setI2CMasterModeEnabled(bool enabled) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7998      	ldrb	r0, [r3, #6]
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	2205      	movs	r2, #5
 8002960:	216a      	movs	r1, #106	; 0x6a
 8002962:	f7fe ff3b 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <_ZN7MPU60509resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7998      	ldrb	r0, [r3, #6]
 800297a:	2301      	movs	r3, #1
 800297c:	2202      	movs	r2, #2
 800297e:	216a      	movs	r1, #106	; 0x6a
 8002980:	f7fe ff2c 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <_ZN7MPU605014resetI2CMasterEv>:
 * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050::resetI2CMaster() {
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	7998      	ldrb	r0, [r3, #6]
 8002998:	2301      	movs	r3, #1
 800299a:	2201      	movs	r2, #1
 800299c:	216a      	movs	r1, #106	; 0x6a
 800299e:	f7fe ff1d 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_ZN7MPU60505resetEv>:
/** Trigger a full device reset.
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050::reset() {
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7998      	ldrb	r0, [r3, #6]
 80029b6:	2301      	movs	r3, #1
 80029b8:	2207      	movs	r2, #7
 80029ba:	216b      	movs	r1, #107	; 0x6b
 80029bc:	f7fe ff0e 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7998      	ldrb	r0, [r3, #6]
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	2206      	movs	r2, #6
 80029dc:	216b      	movs	r1, #107	; 0x6b
 80029de:	f7fe fefd 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af02      	add	r7, sp, #8
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7998      	ldrb	r0, [r3, #6]
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	2303      	movs	r3, #3
 8002a00:	2202      	movs	r2, #2
 8002a02:	216b      	movs	r1, #107	; 0x6b
 8002a04:	f7fe ff66 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
    I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7998      	ldrb	r0, [r3, #6]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3307      	adds	r3, #7
 8002a20:	2202      	movs	r2, #2
 8002a22:	2172      	movs	r1, #114	; 0x72
 8002a24:	f7fe fe64 	bl	80016f0 <_ZN6I2Cdev9readBytesEhhhPh>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	79db      	ldrb	r3, [r3, #7]
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	b21a      	sxth	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	7a1b      	ldrb	r3, [r3, #8]
 8002a34:	b21b      	sxth	r3, r3
 8002a36:	4313      	orrs	r3, r2
 8002a38:	b21b      	sxth	r3, r3
 8002a3a:	b29b      	uxth	r3, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    I2Cdev::readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	71fb      	strb	r3, [r7, #7]
    if(length > 0){
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <_ZN7MPU605012getFIFOBytesEPhh+0x24>
        I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	7998      	ldrb	r0, [r3, #6]
 8002a5c:	79fa      	ldrb	r2, [r7, #7]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2174      	movs	r1, #116	; 0x74
 8002a62:	f7fe fe45 	bl	80016f0 <_ZN6I2Cdev9readBytesEhhhPh>
    } else {
    	*data = 0;
    }
}
 8002a66:	e002      	b.n	8002a6e <_ZN7MPU605012getFIFOBytesEPhh+0x2a>
    	*data = 0;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <_ZN7MPU605011getDeviceIDEv>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af02      	add	r7, sp, #8
 8002a7c:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	7998      	ldrb	r0, [r3, #6]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3307      	adds	r3, #7
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	2306      	movs	r3, #6
 8002a8a:	2206      	movs	r2, #6
 8002a8c:	2175      	movs	r1, #117	; 0x75
 8002a8e:	f7fe fd97 	bl	80015c0 <_ZN6I2Cdev8readBitsEhhhhPh>
    return buffer[0];
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	79db      	ldrb	r3, [r3, #7]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <_ZN7MPU605015getOTPBankValidEv>:

// ======== UNDOCUMENTED/DMP REGISTERS/METHODS ========

// XG_OFFS_TC register

uint8_t MPU6050::getOTPBankValid() {
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
    I2Cdev::readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	7998      	ldrb	r0, [r3, #6]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3307      	adds	r3, #7
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	f7fe fd41 	bl	8001538 <_ZN6I2Cdev7readBitEhhhPh>
    return buffer[0];
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	79db      	ldrb	r3, [r3, #7]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <_ZN7MPU605015setOTPBankValidEb>:
void MPU6050::setOTPBankValid(bool enabled) {
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	7998      	ldrb	r0, [r3, #6]
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	f7fe fe80 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <_ZN7MPU605016getXGyroOffsetTCEv>:
int8_t MPU6050::getXGyroOffsetTC() {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7998      	ldrb	r0, [r3, #6]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3307      	adds	r3, #7
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2306      	movs	r3, #6
 8002af8:	2206      	movs	r2, #6
 8002afa:	2100      	movs	r1, #0
 8002afc:	f7fe fd60 	bl	80015c0 <_ZN6I2Cdev8readBitsEhhhhPh>
    return buffer[0];
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	79db      	ldrb	r3, [r3, #7]
 8002b04:	b25b      	sxtb	r3, r3
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <_ZN7MPU605016setXGyroOffsetTCEa>:
void MPU6050::setXGyroOffsetTC(int8_t offset) {
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af02      	add	r7, sp, #8
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	7998      	ldrb	r0, [r3, #6]
 8002b1e:	78fb      	ldrb	r3, [r7, #3]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	2306      	movs	r3, #6
 8002b24:	2206      	movs	r2, #6
 8002b26:	2100      	movs	r1, #0
 8002b28:	f7fe fed4 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <_ZN7MPU605016getYGyroOffsetTCEv>:

// YG_OFFS_TC register

int8_t MPU6050::getYGyroOffsetTC() {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7998      	ldrb	r0, [r3, #6]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3307      	adds	r3, #7
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2306      	movs	r3, #6
 8002b48:	2206      	movs	r2, #6
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	f7fe fd38 	bl	80015c0 <_ZN6I2Cdev8readBitsEhhhhPh>
    return buffer[0];
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	79db      	ldrb	r3, [r3, #7]
 8002b54:	b25b      	sxtb	r3, r3
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <_ZN7MPU605016setYGyroOffsetTCEa>:
void MPU6050::setYGyroOffsetTC(int8_t offset) {
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af02      	add	r7, sp, #8
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	460b      	mov	r3, r1
 8002b68:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	7998      	ldrb	r0, [r3, #6]
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	2306      	movs	r3, #6
 8002b74:	2206      	movs	r2, #6
 8002b76:	2101      	movs	r1, #1
 8002b78:	f7fe feac 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <_ZN7MPU605016getZGyroOffsetTCEv>:

// ZG_OFFS_TC register

int8_t MPU6050::getZGyroOffsetTC() {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	7998      	ldrb	r0, [r3, #6]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3307      	adds	r3, #7
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	2306      	movs	r3, #6
 8002b98:	2206      	movs	r2, #6
 8002b9a:	2102      	movs	r1, #2
 8002b9c:	f7fe fd10 	bl	80015c0 <_ZN6I2Cdev8readBitsEhhhhPh>
    return buffer[0];
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	79db      	ldrb	r3, [r3, #7]
 8002ba4:	b25b      	sxtb	r3, r3
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <_ZN7MPU605016setZGyroOffsetTCEa>:
void MPU6050::setZGyroOffsetTC(int8_t offset) {
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af02      	add	r7, sp, #8
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	7998      	ldrb	r0, [r3, #6]
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2306      	movs	r3, #6
 8002bc4:	2206      	movs	r2, #6
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	f7fe fe84 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <_ZN7MPU605015setXAccelOffsetEs>:

int16_t MPU6050::getXAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	799b      	ldrb	r3, [r3, #6]
 8002be4:	887a      	ldrh	r2, [r7, #2]
 8002be6:	2106      	movs	r1, #6
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe ff37 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <_ZN7MPU605015setYAccelOffsetEs>:

int16_t MPU6050::getYAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	799b      	ldrb	r3, [r3, #6]
 8002c06:	887a      	ldrh	r2, [r7, #2]
 8002c08:	2108      	movs	r1, #8
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe ff26 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <_ZN7MPU605015setZAccelOffsetEs>:

int16_t MPU6050::getZAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	799b      	ldrb	r3, [r3, #6]
 8002c28:	887a      	ldrh	r2, [r7, #2]
 8002c2a:	210a      	movs	r1, #10
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe ff15 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <_ZN7MPU605014setXGyroOffsetEs>:

int16_t MPU6050::getXGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	799b      	ldrb	r3, [r3, #6]
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	2113      	movs	r1, #19
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe ff04 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <_ZN7MPU605014setYGyroOffsetEs>:

int16_t MPU6050::getYGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	799b      	ldrb	r3, [r3, #6]
 8002c6c:	887a      	ldrh	r2, [r7, #2]
 8002c6e:	2115      	movs	r1, #21
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe fef3 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <_ZN7MPU605014setZGyroOffsetEs>:

int16_t MPU6050::getZGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	460b      	mov	r3, r1
 8002c88:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	799b      	ldrb	r3, [r3, #6]
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	2117      	movs	r1, #23
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fee2 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    I2Cdev::readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	7998      	ldrb	r0, [r3, #6]
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	2207      	movs	r2, #7
 8002cb4:	216a      	movs	r1, #106	; 0x6a
 8002cb6:	f7fe fd91 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <_ZN7MPU60508resetDMPEv>:
void MPU6050::resetDMP() {
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	7998      	ldrb	r0, [r3, #6]
 8002cce:	2301      	movs	r3, #1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	216a      	movs	r1, #106	; 0x6a
 8002cd4:	f7fe fd82 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_ZN7MPU605013setMemoryBankEhbb>:

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	4608      	mov	r0, r1
 8002cea:	4611      	mov	r1, r2
 8002cec:	461a      	mov	r2, r3
 8002cee:	4603      	mov	r3, r0
 8002cf0:	70fb      	strb	r3, [r7, #3]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	70bb      	strb	r3, [r7, #2]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	707b      	strb	r3, [r7, #1]
    bank &= 0x1F;
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	70fb      	strb	r3, [r7, #3]
    if (userBank) bank |= 0x20;
 8002d02:	787b      	ldrb	r3, [r7, #1]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <_ZN7MPU605013setMemoryBankEhbb+0x30>
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	f043 0320 	orr.w	r3, r3, #32
 8002d0e:	70fb      	strb	r3, [r7, #3]
    if (prefetchEnabled) bank |= 0x40;
 8002d10:	78bb      	ldrb	r3, [r7, #2]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <_ZN7MPU605013setMemoryBankEhbb+0x3e>
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d1c:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	799b      	ldrb	r3, [r3, #6]
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	216d      	movs	r1, #109	; 0x6d
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fe60 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_ZN7MPU605021setMemoryStartAddressEh>:

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	799b      	ldrb	r3, [r3, #6]
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	216e      	movs	r1, #110	; 0x6e
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe fe4f 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <_ZN7MPU605014readMemoryByteEv>:

// MEM_R_W register

uint8_t MPU6050::readMemoryByte() {
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
    I2Cdev::readByte(devAddr, MPU6050_RA_MEM_R_W, buffer);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7998      	ldrb	r0, [r3, #6]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3307      	adds	r3, #7
 8002d66:	461a      	mov	r2, r3
 8002d68:	216f      	movs	r1, #111	; 0x6f
 8002d6a:	f7fe fc87 	bl	800167c <_ZN6I2Cdev8readByteEhhPh>
    return buffer[0];
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	79db      	ldrb	r3, [r3, #7]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <_ZN7MPU605015readMemoryBlockEPhthh>:
void MPU6050::writeMemoryByte(uint8_t data) {
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_R_W, data);
}
void MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	4611      	mov	r1, r2
 8002d86:	461a      	mov	r2, r3
 8002d88:	460b      	mov	r3, r1
 8002d8a:	80fb      	strh	r3, [r7, #6]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002d90:	7979      	ldrb	r1, [r7, #5]
 8002d92:	2300      	movs	r3, #0
 8002d94:	2200      	movs	r2, #0
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f7ff ffa2 	bl	8002ce0 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002d9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002da0:	4619      	mov	r1, r3
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f7ff ffc6 	bl	8002d34 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
 8002da8:	2300      	movs	r3, #0
 8002daa:	82bb      	strh	r3, [r7, #20]
 8002dac:	8aba      	ldrh	r2, [r7, #20]
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d244      	bcs.n	8002e3e <_ZN7MPU605015readMemoryBlockEPhthh+0xc4>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002db4:	2310      	movs	r3, #16
 8002db6:	75fb      	strb	r3, [r7, #23]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002db8:	8aba      	ldrh	r2, [r7, #20]
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
 8002dbc:	441a      	add	r2, r3
 8002dbe:	88fb      	ldrh	r3, [r7, #6]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	dd05      	ble.n	8002dd0 <_ZN7MPU605015readMemoryBlockEPhthh+0x56>
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	8abb      	ldrh	r3, [r7, #20]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	75fb      	strb	r3, [r7, #23]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002dd0:	7dfa      	ldrb	r2, [r7, #23]
 8002dd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dd6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	dd03      	ble.n	8002de6 <_ZN7MPU605015readMemoryBlockEPhthh+0x6c>
 8002dde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002de2:	425b      	negs	r3, r3
 8002de4:	75fb      	strb	r3, [r7, #23]

        // read the chunk of data as specified
        I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	7998      	ldrb	r0, [r3, #6]
 8002dea:	8abb      	ldrh	r3, [r7, #20]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	4413      	add	r3, r2
 8002df0:	7dfa      	ldrb	r2, [r7, #23]
 8002df2:	216f      	movs	r1, #111	; 0x6f
 8002df4:	f7fe fc7c 	bl	80016f0 <_ZN6I2Cdev9readBytesEhhhPh>
        
        // increase byte index by [chunkSize]
        i += chunkSize;
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	8abb      	ldrh	r3, [r7, #20]
 8002dfe:	4413      	add	r3, r2
 8002e00:	82bb      	strh	r3, [r7, #20]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002e02:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002e06:	7dfb      	ldrb	r3, [r7, #23]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f887 3020 	strb.w	r3, [r7, #32]

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002e0e:	8aba      	ldrh	r2, [r7, #20]
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d2ca      	bcs.n	8002dac <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
            if (address == 0) bank++;
 8002e16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <_ZN7MPU605015readMemoryBlockEPhthh+0xaa>
 8002e1e:	797b      	ldrb	r3, [r7, #5]
 8002e20:	3301      	adds	r3, #1
 8002e22:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002e24:	7979      	ldrb	r1, [r7, #5]
 8002e26:	2300      	movs	r3, #0
 8002e28:	2200      	movs	r2, #0
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f7ff ff58 	bl	8002ce0 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002e30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e34:	4619      	mov	r1, r3
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff ff7c 	bl	8002d34 <_ZN7MPU605021setMemoryStartAddressEh>
    for (uint16_t i = 0; i < dataSize;) {
 8002e3c:	e7b6      	b.n	8002dac <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
        }
    }
}
 8002e3e:	bf00      	nop
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>:
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b088      	sub	sp, #32
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	4611      	mov	r1, r2
 8002e52:	461a      	mov	r2, r3
 8002e54:	460b      	mov	r3, r1
 8002e56:	80fb      	strh	r3, [r7, #6]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002e5c:	7979      	ldrb	r1, [r7, #5]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	2200      	movs	r2, #0
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f7ff ff3c 	bl	8002ce0 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002e68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f7ff ff60 	bl	8002d34 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]
    uint8_t *progBuffer=0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002e7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d004      	beq.n	8002e8e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x48>
 8002e84:	2010      	movs	r0, #16
 8002e86:	f00f f81d 	bl	8011ec4 <malloc>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002e8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d004      	beq.n	8002ea0 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5a>
 8002e96:	2010      	movs	r0, #16
 8002e98:	f00f f814 	bl	8011ec4 <malloc>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < dataSize;) {
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	827b      	strh	r3, [r7, #18]
 8002ea4:	8a7a      	ldrh	r2, [r7, #18]
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	f080 808e 	bcs.w	8002fca <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x184>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002eae:	2310      	movs	r3, #16
 8002eb0:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002eb2:	8a7a      	ldrh	r2, [r7, #18]
 8002eb4:	7ffb      	ldrb	r3, [r7, #31]
 8002eb6:	441a      	add	r2, r3
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	dd05      	ble.n	8002eca <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x84>
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	8a7b      	ldrh	r3, [r7, #18]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002eca:	7ffa      	ldrb	r2, [r7, #31]
 8002ecc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ed0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	dd03      	ble.n	8002ee0 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x9a>
 8002ed8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002edc:	425b      	negs	r3, r3
 8002ede:	77fb      	strb	r3, [r7, #31]
        
        if (useProgMem) {
 8002ee0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d013      	beq.n	8002f10 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xca>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 8002ee8:	2300      	movs	r3, #0
 8002eea:	747b      	strb	r3, [r7, #17]
 8002eec:	7c7a      	ldrb	r2, [r7, #17]
 8002eee:	7ffb      	ldrb	r3, [r7, #31]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d211      	bcs.n	8002f18 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xd2>
 8002ef4:	8a7a      	ldrh	r2, [r7, #18]
 8002ef6:	7c7b      	ldrb	r3, [r7, #17]
 8002ef8:	4413      	add	r3, r2
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	441a      	add	r2, r3
 8002efe:	7c7b      	ldrb	r3, [r7, #17]
 8002f00:	6979      	ldr	r1, [r7, #20]
 8002f02:	440b      	add	r3, r1
 8002f04:	7812      	ldrb	r2, [r2, #0]
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	7c7b      	ldrb	r3, [r7, #17]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	747b      	strb	r3, [r7, #17]
 8002f0e:	e7ed      	b.n	8002eec <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xa6>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 8002f10:	8a7b      	ldrh	r3, [r7, #18]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	4413      	add	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
        }

        I2Cdev::writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	7998      	ldrb	r0, [r3, #6]
 8002f1c:	7ffa      	ldrb	r2, [r7, #31]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	216f      	movs	r1, #111	; 0x6f
 8002f22:	f7fe fdd7 	bl	8001ad4 <_ZN6I2Cdev10writeBytesEhhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 8002f26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d02a      	beq.n	8002f84 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d027      	beq.n	8002f84 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
            setMemoryBank(bank);
 8002f34:	7979      	ldrb	r1, [r7, #5]
 8002f36:	2300      	movs	r3, #0
 8002f38:	2200      	movs	r2, #0
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f7ff fed0 	bl	8002ce0 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002f40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f44:	4619      	mov	r1, r3
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f7ff fef4 	bl	8002d34 <_ZN7MPU605021setMemoryStartAddressEh>
            I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	7998      	ldrb	r0, [r3, #6]
 8002f50:	7ffa      	ldrb	r2, [r7, #31]
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	216f      	movs	r1, #111	; 0x6f
 8002f56:	f7fe fbcb 	bl	80016f0 <_ZN6I2Cdev9readBytesEhhhPh>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 8002f5a:	7ffb      	ldrb	r3, [r7, #31]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	69b9      	ldr	r1, [r7, #24]
 8002f60:	6978      	ldr	r0, [r7, #20]
 8002f62:	f00e ffbf 	bl	8011ee4 <memcmp>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00b      	beq.n	8002f84 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
 8002f6c:	69b8      	ldr	r0, [r7, #24]
 8002f6e:	f00e ffb1 	bl	8011ed4 <free>
                if (useProgMem) free(progBuffer);
 8002f72:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
 8002f7a:	6978      	ldr	r0, [r7, #20]
 8002f7c:	f00e ffaa 	bl	8011ed4 <free>
                return false; // uh oh.
 8002f80:	2300      	movs	r3, #0
 8002f82:	e031      	b.n	8002fe8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a2>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 8002f84:	7ffb      	ldrb	r3, [r7, #31]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	8a7b      	ldrh	r3, [r7, #18]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002f8e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002f92:	7ffb      	ldrb	r3, [r7, #31]
 8002f94:	4413      	add	r3, r2
 8002f96:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002f9a:	8a7a      	ldrh	r2, [r7, #18]
 8002f9c:	88fb      	ldrh	r3, [r7, #6]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d280      	bcs.n	8002ea4 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
            if (address == 0) bank++;
 8002fa2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d102      	bne.n	8002fb0 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x16a>
 8002faa:	797b      	ldrb	r3, [r7, #5]
 8002fac:	3301      	adds	r3, #1
 8002fae:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002fb0:	7979      	ldrb	r1, [r7, #5]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f7ff fe92 	bl	8002ce0 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002fbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff feb6 	bl	8002d34 <_ZN7MPU605021setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 8002fc8:	e76c      	b.n	8002ea4 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
        }
    }
    if (verify) free(verifyBuffer);
 8002fca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x192>
 8002fd2:	69b8      	ldr	r0, [r7, #24]
 8002fd4:	f00e ff7e 	bl	8011ed4 <free>
    if (useProgMem) free(progBuffer);
 8002fd8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a0>
 8002fe0:	6978      	ldr	r0, [r7, #20]
 8002fe2:	f00e ff77 	bl	8011ed4 <free>
    return true;
 8002fe6:	2301      	movs	r3, #1
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3720      	adds	r7, #32
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af04      	add	r7, sp, #16
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	460b      	mov	r3, r1
 8003000:	80fb      	strh	r3, [r7, #6]
 8003002:	4613      	mov	r3, r2
 8003004:	717b      	strb	r3, [r7, #5]
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 8003006:	7979      	ldrb	r1, [r7, #5]
 8003008:	88fa      	ldrh	r2, [r7, #6]
 800300a:	2301      	movs	r3, #1
 800300c:	9302      	str	r3, [sp, #8]
 800300e:	7f3b      	ldrb	r3, [r7, #28]
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	7e3b      	ldrb	r3, [r7, #24]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	460b      	mov	r3, r1
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f7ff ff13 	bl	8002e46 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 8003020:	4603      	mov	r3, r0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>:
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
 800302a:	b580      	push	{r7, lr}
 800302c:	b08c      	sub	sp, #48	; 0x30
 800302e:	af04      	add	r7, sp, #16
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	4611      	mov	r1, r2
 8003036:	461a      	mov	r2, r3
 8003038:	460b      	mov	r3, r1
 800303a:	80fb      	strh	r3, [r7, #6]
 800303c:	4613      	mov	r3, r2
 800303e:	717b      	strb	r3, [r7, #5]
    uint8_t *progBuffer = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	61fb      	str	r3, [r7, #28]
	uint8_t success, special;
    uint16_t i, j;
    if (useProgMem) {
 8003044:	797b      	ldrb	r3, [r7, #5]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d004      	beq.n	8003054 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2a>
        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
 800304a:	2008      	movs	r0, #8
 800304c:	f00e ff3a 	bl	8011ec4 <malloc>
 8003050:	4603      	mov	r3, r0
 8003052:	61fb      	str	r3, [r7, #28]
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
 8003054:	2300      	movs	r3, #0
 8003056:	833b      	strh	r3, [r7, #24]
 8003058:	8b3a      	ldrh	r2, [r7, #24]
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	429a      	cmp	r2, r3
 800305e:	f080 80a1 	bcs.w	80031a4 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x17a>
        if (useProgMem) {
 8003062:	797b      	ldrb	r3, [r7, #5]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d018      	beq.n	800309a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x70>
            bank = pgm_read_byte(data + i++);
 8003068:	8b3b      	ldrh	r3, [r7, #24]
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	833a      	strh	r2, [r7, #24]
 800306e:	461a      	mov	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4413      	add	r3, r2
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	757b      	strb	r3, [r7, #21]
            offset = pgm_read_byte(data + i++);
 8003078:	8b3b      	ldrh	r3, [r7, #24]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	833a      	strh	r2, [r7, #24]
 800307e:	461a      	mov	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4413      	add	r3, r2
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	753b      	strb	r3, [r7, #20]
            length = pgm_read_byte(data + i++);
 8003088:	8b3b      	ldrh	r3, [r7, #24]
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	833a      	strh	r2, [r7, #24]
 800308e:	461a      	mov	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4413      	add	r3, r2
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	74fb      	strb	r3, [r7, #19]
 8003098:	e017      	b.n	80030ca <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xa0>
        } else {
            bank = data[i++];
 800309a:	8b3b      	ldrh	r3, [r7, #24]
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	833a      	strh	r2, [r7, #24]
 80030a0:	461a      	mov	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4413      	add	r3, r2
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	757b      	strb	r3, [r7, #21]
            offset = data[i++];
 80030aa:	8b3b      	ldrh	r3, [r7, #24]
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	833a      	strh	r2, [r7, #24]
 80030b0:	461a      	mov	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4413      	add	r3, r2
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	753b      	strb	r3, [r7, #20]
            length = data[i++];
 80030ba:	8b3b      	ldrh	r3, [r7, #24]
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	833a      	strh	r2, [r7, #24]
 80030c0:	461a      	mov	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4413      	add	r3, r2
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	74fb      	strb	r3, [r7, #19]
        }

        // write data or perform special action
        if (length > 0) {
 80030ca:	7cfb      	ldrb	r3, [r7, #19]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d03a      	beq.n	8003146 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x11c>
            Serial.print(bank);
            Serial.print(", offset ");
            Serial.print(offset);
            Serial.print(", length=");
            Serial.println(length);*/
            if (useProgMem) {
 80030d0:	797b      	ldrb	r3, [r7, #5]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d01d      	beq.n	8003112 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xe8>
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
 80030d6:	7cfb      	ldrb	r3, [r7, #19]
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d905      	bls.n	80030e8 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xbe>
 80030dc:	7cfb      	ldrb	r3, [r7, #19]
 80030de:	4619      	mov	r1, r3
 80030e0:	69f8      	ldr	r0, [r7, #28]
 80030e2:	f00f fc29 	bl	8012938 <realloc>
 80030e6:	61f8      	str	r0, [r7, #28]
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 80030e8:	2300      	movs	r3, #0
 80030ea:	82fb      	strh	r3, [r7, #22]
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	8afa      	ldrh	r2, [r7, #22]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d211      	bcs.n	800311a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xf0>
 80030f6:	8b3a      	ldrh	r2, [r7, #24]
 80030f8:	8afb      	ldrh	r3, [r7, #22]
 80030fa:	4413      	add	r3, r2
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	441a      	add	r2, r3
 8003100:	8afb      	ldrh	r3, [r7, #22]
 8003102:	69f9      	ldr	r1, [r7, #28]
 8003104:	440b      	add	r3, r1
 8003106:	7812      	ldrb	r2, [r2, #0]
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	8afb      	ldrh	r3, [r7, #22]
 800310c:	3301      	adds	r3, #1
 800310e:	82fb      	strh	r3, [r7, #22]
 8003110:	e7ec      	b.n	80030ec <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xc2>
            } else {
                progBuffer = (uint8_t *)data + i;
 8003112:	8b3b      	ldrh	r3, [r7, #24]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	4413      	add	r3, r2
 8003118:	61fb      	str	r3, [r7, #28]
            }
            success = writeMemoryBlock(progBuffer, length, bank, offset, true);
 800311a:	7cfb      	ldrb	r3, [r7, #19]
 800311c:	b29a      	uxth	r2, r3
 800311e:	7d79      	ldrb	r1, [r7, #21]
 8003120:	2300      	movs	r3, #0
 8003122:	9302      	str	r3, [sp, #8]
 8003124:	2301      	movs	r3, #1
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	7d3b      	ldrb	r3, [r7, #20]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	460b      	mov	r3, r1
 800312e:	69f9      	ldr	r1, [r7, #28]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f7ff fe88 	bl	8002e46 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 8003136:	4603      	mov	r3, r0
 8003138:	76fb      	strb	r3, [r7, #27]
            i += length;
 800313a:	7cfb      	ldrb	r3, [r7, #19]
 800313c:	b29a      	uxth	r2, r3
 800313e:	8b3b      	ldrh	r3, [r7, #24]
 8003140:	4413      	add	r3, r2
 8003142:	833b      	strh	r3, [r7, #24]
 8003144:	e022      	b.n	800318c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            // special instruction
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
            if (useProgMem) {
 8003146:	797b      	ldrb	r3, [r7, #5]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x134>
                special = pgm_read_byte(data + i++);
 800314c:	8b3b      	ldrh	r3, [r7, #24]
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	833a      	strh	r2, [r7, #24]
 8003152:	461a      	mov	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4413      	add	r3, r2
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	76bb      	strb	r3, [r7, #26]
 800315c:	e007      	b.n	800316e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x144>
            } else {
                special = data[i++];
 800315e:	8b3b      	ldrh	r3, [r7, #24]
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	833a      	strh	r2, [r7, #24]
 8003164:	461a      	mov	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	4413      	add	r3, r2
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	76bb      	strb	r3, [r7, #26]
            }
            /*Serial.print("Special command code ");
            Serial.print(special, HEX);
            Serial.println(" found...");*/
            if (special == 0x01) {
 800316e:	7ebb      	ldrb	r3, [r7, #26]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d109      	bne.n	8003188 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15e>
                // enable DMP-related interrupts
                
                //setIntZeroMotionEnabled(true);
                //setIntFIFOBufferOverflowEnabled(true);
                //setIntDMPEnabled(true);
                I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	799b      	ldrb	r3, [r3, #6]
 8003178:	2232      	movs	r2, #50	; 0x32
 800317a:	2138      	movs	r1, #56	; 0x38
 800317c:	4618      	mov	r0, r3
 800317e:	f7fe fc35 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>

                success = true;
 8003182:	2301      	movs	r3, #1
 8003184:	76fb      	strb	r3, [r7, #27]
 8003186:	e001      	b.n	800318c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            } else {
                // unknown special command
                success = false;
 8003188:	2300      	movs	r3, #0
 800318a:	76fb      	strb	r3, [r7, #27]
            }
        }
        
        if (!success) {
 800318c:	7efb      	ldrb	r3, [r7, #27]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f47f af62 	bne.w	8003058 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2e>
            if (useProgMem) free(progBuffer);
 8003194:	797b      	ldrb	r3, [r7, #5]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x176>
 800319a:	69f8      	ldr	r0, [r7, #28]
 800319c:	f00e fe9a 	bl	8011ed4 <free>
            return false; // uh oh
 80031a0:	2300      	movs	r3, #0
 80031a2:	e006      	b.n	80031b2 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x188>
        }
    }
    if (useProgMem) free(progBuffer);
 80031a4:	797b      	ldrb	r3, [r7, #5]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x186>
 80031aa:	69f8      	ldr	r0, [r7, #28]
 80031ac:	f00e fe92 	bl	8011ed4 <free>
    return true;
 80031b0:	2301      	movs	r3, #1
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>:
bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	4613      	mov	r3, r2
 80031c6:	80fb      	strh	r3, [r7, #6]
    return writeDMPConfigurationSet(data, dataSize, true);
 80031c8:	88fa      	ldrh	r2, [r7, #6]
 80031ca:	2301      	movs	r3, #1
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f7ff ff2b 	bl	800302a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>
 80031d4:	4603      	mov	r3, r0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <_ZN7MPU605013setDMPConfig1Eh>:

uint8_t MPU6050::getDMPConfig1() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig1(uint8_t config) {
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	460b      	mov	r3, r1
 80031e8:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	799b      	ldrb	r3, [r3, #6]
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	2170      	movs	r1, #112	; 0x70
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe fbfa 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <_ZN7MPU605013setDMPConfig2Eh>:

uint8_t MPU6050::getDMPConfig2() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig2(uint8_t config) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	799b      	ldrb	r3, [r3, #6]
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	2171      	movs	r1, #113	; 0x71
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe fbe9 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <_Z41__static_initialization_and_destruction_0ii>:
         if (!packetReceived && (TIM11->CNT - BreakTimer) > (1000)) return 0;
     } while (!packetReceived);

     getFIFOBytes(data, length); //Get 1 packet
     return 1;
}
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d109      	bne.n	8003248 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800323a:	4293      	cmp	r3, r2
 800323c:	d104      	bne.n	8003248 <_Z41__static_initialization_and_destruction_0ii+0x24>
MPU6050_6Axis_MotionApps20 mpu;                      //create new object
 800323e:	2200      	movs	r2, #0
 8003240:	21d0      	movs	r1, #208	; 0xd0
 8003242:	4803      	ldr	r0, [pc, #12]	; (8003250 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8003244:	f7fe fcc8 	bl	8001bd8 <_ZN26MPU6050_6Axis_MotionApps20C1EhPv>
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200004e0 	.word	0x200004e0

08003254 <_GLOBAL__sub_I_MPU6050_TX_buf>:
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
 8003258:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800325c:	2001      	movs	r0, #1
 800325e:	f7ff ffe1 	bl	8003224 <_Z41__static_initialization_and_destruction_0ii>
 8003262:	bd80      	pop	{r7, pc}

08003264 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv>:
#ifndef MPU6050_DMP_FIFO_RATE_DIVISOR 
#define MPU6050_DMP_FIFO_RATE_DIVISOR 0x01 // The New instance of the Firmware has this as the default
#endif

// I Simplified this:
uint8_t MPU6050_6Axis_MotionApps20::dmpInitialize() {
 8003264:	b5b0      	push	{r4, r5, r7, lr}
 8003266:	b0ae      	sub	sp, #184	; 0xb8
 8003268:	af04      	add	r7, sp, #16
 800326a:	6078      	str	r0, [r7, #4]
    // reset device
    DEBUG_PRINTLN(F("\n\nResetting MPU6050..."));
    reset();
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fb9b 	bl	80029aa <_ZN7MPU60505resetEv>
    HAL_Delay(30); // wait after reset
 8003274:	201e      	movs	r0, #30
 8003276:	f003 fdc7 	bl	8006e08 <HAL_Delay>
    Serial.println(F("Enabling wake cycle..."));
    setWakeCycleEnabled(true);*/

    // disable sleep mode
    DEBUG_PRINTLN(F("Disabling sleep mode..."));
    setSleepEnabled(false);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2100      	movs	r1, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fba2 	bl	80029c8 <_ZN7MPU605015setSleepEnabledEb>

    // get MPU hardware revision
    DEBUG_PRINTLN(F("Selecting user bank 16..."));
    setMemoryBank(0x10, true, true);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	2301      	movs	r3, #1
 8003288:	2201      	movs	r2, #1
 800328a:	2110      	movs	r1, #16
 800328c:	f7ff fd28 	bl	8002ce0 <_ZN7MPU605013setMemoryBankEhbb>
    DEBUG_PRINTLN(F("Selecting memory byte 6..."));
    setMemoryStartAddress(0x06);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2106      	movs	r1, #6
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fd4d 	bl	8002d34 <_ZN7MPU605021setMemoryStartAddressEh>
    DEBUG_PRINTLN(F("Checking hardware revision..."));
    readMemoryByte();
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fd5a 	bl	8002d56 <_ZN7MPU605014readMemoryByteEv>
    DEBUG_PRINT(F("Revision @ user[16][6] = "));
    DEBUG_PRINTLNF(hwRevision, HEX);
    DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
    setMemoryBank(0, false, false);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	2300      	movs	r3, #0
 80032a6:	2200      	movs	r2, #0
 80032a8:	2100      	movs	r1, #0
 80032aa:	f7ff fd19 	bl	8002ce0 <_ZN7MPU605013setMemoryBankEhbb>

    // check OTP bank valid
    DEBUG_PRINTLN(F("Reading OTP bank valid flag..."));
    getOTPBankValid();
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fbf4 	bl	8002a9e <_ZN7MPU605015getOTPBankValidEv>
    DEBUG_PRINT(F("OTP bank is "));
    DEBUG_PRINTLN(otpValid ? F("valid!") : F("invalid!"));

    // get X/Y/Z gyro offsets
    DEBUG_PRINTLN(F("Reading gyro offset TC values..."));
    int8_t xgOffsetTC = getXGyroOffsetTC();
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fc13 	bl	8002ae4 <_ZN7MPU605016getXGyroOffsetTCEv>
 80032be:	4603      	mov	r3, r0
 80032c0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    int8_t ygOffsetTC = getYGyroOffsetTC();
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fc34 	bl	8002b34 <_ZN7MPU605016getYGyroOffsetTCEv>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    int8_t zgOffsetTC = getZGyroOffsetTC();
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fc55 	bl	8002b84 <_ZN7MPU605016getZGyroOffsetTCEv>
 80032da:	4603      	mov	r3, r0
 80032dc:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    DEBUG_PRINT(F("Z gyro offset = "));
    DEBUG_PRINTLN(zgOffsetTC);

    // setup weird slave stuff (?)
    DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
    setSlaveAddress(0, 0x7F);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	227f      	movs	r2, #127	; 0x7f
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fadf 	bl	80028aa <_ZN7MPU605015setSlaveAddressEhh>
    DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
    setI2CMasterModeEnabled(false);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fb2b 	bl	800294c <_ZN7MPU605023setI2CMasterModeEnabledEb>
    DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
    setSlaveAddress(0, 0x68);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2268      	movs	r2, #104	; 0x68
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fad4 	bl	80028aa <_ZN7MPU605015setSlaveAddressEhh>
    DEBUG_PRINTLN(F("Resetting I2C Master control..."));
    resetI2CMaster();
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fb41 	bl	800298c <_ZN7MPU605014resetI2CMasterEv>
    HAL_Delay(20);
 800330a:	2014      	movs	r0, #20
 800330c:	f003 fd7c 	bl	8006e08 <HAL_Delay>

    // load DMP code into memory banks
    DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
    DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
    DEBUG_PRINTLN(F(" bytes)"));
    if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) {
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	2301      	movs	r3, #1
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	2300      	movs	r3, #0
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2300      	movs	r3, #0
 800331c:	f240 7289 	movw	r2, #1929	; 0x789
 8003320:	49c7      	ldr	r1, [pc, #796]	; (8003640 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3dc>)
 8003322:	f7ff fe65 	bl	8002ff0 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 825c 	beq.w	80037e6 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x582>

        // write DMP configuration
        DEBUG_PRINT(F("Writing DMP configuration to MPU memory banks ("));
        DEBUG_PRINT(MPU6050_DMP_CONFIG_SIZE);
        DEBUG_PRINTLN(F(" bytes in config def)"));
        if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	22c0      	movs	r2, #192	; 0xc0
 8003332:	49c4      	ldr	r1, [pc, #784]	; (8003644 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e0>)
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff40 	bl	80031ba <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8250 	beq.w	80037e2 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x57e>
            DEBUG_PRINTLN(F("Success! DMP configuration written and verified."));

            DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
            setClockSource(MPU6050_CLOCK_PLL_ZGYRO);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2103      	movs	r1, #3
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fb4f 	bl	80029ea <_ZN7MPU605014setClockSourceEh>

            DEBUG_PRINTLN(F("Setting DMP and FIFO_OFLOW interrupts enabled..."));
            setIntEnabled(0x12);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2112      	movs	r1, #18
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fac7 	bl	80028e4 <_ZN7MPU605013setIntEnabledEh>

            DEBUG_PRINTLN(F("Setting sample rate to 200Hz..."));
            setRate(4); // 1khz / (1 + 4) = 200 Hz
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2104      	movs	r1, #4
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fa04 	bl	8002768 <_ZN7MPU60507setRateEh>

            DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
            setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2101      	movs	r1, #1
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fa10 	bl	800278a <_ZN7MPU605020setExternalFrameSyncEh>

            DEBUG_PRINTLN(F("Setting DLPF bandwidth to 42Hz..."));
            setDLPFMode(MPU6050_DLPF_BW_42);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2103      	movs	r1, #3
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fa1e 	bl	80027b0 <_ZN7MPU605011setDLPFModeEh>

            DEBUG_PRINTLN(F("Setting gyro sensitivity to +/- 2000 deg/sec..."));
            setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2103      	movs	r1, #3
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fa2c 	bl	80027d6 <_ZN7MPU605021setFullScaleGyroRangeEh>

            DEBUG_PRINTLN(F("Setting DMP configuration bytes (function unknown)..."));
            setDMPConfig1(0x03);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2103      	movs	r1, #3
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff ff2b 	bl	80031de <_ZN7MPU605013setDMPConfig1Eh>
            setDMPConfig2(0x00);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff37 	bl	8003200 <_ZN7MPU605013setDMPConfig2Eh>

            DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
            setOTPBankValid(false);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2100      	movs	r1, #0
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff fb93 	bl	8002ac2 <_ZN7MPU605015setOTPBankValidEb>

            DEBUG_PRINTLN(F("Setting X/Y/Z gyro offset TCs to previous values..."));
            setXGyroOffsetTC(xgOffsetTC);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f997 20a3 	ldrsb.w	r2, [r7, #163]	; 0xa3
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fbb2 	bl	8002b0e <_ZN7MPU605016setXGyroOffsetTCEa>
            setYGyroOffsetTC(ygOffsetTC);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f997 20a2 	ldrsb.w	r2, [r7, #162]	; 0xa2
 80033b0:	4611      	mov	r1, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff fbd3 	bl	8002b5e <_ZN7MPU605016setYGyroOffsetTCEa>
            setZGyroOffsetTC(zgOffsetTC);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f997 20a1 	ldrsb.w	r2, [r7, #161]	; 0xa1
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fbf4 	bl	8002bae <_ZN7MPU605016setZGyroOffsetTCEa>
            //setYGyroOffset(0);
            //setZGyroOffset(0);

            DEBUG_PRINTLN(F("Writing final memory update 1/7 (function unknown)..."));
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80033cc:	2300      	movs	r3, #0
 80033ce:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80033d2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d906      	bls.n	80033e8 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x184>
 80033da:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80033de:	1c9a      	adds	r2, r3, #2
 80033e0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033e4:	429a      	cmp	r2, r3
 80033e6:	db15      	blt.n	8003414 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x1b0>
 80033e8:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80033ec:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033f0:	4995      	ldr	r1, [pc, #596]	; (8003648 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 80033f2:	5c8a      	ldrb	r2, [r1, r2]
 80033f4:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80033f8:	440b      	add	r3, r1
 80033fa:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80033fe:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003402:	3301      	adds	r3, #1
 8003404:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003408:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800340c:	3301      	adds	r3, #1
 800340e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003412:	e7de      	b.n	80033d2 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x16e>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800341a:	3103      	adds	r1, #3
 800341c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003420:	b29a      	uxth	r2, r3
 8003422:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 8003426:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800342a:	2500      	movs	r5, #0
 800342c:	9502      	str	r5, [sp, #8]
 800342e:	2501      	movs	r5, #1
 8003430:	9501      	str	r5, [sp, #4]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	4623      	mov	r3, r4
 8003436:	f7ff fd06 	bl	8002e46 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Writing final memory update 2/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 800343a:	2300      	movs	r3, #0
 800343c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003440:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003444:	2b03      	cmp	r3, #3
 8003446:	d906      	bls.n	8003456 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x1f2>
 8003448:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800344c:	1c9a      	adds	r2, r3, #2
 800344e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003452:	429a      	cmp	r2, r3
 8003454:	db15      	blt.n	8003482 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x21e>
 8003456:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800345a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800345e:	497a      	ldr	r1, [pc, #488]	; (8003648 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 8003460:	5c8a      	ldrb	r2, [r1, r2]
 8003462:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003466:	440b      	add	r3, r1
 8003468:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800346c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003470:	3301      	adds	r3, #1
 8003472:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003476:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800347a:	3301      	adds	r3, #1
 800347c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003480:	e7de      	b.n	8003440 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x1dc>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003488:	3103      	adds	r1, #3
 800348a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800348e:	b29a      	uxth	r2, r3
 8003490:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 8003494:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003498:	2500      	movs	r5, #0
 800349a:	9502      	str	r5, [sp, #8]
 800349c:	2501      	movs	r5, #1
 800349e:	9501      	str	r5, [sp, #4]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	4623      	mov	r3, r4
 80034a4:	f7ff fccf 	bl	8002e46 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fa5f 	bl	800296e <_ZN7MPU60509resetFIFOEv>

            DEBUG_PRINTLN(F("Reading FIFO count..."));
            uint16_t fifoCount = getFIFOCount();
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff faac 	bl	8002a10 <_ZN7MPU605012getFIFOCountEv>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            uint8_t fifoBuffer[128];

            DEBUG_PRINT(F("Current FIFO count="));
            DEBUG_PRINTLN(fifoCount);
            getFIFOBytes(fifoBuffer, fifoCount);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	f107 010c 	add.w	r1, r7, #12
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff faba 	bl	8002a44 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
            setMotionDetectionThreshold(2);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2102      	movs	r1, #2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff f9a4 	bl	8002822 <_ZN7MPU605027setMotionDetectionThresholdEh>

            DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
            setZeroMotionDetectionThreshold(156);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	219c      	movs	r1, #156	; 0x9c
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff f9c1 	bl	8002866 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>

            DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
            setMotionDetectionDuration(80);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2150      	movs	r1, #80	; 0x50
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff f9ab 	bl	8002844 <_ZN7MPU605026setMotionDetectionDurationEh>

            DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
            setZeroMotionDetectionDuration(0);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff f9c8 	bl	8002888 <_ZN7MPU605030setZeroMotionDetectionDurationEh>

            DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fa37 	bl	800296e <_ZN7MPU60509resetFIFOEv>

            DEBUG_PRINTLN(F("Enabling FIFO..."));
            setFIFOEnabled(true);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2101      	movs	r1, #1
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fa10 	bl	800292a <_ZN7MPU605014setFIFOEnabledEb>

            DEBUG_PRINTLN(F("Enabling DMP..."));
            setDMPEnabled(true);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2101      	movs	r1, #1
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fbc6 	bl	8002ca0 <_ZN7MPU605013setDMPEnabledEb>

            DEBUG_PRINTLN(F("Resetting DMP..."));
            resetDMP();
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fbd3 	bl	8002cc2 <_ZN7MPU60508resetDMPEv>

            DEBUG_PRINTLN(F("Writing final memory update 3/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 800351c:	2300      	movs	r3, #0
 800351e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003522:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003526:	2b03      	cmp	r3, #3
 8003528:	d906      	bls.n	8003538 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x2d4>
 800352a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800352e:	1c9a      	adds	r2, r3, #2
 8003530:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003534:	429a      	cmp	r2, r3
 8003536:	db15      	blt.n	8003564 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x300>
 8003538:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800353c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003540:	4941      	ldr	r1, [pc, #260]	; (8003648 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 8003542:	5c8a      	ldrb	r2, [r1, r2]
 8003544:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003548:	440b      	add	r3, r1
 800354a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800354e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003552:	3301      	adds	r3, #1
 8003554:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003558:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800355c:	3301      	adds	r3, #1
 800355e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003562:	e7de      	b.n	8003522 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x2be>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800356a:	3103      	adds	r1, #3
 800356c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003570:	b29a      	uxth	r2, r3
 8003572:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 8003576:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800357a:	2500      	movs	r5, #0
 800357c:	9502      	str	r5, [sp, #8]
 800357e:	2501      	movs	r5, #1
 8003580:	9501      	str	r5, [sp, #4]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	4623      	mov	r3, r4
 8003586:	f7ff fc5e 	bl	8002e46 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Writing final memory update 4/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 800358a:	2300      	movs	r3, #0
 800358c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003590:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003594:	2b03      	cmp	r3, #3
 8003596:	d906      	bls.n	80035a6 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x342>
 8003598:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800359c:	1c9a      	adds	r2, r3, #2
 800359e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80035a2:	429a      	cmp	r2, r3
 80035a4:	db15      	blt.n	80035d2 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x36e>
 80035a6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80035aa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80035ae:	4926      	ldr	r1, [pc, #152]	; (8003648 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 80035b0:	5c8a      	ldrb	r2, [r1, r2]
 80035b2:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80035b6:	440b      	add	r3, r1
 80035b8:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80035bc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80035c0:	3301      	adds	r3, #1
 80035c2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80035c6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80035ca:	3301      	adds	r3, #1
 80035cc:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80035d0:	e7de      	b.n	8003590 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x32c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80035d8:	3103      	adds	r1, #3
 80035da:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80035de:	b29a      	uxth	r2, r3
 80035e0:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 80035e4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80035e8:	2500      	movs	r5, #0
 80035ea:	9502      	str	r5, [sp, #8]
 80035ec:	2501      	movs	r5, #1
 80035ee:	9501      	str	r5, [sp, #4]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	4623      	mov	r3, r4
 80035f4:	f7ff fc27 	bl	8002e46 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Writing final memory update 5/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80035f8:	2300      	movs	r3, #0
 80035fa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80035fe:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003602:	2b03      	cmp	r3, #3
 8003604:	d906      	bls.n	8003614 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3b0>
 8003606:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800360a:	1c9a      	adds	r2, r3, #2
 800360c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003610:	429a      	cmp	r2, r3
 8003612:	db1b      	blt.n	800364c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e8>
 8003614:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003618:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800361c:	490a      	ldr	r1, [pc, #40]	; (8003648 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 800361e:	5c8a      	ldrb	r2, [r1, r2]
 8003620:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003624:	440b      	add	r3, r1
 8003626:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800362a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800362e:	3301      	adds	r3, #1
 8003630:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003634:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003638:	3301      	adds	r3, #1
 800363a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800363e:	e7de      	b.n	80035fe <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x39a>
 8003640:	08014cf8 	.word	0x08014cf8
 8003644:	08015484 	.word	0x08015484
 8003648:	08015544 	.word	0x08015544
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003652:	3103      	adds	r1, #3
 8003654:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003658:	b29a      	uxth	r2, r3
 800365a:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 800365e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003662:	2500      	movs	r5, #0
 8003664:	9502      	str	r5, [sp, #8]
 8003666:	2501      	movs	r5, #1
 8003668:	9501      	str	r5, [sp, #4]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	4623      	mov	r3, r4
 800366e:	f7ff fbea 	bl	8002e46 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff f9cb 	bl	8002a10 <_ZN7MPU605012getFIFOCountEv>
 800367a:	4603      	mov	r3, r0
 800367c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8003680:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003684:	2b02      	cmp	r3, #2
 8003686:	bf94      	ite	ls
 8003688:	2301      	movls	r3, #1
 800368a:	2300      	movhi	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d000      	beq.n	8003694 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x430>
 8003692:	e7ee      	b.n	8003672 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x40e>

            DEBUG_PRINT(F("Current FIFO count="));
            DEBUG_PRINTLN(fifoCount);
            DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	f107 010c 	add.w	r1, r7, #12
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff f9cf 	bl	8002a44 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Reading interrupt status..."));
            getIntStatus();
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f92c 	bl	8002906 <_ZN7MPU605012getIntStatusEv>

            DEBUG_PRINT(F("Current interrupt status="));
            DEBUG_PRINTLNF(mpuIntStatus, HEX);

            DEBUG_PRINTLN(F("Reading final memory update 6/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80036ae:	2300      	movs	r3, #0
 80036b0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80036b4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d906      	bls.n	80036ca <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x466>
 80036bc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80036c0:	1c9a      	adds	r2, r3, #2
 80036c2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80036c6:	429a      	cmp	r2, r3
 80036c8:	db15      	blt.n	80036f6 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x492>
 80036ca:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80036ce:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80036d2:	4947      	ldr	r1, [pc, #284]	; (80037f0 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x58c>)
 80036d4:	5c8a      	ldrb	r2, [r1, r2]
 80036d6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80036da:	440b      	add	r3, r1
 80036dc:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80036e0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80036e4:	3301      	adds	r3, #1
 80036e6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80036ea:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80036ee:	3301      	adds	r3, #1
 80036f0:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80036f4:	e7de      	b.n	80036b4 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x450>
            readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80036fc:	3103      	adds	r1, #3
 80036fe:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003702:	b29a      	uxth	r2, r3
 8003704:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 8003708:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	4623      	mov	r3, r4
 8003710:	f7ff fb33 	bl	8002d7a <_ZN7MPU605015readMemoryBlockEPhthh>

            DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff f97a 	bl	8002a10 <_ZN7MPU605012getFIFOCountEv>
 800371c:	4603      	mov	r3, r0
 800371e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8003722:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003726:	2b02      	cmp	r3, #2
 8003728:	bf94      	ite	ls
 800372a:	2301      	movls	r3, #1
 800372c:	2300      	movhi	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d000      	beq.n	8003736 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x4d2>
 8003734:	e7ee      	b.n	8003714 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x4b0>

            DEBUG_PRINT(F("Current FIFO count="));
            DEBUG_PRINTLN(fifoCount);

            DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	f107 010c 	add.w	r1, r7, #12
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff f97e 	bl	8002a44 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Reading interrupt status..."));
            getIntStatus();
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff f8db 	bl	8002906 <_ZN7MPU605012getIntStatusEv>

            DEBUG_PRINT(F("Current interrupt status="));
            DEBUG_PRINTLNF(mpuIntStatus, HEX);

            DEBUG_PRINTLN(F("Writing final memory update 7/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003750:	2300      	movs	r3, #0
 8003752:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003756:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800375a:	2b03      	cmp	r3, #3
 800375c:	d906      	bls.n	800376c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x508>
 800375e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003762:	1c9a      	adds	r2, r3, #2
 8003764:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003768:	429a      	cmp	r2, r3
 800376a:	db15      	blt.n	8003798 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x534>
 800376c:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003770:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003774:	491e      	ldr	r1, [pc, #120]	; (80037f0 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x58c>)
 8003776:	5c8a      	ldrb	r2, [r1, r2]
 8003778:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800377c:	440b      	add	r3, r1
 800377e:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003782:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003786:	3301      	adds	r3, #1
 8003788:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800378c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003790:	3301      	adds	r3, #1
 8003792:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003796:	e7de      	b.n	8003756 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x4f2>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800379e:	3103      	adds	r1, #3
 80037a0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 80037aa:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80037ae:	2500      	movs	r5, #0
 80037b0:	9502      	str	r5, [sp, #8]
 80037b2:	2501      	movs	r5, #1
 80037b4:	9501      	str	r5, [sp, #4]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	4623      	mov	r3, r4
 80037ba:	f7ff fb44 	bl	8002e46 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("DMP is good to go! Finally."));

            DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
            setDMPEnabled(false);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fa6c 	bl	8002ca0 <_ZN7MPU605013setDMPEnabledEb>

            DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
            dmpPacketSize = 42;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	222a      	movs	r2, #42	; 0x2a
 80037cc:	839a      	strh	r2, [r3, #28]
            /*if ((dmpPacketBuffer = (uint8_t *)malloc(42)) == 0) {
                return 3; // TODO: proper error code for no memory
            }*/

            DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
            resetFIFO();
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff f8cc 	bl	800296e <_ZN7MPU60509resetFIFOEv>
            getIntStatus();
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff f894 	bl	8002906 <_ZN7MPU605012getIntStatusEv>
        }
    } else {
        DEBUG_PRINTLN(F("ERROR! DMP code verification failed."));
        return 1; // main binary block loading failed
    }
    return 0; // success
 80037de:	2300      	movs	r3, #0
 80037e0:	e002      	b.n	80037e8 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x584>
            return 2; // configuration block loading failed
 80037e2:	2302      	movs	r3, #2
 80037e4:	e000      	b.n	80037e8 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x584>
        return 1; // main binary block loading failed
 80037e6:	2301      	movs	r3, #1
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	37a8      	adds	r7, #168	; 0xa8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bdb0      	pop	{r4, r5, r7, pc}
 80037f0:	08015544 	.word	0x08015544
 80037f4:	00000000 	.word	0x00000000

080037f8 <_Z17get_XW_diffAnglesv>:
 * form of a Quaternion and then converts it to usable PITCH,ROLL,YAW angles
 * 
 * --Custom Method!
 */
void get_XW_diffAngles()
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
  //float *p = QuaternionSLERP(QuaternionProduct(QuaternionSLERP(&OriginQuaternion[0], &MPUoutputQuaternion[0]), &FrameOriginQuaternion[0]), &LoopWQuaternion[0]);
  //float *p = QuaternionNormalize(QuaternionSLERP(FrameOriginQuaternion, QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(OriginQuaternion, MPUoutputQuaternion)), FrameOriginQuaternion)), FrameOriginQuaternion)), LoopWQuaternion))));
  float *p = QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(GyroOriginQuaternion, QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(OriginQuaternion, GyroOriginQuaternion)), MPUoutputQuaternion)))), FrameOriginQuaternion)), FrameOriginQuaternion)), LoopWQuaternion));
 80037fe:	497e      	ldr	r1, [pc, #504]	; (80039f8 <_Z17get_XW_diffAnglesv+0x200>)
 8003800:	487e      	ldr	r0, [pc, #504]	; (80039fc <_Z17get_XW_diffAnglesv+0x204>)
 8003802:	f7fe fef1 	bl	80025e8 <_Z15QuaternionSLERPPfS_>
 8003806:	4603      	mov	r3, r0
 8003808:	4618      	mov	r0, r3
 800380a:	f7fe feff 	bl	800260c <_Z19QuaternionNormalizePf>
 800380e:	4603      	mov	r3, r0
 8003810:	497b      	ldr	r1, [pc, #492]	; (8003a00 <_Z17get_XW_diffAnglesv+0x208>)
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe fdba 	bl	800238c <_Z17QuaternionProductPfS_>
 8003818:	4603      	mov	r3, r0
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fef6 	bl	800260c <_Z19QuaternionNormalizePf>
 8003820:	4603      	mov	r3, r0
 8003822:	4619      	mov	r1, r3
 8003824:	4874      	ldr	r0, [pc, #464]	; (80039f8 <_Z17get_XW_diffAnglesv+0x200>)
 8003826:	f7fe fedf 	bl	80025e8 <_Z15QuaternionSLERPPfS_>
 800382a:	4603      	mov	r3, r0
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe feed 	bl	800260c <_Z19QuaternionNormalizePf>
 8003832:	4603      	mov	r3, r0
 8003834:	4973      	ldr	r1, [pc, #460]	; (8003a04 <_Z17get_XW_diffAnglesv+0x20c>)
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fda8 	bl	800238c <_Z17QuaternionProductPfS_>
 800383c:	4603      	mov	r3, r0
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe fee4 	bl	800260c <_Z19QuaternionNormalizePf>
 8003844:	4603      	mov	r3, r0
 8003846:	496f      	ldr	r1, [pc, #444]	; (8003a04 <_Z17get_XW_diffAnglesv+0x20c>)
 8003848:	4618      	mov	r0, r3
 800384a:	f7fe fecd 	bl	80025e8 <_Z15QuaternionSLERPPfS_>
 800384e:	4603      	mov	r3, r0
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe fedb 	bl	800260c <_Z19QuaternionNormalizePf>
 8003856:	4603      	mov	r3, r0
 8003858:	496b      	ldr	r1, [pc, #428]	; (8003a08 <_Z17get_XW_diffAnglesv+0x210>)
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe fd96 	bl	800238c <_Z17QuaternionProductPfS_>
 8003860:	4603      	mov	r3, r0
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fed2 	bl	800260c <_Z19QuaternionNormalizePf>
 8003868:	6078      	str	r0, [r7, #4]
  
  LoopXWQuaternion[0] = *p;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a67      	ldr	r2, [pc, #412]	; (8003a0c <_Z17get_XW_diffAnglesv+0x214>)
 8003870:	6013      	str	r3, [r2, #0]
  LoopXWQuaternion[1] = *(p + 1);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4a65      	ldr	r2, [pc, #404]	; (8003a0c <_Z17get_XW_diffAnglesv+0x214>)
 8003878:	6053      	str	r3, [r2, #4]
  LoopXWQuaternion[2] = *(p + 2);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	4a63      	ldr	r2, [pc, #396]	; (8003a0c <_Z17get_XW_diffAnglesv+0x214>)
 8003880:	6093      	str	r3, [r2, #8]
  LoopXWQuaternion[3] = *(p + 3);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	4a61      	ldr	r2, [pc, #388]	; (8003a0c <_Z17get_XW_diffAnglesv+0x214>)
 8003888:	60d3      	str	r3, [r2, #12]

  //difference x-w in degrees
  PID_Pitch_xw_diff = 2 * (((float)asin(LoopXWQuaternion[2]) * 180) / M_PI);
 800388a:	4b60      	ldr	r3, [pc, #384]	; (8003a0c <_Z17get_XW_diffAnglesv+0x214>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe f966 	bl	8001b60 <_ZSt4asinf>
 8003894:	4603      	mov	r3, r0
 8003896:	495e      	ldr	r1, [pc, #376]	; (8003a10 <_Z17get_XW_diffAnglesv+0x218>)
 8003898:	4618      	mov	r0, r3
 800389a:	f7fd faaf 	bl	8000dfc <__aeabi_fmul>
 800389e:	4603      	mov	r3, r0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fc fdfd 	bl	80004a0 <__aeabi_f2d>
 80038a6:	a352      	add	r3, pc, #328	; (adr r3, 80039f0 <_Z17get_XW_diffAnglesv+0x1f8>)
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f7fc ff7a 	bl	80007a4 <__aeabi_ddiv>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4610      	mov	r0, r2
 80038b6:	4619      	mov	r1, r3
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	f7fc fc92 	bl	80001e4 <__adddf3>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4610      	mov	r0, r2
 80038c6:	4619      	mov	r1, r3
 80038c8:	f7fd f93a 	bl	8000b40 <__aeabi_d2f>
 80038cc:	4603      	mov	r3, r0
 80038ce:	4a51      	ldr	r2, [pc, #324]	; (8003a14 <_Z17get_XW_diffAnglesv+0x21c>)
 80038d0:	6013      	str	r3, [r2, #0]
  PID_Roll_xw_diff  = 2 * (((float)asin(LoopXWQuaternion[1]) * 180) / M_PI);
 80038d2:	4b4e      	ldr	r3, [pc, #312]	; (8003a0c <_Z17get_XW_diffAnglesv+0x214>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe f942 	bl	8001b60 <_ZSt4asinf>
 80038dc:	4603      	mov	r3, r0
 80038de:	494c      	ldr	r1, [pc, #304]	; (8003a10 <_Z17get_XW_diffAnglesv+0x218>)
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fd fa8b 	bl	8000dfc <__aeabi_fmul>
 80038e6:	4603      	mov	r3, r0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fc fdd9 	bl	80004a0 <__aeabi_f2d>
 80038ee:	a340      	add	r3, pc, #256	; (adr r3, 80039f0 <_Z17get_XW_diffAnglesv+0x1f8>)
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	f7fc ff56 	bl	80007a4 <__aeabi_ddiv>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	f7fc fc6e 	bl	80001e4 <__adddf3>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	f7fd f916 	bl	8000b40 <__aeabi_d2f>
 8003914:	4603      	mov	r3, r0
 8003916:	4a40      	ldr	r2, [pc, #256]	; (8003a18 <_Z17get_XW_diffAnglesv+0x220>)
 8003918:	6013      	str	r3, [r2, #0]
  PID_Yaw_xw_diff   = 2 * (((float)atan(LoopXWQuaternion[3] / LoopXWQuaternion[0]) * 180) / M_PI);
 800391a:	4b3c      	ldr	r3, [pc, #240]	; (8003a0c <_Z17get_XW_diffAnglesv+0x214>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	4a3b      	ldr	r2, [pc, #236]	; (8003a0c <_Z17get_XW_diffAnglesv+0x214>)
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f7fd fb1d 	bl	8000f64 <__aeabi_fdiv>
 800392a:	4603      	mov	r3, r0
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe f923 	bl	8001b78 <_ZSt4atanf>
 8003932:	4603      	mov	r3, r0
 8003934:	4936      	ldr	r1, [pc, #216]	; (8003a10 <_Z17get_XW_diffAnglesv+0x218>)
 8003936:	4618      	mov	r0, r3
 8003938:	f7fd fa60 	bl	8000dfc <__aeabi_fmul>
 800393c:	4603      	mov	r3, r0
 800393e:	4618      	mov	r0, r3
 8003940:	f7fc fdae 	bl	80004a0 <__aeabi_f2d>
 8003944:	a32a      	add	r3, pc, #168	; (adr r3, 80039f0 <_Z17get_XW_diffAnglesv+0x1f8>)
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	f7fc ff2b 	bl	80007a4 <__aeabi_ddiv>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4610      	mov	r0, r2
 8003954:	4619      	mov	r1, r3
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	f7fc fc43 	bl	80001e4 <__adddf3>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4610      	mov	r0, r2
 8003964:	4619      	mov	r1, r3
 8003966:	f7fd f8eb 	bl	8000b40 <__aeabi_d2f>
 800396a:	4603      	mov	r3, r0
 800396c:	4a2b      	ldr	r2, [pc, #172]	; (8003a1c <_Z17get_XW_diffAnglesv+0x224>)
 800396e:	6013      	str	r3, [r2, #0]

  //DLPF of x-w
  PID_Pitch_DLPF_xw_diff += xwSmoothingFactor * (PID_Pitch_xw_diff - PID_Pitch_DLPF_xw_diff);
 8003970:	4b28      	ldr	r3, [pc, #160]	; (8003a14 <_Z17get_XW_diffAnglesv+0x21c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a2a      	ldr	r2, [pc, #168]	; (8003a20 <_Z17get_XW_diffAnglesv+0x228>)
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd f934 	bl	8000be8 <__aeabi_fsub>
 8003980:	4603      	mov	r3, r0
 8003982:	461a      	mov	r2, r3
 8003984:	4b26      	ldr	r3, [pc, #152]	; (8003a20 <_Z17get_XW_diffAnglesv+0x228>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f7fd f92e 	bl	8000bec <__addsf3>
 8003990:	4603      	mov	r3, r0
 8003992:	461a      	mov	r2, r3
 8003994:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <_Z17get_XW_diffAnglesv+0x228>)
 8003996:	601a      	str	r2, [r3, #0]
  PID_Roll_DLPF_xw_diff  += xwSmoothingFactor * (PID_Roll_xw_diff  - PID_Roll_DLPF_xw_diff );
 8003998:	4b1f      	ldr	r3, [pc, #124]	; (8003a18 <_Z17get_XW_diffAnglesv+0x220>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a21      	ldr	r2, [pc, #132]	; (8003a24 <_Z17get_XW_diffAnglesv+0x22c>)
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fd f920 	bl	8000be8 <__aeabi_fsub>
 80039a8:	4603      	mov	r3, r0
 80039aa:	461a      	mov	r2, r3
 80039ac:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <_Z17get_XW_diffAnglesv+0x22c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4619      	mov	r1, r3
 80039b2:	4610      	mov	r0, r2
 80039b4:	f7fd f91a 	bl	8000bec <__addsf3>
 80039b8:	4603      	mov	r3, r0
 80039ba:	461a      	mov	r2, r3
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <_Z17get_XW_diffAnglesv+0x22c>)
 80039be:	601a      	str	r2, [r3, #0]
  PID_Yaw_DLPF_xw_diff   += xwSmoothingFactor * (PID_Yaw_xw_diff   - PID_Yaw_DLPF_xw_diff  );
 80039c0:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <_Z17get_XW_diffAnglesv+0x224>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a18      	ldr	r2, [pc, #96]	; (8003a28 <_Z17get_XW_diffAnglesv+0x230>)
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fd f90c 	bl	8000be8 <__aeabi_fsub>
 80039d0:	4603      	mov	r3, r0
 80039d2:	461a      	mov	r2, r3
 80039d4:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <_Z17get_XW_diffAnglesv+0x230>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f7fd f906 	bl	8000bec <__addsf3>
 80039e0:	4603      	mov	r3, r0
 80039e2:	461a      	mov	r2, r3
 80039e4:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <_Z17get_XW_diffAnglesv+0x230>)
 80039e6:	601a      	str	r2, [r3, #0]
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	54442d18 	.word	0x54442d18
 80039f4:	400921fb 	.word	0x400921fb
 80039f8:	2000003c 	.word	0x2000003c
 80039fc:	200005e0 	.word	0x200005e0
 8003a00:	200005d0 	.word	0x200005d0
 8003a04:	2000001c 	.word	0x2000001c
 8003a08:	2000002c 	.word	0x2000002c
 8003a0c:	200005f0 	.word	0x200005f0
 8003a10:	43340000 	.word	0x43340000
 8003a14:	20000534 	.word	0x20000534
 8003a18:	20000538 	.word	0x20000538
 8003a1c:	2000053c 	.word	0x2000053c
 8003a20:	20000540 	.word	0x20000540
 8003a24:	20000544 	.word	0x20000544
 8003a28:	20000548 	.word	0x20000548

08003a2c <_Z17reset_WQuaternionv>:
 * @brief This method resets the tracked orientation
 * 
 * --Custom Method!
 */
void reset_WQuaternion()
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
  float *p = QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(GyroOriginQuaternion, QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(OriginQuaternion, GyroOriginQuaternion)), MPUoutputQuaternion)))), FrameOriginQuaternion));
 8003a32:	491c      	ldr	r1, [pc, #112]	; (8003aa4 <_Z17reset_WQuaternionv+0x78>)
 8003a34:	481c      	ldr	r0, [pc, #112]	; (8003aa8 <_Z17reset_WQuaternionv+0x7c>)
 8003a36:	f7fe fdd7 	bl	80025e8 <_Z15QuaternionSLERPPfS_>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe fde5 	bl	800260c <_Z19QuaternionNormalizePf>
 8003a42:	4603      	mov	r3, r0
 8003a44:	4919      	ldr	r1, [pc, #100]	; (8003aac <_Z17reset_WQuaternionv+0x80>)
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe fca0 	bl	800238c <_Z17QuaternionProductPfS_>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe fddc 	bl	800260c <_Z19QuaternionNormalizePf>
 8003a54:	4603      	mov	r3, r0
 8003a56:	4619      	mov	r1, r3
 8003a58:	4812      	ldr	r0, [pc, #72]	; (8003aa4 <_Z17reset_WQuaternionv+0x78>)
 8003a5a:	f7fe fdc5 	bl	80025e8 <_Z15QuaternionSLERPPfS_>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe fdd3 	bl	800260c <_Z19QuaternionNormalizePf>
 8003a66:	4603      	mov	r3, r0
 8003a68:	4911      	ldr	r1, [pc, #68]	; (8003ab0 <_Z17reset_WQuaternionv+0x84>)
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fc8e 	bl	800238c <_Z17QuaternionProductPfS_>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe fdca 	bl	800260c <_Z19QuaternionNormalizePf>
 8003a78:	6078      	str	r0, [r7, #4]
  LoopWQuaternion[0] = *p;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a0d      	ldr	r2, [pc, #52]	; (8003ab4 <_Z17reset_WQuaternionv+0x88>)
 8003a80:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p + 1);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4a0b      	ldr	r2, [pc, #44]	; (8003ab4 <_Z17reset_WQuaternionv+0x88>)
 8003a88:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p + 2);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <_Z17reset_WQuaternionv+0x88>)
 8003a90:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p + 3);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	4a07      	ldr	r2, [pc, #28]	; (8003ab4 <_Z17reset_WQuaternionv+0x88>)
 8003a98:	60d3      	str	r3, [r2, #12]
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	2000003c 	.word	0x2000003c
 8003aa8:	200005e0 	.word	0x200005e0
 8003aac:	200005d0 	.word	0x200005d0
 8003ab0:	2000001c 	.word	0x2000001c
 8003ab4:	2000002c 	.word	0x2000002c

08003ab8 <_Z10update_PIDv>:
 * @brief Gets PITCH,ROLL,YAW Y values and integrates/differentiates
 * 
 * --Custom Method!
 */
void update_PID()
{
 8003ab8:	b5b0      	push	{r4, r5, r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  PID_Yaw_DLPF_xw_diff = -PID_Yaw_DLPF_xw_diff;
 8003abc:	4ba0      	ldr	r3, [pc, #640]	; (8003d40 <_Z10update_PIDv+0x288>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ac4:	4a9e      	ldr	r2, [pc, #632]	; (8003d40 <_Z10update_PIDv+0x288>)
 8003ac6:	6013      	str	r3, [r2, #0]

  Pitch_I_Sum += (PID_Pitch_DLPF_xw_diff * Pitch_PID_k[1]);                                                                                       // integrate
 8003ac8:	4b9e      	ldr	r3, [pc, #632]	; (8003d44 <_Z10update_PIDv+0x28c>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4a9e      	ldr	r2, [pc, #632]	; (8003d48 <_Z10update_PIDv+0x290>)
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd f992 	bl	8000dfc <__aeabi_fmul>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	461a      	mov	r2, r3
 8003adc:	4b9b      	ldr	r3, [pc, #620]	; (8003d4c <_Z10update_PIDv+0x294>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f7fd f882 	bl	8000bec <__addsf3>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	461a      	mov	r2, r3
 8003aec:	4b97      	ldr	r3, [pc, #604]	; (8003d4c <_Z10update_PIDv+0x294>)
 8003aee:	601a      	str	r2, [r3, #0]
  Roll_I_Sum  += (PID_Roll_DLPF_xw_diff  * Roll_PID_k[1] );
 8003af0:	4b97      	ldr	r3, [pc, #604]	; (8003d50 <_Z10update_PIDv+0x298>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4a97      	ldr	r2, [pc, #604]	; (8003d54 <_Z10update_PIDv+0x29c>)
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd f97e 	bl	8000dfc <__aeabi_fmul>
 8003b00:	4603      	mov	r3, r0
 8003b02:	461a      	mov	r2, r3
 8003b04:	4b94      	ldr	r3, [pc, #592]	; (8003d58 <_Z10update_PIDv+0x2a0>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f7fd f86e 	bl	8000bec <__addsf3>
 8003b10:	4603      	mov	r3, r0
 8003b12:	461a      	mov	r2, r3
 8003b14:	4b90      	ldr	r3, [pc, #576]	; (8003d58 <_Z10update_PIDv+0x2a0>)
 8003b16:	601a      	str	r2, [r3, #0]
  Yaw_I_Sum   += (PID_Yaw_DLPF_xw_diff   * Yaw_PID_k[1]  );
 8003b18:	4b90      	ldr	r3, [pc, #576]	; (8003d5c <_Z10update_PIDv+0x2a4>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4a88      	ldr	r2, [pc, #544]	; (8003d40 <_Z10update_PIDv+0x288>)
 8003b1e:	6812      	ldr	r2, [r2, #0]
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fd f96a 	bl	8000dfc <__aeabi_fmul>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4b8c      	ldr	r3, [pc, #560]	; (8003d60 <_Z10update_PIDv+0x2a8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f7fd f85a 	bl	8000bec <__addsf3>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b88      	ldr	r3, [pc, #544]	; (8003d60 <_Z10update_PIDv+0x2a8>)
 8003b3e:	601a      	str	r2, [r3, #0]

  if (Pitch_I_Sum >   8) Pitch_I_Sum =   8;                                                                                                       //constrain integration
 8003b40:	4b82      	ldr	r3, [pc, #520]	; (8003d4c <_Z10update_PIDv+0x294>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd fb13 	bl	8001174 <__aeabi_fcmpgt>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <_Z10update_PIDv+0xa4>
 8003b54:	4b7d      	ldr	r3, [pc, #500]	; (8003d4c <_Z10update_PIDv+0x294>)
 8003b56:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8003b5a:	601a      	str	r2, [r3, #0]
  if (Roll_I_Sum  >   8) Roll_I_Sum  =   8;
 8003b5c:	4b7e      	ldr	r3, [pc, #504]	; (8003d58 <_Z10update_PIDv+0x2a0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fd fb05 	bl	8001174 <__aeabi_fcmpgt>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <_Z10update_PIDv+0xc0>
 8003b70:	4b79      	ldr	r3, [pc, #484]	; (8003d58 <_Z10update_PIDv+0x2a0>)
 8003b72:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8003b76:	601a      	str	r2, [r3, #0]
  if (Yaw_I_Sum   > 200) Yaw_I_Sum   = 200;
 8003b78:	4b79      	ldr	r3, [pc, #484]	; (8003d60 <_Z10update_PIDv+0x2a8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4979      	ldr	r1, [pc, #484]	; (8003d64 <_Z10update_PIDv+0x2ac>)
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fd faf8 	bl	8001174 <__aeabi_fcmpgt>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <_Z10update_PIDv+0xd8>
 8003b8a:	4b75      	ldr	r3, [pc, #468]	; (8003d60 <_Z10update_PIDv+0x2a8>)
 8003b8c:	4a75      	ldr	r2, [pc, #468]	; (8003d64 <_Z10update_PIDv+0x2ac>)
 8003b8e:	601a      	str	r2, [r3, #0]
  if (Pitch_I_Sum <  -8) Pitch_I_Sum =  -8;       //NOTDONE use defines for values
 8003b90:	4b6e      	ldr	r3, [pc, #440]	; (8003d4c <_Z10update_PIDv+0x294>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fd facd 	bl	8001138 <__aeabi_fcmplt>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <_Z10update_PIDv+0xf4>
 8003ba4:	4b69      	ldr	r3, [pc, #420]	; (8003d4c <_Z10update_PIDv+0x294>)
 8003ba6:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8003baa:	601a      	str	r2, [r3, #0]
  if (Roll_I_Sum  <  -8) Roll_I_Sum  =  -8;
 8003bac:	4b6a      	ldr	r3, [pc, #424]	; (8003d58 <_Z10update_PIDv+0x2a0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fd fabf 	bl	8001138 <__aeabi_fcmplt>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <_Z10update_PIDv+0x110>
 8003bc0:	4b65      	ldr	r3, [pc, #404]	; (8003d58 <_Z10update_PIDv+0x2a0>)
 8003bc2:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8003bc6:	601a      	str	r2, [r3, #0]
  if (Yaw_I_Sum   <   0) Yaw_I_Sum   =   0;
 8003bc8:	4b65      	ldr	r3, [pc, #404]	; (8003d60 <_Z10update_PIDv+0x2a8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f04f 0100 	mov.w	r1, #0
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fd fab1 	bl	8001138 <__aeabi_fcmplt>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <_Z10update_PIDv+0x12c>
 8003bdc:	4b60      	ldr	r3, [pc, #384]	; (8003d60 <_Z10update_PIDv+0x2a8>)
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
  
  Pitch_D_DLPF = Pitch_D_DLPF_k * ((PID_Pitch_DLPF_xw_diff - Pitch_D_old) - Pitch_D_DLPF);    //differential filtering
 8003be4:	4b58      	ldr	r3, [pc, #352]	; (8003d48 <_Z10update_PIDv+0x290>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a5f      	ldr	r2, [pc, #380]	; (8003d68 <_Z10update_PIDv+0x2b0>)
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	4611      	mov	r1, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fc fffa 	bl	8000be8 <__aeabi_fsub>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4b5c      	ldr	r3, [pc, #368]	; (8003d6c <_Z10update_PIDv+0x2b4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	f7fc fff2 	bl	8000be8 <__aeabi_fsub>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fc fc4a 	bl	80004a0 <__aeabi_f2d>
 8003c0c:	a348      	add	r3, pc, #288	; (adr r3, 8003d30 <_Z10update_PIDv+0x278>)
 8003c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c12:	f7fc fc9d 	bl	8000550 <__aeabi_dmul>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f7fc ff8f 	bl	8000b40 <__aeabi_d2f>
 8003c22:	4603      	mov	r3, r0
 8003c24:	4a51      	ldr	r2, [pc, #324]	; (8003d6c <_Z10update_PIDv+0x2b4>)
 8003c26:	6013      	str	r3, [r2, #0]
  Roll_D_DLPF  = Roll_D_DLPF_k  * ((PID_Roll_DLPF_xw_diff  - Roll_D_old ) - Roll_D_DLPF );
 8003c28:	4b4a      	ldr	r3, [pc, #296]	; (8003d54 <_Z10update_PIDv+0x29c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a50      	ldr	r2, [pc, #320]	; (8003d70 <_Z10update_PIDv+0x2b8>)
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	4611      	mov	r1, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fc ffd8 	bl	8000be8 <__aeabi_fsub>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4b4d      	ldr	r3, [pc, #308]	; (8003d74 <_Z10update_PIDv+0x2bc>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f7fc ffd0 	bl	8000be8 <__aeabi_fsub>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fc fc28 	bl	80004a0 <__aeabi_f2d>
 8003c50:	a337      	add	r3, pc, #220	; (adr r3, 8003d30 <_Z10update_PIDv+0x278>)
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	f7fc fc7b 	bl	8000550 <__aeabi_dmul>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4610      	mov	r0, r2
 8003c60:	4619      	mov	r1, r3
 8003c62:	f7fc ff6d 	bl	8000b40 <__aeabi_d2f>
 8003c66:	4603      	mov	r3, r0
 8003c68:	4a42      	ldr	r2, [pc, #264]	; (8003d74 <_Z10update_PIDv+0x2bc>)
 8003c6a:	6013      	str	r3, [r2, #0]
  Yaw_D_DLPF   = Yaw_D_DLPF_k   * ((PID_Yaw_DLPF_xw_diff   - Yaw_D_old  ) - Yaw_D_DLPF  );
 8003c6c:	4b34      	ldr	r3, [pc, #208]	; (8003d40 <_Z10update_PIDv+0x288>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a41      	ldr	r2, [pc, #260]	; (8003d78 <_Z10update_PIDv+0x2c0>)
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	4611      	mov	r1, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fc ffb6 	bl	8000be8 <__aeabi_fsub>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b3e      	ldr	r3, [pc, #248]	; (8003d7c <_Z10update_PIDv+0x2c4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f7fc ffae 	bl	8000be8 <__aeabi_fsub>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fc fc06 	bl	80004a0 <__aeabi_f2d>
 8003c94:	a328      	add	r3, pc, #160	; (adr r3, 8003d38 <_Z10update_PIDv+0x280>)
 8003c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9a:	f7fc fc59 	bl	8000550 <__aeabi_dmul>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	f7fc ff4b 	bl	8000b40 <__aeabi_d2f>
 8003caa:	4603      	mov	r3, r0
 8003cac:	4a33      	ldr	r2, [pc, #204]	; (8003d7c <_Z10update_PIDv+0x2c4>)
 8003cae:	6013      	str	r3, [r2, #0]

  PID_Pitch_y = (PID_Pitch_DLPF_xw_diff * Pitch_PID_k[0] * 10) + Pitch_I_Sum + (Pitch_D_DLPF * Pitch_PID_k[2] * 100);   //combine P,I,D values
 8003cb0:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <_Z10update_PIDv+0x28c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a24      	ldr	r2, [pc, #144]	; (8003d48 <_Z10update_PIDv+0x290>)
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fd f89e 	bl	8000dfc <__aeabi_fmul>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	492f      	ldr	r1, [pc, #188]	; (8003d80 <_Z10update_PIDv+0x2c8>)
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fd f899 	bl	8000dfc <__aeabi_fmul>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4b1f      	ldr	r3, [pc, #124]	; (8003d4c <_Z10update_PIDv+0x294>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	f7fc ff89 	bl	8000bec <__addsf3>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	461c      	mov	r4, r3
 8003cde:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <_Z10update_PIDv+0x28c>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <_Z10update_PIDv+0x2b4>)
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fd f887 	bl	8000dfc <__aeabi_fmul>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4924      	ldr	r1, [pc, #144]	; (8003d84 <_Z10update_PIDv+0x2cc>)
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd f882 	bl	8000dfc <__aeabi_fmul>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f7fc ff75 	bl	8000bec <__addsf3>
 8003d02:	4603      	mov	r3, r0
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b20      	ldr	r3, [pc, #128]	; (8003d88 <_Z10update_PIDv+0x2d0>)
 8003d08:	601a      	str	r2, [r3, #0]
  PID_Roll_y  = (PID_Roll_DLPF_xw_diff  * Roll_PID_k[0]  * 10) + Roll_I_Sum  + (Roll_D_DLPF  * Roll_PID_k[2]  * 100);// + (SBUS_Channels[0] / 250);
 8003d0a:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <_Z10update_PIDv+0x298>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a11      	ldr	r2, [pc, #68]	; (8003d54 <_Z10update_PIDv+0x29c>)
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fd f871 	bl	8000dfc <__aeabi_fmul>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	4918      	ldr	r1, [pc, #96]	; (8003d80 <_Z10update_PIDv+0x2c8>)
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fd f86c 	bl	8000dfc <__aeabi_fmul>
 8003d24:	4603      	mov	r3, r0
 8003d26:	461a      	mov	r2, r3
 8003d28:	e030      	b.n	8003d8c <_Z10update_PIDv+0x2d4>
 8003d2a:	bf00      	nop
 8003d2c:	f3af 8000 	nop.w
 8003d30:	9999999a 	.word	0x9999999a
 8003d34:	3fb99999 	.word	0x3fb99999
 8003d38:	33333333 	.word	0x33333333
 8003d3c:	3fd33333 	.word	0x3fd33333
 8003d40:	20000548 	.word	0x20000548
 8003d44:	20000560 	.word	0x20000560
 8003d48:	20000540 	.word	0x20000540
 8003d4c:	200005b8 	.word	0x200005b8
 8003d50:	2000056c 	.word	0x2000056c
 8003d54:	20000544 	.word	0x20000544
 8003d58:	200005bc 	.word	0x200005bc
 8003d5c:	20000008 	.word	0x20000008
 8003d60:	200005c0 	.word	0x200005c0
 8003d64:	43480000 	.word	0x43480000
 8003d68:	200005c4 	.word	0x200005c4
 8003d6c:	20000594 	.word	0x20000594
 8003d70:	200005c8 	.word	0x200005c8
 8003d74:	20000598 	.word	0x20000598
 8003d78:	200005cc 	.word	0x200005cc
 8003d7c:	2000059c 	.word	0x2000059c
 8003d80:	41200000 	.word	0x41200000
 8003d84:	42c80000 	.word	0x42c80000
 8003d88:	2000054c 	.word	0x2000054c
 8003d8c:	4b9a      	ldr	r3, [pc, #616]	; (8003ff8 <_Z10update_PIDv+0x540>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4619      	mov	r1, r3
 8003d92:	4610      	mov	r0, r2
 8003d94:	f7fc ff2a 	bl	8000bec <__addsf3>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	461c      	mov	r4, r3
 8003d9c:	4b97      	ldr	r3, [pc, #604]	; (8003ffc <_Z10update_PIDv+0x544>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4a97      	ldr	r2, [pc, #604]	; (8004000 <_Z10update_PIDv+0x548>)
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	4611      	mov	r1, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd f828 	bl	8000dfc <__aeabi_fmul>
 8003dac:	4603      	mov	r3, r0
 8003dae:	4995      	ldr	r1, [pc, #596]	; (8004004 <_Z10update_PIDv+0x54c>)
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fd f823 	bl	8000dfc <__aeabi_fmul>
 8003db6:	4603      	mov	r3, r0
 8003db8:	4619      	mov	r1, r3
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f7fc ff16 	bl	8000bec <__addsf3>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	4b90      	ldr	r3, [pc, #576]	; (8004008 <_Z10update_PIDv+0x550>)
 8003dc6:	601a      	str	r2, [r3, #0]
  PID_Yaw_y   = (PID_Yaw_DLPF_xw_diff   * Yaw_PID_k[0]   * 20) + Yaw_I_Sum   + (Yaw_D_DLPF   * Yaw_PID_k[2]   * 100);          //NOTDONE use defines for values
 8003dc8:	4b90      	ldr	r3, [pc, #576]	; (800400c <_Z10update_PIDv+0x554>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a90      	ldr	r2, [pc, #576]	; (8004010 <_Z10update_PIDv+0x558>)
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd f812 	bl	8000dfc <__aeabi_fmul>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	498e      	ldr	r1, [pc, #568]	; (8004014 <_Z10update_PIDv+0x55c>)
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fd f80d 	bl	8000dfc <__aeabi_fmul>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b8c      	ldr	r3, [pc, #560]	; (8004018 <_Z10update_PIDv+0x560>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f7fc fefd 	bl	8000bec <__addsf3>
 8003df2:	4603      	mov	r3, r0
 8003df4:	461c      	mov	r4, r3
 8003df6:	4b85      	ldr	r3, [pc, #532]	; (800400c <_Z10update_PIDv+0x554>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	4a88      	ldr	r2, [pc, #544]	; (800401c <_Z10update_PIDv+0x564>)
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fc fffb 	bl	8000dfc <__aeabi_fmul>
 8003e06:	4603      	mov	r3, r0
 8003e08:	497e      	ldr	r1, [pc, #504]	; (8004004 <_Z10update_PIDv+0x54c>)
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fc fff6 	bl	8000dfc <__aeabi_fmul>
 8003e10:	4603      	mov	r3, r0
 8003e12:	4619      	mov	r1, r3
 8003e14:	4620      	mov	r0, r4
 8003e16:	f7fc fee9 	bl	8000bec <__addsf3>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4b80      	ldr	r3, [pc, #512]	; (8004020 <_Z10update_PIDv+0x568>)
 8003e20:	601a      	str	r2, [r3, #0]

  Pitch_D_old = PID_Pitch_DLPF_xw_diff;                                                                                                      // differentiate
 8003e22:	4b80      	ldr	r3, [pc, #512]	; (8004024 <_Z10update_PIDv+0x56c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a80      	ldr	r2, [pc, #512]	; (8004028 <_Z10update_PIDv+0x570>)
 8003e28:	6013      	str	r3, [r2, #0]
  Roll_D_old  = PID_Roll_DLPF_xw_diff ;
 8003e2a:	4b80      	ldr	r3, [pc, #512]	; (800402c <_Z10update_PIDv+0x574>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a80      	ldr	r2, [pc, #512]	; (8004030 <_Z10update_PIDv+0x578>)
 8003e30:	6013      	str	r3, [r2, #0]
  Yaw_D_old   = PID_Yaw_DLPF_xw_diff  ;
 8003e32:	4b77      	ldr	r3, [pc, #476]	; (8004010 <_Z10update_PIDv+0x558>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a7f      	ldr	r2, [pc, #508]	; (8004034 <_Z10update_PIDv+0x57c>)
 8003e38:	6013      	str	r3, [r2, #0]
  
  if (PID_Pitch_y >    outputStrength) PID_Pitch_y =    outputStrength;                             //output limits
 8003e3a:	4b7f      	ldr	r3, [pc, #508]	; (8004038 <_Z10update_PIDv+0x580>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a7f      	ldr	r2, [pc, #508]	; (800403c <_Z10update_PIDv+0x584>)
 8003e40:	6812      	ldr	r2, [r2, #0]
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fd f995 	bl	8001174 <__aeabi_fcmpgt>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <_Z10update_PIDv+0x3a0>
 8003e50:	4b7a      	ldr	r3, [pc, #488]	; (800403c <_Z10update_PIDv+0x584>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a78      	ldr	r2, [pc, #480]	; (8004038 <_Z10update_PIDv+0x580>)
 8003e56:	6013      	str	r3, [r2, #0]
  if (PID_Roll_y  >    outputStrength) PID_Roll_y  =    outputStrength;                            //NOTDONE use defines for values
 8003e58:	4b6b      	ldr	r3, [pc, #428]	; (8004008 <_Z10update_PIDv+0x550>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a77      	ldr	r2, [pc, #476]	; (800403c <_Z10update_PIDv+0x584>)
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	4611      	mov	r1, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fd f986 	bl	8001174 <__aeabi_fcmpgt>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <_Z10update_PIDv+0x3be>
 8003e6e:	4b73      	ldr	r3, [pc, #460]	; (800403c <_Z10update_PIDv+0x584>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a65      	ldr	r2, [pc, #404]	; (8004008 <_Z10update_PIDv+0x550>)
 8003e74:	6013      	str	r3, [r2, #0]
  if (PID_Yaw_y   >              1000) PID_Yaw_y   =              1000;
 8003e76:	4b6a      	ldr	r3, [pc, #424]	; (8004020 <_Z10update_PIDv+0x568>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4971      	ldr	r1, [pc, #452]	; (8004040 <_Z10update_PIDv+0x588>)
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fd f979 	bl	8001174 <__aeabi_fcmpgt>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <_Z10update_PIDv+0x3d6>
 8003e88:	4b65      	ldr	r3, [pc, #404]	; (8004020 <_Z10update_PIDv+0x568>)
 8003e8a:	4a6d      	ldr	r2, [pc, #436]	; (8004040 <_Z10update_PIDv+0x588>)
 8003e8c:	601a      	str	r2, [r3, #0]
  if (PID_Pitch_y <   -outputStrength) PID_Pitch_y =   -outputStrength;
 8003e8e:	4b6b      	ldr	r3, [pc, #428]	; (800403c <_Z10update_PIDv+0x584>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003e96:	4a68      	ldr	r2, [pc, #416]	; (8004038 <_Z10update_PIDv+0x580>)
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fd f969 	bl	8001174 <__aeabi_fcmpgt>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <_Z10update_PIDv+0x3fc>
 8003ea8:	4b64      	ldr	r3, [pc, #400]	; (800403c <_Z10update_PIDv+0x584>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003eb0:	4a61      	ldr	r2, [pc, #388]	; (8004038 <_Z10update_PIDv+0x580>)
 8003eb2:	6013      	str	r3, [r2, #0]
  if (PID_Roll_y  <   -outputStrength) PID_Roll_y  =   -outputStrength;
 8003eb4:	4b61      	ldr	r3, [pc, #388]	; (800403c <_Z10update_PIDv+0x584>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ebc:	4a52      	ldr	r2, [pc, #328]	; (8004008 <_Z10update_PIDv+0x550>)
 8003ebe:	6812      	ldr	r2, [r2, #0]
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fd f956 	bl	8001174 <__aeabi_fcmpgt>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <_Z10update_PIDv+0x422>
 8003ece:	4b5b      	ldr	r3, [pc, #364]	; (800403c <_Z10update_PIDv+0x584>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ed6:	4a4c      	ldr	r2, [pc, #304]	; (8004008 <_Z10update_PIDv+0x550>)
 8003ed8:	6013      	str	r3, [r2, #0]
  if (PID_Yaw_y   <                 0) PID_Yaw_y   =                 0;
 8003eda:	4b51      	ldr	r3, [pc, #324]	; (8004020 <_Z10update_PIDv+0x568>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f04f 0100 	mov.w	r1, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fd f928 	bl	8001138 <__aeabi_fcmplt>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <_Z10update_PIDv+0x43e>
 8003eee:	4b4c      	ldr	r3, [pc, #304]	; (8004020 <_Z10update_PIDv+0x568>)
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]

  Pitch_y_ChangeRate = PID_Pitch_y - PID_Pitch_y_DLPF;                                            //get change rate
 8003ef6:	4b50      	ldr	r3, [pc, #320]	; (8004038 <_Z10update_PIDv+0x580>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a52      	ldr	r2, [pc, #328]	; (8004044 <_Z10update_PIDv+0x58c>)
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc fe71 	bl	8000be8 <__aeabi_fsub>
 8003f06:	4603      	mov	r3, r0
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4b4f      	ldr	r3, [pc, #316]	; (8004048 <_Z10update_PIDv+0x590>)
 8003f0c:	601a      	str	r2, [r3, #0]
  Roll_y_ChangeRate  = PID_Roll_y  - PID_Roll_y_DLPF ;
 8003f0e:	4b3e      	ldr	r3, [pc, #248]	; (8004008 <_Z10update_PIDv+0x550>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a4e      	ldr	r2, [pc, #312]	; (800404c <_Z10update_PIDv+0x594>)
 8003f14:	6812      	ldr	r2, [r2, #0]
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fc fe65 	bl	8000be8 <__aeabi_fsub>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b4b      	ldr	r3, [pc, #300]	; (8004050 <_Z10update_PIDv+0x598>)
 8003f24:	601a      	str	r2, [r3, #0]

  if (Pitch_y_ChangeRate >  Pitch_y_maxChangeRate) Pitch_y_ChangeRate =  Pitch_y_maxChangeRate;   //constrain by max change rate
 8003f26:	4b48      	ldr	r3, [pc, #288]	; (8004048 <_Z10update_PIDv+0x590>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a4a      	ldr	r2, [pc, #296]	; (8004054 <_Z10update_PIDv+0x59c>)
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	4611      	mov	r1, r2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fd f91f 	bl	8001174 <__aeabi_fcmpgt>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <_Z10update_PIDv+0x48c>
 8003f3c:	4b45      	ldr	r3, [pc, #276]	; (8004054 <_Z10update_PIDv+0x59c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a41      	ldr	r2, [pc, #260]	; (8004048 <_Z10update_PIDv+0x590>)
 8003f42:	6013      	str	r3, [r2, #0]
  if (Roll_y_ChangeRate  >  Roll_y_maxChangeRate ) Roll_y_ChangeRate  =  Roll_y_maxChangeRate ;
 8003f44:	4b42      	ldr	r3, [pc, #264]	; (8004050 <_Z10update_PIDv+0x598>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a43      	ldr	r2, [pc, #268]	; (8004058 <_Z10update_PIDv+0x5a0>)
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fd f910 	bl	8001174 <__aeabi_fcmpgt>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <_Z10update_PIDv+0x4aa>
 8003f5a:	4b3f      	ldr	r3, [pc, #252]	; (8004058 <_Z10update_PIDv+0x5a0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a3c      	ldr	r2, [pc, #240]	; (8004050 <_Z10update_PIDv+0x598>)
 8003f60:	6013      	str	r3, [r2, #0]
  if (Pitch_y_ChangeRate < -Pitch_y_maxChangeRate) Pitch_y_ChangeRate = -Pitch_y_maxChangeRate;
 8003f62:	4b3c      	ldr	r3, [pc, #240]	; (8004054 <_Z10update_PIDv+0x59c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003f6a:	4a37      	ldr	r2, [pc, #220]	; (8004048 <_Z10update_PIDv+0x590>)
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	4611      	mov	r1, r2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fd f8ff 	bl	8001174 <__aeabi_fcmpgt>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <_Z10update_PIDv+0x4d0>
 8003f7c:	4b35      	ldr	r3, [pc, #212]	; (8004054 <_Z10update_PIDv+0x59c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003f84:	4a30      	ldr	r2, [pc, #192]	; (8004048 <_Z10update_PIDv+0x590>)
 8003f86:	6013      	str	r3, [r2, #0]
  if (Roll_y_ChangeRate  < -Roll_y_maxChangeRate ) Roll_y_ChangeRate  = -Roll_y_maxChangeRate ;
 8003f88:	4b33      	ldr	r3, [pc, #204]	; (8004058 <_Z10update_PIDv+0x5a0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003f90:	4a2f      	ldr	r2, [pc, #188]	; (8004050 <_Z10update_PIDv+0x598>)
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	4611      	mov	r1, r2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd f8ec 	bl	8001174 <__aeabi_fcmpgt>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <_Z10update_PIDv+0x4f6>
 8003fa2:	4b2d      	ldr	r3, [pc, #180]	; (8004058 <_Z10update_PIDv+0x5a0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003faa:	4a29      	ldr	r2, [pc, #164]	; (8004050 <_Z10update_PIDv+0x598>)
 8003fac:	6013      	str	r3, [r2, #0]

  PID_Pitch_y_DLPF += PID_Pitch_y_DLPF_k * Pitch_y_ChangeRate;                                    //filter
 8003fae:	4b25      	ldr	r3, [pc, #148]	; (8004044 <_Z10update_PIDv+0x58c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc fa74 	bl	80004a0 <__aeabi_f2d>
 8003fb8:	4604      	mov	r4, r0
 8003fba:	460d      	mov	r5, r1
 8003fbc:	4b22      	ldr	r3, [pc, #136]	; (8004048 <_Z10update_PIDv+0x590>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fc fa6d 	bl	80004a0 <__aeabi_f2d>
 8003fc6:	a30a      	add	r3, pc, #40	; (adr r3, 8003ff0 <_Z10update_PIDv+0x538>)
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f7fc fac0 	bl	8000550 <__aeabi_dmul>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	f7fc f904 	bl	80001e4 <__adddf3>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f7fc fdac 	bl	8000b40 <__aeabi_d2f>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	e037      	b.n	800405c <_Z10update_PIDv+0x5a4>
 8003fec:	f3af 8000 	nop.w
 8003ff0:	9999999a 	.word	0x9999999a
 8003ff4:	3fd99999 	.word	0x3fd99999
 8003ff8:	200005bc 	.word	0x200005bc
 8003ffc:	2000056c 	.word	0x2000056c
 8004000:	20000598 	.word	0x20000598
 8004004:	42c80000 	.word	0x42c80000
 8004008:	20000550 	.word	0x20000550
 800400c:	20000008 	.word	0x20000008
 8004010:	20000548 	.word	0x20000548
 8004014:	41a00000 	.word	0x41a00000
 8004018:	200005c0 	.word	0x200005c0
 800401c:	2000059c 	.word	0x2000059c
 8004020:	20000554 	.word	0x20000554
 8004024:	20000540 	.word	0x20000540
 8004028:	200005c4 	.word	0x200005c4
 800402c:	20000544 	.word	0x20000544
 8004030:	200005c8 	.word	0x200005c8
 8004034:	200005cc 	.word	0x200005cc
 8004038:	2000054c 	.word	0x2000054c
 800403c:	20000004 	.word	0x20000004
 8004040:	447a0000 	.word	0x447a0000
 8004044:	2000058c 	.word	0x2000058c
 8004048:	20000584 	.word	0x20000584
 800404c:	20000590 	.word	0x20000590
 8004050:	20000588 	.word	0x20000588
 8004054:	20000014 	.word	0x20000014
 8004058:	20000018 	.word	0x20000018
 800405c:	4a6c      	ldr	r2, [pc, #432]	; (8004210 <_Z10update_PIDv+0x758>)
 800405e:	6013      	str	r3, [r2, #0]
  PID_Roll_y_DLPF  += PID_Roll_y_DLPF_k  * Roll_y_ChangeRate ;
 8004060:	4b6c      	ldr	r3, [pc, #432]	; (8004214 <_Z10update_PIDv+0x75c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7fc fa1b 	bl	80004a0 <__aeabi_f2d>
 800406a:	4604      	mov	r4, r0
 800406c:	460d      	mov	r5, r1
 800406e:	4b6a      	ldr	r3, [pc, #424]	; (8004218 <_Z10update_PIDv+0x760>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fc fa14 	bl	80004a0 <__aeabi_f2d>
 8004078:	a361      	add	r3, pc, #388	; (adr r3, 8004200 <_Z10update_PIDv+0x748>)
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f7fc fa67 	bl	8000550 <__aeabi_dmul>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4620      	mov	r0, r4
 8004088:	4629      	mov	r1, r5
 800408a:	f7fc f8ab 	bl	80001e4 <__adddf3>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	f7fc fd53 	bl	8000b40 <__aeabi_d2f>
 800409a:	4603      	mov	r3, r0
 800409c:	4a5d      	ldr	r2, [pc, #372]	; (8004214 <_Z10update_PIDv+0x75c>)
 800409e:	6013      	str	r3, [r2, #0]

  PID_Pitch_y_DCPL = PID_Roll_y_DLPF ; // - PID_Roll_y_DLPF_old ;
 80040a0:	4b5c      	ldr	r3, [pc, #368]	; (8004214 <_Z10update_PIDv+0x75c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a5d      	ldr	r2, [pc, #372]	; (800421c <_Z10update_PIDv+0x764>)
 80040a6:	6013      	str	r3, [r2, #0]
  PID_Roll_y_DCPL  = PID_Pitch_y_DLPF; // - PID_Pitch_y_DLPF_old;                                    //ROLL-PITCH decoupling
 80040a8:	4b59      	ldr	r3, [pc, #356]	; (8004210 <_Z10update_PIDv+0x758>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a5c      	ldr	r2, [pc, #368]	; (8004220 <_Z10update_PIDv+0x768>)
 80040ae:	6013      	str	r3, [r2, #0]

  PID_Pitch_y_DLPF_old = PID_Pitch_y_DLPF;                                                      //differentiate
 80040b0:	4b57      	ldr	r3, [pc, #348]	; (8004210 <_Z10update_PIDv+0x758>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a5b      	ldr	r2, [pc, #364]	; (8004224 <_Z10update_PIDv+0x76c>)
 80040b6:	6013      	str	r3, [r2, #0]
  PID_Roll_y_DLPF_old  = PID_Roll_y_DLPF ;
 80040b8:	4b56      	ldr	r3, [pc, #344]	; (8004214 <_Z10update_PIDv+0x75c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a5a      	ldr	r2, [pc, #360]	; (8004228 <_Z10update_PIDv+0x770>)
 80040be:	6013      	str	r3, [r2, #0]


  Pitch_DCPL_angle = (/*(M_PI / 2) -*/ DCPL_angle) * 2 * atan(PID_Pitch_y_DCPL * Pitch_DCPL_k) / M_PI;    //phase shift compensation due to acceleration
 80040c0:	4b5a      	ldr	r3, [pc, #360]	; (800422c <_Z10update_PIDv+0x774>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4619      	mov	r1, r3
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fc fd90 	bl	8000bec <__addsf3>
 80040cc:	4603      	mov	r3, r0
 80040ce:	461c      	mov	r4, r3
 80040d0:	4b52      	ldr	r3, [pc, #328]	; (800421c <_Z10update_PIDv+0x764>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a56      	ldr	r2, [pc, #344]	; (8004230 <_Z10update_PIDv+0x778>)
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	4611      	mov	r1, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fc fe8e 	bl	8000dfc <__aeabi_fmul>
 80040e0:	4603      	mov	r3, r0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fd fd48 	bl	8001b78 <_ZSt4atanf>
 80040e8:	4603      	mov	r3, r0
 80040ea:	4619      	mov	r1, r3
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7fc fe85 	bl	8000dfc <__aeabi_fmul>
 80040f2:	4603      	mov	r3, r0
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fc f9d3 	bl	80004a0 <__aeabi_f2d>
 80040fa:	a343      	add	r3, pc, #268	; (adr r3, 8004208 <_Z10update_PIDv+0x750>)
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	f7fc fb50 	bl	80007a4 <__aeabi_ddiv>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4610      	mov	r0, r2
 800410a:	4619      	mov	r1, r3
 800410c:	f7fc fd18 	bl	8000b40 <__aeabi_d2f>
 8004110:	4603      	mov	r3, r0
 8004112:	4a48      	ldr	r2, [pc, #288]	; (8004234 <_Z10update_PIDv+0x77c>)
 8004114:	6013      	str	r3, [r2, #0]
  Roll_DCPL_angle  =                   DCPL_angle  * 2 * atan(PID_Roll_y_DCPL  * Roll_DCPL_k ) / M_PI;
 8004116:	4b45      	ldr	r3, [pc, #276]	; (800422c <_Z10update_PIDv+0x774>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4619      	mov	r1, r3
 800411c:	4618      	mov	r0, r3
 800411e:	f7fc fd65 	bl	8000bec <__addsf3>
 8004122:	4603      	mov	r3, r0
 8004124:	461c      	mov	r4, r3
 8004126:	4b3e      	ldr	r3, [pc, #248]	; (8004220 <_Z10update_PIDv+0x768>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a43      	ldr	r2, [pc, #268]	; (8004238 <_Z10update_PIDv+0x780>)
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc fe63 	bl	8000dfc <__aeabi_fmul>
 8004136:	4603      	mov	r3, r0
 8004138:	4618      	mov	r0, r3
 800413a:	f7fd fd1d 	bl	8001b78 <_ZSt4atanf>
 800413e:	4603      	mov	r3, r0
 8004140:	4619      	mov	r1, r3
 8004142:	4620      	mov	r0, r4
 8004144:	f7fc fe5a 	bl	8000dfc <__aeabi_fmul>
 8004148:	4603      	mov	r3, r0
 800414a:	4618      	mov	r0, r3
 800414c:	f7fc f9a8 	bl	80004a0 <__aeabi_f2d>
 8004150:	a32d      	add	r3, pc, #180	; (adr r3, 8004208 <_Z10update_PIDv+0x750>)
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f7fc fb25 	bl	80007a4 <__aeabi_ddiv>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4610      	mov	r0, r2
 8004160:	4619      	mov	r1, r3
 8004162:	f7fc fced 	bl	8000b40 <__aeabi_d2f>
 8004166:	4603      	mov	r3, r0
 8004168:	4a34      	ldr	r2, [pc, #208]	; (800423c <_Z10update_PIDv+0x784>)
 800416a:	6013      	str	r3, [r2, #0]

  Pitch_output = (PID_Pitch_y_DLPF * cos(Roll_DCPL_angle )) + (PID_Roll_y_DLPF  * sin(Pitch_DCPL_angle));
 800416c:	4b33      	ldr	r3, [pc, #204]	; (800423c <_Z10update_PIDv+0x784>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f7fd fd0d 	bl	8001b90 <_ZSt3cosf>
 8004176:	4602      	mov	r2, r0
 8004178:	4b25      	ldr	r3, [pc, #148]	; (8004210 <_Z10update_PIDv+0x758>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f7fc fe3c 	bl	8000dfc <__aeabi_fmul>
 8004184:	4603      	mov	r3, r0
 8004186:	461c      	mov	r4, r3
 8004188:	4b2a      	ldr	r3, [pc, #168]	; (8004234 <_Z10update_PIDv+0x77c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f7fd fd0b 	bl	8001ba8 <_ZSt3sinf>
 8004192:	4602      	mov	r2, r0
 8004194:	4b1f      	ldr	r3, [pc, #124]	; (8004214 <_Z10update_PIDv+0x75c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4619      	mov	r1, r3
 800419a:	4610      	mov	r0, r2
 800419c:	f7fc fe2e 	bl	8000dfc <__aeabi_fmul>
 80041a0:	4603      	mov	r3, r0
 80041a2:	4619      	mov	r1, r3
 80041a4:	4620      	mov	r0, r4
 80041a6:	f7fc fd21 	bl	8000bec <__addsf3>
 80041aa:	4603      	mov	r3, r0
 80041ac:	461a      	mov	r2, r3
 80041ae:	4b24      	ldr	r3, [pc, #144]	; (8004240 <_Z10update_PIDv+0x788>)
 80041b0:	601a      	str	r2, [r3, #0]
  Roll_output  = (-PID_Roll_y_DLPF * cos(Pitch_DCPL_angle)) + (PID_Pitch_y_DLPF * sin(Roll_DCPL_angle ));
 80041b2:	4b18      	ldr	r3, [pc, #96]	; (8004214 <_Z10update_PIDv+0x75c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80041ba:	4b1e      	ldr	r3, [pc, #120]	; (8004234 <_Z10update_PIDv+0x77c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fd fce6 	bl	8001b90 <_ZSt3cosf>
 80041c4:	4603      	mov	r3, r0
 80041c6:	4619      	mov	r1, r3
 80041c8:	4620      	mov	r0, r4
 80041ca:	f7fc fe17 	bl	8000dfc <__aeabi_fmul>
 80041ce:	4603      	mov	r3, r0
 80041d0:	461c      	mov	r4, r3
 80041d2:	4b1a      	ldr	r3, [pc, #104]	; (800423c <_Z10update_PIDv+0x784>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fd fce6 	bl	8001ba8 <_ZSt3sinf>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <_Z10update_PIDv+0x758>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4619      	mov	r1, r3
 80041e4:	4610      	mov	r0, r2
 80041e6:	f7fc fe09 	bl	8000dfc <__aeabi_fmul>
 80041ea:	4603      	mov	r3, r0
 80041ec:	4619      	mov	r1, r3
 80041ee:	4620      	mov	r0, r4
 80041f0:	f7fc fcfc 	bl	8000bec <__addsf3>
 80041f4:	4603      	mov	r3, r0
 80041f6:	461a      	mov	r2, r3
 80041f8:	4b12      	ldr	r3, [pc, #72]	; (8004244 <_Z10update_PIDv+0x78c>)
 80041fa:	601a      	str	r2, [r3, #0]
  
}
 80041fc:	bf00      	nop
 80041fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004200:	9999999a 	.word	0x9999999a
 8004204:	3fd99999 	.word	0x3fd99999
 8004208:	54442d18 	.word	0x54442d18
 800420c:	400921fb 	.word	0x400921fb
 8004210:	2000058c 	.word	0x2000058c
 8004214:	20000590 	.word	0x20000590
 8004218:	20000588 	.word	0x20000588
 800421c:	200005a0 	.word	0x200005a0
 8004220:	200005a4 	.word	0x200005a4
 8004224:	200005b0 	.word	0x200005b0
 8004228:	200005b4 	.word	0x200005b4
 800422c:	20000580 	.word	0x20000580
 8004230:	2000057c 	.word	0x2000057c
 8004234:	200005a8 	.word	0x200005a8
 8004238:	20000578 	.word	0x20000578
 800423c:	200005ac 	.word	0x200005ac
 8004240:	20000558 	.word	0x20000558
 8004244:	2000055c 	.word	0x2000055c

08004248 <_Z12getPIDValuesv>:
 * @brief This method extracts the PID values for PITCH,ROLL,YAW that can be live tuned on the remote//NOTDONE
 * 
 * --Custom Method!
 */
void getPIDValues()
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  if (tuningMode == 1)
 800424c:	4bb4      	ldr	r3, [pc, #720]	; (8004520 <_Z12getPIDValuesv+0x2d8>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b01      	cmp	r3, #1
 8004252:	f040 81cc 	bne.w	80045ee <_Z12getPIDValuesv+0x3a6>
  {
    if ((SBUS_Channels[5] <= 1000) & (SBUS_Channels[5] >= 990))
 8004256:	4bb3      	ldr	r3, [pc, #716]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 8004258:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800425c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004260:	bfd4      	ite	le
 8004262:	2301      	movle	r3, #1
 8004264:	2300      	movgt	r3, #0
 8004266:	b2da      	uxtb	r2, r3
 8004268:	4bae      	ldr	r3, [pc, #696]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 800426a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800426e:	f240 31dd 	movw	r1, #989	; 0x3dd
 8004272:	428b      	cmp	r3, r1
 8004274:	bfcc      	ite	gt
 8004276:	2301      	movgt	r3, #1
 8004278:	2300      	movle	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	4013      	ands	r3, r2
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 80ac 	beq.w	80043de <_Z12getPIDValuesv+0x196>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Pitch_PID_k[0] = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) *  0.01 ;    //NOTDONE use defines for values
 8004286:	4ba7      	ldr	r3, [pc, #668]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 8004288:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800428c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004290:	bfd4      	ite	le
 8004292:	2301      	movle	r3, #1
 8004294:	2300      	movgt	r3, #0
 8004296:	b2da      	uxtb	r2, r3
 8004298:	4ba2      	ldr	r3, [pc, #648]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 800429a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800429e:	f240 31dd 	movw	r1, #989	; 0x3dd
 80042a2:	428b      	cmp	r3, r1
 80042a4:	bfcc      	ite	gt
 80042a6:	2301      	movgt	r3, #1
 80042a8:	2300      	movle	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	4013      	ands	r3, r2
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d022      	beq.n	80042fa <_Z12getPIDValuesv+0xb2>
 80042b4:	4b9b      	ldr	r3, [pc, #620]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 80042b6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fc fd4a 	bl	8000d54 <__aeabi_i2f>
 80042c0:	4603      	mov	r3, r0
 80042c2:	4999      	ldr	r1, [pc, #612]	; (8004528 <_Z12getPIDValuesv+0x2e0>)
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fc fe4d 	bl	8000f64 <__aeabi_fdiv>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fc fc8b 	bl	8000bec <__addsf3>
 80042d6:	4603      	mov	r3, r0
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fc f8e1 	bl	80004a0 <__aeabi_f2d>
 80042de:	a38a      	add	r3, pc, #552	; (adr r3, 8004508 <_Z12getPIDValuesv+0x2c0>)
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	f7fc f934 	bl	8000550 <__aeabi_dmul>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4610      	mov	r0, r2
 80042ee:	4619      	mov	r1, r3
 80042f0:	f7fc fc26 	bl	8000b40 <__aeabi_d2f>
 80042f4:	4603      	mov	r3, r0
 80042f6:	4a8d      	ldr	r2, [pc, #564]	; (800452c <_Z12getPIDValuesv+0x2e4>)
 80042f8:	6013      	str	r3, [r2, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Pitch_PID_k[1] = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) *  0.001;    //NOTDONE use defines for values
 80042fa:	4b8a      	ldr	r3, [pc, #552]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 80042fc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004300:	2b0a      	cmp	r3, #10
 8004302:	bfd4      	ite	le
 8004304:	2301      	movle	r3, #1
 8004306:	2300      	movgt	r3, #0
 8004308:	b2da      	uxtb	r2, r3
 800430a:	4b86      	ldr	r3, [pc, #536]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 800430c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004310:	f113 0f0a 	cmn.w	r3, #10
 8004314:	bfac      	ite	ge
 8004316:	2301      	movge	r3, #1
 8004318:	2300      	movlt	r3, #0
 800431a:	b2db      	uxtb	r3, r3
 800431c:	4013      	ands	r3, r2
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d022      	beq.n	800436a <_Z12getPIDValuesv+0x122>
 8004324:	4b7f      	ldr	r3, [pc, #508]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 8004326:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc fd12 	bl	8000d54 <__aeabi_i2f>
 8004330:	4603      	mov	r3, r0
 8004332:	497d      	ldr	r1, [pc, #500]	; (8004528 <_Z12getPIDValuesv+0x2e0>)
 8004334:	4618      	mov	r0, r3
 8004336:	f7fc fe15 	bl	8000f64 <__aeabi_fdiv>
 800433a:	4603      	mov	r3, r0
 800433c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004340:	4618      	mov	r0, r3
 8004342:	f7fc fc53 	bl	8000bec <__addsf3>
 8004346:	4603      	mov	r3, r0
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc f8a9 	bl	80004a0 <__aeabi_f2d>
 800434e:	a370      	add	r3, pc, #448	; (adr r3, 8004510 <_Z12getPIDValuesv+0x2c8>)
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	f7fc f8fc 	bl	8000550 <__aeabi_dmul>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4610      	mov	r0, r2
 800435e:	4619      	mov	r1, r3
 8004360:	f7fc fbee 	bl	8000b40 <__aeabi_d2f>
 8004364:	4603      	mov	r3, r0
 8004366:	4a71      	ldr	r2, [pc, #452]	; (800452c <_Z12getPIDValuesv+0x2e4>)
 8004368:	6053      	str	r3, [r2, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Pitch_PID_k[2] = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) *  0.16 ;    //NOTDONE use defines for values       
 800436a:	4b6e      	ldr	r3, [pc, #440]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 800436c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004370:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8004374:	4293      	cmp	r3, r2
 8004376:	bfb4      	ite	lt
 8004378:	2301      	movlt	r3, #1
 800437a:	2300      	movge	r3, #0
 800437c:	b2da      	uxtb	r2, r3
 800437e:	4b69      	ldr	r3, [pc, #420]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 8004380:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004384:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004388:	bfac      	ite	ge
 800438a:	2301      	movge	r3, #1
 800438c:	2300      	movlt	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	4013      	ands	r3, r2
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d022      	beq.n	80043de <_Z12getPIDValuesv+0x196>
 8004398:	4b62      	ldr	r3, [pc, #392]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 800439a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fc fcd8 	bl	8000d54 <__aeabi_i2f>
 80043a4:	4603      	mov	r3, r0
 80043a6:	4960      	ldr	r1, [pc, #384]	; (8004528 <_Z12getPIDValuesv+0x2e0>)
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fc fddb 	bl	8000f64 <__aeabi_fdiv>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fc fc19 	bl	8000bec <__addsf3>
 80043ba:	4603      	mov	r3, r0
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fc f86f 	bl	80004a0 <__aeabi_f2d>
 80043c2:	a355      	add	r3, pc, #340	; (adr r3, 8004518 <_Z12getPIDValuesv+0x2d0>)
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f7fc f8c2 	bl	8000550 <__aeabi_dmul>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4610      	mov	r0, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	f7fc fbb4 	bl	8000b40 <__aeabi_d2f>
 80043d8:	4603      	mov	r3, r0
 80043da:	4a54      	ldr	r2, [pc, #336]	; (800452c <_Z12getPIDValuesv+0x2e4>)
 80043dc:	6093      	str	r3, [r2, #8]
    }
    if ((SBUS_Channels[5] <= 10) & (SBUS_Channels[5] >= -10))
 80043de:	4b51      	ldr	r3, [pc, #324]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 80043e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80043e4:	2b0a      	cmp	r3, #10
 80043e6:	bfd4      	ite	le
 80043e8:	2301      	movle	r3, #1
 80043ea:	2300      	movgt	r3, #0
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	4b4d      	ldr	r3, [pc, #308]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 80043f0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80043f4:	f113 0f0a 	cmn.w	r3, #10
 80043f8:	bfac      	ite	ge
 80043fa:	2301      	movge	r3, #1
 80043fc:	2300      	movlt	r3, #0
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	4013      	ands	r3, r2
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80c6 	beq.w	8004596 <_Z12getPIDValuesv+0x34e>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Roll_PID_k[0]  = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) *  0.01 ;    //NOTDONE use defines for values
 800440a:	4b46      	ldr	r3, [pc, #280]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 800440c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004414:	bfd4      	ite	le
 8004416:	2301      	movle	r3, #1
 8004418:	2300      	movgt	r3, #0
 800441a:	b2da      	uxtb	r2, r3
 800441c:	4b41      	ldr	r3, [pc, #260]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 800441e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004422:	f240 31dd 	movw	r1, #989	; 0x3dd
 8004426:	428b      	cmp	r3, r1
 8004428:	bfcc      	ite	gt
 800442a:	2301      	movgt	r3, #1
 800442c:	2300      	movle	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	4013      	ands	r3, r2
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d022      	beq.n	800447e <_Z12getPIDValuesv+0x236>
 8004438:	4b3a      	ldr	r3, [pc, #232]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 800443a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fc fc88 	bl	8000d54 <__aeabi_i2f>
 8004444:	4603      	mov	r3, r0
 8004446:	4938      	ldr	r1, [pc, #224]	; (8004528 <_Z12getPIDValuesv+0x2e0>)
 8004448:	4618      	mov	r0, r3
 800444a:	f7fc fd8b 	bl	8000f64 <__aeabi_fdiv>
 800444e:	4603      	mov	r3, r0
 8004450:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004454:	4618      	mov	r0, r3
 8004456:	f7fc fbc9 	bl	8000bec <__addsf3>
 800445a:	4603      	mov	r3, r0
 800445c:	4618      	mov	r0, r3
 800445e:	f7fc f81f 	bl	80004a0 <__aeabi_f2d>
 8004462:	a329      	add	r3, pc, #164	; (adr r3, 8004508 <_Z12getPIDValuesv+0x2c0>)
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f7fc f872 	bl	8000550 <__aeabi_dmul>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	f7fc fb64 	bl	8000b40 <__aeabi_d2f>
 8004478:	4603      	mov	r3, r0
 800447a:	4a2d      	ldr	r2, [pc, #180]	; (8004530 <_Z12getPIDValuesv+0x2e8>)
 800447c:	6013      	str	r3, [r2, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Roll_PID_k[1]  = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) *  0.001;    //NOTDONE use defines for values
 800447e:	4b29      	ldr	r3, [pc, #164]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 8004480:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004484:	2b0a      	cmp	r3, #10
 8004486:	bfd4      	ite	le
 8004488:	2301      	movle	r3, #1
 800448a:	2300      	movgt	r3, #0
 800448c:	b2da      	uxtb	r2, r3
 800448e:	4b25      	ldr	r3, [pc, #148]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 8004490:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004494:	f113 0f0a 	cmn.w	r3, #10
 8004498:	bfac      	ite	ge
 800449a:	2301      	movge	r3, #1
 800449c:	2300      	movlt	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	4013      	ands	r3, r2
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d022      	beq.n	80044ee <_Z12getPIDValuesv+0x2a6>
 80044a8:	4b1e      	ldr	r3, [pc, #120]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 80044aa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fc fc50 	bl	8000d54 <__aeabi_i2f>
 80044b4:	4603      	mov	r3, r0
 80044b6:	491c      	ldr	r1, [pc, #112]	; (8004528 <_Z12getPIDValuesv+0x2e0>)
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fc fd53 	bl	8000f64 <__aeabi_fdiv>
 80044be:	4603      	mov	r3, r0
 80044c0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fc fb91 	bl	8000bec <__addsf3>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fb ffe7 	bl	80004a0 <__aeabi_f2d>
 80044d2:	a30f      	add	r3, pc, #60	; (adr r3, 8004510 <_Z12getPIDValuesv+0x2c8>)
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f7fc f83a 	bl	8000550 <__aeabi_dmul>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4610      	mov	r0, r2
 80044e2:	4619      	mov	r1, r3
 80044e4:	f7fc fb2c 	bl	8000b40 <__aeabi_d2f>
 80044e8:	4603      	mov	r3, r0
 80044ea:	4a11      	ldr	r2, [pc, #68]	; (8004530 <_Z12getPIDValuesv+0x2e8>)
 80044ec:	6053      	str	r3, [r2, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Roll_PID_k[2]  = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) *  0.16 ;    //NOTDONE use defines for values       
 80044ee:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <_Z12getPIDValuesv+0x2dc>)
 80044f0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80044f4:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 80044f8:	4293      	cmp	r3, r2
 80044fa:	bfb4      	ite	lt
 80044fc:	2301      	movlt	r3, #1
 80044fe:	2300      	movge	r3, #0
 8004500:	e018      	b.n	8004534 <_Z12getPIDValuesv+0x2ec>
 8004502:	bf00      	nop
 8004504:	f3af 8000 	nop.w
 8004508:	47ae147b 	.word	0x47ae147b
 800450c:	3f847ae1 	.word	0x3f847ae1
 8004510:	d2f1a9fc 	.word	0xd2f1a9fc
 8004514:	3f50624d 	.word	0x3f50624d
 8004518:	47ae147b 	.word	0x47ae147b
 800451c:	3fc47ae1 	.word	0x3fc47ae1
 8004520:	20000000 	.word	0x20000000
 8004524:	20000658 	.word	0x20000658
 8004528:	447a0000 	.word	0x447a0000
 800452c:	20000560 	.word	0x20000560
 8004530:	2000056c 	.word	0x2000056c
 8004534:	b2da      	uxtb	r2, r3
 8004536:	4b32      	ldr	r3, [pc, #200]	; (8004600 <_Z12getPIDValuesv+0x3b8>)
 8004538:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800453c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004540:	bfac      	ite	ge
 8004542:	2301      	movge	r3, #1
 8004544:	2300      	movlt	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	4013      	ands	r3, r2
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d022      	beq.n	8004596 <_Z12getPIDValuesv+0x34e>
 8004550:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <_Z12getPIDValuesv+0x3b8>)
 8004552:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004556:	4618      	mov	r0, r3
 8004558:	f7fc fbfc 	bl	8000d54 <__aeabi_i2f>
 800455c:	4603      	mov	r3, r0
 800455e:	4929      	ldr	r1, [pc, #164]	; (8004604 <_Z12getPIDValuesv+0x3bc>)
 8004560:	4618      	mov	r0, r3
 8004562:	f7fc fcff 	bl	8000f64 <__aeabi_fdiv>
 8004566:	4603      	mov	r3, r0
 8004568:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800456c:	4618      	mov	r0, r3
 800456e:	f7fc fb3d 	bl	8000bec <__addsf3>
 8004572:	4603      	mov	r3, r0
 8004574:	4618      	mov	r0, r3
 8004576:	f7fb ff93 	bl	80004a0 <__aeabi_f2d>
 800457a:	a31f      	add	r3, pc, #124	; (adr r3, 80045f8 <_Z12getPIDValuesv+0x3b0>)
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	f7fb ffe6 	bl	8000550 <__aeabi_dmul>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	f7fc fad8 	bl	8000b40 <__aeabi_d2f>
 8004590:	4603      	mov	r3, r0
 8004592:	4a1d      	ldr	r2, [pc, #116]	; (8004608 <_Z12getPIDValuesv+0x3c0>)
 8004594:	6093      	str	r3, [r2, #8]
    }
    if ((SBUS_Channels[5] <= -990) & (SBUS_Channels[5] >= -1000))
 8004596:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <_Z12getPIDValuesv+0x3b8>)
 8004598:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800459c:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 80045a0:	4293      	cmp	r3, r2
 80045a2:	bfb4      	ite	lt
 80045a4:	2301      	movlt	r3, #1
 80045a6:	2300      	movge	r3, #0
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	4b15      	ldr	r3, [pc, #84]	; (8004600 <_Z12getPIDValuesv+0x3b8>)
 80045ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80045b0:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80045b4:	bfac      	ite	ge
 80045b6:	2301      	movge	r3, #1
 80045b8:	2300      	movlt	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	4013      	ands	r3, r2
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d014      	beq.n	80045ee <_Z12getPIDValuesv+0x3a6>
    {
      mainMotorStartOffset = -135.25 + (((float)SBUS_Channels[7]) / 8);
 80045c4:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <_Z12getPIDValuesv+0x3b8>)
 80045c6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fc fbc2 	bl	8000d54 <__aeabi_i2f>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fc fcc4 	bl	8000f64 <__aeabi_fdiv>
 80045dc:	4603      	mov	r3, r0
 80045de:	490b      	ldr	r1, [pc, #44]	; (800460c <_Z12getPIDValuesv+0x3c4>)
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fc fb01 	bl	8000be8 <__aeabi_fsub>
 80045e6:	4603      	mov	r3, r0
 80045e8:	461a      	mov	r2, r3
 80045ea:	4b09      	ldr	r3, [pc, #36]	; (8004610 <_Z12getPIDValuesv+0x3c8>)
 80045ec:	601a      	str	r2, [r3, #0]
      //if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Yaw_PID_k[0]   = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) * 0.8;    //NOTDONE use defines for values
      //if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Yaw_PID_k[1]   = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) * 0.1;    //NOTDONE use defines for values
      //if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Yaw_PID_k[2]   = (1 + ((float)SBUS_Channels[7] / SBUS_mappedValueMax)) * 6.4;    //NOTDONE use defines for values       
    }
  }
}
 80045ee:	bf00      	nop
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	f3af 8000 	nop.w
 80045f8:	47ae147b 	.word	0x47ae147b
 80045fc:	3fc47ae1 	.word	0x3fc47ae1
 8004600:	20000658 	.word	0x20000658
 8004604:	447a0000 	.word	0x447a0000
 8004608:	2000056c 	.word	0x2000056c
 800460c:	43074000 	.word	0x43074000
 8004610:	20000054 	.word	0x20000054
 8004614:	00000000 	.word	0x00000000

08004618 <_Z14getAngleOffsetv>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void getAngleOffset()
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  if (tuningMode == 2)
 800461c:	4bae      	ldr	r3, [pc, #696]	; (80048d8 <_Z14getAngleOffsetv+0x2c0>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b02      	cmp	r3, #2
 8004622:	f040 8196 	bne.w	8004952 <_Z14getAngleOffsetv+0x33a>
  {
    if ((SBUS_Channels[5] <= 1000) & (SBUS_Channels[5] >= 990))
 8004626:	4bad      	ldr	r3, [pc, #692]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 8004628:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800462c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004630:	bfd4      	ite	le
 8004632:	2301      	movle	r3, #1
 8004634:	2300      	movgt	r3, #0
 8004636:	b2da      	uxtb	r2, r3
 8004638:	4ba8      	ldr	r3, [pc, #672]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 800463a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800463e:	f240 31dd 	movw	r1, #989	; 0x3dd
 8004642:	428b      	cmp	r3, r1
 8004644:	bfcc      	ite	gt
 8004646:	2301      	movgt	r3, #1
 8004648:	2300      	movle	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	4013      	ands	r3, r2
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d077      	beq.n	8004744 <_Z14getAngleOffsetv+0x12c>
    {
      //mainMotorMaxOffset = -1.518 + (((float)SBUS_Channels[7]) / 1000);
      //outputStrength = 10 + ((float)SBUS_Channels[7] / 100);
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Pitch_y_maxChangeRate = (float)SBUS_Channels[7] / 256;
 8004654:	4ba1      	ldr	r3, [pc, #644]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 8004656:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800465a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800465e:	bfd4      	ite	le
 8004660:	2301      	movle	r3, #1
 8004662:	2300      	movgt	r3, #0
 8004664:	b2da      	uxtb	r2, r3
 8004666:	4b9d      	ldr	r3, [pc, #628]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 8004668:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800466c:	f240 31dd 	movw	r1, #989	; 0x3dd
 8004670:	428b      	cmp	r3, r1
 8004672:	bfcc      	ite	gt
 8004674:	2301      	movgt	r3, #1
 8004676:	2300      	movle	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	4013      	ands	r3, r2
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00f      	beq.n	80046a2 <_Z14getAngleOffsetv+0x8a>
 8004682:	4b96      	ldr	r3, [pc, #600]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 8004684:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004688:	4618      	mov	r0, r3
 800468a:	f7fc fb63 	bl	8000d54 <__aeabi_i2f>
 800468e:	4603      	mov	r3, r0
 8004690:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004694:	4618      	mov	r0, r3
 8004696:	f7fc fc65 	bl	8000f64 <__aeabi_fdiv>
 800469a:	4603      	mov	r3, r0
 800469c:	461a      	mov	r2, r3
 800469e:	4b90      	ldr	r3, [pc, #576]	; (80048e0 <_Z14getAngleOffsetv+0x2c8>)
 80046a0:	601a      	str	r2, [r3, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Roll_y_maxChangeRate  = (float)SBUS_Channels[7] / 256;
 80046a2:	4b8e      	ldr	r3, [pc, #568]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 80046a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80046a8:	2b0a      	cmp	r3, #10
 80046aa:	bfd4      	ite	le
 80046ac:	2301      	movle	r3, #1
 80046ae:	2300      	movgt	r3, #0
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	4b8a      	ldr	r3, [pc, #552]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 80046b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80046b8:	f113 0f0a 	cmn.w	r3, #10
 80046bc:	bfac      	ite	ge
 80046be:	2301      	movge	r3, #1
 80046c0:	2300      	movlt	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	4013      	ands	r3, r2
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00f      	beq.n	80046ec <_Z14getAngleOffsetv+0xd4>
 80046cc:	4b83      	ldr	r3, [pc, #524]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 80046ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fc fb3e 	bl	8000d54 <__aeabi_i2f>
 80046d8:	4603      	mov	r3, r0
 80046da:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fc fc40 	bl	8000f64 <__aeabi_fdiv>
 80046e4:	4603      	mov	r3, r0
 80046e6:	461a      	mov	r2, r3
 80046e8:	4b7e      	ldr	r3, [pc, #504]	; (80048e4 <_Z14getAngleOffsetv+0x2cc>)
 80046ea:	601a      	str	r2, [r3, #0]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) outputStrength = 2 + ((float)SBUS_Channels[7] / 500);
 80046ec:	4b7b      	ldr	r3, [pc, #492]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 80046ee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80046f2:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 80046f6:	4293      	cmp	r3, r2
 80046f8:	bfb4      	ite	lt
 80046fa:	2301      	movlt	r3, #1
 80046fc:	2300      	movge	r3, #0
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	4b76      	ldr	r3, [pc, #472]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 8004702:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004706:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800470a:	bfac      	ite	ge
 800470c:	2301      	movge	r3, #1
 800470e:	2300      	movlt	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	4013      	ands	r3, r2
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d014      	beq.n	8004744 <_Z14getAngleOffsetv+0x12c>
 800471a:	4b70      	ldr	r3, [pc, #448]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 800471c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004720:	4618      	mov	r0, r3
 8004722:	f7fc fb17 	bl	8000d54 <__aeabi_i2f>
 8004726:	4603      	mov	r3, r0
 8004728:	496f      	ldr	r1, [pc, #444]	; (80048e8 <_Z14getAngleOffsetv+0x2d0>)
 800472a:	4618      	mov	r0, r3
 800472c:	f7fc fc1a 	bl	8000f64 <__aeabi_fdiv>
 8004730:	4603      	mov	r3, r0
 8004732:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004736:	4618      	mov	r0, r3
 8004738:	f7fc fa58 	bl	8000bec <__addsf3>
 800473c:	4603      	mov	r3, r0
 800473e:	461a      	mov	r2, r3
 8004740:	4b6a      	ldr	r3, [pc, #424]	; (80048ec <_Z14getAngleOffsetv+0x2d4>)
 8004742:	601a      	str	r2, [r3, #0]
    }
    if ((SBUS_Channels[5] <= 10) & (SBUS_Channels[5] >= -10))
 8004744:	4b65      	ldr	r3, [pc, #404]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 8004746:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800474a:	2b0a      	cmp	r3, #10
 800474c:	bfd4      	ite	le
 800474e:	2301      	movle	r3, #1
 8004750:	2300      	movgt	r3, #0
 8004752:	b2da      	uxtb	r2, r3
 8004754:	4b61      	ldr	r3, [pc, #388]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 8004756:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800475a:	f113 0f0a 	cmn.w	r3, #10
 800475e:	bfac      	ite	ge
 8004760:	2301      	movge	r3, #1
 8004762:	2300      	movlt	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	4013      	ands	r3, r2
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d049      	beq.n	8004802 <_Z14getAngleOffsetv+0x1ea>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Pitch_DCPL_k = (float)SBUS_Channels[7] /  100;
 800476e:	4b5b      	ldr	r3, [pc, #364]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 8004770:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004778:	bfd4      	ite	le
 800477a:	2301      	movle	r3, #1
 800477c:	2300      	movgt	r3, #0
 800477e:	b2da      	uxtb	r2, r3
 8004780:	4b56      	ldr	r3, [pc, #344]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 8004782:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004786:	f240 31dd 	movw	r1, #989	; 0x3dd
 800478a:	428b      	cmp	r3, r1
 800478c:	bfcc      	ite	gt
 800478e:	2301      	movgt	r3, #1
 8004790:	2300      	movle	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	4013      	ands	r3, r2
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00e      	beq.n	80047ba <_Z14getAngleOffsetv+0x1a2>
 800479c:	4b4f      	ldr	r3, [pc, #316]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 800479e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fc fad6 	bl	8000d54 <__aeabi_i2f>
 80047a8:	4603      	mov	r3, r0
 80047aa:	4951      	ldr	r1, [pc, #324]	; (80048f0 <_Z14getAngleOffsetv+0x2d8>)
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fc fbd9 	bl	8000f64 <__aeabi_fdiv>
 80047b2:	4603      	mov	r3, r0
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b4f      	ldr	r3, [pc, #316]	; (80048f4 <_Z14getAngleOffsetv+0x2dc>)
 80047b8:	601a      	str	r2, [r3, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Roll_DCPL_k  = (float)SBUS_Channels[7] / -100;
 80047ba:	4b48      	ldr	r3, [pc, #288]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 80047bc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80047c0:	2b0a      	cmp	r3, #10
 80047c2:	bfd4      	ite	le
 80047c4:	2301      	movle	r3, #1
 80047c6:	2300      	movgt	r3, #0
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	4b44      	ldr	r3, [pc, #272]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 80047cc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80047d0:	f113 0f0a 	cmn.w	r3, #10
 80047d4:	bfac      	ite	ge
 80047d6:	2301      	movge	r3, #1
 80047d8:	2300      	movlt	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	4013      	ands	r3, r2
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00e      	beq.n	8004802 <_Z14getAngleOffsetv+0x1ea>
 80047e4:	4b3d      	ldr	r3, [pc, #244]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 80047e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fc fab2 	bl	8000d54 <__aeabi_i2f>
 80047f0:	4603      	mov	r3, r0
 80047f2:	4941      	ldr	r1, [pc, #260]	; (80048f8 <_Z14getAngleOffsetv+0x2e0>)
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fc fbb5 	bl	8000f64 <__aeabi_fdiv>
 80047fa:	4603      	mov	r3, r0
 80047fc:	461a      	mov	r2, r3
 80047fe:	4b3f      	ldr	r3, [pc, #252]	; (80048fc <_Z14getAngleOffsetv+0x2e4>)
 8004800:	601a      	str	r2, [r3, #0]
    }
    if ((SBUS_Channels[5] <= -990) & (SBUS_Channels[5] >= -1000))
 8004802:	4b36      	ldr	r3, [pc, #216]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 8004804:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004808:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 800480c:	4293      	cmp	r3, r2
 800480e:	bfb4      	ite	lt
 8004810:	2301      	movlt	r3, #1
 8004812:	2300      	movge	r3, #0
 8004814:	b2da      	uxtb	r2, r3
 8004816:	4b31      	ldr	r3, [pc, #196]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 8004818:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800481c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004820:	bfac      	ite	ge
 8004822:	2301      	movge	r3, #1
 8004824:	2300      	movlt	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	4013      	ands	r3, r2
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8090 	beq.w	8004952 <_Z14getAngleOffsetv+0x33a>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) DCPL_angle = (M_PI / 4) + ((float)SBUS_Channels[7] * M_PI / 4000);
 8004832:	4b2a      	ldr	r3, [pc, #168]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 8004834:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004838:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800483c:	bfd4      	ite	le
 800483e:	2301      	movle	r3, #1
 8004840:	2300      	movgt	r3, #0
 8004842:	b2da      	uxtb	r2, r3
 8004844:	4b25      	ldr	r3, [pc, #148]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 8004846:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800484a:	f240 31dd 	movw	r1, #989	; 0x3dd
 800484e:	428b      	cmp	r3, r1
 8004850:	bfcc      	ite	gt
 8004852:	2301      	movgt	r3, #1
 8004854:	2300      	movle	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	4013      	ands	r3, r2
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d029      	beq.n	80048b4 <_Z14getAngleOffsetv+0x29c>
 8004860:	4b1e      	ldr	r3, [pc, #120]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 8004862:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004866:	4618      	mov	r0, r3
 8004868:	f7fc fa74 	bl	8000d54 <__aeabi_i2f>
 800486c:	4603      	mov	r3, r0
 800486e:	4618      	mov	r0, r3
 8004870:	f7fb fe16 	bl	80004a0 <__aeabi_f2d>
 8004874:	a314      	add	r3, pc, #80	; (adr r3, 80048c8 <_Z14getAngleOffsetv+0x2b0>)
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	f7fb fe69 	bl	8000550 <__aeabi_dmul>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4610      	mov	r0, r2
 8004884:	4619      	mov	r1, r3
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <_Z14getAngleOffsetv+0x2e8>)
 800488c:	f7fb ff8a 	bl	80007a4 <__aeabi_ddiv>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4610      	mov	r0, r2
 8004896:	4619      	mov	r1, r3
 8004898:	a30d      	add	r3, pc, #52	; (adr r3, 80048d0 <_Z14getAngleOffsetv+0x2b8>)
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	f7fb fca1 	bl	80001e4 <__adddf3>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4610      	mov	r0, r2
 80048a8:	4619      	mov	r1, r3
 80048aa:	f7fc f949 	bl	8000b40 <__aeabi_d2f>
 80048ae:	4603      	mov	r3, r0
 80048b0:	4a14      	ldr	r2, [pc, #80]	; (8004904 <_Z14getAngleOffsetv+0x2ec>)
 80048b2:	6013      	str	r3, [r2, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) mainMotorStartOffset = -135.25 + (((float)SBUS_Channels[7]) / 8);
 80048b4:	4b09      	ldr	r3, [pc, #36]	; (80048dc <_Z14getAngleOffsetv+0x2c4>)
 80048b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80048ba:	2b0a      	cmp	r3, #10
 80048bc:	bfd8      	it	le
 80048be:	2301      	movle	r3, #1
 80048c0:	e022      	b.n	8004908 <_Z14getAngleOffsetv+0x2f0>
 80048c2:	bf00      	nop
 80048c4:	f3af 8000 	nop.w
 80048c8:	54442d18 	.word	0x54442d18
 80048cc:	400921fb 	.word	0x400921fb
 80048d0:	54442d18 	.word	0x54442d18
 80048d4:	3fe921fb 	.word	0x3fe921fb
 80048d8:	20000000 	.word	0x20000000
 80048dc:	20000658 	.word	0x20000658
 80048e0:	20000014 	.word	0x20000014
 80048e4:	20000018 	.word	0x20000018
 80048e8:	43fa0000 	.word	0x43fa0000
 80048ec:	20000004 	.word	0x20000004
 80048f0:	42c80000 	.word	0x42c80000
 80048f4:	2000057c 	.word	0x2000057c
 80048f8:	c2c80000 	.word	0xc2c80000
 80048fc:	20000578 	.word	0x20000578
 8004900:	40af4000 	.word	0x40af4000
 8004904:	20000580 	.word	0x20000580
 8004908:	bfc8      	it	gt
 800490a:	2300      	movgt	r3, #0
 800490c:	b2da      	uxtb	r2, r3
 800490e:	4b12      	ldr	r3, [pc, #72]	; (8004958 <_Z14getAngleOffsetv+0x340>)
 8004910:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004914:	f113 0f0a 	cmn.w	r3, #10
 8004918:	bfac      	ite	ge
 800491a:	2301      	movge	r3, #1
 800491c:	2300      	movlt	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	4013      	ands	r3, r2
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d014      	beq.n	8004952 <_Z14getAngleOffsetv+0x33a>
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <_Z14getAngleOffsetv+0x340>)
 800492a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fc fa10 	bl	8000d54 <__aeabi_i2f>
 8004934:	4603      	mov	r3, r0
 8004936:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800493a:	4618      	mov	r0, r3
 800493c:	f7fc fb12 	bl	8000f64 <__aeabi_fdiv>
 8004940:	4603      	mov	r3, r0
 8004942:	4906      	ldr	r1, [pc, #24]	; (800495c <_Z14getAngleOffsetv+0x344>)
 8004944:	4618      	mov	r0, r3
 8004946:	f7fc f94f 	bl	8000be8 <__aeabi_fsub>
 800494a:	4603      	mov	r3, r0
 800494c:	461a      	mov	r2, r3
 800494e:	4b04      	ldr	r3, [pc, #16]	; (8004960 <_Z14getAngleOffsetv+0x348>)
 8004950:	601a      	str	r2, [r3, #0]
      //sin_SkewOffset = sin((mainMotorSkewOffset * M_PI) / 180);
      //cos_SkewOffset = cos((mainMotorSkewOffset * M_PI) / 180);
    }

  }
}
 8004952:	bf00      	nop
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20000658 	.word	0x20000658
 800495c:	43074000 	.word	0x43074000
 8004960:	20000054 	.word	0x20000054

08004964 <_Z16switchTuningModev>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void switchTuningMode()
{
 8004964:	b598      	push	{r3, r4, r7, lr}
 8004966:	af00      	add	r7, sp, #0
  if ((buttonPressed == false) & (HAL_GPIO_ReadPin(ONBOARD_BUTTON_2_GPIO_Port, ONBOARD_BUTTON_2_Pin) == true))
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <_Z16switchTuningModev+0x9c>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf0c      	ite	eq
 8004970:	2301      	moveq	r3, #1
 8004972:	2300      	movne	r3, #0
 8004974:	b2dc      	uxtb	r4, r3
 8004976:	2102      	movs	r1, #2
 8004978:	4822      	ldr	r0, [pc, #136]	; (8004a04 <_Z16switchTuningModev+0xa0>)
 800497a:	f003 fbc3 	bl	8008104 <HAL_GPIO_ReadPin>
 800497e:	4603      	mov	r3, r0
 8004980:	2b01      	cmp	r3, #1
 8004982:	bf0c      	ite	eq
 8004984:	2301      	moveq	r3, #1
 8004986:	2300      	movne	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	4023      	ands	r3, r4
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	bf14      	ite	ne
 8004992:	2301      	movne	r3, #1
 8004994:	2300      	moveq	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d011      	beq.n	80049c0 <_Z16switchTuningModev+0x5c>
  {
    if (tuningMode == 1) tuningMode = 2;
 800499c:	4b1a      	ldr	r3, [pc, #104]	; (8004a08 <_Z16switchTuningModev+0xa4>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d103      	bne.n	80049ac <_Z16switchTuningModev+0x48>
 80049a4:	4b18      	ldr	r3, [pc, #96]	; (8004a08 <_Z16switchTuningModev+0xa4>)
 80049a6:	2202      	movs	r2, #2
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	e002      	b.n	80049b2 <_Z16switchTuningModev+0x4e>
    else tuningMode = 1;
 80049ac:	4b16      	ldr	r3, [pc, #88]	; (8004a08 <_Z16switchTuningModev+0xa4>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);
 80049b2:	2120      	movs	r1, #32
 80049b4:	4813      	ldr	r0, [pc, #76]	; (8004a04 <_Z16switchTuningModev+0xa0>)
 80049b6:	f003 fbd4 	bl	8008162 <HAL_GPIO_TogglePin>
    buttonPressed = true;
 80049ba:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <_Z16switchTuningModev+0x9c>)
 80049bc:	2201      	movs	r2, #1
 80049be:	701a      	strb	r2, [r3, #0]
  }
  if ((buttonPressed == true) & (HAL_GPIO_ReadPin(ONBOARD_BUTTON_2_GPIO_Port, ONBOARD_BUTTON_2_Pin) == false))
 80049c0:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <_Z16switchTuningModev+0x9c>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	bf0c      	ite	eq
 80049c8:	2301      	moveq	r3, #1
 80049ca:	2300      	movne	r3, #0
 80049cc:	b2dc      	uxtb	r4, r3
 80049ce:	2102      	movs	r1, #2
 80049d0:	480c      	ldr	r0, [pc, #48]	; (8004a04 <_Z16switchTuningModev+0xa0>)
 80049d2:	f003 fb97 	bl	8008104 <HAL_GPIO_ReadPin>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf0c      	ite	eq
 80049dc:	2301      	moveq	r3, #1
 80049de:	2300      	movne	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	4023      	ands	r3, r4
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bf14      	ite	ne
 80049ea:	2301      	movne	r3, #1
 80049ec:	2300      	moveq	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <_Z16switchTuningModev+0x96>
  {
    buttonPressed = false;
 80049f4:	4b02      	ldr	r3, [pc, #8]	; (8004a00 <_Z16switchTuningModev+0x9c>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]
  }
 80049fa:	bf00      	nop
 80049fc:	bd98      	pop	{r3, r4, r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000530 	.word	0x20000530
 8004a04:	40020000 	.word	0x40020000
 8004a08:	20000000 	.word	0x20000000
 8004a0c:	00000000 	.word	0x00000000

08004a10 <_Z19SBUS_postProcessingv>:
 * channels.
 * 
 * --Custom Method! //NOTDONE
 */
void SBUS_postProcessing()
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
  //       SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;   //transfer bit
  //     }
  //     bitNumber ++;
  //     bitInChannel ++;
  //   }
    for (size_t i = 0; i < SBUS_NumberOfBytes; i++)
 8004a16:	2300      	movs	r3, #0
 8004a18:	607b      	str	r3, [r7, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b18      	cmp	r3, #24
 8004a1e:	d80c      	bhi.n	8004a3a <_Z19SBUS_postProcessingv+0x2a>
    {
      SBUS_Bytes[i] = SBUS_RxBytes[i];
 8004a20:	4a67      	ldr	r2, [pc, #412]	; (8004bc0 <_Z19SBUS_postProcessingv+0x1b0>)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4413      	add	r3, r2
 8004a26:	7819      	ldrb	r1, [r3, #0]
 8004a28:	4a66      	ldr	r2, [pc, #408]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	460a      	mov	r2, r1
 8004a30:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < SBUS_NumberOfBytes; i++)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3301      	adds	r3, #1
 8004a36:	607b      	str	r3, [r7, #4]
 8004a38:	e7ef      	b.n	8004a1a <_Z19SBUS_postProcessingv+0xa>
    }

    SBUS_TempChannels[0]  = (((uint16_t)SBUS_Bytes[1]       | (uint16_t)SBUS_Bytes[2]  << 8) & 0x07FF);
 8004a3a:	4b62      	ldr	r3, [pc, #392]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004a3c:	785b      	ldrb	r3, [r3, #1]
 8004a3e:	b21a      	sxth	r2, r3
 8004a40:	4b60      	ldr	r3, [pc, #384]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004a42:	789b      	ldrb	r3, [r3, #2]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	b21b      	sxth	r3, r3
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	b21b      	sxth	r3, r3
 8004a4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a50:	b21a      	sxth	r2, r3
 8004a52:	4b5d      	ldr	r3, [pc, #372]	; (8004bc8 <_Z19SBUS_postProcessingv+0x1b8>)
 8004a54:	801a      	strh	r2, [r3, #0]
    SBUS_TempChannels[1]  = (((uint16_t)SBUS_Bytes[2]  >> 3 | (uint16_t)SBUS_Bytes[3]  << 5) & 0x07FF);
 8004a56:	4b5b      	ldr	r3, [pc, #364]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004a58:	789b      	ldrb	r3, [r3, #2]
 8004a5a:	10db      	asrs	r3, r3, #3
 8004a5c:	b21a      	sxth	r2, r3
 8004a5e:	4b59      	ldr	r3, [pc, #356]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004a60:	78db      	ldrb	r3, [r3, #3]
 8004a62:	015b      	lsls	r3, r3, #5
 8004a64:	b21b      	sxth	r3, r3
 8004a66:	4313      	orrs	r3, r2
 8004a68:	b21b      	sxth	r3, r3
 8004a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a6e:	b21a      	sxth	r2, r3
 8004a70:	4b55      	ldr	r3, [pc, #340]	; (8004bc8 <_Z19SBUS_postProcessingv+0x1b8>)
 8004a72:	805a      	strh	r2, [r3, #2]
    SBUS_TempChannels[2]  = (((uint16_t)SBUS_Bytes[3]  >> 6 | (uint16_t)SBUS_Bytes[4]  << 2  | (uint16_t)SBUS_Bytes[5] << 10) & 0x07FF);
 8004a74:	4b53      	ldr	r3, [pc, #332]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004a76:	78db      	ldrb	r3, [r3, #3]
 8004a78:	119b      	asrs	r3, r3, #6
 8004a7a:	b21a      	sxth	r2, r3
 8004a7c:	4b51      	ldr	r3, [pc, #324]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004a7e:	791b      	ldrb	r3, [r3, #4]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	b21b      	sxth	r3, r3
 8004a84:	4313      	orrs	r3, r2
 8004a86:	b21a      	sxth	r2, r3
 8004a88:	4b4e      	ldr	r3, [pc, #312]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004a8a:	795b      	ldrb	r3, [r3, #5]
 8004a8c:	029b      	lsls	r3, r3, #10
 8004a8e:	b21b      	sxth	r3, r3
 8004a90:	4313      	orrs	r3, r2
 8004a92:	b21b      	sxth	r3, r3
 8004a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a98:	b21a      	sxth	r2, r3
 8004a9a:	4b4b      	ldr	r3, [pc, #300]	; (8004bc8 <_Z19SBUS_postProcessingv+0x1b8>)
 8004a9c:	809a      	strh	r2, [r3, #4]
    SBUS_TempChannels[3]  = (((uint16_t)SBUS_Bytes[5]  >> 1 | (uint16_t)SBUS_Bytes[6]  << 7) & 0x07FF);
 8004a9e:	4b49      	ldr	r3, [pc, #292]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004aa0:	795b      	ldrb	r3, [r3, #5]
 8004aa2:	105b      	asrs	r3, r3, #1
 8004aa4:	b21a      	sxth	r2, r3
 8004aa6:	4b47      	ldr	r3, [pc, #284]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004aa8:	799b      	ldrb	r3, [r3, #6]
 8004aaa:	01db      	lsls	r3, r3, #7
 8004aac:	b21b      	sxth	r3, r3
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	b21b      	sxth	r3, r3
 8004ab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ab6:	b21a      	sxth	r2, r3
 8004ab8:	4b43      	ldr	r3, [pc, #268]	; (8004bc8 <_Z19SBUS_postProcessingv+0x1b8>)
 8004aba:	80da      	strh	r2, [r3, #6]
    SBUS_TempChannels[4]  = (((uint16_t)SBUS_Bytes[6]  >> 4 | (uint16_t)SBUS_Bytes[7]  << 4) & 0x07FF);
 8004abc:	4b41      	ldr	r3, [pc, #260]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004abe:	799b      	ldrb	r3, [r3, #6]
 8004ac0:	111b      	asrs	r3, r3, #4
 8004ac2:	b21a      	sxth	r2, r3
 8004ac4:	4b3f      	ldr	r3, [pc, #252]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004ac6:	79db      	ldrb	r3, [r3, #7]
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	b21b      	sxth	r3, r3
 8004acc:	4313      	orrs	r3, r2
 8004ace:	b21b      	sxth	r3, r3
 8004ad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ad4:	b21a      	sxth	r2, r3
 8004ad6:	4b3c      	ldr	r3, [pc, #240]	; (8004bc8 <_Z19SBUS_postProcessingv+0x1b8>)
 8004ad8:	811a      	strh	r2, [r3, #8]
    SBUS_TempChannels[5]  = (((uint16_t)SBUS_Bytes[7]  >> 7 | (uint16_t)SBUS_Bytes[8]  << 1  | (uint16_t)SBUS_Bytes[9] << 9) & 0x07FF);
 8004ada:	4b3a      	ldr	r3, [pc, #232]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004adc:	79db      	ldrb	r3, [r3, #7]
 8004ade:	11db      	asrs	r3, r3, #7
 8004ae0:	b21a      	sxth	r2, r3
 8004ae2:	4b38      	ldr	r3, [pc, #224]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004ae4:	7a1b      	ldrb	r3, [r3, #8]
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	b21b      	sxth	r3, r3
 8004aea:	4313      	orrs	r3, r2
 8004aec:	b21a      	sxth	r2, r3
 8004aee:	4b35      	ldr	r3, [pc, #212]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004af0:	7a5b      	ldrb	r3, [r3, #9]
 8004af2:	025b      	lsls	r3, r3, #9
 8004af4:	b21b      	sxth	r3, r3
 8004af6:	4313      	orrs	r3, r2
 8004af8:	b21b      	sxth	r3, r3
 8004afa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004afe:	b21a      	sxth	r2, r3
 8004b00:	4b31      	ldr	r3, [pc, #196]	; (8004bc8 <_Z19SBUS_postProcessingv+0x1b8>)
 8004b02:	815a      	strh	r2, [r3, #10]
    SBUS_TempChannels[6]  = (((uint16_t)SBUS_Bytes[9]  >> 2 | (uint16_t)SBUS_Bytes[10] << 6) & 0x07FF);
 8004b04:	4b2f      	ldr	r3, [pc, #188]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004b06:	7a5b      	ldrb	r3, [r3, #9]
 8004b08:	109b      	asrs	r3, r3, #2
 8004b0a:	b21a      	sxth	r2, r3
 8004b0c:	4b2d      	ldr	r3, [pc, #180]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004b0e:	7a9b      	ldrb	r3, [r3, #10]
 8004b10:	019b      	lsls	r3, r3, #6
 8004b12:	b21b      	sxth	r3, r3
 8004b14:	4313      	orrs	r3, r2
 8004b16:	b21b      	sxth	r3, r3
 8004b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b1c:	b21a      	sxth	r2, r3
 8004b1e:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <_Z19SBUS_postProcessingv+0x1b8>)
 8004b20:	819a      	strh	r2, [r3, #12]
    SBUS_TempChannels[7]  = (((uint16_t)SBUS_Bytes[10] >> 5 | (uint16_t)SBUS_Bytes[11] << 3) & 0x07FF);
 8004b22:	4b28      	ldr	r3, [pc, #160]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004b24:	7a9b      	ldrb	r3, [r3, #10]
 8004b26:	115b      	asrs	r3, r3, #5
 8004b28:	b21a      	sxth	r2, r3
 8004b2a:	4b26      	ldr	r3, [pc, #152]	; (8004bc4 <_Z19SBUS_postProcessingv+0x1b4>)
 8004b2c:	7adb      	ldrb	r3, [r3, #11]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	b21b      	sxth	r3, r3
 8004b32:	4313      	orrs	r3, r2
 8004b34:	b21b      	sxth	r3, r3
 8004b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b3a:	b21a      	sxth	r2, r3
 8004b3c:	4b22      	ldr	r3, [pc, #136]	; (8004bc8 <_Z19SBUS_postProcessingv+0x1b8>)
 8004b3e:	81da      	strh	r2, [r3, #14]

    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8004b40:	2300      	movs	r3, #0
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b07      	cmp	r3, #7
 8004b48:	d828      	bhi.n	8004b9c <_Z19SBUS_postProcessingv+0x18c>
    {
      SBUS_Channels[i] = (((float)SBUS_TempChannels[i] - SBUS_rawValueCenter) * (float)SBUS_ConversionRation);            //map from ,  to -1000, 1000 and transfer channel value
 8004b4a:	4a1f      	ldr	r2, [pc, #124]	; (8004bc8 <_Z19SBUS_postProcessingv+0x1b8>)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fc f8fe 	bl	8000d54 <__aeabi_i2f>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fb fca0 	bl	80004a0 <__aeabi_f2d>
 8004b60:	a313      	add	r3, pc, #76	; (adr r3, 8004bb0 <_Z19SBUS_postProcessingv+0x1a0>)
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	f7fb fb3b 	bl	80001e0 <__aeabi_dsub>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4619      	mov	r1, r3
 8004b72:	a311      	add	r3, pc, #68	; (adr r3, 8004bb8 <_Z19SBUS_postProcessingv+0x1a8>)
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	f7fb fcea 	bl	8000550 <__aeabi_dmul>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	f7fb ff94 	bl	8000ab0 <__aeabi_d2iz>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	b219      	sxth	r1, r3
 8004b8c:	4a0f      	ldr	r2, [pc, #60]	; (8004bcc <_Z19SBUS_postProcessingv+0x1bc>)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	3301      	adds	r3, #1
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	e7d3      	b.n	8004b44 <_Z19SBUS_postProcessingv+0x134>
    }
    
  // }
  // }
  SBUSNewPackage = false;                                                                                                 //reset flag
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <_Z19SBUS_postProcessingv+0x1c0>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	bf00      	nop
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	f3af 8000 	nop.w
 8004bb0:	00000000 	.word	0x00000000
 8004bb4:	408f0a00 	.word	0x408f0a00
 8004bb8:	c0000000 	.word	0xc0000000
 8004bbc:	3ff37e8e 	.word	0x3ff37e8e
 8004bc0:	20000610 	.word	0x20000610
 8004bc4:	2000062c 	.word	0x2000062c
 8004bc8:	20000648 	.word	0x20000648
 8004bcc:	20000658 	.word	0x20000658
 8004bd0:	20000668 	.word	0x20000668

08004bd4 <_Z10LED_SetAllv>:
uint8_t LED_THR0_Frame       = 1;
uint8_t LED_Gyro_cal_Frame   = 1;


void LED_SetAll()
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin, GPIO_PIN_SET);
 8004bd8:	2201      	movs	r2, #1
 8004bda:	2110      	movs	r1, #16
 8004bdc:	4809      	ldr	r0, [pc, #36]	; (8004c04 <_Z10LED_SetAllv+0x30>)
 8004bde:	f003 faa8 	bl	8008132 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin, GPIO_PIN_SET);
 8004be2:	2201      	movs	r2, #1
 8004be4:	2120      	movs	r1, #32
 8004be6:	4807      	ldr	r0, [pc, #28]	; (8004c04 <_Z10LED_SetAllv+0x30>)
 8004be8:	f003 faa3 	bl	8008132 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ONBOARD_LED_3_GPIO_Port, ONBOARD_LED_3_Pin, GPIO_PIN_SET);
 8004bec:	2201      	movs	r2, #1
 8004bee:	2140      	movs	r1, #64	; 0x40
 8004bf0:	4804      	ldr	r0, [pc, #16]	; (8004c04 <_Z10LED_SetAllv+0x30>)
 8004bf2:	f003 fa9e 	bl	8008132 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin, GPIO_PIN_SET);
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	2180      	movs	r1, #128	; 0x80
 8004bfa:	4802      	ldr	r0, [pc, #8]	; (8004c04 <_Z10LED_SetAllv+0x30>)
 8004bfc:	f003 fa99 	bl	8008132 <HAL_GPIO_WritePin>
}
 8004c00:	bf00      	nop
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40020000 	.word	0x40020000

08004c08 <_Z12LED_ResetAllv>:

void LED_ResetAll()
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin, GPIO_PIN_RESET);
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2110      	movs	r1, #16
 8004c10:	4809      	ldr	r0, [pc, #36]	; (8004c38 <_Z12LED_ResetAllv+0x30>)
 8004c12:	f003 fa8e 	bl	8008132 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin, GPIO_PIN_RESET);
 8004c16:	2200      	movs	r2, #0
 8004c18:	2120      	movs	r1, #32
 8004c1a:	4807      	ldr	r0, [pc, #28]	; (8004c38 <_Z12LED_ResetAllv+0x30>)
 8004c1c:	f003 fa89 	bl	8008132 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ONBOARD_LED_3_GPIO_Port, ONBOARD_LED_3_Pin, GPIO_PIN_RESET);
 8004c20:	2200      	movs	r2, #0
 8004c22:	2140      	movs	r1, #64	; 0x40
 8004c24:	4804      	ldr	r0, [pc, #16]	; (8004c38 <_Z12LED_ResetAllv+0x30>)
 8004c26:	f003 fa84 	bl	8008132 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin, GPIO_PIN_RESET);
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2180      	movs	r1, #128	; 0x80
 8004c2e:	4802      	ldr	r0, [pc, #8]	; (8004c38 <_Z12LED_ResetAllv+0x30>)
 8004c30:	f003 fa7f 	bl	8008132 <HAL_GPIO_WritePin>
}
 8004c34:	bf00      	nop
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40020000 	.word	0x40020000

08004c3c <_Z13LED_ToggleAllv>:

void LED_ToggleAll()
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin);
 8004c40:	2110      	movs	r1, #16
 8004c42:	4808      	ldr	r0, [pc, #32]	; (8004c64 <_Z13LED_ToggleAllv+0x28>)
 8004c44:	f003 fa8d 	bl	8008162 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);
 8004c48:	2120      	movs	r1, #32
 8004c4a:	4806      	ldr	r0, [pc, #24]	; (8004c64 <_Z13LED_ToggleAllv+0x28>)
 8004c4c:	f003 fa89 	bl	8008162 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(ONBOARD_LED_3_GPIO_Port, ONBOARD_LED_3_Pin);
 8004c50:	2140      	movs	r1, #64	; 0x40
 8004c52:	4804      	ldr	r0, [pc, #16]	; (8004c64 <_Z13LED_ToggleAllv+0x28>)
 8004c54:	f003 fa85 	bl	8008162 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin);
 8004c58:	2180      	movs	r1, #128	; 0x80
 8004c5a:	4802      	ldr	r0, [pc, #8]	; (8004c64 <_Z13LED_ToggleAllv+0x28>)
 8004c5c:	f003 fa81 	bl	8008162 <HAL_GPIO_TogglePin>
}
 8004c60:	bf00      	nop
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40020000 	.word	0x40020000

08004c68 <_Z19LED_status_MPU_initv>:

void LED_status_MPU_init()
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  LED_SetAll();
 8004c6c:	f7ff ffb2 	bl	8004bd4 <_Z10LED_SetAllv>
}
 8004c70:	bf00      	nop
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <_Z23LED_status_MPU_initFailv>:

void LED_status_MPU_initFail()
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  if ((HAL_GetTick() - LED_TS_MPU_initFail) > LED_ToggleTime_MPU_initFail)
 8004c78:	f002 f8bc 	bl	8006df4 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <_Z23LED_status_MPU_initFailv+0x30>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b7d      	cmp	r3, #125	; 0x7d
 8004c86:	bf8c      	ite	hi
 8004c88:	2301      	movhi	r3, #1
 8004c8a:	2300      	movls	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d006      	beq.n	8004ca0 <_Z23LED_status_MPU_initFailv+0x2c>
  {
    LED_TS_MPU_initFail = HAL_GetTick();
 8004c92:	f002 f8af 	bl	8006df4 <HAL_GetTick>
 8004c96:	4603      	mov	r3, r0
 8004c98:	4a02      	ldr	r2, [pc, #8]	; (8004ca4 <_Z23LED_status_MPU_initFailv+0x30>)
 8004c9a:	6013      	str	r3, [r2, #0]
    LED_ToggleAll();
 8004c9c:	f7ff ffce 	bl	8004c3c <_Z13LED_ToggleAllv>
  }
}
 8004ca0:	bf00      	nop
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	2000066c 	.word	0x2000066c

08004ca8 <_Z25LED_status_WaitingForSBUSv>:

void LED_status_WaitingForSBUS()
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  if ((HAL_GetTick() - LED_TS_SBUS) > LED_ToggleTime_SBUS)
 8004cac:	f002 f8a2 	bl	8006df4 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	4b2b      	ldr	r3, [pc, #172]	; (8004d60 <_Z25LED_status_WaitingForSBUSv+0xb8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2bfa      	cmp	r3, #250	; 0xfa
 8004cba:	bf8c      	ite	hi
 8004cbc:	2301      	movhi	r3, #1
 8004cbe:	2300      	movls	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d04a      	beq.n	8004d5c <_Z25LED_status_WaitingForSBUSv+0xb4>
  {
    LED_TS_SBUS = HAL_GetTick();
 8004cc6:	f002 f895 	bl	8006df4 <HAL_GetTick>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4a24      	ldr	r2, [pc, #144]	; (8004d60 <_Z25LED_status_WaitingForSBUSv+0xb8>)
 8004cce:	6013      	str	r3, [r2, #0]
    switch (LED_SBUS_Frame)
 8004cd0:	4b24      	ldr	r3, [pc, #144]	; (8004d64 <_Z25LED_status_WaitingForSBUSv+0xbc>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d839      	bhi.n	8004d4e <_Z25LED_status_WaitingForSBUSv+0xa6>
 8004cda:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <_Z25LED_status_WaitingForSBUSv+0x38>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004cf1 	.word	0x08004cf1
 8004ce4:	08004d07 	.word	0x08004d07
 8004ce8:	08004d1d 	.word	0x08004d1d
 8004cec:	08004d33 	.word	0x08004d33
    {
    case 1:
      HAL_GPIO_WritePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin, GPIO_PIN_RESET);
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2180      	movs	r1, #128	; 0x80
 8004cf4:	481c      	ldr	r0, [pc, #112]	; (8004d68 <_Z25LED_status_WaitingForSBUSv+0xc0>)
 8004cf6:	f003 fa1c 	bl	8008132 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin, GPIO_PIN_SET);
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	2110      	movs	r1, #16
 8004cfe:	481a      	ldr	r0, [pc, #104]	; (8004d68 <_Z25LED_status_WaitingForSBUSv+0xc0>)
 8004d00:	f003 fa17 	bl	8008132 <HAL_GPIO_WritePin>
      break;
 8004d04:	e024      	b.n	8004d50 <_Z25LED_status_WaitingForSBUSv+0xa8>
    case 2:
      HAL_GPIO_WritePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin, GPIO_PIN_RESET);
 8004d06:	2200      	movs	r2, #0
 8004d08:	2110      	movs	r1, #16
 8004d0a:	4817      	ldr	r0, [pc, #92]	; (8004d68 <_Z25LED_status_WaitingForSBUSv+0xc0>)
 8004d0c:	f003 fa11 	bl	8008132 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin, GPIO_PIN_SET);
 8004d10:	2201      	movs	r2, #1
 8004d12:	2120      	movs	r1, #32
 8004d14:	4814      	ldr	r0, [pc, #80]	; (8004d68 <_Z25LED_status_WaitingForSBUSv+0xc0>)
 8004d16:	f003 fa0c 	bl	8008132 <HAL_GPIO_WritePin>
      break;
 8004d1a:	e019      	b.n	8004d50 <_Z25LED_status_WaitingForSBUSv+0xa8>
    case 3:
      HAL_GPIO_WritePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin, GPIO_PIN_RESET);
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2120      	movs	r1, #32
 8004d20:	4811      	ldr	r0, [pc, #68]	; (8004d68 <_Z25LED_status_WaitingForSBUSv+0xc0>)
 8004d22:	f003 fa06 	bl	8008132 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ONBOARD_LED_3_GPIO_Port, ONBOARD_LED_3_Pin, GPIO_PIN_SET);
 8004d26:	2201      	movs	r2, #1
 8004d28:	2140      	movs	r1, #64	; 0x40
 8004d2a:	480f      	ldr	r0, [pc, #60]	; (8004d68 <_Z25LED_status_WaitingForSBUSv+0xc0>)
 8004d2c:	f003 fa01 	bl	8008132 <HAL_GPIO_WritePin>
      break;
 8004d30:	e00e      	b.n	8004d50 <_Z25LED_status_WaitingForSBUSv+0xa8>
    case 4:
      HAL_GPIO_WritePin(ONBOARD_LED_3_GPIO_Port, ONBOARD_LED_3_Pin, GPIO_PIN_RESET);
 8004d32:	2200      	movs	r2, #0
 8004d34:	2140      	movs	r1, #64	; 0x40
 8004d36:	480c      	ldr	r0, [pc, #48]	; (8004d68 <_Z25LED_status_WaitingForSBUSv+0xc0>)
 8004d38:	f003 f9fb 	bl	8008132 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin, GPIO_PIN_SET);
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	2180      	movs	r1, #128	; 0x80
 8004d40:	4809      	ldr	r0, [pc, #36]	; (8004d68 <_Z25LED_status_WaitingForSBUSv+0xc0>)
 8004d42:	f003 f9f6 	bl	8008132 <HAL_GPIO_WritePin>
      LED_SBUS_Frame = 0;
 8004d46:	4b07      	ldr	r3, [pc, #28]	; (8004d64 <_Z25LED_status_WaitingForSBUSv+0xbc>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
      break;
 8004d4c:	e000      	b.n	8004d50 <_Z25LED_status_WaitingForSBUSv+0xa8>
    default:
      break;
 8004d4e:	bf00      	nop
    }
    LED_SBUS_Frame ++;
 8004d50:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <_Z25LED_status_WaitingForSBUSv+0xbc>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	3301      	adds	r3, #1
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	4b02      	ldr	r3, [pc, #8]	; (8004d64 <_Z25LED_status_WaitingForSBUSv+0xbc>)
 8004d5a:	701a      	strb	r2, [r3, #0]
  }
}
 8004d5c:	bf00      	nop
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20000670 	.word	0x20000670
 8004d64:	2000004c 	.word	0x2000004c
 8004d68:	40020000 	.word	0x40020000

08004d6c <_Z19LED_status_ESC1_Calv>:

void LED_status_ESC1_Cal()
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  if ((HAL_GetTick() - LED_TS_ESC1_cal) > LED_ToggleTime_ESC1_cal)
 8004d70:	f002 f840 	bl	8006df4 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <_Z19LED_status_ESC1_Calv+0x38>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d80:	bf8c      	ite	hi
 8004d82:	2301      	movhi	r3, #1
 8004d84:	2300      	movls	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <_Z19LED_status_ESC1_Calv+0x32>
  {
    LED_TS_ESC1_cal = HAL_GetTick();
 8004d8c:	f002 f832 	bl	8006df4 <HAL_GetTick>
 8004d90:	4603      	mov	r3, r0
 8004d92:	4a04      	ldr	r2, [pc, #16]	; (8004da4 <_Z19LED_status_ESC1_Calv+0x38>)
 8004d94:	6013      	str	r3, [r2, #0]
    HAL_GPIO_TogglePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin);
 8004d96:	2110      	movs	r1, #16
 8004d98:	4803      	ldr	r0, [pc, #12]	; (8004da8 <_Z19LED_status_ESC1_Calv+0x3c>)
 8004d9a:	f003 f9e2 	bl	8008162 <HAL_GPIO_TogglePin>
  }
}
 8004d9e:	bf00      	nop
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000674 	.word	0x20000674
 8004da8:	40020000 	.word	0x40020000

08004dac <_Z19LED_status_ESC2_Calv>:

void LED_status_ESC2_Cal()
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  if ((HAL_GetTick() - LED_TS_ESC2_cal) > LED_ToggleTime_ESC2_cal)
 8004db0:	f002 f820 	bl	8006df4 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <_Z19LED_status_ESC2_Calv+0x38>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004dc0:	bf8c      	ite	hi
 8004dc2:	2301      	movhi	r3, #1
 8004dc4:	2300      	movls	r3, #0
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <_Z19LED_status_ESC2_Calv+0x32>
  {
    LED_TS_ESC2_cal = HAL_GetTick();
 8004dcc:	f002 f812 	bl	8006df4 <HAL_GetTick>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4a04      	ldr	r2, [pc, #16]	; (8004de4 <_Z19LED_status_ESC2_Calv+0x38>)
 8004dd4:	6013      	str	r3, [r2, #0]
    HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);
 8004dd6:	2120      	movs	r1, #32
 8004dd8:	4803      	ldr	r0, [pc, #12]	; (8004de8 <_Z19LED_status_ESC2_Calv+0x3c>)
 8004dda:	f003 f9c2 	bl	8008162 <HAL_GPIO_TogglePin>
  }
}
 8004dde:	bf00      	nop
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000678 	.word	0x20000678
 8004de8:	40020000 	.word	0x40020000

08004dec <_Z30LED_status_WaitingForThrottle0v>:

void LED_status_WaitingForThrottle0()
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  if ((HAL_GetTick() - LED_TS_THR0) > LED_ToggleTime_THR0)
 8004df0:	f002 f800 	bl	8006df4 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4b26      	ldr	r3, [pc, #152]	; (8004e90 <_Z30LED_status_WaitingForThrottle0v+0xa4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e00:	bf8c      	ite	hi
 8004e02:	2301      	movhi	r3, #1
 8004e04:	2300      	movls	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d03e      	beq.n	8004e8a <_Z30LED_status_WaitingForThrottle0v+0x9e>
  {
    LED_TS_THR0 = HAL_GetTick();
 8004e0c:	f001 fff2 	bl	8006df4 <HAL_GetTick>
 8004e10:	4603      	mov	r3, r0
 8004e12:	4a1f      	ldr	r2, [pc, #124]	; (8004e90 <_Z30LED_status_WaitingForThrottle0v+0xa4>)
 8004e14:	6013      	str	r3, [r2, #0]
    switch (LED_THR0_Frame)
 8004e16:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <_Z30LED_status_WaitingForThrottle0v+0xa8>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d002      	beq.n	8004e24 <_Z30LED_status_WaitingForThrottle0v+0x38>
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d015      	beq.n	8004e4e <_Z30LED_status_WaitingForThrottle0v+0x62>
      HAL_GPIO_WritePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin, GPIO_PIN_SET);
      HAL_GPIO_WritePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin, GPIO_PIN_SET);
      LED_THR0_Frame = 0;
      break;
    default:
      break;
 8004e22:	e02c      	b.n	8004e7e <_Z30LED_status_WaitingForThrottle0v+0x92>
      HAL_GPIO_WritePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin, GPIO_PIN_RESET);
 8004e24:	2200      	movs	r2, #0
 8004e26:	2120      	movs	r1, #32
 8004e28:	481b      	ldr	r0, [pc, #108]	; (8004e98 <_Z30LED_status_WaitingForThrottle0v+0xac>)
 8004e2a:	f003 f982 	bl	8008132 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin, GPIO_PIN_RESET);
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2180      	movs	r1, #128	; 0x80
 8004e32:	4819      	ldr	r0, [pc, #100]	; (8004e98 <_Z30LED_status_WaitingForThrottle0v+0xac>)
 8004e34:	f003 f97d 	bl	8008132 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin, GPIO_PIN_SET);
 8004e38:	2201      	movs	r2, #1
 8004e3a:	2110      	movs	r1, #16
 8004e3c:	4816      	ldr	r0, [pc, #88]	; (8004e98 <_Z30LED_status_WaitingForThrottle0v+0xac>)
 8004e3e:	f003 f978 	bl	8008132 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ONBOARD_LED_3_GPIO_Port, ONBOARD_LED_3_Pin, GPIO_PIN_SET);
 8004e42:	2201      	movs	r2, #1
 8004e44:	2140      	movs	r1, #64	; 0x40
 8004e46:	4814      	ldr	r0, [pc, #80]	; (8004e98 <_Z30LED_status_WaitingForThrottle0v+0xac>)
 8004e48:	f003 f973 	bl	8008132 <HAL_GPIO_WritePin>
      break;
 8004e4c:	e017      	b.n	8004e7e <_Z30LED_status_WaitingForThrottle0v+0x92>
      HAL_GPIO_WritePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin, GPIO_PIN_RESET);
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2110      	movs	r1, #16
 8004e52:	4811      	ldr	r0, [pc, #68]	; (8004e98 <_Z30LED_status_WaitingForThrottle0v+0xac>)
 8004e54:	f003 f96d 	bl	8008132 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ONBOARD_LED_3_GPIO_Port, ONBOARD_LED_3_Pin, GPIO_PIN_RESET);
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2140      	movs	r1, #64	; 0x40
 8004e5c:	480e      	ldr	r0, [pc, #56]	; (8004e98 <_Z30LED_status_WaitingForThrottle0v+0xac>)
 8004e5e:	f003 f968 	bl	8008132 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin, GPIO_PIN_SET);
 8004e62:	2201      	movs	r2, #1
 8004e64:	2120      	movs	r1, #32
 8004e66:	480c      	ldr	r0, [pc, #48]	; (8004e98 <_Z30LED_status_WaitingForThrottle0v+0xac>)
 8004e68:	f003 f963 	bl	8008132 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin, GPIO_PIN_SET);
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	2180      	movs	r1, #128	; 0x80
 8004e70:	4809      	ldr	r0, [pc, #36]	; (8004e98 <_Z30LED_status_WaitingForThrottle0v+0xac>)
 8004e72:	f003 f95e 	bl	8008132 <HAL_GPIO_WritePin>
      LED_THR0_Frame = 0;
 8004e76:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <_Z30LED_status_WaitingForThrottle0v+0xa8>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
      break;
 8004e7c:	bf00      	nop
    }
    LED_THR0_Frame ++;
 8004e7e:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <_Z30LED_status_WaitingForThrottle0v+0xa8>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	3301      	adds	r3, #1
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <_Z30LED_status_WaitingForThrottle0v+0xa8>)
 8004e88:	701a      	strb	r2, [r3, #0]
  }
}
 8004e8a:	bf00      	nop
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	2000067c 	.word	0x2000067c
 8004e94:	2000004d 	.word	0x2000004d
 8004e98:	40020000 	.word	0x40020000

08004e9c <_Z19LED_status_Gyro_calv>:

void LED_status_Gyro_cal()
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  if ((HAL_GetTick() - LED_TS_Gyro_cal) > LED_ToggleTime_Gyro_cal)
 8004ea0:	f001 ffa8 	bl	8006df4 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	4b38      	ldr	r3, [pc, #224]	; (8004f88 <_Z19LED_status_Gyro_calv+0xec>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2bfa      	cmp	r3, #250	; 0xfa
 8004eae:	bf8c      	ite	hi
 8004eb0:	2301      	movhi	r3, #1
 8004eb2:	2300      	movls	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d064      	beq.n	8004f84 <_Z19LED_status_Gyro_calv+0xe8>
  {
    LED_TS_Gyro_cal = HAL_GetTick();
 8004eba:	f001 ff9b 	bl	8006df4 <HAL_GetTick>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	4a31      	ldr	r2, [pc, #196]	; (8004f88 <_Z19LED_status_Gyro_calv+0xec>)
 8004ec2:	6013      	str	r3, [r2, #0]
    switch (LED_Gyro_cal_Frame)
 8004ec4:	4b31      	ldr	r3, [pc, #196]	; (8004f8c <_Z19LED_status_Gyro_calv+0xf0>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	2b05      	cmp	r3, #5
 8004ecc:	d853      	bhi.n	8004f76 <_Z19LED_status_Gyro_calv+0xda>
 8004ece:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <_Z19LED_status_Gyro_calv+0x38>)
 8004ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed4:	08004eed 	.word	0x08004eed
 8004ed8:	08004f03 	.word	0x08004f03
 8004edc:	08004f19 	.word	0x08004f19
 8004ee0:	08004f2f 	.word	0x08004f2f
 8004ee4:	08004f45 	.word	0x08004f45
 8004ee8:	08004f5b 	.word	0x08004f5b
    {
    case 1:
      HAL_GPIO_WritePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin, GPIO_PIN_RESET);
 8004eec:	2200      	movs	r2, #0
 8004eee:	2120      	movs	r1, #32
 8004ef0:	4827      	ldr	r0, [pc, #156]	; (8004f90 <_Z19LED_status_Gyro_calv+0xf4>)
 8004ef2:	f003 f91e 	bl	8008132 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin, GPIO_PIN_SET);
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	2110      	movs	r1, #16
 8004efa:	4825      	ldr	r0, [pc, #148]	; (8004f90 <_Z19LED_status_Gyro_calv+0xf4>)
 8004efc:	f003 f919 	bl	8008132 <HAL_GPIO_WritePin>
      break;
 8004f00:	e03a      	b.n	8004f78 <_Z19LED_status_Gyro_calv+0xdc>
    case 2:
      HAL_GPIO_WritePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin, GPIO_PIN_RESET);
 8004f02:	2200      	movs	r2, #0
 8004f04:	2110      	movs	r1, #16
 8004f06:	4822      	ldr	r0, [pc, #136]	; (8004f90 <_Z19LED_status_Gyro_calv+0xf4>)
 8004f08:	f003 f913 	bl	8008132 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin, GPIO_PIN_SET);
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	2120      	movs	r1, #32
 8004f10:	481f      	ldr	r0, [pc, #124]	; (8004f90 <_Z19LED_status_Gyro_calv+0xf4>)
 8004f12:	f003 f90e 	bl	8008132 <HAL_GPIO_WritePin>
      break;
 8004f16:	e02f      	b.n	8004f78 <_Z19LED_status_Gyro_calv+0xdc>
    case 3:
      HAL_GPIO_WritePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin, GPIO_PIN_RESET);
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2120      	movs	r1, #32
 8004f1c:	481c      	ldr	r0, [pc, #112]	; (8004f90 <_Z19LED_status_Gyro_calv+0xf4>)
 8004f1e:	f003 f908 	bl	8008132 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ONBOARD_LED_3_GPIO_Port, ONBOARD_LED_3_Pin, GPIO_PIN_SET);
 8004f22:	2201      	movs	r2, #1
 8004f24:	2140      	movs	r1, #64	; 0x40
 8004f26:	481a      	ldr	r0, [pc, #104]	; (8004f90 <_Z19LED_status_Gyro_calv+0xf4>)
 8004f28:	f003 f903 	bl	8008132 <HAL_GPIO_WritePin>
      break;
 8004f2c:	e024      	b.n	8004f78 <_Z19LED_status_Gyro_calv+0xdc>
    case 4:
      HAL_GPIO_WritePin(ONBOARD_LED_3_GPIO_Port, ONBOARD_LED_3_Pin, GPIO_PIN_RESET);
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2140      	movs	r1, #64	; 0x40
 8004f32:	4817      	ldr	r0, [pc, #92]	; (8004f90 <_Z19LED_status_Gyro_calv+0xf4>)
 8004f34:	f003 f8fd 	bl	8008132 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin, GPIO_PIN_SET);
 8004f38:	2201      	movs	r2, #1
 8004f3a:	2180      	movs	r1, #128	; 0x80
 8004f3c:	4814      	ldr	r0, [pc, #80]	; (8004f90 <_Z19LED_status_Gyro_calv+0xf4>)
 8004f3e:	f003 f8f8 	bl	8008132 <HAL_GPIO_WritePin>
      break;
 8004f42:	e019      	b.n	8004f78 <_Z19LED_status_Gyro_calv+0xdc>
    case 5:
      HAL_GPIO_WritePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin, GPIO_PIN_RESET);
 8004f44:	2200      	movs	r2, #0
 8004f46:	2180      	movs	r1, #128	; 0x80
 8004f48:	4811      	ldr	r0, [pc, #68]	; (8004f90 <_Z19LED_status_Gyro_calv+0xf4>)
 8004f4a:	f003 f8f2 	bl	8008132 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ONBOARD_LED_3_GPIO_Port, ONBOARD_LED_3_Pin, GPIO_PIN_SET);
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2140      	movs	r1, #64	; 0x40
 8004f52:	480f      	ldr	r0, [pc, #60]	; (8004f90 <_Z19LED_status_Gyro_calv+0xf4>)
 8004f54:	f003 f8ed 	bl	8008132 <HAL_GPIO_WritePin>
      break;
 8004f58:	e00e      	b.n	8004f78 <_Z19LED_status_Gyro_calv+0xdc>
    case 6:
      HAL_GPIO_WritePin(ONBOARD_LED_3_GPIO_Port, ONBOARD_LED_3_Pin, GPIO_PIN_RESET);
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2140      	movs	r1, #64	; 0x40
 8004f5e:	480c      	ldr	r0, [pc, #48]	; (8004f90 <_Z19LED_status_Gyro_calv+0xf4>)
 8004f60:	f003 f8e7 	bl	8008132 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin, GPIO_PIN_SET);
 8004f64:	2201      	movs	r2, #1
 8004f66:	2120      	movs	r1, #32
 8004f68:	4809      	ldr	r0, [pc, #36]	; (8004f90 <_Z19LED_status_Gyro_calv+0xf4>)
 8004f6a:	f003 f8e2 	bl	8008132 <HAL_GPIO_WritePin>
      LED_Gyro_cal_Frame = 0;
 8004f6e:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <_Z19LED_status_Gyro_calv+0xf0>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
      break;
 8004f74:	e000      	b.n	8004f78 <_Z19LED_status_Gyro_calv+0xdc>
    default:
      break;
 8004f76:	bf00      	nop
    }
    LED_Gyro_cal_Frame ++;
 8004f78:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <_Z19LED_status_Gyro_calv+0xf0>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	4b02      	ldr	r3, [pc, #8]	; (8004f8c <_Z19LED_status_Gyro_calv+0xf0>)
 8004f82:	701a      	strb	r2, [r3, #0]
  }
}
 8004f84:	bf00      	nop
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20000680 	.word	0x20000680
 8004f8c:	2000004e 	.word	0x2000004e
 8004f90:	40020000 	.word	0x40020000

08004f94 <_Z23LED_status_Gyro_calFailv>:
void LED_status_Gyro_calFail()
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  LED_SetAll();
 8004f98:	f7ff fe1c 	bl	8004bd4 <_Z10LED_SetAllv>
  HAL_Delay(LED_ToggleTime_Gyro_calFail);
 8004f9c:	20fa      	movs	r0, #250	; 0xfa
 8004f9e:	f001 ff33 	bl	8006e08 <HAL_Delay>
  LED_ResetAll();
 8004fa2:	f7ff fe31 	bl	8004c08 <_Z12LED_ResetAllv>
  HAL_Delay(LED_ToggleTime_Gyro_calFail);
 8004fa6:	20fa      	movs	r0, #250	; 0xfa
 8004fa8:	f001 ff2e 	bl	8006e08 <HAL_Delay>
  LED_SetAll();
 8004fac:	f7ff fe12 	bl	8004bd4 <_Z10LED_SetAllv>
  HAL_Delay(LED_ToggleTime_Gyro_calFail);
 8004fb0:	20fa      	movs	r0, #250	; 0xfa
 8004fb2:	f001 ff29 	bl	8006e08 <HAL_Delay>
  LED_ResetAll();
 8004fb6:	f7ff fe27 	bl	8004c08 <_Z12LED_ResetAllv>
  HAL_Delay(LED_ToggleTime_Gyro_calFail);
 8004fba:	20fa      	movs	r0, #250	; 0xfa
 8004fbc:	f001 ff24 	bl	8006e08 <HAL_Delay>
}
 8004fc0:	bf00      	nop
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <_Z16LED_status_Readyv>:

void LED_status_Ready()
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  LED_SetAll();
 8004fc8:	f7ff fe04 	bl	8004bd4 <_Z10LED_SetAllv>
  HAL_Delay(LED_ToggleTime_Ready);
 8004fcc:	207d      	movs	r0, #125	; 0x7d
 8004fce:	f001 ff1b 	bl	8006e08 <HAL_Delay>
  LED_ResetAll();
 8004fd2:	f7ff fe19 	bl	8004c08 <_Z12LED_ResetAllv>
  HAL_Delay(LED_ToggleTime_Ready);
 8004fd6:	207d      	movs	r0, #125	; 0x7d
 8004fd8:	f001 ff16 	bl	8006e08 <HAL_Delay>
  LED_SetAll();
 8004fdc:	f7ff fdfa 	bl	8004bd4 <_Z10LED_SetAllv>
  HAL_Delay(LED_ToggleTime_Ready);
 8004fe0:	207d      	movs	r0, #125	; 0x7d
 8004fe2:	f001 ff11 	bl	8006e08 <HAL_Delay>
  LED_ResetAll();
 8004fe6:	f7ff fe0f 	bl	8004c08 <_Z12LED_ResetAllv>
  HAL_Delay(LED_ToggleTime_Ready);
 8004fea:	207d      	movs	r0, #125	; 0x7d
 8004fec:	f001 ff0c 	bl	8006e08 <HAL_Delay>
  LED_SetAll();
 8004ff0:	f7ff fdf0 	bl	8004bd4 <_Z10LED_SetAllv>
  HAL_Delay(LED_ToggleTime_Ready);
 8004ff4:	207d      	movs	r0, #125	; 0x7d
 8004ff6:	f001 ff07 	bl	8006e08 <HAL_Delay>
  LED_ResetAll();
 8004ffa:	f7ff fe05 	bl	8004c08 <_Z12LED_ResetAllv>
  HAL_Delay(LED_ToggleTime_Ready);
 8004ffe:	207d      	movs	r0, #125	; 0x7d
 8005000:	f001 ff02 	bl	8006e08 <HAL_Delay>
}
 8005004:	bf00      	nop
 8005006:	bd80      	pop	{r7, pc}

08005008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800500c:	f001 fe8e 	bl	8006d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005010:	f000 f854 	bl	80050bc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005014:	f000 fa62 	bl	80054dc <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8005018:	f000 f8a2 	bl	8005160 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 800501c:	f000 f8de 	bl	80051dc <MX_I2C1_Init>
  MX_TIM3_Init();
 8005020:	f000 f910 	bl	8005244 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8005024:	f000 f976 	bl	8005314 <_ZL12MX_TIM4_Initv>
  MX_TIM11_Init();
 8005028:	f000 f9dc 	bl	80053e4 <_ZL13MX_TIM11_Initv>
  MX_USB_DEVICE_Init();
 800502c:	f00a f8e6 	bl	800f1fc <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 8005030:	f000 fa34 	bl	800549c <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 8005034:	f000 f9fe 	bl	8005434 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start(&htim11);                                        //start TIM11
 8005038:	481a      	ldr	r0, [pc, #104]	; (80050a4 <main+0x9c>)
 800503a:	f005 fe9f 	bl	800ad7c <HAL_TIM_Base_Start>
  MPU6050_init();
 800503e:	f7fc ff87 	bl	8001f50 <_Z12MPU6050_initv>
  PPM_init();
 8005042:	f000 ffa3 	bl	8005f8c <_Z8PPM_initv>
  HAL_UART_Receive_DMA(&huart1, SBUS_RxBytes, SBUS_NumberOfBytes);    //start UART reception using DMA (Direct Memory Access)
 8005046:	2219      	movs	r2, #25
 8005048:	4917      	ldr	r1, [pc, #92]	; (80050a8 <main+0xa0>)
 800504a:	4818      	ldr	r0, [pc, #96]	; (80050ac <main+0xa4>)
 800504c:	f006 fc75 	bl	800b93a <HAL_UART_Receive_DMA>

  LED_ResetAll();
 8005050:	f7ff fdda 	bl	8004c08 <_Z12LED_ResetAllv>
  while (SBUS_Bytes[0] != 0x0F)                                       //only continue if the heli is connected to the remote (start byte is '0x0F')
 8005054:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <main+0xa8>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b0f      	cmp	r3, #15
 800505a:	d008      	beq.n	800506e <main+0x66>
  {
    if (SBUSNewPackage == true) SBUS_postProcessing();
 800505c:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <main+0xac>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <main+0x60>
 8005064:	f7ff fcd4 	bl	8004a10 <_Z19SBUS_postProcessingv>
    LED_status_WaitingForSBUS();
 8005068:	f7ff fe1e 	bl	8004ca8 <_Z25LED_status_WaitingForSBUSv>
  while (SBUS_Bytes[0] != 0x0F)                                       //only continue if the heli is connected to the remote (start byte is '0x0F')
 800506c:	e7f2      	b.n	8005054 <main+0x4c>
  }

  ESCCalibration();                                                   //
 800506e:	f000 ff9b 	bl	8005fa8 <_Z14ESCCalibrationv>

  LED_ResetAll();
 8005072:	f7ff fdc9 	bl	8004c08 <_Z12LED_ResetAllv>
  while (SBUS_Channels[2] > motorDeadzone)                           //only continue if throttle is off
 8005076:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <main+0xb0>)
 8005078:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800507c:	f46f 726d 	mvn.w	r2, #948	; 0x3b4
 8005080:	4293      	cmp	r3, r2
 8005082:	db08      	blt.n	8005096 <main+0x8e>
  {
    if (SBUSNewPackage == true) SBUS_postProcessing();
 8005084:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <main+0xac>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <main+0x88>
 800508c:	f7ff fcc0 	bl	8004a10 <_Z19SBUS_postProcessingv>
    LED_status_WaitingForThrottle0();
 8005090:	f7ff feac 	bl	8004dec <_Z30LED_status_WaitingForThrottle0v>
  while (SBUS_Channels[2] > motorDeadzone)                           //only continue if throttle is off
 8005094:	e7ef      	b.n	8005076 <main+0x6e>
  }
  
  MPU6050_calibration();
 8005096:	f7fc ffb3 	bl	8002000 <_Z19MPU6050_calibrationv>

  LED_status_Ready();
 800509a:	f7ff ff93 	bl	8004fc4 <_Z16LED_status_Readyv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();                                                           //Main Loop
 800509e:	f001 f92d 	bl	80062fc <_Z4loopv>
 80050a2:	e7fc      	b.n	800509e <main+0x96>
 80050a4:	200007b0 	.word	0x200007b0
 80050a8:	20000610 	.word	0x20000610
 80050ac:	200007f8 	.word	0x200007f8
 80050b0:	2000062c 	.word	0x2000062c
 80050b4:	20000668 	.word	0x20000668
 80050b8:	20000658 	.word	0x20000658

080050bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b092      	sub	sp, #72	; 0x48
 80050c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050c2:	f107 0318 	add.w	r3, r7, #24
 80050c6:	2230      	movs	r2, #48	; 0x30
 80050c8:	2100      	movs	r1, #0
 80050ca:	4618      	mov	r0, r3
 80050cc:	f00c ff26 	bl	8011f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050d0:	1d3b      	adds	r3, r7, #4
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	605a      	str	r2, [r3, #4]
 80050d8:	609a      	str	r2, [r3, #8]
 80050da:	60da      	str	r2, [r3, #12]
 80050dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80050de:	2301      	movs	r3, #1
 80050e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80050e2:	2301      	movs	r3, #1
 80050e4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050e6:	2302      	movs	r3, #2
 80050e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80050ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 80050f0:	230d      	movs	r3, #13
 80050f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 80050f4:	23c3      	movs	r3, #195	; 0xc3
 80050f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80050f8:	2302      	movs	r3, #2
 80050fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80050fc:	2305      	movs	r3, #5
 80050fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005100:	f107 0318 	add.w	r3, r7, #24
 8005104:	4618      	mov	r0, r3
 8005106:	f005 f959 	bl	800a3bc <HAL_RCC_OscConfig>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	bf14      	ite	ne
 8005110:	2301      	movne	r3, #1
 8005112:	2300      	moveq	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800511a:	f000 fa97 	bl	800564c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800511e:	230f      	movs	r3, #15
 8005120:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005122:	2302      	movs	r3, #2
 8005124:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800512a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800512e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005134:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005136:	1d3b      	adds	r3, r7, #4
 8005138:	2103      	movs	r1, #3
 800513a:	4618      	mov	r0, r3
 800513c:	f005 fb8e 	bl	800a85c <HAL_RCC_ClockConfig>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	bf14      	ite	ne
 8005146:	2301      	movne	r3, #1
 8005148:	2300      	moveq	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 8005150:	f000 fa7c 	bl	800564c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8005154:	f005 fc6e 	bl	800aa34 <HAL_RCC_EnableCSS>
}
 8005158:	bf00      	nop
 800515a:	3748      	adds	r7, #72	; 0x48
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005164:	4b1a      	ldr	r3, [pc, #104]	; (80051d0 <_ZL12MX_ADC1_Initv+0x70>)
 8005166:	4a1b      	ldr	r2, [pc, #108]	; (80051d4 <_ZL12MX_ADC1_Initv+0x74>)
 8005168:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800516a:	4b19      	ldr	r3, [pc, #100]	; (80051d0 <_ZL12MX_ADC1_Initv+0x70>)
 800516c:	2200      	movs	r2, #0
 800516e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005170:	4b17      	ldr	r3, [pc, #92]	; (80051d0 <_ZL12MX_ADC1_Initv+0x70>)
 8005172:	2200      	movs	r2, #0
 8005174:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005176:	4b16      	ldr	r3, [pc, #88]	; (80051d0 <_ZL12MX_ADC1_Initv+0x70>)
 8005178:	2200      	movs	r2, #0
 800517a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800517c:	4b14      	ldr	r3, [pc, #80]	; (80051d0 <_ZL12MX_ADC1_Initv+0x70>)
 800517e:	2201      	movs	r2, #1
 8005180:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005182:	4b13      	ldr	r3, [pc, #76]	; (80051d0 <_ZL12MX_ADC1_Initv+0x70>)
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800518a:	4b11      	ldr	r3, [pc, #68]	; (80051d0 <_ZL12MX_ADC1_Initv+0x70>)
 800518c:	2200      	movs	r2, #0
 800518e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005190:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <_ZL12MX_ADC1_Initv+0x70>)
 8005192:	4a11      	ldr	r2, [pc, #68]	; (80051d8 <_ZL12MX_ADC1_Initv+0x78>)
 8005194:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005196:	4b0e      	ldr	r3, [pc, #56]	; (80051d0 <_ZL12MX_ADC1_Initv+0x70>)
 8005198:	2200      	movs	r2, #0
 800519a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800519c:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <_ZL12MX_ADC1_Initv+0x70>)
 800519e:	2201      	movs	r2, #1
 80051a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80051a2:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <_ZL12MX_ADC1_Initv+0x70>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80051aa:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <_ZL12MX_ADC1_Initv+0x70>)
 80051ac:	2201      	movs	r2, #1
 80051ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80051b0:	4807      	ldr	r0, [pc, #28]	; (80051d0 <_ZL12MX_ADC1_Initv+0x70>)
 80051b2:	f001 fe4d 	bl	8006e50 <HAL_ADC_Init>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	bf14      	ite	ne
 80051bc:	2301      	movne	r3, #1
 80051be:	2300      	moveq	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <_ZL12MX_ADC1_Initv+0x6a>
  {
    Error_Handler();
 80051c6:	f000 fa41 	bl	800564c <Error_Handler>
  //}
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80051ca:	bf00      	nop
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	20000684 	.word	0x20000684
 80051d4:	40012000 	.word	0x40012000
 80051d8:	0f000001 	.word	0x0f000001

080051dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80051e0:	4b15      	ldr	r3, [pc, #84]	; (8005238 <MX_I2C1_Init+0x5c>)
 80051e2:	4a16      	ldr	r2, [pc, #88]	; (800523c <MX_I2C1_Init+0x60>)
 80051e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80051e6:	4b14      	ldr	r3, [pc, #80]	; (8005238 <MX_I2C1_Init+0x5c>)
 80051e8:	4a15      	ldr	r2, [pc, #84]	; (8005240 <MX_I2C1_Init+0x64>)
 80051ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80051ec:	4b12      	ldr	r3, [pc, #72]	; (8005238 <MX_I2C1_Init+0x5c>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80051f2:	4b11      	ldr	r3, [pc, #68]	; (8005238 <MX_I2C1_Init+0x5c>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051f8:	4b0f      	ldr	r3, [pc, #60]	; (8005238 <MX_I2C1_Init+0x5c>)
 80051fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005200:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <MX_I2C1_Init+0x5c>)
 8005202:	2200      	movs	r2, #0
 8005204:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <MX_I2C1_Init+0x5c>)
 8005208:	2200      	movs	r2, #0
 800520a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800520c:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <MX_I2C1_Init+0x5c>)
 800520e:	2200      	movs	r2, #0
 8005210:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005212:	4b09      	ldr	r3, [pc, #36]	; (8005238 <MX_I2C1_Init+0x5c>)
 8005214:	2200      	movs	r2, #0
 8005216:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005218:	4807      	ldr	r0, [pc, #28]	; (8005238 <MX_I2C1_Init+0x5c>)
 800521a:	f002 ffbb 	bl	8008194 <HAL_I2C_Init>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	bf14      	ite	ne
 8005224:	2301      	movne	r3, #1
 8005226:	2300      	moveq	r3, #0
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <MX_I2C1_Init+0x56>
  {
    Error_Handler();
 800522e:	f000 fa0d 	bl	800564c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	200006cc 	.word	0x200006cc
 800523c:	40005400 	.word	0x40005400
 8005240:	00061a80 	.word	0x00061a80

08005244 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	; 0x28
 8005248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800524a:	f107 0320 	add.w	r3, r7, #32
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005254:	1d3b      	adds	r3, r7, #4
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	605a      	str	r2, [r3, #4]
 800525c:	609a      	str	r2, [r3, #8]
 800525e:	60da      	str	r2, [r3, #12]
 8005260:	611a      	str	r2, [r3, #16]
 8005262:	615a      	str	r2, [r3, #20]
 8005264:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005266:	4b29      	ldr	r3, [pc, #164]	; (800530c <_ZL12MX_TIM3_Initv+0xc8>)
 8005268:	4a29      	ldr	r2, [pc, #164]	; (8005310 <_ZL12MX_TIM3_Initv+0xcc>)
 800526a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60 - 1;
 800526c:	4b27      	ldr	r3, [pc, #156]	; (800530c <_ZL12MX_TIM3_Initv+0xc8>)
 800526e:	223b      	movs	r2, #59	; 0x3b
 8005270:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005272:	4b26      	ldr	r3, [pc, #152]	; (800530c <_ZL12MX_TIM3_Initv+0xc8>)
 8005274:	2200      	movs	r2, #0
 8005276:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = slowPPM1_Pulselength - 1;
 8005278:	4b24      	ldr	r3, [pc, #144]	; (800530c <_ZL12MX_TIM3_Initv+0xc8>)
 800527a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800527e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005280:	4b22      	ldr	r3, [pc, #136]	; (800530c <_ZL12MX_TIM3_Initv+0xc8>)
 8005282:	2200      	movs	r2, #0
 8005284:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005286:	4b21      	ldr	r3, [pc, #132]	; (800530c <_ZL12MX_TIM3_Initv+0xc8>)
 8005288:	2200      	movs	r2, #0
 800528a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800528c:	481f      	ldr	r0, [pc, #124]	; (800530c <_ZL12MX_TIM3_Initv+0xc8>)
 800528e:	f005 fe49 	bl	800af24 <HAL_TIM_PWM_Init>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	bf14      	ite	ne
 8005298:	2301      	movne	r3, #1
 800529a:	2300      	moveq	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 80052a2:	f000 f9d3 	bl	800564c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052a6:	2300      	movs	r3, #0
 80052a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052aa:	2300      	movs	r3, #0
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80052ae:	f107 0320 	add.w	r3, r7, #32
 80052b2:	4619      	mov	r1, r3
 80052b4:	4815      	ldr	r0, [pc, #84]	; (800530c <_ZL12MX_TIM3_Initv+0xc8>)
 80052b6:	f006 fa79 	bl	800b7ac <HAL_TIMEx_MasterConfigSynchronization>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	bf14      	ite	ne
 80052c0:	2301      	movne	r3, #1
 80052c2:	2300      	moveq	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80052ca:	f000 f9bf 	bl	800564c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052ce:	2360      	movs	r3, #96	; 0x60
 80052d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052de:	1d3b      	adds	r3, r7, #4
 80052e0:	2200      	movs	r2, #0
 80052e2:	4619      	mov	r1, r3
 80052e4:	4809      	ldr	r0, [pc, #36]	; (800530c <_ZL12MX_TIM3_Initv+0xc8>)
 80052e6:	f005 ff35 	bl	800b154 <HAL_TIM_PWM_ConfigChannel>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	bf14      	ite	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	2300      	moveq	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 80052fa:	f000 f9a7 	bl	800564c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80052fe:	4803      	ldr	r0, [pc, #12]	; (800530c <_ZL12MX_TIM3_Initv+0xc8>)
 8005300:	f001 fad6 	bl	80068b0 <HAL_TIM_MspPostInit>

}
 8005304:	bf00      	nop
 8005306:	3728      	adds	r7, #40	; 0x28
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20000720 	.word	0x20000720
 8005310:	40000400 	.word	0x40000400

08005314 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08a      	sub	sp, #40	; 0x28
 8005318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800531a:	f107 0320 	add.w	r3, r7, #32
 800531e:	2200      	movs	r2, #0
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005324:	1d3b      	adds	r3, r7, #4
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	605a      	str	r2, [r3, #4]
 800532c:	609a      	str	r2, [r3, #8]
 800532e:	60da      	str	r2, [r3, #12]
 8005330:	611a      	str	r2, [r3, #16]
 8005332:	615a      	str	r2, [r3, #20]
 8005334:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005336:	4b29      	ldr	r3, [pc, #164]	; (80053dc <_ZL12MX_TIM4_Initv+0xc8>)
 8005338:	4a29      	ldr	r2, [pc, #164]	; (80053e0 <_ZL12MX_TIM4_Initv+0xcc>)
 800533a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60 - 1;
 800533c:	4b27      	ldr	r3, [pc, #156]	; (80053dc <_ZL12MX_TIM4_Initv+0xc8>)
 800533e:	223b      	movs	r2, #59	; 0x3b
 8005340:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005342:	4b26      	ldr	r3, [pc, #152]	; (80053dc <_ZL12MX_TIM4_Initv+0xc8>)
 8005344:	2200      	movs	r2, #0
 8005346:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = fastPPM_Pulselength -1;
 8005348:	4b24      	ldr	r3, [pc, #144]	; (80053dc <_ZL12MX_TIM4_Initv+0xc8>)
 800534a:	f240 6282 	movw	r2, #1666	; 0x682
 800534e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005350:	4b22      	ldr	r3, [pc, #136]	; (80053dc <_ZL12MX_TIM4_Initv+0xc8>)
 8005352:	2200      	movs	r2, #0
 8005354:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005356:	4b21      	ldr	r3, [pc, #132]	; (80053dc <_ZL12MX_TIM4_Initv+0xc8>)
 8005358:	2200      	movs	r2, #0
 800535a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800535c:	481f      	ldr	r0, [pc, #124]	; (80053dc <_ZL12MX_TIM4_Initv+0xc8>)
 800535e:	f005 fde1 	bl	800af24 <HAL_TIM_PWM_Init>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 8005372:	f000 f96b 	bl	800564c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005376:	2300      	movs	r3, #0
 8005378:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800537a:	2300      	movs	r3, #0
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800537e:	f107 0320 	add.w	r3, r7, #32
 8005382:	4619      	mov	r1, r3
 8005384:	4815      	ldr	r0, [pc, #84]	; (80053dc <_ZL12MX_TIM4_Initv+0xc8>)
 8005386:	f006 fa11 	bl	800b7ac <HAL_TIMEx_MasterConfigSynchronization>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	bf14      	ite	ne
 8005390:	2301      	movne	r3, #1
 8005392:	2300      	moveq	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 800539a:	f000 f957 	bl	800564c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800539e:	2360      	movs	r3, #96	; 0x60
 80053a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053ae:	1d3b      	adds	r3, r7, #4
 80053b0:	2200      	movs	r2, #0
 80053b2:	4619      	mov	r1, r3
 80053b4:	4809      	ldr	r0, [pc, #36]	; (80053dc <_ZL12MX_TIM4_Initv+0xc8>)
 80053b6:	f005 fecd 	bl	800b154 <HAL_TIM_PWM_ConfigChannel>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bf14      	ite	ne
 80053c0:	2301      	movne	r3, #1
 80053c2:	2300      	moveq	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 80053ca:	f000 f93f 	bl	800564c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80053ce:	4803      	ldr	r0, [pc, #12]	; (80053dc <_ZL12MX_TIM4_Initv+0xc8>)
 80053d0:	f001 fa6e 	bl	80068b0 <HAL_TIM_MspPostInit>

}
 80053d4:	bf00      	nop
 80053d6:	3728      	adds	r7, #40	; 0x28
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	20000768 	.word	0x20000768
 80053e0:	40000800 	.word	0x40000800

080053e4 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80053e8:	4b10      	ldr	r3, [pc, #64]	; (800542c <_ZL13MX_TIM11_Initv+0x48>)
 80053ea:	4a11      	ldr	r2, [pc, #68]	; (8005430 <_ZL13MX_TIM11_Initv+0x4c>)
 80053ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 120 - 1;
 80053ee:	4b0f      	ldr	r3, [pc, #60]	; (800542c <_ZL13MX_TIM11_Initv+0x48>)
 80053f0:	2277      	movs	r2, #119	; 0x77
 80053f2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053f4:	4b0d      	ldr	r3, [pc, #52]	; (800542c <_ZL13MX_TIM11_Initv+0x48>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80053fa:	4b0c      	ldr	r3, [pc, #48]	; (800542c <_ZL13MX_TIM11_Initv+0x48>)
 80053fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005400:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005402:	4b0a      	ldr	r3, [pc, #40]	; (800542c <_ZL13MX_TIM11_Initv+0x48>)
 8005404:	2200      	movs	r2, #0
 8005406:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005408:	4b08      	ldr	r3, [pc, #32]	; (800542c <_ZL13MX_TIM11_Initv+0x48>)
 800540a:	2200      	movs	r2, #0
 800540c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800540e:	4807      	ldr	r0, [pc, #28]	; (800542c <_ZL13MX_TIM11_Initv+0x48>)
 8005410:	f005 fc64 	bl	800acdc <HAL_TIM_Base_Init>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	bf14      	ite	ne
 800541a:	2301      	movne	r3, #1
 800541c:	2300      	moveq	r3, #0
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8005424:	f000 f912 	bl	800564c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8005428:	bf00      	nop
 800542a:	bd80      	pop	{r7, pc}
 800542c:	200007b0 	.word	0x200007b0
 8005430:	40014800 	.word	0x40014800

08005434 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005438:	4b15      	ldr	r3, [pc, #84]	; (8005490 <_ZL19MX_USART1_UART_Initv+0x5c>)
 800543a:	4a16      	ldr	r2, [pc, #88]	; (8005494 <_ZL19MX_USART1_UART_Initv+0x60>)
 800543c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 800543e:	4b14      	ldr	r3, [pc, #80]	; (8005490 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8005440:	4a15      	ldr	r2, [pc, #84]	; (8005498 <_ZL19MX_USART1_UART_Initv+0x64>)
 8005442:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8005444:	4b12      	ldr	r3, [pc, #72]	; (8005490 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8005446:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800544a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 800544c:	4b10      	ldr	r3, [pc, #64]	; (8005490 <_ZL19MX_USART1_UART_Initv+0x5c>)
 800544e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005452:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8005454:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8005456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800545a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800545c:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <_ZL19MX_USART1_UART_Initv+0x5c>)
 800545e:	220c      	movs	r2, #12
 8005460:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005462:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8005464:	2200      	movs	r2, #0
 8005466:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8005468:	4b09      	ldr	r3, [pc, #36]	; (8005490 <_ZL19MX_USART1_UART_Initv+0x5c>)
 800546a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800546e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005470:	4807      	ldr	r0, [pc, #28]	; (8005490 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8005472:	f006 fa15 	bl	800b8a0 <HAL_UART_Init>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	bf14      	ite	ne
 800547c:	2301      	movne	r3, #1
 800547e:	2300      	moveq	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <_ZL19MX_USART1_UART_Initv+0x56>
  {
    Error_Handler();
 8005486:	f000 f8e1 	bl	800564c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800548a:	bf00      	nop
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	200007f8 	.word	0x200007f8
 8005494:	40011000 	.word	0x40011000
 8005498:	000186a0 	.word	0x000186a0

0800549c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80054a2:	2300      	movs	r3, #0
 80054a4:	607b      	str	r3, [r7, #4]
 80054a6:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <_ZL11MX_DMA_Initv+0x3c>)
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	4a0b      	ldr	r2, [pc, #44]	; (80054d8 <_ZL11MX_DMA_Initv+0x3c>)
 80054ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054b0:	6313      	str	r3, [r2, #48]	; 0x30
 80054b2:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <_ZL11MX_DMA_Initv+0x3c>)
 80054b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ba:	607b      	str	r3, [r7, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80054be:	2200      	movs	r2, #0
 80054c0:	2100      	movs	r1, #0
 80054c2:	203a      	movs	r0, #58	; 0x3a
 80054c4:	f002 f83d 	bl	8007542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80054c8:	203a      	movs	r0, #58	; 0x3a
 80054ca:	f002 f856 	bl	800757a <HAL_NVIC_EnableIRQ>

}
 80054ce:	bf00      	nop
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40023800 	.word	0x40023800

080054dc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08a      	sub	sp, #40	; 0x28
 80054e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054e2:	f107 0314 	add.w	r3, r7, #20
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	605a      	str	r2, [r3, #4]
 80054ec:	609a      	str	r2, [r3, #8]
 80054ee:	60da      	str	r2, [r3, #12]
 80054f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80054f2:	2300      	movs	r3, #0
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <_ZL12MX_GPIO_Initv+0x114>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	4a3d      	ldr	r2, [pc, #244]	; (80055f0 <_ZL12MX_GPIO_Initv+0x114>)
 80054fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005500:	6313      	str	r3, [r2, #48]	; 0x30
 8005502:	4b3b      	ldr	r3, [pc, #236]	; (80055f0 <_ZL12MX_GPIO_Initv+0x114>)
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550a:	613b      	str	r3, [r7, #16]
 800550c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	4b37      	ldr	r3, [pc, #220]	; (80055f0 <_ZL12MX_GPIO_Initv+0x114>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	4a36      	ldr	r2, [pc, #216]	; (80055f0 <_ZL12MX_GPIO_Initv+0x114>)
 8005518:	f043 0304 	orr.w	r3, r3, #4
 800551c:	6313      	str	r3, [r2, #48]	; 0x30
 800551e:	4b34      	ldr	r3, [pc, #208]	; (80055f0 <_ZL12MX_GPIO_Initv+0x114>)
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	4b30      	ldr	r3, [pc, #192]	; (80055f0 <_ZL12MX_GPIO_Initv+0x114>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	4a2f      	ldr	r2, [pc, #188]	; (80055f0 <_ZL12MX_GPIO_Initv+0x114>)
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	6313      	str	r3, [r2, #48]	; 0x30
 800553a:	4b2d      	ldr	r3, [pc, #180]	; (80055f0 <_ZL12MX_GPIO_Initv+0x114>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	60bb      	str	r3, [r7, #8]
 8005544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005546:	2300      	movs	r3, #0
 8005548:	607b      	str	r3, [r7, #4]
 800554a:	4b29      	ldr	r3, [pc, #164]	; (80055f0 <_ZL12MX_GPIO_Initv+0x114>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	4a28      	ldr	r2, [pc, #160]	; (80055f0 <_ZL12MX_GPIO_Initv+0x114>)
 8005550:	f043 0302 	orr.w	r3, r3, #2
 8005554:	6313      	str	r3, [r2, #48]	; 0x30
 8005556:	4b26      	ldr	r3, [pc, #152]	; (80055f0 <_ZL12MX_GPIO_Initv+0x114>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	607b      	str	r3, [r7, #4]
 8005560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 8005562:	2200      	movs	r2, #0
 8005564:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8005568:	4822      	ldr	r0, [pc, #136]	; (80055f4 <_ZL12MX_GPIO_Initv+0x118>)
 800556a:	f002 fde2 	bl	8008132 <HAL_GPIO_WritePin>
                          |ONBOARD_WRITE_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_RESET);
 800556e:	2200      	movs	r2, #0
 8005570:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005574:	4820      	ldr	r0, [pc, #128]	; (80055f8 <_ZL12MX_GPIO_Initv+0x11c>)
 8005576:	f002 fddc 	bl	8008132 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_READ_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_3_Pin;
 800557a:	2301      	movs	r3, #1
 800557c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800557e:	2300      	movs	r3, #0
 8005580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005582:	2300      	movs	r3, #0
 8005584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_3_GPIO_Port, &GPIO_InitStruct);
 8005586:	f107 0314 	add.w	r3, r7, #20
 800558a:	4619      	mov	r1, r3
 800558c:	481a      	ldr	r0, [pc, #104]	; (80055f8 <_ZL12MX_GPIO_Initv+0x11c>)
 800558e:	f002 fc1b 	bl	8007dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_BUTTON_1_Pin ONBOARD_BUTTON_2_Pin ONBOARD_BUTTON_3_Pin ONBOARD_BUTTON_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_BUTTON_1_Pin|ONBOARD_BUTTON_2_Pin|ONBOARD_BUTTON_3_Pin|ONBOARD_BUTTON_4_Pin;
 8005592:	230f      	movs	r3, #15
 8005594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005596:	2300      	movs	r3, #0
 8005598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800559e:	f107 0314 	add.w	r3, r7, #20
 80055a2:	4619      	mov	r1, r3
 80055a4:	4813      	ldr	r0, [pc, #76]	; (80055f4 <_ZL12MX_GPIO_Initv+0x118>)
 80055a6:	f002 fc0f 	bl	8007dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_LED_1_Pin ONBOARD_LED_2_Pin ONBOARD_LED_3_Pin ONBOARD_LED_4_Pin
                           ONBOARD_WRITE_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 80055aa:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 80055ae:	617b      	str	r3, [r7, #20]
                          |ONBOARD_WRITE_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055b0:	2301      	movs	r3, #1
 80055b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055b8:	2300      	movs	r3, #0
 80055ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055bc:	f107 0314 	add.w	r3, r7, #20
 80055c0:	4619      	mov	r1, r3
 80055c2:	480c      	ldr	r0, [pc, #48]	; (80055f4 <_ZL12MX_GPIO_Initv+0x118>)
 80055c4:	f002 fc00 	bl	8007dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_WRITE_2_Pin */
  GPIO_InitStruct.Pin = ONBOARD_WRITE_2_Pin;
 80055c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055ce:	2301      	movs	r3, #1
 80055d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d6:	2300      	movs	r3, #0
 80055d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ONBOARD_WRITE_2_GPIO_Port, &GPIO_InitStruct);
 80055da:	f107 0314 	add.w	r3, r7, #20
 80055de:	4619      	mov	r1, r3
 80055e0:	4805      	ldr	r0, [pc, #20]	; (80055f8 <_ZL12MX_GPIO_Initv+0x11c>)
 80055e2:	f002 fbf1 	bl	8007dc8 <HAL_GPIO_Init>

}
 80055e6:	bf00      	nop
 80055e8:	3728      	adds	r7, #40	; 0x28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	40023800 	.word	0x40023800
 80055f4:	40020000 	.word	0x40020000
 80055f8:	40020800 	.word	0x40020800

080055fc <HAL_UART_RxCpltCallback>:
 * 
 * 
 * @param huart 
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  SBUSNewPackage = true;
 8005604:	4b05      	ldr	r3, [pc, #20]	; (800561c <HAL_UART_RxCpltCallback+0x20>)
 8005606:	2201      	movs	r2, #1
 8005608:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart1, SBUS_RxBytes, SBUS_NumberOfBytes);
 800560a:	2219      	movs	r2, #25
 800560c:	4904      	ldr	r1, [pc, #16]	; (8005620 <HAL_UART_RxCpltCallback+0x24>)
 800560e:	4805      	ldr	r0, [pc, #20]	; (8005624 <HAL_UART_RxCpltCallback+0x28>)
 8005610:	f006 f993 	bl	800b93a <HAL_UART_Receive_DMA>
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20000668 	.word	0x20000668
 8005620:	20000610 	.word	0x20000610
 8005624:	200007f8 	.word	0x200007f8

08005628 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart1, SBUS_RxBytes, SBUS_NumberOfBytes);
 8005630:	2219      	movs	r2, #25
 8005632:	4904      	ldr	r1, [pc, #16]	; (8005644 <HAL_UART_ErrorCallback+0x1c>)
 8005634:	4804      	ldr	r0, [pc, #16]	; (8005648 <HAL_UART_ErrorCallback+0x20>)
 8005636:	f006 f980 	bl	800b93a <HAL_UART_Receive_DMA>
}
 800563a:	bf00      	nop
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20000610 	.word	0x20000610
 8005648:	200007f8 	.word	0x200007f8

0800564c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005650:	b672      	cpsid	i
}
 8005652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005654:	e7fe      	b.n	8005654 <Error_Handler+0x8>
	...

08005658 <_Z20updateMainMotorSpeedv>:
 * new motorspeed.  //NOTDONE
 * 
 * --Custom Method!
 */
void updateMainMotorSpeed()
{
 8005658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800565c:	af00      	add	r7, sp, #0
  
  ADC1->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, ADC_CHANNEL_11);               //reset sample rate
 800565e:	4bc2      	ldr	r3, [pc, #776]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	4ac1      	ldr	r2, [pc, #772]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 8005664:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005668:	60d3      	str	r3, [r2, #12]
  ADC1->SMPR1 |= ADC_SMPR1(ADC_SAMPLETIME_15CYCLES, ADC_CHANNEL_11);        //set new sample rate Channel 11
 800566a:	4bbf      	ldr	r3, [pc, #764]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	4abe      	ldr	r2, [pc, #760]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 8005670:	f043 0308 	orr.w	r3, r3, #8
 8005674:	60d3      	str	r3, [r2, #12]
  ADC1->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, 1);                              //reset Rank
 8005676:	4bbc      	ldr	r3, [pc, #752]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 8005678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567a:	4abb      	ldr	r2, [pc, #748]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 800567c:	f023 031f 	bic.w	r3, r3, #31
 8005680:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= ADC_SQR3_RK(ADC_CHANNEL_11, 1);                             //set new Rank Channel 11
 8005682:	4bb9      	ldr	r3, [pc, #740]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 8005684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005686:	4ab8      	ldr	r2, [pc, #736]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 8005688:	f043 030b 	orr.w	r3, r3, #11
 800568c:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_ADC_Start(&hadc1);                                                    //start ADC
 800568e:	48b7      	ldr	r0, [pc, #732]	; (800596c <_Z20updateMainMotorSpeedv+0x314>)
 8005690:	f001 fc22 	bl	8006ed8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 100);                                   //wait for ADC to finish
 8005694:	2164      	movs	r1, #100	; 0x64
 8005696:	48b5      	ldr	r0, [pc, #724]	; (800596c <_Z20updateMainMotorSpeedv+0x314>)
 8005698:	f001 fcce 	bl	8007038 <HAL_ADC_PollForConversion>
	adcValueChannel11 = (uint16_t)ADC1->DR;                                   //read ADC value
 800569c:	4bb2      	ldr	r3, [pc, #712]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 800569e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	4bb3      	ldr	r3, [pc, #716]	; (8005970 <_Z20updateMainMotorSpeedv+0x318>)
 80056a4:	801a      	strh	r2, [r3, #0]

	ADC1->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, ADC_CHANNEL_12);               //reset sample rate
 80056a6:	4bb0      	ldr	r3, [pc, #704]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	4aaf      	ldr	r2, [pc, #700]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 80056ac:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80056b0:	60d3      	str	r3, [r2, #12]
  ADC1->SMPR1 |= ADC_SMPR1(ADC_SAMPLETIME_15CYCLES, ADC_CHANNEL_12);        //set new sample rate Channel 12
 80056b2:	4bad      	ldr	r3, [pc, #692]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	4aac      	ldr	r2, [pc, #688]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 80056b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056bc:	60d3      	str	r3, [r2, #12]
  ADC1->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, 1);                              //reset Rank
 80056be:	4baa      	ldr	r3, [pc, #680]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 80056c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c2:	4aa9      	ldr	r2, [pc, #676]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 80056c4:	f023 031f 	bic.w	r3, r3, #31
 80056c8:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= ADC_SQR3_RK(ADC_CHANNEL_12, 1);                             //set new Rank Channel 12
 80056ca:	4ba7      	ldr	r3, [pc, #668]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 80056cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ce:	4aa6      	ldr	r2, [pc, #664]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 80056d0:	f043 030c 	orr.w	r3, r3, #12
 80056d4:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_ADC_Start(&hadc1);                                                    //start ADC
 80056d6:	48a5      	ldr	r0, [pc, #660]	; (800596c <_Z20updateMainMotorSpeedv+0x314>)
 80056d8:	f001 fbfe 	bl	8006ed8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 100);                                   //wait for ADC to finish
 80056dc:	2164      	movs	r1, #100	; 0x64
 80056de:	48a3      	ldr	r0, [pc, #652]	; (800596c <_Z20updateMainMotorSpeedv+0x314>)
 80056e0:	f001 fcaa 	bl	8007038 <HAL_ADC_PollForConversion>
	adcValueChannel12 = (uint16_t)ADC1->DR;                                   //read ADC value
 80056e4:	4ba0      	ldr	r3, [pc, #640]	; (8005968 <_Z20updateMainMotorSpeedv+0x310>)
 80056e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	4ba2      	ldr	r3, [pc, #648]	; (8005974 <_Z20updateMainMotorSpeedv+0x31c>)
 80056ec:	801a      	strh	r2, [r3, #0]

  adc_TimestampMicros = TIM11->CNT;
 80056ee:	4ba2      	ldr	r3, [pc, #648]	; (8005978 <_Z20updateMainMotorSpeedv+0x320>)
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	4ba1      	ldr	r3, [pc, #644]	; (800597c <_Z20updateMainMotorSpeedv+0x324>)
 80056f6:	801a      	strh	r2, [r3, #0]
  adc_TimestampMillis = HAL_GetTick();
 80056f8:	f001 fb7c 	bl	8006df4 <HAL_GetTick>
 80056fc:	4603      	mov	r3, r0
 80056fe:	4aa0      	ldr	r2, [pc, #640]	; (8005980 <_Z20updateMainMotorSpeedv+0x328>)
 8005700:	6013      	str	r3, [r2, #0]

  if (smoothMainMotorSpeed > motorDeadzone)                                 //if throttle is not off
 8005702:	4ba0      	ldr	r3, [pc, #640]	; (8005984 <_Z20updateMainMotorSpeedv+0x32c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	49a0      	ldr	r1, [pc, #640]	; (8005988 <_Z20updateMainMotorSpeedv+0x330>)
 8005708:	4618      	mov	r0, r3
 800570a:	f7fb fd33 	bl	8001174 <__aeabi_fcmpgt>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 81ad 	beq.w	8005a70 <_Z20updateMainMotorSpeedv+0x418>
  {
    //calculate motorspeed based on throttle, motor position, motorspeed, start-offset and skew-offset//NOTDONE

    mainMotorCyclicAccel =                                                          /* get motor acceleration ---> rotor blade-pitch angle*/                                                                                                                                                                                                                                                                       \
    + ((((((float)adcValueChannel12 - hall2_center) * hall2_scaler) * cos_OffsetAngle) - ((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * sin_OffsetAngle)) * (Pitch_output * 0.01 * (smoothMainMotorSpeed + SBUS_mappedValueMax)))  \
 8005716:	4b97      	ldr	r3, [pc, #604]	; (8005974 <_Z20updateMainMotorSpeedv+0x31c>)
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f7fb fb16 	bl	8000d4c <__aeabi_ui2f>
 8005720:	4603      	mov	r3, r0
 8005722:	4618      	mov	r0, r3
 8005724:	f7fa febc 	bl	80004a0 <__aeabi_f2d>
 8005728:	a385      	add	r3, pc, #532	; (adr r3, 8005940 <_Z20updateMainMotorSpeedv+0x2e8>)
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f7fa fd57 	bl	80001e0 <__aeabi_dsub>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4610      	mov	r0, r2
 8005738:	4619      	mov	r1, r3
 800573a:	a383      	add	r3, pc, #524	; (adr r3, 8005948 <_Z20updateMainMotorSpeedv+0x2f0>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f7fa ff06 	bl	8000550 <__aeabi_dmul>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4614      	mov	r4, r2
 800574a:	461d      	mov	r5, r3
 800574c:	4b8f      	ldr	r3, [pc, #572]	; (800598c <_Z20updateMainMotorSpeedv+0x334>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	f7fa fea5 	bl	80004a0 <__aeabi_f2d>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4620      	mov	r0, r4
 800575c:	4629      	mov	r1, r5
 800575e:	f7fa fef7 	bl	8000550 <__aeabi_dmul>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4614      	mov	r4, r2
 8005768:	461d      	mov	r5, r3
 800576a:	4b81      	ldr	r3, [pc, #516]	; (8005970 <_Z20updateMainMotorSpeedv+0x318>)
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f7fb faec 	bl	8000d4c <__aeabi_ui2f>
 8005774:	4603      	mov	r3, r0
 8005776:	4618      	mov	r0, r3
 8005778:	f7fa fe92 	bl	80004a0 <__aeabi_f2d>
 800577c:	a374      	add	r3, pc, #464	; (adr r3, 8005950 <_Z20updateMainMotorSpeedv+0x2f8>)
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	f7fa fd2d 	bl	80001e0 <__aeabi_dsub>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4610      	mov	r0, r2
 800578c:	4619      	mov	r1, r3
 800578e:	a372      	add	r3, pc, #456	; (adr r3, 8005958 <_Z20updateMainMotorSpeedv+0x300>)
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f7fa fedc 	bl	8000550 <__aeabi_dmul>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4690      	mov	r8, r2
 800579e:	4699      	mov	r9, r3
 80057a0:	4b7b      	ldr	r3, [pc, #492]	; (8005990 <_Z20updateMainMotorSpeedv+0x338>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fa fe7b 	bl	80004a0 <__aeabi_f2d>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4640      	mov	r0, r8
 80057b0:	4649      	mov	r1, r9
 80057b2:	f7fa fecd 	bl	8000550 <__aeabi_dmul>
 80057b6:	4602      	mov	r2, r0
 80057b8:	460b      	mov	r3, r1
 80057ba:	4620      	mov	r0, r4
 80057bc:	4629      	mov	r1, r5
 80057be:	f7fa fd0f 	bl	80001e0 <__aeabi_dsub>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4614      	mov	r4, r2
 80057c8:	461d      	mov	r5, r3
 80057ca:	4b72      	ldr	r3, [pc, #456]	; (8005994 <_Z20updateMainMotorSpeedv+0x33c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fa fe66 	bl	80004a0 <__aeabi_f2d>
 80057d4:	a362      	add	r3, pc, #392	; (adr r3, 8005960 <_Z20updateMainMotorSpeedv+0x308>)
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	f7fa feb9 	bl	8000550 <__aeabi_dmul>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4690      	mov	r8, r2
 80057e4:	4699      	mov	r9, r3
 80057e6:	4b67      	ldr	r3, [pc, #412]	; (8005984 <_Z20updateMainMotorSpeedv+0x32c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	496b      	ldr	r1, [pc, #428]	; (8005998 <_Z20updateMainMotorSpeedv+0x340>)
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fb f9fd 	bl	8000bec <__addsf3>
 80057f2:	4603      	mov	r3, r0
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fa fe53 	bl	80004a0 <__aeabi_f2d>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4640      	mov	r0, r8
 8005800:	4649      	mov	r1, r9
 8005802:	f7fa fea5 	bl	8000550 <__aeabi_dmul>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4620      	mov	r0, r4
 800580c:	4629      	mov	r1, r5
 800580e:	f7fa fe9f 	bl	8000550 <__aeabi_dmul>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4614      	mov	r4, r2
 8005818:	461d      	mov	r5, r3
    + ((((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * cos_OffsetAngle) + ((((float)adcValueChannel12 - hall2_center) * hall2_scaler) * sin_OffsetAngle)) * (Roll_output  * 0.01 * (smoothMainMotorSpeed + SBUS_mappedValueMax)));
 800581a:	4b55      	ldr	r3, [pc, #340]	; (8005970 <_Z20updateMainMotorSpeedv+0x318>)
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f7fb fa94 	bl	8000d4c <__aeabi_ui2f>
 8005824:	4603      	mov	r3, r0
 8005826:	4618      	mov	r0, r3
 8005828:	f7fa fe3a 	bl	80004a0 <__aeabi_f2d>
 800582c:	a348      	add	r3, pc, #288	; (adr r3, 8005950 <_Z20updateMainMotorSpeedv+0x2f8>)
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	f7fa fcd5 	bl	80001e0 <__aeabi_dsub>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4610      	mov	r0, r2
 800583c:	4619      	mov	r1, r3
 800583e:	a346      	add	r3, pc, #280	; (adr r3, 8005958 <_Z20updateMainMotorSpeedv+0x300>)
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	f7fa fe84 	bl	8000550 <__aeabi_dmul>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4690      	mov	r8, r2
 800584e:	4699      	mov	r9, r3
 8005850:	4b4e      	ldr	r3, [pc, #312]	; (800598c <_Z20updateMainMotorSpeedv+0x334>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f7fa fe23 	bl	80004a0 <__aeabi_f2d>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4640      	mov	r0, r8
 8005860:	4649      	mov	r1, r9
 8005862:	f7fa fe75 	bl	8000550 <__aeabi_dmul>
 8005866:	4602      	mov	r2, r0
 8005868:	460b      	mov	r3, r1
 800586a:	4690      	mov	r8, r2
 800586c:	4699      	mov	r9, r3
 800586e:	4b41      	ldr	r3, [pc, #260]	; (8005974 <_Z20updateMainMotorSpeedv+0x31c>)
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f7fb fa6a 	bl	8000d4c <__aeabi_ui2f>
 8005878:	4603      	mov	r3, r0
 800587a:	4618      	mov	r0, r3
 800587c:	f7fa fe10 	bl	80004a0 <__aeabi_f2d>
 8005880:	a32f      	add	r3, pc, #188	; (adr r3, 8005940 <_Z20updateMainMotorSpeedv+0x2e8>)
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	f7fa fcab 	bl	80001e0 <__aeabi_dsub>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4610      	mov	r0, r2
 8005890:	4619      	mov	r1, r3
 8005892:	a32d      	add	r3, pc, #180	; (adr r3, 8005948 <_Z20updateMainMotorSpeedv+0x2f0>)
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f7fa fe5a 	bl	8000550 <__aeabi_dmul>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	4692      	mov	sl, r2
 80058a2:	469b      	mov	fp, r3
 80058a4:	4b3a      	ldr	r3, [pc, #232]	; (8005990 <_Z20updateMainMotorSpeedv+0x338>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fa fdf9 	bl	80004a0 <__aeabi_f2d>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4650      	mov	r0, sl
 80058b4:	4659      	mov	r1, fp
 80058b6:	f7fa fe4b 	bl	8000550 <__aeabi_dmul>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	4640      	mov	r0, r8
 80058c0:	4649      	mov	r1, r9
 80058c2:	f7fa fc8f 	bl	80001e4 <__adddf3>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	4690      	mov	r8, r2
 80058cc:	4699      	mov	r9, r3
 80058ce:	4b33      	ldr	r3, [pc, #204]	; (800599c <_Z20updateMainMotorSpeedv+0x344>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fa fde4 	bl	80004a0 <__aeabi_f2d>
 80058d8:	a321      	add	r3, pc, #132	; (adr r3, 8005960 <_Z20updateMainMotorSpeedv+0x308>)
 80058da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058de:	f7fa fe37 	bl	8000550 <__aeabi_dmul>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4692      	mov	sl, r2
 80058e8:	469b      	mov	fp, r3
 80058ea:	4b26      	ldr	r3, [pc, #152]	; (8005984 <_Z20updateMainMotorSpeedv+0x32c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	492a      	ldr	r1, [pc, #168]	; (8005998 <_Z20updateMainMotorSpeedv+0x340>)
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fb f97b 	bl	8000bec <__addsf3>
 80058f6:	4603      	mov	r3, r0
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fa fdd1 	bl	80004a0 <__aeabi_f2d>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4650      	mov	r0, sl
 8005904:	4659      	mov	r1, fp
 8005906:	f7fa fe23 	bl	8000550 <__aeabi_dmul>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4640      	mov	r0, r8
 8005910:	4649      	mov	r1, r9
 8005912:	f7fa fe1d 	bl	8000550 <__aeabi_dmul>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4620      	mov	r0, r4
 800591c:	4629      	mov	r1, r5
 800591e:	f7fa fc61 	bl	80001e4 <__adddf3>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4610      	mov	r0, r2
 8005928:	4619      	mov	r1, r3
 800592a:	f7fb f909 	bl	8000b40 <__aeabi_d2f>
 800592e:	4603      	mov	r3, r0
    mainMotorCyclicAccel =                                                          /* get motor acceleration ---> rotor blade-pitch angle*/                                                                                                                                                                                                                                                                       \
 8005930:	4a1b      	ldr	r2, [pc, #108]	; (80059a0 <_Z20updateMainMotorSpeedv+0x348>)
 8005932:	6013      	str	r3, [r2, #0]
    
    mainMotorCyclicSpeed += mainMotorCyclicAccel;                                   //integrate
 8005934:	4b1b      	ldr	r3, [pc, #108]	; (80059a4 <_Z20updateMainMotorSpeedv+0x34c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	e036      	b.n	80059a8 <_Z20updateMainMotorSpeedv+0x350>
 800593a:	bf00      	nop
 800593c:	f3af 8000 	nop.w
 8005940:	00000000 	.word	0x00000000
 8005944:	4093be00 	.word	0x4093be00
 8005948:	ae98a1d1 	.word	0xae98a1d1
 800594c:	3f4fc46f 	.word	0x3f4fc46f
 8005950:	00000000 	.word	0x00000000
 8005954:	4093ac00 	.word	0x4093ac00
 8005958:	fc7729e9 	.word	0xfc7729e9
 800595c:	3f502864 	.word	0x3f502864
 8005960:	47ae147b 	.word	0x47ae147b
 8005964:	3f847ae1 	.word	0x3f847ae1
 8005968:	40012000 	.word	0x40012000
 800596c:	20000684 	.word	0x20000684
 8005970:	2000089c 	.word	0x2000089c
 8005974:	200008ae 	.word	0x200008ae
 8005978:	40014800 	.word	0x40014800
 800597c:	2000089e 	.word	0x2000089e
 8005980:	200008a4 	.word	0x200008a4
 8005984:	200008c4 	.word	0x200008c4
 8005988:	c46d8000 	.word	0xc46d8000
 800598c:	200008d4 	.word	0x200008d4
 8005990:	200008d0 	.word	0x200008d0
 8005994:	20000558 	.word	0x20000558
 8005998:	447a0000 	.word	0x447a0000
 800599c:	2000055c 	.word	0x2000055c
 80059a0:	200008c8 	.word	0x200008c8
 80059a4:	200008cc 	.word	0x200008cc
 80059a8:	4a37      	ldr	r2, [pc, #220]	; (8005a88 <_Z20updateMainMotorSpeedv+0x430>)
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	4611      	mov	r1, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fb f91c 	bl	8000bec <__addsf3>
 80059b4:	4603      	mov	r3, r0
 80059b6:	461a      	mov	r2, r3
 80059b8:	4b34      	ldr	r3, [pc, #208]	; (8005a8c <_Z20updateMainMotorSpeedv+0x434>)
 80059ba:	601a      	str	r2, [r3, #0]

    mainMotorCyclicSpeed -= mainMotorCyclicSpeed * mainMotorCyclicSpeed_leaky_I_k;  //leak towards 0
 80059bc:	4b33      	ldr	r3, [pc, #204]	; (8005a8c <_Z20updateMainMotorSpeedv+0x434>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fa fd6d 	bl	80004a0 <__aeabi_f2d>
 80059c6:	4604      	mov	r4, r0
 80059c8:	460d      	mov	r5, r1
 80059ca:	4b30      	ldr	r3, [pc, #192]	; (8005a8c <_Z20updateMainMotorSpeedv+0x434>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fa fd66 	bl	80004a0 <__aeabi_f2d>
 80059d4:	a32a      	add	r3, pc, #168	; (adr r3, 8005a80 <_Z20updateMainMotorSpeedv+0x428>)
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	f7fa fdb9 	bl	8000550 <__aeabi_dmul>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	4620      	mov	r0, r4
 80059e4:	4629      	mov	r1, r5
 80059e6:	f7fa fbfb 	bl	80001e0 <__aeabi_dsub>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4610      	mov	r0, r2
 80059f0:	4619      	mov	r1, r3
 80059f2:	f7fb f8a5 	bl	8000b40 <__aeabi_d2f>
 80059f6:	4603      	mov	r3, r0
 80059f8:	4a24      	ldr	r2, [pc, #144]	; (8005a8c <_Z20updateMainMotorSpeedv+0x434>)
 80059fa:	6013      	str	r3, [r2, #0]

    TIM4->CCR1 = (uint16_t)(                        \
      fastPPM_CenterTime                            \
    + (smoothMainMotorSpeed * PPMmainMotorScaler)   \
 80059fc:	4b24      	ldr	r3, [pc, #144]	; (8005a90 <_Z20updateMainMotorSpeedv+0x438>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4924      	ldr	r1, [pc, #144]	; (8005a94 <_Z20updateMainMotorSpeedv+0x43c>)
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fb f9fa 	bl	8000dfc <__aeabi_fmul>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	4923      	ldr	r1, [pc, #140]	; (8005a98 <_Z20updateMainMotorSpeedv+0x440>)
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fb f8ed 	bl	8000bec <__addsf3>
 8005a12:	4603      	mov	r3, r0
 8005a14:	461a      	mov	r2, r3
    + mainMotorCyclicSpeed);
 8005a16:	4b1d      	ldr	r3, [pc, #116]	; (8005a8c <_Z20updateMainMotorSpeedv+0x434>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	f7fb f8e5 	bl	8000bec <__addsf3>
 8005a22:	4603      	mov	r3, r0
    TIM4->CCR1 = (uint16_t)(                        \
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fb fbeb 	bl	8001200 <__aeabi_f2uiz>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	4b1b      	ldr	r3, [pc, #108]	; (8005a9c <_Z20updateMainMotorSpeedv+0x444>)
 8005a30:	635a      	str	r2, [r3, #52]	; 0x34
    

    if (TIM4->CCR1 > fastPPM_MaxTime) TIM4->CCR1 = fastPPM_MaxTime;                 //limit to PPM range
 8005a32:	4b1a      	ldr	r3, [pc, #104]	; (8005a9c <_Z20updateMainMotorSpeedv+0x444>)
 8005a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a36:	f240 620e 	movw	r2, #1550	; 0x60e
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	bf8c      	ite	hi
 8005a3e:	2301      	movhi	r3, #1
 8005a40:	2300      	movls	r3, #0
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <_Z20updateMainMotorSpeedv+0x3f8>
 8005a48:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <_Z20updateMainMotorSpeedv+0x444>)
 8005a4a:	f240 620e 	movw	r2, #1550	; 0x60e
 8005a4e:	635a      	str	r2, [r3, #52]	; 0x34
    if (TIM4->CCR1 < fastPPM_MinTime) TIM4->CCR1 = fastPPM_MinTime;                 //limit to PPM range
 8005a50:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <_Z20updateMainMotorSpeedv+0x444>)
 8005a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	bf94      	ite	ls
 8005a5c:	2301      	movls	r3, #1
 8005a5e:	2300      	movhi	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d008      	beq.n	8005a78 <_Z20updateMainMotorSpeedv+0x420>
 8005a66:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <_Z20updateMainMotorSpeedv+0x444>)
 8005a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a6c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    TIM4->CCR1 = fastPPM_MinTime;                                                   //motor off
  }
}
 8005a6e:	e003      	b.n	8005a78 <_Z20updateMainMotorSpeedv+0x420>
    TIM4->CCR1 = fastPPM_MinTime;                                                   //motor off
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <_Z20updateMainMotorSpeedv+0x444>)
 8005a72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a76:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005a78:	bf00      	nop
 8005a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a7e:	bf00      	nop
 8005a80:	9999999a 	.word	0x9999999a
 8005a84:	3fb99999 	.word	0x3fb99999
 8005a88:	200008c8 	.word	0x200008c8
 8005a8c:	200008cc 	.word	0x200008cc
 8005a90:	200008c4 	.word	0x200008c4
 8005a94:	3e8ccccd 	.word	0x3e8ccccd
 8005a98:	449f6000 	.word	0x449f6000
 8005a9c:	40000800 	.word	0x40000800

08005aa0 <_Z13MainMotorDLPFv>:
 * @brief Smooths the throttle input by a specified factor
 * 
 * --Custom Method!
 */
void MainMotorDLPF()
{
 8005aa0:	b5b0      	push	{r4, r5, r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  smoothMainMotorSpeed += MainMotorSmoothingFactor * ((float)SBUS_Channels[2] - smoothMainMotorSpeed);
 8005aa4:	4b18      	ldr	r3, [pc, #96]	; (8005b08 <_Z13MainMotorDLPFv+0x68>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fa fcf9 	bl	80004a0 <__aeabi_f2d>
 8005aae:	4604      	mov	r4, r0
 8005ab0:	460d      	mov	r5, r1
 8005ab2:	4b16      	ldr	r3, [pc, #88]	; (8005b0c <_Z13MainMotorDLPFv+0x6c>)
 8005ab4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fb f94b 	bl	8000d54 <__aeabi_i2f>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	4b11      	ldr	r3, [pc, #68]	; (8005b08 <_Z13MainMotorDLPFv+0x68>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	f7fb f88e 	bl	8000be8 <__aeabi_fsub>
 8005acc:	4603      	mov	r3, r0
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fa fce6 	bl	80004a0 <__aeabi_f2d>
 8005ad4:	a30a      	add	r3, pc, #40	; (adr r3, 8005b00 <_Z13MainMotorDLPFv+0x60>)
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	f7fa fd39 	bl	8000550 <__aeabi_dmul>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	f7fa fb7d 	bl	80001e4 <__adddf3>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4610      	mov	r0, r2
 8005af0:	4619      	mov	r1, r3
 8005af2:	f7fb f825 	bl	8000b40 <__aeabi_d2f>
 8005af6:	4603      	mov	r3, r0
 8005af8:	4a03      	ldr	r2, [pc, #12]	; (8005b08 <_Z13MainMotorDLPFv+0x68>)
 8005afa:	6013      	str	r3, [r2, #0]
}
 8005afc:	bf00      	nop
 8005afe:	bdb0      	pop	{r4, r5, r7, pc}
 8005b00:	9999999a 	.word	0x9999999a
 8005b04:	3fa99999 	.word	0x3fa99999
 8005b08:	200008c4 	.word	0x200008c4
 8005b0c:	20000658 	.word	0x20000658

08005b10 <_Z20updateTailMotorSpeedv>:
 * If the throttle is above a given deadzone the motor speed is YAW Y value
 * 
 * --Custom Method!
 */
void updateTailMotorSpeed()
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  if (SBUS_Channels[2] > motorDeadzone)
 8005b14:	4b23      	ldr	r3, [pc, #140]	; (8005ba4 <_Z20updateTailMotorSpeedv+0x94>)
 8005b16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005b1a:	f46f 726d 	mvn.w	r2, #948	; 0x3b4
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	db2b      	blt.n	8005b7a <_Z20updateTailMotorSpeedv+0x6a>
  {
    TIM3->CCR1 = (uint16_t)(slowPPM1_MinTime + PID_Yaw_y);
 8005b22:	4b21      	ldr	r3, [pc, #132]	; (8005ba8 <_Z20updateTailMotorSpeedv+0x98>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4921      	ldr	r1, [pc, #132]	; (8005bac <_Z20updateTailMotorSpeedv+0x9c>)
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fb f85f 	bl	8000bec <__addsf3>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fb fb65 	bl	8001200 <__aeabi_f2uiz>
 8005b36:	4603      	mov	r3, r0
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	4b1d      	ldr	r3, [pc, #116]	; (8005bb0 <_Z20updateTailMotorSpeedv+0xa0>)
 8005b3c:	635a      	str	r2, [r3, #52]	; 0x34
    if (TIM3->CCR1 > slowPPM1_MaxTime) TIM3->CCR1 = slowPPM1_MaxTime;                 //limit to PPM range    
 8005b3e:	4b1c      	ldr	r3, [pc, #112]	; (8005bb0 <_Z20updateTailMotorSpeedv+0xa0>)
 8005b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b42:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005b46:	bf8c      	ite	hi
 8005b48:	2301      	movhi	r3, #1
 8005b4a:	2300      	movls	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <_Z20updateTailMotorSpeedv+0x4a>
 8005b52:	4b17      	ldr	r3, [pc, #92]	; (8005bb0 <_Z20updateTailMotorSpeedv+0xa0>)
 8005b54:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005b58:	635a      	str	r2, [r3, #52]	; 0x34
    if (TIM3->CCR1 < slowPPM1_MinTime) TIM3->CCR1 = slowPPM1_MinTime;                 //limit to PPM range
 8005b5a:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <_Z20updateTailMotorSpeedv+0xa0>)
 8005b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005b62:	4293      	cmp	r3, r2
 8005b64:	bf94      	ite	ls
 8005b66:	2301      	movls	r3, #1
 8005b68:	2300      	movhi	r3, #0
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d016      	beq.n	8005b9e <_Z20updateTailMotorSpeedv+0x8e>
 8005b70:	4b0f      	ldr	r3, [pc, #60]	; (8005bb0 <_Z20updateTailMotorSpeedv+0xa0>)
 8005b72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b76:	635a      	str	r2, [r3, #52]	; 0x34
    Pitch_I_Sum = 0;
    Roll_I_Sum  = 0;
    Yaw_I_Sum   = 0;
    reset_WQuaternion();
  }
}
 8005b78:	e011      	b.n	8005b9e <_Z20updateTailMotorSpeedv+0x8e>
    TIM3->CCR1 = slowPPM1_MinTime;
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <_Z20updateTailMotorSpeedv+0xa0>)
 8005b7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b80:	635a      	str	r2, [r3, #52]	; 0x34
    Pitch_I_Sum = 0;
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <_Z20updateTailMotorSpeedv+0xa4>)
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]
    Roll_I_Sum  = 0;
 8005b8a:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <_Z20updateTailMotorSpeedv+0xa8>)
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
    Yaw_I_Sum   = 0;
 8005b92:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <_Z20updateTailMotorSpeedv+0xac>)
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]
    reset_WQuaternion();
 8005b9a:	f7fd ff47 	bl	8003a2c <_Z17reset_WQuaternionv>
}
 8005b9e:	bf00      	nop
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000658 	.word	0x20000658
 8005ba8:	20000554 	.word	0x20000554
 8005bac:	447a0000 	.word	0x447a0000
 8005bb0:	40000400 	.word	0x40000400
 8005bb4:	200005b8 	.word	0x200005b8
 8005bb8:	200005bc 	.word	0x200005bc
 8005bbc:	200005c0 	.word	0x200005c0

08005bc0 <_Z17getMainMotorSpeedv>:
 * @brief gets the current motor speed    //NOTDONE
 * 
 * --Custom Method!
 */
void getMainMotorSpeed()
{
 8005bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bc4:	af00      	add	r7, sp, #0
  if ((old_adcValueChannel11 <= hall1_center) & (adcValueChannel11 >= hall1_center))
 8005bc6:	4b9a      	ldr	r3, [pc, #616]	; (8005e30 <_Z17getMainMotorSpeedv+0x270>)
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	f240 42eb 	movw	r2, #1259	; 0x4eb
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	bf94      	ite	ls
 8005bd2:	2301      	movls	r3, #1
 8005bd4:	2300      	movhi	r3, #0
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	4b96      	ldr	r3, [pc, #600]	; (8005e34 <_Z17getMainMotorSpeedv+0x274>)
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8005be0:	428b      	cmp	r3, r1
 8005be2:	bf8c      	ite	hi
 8005be4:	2301      	movhi	r3, #1
 8005be6:	2300      	movls	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	4013      	ands	r3, r2
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 80d9 	beq.w	8005da6 <_Z17getMainMotorSpeedv+0x1e6>
  {
    if ((adc_TimestampMillis - old_MainMotor_CTS_Millis) >= 60)
 8005bf4:	4b90      	ldr	r3, [pc, #576]	; (8005e38 <_Z17getMainMotorSpeedv+0x278>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	4b90      	ldr	r3, [pc, #576]	; (8005e3c <_Z17getMainMotorSpeedv+0x27c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b3b      	cmp	r3, #59	; 0x3b
 8005c00:	d95c      	bls.n	8005cbc <_Z17getMainMotorSpeedv+0xfc>
    {
      MainMotor_CTS_Millis = old_adc_TimestampMillis + ((float)(adc_TimestampMillis - old_adc_TimestampMillis) * ((hall1_center - old_adcValueChannel11) / (float)(adcValueChannel11 - old_adcValueChannel11)));
 8005c02:	4b8f      	ldr	r3, [pc, #572]	; (8005e40 <_Z17getMainMotorSpeedv+0x280>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fa fc28 	bl	800045c <__aeabi_ui2d>
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	460d      	mov	r5, r1
 8005c10:	4b89      	ldr	r3, [pc, #548]	; (8005e38 <_Z17getMainMotorSpeedv+0x278>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	4b8a      	ldr	r3, [pc, #552]	; (8005e40 <_Z17getMainMotorSpeedv+0x280>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fb f896 	bl	8000d4c <__aeabi_ui2f>
 8005c20:	4603      	mov	r3, r0
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fa fc3c 	bl	80004a0 <__aeabi_f2d>
 8005c28:	4680      	mov	r8, r0
 8005c2a:	4689      	mov	r9, r1
 8005c2c:	4b80      	ldr	r3, [pc, #512]	; (8005e30 <_Z17getMainMotorSpeedv+0x270>)
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fa fc23 	bl	800047c <__aeabi_i2d>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	a177      	add	r1, pc, #476	; (adr r1, 8005e18 <_Z17getMainMotorSpeedv+0x258>)
 8005c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c40:	f7fa face 	bl	80001e0 <__aeabi_dsub>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4692      	mov	sl, r2
 8005c4a:	469b      	mov	fp, r3
 8005c4c:	4b79      	ldr	r3, [pc, #484]	; (8005e34 <_Z17getMainMotorSpeedv+0x274>)
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	4b77      	ldr	r3, [pc, #476]	; (8005e30 <_Z17getMainMotorSpeedv+0x270>)
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fb f87b 	bl	8000d54 <__aeabi_i2f>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fa fc1d 	bl	80004a0 <__aeabi_f2d>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4650      	mov	r0, sl
 8005c6c:	4659      	mov	r1, fp
 8005c6e:	f7fa fd99 	bl	80007a4 <__aeabi_ddiv>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4640      	mov	r0, r8
 8005c78:	4649      	mov	r1, r9
 8005c7a:	f7fa fc69 	bl	8000550 <__aeabi_dmul>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4620      	mov	r0, r4
 8005c84:	4629      	mov	r1, r5
 8005c86:	f7fa faad 	bl	80001e4 <__adddf3>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4610      	mov	r0, r2
 8005c90:	4619      	mov	r1, r3
 8005c92:	f7fa ff35 	bl	8000b00 <__aeabi_d2uiz>
 8005c96:	4603      	mov	r3, r0
 8005c98:	4a6a      	ldr	r2, [pc, #424]	; (8005e44 <_Z17getMainMotorSpeedv+0x284>)
 8005c9a:	6013      	str	r3, [r2, #0]
      mainMotorPeriod = (MainMotor_CTS_Millis - old_MainMotor_CTS_Millis) * 1000;
 8005c9c:	4b69      	ldr	r3, [pc, #420]	; (8005e44 <_Z17getMainMotorSpeedv+0x284>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	4b66      	ldr	r3, [pc, #408]	; (8005e3c <_Z17getMainMotorSpeedv+0x27c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005caa:	fb02 f303 	mul.w	r3, r2, r3
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fb f84c 	bl	8000d4c <__aeabi_ui2f>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	4a64      	ldr	r2, [pc, #400]	; (8005e48 <_Z17getMainMotorSpeedv+0x288>)
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	e051      	b.n	8005d60 <_Z17getMainMotorSpeedv+0x1a0>
    }
    else
    {
      MainMotor_CTS_Micros = old_adc_TimestampMicros + (uint16_t)((float)((uint16_t)adc_TimestampMicros - (uint16_t)old_adc_TimestampMicros) * ((hall1_center - old_adcValueChannel11) / (float)(adcValueChannel11 - old_adcValueChannel11)));
 8005cbc:	4b63      	ldr	r3, [pc, #396]	; (8005e4c <_Z17getMainMotorSpeedv+0x28c>)
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4b63      	ldr	r3, [pc, #396]	; (8005e50 <_Z17getMainMotorSpeedv+0x290>)
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fb f843 	bl	8000d54 <__aeabi_i2f>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fa fbe5 	bl	80004a0 <__aeabi_f2d>
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	460d      	mov	r5, r1
 8005cda:	4b55      	ldr	r3, [pc, #340]	; (8005e30 <_Z17getMainMotorSpeedv+0x270>)
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fa fbcc 	bl	800047c <__aeabi_i2d>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	a14b      	add	r1, pc, #300	; (adr r1, 8005e18 <_Z17getMainMotorSpeedv+0x258>)
 8005cea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cee:	f7fa fa77 	bl	80001e0 <__aeabi_dsub>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4690      	mov	r8, r2
 8005cf8:	4699      	mov	r9, r3
 8005cfa:	4b4e      	ldr	r3, [pc, #312]	; (8005e34 <_Z17getMainMotorSpeedv+0x274>)
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	4b4b      	ldr	r3, [pc, #300]	; (8005e30 <_Z17getMainMotorSpeedv+0x270>)
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fb f824 	bl	8000d54 <__aeabi_i2f>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fa fbc6 	bl	80004a0 <__aeabi_f2d>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4640      	mov	r0, r8
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	f7fa fd42 	bl	80007a4 <__aeabi_ddiv>
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4620      	mov	r0, r4
 8005d26:	4629      	mov	r1, r5
 8005d28:	f7fa fc12 	bl	8000550 <__aeabi_dmul>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4610      	mov	r0, r2
 8005d32:	4619      	mov	r1, r3
 8005d34:	f7fa fee4 	bl	8000b00 <__aeabi_d2uiz>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	4b44      	ldr	r3, [pc, #272]	; (8005e50 <_Z17getMainMotorSpeedv+0x290>)
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	4413      	add	r3, r2
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	4b43      	ldr	r3, [pc, #268]	; (8005e54 <_Z17getMainMotorSpeedv+0x294>)
 8005d46:	801a      	strh	r2, [r3, #0]
      mainMotorPeriod = (uint16_t)((uint16_t)MainMotor_CTS_Micros - (uint16_t)old_MainMotor_CTS_Micros);
 8005d48:	4b42      	ldr	r3, [pc, #264]	; (8005e54 <_Z17getMainMotorSpeedv+0x294>)
 8005d4a:	881a      	ldrh	r2, [r3, #0]
 8005d4c:	4b42      	ldr	r3, [pc, #264]	; (8005e58 <_Z17getMainMotorSpeedv+0x298>)
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fa fff9 	bl	8000d4c <__aeabi_ui2f>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4a3a      	ldr	r2, [pc, #232]	; (8005e48 <_Z17getMainMotorSpeedv+0x288>)
 8005d5e:	6013      	str	r3, [r2, #0]
    }
      old_MainMotor_CTS_Millis += (uint32_t)(mainMotorPeriod * 0.001);
 8005d60:	4b39      	ldr	r3, [pc, #228]	; (8005e48 <_Z17getMainMotorSpeedv+0x288>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fa fb9b 	bl	80004a0 <__aeabi_f2d>
 8005d6a:	a32d      	add	r3, pc, #180	; (adr r3, 8005e20 <_Z17getMainMotorSpeedv+0x260>)
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	f7fa fbee 	bl	8000550 <__aeabi_dmul>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4610      	mov	r0, r2
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	f7fa fec0 	bl	8000b00 <__aeabi_d2uiz>
 8005d80:	4602      	mov	r2, r0
 8005d82:	4b2e      	ldr	r3, [pc, #184]	; (8005e3c <_Z17getMainMotorSpeedv+0x27c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4413      	add	r3, r2
 8005d88:	4a2c      	ldr	r2, [pc, #176]	; (8005e3c <_Z17getMainMotorSpeedv+0x27c>)
 8005d8a:	6013      	str	r3, [r2, #0]
      old_MainMotor_CTS_Micros += (uint16_t)mainMotorPeriod;
 8005d8c:	4b2e      	ldr	r3, [pc, #184]	; (8005e48 <_Z17getMainMotorSpeedv+0x288>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fb fa35 	bl	8001200 <__aeabi_f2uiz>
 8005d96:	4603      	mov	r3, r0
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	4b2f      	ldr	r3, [pc, #188]	; (8005e58 <_Z17getMainMotorSpeedv+0x298>)
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	4413      	add	r3, r2
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	4b2d      	ldr	r3, [pc, #180]	; (8005e58 <_Z17getMainMotorSpeedv+0x298>)
 8005da4:	801a      	strh	r2, [r3, #0]
  }
  mainMotorPeriod_DLPF += periodSmoothingFactor * (mainMotorPeriod - mainMotorPeriod_DLPF);   //smoothing
 8005da6:	4b2d      	ldr	r3, [pc, #180]	; (8005e5c <_Z17getMainMotorSpeedv+0x29c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fa fb78 	bl	80004a0 <__aeabi_f2d>
 8005db0:	4604      	mov	r4, r0
 8005db2:	460d      	mov	r5, r1
 8005db4:	4b24      	ldr	r3, [pc, #144]	; (8005e48 <_Z17getMainMotorSpeedv+0x288>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a28      	ldr	r2, [pc, #160]	; (8005e5c <_Z17getMainMotorSpeedv+0x29c>)
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fa ff12 	bl	8000be8 <__aeabi_fsub>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fa fb6a 	bl	80004a0 <__aeabi_f2d>
 8005dcc:	a316      	add	r3, pc, #88	; (adr r3, 8005e28 <_Z17getMainMotorSpeedv+0x268>)
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f7fa fbbd 	bl	8000550 <__aeabi_dmul>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4620      	mov	r0, r4
 8005ddc:	4629      	mov	r1, r5
 8005dde:	f7fa fa01 	bl	80001e4 <__adddf3>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4610      	mov	r0, r2
 8005de8:	4619      	mov	r1, r3
 8005dea:	f7fa fea9 	bl	8000b40 <__aeabi_d2f>
 8005dee:	4603      	mov	r3, r0
 8005df0:	4a1a      	ldr	r2, [pc, #104]	; (8005e5c <_Z17getMainMotorSpeedv+0x29c>)
 8005df2:	6013      	str	r3, [r2, #0]

  old_adc_TimestampMillis = adc_TimestampMillis;
 8005df4:	4b10      	ldr	r3, [pc, #64]	; (8005e38 <_Z17getMainMotorSpeedv+0x278>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a11      	ldr	r2, [pc, #68]	; (8005e40 <_Z17getMainMotorSpeedv+0x280>)
 8005dfa:	6013      	str	r3, [r2, #0]
  old_adc_TimestampMicros = adc_TimestampMicros;
 8005dfc:	4b13      	ldr	r3, [pc, #76]	; (8005e4c <_Z17getMainMotorSpeedv+0x28c>)
 8005dfe:	881a      	ldrh	r2, [r3, #0]
 8005e00:	4b13      	ldr	r3, [pc, #76]	; (8005e50 <_Z17getMainMotorSpeedv+0x290>)
 8005e02:	801a      	strh	r2, [r3, #0]
  old_adcValueChannel11 = adcValueChannel11;
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <_Z17getMainMotorSpeedv+0x274>)
 8005e06:	881a      	ldrh	r2, [r3, #0]
 8005e08:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <_Z17getMainMotorSpeedv+0x270>)
 8005e0a:	801a      	strh	r2, [r3, #0]
}
 8005e0c:	bf00      	nop
 8005e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e12:	bf00      	nop
 8005e14:	f3af 8000 	nop.w
 8005e18:	00000000 	.word	0x00000000
 8005e1c:	4093ac00 	.word	0x4093ac00
 8005e20:	d2f1a9fc 	.word	0xd2f1a9fc
 8005e24:	3f50624d 	.word	0x3f50624d
 8005e28:	47ae147b 	.word	0x47ae147b
 8005e2c:	3fb47ae1 	.word	0x3fb47ae1
 8005e30:	200008ac 	.word	0x200008ac
 8005e34:	2000089c 	.word	0x2000089c
 8005e38:	200008a4 	.word	0x200008a4
 8005e3c:	200008b4 	.word	0x200008b4
 8005e40:	200008a8 	.word	0x200008a8
 8005e44:	200008b0 	.word	0x200008b0
 8005e48:	20000050 	.word	0x20000050
 8005e4c:	2000089e 	.word	0x2000089e
 8005e50:	200008a0 	.word	0x200008a0
 8005e54:	200008b8 	.word	0x200008b8
 8005e58:	200008ba 	.word	0x200008ba
 8005e5c:	200008bc 	.word	0x200008bc

08005e60 <_Z18getMainMotorOffsetv>:
 * @brief Gets the //NOTDONE
 * 
 * --Custom Method!
 */
void getMainMotorOffset()
{
 8005e60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
  float currentAngleOffset = mainMotorStartOffset + ((1 / (mainMotorPeriod_DLPF * 0.000001)) * (mainMotorMaxOffset));
 8005e68:	4b41      	ldr	r3, [pc, #260]	; (8005f70 <_Z18getMainMotorOffsetv+0x110>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fa fb17 	bl	80004a0 <__aeabi_f2d>
 8005e72:	4604      	mov	r4, r0
 8005e74:	460d      	mov	r5, r1
 8005e76:	4b3f      	ldr	r3, [pc, #252]	; (8005f74 <_Z18getMainMotorOffsetv+0x114>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fa fb10 	bl	80004a0 <__aeabi_f2d>
 8005e80:	a337      	add	r3, pc, #220	; (adr r3, 8005f60 <_Z18getMainMotorOffsetv+0x100>)
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	f7fa fb63 	bl	8000550 <__aeabi_dmul>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	f04f 0000 	mov.w	r0, #0
 8005e92:	4939      	ldr	r1, [pc, #228]	; (8005f78 <_Z18getMainMotorOffsetv+0x118>)
 8005e94:	f7fa fc86 	bl	80007a4 <__aeabi_ddiv>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4690      	mov	r8, r2
 8005e9e:	4699      	mov	r9, r3
 8005ea0:	4b36      	ldr	r3, [pc, #216]	; (8005f7c <_Z18getMainMotorOffsetv+0x11c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fa fafb 	bl	80004a0 <__aeabi_f2d>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	4640      	mov	r0, r8
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	f7fa fb4d 	bl	8000550 <__aeabi_dmul>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4620      	mov	r0, r4
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	f7fa f991 	bl	80001e4 <__adddf3>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	4619      	mov	r1, r3
 8005eca:	f7fa fe39 	bl	8000b40 <__aeabi_d2f>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	607b      	str	r3, [r7, #4]
  sin_OffsetAngle = sin((currentAngleOffset * M_PI) / 180);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fa fae4 	bl	80004a0 <__aeabi_f2d>
 8005ed8:	a323      	add	r3, pc, #140	; (adr r3, 8005f68 <_Z18getMainMotorOffsetv+0x108>)
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	f7fa fb37 	bl	8000550 <__aeabi_dmul>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	4619      	mov	r1, r3
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	4b24      	ldr	r3, [pc, #144]	; (8005f80 <_Z18getMainMotorOffsetv+0x120>)
 8005ef0:	f7fa fc58 	bl	80007a4 <__aeabi_ddiv>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4610      	mov	r0, r2
 8005efa:	4619      	mov	r1, r3
 8005efc:	f009 fec4 	bl	800fc88 <sin>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4610      	mov	r0, r2
 8005f06:	4619      	mov	r1, r3
 8005f08:	f7fa fe1a 	bl	8000b40 <__aeabi_d2f>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	4a1d      	ldr	r2, [pc, #116]	; (8005f84 <_Z18getMainMotorOffsetv+0x124>)
 8005f10:	6013      	str	r3, [r2, #0]
  cos_OffsetAngle = cos((currentAngleOffset * M_PI) / 180);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fa fac4 	bl	80004a0 <__aeabi_f2d>
 8005f18:	a313      	add	r3, pc, #76	; (adr r3, 8005f68 <_Z18getMainMotorOffsetv+0x108>)
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	f7fa fb17 	bl	8000550 <__aeabi_dmul>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4610      	mov	r0, r2
 8005f28:	4619      	mov	r1, r3
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	4b14      	ldr	r3, [pc, #80]	; (8005f80 <_Z18getMainMotorOffsetv+0x120>)
 8005f30:	f7fa fc38 	bl	80007a4 <__aeabi_ddiv>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	f009 fe62 	bl	800fc04 <cos>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	4610      	mov	r0, r2
 8005f46:	4619      	mov	r1, r3
 8005f48:	f7fa fdfa 	bl	8000b40 <__aeabi_d2f>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	4a0e      	ldr	r2, [pc, #56]	; (8005f88 <_Z18getMainMotorOffsetv+0x128>)
 8005f50:	6013      	str	r3, [r2, #0]
}
 8005f52:	bf00      	nop
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005f5c:	f3af 8000 	nop.w
 8005f60:	a0b5ed8d 	.word	0xa0b5ed8d
 8005f64:	3eb0c6f7 	.word	0x3eb0c6f7
 8005f68:	54442d18 	.word	0x54442d18
 8005f6c:	400921fb 	.word	0x400921fb
 8005f70:	20000054 	.word	0x20000054
 8005f74:	200008bc 	.word	0x200008bc
 8005f78:	3ff00000 	.word	0x3ff00000
 8005f7c:	20000058 	.word	0x20000058
 8005f80:	40668000 	.word	0x40668000
 8005f84:	200008d0 	.word	0x200008d0
 8005f88:	200008d4 	.word	0x200008d4

08005f8c <_Z8PPM_initv>:
 * @brief Initializes TIM 3 and 4 used for generating the PPM signals
 * 
 * --Custom Method!
 */
void PPM_init()
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim3);
 8005f90:	4803      	ldr	r0, [pc, #12]	; (8005fa0 <_Z8PPM_initv+0x14>)
 8005f92:	f004 ff59 	bl	800ae48 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8005f96:	4803      	ldr	r0, [pc, #12]	; (8005fa4 <_Z8PPM_initv+0x18>)
 8005f98:	f004 ff56 	bl	800ae48 <HAL_TIM_Base_Start_IT>
}
 8005f9c:	bf00      	nop
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	20000720 	.word	0x20000720
 8005fa4:	20000768 	.word	0x20000768

08005fa8 <_Z14ESCCalibrationv>:
 * If BT1 is not pressed, it gives the ESCs x time to initialize
 * 
 * --Custom Method!
 */
void ESCCalibration()
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(ONBOARD_BUTTON_4_GPIO_Port, ONBOARD_BUTTON_4_Pin) == true)
 8005fae:	2108      	movs	r1, #8
 8005fb0:	486b      	ldr	r0, [pc, #428]	; (8006160 <_Z14ESCCalibrationv+0x1b8>)
 8005fb2:	f002 f8a7 	bl	8008104 <HAL_GPIO_ReadPin>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	bf0c      	ite	eq
 8005fbc:	2301      	moveq	r3, #1
 8005fbe:	2300      	movne	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 80b7 	beq.w	8006136 <_Z14ESCCalibrationv+0x18e>
  {
    LED_ResetAll();
 8005fc8:	f7fe fe1e 	bl	8004c08 <_Z12LED_ResetAllv>
    uint16_t counter = 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	80fb      	strh	r3, [r7, #6]
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);                                                                             //start PPM for tail motor
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4864      	ldr	r0, [pc, #400]	; (8006164 <_Z14ESCCalibrationv+0x1bc>)
 8005fd4:	f004 fff6 	bl	800afc4 <HAL_TIM_PWM_Start>
    uint16_t oldTime = TIM11->CNT;
 8005fd8:	4b63      	ldr	r3, [pc, #396]	; (8006168 <_Z14ESCCalibrationv+0x1c0>)
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	80bb      	strh	r3, [r7, #4]

    //main-motor
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_4_GPIO_Port, ONBOARD_BUTTON_4_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 8005fde:	2108      	movs	r1, #8
 8005fe0:	485f      	ldr	r0, [pc, #380]	; (8006160 <_Z14ESCCalibrationv+0x1b8>)
 8005fe2:	f002 f88f 	bl	8008104 <HAL_GPIO_ReadPin>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	bf0c      	ite	eq
 8005fec:	2301      	moveq	r3, #1
 8005fee:	2300      	movne	r3, #0
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	88fb      	ldrh	r3, [r7, #6]
 8005ff4:	f240 31e7 	movw	r1, #999	; 0x3e7
 8005ff8:	428b      	cmp	r3, r1
 8005ffa:	bf94      	ite	ls
 8005ffc:	2301      	movls	r3, #1
 8005ffe:	2300      	movhi	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	4313      	orrs	r3, r2
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	bf14      	ite	ne
 800600a:	2301      	movne	r3, #1
 800600c:	2300      	moveq	r3, #0
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d035      	beq.n	8006080 <_Z14ESCCalibrationv+0xd8>
    {
      if (SBUSNewPackage == true) SBUS_postProcessing();                                                                  //process new packets
 8006014:	4b55      	ldr	r3, [pc, #340]	; (800616c <_Z14ESCCalibrationv+0x1c4>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <_Z14ESCCalibrationv+0x78>
 800601c:	f7fe fcf8 	bl	8004a10 <_Z19SBUS_postProcessingv>
      TIM3->CCR1 = (uint16_t)(slowPPM1_CenterTime + (SBUS_Channels[2] * PPMtailMotorScaler));                             //update motor speed
 8006020:	4b53      	ldr	r3, [pc, #332]	; (8006170 <_Z14ESCCalibrationv+0x1c8>)
 8006022:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006026:	4618      	mov	r0, r3
 8006028:	f7fa fe94 	bl	8000d54 <__aeabi_i2f>
 800602c:	4603      	mov	r3, r0
 800602e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006032:	4618      	mov	r0, r3
 8006034:	f7fa fee2 	bl	8000dfc <__aeabi_fmul>
 8006038:	4603      	mov	r3, r0
 800603a:	494e      	ldr	r1, [pc, #312]	; (8006174 <_Z14ESCCalibrationv+0x1cc>)
 800603c:	4618      	mov	r0, r3
 800603e:	f7fa fdd5 	bl	8000bec <__addsf3>
 8006042:	4603      	mov	r3, r0
 8006044:	4618      	mov	r0, r3
 8006046:	f7fb f8db 	bl	8001200 <__aeabi_f2uiz>
 800604a:	4603      	mov	r3, r0
 800604c:	b29a      	uxth	r2, r3
 800604e:	4b4a      	ldr	r3, [pc, #296]	; (8006178 <_Z14ESCCalibrationv+0x1d0>)
 8006050:	635a      	str	r2, [r3, #52]	; 0x34
      LED_status_ESC1_Cal();
 8006052:	f7fe fe8b 	bl	8004d6c <_Z19LED_status_ESC1_Calv>

      while ((TIM11->CNT - oldTime) < 10000);                                                                             //wait for 10 milliseconds to pass
 8006056:	4b44      	ldr	r3, [pc, #272]	; (8006168 <_Z14ESCCalibrationv+0x1c0>)
 8006058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800605a:	88bb      	ldrh	r3, [r7, #4]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	f242 720f 	movw	r2, #9999	; 0x270f
 8006062:	4293      	cmp	r3, r2
 8006064:	bf94      	ite	ls
 8006066:	2301      	movls	r3, #1
 8006068:	2300      	movhi	r3, #0
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d000      	beq.n	8006072 <_Z14ESCCalibrationv+0xca>
 8006070:	e7f1      	b.n	8006056 <_Z14ESCCalibrationv+0xae>
      oldTime = TIM11->CNT;
 8006072:	4b3d      	ldr	r3, [pc, #244]	; (8006168 <_Z14ESCCalibrationv+0x1c0>)
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	80bb      	strh	r3, [r7, #4]
      counter += 10;
 8006078:	88fb      	ldrh	r3, [r7, #6]
 800607a:	330a      	adds	r3, #10
 800607c:	80fb      	strh	r3, [r7, #6]
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_4_GPIO_Port, ONBOARD_BUTTON_4_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 800607e:	e7ae      	b.n	8005fde <_Z14ESCCalibrationv+0x36>
    }

    LED_ResetAll();
 8006080:	f7fe fdc2 	bl	8004c08 <_Z12LED_ResetAllv>
    counter = 0;                                                                                                          //reset counter
 8006084:	2300      	movs	r3, #0
 8006086:	80fb      	strh	r3, [r7, #6]
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);                                                                             //start PPM for main motor
 8006088:	2100      	movs	r1, #0
 800608a:	483c      	ldr	r0, [pc, #240]	; (800617c <_Z14ESCCalibrationv+0x1d4>)
 800608c:	f004 ff9a 	bl	800afc4 <HAL_TIM_PWM_Start>
    oldTime = TIM11->CNT;
 8006090:	4b35      	ldr	r3, [pc, #212]	; (8006168 <_Z14ESCCalibrationv+0x1c0>)
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	80bb      	strh	r3, [r7, #4]

    //tail-motor
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_4_GPIO_Port, ONBOARD_BUTTON_4_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 8006096:	2108      	movs	r1, #8
 8006098:	4831      	ldr	r0, [pc, #196]	; (8006160 <_Z14ESCCalibrationv+0x1b8>)
 800609a:	f002 f833 	bl	8008104 <HAL_GPIO_ReadPin>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	bf0c      	ite	eq
 80060a4:	2301      	moveq	r3, #1
 80060a6:	2300      	movne	r3, #0
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	88fb      	ldrh	r3, [r7, #6]
 80060ac:	f240 31e7 	movw	r1, #999	; 0x3e7
 80060b0:	428b      	cmp	r3, r1
 80060b2:	bf94      	ite	ls
 80060b4:	2301      	movls	r3, #1
 80060b6:	2300      	movhi	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	4313      	orrs	r3, r2
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	bf14      	ite	ne
 80060c2:	2301      	movne	r3, #1
 80060c4:	2300      	moveq	r3, #0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d044      	beq.n	8006156 <_Z14ESCCalibrationv+0x1ae>
    {
      if (SBUSNewPackage == true) SBUS_postProcessing();                                                                  //process new packets
 80060cc:	4b27      	ldr	r3, [pc, #156]	; (800616c <_Z14ESCCalibrationv+0x1c4>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <_Z14ESCCalibrationv+0x130>
 80060d4:	f7fe fc9c 	bl	8004a10 <_Z19SBUS_postProcessingv>
      TIM4->CCR1 = (uint16_t)(fastPPM_CenterTime + (SBUS_Channels[2] * PPMmainMotorScaler));                              //update motor speed
 80060d8:	4b25      	ldr	r3, [pc, #148]	; (8006170 <_Z14ESCCalibrationv+0x1c8>)
 80060da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fa fe38 	bl	8000d54 <__aeabi_i2f>
 80060e4:	4603      	mov	r3, r0
 80060e6:	4926      	ldr	r1, [pc, #152]	; (8006180 <_Z14ESCCalibrationv+0x1d8>)
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fa fe87 	bl	8000dfc <__aeabi_fmul>
 80060ee:	4603      	mov	r3, r0
 80060f0:	4924      	ldr	r1, [pc, #144]	; (8006184 <_Z14ESCCalibrationv+0x1dc>)
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fa fd7a 	bl	8000bec <__addsf3>
 80060f8:	4603      	mov	r3, r0
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fb f880 	bl	8001200 <__aeabi_f2uiz>
 8006100:	4603      	mov	r3, r0
 8006102:	b29a      	uxth	r2, r3
 8006104:	4b20      	ldr	r3, [pc, #128]	; (8006188 <_Z14ESCCalibrationv+0x1e0>)
 8006106:	635a      	str	r2, [r3, #52]	; 0x34
      LED_status_ESC2_Cal();
 8006108:	f7fe fe50 	bl	8004dac <_Z19LED_status_ESC2_Calv>

      while ((TIM11->CNT - oldTime) < 10000);                                                                             //wait for 10 milliseconds to pass
 800610c:	4b16      	ldr	r3, [pc, #88]	; (8006168 <_Z14ESCCalibrationv+0x1c0>)
 800610e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006110:	88bb      	ldrh	r3, [r7, #4]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	f242 720f 	movw	r2, #9999	; 0x270f
 8006118:	4293      	cmp	r3, r2
 800611a:	bf94      	ite	ls
 800611c:	2301      	movls	r3, #1
 800611e:	2300      	movhi	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d000      	beq.n	8006128 <_Z14ESCCalibrationv+0x180>
 8006126:	e7f1      	b.n	800610c <_Z14ESCCalibrationv+0x164>
      oldTime = TIM11->CNT;
 8006128:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <_Z14ESCCalibrationv+0x1c0>)
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	80bb      	strh	r3, [r7, #4]
      counter += 10;
 800612e:	88fb      	ldrh	r3, [r7, #6]
 8006130:	330a      	adds	r3, #10
 8006132:	80fb      	strh	r3, [r7, #6]
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_4_GPIO_Port, ONBOARD_BUTTON_4_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 8006134:	e7af      	b.n	8006096 <_Z14ESCCalibrationv+0xee>
    }
  }
  else
  {
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);                                                                             //start PPM for tail motor
 8006136:	2100      	movs	r1, #0
 8006138:	480a      	ldr	r0, [pc, #40]	; (8006164 <_Z14ESCCalibrationv+0x1bc>)
 800613a:	f004 ff43 	bl	800afc4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);                                                                             //start PPM for main motor
 800613e:	2100      	movs	r1, #0
 8006140:	480e      	ldr	r0, [pc, #56]	; (800617c <_Z14ESCCalibrationv+0x1d4>)
 8006142:	f004 ff3f 	bl	800afc4 <HAL_TIM_PWM_Start>

    TIM3->CCR1 = slowPPM1_MinTime;                                                                                        //set to 0%
 8006146:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <_Z14ESCCalibrationv+0x1d0>)
 8006148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800614c:	635a      	str	r2, [r3, #52]	; 0x34
    TIM4->CCR1 = fastPPM_MinTime;                                                                                         //set to 0%
 800614e:	4b0e      	ldr	r3, [pc, #56]	; (8006188 <_Z14ESCCalibrationv+0x1e0>)
 8006150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006154:	635a      	str	r2, [r3, #52]	; 0x34
  }
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	40020000 	.word	0x40020000
 8006164:	20000720 	.word	0x20000720
 8006168:	40014800 	.word	0x40014800
 800616c:	20000668 	.word	0x20000668
 8006170:	20000658 	.word	0x20000658
 8006174:	44bb8000 	.word	0x44bb8000
 8006178:	40000400 	.word	0x40000400
 800617c:	20000768 	.word	0x20000768
 8006180:	3e8ccccd 	.word	0x3e8ccccd
 8006184:	449f6000 	.word	0x449f6000
 8006188:	40000800 	.word	0x40000800
 800618c:	00000000 	.word	0x00000000

08006190 <_Z41__static_initialization_and_destruction_0ii>:
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b01      	cmp	r3, #1
 800619e:	f040 808e 	bne.w	80062be <_Z41__static_initialization_and_destruction_0ii+0x12e>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061a8:	4293      	cmp	r3, r2
 80061aa:	f040 8088 	bne.w	80062be <_Z41__static_initialization_and_destruction_0ii+0x12e>
float sin_OffsetAngle = sin(((float)mainMotorStartOffset * M_PI) / 180);
 80061ae:	4b48      	ldr	r3, [pc, #288]	; (80062d0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fa f974 	bl	80004a0 <__aeabi_f2d>
 80061b8:	a343      	add	r3, pc, #268	; (adr r3, 80062c8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	f7fa f9c7 	bl	8000550 <__aeabi_dmul>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4610      	mov	r0, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	f04f 0200 	mov.w	r2, #0
 80061ce:	4b41      	ldr	r3, [pc, #260]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80061d0:	f7fa fae8 	bl	80007a4 <__aeabi_ddiv>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4610      	mov	r0, r2
 80061da:	4619      	mov	r1, r3
 80061dc:	f009 fd54 	bl	800fc88 <sin>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4610      	mov	r0, r2
 80061e6:	4619      	mov	r1, r3
 80061e8:	f7fa fcaa 	bl	8000b40 <__aeabi_d2f>
 80061ec:	4603      	mov	r3, r0
 80061ee:	4a3a      	ldr	r2, [pc, #232]	; (80062d8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80061f0:	6013      	str	r3, [r2, #0]
float cos_OffsetAngle = cos(((float)mainMotorStartOffset * M_PI) / 180);
 80061f2:	4b37      	ldr	r3, [pc, #220]	; (80062d0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fa f952 	bl	80004a0 <__aeabi_f2d>
 80061fc:	a332      	add	r3, pc, #200	; (adr r3, 80062c8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	f7fa f9a5 	bl	8000550 <__aeabi_dmul>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4610      	mov	r0, r2
 800620c:	4619      	mov	r1, r3
 800620e:	f04f 0200 	mov.w	r2, #0
 8006212:	4b30      	ldr	r3, [pc, #192]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8006214:	f7fa fac6 	bl	80007a4 <__aeabi_ddiv>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	4610      	mov	r0, r2
 800621e:	4619      	mov	r1, r3
 8006220:	f009 fcf0 	bl	800fc04 <cos>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4610      	mov	r0, r2
 800622a:	4619      	mov	r1, r3
 800622c:	f7fa fc88 	bl	8000b40 <__aeabi_d2f>
 8006230:	4603      	mov	r3, r0
 8006232:	4a2a      	ldr	r2, [pc, #168]	; (80062dc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8006234:	6013      	str	r3, [r2, #0]
float sin_SkewOffset = sin((mainMotorSkewOffset * M_PI) / 180);
 8006236:	4b2a      	ldr	r3, [pc, #168]	; (80062e0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f7fa f930 	bl	80004a0 <__aeabi_f2d>
 8006240:	a321      	add	r3, pc, #132	; (adr r3, 80062c8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f7fa f983 	bl	8000550 <__aeabi_dmul>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	4610      	mov	r0, r2
 8006250:	4619      	mov	r1, r3
 8006252:	f04f 0200 	mov.w	r2, #0
 8006256:	4b1f      	ldr	r3, [pc, #124]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8006258:	f7fa faa4 	bl	80007a4 <__aeabi_ddiv>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4610      	mov	r0, r2
 8006262:	4619      	mov	r1, r3
 8006264:	f009 fd10 	bl	800fc88 <sin>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	4610      	mov	r0, r2
 800626e:	4619      	mov	r1, r3
 8006270:	f7fa fc66 	bl	8000b40 <__aeabi_d2f>
 8006274:	4603      	mov	r3, r0
 8006276:	4a1b      	ldr	r2, [pc, #108]	; (80062e4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8006278:	6013      	str	r3, [r2, #0]
float cos_SkewOffset = cos((mainMotorSkewOffset * M_PI) / 180);
 800627a:	4b19      	ldr	r3, [pc, #100]	; (80062e0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4618      	mov	r0, r3
 8006280:	f7fa f90e 	bl	80004a0 <__aeabi_f2d>
 8006284:	a310      	add	r3, pc, #64	; (adr r3, 80062c8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	f7fa f961 	bl	8000550 <__aeabi_dmul>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	4610      	mov	r0, r2
 8006294:	4619      	mov	r1, r3
 8006296:	f04f 0200 	mov.w	r2, #0
 800629a:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800629c:	f7fa fa82 	bl	80007a4 <__aeabi_ddiv>
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	4610      	mov	r0, r2
 80062a6:	4619      	mov	r1, r3
 80062a8:	f009 fcac 	bl	800fc04 <cos>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4610      	mov	r0, r2
 80062b2:	4619      	mov	r1, r3
 80062b4:	f7fa fc44 	bl	8000b40 <__aeabi_d2f>
 80062b8:	4603      	mov	r3, r0
 80062ba:	4a0b      	ldr	r2, [pc, #44]	; (80062e8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	54442d18 	.word	0x54442d18
 80062cc:	400921fb 	.word	0x400921fb
 80062d0:	20000054 	.word	0x20000054
 80062d4:	40668000 	.word	0x40668000
 80062d8:	200008d0 	.word	0x200008d0
 80062dc:	200008d4 	.word	0x200008d4
 80062e0:	200008c0 	.word	0x200008c0
 80062e4:	200008d8 	.word	0x200008d8
 80062e8:	200008dc 	.word	0x200008dc

080062ec <_GLOBAL__sub_I_adcValueChannel11>:
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80062f4:	2001      	movs	r0, #1
 80062f6:	f7ff ff4b 	bl	8006190 <_Z41__static_initialization_and_destruction_0ii>
 80062fa:	bd80      	pop	{r7, pc}

080062fc <_Z4loopv>:
#include "PID.h"

uint8_t task;

void loop()
{
 80062fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006300:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8006304:	af1c      	add	r7, sp, #112	; 0x70
  if (TIM4->CNT >= (fastPPM_Pulselength - fastPPM_calcutationTime))
 8006306:	4b42      	ldr	r3, [pc, #264]	; (8006410 <_Z4loopv+0x114>)
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800630e:	bf8c      	ite	hi
 8006310:	2301      	movhi	r3, #1
 8006312:	2300      	movls	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 81a2 	beq.w	8006660 <_Z4loopv+0x364>
  {
    updateMainMotorSpeed();   //40 us
 800631c:	f7ff f99c 	bl	8005658 <_Z20updateMainMotorSpeedv>
    getMainMotorSpeed();    //16 us
 8006320:	f7ff fc4e 	bl	8005bc0 <_Z17getMainMotorSpeedv>
    HAL_GPIO_TogglePin(ONBOARD_WRITE_3_GPIO_Port, ONBOARD_WRITE_3_Pin);
 8006324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006328:	483a      	ldr	r0, [pc, #232]	; (8006414 <_Z4loopv+0x118>)
 800632a:	f001 ff1a 	bl	8008162 <HAL_GPIO_TogglePin>
        for (size_t i = 0; i < 1; i++)
 800632e:	2300      	movs	r3, #0
 8006330:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006334:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006338:	2b00      	cmp	r3, #0
 800633a:	d128      	bne.n	800638e <_Z4loopv+0x92>
        {
          unsigned char msg[20];
	        sprintf((char*)msg,"%lu \r\n"  \
 800633c:	4b34      	ldr	r3, [pc, #208]	; (8006410 <_Z4loopv+0x114>)
          , TIM4->CCR1);                 \
 800633e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	        sprintf((char*)msg,"%lu \r\n"  \
 8006340:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8006344:	4934      	ldr	r1, [pc, #208]	; (8006418 <_Z4loopv+0x11c>)
 8006346:	4618      	mov	r0, r3
 8006348:	f00c fb0e 	bl	8012968 <siprintf>
	        uint8_t x = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
	        while (msg[x] != NULL)
 8006352:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8006356:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 800635a:	4413      	add	r3, r2
 800635c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d005      	beq.n	8006370 <_Z4loopv+0x74>
	        {
	        	x++;
 8006364:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8006368:	3301      	adds	r3, #1
 800636a:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
	        while (msg[x] != NULL)
 800636e:	e7f0      	b.n	8006352 <_Z4loopv+0x56>
	        }
	        CDC_Transmit_FS(msg, x);
 8006370:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8006374:	b29a      	uxth	r2, r3
 8006376:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800637a:	4611      	mov	r1, r2
 800637c:	4618      	mov	r0, r3
 800637e:	f009 f80f 	bl	800f3a0 <CDC_Transmit_FS>
        for (size_t i = 0; i < 1; i++)
 8006382:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006386:	3301      	adds	r3, #1
 8006388:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800638c:	e7d2      	b.n	8006334 <_Z4loopv+0x38>
        }
    HAL_GPIO_TogglePin(ONBOARD_WRITE_3_GPIO_Port, ONBOARD_WRITE_3_Pin);
 800638e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006392:	4820      	ldr	r0, [pc, #128]	; (8006414 <_Z4loopv+0x118>)
 8006394:	f001 fee5 	bl	8008162 <HAL_GPIO_TogglePin>
    switch (task)                       //execute the selected task
 8006398:	4b20      	ldr	r3, [pc, #128]	; (800641c <_Z4loopv+0x120>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b03      	cmp	r3, #3
 800639e:	f000 813b 	beq.w	8006618 <_Z4loopv+0x31c>
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	f300 813c 	bgt.w	8006620 <_Z4loopv+0x324>
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d002      	beq.n	80063b2 <_Z4loopv+0xb6>
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d025      	beq.n	80063fc <_Z4loopv+0x100>
      break;
    case 3:
      task = 0;                 //reset to task 1  (keep in mind task ++; below)
      break;
    default:
      break;
 80063b0:	e136      	b.n	8006620 <_Z4loopv+0x324>
      MPU6050_WaitForQuaternionSet();   //250 us if given 5000 us after FIFO reset
 80063b2:	f7fb fc2d 	bl	8001c10 <_Z28MPU6050_WaitForQuaternionSetv>
      MPU6050_ConvertToQuaternions();   //450 us
 80063b6:	f7fb fc47 	bl	8001c48 <_Z28MPU6050_ConvertToQuaternionsv>
      MPU6050_resetFIFO();    //180 us
 80063ba:	f7fb fc1f 	bl	8001bfc <_Z17MPU6050_resetFIFOv>
      get_XW_diffAngles();    //200 us
 80063be:	f7fd fa1b 	bl	80037f8 <_Z17get_XW_diffAnglesv>
      update_PID(); 	  //18 us
 80063c2:	f7fd fb79 	bl	8003ab8 <_Z10update_PIDv>
      updateTailMotorSpeed();   //90 us
 80063c6:	f7ff fba3 	bl	8005b10 <_Z20updateTailMotorSpeedv>
      update_FrameOriginQuaternion();   //90 us
 80063ca:	f7fb fce7 	bl	8001d9c <_Z28update_FrameOriginQuaternionv>
      if (SBUSNewPackage == true) SBUS_postProcessing();    //30 us
 80063ce:	4b14      	ldr	r3, [pc, #80]	; (8006420 <_Z4loopv+0x124>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d101      	bne.n	80063da <_Z4loopv+0xde>
 80063d6:	f7fe fb1b 	bl	8004a10 <_Z19SBUS_postProcessingv>
      switchTuningMode();   //2 us
 80063da:	f7fe fac3 	bl	8004964 <_Z16switchTuningModev>
      if (SBUS_Channels[4] == 1000)  //if the set-PID-switch on the remote is on, read the values
 80063de:	4b11      	ldr	r3, [pc, #68]	; (8006424 <_Z4loopv+0x128>)
 80063e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80063e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063e8:	d103      	bne.n	80063f2 <_Z4loopv+0xf6>
        getPIDValues();   //5 us
 80063ea:	f7fd ff2d 	bl	8004248 <_Z12getPIDValuesv>
        getAngleOffset();   //4 us
 80063ee:	f7fe f913 	bl	8004618 <_Z14getAngleOffsetv>
      getMainMotorOffset();   //65 us
 80063f2:	f7ff fd35 	bl	8005e60 <_Z18getMainMotorOffsetv>
      MainMotorDLPF();    //4 us
 80063f6:	f7ff fb53 	bl	8005aa0 <_Z13MainMotorDLPFv>
      break;
 80063fa:	e114      	b.n	8006626 <_Z4loopv+0x32a>
      if (smoothMainMotorSpeed <= motorDeadzone)    //750 us
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <_Z4loopv+0x12c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	490a      	ldr	r1, [pc, #40]	; (800642c <_Z4loopv+0x130>)
 8006402:	4618      	mov	r0, r3
 8006404:	f7fa fea2 	bl	800114c <__aeabi_fcmple>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d110      	bne.n	8006430 <_Z4loopv+0x134>
      break;
 800640e:	e109      	b.n	8006624 <_Z4loopv+0x328>
 8006410:	40000800 	.word	0x40000800
 8006414:	40020000 	.word	0x40020000
 8006418:	08014c78 	.word	0x08014c78
 800641c:	200008e0 	.word	0x200008e0
 8006420:	20000668 	.word	0x20000668
 8006424:	20000658 	.word	0x20000658
 8006428:	200008c4 	.word	0x200008c4
 800642c:	c46d8000 	.word	0xc46d8000
        for (size_t i = 0; i < 1; i++)
 8006430:	2300      	movs	r3, #0
 8006432:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006436:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800643a:	2b00      	cmp	r3, #0
 800643c:	f040 80f2 	bne.w	8006624 <_Z4loopv+0x328>
          , Pitch_PID_k[0] * 10                                                   \
 8006440:	4b8a      	ldr	r3, [pc, #552]	; (800666c <_Z4loopv+0x370>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	498a      	ldr	r1, [pc, #552]	; (8006670 <_Z4loopv+0x374>)
 8006446:	4618      	mov	r0, r3
 8006448:	f7fa fcd8 	bl	8000dfc <__aeabi_fmul>
 800644c:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"  \
 800644e:	4618      	mov	r0, r3
 8006450:	f7fa f826 	bl	80004a0 <__aeabi_f2d>
 8006454:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
          , Pitch_PID_k[1] * 10                                                   \
 8006458:	4b84      	ldr	r3, [pc, #528]	; (800666c <_Z4loopv+0x370>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	4984      	ldr	r1, [pc, #528]	; (8006670 <_Z4loopv+0x374>)
 800645e:	4618      	mov	r0, r3
 8006460:	f7fa fccc 	bl	8000dfc <__aeabi_fmul>
 8006464:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"  \
 8006466:	4618      	mov	r0, r3
 8006468:	f7fa f81a 	bl	80004a0 <__aeabi_f2d>
 800646c:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
          , Pitch_PID_k[2] * 10                                                   \
 8006470:	4b7e      	ldr	r3, [pc, #504]	; (800666c <_Z4loopv+0x370>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	497e      	ldr	r1, [pc, #504]	; (8006670 <_Z4loopv+0x374>)
 8006476:	4618      	mov	r0, r3
 8006478:	f7fa fcc0 	bl	8000dfc <__aeabi_fmul>
 800647c:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"  \
 800647e:	4618      	mov	r0, r3
 8006480:	f7fa f80e 	bl	80004a0 <__aeabi_f2d>
 8006484:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
          , Roll_PID_k[0] * 10                                                    \
 8006488:	4b7a      	ldr	r3, [pc, #488]	; (8006674 <_Z4loopv+0x378>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4978      	ldr	r1, [pc, #480]	; (8006670 <_Z4loopv+0x374>)
 800648e:	4618      	mov	r0, r3
 8006490:	f7fa fcb4 	bl	8000dfc <__aeabi_fmul>
 8006494:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"  \
 8006496:	4618      	mov	r0, r3
 8006498:	f7fa f802 	bl	80004a0 <__aeabi_f2d>
 800649c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
          , Roll_PID_k[1] * 10                                                    \
 80064a0:	4b74      	ldr	r3, [pc, #464]	; (8006674 <_Z4loopv+0x378>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	4972      	ldr	r1, [pc, #456]	; (8006670 <_Z4loopv+0x374>)
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fa fca8 	bl	8000dfc <__aeabi_fmul>
 80064ac:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"  \
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7f9 fff6 	bl	80004a0 <__aeabi_f2d>
 80064b4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
          , Roll_PID_k[2] * 10                                                    \
 80064b8:	4b6e      	ldr	r3, [pc, #440]	; (8006674 <_Z4loopv+0x378>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	496c      	ldr	r1, [pc, #432]	; (8006670 <_Z4loopv+0x374>)
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fa fc9c 	bl	8000dfc <__aeabi_fmul>
 80064c4:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"  \
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7f9 ffea 	bl	80004a0 <__aeabi_f2d>
 80064cc:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
          , Yaw_PID_k[0] * 10                                                     \
 80064d0:	4b69      	ldr	r3, [pc, #420]	; (8006678 <_Z4loopv+0x37c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4966      	ldr	r1, [pc, #408]	; (8006670 <_Z4loopv+0x374>)
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fa fc90 	bl	8000dfc <__aeabi_fmul>
 80064dc:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"  \
 80064de:	4618      	mov	r0, r3
 80064e0:	f7f9 ffde 	bl	80004a0 <__aeabi_f2d>
 80064e4:	e9c7 0108 	strd	r0, r1, [r7, #32]
          , Yaw_PID_k[1] * 10                                                     \
 80064e8:	4b63      	ldr	r3, [pc, #396]	; (8006678 <_Z4loopv+0x37c>)
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	4960      	ldr	r1, [pc, #384]	; (8006670 <_Z4loopv+0x374>)
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fa fc84 	bl	8000dfc <__aeabi_fmul>
 80064f4:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"  \
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7f9 ffd2 	bl	80004a0 <__aeabi_f2d>
 80064fc:	e9c7 0106 	strd	r0, r1, [r7, #24]
          , Yaw_PID_k[2] * 10                                                     \
 8006500:	4b5d      	ldr	r3, [pc, #372]	; (8006678 <_Z4loopv+0x37c>)
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	495a      	ldr	r1, [pc, #360]	; (8006670 <_Z4loopv+0x374>)
 8006506:	4618      	mov	r0, r3
 8006508:	f7fa fc78 	bl	8000dfc <__aeabi_fmul>
 800650c:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"  \
 800650e:	4618      	mov	r0, r3
 8006510:	f7f9 ffc6 	bl	80004a0 <__aeabi_f2d>
 8006514:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8006518:	4b58      	ldr	r3, [pc, #352]	; (800667c <_Z4loopv+0x380>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4618      	mov	r0, r3
 800651e:	f7f9 ffbf 	bl	80004a0 <__aeabi_f2d>
 8006522:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006526:	4b56      	ldr	r3, [pc, #344]	; (8006680 <_Z4loopv+0x384>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f7f9 ffb8 	bl	80004a0 <__aeabi_f2d>
 8006530:	e9c7 0100 	strd	r0, r1, [r7]
 8006534:	4b53      	ldr	r3, [pc, #332]	; (8006684 <_Z4loopv+0x388>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4618      	mov	r0, r3
 800653a:	f7f9 ffb1 	bl	80004a0 <__aeabi_f2d>
 800653e:	4682      	mov	sl, r0
 8006540:	468b      	mov	fp, r1
 8006542:	4b51      	ldr	r3, [pc, #324]	; (8006688 <_Z4loopv+0x38c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f7f9 ffaa 	bl	80004a0 <__aeabi_f2d>
 800654c:	4680      	mov	r8, r0
 800654e:	4689      	mov	r9, r1
 8006550:	4b4e      	ldr	r3, [pc, #312]	; (800668c <_Z4loopv+0x390>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4618      	mov	r0, r3
 8006556:	f7f9 ffa3 	bl	80004a0 <__aeabi_f2d>
 800655a:	4604      	mov	r4, r0
 800655c:	460d      	mov	r5, r1
 800655e:	4b4c      	ldr	r3, [pc, #304]	; (8006690 <_Z4loopv+0x394>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4618      	mov	r0, r3
 8006564:	f7f9 ff9c 	bl	80004a0 <__aeabi_f2d>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8006570:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8006574:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8006578:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 800657c:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8006580:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006584:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 8006588:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800658c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006590:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006594:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 8006598:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800659c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80065a0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80065a4:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80065a8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80065ac:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80065b0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80065b4:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80065b8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80065bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80065c0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80065c4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80065c8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80065cc:	e9cd 3400 	strd	r3, r4, [sp]
 80065d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065d4:	492f      	ldr	r1, [pc, #188]	; (8006694 <_Z4loopv+0x398>)
 80065d6:	f00c f9c7 	bl	8012968 <siprintf>
	        uint8_t x = 0;
 80065da:	2300      	movs	r3, #0
 80065dc:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	        while (msg[x] != NULL)
 80065e0:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80065e4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80065e8:	5cd3      	ldrb	r3, [r2, r3]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d005      	beq.n	80065fa <_Z4loopv+0x2fe>
	        	x++;
 80065ee:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80065f2:	3301      	adds	r3, #1
 80065f4:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	        while (msg[x] != NULL)
 80065f8:	e7f2      	b.n	80065e0 <_Z4loopv+0x2e4>
	        CDC_Transmit_FS(msg, x);
 80065fa:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80065fe:	b29a      	uxth	r2, r3
 8006600:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006604:	4611      	mov	r1, r2
 8006606:	4618      	mov	r0, r3
 8006608:	f008 feca 	bl	800f3a0 <CDC_Transmit_FS>
        for (size_t i = 0; i < 1; i++)
 800660c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8006610:	3301      	adds	r3, #1
 8006612:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006616:	e70e      	b.n	8006436 <_Z4loopv+0x13a>
      task = 0;                 //reset to task 1  (keep in mind task ++; below)
 8006618:	4b1f      	ldr	r3, [pc, #124]	; (8006698 <_Z4loopv+0x39c>)
 800661a:	2200      	movs	r2, #0
 800661c:	701a      	strb	r2, [r3, #0]
      break;
 800661e:	e002      	b.n	8006626 <_Z4loopv+0x32a>
      break;
 8006620:	bf00      	nop
 8006622:	e000      	b.n	8006626 <_Z4loopv+0x32a>
      break;
 8006624:	bf00      	nop
    }
    task ++;
 8006626:	4b1c      	ldr	r3, [pc, #112]	; (8006698 <_Z4loopv+0x39c>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	3301      	adds	r3, #1
 800662c:	b2da      	uxtb	r2, r3
 800662e:	4b1a      	ldr	r3, [pc, #104]	; (8006698 <_Z4loopv+0x39c>)
 8006630:	701a      	strb	r2, [r3, #0]

    while (TIM4->CNT > (fastPPM_Pulselength - fastPPM_calcutationTime));     //wait until TIM4 resets to 0
 8006632:	4b1a      	ldr	r3, [pc, #104]	; (800669c <_Z4loopv+0x3a0>)
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	f240 6251 	movw	r2, #1617	; 0x651
 800663a:	4293      	cmp	r3, r2
 800663c:	bf8c      	ite	hi
 800663e:	2301      	movhi	r3, #1
 8006640:	2300      	movls	r3, #0
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d000      	beq.n	800664a <_Z4loopv+0x34e>
 8006648:	e7f3      	b.n	8006632 <_Z4loopv+0x336>
    while (TIM4->CNT < (fastPPM_Pulselength - fastPPM_calcutationTime));     //wait until fastPPM_Pulselength - fastPPM_calcutationTime has passed
 800664a:	4b14      	ldr	r3, [pc, #80]	; (800669c <_Z4loopv+0x3a0>)
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8006652:	bf94      	ite	ls
 8006654:	2301      	movls	r3, #1
 8006656:	2300      	movhi	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d000      	beq.n	8006660 <_Z4loopv+0x364>
 800665e:	e7f4      	b.n	800664a <_Z4loopv+0x34e>
  }
}
 8006660:	bf00      	nop
 8006662:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8006666:	46bd      	mov	sp, r7
 8006668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800666c:	20000560 	.word	0x20000560
 8006670:	41200000 	.word	0x41200000
 8006674:	2000056c 	.word	0x2000056c
 8006678:	20000008 	.word	0x20000008
 800667c:	200008cc 	.word	0x200008cc
 8006680:	20000578 	.word	0x20000578
 8006684:	2000057c 	.word	0x2000057c
 8006688:	20000558 	.word	0x20000558
 800668c:	2000055c 	.word	0x2000055c
 8006690:	20000580 	.word	0x20000580
 8006694:	08014c80 	.word	0x08014c80
 8006698:	200008e0 	.word	0x200008e0
 800669c:	40000800 	.word	0x40000800

080066a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066a6:	2300      	movs	r3, #0
 80066a8:	607b      	str	r3, [r7, #4]
 80066aa:	4b0f      	ldr	r3, [pc, #60]	; (80066e8 <HAL_MspInit+0x48>)
 80066ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ae:	4a0e      	ldr	r2, [pc, #56]	; (80066e8 <HAL_MspInit+0x48>)
 80066b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066b4:	6453      	str	r3, [r2, #68]	; 0x44
 80066b6:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <HAL_MspInit+0x48>)
 80066b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066be:	607b      	str	r3, [r7, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80066c2:	2300      	movs	r3, #0
 80066c4:	603b      	str	r3, [r7, #0]
 80066c6:	4b08      	ldr	r3, [pc, #32]	; (80066e8 <HAL_MspInit+0x48>)
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	4a07      	ldr	r2, [pc, #28]	; (80066e8 <HAL_MspInit+0x48>)
 80066cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d0:	6413      	str	r3, [r2, #64]	; 0x40
 80066d2:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <HAL_MspInit+0x48>)
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bc80      	pop	{r7}
 80066e6:	4770      	bx	lr
 80066e8:	40023800 	.word	0x40023800

080066ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08a      	sub	sp, #40	; 0x28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066f4:	f107 0314 	add.w	r3, r7, #20
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	605a      	str	r2, [r3, #4]
 80066fe:	609a      	str	r2, [r3, #8]
 8006700:	60da      	str	r2, [r3, #12]
 8006702:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a17      	ldr	r2, [pc, #92]	; (8006768 <HAL_ADC_MspInit+0x7c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d127      	bne.n	800675e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800670e:	2300      	movs	r3, #0
 8006710:	613b      	str	r3, [r7, #16]
 8006712:	4b16      	ldr	r3, [pc, #88]	; (800676c <HAL_ADC_MspInit+0x80>)
 8006714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006716:	4a15      	ldr	r2, [pc, #84]	; (800676c <HAL_ADC_MspInit+0x80>)
 8006718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800671c:	6453      	str	r3, [r2, #68]	; 0x44
 800671e:	4b13      	ldr	r3, [pc, #76]	; (800676c <HAL_ADC_MspInit+0x80>)
 8006720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800672a:	2300      	movs	r3, #0
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	4b0f      	ldr	r3, [pc, #60]	; (800676c <HAL_ADC_MspInit+0x80>)
 8006730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006732:	4a0e      	ldr	r2, [pc, #56]	; (800676c <HAL_ADC_MspInit+0x80>)
 8006734:	f043 0304 	orr.w	r3, r3, #4
 8006738:	6313      	str	r3, [r2, #48]	; 0x30
 800673a:	4b0c      	ldr	r3, [pc, #48]	; (800676c <HAL_ADC_MspInit+0x80>)
 800673c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ONBOARD_ADC_2_Pin|ONBOARD_ADC_1_Pin;
 8006746:	2306      	movs	r3, #6
 8006748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800674a:	2303      	movs	r3, #3
 800674c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800674e:	2300      	movs	r3, #0
 8006750:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006752:	f107 0314 	add.w	r3, r7, #20
 8006756:	4619      	mov	r1, r3
 8006758:	4805      	ldr	r0, [pc, #20]	; (8006770 <HAL_ADC_MspInit+0x84>)
 800675a:	f001 fb35 	bl	8007dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800675e:	bf00      	nop
 8006760:	3728      	adds	r7, #40	; 0x28
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	40012000 	.word	0x40012000
 800676c:	40023800 	.word	0x40023800
 8006770:	40020800 	.word	0x40020800

08006774 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08a      	sub	sp, #40	; 0x28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800677c:	f107 0314 	add.w	r3, r7, #20
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	605a      	str	r2, [r3, #4]
 8006786:	609a      	str	r2, [r3, #8]
 8006788:	60da      	str	r2, [r3, #12]
 800678a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a19      	ldr	r2, [pc, #100]	; (80067f8 <HAL_I2C_MspInit+0x84>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d12c      	bne.n	80067f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006796:	2300      	movs	r3, #0
 8006798:	613b      	str	r3, [r7, #16]
 800679a:	4b18      	ldr	r3, [pc, #96]	; (80067fc <HAL_I2C_MspInit+0x88>)
 800679c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679e:	4a17      	ldr	r2, [pc, #92]	; (80067fc <HAL_I2C_MspInit+0x88>)
 80067a0:	f043 0302 	orr.w	r3, r3, #2
 80067a4:	6313      	str	r3, [r2, #48]	; 0x30
 80067a6:	4b15      	ldr	r3, [pc, #84]	; (80067fc <HAL_I2C_MspInit+0x88>)
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80067b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80067b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80067b8:	2312      	movs	r3, #18
 80067ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067bc:	2300      	movs	r3, #0
 80067be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067c0:	2303      	movs	r3, #3
 80067c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80067c4:	2304      	movs	r3, #4
 80067c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067c8:	f107 0314 	add.w	r3, r7, #20
 80067cc:	4619      	mov	r1, r3
 80067ce:	480c      	ldr	r0, [pc, #48]	; (8006800 <HAL_I2C_MspInit+0x8c>)
 80067d0:	f001 fafa 	bl	8007dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80067d4:	2300      	movs	r3, #0
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	4b08      	ldr	r3, [pc, #32]	; (80067fc <HAL_I2C_MspInit+0x88>)
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	4a07      	ldr	r2, [pc, #28]	; (80067fc <HAL_I2C_MspInit+0x88>)
 80067de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067e2:	6413      	str	r3, [r2, #64]	; 0x40
 80067e4:	4b05      	ldr	r3, [pc, #20]	; (80067fc <HAL_I2C_MspInit+0x88>)
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067ec:	60fb      	str	r3, [r7, #12]
 80067ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80067f0:	bf00      	nop
 80067f2:	3728      	adds	r7, #40	; 0x28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	40005400 	.word	0x40005400
 80067fc:	40023800 	.word	0x40023800
 8006800:	40020400 	.word	0x40020400

08006804 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a14      	ldr	r2, [pc, #80]	; (8006864 <HAL_TIM_PWM_MspInit+0x60>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d10e      	bne.n	8006834 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	4b13      	ldr	r3, [pc, #76]	; (8006868 <HAL_TIM_PWM_MspInit+0x64>)
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	4a12      	ldr	r2, [pc, #72]	; (8006868 <HAL_TIM_PWM_MspInit+0x64>)
 8006820:	f043 0302 	orr.w	r3, r3, #2
 8006824:	6413      	str	r3, [r2, #64]	; 0x40
 8006826:	4b10      	ldr	r3, [pc, #64]	; (8006868 <HAL_TIM_PWM_MspInit+0x64>)
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006832:	e012      	b.n	800685a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a0c      	ldr	r2, [pc, #48]	; (800686c <HAL_TIM_PWM_MspInit+0x68>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d10d      	bne.n	800685a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800683e:	2300      	movs	r3, #0
 8006840:	60bb      	str	r3, [r7, #8]
 8006842:	4b09      	ldr	r3, [pc, #36]	; (8006868 <HAL_TIM_PWM_MspInit+0x64>)
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	4a08      	ldr	r2, [pc, #32]	; (8006868 <HAL_TIM_PWM_MspInit+0x64>)
 8006848:	f043 0304 	orr.w	r3, r3, #4
 800684c:	6413      	str	r3, [r2, #64]	; 0x40
 800684e:	4b06      	ldr	r3, [pc, #24]	; (8006868 <HAL_TIM_PWM_MspInit+0x64>)
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	f003 0304 	and.w	r3, r3, #4
 8006856:	60bb      	str	r3, [r7, #8]
 8006858:	68bb      	ldr	r3, [r7, #8]
}
 800685a:	bf00      	nop
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	bc80      	pop	{r7}
 8006862:	4770      	bx	lr
 8006864:	40000400 	.word	0x40000400
 8006868:	40023800 	.word	0x40023800
 800686c:	40000800 	.word	0x40000800

08006870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a0a      	ldr	r2, [pc, #40]	; (80068a8 <HAL_TIM_Base_MspInit+0x38>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d10d      	bne.n	800689e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	4b09      	ldr	r3, [pc, #36]	; (80068ac <HAL_TIM_Base_MspInit+0x3c>)
 8006888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688a:	4a08      	ldr	r2, [pc, #32]	; (80068ac <HAL_TIM_Base_MspInit+0x3c>)
 800688c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006890:	6453      	str	r3, [r2, #68]	; 0x44
 8006892:	4b06      	ldr	r3, [pc, #24]	; (80068ac <HAL_TIM_Base_MspInit+0x3c>)
 8006894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800689e:	bf00      	nop
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc80      	pop	{r7}
 80068a6:	4770      	bx	lr
 80068a8:	40014800 	.word	0x40014800
 80068ac:	40023800 	.word	0x40023800

080068b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08a      	sub	sp, #40	; 0x28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068b8:	f107 0314 	add.w	r3, r7, #20
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	605a      	str	r2, [r3, #4]
 80068c2:	609a      	str	r2, [r3, #8]
 80068c4:	60da      	str	r2, [r3, #12]
 80068c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a24      	ldr	r2, [pc, #144]	; (8006960 <HAL_TIM_MspPostInit+0xb0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d11e      	bne.n	8006910 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	4b23      	ldr	r3, [pc, #140]	; (8006964 <HAL_TIM_MspPostInit+0xb4>)
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	4a22      	ldr	r2, [pc, #136]	; (8006964 <HAL_TIM_MspPostInit+0xb4>)
 80068dc:	f043 0304 	orr.w	r3, r3, #4
 80068e0:	6313      	str	r3, [r2, #48]	; 0x30
 80068e2:	4b20      	ldr	r3, [pc, #128]	; (8006964 <HAL_TIM_MspPostInit+0xb4>)
 80068e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ONBOARD_WRITE_4_Pin;
 80068ee:	2340      	movs	r3, #64	; 0x40
 80068f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f2:	2302      	movs	r3, #2
 80068f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068fa:	2300      	movs	r3, #0
 80068fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80068fe:	2302      	movs	r3, #2
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_4_GPIO_Port, &GPIO_InitStruct);
 8006902:	f107 0314 	add.w	r3, r7, #20
 8006906:	4619      	mov	r1, r3
 8006908:	4817      	ldr	r0, [pc, #92]	; (8006968 <HAL_TIM_MspPostInit+0xb8>)
 800690a:	f001 fa5d 	bl	8007dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800690e:	e022      	b.n	8006956 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a15      	ldr	r2, [pc, #84]	; (800696c <HAL_TIM_MspPostInit+0xbc>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d11d      	bne.n	8006956 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	4b11      	ldr	r3, [pc, #68]	; (8006964 <HAL_TIM_MspPostInit+0xb4>)
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006922:	4a10      	ldr	r2, [pc, #64]	; (8006964 <HAL_TIM_MspPostInit+0xb4>)
 8006924:	f043 0302 	orr.w	r3, r3, #2
 8006928:	6313      	str	r3, [r2, #48]	; 0x30
 800692a:	4b0e      	ldr	r3, [pc, #56]	; (8006964 <HAL_TIM_MspPostInit+0xb4>)
 800692c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ONBOARD_WRITE_1_Pin;
 8006936:	2340      	movs	r3, #64	; 0x40
 8006938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693a:	2302      	movs	r3, #2
 800693c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800693e:	2300      	movs	r3, #0
 8006940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006942:	2300      	movs	r3, #0
 8006944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006946:	2302      	movs	r3, #2
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_1_GPIO_Port, &GPIO_InitStruct);
 800694a:	f107 0314 	add.w	r3, r7, #20
 800694e:	4619      	mov	r1, r3
 8006950:	4807      	ldr	r0, [pc, #28]	; (8006970 <HAL_TIM_MspPostInit+0xc0>)
 8006952:	f001 fa39 	bl	8007dc8 <HAL_GPIO_Init>
}
 8006956:	bf00      	nop
 8006958:	3728      	adds	r7, #40	; 0x28
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	40000400 	.word	0x40000400
 8006964:	40023800 	.word	0x40023800
 8006968:	40020800 	.word	0x40020800
 800696c:	40000800 	.word	0x40000800
 8006970:	40020400 	.word	0x40020400

08006974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08a      	sub	sp, #40	; 0x28
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800697c:	f107 0314 	add.w	r3, r7, #20
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	605a      	str	r2, [r3, #4]
 8006986:	609a      	str	r2, [r3, #8]
 8006988:	60da      	str	r2, [r3, #12]
 800698a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a44      	ldr	r2, [pc, #272]	; (8006aa4 <HAL_UART_MspInit+0x130>)
 8006992:	4293      	cmp	r3, r2
 8006994:	f040 8081 	bne.w	8006a9a <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006998:	2300      	movs	r3, #0
 800699a:	613b      	str	r3, [r7, #16]
 800699c:	4b42      	ldr	r3, [pc, #264]	; (8006aa8 <HAL_UART_MspInit+0x134>)
 800699e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a0:	4a41      	ldr	r2, [pc, #260]	; (8006aa8 <HAL_UART_MspInit+0x134>)
 80069a2:	f043 0310 	orr.w	r3, r3, #16
 80069a6:	6453      	str	r3, [r2, #68]	; 0x44
 80069a8:	4b3f      	ldr	r3, [pc, #252]	; (8006aa8 <HAL_UART_MspInit+0x134>)
 80069aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ac:	f003 0310 	and.w	r3, r3, #16
 80069b0:	613b      	str	r3, [r7, #16]
 80069b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069b4:	2300      	movs	r3, #0
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	4b3b      	ldr	r3, [pc, #236]	; (8006aa8 <HAL_UART_MspInit+0x134>)
 80069ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069bc:	4a3a      	ldr	r2, [pc, #232]	; (8006aa8 <HAL_UART_MspInit+0x134>)
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	6313      	str	r3, [r2, #48]	; 0x30
 80069c4:	4b38      	ldr	r3, [pc, #224]	; (8006aa8 <HAL_UART_MspInit+0x134>)
 80069c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069d0:	2300      	movs	r3, #0
 80069d2:	60bb      	str	r3, [r7, #8]
 80069d4:	4b34      	ldr	r3, [pc, #208]	; (8006aa8 <HAL_UART_MspInit+0x134>)
 80069d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d8:	4a33      	ldr	r2, [pc, #204]	; (8006aa8 <HAL_UART_MspInit+0x134>)
 80069da:	f043 0302 	orr.w	r3, r3, #2
 80069de:	6313      	str	r3, [r2, #48]	; 0x30
 80069e0:	4b31      	ldr	r3, [pc, #196]	; (8006aa8 <HAL_UART_MspInit+0x134>)
 80069e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	60bb      	str	r3, [r7, #8]
 80069ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80069ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069f2:	2302      	movs	r3, #2
 80069f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069fa:	2303      	movs	r3, #3
 80069fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80069fe:	2307      	movs	r3, #7
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a02:	f107 0314 	add.w	r3, r7, #20
 8006a06:	4619      	mov	r1, r3
 8006a08:	4828      	ldr	r0, [pc, #160]	; (8006aac <HAL_UART_MspInit+0x138>)
 8006a0a:	f001 f9dd 	bl	8007dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ONBOARD_READ_4_Pin;
 8006a0e:	2380      	movs	r3, #128	; 0x80
 8006a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a12:	2302      	movs	r3, #2
 8006a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006a1e:	2307      	movs	r3, #7
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_READ_4_GPIO_Port, &GPIO_InitStruct);
 8006a22:	f107 0314 	add.w	r3, r7, #20
 8006a26:	4619      	mov	r1, r3
 8006a28:	4821      	ldr	r0, [pc, #132]	; (8006ab0 <HAL_UART_MspInit+0x13c>)
 8006a2a:	f001 f9cd 	bl	8007dc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006a2e:	4b21      	ldr	r3, [pc, #132]	; (8006ab4 <HAL_UART_MspInit+0x140>)
 8006a30:	4a21      	ldr	r2, [pc, #132]	; (8006ab8 <HAL_UART_MspInit+0x144>)
 8006a32:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006a34:	4b1f      	ldr	r3, [pc, #124]	; (8006ab4 <HAL_UART_MspInit+0x140>)
 8006a36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a3a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a3c:	4b1d      	ldr	r3, [pc, #116]	; (8006ab4 <HAL_UART_MspInit+0x140>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a42:	4b1c      	ldr	r3, [pc, #112]	; (8006ab4 <HAL_UART_MspInit+0x140>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006a48:	4b1a      	ldr	r3, [pc, #104]	; (8006ab4 <HAL_UART_MspInit+0x140>)
 8006a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a4e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a50:	4b18      	ldr	r3, [pc, #96]	; (8006ab4 <HAL_UART_MspInit+0x140>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a56:	4b17      	ldr	r3, [pc, #92]	; (8006ab4 <HAL_UART_MspInit+0x140>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006a5c:	4b15      	ldr	r3, [pc, #84]	; (8006ab4 <HAL_UART_MspInit+0x140>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006a62:	4b14      	ldr	r3, [pc, #80]	; (8006ab4 <HAL_UART_MspInit+0x140>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a68:	4b12      	ldr	r3, [pc, #72]	; (8006ab4 <HAL_UART_MspInit+0x140>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006a6e:	4811      	ldr	r0, [pc, #68]	; (8006ab4 <HAL_UART_MspInit+0x140>)
 8006a70:	f000 fdac 	bl	80075cc <HAL_DMA_Init>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8006a7a:	f7fe fde7 	bl	800564c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a0c      	ldr	r2, [pc, #48]	; (8006ab4 <HAL_UART_MspInit+0x140>)
 8006a82:	639a      	str	r2, [r3, #56]	; 0x38
 8006a84:	4a0b      	ldr	r2, [pc, #44]	; (8006ab4 <HAL_UART_MspInit+0x140>)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	2025      	movs	r0, #37	; 0x25
 8006a90:	f000 fd57 	bl	8007542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006a94:	2025      	movs	r0, #37	; 0x25
 8006a96:	f000 fd70 	bl	800757a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006a9a:	bf00      	nop
 8006a9c:	3728      	adds	r7, #40	; 0x28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	40011000 	.word	0x40011000
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	40020000 	.word	0x40020000
 8006ab0:	40020400 	.word	0x40020400
 8006ab4:	2000083c 	.word	0x2000083c
 8006ab8:	40026440 	.word	0x40026440

08006abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8006ac0:	f004 f8f2 	bl	800aca8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006ac4:	e7fe      	b.n	8006ac4 <NMI_Handler+0x8>

08006ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006aca:	e7fe      	b.n	8006aca <HardFault_Handler+0x4>

08006acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006ad0:	e7fe      	b.n	8006ad0 <MemManage_Handler+0x4>

08006ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ad6:	e7fe      	b.n	8006ad6 <BusFault_Handler+0x4>

08006ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006adc:	e7fe      	b.n	8006adc <UsageFault_Handler+0x4>

08006ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006ae2:	bf00      	nop
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bc80      	pop	{r7}
 8006ae8:	4770      	bx	lr

08006aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006aea:	b480      	push	{r7}
 8006aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006aee:	bf00      	nop
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bc80      	pop	{r7}
 8006af4:	4770      	bx	lr

08006af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006af6:	b480      	push	{r7}
 8006af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006afa:	bf00      	nop
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr

08006b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b06:	f000 f963 	bl	8006dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b0a:	bf00      	nop
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006b14:	4802      	ldr	r0, [pc, #8]	; (8006b20 <USART1_IRQHandler+0x10>)
 8006b16:	f004 ff41 	bl	800b99c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006b1a:	bf00      	nop
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	200007f8 	.word	0x200007f8

08006b24 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006b28:	4802      	ldr	r0, [pc, #8]	; (8006b34 <DMA2_Stream2_IRQHandler+0x10>)
 8006b2a:	f000 fee7 	bl	80078fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006b2e:	bf00      	nop
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	2000083c 	.word	0x2000083c

08006b38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006b3c:	4802      	ldr	r0, [pc, #8]	; (8006b48 <OTG_FS_IRQHandler+0x10>)
 8006b3e:	f002 fc26 	bl	800938e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006b42:	bf00      	nop
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20001dbc 	.word	0x20001dbc

08006b4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
	return 1;
 8006b50:	2301      	movs	r3, #1
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr

08006b5a <_kill>:

int _kill(int pid, int sig)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b082      	sub	sp, #8
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006b64:	f00b f984 	bl	8011e70 <__errno>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2216      	movs	r2, #22
 8006b6c:	601a      	str	r2, [r3, #0]
	return -1;
 8006b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <_exit>:

void _exit (int status)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006b82:	f04f 31ff 	mov.w	r1, #4294967295
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff ffe7 	bl	8006b5a <_kill>
	while (1) {}		/* Make sure we hang here */
 8006b8c:	e7fe      	b.n	8006b8c <_exit+0x12>

08006b8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b086      	sub	sp, #24
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	60f8      	str	r0, [r7, #12]
 8006b96:	60b9      	str	r1, [r7, #8]
 8006b98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	e00a      	b.n	8006bb6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006ba0:	f3af 8000 	nop.w
 8006ba4:	4601      	mov	r1, r0
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	60ba      	str	r2, [r7, #8]
 8006bac:	b2ca      	uxtb	r2, r1
 8006bae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	dbf0      	blt.n	8006ba0 <_read+0x12>
	}

return len;
 8006bbe:	687b      	ldr	r3, [r7, #4]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e009      	b.n	8006bee <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	1c5a      	adds	r2, r3, #1
 8006bde:	60ba      	str	r2, [r7, #8]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	3301      	adds	r3, #1
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	dbf1      	blt.n	8006bda <_write+0x12>
	}
	return len;
 8006bf6:	687b      	ldr	r3, [r7, #4]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <_close>:

int _close(int file)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
	return -1;
 8006c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bc80      	pop	{r7}
 8006c14:	4770      	bx	lr

08006c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c26:	605a      	str	r2, [r3, #4]
	return 0;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bc80      	pop	{r7}
 8006c32:	4770      	bx	lr

08006c34 <_isatty>:

int _isatty(int file)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
	return 1;
 8006c3c:	2301      	movs	r3, #1
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr

08006c48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
	return 0;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bc80      	pop	{r7}
 8006c5e:	4770      	bx	lr

08006c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c68:	4a14      	ldr	r2, [pc, #80]	; (8006cbc <_sbrk+0x5c>)
 8006c6a:	4b15      	ldr	r3, [pc, #84]	; (8006cc0 <_sbrk+0x60>)
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006c74:	4b13      	ldr	r3, [pc, #76]	; (8006cc4 <_sbrk+0x64>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d102      	bne.n	8006c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006c7c:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <_sbrk+0x64>)
 8006c7e:	4a12      	ldr	r2, [pc, #72]	; (8006cc8 <_sbrk+0x68>)
 8006c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c82:	4b10      	ldr	r3, [pc, #64]	; (8006cc4 <_sbrk+0x64>)
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4413      	add	r3, r2
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d207      	bcs.n	8006ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c90:	f00b f8ee 	bl	8011e70 <__errno>
 8006c94:	4603      	mov	r3, r0
 8006c96:	220c      	movs	r2, #12
 8006c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c9e:	e009      	b.n	8006cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006ca0:	4b08      	ldr	r3, [pc, #32]	; (8006cc4 <_sbrk+0x64>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006ca6:	4b07      	ldr	r3, [pc, #28]	; (8006cc4 <_sbrk+0x64>)
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4413      	add	r3, r2
 8006cae:	4a05      	ldr	r2, [pc, #20]	; (8006cc4 <_sbrk+0x64>)
 8006cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	20020000 	.word	0x20020000
 8006cc0:	00000400 	.word	0x00000400
 8006cc4:	200008e4 	.word	0x200008e4
 8006cc8:	200021d0 	.word	0x200021d0

08006ccc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006cd0:	bf00      	nop
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bc80      	pop	{r7}
 8006cd6:	4770      	bx	lr

08006cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006cdc:	480d      	ldr	r0, [pc, #52]	; (8006d14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006cde:	490e      	ldr	r1, [pc, #56]	; (8006d18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006ce0:	4a0e      	ldr	r2, [pc, #56]	; (8006d1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ce4:	e002      	b.n	8006cec <LoopCopyDataInit>

08006ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006cea:	3304      	adds	r3, #4

08006cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006cf0:	d3f9      	bcc.n	8006ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006cf2:	4a0b      	ldr	r2, [pc, #44]	; (8006d20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006cf4:	4c0b      	ldr	r4, [pc, #44]	; (8006d24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006cf8:	e001      	b.n	8006cfe <LoopFillZerobss>

08006cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006cfc:	3204      	adds	r2, #4

08006cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d00:	d3fb      	bcc.n	8006cfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006d02:	f7ff ffe3 	bl	8006ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d06:	f00b f8b9 	bl	8011e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d0a:	f7fe f97d 	bl	8005008 <main>
  bx  lr    
 8006d0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006d10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d18:	200003b0 	.word	0x200003b0
  ldr r2, =_sidata
 8006d1c:	08015f5c 	.word	0x08015f5c
  ldr r2, =_sbss
 8006d20:	200003b0 	.word	0x200003b0
  ldr r4, =_ebss
 8006d24:	200021cc 	.word	0x200021cc

08006d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d28:	e7fe      	b.n	8006d28 <ADC_IRQHandler>
	...

08006d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d30:	4b0e      	ldr	r3, [pc, #56]	; (8006d6c <HAL_Init+0x40>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a0d      	ldr	r2, [pc, #52]	; (8006d6c <HAL_Init+0x40>)
 8006d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8006d3c:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <HAL_Init+0x40>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <HAL_Init+0x40>)
 8006d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d48:	4b08      	ldr	r3, [pc, #32]	; (8006d6c <HAL_Init+0x40>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a07      	ldr	r2, [pc, #28]	; (8006d6c <HAL_Init+0x40>)
 8006d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d54:	2003      	movs	r0, #3
 8006d56:	f000 fbe9 	bl	800752c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d5a:	200f      	movs	r0, #15
 8006d5c:	f000 f808 	bl	8006d70 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006d60:	f7ff fc9e 	bl	80066a0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40023c00 	.word	0x40023c00

08006d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d78:	4b12      	ldr	r3, [pc, #72]	; (8006dc4 <HAL_InitTick+0x54>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	4b12      	ldr	r3, [pc, #72]	; (8006dc8 <HAL_InitTick+0x58>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	4619      	mov	r1, r3
 8006d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fc0f 	bl	80075b2 <HAL_SYSTICK_Config>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e00e      	b.n	8006dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b0f      	cmp	r3, #15
 8006da2:	d80a      	bhi.n	8006dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006da4:	2200      	movs	r2, #0
 8006da6:	6879      	ldr	r1, [r7, #4]
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dac:	f000 fbc9 	bl	8007542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006db0:	4a06      	ldr	r2, [pc, #24]	; (8006dcc <HAL_InitTick+0x5c>)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	e000      	b.n	8006dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	2000005c 	.word	0x2000005c
 8006dc8:	20000064 	.word	0x20000064
 8006dcc:	20000060 	.word	0x20000060

08006dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006dd4:	4b05      	ldr	r3, [pc, #20]	; (8006dec <HAL_IncTick+0x1c>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <HAL_IncTick+0x20>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4413      	add	r3, r2
 8006de0:	4a03      	ldr	r2, [pc, #12]	; (8006df0 <HAL_IncTick+0x20>)
 8006de2:	6013      	str	r3, [r2, #0]
}
 8006de4:	bf00      	nop
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr
 8006dec:	20000064 	.word	0x20000064
 8006df0:	200008f4 	.word	0x200008f4

08006df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006df4:	b480      	push	{r7}
 8006df6:	af00      	add	r7, sp, #0
  return uwTick;
 8006df8:	4b02      	ldr	r3, [pc, #8]	; (8006e04 <HAL_GetTick+0x10>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bc80      	pop	{r7}
 8006e02:	4770      	bx	lr
 8006e04:	200008f4 	.word	0x200008f4

08006e08 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006e10:	f7ff fff0 	bl	8006df4 <HAL_GetTick>
 8006e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e20:	d005      	beq.n	8006e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e22:	4b0a      	ldr	r3, [pc, #40]	; (8006e4c <HAL_Delay+0x44>)
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006e2e:	bf00      	nop
 8006e30:	f7ff ffe0 	bl	8006df4 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d8f7      	bhi.n	8006e30 <HAL_Delay+0x28>
  {
  }
}
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000064 	.word	0x20000064

08006e50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e033      	b.n	8006ece <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d109      	bne.n	8006e82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff fc3c 	bl	80066ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	f003 0310 	and.w	r3, r3, #16
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d118      	bne.n	8006ec0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006e96:	f023 0302 	bic.w	r3, r3, #2
 8006e9a:	f043 0202 	orr.w	r2, r3, #2
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f94c 	bl	8007140 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	f023 0303 	bic.w	r3, r3, #3
 8006eb6:	f043 0201 	orr.w	r2, r3, #1
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	641a      	str	r2, [r3, #64]	; 0x40
 8006ebe:	e001      	b.n	8006ec4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
	...

08006ed8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_ADC_Start+0x1a>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e095      	b.n	800701e <HAL_ADC_Start+0x146>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d018      	beq.n	8006f3a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0201 	orr.w	r2, r2, #1
 8006f16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006f18:	4b43      	ldr	r3, [pc, #268]	; (8007028 <HAL_ADC_Start+0x150>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a43      	ldr	r2, [pc, #268]	; (800702c <HAL_ADC_Start+0x154>)
 8006f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f22:	0c9a      	lsrs	r2, r3, #18
 8006f24:	4613      	mov	r3, r2
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	4413      	add	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8006f2c:	e002      	b.n	8006f34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f9      	bne.n	8006f2e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d15d      	bne.n	8007004 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006f50:	f023 0301 	bic.w	r3, r3, #1
 8006f54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d007      	beq.n	8006f7a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006f72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f86:	d106      	bne.n	8006f96 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8c:	f023 0206 	bic.w	r2, r3, #6
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	645a      	str	r2, [r3, #68]	; 0x44
 8006f94:	e002      	b.n	8006f9c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006fac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006fae:	4b20      	ldr	r3, [pc, #128]	; (8007030 <HAL_ADC_Start+0x158>)
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f003 031f 	and.w	r3, r3, #31
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10f      	bne.n	8006fda <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d129      	bne.n	800701c <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689a      	ldr	r2, [r3, #8]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006fd6:	609a      	str	r2, [r3, #8]
 8006fd8:	e020      	b.n	800701c <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a15      	ldr	r2, [pc, #84]	; (8007034 <HAL_ADC_Start+0x15c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d11b      	bne.n	800701c <HAL_ADC_Start+0x144>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d114      	bne.n	800701c <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007000:	609a      	str	r2, [r3, #8]
 8007002:	e00b      	b.n	800701c <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	f043 0210 	orr.w	r2, r3, #16
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007014:	f043 0201 	orr.w	r2, r3, #1
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	bc80      	pop	{r7}
 8007026:	4770      	bx	lr
 8007028:	2000005c 	.word	0x2000005c
 800702c:	431bde83 	.word	0x431bde83
 8007030:	40012300 	.word	0x40012300
 8007034:	40012000 	.word	0x40012000

08007038 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007054:	d113      	bne.n	800707e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007064:	d10b      	bne.n	800707e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706a:	f043 0220 	orr.w	r2, r3, #32
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e05c      	b.n	8007138 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800707e:	f7ff feb9 	bl	8006df4 <HAL_GetTick>
 8007082:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007084:	e01a      	b.n	80070bc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708c:	d016      	beq.n	80070bc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d007      	beq.n	80070a4 <HAL_ADC_PollForConversion+0x6c>
 8007094:	f7ff feae 	bl	8006df4 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d20b      	bcs.n	80070bc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a8:	f043 0204 	orr.w	r2, r3, #4
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e03d      	b.n	8007138 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d1dd      	bne.n	8007086 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f06f 0212 	mvn.w	r2, #18
 80070d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d123      	bne.n	8007136 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d11f      	bne.n	8007136 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007100:	2b00      	cmp	r3, #0
 8007102:	d006      	beq.n	8007112 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800710e:	2b00      	cmp	r3, #0
 8007110:	d111      	bne.n	8007136 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d105      	bne.n	8007136 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	f043 0201 	orr.w	r2, r3, #1
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007148:	4b7e      	ldr	r3, [pc, #504]	; (8007344 <ADC_Init+0x204>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	4a7d      	ldr	r2, [pc, #500]	; (8007344 <ADC_Init+0x204>)
 800714e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007152:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007154:	4b7b      	ldr	r3, [pc, #492]	; (8007344 <ADC_Init+0x204>)
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	4979      	ldr	r1, [pc, #484]	; (8007344 <ADC_Init+0x204>)
 800715e:	4313      	orrs	r3, r2
 8007160:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007170:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6859      	ldr	r1, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	021a      	lsls	r2, r3, #8
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007194:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6859      	ldr	r1, [r3, #4]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689a      	ldr	r2, [r3, #8]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6899      	ldr	r1, [r3, #8]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	4a5e      	ldr	r2, [pc, #376]	; (8007348 <ADC_Init+0x208>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d022      	beq.n	800721a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80071e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6899      	ldr	r1, [r3, #8]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689a      	ldr	r2, [r3, #8]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007204:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6899      	ldr	r1, [r3, #8]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	609a      	str	r2, [r3, #8]
 8007218:	e00f      	b.n	800723a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007228:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689a      	ldr	r2, [r3, #8]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007238:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 0202 	bic.w	r2, r2, #2
 8007248:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6899      	ldr	r1, [r3, #8]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	7e1b      	ldrb	r3, [r3, #24]
 8007254:	005a      	lsls	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d027      	beq.n	80072b8 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007276:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007286:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	3b01      	subs	r3, #1
 800728e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8007292:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	fa92 f2a2 	rbit	r2, r2
 800729a:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	fab2 f282 	clz	r2, r2
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	fa03 f102 	lsl.w	r1, r3, r2
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	605a      	str	r2, [r3, #4]
 80072b6:	e007      	b.n	80072c8 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80072d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	051a      	lsls	r2, r3, #20
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	689a      	ldr	r2, [r3, #8]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80072fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6899      	ldr	r1, [r3, #8]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800730a:	025a      	lsls	r2, r3, #9
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007322:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6899      	ldr	r1, [r3, #8]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	029a      	lsls	r2, r3, #10
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	609a      	str	r2, [r3, #8]
}
 8007338:	bf00      	nop
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	bc80      	pop	{r7}
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	40012300 	.word	0x40012300
 8007348:	0f000001 	.word	0x0f000001

0800734c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800735c:	4b0c      	ldr	r3, [pc, #48]	; (8007390 <__NVIC_SetPriorityGrouping+0x44>)
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007368:	4013      	ands	r3, r2
 800736a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800737c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800737e:	4a04      	ldr	r2, [pc, #16]	; (8007390 <__NVIC_SetPriorityGrouping+0x44>)
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	60d3      	str	r3, [r2, #12]
}
 8007384:	bf00      	nop
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	bc80      	pop	{r7}
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	e000ed00 	.word	0xe000ed00

08007394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007398:	4b04      	ldr	r3, [pc, #16]	; (80073ac <__NVIC_GetPriorityGrouping+0x18>)
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	0a1b      	lsrs	r3, r3, #8
 800739e:	f003 0307 	and.w	r3, r3, #7
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bc80      	pop	{r7}
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	e000ed00 	.word	0xe000ed00

080073b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	4603      	mov	r3, r0
 80073b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	db0b      	blt.n	80073da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073c2:	79fb      	ldrb	r3, [r7, #7]
 80073c4:	f003 021f 	and.w	r2, r3, #31
 80073c8:	4906      	ldr	r1, [pc, #24]	; (80073e4 <__NVIC_EnableIRQ+0x34>)
 80073ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ce:	095b      	lsrs	r3, r3, #5
 80073d0:	2001      	movs	r0, #1
 80073d2:	fa00 f202 	lsl.w	r2, r0, r2
 80073d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	bc80      	pop	{r7}
 80073e2:	4770      	bx	lr
 80073e4:	e000e100 	.word	0xe000e100

080073e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	4603      	mov	r3, r0
 80073f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	db12      	blt.n	8007420 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	f003 021f 	and.w	r2, r3, #31
 8007400:	490a      	ldr	r1, [pc, #40]	; (800742c <__NVIC_DisableIRQ+0x44>)
 8007402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007406:	095b      	lsrs	r3, r3, #5
 8007408:	2001      	movs	r0, #1
 800740a:	fa00 f202 	lsl.w	r2, r0, r2
 800740e:	3320      	adds	r3, #32
 8007410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007414:	f3bf 8f4f 	dsb	sy
}
 8007418:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800741a:	f3bf 8f6f 	isb	sy
}
 800741e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	bc80      	pop	{r7}
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	e000e100 	.word	0xe000e100

08007430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	6039      	str	r1, [r7, #0]
 800743a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800743c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007440:	2b00      	cmp	r3, #0
 8007442:	db0a      	blt.n	800745a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	b2da      	uxtb	r2, r3
 8007448:	490c      	ldr	r1, [pc, #48]	; (800747c <__NVIC_SetPriority+0x4c>)
 800744a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800744e:	0112      	lsls	r2, r2, #4
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	440b      	add	r3, r1
 8007454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007458:	e00a      	b.n	8007470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	b2da      	uxtb	r2, r3
 800745e:	4908      	ldr	r1, [pc, #32]	; (8007480 <__NVIC_SetPriority+0x50>)
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	f003 030f 	and.w	r3, r3, #15
 8007466:	3b04      	subs	r3, #4
 8007468:	0112      	lsls	r2, r2, #4
 800746a:	b2d2      	uxtb	r2, r2
 800746c:	440b      	add	r3, r1
 800746e:	761a      	strb	r2, [r3, #24]
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	bc80      	pop	{r7}
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	e000e100 	.word	0xe000e100
 8007480:	e000ed00 	.word	0xe000ed00

08007484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007484:	b480      	push	{r7}
 8007486:	b089      	sub	sp, #36	; 0x24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	f1c3 0307 	rsb	r3, r3, #7
 800749e:	2b04      	cmp	r3, #4
 80074a0:	bf28      	it	cs
 80074a2:	2304      	movcs	r3, #4
 80074a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	3304      	adds	r3, #4
 80074aa:	2b06      	cmp	r3, #6
 80074ac:	d902      	bls.n	80074b4 <NVIC_EncodePriority+0x30>
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	3b03      	subs	r3, #3
 80074b2:	e000      	b.n	80074b6 <NVIC_EncodePriority+0x32>
 80074b4:	2300      	movs	r3, #0
 80074b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074b8:	f04f 32ff 	mov.w	r2, #4294967295
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	fa02 f303 	lsl.w	r3, r2, r3
 80074c2:	43da      	mvns	r2, r3
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	401a      	ands	r2, r3
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074cc:	f04f 31ff 	mov.w	r1, #4294967295
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	fa01 f303 	lsl.w	r3, r1, r3
 80074d6:	43d9      	mvns	r1, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074dc:	4313      	orrs	r3, r2
         );
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3724      	adds	r7, #36	; 0x24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bc80      	pop	{r7}
 80074e6:	4770      	bx	lr

080074e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074f8:	d301      	bcc.n	80074fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80074fa:	2301      	movs	r3, #1
 80074fc:	e00f      	b.n	800751e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80074fe:	4a0a      	ldr	r2, [pc, #40]	; (8007528 <SysTick_Config+0x40>)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3b01      	subs	r3, #1
 8007504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007506:	210f      	movs	r1, #15
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	f7ff ff90 	bl	8007430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007510:	4b05      	ldr	r3, [pc, #20]	; (8007528 <SysTick_Config+0x40>)
 8007512:	2200      	movs	r2, #0
 8007514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007516:	4b04      	ldr	r3, [pc, #16]	; (8007528 <SysTick_Config+0x40>)
 8007518:	2207      	movs	r2, #7
 800751a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	e000e010 	.word	0xe000e010

0800752c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff ff09 	bl	800734c <__NVIC_SetPriorityGrouping>
}
 800753a:	bf00      	nop
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007542:	b580      	push	{r7, lr}
 8007544:	b086      	sub	sp, #24
 8007546:	af00      	add	r7, sp, #0
 8007548:	4603      	mov	r3, r0
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	607a      	str	r2, [r7, #4]
 800754e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007554:	f7ff ff1e 	bl	8007394 <__NVIC_GetPriorityGrouping>
 8007558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	68b9      	ldr	r1, [r7, #8]
 800755e:	6978      	ldr	r0, [r7, #20]
 8007560:	f7ff ff90 	bl	8007484 <NVIC_EncodePriority>
 8007564:	4602      	mov	r2, r0
 8007566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800756a:	4611      	mov	r1, r2
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff ff5f 	bl	8007430 <__NVIC_SetPriority>
}
 8007572:	bf00      	nop
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b082      	sub	sp, #8
 800757e:	af00      	add	r7, sp, #0
 8007580:	4603      	mov	r3, r0
 8007582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff ff11 	bl	80073b0 <__NVIC_EnableIRQ>
}
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	4603      	mov	r3, r0
 800759e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80075a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff ff1f 	bl	80073e8 <__NVIC_DisableIRQ>
}
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff ff94 	bl	80074e8 <SysTick_Config>
 80075c0:	4603      	mov	r3, r0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80075d8:	f7ff fc0c 	bl	8006df4 <HAL_GetTick>
 80075dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e099      	b.n	800771c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 0201 	bic.w	r2, r2, #1
 8007606:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007608:	e00f      	b.n	800762a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800760a:	f7ff fbf3 	bl	8006df4 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2b05      	cmp	r3, #5
 8007616:	d908      	bls.n	800762a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2220      	movs	r2, #32
 800761c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2203      	movs	r2, #3
 8007622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e078      	b.n	800771c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1e8      	bne.n	800760a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	4b38      	ldr	r3, [pc, #224]	; (8007724 <HAL_DMA_Init+0x158>)
 8007644:	4013      	ands	r3, r2
 8007646:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007656:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800766e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	4313      	orrs	r3, r2
 800767a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	2b04      	cmp	r3, #4
 8007682:	d107      	bne.n	8007694 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768c:	4313      	orrs	r3, r2
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f023 0307 	bic.w	r3, r3, #7
 80076aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d117      	bne.n	80076ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00e      	beq.n	80076ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 faff 	bl	8007cd4 <DMA_CheckFifoParam>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d008      	beq.n	80076ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2240      	movs	r2, #64	; 0x40
 80076e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80076ea:	2301      	movs	r3, #1
 80076ec:	e016      	b.n	800771c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fab8 	bl	8007c6c <DMA_CalcBaseAndBitshift>
 80076fc:	4603      	mov	r3, r0
 80076fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007704:	223f      	movs	r2, #63	; 0x3f
 8007706:	409a      	lsls	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	f010803f 	.word	0xf010803f

08007728 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
 8007734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007746:	2b01      	cmp	r3, #1
 8007748:	d101      	bne.n	800774e <HAL_DMA_Start_IT+0x26>
 800774a:	2302      	movs	r3, #2
 800774c:	e040      	b.n	80077d0 <HAL_DMA_Start_IT+0xa8>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b01      	cmp	r3, #1
 8007760:	d12f      	bne.n	80077c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2202      	movs	r2, #2
 8007766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	68b9      	ldr	r1, [r7, #8]
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 fa4a 	bl	8007c10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007780:	223f      	movs	r2, #63	; 0x3f
 8007782:	409a      	lsls	r2, r3
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0216 	orr.w	r2, r2, #22
 8007796:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779c:	2b00      	cmp	r3, #0
 800779e:	d007      	beq.n	80077b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0208 	orr.w	r2, r2, #8
 80077ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f042 0201 	orr.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	e005      	b.n	80077ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80077ca:	2302      	movs	r3, #2
 80077cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80077e6:	f7ff fb05 	bl	8006df4 <HAL_GetTick>
 80077ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d008      	beq.n	800780a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2280      	movs	r2, #128	; 0x80
 80077fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e052      	b.n	80078b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 0216 	bic.w	r2, r2, #22
 8007818:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	695a      	ldr	r2, [r3, #20]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007828:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	2b00      	cmp	r3, #0
 8007830:	d103      	bne.n	800783a <HAL_DMA_Abort+0x62>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007836:	2b00      	cmp	r3, #0
 8007838:	d007      	beq.n	800784a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0208 	bic.w	r2, r2, #8
 8007848:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 0201 	bic.w	r2, r2, #1
 8007858:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800785a:	e013      	b.n	8007884 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800785c:	f7ff faca 	bl	8006df4 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b05      	cmp	r3, #5
 8007868:	d90c      	bls.n	8007884 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2220      	movs	r2, #32
 800786e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2203      	movs	r2, #3
 8007874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e015      	b.n	80078b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e4      	bne.n	800785c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007896:	223f      	movs	r2, #63	; 0x3f
 8007898:	409a      	lsls	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d004      	beq.n	80078d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2280      	movs	r2, #128	; 0x80
 80078d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e00c      	b.n	80078f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2205      	movs	r2, #5
 80078da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0201 	bic.w	r2, r2, #1
 80078ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bc80      	pop	{r7}
 80078f8:	4770      	bx	lr
	...

080078fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007904:	2300      	movs	r3, #0
 8007906:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007908:	4b92      	ldr	r3, [pc, #584]	; (8007b54 <HAL_DMA_IRQHandler+0x258>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a92      	ldr	r2, [pc, #584]	; (8007b58 <HAL_DMA_IRQHandler+0x25c>)
 800790e:	fba2 2303 	umull	r2, r3, r2, r3
 8007912:	0a9b      	lsrs	r3, r3, #10
 8007914:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007926:	2208      	movs	r2, #8
 8007928:	409a      	lsls	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4013      	ands	r3, r2
 800792e:	2b00      	cmp	r3, #0
 8007930:	d01a      	beq.n	8007968 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0304 	and.w	r3, r3, #4
 800793c:	2b00      	cmp	r3, #0
 800793e:	d013      	beq.n	8007968 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f022 0204 	bic.w	r2, r2, #4
 800794e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007954:	2208      	movs	r2, #8
 8007956:	409a      	lsls	r2, r3
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007960:	f043 0201 	orr.w	r2, r3, #1
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800796c:	2201      	movs	r2, #1
 800796e:	409a      	lsls	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4013      	ands	r3, r2
 8007974:	2b00      	cmp	r3, #0
 8007976:	d012      	beq.n	800799e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00b      	beq.n	800799e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800798a:	2201      	movs	r2, #1
 800798c:	409a      	lsls	r2, r3
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007996:	f043 0202 	orr.w	r2, r3, #2
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a2:	2204      	movs	r2, #4
 80079a4:	409a      	lsls	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4013      	ands	r3, r2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d012      	beq.n	80079d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00b      	beq.n	80079d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c0:	2204      	movs	r2, #4
 80079c2:	409a      	lsls	r2, r3
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079cc:	f043 0204 	orr.w	r2, r3, #4
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d8:	2210      	movs	r2, #16
 80079da:	409a      	lsls	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4013      	ands	r3, r2
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d043      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0308 	and.w	r3, r3, #8
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d03c      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f6:	2210      	movs	r2, #16
 80079f8:	409a      	lsls	r2, r3
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d018      	beq.n	8007a3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d108      	bne.n	8007a2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d024      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	4798      	blx	r3
 8007a2a:	e01f      	b.n	8007a6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d01b      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	4798      	blx	r3
 8007a3c:	e016      	b.n	8007a6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d107      	bne.n	8007a5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f022 0208 	bic.w	r2, r2, #8
 8007a5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d003      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a70:	2220      	movs	r2, #32
 8007a72:	409a      	lsls	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	4013      	ands	r3, r2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 808e 	beq.w	8007b9a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0310 	and.w	r3, r3, #16
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 8086 	beq.w	8007b9a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a92:	2220      	movs	r2, #32
 8007a94:	409a      	lsls	r2, r3
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b05      	cmp	r3, #5
 8007aa4:	d136      	bne.n	8007b14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0216 	bic.w	r2, r2, #22
 8007ab4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	695a      	ldr	r2, [r3, #20]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ac4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d103      	bne.n	8007ad6 <HAL_DMA_IRQHandler+0x1da>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d007      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f022 0208 	bic.w	r2, r2, #8
 8007ae4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aea:	223f      	movs	r2, #63	; 0x3f
 8007aec:	409a      	lsls	r2, r3
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d07d      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	4798      	blx	r3
        }
        return;
 8007b12:	e078      	b.n	8007c06 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d01c      	beq.n	8007b5c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d108      	bne.n	8007b42 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d030      	beq.n	8007b9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	4798      	blx	r3
 8007b40:	e02b      	b.n	8007b9a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d027      	beq.n	8007b9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
 8007b52:	e022      	b.n	8007b9a <HAL_DMA_IRQHandler+0x29e>
 8007b54:	2000005c 	.word	0x2000005c
 8007b58:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10f      	bne.n	8007b8a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f022 0210 	bic.w	r2, r2, #16
 8007b78:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d032      	beq.n	8007c08 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d022      	beq.n	8007bf4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2205      	movs	r2, #5
 8007bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 0201 	bic.w	r2, r2, #1
 8007bc4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	60bb      	str	r3, [r7, #8]
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d307      	bcc.n	8007be2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1f2      	bne.n	8007bc6 <HAL_DMA_IRQHandler+0x2ca>
 8007be0:	e000      	b.n	8007be4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007be2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d005      	beq.n	8007c08 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	4798      	blx	r3
 8007c04:	e000      	b.n	8007c08 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007c06:	bf00      	nop
    }
  }
}
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop

08007c10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	2b40      	cmp	r3, #64	; 0x40
 8007c3c:	d108      	bne.n	8007c50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007c4e:	e007      	b.n	8007c60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	60da      	str	r2, [r3, #12]
}
 8007c60:	bf00      	nop
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bc80      	pop	{r7}
 8007c68:	4770      	bx	lr
	...

08007c6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	3b10      	subs	r3, #16
 8007c7c:	4a13      	ldr	r2, [pc, #76]	; (8007ccc <DMA_CalcBaseAndBitshift+0x60>)
 8007c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c82:	091b      	lsrs	r3, r3, #4
 8007c84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007c86:	4a12      	ldr	r2, [pc, #72]	; (8007cd0 <DMA_CalcBaseAndBitshift+0x64>)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d909      	bls.n	8007cae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007ca2:	f023 0303 	bic.w	r3, r3, #3
 8007ca6:	1d1a      	adds	r2, r3, #4
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	659a      	str	r2, [r3, #88]	; 0x58
 8007cac:	e007      	b.n	8007cbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007cb6:	f023 0303 	bic.w	r3, r3, #3
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bc80      	pop	{r7}
 8007cca:	4770      	bx	lr
 8007ccc:	aaaaaaab 	.word	0xaaaaaaab
 8007cd0:	0801558c 	.word	0x0801558c

08007cd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d11f      	bne.n	8007d2e <DMA_CheckFifoParam+0x5a>
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d856      	bhi.n	8007da2 <DMA_CheckFifoParam+0xce>
 8007cf4:	a201      	add	r2, pc, #4	; (adr r2, 8007cfc <DMA_CheckFifoParam+0x28>)
 8007cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfa:	bf00      	nop
 8007cfc:	08007d0d 	.word	0x08007d0d
 8007d00:	08007d1f 	.word	0x08007d1f
 8007d04:	08007d0d 	.word	0x08007d0d
 8007d08:	08007da3 	.word	0x08007da3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d046      	beq.n	8007da6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d1c:	e043      	b.n	8007da6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d26:	d140      	bne.n	8007daa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d2c:	e03d      	b.n	8007daa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d36:	d121      	bne.n	8007d7c <DMA_CheckFifoParam+0xa8>
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d837      	bhi.n	8007dae <DMA_CheckFifoParam+0xda>
 8007d3e:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <DMA_CheckFifoParam+0x70>)
 8007d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d44:	08007d55 	.word	0x08007d55
 8007d48:	08007d5b 	.word	0x08007d5b
 8007d4c:	08007d55 	.word	0x08007d55
 8007d50:	08007d6d 	.word	0x08007d6d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	73fb      	strb	r3, [r7, #15]
      break;
 8007d58:	e030      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d025      	beq.n	8007db2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d6a:	e022      	b.n	8007db2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d74:	d11f      	bne.n	8007db6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007d7a:	e01c      	b.n	8007db6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d903      	bls.n	8007d8a <DMA_CheckFifoParam+0xb6>
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d003      	beq.n	8007d90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007d88:	e018      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d8e:	e015      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00e      	beq.n	8007dba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007da0:	e00b      	b.n	8007dba <DMA_CheckFifoParam+0xe6>
      break;
 8007da2:	bf00      	nop
 8007da4:	e00a      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
      break;
 8007da6:	bf00      	nop
 8007da8:	e008      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
      break;
 8007daa:	bf00      	nop
 8007dac:	e006      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
      break;
 8007dae:	bf00      	nop
 8007db0:	e004      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
      break;
 8007db2:	bf00      	nop
 8007db4:	e002      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
      break;   
 8007db6:	bf00      	nop
 8007db8:	e000      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
      break;
 8007dba:	bf00      	nop
    }
  } 
  
  return status; 
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bc80      	pop	{r7}
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007dd6:	e16f      	b.n	80080b8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	2101      	movs	r1, #1
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	fa01 f303 	lsl.w	r3, r1, r3
 8007de4:	4013      	ands	r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 8161 	beq.w	80080b2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f003 0303 	and.w	r3, r3, #3
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d005      	beq.n	8007e08 <HAL_GPIO_Init+0x40>
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f003 0303 	and.w	r3, r3, #3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d130      	bne.n	8007e6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	2203      	movs	r2, #3
 8007e14:	fa02 f303 	lsl.w	r3, r2, r3
 8007e18:	43db      	mvns	r3, r3
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	68da      	ldr	r2, [r3, #12]
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e3e:	2201      	movs	r2, #1
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	fa02 f303 	lsl.w	r3, r2, r3
 8007e46:	43db      	mvns	r3, r3
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	091b      	lsrs	r3, r3, #4
 8007e54:	f003 0201 	and.w	r2, r3, #1
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f003 0303 	and.w	r3, r3, #3
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d017      	beq.n	8007ea6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	005b      	lsls	r3, r3, #1
 8007e80:	2203      	movs	r2, #3
 8007e82:	fa02 f303 	lsl.w	r3, r2, r3
 8007e86:	43db      	mvns	r3, r3
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f003 0303 	and.w	r3, r3, #3
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d123      	bne.n	8007efa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	08da      	lsrs	r2, r3, #3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3208      	adds	r2, #8
 8007eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	220f      	movs	r2, #15
 8007eca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ece:	43db      	mvns	r3, r3
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	691a      	ldr	r2, [r3, #16]
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	08da      	lsrs	r2, r3, #3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3208      	adds	r2, #8
 8007ef4:	6939      	ldr	r1, [r7, #16]
 8007ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	005b      	lsls	r3, r3, #1
 8007f04:	2203      	movs	r2, #3
 8007f06:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0a:	43db      	mvns	r3, r3
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	4013      	ands	r3, r2
 8007f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f003 0203 	and.w	r2, r3, #3
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 80bb 	beq.w	80080b2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60bb      	str	r3, [r7, #8]
 8007f40:	4b64      	ldr	r3, [pc, #400]	; (80080d4 <HAL_GPIO_Init+0x30c>)
 8007f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f44:	4a63      	ldr	r2, [pc, #396]	; (80080d4 <HAL_GPIO_Init+0x30c>)
 8007f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f4a:	6453      	str	r3, [r2, #68]	; 0x44
 8007f4c:	4b61      	ldr	r3, [pc, #388]	; (80080d4 <HAL_GPIO_Init+0x30c>)
 8007f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f54:	60bb      	str	r3, [r7, #8]
 8007f56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007f58:	4a5f      	ldr	r2, [pc, #380]	; (80080d8 <HAL_GPIO_Init+0x310>)
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	089b      	lsrs	r3, r3, #2
 8007f5e:	3302      	adds	r3, #2
 8007f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f003 0303 	and.w	r3, r3, #3
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	220f      	movs	r2, #15
 8007f70:	fa02 f303 	lsl.w	r3, r2, r3
 8007f74:	43db      	mvns	r3, r3
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	4013      	ands	r3, r2
 8007f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a57      	ldr	r2, [pc, #348]	; (80080dc <HAL_GPIO_Init+0x314>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d031      	beq.n	8007fe8 <HAL_GPIO_Init+0x220>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a56      	ldr	r2, [pc, #344]	; (80080e0 <HAL_GPIO_Init+0x318>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d02b      	beq.n	8007fe4 <HAL_GPIO_Init+0x21c>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a55      	ldr	r2, [pc, #340]	; (80080e4 <HAL_GPIO_Init+0x31c>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d025      	beq.n	8007fe0 <HAL_GPIO_Init+0x218>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a54      	ldr	r2, [pc, #336]	; (80080e8 <HAL_GPIO_Init+0x320>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d01f      	beq.n	8007fdc <HAL_GPIO_Init+0x214>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a53      	ldr	r2, [pc, #332]	; (80080ec <HAL_GPIO_Init+0x324>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d019      	beq.n	8007fd8 <HAL_GPIO_Init+0x210>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a52      	ldr	r2, [pc, #328]	; (80080f0 <HAL_GPIO_Init+0x328>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d013      	beq.n	8007fd4 <HAL_GPIO_Init+0x20c>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a51      	ldr	r2, [pc, #324]	; (80080f4 <HAL_GPIO_Init+0x32c>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d00d      	beq.n	8007fd0 <HAL_GPIO_Init+0x208>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a50      	ldr	r2, [pc, #320]	; (80080f8 <HAL_GPIO_Init+0x330>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d007      	beq.n	8007fcc <HAL_GPIO_Init+0x204>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a4f      	ldr	r2, [pc, #316]	; (80080fc <HAL_GPIO_Init+0x334>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d101      	bne.n	8007fc8 <HAL_GPIO_Init+0x200>
 8007fc4:	2308      	movs	r3, #8
 8007fc6:	e010      	b.n	8007fea <HAL_GPIO_Init+0x222>
 8007fc8:	2309      	movs	r3, #9
 8007fca:	e00e      	b.n	8007fea <HAL_GPIO_Init+0x222>
 8007fcc:	2307      	movs	r3, #7
 8007fce:	e00c      	b.n	8007fea <HAL_GPIO_Init+0x222>
 8007fd0:	2306      	movs	r3, #6
 8007fd2:	e00a      	b.n	8007fea <HAL_GPIO_Init+0x222>
 8007fd4:	2305      	movs	r3, #5
 8007fd6:	e008      	b.n	8007fea <HAL_GPIO_Init+0x222>
 8007fd8:	2304      	movs	r3, #4
 8007fda:	e006      	b.n	8007fea <HAL_GPIO_Init+0x222>
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e004      	b.n	8007fea <HAL_GPIO_Init+0x222>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	e002      	b.n	8007fea <HAL_GPIO_Init+0x222>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e000      	b.n	8007fea <HAL_GPIO_Init+0x222>
 8007fe8:	2300      	movs	r3, #0
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	f002 0203 	and.w	r2, r2, #3
 8007ff0:	0092      	lsls	r2, r2, #2
 8007ff2:	4093      	lsls	r3, r2
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007ffc:	4936      	ldr	r1, [pc, #216]	; (80080d8 <HAL_GPIO_Init+0x310>)
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	089b      	lsrs	r3, r3, #2
 8008002:	3302      	adds	r3, #2
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800800a:	4b3d      	ldr	r3, [pc, #244]	; (8008100 <HAL_GPIO_Init+0x338>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	43db      	mvns	r3, r3
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	4013      	ands	r3, r2
 8008018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4313      	orrs	r3, r2
 800802c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800802e:	4a34      	ldr	r2, [pc, #208]	; (8008100 <HAL_GPIO_Init+0x338>)
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008034:	4b32      	ldr	r3, [pc, #200]	; (8008100 <HAL_GPIO_Init+0x338>)
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	43db      	mvns	r3, r3
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	4013      	ands	r3, r2
 8008042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008058:	4a29      	ldr	r2, [pc, #164]	; (8008100 <HAL_GPIO_Init+0x338>)
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800805e:	4b28      	ldr	r3, [pc, #160]	; (8008100 <HAL_GPIO_Init+0x338>)
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	43db      	mvns	r3, r3
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	4013      	ands	r3, r2
 800806c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4313      	orrs	r3, r2
 8008080:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008082:	4a1f      	ldr	r2, [pc, #124]	; (8008100 <HAL_GPIO_Init+0x338>)
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008088:	4b1d      	ldr	r3, [pc, #116]	; (8008100 <HAL_GPIO_Init+0x338>)
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	43db      	mvns	r3, r3
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	4013      	ands	r3, r2
 8008096:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80080ac:	4a14      	ldr	r2, [pc, #80]	; (8008100 <HAL_GPIO_Init+0x338>)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	3301      	adds	r3, #1
 80080b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	fa22 f303 	lsr.w	r3, r2, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f47f ae88 	bne.w	8007dd8 <HAL_GPIO_Init+0x10>
  }
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bc80      	pop	{r7}
 80080d2:	4770      	bx	lr
 80080d4:	40023800 	.word	0x40023800
 80080d8:	40013800 	.word	0x40013800
 80080dc:	40020000 	.word	0x40020000
 80080e0:	40020400 	.word	0x40020400
 80080e4:	40020800 	.word	0x40020800
 80080e8:	40020c00 	.word	0x40020c00
 80080ec:	40021000 	.word	0x40021000
 80080f0:	40021400 	.word	0x40021400
 80080f4:	40021800 	.word	0x40021800
 80080f8:	40021c00 	.word	0x40021c00
 80080fc:	40022000 	.word	0x40022000
 8008100:	40013c00 	.word	0x40013c00

08008104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	460b      	mov	r3, r1
 800810e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	691a      	ldr	r2, [r3, #16]
 8008114:	887b      	ldrh	r3, [r7, #2]
 8008116:	4013      	ands	r3, r2
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800811c:	2301      	movs	r3, #1
 800811e:	73fb      	strb	r3, [r7, #15]
 8008120:	e001      	b.n	8008126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008122:	2300      	movs	r3, #0
 8008124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008126:	7bfb      	ldrb	r3, [r7, #15]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3714      	adds	r7, #20
 800812c:	46bd      	mov	sp, r7
 800812e:	bc80      	pop	{r7}
 8008130:	4770      	bx	lr

08008132 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008132:	b480      	push	{r7}
 8008134:	b083      	sub	sp, #12
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	460b      	mov	r3, r1
 800813c:	807b      	strh	r3, [r7, #2]
 800813e:	4613      	mov	r3, r2
 8008140:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008142:	787b      	ldrb	r3, [r7, #1]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008148:	887a      	ldrh	r2, [r7, #2]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800814e:	e003      	b.n	8008158 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008150:	887b      	ldrh	r3, [r7, #2]
 8008152:	041a      	lsls	r2, r3, #16
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	619a      	str	r2, [r3, #24]
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	bc80      	pop	{r7}
 8008160:	4770      	bx	lr

08008162 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008162:	b480      	push	{r7}
 8008164:	b085      	sub	sp, #20
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	460b      	mov	r3, r1
 800816c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008174:	887a      	ldrh	r2, [r7, #2]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4013      	ands	r3, r2
 800817a:	041a      	lsls	r2, r3, #16
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	43d9      	mvns	r1, r3
 8008180:	887b      	ldrh	r3, [r7, #2]
 8008182:	400b      	ands	r3, r1
 8008184:	431a      	orrs	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	619a      	str	r2, [r3, #24]
}
 800818a:	bf00      	nop
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	bc80      	pop	{r7}
 8008192:	4770      	bx	lr

08008194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e12b      	b.n	80083fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d106      	bne.n	80081c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7fe fada 	bl	8006774 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2224      	movs	r2, #36	; 0x24
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f022 0201 	bic.w	r2, r2, #1
 80081d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80081f8:	f002 fd12 	bl	800ac20 <HAL_RCC_GetPCLK1Freq>
 80081fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	4a81      	ldr	r2, [pc, #516]	; (8008408 <HAL_I2C_Init+0x274>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d807      	bhi.n	8008218 <HAL_I2C_Init+0x84>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4a80      	ldr	r2, [pc, #512]	; (800840c <HAL_I2C_Init+0x278>)
 800820c:	4293      	cmp	r3, r2
 800820e:	bf94      	ite	ls
 8008210:	2301      	movls	r3, #1
 8008212:	2300      	movhi	r3, #0
 8008214:	b2db      	uxtb	r3, r3
 8008216:	e006      	b.n	8008226 <HAL_I2C_Init+0x92>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4a7d      	ldr	r2, [pc, #500]	; (8008410 <HAL_I2C_Init+0x27c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	bf94      	ite	ls
 8008220:	2301      	movls	r3, #1
 8008222:	2300      	movhi	r3, #0
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e0e7      	b.n	80083fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	4a78      	ldr	r2, [pc, #480]	; (8008414 <HAL_I2C_Init+0x280>)
 8008232:	fba2 2303 	umull	r2, r3, r2, r3
 8008236:	0c9b      	lsrs	r3, r3, #18
 8008238:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	430a      	orrs	r2, r1
 800824c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	4a6a      	ldr	r2, [pc, #424]	; (8008408 <HAL_I2C_Init+0x274>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d802      	bhi.n	8008268 <HAL_I2C_Init+0xd4>
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	3301      	adds	r3, #1
 8008266:	e009      	b.n	800827c <HAL_I2C_Init+0xe8>
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800826e:	fb02 f303 	mul.w	r3, r2, r3
 8008272:	4a69      	ldr	r2, [pc, #420]	; (8008418 <HAL_I2C_Init+0x284>)
 8008274:	fba2 2303 	umull	r2, r3, r2, r3
 8008278:	099b      	lsrs	r3, r3, #6
 800827a:	3301      	adds	r3, #1
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	6812      	ldr	r2, [r2, #0]
 8008280:	430b      	orrs	r3, r1
 8008282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800828e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	495c      	ldr	r1, [pc, #368]	; (8008408 <HAL_I2C_Init+0x274>)
 8008298:	428b      	cmp	r3, r1
 800829a:	d819      	bhi.n	80082d0 <HAL_I2C_Init+0x13c>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	1e59      	subs	r1, r3, #1
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80082aa:	1c59      	adds	r1, r3, #1
 80082ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80082b0:	400b      	ands	r3, r1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00a      	beq.n	80082cc <HAL_I2C_Init+0x138>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	1e59      	subs	r1, r3, #1
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	005b      	lsls	r3, r3, #1
 80082c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80082c4:	3301      	adds	r3, #1
 80082c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082ca:	e051      	b.n	8008370 <HAL_I2C_Init+0x1dc>
 80082cc:	2304      	movs	r3, #4
 80082ce:	e04f      	b.n	8008370 <HAL_I2C_Init+0x1dc>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d111      	bne.n	80082fc <HAL_I2C_Init+0x168>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	1e58      	subs	r0, r3, #1
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6859      	ldr	r1, [r3, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	005b      	lsls	r3, r3, #1
 80082e4:	440b      	add	r3, r1
 80082e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80082ea:	3301      	adds	r3, #1
 80082ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	bf0c      	ite	eq
 80082f4:	2301      	moveq	r3, #1
 80082f6:	2300      	movne	r3, #0
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	e012      	b.n	8008322 <HAL_I2C_Init+0x18e>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	1e58      	subs	r0, r3, #1
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6859      	ldr	r1, [r3, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	440b      	add	r3, r1
 800830a:	0099      	lsls	r1, r3, #2
 800830c:	440b      	add	r3, r1
 800830e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008312:	3301      	adds	r3, #1
 8008314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008318:	2b00      	cmp	r3, #0
 800831a:	bf0c      	ite	eq
 800831c:	2301      	moveq	r3, #1
 800831e:	2300      	movne	r3, #0
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <HAL_I2C_Init+0x196>
 8008326:	2301      	movs	r3, #1
 8008328:	e022      	b.n	8008370 <HAL_I2C_Init+0x1dc>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10e      	bne.n	8008350 <HAL_I2C_Init+0x1bc>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	1e58      	subs	r0, r3, #1
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6859      	ldr	r1, [r3, #4]
 800833a:	460b      	mov	r3, r1
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	440b      	add	r3, r1
 8008340:	fbb0 f3f3 	udiv	r3, r0, r3
 8008344:	3301      	adds	r3, #1
 8008346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800834a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800834e:	e00f      	b.n	8008370 <HAL_I2C_Init+0x1dc>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	1e58      	subs	r0, r3, #1
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6859      	ldr	r1, [r3, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	440b      	add	r3, r1
 800835e:	0099      	lsls	r1, r3, #2
 8008360:	440b      	add	r3, r1
 8008362:	fbb0 f3f3 	udiv	r3, r0, r3
 8008366:	3301      	adds	r3, #1
 8008368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800836c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008370:	6879      	ldr	r1, [r7, #4]
 8008372:	6809      	ldr	r1, [r1, #0]
 8008374:	4313      	orrs	r3, r2
 8008376:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	69da      	ldr	r2, [r3, #28]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	431a      	orrs	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	430a      	orrs	r2, r1
 8008392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800839e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	6911      	ldr	r1, [r2, #16]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	68d2      	ldr	r2, [r2, #12]
 80083aa:	4311      	orrs	r1, r2
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	6812      	ldr	r2, [r2, #0]
 80083b0:	430b      	orrs	r3, r1
 80083b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	695a      	ldr	r2, [r3, #20]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	431a      	orrs	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f042 0201 	orr.w	r2, r2, #1
 80083de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2220      	movs	r2, #32
 80083ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	000186a0 	.word	0x000186a0
 800840c:	001e847f 	.word	0x001e847f
 8008410:	003d08ff 	.word	0x003d08ff
 8008414:	431bde83 	.word	0x431bde83
 8008418:	10624dd3 	.word	0x10624dd3

0800841c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af02      	add	r7, sp, #8
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	4608      	mov	r0, r1
 8008426:	4611      	mov	r1, r2
 8008428:	461a      	mov	r2, r3
 800842a:	4603      	mov	r3, r0
 800842c:	817b      	strh	r3, [r7, #10]
 800842e:	460b      	mov	r3, r1
 8008430:	813b      	strh	r3, [r7, #8]
 8008432:	4613      	mov	r3, r2
 8008434:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008436:	f7fe fcdd 	bl	8006df4 <HAL_GetTick>
 800843a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b20      	cmp	r3, #32
 8008446:	f040 80d9 	bne.w	80085fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	2319      	movs	r3, #25
 8008450:	2201      	movs	r2, #1
 8008452:	496d      	ldr	r1, [pc, #436]	; (8008608 <HAL_I2C_Mem_Write+0x1ec>)
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f000 fc7f 	bl	8008d58 <I2C_WaitOnFlagUntilTimeout>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008460:	2302      	movs	r3, #2
 8008462:	e0cc      	b.n	80085fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800846a:	2b01      	cmp	r3, #1
 800846c:	d101      	bne.n	8008472 <HAL_I2C_Mem_Write+0x56>
 800846e:	2302      	movs	r3, #2
 8008470:	e0c5      	b.n	80085fe <HAL_I2C_Mem_Write+0x1e2>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b01      	cmp	r3, #1
 8008486:	d007      	beq.n	8008498 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f042 0201 	orr.w	r2, r2, #1
 8008496:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2221      	movs	r2, #33	; 0x21
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2240      	movs	r2, #64	; 0x40
 80084b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6a3a      	ldr	r2, [r7, #32]
 80084c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80084c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4a4d      	ldr	r2, [pc, #308]	; (800860c <HAL_I2C_Mem_Write+0x1f0>)
 80084d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084da:	88f8      	ldrh	r0, [r7, #6]
 80084dc:	893a      	ldrh	r2, [r7, #8]
 80084de:	8979      	ldrh	r1, [r7, #10]
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	9301      	str	r3, [sp, #4]
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	4603      	mov	r3, r0
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 fab6 	bl	8008a5c <I2C_RequestMemoryWrite>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d052      	beq.n	800859c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e081      	b.n	80085fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f000 fd00 	bl	8008f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00d      	beq.n	8008526 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850e:	2b04      	cmp	r3, #4
 8008510:	d107      	bne.n	8008522 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008520:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e06b      	b.n	80085fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852a:	781a      	ldrb	r2, [r3, #0]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	1c5a      	adds	r2, r3, #1
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008540:	3b01      	subs	r3, #1
 8008542:	b29a      	uxth	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800854c:	b29b      	uxth	r3, r3
 800854e:	3b01      	subs	r3, #1
 8008550:	b29a      	uxth	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	f003 0304 	and.w	r3, r3, #4
 8008560:	2b04      	cmp	r3, #4
 8008562:	d11b      	bne.n	800859c <HAL_I2C_Mem_Write+0x180>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008568:	2b00      	cmp	r3, #0
 800856a:	d017      	beq.n	800859c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	781a      	ldrb	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857c:	1c5a      	adds	r2, r3, #1
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008586:	3b01      	subs	r3, #1
 8008588:	b29a      	uxth	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008592:	b29b      	uxth	r3, r3
 8008594:	3b01      	subs	r3, #1
 8008596:	b29a      	uxth	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1aa      	bne.n	80084fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 fcec 	bl	8008f86 <I2C_WaitOnBTFFlagUntilTimeout>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00d      	beq.n	80085d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b8:	2b04      	cmp	r3, #4
 80085ba:	d107      	bne.n	80085cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e016      	b.n	80085fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2220      	movs	r2, #32
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	e000      	b.n	80085fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80085fc:	2302      	movs	r3, #2
  }
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	00100002 	.word	0x00100002
 800860c:	ffff0000 	.word	0xffff0000

08008610 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b08c      	sub	sp, #48	; 0x30
 8008614:	af02      	add	r7, sp, #8
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	4608      	mov	r0, r1
 800861a:	4611      	mov	r1, r2
 800861c:	461a      	mov	r2, r3
 800861e:	4603      	mov	r3, r0
 8008620:	817b      	strh	r3, [r7, #10]
 8008622:	460b      	mov	r3, r1
 8008624:	813b      	strh	r3, [r7, #8]
 8008626:	4613      	mov	r3, r2
 8008628:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800862a:	f7fe fbe3 	bl	8006df4 <HAL_GetTick>
 800862e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b20      	cmp	r3, #32
 800863a:	f040 8208 	bne.w	8008a4e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	2319      	movs	r3, #25
 8008644:	2201      	movs	r2, #1
 8008646:	497b      	ldr	r1, [pc, #492]	; (8008834 <HAL_I2C_Mem_Read+0x224>)
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 fb85 	bl	8008d58 <I2C_WaitOnFlagUntilTimeout>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008654:	2302      	movs	r3, #2
 8008656:	e1fb      	b.n	8008a50 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800865e:	2b01      	cmp	r3, #1
 8008660:	d101      	bne.n	8008666 <HAL_I2C_Mem_Read+0x56>
 8008662:	2302      	movs	r3, #2
 8008664:	e1f4      	b.n	8008a50 <HAL_I2C_Mem_Read+0x440>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2201      	movs	r2, #1
 800866a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b01      	cmp	r3, #1
 800867a:	d007      	beq.n	800868c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f042 0201 	orr.w	r2, r2, #1
 800868a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800869a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2222      	movs	r2, #34	; 0x22
 80086a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2240      	movs	r2, #64	; 0x40
 80086a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80086bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	4a5b      	ldr	r2, [pc, #364]	; (8008838 <HAL_I2C_Mem_Read+0x228>)
 80086cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086ce:	88f8      	ldrh	r0, [r7, #6]
 80086d0:	893a      	ldrh	r2, [r7, #8]
 80086d2:	8979      	ldrh	r1, [r7, #10]
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	9301      	str	r3, [sp, #4]
 80086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	4603      	mov	r3, r0
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 fa52 	bl	8008b88 <I2C_RequestMemoryRead>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e1b0      	b.n	8008a50 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d113      	bne.n	800871e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086f6:	2300      	movs	r3, #0
 80086f8:	623b      	str	r3, [r7, #32]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	623b      	str	r3, [r7, #32]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	623b      	str	r3, [r7, #32]
 800870a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800871a:	601a      	str	r2, [r3, #0]
 800871c:	e184      	b.n	8008a28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008722:	2b01      	cmp	r3, #1
 8008724:	d11b      	bne.n	800875e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008734:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008736:	2300      	movs	r3, #0
 8008738:	61fb      	str	r3, [r7, #28]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	61fb      	str	r3, [r7, #28]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	61fb      	str	r3, [r7, #28]
 800874a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	e164      	b.n	8008a28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008762:	2b02      	cmp	r3, #2
 8008764:	d11b      	bne.n	800879e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008774:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008784:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008786:	2300      	movs	r3, #0
 8008788:	61bb      	str	r3, [r7, #24]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	61bb      	str	r3, [r7, #24]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	61bb      	str	r3, [r7, #24]
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	e144      	b.n	8008a28 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800879e:	2300      	movs	r3, #0
 80087a0:	617b      	str	r3, [r7, #20]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	695b      	ldr	r3, [r3, #20]
 80087a8:	617b      	str	r3, [r7, #20]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	617b      	str	r3, [r7, #20]
 80087b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80087b4:	e138      	b.n	8008a28 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	f200 80f1 	bhi.w	80089a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d123      	bne.n	8008810 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f000 fc1b 	bl	8009008 <I2C_WaitOnRXNEFlagUntilTimeout>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e139      	b.n	8008a50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	691a      	ldr	r2, [r3, #16]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	b2d2      	uxtb	r2, r2
 80087e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ee:	1c5a      	adds	r2, r3, #1
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087f8:	3b01      	subs	r3, #1
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008804:	b29b      	uxth	r3, r3
 8008806:	3b01      	subs	r3, #1
 8008808:	b29a      	uxth	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800880e:	e10b      	b.n	8008a28 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008814:	2b02      	cmp	r3, #2
 8008816:	d14e      	bne.n	80088b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	2200      	movs	r2, #0
 8008820:	4906      	ldr	r1, [pc, #24]	; (800883c <HAL_I2C_Mem_Read+0x22c>)
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 fa98 	bl	8008d58 <I2C_WaitOnFlagUntilTimeout>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d008      	beq.n	8008840 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e10e      	b.n	8008a50 <HAL_I2C_Mem_Read+0x440>
 8008832:	bf00      	nop
 8008834:	00100002 	.word	0x00100002
 8008838:	ffff0000 	.word	0xffff0000
 800883c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800884e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	691a      	ldr	r2, [r3, #16]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	b2d2      	uxtb	r2, r2
 800885c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800886c:	3b01      	subs	r3, #1
 800886e:	b29a      	uxth	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008878:	b29b      	uxth	r3, r3
 800887a:	3b01      	subs	r3, #1
 800887c:	b29a      	uxth	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	691a      	ldr	r2, [r3, #16]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	b2d2      	uxtb	r2, r2
 800888e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	1c5a      	adds	r2, r3, #1
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800889e:	3b01      	subs	r3, #1
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	3b01      	subs	r3, #1
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80088b4:	e0b8      	b.n	8008a28 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088bc:	2200      	movs	r2, #0
 80088be:	4966      	ldr	r1, [pc, #408]	; (8008a58 <HAL_I2C_Mem_Read+0x448>)
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 fa49 	bl	8008d58 <I2C_WaitOnFlagUntilTimeout>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e0bf      	b.n	8008a50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	691a      	ldr	r2, [r3, #16]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	b2d2      	uxtb	r2, r2
 80088ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f2:	1c5a      	adds	r2, r3, #1
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088fc:	3b01      	subs	r3, #1
 80088fe:	b29a      	uxth	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008908:	b29b      	uxth	r3, r3
 800890a:	3b01      	subs	r3, #1
 800890c:	b29a      	uxth	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008918:	2200      	movs	r2, #0
 800891a:	494f      	ldr	r1, [pc, #316]	; (8008a58 <HAL_I2C_Mem_Read+0x448>)
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 fa1b 	bl	8008d58 <I2C_WaitOnFlagUntilTimeout>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e091      	b.n	8008a50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800893a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	691a      	ldr	r2, [r3, #16]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	b2d2      	uxtb	r2, r2
 8008948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	1c5a      	adds	r2, r3, #1
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008958:	3b01      	subs	r3, #1
 800895a:	b29a      	uxth	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008964:	b29b      	uxth	r3, r3
 8008966:	3b01      	subs	r3, #1
 8008968:	b29a      	uxth	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	691a      	ldr	r2, [r3, #16]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008978:	b2d2      	uxtb	r2, r2
 800897a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008980:	1c5a      	adds	r2, r3, #1
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800898a:	3b01      	subs	r3, #1
 800898c:	b29a      	uxth	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008996:	b29b      	uxth	r3, r3
 8008998:	3b01      	subs	r3, #1
 800899a:	b29a      	uxth	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80089a0:	e042      	b.n	8008a28 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f000 fb2e 	bl	8009008 <I2C_WaitOnRXNEFlagUntilTimeout>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e04c      	b.n	8008a50 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	691a      	ldr	r2, [r3, #16]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c0:	b2d2      	uxtb	r2, r2
 80089c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089d2:	3b01      	subs	r3, #1
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089de:	b29b      	uxth	r3, r3
 80089e0:	3b01      	subs	r3, #1
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	f003 0304 	and.w	r3, r3, #4
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d118      	bne.n	8008a28 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	691a      	ldr	r2, [r3, #16]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	b2d2      	uxtb	r2, r2
 8008a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a12:	3b01      	subs	r3, #1
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	3b01      	subs	r3, #1
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f47f aec2 	bne.w	80087b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	e000      	b.n	8008a50 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008a4e:	2302      	movs	r3, #2
  }
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3728      	adds	r7, #40	; 0x28
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	00010004 	.word	0x00010004

08008a5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b088      	sub	sp, #32
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	4608      	mov	r0, r1
 8008a66:	4611      	mov	r1, r2
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	817b      	strh	r3, [r7, #10]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	813b      	strh	r3, [r7, #8]
 8008a72:	4613      	mov	r3, r2
 8008a74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	6a3b      	ldr	r3, [r7, #32]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f000 f960 	bl	8008d58 <I2C_WaitOnFlagUntilTimeout>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00d      	beq.n	8008aba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aac:	d103      	bne.n	8008ab6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e05f      	b.n	8008b7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008aba:	897b      	ldrh	r3, [r7, #10]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	461a      	mov	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008ac8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	6a3a      	ldr	r2, [r7, #32]
 8008ace:	492d      	ldr	r1, [pc, #180]	; (8008b84 <I2C_RequestMemoryWrite+0x128>)
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f000 f998 	bl	8008e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d001      	beq.n	8008ae0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e04c      	b.n	8008b7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	617b      	str	r3, [r7, #20]
 8008af4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af8:	6a39      	ldr	r1, [r7, #32]
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 fa02 	bl	8008f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00d      	beq.n	8008b22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0a:	2b04      	cmp	r3, #4
 8008b0c:	d107      	bne.n	8008b1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e02b      	b.n	8008b7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b22:	88fb      	ldrh	r3, [r7, #6]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d105      	bne.n	8008b34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b28:	893b      	ldrh	r3, [r7, #8]
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	611a      	str	r2, [r3, #16]
 8008b32:	e021      	b.n	8008b78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008b34:	893b      	ldrh	r3, [r7, #8]
 8008b36:	0a1b      	lsrs	r3, r3, #8
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b44:	6a39      	ldr	r1, [r7, #32]
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 f9dc 	bl	8008f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00d      	beq.n	8008b6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	2b04      	cmp	r3, #4
 8008b58:	d107      	bne.n	8008b6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e005      	b.n	8008b7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b6e:	893b      	ldrh	r3, [r7, #8]
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3718      	adds	r7, #24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	00010002 	.word	0x00010002

08008b88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af02      	add	r7, sp, #8
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	4608      	mov	r0, r1
 8008b92:	4611      	mov	r1, r2
 8008b94:	461a      	mov	r2, r3
 8008b96:	4603      	mov	r3, r0
 8008b98:	817b      	strh	r3, [r7, #10]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	813b      	strh	r3, [r7, #8]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008bb0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 f8c2 	bl	8008d58 <I2C_WaitOnFlagUntilTimeout>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00d      	beq.n	8008bf6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be8:	d103      	bne.n	8008bf2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bf0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e0aa      	b.n	8008d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008bf6:	897b      	ldrh	r3, [r7, #10]
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008c04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c08:	6a3a      	ldr	r2, [r7, #32]
 8008c0a:	4952      	ldr	r1, [pc, #328]	; (8008d54 <I2C_RequestMemoryRead+0x1cc>)
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f000 f8fa 	bl	8008e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e097      	b.n	8008d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	617b      	str	r3, [r7, #20]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	617b      	str	r3, [r7, #20]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	617b      	str	r3, [r7, #20]
 8008c30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c34:	6a39      	ldr	r1, [r7, #32]
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f000 f964 	bl	8008f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00d      	beq.n	8008c5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	d107      	bne.n	8008c5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e076      	b.n	8008d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c5e:	88fb      	ldrh	r3, [r7, #6]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d105      	bne.n	8008c70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c64:	893b      	ldrh	r3, [r7, #8]
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	611a      	str	r2, [r3, #16]
 8008c6e:	e021      	b.n	8008cb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008c70:	893b      	ldrh	r3, [r7, #8]
 8008c72:	0a1b      	lsrs	r3, r3, #8
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c80:	6a39      	ldr	r1, [r7, #32]
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 f93e 	bl	8008f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00d      	beq.n	8008caa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	d107      	bne.n	8008ca6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ca4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e050      	b.n	8008d4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008caa:	893b      	ldrh	r3, [r7, #8]
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cb6:	6a39      	ldr	r1, [r7, #32]
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f000 f923 	bl	8008f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00d      	beq.n	8008ce0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc8:	2b04      	cmp	r3, #4
 8008cca:	d107      	bne.n	8008cdc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e035      	b.n	8008d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 f82b 	bl	8008d58 <I2C_WaitOnFlagUntilTimeout>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00d      	beq.n	8008d24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d16:	d103      	bne.n	8008d20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e013      	b.n	8008d4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008d24:	897b      	ldrh	r3, [r7, #10]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	f043 0301 	orr.w	r3, r3, #1
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	6a3a      	ldr	r2, [r7, #32]
 8008d38:	4906      	ldr	r1, [pc, #24]	; (8008d54 <I2C_RequestMemoryRead+0x1cc>)
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 f863 	bl	8008e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e000      	b.n	8008d4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	00010002 	.word	0x00010002

08008d58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	603b      	str	r3, [r7, #0]
 8008d64:	4613      	mov	r3, r2
 8008d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d68:	e025      	b.n	8008db6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d70:	d021      	beq.n	8008db6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d72:	f7fe f83f 	bl	8006df4 <HAL_GetTick>
 8008d76:	4602      	mov	r2, r0
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d302      	bcc.n	8008d88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d116      	bne.n	8008db6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da2:	f043 0220 	orr.w	r2, r3, #32
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e023      	b.n	8008dfe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	0c1b      	lsrs	r3, r3, #16
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d10d      	bne.n	8008ddc <I2C_WaitOnFlagUntilTimeout+0x84>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	43da      	mvns	r2, r3
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	bf0c      	ite	eq
 8008dd2:	2301      	moveq	r3, #1
 8008dd4:	2300      	movne	r3, #0
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	461a      	mov	r2, r3
 8008dda:	e00c      	b.n	8008df6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	43da      	mvns	r2, r3
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	4013      	ands	r3, r2
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	bf0c      	ite	eq
 8008dee:	2301      	moveq	r3, #1
 8008df0:	2300      	movne	r3, #0
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	461a      	mov	r2, r3
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d0b6      	beq.n	8008d6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	60f8      	str	r0, [r7, #12]
 8008e0e:	60b9      	str	r1, [r7, #8]
 8008e10:	607a      	str	r2, [r7, #4]
 8008e12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e14:	e051      	b.n	8008eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	695b      	ldr	r3, [r3, #20]
 8008e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e24:	d123      	bne.n	8008e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2220      	movs	r2, #32
 8008e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5a:	f043 0204 	orr.w	r2, r3, #4
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e046      	b.n	8008efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e74:	d021      	beq.n	8008eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e76:	f7fd ffbd 	bl	8006df4 <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d302      	bcc.n	8008e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d116      	bne.n	8008eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2220      	movs	r2, #32
 8008e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea6:	f043 0220 	orr.w	r2, r3, #32
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e020      	b.n	8008efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	0c1b      	lsrs	r3, r3, #16
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d10c      	bne.n	8008ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	695b      	ldr	r3, [r3, #20]
 8008eca:	43da      	mvns	r2, r3
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	4013      	ands	r3, r2
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	bf14      	ite	ne
 8008ed6:	2301      	movne	r3, #1
 8008ed8:	2300      	moveq	r3, #0
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	e00b      	b.n	8008ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	43da      	mvns	r2, r3
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	4013      	ands	r3, r2
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	bf14      	ite	ne
 8008ef0:	2301      	movne	r3, #1
 8008ef2:	2300      	moveq	r3, #0
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d18d      	bne.n	8008e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f10:	e02d      	b.n	8008f6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 f8ce 	bl	80090b4 <I2C_IsAcknowledgeFailed>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e02d      	b.n	8008f7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f28:	d021      	beq.n	8008f6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f2a:	f7fd ff63 	bl	8006df4 <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d302      	bcc.n	8008f40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d116      	bne.n	8008f6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2220      	movs	r2, #32
 8008f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5a:	f043 0220 	orr.w	r2, r3, #32
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e007      	b.n	8008f7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f78:	2b80      	cmp	r3, #128	; 0x80
 8008f7a:	d1ca      	bne.n	8008f12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	60f8      	str	r0, [r7, #12]
 8008f8e:	60b9      	str	r1, [r7, #8]
 8008f90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f92:	e02d      	b.n	8008ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 f88d 	bl	80090b4 <I2C_IsAcknowledgeFailed>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d001      	beq.n	8008fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e02d      	b.n	8009000 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008faa:	d021      	beq.n	8008ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fac:	f7fd ff22 	bl	8006df4 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d302      	bcc.n	8008fc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d116      	bne.n	8008ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fdc:	f043 0220 	orr.w	r2, r3, #32
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e007      	b.n	8009000 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	f003 0304 	and.w	r3, r3, #4
 8008ffa:	2b04      	cmp	r3, #4
 8008ffc:	d1ca      	bne.n	8008f94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009014:	e042      	b.n	800909c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	695b      	ldr	r3, [r3, #20]
 800901c:	f003 0310 	and.w	r3, r3, #16
 8009020:	2b10      	cmp	r3, #16
 8009022:	d119      	bne.n	8009058 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f06f 0210 	mvn.w	r2, #16
 800902c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2220      	movs	r2, #32
 8009038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e029      	b.n	80090ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009058:	f7fd fecc 	bl	8006df4 <HAL_GetTick>
 800905c:	4602      	mov	r2, r0
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	429a      	cmp	r2, r3
 8009066:	d302      	bcc.n	800906e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d116      	bne.n	800909c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2220      	movs	r2, #32
 8009078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009088:	f043 0220 	orr.w	r2, r3, #32
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e007      	b.n	80090ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a6:	2b40      	cmp	r3, #64	; 0x40
 80090a8:	d1b5      	bne.n	8009016 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090ca:	d11b      	bne.n	8009104 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80090d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2220      	movs	r2, #32
 80090e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f0:	f043 0204 	orr.w	r2, r3, #4
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e000      	b.n	8009106 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	bc80      	pop	{r7}
 800910e:	4770      	bx	lr

08009110 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009112:	b08f      	sub	sp, #60	; 0x3c
 8009114:	af0a      	add	r7, sp, #40	; 0x28
 8009116:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e10f      	b.n	8009342 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b00      	cmp	r3, #0
 8009132:	d106      	bne.n	8009142 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f006 fa63 	bl	800f608 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2203      	movs	r2, #3
 8009146:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009152:	2b00      	cmp	r3, #0
 8009154:	d102      	bne.n	800915c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4618      	mov	r0, r3
 8009162:	f003 fa53 	bl	800c60c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	603b      	str	r3, [r7, #0]
 800916c:	687e      	ldr	r6, [r7, #4]
 800916e:	466d      	mov	r5, sp
 8009170:	f106 0410 	add.w	r4, r6, #16
 8009174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800917a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800917c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009180:	e885 0003 	stmia.w	r5, {r0, r1}
 8009184:	1d33      	adds	r3, r6, #4
 8009186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009188:	6838      	ldr	r0, [r7, #0]
 800918a:	f003 f935 	bl	800c3f8 <USB_CoreInit>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d005      	beq.n	80091a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e0d0      	b.n	8009342 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2100      	movs	r1, #0
 80091a6:	4618      	mov	r0, r3
 80091a8:	f003 fa40 	bl	800c62c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091ac:	2300      	movs	r3, #0
 80091ae:	73fb      	strb	r3, [r7, #15]
 80091b0:	e04a      	b.n	8009248 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80091b2:	7bfa      	ldrb	r2, [r7, #15]
 80091b4:	6879      	ldr	r1, [r7, #4]
 80091b6:	4613      	mov	r3, r2
 80091b8:	00db      	lsls	r3, r3, #3
 80091ba:	1a9b      	subs	r3, r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	440b      	add	r3, r1
 80091c0:	333d      	adds	r3, #61	; 0x3d
 80091c2:	2201      	movs	r2, #1
 80091c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80091c6:	7bfa      	ldrb	r2, [r7, #15]
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	4613      	mov	r3, r2
 80091cc:	00db      	lsls	r3, r3, #3
 80091ce:	1a9b      	subs	r3, r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	440b      	add	r3, r1
 80091d4:	333c      	adds	r3, #60	; 0x3c
 80091d6:	7bfa      	ldrb	r2, [r7, #15]
 80091d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80091da:	7bfa      	ldrb	r2, [r7, #15]
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	b298      	uxth	r0, r3
 80091e0:	6879      	ldr	r1, [r7, #4]
 80091e2:	4613      	mov	r3, r2
 80091e4:	00db      	lsls	r3, r3, #3
 80091e6:	1a9b      	subs	r3, r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	440b      	add	r3, r1
 80091ec:	3342      	adds	r3, #66	; 0x42
 80091ee:	4602      	mov	r2, r0
 80091f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80091f2:	7bfa      	ldrb	r2, [r7, #15]
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	4613      	mov	r3, r2
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	1a9b      	subs	r3, r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	440b      	add	r3, r1
 8009200:	333f      	adds	r3, #63	; 0x3f
 8009202:	2200      	movs	r2, #0
 8009204:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009206:	7bfa      	ldrb	r2, [r7, #15]
 8009208:	6879      	ldr	r1, [r7, #4]
 800920a:	4613      	mov	r3, r2
 800920c:	00db      	lsls	r3, r3, #3
 800920e:	1a9b      	subs	r3, r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	440b      	add	r3, r1
 8009214:	3344      	adds	r3, #68	; 0x44
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800921a:	7bfa      	ldrb	r2, [r7, #15]
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	4613      	mov	r3, r2
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	1a9b      	subs	r3, r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	440b      	add	r3, r1
 8009228:	3348      	adds	r3, #72	; 0x48
 800922a:	2200      	movs	r2, #0
 800922c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800922e:	7bfa      	ldrb	r2, [r7, #15]
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	4613      	mov	r3, r2
 8009234:	00db      	lsls	r3, r3, #3
 8009236:	1a9b      	subs	r3, r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	440b      	add	r3, r1
 800923c:	3350      	adds	r3, #80	; 0x50
 800923e:	2200      	movs	r2, #0
 8009240:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009242:	7bfb      	ldrb	r3, [r7, #15]
 8009244:	3301      	adds	r3, #1
 8009246:	73fb      	strb	r3, [r7, #15]
 8009248:	7bfa      	ldrb	r2, [r7, #15]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	429a      	cmp	r2, r3
 8009250:	d3af      	bcc.n	80091b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009252:	2300      	movs	r3, #0
 8009254:	73fb      	strb	r3, [r7, #15]
 8009256:	e044      	b.n	80092e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009258:	7bfa      	ldrb	r2, [r7, #15]
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	4613      	mov	r3, r2
 800925e:	00db      	lsls	r3, r3, #3
 8009260:	1a9b      	subs	r3, r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	440b      	add	r3, r1
 8009266:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800926a:	2200      	movs	r2, #0
 800926c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800926e:	7bfa      	ldrb	r2, [r7, #15]
 8009270:	6879      	ldr	r1, [r7, #4]
 8009272:	4613      	mov	r3, r2
 8009274:	00db      	lsls	r3, r3, #3
 8009276:	1a9b      	subs	r3, r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	440b      	add	r3, r1
 800927c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009280:	7bfa      	ldrb	r2, [r7, #15]
 8009282:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009284:	7bfa      	ldrb	r2, [r7, #15]
 8009286:	6879      	ldr	r1, [r7, #4]
 8009288:	4613      	mov	r3, r2
 800928a:	00db      	lsls	r3, r3, #3
 800928c:	1a9b      	subs	r3, r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	440b      	add	r3, r1
 8009292:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009296:	2200      	movs	r2, #0
 8009298:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800929a:	7bfa      	ldrb	r2, [r7, #15]
 800929c:	6879      	ldr	r1, [r7, #4]
 800929e:	4613      	mov	r3, r2
 80092a0:	00db      	lsls	r3, r3, #3
 80092a2:	1a9b      	subs	r3, r3, r2
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	440b      	add	r3, r1
 80092a8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80092ac:	2200      	movs	r2, #0
 80092ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80092b0:	7bfa      	ldrb	r2, [r7, #15]
 80092b2:	6879      	ldr	r1, [r7, #4]
 80092b4:	4613      	mov	r3, r2
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	1a9b      	subs	r3, r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	440b      	add	r3, r1
 80092be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80092c2:	2200      	movs	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80092c6:	7bfa      	ldrb	r2, [r7, #15]
 80092c8:	6879      	ldr	r1, [r7, #4]
 80092ca:	4613      	mov	r3, r2
 80092cc:	00db      	lsls	r3, r3, #3
 80092ce:	1a9b      	subs	r3, r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	440b      	add	r3, r1
 80092d4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80092d8:	2200      	movs	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
 80092de:	3301      	adds	r3, #1
 80092e0:	73fb      	strb	r3, [r7, #15]
 80092e2:	7bfa      	ldrb	r2, [r7, #15]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d3b5      	bcc.n	8009258 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	603b      	str	r3, [r7, #0]
 80092f2:	687e      	ldr	r6, [r7, #4]
 80092f4:	466d      	mov	r5, sp
 80092f6:	f106 0410 	add.w	r4, r6, #16
 80092fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009302:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009306:	e885 0003 	stmia.w	r5, {r0, r1}
 800930a:	1d33      	adds	r3, r6, #4
 800930c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800930e:	6838      	ldr	r0, [r7, #0]
 8009310:	f003 f9d8 	bl	800c6c4 <USB_DevInit>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d005      	beq.n	8009326 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2202      	movs	r2, #2
 800931e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e00d      	b.n	8009342 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4618      	mov	r0, r3
 800933c:	f004 fa49 	bl	800d7d2 <USB_DevDisconnect>

  return HAL_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3714      	adds	r7, #20
 8009346:	46bd      	mov	sp, r7
 8009348:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800934a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b082      	sub	sp, #8
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009358:	2b01      	cmp	r3, #1
 800935a:	d101      	bne.n	8009360 <HAL_PCD_Start+0x16>
 800935c:	2302      	movs	r3, #2
 800935e:	e012      	b.n	8009386 <HAL_PCD_Start+0x3c>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4618      	mov	r0, r3
 800936e:	f003 f93d 	bl	800c5ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4618      	mov	r0, r3
 8009378:	f004 fa0b 	bl	800d792 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800938e:	b590      	push	{r4, r7, lr}
 8009390:	b08d      	sub	sp, #52	; 0x34
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f004 fac2 	bl	800d92e <USB_GetMode>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f040 838f 	bne.w	8009ad0 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f004 fa2b 	bl	800d812 <USB_ReadInterrupts>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f000 8385 	beq.w	8009ace <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f004 fa22 	bl	800d812 <USB_ReadInterrupts>
 80093ce:	4603      	mov	r3, r0
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d107      	bne.n	80093e8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	695a      	ldr	r2, [r3, #20]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f002 0202 	and.w	r2, r2, #2
 80093e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f004 fa10 	bl	800d812 <USB_ReadInterrupts>
 80093f2:	4603      	mov	r3, r0
 80093f4:	f003 0310 	and.w	r3, r3, #16
 80093f8:	2b10      	cmp	r3, #16
 80093fa:	d161      	bne.n	80094c0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	699a      	ldr	r2, [r3, #24]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f022 0210 	bic.w	r2, r2, #16
 800940a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	6a1b      	ldr	r3, [r3, #32]
 8009410:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	f003 020f 	and.w	r2, r3, #15
 8009418:	4613      	mov	r3, r2
 800941a:	00db      	lsls	r3, r3, #3
 800941c:	1a9b      	subs	r3, r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	4413      	add	r3, r2
 8009428:	3304      	adds	r3, #4
 800942a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	0c5b      	lsrs	r3, r3, #17
 8009430:	f003 030f 	and.w	r3, r3, #15
 8009434:	2b02      	cmp	r3, #2
 8009436:	d124      	bne.n	8009482 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009438:	69ba      	ldr	r2, [r7, #24]
 800943a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800943e:	4013      	ands	r3, r2
 8009440:	2b00      	cmp	r3, #0
 8009442:	d035      	beq.n	80094b0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	091b      	lsrs	r3, r3, #4
 800944c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800944e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009452:	b29b      	uxth	r3, r3
 8009454:	461a      	mov	r2, r3
 8009456:	6a38      	ldr	r0, [r7, #32]
 8009458:	f004 f84d 	bl	800d4f6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	68da      	ldr	r2, [r3, #12]
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	091b      	lsrs	r3, r3, #4
 8009464:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009468:	441a      	add	r2, r3
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	699a      	ldr	r2, [r3, #24]
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	091b      	lsrs	r3, r3, #4
 8009476:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800947a:	441a      	add	r2, r3
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	619a      	str	r2, [r3, #24]
 8009480:	e016      	b.n	80094b0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	0c5b      	lsrs	r3, r3, #17
 8009486:	f003 030f 	and.w	r3, r3, #15
 800948a:	2b06      	cmp	r3, #6
 800948c:	d110      	bne.n	80094b0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009494:	2208      	movs	r2, #8
 8009496:	4619      	mov	r1, r3
 8009498:	6a38      	ldr	r0, [r7, #32]
 800949a:	f004 f82c 	bl	800d4f6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	699a      	ldr	r2, [r3, #24]
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	091b      	lsrs	r3, r3, #4
 80094a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094aa:	441a      	add	r2, r3
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	699a      	ldr	r2, [r3, #24]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f042 0210 	orr.w	r2, r2, #16
 80094be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f004 f9a4 	bl	800d812 <USB_ReadInterrupts>
 80094ca:	4603      	mov	r3, r0
 80094cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80094d4:	d16e      	bne.n	80095b4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80094d6:	2300      	movs	r3, #0
 80094d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4618      	mov	r0, r3
 80094e0:	f004 f9a9 	bl	800d836 <USB_ReadDevAllOutEpInterrupt>
 80094e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80094e6:	e062      	b.n	80095ae <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80094e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d057      	beq.n	80095a2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094f8:	b2d2      	uxtb	r2, r2
 80094fa:	4611      	mov	r1, r2
 80094fc:	4618      	mov	r0, r3
 80094fe:	f004 f9cc 	bl	800d89a <USB_ReadDevOutEPInterrupt>
 8009502:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00c      	beq.n	8009528 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009510:	015a      	lsls	r2, r3, #5
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	4413      	add	r3, r2
 8009516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800951a:	461a      	mov	r2, r3
 800951c:	2301      	movs	r3, #1
 800951e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fda2 	bl	800a06c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	f003 0308 	and.w	r3, r3, #8
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00c      	beq.n	800954c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	015a      	lsls	r2, r3, #5
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	4413      	add	r3, r2
 800953a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800953e:	461a      	mov	r2, r3
 8009540:	2308      	movs	r3, #8
 8009542:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fe9c 	bl	800a284 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	f003 0310 	and.w	r3, r3, #16
 8009552:	2b00      	cmp	r3, #0
 8009554:	d008      	beq.n	8009568 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	4413      	add	r3, r2
 800955e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009562:	461a      	mov	r2, r3
 8009564:	2310      	movs	r3, #16
 8009566:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	f003 0320 	and.w	r3, r3, #32
 800956e:	2b00      	cmp	r3, #0
 8009570:	d008      	beq.n	8009584 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	4413      	add	r3, r2
 800957a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800957e:	461a      	mov	r2, r3
 8009580:	2320      	movs	r3, #32
 8009582:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d009      	beq.n	80095a2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800958e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009590:	015a      	lsls	r2, r3, #5
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	4413      	add	r3, r2
 8009596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800959a:	461a      	mov	r2, r3
 800959c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	3301      	adds	r3, #1
 80095a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80095a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095aa:	085b      	lsrs	r3, r3, #1
 80095ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80095ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d199      	bne.n	80094e8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4618      	mov	r0, r3
 80095ba:	f004 f92a 	bl	800d812 <USB_ReadInterrupts>
 80095be:	4603      	mov	r3, r0
 80095c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095c8:	f040 80c0 	bne.w	800974c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4618      	mov	r0, r3
 80095d2:	f004 f949 	bl	800d868 <USB_ReadDevAllInEpInterrupt>
 80095d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80095d8:	2300      	movs	r3, #0
 80095da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80095dc:	e0b2      	b.n	8009744 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	f003 0301 	and.w	r3, r3, #1
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 80a7 	beq.w	8009738 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095f0:	b2d2      	uxtb	r2, r2
 80095f2:	4611      	mov	r1, r2
 80095f4:	4618      	mov	r0, r3
 80095f6:	f004 f96d 	bl	800d8d4 <USB_ReadDevInEPInterrupt>
 80095fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	2b00      	cmp	r3, #0
 8009604:	d057      	beq.n	80096b6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009608:	f003 030f 	and.w	r3, r3, #15
 800960c:	2201      	movs	r2, #1
 800960e:	fa02 f303 	lsl.w	r3, r2, r3
 8009612:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800961a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	43db      	mvns	r3, r3
 8009620:	69f9      	ldr	r1, [r7, #28]
 8009622:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009626:	4013      	ands	r3, r2
 8009628:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	015a      	lsls	r2, r3, #5
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	4413      	add	r3, r2
 8009632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009636:	461a      	mov	r2, r3
 8009638:	2301      	movs	r3, #1
 800963a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d132      	bne.n	80096aa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009644:	6879      	ldr	r1, [r7, #4]
 8009646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009648:	4613      	mov	r3, r2
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	1a9b      	subs	r3, r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	440b      	add	r3, r1
 8009652:	3348      	adds	r3, #72	; 0x48
 8009654:	6819      	ldr	r1, [r3, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800965a:	4613      	mov	r3, r2
 800965c:	00db      	lsls	r3, r3, #3
 800965e:	1a9b      	subs	r3, r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	4403      	add	r3, r0
 8009664:	3344      	adds	r3, #68	; 0x44
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4419      	add	r1, r3
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800966e:	4613      	mov	r3, r2
 8009670:	00db      	lsls	r3, r3, #3
 8009672:	1a9b      	subs	r3, r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4403      	add	r3, r0
 8009678:	3348      	adds	r3, #72	; 0x48
 800967a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	2b00      	cmp	r3, #0
 8009680:	d113      	bne.n	80096aa <HAL_PCD_IRQHandler+0x31c>
 8009682:	6879      	ldr	r1, [r7, #4]
 8009684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009686:	4613      	mov	r3, r2
 8009688:	00db      	lsls	r3, r3, #3
 800968a:	1a9b      	subs	r3, r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	440b      	add	r3, r1
 8009690:	3350      	adds	r3, #80	; 0x50
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d108      	bne.n	80096aa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6818      	ldr	r0, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80096a2:	461a      	mov	r2, r3
 80096a4:	2101      	movs	r1, #1
 80096a6:	f004 f971 	bl	800d98c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80096aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f006 f82a 	bl	800f70a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	f003 0308 	and.w	r3, r3, #8
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d008      	beq.n	80096d2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096cc:	461a      	mov	r2, r3
 80096ce:	2308      	movs	r3, #8
 80096d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	f003 0310 	and.w	r3, r3, #16
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d008      	beq.n	80096ee <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e8:	461a      	mov	r2, r3
 80096ea:	2310      	movs	r3, #16
 80096ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d008      	beq.n	800970a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009704:	461a      	mov	r2, r3
 8009706:	2340      	movs	r3, #64	; 0x40
 8009708:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f003 0302 	and.w	r3, r3, #2
 8009710:	2b00      	cmp	r3, #0
 8009712:	d008      	beq.n	8009726 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	4413      	add	r3, r2
 800971c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009720:	461a      	mov	r2, r3
 8009722:	2302      	movs	r3, #2
 8009724:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800972c:	2b00      	cmp	r3, #0
 800972e:	d003      	beq.n	8009738 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fc0c 	bl	8009f50 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	3301      	adds	r3, #1
 800973c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800973e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009740:	085b      	lsrs	r3, r3, #1
 8009742:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009746:	2b00      	cmp	r3, #0
 8009748:	f47f af49 	bne.w	80095de <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4618      	mov	r0, r3
 8009752:	f004 f85e 	bl	800d812 <USB_ReadInterrupts>
 8009756:	4603      	mov	r3, r0
 8009758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800975c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009760:	d114      	bne.n	800978c <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	69fa      	ldr	r2, [r7, #28]
 800976c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009770:	f023 0301 	bic.w	r3, r3, #1
 8009774:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f006 f83e 	bl	800f7f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	695a      	ldr	r2, [r3, #20]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800978a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4618      	mov	r0, r3
 8009792:	f004 f83e 	bl	800d812 <USB_ReadInterrupts>
 8009796:	4603      	mov	r3, r0
 8009798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800979c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097a0:	d112      	bne.n	80097c8 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d102      	bne.n	80097b8 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f005 fffa 	bl	800f7ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	695a      	ldr	r2, [r3, #20]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80097c6:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f004 f820 	bl	800d812 <USB_ReadInterrupts>
 80097d2:	4603      	mov	r3, r0
 80097d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80097d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097dc:	f040 80c7 	bne.w	800996e <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	69fa      	ldr	r2, [r7, #28]
 80097ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097ee:	f023 0301 	bic.w	r3, r3, #1
 80097f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2110      	movs	r1, #16
 80097fa:	4618      	mov	r0, r3
 80097fc:	f003 f8c6 	bl	800c98c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009800:	2300      	movs	r3, #0
 8009802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009804:	e056      	b.n	80098b4 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009808:	015a      	lsls	r2, r3, #5
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	4413      	add	r3, r2
 800980e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009812:	461a      	mov	r2, r3
 8009814:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009818:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800981a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	4413      	add	r3, r2
 8009822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800982a:	0151      	lsls	r1, r2, #5
 800982c:	69fa      	ldr	r2, [r7, #28]
 800982e:	440a      	add	r2, r1
 8009830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009834:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009838:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983c:	015a      	lsls	r2, r3, #5
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	4413      	add	r3, r2
 8009842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800984a:	0151      	lsls	r1, r2, #5
 800984c:	69fa      	ldr	r2, [r7, #28]
 800984e:	440a      	add	r2, r1
 8009850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009854:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009858:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800985a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985c:	015a      	lsls	r2, r3, #5
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	4413      	add	r3, r2
 8009862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009866:	461a      	mov	r2, r3
 8009868:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800986c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800986e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009870:	015a      	lsls	r2, r3, #5
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	4413      	add	r3, r2
 8009876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800987e:	0151      	lsls	r1, r2, #5
 8009880:	69fa      	ldr	r2, [r7, #28]
 8009882:	440a      	add	r2, r1
 8009884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009888:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800988c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800988e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	4413      	add	r3, r2
 8009896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800989e:	0151      	lsls	r1, r2, #5
 80098a0:	69fa      	ldr	r2, [r7, #28]
 80098a2:	440a      	add	r2, r1
 80098a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80098ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b0:	3301      	adds	r3, #1
 80098b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d3a3      	bcc.n	8009806 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	69fa      	ldr	r2, [r7, #28]
 80098c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80098d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d016      	beq.n	8009908 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098e4:	69fa      	ldr	r2, [r7, #28]
 80098e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098ea:	f043 030b 	orr.w	r3, r3, #11
 80098ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098fa:	69fa      	ldr	r2, [r7, #28]
 80098fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009900:	f043 030b 	orr.w	r3, r3, #11
 8009904:	6453      	str	r3, [r2, #68]	; 0x44
 8009906:	e015      	b.n	8009934 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	69fa      	ldr	r2, [r7, #28]
 8009912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009916:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800991a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800991e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	69fa      	ldr	r2, [r7, #28]
 800992a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800992e:	f043 030b 	orr.w	r3, r3, #11
 8009932:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	69fa      	ldr	r2, [r7, #28]
 800993e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009942:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009946:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6818      	ldr	r0, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009958:	461a      	mov	r2, r3
 800995a:	f004 f817 	bl	800d98c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	695a      	ldr	r2, [r3, #20]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800996c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4618      	mov	r0, r3
 8009974:	f003 ff4d 	bl	800d812 <USB_ReadInterrupts>
 8009978:	4603      	mov	r3, r0
 800997a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800997e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009982:	d124      	bne.n	80099ce <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4618      	mov	r0, r3
 800998a:	f003 ffdd 	bl	800d948 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4618      	mov	r0, r3
 8009994:	f003 f856 	bl	800ca44 <USB_GetDevSpeed>
 8009998:	4603      	mov	r3, r0
 800999a:	461a      	mov	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681c      	ldr	r4, [r3, #0]
 80099a4:	f001 f932 	bl	800ac0c <HAL_RCC_GetHCLKFreq>
 80099a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	461a      	mov	r2, r3
 80099b2:	4620      	mov	r0, r4
 80099b4:	f002 fd78 	bl	800c4a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f005 fece 	bl	800f75a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	695a      	ldr	r2, [r3, #20]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80099cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f003 ff1d 	bl	800d812 <USB_ReadInterrupts>
 80099d8:	4603      	mov	r3, r0
 80099da:	f003 0308 	and.w	r3, r3, #8
 80099de:	2b08      	cmp	r3, #8
 80099e0:	d10a      	bne.n	80099f8 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f005 feab 	bl	800f73e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	695a      	ldr	r2, [r3, #20]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f002 0208 	and.w	r2, r2, #8
 80099f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f003 ff08 	bl	800d812 <USB_ReadInterrupts>
 8009a02:	4603      	mov	r3, r0
 8009a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a0c:	d10f      	bne.n	8009a2e <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f005 ff0d 	bl	800f838 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	695a      	ldr	r2, [r3, #20]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f003 feed 	bl	800d812 <USB_ReadInterrupts>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a42:	d10f      	bne.n	8009a64 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009a44:	2300      	movs	r3, #0
 8009a46:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f005 fee0 	bl	800f814 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	695a      	ldr	r2, [r3, #20]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009a62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f003 fed2 	bl	800d812 <USB_ReadInterrupts>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a78:	d10a      	bne.n	8009a90 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f005 feee 	bl	800f85c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	695a      	ldr	r2, [r3, #20]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f003 febc 	bl	800d812 <USB_ReadInterrupts>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f003 0304 	and.w	r3, r3, #4
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	d115      	bne.n	8009ad0 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	f003 0304 	and.w	r3, r3, #4
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f005 fede 	bl	800f878 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6859      	ldr	r1, [r3, #4]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	69ba      	ldr	r2, [r7, #24]
 8009ac8:	430a      	orrs	r2, r1
 8009aca:	605a      	str	r2, [r3, #4]
 8009acc:	e000      	b.n	8009ad0 <HAL_PCD_IRQHandler+0x742>
      return;
 8009ace:	bf00      	nop
    }
  }
}
 8009ad0:	3734      	adds	r7, #52	; 0x34
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd90      	pop	{r4, r7, pc}

08009ad6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b082      	sub	sp, #8
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	460b      	mov	r3, r1
 8009ae0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d101      	bne.n	8009af0 <HAL_PCD_SetAddress+0x1a>
 8009aec:	2302      	movs	r3, #2
 8009aee:	e013      	b.n	8009b18 <HAL_PCD_SetAddress+0x42>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	78fa      	ldrb	r2, [r7, #3]
 8009afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	78fa      	ldrb	r2, [r7, #3]
 8009b06:	4611      	mov	r1, r2
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f003 fe1d 	bl	800d748 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	4608      	mov	r0, r1
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	4603      	mov	r3, r0
 8009b30:	70fb      	strb	r3, [r7, #3]
 8009b32:	460b      	mov	r3, r1
 8009b34:	803b      	strh	r3, [r7, #0]
 8009b36:	4613      	mov	r3, r2
 8009b38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009b3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	da0f      	bge.n	8009b66 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b46:	78fb      	ldrb	r3, [r7, #3]
 8009b48:	f003 020f 	and.w	r2, r3, #15
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	00db      	lsls	r3, r3, #3
 8009b50:	1a9b      	subs	r3, r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	3338      	adds	r3, #56	; 0x38
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	4413      	add	r3, r2
 8009b5a:	3304      	adds	r3, #4
 8009b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2201      	movs	r2, #1
 8009b62:	705a      	strb	r2, [r3, #1]
 8009b64:	e00f      	b.n	8009b86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b66:	78fb      	ldrb	r3, [r7, #3]
 8009b68:	f003 020f 	and.w	r2, r3, #15
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	00db      	lsls	r3, r3, #3
 8009b70:	1a9b      	subs	r3, r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	3304      	adds	r3, #4
 8009b7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009b86:	78fb      	ldrb	r3, [r7, #3]
 8009b88:	f003 030f 	and.w	r3, r3, #15
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009b92:	883a      	ldrh	r2, [r7, #0]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	78ba      	ldrb	r2, [r7, #2]
 8009b9c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	785b      	ldrb	r3, [r3, #1]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d004      	beq.n	8009bb0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009bb0:	78bb      	ldrb	r3, [r7, #2]
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d102      	bne.n	8009bbc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d101      	bne.n	8009bca <HAL_PCD_EP_Open+0xaa>
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	e00e      	b.n	8009be8 <HAL_PCD_EP_Open+0xc8>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68f9      	ldr	r1, [r7, #12]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f002 ff57 	bl	800ca8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009be6:	7afb      	ldrb	r3, [r7, #11]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	da0f      	bge.n	8009c24 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c04:	78fb      	ldrb	r3, [r7, #3]
 8009c06:	f003 020f 	and.w	r2, r3, #15
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	00db      	lsls	r3, r3, #3
 8009c0e:	1a9b      	subs	r3, r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	3338      	adds	r3, #56	; 0x38
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	4413      	add	r3, r2
 8009c18:	3304      	adds	r3, #4
 8009c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	705a      	strb	r2, [r3, #1]
 8009c22:	e00f      	b.n	8009c44 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c24:	78fb      	ldrb	r3, [r7, #3]
 8009c26:	f003 020f 	and.w	r2, r3, #15
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	00db      	lsls	r3, r3, #3
 8009c2e:	1a9b      	subs	r3, r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	4413      	add	r3, r2
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009c44:	78fb      	ldrb	r3, [r7, #3]
 8009c46:	f003 030f 	and.w	r3, r3, #15
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d101      	bne.n	8009c5e <HAL_PCD_EP_Close+0x6e>
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	e00e      	b.n	8009c7c <HAL_PCD_EP_Close+0x8c>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68f9      	ldr	r1, [r7, #12]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f002 ff93 	bl	800cb98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	607a      	str	r2, [r7, #4]
 8009c8e:	603b      	str	r3, [r7, #0]
 8009c90:	460b      	mov	r3, r1
 8009c92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c94:	7afb      	ldrb	r3, [r7, #11]
 8009c96:	f003 020f 	and.w	r2, r3, #15
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	00db      	lsls	r3, r3, #3
 8009c9e:	1a9b      	subs	r3, r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	4413      	add	r3, r2
 8009caa:	3304      	adds	r3, #4
 8009cac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	683a      	ldr	r2, [r7, #0]
 8009cb8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009cc6:	7afb      	ldrb	r3, [r7, #11]
 8009cc8:	f003 030f 	and.w	r3, r3, #15
 8009ccc:	b2da      	uxtb	r2, r3
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d102      	bne.n	8009ce0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009ce0:	7afb      	ldrb	r3, [r7, #11]
 8009ce2:	f003 030f 	and.w	r3, r3, #15
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d109      	bne.n	8009cfe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6818      	ldr	r0, [r3, #0]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	6979      	ldr	r1, [r7, #20]
 8009cf8:	f003 fa6e 	bl	800d1d8 <USB_EP0StartXfer>
 8009cfc:	e008      	b.n	8009d10 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6818      	ldr	r0, [r3, #0]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	461a      	mov	r2, r3
 8009d0a:	6979      	ldr	r1, [r7, #20]
 8009d0c:	f003 f820 	bl	800cd50 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3718      	adds	r7, #24
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	460b      	mov	r3, r1
 8009d24:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009d26:	78fb      	ldrb	r3, [r7, #3]
 8009d28:	f003 020f 	and.w	r2, r3, #15
 8009d2c:	6879      	ldr	r1, [r7, #4]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	00db      	lsls	r3, r3, #3
 8009d32:	1a9b      	subs	r3, r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	440b      	add	r3, r1
 8009d38:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009d3c:	681b      	ldr	r3, [r3, #0]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	370c      	adds	r7, #12
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bc80      	pop	{r7}
 8009d46:	4770      	bx	lr

08009d48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	607a      	str	r2, [r7, #4]
 8009d52:	603b      	str	r3, [r7, #0]
 8009d54:	460b      	mov	r3, r1
 8009d56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d58:	7afb      	ldrb	r3, [r7, #11]
 8009d5a:	f003 020f 	and.w	r2, r3, #15
 8009d5e:	4613      	mov	r3, r2
 8009d60:	00db      	lsls	r3, r3, #3
 8009d62:	1a9b      	subs	r3, r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	3338      	adds	r3, #56	; 0x38
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2201      	movs	r2, #1
 8009d86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d88:	7afb      	ldrb	r3, [r7, #11]
 8009d8a:	f003 030f 	and.w	r3, r3, #15
 8009d8e:	b2da      	uxtb	r2, r3
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d102      	bne.n	8009da2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009da2:	7afb      	ldrb	r3, [r7, #11]
 8009da4:	f003 030f 	and.w	r3, r3, #15
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d109      	bne.n	8009dc0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6818      	ldr	r0, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	461a      	mov	r2, r3
 8009db8:	6979      	ldr	r1, [r7, #20]
 8009dba:	f003 fa0d 	bl	800d1d8 <USB_EP0StartXfer>
 8009dbe:	e008      	b.n	8009dd2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6818      	ldr	r0, [r3, #0]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	461a      	mov	r2, r3
 8009dcc:	6979      	ldr	r1, [r7, #20]
 8009dce:	f002 ffbf 	bl	800cd50 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009de8:	78fb      	ldrb	r3, [r7, #3]
 8009dea:	f003 020f 	and.w	r2, r3, #15
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d901      	bls.n	8009dfa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e050      	b.n	8009e9c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	da0f      	bge.n	8009e22 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e02:	78fb      	ldrb	r3, [r7, #3]
 8009e04:	f003 020f 	and.w	r2, r3, #15
 8009e08:	4613      	mov	r3, r2
 8009e0a:	00db      	lsls	r3, r3, #3
 8009e0c:	1a9b      	subs	r3, r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	3338      	adds	r3, #56	; 0x38
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	4413      	add	r3, r2
 8009e16:	3304      	adds	r3, #4
 8009e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	705a      	strb	r2, [r3, #1]
 8009e20:	e00d      	b.n	8009e3e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009e22:	78fa      	ldrb	r2, [r7, #3]
 8009e24:	4613      	mov	r3, r2
 8009e26:	00db      	lsls	r3, r3, #3
 8009e28:	1a9b      	subs	r3, r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	4413      	add	r3, r2
 8009e34:	3304      	adds	r3, #4
 8009e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2201      	movs	r2, #1
 8009e42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e44:	78fb      	ldrb	r3, [r7, #3]
 8009e46:	f003 030f 	and.w	r3, r3, #15
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d101      	bne.n	8009e5e <HAL_PCD_EP_SetStall+0x82>
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	e01e      	b.n	8009e9c <HAL_PCD_EP_SetStall+0xc0>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68f9      	ldr	r1, [r7, #12]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f003 fb99 	bl	800d5a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009e72:	78fb      	ldrb	r3, [r7, #3]
 8009e74:	f003 030f 	and.w	r3, r3, #15
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10a      	bne.n	8009e92 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6818      	ldr	r0, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	b2d9      	uxtb	r1, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	f003 fd7d 	bl	800d98c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	460b      	mov	r3, r1
 8009eae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009eb0:	78fb      	ldrb	r3, [r7, #3]
 8009eb2:	f003 020f 	and.w	r2, r3, #15
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d901      	bls.n	8009ec2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e042      	b.n	8009f48 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009ec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	da0f      	bge.n	8009eea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009eca:	78fb      	ldrb	r3, [r7, #3]
 8009ecc:	f003 020f 	and.w	r2, r3, #15
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	00db      	lsls	r3, r3, #3
 8009ed4:	1a9b      	subs	r3, r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	3338      	adds	r3, #56	; 0x38
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	4413      	add	r3, r2
 8009ede:	3304      	adds	r3, #4
 8009ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	705a      	strb	r2, [r3, #1]
 8009ee8:	e00f      	b.n	8009f0a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009eea:	78fb      	ldrb	r3, [r7, #3]
 8009eec:	f003 020f 	and.w	r2, r3, #15
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	00db      	lsls	r3, r3, #3
 8009ef4:	1a9b      	subs	r3, r3, r2
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	4413      	add	r3, r2
 8009f00:	3304      	adds	r3, #4
 8009f02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f10:	78fb      	ldrb	r3, [r7, #3]
 8009f12:	f003 030f 	and.w	r3, r3, #15
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d101      	bne.n	8009f2a <HAL_PCD_EP_ClrStall+0x86>
 8009f26:	2302      	movs	r3, #2
 8009f28:	e00e      	b.n	8009f48 <HAL_PCD_EP_ClrStall+0xa4>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68f9      	ldr	r1, [r7, #12]
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f003 fba0 	bl	800d67e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b08a      	sub	sp, #40	; 0x28
 8009f54:	af02      	add	r7, sp, #8
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009f64:	683a      	ldr	r2, [r7, #0]
 8009f66:	4613      	mov	r3, r2
 8009f68:	00db      	lsls	r3, r3, #3
 8009f6a:	1a9b      	subs	r3, r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	3338      	adds	r3, #56	; 0x38
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	4413      	add	r3, r2
 8009f74:	3304      	adds	r3, #4
 8009f76:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	699a      	ldr	r2, [r3, #24]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	695b      	ldr	r3, [r3, #20]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d901      	bls.n	8009f88 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e06c      	b.n	800a062 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	695a      	ldr	r2, [r3, #20]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	69fa      	ldr	r2, [r7, #28]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d902      	bls.n	8009fa4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	3303      	adds	r3, #3
 8009fa8:	089b      	lsrs	r3, r3, #2
 8009faa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009fac:	e02b      	b.n	800a006 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	695a      	ldr	r2, [r3, #20]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	699b      	ldr	r3, [r3, #24]
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	69fa      	ldr	r2, [r7, #28]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d902      	bls.n	8009fca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	3303      	adds	r3, #3
 8009fce:	089b      	lsrs	r3, r3, #2
 8009fd0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	68d9      	ldr	r1, [r3, #12]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	6978      	ldr	r0, [r7, #20]
 8009fea:	f003 fa47 	bl	800d47c <USB_WritePacket>

    ep->xfer_buff  += len;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	68da      	ldr	r2, [r3, #12]
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	441a      	add	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	699a      	ldr	r2, [r3, #24]
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	441a      	add	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	015a      	lsls	r2, r3, #5
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	4413      	add	r3, r2
 800a00e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	b29b      	uxth	r3, r3
 800a016:	69ba      	ldr	r2, [r7, #24]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d809      	bhi.n	800a030 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	699a      	ldr	r2, [r3, #24]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a024:	429a      	cmp	r2, r3
 800a026:	d203      	bcs.n	800a030 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	695b      	ldr	r3, [r3, #20]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1be      	bne.n	8009fae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	695a      	ldr	r2, [r3, #20]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d811      	bhi.n	800a060 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	f003 030f 	and.w	r3, r3, #15
 800a042:	2201      	movs	r2, #1
 800a044:	fa02 f303 	lsl.w	r3, r2, r3
 800a048:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	43db      	mvns	r3, r3
 800a056:	6939      	ldr	r1, [r7, #16]
 800a058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a05c:	4013      	ands	r3, r2
 800a05e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3720      	adds	r7, #32
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
	...

0800a06c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	333c      	adds	r3, #60	; 0x3c
 800a084:	3304      	adds	r3, #4
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	015a      	lsls	r2, r3, #5
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	4413      	add	r3, r2
 800a092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	f040 80a0 	bne.w	800a1e4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	f003 0308 	and.w	r3, r3, #8
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d015      	beq.n	800a0da <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	4a72      	ldr	r2, [pc, #456]	; (800a27c <PCD_EP_OutXfrComplete_int+0x210>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	f240 80dd 	bls.w	800a272 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f000 80d7 	beq.w	800a272 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	015a      	lsls	r2, r3, #5
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0d6:	6093      	str	r3, [r2, #8]
 800a0d8:	e0cb      	b.n	800a272 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	f003 0320 	and.w	r3, r3, #32
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d009      	beq.n	800a0f8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	015a      	lsls	r2, r3, #5
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	2320      	movs	r3, #32
 800a0f4:	6093      	str	r3, [r2, #8]
 800a0f6:	e0bc      	b.n	800a272 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f040 80b7 	bne.w	800a272 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	4a5d      	ldr	r2, [pc, #372]	; (800a27c <PCD_EP_OutXfrComplete_int+0x210>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d90f      	bls.n	800a12c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00a      	beq.n	800a12c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	015a      	lsls	r2, r3, #5
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	4413      	add	r3, r2
 800a11e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a122:	461a      	mov	r2, r3
 800a124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a128:	6093      	str	r3, [r2, #8]
 800a12a:	e0a2      	b.n	800a272 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a12c:	6879      	ldr	r1, [r7, #4]
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	4613      	mov	r3, r2
 800a132:	00db      	lsls	r3, r3, #3
 800a134:	1a9b      	subs	r3, r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	440b      	add	r3, r1
 800a13a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a13e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	0159      	lsls	r1, r3, #5
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	440b      	add	r3, r1
 800a148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a152:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	4613      	mov	r3, r2
 800a15a:	00db      	lsls	r3, r3, #3
 800a15c:	1a9b      	subs	r3, r3, r2
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	4403      	add	r3, r0
 800a162:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a166:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a168:	6879      	ldr	r1, [r7, #4]
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	4613      	mov	r3, r2
 800a16e:	00db      	lsls	r3, r3, #3
 800a170:	1a9b      	subs	r3, r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	440b      	add	r3, r1
 800a176:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a17a:	6819      	ldr	r1, [r3, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	4613      	mov	r3, r2
 800a182:	00db      	lsls	r3, r3, #3
 800a184:	1a9b      	subs	r3, r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4403      	add	r3, r0
 800a18a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4419      	add	r1, r3
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	683a      	ldr	r2, [r7, #0]
 800a196:	4613      	mov	r3, r2
 800a198:	00db      	lsls	r3, r3, #3
 800a19a:	1a9b      	subs	r3, r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4403      	add	r3, r0
 800a1a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a1a4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d114      	bne.n	800a1d6 <PCD_EP_OutXfrComplete_int+0x16a>
 800a1ac:	6879      	ldr	r1, [r7, #4]
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	1a9b      	subs	r3, r3, r2
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	440b      	add	r3, r1
 800a1ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d108      	bne.n	800a1d6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6818      	ldr	r0, [r3, #0]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	f003 fbdb 	bl	800d98c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f005 fa79 	bl	800f6d4 <HAL_PCD_DataOutStageCallback>
 800a1e2:	e046      	b.n	800a272 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	4a26      	ldr	r2, [pc, #152]	; (800a280 <PCD_EP_OutXfrComplete_int+0x214>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d124      	bne.n	800a236 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00a      	beq.n	800a20c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	015a      	lsls	r2, r3, #5
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a202:	461a      	mov	r2, r3
 800a204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a208:	6093      	str	r3, [r2, #8]
 800a20a:	e032      	b.n	800a272 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	f003 0320 	and.w	r3, r3, #32
 800a212:	2b00      	cmp	r3, #0
 800a214:	d008      	beq.n	800a228 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	015a      	lsls	r2, r3, #5
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	4413      	add	r3, r2
 800a21e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a222:	461a      	mov	r2, r3
 800a224:	2320      	movs	r3, #32
 800a226:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	4619      	mov	r1, r3
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f005 fa50 	bl	800f6d4 <HAL_PCD_DataOutStageCallback>
 800a234:	e01d      	b.n	800a272 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d114      	bne.n	800a266 <PCD_EP_OutXfrComplete_int+0x1fa>
 800a23c:	6879      	ldr	r1, [r7, #4]
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	4613      	mov	r3, r2
 800a242:	00db      	lsls	r3, r3, #3
 800a244:	1a9b      	subs	r3, r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	440b      	add	r3, r1
 800a24a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d108      	bne.n	800a266 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6818      	ldr	r0, [r3, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a25e:	461a      	mov	r2, r3
 800a260:	2100      	movs	r1, #0
 800a262:	f003 fb93 	bl	800d98c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	4619      	mov	r1, r3
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f005 fa31 	bl	800f6d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	4f54300a 	.word	0x4f54300a
 800a280:	4f54310a 	.word	0x4f54310a

0800a284 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	333c      	adds	r3, #60	; 0x3c
 800a29c:	3304      	adds	r3, #4
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	015a      	lsls	r2, r3, #5
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	4a15      	ldr	r2, [pc, #84]	; (800a30c <PCD_EP_OutSetupPacket_int+0x88>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d90e      	bls.n	800a2d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d009      	beq.n	800a2d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	015a      	lsls	r2, r3, #5
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f005 f9e9 	bl	800f6b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	4a0a      	ldr	r2, [pc, #40]	; (800a30c <PCD_EP_OutSetupPacket_int+0x88>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d90c      	bls.n	800a300 <PCD_EP_OutSetupPacket_int+0x7c>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d108      	bne.n	800a300 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6818      	ldr	r0, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	f003 fb46 	bl	800d98c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3718      	adds	r7, #24
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	4f54300a 	.word	0x4f54300a

0800a310 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	460b      	mov	r3, r1
 800a31a:	70fb      	strb	r3, [r7, #3]
 800a31c:	4613      	mov	r3, r2
 800a31e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a328:	78fb      	ldrb	r3, [r7, #3]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d107      	bne.n	800a33e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a32e:	883b      	ldrh	r3, [r7, #0]
 800a330:	0419      	lsls	r1, r3, #16
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	430a      	orrs	r2, r1
 800a33a:	629a      	str	r2, [r3, #40]	; 0x28
 800a33c:	e028      	b.n	800a390 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a344:	0c1b      	lsrs	r3, r3, #16
 800a346:	68ba      	ldr	r2, [r7, #8]
 800a348:	4413      	add	r3, r2
 800a34a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a34c:	2300      	movs	r3, #0
 800a34e:	73fb      	strb	r3, [r7, #15]
 800a350:	e00d      	b.n	800a36e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	7bfb      	ldrb	r3, [r7, #15]
 800a358:	3340      	adds	r3, #64	; 0x40
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	0c1b      	lsrs	r3, r3, #16
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	4413      	add	r3, r2
 800a366:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a368:	7bfb      	ldrb	r3, [r7, #15]
 800a36a:	3301      	adds	r3, #1
 800a36c:	73fb      	strb	r3, [r7, #15]
 800a36e:	7bfa      	ldrb	r2, [r7, #15]
 800a370:	78fb      	ldrb	r3, [r7, #3]
 800a372:	3b01      	subs	r3, #1
 800a374:	429a      	cmp	r2, r3
 800a376:	d3ec      	bcc.n	800a352 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a378:	883b      	ldrh	r3, [r7, #0]
 800a37a:	0418      	lsls	r0, r3, #16
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6819      	ldr	r1, [r3, #0]
 800a380:	78fb      	ldrb	r3, [r7, #3]
 800a382:	3b01      	subs	r3, #1
 800a384:	68ba      	ldr	r2, [r7, #8]
 800a386:	4302      	orrs	r2, r0
 800a388:	3340      	adds	r3, #64	; 0x40
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	440b      	add	r3, r1
 800a38e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	bc80      	pop	{r7}
 800a39a:	4770      	bx	lr

0800a39c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	887a      	ldrh	r2, [r7, #2]
 800a3ae:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	370c      	adds	r7, #12
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bc80      	pop	{r7}
 800a3ba:	4770      	bx	lr

0800a3bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b08a      	sub	sp, #40	; 0x28
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d101      	bne.n	800a3ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e237      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f003 0301 	and.w	r3, r3, #1
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d050      	beq.n	800a47c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a3da:	4ba3      	ldr	r3, [pc, #652]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	f003 030c 	and.w	r3, r3, #12
 800a3e2:	2b04      	cmp	r3, #4
 800a3e4:	d00c      	beq.n	800a400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a3e6:	4ba0      	ldr	r3, [pc, #640]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a3ee:	2b08      	cmp	r3, #8
 800a3f0:	d112      	bne.n	800a418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a3f2:	4b9d      	ldr	r3, [pc, #628]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3fe:	d10b      	bne.n	800a418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a400:	4b99      	ldr	r3, [pc, #612]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d036      	beq.n	800a47a <HAL_RCC_OscConfig+0xbe>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d132      	bne.n	800a47a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	e212      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685a      	ldr	r2, [r3, #4]
 800a41c:	4b93      	ldr	r3, [pc, #588]	; (800a66c <HAL_RCC_OscConfig+0x2b0>)
 800a41e:	b2d2      	uxtb	r2, r2
 800a420:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d013      	beq.n	800a452 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a42a:	f7fc fce3 	bl	8006df4 <HAL_GetTick>
 800a42e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a430:	e008      	b.n	800a444 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a432:	f7fc fcdf 	bl	8006df4 <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	6a3b      	ldr	r3, [r7, #32]
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	2b64      	cmp	r3, #100	; 0x64
 800a43e:	d901      	bls.n	800a444 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e1fc      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a444:	4b88      	ldr	r3, [pc, #544]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0f0      	beq.n	800a432 <HAL_RCC_OscConfig+0x76>
 800a450:	e014      	b.n	800a47c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a452:	f7fc fccf 	bl	8006df4 <HAL_GetTick>
 800a456:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a458:	e008      	b.n	800a46c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a45a:	f7fc fccb 	bl	8006df4 <HAL_GetTick>
 800a45e:	4602      	mov	r2, r0
 800a460:	6a3b      	ldr	r3, [r7, #32]
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	2b64      	cmp	r3, #100	; 0x64
 800a466:	d901      	bls.n	800a46c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800a468:	2303      	movs	r3, #3
 800a46a:	e1e8      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a46c:	4b7e      	ldr	r3, [pc, #504]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1f0      	bne.n	800a45a <HAL_RCC_OscConfig+0x9e>
 800a478:	e000      	b.n	800a47c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a47a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 0302 	and.w	r3, r3, #2
 800a484:	2b00      	cmp	r3, #0
 800a486:	d077      	beq.n	800a578 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a488:	4b77      	ldr	r3, [pc, #476]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f003 030c 	and.w	r3, r3, #12
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00b      	beq.n	800a4ac <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a494:	4b74      	ldr	r3, [pc, #464]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a49c:	2b08      	cmp	r3, #8
 800a49e:	d126      	bne.n	800a4ee <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a4a0:	4b71      	ldr	r3, [pc, #452]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d120      	bne.n	800a4ee <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a4ac:	4b6e      	ldr	r3, [pc, #440]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 0302 	and.w	r3, r3, #2
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d005      	beq.n	800a4c4 <HAL_RCC_OscConfig+0x108>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d001      	beq.n	800a4c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e1bc      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4c4:	4b68      	ldr	r3, [pc, #416]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	21f8      	movs	r1, #248	; 0xf8
 800a4d2:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4d4:	69b9      	ldr	r1, [r7, #24]
 800a4d6:	fa91 f1a1 	rbit	r1, r1
 800a4da:	6179      	str	r1, [r7, #20]
  return result;
 800a4dc:	6979      	ldr	r1, [r7, #20]
 800a4de:	fab1 f181 	clz	r1, r1
 800a4e2:	b2c9      	uxtb	r1, r1
 800a4e4:	408b      	lsls	r3, r1
 800a4e6:	4960      	ldr	r1, [pc, #384]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a4ec:	e044      	b.n	800a578 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d02a      	beq.n	800a54c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a4f6:	4b5e      	ldr	r3, [pc, #376]	; (800a670 <HAL_RCC_OscConfig+0x2b4>)
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4fc:	f7fc fc7a 	bl	8006df4 <HAL_GetTick>
 800a500:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a502:	e008      	b.n	800a516 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a504:	f7fc fc76 	bl	8006df4 <HAL_GetTick>
 800a508:	4602      	mov	r2, r0
 800a50a:	6a3b      	ldr	r3, [r7, #32]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d901      	bls.n	800a516 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800a512:	2303      	movs	r3, #3
 800a514:	e193      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a516:	4b54      	ldr	r3, [pc, #336]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0302 	and.w	r3, r3, #2
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d0f0      	beq.n	800a504 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a522:	4b51      	ldr	r3, [pc, #324]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	21f8      	movs	r1, #248	; 0xf8
 800a530:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a532:	6939      	ldr	r1, [r7, #16]
 800a534:	fa91 f1a1 	rbit	r1, r1
 800a538:	60f9      	str	r1, [r7, #12]
  return result;
 800a53a:	68f9      	ldr	r1, [r7, #12]
 800a53c:	fab1 f181 	clz	r1, r1
 800a540:	b2c9      	uxtb	r1, r1
 800a542:	408b      	lsls	r3, r1
 800a544:	4948      	ldr	r1, [pc, #288]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a546:	4313      	orrs	r3, r2
 800a548:	600b      	str	r3, [r1, #0]
 800a54a:	e015      	b.n	800a578 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a54c:	4b48      	ldr	r3, [pc, #288]	; (800a670 <HAL_RCC_OscConfig+0x2b4>)
 800a54e:	2200      	movs	r2, #0
 800a550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a552:	f7fc fc4f 	bl	8006df4 <HAL_GetTick>
 800a556:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a558:	e008      	b.n	800a56c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a55a:	f7fc fc4b 	bl	8006df4 <HAL_GetTick>
 800a55e:	4602      	mov	r2, r0
 800a560:	6a3b      	ldr	r3, [r7, #32]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	2b02      	cmp	r3, #2
 800a566:	d901      	bls.n	800a56c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800a568:	2303      	movs	r3, #3
 800a56a:	e168      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a56c:	4b3e      	ldr	r3, [pc, #248]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 0302 	and.w	r3, r3, #2
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1f0      	bne.n	800a55a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 0308 	and.w	r3, r3, #8
 800a580:	2b00      	cmp	r3, #0
 800a582:	d030      	beq.n	800a5e6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	695b      	ldr	r3, [r3, #20]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d016      	beq.n	800a5ba <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a58c:	4b39      	ldr	r3, [pc, #228]	; (800a674 <HAL_RCC_OscConfig+0x2b8>)
 800a58e:	2201      	movs	r2, #1
 800a590:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a592:	f7fc fc2f 	bl	8006df4 <HAL_GetTick>
 800a596:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a598:	e008      	b.n	800a5ac <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a59a:	f7fc fc2b 	bl	8006df4 <HAL_GetTick>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d901      	bls.n	800a5ac <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	e148      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5ac:	4b2e      	ldr	r3, [pc, #184]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a5ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5b0:	f003 0302 	and.w	r3, r3, #2
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d0f0      	beq.n	800a59a <HAL_RCC_OscConfig+0x1de>
 800a5b8:	e015      	b.n	800a5e6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a5ba:	4b2e      	ldr	r3, [pc, #184]	; (800a674 <HAL_RCC_OscConfig+0x2b8>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5c0:	f7fc fc18 	bl	8006df4 <HAL_GetTick>
 800a5c4:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a5c6:	e008      	b.n	800a5da <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a5c8:	f7fc fc14 	bl	8006df4 <HAL_GetTick>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	6a3b      	ldr	r3, [r7, #32]
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d901      	bls.n	800a5da <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800a5d6:	2303      	movs	r3, #3
 800a5d8:	e131      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a5da:	4b23      	ldr	r3, [pc, #140]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a5dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5de:	f003 0302 	and.w	r3, r3, #2
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1f0      	bne.n	800a5c8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 0304 	and.w	r3, r3, #4
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f000 8088 	beq.w	800a704 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a5fa:	4b1b      	ldr	r3, [pc, #108]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a602:	2b00      	cmp	r3, #0
 800a604:	d110      	bne.n	800a628 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a606:	2300      	movs	r3, #0
 800a608:	60bb      	str	r3, [r7, #8]
 800a60a:	4b17      	ldr	r3, [pc, #92]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60e:	4a16      	ldr	r2, [pc, #88]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a614:	6413      	str	r3, [r2, #64]	; 0x40
 800a616:	4b14      	ldr	r3, [pc, #80]	; (800a668 <HAL_RCC_OscConfig+0x2ac>)
 800a618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a61e:	60bb      	str	r3, [r7, #8]
 800a620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a622:	2301      	movs	r3, #1
 800a624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a628:	4b13      	ldr	r3, [pc, #76]	; (800a678 <HAL_RCC_OscConfig+0x2bc>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a12      	ldr	r2, [pc, #72]	; (800a678 <HAL_RCC_OscConfig+0x2bc>)
 800a62e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a632:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a634:	4b10      	ldr	r3, [pc, #64]	; (800a678 <HAL_RCC_OscConfig+0x2bc>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d123      	bne.n	800a688 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a640:	4b0d      	ldr	r3, [pc, #52]	; (800a678 <HAL_RCC_OscConfig+0x2bc>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a0c      	ldr	r2, [pc, #48]	; (800a678 <HAL_RCC_OscConfig+0x2bc>)
 800a646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a64a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a64c:	f7fc fbd2 	bl	8006df4 <HAL_GetTick>
 800a650:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a652:	e013      	b.n	800a67c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a654:	f7fc fbce 	bl	8006df4 <HAL_GetTick>
 800a658:	4602      	mov	r2, r0
 800a65a:	6a3b      	ldr	r3, [r7, #32]
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d90c      	bls.n	800a67c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	e0eb      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
 800a666:	bf00      	nop
 800a668:	40023800 	.word	0x40023800
 800a66c:	40023802 	.word	0x40023802
 800a670:	42470000 	.word	0x42470000
 800a674:	42470e80 	.word	0x42470e80
 800a678:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a67c:	4b72      	ldr	r3, [pc, #456]	; (800a848 <HAL_RCC_OscConfig+0x48c>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a684:	2b00      	cmp	r3, #0
 800a686:	d0e5      	beq.n	800a654 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	689a      	ldr	r2, [r3, #8]
 800a68c:	4b6f      	ldr	r3, [pc, #444]	; (800a84c <HAL_RCC_OscConfig+0x490>)
 800a68e:	b2d2      	uxtb	r2, r2
 800a690:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d015      	beq.n	800a6c6 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a69a:	f7fc fbab 	bl	8006df4 <HAL_GetTick>
 800a69e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6a0:	e00a      	b.n	800a6b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a6a2:	f7fc fba7 	bl	8006df4 <HAL_GetTick>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	6a3b      	ldr	r3, [r7, #32]
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d901      	bls.n	800a6b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	e0c2      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6b8:	4b65      	ldr	r3, [pc, #404]	; (800a850 <HAL_RCC_OscConfig+0x494>)
 800a6ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6bc:	f003 0302 	and.w	r3, r3, #2
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d0ee      	beq.n	800a6a2 <HAL_RCC_OscConfig+0x2e6>
 800a6c4:	e014      	b.n	800a6f0 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a6c6:	f7fc fb95 	bl	8006df4 <HAL_GetTick>
 800a6ca:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a6cc:	e00a      	b.n	800a6e4 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a6ce:	f7fc fb91 	bl	8006df4 <HAL_GetTick>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	6a3b      	ldr	r3, [r7, #32]
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d901      	bls.n	800a6e4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	e0ac      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a6e4:	4b5a      	ldr	r3, [pc, #360]	; (800a850 <HAL_RCC_OscConfig+0x494>)
 800a6e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e8:	f003 0302 	and.w	r3, r3, #2
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d1ee      	bne.n	800a6ce <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a6f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d105      	bne.n	800a704 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a6f8:	4b55      	ldr	r3, [pc, #340]	; (800a850 <HAL_RCC_OscConfig+0x494>)
 800a6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fc:	4a54      	ldr	r2, [pc, #336]	; (800a850 <HAL_RCC_OscConfig+0x494>)
 800a6fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a702:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 8097 	beq.w	800a83c <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a70e:	4b50      	ldr	r3, [pc, #320]	; (800a850 <HAL_RCC_OscConfig+0x494>)
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	f003 030c 	and.w	r3, r3, #12
 800a716:	2b08      	cmp	r3, #8
 800a718:	d061      	beq.n	800a7de <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d146      	bne.n	800a7b0 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a722:	4b4c      	ldr	r3, [pc, #304]	; (800a854 <HAL_RCC_OscConfig+0x498>)
 800a724:	2200      	movs	r2, #0
 800a726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a728:	f7fc fb64 	bl	8006df4 <HAL_GetTick>
 800a72c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a72e:	e008      	b.n	800a742 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a730:	f7fc fb60 	bl	8006df4 <HAL_GetTick>
 800a734:	4602      	mov	r2, r0
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	2b64      	cmp	r3, #100	; 0x64
 800a73c:	d901      	bls.n	800a742 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 800a73e:	2303      	movs	r3, #3
 800a740:	e07d      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a742:	4b43      	ldr	r3, [pc, #268]	; (800a850 <HAL_RCC_OscConfig+0x494>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1f0      	bne.n	800a730 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a74e:	4b40      	ldr	r3, [pc, #256]	; (800a850 <HAL_RCC_OscConfig+0x494>)
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	4b41      	ldr	r3, [pc, #260]	; (800a858 <HAL_RCC_OscConfig+0x49c>)
 800a754:	4013      	ands	r3, r2
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	69d1      	ldr	r1, [r2, #28]
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	6a12      	ldr	r2, [r2, #32]
 800a75e:	4311      	orrs	r1, r2
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a764:	0192      	lsls	r2, r2, #6
 800a766:	4311      	orrs	r1, r2
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a76c:	0612      	lsls	r2, r2, #24
 800a76e:	4311      	orrs	r1, r2
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a774:	0852      	lsrs	r2, r2, #1
 800a776:	3a01      	subs	r2, #1
 800a778:	0412      	lsls	r2, r2, #16
 800a77a:	430a      	orrs	r2, r1
 800a77c:	4934      	ldr	r1, [pc, #208]	; (800a850 <HAL_RCC_OscConfig+0x494>)
 800a77e:	4313      	orrs	r3, r2
 800a780:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a782:	4b34      	ldr	r3, [pc, #208]	; (800a854 <HAL_RCC_OscConfig+0x498>)
 800a784:	2201      	movs	r2, #1
 800a786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a788:	f7fc fb34 	bl	8006df4 <HAL_GetTick>
 800a78c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a78e:	e008      	b.n	800a7a2 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a790:	f7fc fb30 	bl	8006df4 <HAL_GetTick>
 800a794:	4602      	mov	r2, r0
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	1ad3      	subs	r3, r2, r3
 800a79a:	2b64      	cmp	r3, #100	; 0x64
 800a79c:	d901      	bls.n	800a7a2 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e04d      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7a2:	4b2b      	ldr	r3, [pc, #172]	; (800a850 <HAL_RCC_OscConfig+0x494>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0f0      	beq.n	800a790 <HAL_RCC_OscConfig+0x3d4>
 800a7ae:	e045      	b.n	800a83c <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7b0:	4b28      	ldr	r3, [pc, #160]	; (800a854 <HAL_RCC_OscConfig+0x498>)
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7b6:	f7fc fb1d 	bl	8006df4 <HAL_GetTick>
 800a7ba:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7bc:	e008      	b.n	800a7d0 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a7be:	f7fc fb19 	bl	8006df4 <HAL_GetTick>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	6a3b      	ldr	r3, [r7, #32]
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	2b64      	cmp	r3, #100	; 0x64
 800a7ca:	d901      	bls.n	800a7d0 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 800a7cc:	2303      	movs	r3, #3
 800a7ce:	e036      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7d0:	4b1f      	ldr	r3, [pc, #124]	; (800a850 <HAL_RCC_OscConfig+0x494>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1f0      	bne.n	800a7be <HAL_RCC_OscConfig+0x402>
 800a7dc:	e02e      	b.n	800a83c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d101      	bne.n	800a7ea <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e029      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800a7ea:	4b19      	ldr	r3, [pc, #100]	; (800a850 <HAL_RCC_OscConfig+0x494>)
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	69db      	ldr	r3, [r3, #28]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d11c      	bne.n	800a838 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a808:	429a      	cmp	r2, r3
 800a80a:	d115      	bne.n	800a838 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	099b      	lsrs	r3, r3, #6
 800a810:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a818:	429a      	cmp	r2, r3
 800a81a:	d10d      	bne.n	800a838 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800a826:	429a      	cmp	r2, r3
 800a828:	d106      	bne.n	800a838 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a834:	429a      	cmp	r2, r3
 800a836:	d001      	beq.n	800a83c <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e000      	b.n	800a83e <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3728      	adds	r7, #40	; 0x28
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	40007000 	.word	0x40007000
 800a84c:	40023870 	.word	0x40023870
 800a850:	40023800 	.word	0x40023800
 800a854:	42470060 	.word	0x42470060
 800a858:	f0bc8000 	.word	0xf0bc8000

0800a85c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b086      	sub	sp, #24
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d101      	bne.n	800a870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e0d2      	b.n	800aa16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a870:	4b6b      	ldr	r3, [pc, #428]	; (800aa20 <HAL_RCC_ClockConfig+0x1c4>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 030f 	and.w	r3, r3, #15
 800a878:	683a      	ldr	r2, [r7, #0]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d90c      	bls.n	800a898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a87e:	4b68      	ldr	r3, [pc, #416]	; (800aa20 <HAL_RCC_ClockConfig+0x1c4>)
 800a880:	683a      	ldr	r2, [r7, #0]
 800a882:	b2d2      	uxtb	r2, r2
 800a884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a886:	4b66      	ldr	r3, [pc, #408]	; (800aa20 <HAL_RCC_ClockConfig+0x1c4>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 030f 	and.w	r3, r3, #15
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	429a      	cmp	r2, r3
 800a892:	d001      	beq.n	800a898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e0be      	b.n	800aa16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 0302 	and.w	r3, r3, #2
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d020      	beq.n	800a8e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 0304 	and.w	r3, r3, #4
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d005      	beq.n	800a8bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a8b0:	4b5c      	ldr	r3, [pc, #368]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	4a5b      	ldr	r2, [pc, #364]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a8b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a8ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 0308 	and.w	r3, r3, #8
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d005      	beq.n	800a8d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800a8c8:	4b56      	ldr	r3, [pc, #344]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	4a55      	ldr	r2, [pc, #340]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a8ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a8d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8d4:	4b53      	ldr	r3, [pc, #332]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	4950      	ldr	r1, [pc, #320]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d040      	beq.n	800a974 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d107      	bne.n	800a90a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8fa:	4b4a      	ldr	r3, [pc, #296]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a902:	2b00      	cmp	r3, #0
 800a904:	d115      	bne.n	800a932 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e085      	b.n	800aa16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d107      	bne.n	800a922 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a912:	4b44      	ldr	r3, [pc, #272]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d109      	bne.n	800a932 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	e079      	b.n	800aa16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a922:	4b40      	ldr	r3, [pc, #256]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f003 0302 	and.w	r3, r3, #2
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d101      	bne.n	800a932 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e071      	b.n	800aa16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a932:	4b3c      	ldr	r3, [pc, #240]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	f023 0203 	bic.w	r2, r3, #3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	4939      	ldr	r1, [pc, #228]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a940:	4313      	orrs	r3, r2
 800a942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a944:	f7fc fa56 	bl	8006df4 <HAL_GetTick>
 800a948:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a94a:	e00a      	b.n	800a962 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a94c:	f7fc fa52 	bl	8006df4 <HAL_GetTick>
 800a950:	4602      	mov	r2, r0
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	1ad3      	subs	r3, r2, r3
 800a956:	f241 3288 	movw	r2, #5000	; 0x1388
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d901      	bls.n	800a962 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e059      	b.n	800aa16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a962:	4b30      	ldr	r3, [pc, #192]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	f003 020c 	and.w	r2, r3, #12
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	429a      	cmp	r2, r3
 800a972:	d1eb      	bne.n	800a94c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a974:	4b2a      	ldr	r3, [pc, #168]	; (800aa20 <HAL_RCC_ClockConfig+0x1c4>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 030f 	and.w	r3, r3, #15
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d20c      	bcs.n	800a99c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a982:	4b27      	ldr	r3, [pc, #156]	; (800aa20 <HAL_RCC_ClockConfig+0x1c4>)
 800a984:	683a      	ldr	r2, [r7, #0]
 800a986:	b2d2      	uxtb	r2, r2
 800a988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a98a:	4b25      	ldr	r3, [pc, #148]	; (800aa20 <HAL_RCC_ClockConfig+0x1c4>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 030f 	and.w	r3, r3, #15
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	429a      	cmp	r2, r3
 800a996:	d001      	beq.n	800a99c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e03c      	b.n	800aa16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 0304 	and.w	r3, r3, #4
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d008      	beq.n	800a9ba <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9a8:	4b1e      	ldr	r3, [pc, #120]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	491b      	ldr	r1, [pc, #108]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f003 0308 	and.w	r3, r3, #8
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d009      	beq.n	800a9da <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a9c6:	4b17      	ldr	r3, [pc, #92]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	00db      	lsls	r3, r3, #3
 800a9d4:	4913      	ldr	r1, [pc, #76]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800a9da:	f000 f837 	bl	800aa4c <HAL_RCC_GetSysClockFreq>
 800a9de:	4601      	mov	r1, r0
 800a9e0:	4b10      	ldr	r3, [pc, #64]	; (800aa24 <HAL_RCC_ClockConfig+0x1c8>)
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9e8:	22f0      	movs	r2, #240	; 0xf0
 800a9ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9ec:	693a      	ldr	r2, [r7, #16]
 800a9ee:	fa92 f2a2 	rbit	r2, r2
 800a9f2:	60fa      	str	r2, [r7, #12]
  return result;
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	fab2 f282 	clz	r2, r2
 800a9fa:	b2d2      	uxtb	r2, r2
 800a9fc:	40d3      	lsrs	r3, r2
 800a9fe:	4a0a      	ldr	r2, [pc, #40]	; (800aa28 <HAL_RCC_ClockConfig+0x1cc>)
 800aa00:	5cd3      	ldrb	r3, [r2, r3]
 800aa02:	fa21 f303 	lsr.w	r3, r1, r3
 800aa06:	4a09      	ldr	r2, [pc, #36]	; (800aa2c <HAL_RCC_ClockConfig+0x1d0>)
 800aa08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800aa0a:	4b09      	ldr	r3, [pc, #36]	; (800aa30 <HAL_RCC_ClockConfig+0x1d4>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fc f9ae 	bl	8006d70 <HAL_InitTick>

  return HAL_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	40023c00 	.word	0x40023c00
 800aa24:	40023800 	.word	0x40023800
 800aa28:	08015574 	.word	0x08015574
 800aa2c:	2000005c 	.word	0x2000005c
 800aa30:	20000060 	.word	0x20000060

0800aa34 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800aa34:	b480      	push	{r7}
 800aa36:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800aa38:	4b03      	ldr	r3, [pc, #12]	; (800aa48 <HAL_RCC_EnableCSS+0x14>)
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	601a      	str	r2, [r3, #0]
}
 800aa3e:	bf00      	nop
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bc80      	pop	{r7}
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	4247004c 	.word	0x4247004c

0800aa4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800aa50:	b084      	sub	sp, #16
 800aa52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800aa54:	2300      	movs	r3, #0
 800aa56:	607b      	str	r3, [r7, #4]
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60fb      	str	r3, [r7, #12]
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800aa60:	2300      	movs	r3, #0
 800aa62:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aa64:	4b67      	ldr	r3, [pc, #412]	; (800ac04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f003 030c 	and.w	r3, r3, #12
 800aa6c:	2b08      	cmp	r3, #8
 800aa6e:	d00d      	beq.n	800aa8c <HAL_RCC_GetSysClockFreq+0x40>
 800aa70:	2b08      	cmp	r3, #8
 800aa72:	f200 80bd 	bhi.w	800abf0 <HAL_RCC_GetSysClockFreq+0x1a4>
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d002      	beq.n	800aa80 <HAL_RCC_GetSysClockFreq+0x34>
 800aa7a:	2b04      	cmp	r3, #4
 800aa7c:	d003      	beq.n	800aa86 <HAL_RCC_GetSysClockFreq+0x3a>
 800aa7e:	e0b7      	b.n	800abf0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aa80:	4b61      	ldr	r3, [pc, #388]	; (800ac08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800aa82:	60bb      	str	r3, [r7, #8]
       break;
 800aa84:	e0b7      	b.n	800abf6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aa86:	4b60      	ldr	r3, [pc, #384]	; (800ac08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800aa88:	60bb      	str	r3, [r7, #8]
      break;
 800aa8a:	e0b4      	b.n	800abf6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aa8c:	4b5d      	ldr	r3, [pc, #372]	; (800ac04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aa96:	4b5b      	ldr	r3, [pc, #364]	; (800ac04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d04d      	beq.n	800ab3e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aaa2:	4b58      	ldr	r3, [pc, #352]	; (800ac04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	099b      	lsrs	r3, r3, #6
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	f04f 0300 	mov.w	r3, #0
 800aaae:	f240 10ff 	movw	r0, #511	; 0x1ff
 800aab2:	f04f 0100 	mov.w	r1, #0
 800aab6:	ea02 0800 	and.w	r8, r2, r0
 800aaba:	ea03 0901 	and.w	r9, r3, r1
 800aabe:	4640      	mov	r0, r8
 800aac0:	4649      	mov	r1, r9
 800aac2:	f04f 0200 	mov.w	r2, #0
 800aac6:	f04f 0300 	mov.w	r3, #0
 800aaca:	014b      	lsls	r3, r1, #5
 800aacc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800aad0:	0142      	lsls	r2, r0, #5
 800aad2:	4610      	mov	r0, r2
 800aad4:	4619      	mov	r1, r3
 800aad6:	ebb0 0008 	subs.w	r0, r0, r8
 800aada:	eb61 0109 	sbc.w	r1, r1, r9
 800aade:	f04f 0200 	mov.w	r2, #0
 800aae2:	f04f 0300 	mov.w	r3, #0
 800aae6:	018b      	lsls	r3, r1, #6
 800aae8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800aaec:	0182      	lsls	r2, r0, #6
 800aaee:	1a12      	subs	r2, r2, r0
 800aaf0:	eb63 0301 	sbc.w	r3, r3, r1
 800aaf4:	f04f 0000 	mov.w	r0, #0
 800aaf8:	f04f 0100 	mov.w	r1, #0
 800aafc:	00d9      	lsls	r1, r3, #3
 800aafe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab02:	00d0      	lsls	r0, r2, #3
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	eb12 0208 	adds.w	r2, r2, r8
 800ab0c:	eb43 0309 	adc.w	r3, r3, r9
 800ab10:	f04f 0000 	mov.w	r0, #0
 800ab14:	f04f 0100 	mov.w	r1, #0
 800ab18:	0299      	lsls	r1, r3, #10
 800ab1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ab1e:	0290      	lsls	r0, r2, #10
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	4610      	mov	r0, r2
 800ab26:	4619      	mov	r1, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	f04f 0300 	mov.w	r3, #0
 800ab30:	f7f6 fb86 	bl	8001240 <__aeabi_uldivmod>
 800ab34:	4602      	mov	r2, r0
 800ab36:	460b      	mov	r3, r1
 800ab38:	4613      	mov	r3, r2
 800ab3a:	60fb      	str	r3, [r7, #12]
 800ab3c:	e04a      	b.n	800abd4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab3e:	4b31      	ldr	r3, [pc, #196]	; (800ac04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	099b      	lsrs	r3, r3, #6
 800ab44:	461a      	mov	r2, r3
 800ab46:	f04f 0300 	mov.w	r3, #0
 800ab4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ab4e:	f04f 0100 	mov.w	r1, #0
 800ab52:	ea02 0400 	and.w	r4, r2, r0
 800ab56:	ea03 0501 	and.w	r5, r3, r1
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	f04f 0200 	mov.w	r2, #0
 800ab62:	f04f 0300 	mov.w	r3, #0
 800ab66:	014b      	lsls	r3, r1, #5
 800ab68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ab6c:	0142      	lsls	r2, r0, #5
 800ab6e:	4610      	mov	r0, r2
 800ab70:	4619      	mov	r1, r3
 800ab72:	1b00      	subs	r0, r0, r4
 800ab74:	eb61 0105 	sbc.w	r1, r1, r5
 800ab78:	f04f 0200 	mov.w	r2, #0
 800ab7c:	f04f 0300 	mov.w	r3, #0
 800ab80:	018b      	lsls	r3, r1, #6
 800ab82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ab86:	0182      	lsls	r2, r0, #6
 800ab88:	1a12      	subs	r2, r2, r0
 800ab8a:	eb63 0301 	sbc.w	r3, r3, r1
 800ab8e:	f04f 0000 	mov.w	r0, #0
 800ab92:	f04f 0100 	mov.w	r1, #0
 800ab96:	00d9      	lsls	r1, r3, #3
 800ab98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab9c:	00d0      	lsls	r0, r2, #3
 800ab9e:	4602      	mov	r2, r0
 800aba0:	460b      	mov	r3, r1
 800aba2:	1912      	adds	r2, r2, r4
 800aba4:	eb45 0303 	adc.w	r3, r5, r3
 800aba8:	f04f 0000 	mov.w	r0, #0
 800abac:	f04f 0100 	mov.w	r1, #0
 800abb0:	0299      	lsls	r1, r3, #10
 800abb2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800abb6:	0290      	lsls	r0, r2, #10
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	4610      	mov	r0, r2
 800abbe:	4619      	mov	r1, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	461a      	mov	r2, r3
 800abc4:	f04f 0300 	mov.w	r3, #0
 800abc8:	f7f6 fb3a 	bl	8001240 <__aeabi_uldivmod>
 800abcc:	4602      	mov	r2, r0
 800abce:	460b      	mov	r3, r1
 800abd0:	4613      	mov	r3, r2
 800abd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800abd4:	4b0b      	ldr	r3, [pc, #44]	; (800ac04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	0c1b      	lsrs	r3, r3, #16
 800abda:	f003 0303 	and.w	r3, r3, #3
 800abde:	3301      	adds	r3, #1
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800abec:	60bb      	str	r3, [r7, #8]
      break;
 800abee:	e002      	b.n	800abf6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800abf0:	4b05      	ldr	r3, [pc, #20]	; (800ac08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800abf2:	60bb      	str	r3, [r7, #8]
      break;
 800abf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800abf6:	68bb      	ldr	r3, [r7, #8]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ac02:	bf00      	nop
 800ac04:	40023800 	.word	0x40023800
 800ac08:	00f42400 	.word	0x00f42400

0800ac0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ac10:	4b02      	ldr	r3, [pc, #8]	; (800ac1c <HAL_RCC_GetHCLKFreq+0x10>)
 800ac12:	681b      	ldr	r3, [r3, #0]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bc80      	pop	{r7}
 800ac1a:	4770      	bx	lr
 800ac1c:	2000005c 	.word	0x2000005c

0800ac20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800ac26:	f7ff fff1 	bl	800ac0c <HAL_RCC_GetHCLKFreq>
 800ac2a:	4601      	mov	r1, r0
 800ac2c:	4b0b      	ldr	r3, [pc, #44]	; (800ac5c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800ac34:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800ac38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	fa92 f2a2 	rbit	r2, r2
 800ac40:	603a      	str	r2, [r7, #0]
  return result;
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	fab2 f282 	clz	r2, r2
 800ac48:	b2d2      	uxtb	r2, r2
 800ac4a:	40d3      	lsrs	r3, r2
 800ac4c:	4a04      	ldr	r2, [pc, #16]	; (800ac60 <HAL_RCC_GetPCLK1Freq+0x40>)
 800ac4e:	5cd3      	ldrb	r3, [r2, r3]
 800ac50:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	40023800 	.word	0x40023800
 800ac60:	08015584 	.word	0x08015584

0800ac64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800ac6a:	f7ff ffcf 	bl	800ac0c <HAL_RCC_GetHCLKFreq>
 800ac6e:	4601      	mov	r1, r0
 800ac70:	4b0b      	ldr	r3, [pc, #44]	; (800aca0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ac78:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800ac7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	fa92 f2a2 	rbit	r2, r2
 800ac84:	603a      	str	r2, [r7, #0]
  return result;
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	fab2 f282 	clz	r2, r2
 800ac8c:	b2d2      	uxtb	r2, r2
 800ac8e:	40d3      	lsrs	r3, r2
 800ac90:	4a04      	ldr	r2, [pc, #16]	; (800aca4 <HAL_RCC_GetPCLK2Freq+0x40>)
 800ac92:	5cd3      	ldrb	r3, [r2, r3]
 800ac94:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3708      	adds	r7, #8
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	40023800 	.word	0x40023800
 800aca4:	08015584 	.word	0x08015584

0800aca8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800acac:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <HAL_RCC_NMI_IRQHandler+0x20>)
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb4:	2b80      	cmp	r3, #128	; 0x80
 800acb6:	d104      	bne.n	800acc2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800acb8:	f000 f80a 	bl	800acd0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800acbc:	4b03      	ldr	r3, [pc, #12]	; (800accc <HAL_RCC_NMI_IRQHandler+0x24>)
 800acbe:	2280      	movs	r2, #128	; 0x80
 800acc0:	701a      	strb	r2, [r3, #0]
  }
}
 800acc2:	bf00      	nop
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	40023800 	.word	0x40023800
 800accc:	4002380e 	.word	0x4002380e

0800acd0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800acd0:	b480      	push	{r7}
 800acd2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800acd4:	bf00      	nop
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bc80      	pop	{r7}
 800acda:	4770      	bx	lr

0800acdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d101      	bne.n	800acee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e041      	b.n	800ad72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d106      	bne.n	800ad08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7fb fdb4 	bl	8006870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	3304      	adds	r3, #4
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	f000 fad8 	bl	800b2d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3708      	adds	r7, #8
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
	...

0800ad7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d001      	beq.n	800ad94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e046      	b.n	800ae22 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2202      	movs	r2, #2
 800ad98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a22      	ldr	r2, [pc, #136]	; (800ae2c <HAL_TIM_Base_Start+0xb0>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d022      	beq.n	800adec <HAL_TIM_Base_Start+0x70>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adae:	d01d      	beq.n	800adec <HAL_TIM_Base_Start+0x70>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a1e      	ldr	r2, [pc, #120]	; (800ae30 <HAL_TIM_Base_Start+0xb4>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d018      	beq.n	800adec <HAL_TIM_Base_Start+0x70>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a1d      	ldr	r2, [pc, #116]	; (800ae34 <HAL_TIM_Base_Start+0xb8>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d013      	beq.n	800adec <HAL_TIM_Base_Start+0x70>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a1b      	ldr	r2, [pc, #108]	; (800ae38 <HAL_TIM_Base_Start+0xbc>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d00e      	beq.n	800adec <HAL_TIM_Base_Start+0x70>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a1a      	ldr	r2, [pc, #104]	; (800ae3c <HAL_TIM_Base_Start+0xc0>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d009      	beq.n	800adec <HAL_TIM_Base_Start+0x70>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a18      	ldr	r2, [pc, #96]	; (800ae40 <HAL_TIM_Base_Start+0xc4>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d004      	beq.n	800adec <HAL_TIM_Base_Start+0x70>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a17      	ldr	r2, [pc, #92]	; (800ae44 <HAL_TIM_Base_Start+0xc8>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d111      	bne.n	800ae10 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	f003 0307 	and.w	r3, r3, #7
 800adf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2b06      	cmp	r3, #6
 800adfc:	d010      	beq.n	800ae20 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f042 0201 	orr.w	r2, r2, #1
 800ae0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae0e:	e007      	b.n	800ae20 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f042 0201 	orr.w	r2, r2, #1
 800ae1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3714      	adds	r7, #20
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bc80      	pop	{r7}
 800ae2a:	4770      	bx	lr
 800ae2c:	40010000 	.word	0x40010000
 800ae30:	40000400 	.word	0x40000400
 800ae34:	40000800 	.word	0x40000800
 800ae38:	40000c00 	.word	0x40000c00
 800ae3c:	40010400 	.word	0x40010400
 800ae40:	40014000 	.word	0x40014000
 800ae44:	40001800 	.word	0x40001800

0800ae48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d001      	beq.n	800ae60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e04e      	b.n	800aefe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2202      	movs	r2, #2
 800ae64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68da      	ldr	r2, [r3, #12]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f042 0201 	orr.w	r2, r2, #1
 800ae76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a22      	ldr	r2, [pc, #136]	; (800af08 <HAL_TIM_Base_Start_IT+0xc0>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d022      	beq.n	800aec8 <HAL_TIM_Base_Start_IT+0x80>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae8a:	d01d      	beq.n	800aec8 <HAL_TIM_Base_Start_IT+0x80>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a1e      	ldr	r2, [pc, #120]	; (800af0c <HAL_TIM_Base_Start_IT+0xc4>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d018      	beq.n	800aec8 <HAL_TIM_Base_Start_IT+0x80>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a1d      	ldr	r2, [pc, #116]	; (800af10 <HAL_TIM_Base_Start_IT+0xc8>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d013      	beq.n	800aec8 <HAL_TIM_Base_Start_IT+0x80>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a1b      	ldr	r2, [pc, #108]	; (800af14 <HAL_TIM_Base_Start_IT+0xcc>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d00e      	beq.n	800aec8 <HAL_TIM_Base_Start_IT+0x80>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a1a      	ldr	r2, [pc, #104]	; (800af18 <HAL_TIM_Base_Start_IT+0xd0>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d009      	beq.n	800aec8 <HAL_TIM_Base_Start_IT+0x80>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a18      	ldr	r2, [pc, #96]	; (800af1c <HAL_TIM_Base_Start_IT+0xd4>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d004      	beq.n	800aec8 <HAL_TIM_Base_Start_IT+0x80>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a17      	ldr	r2, [pc, #92]	; (800af20 <HAL_TIM_Base_Start_IT+0xd8>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d111      	bne.n	800aeec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	f003 0307 	and.w	r3, r3, #7
 800aed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b06      	cmp	r3, #6
 800aed8:	d010      	beq.n	800aefc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f042 0201 	orr.w	r2, r2, #1
 800aee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aeea:	e007      	b.n	800aefc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f042 0201 	orr.w	r2, r2, #1
 800aefa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	bc80      	pop	{r7}
 800af06:	4770      	bx	lr
 800af08:	40010000 	.word	0x40010000
 800af0c:	40000400 	.word	0x40000400
 800af10:	40000800 	.word	0x40000800
 800af14:	40000c00 	.word	0x40000c00
 800af18:	40010400 	.word	0x40010400
 800af1c:	40014000 	.word	0x40014000
 800af20:	40001800 	.word	0x40001800

0800af24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d101      	bne.n	800af36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	e041      	b.n	800afba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d106      	bne.n	800af50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7fb fc5a 	bl	8006804 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2202      	movs	r2, #2
 800af54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3304      	adds	r3, #4
 800af60:	4619      	mov	r1, r3
 800af62:	4610      	mov	r0, r2
 800af64:	f000 f9b4 	bl	800b2d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3708      	adds	r7, #8
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
	...

0800afc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d109      	bne.n	800afe8 <HAL_TIM_PWM_Start+0x24>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	2b01      	cmp	r3, #1
 800afde:	bf14      	ite	ne
 800afe0:	2301      	movne	r3, #1
 800afe2:	2300      	moveq	r3, #0
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	e022      	b.n	800b02e <HAL_TIM_PWM_Start+0x6a>
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	2b04      	cmp	r3, #4
 800afec:	d109      	bne.n	800b002 <HAL_TIM_PWM_Start+0x3e>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	bf14      	ite	ne
 800affa:	2301      	movne	r3, #1
 800affc:	2300      	moveq	r3, #0
 800affe:	b2db      	uxtb	r3, r3
 800b000:	e015      	b.n	800b02e <HAL_TIM_PWM_Start+0x6a>
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2b08      	cmp	r3, #8
 800b006:	d109      	bne.n	800b01c <HAL_TIM_PWM_Start+0x58>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b01      	cmp	r3, #1
 800b012:	bf14      	ite	ne
 800b014:	2301      	movne	r3, #1
 800b016:	2300      	moveq	r3, #0
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	e008      	b.n	800b02e <HAL_TIM_PWM_Start+0x6a>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b01      	cmp	r3, #1
 800b026:	bf14      	ite	ne
 800b028:	2301      	movne	r3, #1
 800b02a:	2300      	moveq	r3, #0
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d001      	beq.n	800b036 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e07c      	b.n	800b130 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d104      	bne.n	800b046 <HAL_TIM_PWM_Start+0x82>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2202      	movs	r2, #2
 800b040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b044:	e013      	b.n	800b06e <HAL_TIM_PWM_Start+0xaa>
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	2b04      	cmp	r3, #4
 800b04a:	d104      	bne.n	800b056 <HAL_TIM_PWM_Start+0x92>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2202      	movs	r2, #2
 800b050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b054:	e00b      	b.n	800b06e <HAL_TIM_PWM_Start+0xaa>
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	2b08      	cmp	r3, #8
 800b05a:	d104      	bne.n	800b066 <HAL_TIM_PWM_Start+0xa2>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2202      	movs	r2, #2
 800b060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b064:	e003      	b.n	800b06e <HAL_TIM_PWM_Start+0xaa>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2202      	movs	r2, #2
 800b06a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2201      	movs	r2, #1
 800b074:	6839      	ldr	r1, [r7, #0]
 800b076:	4618      	mov	r0, r3
 800b078:	f000 fb74 	bl	800b764 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a2d      	ldr	r2, [pc, #180]	; (800b138 <HAL_TIM_PWM_Start+0x174>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d004      	beq.n	800b090 <HAL_TIM_PWM_Start+0xcc>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a2c      	ldr	r2, [pc, #176]	; (800b13c <HAL_TIM_PWM_Start+0x178>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d101      	bne.n	800b094 <HAL_TIM_PWM_Start+0xd0>
 800b090:	2301      	movs	r3, #1
 800b092:	e000      	b.n	800b096 <HAL_TIM_PWM_Start+0xd2>
 800b094:	2300      	movs	r3, #0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d007      	beq.n	800b0aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b0a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a22      	ldr	r2, [pc, #136]	; (800b138 <HAL_TIM_PWM_Start+0x174>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d022      	beq.n	800b0fa <HAL_TIM_PWM_Start+0x136>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0bc:	d01d      	beq.n	800b0fa <HAL_TIM_PWM_Start+0x136>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a1f      	ldr	r2, [pc, #124]	; (800b140 <HAL_TIM_PWM_Start+0x17c>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d018      	beq.n	800b0fa <HAL_TIM_PWM_Start+0x136>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a1d      	ldr	r2, [pc, #116]	; (800b144 <HAL_TIM_PWM_Start+0x180>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d013      	beq.n	800b0fa <HAL_TIM_PWM_Start+0x136>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a1c      	ldr	r2, [pc, #112]	; (800b148 <HAL_TIM_PWM_Start+0x184>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d00e      	beq.n	800b0fa <HAL_TIM_PWM_Start+0x136>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a16      	ldr	r2, [pc, #88]	; (800b13c <HAL_TIM_PWM_Start+0x178>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d009      	beq.n	800b0fa <HAL_TIM_PWM_Start+0x136>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a18      	ldr	r2, [pc, #96]	; (800b14c <HAL_TIM_PWM_Start+0x188>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d004      	beq.n	800b0fa <HAL_TIM_PWM_Start+0x136>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a16      	ldr	r2, [pc, #88]	; (800b150 <HAL_TIM_PWM_Start+0x18c>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d111      	bne.n	800b11e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	f003 0307 	and.w	r3, r3, #7
 800b104:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2b06      	cmp	r3, #6
 800b10a:	d010      	beq.n	800b12e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f042 0201 	orr.w	r2, r2, #1
 800b11a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b11c:	e007      	b.n	800b12e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f042 0201 	orr.w	r2, r2, #1
 800b12c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	4618      	mov	r0, r3
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	40010000 	.word	0x40010000
 800b13c:	40010400 	.word	0x40010400
 800b140:	40000400 	.word	0x40000400
 800b144:	40000800 	.word	0x40000800
 800b148:	40000c00 	.word	0x40000c00
 800b14c:	40014000 	.word	0x40014000
 800b150:	40001800 	.word	0x40001800

0800b154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b166:	2b01      	cmp	r3, #1
 800b168:	d101      	bne.n	800b16e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b16a:	2302      	movs	r3, #2
 800b16c:	e0ac      	b.n	800b2c8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2201      	movs	r2, #1
 800b172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b0c      	cmp	r3, #12
 800b17a:	f200 809f 	bhi.w	800b2bc <HAL_TIM_PWM_ConfigChannel+0x168>
 800b17e:	a201      	add	r2, pc, #4	; (adr r2, 800b184 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b184:	0800b1b9 	.word	0x0800b1b9
 800b188:	0800b2bd 	.word	0x0800b2bd
 800b18c:	0800b2bd 	.word	0x0800b2bd
 800b190:	0800b2bd 	.word	0x0800b2bd
 800b194:	0800b1f9 	.word	0x0800b1f9
 800b198:	0800b2bd 	.word	0x0800b2bd
 800b19c:	0800b2bd 	.word	0x0800b2bd
 800b1a0:	0800b2bd 	.word	0x0800b2bd
 800b1a4:	0800b23b 	.word	0x0800b23b
 800b1a8:	0800b2bd 	.word	0x0800b2bd
 800b1ac:	0800b2bd 	.word	0x0800b2bd
 800b1b0:	0800b2bd 	.word	0x0800b2bd
 800b1b4:	0800b27b 	.word	0x0800b27b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68b9      	ldr	r1, [r7, #8]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f000 f924 	bl	800b40c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	699a      	ldr	r2, [r3, #24]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f042 0208 	orr.w	r2, r2, #8
 800b1d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	699a      	ldr	r2, [r3, #24]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f022 0204 	bic.w	r2, r2, #4
 800b1e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	6999      	ldr	r1, [r3, #24]
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	691a      	ldr	r2, [r3, #16]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	430a      	orrs	r2, r1
 800b1f4:	619a      	str	r2, [r3, #24]
      break;
 800b1f6:	e062      	b.n	800b2be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68b9      	ldr	r1, [r7, #8]
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 f974 	bl	800b4ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	699a      	ldr	r2, [r3, #24]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	699a      	ldr	r2, [r3, #24]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6999      	ldr	r1, [r3, #24]
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	021a      	lsls	r2, r3, #8
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	430a      	orrs	r2, r1
 800b236:	619a      	str	r2, [r3, #24]
      break;
 800b238:	e041      	b.n	800b2be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68b9      	ldr	r1, [r7, #8]
 800b240:	4618      	mov	r0, r3
 800b242:	f000 f9c7 	bl	800b5d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	69da      	ldr	r2, [r3, #28]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f042 0208 	orr.w	r2, r2, #8
 800b254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	69da      	ldr	r2, [r3, #28]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f022 0204 	bic.w	r2, r2, #4
 800b264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	69d9      	ldr	r1, [r3, #28]
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	691a      	ldr	r2, [r3, #16]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	430a      	orrs	r2, r1
 800b276:	61da      	str	r2, [r3, #28]
      break;
 800b278:	e021      	b.n	800b2be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68b9      	ldr	r1, [r7, #8]
 800b280:	4618      	mov	r0, r3
 800b282:	f000 fa1b 	bl	800b6bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	69da      	ldr	r2, [r3, #28]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	69da      	ldr	r2, [r3, #28]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	69d9      	ldr	r1, [r3, #28]
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	021a      	lsls	r2, r3, #8
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	430a      	orrs	r2, r1
 800b2b8:	61da      	str	r2, [r3, #28]
      break;
 800b2ba:	e000      	b.n	800b2be <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800b2bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3710      	adds	r7, #16
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b085      	sub	sp, #20
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a3f      	ldr	r2, [pc, #252]	; (800b3e0 <TIM_Base_SetConfig+0x110>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d013      	beq.n	800b310 <TIM_Base_SetConfig+0x40>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2ee:	d00f      	beq.n	800b310 <TIM_Base_SetConfig+0x40>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a3c      	ldr	r2, [pc, #240]	; (800b3e4 <TIM_Base_SetConfig+0x114>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d00b      	beq.n	800b310 <TIM_Base_SetConfig+0x40>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a3b      	ldr	r2, [pc, #236]	; (800b3e8 <TIM_Base_SetConfig+0x118>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d007      	beq.n	800b310 <TIM_Base_SetConfig+0x40>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a3a      	ldr	r2, [pc, #232]	; (800b3ec <TIM_Base_SetConfig+0x11c>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d003      	beq.n	800b310 <TIM_Base_SetConfig+0x40>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4a39      	ldr	r2, [pc, #228]	; (800b3f0 <TIM_Base_SetConfig+0x120>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d108      	bne.n	800b322 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	4313      	orrs	r3, r2
 800b320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a2e      	ldr	r2, [pc, #184]	; (800b3e0 <TIM_Base_SetConfig+0x110>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d02b      	beq.n	800b382 <TIM_Base_SetConfig+0xb2>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b330:	d027      	beq.n	800b382 <TIM_Base_SetConfig+0xb2>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a2b      	ldr	r2, [pc, #172]	; (800b3e4 <TIM_Base_SetConfig+0x114>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d023      	beq.n	800b382 <TIM_Base_SetConfig+0xb2>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a2a      	ldr	r2, [pc, #168]	; (800b3e8 <TIM_Base_SetConfig+0x118>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d01f      	beq.n	800b382 <TIM_Base_SetConfig+0xb2>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a29      	ldr	r2, [pc, #164]	; (800b3ec <TIM_Base_SetConfig+0x11c>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d01b      	beq.n	800b382 <TIM_Base_SetConfig+0xb2>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a28      	ldr	r2, [pc, #160]	; (800b3f0 <TIM_Base_SetConfig+0x120>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d017      	beq.n	800b382 <TIM_Base_SetConfig+0xb2>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a27      	ldr	r2, [pc, #156]	; (800b3f4 <TIM_Base_SetConfig+0x124>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d013      	beq.n	800b382 <TIM_Base_SetConfig+0xb2>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4a26      	ldr	r2, [pc, #152]	; (800b3f8 <TIM_Base_SetConfig+0x128>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d00f      	beq.n	800b382 <TIM_Base_SetConfig+0xb2>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a25      	ldr	r2, [pc, #148]	; (800b3fc <TIM_Base_SetConfig+0x12c>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d00b      	beq.n	800b382 <TIM_Base_SetConfig+0xb2>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4a24      	ldr	r2, [pc, #144]	; (800b400 <TIM_Base_SetConfig+0x130>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d007      	beq.n	800b382 <TIM_Base_SetConfig+0xb2>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4a23      	ldr	r2, [pc, #140]	; (800b404 <TIM_Base_SetConfig+0x134>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d003      	beq.n	800b382 <TIM_Base_SetConfig+0xb2>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a22      	ldr	r2, [pc, #136]	; (800b408 <TIM_Base_SetConfig+0x138>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d108      	bne.n	800b394 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	68fa      	ldr	r2, [r7, #12]
 800b390:	4313      	orrs	r3, r2
 800b392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	695b      	ldr	r3, [r3, #20]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	689a      	ldr	r2, [r3, #8]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a09      	ldr	r2, [pc, #36]	; (800b3e0 <TIM_Base_SetConfig+0x110>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d003      	beq.n	800b3c8 <TIM_Base_SetConfig+0xf8>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4a0b      	ldr	r2, [pc, #44]	; (800b3f0 <TIM_Base_SetConfig+0x120>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d103      	bne.n	800b3d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	691a      	ldr	r2, [r3, #16]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	615a      	str	r2, [r3, #20]
}
 800b3d6:	bf00      	nop
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bc80      	pop	{r7}
 800b3de:	4770      	bx	lr
 800b3e0:	40010000 	.word	0x40010000
 800b3e4:	40000400 	.word	0x40000400
 800b3e8:	40000800 	.word	0x40000800
 800b3ec:	40000c00 	.word	0x40000c00
 800b3f0:	40010400 	.word	0x40010400
 800b3f4:	40014000 	.word	0x40014000
 800b3f8:	40014400 	.word	0x40014400
 800b3fc:	40014800 	.word	0x40014800
 800b400:	40001800 	.word	0x40001800
 800b404:	40001c00 	.word	0x40001c00
 800b408:	40002000 	.word	0x40002000

0800b40c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b087      	sub	sp, #28
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	f023 0201 	bic.w	r2, r3, #1
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a1b      	ldr	r3, [r3, #32]
 800b426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b43a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f023 0303 	bic.w	r3, r3, #3
 800b442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f023 0302 	bic.w	r3, r3, #2
 800b454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	697a      	ldr	r2, [r7, #20]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	4a20      	ldr	r2, [pc, #128]	; (800b4e4 <TIM_OC1_SetConfig+0xd8>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d003      	beq.n	800b470 <TIM_OC1_SetConfig+0x64>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a1f      	ldr	r2, [pc, #124]	; (800b4e8 <TIM_OC1_SetConfig+0xdc>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d10c      	bne.n	800b48a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	f023 0308 	bic.w	r3, r3, #8
 800b476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	697a      	ldr	r2, [r7, #20]
 800b47e:	4313      	orrs	r3, r2
 800b480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	f023 0304 	bic.w	r3, r3, #4
 800b488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a15      	ldr	r2, [pc, #84]	; (800b4e4 <TIM_OC1_SetConfig+0xd8>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d003      	beq.n	800b49a <TIM_OC1_SetConfig+0x8e>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a14      	ldr	r2, [pc, #80]	; (800b4e8 <TIM_OC1_SetConfig+0xdc>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d111      	bne.n	800b4be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	693a      	ldr	r2, [r7, #16]
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	693a      	ldr	r2, [r7, #16]
 800b4c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	697a      	ldr	r2, [r7, #20]
 800b4d6:	621a      	str	r2, [r3, #32]
}
 800b4d8:	bf00      	nop
 800b4da:	371c      	adds	r7, #28
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bc80      	pop	{r7}
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	40010000 	.word	0x40010000
 800b4e8:	40010400 	.word	0x40010400

0800b4ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	f023 0210 	bic.w	r2, r3, #16
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a1b      	ldr	r3, [r3, #32]
 800b506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	699b      	ldr	r3, [r3, #24]
 800b512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b51a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	021b      	lsls	r3, r3, #8
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	4313      	orrs	r3, r2
 800b52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	f023 0320 	bic.w	r3, r3, #32
 800b536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	011b      	lsls	r3, r3, #4
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	4313      	orrs	r3, r2
 800b542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a21      	ldr	r2, [pc, #132]	; (800b5cc <TIM_OC2_SetConfig+0xe0>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d003      	beq.n	800b554 <TIM_OC2_SetConfig+0x68>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a20      	ldr	r2, [pc, #128]	; (800b5d0 <TIM_OC2_SetConfig+0xe4>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d10d      	bne.n	800b570 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b55a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	011b      	lsls	r3, r3, #4
 800b562:	697a      	ldr	r2, [r7, #20]
 800b564:	4313      	orrs	r3, r2
 800b566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b56e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a16      	ldr	r2, [pc, #88]	; (800b5cc <TIM_OC2_SetConfig+0xe0>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d003      	beq.n	800b580 <TIM_OC2_SetConfig+0x94>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a15      	ldr	r2, [pc, #84]	; (800b5d0 <TIM_OC2_SetConfig+0xe4>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d113      	bne.n	800b5a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b58e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	695b      	ldr	r3, [r3, #20]
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	693a      	ldr	r2, [r7, #16]
 800b598:	4313      	orrs	r3, r2
 800b59a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	685a      	ldr	r2, [r3, #4]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	621a      	str	r2, [r3, #32]
}
 800b5c2:	bf00      	nop
 800b5c4:	371c      	adds	r7, #28
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bc80      	pop	{r7}
 800b5ca:	4770      	bx	lr
 800b5cc:	40010000 	.word	0x40010000
 800b5d0:	40010400 	.word	0x40010400

0800b5d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b087      	sub	sp, #28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a1b      	ldr	r3, [r3, #32]
 800b5e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a1b      	ldr	r3, [r3, #32]
 800b5ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	69db      	ldr	r3, [r3, #28]
 800b5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f023 0303 	bic.w	r3, r3, #3
 800b60a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68fa      	ldr	r2, [r7, #12]
 800b612:	4313      	orrs	r3, r2
 800b614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b61c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	021b      	lsls	r3, r3, #8
 800b624:	697a      	ldr	r2, [r7, #20]
 800b626:	4313      	orrs	r3, r2
 800b628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a21      	ldr	r2, [pc, #132]	; (800b6b4 <TIM_OC3_SetConfig+0xe0>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d003      	beq.n	800b63a <TIM_OC3_SetConfig+0x66>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a20      	ldr	r2, [pc, #128]	; (800b6b8 <TIM_OC3_SetConfig+0xe4>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d10d      	bne.n	800b656 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	021b      	lsls	r3, r3, #8
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a16      	ldr	r2, [pc, #88]	; (800b6b4 <TIM_OC3_SetConfig+0xe0>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d003      	beq.n	800b666 <TIM_OC3_SetConfig+0x92>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a15      	ldr	r2, [pc, #84]	; (800b6b8 <TIM_OC3_SetConfig+0xe4>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d113      	bne.n	800b68e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b66c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	695b      	ldr	r3, [r3, #20]
 800b67a:	011b      	lsls	r3, r3, #4
 800b67c:	693a      	ldr	r2, [r7, #16]
 800b67e:	4313      	orrs	r3, r2
 800b680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	699b      	ldr	r3, [r3, #24]
 800b686:	011b      	lsls	r3, r3, #4
 800b688:	693a      	ldr	r2, [r7, #16]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	693a      	ldr	r2, [r7, #16]
 800b692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	685a      	ldr	r2, [r3, #4]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	697a      	ldr	r2, [r7, #20]
 800b6a6:	621a      	str	r2, [r3, #32]
}
 800b6a8:	bf00      	nop
 800b6aa:	371c      	adds	r7, #28
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bc80      	pop	{r7}
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	40010000 	.word	0x40010000
 800b6b8:	40010400 	.word	0x40010400

0800b6bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b087      	sub	sp, #28
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a1b      	ldr	r3, [r3, #32]
 800b6ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a1b      	ldr	r3, [r3, #32]
 800b6d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	69db      	ldr	r3, [r3, #28]
 800b6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	021b      	lsls	r3, r3, #8
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	031b      	lsls	r3, r3, #12
 800b70e:	693a      	ldr	r2, [r7, #16]
 800b710:	4313      	orrs	r3, r2
 800b712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	4a11      	ldr	r2, [pc, #68]	; (800b75c <TIM_OC4_SetConfig+0xa0>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d003      	beq.n	800b724 <TIM_OC4_SetConfig+0x68>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a10      	ldr	r2, [pc, #64]	; (800b760 <TIM_OC4_SetConfig+0xa4>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d109      	bne.n	800b738 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b72a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	695b      	ldr	r3, [r3, #20]
 800b730:	019b      	lsls	r3, r3, #6
 800b732:	697a      	ldr	r2, [r7, #20]
 800b734:	4313      	orrs	r3, r2
 800b736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	685a      	ldr	r2, [r3, #4]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	621a      	str	r2, [r3, #32]
}
 800b752:	bf00      	nop
 800b754:	371c      	adds	r7, #28
 800b756:	46bd      	mov	sp, r7
 800b758:	bc80      	pop	{r7}
 800b75a:	4770      	bx	lr
 800b75c:	40010000 	.word	0x40010000
 800b760:	40010400 	.word	0x40010400

0800b764 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b764:	b480      	push	{r7}
 800b766:	b087      	sub	sp, #28
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	f003 031f 	and.w	r3, r3, #31
 800b776:	2201      	movs	r2, #1
 800b778:	fa02 f303 	lsl.w	r3, r2, r3
 800b77c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	6a1a      	ldr	r2, [r3, #32]
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	43db      	mvns	r3, r3
 800b786:	401a      	ands	r2, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6a1a      	ldr	r2, [r3, #32]
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	f003 031f 	and.w	r3, r3, #31
 800b796:	6879      	ldr	r1, [r7, #4]
 800b798:	fa01 f303 	lsl.w	r3, r1, r3
 800b79c:	431a      	orrs	r2, r3
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	621a      	str	r2, [r3, #32]
}
 800b7a2:	bf00      	nop
 800b7a4:	371c      	adds	r7, #28
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bc80      	pop	{r7}
 800b7aa:	4770      	bx	lr

0800b7ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d101      	bne.n	800b7c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	e05a      	b.n	800b87a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2202      	movs	r2, #2
 800b7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a20      	ldr	r2, [pc, #128]	; (800b884 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d022      	beq.n	800b84e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b810:	d01d      	beq.n	800b84e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a1c      	ldr	r2, [pc, #112]	; (800b888 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d018      	beq.n	800b84e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a1a      	ldr	r2, [pc, #104]	; (800b88c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d013      	beq.n	800b84e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a19      	ldr	r2, [pc, #100]	; (800b890 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d00e      	beq.n	800b84e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a17      	ldr	r2, [pc, #92]	; (800b894 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d009      	beq.n	800b84e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a16      	ldr	r2, [pc, #88]	; (800b898 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d004      	beq.n	800b84e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a14      	ldr	r2, [pc, #80]	; (800b89c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d10c      	bne.n	800b868 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	68ba      	ldr	r2, [r7, #8]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	68ba      	ldr	r2, [r7, #8]
 800b866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3714      	adds	r7, #20
 800b87e:	46bd      	mov	sp, r7
 800b880:	bc80      	pop	{r7}
 800b882:	4770      	bx	lr
 800b884:	40010000 	.word	0x40010000
 800b888:	40000400 	.word	0x40000400
 800b88c:	40000800 	.word	0x40000800
 800b890:	40000c00 	.word	0x40000c00
 800b894:	40010400 	.word	0x40010400
 800b898:	40014000 	.word	0x40014000
 800b89c:	40001800 	.word	0x40001800

0800b8a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d101      	bne.n	800b8b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e03f      	b.n	800b932 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d106      	bne.n	800b8cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7fb f854 	bl	8006974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2224      	movs	r2, #36	; 0x24
 800b8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68da      	ldr	r2, [r3, #12]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 fc9d 	bl	800c224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	691a      	ldr	r2, [r3, #16]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b8f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	695a      	ldr	r2, [r3, #20]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	68da      	ldr	r2, [r3, #12]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2220      	movs	r2, #32
 800b924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2220      	movs	r2, #32
 800b92c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b084      	sub	sp, #16
 800b93e:	af00      	add	r7, sp, #0
 800b940:	60f8      	str	r0, [r7, #12]
 800b942:	60b9      	str	r1, [r7, #8]
 800b944:	4613      	mov	r3, r2
 800b946:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	2b20      	cmp	r3, #32
 800b952:	d11d      	bne.n	800b990 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d002      	beq.n	800b960 <HAL_UART_Receive_DMA+0x26>
 800b95a:	88fb      	ldrh	r3, [r7, #6]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d101      	bne.n	800b964 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	e016      	b.n	800b992 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d101      	bne.n	800b972 <HAL_UART_Receive_DMA+0x38>
 800b96e:	2302      	movs	r3, #2
 800b970:	e00f      	b.n	800b992 <HAL_UART_Receive_DMA+0x58>
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2201      	movs	r2, #1
 800b976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2200      	movs	r2, #0
 800b97e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800b980:	88fb      	ldrh	r3, [r7, #6]
 800b982:	461a      	mov	r2, r3
 800b984:	68b9      	ldr	r1, [r7, #8]
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 fa82 	bl	800be90 <UART_Start_Receive_DMA>
 800b98c:	4603      	mov	r3, r0
 800b98e:	e000      	b.n	800b992 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b990:	2302      	movs	r3, #2
  }
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
	...

0800b99c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b08a      	sub	sp, #40	; 0x28
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	695b      	ldr	r3, [r3, #20]
 800b9ba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	f003 030f 	and.w	r3, r3, #15
 800b9ca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10d      	bne.n	800b9ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d4:	f003 0320 	and.w	r3, r3, #32
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d008      	beq.n	800b9ee <HAL_UART_IRQHandler+0x52>
 800b9dc:	6a3b      	ldr	r3, [r7, #32]
 800b9de:	f003 0320 	and.w	r3, r3, #32
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d003      	beq.n	800b9ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fb72 	bl	800c0d0 <UART_Receive_IT>
      return;
 800b9ec:	e17c      	b.n	800bce8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f000 80b1 	beq.w	800bb58 <HAL_UART_IRQHandler+0x1bc>
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	f003 0301 	and.w	r3, r3, #1
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d105      	bne.n	800ba0c <HAL_UART_IRQHandler+0x70>
 800ba00:	6a3b      	ldr	r3, [r7, #32]
 800ba02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f000 80a6 	beq.w	800bb58 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0e:	f003 0301 	and.w	r3, r3, #1
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00a      	beq.n	800ba2c <HAL_UART_IRQHandler+0x90>
 800ba16:	6a3b      	ldr	r3, [r7, #32]
 800ba18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d005      	beq.n	800ba2c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba24:	f043 0201 	orr.w	r2, r3, #1
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2e:	f003 0304 	and.w	r3, r3, #4
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00a      	beq.n	800ba4c <HAL_UART_IRQHandler+0xb0>
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	f003 0301 	and.w	r3, r3, #1
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d005      	beq.n	800ba4c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba44:	f043 0202 	orr.w	r2, r3, #2
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4e:	f003 0302 	and.w	r3, r3, #2
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00a      	beq.n	800ba6c <HAL_UART_IRQHandler+0xd0>
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	f003 0301 	and.w	r3, r3, #1
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d005      	beq.n	800ba6c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba64:	f043 0204 	orr.w	r2, r3, #4
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6e:	f003 0308 	and.w	r3, r3, #8
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00f      	beq.n	800ba96 <HAL_UART_IRQHandler+0xfa>
 800ba76:	6a3b      	ldr	r3, [r7, #32]
 800ba78:	f003 0320 	and.w	r3, r3, #32
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d104      	bne.n	800ba8a <HAL_UART_IRQHandler+0xee>
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	f003 0301 	and.w	r3, r3, #1
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d005      	beq.n	800ba96 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba8e:	f043 0208 	orr.w	r2, r3, #8
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f000 811f 	beq.w	800bcde <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800baa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa2:	f003 0320 	and.w	r3, r3, #32
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d007      	beq.n	800baba <HAL_UART_IRQHandler+0x11e>
 800baaa:	6a3b      	ldr	r3, [r7, #32]
 800baac:	f003 0320 	and.w	r3, r3, #32
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fb0b 	bl	800c0d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	695b      	ldr	r3, [r3, #20]
 800bac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bac4:	2b40      	cmp	r3, #64	; 0x40
 800bac6:	bf0c      	ite	eq
 800bac8:	2301      	moveq	r3, #1
 800baca:	2300      	movne	r3, #0
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad4:	f003 0308 	and.w	r3, r3, #8
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d102      	bne.n	800bae2 <HAL_UART_IRQHandler+0x146>
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d031      	beq.n	800bb46 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 fa4d 	bl	800bf82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	695b      	ldr	r3, [r3, #20]
 800baee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf2:	2b40      	cmp	r3, #64	; 0x40
 800baf4:	d123      	bne.n	800bb3e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	695a      	ldr	r2, [r3, #20]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb04:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d013      	beq.n	800bb36 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb12:	4a77      	ldr	r2, [pc, #476]	; (800bcf0 <HAL_UART_IRQHandler+0x354>)
 800bb14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fb fecc 	bl	80078b8 <HAL_DMA_Abort_IT>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d016      	beq.n	800bb54 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bb30:	4610      	mov	r0, r2
 800bb32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb34:	e00e      	b.n	800bb54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7f9 fd76 	bl	8005628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb3c:	e00a      	b.n	800bb54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7f9 fd72 	bl	8005628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb44:	e006      	b.n	800bb54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f7f9 fd6e 	bl	8005628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bb52:	e0c4      	b.n	800bcde <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb54:	bf00      	nop
    return;
 800bb56:	e0c2      	b.n	800bcde <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	f040 80a2 	bne.w	800bca6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800bb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb64:	f003 0310 	and.w	r3, r3, #16
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	f000 809c 	beq.w	800bca6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800bb6e:	6a3b      	ldr	r3, [r7, #32]
 800bb70:	f003 0310 	and.w	r3, r3, #16
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	f000 8096 	beq.w	800bca6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	60fb      	str	r3, [r7, #12]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	60fb      	str	r3, [r7, #12]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	60fb      	str	r3, [r7, #12]
 800bb8e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	695b      	ldr	r3, [r3, #20]
 800bb96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9a:	2b40      	cmp	r3, #64	; 0x40
 800bb9c:	d14f      	bne.n	800bc3e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800bba8:	8a3b      	ldrh	r3, [r7, #16]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 8099 	beq.w	800bce2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bbb4:	8a3a      	ldrh	r2, [r7, #16]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	f080 8093 	bcs.w	800bce2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	8a3a      	ldrh	r2, [r7, #16]
 800bbc0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc6:	69db      	ldr	r3, [r3, #28]
 800bbc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbcc:	d02b      	beq.n	800bc26 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68da      	ldr	r2, [r3, #12]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bbdc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	695a      	ldr	r2, [r3, #20]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f022 0201 	bic.w	r2, r2, #1
 800bbec:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	695a      	ldr	r2, [r3, #20]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbfc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2220      	movs	r2, #32
 800bc02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68da      	ldr	r2, [r3, #12]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f022 0210 	bic.w	r2, r2, #16
 800bc1a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7fb fdd9 	bl	80077d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	1ad3      	subs	r3, r2, r3
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	4619      	mov	r1, r3
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 f86e 	bl	800bd18 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800bc3c:	e051      	b.n	800bce2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d047      	beq.n	800bce6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800bc56:	8a7b      	ldrh	r3, [r7, #18]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d044      	beq.n	800bce6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68da      	ldr	r2, [r3, #12]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bc6a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	695a      	ldr	r2, [r3, #20]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f022 0201 	bic.w	r2, r2, #1
 800bc7a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2220      	movs	r2, #32
 800bc80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68da      	ldr	r2, [r3, #12]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f022 0210 	bic.w	r2, r2, #16
 800bc98:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc9a:	8a7b      	ldrh	r3, [r7, #18]
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 f83a 	bl	800bd18 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800bca4:	e01f      	b.n	800bce6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d008      	beq.n	800bcc2 <HAL_UART_IRQHandler+0x326>
 800bcb0:	6a3b      	ldr	r3, [r7, #32]
 800bcb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d003      	beq.n	800bcc2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 f9a1 	bl	800c002 <UART_Transmit_IT>
    return;
 800bcc0:	e012      	b.n	800bce8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00d      	beq.n	800bce8 <HAL_UART_IRQHandler+0x34c>
 800bccc:	6a3b      	ldr	r3, [r7, #32]
 800bcce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d008      	beq.n	800bce8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f9e2 	bl	800c0a0 <UART_EndTransmit_IT>
    return;
 800bcdc:	e004      	b.n	800bce8 <HAL_UART_IRQHandler+0x34c>
    return;
 800bcde:	bf00      	nop
 800bce0:	e002      	b.n	800bce8 <HAL_UART_IRQHandler+0x34c>
      return;
 800bce2:	bf00      	nop
 800bce4:	e000      	b.n	800bce8 <HAL_UART_IRQHandler+0x34c>
      return;
 800bce6:	bf00      	nop
  }
}
 800bce8:	3728      	adds	r7, #40	; 0x28
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	0800bfdb 	.word	0x0800bfdb

0800bcf4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bcfc:	bf00      	nop
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bc80      	pop	{r7}
 800bd04:	4770      	bx	lr

0800bd06 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd06:	b480      	push	{r7}
 800bd08:	b083      	sub	sp, #12
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bd0e:	bf00      	nop
 800bd10:	370c      	adds	r7, #12
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bc80      	pop	{r7}
 800bd16:	4770      	bx	lr

0800bd18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	460b      	mov	r3, r1
 800bd22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd24:	bf00      	nop
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bc80      	pop	{r7}
 800bd2c:	4770      	bx	lr

0800bd2e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b084      	sub	sp, #16
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d12a      	bne.n	800bda0 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68da      	ldr	r2, [r3, #12]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd5e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	695a      	ldr	r2, [r3, #20]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f022 0201 	bic.w	r2, r2, #1
 800bd6e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	695a      	ldr	r2, [r3, #20]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd7e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2220      	movs	r2, #32
 800bd84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d107      	bne.n	800bda0 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	68da      	ldr	r2, [r3, #12]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f022 0210 	bic.w	r2, r2, #16
 800bd9e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d106      	bne.n	800bdb6 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bdac:	4619      	mov	r1, r3
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f7ff ffb2 	bl	800bd18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bdb4:	e002      	b.n	800bdbc <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f7f9 fc20 	bl	80055fc <HAL_UART_RxCpltCallback>
}
 800bdbc:	bf00      	nop
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d108      	bne.n	800bdec <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bdde:	085b      	lsrs	r3, r3, #1
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	4619      	mov	r1, r3
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f7ff ff97 	bl	800bd18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bdea:	e002      	b.n	800bdf2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f7ff ff8a 	bl	800bd06 <HAL_UART_RxHalfCpltCallback>
}
 800bdf2:	bf00      	nop
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b084      	sub	sp, #16
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800be02:	2300      	movs	r3, #0
 800be04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	695b      	ldr	r3, [r3, #20]
 800be12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be16:	2b80      	cmp	r3, #128	; 0x80
 800be18:	bf0c      	ite	eq
 800be1a:	2301      	moveq	r3, #1
 800be1c:	2300      	movne	r3, #0
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	2b21      	cmp	r3, #33	; 0x21
 800be2c:	d108      	bne.n	800be40 <UART_DMAError+0x46>
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d005      	beq.n	800be40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	2200      	movs	r2, #0
 800be38:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800be3a:	68b8      	ldr	r0, [r7, #8]
 800be3c:	f000 f88c 	bl	800bf58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	695b      	ldr	r3, [r3, #20]
 800be46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be4a:	2b40      	cmp	r3, #64	; 0x40
 800be4c:	bf0c      	ite	eq
 800be4e:	2301      	moveq	r3, #1
 800be50:	2300      	movne	r3, #0
 800be52:	b2db      	uxtb	r3, r3
 800be54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b22      	cmp	r3, #34	; 0x22
 800be60:	d108      	bne.n	800be74 <UART_DMAError+0x7a>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d005      	beq.n	800be74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	2200      	movs	r2, #0
 800be6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800be6e:	68b8      	ldr	r0, [r7, #8]
 800be70:	f000 f887 	bl	800bf82 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be78:	f043 0210 	orr.w	r2, r3, #16
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be80:	68b8      	ldr	r0, [r7, #8]
 800be82:	f7f9 fbd1 	bl	8005628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be86:	bf00      	nop
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
	...

0800be90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	4613      	mov	r3, r2
 800be9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800be9e:	68ba      	ldr	r2, [r7, #8]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	88fa      	ldrh	r2, [r7, #6]
 800bea8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2222      	movs	r2, #34	; 0x22
 800beb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bebc:	4a23      	ldr	r2, [pc, #140]	; (800bf4c <UART_Start_Receive_DMA+0xbc>)
 800bebe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bec4:	4a22      	ldr	r2, [pc, #136]	; (800bf50 <UART_Start_Receive_DMA+0xc0>)
 800bec6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800becc:	4a21      	ldr	r2, [pc, #132]	; (800bf54 <UART_Start_Receive_DMA+0xc4>)
 800bece:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed4:	2200      	movs	r2, #0
 800bed6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bed8:	f107 0308 	add.w	r3, r7, #8
 800bedc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	3304      	adds	r3, #4
 800bee8:	4619      	mov	r1, r3
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	88fb      	ldrh	r3, [r7, #6]
 800bef0:	f7fb fc1a 	bl	8007728 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bef4:	2300      	movs	r3, #0
 800bef6:	613b      	str	r3, [r7, #16]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	613b      	str	r3, [r7, #16]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	613b      	str	r3, [r7, #16]
 800bf08:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68da      	ldr	r2, [r3, #12]
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf20:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	695a      	ldr	r2, [r3, #20]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f042 0201 	orr.w	r2, r2, #1
 800bf30:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	695a      	ldr	r2, [r3, #20]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf40:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3718      	adds	r7, #24
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	0800bd2f 	.word	0x0800bd2f
 800bf50:	0800bdc5 	.word	0x0800bdc5
 800bf54:	0800bdfb 	.word	0x0800bdfb

0800bf58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68da      	ldr	r2, [r3, #12]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bf6e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2220      	movs	r2, #32
 800bf74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800bf78:	bf00      	nop
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bc80      	pop	{r7}
 800bf80:	4770      	bx	lr

0800bf82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf82:	b480      	push	{r7}
 800bf84:	b083      	sub	sp, #12
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	68da      	ldr	r2, [r3, #12]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bf98:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	695a      	ldr	r2, [r3, #20]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f022 0201 	bic.w	r2, r2, #1
 800bfa8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d107      	bne.n	800bfc2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68da      	ldr	r2, [r3, #12]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f022 0210 	bic.w	r2, r2, #16
 800bfc0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2220      	movs	r2, #32
 800bfc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bfd0:	bf00      	nop
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bc80      	pop	{r7}
 800bfd8:	4770      	bx	lr

0800bfda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b084      	sub	sp, #16
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f7f9 fb17 	bl	8005628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bffa:	bf00      	nop
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c002:	b480      	push	{r7}
 800c004:	b085      	sub	sp, #20
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c010:	b2db      	uxtb	r3, r3
 800c012:	2b21      	cmp	r3, #33	; 0x21
 800c014:	d13e      	bne.n	800c094 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c01e:	d114      	bne.n	800c04a <UART_Transmit_IT+0x48>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d110      	bne.n	800c04a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a1b      	ldr	r3, [r3, #32]
 800c02c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	881b      	ldrh	r3, [r3, #0]
 800c032:	461a      	mov	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c03c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6a1b      	ldr	r3, [r3, #32]
 800c042:	1c9a      	adds	r2, r3, #2
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	621a      	str	r2, [r3, #32]
 800c048:	e008      	b.n	800c05c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	1c59      	adds	r1, r3, #1
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	6211      	str	r1, [r2, #32]
 800c054:	781a      	ldrb	r2, [r3, #0]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c060:	b29b      	uxth	r3, r3
 800c062:	3b01      	subs	r3, #1
 800c064:	b29b      	uxth	r3, r3
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	4619      	mov	r1, r3
 800c06a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10f      	bne.n	800c090 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68da      	ldr	r2, [r3, #12]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c07e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	68da      	ldr	r2, [r3, #12]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c08e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	e000      	b.n	800c096 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c094:	2302      	movs	r3, #2
  }
}
 800c096:	4618      	mov	r0, r3
 800c098:	3714      	adds	r7, #20
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bc80      	pop	{r7}
 800c09e:	4770      	bx	lr

0800c0a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	68da      	ldr	r2, [r3, #12]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2220      	movs	r2, #32
 800c0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7ff fe17 	bl	800bcf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	2b22      	cmp	r3, #34	; 0x22
 800c0e2:	f040 8099 	bne.w	800c218 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0ee:	d117      	bne.n	800c120 <UART_Receive_IT+0x50>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	691b      	ldr	r3, [r3, #16]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d113      	bne.n	800c120 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c100:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	b29b      	uxth	r3, r3
 800c10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c10e:	b29a      	uxth	r2, r3
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c118:	1c9a      	adds	r2, r3, #2
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	629a      	str	r2, [r3, #40]	; 0x28
 800c11e:	e026      	b.n	800c16e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c124:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800c126:	2300      	movs	r3, #0
 800c128:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c132:	d007      	beq.n	800c144 <UART_Receive_IT+0x74>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d10a      	bne.n	800c152 <UART_Receive_IT+0x82>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	691b      	ldr	r3, [r3, #16]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d106      	bne.n	800c152 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	b2da      	uxtb	r2, r3
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	701a      	strb	r2, [r3, #0]
 800c150:	e008      	b.n	800c164 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c15e:	b2da      	uxtb	r2, r3
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c168:	1c5a      	adds	r2, r3, #1
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c172:	b29b      	uxth	r3, r3
 800c174:	3b01      	subs	r3, #1
 800c176:	b29b      	uxth	r3, r3
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	4619      	mov	r1, r3
 800c17c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d148      	bne.n	800c214 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	68da      	ldr	r2, [r3, #12]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f022 0220 	bic.w	r2, r2, #32
 800c190:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	68da      	ldr	r2, [r3, #12]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c1a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	695a      	ldr	r2, [r3, #20]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f022 0201 	bic.w	r2, r2, #1
 800c1b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2220      	movs	r2, #32
 800c1b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d123      	bne.n	800c20a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	68da      	ldr	r2, [r3, #12]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f022 0210 	bic.w	r2, r2, #16
 800c1d6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f003 0310 	and.w	r3, r3, #16
 800c1e2:	2b10      	cmp	r3, #16
 800c1e4:	d10a      	bne.n	800c1fc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	60fb      	str	r3, [r7, #12]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	60fb      	str	r3, [r7, #12]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	60fb      	str	r3, [r7, #12]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c200:	4619      	mov	r1, r3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7ff fd88 	bl	800bd18 <HAL_UARTEx_RxEventCallback>
 800c208:	e002      	b.n	800c210 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f7f9 f9f6 	bl	80055fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c210:	2300      	movs	r3, #0
 800c212:	e002      	b.n	800c21a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800c214:	2300      	movs	r3, #0
 800c216:	e000      	b.n	800c21a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800c218:	2302      	movs	r3, #2
  }
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3718      	adds	r7, #24
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
	...

0800c224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	68da      	ldr	r2, [r3, #12]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	430a      	orrs	r2, r1
 800c240:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	689a      	ldr	r2, [r3, #8]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	691b      	ldr	r3, [r3, #16]
 800c24a:	431a      	orrs	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	695b      	ldr	r3, [r3, #20]
 800c250:	431a      	orrs	r2, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	69db      	ldr	r3, [r3, #28]
 800c256:	4313      	orrs	r3, r2
 800c258:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c264:	f023 030c 	bic.w	r3, r3, #12
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	6812      	ldr	r2, [r2, #0]
 800c26c:	68b9      	ldr	r1, [r7, #8]
 800c26e:	430b      	orrs	r3, r1
 800c270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	695b      	ldr	r3, [r3, #20]
 800c278:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	699a      	ldr	r2, [r3, #24]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	430a      	orrs	r2, r1
 800c286:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a57      	ldr	r2, [pc, #348]	; (800c3ec <UART_SetConfig+0x1c8>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d004      	beq.n	800c29c <UART_SetConfig+0x78>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a56      	ldr	r2, [pc, #344]	; (800c3f0 <UART_SetConfig+0x1cc>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d103      	bne.n	800c2a4 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c29c:	f7fe fce2 	bl	800ac64 <HAL_RCC_GetPCLK2Freq>
 800c2a0:	60f8      	str	r0, [r7, #12]
 800c2a2:	e002      	b.n	800c2aa <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c2a4:	f7fe fcbc 	bl	800ac20 <HAL_RCC_GetPCLK1Freq>
 800c2a8:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	69db      	ldr	r3, [r3, #28]
 800c2ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2b2:	d14c      	bne.n	800c34e <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4413      	add	r3, r2
 800c2bc:	009a      	lsls	r2, r3, #2
 800c2be:	441a      	add	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	005b      	lsls	r3, r3, #1
 800c2c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ca:	4a4a      	ldr	r2, [pc, #296]	; (800c3f4 <UART_SetConfig+0x1d0>)
 800c2cc:	fba2 2303 	umull	r2, r3, r2, r3
 800c2d0:	095b      	lsrs	r3, r3, #5
 800c2d2:	0119      	lsls	r1, r3, #4
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	009a      	lsls	r2, r3, #2
 800c2de:	441a      	add	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	005b      	lsls	r3, r3, #1
 800c2e6:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2ea:	4b42      	ldr	r3, [pc, #264]	; (800c3f4 <UART_SetConfig+0x1d0>)
 800c2ec:	fba3 0302 	umull	r0, r3, r3, r2
 800c2f0:	095b      	lsrs	r3, r3, #5
 800c2f2:	2064      	movs	r0, #100	; 0x64
 800c2f4:	fb00 f303 	mul.w	r3, r0, r3
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	00db      	lsls	r3, r3, #3
 800c2fc:	3332      	adds	r3, #50	; 0x32
 800c2fe:	4a3d      	ldr	r2, [pc, #244]	; (800c3f4 <UART_SetConfig+0x1d0>)
 800c300:	fba2 2303 	umull	r2, r3, r2, r3
 800c304:	095b      	lsrs	r3, r3, #5
 800c306:	005b      	lsls	r3, r3, #1
 800c308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c30c:	4419      	add	r1, r3
 800c30e:	68fa      	ldr	r2, [r7, #12]
 800c310:	4613      	mov	r3, r2
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	4413      	add	r3, r2
 800c316:	009a      	lsls	r2, r3, #2
 800c318:	441a      	add	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	005b      	lsls	r3, r3, #1
 800c320:	fbb2 f2f3 	udiv	r2, r2, r3
 800c324:	4b33      	ldr	r3, [pc, #204]	; (800c3f4 <UART_SetConfig+0x1d0>)
 800c326:	fba3 0302 	umull	r0, r3, r3, r2
 800c32a:	095b      	lsrs	r3, r3, #5
 800c32c:	2064      	movs	r0, #100	; 0x64
 800c32e:	fb00 f303 	mul.w	r3, r0, r3
 800c332:	1ad3      	subs	r3, r2, r3
 800c334:	00db      	lsls	r3, r3, #3
 800c336:	3332      	adds	r3, #50	; 0x32
 800c338:	4a2e      	ldr	r2, [pc, #184]	; (800c3f4 <UART_SetConfig+0x1d0>)
 800c33a:	fba2 2303 	umull	r2, r3, r2, r3
 800c33e:	095b      	lsrs	r3, r3, #5
 800c340:	f003 0207 	and.w	r2, r3, #7
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	440a      	add	r2, r1
 800c34a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c34c:	e04a      	b.n	800c3e4 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c34e:	68fa      	ldr	r2, [r7, #12]
 800c350:	4613      	mov	r3, r2
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	4413      	add	r3, r2
 800c356:	009a      	lsls	r2, r3, #2
 800c358:	441a      	add	r2, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	fbb2 f3f3 	udiv	r3, r2, r3
 800c364:	4a23      	ldr	r2, [pc, #140]	; (800c3f4 <UART_SetConfig+0x1d0>)
 800c366:	fba2 2303 	umull	r2, r3, r2, r3
 800c36a:	095b      	lsrs	r3, r3, #5
 800c36c:	0119      	lsls	r1, r3, #4
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	4613      	mov	r3, r2
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	4413      	add	r3, r2
 800c376:	009a      	lsls	r2, r3, #2
 800c378:	441a      	add	r2, r3
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	fbb2 f2f3 	udiv	r2, r2, r3
 800c384:	4b1b      	ldr	r3, [pc, #108]	; (800c3f4 <UART_SetConfig+0x1d0>)
 800c386:	fba3 0302 	umull	r0, r3, r3, r2
 800c38a:	095b      	lsrs	r3, r3, #5
 800c38c:	2064      	movs	r0, #100	; 0x64
 800c38e:	fb00 f303 	mul.w	r3, r0, r3
 800c392:	1ad3      	subs	r3, r2, r3
 800c394:	011b      	lsls	r3, r3, #4
 800c396:	3332      	adds	r3, #50	; 0x32
 800c398:	4a16      	ldr	r2, [pc, #88]	; (800c3f4 <UART_SetConfig+0x1d0>)
 800c39a:	fba2 2303 	umull	r2, r3, r2, r3
 800c39e:	095b      	lsrs	r3, r3, #5
 800c3a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3a4:	4419      	add	r1, r3
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4413      	add	r3, r2
 800c3ae:	009a      	lsls	r2, r3, #2
 800c3b0:	441a      	add	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	fbb2 f2f3 	udiv	r2, r2, r3
 800c3bc:	4b0d      	ldr	r3, [pc, #52]	; (800c3f4 <UART_SetConfig+0x1d0>)
 800c3be:	fba3 0302 	umull	r0, r3, r3, r2
 800c3c2:	095b      	lsrs	r3, r3, #5
 800c3c4:	2064      	movs	r0, #100	; 0x64
 800c3c6:	fb00 f303 	mul.w	r3, r0, r3
 800c3ca:	1ad3      	subs	r3, r2, r3
 800c3cc:	011b      	lsls	r3, r3, #4
 800c3ce:	3332      	adds	r3, #50	; 0x32
 800c3d0:	4a08      	ldr	r2, [pc, #32]	; (800c3f4 <UART_SetConfig+0x1d0>)
 800c3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3d6:	095b      	lsrs	r3, r3, #5
 800c3d8:	f003 020f 	and.w	r2, r3, #15
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	440a      	add	r2, r1
 800c3e2:	609a      	str	r2, [r3, #8]
}
 800c3e4:	bf00      	nop
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	40011000 	.word	0x40011000
 800c3f0:	40011400 	.word	0x40011400
 800c3f4:	51eb851f 	.word	0x51eb851f

0800c3f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c3f8:	b084      	sub	sp, #16
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b084      	sub	sp, #16
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
 800c402:	f107 001c 	add.w	r0, r7, #28
 800c406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d122      	bne.n	800c456 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c414:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d105      	bne.n	800c44a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f001 fafa 	bl	800da44 <USB_CoreReset>
 800c450:	4603      	mov	r3, r0
 800c452:	73fb      	strb	r3, [r7, #15]
 800c454:	e010      	b.n	800c478 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68db      	ldr	r3, [r3, #12]
 800c45a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f001 faee 	bl	800da44 <USB_CoreReset>
 800c468:	4603      	mov	r3, r0
 800c46a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c470:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d10b      	bne.n	800c496 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	f043 0206 	orr.w	r2, r3, #6
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	689b      	ldr	r3, [r3, #8]
 800c48e:	f043 0220 	orr.w	r2, r3, #32
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c496:	7bfb      	ldrb	r3, [r7, #15]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4a2:	b004      	add	sp, #16
 800c4a4:	4770      	bx	lr
	...

0800c4a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b087      	sub	sp, #28
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c4b6:	79fb      	ldrb	r3, [r7, #7]
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d165      	bne.n	800c588 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	4a41      	ldr	r2, [pc, #260]	; (800c5c4 <USB_SetTurnaroundTime+0x11c>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d906      	bls.n	800c4d2 <USB_SetTurnaroundTime+0x2a>
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	4a40      	ldr	r2, [pc, #256]	; (800c5c8 <USB_SetTurnaroundTime+0x120>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d202      	bcs.n	800c4d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c4cc:	230f      	movs	r3, #15
 800c4ce:	617b      	str	r3, [r7, #20]
 800c4d0:	e062      	b.n	800c598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	4a3c      	ldr	r2, [pc, #240]	; (800c5c8 <USB_SetTurnaroundTime+0x120>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d306      	bcc.n	800c4e8 <USB_SetTurnaroundTime+0x40>
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	4a3b      	ldr	r2, [pc, #236]	; (800c5cc <USB_SetTurnaroundTime+0x124>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d202      	bcs.n	800c4e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c4e2:	230e      	movs	r3, #14
 800c4e4:	617b      	str	r3, [r7, #20]
 800c4e6:	e057      	b.n	800c598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	4a38      	ldr	r2, [pc, #224]	; (800c5cc <USB_SetTurnaroundTime+0x124>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d306      	bcc.n	800c4fe <USB_SetTurnaroundTime+0x56>
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	4a37      	ldr	r2, [pc, #220]	; (800c5d0 <USB_SetTurnaroundTime+0x128>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d202      	bcs.n	800c4fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c4f8:	230d      	movs	r3, #13
 800c4fa:	617b      	str	r3, [r7, #20]
 800c4fc:	e04c      	b.n	800c598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	4a33      	ldr	r2, [pc, #204]	; (800c5d0 <USB_SetTurnaroundTime+0x128>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d306      	bcc.n	800c514 <USB_SetTurnaroundTime+0x6c>
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	4a32      	ldr	r2, [pc, #200]	; (800c5d4 <USB_SetTurnaroundTime+0x12c>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d802      	bhi.n	800c514 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c50e:	230c      	movs	r3, #12
 800c510:	617b      	str	r3, [r7, #20]
 800c512:	e041      	b.n	800c598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	4a2f      	ldr	r2, [pc, #188]	; (800c5d4 <USB_SetTurnaroundTime+0x12c>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d906      	bls.n	800c52a <USB_SetTurnaroundTime+0x82>
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	4a2e      	ldr	r2, [pc, #184]	; (800c5d8 <USB_SetTurnaroundTime+0x130>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d802      	bhi.n	800c52a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c524:	230b      	movs	r3, #11
 800c526:	617b      	str	r3, [r7, #20]
 800c528:	e036      	b.n	800c598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	4a2a      	ldr	r2, [pc, #168]	; (800c5d8 <USB_SetTurnaroundTime+0x130>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d906      	bls.n	800c540 <USB_SetTurnaroundTime+0x98>
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	4a29      	ldr	r2, [pc, #164]	; (800c5dc <USB_SetTurnaroundTime+0x134>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d802      	bhi.n	800c540 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c53a:	230a      	movs	r3, #10
 800c53c:	617b      	str	r3, [r7, #20]
 800c53e:	e02b      	b.n	800c598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	4a26      	ldr	r2, [pc, #152]	; (800c5dc <USB_SetTurnaroundTime+0x134>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d906      	bls.n	800c556 <USB_SetTurnaroundTime+0xae>
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	4a25      	ldr	r2, [pc, #148]	; (800c5e0 <USB_SetTurnaroundTime+0x138>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d202      	bcs.n	800c556 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c550:	2309      	movs	r3, #9
 800c552:	617b      	str	r3, [r7, #20]
 800c554:	e020      	b.n	800c598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	4a21      	ldr	r2, [pc, #132]	; (800c5e0 <USB_SetTurnaroundTime+0x138>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d306      	bcc.n	800c56c <USB_SetTurnaroundTime+0xc4>
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	4a20      	ldr	r2, [pc, #128]	; (800c5e4 <USB_SetTurnaroundTime+0x13c>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d802      	bhi.n	800c56c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c566:	2308      	movs	r3, #8
 800c568:	617b      	str	r3, [r7, #20]
 800c56a:	e015      	b.n	800c598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	4a1d      	ldr	r2, [pc, #116]	; (800c5e4 <USB_SetTurnaroundTime+0x13c>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d906      	bls.n	800c582 <USB_SetTurnaroundTime+0xda>
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	4a1c      	ldr	r2, [pc, #112]	; (800c5e8 <USB_SetTurnaroundTime+0x140>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d202      	bcs.n	800c582 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c57c:	2307      	movs	r3, #7
 800c57e:	617b      	str	r3, [r7, #20]
 800c580:	e00a      	b.n	800c598 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c582:	2306      	movs	r3, #6
 800c584:	617b      	str	r3, [r7, #20]
 800c586:	e007      	b.n	800c598 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c588:	79fb      	ldrb	r3, [r7, #7]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d102      	bne.n	800c594 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c58e:	2309      	movs	r3, #9
 800c590:	617b      	str	r3, [r7, #20]
 800c592:	e001      	b.n	800c598 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c594:	2309      	movs	r3, #9
 800c596:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	68da      	ldr	r2, [r3, #12]
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	029b      	lsls	r3, r3, #10
 800c5ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c5b0:	431a      	orrs	r2, r3
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	371c      	adds	r7, #28
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bc80      	pop	{r7}
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	00d8acbf 	.word	0x00d8acbf
 800c5c8:	00e4e1c0 	.word	0x00e4e1c0
 800c5cc:	00f42400 	.word	0x00f42400
 800c5d0:	01067380 	.word	0x01067380
 800c5d4:	011a499f 	.word	0x011a499f
 800c5d8:	01312cff 	.word	0x01312cff
 800c5dc:	014ca43f 	.word	0x014ca43f
 800c5e0:	016e3600 	.word	0x016e3600
 800c5e4:	01a6ab1f 	.word	0x01a6ab1f
 800c5e8:	01e84800 	.word	0x01e84800

0800c5ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	f043 0201 	orr.w	r2, r3, #1
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	370c      	adds	r7, #12
 800c606:	46bd      	mov	sp, r7
 800c608:	bc80      	pop	{r7}
 800c60a:	4770      	bx	lr

0800c60c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	f023 0201 	bic.w	r2, r3, #1
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	bc80      	pop	{r7}
 800c62a:	4770      	bx	lr

0800c62c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b084      	sub	sp, #16
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	460b      	mov	r3, r1
 800c636:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c638:	2300      	movs	r3, #0
 800c63a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c648:	78fb      	ldrb	r3, [r7, #3]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d115      	bne.n	800c67a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	68db      	ldr	r3, [r3, #12]
 800c652:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c65a:	2001      	movs	r0, #1
 800c65c:	f7fa fbd4 	bl	8006e08 <HAL_Delay>
      ms++;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	3301      	adds	r3, #1
 800c664:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f001 f961 	bl	800d92e <USB_GetMode>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d01e      	beq.n	800c6b0 <USB_SetCurrentMode+0x84>
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2b31      	cmp	r3, #49	; 0x31
 800c676:	d9f0      	bls.n	800c65a <USB_SetCurrentMode+0x2e>
 800c678:	e01a      	b.n	800c6b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c67a:	78fb      	ldrb	r3, [r7, #3]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d115      	bne.n	800c6ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c68c:	2001      	movs	r0, #1
 800c68e:	f7fa fbbb 	bl	8006e08 <HAL_Delay>
      ms++;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	3301      	adds	r3, #1
 800c696:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f001 f948 	bl	800d92e <USB_GetMode>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d005      	beq.n	800c6b0 <USB_SetCurrentMode+0x84>
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2b31      	cmp	r3, #49	; 0x31
 800c6a8:	d9f0      	bls.n	800c68c <USB_SetCurrentMode+0x60>
 800c6aa:	e001      	b.n	800c6b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	e005      	b.n	800c6bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2b32      	cmp	r3, #50	; 0x32
 800c6b4:	d101      	bne.n	800c6ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e000      	b.n	800c6bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3710      	adds	r7, #16
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6c4:	b084      	sub	sp, #16
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b086      	sub	sp, #24
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c6d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c6de:	2300      	movs	r3, #0
 800c6e0:	613b      	str	r3, [r7, #16]
 800c6e2:	e009      	b.n	800c6f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	3340      	adds	r3, #64	; 0x40
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	4413      	add	r3, r2
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	613b      	str	r3, [r7, #16]
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	2b0e      	cmp	r3, #14
 800c6fc:	d9f2      	bls.n	800c6e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c6fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c700:	2b00      	cmp	r3, #0
 800c702:	d11c      	bne.n	800c73e <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c712:	f043 0302 	orr.w	r3, r3, #2
 800c716:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c71c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c728:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c734:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	639a      	str	r2, [r3, #56]	; 0x38
 800c73c:	e00b      	b.n	800c756 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c742:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c74e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c75c:	461a      	mov	r2, r3
 800c75e:	2300      	movs	r3, #0
 800c760:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c768:	4619      	mov	r1, r3
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c770:	461a      	mov	r2, r3
 800c772:	680b      	ldr	r3, [r1, #0]
 800c774:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d10c      	bne.n	800c796 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d104      	bne.n	800c78c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c782:	2100      	movs	r1, #0
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 f945 	bl	800ca14 <USB_SetDevSpeed>
 800c78a:	e008      	b.n	800c79e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c78c:	2101      	movs	r1, #1
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f940 	bl	800ca14 <USB_SetDevSpeed>
 800c794:	e003      	b.n	800c79e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c796:	2103      	movs	r1, #3
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f93b 	bl	800ca14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c79e:	2110      	movs	r1, #16
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 f8f3 	bl	800c98c <USB_FlushTxFifo>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d001      	beq.n	800c7b0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 f90f 	bl	800c9d4 <USB_FlushRxFifo>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7de:	461a      	mov	r2, r3
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	613b      	str	r3, [r7, #16]
 800c7e8:	e043      	b.n	800c872 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	015a      	lsls	r2, r3, #5
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c800:	d118      	bne.n	800c834 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d10a      	bne.n	800c81e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	015a      	lsls	r2, r3, #5
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	4413      	add	r3, r2
 800c810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c814:	461a      	mov	r2, r3
 800c816:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c81a:	6013      	str	r3, [r2, #0]
 800c81c:	e013      	b.n	800c846 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	015a      	lsls	r2, r3, #5
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	4413      	add	r3, r2
 800c826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c82a:	461a      	mov	r2, r3
 800c82c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c830:	6013      	str	r3, [r2, #0]
 800c832:	e008      	b.n	800c846 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	015a      	lsls	r2, r3, #5
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	4413      	add	r3, r2
 800c83c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c840:	461a      	mov	r2, r3
 800c842:	2300      	movs	r3, #0
 800c844:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	015a      	lsls	r2, r3, #5
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	4413      	add	r3, r2
 800c84e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c852:	461a      	mov	r2, r3
 800c854:	2300      	movs	r3, #0
 800c856:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	015a      	lsls	r2, r3, #5
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	4413      	add	r3, r2
 800c860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c864:	461a      	mov	r2, r3
 800c866:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c86a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	3301      	adds	r3, #1
 800c870:	613b      	str	r3, [r7, #16]
 800c872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c874:	693a      	ldr	r2, [r7, #16]
 800c876:	429a      	cmp	r2, r3
 800c878:	d3b7      	bcc.n	800c7ea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c87a:	2300      	movs	r3, #0
 800c87c:	613b      	str	r3, [r7, #16]
 800c87e:	e043      	b.n	800c908 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	015a      	lsls	r2, r3, #5
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	4413      	add	r3, r2
 800c888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c892:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c896:	d118      	bne.n	800c8ca <USB_DevInit+0x206>
    {
      if (i == 0U)
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d10a      	bne.n	800c8b4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	015a      	lsls	r2, r3, #5
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c8b0:	6013      	str	r3, [r2, #0]
 800c8b2:	e013      	b.n	800c8dc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	015a      	lsls	r2, r3, #5
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c8c6:	6013      	str	r3, [r2, #0]
 800c8c8:	e008      	b.n	800c8dc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	015a      	lsls	r2, r3, #5
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	2300      	movs	r3, #0
 800c8da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	015a      	lsls	r2, r3, #5
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	015a      	lsls	r2, r3, #5
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	4413      	add	r3, r2
 800c8f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c900:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	3301      	adds	r3, #1
 800c906:	613b      	str	r3, [r7, #16]
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	693a      	ldr	r2, [r7, #16]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d3b7      	bcc.n	800c880 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c916:	691b      	ldr	r3, [r3, #16]
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c91e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c922:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2200      	movs	r2, #0
 800c928:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c930:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c934:	2b00      	cmp	r3, #0
 800c936:	d105      	bne.n	800c944 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	699b      	ldr	r3, [r3, #24]
 800c93c:	f043 0210 	orr.w	r2, r3, #16
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	699a      	ldr	r2, [r3, #24]
 800c948:	4b0f      	ldr	r3, [pc, #60]	; (800c988 <USB_DevInit+0x2c4>)
 800c94a:	4313      	orrs	r3, r2
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c952:	2b00      	cmp	r3, #0
 800c954:	d005      	beq.n	800c962 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	699b      	ldr	r3, [r3, #24]
 800c95a:	f043 0208 	orr.w	r2, r3, #8
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c964:	2b01      	cmp	r3, #1
 800c966:	d107      	bne.n	800c978 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	699b      	ldr	r3, [r3, #24]
 800c96c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c970:	f043 0304 	orr.w	r3, r3, #4
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c978:	7dfb      	ldrb	r3, [r7, #23]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3718      	adds	r7, #24
 800c97e:	46bd      	mov	sp, r7
 800c980:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c984:	b004      	add	sp, #16
 800c986:	4770      	bx	lr
 800c988:	803c3800 	.word	0x803c3800

0800c98c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c996:	2300      	movs	r3, #0
 800c998:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	019b      	lsls	r3, r3, #6
 800c99e:	f043 0220 	orr.w	r2, r3, #32
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	60fb      	str	r3, [r7, #12]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	4a08      	ldr	r2, [pc, #32]	; (800c9d0 <USB_FlushTxFifo+0x44>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d901      	bls.n	800c9b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c9b4:	2303      	movs	r3, #3
 800c9b6:	e006      	b.n	800c9c6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	691b      	ldr	r3, [r3, #16]
 800c9bc:	f003 0320 	and.w	r3, r3, #32
 800c9c0:	2b20      	cmp	r3, #32
 800c9c2:	d0f0      	beq.n	800c9a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3714      	adds	r7, #20
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bc80      	pop	{r7}
 800c9ce:	4770      	bx	lr
 800c9d0:	00030d40 	.word	0x00030d40

0800c9d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b085      	sub	sp, #20
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2210      	movs	r2, #16
 800c9e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	60fb      	str	r3, [r7, #12]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	4a08      	ldr	r2, [pc, #32]	; (800ca10 <USB_FlushRxFifo+0x3c>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d901      	bls.n	800c9f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c9f4:	2303      	movs	r3, #3
 800c9f6:	e006      	b.n	800ca06 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	691b      	ldr	r3, [r3, #16]
 800c9fc:	f003 0310 	and.w	r3, r3, #16
 800ca00:	2b10      	cmp	r3, #16
 800ca02:	d0f0      	beq.n	800c9e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3714      	adds	r7, #20
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bc80      	pop	{r7}
 800ca0e:	4770      	bx	lr
 800ca10:	00030d40 	.word	0x00030d40

0800ca14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	78fb      	ldrb	r3, [r7, #3]
 800ca2e:	68f9      	ldr	r1, [r7, #12]
 800ca30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca34:	4313      	orrs	r3, r2
 800ca36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3714      	adds	r7, #20
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bc80      	pop	{r7}
 800ca42:	4770      	bx	lr

0800ca44 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b087      	sub	sp, #28
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	f003 0306 	and.w	r3, r3, #6
 800ca5c:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d102      	bne.n	800ca6a <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ca64:	2300      	movs	r3, #0
 800ca66:	75fb      	strb	r3, [r7, #23]
 800ca68:	e00a      	b.n	800ca80 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d002      	beq.n	800ca76 <USB_GetDevSpeed+0x32>
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2b06      	cmp	r3, #6
 800ca74:	d102      	bne.n	800ca7c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ca76:	2302      	movs	r3, #2
 800ca78:	75fb      	strb	r3, [r7, #23]
 800ca7a:	e001      	b.n	800ca80 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ca7c:	230f      	movs	r3, #15
 800ca7e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ca80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	371c      	adds	r7, #28
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bc80      	pop	{r7}
 800ca8a:	4770      	bx	lr

0800ca8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	785b      	ldrb	r3, [r3, #1]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d13a      	bne.n	800cb1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caae:	69da      	ldr	r2, [r3, #28]
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	f003 030f 	and.w	r3, r3, #15
 800cab8:	2101      	movs	r1, #1
 800caba:	fa01 f303 	lsl.w	r3, r1, r3
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	68f9      	ldr	r1, [r7, #12]
 800cac2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cac6:	4313      	orrs	r3, r2
 800cac8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	015a      	lsls	r2, r3, #5
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	4413      	add	r3, r2
 800cad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d155      	bne.n	800cb8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	015a      	lsls	r2, r3, #5
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	4413      	add	r3, r2
 800cae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	78db      	ldrb	r3, [r3, #3]
 800cafa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cafc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	059b      	lsls	r3, r3, #22
 800cb02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb04:	4313      	orrs	r3, r2
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	0151      	lsls	r1, r2, #5
 800cb0a:	68fa      	ldr	r2, [r7, #12]
 800cb0c:	440a      	add	r2, r1
 800cb0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb1a:	6013      	str	r3, [r2, #0]
 800cb1c:	e036      	b.n	800cb8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb24:	69da      	ldr	r2, [r3, #28]
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	f003 030f 	and.w	r3, r3, #15
 800cb2e:	2101      	movs	r1, #1
 800cb30:	fa01 f303 	lsl.w	r3, r1, r3
 800cb34:	041b      	lsls	r3, r3, #16
 800cb36:	68f9      	ldr	r1, [r7, #12]
 800cb38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	015a      	lsls	r2, r3, #5
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	4413      	add	r3, r2
 800cb48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d11a      	bne.n	800cb8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	015a      	lsls	r2, r3, #5
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	78db      	ldrb	r3, [r3, #3]
 800cb70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cb72:	430b      	orrs	r3, r1
 800cb74:	4313      	orrs	r3, r2
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	0151      	lsls	r1, r2, #5
 800cb7a:	68fa      	ldr	r2, [r7, #12]
 800cb7c:	440a      	add	r2, r1
 800cb7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3714      	adds	r7, #20
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bc80      	pop	{r7}
 800cb96:	4770      	bx	lr

0800cb98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	785b      	ldrb	r3, [r3, #1]
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d161      	bne.n	800cc78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	015a      	lsls	r2, r3, #5
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	4413      	add	r3, r2
 800cbbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbca:	d11f      	bne.n	800cc0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	015a      	lsls	r2, r3, #5
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	4413      	add	r3, r2
 800cbd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	68ba      	ldr	r2, [r7, #8]
 800cbdc:	0151      	lsls	r1, r2, #5
 800cbde:	68fa      	ldr	r2, [r7, #12]
 800cbe0:	440a      	add	r2, r1
 800cbe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbe6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cbea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	015a      	lsls	r2, r3, #5
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	68ba      	ldr	r2, [r7, #8]
 800cbfc:	0151      	lsls	r1, r2, #5
 800cbfe:	68fa      	ldr	r2, [r7, #12]
 800cc00:	440a      	add	r2, r1
 800cc02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	f003 030f 	and.w	r3, r3, #15
 800cc1c:	2101      	movs	r1, #1
 800cc1e:	fa01 f303 	lsl.w	r3, r1, r3
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	43db      	mvns	r3, r3
 800cc26:	68f9      	ldr	r1, [r7, #12]
 800cc28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc2c:	4013      	ands	r3, r2
 800cc2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc36:	69da      	ldr	r2, [r3, #28]
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	f003 030f 	and.w	r3, r3, #15
 800cc40:	2101      	movs	r1, #1
 800cc42:	fa01 f303 	lsl.w	r3, r1, r3
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	43db      	mvns	r3, r3
 800cc4a:	68f9      	ldr	r1, [r7, #12]
 800cc4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc50:	4013      	ands	r3, r2
 800cc52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	015a      	lsls	r2, r3, #5
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	0159      	lsls	r1, r3, #5
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	440b      	add	r3, r1
 800cc6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc6e:	4619      	mov	r1, r3
 800cc70:	4b35      	ldr	r3, [pc, #212]	; (800cd48 <USB_DeactivateEndpoint+0x1b0>)
 800cc72:	4013      	ands	r3, r2
 800cc74:	600b      	str	r3, [r1, #0]
 800cc76:	e060      	b.n	800cd3a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	015a      	lsls	r2, r3, #5
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	4413      	add	r3, r2
 800cc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc8e:	d11f      	bne.n	800ccd0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	015a      	lsls	r2, r3, #5
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	4413      	add	r3, r2
 800cc98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	68ba      	ldr	r2, [r7, #8]
 800cca0:	0151      	lsls	r1, r2, #5
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	440a      	add	r2, r1
 800cca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ccae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	015a      	lsls	r2, r3, #5
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	68ba      	ldr	r2, [r7, #8]
 800ccc0:	0151      	lsls	r1, r2, #5
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	440a      	add	r2, r1
 800ccc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ccce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	f003 030f 	and.w	r3, r3, #15
 800cce0:	2101      	movs	r1, #1
 800cce2:	fa01 f303 	lsl.w	r3, r1, r3
 800cce6:	041b      	lsls	r3, r3, #16
 800cce8:	43db      	mvns	r3, r3
 800ccea:	68f9      	ldr	r1, [r7, #12]
 800ccec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccfa:	69da      	ldr	r2, [r3, #28]
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	f003 030f 	and.w	r3, r3, #15
 800cd04:	2101      	movs	r1, #1
 800cd06:	fa01 f303 	lsl.w	r3, r1, r3
 800cd0a:	041b      	lsls	r3, r3, #16
 800cd0c:	43db      	mvns	r3, r3
 800cd0e:	68f9      	ldr	r1, [r7, #12]
 800cd10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd14:	4013      	ands	r3, r2
 800cd16:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	015a      	lsls	r2, r3, #5
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	4413      	add	r3, r2
 800cd20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	0159      	lsls	r1, r3, #5
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	440b      	add	r3, r1
 800cd2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd32:	4619      	mov	r1, r3
 800cd34:	4b05      	ldr	r3, [pc, #20]	; (800cd4c <USB_DeactivateEndpoint+0x1b4>)
 800cd36:	4013      	ands	r3, r2
 800cd38:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cd3a:	2300      	movs	r3, #0
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3714      	adds	r7, #20
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bc80      	pop	{r7}
 800cd44:	4770      	bx	lr
 800cd46:	bf00      	nop
 800cd48:	ec337800 	.word	0xec337800
 800cd4c:	eff37800 	.word	0xeff37800

0800cd50 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b08a      	sub	sp, #40	; 0x28
 800cd54:	af02      	add	r7, sp, #8
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	785b      	ldrb	r3, [r3, #1]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	f040 815c 	bne.w	800d02a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	695b      	ldr	r3, [r3, #20]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d132      	bne.n	800cde0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	015a      	lsls	r2, r3, #5
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	4413      	add	r3, r2
 800cd82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd86:	691b      	ldr	r3, [r3, #16]
 800cd88:	69ba      	ldr	r2, [r7, #24]
 800cd8a:	0151      	lsls	r1, r2, #5
 800cd8c:	69fa      	ldr	r2, [r7, #28]
 800cd8e:	440a      	add	r2, r1
 800cd90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cd98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cd9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cd9e:	69bb      	ldr	r3, [r7, #24]
 800cda0:	015a      	lsls	r2, r3, #5
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	4413      	add	r3, r2
 800cda6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	69ba      	ldr	r2, [r7, #24]
 800cdae:	0151      	lsls	r1, r2, #5
 800cdb0:	69fa      	ldr	r2, [r7, #28]
 800cdb2:	440a      	add	r2, r1
 800cdb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cdbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	015a      	lsls	r2, r3, #5
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdca:	691b      	ldr	r3, [r3, #16]
 800cdcc:	69ba      	ldr	r2, [r7, #24]
 800cdce:	0151      	lsls	r1, r2, #5
 800cdd0:	69fa      	ldr	r2, [r7, #28]
 800cdd2:	440a      	add	r2, r1
 800cdd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdd8:	0cdb      	lsrs	r3, r3, #19
 800cdda:	04db      	lsls	r3, r3, #19
 800cddc:	6113      	str	r3, [r2, #16]
 800cdde:	e074      	b.n	800ceca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	015a      	lsls	r2, r3, #5
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	4413      	add	r3, r2
 800cde8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdec:	691b      	ldr	r3, [r3, #16]
 800cdee:	69ba      	ldr	r2, [r7, #24]
 800cdf0:	0151      	lsls	r1, r2, #5
 800cdf2:	69fa      	ldr	r2, [r7, #28]
 800cdf4:	440a      	add	r2, r1
 800cdf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdfa:	0cdb      	lsrs	r3, r3, #19
 800cdfc:	04db      	lsls	r3, r3, #19
 800cdfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	015a      	lsls	r2, r3, #5
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	4413      	add	r3, r2
 800ce08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce0c:	691b      	ldr	r3, [r3, #16]
 800ce0e:	69ba      	ldr	r2, [r7, #24]
 800ce10:	0151      	lsls	r1, r2, #5
 800ce12:	69fa      	ldr	r2, [r7, #28]
 800ce14:	440a      	add	r2, r1
 800ce16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ce1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ce22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	015a      	lsls	r2, r3, #5
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce30:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	6959      	ldr	r1, [r3, #20]
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	440b      	add	r3, r1
 800ce3c:	1e59      	subs	r1, r3, #1
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	fbb1 f3f3 	udiv	r3, r1, r3
 800ce46:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ce48:	4b9d      	ldr	r3, [pc, #628]	; (800d0c0 <USB_EPStartXfer+0x370>)
 800ce4a:	400b      	ands	r3, r1
 800ce4c:	69b9      	ldr	r1, [r7, #24]
 800ce4e:	0148      	lsls	r0, r1, #5
 800ce50:	69f9      	ldr	r1, [r7, #28]
 800ce52:	4401      	add	r1, r0
 800ce54:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	015a      	lsls	r2, r3, #5
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	4413      	add	r3, r2
 800ce64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce68:	691a      	ldr	r2, [r3, #16]
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	695b      	ldr	r3, [r3, #20]
 800ce6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce72:	69b9      	ldr	r1, [r7, #24]
 800ce74:	0148      	lsls	r0, r1, #5
 800ce76:	69f9      	ldr	r1, [r7, #28]
 800ce78:	4401      	add	r1, r0
 800ce7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	78db      	ldrb	r3, [r3, #3]
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d11f      	bne.n	800ceca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	015a      	lsls	r2, r3, #5
 800ce8e:	69fb      	ldr	r3, [r7, #28]
 800ce90:	4413      	add	r3, r2
 800ce92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce96:	691b      	ldr	r3, [r3, #16]
 800ce98:	69ba      	ldr	r2, [r7, #24]
 800ce9a:	0151      	lsls	r1, r2, #5
 800ce9c:	69fa      	ldr	r2, [r7, #28]
 800ce9e:	440a      	add	r2, r1
 800cea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cea4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cea8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	015a      	lsls	r2, r3, #5
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceb6:	691b      	ldr	r3, [r3, #16]
 800ceb8:	69ba      	ldr	r2, [r7, #24]
 800ceba:	0151      	lsls	r1, r2, #5
 800cebc:	69fa      	ldr	r2, [r7, #28]
 800cebe:	440a      	add	r2, r1
 800cec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cec4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cec8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ceca:	79fb      	ldrb	r3, [r7, #7]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d14b      	bne.n	800cf68 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	691b      	ldr	r3, [r3, #16]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d009      	beq.n	800ceec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	015a      	lsls	r2, r3, #5
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	4413      	add	r3, r2
 800cee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cee4:	461a      	mov	r2, r3
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	691b      	ldr	r3, [r3, #16]
 800ceea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	78db      	ldrb	r3, [r3, #3]
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d128      	bne.n	800cf46 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cefa:	689b      	ldr	r3, [r3, #8]
 800cefc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d110      	bne.n	800cf26 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	015a      	lsls	r2, r3, #5
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	69ba      	ldr	r2, [r7, #24]
 800cf14:	0151      	lsls	r1, r2, #5
 800cf16:	69fa      	ldr	r2, [r7, #28]
 800cf18:	440a      	add	r2, r1
 800cf1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf22:	6013      	str	r3, [r2, #0]
 800cf24:	e00f      	b.n	800cf46 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	015a      	lsls	r2, r3, #5
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	69ba      	ldr	r2, [r7, #24]
 800cf36:	0151      	lsls	r1, r2, #5
 800cf38:	69fa      	ldr	r2, [r7, #28]
 800cf3a:	440a      	add	r2, r1
 800cf3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf44:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	015a      	lsls	r2, r3, #5
 800cf4a:	69fb      	ldr	r3, [r7, #28]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	69ba      	ldr	r2, [r7, #24]
 800cf56:	0151      	lsls	r1, r2, #5
 800cf58:	69fa      	ldr	r2, [r7, #28]
 800cf5a:	440a      	add	r2, r1
 800cf5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf64:	6013      	str	r3, [r2, #0]
 800cf66:	e12f      	b.n	800d1c8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cf68:	69bb      	ldr	r3, [r7, #24]
 800cf6a:	015a      	lsls	r2, r3, #5
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	4413      	add	r3, r2
 800cf70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	69ba      	ldr	r2, [r7, #24]
 800cf78:	0151      	lsls	r1, r2, #5
 800cf7a:	69fa      	ldr	r2, [r7, #28]
 800cf7c:	440a      	add	r2, r1
 800cf7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf86:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	78db      	ldrb	r3, [r3, #3]
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d015      	beq.n	800cfbc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	695b      	ldr	r3, [r3, #20]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	f000 8117 	beq.w	800d1c8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	f003 030f 	and.w	r3, r3, #15
 800cfaa:	2101      	movs	r1, #1
 800cfac:	fa01 f303 	lsl.w	r3, r1, r3
 800cfb0:	69f9      	ldr	r1, [r7, #28]
 800cfb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	634b      	str	r3, [r1, #52]	; 0x34
 800cfba:	e105      	b.n	800d1c8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d110      	bne.n	800cfee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	015a      	lsls	r2, r3, #5
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	69ba      	ldr	r2, [r7, #24]
 800cfdc:	0151      	lsls	r1, r2, #5
 800cfde:	69fa      	ldr	r2, [r7, #28]
 800cfe0:	440a      	add	r2, r1
 800cfe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfe6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cfea:	6013      	str	r3, [r2, #0]
 800cfec:	e00f      	b.n	800d00e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	015a      	lsls	r2, r3, #5
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	4413      	add	r3, r2
 800cff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	69ba      	ldr	r2, [r7, #24]
 800cffe:	0151      	lsls	r1, r2, #5
 800d000:	69fa      	ldr	r2, [r7, #28]
 800d002:	440a      	add	r2, r1
 800d004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d00c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	68d9      	ldr	r1, [r3, #12]
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	781a      	ldrb	r2, [r3, #0]
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	695b      	ldr	r3, [r3, #20]
 800d01a:	b298      	uxth	r0, r3
 800d01c:	79fb      	ldrb	r3, [r7, #7]
 800d01e:	9300      	str	r3, [sp, #0]
 800d020:	4603      	mov	r3, r0
 800d022:	68f8      	ldr	r0, [r7, #12]
 800d024:	f000 fa2a 	bl	800d47c <USB_WritePacket>
 800d028:	e0ce      	b.n	800d1c8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	015a      	lsls	r2, r3, #5
 800d02e:	69fb      	ldr	r3, [r7, #28]
 800d030:	4413      	add	r3, r2
 800d032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d036:	691b      	ldr	r3, [r3, #16]
 800d038:	69ba      	ldr	r2, [r7, #24]
 800d03a:	0151      	lsls	r1, r2, #5
 800d03c:	69fa      	ldr	r2, [r7, #28]
 800d03e:	440a      	add	r2, r1
 800d040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d044:	0cdb      	lsrs	r3, r3, #19
 800d046:	04db      	lsls	r3, r3, #19
 800d048:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	015a      	lsls	r2, r3, #5
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	4413      	add	r3, r2
 800d052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d056:	691b      	ldr	r3, [r3, #16]
 800d058:	69ba      	ldr	r2, [r7, #24]
 800d05a:	0151      	lsls	r1, r2, #5
 800d05c:	69fa      	ldr	r2, [r7, #28]
 800d05e:	440a      	add	r2, r1
 800d060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d064:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d068:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d06c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	695b      	ldr	r3, [r3, #20]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d126      	bne.n	800d0c4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	015a      	lsls	r2, r3, #5
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	4413      	add	r3, r2
 800d07e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d082:	691a      	ldr	r2, [r3, #16]
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d08c:	69b9      	ldr	r1, [r7, #24]
 800d08e:	0148      	lsls	r0, r1, #5
 800d090:	69f9      	ldr	r1, [r7, #28]
 800d092:	4401      	add	r1, r0
 800d094:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d098:	4313      	orrs	r3, r2
 800d09a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	015a      	lsls	r2, r3, #5
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	69ba      	ldr	r2, [r7, #24]
 800d0ac:	0151      	lsls	r1, r2, #5
 800d0ae:	69fa      	ldr	r2, [r7, #28]
 800d0b0:	440a      	add	r2, r1
 800d0b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d0ba:	6113      	str	r3, [r2, #16]
 800d0bc:	e036      	b.n	800d12c <USB_EPStartXfer+0x3dc>
 800d0be:	bf00      	nop
 800d0c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	695a      	ldr	r2, [r3, #20]
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	689b      	ldr	r3, [r3, #8]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	1e5a      	subs	r2, r3, #1
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0d8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	015a      	lsls	r2, r3, #5
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0e6:	691a      	ldr	r2, [r3, #16]
 800d0e8:	8afb      	ldrh	r3, [r7, #22]
 800d0ea:	04d9      	lsls	r1, r3, #19
 800d0ec:	4b39      	ldr	r3, [pc, #228]	; (800d1d4 <USB_EPStartXfer+0x484>)
 800d0ee:	400b      	ands	r3, r1
 800d0f0:	69b9      	ldr	r1, [r7, #24]
 800d0f2:	0148      	lsls	r0, r1, #5
 800d0f4:	69f9      	ldr	r1, [r7, #28]
 800d0f6:	4401      	add	r1, r0
 800d0f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d0fc:	4313      	orrs	r3, r2
 800d0fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	015a      	lsls	r2, r3, #5
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	4413      	add	r3, r2
 800d108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d10c:	691a      	ldr	r2, [r3, #16]
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	8af9      	ldrh	r1, [r7, #22]
 800d114:	fb01 f303 	mul.w	r3, r1, r3
 800d118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d11c:	69b9      	ldr	r1, [r7, #24]
 800d11e:	0148      	lsls	r0, r1, #5
 800d120:	69f9      	ldr	r1, [r7, #28]
 800d122:	4401      	add	r1, r0
 800d124:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d128:	4313      	orrs	r3, r2
 800d12a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d12c:	79fb      	ldrb	r3, [r7, #7]
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d10d      	bne.n	800d14e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d009      	beq.n	800d14e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	68d9      	ldr	r1, [r3, #12]
 800d13e:	69bb      	ldr	r3, [r7, #24]
 800d140:	015a      	lsls	r2, r3, #5
 800d142:	69fb      	ldr	r3, [r7, #28]
 800d144:	4413      	add	r3, r2
 800d146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d14a:	460a      	mov	r2, r1
 800d14c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	78db      	ldrb	r3, [r3, #3]
 800d152:	2b01      	cmp	r3, #1
 800d154:	d128      	bne.n	800d1a8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d156:	69fb      	ldr	r3, [r7, #28]
 800d158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d162:	2b00      	cmp	r3, #0
 800d164:	d110      	bne.n	800d188 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	015a      	lsls	r2, r3, #5
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	4413      	add	r3, r2
 800d16e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	69ba      	ldr	r2, [r7, #24]
 800d176:	0151      	lsls	r1, r2, #5
 800d178:	69fa      	ldr	r2, [r7, #28]
 800d17a:	440a      	add	r2, r1
 800d17c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d180:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d184:	6013      	str	r3, [r2, #0]
 800d186:	e00f      	b.n	800d1a8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	015a      	lsls	r2, r3, #5
 800d18c:	69fb      	ldr	r3, [r7, #28]
 800d18e:	4413      	add	r3, r2
 800d190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	69ba      	ldr	r2, [r7, #24]
 800d198:	0151      	lsls	r1, r2, #5
 800d19a:	69fa      	ldr	r2, [r7, #28]
 800d19c:	440a      	add	r2, r1
 800d19e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	015a      	lsls	r2, r3, #5
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	69ba      	ldr	r2, [r7, #24]
 800d1b8:	0151      	lsls	r1, r2, #5
 800d1ba:	69fa      	ldr	r2, [r7, #28]
 800d1bc:	440a      	add	r2, r1
 800d1be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d1c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3720      	adds	r7, #32
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	1ff80000 	.word	0x1ff80000

0800d1d8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b087      	sub	sp, #28
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	785b      	ldrb	r3, [r3, #1]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	f040 80cd 	bne.w	800d394 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	695b      	ldr	r3, [r3, #20]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d132      	bne.n	800d268 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	015a      	lsls	r2, r3, #5
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	4413      	add	r3, r2
 800d20a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d20e:	691b      	ldr	r3, [r3, #16]
 800d210:	693a      	ldr	r2, [r7, #16]
 800d212:	0151      	lsls	r1, r2, #5
 800d214:	697a      	ldr	r2, [r7, #20]
 800d216:	440a      	add	r2, r1
 800d218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d21c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d220:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d224:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	015a      	lsls	r2, r3, #5
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	4413      	add	r3, r2
 800d22e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	693a      	ldr	r2, [r7, #16]
 800d236:	0151      	lsls	r1, r2, #5
 800d238:	697a      	ldr	r2, [r7, #20]
 800d23a:	440a      	add	r2, r1
 800d23c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d240:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d244:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	015a      	lsls	r2, r3, #5
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	4413      	add	r3, r2
 800d24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	693a      	ldr	r2, [r7, #16]
 800d256:	0151      	lsls	r1, r2, #5
 800d258:	697a      	ldr	r2, [r7, #20]
 800d25a:	440a      	add	r2, r1
 800d25c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d260:	0cdb      	lsrs	r3, r3, #19
 800d262:	04db      	lsls	r3, r3, #19
 800d264:	6113      	str	r3, [r2, #16]
 800d266:	e04e      	b.n	800d306 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	015a      	lsls	r2, r3, #5
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	4413      	add	r3, r2
 800d270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	693a      	ldr	r2, [r7, #16]
 800d278:	0151      	lsls	r1, r2, #5
 800d27a:	697a      	ldr	r2, [r7, #20]
 800d27c:	440a      	add	r2, r1
 800d27e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d282:	0cdb      	lsrs	r3, r3, #19
 800d284:	04db      	lsls	r3, r3, #19
 800d286:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	015a      	lsls	r2, r3, #5
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	4413      	add	r3, r2
 800d290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d294:	691b      	ldr	r3, [r3, #16]
 800d296:	693a      	ldr	r2, [r7, #16]
 800d298:	0151      	lsls	r1, r2, #5
 800d29a:	697a      	ldr	r2, [r7, #20]
 800d29c:	440a      	add	r2, r1
 800d29e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d2a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d2aa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	695a      	ldr	r2, [r3, #20]
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d903      	bls.n	800d2c0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	689a      	ldr	r2, [r3, #8]
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	015a      	lsls	r2, r3, #5
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2cc:	691b      	ldr	r3, [r3, #16]
 800d2ce:	693a      	ldr	r2, [r7, #16]
 800d2d0:	0151      	lsls	r1, r2, #5
 800d2d2:	697a      	ldr	r2, [r7, #20]
 800d2d4:	440a      	add	r2, r1
 800d2d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	015a      	lsls	r2, r3, #5
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	4413      	add	r3, r2
 800d2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ec:	691a      	ldr	r2, [r3, #16]
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	695b      	ldr	r3, [r3, #20]
 800d2f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2f6:	6939      	ldr	r1, [r7, #16]
 800d2f8:	0148      	lsls	r0, r1, #5
 800d2fa:	6979      	ldr	r1, [r7, #20]
 800d2fc:	4401      	add	r1, r0
 800d2fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d302:	4313      	orrs	r3, r2
 800d304:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d306:	79fb      	ldrb	r3, [r7, #7]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d11e      	bne.n	800d34a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	691b      	ldr	r3, [r3, #16]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d009      	beq.n	800d328 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	015a      	lsls	r2, r3, #5
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	4413      	add	r3, r2
 800d31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d320:	461a      	mov	r2, r3
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	691b      	ldr	r3, [r3, #16]
 800d326:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	015a      	lsls	r2, r3, #5
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	4413      	add	r3, r2
 800d330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	0151      	lsls	r1, r2, #5
 800d33a:	697a      	ldr	r2, [r7, #20]
 800d33c:	440a      	add	r2, r1
 800d33e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d342:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d346:	6013      	str	r3, [r2, #0]
 800d348:	e092      	b.n	800d470 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	015a      	lsls	r2, r3, #5
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	4413      	add	r3, r2
 800d352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	693a      	ldr	r2, [r7, #16]
 800d35a:	0151      	lsls	r1, r2, #5
 800d35c:	697a      	ldr	r2, [r7, #20]
 800d35e:	440a      	add	r2, r1
 800d360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d364:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d368:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	695b      	ldr	r3, [r3, #20]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d07e      	beq.n	800d470 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	f003 030f 	and.w	r3, r3, #15
 800d382:	2101      	movs	r1, #1
 800d384:	fa01 f303 	lsl.w	r3, r1, r3
 800d388:	6979      	ldr	r1, [r7, #20]
 800d38a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d38e:	4313      	orrs	r3, r2
 800d390:	634b      	str	r3, [r1, #52]	; 0x34
 800d392:	e06d      	b.n	800d470 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	015a      	lsls	r2, r3, #5
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	4413      	add	r3, r2
 800d39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	0151      	lsls	r1, r2, #5
 800d3a6:	697a      	ldr	r2, [r7, #20]
 800d3a8:	440a      	add	r2, r1
 800d3aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3ae:	0cdb      	lsrs	r3, r3, #19
 800d3b0:	04db      	lsls	r3, r3, #19
 800d3b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	015a      	lsls	r2, r3, #5
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3c0:	691b      	ldr	r3, [r3, #16]
 800d3c2:	693a      	ldr	r2, [r7, #16]
 800d3c4:	0151      	lsls	r1, r2, #5
 800d3c6:	697a      	ldr	r2, [r7, #20]
 800d3c8:	440a      	add	r2, r1
 800d3ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d3d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d3d6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	695b      	ldr	r3, [r3, #20]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d003      	beq.n	800d3e8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	689a      	ldr	r2, [r3, #8]
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	015a      	lsls	r2, r3, #5
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	4413      	add	r3, r2
 800d3f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3f4:	691b      	ldr	r3, [r3, #16]
 800d3f6:	693a      	ldr	r2, [r7, #16]
 800d3f8:	0151      	lsls	r1, r2, #5
 800d3fa:	697a      	ldr	r2, [r7, #20]
 800d3fc:	440a      	add	r2, r1
 800d3fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d402:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d406:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	015a      	lsls	r2, r3, #5
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	4413      	add	r3, r2
 800d410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d414:	691a      	ldr	r2, [r3, #16]
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	689b      	ldr	r3, [r3, #8]
 800d41a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d41e:	6939      	ldr	r1, [r7, #16]
 800d420:	0148      	lsls	r0, r1, #5
 800d422:	6979      	ldr	r1, [r7, #20]
 800d424:	4401      	add	r1, r0
 800d426:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d42a:	4313      	orrs	r3, r2
 800d42c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d42e:	79fb      	ldrb	r3, [r7, #7]
 800d430:	2b01      	cmp	r3, #1
 800d432:	d10d      	bne.n	800d450 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	68db      	ldr	r3, [r3, #12]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d009      	beq.n	800d450 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	68d9      	ldr	r1, [r3, #12]
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	015a      	lsls	r2, r3, #5
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	4413      	add	r3, r2
 800d448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d44c:	460a      	mov	r2, r1
 800d44e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	015a      	lsls	r2, r3, #5
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	4413      	add	r3, r2
 800d458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	693a      	ldr	r2, [r7, #16]
 800d460:	0151      	lsls	r1, r2, #5
 800d462:	697a      	ldr	r2, [r7, #20]
 800d464:	440a      	add	r2, r1
 800d466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d46a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d46e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d470:	2300      	movs	r3, #0
}
 800d472:	4618      	mov	r0, r3
 800d474:	371c      	adds	r7, #28
 800d476:	46bd      	mov	sp, r7
 800d478:	bc80      	pop	{r7}
 800d47a:	4770      	bx	lr

0800d47c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b089      	sub	sp, #36	; 0x24
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	4611      	mov	r1, r2
 800d488:	461a      	mov	r2, r3
 800d48a:	460b      	mov	r3, r1
 800d48c:	71fb      	strb	r3, [r7, #7]
 800d48e:	4613      	mov	r3, r2
 800d490:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d49a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d123      	bne.n	800d4ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d4a2:	88bb      	ldrh	r3, [r7, #4]
 800d4a4:	3303      	adds	r3, #3
 800d4a6:	089b      	lsrs	r3, r3, #2
 800d4a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	61bb      	str	r3, [r7, #24]
 800d4ae:	e018      	b.n	800d4e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d4b0:	79fb      	ldrb	r3, [r7, #7]
 800d4b2:	031a      	lsls	r2, r3, #12
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4bc:	461a      	mov	r2, r3
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d4ca:	69fb      	ldr	r3, [r7, #28]
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d4d6:	69fb      	ldr	r3, [r7, #28]
 800d4d8:	3301      	adds	r3, #1
 800d4da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	3301      	adds	r3, #1
 800d4e0:	61bb      	str	r3, [r7, #24]
 800d4e2:	69ba      	ldr	r2, [r7, #24]
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d3e2      	bcc.n	800d4b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d4ea:	2300      	movs	r3, #0
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3724      	adds	r7, #36	; 0x24
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bc80      	pop	{r7}
 800d4f4:	4770      	bx	lr

0800d4f6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d4f6:	b480      	push	{r7}
 800d4f8:	b08b      	sub	sp, #44	; 0x2c
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	60f8      	str	r0, [r7, #12]
 800d4fe:	60b9      	str	r1, [r7, #8]
 800d500:	4613      	mov	r3, r2
 800d502:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d50c:	88fb      	ldrh	r3, [r7, #6]
 800d50e:	089b      	lsrs	r3, r3, #2
 800d510:	b29b      	uxth	r3, r3
 800d512:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d514:	88fb      	ldrh	r3, [r7, #6]
 800d516:	f003 0303 	and.w	r3, r3, #3
 800d51a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d51c:	2300      	movs	r3, #0
 800d51e:	623b      	str	r3, [r7, #32]
 800d520:	e014      	b.n	800d54c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52c:	601a      	str	r2, [r3, #0]
    pDest++;
 800d52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d530:	3301      	adds	r3, #1
 800d532:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d536:	3301      	adds	r3, #1
 800d538:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53c:	3301      	adds	r3, #1
 800d53e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d542:	3301      	adds	r3, #1
 800d544:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d546:	6a3b      	ldr	r3, [r7, #32]
 800d548:	3301      	adds	r3, #1
 800d54a:	623b      	str	r3, [r7, #32]
 800d54c:	6a3a      	ldr	r2, [r7, #32]
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	429a      	cmp	r2, r3
 800d552:	d3e6      	bcc.n	800d522 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d554:	8bfb      	ldrh	r3, [r7, #30]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d01e      	beq.n	800d598 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d55a:	2300      	movs	r3, #0
 800d55c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d564:	461a      	mov	r2, r3
 800d566:	f107 0310 	add.w	r3, r7, #16
 800d56a:	6812      	ldr	r2, [r2, #0]
 800d56c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d56e:	693a      	ldr	r2, [r7, #16]
 800d570:	6a3b      	ldr	r3, [r7, #32]
 800d572:	b2db      	uxtb	r3, r3
 800d574:	00db      	lsls	r3, r3, #3
 800d576:	fa22 f303 	lsr.w	r3, r2, r3
 800d57a:	b2da      	uxtb	r2, r3
 800d57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57e:	701a      	strb	r2, [r3, #0]
      i++;
 800d580:	6a3b      	ldr	r3, [r7, #32]
 800d582:	3301      	adds	r3, #1
 800d584:	623b      	str	r3, [r7, #32]
      pDest++;
 800d586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d588:	3301      	adds	r3, #1
 800d58a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d58c:	8bfb      	ldrh	r3, [r7, #30]
 800d58e:	3b01      	subs	r3, #1
 800d590:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d592:	8bfb      	ldrh	r3, [r7, #30]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d1ea      	bne.n	800d56e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	372c      	adds	r7, #44	; 0x2c
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bc80      	pop	{r7}
 800d5a2:	4770      	bx	lr

0800d5a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	785b      	ldrb	r3, [r3, #1]
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d12c      	bne.n	800d61a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	015a      	lsls	r2, r3, #5
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	4413      	add	r3, r2
 800d5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	db12      	blt.n	800d5f8 <USB_EPSetStall+0x54>
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d00f      	beq.n	800d5f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	015a      	lsls	r2, r3, #5
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	4413      	add	r3, r2
 800d5e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	68ba      	ldr	r2, [r7, #8]
 800d5e8:	0151      	lsls	r1, r2, #5
 800d5ea:	68fa      	ldr	r2, [r7, #12]
 800d5ec:	440a      	add	r2, r1
 800d5ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d5f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	015a      	lsls	r2, r3, #5
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	4413      	add	r3, r2
 800d600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	68ba      	ldr	r2, [r7, #8]
 800d608:	0151      	lsls	r1, r2, #5
 800d60a:	68fa      	ldr	r2, [r7, #12]
 800d60c:	440a      	add	r2, r1
 800d60e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d612:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d616:	6013      	str	r3, [r2, #0]
 800d618:	e02b      	b.n	800d672 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	015a      	lsls	r2, r3, #5
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	4413      	add	r3, r2
 800d622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	db12      	blt.n	800d652 <USB_EPSetStall+0xae>
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00f      	beq.n	800d652 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	015a      	lsls	r2, r3, #5
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	4413      	add	r3, r2
 800d63a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	0151      	lsls	r1, r2, #5
 800d644:	68fa      	ldr	r2, [r7, #12]
 800d646:	440a      	add	r2, r1
 800d648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d64c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d650:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	015a      	lsls	r2, r3, #5
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	4413      	add	r3, r2
 800d65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	68ba      	ldr	r2, [r7, #8]
 800d662:	0151      	lsls	r1, r2, #5
 800d664:	68fa      	ldr	r2, [r7, #12]
 800d666:	440a      	add	r2, r1
 800d668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d66c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d670:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d672:	2300      	movs	r3, #0
}
 800d674:	4618      	mov	r0, r3
 800d676:	3714      	adds	r7, #20
 800d678:	46bd      	mov	sp, r7
 800d67a:	bc80      	pop	{r7}
 800d67c:	4770      	bx	lr

0800d67e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d67e:	b480      	push	{r7}
 800d680:	b085      	sub	sp, #20
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
 800d686:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	785b      	ldrb	r3, [r3, #1]
 800d696:	2b01      	cmp	r3, #1
 800d698:	d128      	bne.n	800d6ec <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	015a      	lsls	r2, r3, #5
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	68ba      	ldr	r2, [r7, #8]
 800d6aa:	0151      	lsls	r1, r2, #5
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	440a      	add	r2, r1
 800d6b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d6b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	78db      	ldrb	r3, [r3, #3]
 800d6be:	2b03      	cmp	r3, #3
 800d6c0:	d003      	beq.n	800d6ca <USB_EPClearStall+0x4c>
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	78db      	ldrb	r3, [r3, #3]
 800d6c6:	2b02      	cmp	r3, #2
 800d6c8:	d138      	bne.n	800d73c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	015a      	lsls	r2, r3, #5
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	68ba      	ldr	r2, [r7, #8]
 800d6da:	0151      	lsls	r1, r2, #5
 800d6dc:	68fa      	ldr	r2, [r7, #12]
 800d6de:	440a      	add	r2, r1
 800d6e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6e8:	6013      	str	r3, [r2, #0]
 800d6ea:	e027      	b.n	800d73c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	015a      	lsls	r2, r3, #5
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	4413      	add	r3, r2
 800d6f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	0151      	lsls	r1, r2, #5
 800d6fe:	68fa      	ldr	r2, [r7, #12]
 800d700:	440a      	add	r2, r1
 800d702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d706:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d70a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	78db      	ldrb	r3, [r3, #3]
 800d710:	2b03      	cmp	r3, #3
 800d712:	d003      	beq.n	800d71c <USB_EPClearStall+0x9e>
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	78db      	ldrb	r3, [r3, #3]
 800d718:	2b02      	cmp	r3, #2
 800d71a:	d10f      	bne.n	800d73c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	015a      	lsls	r2, r3, #5
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	4413      	add	r3, r2
 800d724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	68ba      	ldr	r2, [r7, #8]
 800d72c:	0151      	lsls	r1, r2, #5
 800d72e:	68fa      	ldr	r2, [r7, #12]
 800d730:	440a      	add	r2, r1
 800d732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d73a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d73c:	2300      	movs	r3, #0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3714      	adds	r7, #20
 800d742:	46bd      	mov	sp, r7
 800d744:	bc80      	pop	{r7}
 800d746:	4770      	bx	lr

0800d748 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d748:	b480      	push	{r7}
 800d74a:	b085      	sub	sp, #20
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	460b      	mov	r3, r1
 800d752:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	68fa      	ldr	r2, [r7, #12]
 800d762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d766:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d76a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	78fb      	ldrb	r3, [r7, #3]
 800d776:	011b      	lsls	r3, r3, #4
 800d778:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d77c:	68f9      	ldr	r1, [r7, #12]
 800d77e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d782:	4313      	orrs	r3, r2
 800d784:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d786:	2300      	movs	r3, #0
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3714      	adds	r7, #20
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bc80      	pop	{r7}
 800d790:	4770      	bx	lr

0800d792 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d792:	b480      	push	{r7}
 800d794:	b085      	sub	sp, #20
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	68fa      	ldr	r2, [r7, #12]
 800d7a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d7ac:	f023 0303 	bic.w	r3, r3, #3
 800d7b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	68fa      	ldr	r2, [r7, #12]
 800d7bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d7c0:	f023 0302 	bic.w	r3, r3, #2
 800d7c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d7c6:	2300      	movs	r3, #0
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3714      	adds	r7, #20
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bc80      	pop	{r7}
 800d7d0:	4770      	bx	lr

0800d7d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d7d2:	b480      	push	{r7}
 800d7d4:	b085      	sub	sp, #20
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	68fa      	ldr	r2, [r7, #12]
 800d7e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d7ec:	f023 0303 	bic.w	r3, r3, #3
 800d7f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	68fa      	ldr	r2, [r7, #12]
 800d7fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d800:	f043 0302 	orr.w	r3, r3, #2
 800d804:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d806:	2300      	movs	r3, #0
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3714      	adds	r7, #20
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bc80      	pop	{r7}
 800d810:	4770      	bx	lr

0800d812 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d812:	b480      	push	{r7}
 800d814:	b085      	sub	sp, #20
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	695b      	ldr	r3, [r3, #20]
 800d81e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	699b      	ldr	r3, [r3, #24]
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	4013      	ands	r3, r2
 800d828:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d82a:	68fb      	ldr	r3, [r7, #12]
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3714      	adds	r7, #20
 800d830:	46bd      	mov	sp, r7
 800d832:	bc80      	pop	{r7}
 800d834:	4770      	bx	lr

0800d836 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d836:	b480      	push	{r7}
 800d838:	b085      	sub	sp, #20
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d848:	699b      	ldr	r3, [r3, #24]
 800d84a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d852:	69db      	ldr	r3, [r3, #28]
 800d854:	68ba      	ldr	r2, [r7, #8]
 800d856:	4013      	ands	r3, r2
 800d858:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	0c1b      	lsrs	r3, r3, #16
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3714      	adds	r7, #20
 800d862:	46bd      	mov	sp, r7
 800d864:	bc80      	pop	{r7}
 800d866:	4770      	bx	lr

0800d868 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d868:	b480      	push	{r7}
 800d86a:	b085      	sub	sp, #20
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d87a:	699b      	ldr	r3, [r3, #24]
 800d87c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d884:	69db      	ldr	r3, [r3, #28]
 800d886:	68ba      	ldr	r2, [r7, #8]
 800d888:	4013      	ands	r3, r2
 800d88a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	b29b      	uxth	r3, r3
}
 800d890:	4618      	mov	r0, r3
 800d892:	3714      	adds	r7, #20
 800d894:	46bd      	mov	sp, r7
 800d896:	bc80      	pop	{r7}
 800d898:	4770      	bx	lr

0800d89a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d89a:	b480      	push	{r7}
 800d89c:	b085      	sub	sp, #20
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d8aa:	78fb      	ldrb	r3, [r7, #3]
 800d8ac:	015a      	lsls	r2, r3, #5
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8c0:	695b      	ldr	r3, [r3, #20]
 800d8c2:	68ba      	ldr	r2, [r7, #8]
 800d8c4:	4013      	ands	r3, r2
 800d8c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d8c8:	68bb      	ldr	r3, [r7, #8]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bc80      	pop	{r7}
 800d8d2:	4770      	bx	lr

0800d8d4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b087      	sub	sp, #28
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	460b      	mov	r3, r1
 800d8de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ea:	691b      	ldr	r3, [r3, #16]
 800d8ec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8f6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d8f8:	78fb      	ldrb	r3, [r7, #3]
 800d8fa:	f003 030f 	and.w	r3, r3, #15
 800d8fe:	68fa      	ldr	r2, [r7, #12]
 800d900:	fa22 f303 	lsr.w	r3, r2, r3
 800d904:	01db      	lsls	r3, r3, #7
 800d906:	b2db      	uxtb	r3, r3
 800d908:	693a      	ldr	r2, [r7, #16]
 800d90a:	4313      	orrs	r3, r2
 800d90c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d90e:	78fb      	ldrb	r3, [r7, #3]
 800d910:	015a      	lsls	r2, r3, #5
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	4413      	add	r3, r2
 800d916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d91a:	689b      	ldr	r3, [r3, #8]
 800d91c:	693a      	ldr	r2, [r7, #16]
 800d91e:	4013      	ands	r3, r2
 800d920:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d922:	68bb      	ldr	r3, [r7, #8]
}
 800d924:	4618      	mov	r0, r3
 800d926:	371c      	adds	r7, #28
 800d928:	46bd      	mov	sp, r7
 800d92a:	bc80      	pop	{r7}
 800d92c:	4770      	bx	lr

0800d92e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d92e:	b480      	push	{r7}
 800d930:	b083      	sub	sp, #12
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	695b      	ldr	r3, [r3, #20]
 800d93a:	f003 0301 	and.w	r3, r3, #1
}
 800d93e:	4618      	mov	r0, r3
 800d940:	370c      	adds	r7, #12
 800d942:	46bd      	mov	sp, r7
 800d944:	bc80      	pop	{r7}
 800d946:	4770      	bx	lr

0800d948 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d948:	b480      	push	{r7}
 800d94a:	b085      	sub	sp, #20
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d962:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d966:	f023 0307 	bic.w	r3, r3, #7
 800d96a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	68fa      	ldr	r2, [r7, #12]
 800d976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d97a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d97e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d980:	2300      	movs	r3, #0
}
 800d982:	4618      	mov	r0, r3
 800d984:	3714      	adds	r7, #20
 800d986:	46bd      	mov	sp, r7
 800d988:	bc80      	pop	{r7}
 800d98a:	4770      	bx	lr

0800d98c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b087      	sub	sp, #28
 800d990:	af00      	add	r7, sp, #0
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	460b      	mov	r3, r1
 800d996:	607a      	str	r2, [r7, #4]
 800d998:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	333c      	adds	r3, #60	; 0x3c
 800d9a2:	3304      	adds	r3, #4
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	4a25      	ldr	r2, [pc, #148]	; (800da40 <USB_EP0_OutStart+0xb4>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d90a      	bls.n	800d9c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d9bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d9c0:	d101      	bne.n	800d9c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	e037      	b.n	800da36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9d8:	691b      	ldr	r3, [r3, #16]
 800d9da:	697a      	ldr	r2, [r7, #20]
 800d9dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d9e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ec:	691b      	ldr	r3, [r3, #16]
 800d9ee:	697a      	ldr	r2, [r7, #20]
 800d9f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9f4:	f043 0318 	orr.w	r3, r3, #24
 800d9f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da00:	691b      	ldr	r3, [r3, #16]
 800da02:	697a      	ldr	r2, [r7, #20]
 800da04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da08:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800da0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800da0e:	7afb      	ldrb	r3, [r7, #11]
 800da10:	2b01      	cmp	r3, #1
 800da12:	d10f      	bne.n	800da34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da1a:	461a      	mov	r2, r3
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	697a      	ldr	r2, [r7, #20]
 800da2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da2e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800da32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da34:	2300      	movs	r3, #0
}
 800da36:	4618      	mov	r0, r3
 800da38:	371c      	adds	r7, #28
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bc80      	pop	{r7}
 800da3e:	4770      	bx	lr
 800da40:	4f54300a 	.word	0x4f54300a

0800da44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800da44:	b480      	push	{r7}
 800da46:	b085      	sub	sp, #20
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800da4c:	2300      	movs	r3, #0
 800da4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	3301      	adds	r3, #1
 800da54:	60fb      	str	r3, [r7, #12]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	4a12      	ldr	r2, [pc, #72]	; (800daa4 <USB_CoreReset+0x60>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d901      	bls.n	800da62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800da5e:	2303      	movs	r3, #3
 800da60:	e01b      	b.n	800da9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	2b00      	cmp	r3, #0
 800da68:	daf2      	bge.n	800da50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800da6a:	2300      	movs	r3, #0
 800da6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	691b      	ldr	r3, [r3, #16]
 800da72:	f043 0201 	orr.w	r2, r3, #1
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	3301      	adds	r3, #1
 800da7e:	60fb      	str	r3, [r7, #12]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	4a08      	ldr	r2, [pc, #32]	; (800daa4 <USB_CoreReset+0x60>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d901      	bls.n	800da8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800da88:	2303      	movs	r3, #3
 800da8a:	e006      	b.n	800da9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	691b      	ldr	r3, [r3, #16]
 800da90:	f003 0301 	and.w	r3, r3, #1
 800da94:	2b01      	cmp	r3, #1
 800da96:	d0f0      	beq.n	800da7a <USB_CoreReset+0x36>

  return HAL_OK;
 800da98:	2300      	movs	r3, #0
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3714      	adds	r7, #20
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bc80      	pop	{r7}
 800daa2:	4770      	bx	lr
 800daa4:	00030d40 	.word	0x00030d40

0800daa8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	460b      	mov	r3, r1
 800dab2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800dab4:	2300      	movs	r3, #0
 800dab6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	7c1b      	ldrb	r3, [r3, #16]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d115      	bne.n	800daec <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dac4:	2202      	movs	r2, #2
 800dac6:	2181      	movs	r1, #129	; 0x81
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f001 ff48 	bl	800f95e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2201      	movs	r2, #1
 800dad2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dad8:	2202      	movs	r2, #2
 800dada:	2101      	movs	r1, #1
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f001 ff3e 	bl	800f95e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2201      	movs	r2, #1
 800dae6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800daea:	e012      	b.n	800db12 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800daec:	2340      	movs	r3, #64	; 0x40
 800daee:	2202      	movs	r2, #2
 800daf0:	2181      	movs	r1, #129	; 0x81
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f001 ff33 	bl	800f95e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2201      	movs	r2, #1
 800dafc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dafe:	2340      	movs	r3, #64	; 0x40
 800db00:	2202      	movs	r2, #2
 800db02:	2101      	movs	r1, #1
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f001 ff2a 	bl	800f95e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2201      	movs	r2, #1
 800db0e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800db12:	2308      	movs	r3, #8
 800db14:	2203      	movs	r2, #3
 800db16:	2182      	movs	r1, #130	; 0x82
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f001 ff20 	bl	800f95e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2201      	movs	r2, #1
 800db22:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800db24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800db28:	f004 f9cc 	bl	8011ec4 <malloc>
 800db2c:	4603      	mov	r3, r0
 800db2e:	461a      	mov	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d102      	bne.n	800db46 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800db40:	2301      	movs	r3, #1
 800db42:	73fb      	strb	r3, [r7, #15]
 800db44:	e026      	b.n	800db94 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db4c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	2200      	movs	r2, #0
 800db5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	2200      	movs	r2, #0
 800db64:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	7c1b      	ldrb	r3, [r3, #16]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d109      	bne.n	800db84 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800db76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db7a:	2101      	movs	r1, #1
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f001 ffde 	bl	800fb3e <USBD_LL_PrepareReceive>
 800db82:	e007      	b.n	800db94 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800db8a:	2340      	movs	r3, #64	; 0x40
 800db8c:	2101      	movs	r1, #1
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f001 ffd5 	bl	800fb3e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800db94:	7bfb      	ldrb	r3, [r7, #15]
}
 800db96:	4618      	mov	r0, r3
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b084      	sub	sp, #16
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
 800dba6:	460b      	mov	r3, r1
 800dba8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800dbae:	2181      	movs	r1, #129	; 0x81
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f001 fefa 	bl	800f9aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800dbbc:	2101      	movs	r1, #1
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f001 fef3 	bl	800f9aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800dbcc:	2182      	movs	r1, #130	; 0x82
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f001 feeb 	bl	800f9aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d00e      	beq.n	800dc02 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f004 f96d 	bl	8011ed4 <free>
    pdev->pClassData = NULL;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800dc02:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b086      	sub	sp, #24
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc1c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800dc22:	2300      	movs	r3, #0
 800dc24:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800dc26:	2300      	movs	r3, #0
 800dc28:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d039      	beq.n	800dcaa <USBD_CDC_Setup+0x9e>
 800dc36:	2b20      	cmp	r3, #32
 800dc38:	d17f      	bne.n	800dd3a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	88db      	ldrh	r3, [r3, #6]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d029      	beq.n	800dc96 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	b25b      	sxtb	r3, r3
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	da11      	bge.n	800dc70 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc52:	689b      	ldr	r3, [r3, #8]
 800dc54:	683a      	ldr	r2, [r7, #0]
 800dc56:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800dc58:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dc5a:	683a      	ldr	r2, [r7, #0]
 800dc5c:	88d2      	ldrh	r2, [r2, #6]
 800dc5e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800dc60:	6939      	ldr	r1, [r7, #16]
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	88db      	ldrh	r3, [r3, #6]
 800dc66:	461a      	mov	r2, r3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f001 fa42 	bl	800f0f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800dc6e:	e06b      	b.n	800dd48 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	785a      	ldrb	r2, [r3, #1]
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	88db      	ldrh	r3, [r3, #6]
 800dc7e:	b2da      	uxtb	r2, r3
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800dc86:	6939      	ldr	r1, [r7, #16]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	88db      	ldrh	r3, [r3, #6]
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f001 fa5d 	bl	800f14e <USBD_CtlPrepareRx>
      break;
 800dc94:	e058      	b.n	800dd48 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	683a      	ldr	r2, [r7, #0]
 800dca0:	7850      	ldrb	r0, [r2, #1]
 800dca2:	2200      	movs	r2, #0
 800dca4:	6839      	ldr	r1, [r7, #0]
 800dca6:	4798      	blx	r3
      break;
 800dca8:	e04e      	b.n	800dd48 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	785b      	ldrb	r3, [r3, #1]
 800dcae:	2b0b      	cmp	r3, #11
 800dcb0:	d02e      	beq.n	800dd10 <USBD_CDC_Setup+0x104>
 800dcb2:	2b0b      	cmp	r3, #11
 800dcb4:	dc38      	bgt.n	800dd28 <USBD_CDC_Setup+0x11c>
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d002      	beq.n	800dcc0 <USBD_CDC_Setup+0xb4>
 800dcba:	2b0a      	cmp	r3, #10
 800dcbc:	d014      	beq.n	800dce8 <USBD_CDC_Setup+0xdc>
 800dcbe:	e033      	b.n	800dd28 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcc6:	2b03      	cmp	r3, #3
 800dcc8:	d107      	bne.n	800dcda <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800dcca:	f107 030c 	add.w	r3, r7, #12
 800dcce:	2202      	movs	r2, #2
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f001 fa0d 	bl	800f0f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dcd8:	e02e      	b.n	800dd38 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800dcda:	6839      	ldr	r1, [r7, #0]
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f001 f99e 	bl	800f01e <USBD_CtlError>
            ret = USBD_FAIL;
 800dce2:	2302      	movs	r3, #2
 800dce4:	75fb      	strb	r3, [r7, #23]
          break;
 800dce6:	e027      	b.n	800dd38 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcee:	2b03      	cmp	r3, #3
 800dcf0:	d107      	bne.n	800dd02 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800dcf2:	f107 030f 	add.w	r3, r7, #15
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f001 f9f9 	bl	800f0f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dd00:	e01a      	b.n	800dd38 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800dd02:	6839      	ldr	r1, [r7, #0]
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f001 f98a 	bl	800f01e <USBD_CtlError>
            ret = USBD_FAIL;
 800dd0a:	2302      	movs	r3, #2
 800dd0c:	75fb      	strb	r3, [r7, #23]
          break;
 800dd0e:	e013      	b.n	800dd38 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd16:	2b03      	cmp	r3, #3
 800dd18:	d00d      	beq.n	800dd36 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800dd1a:	6839      	ldr	r1, [r7, #0]
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f001 f97e 	bl	800f01e <USBD_CtlError>
            ret = USBD_FAIL;
 800dd22:	2302      	movs	r3, #2
 800dd24:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dd26:	e006      	b.n	800dd36 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800dd28:	6839      	ldr	r1, [r7, #0]
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f001 f977 	bl	800f01e <USBD_CtlError>
          ret = USBD_FAIL;
 800dd30:	2302      	movs	r3, #2
 800dd32:	75fb      	strb	r3, [r7, #23]
          break;
 800dd34:	e000      	b.n	800dd38 <USBD_CDC_Setup+0x12c>
          break;
 800dd36:	bf00      	nop
      }
      break;
 800dd38:	e006      	b.n	800dd48 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800dd3a:	6839      	ldr	r1, [r7, #0]
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f001 f96e 	bl	800f01e <USBD_CtlError>
      ret = USBD_FAIL;
 800dd42:	2302      	movs	r3, #2
 800dd44:	75fb      	strb	r3, [r7, #23]
      break;
 800dd46:	bf00      	nop
  }

  return ret;
 800dd48:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3718      	adds	r7, #24
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b084      	sub	sp, #16
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd64:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd6c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d03a      	beq.n	800ddee <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800dd78:	78fa      	ldrb	r2, [r7, #3]
 800dd7a:	6879      	ldr	r1, [r7, #4]
 800dd7c:	4613      	mov	r3, r2
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	4413      	add	r3, r2
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	440b      	add	r3, r1
 800dd86:	331c      	adds	r3, #28
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d029      	beq.n	800dde2 <USBD_CDC_DataIn+0x90>
 800dd8e:	78fa      	ldrb	r2, [r7, #3]
 800dd90:	6879      	ldr	r1, [r7, #4]
 800dd92:	4613      	mov	r3, r2
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	4413      	add	r3, r2
 800dd98:	009b      	lsls	r3, r3, #2
 800dd9a:	440b      	add	r3, r1
 800dd9c:	331c      	adds	r3, #28
 800dd9e:	681a      	ldr	r2, [r3, #0]
 800dda0:	78f9      	ldrb	r1, [r7, #3]
 800dda2:	68b8      	ldr	r0, [r7, #8]
 800dda4:	460b      	mov	r3, r1
 800dda6:	00db      	lsls	r3, r3, #3
 800dda8:	1a5b      	subs	r3, r3, r1
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	4403      	add	r3, r0
 800ddae:	3344      	adds	r3, #68	; 0x44
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	fbb2 f1f3 	udiv	r1, r2, r3
 800ddb6:	fb03 f301 	mul.w	r3, r3, r1
 800ddba:	1ad3      	subs	r3, r2, r3
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d110      	bne.n	800dde2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800ddc0:	78fa      	ldrb	r2, [r7, #3]
 800ddc2:	6879      	ldr	r1, [r7, #4]
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	4413      	add	r3, r2
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	440b      	add	r3, r1
 800ddce:	331c      	adds	r3, #28
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ddd4:	78f9      	ldrb	r1, [r7, #3]
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	2200      	movs	r2, #0
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f001 fe8c 	bl	800faf8 <USBD_LL_Transmit>
 800dde0:	e003      	b.n	800ddea <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2200      	movs	r2, #0
 800dde6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800ddea:	2300      	movs	r3, #0
 800ddec:	e000      	b.n	800ddf0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800ddee:	2302      	movs	r3, #2
  }
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3710      	adds	r7, #16
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	460b      	mov	r3, r1
 800de02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de0a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800de0c:	78fb      	ldrb	r3, [r7, #3]
 800de0e:	4619      	mov	r1, r3
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f001 feb7 	bl	800fb84 <USBD_LL_GetRxDataSize>
 800de16:	4602      	mov	r2, r0
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de24:	2b00      	cmp	r3, #0
 800de26:	d00d      	beq.n	800de44 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800de3c:	4611      	mov	r1, r2
 800de3e:	4798      	blx	r3

    return USBD_OK;
 800de40:	2300      	movs	r3, #0
 800de42:	e000      	b.n	800de46 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800de44:	2302      	movs	r3, #2
  }
}
 800de46:	4618      	mov	r0, r3
 800de48:	3710      	adds	r7, #16
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}

0800de4e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800de4e:	b580      	push	{r7, lr}
 800de50:	b084      	sub	sp, #16
 800de52:	af00      	add	r7, sp, #0
 800de54:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de5c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de64:	2b00      	cmp	r3, #0
 800de66:	d015      	beq.n	800de94 <USBD_CDC_EP0_RxReady+0x46>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800de6e:	2bff      	cmp	r3, #255	; 0xff
 800de70:	d010      	beq.n	800de94 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800de80:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800de82:	68fa      	ldr	r2, [r7, #12]
 800de84:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800de88:	b292      	uxth	r2, r2
 800de8a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	22ff      	movs	r2, #255	; 0xff
 800de90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800de94:	2300      	movs	r3, #0
}
 800de96:	4618      	mov	r0, r3
 800de98:	3710      	adds	r7, #16
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
	...

0800dea0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b083      	sub	sp, #12
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2243      	movs	r2, #67	; 0x43
 800deac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800deae:	4b03      	ldr	r3, [pc, #12]	; (800debc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bc80      	pop	{r7}
 800deb8:	4770      	bx	lr
 800deba:	bf00      	nop
 800debc:	200000f0 	.word	0x200000f0

0800dec0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2243      	movs	r2, #67	; 0x43
 800decc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800dece:	4b03      	ldr	r3, [pc, #12]	; (800dedc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bc80      	pop	{r7}
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	200000ac 	.word	0x200000ac

0800dee0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2243      	movs	r2, #67	; 0x43
 800deec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800deee:	4b03      	ldr	r3, [pc, #12]	; (800defc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800def0:	4618      	mov	r0, r3
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	bc80      	pop	{r7}
 800def8:	4770      	bx	lr
 800defa:	bf00      	nop
 800defc:	20000134 	.word	0x20000134

0800df00 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	220a      	movs	r2, #10
 800df0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800df0e:	4b03      	ldr	r3, [pc, #12]	; (800df1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800df10:	4618      	mov	r0, r3
 800df12:	370c      	adds	r7, #12
 800df14:	46bd      	mov	sp, r7
 800df16:	bc80      	pop	{r7}
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	20000068 	.word	0x20000068

0800df20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800df20:	b480      	push	{r7}
 800df22:	b085      	sub	sp, #20
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800df2a:	2302      	movs	r3, #2
 800df2c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d005      	beq.n	800df40 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	683a      	ldr	r2, [r7, #0]
 800df38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800df3c:	2300      	movs	r3, #0
 800df3e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800df40:	7bfb      	ldrb	r3, [r7, #15]
}
 800df42:	4618      	mov	r0, r3
 800df44:	3714      	adds	r7, #20
 800df46:	46bd      	mov	sp, r7
 800df48:	bc80      	pop	{r7}
 800df4a:	4770      	bx	lr

0800df4c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b087      	sub	sp, #28
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	4613      	mov	r3, r2
 800df58:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df60:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	68ba      	ldr	r2, [r7, #8]
 800df66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800df6a:	88fa      	ldrh	r2, [r7, #6]
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800df72:	2300      	movs	r3, #0
}
 800df74:	4618      	mov	r0, r3
 800df76:	371c      	adds	r7, #28
 800df78:	46bd      	mov	sp, r7
 800df7a:	bc80      	pop	{r7}
 800df7c:	4770      	bx	lr

0800df7e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800df7e:	b480      	push	{r7}
 800df80:	b085      	sub	sp, #20
 800df82:	af00      	add	r7, sp, #0
 800df84:	6078      	str	r0, [r7, #4]
 800df86:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df8e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	683a      	ldr	r2, [r7, #0]
 800df94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800df98:	2300      	movs	r3, #0
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3714      	adds	r7, #20
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bc80      	pop	{r7}
 800dfa2:	4770      	bx	lr

0800dfa4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d01c      	beq.n	800dff8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d115      	bne.n	800dff4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2201      	movs	r2, #1
 800dfcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	2181      	movs	r1, #129	; 0x81
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f001 fd84 	bl	800faf8 <USBD_LL_Transmit>

      return USBD_OK;
 800dff0:	2300      	movs	r3, #0
 800dff2:	e002      	b.n	800dffa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800dff4:	2301      	movs	r3, #1
 800dff6:	e000      	b.n	800dffa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800dff8:	2302      	movs	r3, #2
  }
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b084      	sub	sp, #16
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e010:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d017      	beq.n	800e04c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	7c1b      	ldrb	r3, [r3, #16]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d109      	bne.n	800e038 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e02a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e02e:	2101      	movs	r1, #1
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f001 fd84 	bl	800fb3e <USBD_LL_PrepareReceive>
 800e036:	e007      	b.n	800e048 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e03e:	2340      	movs	r3, #64	; 0x40
 800e040:	2101      	movs	r1, #1
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f001 fd7b 	bl	800fb3e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800e048:	2300      	movs	r3, #0
 800e04a:	e000      	b.n	800e04e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800e04c:	2302      	movs	r3, #2
  }
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3710      	adds	r7, #16
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}

0800e056 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e056:	b580      	push	{r7, lr}
 800e058:	b084      	sub	sp, #16
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	60f8      	str	r0, [r7, #12]
 800e05e:	60b9      	str	r1, [r7, #8]
 800e060:	4613      	mov	r3, r2
 800e062:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d101      	bne.n	800e06e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e06a:	2302      	movs	r3, #2
 800e06c:	e01a      	b.n	800e0a4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e074:	2b00      	cmp	r3, #0
 800e076:	d003      	beq.n	800e080 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2200      	movs	r2, #0
 800e07c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d003      	beq.n	800e08e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	68ba      	ldr	r2, [r7, #8]
 800e08a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2201      	movs	r2, #1
 800e092:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	79fa      	ldrb	r2, [r7, #7]
 800e09a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f001 fbf9 	bl	800f894 <USBD_LL_Init>

  return USBD_OK;
 800e0a2:	2300      	movs	r3, #0
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3710      	adds	r7, #16
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b085      	sub	sp, #20
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d006      	beq.n	800e0ce <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	683a      	ldr	r2, [r7, #0]
 800e0c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	73fb      	strb	r3, [r7, #15]
 800e0cc:	e001      	b.n	800e0d2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800e0ce:	2302      	movs	r3, #2
 800e0d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3714      	adds	r7, #20
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bc80      	pop	{r7}
 800e0dc:	4770      	bx	lr

0800e0de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e0de:	b580      	push	{r7, lr}
 800e0e0:	b082      	sub	sp, #8
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f001 fc1e 	bl	800f928 <USBD_LL_Start>

  return USBD_OK;
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3708      	adds	r7, #8
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}

0800e0f6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e0f6:	b480      	push	{r7}
 800e0f8:	b083      	sub	sp, #12
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e0fe:	2300      	movs	r3, #0
}
 800e100:	4618      	mov	r0, r3
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	bc80      	pop	{r7}
 800e108:	4770      	bx	lr

0800e10a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b084      	sub	sp, #16
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
 800e112:	460b      	mov	r3, r1
 800e114:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e116:	2302      	movs	r3, #2
 800e118:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e120:	2b00      	cmp	r3, #0
 800e122:	d00c      	beq.n	800e13e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	78fa      	ldrb	r2, [r7, #3]
 800e12e:	4611      	mov	r1, r2
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	4798      	blx	r3
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	d101      	bne.n	800e13e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800e13a:	2300      	movs	r3, #0
 800e13c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800e13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e140:	4618      	mov	r0, r3
 800e142:	3710      	adds	r7, #16
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	460b      	mov	r3, r1
 800e152:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	78fa      	ldrb	r2, [r7, #3]
 800e15e:	4611      	mov	r1, r2
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	4798      	blx	r3

  return USBD_OK;
 800e164:	2300      	movs	r3, #0
}
 800e166:	4618      	mov	r0, r3
 800e168:	3708      	adds	r7, #8
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}

0800e16e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e16e:	b580      	push	{r7, lr}
 800e170:	b082      	sub	sp, #8
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
 800e176:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e17e:	6839      	ldr	r1, [r7, #0]
 800e180:	4618      	mov	r0, r3
 800e182:	f000 ff10 	bl	800efa6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2201      	movs	r2, #1
 800e18a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e194:	461a      	mov	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e1a2:	f003 031f 	and.w	r3, r3, #31
 800e1a6:	2b02      	cmp	r3, #2
 800e1a8:	d016      	beq.n	800e1d8 <USBD_LL_SetupStage+0x6a>
 800e1aa:	2b02      	cmp	r3, #2
 800e1ac:	d81c      	bhi.n	800e1e8 <USBD_LL_SetupStage+0x7a>
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d002      	beq.n	800e1b8 <USBD_LL_SetupStage+0x4a>
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d008      	beq.n	800e1c8 <USBD_LL_SetupStage+0x5a>
 800e1b6:	e017      	b.n	800e1e8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e1be:	4619      	mov	r1, r3
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 fa03 	bl	800e5cc <USBD_StdDevReq>
      break;
 800e1c6:	e01a      	b.n	800e1fe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f000 fa65 	bl	800e6a0 <USBD_StdItfReq>
      break;
 800e1d6:	e012      	b.n	800e1fe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e1de:	4619      	mov	r1, r3
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f000 faa5 	bl	800e730 <USBD_StdEPReq>
      break;
 800e1e6:	e00a      	b.n	800e1fe <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e1ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f001 fbf6 	bl	800f9e8 <USBD_LL_StallEP>
      break;
 800e1fc:	bf00      	nop
  }

  return USBD_OK;
 800e1fe:	2300      	movs	r3, #0
}
 800e200:	4618      	mov	r0, r3
 800e202:	3708      	adds	r7, #8
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b086      	sub	sp, #24
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	460b      	mov	r3, r1
 800e212:	607a      	str	r2, [r7, #4]
 800e214:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800e216:	7afb      	ldrb	r3, [r7, #11]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d14b      	bne.n	800e2b4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e222:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e22a:	2b03      	cmp	r3, #3
 800e22c:	d134      	bne.n	800e298 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	68da      	ldr	r2, [r3, #12]
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	691b      	ldr	r3, [r3, #16]
 800e236:	429a      	cmp	r2, r3
 800e238:	d919      	bls.n	800e26e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	68da      	ldr	r2, [r3, #12]
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	691b      	ldr	r3, [r3, #16]
 800e242:	1ad2      	subs	r2, r2, r3
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	68da      	ldr	r2, [r3, #12]
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800e250:	429a      	cmp	r2, r3
 800e252:	d203      	bcs.n	800e25c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800e258:	b29b      	uxth	r3, r3
 800e25a:	e002      	b.n	800e262 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800e260:	b29b      	uxth	r3, r3
 800e262:	461a      	mov	r2, r3
 800e264:	6879      	ldr	r1, [r7, #4]
 800e266:	68f8      	ldr	r0, [r7, #12]
 800e268:	f000 ff8f 	bl	800f18a <USBD_CtlContinueRx>
 800e26c:	e038      	b.n	800e2e0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e274:	691b      	ldr	r3, [r3, #16]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d00a      	beq.n	800e290 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e280:	2b03      	cmp	r3, #3
 800e282:	d105      	bne.n	800e290 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e28a:	691b      	ldr	r3, [r3, #16]
 800e28c:	68f8      	ldr	r0, [r7, #12]
 800e28e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	f000 ff8c 	bl	800f1ae <USBD_CtlSendStatus>
 800e296:	e023      	b.n	800e2e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e29e:	2b05      	cmp	r3, #5
 800e2a0:	d11e      	bne.n	800e2e0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f001 fb9b 	bl	800f9e8 <USBD_LL_StallEP>
 800e2b2:	e015      	b.n	800e2e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2ba:	699b      	ldr	r3, [r3, #24]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00d      	beq.n	800e2dc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e2c6:	2b03      	cmp	r3, #3
 800e2c8:	d108      	bne.n	800e2dc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2d0:	699b      	ldr	r3, [r3, #24]
 800e2d2:	7afa      	ldrb	r2, [r7, #11]
 800e2d4:	4611      	mov	r1, r2
 800e2d6:	68f8      	ldr	r0, [r7, #12]
 800e2d8:	4798      	blx	r3
 800e2da:	e001      	b.n	800e2e0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e2dc:	2302      	movs	r3, #2
 800e2de:	e000      	b.n	800e2e2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800e2e0:	2300      	movs	r3, #0
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3718      	adds	r7, #24
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}

0800e2ea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b086      	sub	sp, #24
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	60f8      	str	r0, [r7, #12]
 800e2f2:	460b      	mov	r3, r1
 800e2f4:	607a      	str	r2, [r7, #4]
 800e2f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800e2f8:	7afb      	ldrb	r3, [r7, #11]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d17f      	bne.n	800e3fe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	3314      	adds	r3, #20
 800e302:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e30a:	2b02      	cmp	r3, #2
 800e30c:	d15c      	bne.n	800e3c8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	68da      	ldr	r2, [r3, #12]
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	691b      	ldr	r3, [r3, #16]
 800e316:	429a      	cmp	r2, r3
 800e318:	d915      	bls.n	800e346 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	68da      	ldr	r2, [r3, #12]
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	691b      	ldr	r3, [r3, #16]
 800e322:	1ad2      	subs	r2, r2, r3
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	461a      	mov	r2, r3
 800e330:	6879      	ldr	r1, [r7, #4]
 800e332:	68f8      	ldr	r0, [r7, #12]
 800e334:	f000 fef9 	bl	800f12a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e338:	2300      	movs	r3, #0
 800e33a:	2200      	movs	r2, #0
 800e33c:	2100      	movs	r1, #0
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f001 fbfd 	bl	800fb3e <USBD_LL_PrepareReceive>
 800e344:	e04e      	b.n	800e3e4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	689b      	ldr	r3, [r3, #8]
 800e34a:	697a      	ldr	r2, [r7, #20]
 800e34c:	6912      	ldr	r2, [r2, #16]
 800e34e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e352:	fb02 f201 	mul.w	r2, r2, r1
 800e356:	1a9b      	subs	r3, r3, r2
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d11c      	bne.n	800e396 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	689a      	ldr	r2, [r3, #8]
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800e364:	429a      	cmp	r2, r3
 800e366:	d316      	bcc.n	800e396 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	689a      	ldr	r2, [r3, #8]
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e372:	429a      	cmp	r2, r3
 800e374:	d20f      	bcs.n	800e396 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e376:	2200      	movs	r2, #0
 800e378:	2100      	movs	r1, #0
 800e37a:	68f8      	ldr	r0, [r7, #12]
 800e37c:	f000 fed5 	bl	800f12a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2200      	movs	r2, #0
 800e384:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e388:	2300      	movs	r3, #0
 800e38a:	2200      	movs	r2, #0
 800e38c:	2100      	movs	r1, #0
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f001 fbd5 	bl	800fb3e <USBD_LL_PrepareReceive>
 800e394:	e026      	b.n	800e3e4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e39c:	68db      	ldr	r3, [r3, #12]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d00a      	beq.n	800e3b8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e3a8:	2b03      	cmp	r3, #3
 800e3aa:	d105      	bne.n	800e3b8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	68f8      	ldr	r0, [r7, #12]
 800e3b6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800e3b8:	2180      	movs	r1, #128	; 0x80
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	f001 fb14 	bl	800f9e8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f000 ff07 	bl	800f1d4 <USBD_CtlReceiveStatus>
 800e3c6:	e00d      	b.n	800e3e4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e3ce:	2b04      	cmp	r3, #4
 800e3d0:	d004      	beq.n	800e3dc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d103      	bne.n	800e3e4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800e3dc:	2180      	movs	r1, #128	; 0x80
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	f001 fb02 	bl	800f9e8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d11d      	bne.n	800e42a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800e3ee:	68f8      	ldr	r0, [r7, #12]
 800e3f0:	f7ff fe81 	bl	800e0f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e3fc:	e015      	b.n	800e42a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e404:	695b      	ldr	r3, [r3, #20]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d00d      	beq.n	800e426 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e410:	2b03      	cmp	r3, #3
 800e412:	d108      	bne.n	800e426 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e41a:	695b      	ldr	r3, [r3, #20]
 800e41c:	7afa      	ldrb	r2, [r7, #11]
 800e41e:	4611      	mov	r1, r2
 800e420:	68f8      	ldr	r0, [r7, #12]
 800e422:	4798      	blx	r3
 800e424:	e001      	b.n	800e42a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e426:	2302      	movs	r3, #2
 800e428:	e000      	b.n	800e42c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800e42a:	2300      	movs	r3, #0
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3718      	adds	r7, #24
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e43c:	2340      	movs	r3, #64	; 0x40
 800e43e:	2200      	movs	r2, #0
 800e440:	2100      	movs	r1, #0
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f001 fa8b 	bl	800f95e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2201      	movs	r2, #1
 800e44c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2240      	movs	r2, #64	; 0x40
 800e454:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e458:	2340      	movs	r3, #64	; 0x40
 800e45a:	2200      	movs	r2, #0
 800e45c:	2180      	movs	r1, #128	; 0x80
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f001 fa7d 	bl	800f95e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2201      	movs	r2, #1
 800e468:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2240      	movs	r2, #64	; 0x40
 800e46e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2201      	movs	r2, #1
 800e474:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2200      	movs	r2, #0
 800e47c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2200      	movs	r2, #0
 800e484:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2200      	movs	r2, #0
 800e48a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e494:	2b00      	cmp	r3, #0
 800e496:	d009      	beq.n	800e4ac <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	6852      	ldr	r2, [r2, #4]
 800e4a4:	b2d2      	uxtb	r2, r2
 800e4a6:	4611      	mov	r1, r2
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	4798      	blx	r3
  }

  return USBD_OK;
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e4b6:	b480      	push	{r7}
 800e4b8:	b083      	sub	sp, #12
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
 800e4be:	460b      	mov	r3, r1
 800e4c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	78fa      	ldrb	r2, [r7, #3]
 800e4c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e4c8:	2300      	movs	r3, #0
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	370c      	adds	r7, #12
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bc80      	pop	{r7}
 800e4d2:	4770      	bx	lr

0800e4d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2204      	movs	r2, #4
 800e4ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e4f0:	2300      	movs	r3, #0
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	370c      	adds	r7, #12
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bc80      	pop	{r7}
 800e4fa:	4770      	bx	lr

0800e4fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e50a:	2b04      	cmp	r3, #4
 800e50c:	d105      	bne.n	800e51a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	bc80      	pop	{r7}
 800e524:	4770      	bx	lr

0800e526 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e526:	b580      	push	{r7, lr}
 800e528:	b082      	sub	sp, #8
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e534:	2b03      	cmp	r3, #3
 800e536:	d10b      	bne.n	800e550 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e53e:	69db      	ldr	r3, [r3, #28]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d005      	beq.n	800e550 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e54a:	69db      	ldr	r3, [r3, #28]
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e550:	2300      	movs	r3, #0
}
 800e552:	4618      	mov	r0, r3
 800e554:	3708      	adds	r7, #8
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}

0800e55a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e55a:	b480      	push	{r7}
 800e55c:	b083      	sub	sp, #12
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
 800e562:	460b      	mov	r3, r1
 800e564:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e566:	2300      	movs	r3, #0
}
 800e568:	4618      	mov	r0, r3
 800e56a:	370c      	adds	r7, #12
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bc80      	pop	{r7}
 800e570:	4770      	bx	lr

0800e572 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e572:	b480      	push	{r7}
 800e574:	b083      	sub	sp, #12
 800e576:	af00      	add	r7, sp, #0
 800e578:	6078      	str	r0, [r7, #4]
 800e57a:	460b      	mov	r3, r1
 800e57c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e57e:	2300      	movs	r3, #0
}
 800e580:	4618      	mov	r0, r3
 800e582:	370c      	adds	r7, #12
 800e584:	46bd      	mov	sp, r7
 800e586:	bc80      	pop	{r7}
 800e588:	4770      	bx	lr

0800e58a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e58a:	b480      	push	{r7}
 800e58c:	b083      	sub	sp, #12
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e592:	2300      	movs	r3, #0
}
 800e594:	4618      	mov	r0, r3
 800e596:	370c      	adds	r7, #12
 800e598:	46bd      	mov	sp, r7
 800e59a:	bc80      	pop	{r7}
 800e59c:	4770      	bx	lr

0800e59e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b082      	sub	sp, #8
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5b4:	685b      	ldr	r3, [r3, #4]
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	6852      	ldr	r2, [r2, #4]
 800e5ba:	b2d2      	uxtb	r2, r2
 800e5bc:	4611      	mov	r1, r2
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	4798      	blx	r3

  return USBD_OK;
 800e5c2:	2300      	movs	r3, #0
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e5e2:	2b40      	cmp	r3, #64	; 0x40
 800e5e4:	d005      	beq.n	800e5f2 <USBD_StdDevReq+0x26>
 800e5e6:	2b40      	cmp	r3, #64	; 0x40
 800e5e8:	d84f      	bhi.n	800e68a <USBD_StdDevReq+0xbe>
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d009      	beq.n	800e602 <USBD_StdDevReq+0x36>
 800e5ee:	2b20      	cmp	r3, #32
 800e5f0:	d14b      	bne.n	800e68a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5f8:	689b      	ldr	r3, [r3, #8]
 800e5fa:	6839      	ldr	r1, [r7, #0]
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	4798      	blx	r3
      break;
 800e600:	e048      	b.n	800e694 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	785b      	ldrb	r3, [r3, #1]
 800e606:	2b09      	cmp	r3, #9
 800e608:	d839      	bhi.n	800e67e <USBD_StdDevReq+0xb2>
 800e60a:	a201      	add	r2, pc, #4	; (adr r2, 800e610 <USBD_StdDevReq+0x44>)
 800e60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e610:	0800e661 	.word	0x0800e661
 800e614:	0800e675 	.word	0x0800e675
 800e618:	0800e67f 	.word	0x0800e67f
 800e61c:	0800e66b 	.word	0x0800e66b
 800e620:	0800e67f 	.word	0x0800e67f
 800e624:	0800e643 	.word	0x0800e643
 800e628:	0800e639 	.word	0x0800e639
 800e62c:	0800e67f 	.word	0x0800e67f
 800e630:	0800e657 	.word	0x0800e657
 800e634:	0800e64d 	.word	0x0800e64d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e638:	6839      	ldr	r1, [r7, #0]
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 f9dc 	bl	800e9f8 <USBD_GetDescriptor>
          break;
 800e640:	e022      	b.n	800e688 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e642:	6839      	ldr	r1, [r7, #0]
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f000 fb3f 	bl	800ecc8 <USBD_SetAddress>
          break;
 800e64a:	e01d      	b.n	800e688 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800e64c:	6839      	ldr	r1, [r7, #0]
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f000 fb7e 	bl	800ed50 <USBD_SetConfig>
          break;
 800e654:	e018      	b.n	800e688 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e656:	6839      	ldr	r1, [r7, #0]
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f000 fc07 	bl	800ee6c <USBD_GetConfig>
          break;
 800e65e:	e013      	b.n	800e688 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e660:	6839      	ldr	r1, [r7, #0]
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f000 fc37 	bl	800eed6 <USBD_GetStatus>
          break;
 800e668:	e00e      	b.n	800e688 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e66a:	6839      	ldr	r1, [r7, #0]
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f000 fc65 	bl	800ef3c <USBD_SetFeature>
          break;
 800e672:	e009      	b.n	800e688 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e674:	6839      	ldr	r1, [r7, #0]
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f000 fc74 	bl	800ef64 <USBD_ClrFeature>
          break;
 800e67c:	e004      	b.n	800e688 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800e67e:	6839      	ldr	r1, [r7, #0]
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f000 fccc 	bl	800f01e <USBD_CtlError>
          break;
 800e686:	bf00      	nop
      }
      break;
 800e688:	e004      	b.n	800e694 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800e68a:	6839      	ldr	r1, [r7, #0]
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 fcc6 	bl	800f01e <USBD_CtlError>
      break;
 800e692:	bf00      	nop
  }

  return ret;
 800e694:	7bfb      	ldrb	r3, [r7, #15]
}
 800e696:	4618      	mov	r0, r3
 800e698:	3710      	adds	r7, #16
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop

0800e6a0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b084      	sub	sp, #16
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e6b6:	2b40      	cmp	r3, #64	; 0x40
 800e6b8:	d005      	beq.n	800e6c6 <USBD_StdItfReq+0x26>
 800e6ba:	2b40      	cmp	r3, #64	; 0x40
 800e6bc:	d82e      	bhi.n	800e71c <USBD_StdItfReq+0x7c>
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d001      	beq.n	800e6c6 <USBD_StdItfReq+0x26>
 800e6c2:	2b20      	cmp	r3, #32
 800e6c4:	d12a      	bne.n	800e71c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6cc:	3b01      	subs	r3, #1
 800e6ce:	2b02      	cmp	r3, #2
 800e6d0:	d81d      	bhi.n	800e70e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	889b      	ldrh	r3, [r3, #4]
 800e6d6:	b2db      	uxtb	r3, r3
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	d813      	bhi.n	800e704 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6e2:	689b      	ldr	r3, [r3, #8]
 800e6e4:	6839      	ldr	r1, [r7, #0]
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	4798      	blx	r3
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	88db      	ldrh	r3, [r3, #6]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d110      	bne.n	800e718 <USBD_StdItfReq+0x78>
 800e6f6:	7bfb      	ldrb	r3, [r7, #15]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d10d      	bne.n	800e718 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f000 fd56 	bl	800f1ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e702:	e009      	b.n	800e718 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800e704:	6839      	ldr	r1, [r7, #0]
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 fc89 	bl	800f01e <USBD_CtlError>
          break;
 800e70c:	e004      	b.n	800e718 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800e70e:	6839      	ldr	r1, [r7, #0]
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f000 fc84 	bl	800f01e <USBD_CtlError>
          break;
 800e716:	e000      	b.n	800e71a <USBD_StdItfReq+0x7a>
          break;
 800e718:	bf00      	nop
      }
      break;
 800e71a:	e004      	b.n	800e726 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800e71c:	6839      	ldr	r1, [r7, #0]
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 fc7d 	bl	800f01e <USBD_CtlError>
      break;
 800e724:	bf00      	nop
  }

  return USBD_OK;
 800e726:	2300      	movs	r3, #0
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3710      	adds	r7, #16
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e73a:	2300      	movs	r3, #0
 800e73c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	889b      	ldrh	r3, [r3, #4]
 800e742:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e74c:	2b40      	cmp	r3, #64	; 0x40
 800e74e:	d007      	beq.n	800e760 <USBD_StdEPReq+0x30>
 800e750:	2b40      	cmp	r3, #64	; 0x40
 800e752:	f200 8146 	bhi.w	800e9e2 <USBD_StdEPReq+0x2b2>
 800e756:	2b00      	cmp	r3, #0
 800e758:	d00a      	beq.n	800e770 <USBD_StdEPReq+0x40>
 800e75a:	2b20      	cmp	r3, #32
 800e75c:	f040 8141 	bne.w	800e9e2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e766:	689b      	ldr	r3, [r3, #8]
 800e768:	6839      	ldr	r1, [r7, #0]
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	4798      	blx	r3
      break;
 800e76e:	e13d      	b.n	800e9ec <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e778:	2b20      	cmp	r3, #32
 800e77a:	d10a      	bne.n	800e792 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e782:	689b      	ldr	r3, [r3, #8]
 800e784:	6839      	ldr	r1, [r7, #0]
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	4798      	blx	r3
 800e78a:	4603      	mov	r3, r0
 800e78c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800e78e:	7bfb      	ldrb	r3, [r7, #15]
 800e790:	e12d      	b.n	800e9ee <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	785b      	ldrb	r3, [r3, #1]
 800e796:	2b03      	cmp	r3, #3
 800e798:	d007      	beq.n	800e7aa <USBD_StdEPReq+0x7a>
 800e79a:	2b03      	cmp	r3, #3
 800e79c:	f300 811b 	bgt.w	800e9d6 <USBD_StdEPReq+0x2a6>
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d072      	beq.n	800e88a <USBD_StdEPReq+0x15a>
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d03a      	beq.n	800e81e <USBD_StdEPReq+0xee>
 800e7a8:	e115      	b.n	800e9d6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7b0:	2b02      	cmp	r3, #2
 800e7b2:	d002      	beq.n	800e7ba <USBD_StdEPReq+0x8a>
 800e7b4:	2b03      	cmp	r3, #3
 800e7b6:	d015      	beq.n	800e7e4 <USBD_StdEPReq+0xb4>
 800e7b8:	e02b      	b.n	800e812 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e7ba:	7bbb      	ldrb	r3, [r7, #14]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d00c      	beq.n	800e7da <USBD_StdEPReq+0xaa>
 800e7c0:	7bbb      	ldrb	r3, [r7, #14]
 800e7c2:	2b80      	cmp	r3, #128	; 0x80
 800e7c4:	d009      	beq.n	800e7da <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800e7c6:	7bbb      	ldrb	r3, [r7, #14]
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f001 f90c 	bl	800f9e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800e7d0:	2180      	movs	r1, #128	; 0x80
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f001 f908 	bl	800f9e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e7d8:	e020      	b.n	800e81c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800e7da:	6839      	ldr	r1, [r7, #0]
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f000 fc1e 	bl	800f01e <USBD_CtlError>
              break;
 800e7e2:	e01b      	b.n	800e81c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	885b      	ldrh	r3, [r3, #2]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d10e      	bne.n	800e80a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800e7ec:	7bbb      	ldrb	r3, [r7, #14]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d00b      	beq.n	800e80a <USBD_StdEPReq+0xda>
 800e7f2:	7bbb      	ldrb	r3, [r7, #14]
 800e7f4:	2b80      	cmp	r3, #128	; 0x80
 800e7f6:	d008      	beq.n	800e80a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	88db      	ldrh	r3, [r3, #6]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d104      	bne.n	800e80a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800e800:	7bbb      	ldrb	r3, [r7, #14]
 800e802:	4619      	mov	r1, r3
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f001 f8ef 	bl	800f9e8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 fccf 	bl	800f1ae <USBD_CtlSendStatus>

              break;
 800e810:	e004      	b.n	800e81c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800e812:	6839      	ldr	r1, [r7, #0]
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 fc02 	bl	800f01e <USBD_CtlError>
              break;
 800e81a:	bf00      	nop
          }
          break;
 800e81c:	e0e0      	b.n	800e9e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e824:	2b02      	cmp	r3, #2
 800e826:	d002      	beq.n	800e82e <USBD_StdEPReq+0xfe>
 800e828:	2b03      	cmp	r3, #3
 800e82a:	d015      	beq.n	800e858 <USBD_StdEPReq+0x128>
 800e82c:	e026      	b.n	800e87c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e82e:	7bbb      	ldrb	r3, [r7, #14]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00c      	beq.n	800e84e <USBD_StdEPReq+0x11e>
 800e834:	7bbb      	ldrb	r3, [r7, #14]
 800e836:	2b80      	cmp	r3, #128	; 0x80
 800e838:	d009      	beq.n	800e84e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800e83a:	7bbb      	ldrb	r3, [r7, #14]
 800e83c:	4619      	mov	r1, r3
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f001 f8d2 	bl	800f9e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800e844:	2180      	movs	r1, #128	; 0x80
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f001 f8ce 	bl	800f9e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e84c:	e01c      	b.n	800e888 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800e84e:	6839      	ldr	r1, [r7, #0]
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f000 fbe4 	bl	800f01e <USBD_CtlError>
              break;
 800e856:	e017      	b.n	800e888 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	885b      	ldrh	r3, [r3, #2]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d112      	bne.n	800e886 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e860:	7bbb      	ldrb	r3, [r7, #14]
 800e862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e866:	2b00      	cmp	r3, #0
 800e868:	d004      	beq.n	800e874 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800e86a:	7bbb      	ldrb	r3, [r7, #14]
 800e86c:	4619      	mov	r1, r3
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f001 f8d9 	bl	800fa26 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f000 fc9a 	bl	800f1ae <USBD_CtlSendStatus>
              }
              break;
 800e87a:	e004      	b.n	800e886 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800e87c:	6839      	ldr	r1, [r7, #0]
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 fbcd 	bl	800f01e <USBD_CtlError>
              break;
 800e884:	e000      	b.n	800e888 <USBD_StdEPReq+0x158>
              break;
 800e886:	bf00      	nop
          }
          break;
 800e888:	e0aa      	b.n	800e9e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e890:	2b02      	cmp	r3, #2
 800e892:	d002      	beq.n	800e89a <USBD_StdEPReq+0x16a>
 800e894:	2b03      	cmp	r3, #3
 800e896:	d032      	beq.n	800e8fe <USBD_StdEPReq+0x1ce>
 800e898:	e097      	b.n	800e9ca <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e89a:	7bbb      	ldrb	r3, [r7, #14]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d007      	beq.n	800e8b0 <USBD_StdEPReq+0x180>
 800e8a0:	7bbb      	ldrb	r3, [r7, #14]
 800e8a2:	2b80      	cmp	r3, #128	; 0x80
 800e8a4:	d004      	beq.n	800e8b0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800e8a6:	6839      	ldr	r1, [r7, #0]
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f000 fbb8 	bl	800f01e <USBD_CtlError>
                break;
 800e8ae:	e091      	b.n	800e9d4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	da0b      	bge.n	800e8d0 <USBD_StdEPReq+0x1a0>
 800e8b8:	7bbb      	ldrb	r3, [r7, #14]
 800e8ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8be:	4613      	mov	r3, r2
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	4413      	add	r3, r2
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	3310      	adds	r3, #16
 800e8c8:	687a      	ldr	r2, [r7, #4]
 800e8ca:	4413      	add	r3, r2
 800e8cc:	3304      	adds	r3, #4
 800e8ce:	e00b      	b.n	800e8e8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e8d0:	7bbb      	ldrb	r3, [r7, #14]
 800e8d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	4413      	add	r3, r2
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e8e2:	687a      	ldr	r2, [r7, #4]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	3304      	adds	r3, #4
 800e8e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	2202      	movs	r2, #2
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f000 fbfb 	bl	800f0f2 <USBD_CtlSendData>
              break;
 800e8fc:	e06a      	b.n	800e9d4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e8fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e902:	2b00      	cmp	r3, #0
 800e904:	da11      	bge.n	800e92a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e906:	7bbb      	ldrb	r3, [r7, #14]
 800e908:	f003 020f 	and.w	r2, r3, #15
 800e90c:	6879      	ldr	r1, [r7, #4]
 800e90e:	4613      	mov	r3, r2
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	4413      	add	r3, r2
 800e914:	009b      	lsls	r3, r3, #2
 800e916:	440b      	add	r3, r1
 800e918:	3318      	adds	r3, #24
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d117      	bne.n	800e950 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800e920:	6839      	ldr	r1, [r7, #0]
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f000 fb7b 	bl	800f01e <USBD_CtlError>
                  break;
 800e928:	e054      	b.n	800e9d4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e92a:	7bbb      	ldrb	r3, [r7, #14]
 800e92c:	f003 020f 	and.w	r2, r3, #15
 800e930:	6879      	ldr	r1, [r7, #4]
 800e932:	4613      	mov	r3, r2
 800e934:	009b      	lsls	r3, r3, #2
 800e936:	4413      	add	r3, r2
 800e938:	009b      	lsls	r3, r3, #2
 800e93a:	440b      	add	r3, r1
 800e93c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d104      	bne.n	800e950 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800e946:	6839      	ldr	r1, [r7, #0]
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 fb68 	bl	800f01e <USBD_CtlError>
                  break;
 800e94e:	e041      	b.n	800e9d4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e954:	2b00      	cmp	r3, #0
 800e956:	da0b      	bge.n	800e970 <USBD_StdEPReq+0x240>
 800e958:	7bbb      	ldrb	r3, [r7, #14]
 800e95a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e95e:	4613      	mov	r3, r2
 800e960:	009b      	lsls	r3, r3, #2
 800e962:	4413      	add	r3, r2
 800e964:	009b      	lsls	r3, r3, #2
 800e966:	3310      	adds	r3, #16
 800e968:	687a      	ldr	r2, [r7, #4]
 800e96a:	4413      	add	r3, r2
 800e96c:	3304      	adds	r3, #4
 800e96e:	e00b      	b.n	800e988 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e970:	7bbb      	ldrb	r3, [r7, #14]
 800e972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e976:	4613      	mov	r3, r2
 800e978:	009b      	lsls	r3, r3, #2
 800e97a:	4413      	add	r3, r2
 800e97c:	009b      	lsls	r3, r3, #2
 800e97e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e982:	687a      	ldr	r2, [r7, #4]
 800e984:	4413      	add	r3, r2
 800e986:	3304      	adds	r3, #4
 800e988:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e98a:	7bbb      	ldrb	r3, [r7, #14]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d002      	beq.n	800e996 <USBD_StdEPReq+0x266>
 800e990:	7bbb      	ldrb	r3, [r7, #14]
 800e992:	2b80      	cmp	r3, #128	; 0x80
 800e994:	d103      	bne.n	800e99e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	2200      	movs	r2, #0
 800e99a:	601a      	str	r2, [r3, #0]
 800e99c:	e00e      	b.n	800e9bc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800e99e:	7bbb      	ldrb	r3, [r7, #14]
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f001 f85e 	bl	800fa64 <USBD_LL_IsStallEP>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d003      	beq.n	800e9b6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	2201      	movs	r2, #1
 800e9b2:	601a      	str	r2, [r3, #0]
 800e9b4:	e002      	b.n	800e9bc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	2202      	movs	r2, #2
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f000 fb95 	bl	800f0f2 <USBD_CtlSendData>
              break;
 800e9c8:	e004      	b.n	800e9d4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800e9ca:	6839      	ldr	r1, [r7, #0]
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f000 fb26 	bl	800f01e <USBD_CtlError>
              break;
 800e9d2:	bf00      	nop
          }
          break;
 800e9d4:	e004      	b.n	800e9e0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800e9d6:	6839      	ldr	r1, [r7, #0]
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f000 fb20 	bl	800f01e <USBD_CtlError>
          break;
 800e9de:	bf00      	nop
      }
      break;
 800e9e0:	e004      	b.n	800e9ec <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800e9e2:	6839      	ldr	r1, [r7, #0]
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f000 fb1a 	bl	800f01e <USBD_CtlError>
      break;
 800e9ea:	bf00      	nop
  }

  return ret;
 800e9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
	...

0800e9f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ea02:	2300      	movs	r3, #0
 800ea04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ea06:	2300      	movs	r3, #0
 800ea08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	885b      	ldrh	r3, [r3, #2]
 800ea12:	0a1b      	lsrs	r3, r3, #8
 800ea14:	b29b      	uxth	r3, r3
 800ea16:	3b01      	subs	r3, #1
 800ea18:	2b06      	cmp	r3, #6
 800ea1a:	f200 8128 	bhi.w	800ec6e <USBD_GetDescriptor+0x276>
 800ea1e:	a201      	add	r2, pc, #4	; (adr r2, 800ea24 <USBD_GetDescriptor+0x2c>)
 800ea20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea24:	0800ea41 	.word	0x0800ea41
 800ea28:	0800ea59 	.word	0x0800ea59
 800ea2c:	0800ea99 	.word	0x0800ea99
 800ea30:	0800ec6f 	.word	0x0800ec6f
 800ea34:	0800ec6f 	.word	0x0800ec6f
 800ea38:	0800ec0f 	.word	0x0800ec0f
 800ea3c:	0800ec3b 	.word	0x0800ec3b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	687a      	ldr	r2, [r7, #4]
 800ea4a:	7c12      	ldrb	r2, [r2, #16]
 800ea4c:	f107 0108 	add.w	r1, r7, #8
 800ea50:	4610      	mov	r0, r2
 800ea52:	4798      	blx	r3
 800ea54:	60f8      	str	r0, [r7, #12]
      break;
 800ea56:	e112      	b.n	800ec7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	7c1b      	ldrb	r3, [r3, #16]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d10d      	bne.n	800ea7c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea68:	f107 0208 	add.w	r2, r7, #8
 800ea6c:	4610      	mov	r0, r2
 800ea6e:	4798      	blx	r3
 800ea70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	3301      	adds	r3, #1
 800ea76:	2202      	movs	r2, #2
 800ea78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ea7a:	e100      	b.n	800ec7e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea84:	f107 0208 	add.w	r2, r7, #8
 800ea88:	4610      	mov	r0, r2
 800ea8a:	4798      	blx	r3
 800ea8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	3301      	adds	r3, #1
 800ea92:	2202      	movs	r2, #2
 800ea94:	701a      	strb	r2, [r3, #0]
      break;
 800ea96:	e0f2      	b.n	800ec7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	885b      	ldrh	r3, [r3, #2]
 800ea9c:	b2db      	uxtb	r3, r3
 800ea9e:	2b05      	cmp	r3, #5
 800eaa0:	f200 80ac 	bhi.w	800ebfc <USBD_GetDescriptor+0x204>
 800eaa4:	a201      	add	r2, pc, #4	; (adr r2, 800eaac <USBD_GetDescriptor+0xb4>)
 800eaa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaaa:	bf00      	nop
 800eaac:	0800eac5 	.word	0x0800eac5
 800eab0:	0800eaf9 	.word	0x0800eaf9
 800eab4:	0800eb2d 	.word	0x0800eb2d
 800eab8:	0800eb61 	.word	0x0800eb61
 800eabc:	0800eb95 	.word	0x0800eb95
 800eac0:	0800ebc9 	.word	0x0800ebc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00b      	beq.n	800eae8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	7c12      	ldrb	r2, [r2, #16]
 800eadc:	f107 0108 	add.w	r1, r7, #8
 800eae0:	4610      	mov	r0, r2
 800eae2:	4798      	blx	r3
 800eae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eae6:	e091      	b.n	800ec0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eae8:	6839      	ldr	r1, [r7, #0]
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 fa97 	bl	800f01e <USBD_CtlError>
            err++;
 800eaf0:	7afb      	ldrb	r3, [r7, #11]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	72fb      	strb	r3, [r7, #11]
          break;
 800eaf6:	e089      	b.n	800ec0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800eafe:	689b      	ldr	r3, [r3, #8]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d00b      	beq.n	800eb1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	687a      	ldr	r2, [r7, #4]
 800eb0e:	7c12      	ldrb	r2, [r2, #16]
 800eb10:	f107 0108 	add.w	r1, r7, #8
 800eb14:	4610      	mov	r0, r2
 800eb16:	4798      	blx	r3
 800eb18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb1a:	e077      	b.n	800ec0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eb1c:	6839      	ldr	r1, [r7, #0]
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 fa7d 	bl	800f01e <USBD_CtlError>
            err++;
 800eb24:	7afb      	ldrb	r3, [r7, #11]
 800eb26:	3301      	adds	r3, #1
 800eb28:	72fb      	strb	r3, [r7, #11]
          break;
 800eb2a:	e06f      	b.n	800ec0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800eb32:	68db      	ldr	r3, [r3, #12]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00b      	beq.n	800eb50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	7c12      	ldrb	r2, [r2, #16]
 800eb44:	f107 0108 	add.w	r1, r7, #8
 800eb48:	4610      	mov	r0, r2
 800eb4a:	4798      	blx	r3
 800eb4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb4e:	e05d      	b.n	800ec0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eb50:	6839      	ldr	r1, [r7, #0]
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 fa63 	bl	800f01e <USBD_CtlError>
            err++;
 800eb58:	7afb      	ldrb	r3, [r7, #11]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	72fb      	strb	r3, [r7, #11]
          break;
 800eb5e:	e055      	b.n	800ec0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00b      	beq.n	800eb84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800eb72:	691b      	ldr	r3, [r3, #16]
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	7c12      	ldrb	r2, [r2, #16]
 800eb78:	f107 0108 	add.w	r1, r7, #8
 800eb7c:	4610      	mov	r0, r2
 800eb7e:	4798      	blx	r3
 800eb80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb82:	e043      	b.n	800ec0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eb84:	6839      	ldr	r1, [r7, #0]
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 fa49 	bl	800f01e <USBD_CtlError>
            err++;
 800eb8c:	7afb      	ldrb	r3, [r7, #11]
 800eb8e:	3301      	adds	r3, #1
 800eb90:	72fb      	strb	r3, [r7, #11]
          break;
 800eb92:	e03b      	b.n	800ec0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800eb9a:	695b      	ldr	r3, [r3, #20]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d00b      	beq.n	800ebb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800eba6:	695b      	ldr	r3, [r3, #20]
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	7c12      	ldrb	r2, [r2, #16]
 800ebac:	f107 0108 	add.w	r1, r7, #8
 800ebb0:	4610      	mov	r0, r2
 800ebb2:	4798      	blx	r3
 800ebb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ebb6:	e029      	b.n	800ec0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ebb8:	6839      	ldr	r1, [r7, #0]
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f000 fa2f 	bl	800f01e <USBD_CtlError>
            err++;
 800ebc0:	7afb      	ldrb	r3, [r7, #11]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	72fb      	strb	r3, [r7, #11]
          break;
 800ebc6:	e021      	b.n	800ec0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ebce:	699b      	ldr	r3, [r3, #24]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d00b      	beq.n	800ebec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ebda:	699b      	ldr	r3, [r3, #24]
 800ebdc:	687a      	ldr	r2, [r7, #4]
 800ebde:	7c12      	ldrb	r2, [r2, #16]
 800ebe0:	f107 0108 	add.w	r1, r7, #8
 800ebe4:	4610      	mov	r0, r2
 800ebe6:	4798      	blx	r3
 800ebe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ebea:	e00f      	b.n	800ec0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ebec:	6839      	ldr	r1, [r7, #0]
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 fa15 	bl	800f01e <USBD_CtlError>
            err++;
 800ebf4:	7afb      	ldrb	r3, [r7, #11]
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	72fb      	strb	r3, [r7, #11]
          break;
 800ebfa:	e007      	b.n	800ec0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ebfc:	6839      	ldr	r1, [r7, #0]
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 fa0d 	bl	800f01e <USBD_CtlError>
          err++;
 800ec04:	7afb      	ldrb	r3, [r7, #11]
 800ec06:	3301      	adds	r3, #1
 800ec08:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ec0a:	e038      	b.n	800ec7e <USBD_GetDescriptor+0x286>
 800ec0c:	e037      	b.n	800ec7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	7c1b      	ldrb	r3, [r3, #16]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d109      	bne.n	800ec2a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec1e:	f107 0208 	add.w	r2, r7, #8
 800ec22:	4610      	mov	r0, r2
 800ec24:	4798      	blx	r3
 800ec26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec28:	e029      	b.n	800ec7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ec2a:	6839      	ldr	r1, [r7, #0]
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 f9f6 	bl	800f01e <USBD_CtlError>
        err++;
 800ec32:	7afb      	ldrb	r3, [r7, #11]
 800ec34:	3301      	adds	r3, #1
 800ec36:	72fb      	strb	r3, [r7, #11]
      break;
 800ec38:	e021      	b.n	800ec7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	7c1b      	ldrb	r3, [r3, #16]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d10d      	bne.n	800ec5e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec4a:	f107 0208 	add.w	r2, r7, #8
 800ec4e:	4610      	mov	r0, r2
 800ec50:	4798      	blx	r3
 800ec52:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	3301      	adds	r3, #1
 800ec58:	2207      	movs	r2, #7
 800ec5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec5c:	e00f      	b.n	800ec7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ec5e:	6839      	ldr	r1, [r7, #0]
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f000 f9dc 	bl	800f01e <USBD_CtlError>
        err++;
 800ec66:	7afb      	ldrb	r3, [r7, #11]
 800ec68:	3301      	adds	r3, #1
 800ec6a:	72fb      	strb	r3, [r7, #11]
      break;
 800ec6c:	e007      	b.n	800ec7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ec6e:	6839      	ldr	r1, [r7, #0]
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f000 f9d4 	bl	800f01e <USBD_CtlError>
      err++;
 800ec76:	7afb      	ldrb	r3, [r7, #11]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	72fb      	strb	r3, [r7, #11]
      break;
 800ec7c:	bf00      	nop
  }

  if (err != 0U)
 800ec7e:	7afb      	ldrb	r3, [r7, #11]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d11c      	bne.n	800ecbe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ec84:	893b      	ldrh	r3, [r7, #8]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d011      	beq.n	800ecae <USBD_GetDescriptor+0x2b6>
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	88db      	ldrh	r3, [r3, #6]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d00d      	beq.n	800ecae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	88da      	ldrh	r2, [r3, #6]
 800ec96:	893b      	ldrh	r3, [r7, #8]
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	bf28      	it	cs
 800ec9c:	4613      	movcs	r3, r2
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800eca2:	893b      	ldrh	r3, [r7, #8]
 800eca4:	461a      	mov	r2, r3
 800eca6:	68f9      	ldr	r1, [r7, #12]
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f000 fa22 	bl	800f0f2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	88db      	ldrh	r3, [r3, #6]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d104      	bne.n	800ecc0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 fa79 	bl	800f1ae <USBD_CtlSendStatus>
 800ecbc:	e000      	b.n	800ecc0 <USBD_GetDescriptor+0x2c8>
    return;
 800ecbe:	bf00      	nop
    }
  }
}
 800ecc0:	3710      	adds	r7, #16
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	bf00      	nop

0800ecc8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	889b      	ldrh	r3, [r3, #4]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d130      	bne.n	800ed3c <USBD_SetAddress+0x74>
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	88db      	ldrh	r3, [r3, #6]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d12c      	bne.n	800ed3c <USBD_SetAddress+0x74>
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	885b      	ldrh	r3, [r3, #2]
 800ece6:	2b7f      	cmp	r3, #127	; 0x7f
 800ece8:	d828      	bhi.n	800ed3c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	885b      	ldrh	r3, [r3, #2]
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecf4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecfc:	2b03      	cmp	r3, #3
 800ecfe:	d104      	bne.n	800ed0a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ed00:	6839      	ldr	r1, [r7, #0]
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 f98b 	bl	800f01e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed08:	e01d      	b.n	800ed46 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	7bfa      	ldrb	r2, [r7, #15]
 800ed0e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ed12:	7bfb      	ldrb	r3, [r7, #15]
 800ed14:	4619      	mov	r1, r3
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 fecf 	bl	800faba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f000 fa46 	bl	800f1ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ed22:	7bfb      	ldrb	r3, [r7, #15]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d004      	beq.n	800ed32 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2202      	movs	r2, #2
 800ed2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed30:	e009      	b.n	800ed46 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2201      	movs	r2, #1
 800ed36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed3a:	e004      	b.n	800ed46 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ed3c:	6839      	ldr	r1, [r7, #0]
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f000 f96d 	bl	800f01e <USBD_CtlError>
  }
}
 800ed44:	bf00      	nop
 800ed46:	bf00      	nop
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
	...

0800ed50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	885b      	ldrh	r3, [r3, #2]
 800ed5e:	b2da      	uxtb	r2, r3
 800ed60:	4b41      	ldr	r3, [pc, #260]	; (800ee68 <USBD_SetConfig+0x118>)
 800ed62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ed64:	4b40      	ldr	r3, [pc, #256]	; (800ee68 <USBD_SetConfig+0x118>)
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	d904      	bls.n	800ed76 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ed6c:	6839      	ldr	r1, [r7, #0]
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f000 f955 	bl	800f01e <USBD_CtlError>
 800ed74:	e075      	b.n	800ee62 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed7c:	2b02      	cmp	r3, #2
 800ed7e:	d002      	beq.n	800ed86 <USBD_SetConfig+0x36>
 800ed80:	2b03      	cmp	r3, #3
 800ed82:	d023      	beq.n	800edcc <USBD_SetConfig+0x7c>
 800ed84:	e062      	b.n	800ee4c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ed86:	4b38      	ldr	r3, [pc, #224]	; (800ee68 <USBD_SetConfig+0x118>)
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d01a      	beq.n	800edc4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ed8e:	4b36      	ldr	r3, [pc, #216]	; (800ee68 <USBD_SetConfig+0x118>)
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	461a      	mov	r2, r3
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2203      	movs	r2, #3
 800ed9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800eda0:	4b31      	ldr	r3, [pc, #196]	; (800ee68 <USBD_SetConfig+0x118>)
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	4619      	mov	r1, r3
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f7ff f9af 	bl	800e10a <USBD_SetClassConfig>
 800edac:	4603      	mov	r3, r0
 800edae:	2b02      	cmp	r3, #2
 800edb0:	d104      	bne.n	800edbc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800edb2:	6839      	ldr	r1, [r7, #0]
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 f932 	bl	800f01e <USBD_CtlError>
            return;
 800edba:	e052      	b.n	800ee62 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 f9f6 	bl	800f1ae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800edc2:	e04e      	b.n	800ee62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f000 f9f2 	bl	800f1ae <USBD_CtlSendStatus>
        break;
 800edca:	e04a      	b.n	800ee62 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800edcc:	4b26      	ldr	r3, [pc, #152]	; (800ee68 <USBD_SetConfig+0x118>)
 800edce:	781b      	ldrb	r3, [r3, #0]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d112      	bne.n	800edfa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2202      	movs	r2, #2
 800edd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800eddc:	4b22      	ldr	r3, [pc, #136]	; (800ee68 <USBD_SetConfig+0x118>)
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	461a      	mov	r2, r3
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ede6:	4b20      	ldr	r3, [pc, #128]	; (800ee68 <USBD_SetConfig+0x118>)
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	4619      	mov	r1, r3
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f7ff f9ab 	bl	800e148 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f000 f9db 	bl	800f1ae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800edf8:	e033      	b.n	800ee62 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800edfa:	4b1b      	ldr	r3, [pc, #108]	; (800ee68 <USBD_SetConfig+0x118>)
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	461a      	mov	r2, r3
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d01d      	beq.n	800ee44 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	685b      	ldr	r3, [r3, #4]
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	4619      	mov	r1, r3
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f7ff f999 	bl	800e148 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ee16:	4b14      	ldr	r3, [pc, #80]	; (800ee68 <USBD_SetConfig+0x118>)
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ee20:	4b11      	ldr	r3, [pc, #68]	; (800ee68 <USBD_SetConfig+0x118>)
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	4619      	mov	r1, r3
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f7ff f96f 	bl	800e10a <USBD_SetClassConfig>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2b02      	cmp	r3, #2
 800ee30:	d104      	bne.n	800ee3c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ee32:	6839      	ldr	r1, [r7, #0]
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f000 f8f2 	bl	800f01e <USBD_CtlError>
            return;
 800ee3a:	e012      	b.n	800ee62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f000 f9b6 	bl	800f1ae <USBD_CtlSendStatus>
        break;
 800ee42:	e00e      	b.n	800ee62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f000 f9b2 	bl	800f1ae <USBD_CtlSendStatus>
        break;
 800ee4a:	e00a      	b.n	800ee62 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ee4c:	6839      	ldr	r1, [r7, #0]
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f000 f8e5 	bl	800f01e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ee54:	4b04      	ldr	r3, [pc, #16]	; (800ee68 <USBD_SetConfig+0x118>)
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	4619      	mov	r1, r3
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f7ff f974 	bl	800e148 <USBD_ClrClassConfig>
        break;
 800ee60:	bf00      	nop
    }
  }
}
 800ee62:	3708      	adds	r7, #8
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}
 800ee68:	200008e8 	.word	0x200008e8

0800ee6c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b082      	sub	sp, #8
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	88db      	ldrh	r3, [r3, #6]
 800ee7a:	2b01      	cmp	r3, #1
 800ee7c:	d004      	beq.n	800ee88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ee7e:	6839      	ldr	r1, [r7, #0]
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f000 f8cc 	bl	800f01e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ee86:	e022      	b.n	800eece <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee8e:	2b02      	cmp	r3, #2
 800ee90:	dc02      	bgt.n	800ee98 <USBD_GetConfig+0x2c>
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	dc03      	bgt.n	800ee9e <USBD_GetConfig+0x32>
 800ee96:	e015      	b.n	800eec4 <USBD_GetConfig+0x58>
 800ee98:	2b03      	cmp	r3, #3
 800ee9a:	d00b      	beq.n	800eeb4 <USBD_GetConfig+0x48>
 800ee9c:	e012      	b.n	800eec4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2200      	movs	r2, #0
 800eea2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	3308      	adds	r3, #8
 800eea8:	2201      	movs	r2, #1
 800eeaa:	4619      	mov	r1, r3
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f000 f920 	bl	800f0f2 <USBD_CtlSendData>
        break;
 800eeb2:	e00c      	b.n	800eece <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	3304      	adds	r3, #4
 800eeb8:	2201      	movs	r2, #1
 800eeba:	4619      	mov	r1, r3
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 f918 	bl	800f0f2 <USBD_CtlSendData>
        break;
 800eec2:	e004      	b.n	800eece <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800eec4:	6839      	ldr	r1, [r7, #0]
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 f8a9 	bl	800f01e <USBD_CtlError>
        break;
 800eecc:	bf00      	nop
}
 800eece:	bf00      	nop
 800eed0:	3708      	adds	r7, #8
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b082      	sub	sp, #8
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
 800eede:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eee6:	3b01      	subs	r3, #1
 800eee8:	2b02      	cmp	r3, #2
 800eeea:	d81e      	bhi.n	800ef2a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	88db      	ldrh	r3, [r3, #6]
 800eef0:	2b02      	cmp	r3, #2
 800eef2:	d004      	beq.n	800eefe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800eef4:	6839      	ldr	r1, [r7, #0]
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f000 f891 	bl	800f01e <USBD_CtlError>
        break;
 800eefc:	e01a      	b.n	800ef34 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2201      	movs	r2, #1
 800ef02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d005      	beq.n	800ef1a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	f043 0202 	orr.w	r2, r3, #2
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	330c      	adds	r3, #12
 800ef1e:	2202      	movs	r2, #2
 800ef20:	4619      	mov	r1, r3
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 f8e5 	bl	800f0f2 <USBD_CtlSendData>
      break;
 800ef28:	e004      	b.n	800ef34 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ef2a:	6839      	ldr	r1, [r7, #0]
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f000 f876 	bl	800f01e <USBD_CtlError>
      break;
 800ef32:	bf00      	nop
  }
}
 800ef34:	bf00      	nop
 800ef36:	3708      	adds	r7, #8
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b082      	sub	sp, #8
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	885b      	ldrh	r3, [r3, #2]
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d106      	bne.n	800ef5c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2201      	movs	r2, #1
 800ef52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 f929 	bl	800f1ae <USBD_CtlSendStatus>
  }
}
 800ef5c:	bf00      	nop
 800ef5e:	3708      	adds	r7, #8
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}

0800ef64 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b082      	sub	sp, #8
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef74:	3b01      	subs	r3, #1
 800ef76:	2b02      	cmp	r3, #2
 800ef78:	d80b      	bhi.n	800ef92 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	885b      	ldrh	r3, [r3, #2]
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	d10c      	bne.n	800ef9c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2200      	movs	r2, #0
 800ef86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f000 f90f 	bl	800f1ae <USBD_CtlSendStatus>
      }
      break;
 800ef90:	e004      	b.n	800ef9c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ef92:	6839      	ldr	r1, [r7, #0]
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f000 f842 	bl	800f01e <USBD_CtlError>
      break;
 800ef9a:	e000      	b.n	800ef9e <USBD_ClrFeature+0x3a>
      break;
 800ef9c:	bf00      	nop
  }
}
 800ef9e:	bf00      	nop
 800efa0:	3708      	adds	r7, #8
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}

0800efa6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800efa6:	b480      	push	{r7}
 800efa8:	b083      	sub	sp, #12
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
 800efae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	781a      	ldrb	r2, [r3, #0]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	785a      	ldrb	r2, [r3, #1]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	3302      	adds	r3, #2
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	b29a      	uxth	r2, r3
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	3303      	adds	r3, #3
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	b29b      	uxth	r3, r3
 800efd0:	021b      	lsls	r3, r3, #8
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	4413      	add	r3, r2
 800efd6:	b29a      	uxth	r2, r3
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	3304      	adds	r3, #4
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	b29a      	uxth	r2, r3
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	3305      	adds	r3, #5
 800efe8:	781b      	ldrb	r3, [r3, #0]
 800efea:	b29b      	uxth	r3, r3
 800efec:	021b      	lsls	r3, r3, #8
 800efee:	b29b      	uxth	r3, r3
 800eff0:	4413      	add	r3, r2
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	3306      	adds	r3, #6
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	b29a      	uxth	r2, r3
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	3307      	adds	r3, #7
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	b29b      	uxth	r3, r3
 800f008:	021b      	lsls	r3, r3, #8
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	4413      	add	r3, r2
 800f00e:	b29a      	uxth	r2, r3
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	80da      	strh	r2, [r3, #6]

}
 800f014:	bf00      	nop
 800f016:	370c      	adds	r7, #12
 800f018:	46bd      	mov	sp, r7
 800f01a:	bc80      	pop	{r7}
 800f01c:	4770      	bx	lr

0800f01e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800f01e:	b580      	push	{r7, lr}
 800f020:	b082      	sub	sp, #8
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
 800f026:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800f028:	2180      	movs	r1, #128	; 0x80
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f000 fcdc 	bl	800f9e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800f030:	2100      	movs	r1, #0
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f000 fcd8 	bl	800f9e8 <USBD_LL_StallEP>
}
 800f038:	bf00      	nop
 800f03a:	3708      	adds	r7, #8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b086      	sub	sp, #24
 800f044:	af00      	add	r7, sp, #0
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f04c:	2300      	movs	r3, #0
 800f04e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d032      	beq.n	800f0bc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f000 f834 	bl	800f0c4 <USBD_GetLen>
 800f05c:	4603      	mov	r3, r0
 800f05e:	3301      	adds	r3, #1
 800f060:	b29b      	uxth	r3, r3
 800f062:	005b      	lsls	r3, r3, #1
 800f064:	b29a      	uxth	r2, r3
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800f06a:	7dfb      	ldrb	r3, [r7, #23]
 800f06c:	1c5a      	adds	r2, r3, #1
 800f06e:	75fa      	strb	r2, [r7, #23]
 800f070:	461a      	mov	r2, r3
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	4413      	add	r3, r2
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	7812      	ldrb	r2, [r2, #0]
 800f07a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f07c:	7dfb      	ldrb	r3, [r7, #23]
 800f07e:	1c5a      	adds	r2, r3, #1
 800f080:	75fa      	strb	r2, [r7, #23]
 800f082:	461a      	mov	r2, r3
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	4413      	add	r3, r2
 800f088:	2203      	movs	r2, #3
 800f08a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800f08c:	e012      	b.n	800f0b4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	1c5a      	adds	r2, r3, #1
 800f092:	60fa      	str	r2, [r7, #12]
 800f094:	7dfa      	ldrb	r2, [r7, #23]
 800f096:	1c51      	adds	r1, r2, #1
 800f098:	75f9      	strb	r1, [r7, #23]
 800f09a:	4611      	mov	r1, r2
 800f09c:	68ba      	ldr	r2, [r7, #8]
 800f09e:	440a      	add	r2, r1
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800f0a4:	7dfb      	ldrb	r3, [r7, #23]
 800f0a6:	1c5a      	adds	r2, r3, #1
 800f0a8:	75fa      	strb	r2, [r7, #23]
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	4413      	add	r3, r2
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d1e8      	bne.n	800f08e <USBD_GetString+0x4e>
    }
  }
}
 800f0bc:	bf00      	nop
 800f0be:	3718      	adds	r7, #24
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b085      	sub	sp, #20
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800f0d0:	e005      	b.n	800f0de <USBD_GetLen+0x1a>
  {
    len++;
 800f0d2:	7bfb      	ldrb	r3, [r7, #15]
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	3301      	adds	r3, #1
 800f0dc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d1f5      	bne.n	800f0d2 <USBD_GetLen+0xe>
  }

  return len;
 800f0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3714      	adds	r7, #20
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bc80      	pop	{r7}
 800f0f0:	4770      	bx	lr

0800f0f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b084      	sub	sp, #16
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	60f8      	str	r0, [r7, #12]
 800f0fa:	60b9      	str	r1, [r7, #8]
 800f0fc:	4613      	mov	r3, r2
 800f0fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2202      	movs	r2, #2
 800f104:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f108:	88fa      	ldrh	r2, [r7, #6]
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800f10e:	88fa      	ldrh	r2, [r7, #6]
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f114:	88fb      	ldrh	r3, [r7, #6]
 800f116:	68ba      	ldr	r2, [r7, #8]
 800f118:	2100      	movs	r1, #0
 800f11a:	68f8      	ldr	r0, [r7, #12]
 800f11c:	f000 fcec 	bl	800faf8 <USBD_LL_Transmit>

  return USBD_OK;
 800f120:	2300      	movs	r3, #0
}
 800f122:	4618      	mov	r0, r3
 800f124:	3710      	adds	r7, #16
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}

0800f12a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b084      	sub	sp, #16
 800f12e:	af00      	add	r7, sp, #0
 800f130:	60f8      	str	r0, [r7, #12]
 800f132:	60b9      	str	r1, [r7, #8]
 800f134:	4613      	mov	r3, r2
 800f136:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f138:	88fb      	ldrh	r3, [r7, #6]
 800f13a:	68ba      	ldr	r2, [r7, #8]
 800f13c:	2100      	movs	r1, #0
 800f13e:	68f8      	ldr	r0, [r7, #12]
 800f140:	f000 fcda 	bl	800faf8 <USBD_LL_Transmit>

  return USBD_OK;
 800f144:	2300      	movs	r3, #0
}
 800f146:	4618      	mov	r0, r3
 800f148:	3710      	adds	r7, #16
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}

0800f14e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800f14e:	b580      	push	{r7, lr}
 800f150:	b084      	sub	sp, #16
 800f152:	af00      	add	r7, sp, #0
 800f154:	60f8      	str	r0, [r7, #12]
 800f156:	60b9      	str	r1, [r7, #8]
 800f158:	4613      	mov	r3, r2
 800f15a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2203      	movs	r2, #3
 800f160:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f164:	88fa      	ldrh	r2, [r7, #6]
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800f16c:	88fa      	ldrh	r2, [r7, #6]
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f174:	88fb      	ldrh	r3, [r7, #6]
 800f176:	68ba      	ldr	r2, [r7, #8]
 800f178:	2100      	movs	r1, #0
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	f000 fcdf 	bl	800fb3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f180:	2300      	movs	r3, #0
}
 800f182:	4618      	mov	r0, r3
 800f184:	3710      	adds	r7, #16
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}

0800f18a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800f18a:	b580      	push	{r7, lr}
 800f18c:	b084      	sub	sp, #16
 800f18e:	af00      	add	r7, sp, #0
 800f190:	60f8      	str	r0, [r7, #12]
 800f192:	60b9      	str	r1, [r7, #8]
 800f194:	4613      	mov	r3, r2
 800f196:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f198:	88fb      	ldrh	r3, [r7, #6]
 800f19a:	68ba      	ldr	r2, [r7, #8]
 800f19c:	2100      	movs	r1, #0
 800f19e:	68f8      	ldr	r0, [r7, #12]
 800f1a0:	f000 fccd 	bl	800fb3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1a4:	2300      	movs	r3, #0
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3710      	adds	r7, #16
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}

0800f1ae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f1ae:	b580      	push	{r7, lr}
 800f1b0:	b082      	sub	sp, #8
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2204      	movs	r2, #4
 800f1ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f1be:	2300      	movs	r3, #0
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f000 fc97 	bl	800faf8 <USBD_LL_Transmit>

  return USBD_OK;
 800f1ca:	2300      	movs	r3, #0
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3708      	adds	r7, #8
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}

0800f1d4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2205      	movs	r2, #5
 800f1e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	2100      	movs	r1, #0
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f000 fca7 	bl	800fb3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1f0:	2300      	movs	r3, #0
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3708      	adds	r7, #8
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
	...

0800f1fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f200:	2200      	movs	r2, #0
 800f202:	4912      	ldr	r1, [pc, #72]	; (800f24c <MX_USB_DEVICE_Init+0x50>)
 800f204:	4812      	ldr	r0, [pc, #72]	; (800f250 <MX_USB_DEVICE_Init+0x54>)
 800f206:	f7fe ff26 	bl	800e056 <USBD_Init>
 800f20a:	4603      	mov	r3, r0
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d001      	beq.n	800f214 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f210:	f7f6 fa1c 	bl	800564c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f214:	490f      	ldr	r1, [pc, #60]	; (800f254 <MX_USB_DEVICE_Init+0x58>)
 800f216:	480e      	ldr	r0, [pc, #56]	; (800f250 <MX_USB_DEVICE_Init+0x54>)
 800f218:	f7fe ff48 	bl	800e0ac <USBD_RegisterClass>
 800f21c:	4603      	mov	r3, r0
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d001      	beq.n	800f226 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f222:	f7f6 fa13 	bl	800564c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f226:	490c      	ldr	r1, [pc, #48]	; (800f258 <MX_USB_DEVICE_Init+0x5c>)
 800f228:	4809      	ldr	r0, [pc, #36]	; (800f250 <MX_USB_DEVICE_Init+0x54>)
 800f22a:	f7fe fe79 	bl	800df20 <USBD_CDC_RegisterInterface>
 800f22e:	4603      	mov	r3, r0
 800f230:	2b00      	cmp	r3, #0
 800f232:	d001      	beq.n	800f238 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f234:	f7f6 fa0a 	bl	800564c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f238:	4805      	ldr	r0, [pc, #20]	; (800f250 <MX_USB_DEVICE_Init+0x54>)
 800f23a:	f7fe ff50 	bl	800e0de <USBD_Start>
 800f23e:	4603      	mov	r3, r0
 800f240:	2b00      	cmp	r3, #0
 800f242:	d001      	beq.n	800f248 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f244:	f7f6 fa02 	bl	800564c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f248:	bf00      	nop
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	20000190 	.word	0x20000190
 800f250:	200008f8 	.word	0x200008f8
 800f254:	20000074 	.word	0x20000074
 800f258:	20000178 	.word	0x20000178

0800f25c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f260:	2200      	movs	r2, #0
 800f262:	4905      	ldr	r1, [pc, #20]	; (800f278 <CDC_Init_FS+0x1c>)
 800f264:	4805      	ldr	r0, [pc, #20]	; (800f27c <CDC_Init_FS+0x20>)
 800f266:	f7fe fe71 	bl	800df4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f26a:	4905      	ldr	r1, [pc, #20]	; (800f280 <CDC_Init_FS+0x24>)
 800f26c:	4803      	ldr	r0, [pc, #12]	; (800f27c <CDC_Init_FS+0x20>)
 800f26e:	f7fe fe86 	bl	800df7e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f272:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f274:	4618      	mov	r0, r3
 800f276:	bd80      	pop	{r7, pc}
 800f278:	200013bc 	.word	0x200013bc
 800f27c:	200008f8 	.word	0x200008f8
 800f280:	20000bbc 	.word	0x20000bbc

0800f284 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f284:	b480      	push	{r7}
 800f286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f288:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bc80      	pop	{r7}
 800f290:	4770      	bx	lr
	...

0800f294 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f294:	b480      	push	{r7}
 800f296:	b083      	sub	sp, #12
 800f298:	af00      	add	r7, sp, #0
 800f29a:	4603      	mov	r3, r0
 800f29c:	6039      	str	r1, [r7, #0]
 800f29e:	71fb      	strb	r3, [r7, #7]
 800f2a0:	4613      	mov	r3, r2
 800f2a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f2a4:	79fb      	ldrb	r3, [r7, #7]
 800f2a6:	2b23      	cmp	r3, #35	; 0x23
 800f2a8:	d85c      	bhi.n	800f364 <CDC_Control_FS+0xd0>
 800f2aa:	a201      	add	r2, pc, #4	; (adr r2, 800f2b0 <CDC_Control_FS+0x1c>)
 800f2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b0:	0800f365 	.word	0x0800f365
 800f2b4:	0800f365 	.word	0x0800f365
 800f2b8:	0800f365 	.word	0x0800f365
 800f2bc:	0800f365 	.word	0x0800f365
 800f2c0:	0800f365 	.word	0x0800f365
 800f2c4:	0800f365 	.word	0x0800f365
 800f2c8:	0800f365 	.word	0x0800f365
 800f2cc:	0800f365 	.word	0x0800f365
 800f2d0:	0800f365 	.word	0x0800f365
 800f2d4:	0800f365 	.word	0x0800f365
 800f2d8:	0800f365 	.word	0x0800f365
 800f2dc:	0800f365 	.word	0x0800f365
 800f2e0:	0800f365 	.word	0x0800f365
 800f2e4:	0800f365 	.word	0x0800f365
 800f2e8:	0800f365 	.word	0x0800f365
 800f2ec:	0800f365 	.word	0x0800f365
 800f2f0:	0800f365 	.word	0x0800f365
 800f2f4:	0800f365 	.word	0x0800f365
 800f2f8:	0800f365 	.word	0x0800f365
 800f2fc:	0800f365 	.word	0x0800f365
 800f300:	0800f365 	.word	0x0800f365
 800f304:	0800f365 	.word	0x0800f365
 800f308:	0800f365 	.word	0x0800f365
 800f30c:	0800f365 	.word	0x0800f365
 800f310:	0800f365 	.word	0x0800f365
 800f314:	0800f365 	.word	0x0800f365
 800f318:	0800f365 	.word	0x0800f365
 800f31c:	0800f365 	.word	0x0800f365
 800f320:	0800f365 	.word	0x0800f365
 800f324:	0800f365 	.word	0x0800f365
 800f328:	0800f365 	.word	0x0800f365
 800f32c:	0800f365 	.word	0x0800f365
 800f330:	0800f341 	.word	0x0800f341
 800f334:	0800f353 	.word	0x0800f353
 800f338:	0800f365 	.word	0x0800f365
 800f33c:	0800f365 	.word	0x0800f365
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit

    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };

    case CDC_SET_LINE_CODING:
      memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800f340:	4b0c      	ldr	r3, [pc, #48]	; (800f374 <CDC_Control_FS+0xe0>)
 800f342:	683a      	ldr	r2, [r7, #0]
 800f344:	6810      	ldr	r0, [r2, #0]
 800f346:	6018      	str	r0, [r3, #0]
 800f348:	8891      	ldrh	r1, [r2, #4]
 800f34a:	7992      	ldrb	r2, [r2, #6]
 800f34c:	8099      	strh	r1, [r3, #4]
 800f34e:	719a      	strb	r2, [r3, #6]
    break;
 800f350:	e009      	b.n	800f366 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
      memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	4a07      	ldr	r2, [pc, #28]	; (800f374 <CDC_Control_FS+0xe0>)
 800f356:	6810      	ldr	r0, [r2, #0]
 800f358:	6018      	str	r0, [r3, #0]
 800f35a:	8891      	ldrh	r1, [r2, #4]
 800f35c:	7992      	ldrb	r2, [r2, #6]
 800f35e:	8099      	strh	r1, [r3, #4]
 800f360:	719a      	strb	r2, [r3, #6]
    break;
 800f362:	e000      	b.n	800f366 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f364:	bf00      	nop
  }

  return (USBD_OK);
 800f366:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f368:	4618      	mov	r0, r3
 800f36a:	370c      	adds	r7, #12
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bc80      	pop	{r7}
 800f370:	4770      	bx	lr
 800f372:	bf00      	nop
 800f374:	20000188 	.word	0x20000188

0800f378 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f382:	6879      	ldr	r1, [r7, #4]
 800f384:	4805      	ldr	r0, [pc, #20]	; (800f39c <CDC_Receive_FS+0x24>)
 800f386:	f7fe fdfa 	bl	800df7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f38a:	4804      	ldr	r0, [pc, #16]	; (800f39c <CDC_Receive_FS+0x24>)
 800f38c:	f7fe fe39 	bl	800e002 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f390:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f392:	4618      	mov	r0, r3
 800f394:	3708      	adds	r7, #8
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
 800f39a:	bf00      	nop
 800f39c:	200008f8 	.word	0x200008f8

0800f3a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	460b      	mov	r3, r1
 800f3aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f3b0:	4b0d      	ldr	r3, [pc, #52]	; (800f3e8 <CDC_Transmit_FS+0x48>)
 800f3b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d001      	beq.n	800f3c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	e00b      	b.n	800f3de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f3c6:	887b      	ldrh	r3, [r7, #2]
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	6879      	ldr	r1, [r7, #4]
 800f3cc:	4806      	ldr	r0, [pc, #24]	; (800f3e8 <CDC_Transmit_FS+0x48>)
 800f3ce:	f7fe fdbd 	bl	800df4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f3d2:	4805      	ldr	r0, [pc, #20]	; (800f3e8 <CDC_Transmit_FS+0x48>)
 800f3d4:	f7fe fde6 	bl	800dfa4 <USBD_CDC_TransmitPacket>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3710      	adds	r7, #16
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	200008f8 	.word	0x200008f8

0800f3ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b083      	sub	sp, #12
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	6039      	str	r1, [r7, #0]
 800f3f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	2212      	movs	r2, #18
 800f3fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f3fe:	4b03      	ldr	r3, [pc, #12]	; (800f40c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f400:	4618      	mov	r0, r3
 800f402:	370c      	adds	r7, #12
 800f404:	46bd      	mov	sp, r7
 800f406:	bc80      	pop	{r7}
 800f408:	4770      	bx	lr
 800f40a:	bf00      	nop
 800f40c:	200001ac 	.word	0x200001ac

0800f410 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f410:	b480      	push	{r7}
 800f412:	b083      	sub	sp, #12
 800f414:	af00      	add	r7, sp, #0
 800f416:	4603      	mov	r3, r0
 800f418:	6039      	str	r1, [r7, #0]
 800f41a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	2204      	movs	r2, #4
 800f420:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f422:	4b03      	ldr	r3, [pc, #12]	; (800f430 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f424:	4618      	mov	r0, r3
 800f426:	370c      	adds	r7, #12
 800f428:	46bd      	mov	sp, r7
 800f42a:	bc80      	pop	{r7}
 800f42c:	4770      	bx	lr
 800f42e:	bf00      	nop
 800f430:	200001c0 	.word	0x200001c0

0800f434 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	4603      	mov	r3, r0
 800f43c:	6039      	str	r1, [r7, #0]
 800f43e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f440:	79fb      	ldrb	r3, [r7, #7]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d105      	bne.n	800f452 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f446:	683a      	ldr	r2, [r7, #0]
 800f448:	4907      	ldr	r1, [pc, #28]	; (800f468 <USBD_FS_ProductStrDescriptor+0x34>)
 800f44a:	4808      	ldr	r0, [pc, #32]	; (800f46c <USBD_FS_ProductStrDescriptor+0x38>)
 800f44c:	f7ff fdf8 	bl	800f040 <USBD_GetString>
 800f450:	e004      	b.n	800f45c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f452:	683a      	ldr	r2, [r7, #0]
 800f454:	4904      	ldr	r1, [pc, #16]	; (800f468 <USBD_FS_ProductStrDescriptor+0x34>)
 800f456:	4805      	ldr	r0, [pc, #20]	; (800f46c <USBD_FS_ProductStrDescriptor+0x38>)
 800f458:	f7ff fdf2 	bl	800f040 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f45c:	4b02      	ldr	r3, [pc, #8]	; (800f468 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3708      	adds	r7, #8
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	20001bbc 	.word	0x20001bbc
 800f46c:	08014cb0 	.word	0x08014cb0

0800f470 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
 800f476:	4603      	mov	r3, r0
 800f478:	6039      	str	r1, [r7, #0]
 800f47a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f47c:	683a      	ldr	r2, [r7, #0]
 800f47e:	4904      	ldr	r1, [pc, #16]	; (800f490 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f480:	4804      	ldr	r0, [pc, #16]	; (800f494 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f482:	f7ff fddd 	bl	800f040 <USBD_GetString>
  return USBD_StrDesc;
 800f486:	4b02      	ldr	r3, [pc, #8]	; (800f490 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3708      	adds	r7, #8
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}
 800f490:	20001bbc 	.word	0x20001bbc
 800f494:	08014cc8 	.word	0x08014cc8

0800f498 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	4603      	mov	r3, r0
 800f4a0:	6039      	str	r1, [r7, #0]
 800f4a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	221a      	movs	r2, #26
 800f4a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f4aa:	f000 f843 	bl	800f534 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f4ae:	4b02      	ldr	r3, [pc, #8]	; (800f4b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3708      	adds	r7, #8
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}
 800f4b8:	200001c4 	.word	0x200001c4

0800f4bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	6039      	str	r1, [r7, #0]
 800f4c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f4c8:	79fb      	ldrb	r3, [r7, #7]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d105      	bne.n	800f4da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f4ce:	683a      	ldr	r2, [r7, #0]
 800f4d0:	4907      	ldr	r1, [pc, #28]	; (800f4f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f4d2:	4808      	ldr	r0, [pc, #32]	; (800f4f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f4d4:	f7ff fdb4 	bl	800f040 <USBD_GetString>
 800f4d8:	e004      	b.n	800f4e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f4da:	683a      	ldr	r2, [r7, #0]
 800f4dc:	4904      	ldr	r1, [pc, #16]	; (800f4f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f4de:	4805      	ldr	r0, [pc, #20]	; (800f4f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f4e0:	f7ff fdae 	bl	800f040 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f4e4:	4b02      	ldr	r3, [pc, #8]	; (800f4f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3708      	adds	r7, #8
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	20001bbc 	.word	0x20001bbc
 800f4f4:	08014cdc 	.word	0x08014cdc

0800f4f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	4603      	mov	r3, r0
 800f500:	6039      	str	r1, [r7, #0]
 800f502:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f504:	79fb      	ldrb	r3, [r7, #7]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d105      	bne.n	800f516 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f50a:	683a      	ldr	r2, [r7, #0]
 800f50c:	4907      	ldr	r1, [pc, #28]	; (800f52c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f50e:	4808      	ldr	r0, [pc, #32]	; (800f530 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f510:	f7ff fd96 	bl	800f040 <USBD_GetString>
 800f514:	e004      	b.n	800f520 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f516:	683a      	ldr	r2, [r7, #0]
 800f518:	4904      	ldr	r1, [pc, #16]	; (800f52c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f51a:	4805      	ldr	r0, [pc, #20]	; (800f530 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f51c:	f7ff fd90 	bl	800f040 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f520:	4b02      	ldr	r3, [pc, #8]	; (800f52c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f522:	4618      	mov	r0, r3
 800f524:	3708      	adds	r7, #8
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	20001bbc 	.word	0x20001bbc
 800f530:	08014ce8 	.word	0x08014ce8

0800f534 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f53a:	4b0f      	ldr	r3, [pc, #60]	; (800f578 <Get_SerialNum+0x44>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f540:	4b0e      	ldr	r3, [pc, #56]	; (800f57c <Get_SerialNum+0x48>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f546:	4b0e      	ldr	r3, [pc, #56]	; (800f580 <Get_SerialNum+0x4c>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	4413      	add	r3, r2
 800f552:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d009      	beq.n	800f56e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f55a:	2208      	movs	r2, #8
 800f55c:	4909      	ldr	r1, [pc, #36]	; (800f584 <Get_SerialNum+0x50>)
 800f55e:	68f8      	ldr	r0, [r7, #12]
 800f560:	f000 f814 	bl	800f58c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f564:	2204      	movs	r2, #4
 800f566:	4908      	ldr	r1, [pc, #32]	; (800f588 <Get_SerialNum+0x54>)
 800f568:	68b8      	ldr	r0, [r7, #8]
 800f56a:	f000 f80f 	bl	800f58c <IntToUnicode>
  }
}
 800f56e:	bf00      	nop
 800f570:	3710      	adds	r7, #16
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	1fff7a10 	.word	0x1fff7a10
 800f57c:	1fff7a14 	.word	0x1fff7a14
 800f580:	1fff7a18 	.word	0x1fff7a18
 800f584:	200001c6 	.word	0x200001c6
 800f588:	200001d6 	.word	0x200001d6

0800f58c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f58c:	b480      	push	{r7}
 800f58e:	b087      	sub	sp, #28
 800f590:	af00      	add	r7, sp, #0
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	4613      	mov	r3, r2
 800f598:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f59a:	2300      	movs	r3, #0
 800f59c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f59e:	2300      	movs	r3, #0
 800f5a0:	75fb      	strb	r3, [r7, #23]
 800f5a2:	e027      	b.n	800f5f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	0f1b      	lsrs	r3, r3, #28
 800f5a8:	2b09      	cmp	r3, #9
 800f5aa:	d80b      	bhi.n	800f5c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	0f1b      	lsrs	r3, r3, #28
 800f5b0:	b2da      	uxtb	r2, r3
 800f5b2:	7dfb      	ldrb	r3, [r7, #23]
 800f5b4:	005b      	lsls	r3, r3, #1
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	440b      	add	r3, r1
 800f5bc:	3230      	adds	r2, #48	; 0x30
 800f5be:	b2d2      	uxtb	r2, r2
 800f5c0:	701a      	strb	r2, [r3, #0]
 800f5c2:	e00a      	b.n	800f5da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	0f1b      	lsrs	r3, r3, #28
 800f5c8:	b2da      	uxtb	r2, r3
 800f5ca:	7dfb      	ldrb	r3, [r7, #23]
 800f5cc:	005b      	lsls	r3, r3, #1
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	440b      	add	r3, r1
 800f5d4:	3237      	adds	r2, #55	; 0x37
 800f5d6:	b2d2      	uxtb	r2, r2
 800f5d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	011b      	lsls	r3, r3, #4
 800f5de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f5e0:	7dfb      	ldrb	r3, [r7, #23]
 800f5e2:	005b      	lsls	r3, r3, #1
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	68ba      	ldr	r2, [r7, #8]
 800f5e8:	4413      	add	r3, r2
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f5ee:	7dfb      	ldrb	r3, [r7, #23]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	75fb      	strb	r3, [r7, #23]
 800f5f4:	7dfa      	ldrb	r2, [r7, #23]
 800f5f6:	79fb      	ldrb	r3, [r7, #7]
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d3d3      	bcc.n	800f5a4 <IntToUnicode+0x18>
  }
}
 800f5fc:	bf00      	nop
 800f5fe:	bf00      	nop
 800f600:	371c      	adds	r7, #28
 800f602:	46bd      	mov	sp, r7
 800f604:	bc80      	pop	{r7}
 800f606:	4770      	bx	lr

0800f608 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b08a      	sub	sp, #40	; 0x28
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f610:	f107 0314 	add.w	r3, r7, #20
 800f614:	2200      	movs	r2, #0
 800f616:	601a      	str	r2, [r3, #0]
 800f618:	605a      	str	r2, [r3, #4]
 800f61a:	609a      	str	r2, [r3, #8]
 800f61c:	60da      	str	r2, [r3, #12]
 800f61e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f628:	d13a      	bne.n	800f6a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f62a:	2300      	movs	r3, #0
 800f62c:	613b      	str	r3, [r7, #16]
 800f62e:	4b1e      	ldr	r3, [pc, #120]	; (800f6a8 <HAL_PCD_MspInit+0xa0>)
 800f630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f632:	4a1d      	ldr	r2, [pc, #116]	; (800f6a8 <HAL_PCD_MspInit+0xa0>)
 800f634:	f043 0301 	orr.w	r3, r3, #1
 800f638:	6313      	str	r3, [r2, #48]	; 0x30
 800f63a:	4b1b      	ldr	r3, [pc, #108]	; (800f6a8 <HAL_PCD_MspInit+0xa0>)
 800f63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f63e:	f003 0301 	and.w	r3, r3, #1
 800f642:	613b      	str	r3, [r7, #16]
 800f644:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f646:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f64a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f64c:	2302      	movs	r3, #2
 800f64e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f650:	2300      	movs	r3, #0
 800f652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f654:	2303      	movs	r3, #3
 800f656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f658:	230a      	movs	r3, #10
 800f65a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f65c:	f107 0314 	add.w	r3, r7, #20
 800f660:	4619      	mov	r1, r3
 800f662:	4812      	ldr	r0, [pc, #72]	; (800f6ac <HAL_PCD_MspInit+0xa4>)
 800f664:	f7f8 fbb0 	bl	8007dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f668:	4b0f      	ldr	r3, [pc, #60]	; (800f6a8 <HAL_PCD_MspInit+0xa0>)
 800f66a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f66c:	4a0e      	ldr	r2, [pc, #56]	; (800f6a8 <HAL_PCD_MspInit+0xa0>)
 800f66e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f672:	6353      	str	r3, [r2, #52]	; 0x34
 800f674:	2300      	movs	r3, #0
 800f676:	60fb      	str	r3, [r7, #12]
 800f678:	4b0b      	ldr	r3, [pc, #44]	; (800f6a8 <HAL_PCD_MspInit+0xa0>)
 800f67a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f67c:	4a0a      	ldr	r2, [pc, #40]	; (800f6a8 <HAL_PCD_MspInit+0xa0>)
 800f67e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f682:	6453      	str	r3, [r2, #68]	; 0x44
 800f684:	4b08      	ldr	r3, [pc, #32]	; (800f6a8 <HAL_PCD_MspInit+0xa0>)
 800f686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f68c:	60fb      	str	r3, [r7, #12]
 800f68e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f690:	2200      	movs	r2, #0
 800f692:	2100      	movs	r1, #0
 800f694:	2043      	movs	r0, #67	; 0x43
 800f696:	f7f7 ff54 	bl	8007542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f69a:	2043      	movs	r0, #67	; 0x43
 800f69c:	f7f7 ff6d 	bl	800757a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f6a0:	bf00      	nop
 800f6a2:	3728      	adds	r7, #40	; 0x28
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}
 800f6a8:	40023800 	.word	0x40023800
 800f6ac:	40020000 	.word	0x40020000

0800f6b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f6c4:	4619      	mov	r1, r3
 800f6c6:	4610      	mov	r0, r2
 800f6c8:	f7fe fd51 	bl	800e16e <USBD_LL_SetupStage>
}
 800f6cc:	bf00      	nop
 800f6ce:	3708      	adds	r7, #8
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	460b      	mov	r3, r1
 800f6de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800f6e6:	78fa      	ldrb	r2, [r7, #3]
 800f6e8:	6879      	ldr	r1, [r7, #4]
 800f6ea:	4613      	mov	r3, r2
 800f6ec:	00db      	lsls	r3, r3, #3
 800f6ee:	1a9b      	subs	r3, r3, r2
 800f6f0:	009b      	lsls	r3, r3, #2
 800f6f2:	440b      	add	r3, r1
 800f6f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f6f8:	681a      	ldr	r2, [r3, #0]
 800f6fa:	78fb      	ldrb	r3, [r7, #3]
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	f7fe fd83 	bl	800e208 <USBD_LL_DataOutStage>
}
 800f702:	bf00      	nop
 800f704:	3708      	adds	r7, #8
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}

0800f70a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f70a:	b580      	push	{r7, lr}
 800f70c:	b082      	sub	sp, #8
 800f70e:	af00      	add	r7, sp, #0
 800f710:	6078      	str	r0, [r7, #4]
 800f712:	460b      	mov	r3, r1
 800f714:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800f71c:	78fa      	ldrb	r2, [r7, #3]
 800f71e:	6879      	ldr	r1, [r7, #4]
 800f720:	4613      	mov	r3, r2
 800f722:	00db      	lsls	r3, r3, #3
 800f724:	1a9b      	subs	r3, r3, r2
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	440b      	add	r3, r1
 800f72a:	3348      	adds	r3, #72	; 0x48
 800f72c:	681a      	ldr	r2, [r3, #0]
 800f72e:	78fb      	ldrb	r3, [r7, #3]
 800f730:	4619      	mov	r1, r3
 800f732:	f7fe fdda 	bl	800e2ea <USBD_LL_DataInStage>
}
 800f736:	bf00      	nop
 800f738:	3708      	adds	r7, #8
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}

0800f73e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f73e:	b580      	push	{r7, lr}
 800f740:	b082      	sub	sp, #8
 800f742:	af00      	add	r7, sp, #0
 800f744:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f74c:	4618      	mov	r0, r3
 800f74e:	f7fe feea 	bl	800e526 <USBD_LL_SOF>
}
 800f752:	bf00      	nop
 800f754:	3708      	adds	r7, #8
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}

0800f75a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b084      	sub	sp, #16
 800f75e:	af00      	add	r7, sp, #0
 800f760:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f762:	2301      	movs	r3, #1
 800f764:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d102      	bne.n	800f774 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f76e:	2300      	movs	r3, #0
 800f770:	73fb      	strb	r3, [r7, #15]
 800f772:	e008      	b.n	800f786 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	2b02      	cmp	r3, #2
 800f77a:	d102      	bne.n	800f782 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f77c:	2301      	movs	r3, #1
 800f77e:	73fb      	strb	r3, [r7, #15]
 800f780:	e001      	b.n	800f786 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f782:	f7f5 ff63 	bl	800564c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f78c:	7bfa      	ldrb	r2, [r7, #15]
 800f78e:	4611      	mov	r1, r2
 800f790:	4618      	mov	r0, r3
 800f792:	f7fe fe90 	bl	800e4b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f79c:	4618      	mov	r0, r3
 800f79e:	f7fe fe49 	bl	800e434 <USBD_LL_Reset>
}
 800f7a2:	bf00      	nop
 800f7a4:	3710      	adds	r7, #16
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}
	...

0800f7ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7fe fe8a 	bl	800e4d4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	687a      	ldr	r2, [r7, #4]
 800f7cc:	6812      	ldr	r2, [r2, #0]
 800f7ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f7d2:	f043 0301 	orr.w	r3, r3, #1
 800f7d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	6a1b      	ldr	r3, [r3, #32]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d005      	beq.n	800f7ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f7e0:	4b04      	ldr	r3, [pc, #16]	; (800f7f4 <HAL_PCD_SuspendCallback+0x48>)
 800f7e2:	691b      	ldr	r3, [r3, #16]
 800f7e4:	4a03      	ldr	r2, [pc, #12]	; (800f7f4 <HAL_PCD_SuspendCallback+0x48>)
 800f7e6:	f043 0306 	orr.w	r3, r3, #6
 800f7ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f7ec:	bf00      	nop
 800f7ee:	3708      	adds	r7, #8
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	e000ed00 	.word	0xe000ed00

0800f7f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f806:	4618      	mov	r0, r3
 800f808:	f7fe fe78 	bl	800e4fc <USBD_LL_Resume>
}
 800f80c:	bf00      	nop
 800f80e:	3708      	adds	r7, #8
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}

0800f814 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b082      	sub	sp, #8
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	460b      	mov	r3, r1
 800f81e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f826:	78fa      	ldrb	r2, [r7, #3]
 800f828:	4611      	mov	r1, r2
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7fe fea1 	bl	800e572 <USBD_LL_IsoOUTIncomplete>
}
 800f830:	bf00      	nop
 800f832:	3708      	adds	r7, #8
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	460b      	mov	r3, r1
 800f842:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f84a:	78fa      	ldrb	r2, [r7, #3]
 800f84c:	4611      	mov	r1, r2
 800f84e:	4618      	mov	r0, r3
 800f850:	f7fe fe83 	bl	800e55a <USBD_LL_IsoINIncomplete>
}
 800f854:	bf00      	nop
 800f856:	3708      	adds	r7, #8
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7fe fe8d 	bl	800e58a <USBD_LL_DevConnected>
}
 800f870:	bf00      	nop
 800f872:	3708      	adds	r7, #8
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}

0800f878 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f886:	4618      	mov	r0, r3
 800f888:	f7fe fe89 	bl	800e59e <USBD_LL_DevDisconnected>
}
 800f88c:	bf00      	nop
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d139      	bne.n	800f918 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f8a4:	4a1f      	ldr	r2, [pc, #124]	; (800f924 <USBD_LL_Init+0x90>)
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a1d      	ldr	r2, [pc, #116]	; (800f924 <USBD_LL_Init+0x90>)
 800f8b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f8b4:	4b1b      	ldr	r3, [pc, #108]	; (800f924 <USBD_LL_Init+0x90>)
 800f8b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f8ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f8bc:	4b19      	ldr	r3, [pc, #100]	; (800f924 <USBD_LL_Init+0x90>)
 800f8be:	2204      	movs	r2, #4
 800f8c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f8c2:	4b18      	ldr	r3, [pc, #96]	; (800f924 <USBD_LL_Init+0x90>)
 800f8c4:	2202      	movs	r2, #2
 800f8c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f8c8:	4b16      	ldr	r3, [pc, #88]	; (800f924 <USBD_LL_Init+0x90>)
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f8ce:	4b15      	ldr	r3, [pc, #84]	; (800f924 <USBD_LL_Init+0x90>)
 800f8d0:	2202      	movs	r2, #2
 800f8d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f8d4:	4b13      	ldr	r3, [pc, #76]	; (800f924 <USBD_LL_Init+0x90>)
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f8da:	4b12      	ldr	r3, [pc, #72]	; (800f924 <USBD_LL_Init+0x90>)
 800f8dc:	2200      	movs	r2, #0
 800f8de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f8e0:	4b10      	ldr	r3, [pc, #64]	; (800f924 <USBD_LL_Init+0x90>)
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f8e6:	4b0f      	ldr	r3, [pc, #60]	; (800f924 <USBD_LL_Init+0x90>)
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f8ec:	480d      	ldr	r0, [pc, #52]	; (800f924 <USBD_LL_Init+0x90>)
 800f8ee:	f7f9 fc0f 	bl	8009110 <HAL_PCD_Init>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d001      	beq.n	800f8fc <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800f8f8:	f7f5 fea8 	bl	800564c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f8fc:	2180      	movs	r1, #128	; 0x80
 800f8fe:	4809      	ldr	r0, [pc, #36]	; (800f924 <USBD_LL_Init+0x90>)
 800f900:	f7fa fd4c 	bl	800a39c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f904:	2240      	movs	r2, #64	; 0x40
 800f906:	2100      	movs	r1, #0
 800f908:	4806      	ldr	r0, [pc, #24]	; (800f924 <USBD_LL_Init+0x90>)
 800f90a:	f7fa fd01 	bl	800a310 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f90e:	2280      	movs	r2, #128	; 0x80
 800f910:	2101      	movs	r1, #1
 800f912:	4804      	ldr	r0, [pc, #16]	; (800f924 <USBD_LL_Init+0x90>)
 800f914:	f7fa fcfc 	bl	800a310 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f918:	2300      	movs	r3, #0
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	20001dbc 	.word	0x20001dbc

0800f928 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f930:	2300      	movs	r3, #0
 800f932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f934:	2300      	movs	r3, #0
 800f936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f93e:	4618      	mov	r0, r3
 800f940:	f7f9 fd03 	bl	800934a <HAL_PCD_Start>
 800f944:	4603      	mov	r3, r0
 800f946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f948:	7bfb      	ldrb	r3, [r7, #15]
 800f94a:	4618      	mov	r0, r3
 800f94c:	f000 f92e 	bl	800fbac <USBD_Get_USB_Status>
 800f950:	4603      	mov	r3, r0
 800f952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f954:	7bbb      	ldrb	r3, [r7, #14]
}
 800f956:	4618      	mov	r0, r3
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f95e:	b580      	push	{r7, lr}
 800f960:	b084      	sub	sp, #16
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]
 800f966:	4608      	mov	r0, r1
 800f968:	4611      	mov	r1, r2
 800f96a:	461a      	mov	r2, r3
 800f96c:	4603      	mov	r3, r0
 800f96e:	70fb      	strb	r3, [r7, #3]
 800f970:	460b      	mov	r3, r1
 800f972:	70bb      	strb	r3, [r7, #2]
 800f974:	4613      	mov	r3, r2
 800f976:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f978:	2300      	movs	r3, #0
 800f97a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f97c:	2300      	movs	r3, #0
 800f97e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f986:	78bb      	ldrb	r3, [r7, #2]
 800f988:	883a      	ldrh	r2, [r7, #0]
 800f98a:	78f9      	ldrb	r1, [r7, #3]
 800f98c:	f7fa f8c8 	bl	8009b20 <HAL_PCD_EP_Open>
 800f990:	4603      	mov	r3, r0
 800f992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f994:	7bfb      	ldrb	r3, [r7, #15]
 800f996:	4618      	mov	r0, r3
 800f998:	f000 f908 	bl	800fbac <USBD_Get_USB_Status>
 800f99c:	4603      	mov	r3, r0
 800f99e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3710      	adds	r7, #16
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}

0800f9aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9aa:	b580      	push	{r7, lr}
 800f9ac:	b084      	sub	sp, #16
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	6078      	str	r0, [r7, #4]
 800f9b2:	460b      	mov	r3, r1
 800f9b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f9c4:	78fa      	ldrb	r2, [r7, #3]
 800f9c6:	4611      	mov	r1, r2
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fa f911 	bl	8009bf0 <HAL_PCD_EP_Close>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9d2:	7bfb      	ldrb	r3, [r7, #15]
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f000 f8e9 	bl	800fbac <USBD_Get_USB_Status>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9de:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3710      	adds	r7, #16
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b084      	sub	sp, #16
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fa02:	78fa      	ldrb	r2, [r7, #3]
 800fa04:	4611      	mov	r1, r2
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7fa f9e8 	bl	8009ddc <HAL_PCD_EP_SetStall>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa10:	7bfb      	ldrb	r3, [r7, #15]
 800fa12:	4618      	mov	r0, r3
 800fa14:	f000 f8ca 	bl	800fbac <USBD_Get_USB_Status>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3710      	adds	r7, #16
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}

0800fa26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa26:	b580      	push	{r7, lr}
 800fa28:	b084      	sub	sp, #16
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	6078      	str	r0, [r7, #4]
 800fa2e:	460b      	mov	r3, r1
 800fa30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa32:	2300      	movs	r3, #0
 800fa34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa36:	2300      	movs	r3, #0
 800fa38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fa40:	78fa      	ldrb	r2, [r7, #3]
 800fa42:	4611      	mov	r1, r2
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7fa fa2d 	bl	8009ea4 <HAL_PCD_EP_ClrStall>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa4e:	7bfb      	ldrb	r3, [r7, #15]
 800fa50:	4618      	mov	r0, r3
 800fa52:	f000 f8ab 	bl	800fbac <USBD_Get_USB_Status>
 800fa56:	4603      	mov	r3, r0
 800fa58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3710      	adds	r7, #16
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b085      	sub	sp, #20
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	460b      	mov	r3, r1
 800fa6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fa76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fa78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	da0b      	bge.n	800fa98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fa80:	78fb      	ldrb	r3, [r7, #3]
 800fa82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa86:	68f9      	ldr	r1, [r7, #12]
 800fa88:	4613      	mov	r3, r2
 800fa8a:	00db      	lsls	r3, r3, #3
 800fa8c:	1a9b      	subs	r3, r3, r2
 800fa8e:	009b      	lsls	r3, r3, #2
 800fa90:	440b      	add	r3, r1
 800fa92:	333e      	adds	r3, #62	; 0x3e
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	e00b      	b.n	800fab0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fa98:	78fb      	ldrb	r3, [r7, #3]
 800fa9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa9e:	68f9      	ldr	r1, [r7, #12]
 800faa0:	4613      	mov	r3, r2
 800faa2:	00db      	lsls	r3, r3, #3
 800faa4:	1a9b      	subs	r3, r3, r2
 800faa6:	009b      	lsls	r3, r3, #2
 800faa8:	440b      	add	r3, r1
 800faaa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800faae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3714      	adds	r7, #20
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bc80      	pop	{r7}
 800fab8:	4770      	bx	lr

0800faba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800faba:	b580      	push	{r7, lr}
 800fabc:	b084      	sub	sp, #16
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	6078      	str	r0, [r7, #4]
 800fac2:	460b      	mov	r3, r1
 800fac4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fac6:	2300      	movs	r3, #0
 800fac8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800faca:	2300      	movs	r3, #0
 800facc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fad4:	78fa      	ldrb	r2, [r7, #3]
 800fad6:	4611      	mov	r1, r2
 800fad8:	4618      	mov	r0, r3
 800fada:	f7f9 fffc 	bl	8009ad6 <HAL_PCD_SetAddress>
 800fade:	4603      	mov	r3, r0
 800fae0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fae2:	7bfb      	ldrb	r3, [r7, #15]
 800fae4:	4618      	mov	r0, r3
 800fae6:	f000 f861 	bl	800fbac <USBD_Get_USB_Status>
 800faea:	4603      	mov	r3, r0
 800faec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faee:	7bbb      	ldrb	r3, [r7, #14]
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3710      	adds	r7, #16
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b086      	sub	sp, #24
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	60f8      	str	r0, [r7, #12]
 800fb00:	607a      	str	r2, [r7, #4]
 800fb02:	461a      	mov	r2, r3
 800fb04:	460b      	mov	r3, r1
 800fb06:	72fb      	strb	r3, [r7, #11]
 800fb08:	4613      	mov	r3, r2
 800fb0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb10:	2300      	movs	r3, #0
 800fb12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800fb1a:	893b      	ldrh	r3, [r7, #8]
 800fb1c:	7af9      	ldrb	r1, [r7, #11]
 800fb1e:	687a      	ldr	r2, [r7, #4]
 800fb20:	f7fa f912 	bl	8009d48 <HAL_PCD_EP_Transmit>
 800fb24:	4603      	mov	r3, r0
 800fb26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb28:	7dfb      	ldrb	r3, [r7, #23]
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f000 f83e 	bl	800fbac <USBD_Get_USB_Status>
 800fb30:	4603      	mov	r3, r0
 800fb32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fb34:	7dbb      	ldrb	r3, [r7, #22]
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3718      	adds	r7, #24
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}

0800fb3e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800fb3e:	b580      	push	{r7, lr}
 800fb40:	b086      	sub	sp, #24
 800fb42:	af00      	add	r7, sp, #0
 800fb44:	60f8      	str	r0, [r7, #12]
 800fb46:	607a      	str	r2, [r7, #4]
 800fb48:	461a      	mov	r2, r3
 800fb4a:	460b      	mov	r3, r1
 800fb4c:	72fb      	strb	r3, [r7, #11]
 800fb4e:	4613      	mov	r3, r2
 800fb50:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb52:	2300      	movs	r3, #0
 800fb54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb56:	2300      	movs	r3, #0
 800fb58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800fb60:	893b      	ldrh	r3, [r7, #8]
 800fb62:	7af9      	ldrb	r1, [r7, #11]
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	f7fa f88d 	bl	8009c84 <HAL_PCD_EP_Receive>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb6e:	7dfb      	ldrb	r3, [r7, #23]
 800fb70:	4618      	mov	r0, r3
 800fb72:	f000 f81b 	bl	800fbac <USBD_Get_USB_Status>
 800fb76:	4603      	mov	r3, r0
 800fb78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fb7a:	7dbb      	ldrb	r3, [r7, #22]
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3718      	adds	r7, #24
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b082      	sub	sp, #8
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	460b      	mov	r3, r1
 800fb8e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fb96:	78fa      	ldrb	r2, [r7, #3]
 800fb98:	4611      	mov	r1, r2
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7fa f8bd 	bl	8009d1a <HAL_PCD_EP_GetRxCount>
 800fba0:	4603      	mov	r3, r0
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3708      	adds	r7, #8
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
	...

0800fbac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fbac:	b480      	push	{r7}
 800fbae:	b085      	sub	sp, #20
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fbba:	79fb      	ldrb	r3, [r7, #7]
 800fbbc:	2b03      	cmp	r3, #3
 800fbbe:	d817      	bhi.n	800fbf0 <USBD_Get_USB_Status+0x44>
 800fbc0:	a201      	add	r2, pc, #4	; (adr r2, 800fbc8 <USBD_Get_USB_Status+0x1c>)
 800fbc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc6:	bf00      	nop
 800fbc8:	0800fbd9 	.word	0x0800fbd9
 800fbcc:	0800fbdf 	.word	0x0800fbdf
 800fbd0:	0800fbe5 	.word	0x0800fbe5
 800fbd4:	0800fbeb 	.word	0x0800fbeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	73fb      	strb	r3, [r7, #15]
    break;
 800fbdc:	e00b      	b.n	800fbf6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fbde:	2302      	movs	r3, #2
 800fbe0:	73fb      	strb	r3, [r7, #15]
    break;
 800fbe2:	e008      	b.n	800fbf6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	73fb      	strb	r3, [r7, #15]
    break;
 800fbe8:	e005      	b.n	800fbf6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fbea:	2302      	movs	r3, #2
 800fbec:	73fb      	strb	r3, [r7, #15]
    break;
 800fbee:	e002      	b.n	800fbf6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fbf0:	2302      	movs	r3, #2
 800fbf2:	73fb      	strb	r3, [r7, #15]
    break;
 800fbf4:	bf00      	nop
  }
  return usb_status;
 800fbf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3714      	adds	r7, #20
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bc80      	pop	{r7}
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop

0800fc04 <cos>:
 800fc04:	b530      	push	{r4, r5, lr}
 800fc06:	4a1e      	ldr	r2, [pc, #120]	; (800fc80 <cos+0x7c>)
 800fc08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fc0c:	4293      	cmp	r3, r2
 800fc0e:	b087      	sub	sp, #28
 800fc10:	dc04      	bgt.n	800fc1c <cos+0x18>
 800fc12:	2200      	movs	r2, #0
 800fc14:	2300      	movs	r3, #0
 800fc16:	f000 ff23 	bl	8010a60 <__kernel_cos>
 800fc1a:	e006      	b.n	800fc2a <cos+0x26>
 800fc1c:	4a19      	ldr	r2, [pc, #100]	; (800fc84 <cos+0x80>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	dd05      	ble.n	800fc2e <cos+0x2a>
 800fc22:	4602      	mov	r2, r0
 800fc24:	460b      	mov	r3, r1
 800fc26:	f7f0 fadb 	bl	80001e0 <__aeabi_dsub>
 800fc2a:	b007      	add	sp, #28
 800fc2c:	bd30      	pop	{r4, r5, pc}
 800fc2e:	aa02      	add	r2, sp, #8
 800fc30:	f000 fa32 	bl	8010098 <__ieee754_rem_pio2>
 800fc34:	f000 0003 	and.w	r0, r0, #3
 800fc38:	2801      	cmp	r0, #1
 800fc3a:	d007      	beq.n	800fc4c <cos+0x48>
 800fc3c:	2802      	cmp	r0, #2
 800fc3e:	d00f      	beq.n	800fc60 <cos+0x5c>
 800fc40:	b9a8      	cbnz	r0, 800fc6e <cos+0x6a>
 800fc42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc4a:	e7e4      	b.n	800fc16 <cos+0x12>
 800fc4c:	9000      	str	r0, [sp, #0]
 800fc4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc56:	f001 fb0b 	bl	8011270 <__kernel_sin>
 800fc5a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800fc5e:	e7e4      	b.n	800fc2a <cos+0x26>
 800fc60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc68:	f000 fefa 	bl	8010a60 <__kernel_cos>
 800fc6c:	e7f5      	b.n	800fc5a <cos+0x56>
 800fc6e:	2301      	movs	r3, #1
 800fc70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc74:	9300      	str	r3, [sp, #0]
 800fc76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc7a:	f001 faf9 	bl	8011270 <__kernel_sin>
 800fc7e:	e7d4      	b.n	800fc2a <cos+0x26>
 800fc80:	3fe921fb 	.word	0x3fe921fb
 800fc84:	7fefffff 	.word	0x7fefffff

0800fc88 <sin>:
 800fc88:	b530      	push	{r4, r5, lr}
 800fc8a:	4a20      	ldr	r2, [pc, #128]	; (800fd0c <sin+0x84>)
 800fc8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fc90:	4293      	cmp	r3, r2
 800fc92:	b087      	sub	sp, #28
 800fc94:	dc06      	bgt.n	800fca4 <sin+0x1c>
 800fc96:	2300      	movs	r3, #0
 800fc98:	2200      	movs	r2, #0
 800fc9a:	9300      	str	r3, [sp, #0]
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	f001 fae7 	bl	8011270 <__kernel_sin>
 800fca2:	e006      	b.n	800fcb2 <sin+0x2a>
 800fca4:	4a1a      	ldr	r2, [pc, #104]	; (800fd10 <sin+0x88>)
 800fca6:	4293      	cmp	r3, r2
 800fca8:	dd05      	ble.n	800fcb6 <sin+0x2e>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	460b      	mov	r3, r1
 800fcae:	f7f0 fa97 	bl	80001e0 <__aeabi_dsub>
 800fcb2:	b007      	add	sp, #28
 800fcb4:	bd30      	pop	{r4, r5, pc}
 800fcb6:	aa02      	add	r2, sp, #8
 800fcb8:	f000 f9ee 	bl	8010098 <__ieee754_rem_pio2>
 800fcbc:	f000 0003 	and.w	r0, r0, #3
 800fcc0:	2801      	cmp	r0, #1
 800fcc2:	d009      	beq.n	800fcd8 <sin+0x50>
 800fcc4:	2802      	cmp	r0, #2
 800fcc6:	d00e      	beq.n	800fce6 <sin+0x5e>
 800fcc8:	b9c0      	cbnz	r0, 800fcfc <sin+0x74>
 800fcca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcce:	2301      	movs	r3, #1
 800fcd0:	9300      	str	r3, [sp, #0]
 800fcd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcd6:	e7e2      	b.n	800fc9e <sin+0x16>
 800fcd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fce0:	f000 febe 	bl	8010a60 <__kernel_cos>
 800fce4:	e7e5      	b.n	800fcb2 <sin+0x2a>
 800fce6:	2301      	movs	r3, #1
 800fce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcec:	9300      	str	r3, [sp, #0]
 800fcee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcf2:	f001 fabd 	bl	8011270 <__kernel_sin>
 800fcf6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800fcfa:	e7da      	b.n	800fcb2 <sin+0x2a>
 800fcfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd04:	f000 feac 	bl	8010a60 <__kernel_cos>
 800fd08:	e7f5      	b.n	800fcf6 <sin+0x6e>
 800fd0a:	bf00      	nop
 800fd0c:	3fe921fb 	.word	0x3fe921fb
 800fd10:	7fefffff 	.word	0x7fefffff

0800fd14 <atanf>:
 800fd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd18:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800fd1c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800fd20:	4604      	mov	r4, r0
 800fd22:	4680      	mov	r8, r0
 800fd24:	db0e      	blt.n	800fd44 <atanf+0x30>
 800fd26:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800fd2a:	dd04      	ble.n	800fd36 <atanf+0x22>
 800fd2c:	4601      	mov	r1, r0
 800fd2e:	f7f0 ff5d 	bl	8000bec <__addsf3>
 800fd32:	4604      	mov	r4, r0
 800fd34:	e003      	b.n	800fd3e <atanf+0x2a>
 800fd36:	2800      	cmp	r0, #0
 800fd38:	f300 80ce 	bgt.w	800fed8 <atanf+0x1c4>
 800fd3c:	4c67      	ldr	r4, [pc, #412]	; (800fedc <atanf+0x1c8>)
 800fd3e:	4620      	mov	r0, r4
 800fd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd44:	4b66      	ldr	r3, [pc, #408]	; (800fee0 <atanf+0x1cc>)
 800fd46:	429d      	cmp	r5, r3
 800fd48:	dc0e      	bgt.n	800fd68 <atanf+0x54>
 800fd4a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800fd4e:	da08      	bge.n	800fd62 <atanf+0x4e>
 800fd50:	4964      	ldr	r1, [pc, #400]	; (800fee4 <atanf+0x1d0>)
 800fd52:	f7f0 ff4b 	bl	8000bec <__addsf3>
 800fd56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fd5a:	f7f1 fa0b 	bl	8001174 <__aeabi_fcmpgt>
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	d1ed      	bne.n	800fd3e <atanf+0x2a>
 800fd62:	f04f 36ff 	mov.w	r6, #4294967295
 800fd66:	e01c      	b.n	800fda2 <atanf+0x8e>
 800fd68:	f000 f914 	bl	800ff94 <fabsf>
 800fd6c:	4b5e      	ldr	r3, [pc, #376]	; (800fee8 <atanf+0x1d4>)
 800fd6e:	4604      	mov	r4, r0
 800fd70:	429d      	cmp	r5, r3
 800fd72:	dc7c      	bgt.n	800fe6e <atanf+0x15a>
 800fd74:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800fd78:	429d      	cmp	r5, r3
 800fd7a:	dc67      	bgt.n	800fe4c <atanf+0x138>
 800fd7c:	4601      	mov	r1, r0
 800fd7e:	f7f0 ff35 	bl	8000bec <__addsf3>
 800fd82:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fd86:	f7f0 ff2f 	bl	8000be8 <__aeabi_fsub>
 800fd8a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800fd8e:	4605      	mov	r5, r0
 800fd90:	4620      	mov	r0, r4
 800fd92:	f7f0 ff2b 	bl	8000bec <__addsf3>
 800fd96:	4601      	mov	r1, r0
 800fd98:	4628      	mov	r0, r5
 800fd9a:	f7f1 f8e3 	bl	8000f64 <__aeabi_fdiv>
 800fd9e:	2600      	movs	r6, #0
 800fda0:	4604      	mov	r4, r0
 800fda2:	4621      	mov	r1, r4
 800fda4:	4620      	mov	r0, r4
 800fda6:	f7f1 f829 	bl	8000dfc <__aeabi_fmul>
 800fdaa:	4601      	mov	r1, r0
 800fdac:	4607      	mov	r7, r0
 800fdae:	f7f1 f825 	bl	8000dfc <__aeabi_fmul>
 800fdb2:	4605      	mov	r5, r0
 800fdb4:	494d      	ldr	r1, [pc, #308]	; (800feec <atanf+0x1d8>)
 800fdb6:	f7f1 f821 	bl	8000dfc <__aeabi_fmul>
 800fdba:	494d      	ldr	r1, [pc, #308]	; (800fef0 <atanf+0x1dc>)
 800fdbc:	f7f0 ff16 	bl	8000bec <__addsf3>
 800fdc0:	4629      	mov	r1, r5
 800fdc2:	f7f1 f81b 	bl	8000dfc <__aeabi_fmul>
 800fdc6:	494b      	ldr	r1, [pc, #300]	; (800fef4 <atanf+0x1e0>)
 800fdc8:	f7f0 ff10 	bl	8000bec <__addsf3>
 800fdcc:	4629      	mov	r1, r5
 800fdce:	f7f1 f815 	bl	8000dfc <__aeabi_fmul>
 800fdd2:	4949      	ldr	r1, [pc, #292]	; (800fef8 <atanf+0x1e4>)
 800fdd4:	f7f0 ff0a 	bl	8000bec <__addsf3>
 800fdd8:	4629      	mov	r1, r5
 800fdda:	f7f1 f80f 	bl	8000dfc <__aeabi_fmul>
 800fdde:	4947      	ldr	r1, [pc, #284]	; (800fefc <atanf+0x1e8>)
 800fde0:	f7f0 ff04 	bl	8000bec <__addsf3>
 800fde4:	4629      	mov	r1, r5
 800fde6:	f7f1 f809 	bl	8000dfc <__aeabi_fmul>
 800fdea:	4945      	ldr	r1, [pc, #276]	; (800ff00 <atanf+0x1ec>)
 800fdec:	f7f0 fefe 	bl	8000bec <__addsf3>
 800fdf0:	4639      	mov	r1, r7
 800fdf2:	f7f1 f803 	bl	8000dfc <__aeabi_fmul>
 800fdf6:	4943      	ldr	r1, [pc, #268]	; (800ff04 <atanf+0x1f0>)
 800fdf8:	4607      	mov	r7, r0
 800fdfa:	4628      	mov	r0, r5
 800fdfc:	f7f0 fffe 	bl	8000dfc <__aeabi_fmul>
 800fe00:	4941      	ldr	r1, [pc, #260]	; (800ff08 <atanf+0x1f4>)
 800fe02:	f7f0 fef1 	bl	8000be8 <__aeabi_fsub>
 800fe06:	4629      	mov	r1, r5
 800fe08:	f7f0 fff8 	bl	8000dfc <__aeabi_fmul>
 800fe0c:	493f      	ldr	r1, [pc, #252]	; (800ff0c <atanf+0x1f8>)
 800fe0e:	f7f0 feeb 	bl	8000be8 <__aeabi_fsub>
 800fe12:	4629      	mov	r1, r5
 800fe14:	f7f0 fff2 	bl	8000dfc <__aeabi_fmul>
 800fe18:	493d      	ldr	r1, [pc, #244]	; (800ff10 <atanf+0x1fc>)
 800fe1a:	f7f0 fee5 	bl	8000be8 <__aeabi_fsub>
 800fe1e:	4629      	mov	r1, r5
 800fe20:	f7f0 ffec 	bl	8000dfc <__aeabi_fmul>
 800fe24:	493b      	ldr	r1, [pc, #236]	; (800ff14 <atanf+0x200>)
 800fe26:	f7f0 fedf 	bl	8000be8 <__aeabi_fsub>
 800fe2a:	4629      	mov	r1, r5
 800fe2c:	f7f0 ffe6 	bl	8000dfc <__aeabi_fmul>
 800fe30:	4601      	mov	r1, r0
 800fe32:	4638      	mov	r0, r7
 800fe34:	f7f0 feda 	bl	8000bec <__addsf3>
 800fe38:	4621      	mov	r1, r4
 800fe3a:	f7f0 ffdf 	bl	8000dfc <__aeabi_fmul>
 800fe3e:	1c73      	adds	r3, r6, #1
 800fe40:	4601      	mov	r1, r0
 800fe42:	d133      	bne.n	800feac <atanf+0x198>
 800fe44:	4620      	mov	r0, r4
 800fe46:	f7f0 fecf 	bl	8000be8 <__aeabi_fsub>
 800fe4a:	e772      	b.n	800fd32 <atanf+0x1e>
 800fe4c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fe50:	f7f0 feca 	bl	8000be8 <__aeabi_fsub>
 800fe54:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fe58:	4605      	mov	r5, r0
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	f7f0 fec6 	bl	8000bec <__addsf3>
 800fe60:	4601      	mov	r1, r0
 800fe62:	4628      	mov	r0, r5
 800fe64:	f7f1 f87e 	bl	8000f64 <__aeabi_fdiv>
 800fe68:	2601      	movs	r6, #1
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	e799      	b.n	800fda2 <atanf+0x8e>
 800fe6e:	4b2a      	ldr	r3, [pc, #168]	; (800ff18 <atanf+0x204>)
 800fe70:	429d      	cmp	r5, r3
 800fe72:	dc14      	bgt.n	800fe9e <atanf+0x18a>
 800fe74:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800fe78:	f7f0 feb6 	bl	8000be8 <__aeabi_fsub>
 800fe7c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800fe80:	4605      	mov	r5, r0
 800fe82:	4620      	mov	r0, r4
 800fe84:	f7f0 ffba 	bl	8000dfc <__aeabi_fmul>
 800fe88:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800fe8c:	f7f0 feae 	bl	8000bec <__addsf3>
 800fe90:	4601      	mov	r1, r0
 800fe92:	4628      	mov	r0, r5
 800fe94:	f7f1 f866 	bl	8000f64 <__aeabi_fdiv>
 800fe98:	2602      	movs	r6, #2
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	e781      	b.n	800fda2 <atanf+0x8e>
 800fe9e:	4601      	mov	r1, r0
 800fea0:	481e      	ldr	r0, [pc, #120]	; (800ff1c <atanf+0x208>)
 800fea2:	f7f1 f85f 	bl	8000f64 <__aeabi_fdiv>
 800fea6:	2603      	movs	r6, #3
 800fea8:	4604      	mov	r4, r0
 800feaa:	e77a      	b.n	800fda2 <atanf+0x8e>
 800feac:	4b1c      	ldr	r3, [pc, #112]	; (800ff20 <atanf+0x20c>)
 800feae:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800feb2:	f7f0 fe99 	bl	8000be8 <__aeabi_fsub>
 800feb6:	4621      	mov	r1, r4
 800feb8:	f7f0 fe96 	bl	8000be8 <__aeabi_fsub>
 800febc:	4b19      	ldr	r3, [pc, #100]	; (800ff24 <atanf+0x210>)
 800febe:	4601      	mov	r1, r0
 800fec0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fec4:	f7f0 fe90 	bl	8000be8 <__aeabi_fsub>
 800fec8:	f1b8 0f00 	cmp.w	r8, #0
 800fecc:	4604      	mov	r4, r0
 800fece:	f6bf af36 	bge.w	800fd3e <atanf+0x2a>
 800fed2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800fed6:	e72c      	b.n	800fd32 <atanf+0x1e>
 800fed8:	4c13      	ldr	r4, [pc, #76]	; (800ff28 <atanf+0x214>)
 800feda:	e730      	b.n	800fd3e <atanf+0x2a>
 800fedc:	bfc90fdb 	.word	0xbfc90fdb
 800fee0:	3edfffff 	.word	0x3edfffff
 800fee4:	7149f2ca 	.word	0x7149f2ca
 800fee8:	3f97ffff 	.word	0x3f97ffff
 800feec:	3c8569d7 	.word	0x3c8569d7
 800fef0:	3d4bda59 	.word	0x3d4bda59
 800fef4:	3d886b35 	.word	0x3d886b35
 800fef8:	3dba2e6e 	.word	0x3dba2e6e
 800fefc:	3e124925 	.word	0x3e124925
 800ff00:	3eaaaaab 	.word	0x3eaaaaab
 800ff04:	bd15a221 	.word	0xbd15a221
 800ff08:	3d6ef16b 	.word	0x3d6ef16b
 800ff0c:	3d9d8795 	.word	0x3d9d8795
 800ff10:	3de38e38 	.word	0x3de38e38
 800ff14:	3e4ccccd 	.word	0x3e4ccccd
 800ff18:	401bffff 	.word	0x401bffff
 800ff1c:	bf800000 	.word	0xbf800000
 800ff20:	080155a4 	.word	0x080155a4
 800ff24:	08015594 	.word	0x08015594
 800ff28:	3fc90fdb 	.word	0x3fc90fdb

0800ff2c <cosf>:
 800ff2c:	b507      	push	{r0, r1, r2, lr}
 800ff2e:	4a18      	ldr	r2, [pc, #96]	; (800ff90 <cosf+0x64>)
 800ff30:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ff34:	4293      	cmp	r3, r2
 800ff36:	4601      	mov	r1, r0
 800ff38:	dc03      	bgt.n	800ff42 <cosf+0x16>
 800ff3a:	2100      	movs	r1, #0
 800ff3c:	f001 fa4e 	bl	80113dc <__kernel_cosf>
 800ff40:	e004      	b.n	800ff4c <cosf+0x20>
 800ff42:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ff46:	db04      	blt.n	800ff52 <cosf+0x26>
 800ff48:	f7f0 fe4e 	bl	8000be8 <__aeabi_fsub>
 800ff4c:	b003      	add	sp, #12
 800ff4e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff52:	4669      	mov	r1, sp
 800ff54:	f000 fbd4 	bl	8010700 <__ieee754_rem_pio2f>
 800ff58:	f000 0203 	and.w	r2, r0, #3
 800ff5c:	2a01      	cmp	r2, #1
 800ff5e:	d005      	beq.n	800ff6c <cosf+0x40>
 800ff60:	2a02      	cmp	r2, #2
 800ff62:	d00a      	beq.n	800ff7a <cosf+0x4e>
 800ff64:	b972      	cbnz	r2, 800ff84 <cosf+0x58>
 800ff66:	9901      	ldr	r1, [sp, #4]
 800ff68:	9800      	ldr	r0, [sp, #0]
 800ff6a:	e7e7      	b.n	800ff3c <cosf+0x10>
 800ff6c:	9901      	ldr	r1, [sp, #4]
 800ff6e:	9800      	ldr	r0, [sp, #0]
 800ff70:	f001 fd6a 	bl	8011a48 <__kernel_sinf>
 800ff74:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ff78:	e7e8      	b.n	800ff4c <cosf+0x20>
 800ff7a:	9901      	ldr	r1, [sp, #4]
 800ff7c:	9800      	ldr	r0, [sp, #0]
 800ff7e:	f001 fa2d 	bl	80113dc <__kernel_cosf>
 800ff82:	e7f7      	b.n	800ff74 <cosf+0x48>
 800ff84:	2201      	movs	r2, #1
 800ff86:	9901      	ldr	r1, [sp, #4]
 800ff88:	9800      	ldr	r0, [sp, #0]
 800ff8a:	f001 fd5d 	bl	8011a48 <__kernel_sinf>
 800ff8e:	e7dd      	b.n	800ff4c <cosf+0x20>
 800ff90:	3f490fd8 	.word	0x3f490fd8

0800ff94 <fabsf>:
 800ff94:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ff98:	4770      	bx	lr
	...

0800ff9c <sinf>:
 800ff9c:	b507      	push	{r0, r1, r2, lr}
 800ff9e:	4a19      	ldr	r2, [pc, #100]	; (8010004 <sinf+0x68>)
 800ffa0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	4601      	mov	r1, r0
 800ffa8:	dc04      	bgt.n	800ffb4 <sinf+0x18>
 800ffaa:	2200      	movs	r2, #0
 800ffac:	2100      	movs	r1, #0
 800ffae:	f001 fd4b 	bl	8011a48 <__kernel_sinf>
 800ffb2:	e004      	b.n	800ffbe <sinf+0x22>
 800ffb4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ffb8:	db04      	blt.n	800ffc4 <sinf+0x28>
 800ffba:	f7f0 fe15 	bl	8000be8 <__aeabi_fsub>
 800ffbe:	b003      	add	sp, #12
 800ffc0:	f85d fb04 	ldr.w	pc, [sp], #4
 800ffc4:	4669      	mov	r1, sp
 800ffc6:	f000 fb9b 	bl	8010700 <__ieee754_rem_pio2f>
 800ffca:	f000 0003 	and.w	r0, r0, #3
 800ffce:	2801      	cmp	r0, #1
 800ffd0:	d006      	beq.n	800ffe0 <sinf+0x44>
 800ffd2:	2802      	cmp	r0, #2
 800ffd4:	d009      	beq.n	800ffea <sinf+0x4e>
 800ffd6:	b980      	cbnz	r0, 800fffa <sinf+0x5e>
 800ffd8:	2201      	movs	r2, #1
 800ffda:	9901      	ldr	r1, [sp, #4]
 800ffdc:	9800      	ldr	r0, [sp, #0]
 800ffde:	e7e6      	b.n	800ffae <sinf+0x12>
 800ffe0:	9901      	ldr	r1, [sp, #4]
 800ffe2:	9800      	ldr	r0, [sp, #0]
 800ffe4:	f001 f9fa 	bl	80113dc <__kernel_cosf>
 800ffe8:	e7e9      	b.n	800ffbe <sinf+0x22>
 800ffea:	2201      	movs	r2, #1
 800ffec:	9901      	ldr	r1, [sp, #4]
 800ffee:	9800      	ldr	r0, [sp, #0]
 800fff0:	f001 fd2a 	bl	8011a48 <__kernel_sinf>
 800fff4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800fff8:	e7e1      	b.n	800ffbe <sinf+0x22>
 800fffa:	9901      	ldr	r1, [sp, #4]
 800fffc:	9800      	ldr	r0, [sp, #0]
 800fffe:	f001 f9ed 	bl	80113dc <__kernel_cosf>
 8010002:	e7f7      	b.n	800fff4 <sinf+0x58>
 8010004:	3f490fd8 	.word	0x3f490fd8

08010008 <asinf>:
 8010008:	b538      	push	{r3, r4, r5, lr}
 801000a:	4604      	mov	r4, r0
 801000c:	f000 fa34 	bl	8010478 <__ieee754_asinf>
 8010010:	4b0e      	ldr	r3, [pc, #56]	; (801004c <asinf+0x44>)
 8010012:	4605      	mov	r5, r0
 8010014:	f993 3000 	ldrsb.w	r3, [r3]
 8010018:	3301      	adds	r3, #1
 801001a:	d015      	beq.n	8010048 <asinf+0x40>
 801001c:	4621      	mov	r1, r4
 801001e:	4620      	mov	r0, r4
 8010020:	f7f1 f8b2 	bl	8001188 <__aeabi_fcmpun>
 8010024:	b980      	cbnz	r0, 8010048 <asinf+0x40>
 8010026:	4620      	mov	r0, r4
 8010028:	f7ff ffb4 	bl	800ff94 <fabsf>
 801002c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010030:	f7f1 f8a0 	bl	8001174 <__aeabi_fcmpgt>
 8010034:	b140      	cbz	r0, 8010048 <asinf+0x40>
 8010036:	f001 ff1b 	bl	8011e70 <__errno>
 801003a:	2321      	movs	r3, #33	; 0x21
 801003c:	6003      	str	r3, [r0, #0]
 801003e:	4804      	ldr	r0, [pc, #16]	; (8010050 <asinf+0x48>)
 8010040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010044:	f001 bec4 	b.w	8011dd0 <nanf>
 8010048:	4628      	mov	r0, r5
 801004a:	bd38      	pop	{r3, r4, r5, pc}
 801004c:	200001de 	.word	0x200001de
 8010050:	08015dd8 	.word	0x08015dd8

08010054 <sqrtf>:
 8010054:	b538      	push	{r3, r4, r5, lr}
 8010056:	4605      	mov	r5, r0
 8010058:	f000 fcb0 	bl	80109bc <__ieee754_sqrtf>
 801005c:	4b0d      	ldr	r3, [pc, #52]	; (8010094 <sqrtf+0x40>)
 801005e:	4604      	mov	r4, r0
 8010060:	f993 3000 	ldrsb.w	r3, [r3]
 8010064:	3301      	adds	r3, #1
 8010066:	d012      	beq.n	801008e <sqrtf+0x3a>
 8010068:	4629      	mov	r1, r5
 801006a:	4628      	mov	r0, r5
 801006c:	f7f1 f88c 	bl	8001188 <__aeabi_fcmpun>
 8010070:	b968      	cbnz	r0, 801008e <sqrtf+0x3a>
 8010072:	2100      	movs	r1, #0
 8010074:	4628      	mov	r0, r5
 8010076:	f7f1 f85f 	bl	8001138 <__aeabi_fcmplt>
 801007a:	b140      	cbz	r0, 801008e <sqrtf+0x3a>
 801007c:	f001 fef8 	bl	8011e70 <__errno>
 8010080:	2321      	movs	r3, #33	; 0x21
 8010082:	2100      	movs	r1, #0
 8010084:	6003      	str	r3, [r0, #0]
 8010086:	4608      	mov	r0, r1
 8010088:	f7f0 ff6c 	bl	8000f64 <__aeabi_fdiv>
 801008c:	4604      	mov	r4, r0
 801008e:	4620      	mov	r0, r4
 8010090:	bd38      	pop	{r3, r4, r5, pc}
 8010092:	bf00      	nop
 8010094:	200001de 	.word	0x200001de

08010098 <__ieee754_rem_pio2>:
 8010098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801009c:	4614      	mov	r4, r2
 801009e:	4ac4      	ldr	r2, [pc, #784]	; (80103b0 <__ieee754_rem_pio2+0x318>)
 80100a0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80100a4:	b08d      	sub	sp, #52	; 0x34
 80100a6:	4592      	cmp	sl, r2
 80100a8:	9104      	str	r1, [sp, #16]
 80100aa:	dc07      	bgt.n	80100bc <__ieee754_rem_pio2+0x24>
 80100ac:	2200      	movs	r2, #0
 80100ae:	2300      	movs	r3, #0
 80100b0:	e9c4 0100 	strd	r0, r1, [r4]
 80100b4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80100b8:	2500      	movs	r5, #0
 80100ba:	e024      	b.n	8010106 <__ieee754_rem_pio2+0x6e>
 80100bc:	4abd      	ldr	r2, [pc, #756]	; (80103b4 <__ieee754_rem_pio2+0x31c>)
 80100be:	4592      	cmp	sl, r2
 80100c0:	dc72      	bgt.n	80101a8 <__ieee754_rem_pio2+0x110>
 80100c2:	9b04      	ldr	r3, [sp, #16]
 80100c4:	4dbc      	ldr	r5, [pc, #752]	; (80103b8 <__ieee754_rem_pio2+0x320>)
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	a3ab      	add	r3, pc, #684	; (adr r3, 8010378 <__ieee754_rem_pio2+0x2e0>)
 80100ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ce:	dd36      	ble.n	801013e <__ieee754_rem_pio2+0xa6>
 80100d0:	f7f0 f886 	bl	80001e0 <__aeabi_dsub>
 80100d4:	45aa      	cmp	sl, r5
 80100d6:	4606      	mov	r6, r0
 80100d8:	460f      	mov	r7, r1
 80100da:	d018      	beq.n	801010e <__ieee754_rem_pio2+0x76>
 80100dc:	a3a8      	add	r3, pc, #672	; (adr r3, 8010380 <__ieee754_rem_pio2+0x2e8>)
 80100de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e2:	f7f0 f87d 	bl	80001e0 <__aeabi_dsub>
 80100e6:	4602      	mov	r2, r0
 80100e8:	460b      	mov	r3, r1
 80100ea:	4630      	mov	r0, r6
 80100ec:	e9c4 2300 	strd	r2, r3, [r4]
 80100f0:	4639      	mov	r1, r7
 80100f2:	f7f0 f875 	bl	80001e0 <__aeabi_dsub>
 80100f6:	a3a2      	add	r3, pc, #648	; (adr r3, 8010380 <__ieee754_rem_pio2+0x2e8>)
 80100f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fc:	f7f0 f870 	bl	80001e0 <__aeabi_dsub>
 8010100:	2501      	movs	r5, #1
 8010102:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010106:	4628      	mov	r0, r5
 8010108:	b00d      	add	sp, #52	; 0x34
 801010a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801010e:	a39e      	add	r3, pc, #632	; (adr r3, 8010388 <__ieee754_rem_pio2+0x2f0>)
 8010110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010114:	f7f0 f864 	bl	80001e0 <__aeabi_dsub>
 8010118:	a39d      	add	r3, pc, #628	; (adr r3, 8010390 <__ieee754_rem_pio2+0x2f8>)
 801011a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011e:	4606      	mov	r6, r0
 8010120:	460f      	mov	r7, r1
 8010122:	f7f0 f85d 	bl	80001e0 <__aeabi_dsub>
 8010126:	4602      	mov	r2, r0
 8010128:	460b      	mov	r3, r1
 801012a:	4630      	mov	r0, r6
 801012c:	e9c4 2300 	strd	r2, r3, [r4]
 8010130:	4639      	mov	r1, r7
 8010132:	f7f0 f855 	bl	80001e0 <__aeabi_dsub>
 8010136:	a396      	add	r3, pc, #600	; (adr r3, 8010390 <__ieee754_rem_pio2+0x2f8>)
 8010138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801013c:	e7de      	b.n	80100fc <__ieee754_rem_pio2+0x64>
 801013e:	f7f0 f851 	bl	80001e4 <__adddf3>
 8010142:	45aa      	cmp	sl, r5
 8010144:	4606      	mov	r6, r0
 8010146:	460f      	mov	r7, r1
 8010148:	d016      	beq.n	8010178 <__ieee754_rem_pio2+0xe0>
 801014a:	a38d      	add	r3, pc, #564	; (adr r3, 8010380 <__ieee754_rem_pio2+0x2e8>)
 801014c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010150:	f7f0 f848 	bl	80001e4 <__adddf3>
 8010154:	4602      	mov	r2, r0
 8010156:	460b      	mov	r3, r1
 8010158:	4630      	mov	r0, r6
 801015a:	e9c4 2300 	strd	r2, r3, [r4]
 801015e:	4639      	mov	r1, r7
 8010160:	f7f0 f83e 	bl	80001e0 <__aeabi_dsub>
 8010164:	a386      	add	r3, pc, #536	; (adr r3, 8010380 <__ieee754_rem_pio2+0x2e8>)
 8010166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801016a:	f7f0 f83b 	bl	80001e4 <__adddf3>
 801016e:	f04f 35ff 	mov.w	r5, #4294967295
 8010172:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010176:	e7c6      	b.n	8010106 <__ieee754_rem_pio2+0x6e>
 8010178:	a383      	add	r3, pc, #524	; (adr r3, 8010388 <__ieee754_rem_pio2+0x2f0>)
 801017a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017e:	f7f0 f831 	bl	80001e4 <__adddf3>
 8010182:	a383      	add	r3, pc, #524	; (adr r3, 8010390 <__ieee754_rem_pio2+0x2f8>)
 8010184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010188:	4606      	mov	r6, r0
 801018a:	460f      	mov	r7, r1
 801018c:	f7f0 f82a 	bl	80001e4 <__adddf3>
 8010190:	4602      	mov	r2, r0
 8010192:	460b      	mov	r3, r1
 8010194:	4630      	mov	r0, r6
 8010196:	e9c4 2300 	strd	r2, r3, [r4]
 801019a:	4639      	mov	r1, r7
 801019c:	f7f0 f820 	bl	80001e0 <__aeabi_dsub>
 80101a0:	a37b      	add	r3, pc, #492	; (adr r3, 8010390 <__ieee754_rem_pio2+0x2f8>)
 80101a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a6:	e7e0      	b.n	801016a <__ieee754_rem_pio2+0xd2>
 80101a8:	4a84      	ldr	r2, [pc, #528]	; (80103bc <__ieee754_rem_pio2+0x324>)
 80101aa:	4592      	cmp	sl, r2
 80101ac:	f300 80d5 	bgt.w	801035a <__ieee754_rem_pio2+0x2c2>
 80101b0:	f001 fcc0 	bl	8011b34 <fabs>
 80101b4:	a378      	add	r3, pc, #480	; (adr r3, 8010398 <__ieee754_rem_pio2+0x300>)
 80101b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ba:	4606      	mov	r6, r0
 80101bc:	460f      	mov	r7, r1
 80101be:	f7f0 f9c7 	bl	8000550 <__aeabi_dmul>
 80101c2:	2200      	movs	r2, #0
 80101c4:	4b7e      	ldr	r3, [pc, #504]	; (80103c0 <__ieee754_rem_pio2+0x328>)
 80101c6:	f7f0 f80d 	bl	80001e4 <__adddf3>
 80101ca:	f7f0 fc71 	bl	8000ab0 <__aeabi_d2iz>
 80101ce:	4605      	mov	r5, r0
 80101d0:	f7f0 f954 	bl	800047c <__aeabi_i2d>
 80101d4:	4602      	mov	r2, r0
 80101d6:	460b      	mov	r3, r1
 80101d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80101dc:	a366      	add	r3, pc, #408	; (adr r3, 8010378 <__ieee754_rem_pio2+0x2e0>)
 80101de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e2:	f7f0 f9b5 	bl	8000550 <__aeabi_dmul>
 80101e6:	4602      	mov	r2, r0
 80101e8:	460b      	mov	r3, r1
 80101ea:	4630      	mov	r0, r6
 80101ec:	4639      	mov	r1, r7
 80101ee:	f7ef fff7 	bl	80001e0 <__aeabi_dsub>
 80101f2:	a363      	add	r3, pc, #396	; (adr r3, 8010380 <__ieee754_rem_pio2+0x2e8>)
 80101f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f8:	4680      	mov	r8, r0
 80101fa:	4689      	mov	r9, r1
 80101fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010200:	f7f0 f9a6 	bl	8000550 <__aeabi_dmul>
 8010204:	2d1f      	cmp	r5, #31
 8010206:	4606      	mov	r6, r0
 8010208:	460f      	mov	r7, r1
 801020a:	dc0e      	bgt.n	801022a <__ieee754_rem_pio2+0x192>
 801020c:	4b6d      	ldr	r3, [pc, #436]	; (80103c4 <__ieee754_rem_pio2+0x32c>)
 801020e:	1e6a      	subs	r2, r5, #1
 8010210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010214:	4553      	cmp	r3, sl
 8010216:	d008      	beq.n	801022a <__ieee754_rem_pio2+0x192>
 8010218:	4632      	mov	r2, r6
 801021a:	463b      	mov	r3, r7
 801021c:	4640      	mov	r0, r8
 801021e:	4649      	mov	r1, r9
 8010220:	f7ef ffde 	bl	80001e0 <__aeabi_dsub>
 8010224:	e9c4 0100 	strd	r0, r1, [r4]
 8010228:	e013      	b.n	8010252 <__ieee754_rem_pio2+0x1ba>
 801022a:	463b      	mov	r3, r7
 801022c:	4632      	mov	r2, r6
 801022e:	4640      	mov	r0, r8
 8010230:	4649      	mov	r1, r9
 8010232:	f7ef ffd5 	bl	80001e0 <__aeabi_dsub>
 8010236:	ea4f 532a 	mov.w	r3, sl, asr #20
 801023a:	9305      	str	r3, [sp, #20]
 801023c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010240:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8010244:	f1ba 0f10 	cmp.w	sl, #16
 8010248:	dc1f      	bgt.n	801028a <__ieee754_rem_pio2+0x1f2>
 801024a:	4602      	mov	r2, r0
 801024c:	460b      	mov	r3, r1
 801024e:	e9c4 2300 	strd	r2, r3, [r4]
 8010252:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8010256:	4640      	mov	r0, r8
 8010258:	4653      	mov	r3, sl
 801025a:	4649      	mov	r1, r9
 801025c:	f7ef ffc0 	bl	80001e0 <__aeabi_dsub>
 8010260:	4632      	mov	r2, r6
 8010262:	463b      	mov	r3, r7
 8010264:	f7ef ffbc 	bl	80001e0 <__aeabi_dsub>
 8010268:	460b      	mov	r3, r1
 801026a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801026e:	9904      	ldr	r1, [sp, #16]
 8010270:	4602      	mov	r2, r0
 8010272:	2900      	cmp	r1, #0
 8010274:	f6bf af47 	bge.w	8010106 <__ieee754_rem_pio2+0x6e>
 8010278:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 801027c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010280:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010284:	60e3      	str	r3, [r4, #12]
 8010286:	426d      	negs	r5, r5
 8010288:	e73d      	b.n	8010106 <__ieee754_rem_pio2+0x6e>
 801028a:	a33f      	add	r3, pc, #252	; (adr r3, 8010388 <__ieee754_rem_pio2+0x2f0>)
 801028c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010294:	f7f0 f95c 	bl	8000550 <__aeabi_dmul>
 8010298:	4606      	mov	r6, r0
 801029a:	460f      	mov	r7, r1
 801029c:	4602      	mov	r2, r0
 801029e:	460b      	mov	r3, r1
 80102a0:	4640      	mov	r0, r8
 80102a2:	4649      	mov	r1, r9
 80102a4:	f7ef ff9c 	bl	80001e0 <__aeabi_dsub>
 80102a8:	4602      	mov	r2, r0
 80102aa:	460b      	mov	r3, r1
 80102ac:	4682      	mov	sl, r0
 80102ae:	468b      	mov	fp, r1
 80102b0:	4640      	mov	r0, r8
 80102b2:	4649      	mov	r1, r9
 80102b4:	f7ef ff94 	bl	80001e0 <__aeabi_dsub>
 80102b8:	4632      	mov	r2, r6
 80102ba:	463b      	mov	r3, r7
 80102bc:	f7ef ff90 	bl	80001e0 <__aeabi_dsub>
 80102c0:	a333      	add	r3, pc, #204	; (adr r3, 8010390 <__ieee754_rem_pio2+0x2f8>)
 80102c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c6:	4606      	mov	r6, r0
 80102c8:	460f      	mov	r7, r1
 80102ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102ce:	f7f0 f93f 	bl	8000550 <__aeabi_dmul>
 80102d2:	4632      	mov	r2, r6
 80102d4:	463b      	mov	r3, r7
 80102d6:	f7ef ff83 	bl	80001e0 <__aeabi_dsub>
 80102da:	4602      	mov	r2, r0
 80102dc:	460b      	mov	r3, r1
 80102de:	4606      	mov	r6, r0
 80102e0:	460f      	mov	r7, r1
 80102e2:	4650      	mov	r0, sl
 80102e4:	4659      	mov	r1, fp
 80102e6:	f7ef ff7b 	bl	80001e0 <__aeabi_dsub>
 80102ea:	9a05      	ldr	r2, [sp, #20]
 80102ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80102f0:	1ad3      	subs	r3, r2, r3
 80102f2:	2b31      	cmp	r3, #49	; 0x31
 80102f4:	dc06      	bgt.n	8010304 <__ieee754_rem_pio2+0x26c>
 80102f6:	4602      	mov	r2, r0
 80102f8:	460b      	mov	r3, r1
 80102fa:	46d0      	mov	r8, sl
 80102fc:	46d9      	mov	r9, fp
 80102fe:	e9c4 2300 	strd	r2, r3, [r4]
 8010302:	e7a6      	b.n	8010252 <__ieee754_rem_pio2+0x1ba>
 8010304:	a326      	add	r3, pc, #152	; (adr r3, 80103a0 <__ieee754_rem_pio2+0x308>)
 8010306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801030e:	f7f0 f91f 	bl	8000550 <__aeabi_dmul>
 8010312:	4606      	mov	r6, r0
 8010314:	460f      	mov	r7, r1
 8010316:	4602      	mov	r2, r0
 8010318:	460b      	mov	r3, r1
 801031a:	4650      	mov	r0, sl
 801031c:	4659      	mov	r1, fp
 801031e:	f7ef ff5f 	bl	80001e0 <__aeabi_dsub>
 8010322:	4602      	mov	r2, r0
 8010324:	460b      	mov	r3, r1
 8010326:	4680      	mov	r8, r0
 8010328:	4689      	mov	r9, r1
 801032a:	4650      	mov	r0, sl
 801032c:	4659      	mov	r1, fp
 801032e:	f7ef ff57 	bl	80001e0 <__aeabi_dsub>
 8010332:	4632      	mov	r2, r6
 8010334:	463b      	mov	r3, r7
 8010336:	f7ef ff53 	bl	80001e0 <__aeabi_dsub>
 801033a:	a31b      	add	r3, pc, #108	; (adr r3, 80103a8 <__ieee754_rem_pio2+0x310>)
 801033c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010340:	4606      	mov	r6, r0
 8010342:	460f      	mov	r7, r1
 8010344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010348:	f7f0 f902 	bl	8000550 <__aeabi_dmul>
 801034c:	4632      	mov	r2, r6
 801034e:	463b      	mov	r3, r7
 8010350:	f7ef ff46 	bl	80001e0 <__aeabi_dsub>
 8010354:	4606      	mov	r6, r0
 8010356:	460f      	mov	r7, r1
 8010358:	e75e      	b.n	8010218 <__ieee754_rem_pio2+0x180>
 801035a:	4a1b      	ldr	r2, [pc, #108]	; (80103c8 <__ieee754_rem_pio2+0x330>)
 801035c:	4592      	cmp	sl, r2
 801035e:	dd35      	ble.n	80103cc <__ieee754_rem_pio2+0x334>
 8010360:	4602      	mov	r2, r0
 8010362:	460b      	mov	r3, r1
 8010364:	f7ef ff3c 	bl	80001e0 <__aeabi_dsub>
 8010368:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801036c:	e9c4 0100 	strd	r0, r1, [r4]
 8010370:	e6a2      	b.n	80100b8 <__ieee754_rem_pio2+0x20>
 8010372:	bf00      	nop
 8010374:	f3af 8000 	nop.w
 8010378:	54400000 	.word	0x54400000
 801037c:	3ff921fb 	.word	0x3ff921fb
 8010380:	1a626331 	.word	0x1a626331
 8010384:	3dd0b461 	.word	0x3dd0b461
 8010388:	1a600000 	.word	0x1a600000
 801038c:	3dd0b461 	.word	0x3dd0b461
 8010390:	2e037073 	.word	0x2e037073
 8010394:	3ba3198a 	.word	0x3ba3198a
 8010398:	6dc9c883 	.word	0x6dc9c883
 801039c:	3fe45f30 	.word	0x3fe45f30
 80103a0:	2e000000 	.word	0x2e000000
 80103a4:	3ba3198a 	.word	0x3ba3198a
 80103a8:	252049c1 	.word	0x252049c1
 80103ac:	397b839a 	.word	0x397b839a
 80103b0:	3fe921fb 	.word	0x3fe921fb
 80103b4:	4002d97b 	.word	0x4002d97b
 80103b8:	3ff921fb 	.word	0x3ff921fb
 80103bc:	413921fb 	.word	0x413921fb
 80103c0:	3fe00000 	.word	0x3fe00000
 80103c4:	080155b4 	.word	0x080155b4
 80103c8:	7fefffff 	.word	0x7fefffff
 80103cc:	ea4f 552a 	mov.w	r5, sl, asr #20
 80103d0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80103d4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80103d8:	460f      	mov	r7, r1
 80103da:	4606      	mov	r6, r0
 80103dc:	f7f0 fb68 	bl	8000ab0 <__aeabi_d2iz>
 80103e0:	f7f0 f84c 	bl	800047c <__aeabi_i2d>
 80103e4:	4602      	mov	r2, r0
 80103e6:	460b      	mov	r3, r1
 80103e8:	4630      	mov	r0, r6
 80103ea:	4639      	mov	r1, r7
 80103ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80103f0:	f7ef fef6 	bl	80001e0 <__aeabi_dsub>
 80103f4:	2200      	movs	r2, #0
 80103f6:	4b1e      	ldr	r3, [pc, #120]	; (8010470 <__ieee754_rem_pio2+0x3d8>)
 80103f8:	f7f0 f8aa 	bl	8000550 <__aeabi_dmul>
 80103fc:	460f      	mov	r7, r1
 80103fe:	4606      	mov	r6, r0
 8010400:	f7f0 fb56 	bl	8000ab0 <__aeabi_d2iz>
 8010404:	f7f0 f83a 	bl	800047c <__aeabi_i2d>
 8010408:	4602      	mov	r2, r0
 801040a:	460b      	mov	r3, r1
 801040c:	4630      	mov	r0, r6
 801040e:	4639      	mov	r1, r7
 8010410:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010414:	f7ef fee4 	bl	80001e0 <__aeabi_dsub>
 8010418:	2200      	movs	r2, #0
 801041a:	4b15      	ldr	r3, [pc, #84]	; (8010470 <__ieee754_rem_pio2+0x3d8>)
 801041c:	f7f0 f898 	bl	8000550 <__aeabi_dmul>
 8010420:	f04f 0803 	mov.w	r8, #3
 8010424:	2600      	movs	r6, #0
 8010426:	2700      	movs	r7, #0
 8010428:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801042c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8010430:	4632      	mov	r2, r6
 8010432:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8010436:	463b      	mov	r3, r7
 8010438:	46c2      	mov	sl, r8
 801043a:	f108 38ff 	add.w	r8, r8, #4294967295
 801043e:	f7f0 faef 	bl	8000a20 <__aeabi_dcmpeq>
 8010442:	2800      	cmp	r0, #0
 8010444:	d1f4      	bne.n	8010430 <__ieee754_rem_pio2+0x398>
 8010446:	4b0b      	ldr	r3, [pc, #44]	; (8010474 <__ieee754_rem_pio2+0x3dc>)
 8010448:	462a      	mov	r2, r5
 801044a:	9301      	str	r3, [sp, #4]
 801044c:	2302      	movs	r3, #2
 801044e:	4621      	mov	r1, r4
 8010450:	9300      	str	r3, [sp, #0]
 8010452:	a806      	add	r0, sp, #24
 8010454:	4653      	mov	r3, sl
 8010456:	f000 fbc1 	bl	8010bdc <__kernel_rem_pio2>
 801045a:	9b04      	ldr	r3, [sp, #16]
 801045c:	4605      	mov	r5, r0
 801045e:	2b00      	cmp	r3, #0
 8010460:	f6bf ae51 	bge.w	8010106 <__ieee754_rem_pio2+0x6e>
 8010464:	6863      	ldr	r3, [r4, #4]
 8010466:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801046a:	6063      	str	r3, [r4, #4]
 801046c:	68e3      	ldr	r3, [r4, #12]
 801046e:	e707      	b.n	8010280 <__ieee754_rem_pio2+0x1e8>
 8010470:	41700000 	.word	0x41700000
 8010474:	08015634 	.word	0x08015634

08010478 <__ieee754_asinf>:
 8010478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801047c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8010480:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8010484:	4604      	mov	r4, r0
 8010486:	4605      	mov	r5, r0
 8010488:	d10c      	bne.n	80104a4 <__ieee754_asinf+0x2c>
 801048a:	498d      	ldr	r1, [pc, #564]	; (80106c0 <__ieee754_asinf+0x248>)
 801048c:	f7f0 fcb6 	bl	8000dfc <__aeabi_fmul>
 8010490:	498c      	ldr	r1, [pc, #560]	; (80106c4 <__ieee754_asinf+0x24c>)
 8010492:	4605      	mov	r5, r0
 8010494:	4620      	mov	r0, r4
 8010496:	f7f0 fcb1 	bl	8000dfc <__aeabi_fmul>
 801049a:	4601      	mov	r1, r0
 801049c:	4628      	mov	r0, r5
 801049e:	f7f0 fba5 	bl	8000bec <__addsf3>
 80104a2:	e006      	b.n	80104b2 <__ieee754_asinf+0x3a>
 80104a4:	dd07      	ble.n	80104b6 <__ieee754_asinf+0x3e>
 80104a6:	4601      	mov	r1, r0
 80104a8:	f7f0 fb9e 	bl	8000be8 <__aeabi_fsub>
 80104ac:	4601      	mov	r1, r0
 80104ae:	f7f0 fd59 	bl	8000f64 <__aeabi_fdiv>
 80104b2:	4604      	mov	r4, r0
 80104b4:	e00e      	b.n	80104d4 <__ieee754_asinf+0x5c>
 80104b6:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 80104ba:	da58      	bge.n	801056e <__ieee754_asinf+0xf6>
 80104bc:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 80104c0:	da0b      	bge.n	80104da <__ieee754_asinf+0x62>
 80104c2:	4981      	ldr	r1, [pc, #516]	; (80106c8 <__ieee754_asinf+0x250>)
 80104c4:	f7f0 fb92 	bl	8000bec <__addsf3>
 80104c8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80104cc:	f7f0 fe52 	bl	8001174 <__aeabi_fcmpgt>
 80104d0:	2800      	cmp	r0, #0
 80104d2:	d04c      	beq.n	801056e <__ieee754_asinf+0xf6>
 80104d4:	4620      	mov	r0, r4
 80104d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104da:	4601      	mov	r1, r0
 80104dc:	f7f0 fc8e 	bl	8000dfc <__aeabi_fmul>
 80104e0:	4605      	mov	r5, r0
 80104e2:	497a      	ldr	r1, [pc, #488]	; (80106cc <__ieee754_asinf+0x254>)
 80104e4:	f7f0 fc8a 	bl	8000dfc <__aeabi_fmul>
 80104e8:	4979      	ldr	r1, [pc, #484]	; (80106d0 <__ieee754_asinf+0x258>)
 80104ea:	f7f0 fb7f 	bl	8000bec <__addsf3>
 80104ee:	4629      	mov	r1, r5
 80104f0:	f7f0 fc84 	bl	8000dfc <__aeabi_fmul>
 80104f4:	4977      	ldr	r1, [pc, #476]	; (80106d4 <__ieee754_asinf+0x25c>)
 80104f6:	f7f0 fb77 	bl	8000be8 <__aeabi_fsub>
 80104fa:	4629      	mov	r1, r5
 80104fc:	f7f0 fc7e 	bl	8000dfc <__aeabi_fmul>
 8010500:	4975      	ldr	r1, [pc, #468]	; (80106d8 <__ieee754_asinf+0x260>)
 8010502:	f7f0 fb73 	bl	8000bec <__addsf3>
 8010506:	4629      	mov	r1, r5
 8010508:	f7f0 fc78 	bl	8000dfc <__aeabi_fmul>
 801050c:	4973      	ldr	r1, [pc, #460]	; (80106dc <__ieee754_asinf+0x264>)
 801050e:	f7f0 fb6b 	bl	8000be8 <__aeabi_fsub>
 8010512:	4629      	mov	r1, r5
 8010514:	f7f0 fc72 	bl	8000dfc <__aeabi_fmul>
 8010518:	4971      	ldr	r1, [pc, #452]	; (80106e0 <__ieee754_asinf+0x268>)
 801051a:	f7f0 fb67 	bl	8000bec <__addsf3>
 801051e:	4629      	mov	r1, r5
 8010520:	f7f0 fc6c 	bl	8000dfc <__aeabi_fmul>
 8010524:	496f      	ldr	r1, [pc, #444]	; (80106e4 <__ieee754_asinf+0x26c>)
 8010526:	4606      	mov	r6, r0
 8010528:	4628      	mov	r0, r5
 801052a:	f7f0 fc67 	bl	8000dfc <__aeabi_fmul>
 801052e:	496e      	ldr	r1, [pc, #440]	; (80106e8 <__ieee754_asinf+0x270>)
 8010530:	f7f0 fb5a 	bl	8000be8 <__aeabi_fsub>
 8010534:	4629      	mov	r1, r5
 8010536:	f7f0 fc61 	bl	8000dfc <__aeabi_fmul>
 801053a:	496c      	ldr	r1, [pc, #432]	; (80106ec <__ieee754_asinf+0x274>)
 801053c:	f7f0 fb56 	bl	8000bec <__addsf3>
 8010540:	4629      	mov	r1, r5
 8010542:	f7f0 fc5b 	bl	8000dfc <__aeabi_fmul>
 8010546:	496a      	ldr	r1, [pc, #424]	; (80106f0 <__ieee754_asinf+0x278>)
 8010548:	f7f0 fb4e 	bl	8000be8 <__aeabi_fsub>
 801054c:	4629      	mov	r1, r5
 801054e:	f7f0 fc55 	bl	8000dfc <__aeabi_fmul>
 8010552:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010556:	f7f0 fb49 	bl	8000bec <__addsf3>
 801055a:	4601      	mov	r1, r0
 801055c:	4630      	mov	r0, r6
 801055e:	f7f0 fd01 	bl	8000f64 <__aeabi_fdiv>
 8010562:	4621      	mov	r1, r4
 8010564:	f7f0 fc4a 	bl	8000dfc <__aeabi_fmul>
 8010568:	4601      	mov	r1, r0
 801056a:	4620      	mov	r0, r4
 801056c:	e797      	b.n	801049e <__ieee754_asinf+0x26>
 801056e:	4620      	mov	r0, r4
 8010570:	f7ff fd10 	bl	800ff94 <fabsf>
 8010574:	4601      	mov	r1, r0
 8010576:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801057a:	f7f0 fb35 	bl	8000be8 <__aeabi_fsub>
 801057e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8010582:	f7f0 fc3b 	bl	8000dfc <__aeabi_fmul>
 8010586:	4606      	mov	r6, r0
 8010588:	4950      	ldr	r1, [pc, #320]	; (80106cc <__ieee754_asinf+0x254>)
 801058a:	f7f0 fc37 	bl	8000dfc <__aeabi_fmul>
 801058e:	4950      	ldr	r1, [pc, #320]	; (80106d0 <__ieee754_asinf+0x258>)
 8010590:	f7f0 fb2c 	bl	8000bec <__addsf3>
 8010594:	4631      	mov	r1, r6
 8010596:	f7f0 fc31 	bl	8000dfc <__aeabi_fmul>
 801059a:	494e      	ldr	r1, [pc, #312]	; (80106d4 <__ieee754_asinf+0x25c>)
 801059c:	f7f0 fb24 	bl	8000be8 <__aeabi_fsub>
 80105a0:	4631      	mov	r1, r6
 80105a2:	f7f0 fc2b 	bl	8000dfc <__aeabi_fmul>
 80105a6:	494c      	ldr	r1, [pc, #304]	; (80106d8 <__ieee754_asinf+0x260>)
 80105a8:	f7f0 fb20 	bl	8000bec <__addsf3>
 80105ac:	4631      	mov	r1, r6
 80105ae:	f7f0 fc25 	bl	8000dfc <__aeabi_fmul>
 80105b2:	494a      	ldr	r1, [pc, #296]	; (80106dc <__ieee754_asinf+0x264>)
 80105b4:	f7f0 fb18 	bl	8000be8 <__aeabi_fsub>
 80105b8:	4631      	mov	r1, r6
 80105ba:	f7f0 fc1f 	bl	8000dfc <__aeabi_fmul>
 80105be:	4948      	ldr	r1, [pc, #288]	; (80106e0 <__ieee754_asinf+0x268>)
 80105c0:	f7f0 fb14 	bl	8000bec <__addsf3>
 80105c4:	4631      	mov	r1, r6
 80105c6:	f7f0 fc19 	bl	8000dfc <__aeabi_fmul>
 80105ca:	4946      	ldr	r1, [pc, #280]	; (80106e4 <__ieee754_asinf+0x26c>)
 80105cc:	4681      	mov	r9, r0
 80105ce:	4630      	mov	r0, r6
 80105d0:	f7f0 fc14 	bl	8000dfc <__aeabi_fmul>
 80105d4:	4944      	ldr	r1, [pc, #272]	; (80106e8 <__ieee754_asinf+0x270>)
 80105d6:	f7f0 fb07 	bl	8000be8 <__aeabi_fsub>
 80105da:	4631      	mov	r1, r6
 80105dc:	f7f0 fc0e 	bl	8000dfc <__aeabi_fmul>
 80105e0:	4942      	ldr	r1, [pc, #264]	; (80106ec <__ieee754_asinf+0x274>)
 80105e2:	f7f0 fb03 	bl	8000bec <__addsf3>
 80105e6:	4631      	mov	r1, r6
 80105e8:	f7f0 fc08 	bl	8000dfc <__aeabi_fmul>
 80105ec:	4940      	ldr	r1, [pc, #256]	; (80106f0 <__ieee754_asinf+0x278>)
 80105ee:	f7f0 fafb 	bl	8000be8 <__aeabi_fsub>
 80105f2:	4631      	mov	r1, r6
 80105f4:	f7f0 fc02 	bl	8000dfc <__aeabi_fmul>
 80105f8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80105fc:	f7f0 faf6 	bl	8000bec <__addsf3>
 8010600:	4682      	mov	sl, r0
 8010602:	4630      	mov	r0, r6
 8010604:	f000 f9da 	bl	80109bc <__ieee754_sqrtf>
 8010608:	4b3a      	ldr	r3, [pc, #232]	; (80106f4 <__ieee754_asinf+0x27c>)
 801060a:	4607      	mov	r7, r0
 801060c:	4598      	cmp	r8, r3
 801060e:	dd1a      	ble.n	8010646 <__ieee754_asinf+0x1ce>
 8010610:	4651      	mov	r1, sl
 8010612:	4648      	mov	r0, r9
 8010614:	f7f0 fca6 	bl	8000f64 <__aeabi_fdiv>
 8010618:	4639      	mov	r1, r7
 801061a:	f7f0 fbef 	bl	8000dfc <__aeabi_fmul>
 801061e:	4639      	mov	r1, r7
 8010620:	f7f0 fae4 	bl	8000bec <__addsf3>
 8010624:	4601      	mov	r1, r0
 8010626:	f7f0 fae1 	bl	8000bec <__addsf3>
 801062a:	4933      	ldr	r1, [pc, #204]	; (80106f8 <__ieee754_asinf+0x280>)
 801062c:	f7f0 fade 	bl	8000bec <__addsf3>
 8010630:	4601      	mov	r1, r0
 8010632:	4823      	ldr	r0, [pc, #140]	; (80106c0 <__ieee754_asinf+0x248>)
 8010634:	f7f0 fad8 	bl	8000be8 <__aeabi_fsub>
 8010638:	2d00      	cmp	r5, #0
 801063a:	4604      	mov	r4, r0
 801063c:	f73f af4a 	bgt.w	80104d4 <__ieee754_asinf+0x5c>
 8010640:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010644:	e735      	b.n	80104b2 <__ieee754_asinf+0x3a>
 8010646:	4601      	mov	r1, r0
 8010648:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 801064c:	f7f0 face 	bl	8000bec <__addsf3>
 8010650:	4651      	mov	r1, sl
 8010652:	4604      	mov	r4, r0
 8010654:	4648      	mov	r0, r9
 8010656:	f7f0 fc85 	bl	8000f64 <__aeabi_fdiv>
 801065a:	4601      	mov	r1, r0
 801065c:	4620      	mov	r0, r4
 801065e:	f7f0 fbcd 	bl	8000dfc <__aeabi_fmul>
 8010662:	f028 080f 	bic.w	r8, r8, #15
 8010666:	4681      	mov	r9, r0
 8010668:	4641      	mov	r1, r8
 801066a:	4640      	mov	r0, r8
 801066c:	f7f0 fbc6 	bl	8000dfc <__aeabi_fmul>
 8010670:	4601      	mov	r1, r0
 8010672:	4630      	mov	r0, r6
 8010674:	f7f0 fab8 	bl	8000be8 <__aeabi_fsub>
 8010678:	4641      	mov	r1, r8
 801067a:	4604      	mov	r4, r0
 801067c:	4638      	mov	r0, r7
 801067e:	f7f0 fab5 	bl	8000bec <__addsf3>
 8010682:	4601      	mov	r1, r0
 8010684:	4620      	mov	r0, r4
 8010686:	f7f0 fc6d 	bl	8000f64 <__aeabi_fdiv>
 801068a:	4601      	mov	r1, r0
 801068c:	f7f0 faae 	bl	8000bec <__addsf3>
 8010690:	4601      	mov	r1, r0
 8010692:	480c      	ldr	r0, [pc, #48]	; (80106c4 <__ieee754_asinf+0x24c>)
 8010694:	f7f0 faa8 	bl	8000be8 <__aeabi_fsub>
 8010698:	4601      	mov	r1, r0
 801069a:	4648      	mov	r0, r9
 801069c:	f7f0 faa4 	bl	8000be8 <__aeabi_fsub>
 80106a0:	4641      	mov	r1, r8
 80106a2:	4604      	mov	r4, r0
 80106a4:	4640      	mov	r0, r8
 80106a6:	f7f0 faa1 	bl	8000bec <__addsf3>
 80106aa:	4601      	mov	r1, r0
 80106ac:	4813      	ldr	r0, [pc, #76]	; (80106fc <__ieee754_asinf+0x284>)
 80106ae:	f7f0 fa9b 	bl	8000be8 <__aeabi_fsub>
 80106b2:	4601      	mov	r1, r0
 80106b4:	4620      	mov	r0, r4
 80106b6:	f7f0 fa97 	bl	8000be8 <__aeabi_fsub>
 80106ba:	4601      	mov	r1, r0
 80106bc:	480f      	ldr	r0, [pc, #60]	; (80106fc <__ieee754_asinf+0x284>)
 80106be:	e7b9      	b.n	8010634 <__ieee754_asinf+0x1bc>
 80106c0:	3fc90fdb 	.word	0x3fc90fdb
 80106c4:	b33bbd2e 	.word	0xb33bbd2e
 80106c8:	7149f2ca 	.word	0x7149f2ca
 80106cc:	3811ef08 	.word	0x3811ef08
 80106d0:	3a4f7f04 	.word	0x3a4f7f04
 80106d4:	3d241146 	.word	0x3d241146
 80106d8:	3e4e0aa8 	.word	0x3e4e0aa8
 80106dc:	3ea6b090 	.word	0x3ea6b090
 80106e0:	3e2aaaab 	.word	0x3e2aaaab
 80106e4:	3d9dc62e 	.word	0x3d9dc62e
 80106e8:	3f303361 	.word	0x3f303361
 80106ec:	4001572d 	.word	0x4001572d
 80106f0:	4019d139 	.word	0x4019d139
 80106f4:	3f799999 	.word	0x3f799999
 80106f8:	333bbd2e 	.word	0x333bbd2e
 80106fc:	3f490fdb 	.word	0x3f490fdb

08010700 <__ieee754_rem_pio2f>:
 8010700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010704:	4aa0      	ldr	r2, [pc, #640]	; (8010988 <__ieee754_rem_pio2f+0x288>)
 8010706:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 801070a:	4296      	cmp	r6, r2
 801070c:	460c      	mov	r4, r1
 801070e:	4682      	mov	sl, r0
 8010710:	b087      	sub	sp, #28
 8010712:	dc04      	bgt.n	801071e <__ieee754_rem_pio2f+0x1e>
 8010714:	2300      	movs	r3, #0
 8010716:	6008      	str	r0, [r1, #0]
 8010718:	604b      	str	r3, [r1, #4]
 801071a:	2500      	movs	r5, #0
 801071c:	e01a      	b.n	8010754 <__ieee754_rem_pio2f+0x54>
 801071e:	4a9b      	ldr	r2, [pc, #620]	; (801098c <__ieee754_rem_pio2f+0x28c>)
 8010720:	4296      	cmp	r6, r2
 8010722:	dc4b      	bgt.n	80107bc <__ieee754_rem_pio2f+0xbc>
 8010724:	2800      	cmp	r0, #0
 8010726:	499a      	ldr	r1, [pc, #616]	; (8010990 <__ieee754_rem_pio2f+0x290>)
 8010728:	4f9a      	ldr	r7, [pc, #616]	; (8010994 <__ieee754_rem_pio2f+0x294>)
 801072a:	f026 060f 	bic.w	r6, r6, #15
 801072e:	dd23      	ble.n	8010778 <__ieee754_rem_pio2f+0x78>
 8010730:	f7f0 fa5a 	bl	8000be8 <__aeabi_fsub>
 8010734:	42be      	cmp	r6, r7
 8010736:	4605      	mov	r5, r0
 8010738:	d010      	beq.n	801075c <__ieee754_rem_pio2f+0x5c>
 801073a:	4997      	ldr	r1, [pc, #604]	; (8010998 <__ieee754_rem_pio2f+0x298>)
 801073c:	f7f0 fa54 	bl	8000be8 <__aeabi_fsub>
 8010740:	4601      	mov	r1, r0
 8010742:	6020      	str	r0, [r4, #0]
 8010744:	4628      	mov	r0, r5
 8010746:	f7f0 fa4f 	bl	8000be8 <__aeabi_fsub>
 801074a:	4993      	ldr	r1, [pc, #588]	; (8010998 <__ieee754_rem_pio2f+0x298>)
 801074c:	f7f0 fa4c 	bl	8000be8 <__aeabi_fsub>
 8010750:	2501      	movs	r5, #1
 8010752:	6060      	str	r0, [r4, #4]
 8010754:	4628      	mov	r0, r5
 8010756:	b007      	add	sp, #28
 8010758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801075c:	498f      	ldr	r1, [pc, #572]	; (801099c <__ieee754_rem_pio2f+0x29c>)
 801075e:	f7f0 fa43 	bl	8000be8 <__aeabi_fsub>
 8010762:	498f      	ldr	r1, [pc, #572]	; (80109a0 <__ieee754_rem_pio2f+0x2a0>)
 8010764:	4605      	mov	r5, r0
 8010766:	f7f0 fa3f 	bl	8000be8 <__aeabi_fsub>
 801076a:	4601      	mov	r1, r0
 801076c:	6020      	str	r0, [r4, #0]
 801076e:	4628      	mov	r0, r5
 8010770:	f7f0 fa3a 	bl	8000be8 <__aeabi_fsub>
 8010774:	498a      	ldr	r1, [pc, #552]	; (80109a0 <__ieee754_rem_pio2f+0x2a0>)
 8010776:	e7e9      	b.n	801074c <__ieee754_rem_pio2f+0x4c>
 8010778:	f7f0 fa38 	bl	8000bec <__addsf3>
 801077c:	42be      	cmp	r6, r7
 801077e:	4605      	mov	r5, r0
 8010780:	d00e      	beq.n	80107a0 <__ieee754_rem_pio2f+0xa0>
 8010782:	4985      	ldr	r1, [pc, #532]	; (8010998 <__ieee754_rem_pio2f+0x298>)
 8010784:	f7f0 fa32 	bl	8000bec <__addsf3>
 8010788:	4601      	mov	r1, r0
 801078a:	6020      	str	r0, [r4, #0]
 801078c:	4628      	mov	r0, r5
 801078e:	f7f0 fa2b 	bl	8000be8 <__aeabi_fsub>
 8010792:	4981      	ldr	r1, [pc, #516]	; (8010998 <__ieee754_rem_pio2f+0x298>)
 8010794:	f7f0 fa2a 	bl	8000bec <__addsf3>
 8010798:	f04f 35ff 	mov.w	r5, #4294967295
 801079c:	6060      	str	r0, [r4, #4]
 801079e:	e7d9      	b.n	8010754 <__ieee754_rem_pio2f+0x54>
 80107a0:	497e      	ldr	r1, [pc, #504]	; (801099c <__ieee754_rem_pio2f+0x29c>)
 80107a2:	f7f0 fa23 	bl	8000bec <__addsf3>
 80107a6:	497e      	ldr	r1, [pc, #504]	; (80109a0 <__ieee754_rem_pio2f+0x2a0>)
 80107a8:	4605      	mov	r5, r0
 80107aa:	f7f0 fa1f 	bl	8000bec <__addsf3>
 80107ae:	4601      	mov	r1, r0
 80107b0:	6020      	str	r0, [r4, #0]
 80107b2:	4628      	mov	r0, r5
 80107b4:	f7f0 fa18 	bl	8000be8 <__aeabi_fsub>
 80107b8:	4979      	ldr	r1, [pc, #484]	; (80109a0 <__ieee754_rem_pio2f+0x2a0>)
 80107ba:	e7eb      	b.n	8010794 <__ieee754_rem_pio2f+0x94>
 80107bc:	4a79      	ldr	r2, [pc, #484]	; (80109a4 <__ieee754_rem_pio2f+0x2a4>)
 80107be:	4296      	cmp	r6, r2
 80107c0:	f300 8091 	bgt.w	80108e6 <__ieee754_rem_pio2f+0x1e6>
 80107c4:	f7ff fbe6 	bl	800ff94 <fabsf>
 80107c8:	4977      	ldr	r1, [pc, #476]	; (80109a8 <__ieee754_rem_pio2f+0x2a8>)
 80107ca:	4607      	mov	r7, r0
 80107cc:	f7f0 fb16 	bl	8000dfc <__aeabi_fmul>
 80107d0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80107d4:	f7f0 fa0a 	bl	8000bec <__addsf3>
 80107d8:	f7f0 fcec 	bl	80011b4 <__aeabi_f2iz>
 80107dc:	4605      	mov	r5, r0
 80107de:	f7f0 fab9 	bl	8000d54 <__aeabi_i2f>
 80107e2:	496b      	ldr	r1, [pc, #428]	; (8010990 <__ieee754_rem_pio2f+0x290>)
 80107e4:	4681      	mov	r9, r0
 80107e6:	f7f0 fb09 	bl	8000dfc <__aeabi_fmul>
 80107ea:	4601      	mov	r1, r0
 80107ec:	4638      	mov	r0, r7
 80107ee:	f7f0 f9fb 	bl	8000be8 <__aeabi_fsub>
 80107f2:	4969      	ldr	r1, [pc, #420]	; (8010998 <__ieee754_rem_pio2f+0x298>)
 80107f4:	4680      	mov	r8, r0
 80107f6:	4648      	mov	r0, r9
 80107f8:	f7f0 fb00 	bl	8000dfc <__aeabi_fmul>
 80107fc:	2d1f      	cmp	r5, #31
 80107fe:	4607      	mov	r7, r0
 8010800:	dc0c      	bgt.n	801081c <__ieee754_rem_pio2f+0x11c>
 8010802:	4a6a      	ldr	r2, [pc, #424]	; (80109ac <__ieee754_rem_pio2f+0x2ac>)
 8010804:	1e69      	subs	r1, r5, #1
 8010806:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801080a:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 801080e:	4293      	cmp	r3, r2
 8010810:	d004      	beq.n	801081c <__ieee754_rem_pio2f+0x11c>
 8010812:	4639      	mov	r1, r7
 8010814:	4640      	mov	r0, r8
 8010816:	f7f0 f9e7 	bl	8000be8 <__aeabi_fsub>
 801081a:	e00b      	b.n	8010834 <__ieee754_rem_pio2f+0x134>
 801081c:	4639      	mov	r1, r7
 801081e:	4640      	mov	r0, r8
 8010820:	f7f0 f9e2 	bl	8000be8 <__aeabi_fsub>
 8010824:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8010828:	ea4f 5be6 	mov.w	fp, r6, asr #23
 801082c:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8010830:	2e08      	cmp	r6, #8
 8010832:	dc01      	bgt.n	8010838 <__ieee754_rem_pio2f+0x138>
 8010834:	6020      	str	r0, [r4, #0]
 8010836:	e026      	b.n	8010886 <__ieee754_rem_pio2f+0x186>
 8010838:	4958      	ldr	r1, [pc, #352]	; (801099c <__ieee754_rem_pio2f+0x29c>)
 801083a:	4648      	mov	r0, r9
 801083c:	f7f0 fade 	bl	8000dfc <__aeabi_fmul>
 8010840:	4607      	mov	r7, r0
 8010842:	4601      	mov	r1, r0
 8010844:	4640      	mov	r0, r8
 8010846:	f7f0 f9cf 	bl	8000be8 <__aeabi_fsub>
 801084a:	4601      	mov	r1, r0
 801084c:	4606      	mov	r6, r0
 801084e:	4640      	mov	r0, r8
 8010850:	f7f0 f9ca 	bl	8000be8 <__aeabi_fsub>
 8010854:	4639      	mov	r1, r7
 8010856:	f7f0 f9c7 	bl	8000be8 <__aeabi_fsub>
 801085a:	4607      	mov	r7, r0
 801085c:	4950      	ldr	r1, [pc, #320]	; (80109a0 <__ieee754_rem_pio2f+0x2a0>)
 801085e:	4648      	mov	r0, r9
 8010860:	f7f0 facc 	bl	8000dfc <__aeabi_fmul>
 8010864:	4639      	mov	r1, r7
 8010866:	f7f0 f9bf 	bl	8000be8 <__aeabi_fsub>
 801086a:	4601      	mov	r1, r0
 801086c:	4607      	mov	r7, r0
 801086e:	4630      	mov	r0, r6
 8010870:	f7f0 f9ba 	bl	8000be8 <__aeabi_fsub>
 8010874:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8010878:	ebab 0b03 	sub.w	fp, fp, r3
 801087c:	f1bb 0f19 	cmp.w	fp, #25
 8010880:	dc16      	bgt.n	80108b0 <__ieee754_rem_pio2f+0x1b0>
 8010882:	46b0      	mov	r8, r6
 8010884:	6020      	str	r0, [r4, #0]
 8010886:	6826      	ldr	r6, [r4, #0]
 8010888:	4640      	mov	r0, r8
 801088a:	4631      	mov	r1, r6
 801088c:	f7f0 f9ac 	bl	8000be8 <__aeabi_fsub>
 8010890:	4639      	mov	r1, r7
 8010892:	f7f0 f9a9 	bl	8000be8 <__aeabi_fsub>
 8010896:	f1ba 0f00 	cmp.w	sl, #0
 801089a:	6060      	str	r0, [r4, #4]
 801089c:	f6bf af5a 	bge.w	8010754 <__ieee754_rem_pio2f+0x54>
 80108a0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80108a4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80108a8:	6026      	str	r6, [r4, #0]
 80108aa:	6060      	str	r0, [r4, #4]
 80108ac:	426d      	negs	r5, r5
 80108ae:	e751      	b.n	8010754 <__ieee754_rem_pio2f+0x54>
 80108b0:	493f      	ldr	r1, [pc, #252]	; (80109b0 <__ieee754_rem_pio2f+0x2b0>)
 80108b2:	4648      	mov	r0, r9
 80108b4:	f7f0 faa2 	bl	8000dfc <__aeabi_fmul>
 80108b8:	4607      	mov	r7, r0
 80108ba:	4601      	mov	r1, r0
 80108bc:	4630      	mov	r0, r6
 80108be:	f7f0 f993 	bl	8000be8 <__aeabi_fsub>
 80108c2:	4601      	mov	r1, r0
 80108c4:	4680      	mov	r8, r0
 80108c6:	4630      	mov	r0, r6
 80108c8:	f7f0 f98e 	bl	8000be8 <__aeabi_fsub>
 80108cc:	4639      	mov	r1, r7
 80108ce:	f7f0 f98b 	bl	8000be8 <__aeabi_fsub>
 80108d2:	4606      	mov	r6, r0
 80108d4:	4937      	ldr	r1, [pc, #220]	; (80109b4 <__ieee754_rem_pio2f+0x2b4>)
 80108d6:	4648      	mov	r0, r9
 80108d8:	f7f0 fa90 	bl	8000dfc <__aeabi_fmul>
 80108dc:	4631      	mov	r1, r6
 80108de:	f7f0 f983 	bl	8000be8 <__aeabi_fsub>
 80108e2:	4607      	mov	r7, r0
 80108e4:	e795      	b.n	8010812 <__ieee754_rem_pio2f+0x112>
 80108e6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80108ea:	db05      	blt.n	80108f8 <__ieee754_rem_pio2f+0x1f8>
 80108ec:	4601      	mov	r1, r0
 80108ee:	f7f0 f97b 	bl	8000be8 <__aeabi_fsub>
 80108f2:	6060      	str	r0, [r4, #4]
 80108f4:	6020      	str	r0, [r4, #0]
 80108f6:	e710      	b.n	801071a <__ieee754_rem_pio2f+0x1a>
 80108f8:	15f7      	asrs	r7, r6, #23
 80108fa:	3f86      	subs	r7, #134	; 0x86
 80108fc:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8010900:	4630      	mov	r0, r6
 8010902:	f7f0 fc57 	bl	80011b4 <__aeabi_f2iz>
 8010906:	f7f0 fa25 	bl	8000d54 <__aeabi_i2f>
 801090a:	4601      	mov	r1, r0
 801090c:	9003      	str	r0, [sp, #12]
 801090e:	4630      	mov	r0, r6
 8010910:	f7f0 f96a 	bl	8000be8 <__aeabi_fsub>
 8010914:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8010918:	f7f0 fa70 	bl	8000dfc <__aeabi_fmul>
 801091c:	4606      	mov	r6, r0
 801091e:	f7f0 fc49 	bl	80011b4 <__aeabi_f2iz>
 8010922:	f7f0 fa17 	bl	8000d54 <__aeabi_i2f>
 8010926:	4601      	mov	r1, r0
 8010928:	9004      	str	r0, [sp, #16]
 801092a:	4605      	mov	r5, r0
 801092c:	4630      	mov	r0, r6
 801092e:	f7f0 f95b 	bl	8000be8 <__aeabi_fsub>
 8010932:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8010936:	f7f0 fa61 	bl	8000dfc <__aeabi_fmul>
 801093a:	2100      	movs	r1, #0
 801093c:	9005      	str	r0, [sp, #20]
 801093e:	f7f0 fbf1 	bl	8001124 <__aeabi_fcmpeq>
 8010942:	b1f0      	cbz	r0, 8010982 <__ieee754_rem_pio2f+0x282>
 8010944:	2100      	movs	r1, #0
 8010946:	4628      	mov	r0, r5
 8010948:	f7f0 fbec 	bl	8001124 <__aeabi_fcmpeq>
 801094c:	2800      	cmp	r0, #0
 801094e:	bf14      	ite	ne
 8010950:	2301      	movne	r3, #1
 8010952:	2302      	moveq	r3, #2
 8010954:	4a18      	ldr	r2, [pc, #96]	; (80109b8 <__ieee754_rem_pio2f+0x2b8>)
 8010956:	4621      	mov	r1, r4
 8010958:	9201      	str	r2, [sp, #4]
 801095a:	2202      	movs	r2, #2
 801095c:	a803      	add	r0, sp, #12
 801095e:	9200      	str	r2, [sp, #0]
 8010960:	463a      	mov	r2, r7
 8010962:	f000 fdbb 	bl	80114dc <__kernel_rem_pio2f>
 8010966:	f1ba 0f00 	cmp.w	sl, #0
 801096a:	4605      	mov	r5, r0
 801096c:	f6bf aef2 	bge.w	8010754 <__ieee754_rem_pio2f+0x54>
 8010970:	6823      	ldr	r3, [r4, #0]
 8010972:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010976:	6023      	str	r3, [r4, #0]
 8010978:	6863      	ldr	r3, [r4, #4]
 801097a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801097e:	6063      	str	r3, [r4, #4]
 8010980:	e794      	b.n	80108ac <__ieee754_rem_pio2f+0x1ac>
 8010982:	2303      	movs	r3, #3
 8010984:	e7e6      	b.n	8010954 <__ieee754_rem_pio2f+0x254>
 8010986:	bf00      	nop
 8010988:	3f490fd8 	.word	0x3f490fd8
 801098c:	4016cbe3 	.word	0x4016cbe3
 8010990:	3fc90f80 	.word	0x3fc90f80
 8010994:	3fc90fd0 	.word	0x3fc90fd0
 8010998:	37354443 	.word	0x37354443
 801099c:	37354400 	.word	0x37354400
 80109a0:	2e85a308 	.word	0x2e85a308
 80109a4:	43490f80 	.word	0x43490f80
 80109a8:	3f22f984 	.word	0x3f22f984
 80109ac:	0801573c 	.word	0x0801573c
 80109b0:	2e85a300 	.word	0x2e85a300
 80109b4:	248d3132 	.word	0x248d3132
 80109b8:	080157bc 	.word	0x080157bc

080109bc <__ieee754_sqrtf>:
 80109bc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80109c0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80109c4:	b570      	push	{r4, r5, r6, lr}
 80109c6:	4603      	mov	r3, r0
 80109c8:	4604      	mov	r4, r0
 80109ca:	d309      	bcc.n	80109e0 <__ieee754_sqrtf+0x24>
 80109cc:	4601      	mov	r1, r0
 80109ce:	f7f0 fa15 	bl	8000dfc <__aeabi_fmul>
 80109d2:	4601      	mov	r1, r0
 80109d4:	4620      	mov	r0, r4
 80109d6:	f7f0 f909 	bl	8000bec <__addsf3>
 80109da:	4604      	mov	r4, r0
 80109dc:	4620      	mov	r0, r4
 80109de:	bd70      	pop	{r4, r5, r6, pc}
 80109e0:	2a00      	cmp	r2, #0
 80109e2:	d0fb      	beq.n	80109dc <__ieee754_sqrtf+0x20>
 80109e4:	2800      	cmp	r0, #0
 80109e6:	da06      	bge.n	80109f6 <__ieee754_sqrtf+0x3a>
 80109e8:	4601      	mov	r1, r0
 80109ea:	f7f0 f8fd 	bl	8000be8 <__aeabi_fsub>
 80109ee:	4601      	mov	r1, r0
 80109f0:	f7f0 fab8 	bl	8000f64 <__aeabi_fdiv>
 80109f4:	e7f1      	b.n	80109da <__ieee754_sqrtf+0x1e>
 80109f6:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 80109fa:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80109fe:	d029      	beq.n	8010a54 <__ieee754_sqrtf+0x98>
 8010a00:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8010a04:	07cb      	lsls	r3, r1, #31
 8010a06:	f04f 0300 	mov.w	r3, #0
 8010a0a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8010a0e:	f04f 0419 	mov.w	r4, #25
 8010a12:	461e      	mov	r6, r3
 8010a14:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8010a18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8010a1c:	bf58      	it	pl
 8010a1e:	0052      	lslpl	r2, r2, #1
 8010a20:	1040      	asrs	r0, r0, #1
 8010a22:	0052      	lsls	r2, r2, #1
 8010a24:	1875      	adds	r5, r6, r1
 8010a26:	4295      	cmp	r5, r2
 8010a28:	bfde      	ittt	le
 8010a2a:	186e      	addle	r6, r5, r1
 8010a2c:	1b52      	suble	r2, r2, r5
 8010a2e:	185b      	addle	r3, r3, r1
 8010a30:	3c01      	subs	r4, #1
 8010a32:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010a36:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010a3a:	d1f3      	bne.n	8010a24 <__ieee754_sqrtf+0x68>
 8010a3c:	b112      	cbz	r2, 8010a44 <__ieee754_sqrtf+0x88>
 8010a3e:	3301      	adds	r3, #1
 8010a40:	f023 0301 	bic.w	r3, r3, #1
 8010a44:	105c      	asrs	r4, r3, #1
 8010a46:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8010a4a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8010a4e:	e7c5      	b.n	80109dc <__ieee754_sqrtf+0x20>
 8010a50:	005b      	lsls	r3, r3, #1
 8010a52:	3201      	adds	r2, #1
 8010a54:	0218      	lsls	r0, r3, #8
 8010a56:	d5fb      	bpl.n	8010a50 <__ieee754_sqrtf+0x94>
 8010a58:	3a01      	subs	r2, #1
 8010a5a:	1a89      	subs	r1, r1, r2
 8010a5c:	e7d0      	b.n	8010a00 <__ieee754_sqrtf+0x44>
	...

08010a60 <__kernel_cos>:
 8010a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a64:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010a68:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8010a6c:	4680      	mov	r8, r0
 8010a6e:	460f      	mov	r7, r1
 8010a70:	e9cd 2300 	strd	r2, r3, [sp]
 8010a74:	da04      	bge.n	8010a80 <__kernel_cos+0x20>
 8010a76:	f7f0 f81b 	bl	8000ab0 <__aeabi_d2iz>
 8010a7a:	2800      	cmp	r0, #0
 8010a7c:	f000 8086 	beq.w	8010b8c <__kernel_cos+0x12c>
 8010a80:	4642      	mov	r2, r8
 8010a82:	463b      	mov	r3, r7
 8010a84:	4640      	mov	r0, r8
 8010a86:	4639      	mov	r1, r7
 8010a88:	f7ef fd62 	bl	8000550 <__aeabi_dmul>
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	4b4e      	ldr	r3, [pc, #312]	; (8010bc8 <__kernel_cos+0x168>)
 8010a90:	4604      	mov	r4, r0
 8010a92:	460d      	mov	r5, r1
 8010a94:	f7ef fd5c 	bl	8000550 <__aeabi_dmul>
 8010a98:	a33f      	add	r3, pc, #252	; (adr r3, 8010b98 <__kernel_cos+0x138>)
 8010a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a9e:	4682      	mov	sl, r0
 8010aa0:	468b      	mov	fp, r1
 8010aa2:	4620      	mov	r0, r4
 8010aa4:	4629      	mov	r1, r5
 8010aa6:	f7ef fd53 	bl	8000550 <__aeabi_dmul>
 8010aaa:	a33d      	add	r3, pc, #244	; (adr r3, 8010ba0 <__kernel_cos+0x140>)
 8010aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab0:	f7ef fb98 	bl	80001e4 <__adddf3>
 8010ab4:	4622      	mov	r2, r4
 8010ab6:	462b      	mov	r3, r5
 8010ab8:	f7ef fd4a 	bl	8000550 <__aeabi_dmul>
 8010abc:	a33a      	add	r3, pc, #232	; (adr r3, 8010ba8 <__kernel_cos+0x148>)
 8010abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac2:	f7ef fb8d 	bl	80001e0 <__aeabi_dsub>
 8010ac6:	4622      	mov	r2, r4
 8010ac8:	462b      	mov	r3, r5
 8010aca:	f7ef fd41 	bl	8000550 <__aeabi_dmul>
 8010ace:	a338      	add	r3, pc, #224	; (adr r3, 8010bb0 <__kernel_cos+0x150>)
 8010ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad4:	f7ef fb86 	bl	80001e4 <__adddf3>
 8010ad8:	4622      	mov	r2, r4
 8010ada:	462b      	mov	r3, r5
 8010adc:	f7ef fd38 	bl	8000550 <__aeabi_dmul>
 8010ae0:	a335      	add	r3, pc, #212	; (adr r3, 8010bb8 <__kernel_cos+0x158>)
 8010ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ae6:	f7ef fb7b 	bl	80001e0 <__aeabi_dsub>
 8010aea:	4622      	mov	r2, r4
 8010aec:	462b      	mov	r3, r5
 8010aee:	f7ef fd2f 	bl	8000550 <__aeabi_dmul>
 8010af2:	a333      	add	r3, pc, #204	; (adr r3, 8010bc0 <__kernel_cos+0x160>)
 8010af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af8:	f7ef fb74 	bl	80001e4 <__adddf3>
 8010afc:	4622      	mov	r2, r4
 8010afe:	462b      	mov	r3, r5
 8010b00:	f7ef fd26 	bl	8000550 <__aeabi_dmul>
 8010b04:	4622      	mov	r2, r4
 8010b06:	462b      	mov	r3, r5
 8010b08:	f7ef fd22 	bl	8000550 <__aeabi_dmul>
 8010b0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b10:	4604      	mov	r4, r0
 8010b12:	460d      	mov	r5, r1
 8010b14:	4640      	mov	r0, r8
 8010b16:	4639      	mov	r1, r7
 8010b18:	f7ef fd1a 	bl	8000550 <__aeabi_dmul>
 8010b1c:	460b      	mov	r3, r1
 8010b1e:	4602      	mov	r2, r0
 8010b20:	4629      	mov	r1, r5
 8010b22:	4620      	mov	r0, r4
 8010b24:	f7ef fb5c 	bl	80001e0 <__aeabi_dsub>
 8010b28:	4b28      	ldr	r3, [pc, #160]	; (8010bcc <__kernel_cos+0x16c>)
 8010b2a:	4680      	mov	r8, r0
 8010b2c:	429e      	cmp	r6, r3
 8010b2e:	4689      	mov	r9, r1
 8010b30:	dc0e      	bgt.n	8010b50 <__kernel_cos+0xf0>
 8010b32:	4602      	mov	r2, r0
 8010b34:	460b      	mov	r3, r1
 8010b36:	4650      	mov	r0, sl
 8010b38:	4659      	mov	r1, fp
 8010b3a:	f7ef fb51 	bl	80001e0 <__aeabi_dsub>
 8010b3e:	4602      	mov	r2, r0
 8010b40:	2000      	movs	r0, #0
 8010b42:	460b      	mov	r3, r1
 8010b44:	4922      	ldr	r1, [pc, #136]	; (8010bd0 <__kernel_cos+0x170>)
 8010b46:	f7ef fb4b 	bl	80001e0 <__aeabi_dsub>
 8010b4a:	b003      	add	sp, #12
 8010b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b50:	2400      	movs	r4, #0
 8010b52:	4b20      	ldr	r3, [pc, #128]	; (8010bd4 <__kernel_cos+0x174>)
 8010b54:	4622      	mov	r2, r4
 8010b56:	429e      	cmp	r6, r3
 8010b58:	bfcc      	ite	gt
 8010b5a:	4d1f      	ldrgt	r5, [pc, #124]	; (8010bd8 <__kernel_cos+0x178>)
 8010b5c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8010b60:	462b      	mov	r3, r5
 8010b62:	2000      	movs	r0, #0
 8010b64:	491a      	ldr	r1, [pc, #104]	; (8010bd0 <__kernel_cos+0x170>)
 8010b66:	f7ef fb3b 	bl	80001e0 <__aeabi_dsub>
 8010b6a:	4622      	mov	r2, r4
 8010b6c:	4606      	mov	r6, r0
 8010b6e:	460f      	mov	r7, r1
 8010b70:	462b      	mov	r3, r5
 8010b72:	4650      	mov	r0, sl
 8010b74:	4659      	mov	r1, fp
 8010b76:	f7ef fb33 	bl	80001e0 <__aeabi_dsub>
 8010b7a:	4642      	mov	r2, r8
 8010b7c:	464b      	mov	r3, r9
 8010b7e:	f7ef fb2f 	bl	80001e0 <__aeabi_dsub>
 8010b82:	4602      	mov	r2, r0
 8010b84:	460b      	mov	r3, r1
 8010b86:	4630      	mov	r0, r6
 8010b88:	4639      	mov	r1, r7
 8010b8a:	e7dc      	b.n	8010b46 <__kernel_cos+0xe6>
 8010b8c:	2000      	movs	r0, #0
 8010b8e:	4910      	ldr	r1, [pc, #64]	; (8010bd0 <__kernel_cos+0x170>)
 8010b90:	e7db      	b.n	8010b4a <__kernel_cos+0xea>
 8010b92:	bf00      	nop
 8010b94:	f3af 8000 	nop.w
 8010b98:	be8838d4 	.word	0xbe8838d4
 8010b9c:	bda8fae9 	.word	0xbda8fae9
 8010ba0:	bdb4b1c4 	.word	0xbdb4b1c4
 8010ba4:	3e21ee9e 	.word	0x3e21ee9e
 8010ba8:	809c52ad 	.word	0x809c52ad
 8010bac:	3e927e4f 	.word	0x3e927e4f
 8010bb0:	19cb1590 	.word	0x19cb1590
 8010bb4:	3efa01a0 	.word	0x3efa01a0
 8010bb8:	16c15177 	.word	0x16c15177
 8010bbc:	3f56c16c 	.word	0x3f56c16c
 8010bc0:	5555554c 	.word	0x5555554c
 8010bc4:	3fa55555 	.word	0x3fa55555
 8010bc8:	3fe00000 	.word	0x3fe00000
 8010bcc:	3fd33332 	.word	0x3fd33332
 8010bd0:	3ff00000 	.word	0x3ff00000
 8010bd4:	3fe90000 	.word	0x3fe90000
 8010bd8:	3fd20000 	.word	0x3fd20000

08010bdc <__kernel_rem_pio2>:
 8010bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010be0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010be4:	9308      	str	r3, [sp, #32]
 8010be6:	9101      	str	r1, [sp, #4]
 8010be8:	4bc0      	ldr	r3, [pc, #768]	; (8010eec <__kernel_rem_pio2+0x310>)
 8010bea:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8010bec:	f112 0f14 	cmn.w	r2, #20
 8010bf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010bf4:	bfa8      	it	ge
 8010bf6:	1ed4      	subge	r4, r2, #3
 8010bf8:	9304      	str	r3, [sp, #16]
 8010bfa:	9b08      	ldr	r3, [sp, #32]
 8010bfc:	bfb8      	it	lt
 8010bfe:	2400      	movlt	r4, #0
 8010c00:	f103 33ff 	add.w	r3, r3, #4294967295
 8010c04:	9306      	str	r3, [sp, #24]
 8010c06:	bfa4      	itt	ge
 8010c08:	2318      	movge	r3, #24
 8010c0a:	fb94 f4f3 	sdivge	r4, r4, r3
 8010c0e:	f06f 0317 	mvn.w	r3, #23
 8010c12:	fb04 3303 	mla	r3, r4, r3, r3
 8010c16:	eb03 0a02 	add.w	sl, r3, r2
 8010c1a:	9a06      	ldr	r2, [sp, #24]
 8010c1c:	9b04      	ldr	r3, [sp, #16]
 8010c1e:	1aa7      	subs	r7, r4, r2
 8010c20:	eb03 0802 	add.w	r8, r3, r2
 8010c24:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8010c26:	2500      	movs	r5, #0
 8010c28:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	2300      	movs	r3, #0
 8010c30:	9009      	str	r0, [sp, #36]	; 0x24
 8010c32:	ae20      	add	r6, sp, #128	; 0x80
 8010c34:	4545      	cmp	r5, r8
 8010c36:	dd19      	ble.n	8010c6c <__kernel_rem_pio2+0x90>
 8010c38:	9b08      	ldr	r3, [sp, #32]
 8010c3a:	aa20      	add	r2, sp, #128	; 0x80
 8010c3c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010c40:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8010c44:	f1c3 0301 	rsb	r3, r3, #1
 8010c48:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010c4c:	9307      	str	r3, [sp, #28]
 8010c4e:	9b07      	ldr	r3, [sp, #28]
 8010c50:	9a04      	ldr	r2, [sp, #16]
 8010c52:	4443      	add	r3, r8
 8010c54:	429a      	cmp	r2, r3
 8010c56:	db35      	blt.n	8010cc4 <__kernel_rem_pio2+0xe8>
 8010c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	f1a3 0908 	sub.w	r9, r3, #8
 8010c60:	2300      	movs	r3, #0
 8010c62:	462f      	mov	r7, r5
 8010c64:	2600      	movs	r6, #0
 8010c66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010c6a:	e01f      	b.n	8010cac <__kernel_rem_pio2+0xd0>
 8010c6c:	42ef      	cmn	r7, r5
 8010c6e:	d40b      	bmi.n	8010c88 <__kernel_rem_pio2+0xac>
 8010c70:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010c74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010c78:	f7ef fc00 	bl	800047c <__aeabi_i2d>
 8010c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c80:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010c84:	3501      	adds	r5, #1
 8010c86:	e7d5      	b.n	8010c34 <__kernel_rem_pio2+0x58>
 8010c88:	4610      	mov	r0, r2
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	e7f8      	b.n	8010c80 <__kernel_rem_pio2+0xa4>
 8010c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c92:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8010c96:	f7ef fc5b 	bl	8000550 <__aeabi_dmul>
 8010c9a:	4602      	mov	r2, r0
 8010c9c:	460b      	mov	r3, r1
 8010c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ca2:	f7ef fa9f 	bl	80001e4 <__adddf3>
 8010ca6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010caa:	3601      	adds	r6, #1
 8010cac:	9b06      	ldr	r3, [sp, #24]
 8010cae:	3f08      	subs	r7, #8
 8010cb0:	429e      	cmp	r6, r3
 8010cb2:	ddec      	ble.n	8010c8e <__kernel_rem_pio2+0xb2>
 8010cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cb8:	3508      	adds	r5, #8
 8010cba:	e8eb 2302 	strd	r2, r3, [fp], #8
 8010cbe:	f108 0801 	add.w	r8, r8, #1
 8010cc2:	e7c4      	b.n	8010c4e <__kernel_rem_pio2+0x72>
 8010cc4:	9b04      	ldr	r3, [sp, #16]
 8010cc6:	aa0c      	add	r2, sp, #48	; 0x30
 8010cc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ccc:	930b      	str	r3, [sp, #44]	; 0x2c
 8010cce:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8010cd0:	9f04      	ldr	r7, [sp, #16]
 8010cd2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8010cd8:	463e      	mov	r6, r7
 8010cda:	ab98      	add	r3, sp, #608	; 0x260
 8010cdc:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8010ce0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010ce4:	f8cd b008 	str.w	fp, [sp, #8]
 8010ce8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8010cec:	2e00      	cmp	r6, #0
 8010cee:	dc71      	bgt.n	8010dd4 <__kernel_rem_pio2+0x1f8>
 8010cf0:	4652      	mov	r2, sl
 8010cf2:	4620      	mov	r0, r4
 8010cf4:	4629      	mov	r1, r5
 8010cf6:	f000 ffa3 	bl	8011c40 <scalbn>
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010d00:	4604      	mov	r4, r0
 8010d02:	460d      	mov	r5, r1
 8010d04:	f7ef fc24 	bl	8000550 <__aeabi_dmul>
 8010d08:	f000 ff1a 	bl	8011b40 <floor>
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	4b78      	ldr	r3, [pc, #480]	; (8010ef0 <__kernel_rem_pio2+0x314>)
 8010d10:	f7ef fc1e 	bl	8000550 <__aeabi_dmul>
 8010d14:	4602      	mov	r2, r0
 8010d16:	460b      	mov	r3, r1
 8010d18:	4620      	mov	r0, r4
 8010d1a:	4629      	mov	r1, r5
 8010d1c:	f7ef fa60 	bl	80001e0 <__aeabi_dsub>
 8010d20:	460d      	mov	r5, r1
 8010d22:	4604      	mov	r4, r0
 8010d24:	f7ef fec4 	bl	8000ab0 <__aeabi_d2iz>
 8010d28:	9007      	str	r0, [sp, #28]
 8010d2a:	f7ef fba7 	bl	800047c <__aeabi_i2d>
 8010d2e:	4602      	mov	r2, r0
 8010d30:	460b      	mov	r3, r1
 8010d32:	4620      	mov	r0, r4
 8010d34:	4629      	mov	r1, r5
 8010d36:	f7ef fa53 	bl	80001e0 <__aeabi_dsub>
 8010d3a:	f1ba 0f00 	cmp.w	sl, #0
 8010d3e:	4680      	mov	r8, r0
 8010d40:	4689      	mov	r9, r1
 8010d42:	dd70      	ble.n	8010e26 <__kernel_rem_pio2+0x24a>
 8010d44:	1e7a      	subs	r2, r7, #1
 8010d46:	ab0c      	add	r3, sp, #48	; 0x30
 8010d48:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010d4c:	9c07      	ldr	r4, [sp, #28]
 8010d4e:	f1ca 0118 	rsb	r1, sl, #24
 8010d52:	fa40 f301 	asr.w	r3, r0, r1
 8010d56:	441c      	add	r4, r3
 8010d58:	408b      	lsls	r3, r1
 8010d5a:	1ac0      	subs	r0, r0, r3
 8010d5c:	ab0c      	add	r3, sp, #48	; 0x30
 8010d5e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010d62:	f1ca 0317 	rsb	r3, sl, #23
 8010d66:	9407      	str	r4, [sp, #28]
 8010d68:	fa40 f303 	asr.w	r3, r0, r3
 8010d6c:	9302      	str	r3, [sp, #8]
 8010d6e:	9b02      	ldr	r3, [sp, #8]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	dd66      	ble.n	8010e42 <__kernel_rem_pio2+0x266>
 8010d74:	2200      	movs	r2, #0
 8010d76:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010d7a:	4614      	mov	r4, r2
 8010d7c:	9b07      	ldr	r3, [sp, #28]
 8010d7e:	3301      	adds	r3, #1
 8010d80:	9307      	str	r3, [sp, #28]
 8010d82:	4297      	cmp	r7, r2
 8010d84:	f300 809f 	bgt.w	8010ec6 <__kernel_rem_pio2+0x2ea>
 8010d88:	f1ba 0f00 	cmp.w	sl, #0
 8010d8c:	dd07      	ble.n	8010d9e <__kernel_rem_pio2+0x1c2>
 8010d8e:	f1ba 0f01 	cmp.w	sl, #1
 8010d92:	f000 80b9 	beq.w	8010f08 <__kernel_rem_pio2+0x32c>
 8010d96:	f1ba 0f02 	cmp.w	sl, #2
 8010d9a:	f000 80bf 	beq.w	8010f1c <__kernel_rem_pio2+0x340>
 8010d9e:	9b02      	ldr	r3, [sp, #8]
 8010da0:	2b02      	cmp	r3, #2
 8010da2:	d14e      	bne.n	8010e42 <__kernel_rem_pio2+0x266>
 8010da4:	4642      	mov	r2, r8
 8010da6:	464b      	mov	r3, r9
 8010da8:	2000      	movs	r0, #0
 8010daa:	4952      	ldr	r1, [pc, #328]	; (8010ef4 <__kernel_rem_pio2+0x318>)
 8010dac:	f7ef fa18 	bl	80001e0 <__aeabi_dsub>
 8010db0:	4680      	mov	r8, r0
 8010db2:	4689      	mov	r9, r1
 8010db4:	2c00      	cmp	r4, #0
 8010db6:	d044      	beq.n	8010e42 <__kernel_rem_pio2+0x266>
 8010db8:	4652      	mov	r2, sl
 8010dba:	2000      	movs	r0, #0
 8010dbc:	494d      	ldr	r1, [pc, #308]	; (8010ef4 <__kernel_rem_pio2+0x318>)
 8010dbe:	f000 ff3f 	bl	8011c40 <scalbn>
 8010dc2:	4602      	mov	r2, r0
 8010dc4:	460b      	mov	r3, r1
 8010dc6:	4640      	mov	r0, r8
 8010dc8:	4649      	mov	r1, r9
 8010dca:	f7ef fa09 	bl	80001e0 <__aeabi_dsub>
 8010dce:	4680      	mov	r8, r0
 8010dd0:	4689      	mov	r9, r1
 8010dd2:	e036      	b.n	8010e42 <__kernel_rem_pio2+0x266>
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	4b48      	ldr	r3, [pc, #288]	; (8010ef8 <__kernel_rem_pio2+0x31c>)
 8010dd8:	4620      	mov	r0, r4
 8010dda:	4629      	mov	r1, r5
 8010ddc:	f7ef fbb8 	bl	8000550 <__aeabi_dmul>
 8010de0:	f7ef fe66 	bl	8000ab0 <__aeabi_d2iz>
 8010de4:	f7ef fb4a 	bl	800047c <__aeabi_i2d>
 8010de8:	2200      	movs	r2, #0
 8010dea:	4b44      	ldr	r3, [pc, #272]	; (8010efc <__kernel_rem_pio2+0x320>)
 8010dec:	4680      	mov	r8, r0
 8010dee:	4689      	mov	r9, r1
 8010df0:	f7ef fbae 	bl	8000550 <__aeabi_dmul>
 8010df4:	4602      	mov	r2, r0
 8010df6:	460b      	mov	r3, r1
 8010df8:	4620      	mov	r0, r4
 8010dfa:	4629      	mov	r1, r5
 8010dfc:	f7ef f9f0 	bl	80001e0 <__aeabi_dsub>
 8010e00:	f7ef fe56 	bl	8000ab0 <__aeabi_d2iz>
 8010e04:	9b02      	ldr	r3, [sp, #8]
 8010e06:	3e01      	subs	r6, #1
 8010e08:	f843 0b04 	str.w	r0, [r3], #4
 8010e0c:	9302      	str	r3, [sp, #8]
 8010e0e:	ab70      	add	r3, sp, #448	; 0x1c0
 8010e10:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010e14:	4640      	mov	r0, r8
 8010e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1a:	4649      	mov	r1, r9
 8010e1c:	f7ef f9e2 	bl	80001e4 <__adddf3>
 8010e20:	4604      	mov	r4, r0
 8010e22:	460d      	mov	r5, r1
 8010e24:	e762      	b.n	8010cec <__kernel_rem_pio2+0x110>
 8010e26:	d105      	bne.n	8010e34 <__kernel_rem_pio2+0x258>
 8010e28:	1e7b      	subs	r3, r7, #1
 8010e2a:	aa0c      	add	r2, sp, #48	; 0x30
 8010e2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010e30:	15c3      	asrs	r3, r0, #23
 8010e32:	e79b      	b.n	8010d6c <__kernel_rem_pio2+0x190>
 8010e34:	2200      	movs	r2, #0
 8010e36:	4b32      	ldr	r3, [pc, #200]	; (8010f00 <__kernel_rem_pio2+0x324>)
 8010e38:	f7ef fe10 	bl	8000a5c <__aeabi_dcmpge>
 8010e3c:	2800      	cmp	r0, #0
 8010e3e:	d13f      	bne.n	8010ec0 <__kernel_rem_pio2+0x2e4>
 8010e40:	9002      	str	r0, [sp, #8]
 8010e42:	2200      	movs	r2, #0
 8010e44:	2300      	movs	r3, #0
 8010e46:	4640      	mov	r0, r8
 8010e48:	4649      	mov	r1, r9
 8010e4a:	f7ef fde9 	bl	8000a20 <__aeabi_dcmpeq>
 8010e4e:	2800      	cmp	r0, #0
 8010e50:	f000 80b5 	beq.w	8010fbe <__kernel_rem_pio2+0x3e2>
 8010e54:	1e7c      	subs	r4, r7, #1
 8010e56:	4623      	mov	r3, r4
 8010e58:	2200      	movs	r2, #0
 8010e5a:	9904      	ldr	r1, [sp, #16]
 8010e5c:	428b      	cmp	r3, r1
 8010e5e:	da64      	bge.n	8010f2a <__kernel_rem_pio2+0x34e>
 8010e60:	2a00      	cmp	r2, #0
 8010e62:	d078      	beq.n	8010f56 <__kernel_rem_pio2+0x37a>
 8010e64:	ab0c      	add	r3, sp, #48	; 0x30
 8010e66:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010e6a:	f1aa 0a18 	sub.w	sl, sl, #24
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	f000 80a3 	beq.w	8010fba <__kernel_rem_pio2+0x3de>
 8010e74:	4652      	mov	r2, sl
 8010e76:	2000      	movs	r0, #0
 8010e78:	491e      	ldr	r1, [pc, #120]	; (8010ef4 <__kernel_rem_pio2+0x318>)
 8010e7a:	f000 fee1 	bl	8011c40 <scalbn>
 8010e7e:	46a2      	mov	sl, r4
 8010e80:	4606      	mov	r6, r0
 8010e82:	460f      	mov	r7, r1
 8010e84:	f04f 0800 	mov.w	r8, #0
 8010e88:	00e3      	lsls	r3, r4, #3
 8010e8a:	9306      	str	r3, [sp, #24]
 8010e8c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8010ef8 <__kernel_rem_pio2+0x31c>
 8010e90:	ab70      	add	r3, sp, #448	; 0x1c0
 8010e92:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8010e96:	f1ba 0f00 	cmp.w	sl, #0
 8010e9a:	f280 80c6 	bge.w	801102a <__kernel_rem_pio2+0x44e>
 8010e9e:	4627      	mov	r7, r4
 8010ea0:	f04f 0800 	mov.w	r8, #0
 8010ea4:	2f00      	cmp	r7, #0
 8010ea6:	f2c0 80f3 	blt.w	8011090 <__kernel_rem_pio2+0x4b4>
 8010eaa:	4b16      	ldr	r3, [pc, #88]	; (8010f04 <__kernel_rem_pio2+0x328>)
 8010eac:	f04f 0a00 	mov.w	sl, #0
 8010eb0:	461d      	mov	r5, r3
 8010eb2:	ab70      	add	r3, sp, #448	; 0x1c0
 8010eb4:	f04f 0b00 	mov.w	fp, #0
 8010eb8:	2600      	movs	r6, #0
 8010eba:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8010ebe:	e0d9      	b.n	8011074 <__kernel_rem_pio2+0x498>
 8010ec0:	2302      	movs	r3, #2
 8010ec2:	9302      	str	r3, [sp, #8]
 8010ec4:	e756      	b.n	8010d74 <__kernel_rem_pio2+0x198>
 8010ec6:	f8db 3000 	ldr.w	r3, [fp]
 8010eca:	b954      	cbnz	r4, 8010ee2 <__kernel_rem_pio2+0x306>
 8010ecc:	b123      	cbz	r3, 8010ed8 <__kernel_rem_pio2+0x2fc>
 8010ece:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010ed2:	f8cb 3000 	str.w	r3, [fp]
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	461c      	mov	r4, r3
 8010eda:	3201      	adds	r2, #1
 8010edc:	f10b 0b04 	add.w	fp, fp, #4
 8010ee0:	e74f      	b.n	8010d82 <__kernel_rem_pio2+0x1a6>
 8010ee2:	1acb      	subs	r3, r1, r3
 8010ee4:	f8cb 3000 	str.w	r3, [fp]
 8010ee8:	4623      	mov	r3, r4
 8010eea:	e7f5      	b.n	8010ed8 <__kernel_rem_pio2+0x2fc>
 8010eec:	08015b18 	.word	0x08015b18
 8010ef0:	40200000 	.word	0x40200000
 8010ef4:	3ff00000 	.word	0x3ff00000
 8010ef8:	3e700000 	.word	0x3e700000
 8010efc:	41700000 	.word	0x41700000
 8010f00:	3fe00000 	.word	0x3fe00000
 8010f04:	08015ad8 	.word	0x08015ad8
 8010f08:	1e7a      	subs	r2, r7, #1
 8010f0a:	ab0c      	add	r3, sp, #48	; 0x30
 8010f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f10:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010f14:	a90c      	add	r1, sp, #48	; 0x30
 8010f16:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010f1a:	e740      	b.n	8010d9e <__kernel_rem_pio2+0x1c2>
 8010f1c:	1e7a      	subs	r2, r7, #1
 8010f1e:	ab0c      	add	r3, sp, #48	; 0x30
 8010f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f24:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010f28:	e7f4      	b.n	8010f14 <__kernel_rem_pio2+0x338>
 8010f2a:	a90c      	add	r1, sp, #48	; 0x30
 8010f2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010f30:	3b01      	subs	r3, #1
 8010f32:	430a      	orrs	r2, r1
 8010f34:	e791      	b.n	8010e5a <__kernel_rem_pio2+0x27e>
 8010f36:	3401      	adds	r4, #1
 8010f38:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010f3c:	2a00      	cmp	r2, #0
 8010f3e:	d0fa      	beq.n	8010f36 <__kernel_rem_pio2+0x35a>
 8010f40:	9b08      	ldr	r3, [sp, #32]
 8010f42:	1c7e      	adds	r6, r7, #1
 8010f44:	18fd      	adds	r5, r7, r3
 8010f46:	ab20      	add	r3, sp, #128	; 0x80
 8010f48:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010f4c:	443c      	add	r4, r7
 8010f4e:	42b4      	cmp	r4, r6
 8010f50:	da04      	bge.n	8010f5c <__kernel_rem_pio2+0x380>
 8010f52:	4627      	mov	r7, r4
 8010f54:	e6c0      	b.n	8010cd8 <__kernel_rem_pio2+0xfc>
 8010f56:	2401      	movs	r4, #1
 8010f58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f5a:	e7ed      	b.n	8010f38 <__kernel_rem_pio2+0x35c>
 8010f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f5e:	462f      	mov	r7, r5
 8010f60:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010f64:	f7ef fa8a 	bl	800047c <__aeabi_i2d>
 8010f68:	f04f 0b00 	mov.w	fp, #0
 8010f6c:	f04f 0800 	mov.w	r8, #0
 8010f70:	f04f 0900 	mov.w	r9, #0
 8010f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f76:	e8e7 0102 	strd	r0, r1, [r7], #8
 8010f7a:	3b08      	subs	r3, #8
 8010f7c:	9302      	str	r3, [sp, #8]
 8010f7e:	9b06      	ldr	r3, [sp, #24]
 8010f80:	459b      	cmp	fp, r3
 8010f82:	dd07      	ble.n	8010f94 <__kernel_rem_pio2+0x3b8>
 8010f84:	ab70      	add	r3, sp, #448	; 0x1c0
 8010f86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010f8a:	463d      	mov	r5, r7
 8010f8c:	e9c3 8900 	strd	r8, r9, [r3]
 8010f90:	3601      	adds	r6, #1
 8010f92:	e7dc      	b.n	8010f4e <__kernel_rem_pio2+0x372>
 8010f94:	9902      	ldr	r1, [sp, #8]
 8010f96:	f10b 0b01 	add.w	fp, fp, #1
 8010f9a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8010f9e:	9102      	str	r1, [sp, #8]
 8010fa0:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8010fa4:	f7ef fad4 	bl	8000550 <__aeabi_dmul>
 8010fa8:	4602      	mov	r2, r0
 8010faa:	460b      	mov	r3, r1
 8010fac:	4640      	mov	r0, r8
 8010fae:	4649      	mov	r1, r9
 8010fb0:	f7ef f918 	bl	80001e4 <__adddf3>
 8010fb4:	4680      	mov	r8, r0
 8010fb6:	4689      	mov	r9, r1
 8010fb8:	e7e1      	b.n	8010f7e <__kernel_rem_pio2+0x3a2>
 8010fba:	3c01      	subs	r4, #1
 8010fbc:	e752      	b.n	8010e64 <__kernel_rem_pio2+0x288>
 8010fbe:	f1ca 0200 	rsb	r2, sl, #0
 8010fc2:	4640      	mov	r0, r8
 8010fc4:	4649      	mov	r1, r9
 8010fc6:	f000 fe3b 	bl	8011c40 <scalbn>
 8010fca:	2200      	movs	r2, #0
 8010fcc:	4ba5      	ldr	r3, [pc, #660]	; (8011264 <__kernel_rem_pio2+0x688>)
 8010fce:	4604      	mov	r4, r0
 8010fd0:	460d      	mov	r5, r1
 8010fd2:	f7ef fd43 	bl	8000a5c <__aeabi_dcmpge>
 8010fd6:	b1f8      	cbz	r0, 8011018 <__kernel_rem_pio2+0x43c>
 8010fd8:	2200      	movs	r2, #0
 8010fda:	4ba3      	ldr	r3, [pc, #652]	; (8011268 <__kernel_rem_pio2+0x68c>)
 8010fdc:	4620      	mov	r0, r4
 8010fde:	4629      	mov	r1, r5
 8010fe0:	f7ef fab6 	bl	8000550 <__aeabi_dmul>
 8010fe4:	f7ef fd64 	bl	8000ab0 <__aeabi_d2iz>
 8010fe8:	4606      	mov	r6, r0
 8010fea:	f7ef fa47 	bl	800047c <__aeabi_i2d>
 8010fee:	2200      	movs	r2, #0
 8010ff0:	4b9c      	ldr	r3, [pc, #624]	; (8011264 <__kernel_rem_pio2+0x688>)
 8010ff2:	f7ef faad 	bl	8000550 <__aeabi_dmul>
 8010ff6:	460b      	mov	r3, r1
 8010ff8:	4602      	mov	r2, r0
 8010ffa:	4629      	mov	r1, r5
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	f7ef f8ef 	bl	80001e0 <__aeabi_dsub>
 8011002:	f7ef fd55 	bl	8000ab0 <__aeabi_d2iz>
 8011006:	1c7c      	adds	r4, r7, #1
 8011008:	ab0c      	add	r3, sp, #48	; 0x30
 801100a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 801100e:	f10a 0a18 	add.w	sl, sl, #24
 8011012:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8011016:	e72d      	b.n	8010e74 <__kernel_rem_pio2+0x298>
 8011018:	4620      	mov	r0, r4
 801101a:	4629      	mov	r1, r5
 801101c:	f7ef fd48 	bl	8000ab0 <__aeabi_d2iz>
 8011020:	ab0c      	add	r3, sp, #48	; 0x30
 8011022:	463c      	mov	r4, r7
 8011024:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8011028:	e724      	b.n	8010e74 <__kernel_rem_pio2+0x298>
 801102a:	ab0c      	add	r3, sp, #48	; 0x30
 801102c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011030:	f7ef fa24 	bl	800047c <__aeabi_i2d>
 8011034:	4632      	mov	r2, r6
 8011036:	463b      	mov	r3, r7
 8011038:	f7ef fa8a 	bl	8000550 <__aeabi_dmul>
 801103c:	4642      	mov	r2, r8
 801103e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8011042:	464b      	mov	r3, r9
 8011044:	4630      	mov	r0, r6
 8011046:	4639      	mov	r1, r7
 8011048:	f7ef fa82 	bl	8000550 <__aeabi_dmul>
 801104c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011050:	4606      	mov	r6, r0
 8011052:	460f      	mov	r7, r1
 8011054:	e71f      	b.n	8010e96 <__kernel_rem_pio2+0x2ba>
 8011056:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801105a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801105e:	f7ef fa77 	bl	8000550 <__aeabi_dmul>
 8011062:	4602      	mov	r2, r0
 8011064:	460b      	mov	r3, r1
 8011066:	4650      	mov	r0, sl
 8011068:	4659      	mov	r1, fp
 801106a:	f7ef f8bb 	bl	80001e4 <__adddf3>
 801106e:	4682      	mov	sl, r0
 8011070:	468b      	mov	fp, r1
 8011072:	3601      	adds	r6, #1
 8011074:	9b04      	ldr	r3, [sp, #16]
 8011076:	429e      	cmp	r6, r3
 8011078:	dc01      	bgt.n	801107e <__kernel_rem_pio2+0x4a2>
 801107a:	45b0      	cmp	r8, r6
 801107c:	daeb      	bge.n	8011056 <__kernel_rem_pio2+0x47a>
 801107e:	ab48      	add	r3, sp, #288	; 0x120
 8011080:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011084:	e9c3 ab00 	strd	sl, fp, [r3]
 8011088:	3f01      	subs	r7, #1
 801108a:	f108 0801 	add.w	r8, r8, #1
 801108e:	e709      	b.n	8010ea4 <__kernel_rem_pio2+0x2c8>
 8011090:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8011092:	2b02      	cmp	r3, #2
 8011094:	dc09      	bgt.n	80110aa <__kernel_rem_pio2+0x4ce>
 8011096:	2b00      	cmp	r3, #0
 8011098:	dc34      	bgt.n	8011104 <__kernel_rem_pio2+0x528>
 801109a:	d05e      	beq.n	801115a <__kernel_rem_pio2+0x57e>
 801109c:	9b07      	ldr	r3, [sp, #28]
 801109e:	f003 0007 	and.w	r0, r3, #7
 80110a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80110a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110aa:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80110ac:	2b03      	cmp	r3, #3
 80110ae:	d1f5      	bne.n	801109c <__kernel_rem_pio2+0x4c0>
 80110b0:	9a06      	ldr	r2, [sp, #24]
 80110b2:	ab48      	add	r3, sp, #288	; 0x120
 80110b4:	441a      	add	r2, r3
 80110b6:	4615      	mov	r5, r2
 80110b8:	4692      	mov	sl, r2
 80110ba:	46a3      	mov	fp, r4
 80110bc:	f1bb 0f00 	cmp.w	fp, #0
 80110c0:	dc7a      	bgt.n	80111b8 <__kernel_rem_pio2+0x5dc>
 80110c2:	46aa      	mov	sl, r5
 80110c4:	46a3      	mov	fp, r4
 80110c6:	f1bb 0f01 	cmp.w	fp, #1
 80110ca:	f300 8094 	bgt.w	80111f6 <__kernel_rem_pio2+0x61a>
 80110ce:	2700      	movs	r7, #0
 80110d0:	463e      	mov	r6, r7
 80110d2:	2c01      	cmp	r4, #1
 80110d4:	f300 80ae 	bgt.w	8011234 <__kernel_rem_pio2+0x658>
 80110d8:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80110dc:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80110e0:	9b02      	ldr	r3, [sp, #8]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	f040 80b0 	bne.w	8011248 <__kernel_rem_pio2+0x66c>
 80110e8:	4603      	mov	r3, r0
 80110ea:	462a      	mov	r2, r5
 80110ec:	9801      	ldr	r0, [sp, #4]
 80110ee:	e9c0 2300 	strd	r2, r3, [r0]
 80110f2:	4622      	mov	r2, r4
 80110f4:	460b      	mov	r3, r1
 80110f6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80110fa:	463a      	mov	r2, r7
 80110fc:	4633      	mov	r3, r6
 80110fe:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011102:	e7cb      	b.n	801109c <__kernel_rem_pio2+0x4c0>
 8011104:	2000      	movs	r0, #0
 8011106:	9a06      	ldr	r2, [sp, #24]
 8011108:	ab48      	add	r3, sp, #288	; 0x120
 801110a:	441a      	add	r2, r3
 801110c:	4615      	mov	r5, r2
 801110e:	46a0      	mov	r8, r4
 8011110:	4601      	mov	r1, r0
 8011112:	f1b8 0f00 	cmp.w	r8, #0
 8011116:	da3c      	bge.n	8011192 <__kernel_rem_pio2+0x5b6>
 8011118:	9b02      	ldr	r3, [sp, #8]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d040      	beq.n	80111a0 <__kernel_rem_pio2+0x5c4>
 801111e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8011122:	4602      	mov	r2, r0
 8011124:	462b      	mov	r3, r5
 8011126:	9d01      	ldr	r5, [sp, #4]
 8011128:	2601      	movs	r6, #1
 801112a:	e9c5 2300 	strd	r2, r3, [r5]
 801112e:	460b      	mov	r3, r1
 8011130:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8011134:	f7ef f854 	bl	80001e0 <__aeabi_dsub>
 8011138:	4684      	mov	ip, r0
 801113a:	460f      	mov	r7, r1
 801113c:	ad48      	add	r5, sp, #288	; 0x120
 801113e:	42b4      	cmp	r4, r6
 8011140:	f105 0508 	add.w	r5, r5, #8
 8011144:	da2e      	bge.n	80111a4 <__kernel_rem_pio2+0x5c8>
 8011146:	9b02      	ldr	r3, [sp, #8]
 8011148:	b10b      	cbz	r3, 801114e <__kernel_rem_pio2+0x572>
 801114a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 801114e:	4662      	mov	r2, ip
 8011150:	463b      	mov	r3, r7
 8011152:	9901      	ldr	r1, [sp, #4]
 8011154:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8011158:	e7a0      	b.n	801109c <__kernel_rem_pio2+0x4c0>
 801115a:	9a06      	ldr	r2, [sp, #24]
 801115c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 801115e:	ab48      	add	r3, sp, #288	; 0x120
 8011160:	441a      	add	r2, r3
 8011162:	4615      	mov	r5, r2
 8011164:	4637      	mov	r7, r6
 8011166:	2c00      	cmp	r4, #0
 8011168:	da09      	bge.n	801117e <__kernel_rem_pio2+0x5a2>
 801116a:	9b02      	ldr	r3, [sp, #8]
 801116c:	b10b      	cbz	r3, 8011172 <__kernel_rem_pio2+0x596>
 801116e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8011172:	4632      	mov	r2, r6
 8011174:	463b      	mov	r3, r7
 8011176:	9901      	ldr	r1, [sp, #4]
 8011178:	e9c1 2300 	strd	r2, r3, [r1]
 801117c:	e78e      	b.n	801109c <__kernel_rem_pio2+0x4c0>
 801117e:	4630      	mov	r0, r6
 8011180:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8011184:	4639      	mov	r1, r7
 8011186:	f7ef f82d 	bl	80001e4 <__adddf3>
 801118a:	3c01      	subs	r4, #1
 801118c:	4606      	mov	r6, r0
 801118e:	460f      	mov	r7, r1
 8011190:	e7e9      	b.n	8011166 <__kernel_rem_pio2+0x58a>
 8011192:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8011196:	f7ef f825 	bl	80001e4 <__adddf3>
 801119a:	f108 38ff 	add.w	r8, r8, #4294967295
 801119e:	e7b8      	b.n	8011112 <__kernel_rem_pio2+0x536>
 80111a0:	460d      	mov	r5, r1
 80111a2:	e7be      	b.n	8011122 <__kernel_rem_pio2+0x546>
 80111a4:	4660      	mov	r0, ip
 80111a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80111aa:	4639      	mov	r1, r7
 80111ac:	f7ef f81a 	bl	80001e4 <__adddf3>
 80111b0:	3601      	adds	r6, #1
 80111b2:	4684      	mov	ip, r0
 80111b4:	460f      	mov	r7, r1
 80111b6:	e7c2      	b.n	801113e <__kernel_rem_pio2+0x562>
 80111b8:	e9da 6700 	ldrd	r6, r7, [sl]
 80111bc:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80111c0:	4632      	mov	r2, r6
 80111c2:	463b      	mov	r3, r7
 80111c4:	4640      	mov	r0, r8
 80111c6:	4649      	mov	r1, r9
 80111c8:	f7ef f80c 	bl	80001e4 <__adddf3>
 80111cc:	4602      	mov	r2, r0
 80111ce:	460b      	mov	r3, r1
 80111d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80111d4:	4640      	mov	r0, r8
 80111d6:	4649      	mov	r1, r9
 80111d8:	f7ef f802 	bl	80001e0 <__aeabi_dsub>
 80111dc:	4632      	mov	r2, r6
 80111de:	463b      	mov	r3, r7
 80111e0:	f7ef f800 	bl	80001e4 <__adddf3>
 80111e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80111e8:	e86a 0102 	strd	r0, r1, [sl], #-8
 80111ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80111f0:	e9ca 2300 	strd	r2, r3, [sl]
 80111f4:	e762      	b.n	80110bc <__kernel_rem_pio2+0x4e0>
 80111f6:	e9da 8900 	ldrd	r8, r9, [sl]
 80111fa:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80111fe:	4642      	mov	r2, r8
 8011200:	464b      	mov	r3, r9
 8011202:	4630      	mov	r0, r6
 8011204:	4639      	mov	r1, r7
 8011206:	f7ee ffed 	bl	80001e4 <__adddf3>
 801120a:	4602      	mov	r2, r0
 801120c:	460b      	mov	r3, r1
 801120e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011212:	4630      	mov	r0, r6
 8011214:	4639      	mov	r1, r7
 8011216:	f7ee ffe3 	bl	80001e0 <__aeabi_dsub>
 801121a:	4642      	mov	r2, r8
 801121c:	464b      	mov	r3, r9
 801121e:	f7ee ffe1 	bl	80001e4 <__adddf3>
 8011222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011226:	e86a 0102 	strd	r0, r1, [sl], #-8
 801122a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801122e:	e9ca 2300 	strd	r2, r3, [sl]
 8011232:	e748      	b.n	80110c6 <__kernel_rem_pio2+0x4ea>
 8011234:	4638      	mov	r0, r7
 8011236:	e875 2302 	ldrd	r2, r3, [r5], #-8
 801123a:	4631      	mov	r1, r6
 801123c:	f7ee ffd2 	bl	80001e4 <__adddf3>
 8011240:	3c01      	subs	r4, #1
 8011242:	4607      	mov	r7, r0
 8011244:	460e      	mov	r6, r1
 8011246:	e744      	b.n	80110d2 <__kernel_rem_pio2+0x4f6>
 8011248:	9b01      	ldr	r3, [sp, #4]
 801124a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801124e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011252:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8011256:	e9c3 0401 	strd	r0, r4, [r3, #4]
 801125a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 801125e:	601d      	str	r5, [r3, #0]
 8011260:	615e      	str	r6, [r3, #20]
 8011262:	e71b      	b.n	801109c <__kernel_rem_pio2+0x4c0>
 8011264:	41700000 	.word	0x41700000
 8011268:	3e700000 	.word	0x3e700000
 801126c:	00000000 	.word	0x00000000

08011270 <__kernel_sin>:
 8011270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011274:	b086      	sub	sp, #24
 8011276:	e9cd 2300 	strd	r2, r3, [sp]
 801127a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801127e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011282:	4682      	mov	sl, r0
 8011284:	460c      	mov	r4, r1
 8011286:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011288:	da03      	bge.n	8011292 <__kernel_sin+0x22>
 801128a:	f7ef fc11 	bl	8000ab0 <__aeabi_d2iz>
 801128e:	2800      	cmp	r0, #0
 8011290:	d050      	beq.n	8011334 <__kernel_sin+0xc4>
 8011292:	4652      	mov	r2, sl
 8011294:	4623      	mov	r3, r4
 8011296:	4650      	mov	r0, sl
 8011298:	4621      	mov	r1, r4
 801129a:	f7ef f959 	bl	8000550 <__aeabi_dmul>
 801129e:	4606      	mov	r6, r0
 80112a0:	460f      	mov	r7, r1
 80112a2:	4602      	mov	r2, r0
 80112a4:	460b      	mov	r3, r1
 80112a6:	4650      	mov	r0, sl
 80112a8:	4621      	mov	r1, r4
 80112aa:	f7ef f951 	bl	8000550 <__aeabi_dmul>
 80112ae:	a33e      	add	r3, pc, #248	; (adr r3, 80113a8 <__kernel_sin+0x138>)
 80112b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b4:	4680      	mov	r8, r0
 80112b6:	4689      	mov	r9, r1
 80112b8:	4630      	mov	r0, r6
 80112ba:	4639      	mov	r1, r7
 80112bc:	f7ef f948 	bl	8000550 <__aeabi_dmul>
 80112c0:	a33b      	add	r3, pc, #236	; (adr r3, 80113b0 <__kernel_sin+0x140>)
 80112c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c6:	f7ee ff8b 	bl	80001e0 <__aeabi_dsub>
 80112ca:	4632      	mov	r2, r6
 80112cc:	463b      	mov	r3, r7
 80112ce:	f7ef f93f 	bl	8000550 <__aeabi_dmul>
 80112d2:	a339      	add	r3, pc, #228	; (adr r3, 80113b8 <__kernel_sin+0x148>)
 80112d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d8:	f7ee ff84 	bl	80001e4 <__adddf3>
 80112dc:	4632      	mov	r2, r6
 80112de:	463b      	mov	r3, r7
 80112e0:	f7ef f936 	bl	8000550 <__aeabi_dmul>
 80112e4:	a336      	add	r3, pc, #216	; (adr r3, 80113c0 <__kernel_sin+0x150>)
 80112e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ea:	f7ee ff79 	bl	80001e0 <__aeabi_dsub>
 80112ee:	4632      	mov	r2, r6
 80112f0:	463b      	mov	r3, r7
 80112f2:	f7ef f92d 	bl	8000550 <__aeabi_dmul>
 80112f6:	a334      	add	r3, pc, #208	; (adr r3, 80113c8 <__kernel_sin+0x158>)
 80112f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fc:	f7ee ff72 	bl	80001e4 <__adddf3>
 8011300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011304:	b9dd      	cbnz	r5, 801133e <__kernel_sin+0xce>
 8011306:	4602      	mov	r2, r0
 8011308:	460b      	mov	r3, r1
 801130a:	4630      	mov	r0, r6
 801130c:	4639      	mov	r1, r7
 801130e:	f7ef f91f 	bl	8000550 <__aeabi_dmul>
 8011312:	a32f      	add	r3, pc, #188	; (adr r3, 80113d0 <__kernel_sin+0x160>)
 8011314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011318:	f7ee ff62 	bl	80001e0 <__aeabi_dsub>
 801131c:	4642      	mov	r2, r8
 801131e:	464b      	mov	r3, r9
 8011320:	f7ef f916 	bl	8000550 <__aeabi_dmul>
 8011324:	4602      	mov	r2, r0
 8011326:	460b      	mov	r3, r1
 8011328:	4650      	mov	r0, sl
 801132a:	4621      	mov	r1, r4
 801132c:	f7ee ff5a 	bl	80001e4 <__adddf3>
 8011330:	4682      	mov	sl, r0
 8011332:	460c      	mov	r4, r1
 8011334:	4650      	mov	r0, sl
 8011336:	4621      	mov	r1, r4
 8011338:	b006      	add	sp, #24
 801133a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801133e:	2200      	movs	r2, #0
 8011340:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011344:	4b24      	ldr	r3, [pc, #144]	; (80113d8 <__kernel_sin+0x168>)
 8011346:	f7ef f903 	bl	8000550 <__aeabi_dmul>
 801134a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801134e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011352:	4640      	mov	r0, r8
 8011354:	4649      	mov	r1, r9
 8011356:	f7ef f8fb 	bl	8000550 <__aeabi_dmul>
 801135a:	4602      	mov	r2, r0
 801135c:	460b      	mov	r3, r1
 801135e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011362:	f7ee ff3d 	bl	80001e0 <__aeabi_dsub>
 8011366:	4632      	mov	r2, r6
 8011368:	463b      	mov	r3, r7
 801136a:	f7ef f8f1 	bl	8000550 <__aeabi_dmul>
 801136e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011372:	f7ee ff35 	bl	80001e0 <__aeabi_dsub>
 8011376:	a316      	add	r3, pc, #88	; (adr r3, 80113d0 <__kernel_sin+0x160>)
 8011378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137c:	4606      	mov	r6, r0
 801137e:	460f      	mov	r7, r1
 8011380:	4640      	mov	r0, r8
 8011382:	4649      	mov	r1, r9
 8011384:	f7ef f8e4 	bl	8000550 <__aeabi_dmul>
 8011388:	4602      	mov	r2, r0
 801138a:	460b      	mov	r3, r1
 801138c:	4630      	mov	r0, r6
 801138e:	4639      	mov	r1, r7
 8011390:	f7ee ff28 	bl	80001e4 <__adddf3>
 8011394:	4602      	mov	r2, r0
 8011396:	460b      	mov	r3, r1
 8011398:	4650      	mov	r0, sl
 801139a:	4621      	mov	r1, r4
 801139c:	f7ee ff20 	bl	80001e0 <__aeabi_dsub>
 80113a0:	e7c6      	b.n	8011330 <__kernel_sin+0xc0>
 80113a2:	bf00      	nop
 80113a4:	f3af 8000 	nop.w
 80113a8:	5acfd57c 	.word	0x5acfd57c
 80113ac:	3de5d93a 	.word	0x3de5d93a
 80113b0:	8a2b9ceb 	.word	0x8a2b9ceb
 80113b4:	3e5ae5e6 	.word	0x3e5ae5e6
 80113b8:	57b1fe7d 	.word	0x57b1fe7d
 80113bc:	3ec71de3 	.word	0x3ec71de3
 80113c0:	19c161d5 	.word	0x19c161d5
 80113c4:	3f2a01a0 	.word	0x3f2a01a0
 80113c8:	1110f8a6 	.word	0x1110f8a6
 80113cc:	3f811111 	.word	0x3f811111
 80113d0:	55555549 	.word	0x55555549
 80113d4:	3fc55555 	.word	0x3fc55555
 80113d8:	3fe00000 	.word	0x3fe00000

080113dc <__kernel_cosf>:
 80113dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113e0:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80113e4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80113e8:	4606      	mov	r6, r0
 80113ea:	4688      	mov	r8, r1
 80113ec:	da03      	bge.n	80113f6 <__kernel_cosf+0x1a>
 80113ee:	f7ef fee1 	bl	80011b4 <__aeabi_f2iz>
 80113f2:	2800      	cmp	r0, #0
 80113f4:	d05c      	beq.n	80114b0 <__kernel_cosf+0xd4>
 80113f6:	4631      	mov	r1, r6
 80113f8:	4630      	mov	r0, r6
 80113fa:	f7ef fcff 	bl	8000dfc <__aeabi_fmul>
 80113fe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8011402:	4605      	mov	r5, r0
 8011404:	f7ef fcfa 	bl	8000dfc <__aeabi_fmul>
 8011408:	492b      	ldr	r1, [pc, #172]	; (80114b8 <__kernel_cosf+0xdc>)
 801140a:	4607      	mov	r7, r0
 801140c:	4628      	mov	r0, r5
 801140e:	f7ef fcf5 	bl	8000dfc <__aeabi_fmul>
 8011412:	492a      	ldr	r1, [pc, #168]	; (80114bc <__kernel_cosf+0xe0>)
 8011414:	f7ef fbea 	bl	8000bec <__addsf3>
 8011418:	4629      	mov	r1, r5
 801141a:	f7ef fcef 	bl	8000dfc <__aeabi_fmul>
 801141e:	4928      	ldr	r1, [pc, #160]	; (80114c0 <__kernel_cosf+0xe4>)
 8011420:	f7ef fbe2 	bl	8000be8 <__aeabi_fsub>
 8011424:	4629      	mov	r1, r5
 8011426:	f7ef fce9 	bl	8000dfc <__aeabi_fmul>
 801142a:	4926      	ldr	r1, [pc, #152]	; (80114c4 <__kernel_cosf+0xe8>)
 801142c:	f7ef fbde 	bl	8000bec <__addsf3>
 8011430:	4629      	mov	r1, r5
 8011432:	f7ef fce3 	bl	8000dfc <__aeabi_fmul>
 8011436:	4924      	ldr	r1, [pc, #144]	; (80114c8 <__kernel_cosf+0xec>)
 8011438:	f7ef fbd6 	bl	8000be8 <__aeabi_fsub>
 801143c:	4629      	mov	r1, r5
 801143e:	f7ef fcdd 	bl	8000dfc <__aeabi_fmul>
 8011442:	4922      	ldr	r1, [pc, #136]	; (80114cc <__kernel_cosf+0xf0>)
 8011444:	f7ef fbd2 	bl	8000bec <__addsf3>
 8011448:	4629      	mov	r1, r5
 801144a:	f7ef fcd7 	bl	8000dfc <__aeabi_fmul>
 801144e:	4629      	mov	r1, r5
 8011450:	f7ef fcd4 	bl	8000dfc <__aeabi_fmul>
 8011454:	4641      	mov	r1, r8
 8011456:	4605      	mov	r5, r0
 8011458:	4630      	mov	r0, r6
 801145a:	f7ef fccf 	bl	8000dfc <__aeabi_fmul>
 801145e:	4601      	mov	r1, r0
 8011460:	4628      	mov	r0, r5
 8011462:	f7ef fbc1 	bl	8000be8 <__aeabi_fsub>
 8011466:	4b1a      	ldr	r3, [pc, #104]	; (80114d0 <__kernel_cosf+0xf4>)
 8011468:	4605      	mov	r5, r0
 801146a:	429c      	cmp	r4, r3
 801146c:	dc0a      	bgt.n	8011484 <__kernel_cosf+0xa8>
 801146e:	4601      	mov	r1, r0
 8011470:	4638      	mov	r0, r7
 8011472:	f7ef fbb9 	bl	8000be8 <__aeabi_fsub>
 8011476:	4601      	mov	r1, r0
 8011478:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801147c:	f7ef fbb4 	bl	8000be8 <__aeabi_fsub>
 8011480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011484:	4b13      	ldr	r3, [pc, #76]	; (80114d4 <__kernel_cosf+0xf8>)
 8011486:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801148a:	429c      	cmp	r4, r3
 801148c:	bfcc      	ite	gt
 801148e:	4c12      	ldrgt	r4, [pc, #72]	; (80114d8 <__kernel_cosf+0xfc>)
 8011490:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8011494:	4621      	mov	r1, r4
 8011496:	f7ef fba7 	bl	8000be8 <__aeabi_fsub>
 801149a:	4621      	mov	r1, r4
 801149c:	4606      	mov	r6, r0
 801149e:	4638      	mov	r0, r7
 80114a0:	f7ef fba2 	bl	8000be8 <__aeabi_fsub>
 80114a4:	4629      	mov	r1, r5
 80114a6:	f7ef fb9f 	bl	8000be8 <__aeabi_fsub>
 80114aa:	4601      	mov	r1, r0
 80114ac:	4630      	mov	r0, r6
 80114ae:	e7e5      	b.n	801147c <__kernel_cosf+0xa0>
 80114b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80114b4:	e7e4      	b.n	8011480 <__kernel_cosf+0xa4>
 80114b6:	bf00      	nop
 80114b8:	ad47d74e 	.word	0xad47d74e
 80114bc:	310f74f6 	.word	0x310f74f6
 80114c0:	3493f27c 	.word	0x3493f27c
 80114c4:	37d00d01 	.word	0x37d00d01
 80114c8:	3ab60b61 	.word	0x3ab60b61
 80114cc:	3d2aaaab 	.word	0x3d2aaaab
 80114d0:	3e999999 	.word	0x3e999999
 80114d4:	3f480000 	.word	0x3f480000
 80114d8:	3e900000 	.word	0x3e900000

080114dc <__kernel_rem_pio2f>:
 80114dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114e0:	b0db      	sub	sp, #364	; 0x16c
 80114e2:	9202      	str	r2, [sp, #8]
 80114e4:	9304      	str	r3, [sp, #16]
 80114e6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80114e8:	4bc5      	ldr	r3, [pc, #788]	; (8011800 <__kernel_rem_pio2f+0x324>)
 80114ea:	9005      	str	r0, [sp, #20]
 80114ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114f0:	9100      	str	r1, [sp, #0]
 80114f2:	9301      	str	r3, [sp, #4]
 80114f4:	9b04      	ldr	r3, [sp, #16]
 80114f6:	3b01      	subs	r3, #1
 80114f8:	9303      	str	r3, [sp, #12]
 80114fa:	9b02      	ldr	r3, [sp, #8]
 80114fc:	1d1a      	adds	r2, r3, #4
 80114fe:	f2c0 809b 	blt.w	8011638 <__kernel_rem_pio2f+0x15c>
 8011502:	1edc      	subs	r4, r3, #3
 8011504:	bf48      	it	mi
 8011506:	1d1c      	addmi	r4, r3, #4
 8011508:	10e4      	asrs	r4, r4, #3
 801150a:	2500      	movs	r5, #0
 801150c:	f04f 0a00 	mov.w	sl, #0
 8011510:	1c67      	adds	r7, r4, #1
 8011512:	00fb      	lsls	r3, r7, #3
 8011514:	9306      	str	r3, [sp, #24]
 8011516:	9b02      	ldr	r3, [sp, #8]
 8011518:	9a03      	ldr	r2, [sp, #12]
 801151a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 801151e:	9b01      	ldr	r3, [sp, #4]
 8011520:	1aa6      	subs	r6, r4, r2
 8011522:	eb03 0802 	add.w	r8, r3, r2
 8011526:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8011528:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 801152c:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 8011530:	4545      	cmp	r5, r8
 8011532:	f340 8083 	ble.w	801163c <__kernel_rem_pio2f+0x160>
 8011536:	f04f 0800 	mov.w	r8, #0
 801153a:	f04f 0b00 	mov.w	fp, #0
 801153e:	9b04      	ldr	r3, [sp, #16]
 8011540:	aa1e      	add	r2, sp, #120	; 0x78
 8011542:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8011546:	ab46      	add	r3, sp, #280	; 0x118
 8011548:	9a01      	ldr	r2, [sp, #4]
 801154a:	4590      	cmp	r8, r2
 801154c:	f340 809c 	ble.w	8011688 <__kernel_rem_pio2f+0x1ac>
 8011550:	4613      	mov	r3, r2
 8011552:	aa0a      	add	r2, sp, #40	; 0x28
 8011554:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011558:	9308      	str	r3, [sp, #32]
 801155a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801155c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011560:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011564:	9307      	str	r3, [sp, #28]
 8011566:	ad0a      	add	r5, sp, #40	; 0x28
 8011568:	462e      	mov	r6, r5
 801156a:	46c3      	mov	fp, r8
 801156c:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8011570:	ab5a      	add	r3, sp, #360	; 0x168
 8011572:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8011576:	f853 4c50 	ldr.w	r4, [r3, #-80]
 801157a:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 801157e:	f1bb 0f00 	cmp.w	fp, #0
 8011582:	f300 8086 	bgt.w	8011692 <__kernel_rem_pio2f+0x1b6>
 8011586:	4639      	mov	r1, r7
 8011588:	4620      	mov	r0, r4
 801158a:	f000 fc25 	bl	8011dd8 <scalbnf>
 801158e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8011592:	4604      	mov	r4, r0
 8011594:	f7ef fc32 	bl	8000dfc <__aeabi_fmul>
 8011598:	f000 fbd8 	bl	8011d4c <floorf>
 801159c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80115a0:	f7ef fc2c 	bl	8000dfc <__aeabi_fmul>
 80115a4:	4601      	mov	r1, r0
 80115a6:	4620      	mov	r0, r4
 80115a8:	f7ef fb1e 	bl	8000be8 <__aeabi_fsub>
 80115ac:	4604      	mov	r4, r0
 80115ae:	f7ef fe01 	bl	80011b4 <__aeabi_f2iz>
 80115b2:	4606      	mov	r6, r0
 80115b4:	f7ef fbce 	bl	8000d54 <__aeabi_i2f>
 80115b8:	4601      	mov	r1, r0
 80115ba:	4620      	mov	r0, r4
 80115bc:	f7ef fb14 	bl	8000be8 <__aeabi_fsub>
 80115c0:	2f00      	cmp	r7, #0
 80115c2:	4681      	mov	r9, r0
 80115c4:	f340 8084 	ble.w	80116d0 <__kernel_rem_pio2f+0x1f4>
 80115c8:	f108 32ff 	add.w	r2, r8, #4294967295
 80115cc:	ab0a      	add	r3, sp, #40	; 0x28
 80115ce:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80115d2:	f1c7 0108 	rsb	r1, r7, #8
 80115d6:	fa44 f301 	asr.w	r3, r4, r1
 80115da:	441e      	add	r6, r3
 80115dc:	408b      	lsls	r3, r1
 80115de:	1ae4      	subs	r4, r4, r3
 80115e0:	f1c7 0007 	rsb	r0, r7, #7
 80115e4:	ab0a      	add	r3, sp, #40	; 0x28
 80115e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80115ea:	4104      	asrs	r4, r0
 80115ec:	2c00      	cmp	r4, #0
 80115ee:	dd7e      	ble.n	80116ee <__kernel_rem_pio2f+0x212>
 80115f0:	2200      	movs	r2, #0
 80115f2:	4692      	mov	sl, r2
 80115f4:	3601      	adds	r6, #1
 80115f6:	4590      	cmp	r8, r2
 80115f8:	f300 80b0 	bgt.w	801175c <__kernel_rem_pio2f+0x280>
 80115fc:	2f00      	cmp	r7, #0
 80115fe:	dd05      	ble.n	801160c <__kernel_rem_pio2f+0x130>
 8011600:	2f01      	cmp	r7, #1
 8011602:	f000 80bd 	beq.w	8011780 <__kernel_rem_pio2f+0x2a4>
 8011606:	2f02      	cmp	r7, #2
 8011608:	f000 80c5 	beq.w	8011796 <__kernel_rem_pio2f+0x2ba>
 801160c:	2c02      	cmp	r4, #2
 801160e:	d16e      	bne.n	80116ee <__kernel_rem_pio2f+0x212>
 8011610:	4649      	mov	r1, r9
 8011612:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011616:	f7ef fae7 	bl	8000be8 <__aeabi_fsub>
 801161a:	4681      	mov	r9, r0
 801161c:	f1ba 0f00 	cmp.w	sl, #0
 8011620:	d065      	beq.n	80116ee <__kernel_rem_pio2f+0x212>
 8011622:	4639      	mov	r1, r7
 8011624:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011628:	f000 fbd6 	bl	8011dd8 <scalbnf>
 801162c:	4601      	mov	r1, r0
 801162e:	4648      	mov	r0, r9
 8011630:	f7ef fada 	bl	8000be8 <__aeabi_fsub>
 8011634:	4681      	mov	r9, r0
 8011636:	e05a      	b.n	80116ee <__kernel_rem_pio2f+0x212>
 8011638:	2400      	movs	r4, #0
 801163a:	e766      	b.n	801150a <__kernel_rem_pio2f+0x2e>
 801163c:	42ee      	cmn	r6, r5
 801163e:	d407      	bmi.n	8011650 <__kernel_rem_pio2f+0x174>
 8011640:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011644:	f7ef fb86 	bl	8000d54 <__aeabi_i2f>
 8011648:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 801164c:	3501      	adds	r5, #1
 801164e:	e76f      	b.n	8011530 <__kernel_rem_pio2f+0x54>
 8011650:	4650      	mov	r0, sl
 8011652:	e7f9      	b.n	8011648 <__kernel_rem_pio2f+0x16c>
 8011654:	9b05      	ldr	r3, [sp, #20]
 8011656:	f8da 1000 	ldr.w	r1, [sl]
 801165a:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 801165e:	f7ef fbcd 	bl	8000dfc <__aeabi_fmul>
 8011662:	4601      	mov	r1, r0
 8011664:	4630      	mov	r0, r6
 8011666:	f7ef fac1 	bl	8000bec <__addsf3>
 801166a:	4606      	mov	r6, r0
 801166c:	f109 0901 	add.w	r9, r9, #1
 8011670:	ab46      	add	r3, sp, #280	; 0x118
 8011672:	9a03      	ldr	r2, [sp, #12]
 8011674:	f1aa 0a04 	sub.w	sl, sl, #4
 8011678:	4591      	cmp	r9, r2
 801167a:	ddeb      	ble.n	8011654 <__kernel_rem_pio2f+0x178>
 801167c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8011680:	3504      	adds	r5, #4
 8011682:	f108 0801 	add.w	r8, r8, #1
 8011686:	e75f      	b.n	8011548 <__kernel_rem_pio2f+0x6c>
 8011688:	46aa      	mov	sl, r5
 801168a:	465e      	mov	r6, fp
 801168c:	f04f 0900 	mov.w	r9, #0
 8011690:	e7ef      	b.n	8011672 <__kernel_rem_pio2f+0x196>
 8011692:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8011696:	4620      	mov	r0, r4
 8011698:	f7ef fbb0 	bl	8000dfc <__aeabi_fmul>
 801169c:	f7ef fd8a 	bl	80011b4 <__aeabi_f2iz>
 80116a0:	f7ef fb58 	bl	8000d54 <__aeabi_i2f>
 80116a4:	4649      	mov	r1, r9
 80116a6:	9009      	str	r0, [sp, #36]	; 0x24
 80116a8:	f7ef fba8 	bl	8000dfc <__aeabi_fmul>
 80116ac:	4601      	mov	r1, r0
 80116ae:	4620      	mov	r0, r4
 80116b0:	f7ef fa9a 	bl	8000be8 <__aeabi_fsub>
 80116b4:	f7ef fd7e 	bl	80011b4 <__aeabi_f2iz>
 80116b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80116be:	f846 0b04 	str.w	r0, [r6], #4
 80116c2:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7ef fa90 	bl	8000bec <__addsf3>
 80116cc:	4604      	mov	r4, r0
 80116ce:	e756      	b.n	801157e <__kernel_rem_pio2f+0xa2>
 80116d0:	d106      	bne.n	80116e0 <__kernel_rem_pio2f+0x204>
 80116d2:	f108 33ff 	add.w	r3, r8, #4294967295
 80116d6:	aa0a      	add	r2, sp, #40	; 0x28
 80116d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80116dc:	1224      	asrs	r4, r4, #8
 80116de:	e785      	b.n	80115ec <__kernel_rem_pio2f+0x110>
 80116e0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80116e4:	f7ef fd3c 	bl	8001160 <__aeabi_fcmpge>
 80116e8:	4604      	mov	r4, r0
 80116ea:	2800      	cmp	r0, #0
 80116ec:	d134      	bne.n	8011758 <__kernel_rem_pio2f+0x27c>
 80116ee:	2100      	movs	r1, #0
 80116f0:	4648      	mov	r0, r9
 80116f2:	f7ef fd17 	bl	8001124 <__aeabi_fcmpeq>
 80116f6:	2800      	cmp	r0, #0
 80116f8:	f000 809a 	beq.w	8011830 <__kernel_rem_pio2f+0x354>
 80116fc:	f108 35ff 	add.w	r5, r8, #4294967295
 8011700:	462b      	mov	r3, r5
 8011702:	2200      	movs	r2, #0
 8011704:	9901      	ldr	r1, [sp, #4]
 8011706:	428b      	cmp	r3, r1
 8011708:	da4d      	bge.n	80117a6 <__kernel_rem_pio2f+0x2ca>
 801170a:	2a00      	cmp	r2, #0
 801170c:	d07c      	beq.n	8011808 <__kernel_rem_pio2f+0x32c>
 801170e:	ab0a      	add	r3, sp, #40	; 0x28
 8011710:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011714:	3f08      	subs	r7, #8
 8011716:	2b00      	cmp	r3, #0
 8011718:	f000 8088 	beq.w	801182c <__kernel_rem_pio2f+0x350>
 801171c:	4639      	mov	r1, r7
 801171e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8011722:	f000 fb59 	bl	8011dd8 <scalbnf>
 8011726:	46aa      	mov	sl, r5
 8011728:	4681      	mov	r9, r0
 801172a:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 801172e:	af46      	add	r7, sp, #280	; 0x118
 8011730:	f1ba 0f00 	cmp.w	sl, #0
 8011734:	f280 80b1 	bge.w	801189a <__kernel_rem_pio2f+0x3be>
 8011738:	46a9      	mov	r9, r5
 801173a:	f04f 0a00 	mov.w	sl, #0
 801173e:	2200      	movs	r2, #0
 8011740:	f1b9 0f00 	cmp.w	r9, #0
 8011744:	f2c0 80db 	blt.w	80118fe <__kernel_rem_pio2f+0x422>
 8011748:	a946      	add	r1, sp, #280	; 0x118
 801174a:	4617      	mov	r7, r2
 801174c:	f04f 0800 	mov.w	r8, #0
 8011750:	4b2c      	ldr	r3, [pc, #176]	; (8011804 <__kernel_rem_pio2f+0x328>)
 8011752:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 8011756:	e0c3      	b.n	80118e0 <__kernel_rem_pio2f+0x404>
 8011758:	2402      	movs	r4, #2
 801175a:	e749      	b.n	80115f0 <__kernel_rem_pio2f+0x114>
 801175c:	682b      	ldr	r3, [r5, #0]
 801175e:	f1ba 0f00 	cmp.w	sl, #0
 8011762:	d108      	bne.n	8011776 <__kernel_rem_pio2f+0x29a>
 8011764:	b11b      	cbz	r3, 801176e <__kernel_rem_pio2f+0x292>
 8011766:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801176a:	602b      	str	r3, [r5, #0]
 801176c:	2301      	movs	r3, #1
 801176e:	469a      	mov	sl, r3
 8011770:	3201      	adds	r2, #1
 8011772:	3504      	adds	r5, #4
 8011774:	e73f      	b.n	80115f6 <__kernel_rem_pio2f+0x11a>
 8011776:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801177a:	602b      	str	r3, [r5, #0]
 801177c:	4653      	mov	r3, sl
 801177e:	e7f6      	b.n	801176e <__kernel_rem_pio2f+0x292>
 8011780:	f108 32ff 	add.w	r2, r8, #4294967295
 8011784:	ab0a      	add	r3, sp, #40	; 0x28
 8011786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801178a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801178e:	a90a      	add	r1, sp, #40	; 0x28
 8011790:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011794:	e73a      	b.n	801160c <__kernel_rem_pio2f+0x130>
 8011796:	f108 32ff 	add.w	r2, r8, #4294967295
 801179a:	ab0a      	add	r3, sp, #40	; 0x28
 801179c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80117a4:	e7f3      	b.n	801178e <__kernel_rem_pio2f+0x2b2>
 80117a6:	a90a      	add	r1, sp, #40	; 0x28
 80117a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80117ac:	3b01      	subs	r3, #1
 80117ae:	430a      	orrs	r2, r1
 80117b0:	e7a8      	b.n	8011704 <__kernel_rem_pio2f+0x228>
 80117b2:	3301      	adds	r3, #1
 80117b4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80117b8:	2900      	cmp	r1, #0
 80117ba:	d0fa      	beq.n	80117b2 <__kernel_rem_pio2f+0x2d6>
 80117bc:	9a04      	ldr	r2, [sp, #16]
 80117be:	f108 0501 	add.w	r5, r8, #1
 80117c2:	eb08 0402 	add.w	r4, r8, r2
 80117c6:	aa1e      	add	r2, sp, #120	; 0x78
 80117c8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80117cc:	4498      	add	r8, r3
 80117ce:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 80117d2:	45a8      	cmp	r8, r5
 80117d4:	f6ff aec7 	blt.w	8011566 <__kernel_rem_pio2f+0x8a>
 80117d8:	9b07      	ldr	r3, [sp, #28]
 80117da:	46a3      	mov	fp, r4
 80117dc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80117e0:	f7ef fab8 	bl	8000d54 <__aeabi_i2f>
 80117e4:	f04f 0a00 	mov.w	sl, #0
 80117e8:	2600      	movs	r6, #0
 80117ea:	f84b 0b04 	str.w	r0, [fp], #4
 80117ee:	9b03      	ldr	r3, [sp, #12]
 80117f0:	459a      	cmp	sl, r3
 80117f2:	dd0c      	ble.n	801180e <__kernel_rem_pio2f+0x332>
 80117f4:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 80117f8:	465c      	mov	r4, fp
 80117fa:	3501      	adds	r5, #1
 80117fc:	e7e9      	b.n	80117d2 <__kernel_rem_pio2f+0x2f6>
 80117fe:	bf00      	nop
 8011800:	08015b54 	.word	0x08015b54
 8011804:	08015b28 	.word	0x08015b28
 8011808:	2301      	movs	r3, #1
 801180a:	9a08      	ldr	r2, [sp, #32]
 801180c:	e7d2      	b.n	80117b4 <__kernel_rem_pio2f+0x2d8>
 801180e:	9b05      	ldr	r3, [sp, #20]
 8011810:	f854 0904 	ldr.w	r0, [r4], #-4
 8011814:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8011818:	f7ef faf0 	bl	8000dfc <__aeabi_fmul>
 801181c:	4601      	mov	r1, r0
 801181e:	4630      	mov	r0, r6
 8011820:	f7ef f9e4 	bl	8000bec <__addsf3>
 8011824:	f10a 0a01 	add.w	sl, sl, #1
 8011828:	4606      	mov	r6, r0
 801182a:	e7e0      	b.n	80117ee <__kernel_rem_pio2f+0x312>
 801182c:	3d01      	subs	r5, #1
 801182e:	e76e      	b.n	801170e <__kernel_rem_pio2f+0x232>
 8011830:	9b06      	ldr	r3, [sp, #24]
 8011832:	9a02      	ldr	r2, [sp, #8]
 8011834:	4648      	mov	r0, r9
 8011836:	1a99      	subs	r1, r3, r2
 8011838:	f000 face 	bl	8011dd8 <scalbnf>
 801183c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8011840:	4605      	mov	r5, r0
 8011842:	f7ef fc8d 	bl	8001160 <__aeabi_fcmpge>
 8011846:	b300      	cbz	r0, 801188a <__kernel_rem_pio2f+0x3ae>
 8011848:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 801184c:	4628      	mov	r0, r5
 801184e:	f7ef fad5 	bl	8000dfc <__aeabi_fmul>
 8011852:	f7ef fcaf 	bl	80011b4 <__aeabi_f2iz>
 8011856:	f7ef fa7d 	bl	8000d54 <__aeabi_i2f>
 801185a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 801185e:	4681      	mov	r9, r0
 8011860:	f7ef facc 	bl	8000dfc <__aeabi_fmul>
 8011864:	4601      	mov	r1, r0
 8011866:	4628      	mov	r0, r5
 8011868:	f7ef f9be 	bl	8000be8 <__aeabi_fsub>
 801186c:	f7ef fca2 	bl	80011b4 <__aeabi_f2iz>
 8011870:	ab0a      	add	r3, sp, #40	; 0x28
 8011872:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011876:	4648      	mov	r0, r9
 8011878:	f7ef fc9c 	bl	80011b4 <__aeabi_f2iz>
 801187c:	f108 0501 	add.w	r5, r8, #1
 8011880:	ab0a      	add	r3, sp, #40	; 0x28
 8011882:	3708      	adds	r7, #8
 8011884:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011888:	e748      	b.n	801171c <__kernel_rem_pio2f+0x240>
 801188a:	4628      	mov	r0, r5
 801188c:	f7ef fc92 	bl	80011b4 <__aeabi_f2iz>
 8011890:	ab0a      	add	r3, sp, #40	; 0x28
 8011892:	4645      	mov	r5, r8
 8011894:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011898:	e740      	b.n	801171c <__kernel_rem_pio2f+0x240>
 801189a:	ab0a      	add	r3, sp, #40	; 0x28
 801189c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80118a0:	f7ef fa58 	bl	8000d54 <__aeabi_i2f>
 80118a4:	4649      	mov	r1, r9
 80118a6:	f7ef faa9 	bl	8000dfc <__aeabi_fmul>
 80118aa:	4641      	mov	r1, r8
 80118ac:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 80118b0:	4648      	mov	r0, r9
 80118b2:	f7ef faa3 	bl	8000dfc <__aeabi_fmul>
 80118b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80118ba:	4681      	mov	r9, r0
 80118bc:	e738      	b.n	8011730 <__kernel_rem_pio2f+0x254>
 80118be:	f853 0b04 	ldr.w	r0, [r3], #4
 80118c2:	f85b 1b04 	ldr.w	r1, [fp], #4
 80118c6:	9203      	str	r2, [sp, #12]
 80118c8:	9302      	str	r3, [sp, #8]
 80118ca:	f7ef fa97 	bl	8000dfc <__aeabi_fmul>
 80118ce:	4601      	mov	r1, r0
 80118d0:	4638      	mov	r0, r7
 80118d2:	f7ef f98b 	bl	8000bec <__addsf3>
 80118d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80118da:	4607      	mov	r7, r0
 80118dc:	f108 0801 	add.w	r8, r8, #1
 80118e0:	9901      	ldr	r1, [sp, #4]
 80118e2:	4588      	cmp	r8, r1
 80118e4:	dc01      	bgt.n	80118ea <__kernel_rem_pio2f+0x40e>
 80118e6:	45c2      	cmp	sl, r8
 80118e8:	dae9      	bge.n	80118be <__kernel_rem_pio2f+0x3e2>
 80118ea:	ab5a      	add	r3, sp, #360	; 0x168
 80118ec:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80118f0:	f843 7ca0 	str.w	r7, [r3, #-160]
 80118f4:	f109 39ff 	add.w	r9, r9, #4294967295
 80118f8:	f10a 0a01 	add.w	sl, sl, #1
 80118fc:	e720      	b.n	8011740 <__kernel_rem_pio2f+0x264>
 80118fe:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8011900:	2b02      	cmp	r3, #2
 8011902:	dc07      	bgt.n	8011914 <__kernel_rem_pio2f+0x438>
 8011904:	2b00      	cmp	r3, #0
 8011906:	dc4d      	bgt.n	80119a4 <__kernel_rem_pio2f+0x4c8>
 8011908:	d02e      	beq.n	8011968 <__kernel_rem_pio2f+0x48c>
 801190a:	f006 0007 	and.w	r0, r6, #7
 801190e:	b05b      	add	sp, #364	; 0x16c
 8011910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011914:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8011916:	2b03      	cmp	r3, #3
 8011918:	d1f7      	bne.n	801190a <__kernel_rem_pio2f+0x42e>
 801191a:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 801191e:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 8011922:	46b8      	mov	r8, r7
 8011924:	46aa      	mov	sl, r5
 8011926:	f1ba 0f00 	cmp.w	sl, #0
 801192a:	dc48      	bgt.n	80119be <__kernel_rem_pio2f+0x4e2>
 801192c:	46a9      	mov	r9, r5
 801192e:	f1b9 0f01 	cmp.w	r9, #1
 8011932:	dc5f      	bgt.n	80119f4 <__kernel_rem_pio2f+0x518>
 8011934:	2000      	movs	r0, #0
 8011936:	2d01      	cmp	r5, #1
 8011938:	dc75      	bgt.n	8011a26 <__kernel_rem_pio2f+0x54a>
 801193a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801193c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801193e:	2c00      	cmp	r4, #0
 8011940:	d177      	bne.n	8011a32 <__kernel_rem_pio2f+0x556>
 8011942:	9900      	ldr	r1, [sp, #0]
 8011944:	600a      	str	r2, [r1, #0]
 8011946:	460a      	mov	r2, r1
 8011948:	604b      	str	r3, [r1, #4]
 801194a:	6090      	str	r0, [r2, #8]
 801194c:	e7dd      	b.n	801190a <__kernel_rem_pio2f+0x42e>
 801194e:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 8011952:	f7ef f94b 	bl	8000bec <__addsf3>
 8011956:	3d01      	subs	r5, #1
 8011958:	2d00      	cmp	r5, #0
 801195a:	daf8      	bge.n	801194e <__kernel_rem_pio2f+0x472>
 801195c:	b10c      	cbz	r4, 8011962 <__kernel_rem_pio2f+0x486>
 801195e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8011962:	9b00      	ldr	r3, [sp, #0]
 8011964:	6018      	str	r0, [r3, #0]
 8011966:	e7d0      	b.n	801190a <__kernel_rem_pio2f+0x42e>
 8011968:	2000      	movs	r0, #0
 801196a:	af32      	add	r7, sp, #200	; 0xc8
 801196c:	e7f4      	b.n	8011958 <__kernel_rem_pio2f+0x47c>
 801196e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8011972:	f7ef f93b 	bl	8000bec <__addsf3>
 8011976:	3f01      	subs	r7, #1
 8011978:	2f00      	cmp	r7, #0
 801197a:	daf8      	bge.n	801196e <__kernel_rem_pio2f+0x492>
 801197c:	b1bc      	cbz	r4, 80119ae <__kernel_rem_pio2f+0x4d2>
 801197e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8011982:	9a00      	ldr	r2, [sp, #0]
 8011984:	4601      	mov	r1, r0
 8011986:	6013      	str	r3, [r2, #0]
 8011988:	9832      	ldr	r0, [sp, #200]	; 0xc8
 801198a:	f7ef f92d 	bl	8000be8 <__aeabi_fsub>
 801198e:	2701      	movs	r7, #1
 8011990:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8011994:	42bd      	cmp	r5, r7
 8011996:	da0c      	bge.n	80119b2 <__kernel_rem_pio2f+0x4d6>
 8011998:	b10c      	cbz	r4, 801199e <__kernel_rem_pio2f+0x4c2>
 801199a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801199e:	9b00      	ldr	r3, [sp, #0]
 80119a0:	6058      	str	r0, [r3, #4]
 80119a2:	e7b2      	b.n	801190a <__kernel_rem_pio2f+0x42e>
 80119a4:	462f      	mov	r7, r5
 80119a6:	2000      	movs	r0, #0
 80119a8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 80119ac:	e7e4      	b.n	8011978 <__kernel_rem_pio2f+0x49c>
 80119ae:	4603      	mov	r3, r0
 80119b0:	e7e7      	b.n	8011982 <__kernel_rem_pio2f+0x4a6>
 80119b2:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 80119b6:	f7ef f919 	bl	8000bec <__addsf3>
 80119ba:	3701      	adds	r7, #1
 80119bc:	e7ea      	b.n	8011994 <__kernel_rem_pio2f+0x4b8>
 80119be:	f8d8 3000 	ldr.w	r3, [r8]
 80119c2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80119c6:	4619      	mov	r1, r3
 80119c8:	4610      	mov	r0, r2
 80119ca:	9302      	str	r3, [sp, #8]
 80119cc:	9201      	str	r2, [sp, #4]
 80119ce:	f7ef f90d 	bl	8000bec <__addsf3>
 80119d2:	9a01      	ldr	r2, [sp, #4]
 80119d4:	4601      	mov	r1, r0
 80119d6:	4681      	mov	r9, r0
 80119d8:	4610      	mov	r0, r2
 80119da:	f7ef f905 	bl	8000be8 <__aeabi_fsub>
 80119de:	9b02      	ldr	r3, [sp, #8]
 80119e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80119e4:	4619      	mov	r1, r3
 80119e6:	f7ef f901 	bl	8000bec <__addsf3>
 80119ea:	f848 0904 	str.w	r0, [r8], #-4
 80119ee:	f8c8 9000 	str.w	r9, [r8]
 80119f2:	e798      	b.n	8011926 <__kernel_rem_pio2f+0x44a>
 80119f4:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80119f8:	f8d7 a000 	ldr.w	sl, [r7]
 80119fc:	4618      	mov	r0, r3
 80119fe:	4651      	mov	r1, sl
 8011a00:	9301      	str	r3, [sp, #4]
 8011a02:	f7ef f8f3 	bl	8000bec <__addsf3>
 8011a06:	9b01      	ldr	r3, [sp, #4]
 8011a08:	4601      	mov	r1, r0
 8011a0a:	4680      	mov	r8, r0
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7ef f8eb 	bl	8000be8 <__aeabi_fsub>
 8011a12:	4651      	mov	r1, sl
 8011a14:	f7ef f8ea 	bl	8000bec <__addsf3>
 8011a18:	f847 0904 	str.w	r0, [r7], #-4
 8011a1c:	f109 39ff 	add.w	r9, r9, #4294967295
 8011a20:	f8c7 8000 	str.w	r8, [r7]
 8011a24:	e783      	b.n	801192e <__kernel_rem_pio2f+0x452>
 8011a26:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 8011a2a:	f7ef f8df 	bl	8000bec <__addsf3>
 8011a2e:	3d01      	subs	r5, #1
 8011a30:	e781      	b.n	8011936 <__kernel_rem_pio2f+0x45a>
 8011a32:	9900      	ldr	r1, [sp, #0]
 8011a34:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8011a38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011a3c:	600a      	str	r2, [r1, #0]
 8011a3e:	604b      	str	r3, [r1, #4]
 8011a40:	460a      	mov	r2, r1
 8011a42:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8011a46:	e780      	b.n	801194a <__kernel_rem_pio2f+0x46e>

08011a48 <__kernel_sinf>:
 8011a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a4c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8011a50:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8011a54:	4604      	mov	r4, r0
 8011a56:	460f      	mov	r7, r1
 8011a58:	4691      	mov	r9, r2
 8011a5a:	da03      	bge.n	8011a64 <__kernel_sinf+0x1c>
 8011a5c:	f7ef fbaa 	bl	80011b4 <__aeabi_f2iz>
 8011a60:	2800      	cmp	r0, #0
 8011a62:	d035      	beq.n	8011ad0 <__kernel_sinf+0x88>
 8011a64:	4621      	mov	r1, r4
 8011a66:	4620      	mov	r0, r4
 8011a68:	f7ef f9c8 	bl	8000dfc <__aeabi_fmul>
 8011a6c:	4605      	mov	r5, r0
 8011a6e:	4601      	mov	r1, r0
 8011a70:	4620      	mov	r0, r4
 8011a72:	f7ef f9c3 	bl	8000dfc <__aeabi_fmul>
 8011a76:	4929      	ldr	r1, [pc, #164]	; (8011b1c <__kernel_sinf+0xd4>)
 8011a78:	4606      	mov	r6, r0
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	f7ef f9be 	bl	8000dfc <__aeabi_fmul>
 8011a80:	4927      	ldr	r1, [pc, #156]	; (8011b20 <__kernel_sinf+0xd8>)
 8011a82:	f7ef f8b1 	bl	8000be8 <__aeabi_fsub>
 8011a86:	4629      	mov	r1, r5
 8011a88:	f7ef f9b8 	bl	8000dfc <__aeabi_fmul>
 8011a8c:	4925      	ldr	r1, [pc, #148]	; (8011b24 <__kernel_sinf+0xdc>)
 8011a8e:	f7ef f8ad 	bl	8000bec <__addsf3>
 8011a92:	4629      	mov	r1, r5
 8011a94:	f7ef f9b2 	bl	8000dfc <__aeabi_fmul>
 8011a98:	4923      	ldr	r1, [pc, #140]	; (8011b28 <__kernel_sinf+0xe0>)
 8011a9a:	f7ef f8a5 	bl	8000be8 <__aeabi_fsub>
 8011a9e:	4629      	mov	r1, r5
 8011aa0:	f7ef f9ac 	bl	8000dfc <__aeabi_fmul>
 8011aa4:	4921      	ldr	r1, [pc, #132]	; (8011b2c <__kernel_sinf+0xe4>)
 8011aa6:	f7ef f8a1 	bl	8000bec <__addsf3>
 8011aaa:	4680      	mov	r8, r0
 8011aac:	f1b9 0f00 	cmp.w	r9, #0
 8011ab0:	d111      	bne.n	8011ad6 <__kernel_sinf+0x8e>
 8011ab2:	4601      	mov	r1, r0
 8011ab4:	4628      	mov	r0, r5
 8011ab6:	f7ef f9a1 	bl	8000dfc <__aeabi_fmul>
 8011aba:	491d      	ldr	r1, [pc, #116]	; (8011b30 <__kernel_sinf+0xe8>)
 8011abc:	f7ef f894 	bl	8000be8 <__aeabi_fsub>
 8011ac0:	4631      	mov	r1, r6
 8011ac2:	f7ef f99b 	bl	8000dfc <__aeabi_fmul>
 8011ac6:	4601      	mov	r1, r0
 8011ac8:	4620      	mov	r0, r4
 8011aca:	f7ef f88f 	bl	8000bec <__addsf3>
 8011ace:	4604      	mov	r4, r0
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ad6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8011ada:	4638      	mov	r0, r7
 8011adc:	f7ef f98e 	bl	8000dfc <__aeabi_fmul>
 8011ae0:	4641      	mov	r1, r8
 8011ae2:	4681      	mov	r9, r0
 8011ae4:	4630      	mov	r0, r6
 8011ae6:	f7ef f989 	bl	8000dfc <__aeabi_fmul>
 8011aea:	4601      	mov	r1, r0
 8011aec:	4648      	mov	r0, r9
 8011aee:	f7ef f87b 	bl	8000be8 <__aeabi_fsub>
 8011af2:	4629      	mov	r1, r5
 8011af4:	f7ef f982 	bl	8000dfc <__aeabi_fmul>
 8011af8:	4639      	mov	r1, r7
 8011afa:	f7ef f875 	bl	8000be8 <__aeabi_fsub>
 8011afe:	490c      	ldr	r1, [pc, #48]	; (8011b30 <__kernel_sinf+0xe8>)
 8011b00:	4605      	mov	r5, r0
 8011b02:	4630      	mov	r0, r6
 8011b04:	f7ef f97a 	bl	8000dfc <__aeabi_fmul>
 8011b08:	4601      	mov	r1, r0
 8011b0a:	4628      	mov	r0, r5
 8011b0c:	f7ef f86e 	bl	8000bec <__addsf3>
 8011b10:	4601      	mov	r1, r0
 8011b12:	4620      	mov	r0, r4
 8011b14:	f7ef f868 	bl	8000be8 <__aeabi_fsub>
 8011b18:	e7d9      	b.n	8011ace <__kernel_sinf+0x86>
 8011b1a:	bf00      	nop
 8011b1c:	2f2ec9d3 	.word	0x2f2ec9d3
 8011b20:	32d72f34 	.word	0x32d72f34
 8011b24:	3638ef1b 	.word	0x3638ef1b
 8011b28:	39500d01 	.word	0x39500d01
 8011b2c:	3c088889 	.word	0x3c088889
 8011b30:	3e2aaaab 	.word	0x3e2aaaab

08011b34 <fabs>:
 8011b34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011b38:	4770      	bx	lr
 8011b3a:	0000      	movs	r0, r0
 8011b3c:	0000      	movs	r0, r0
	...

08011b40 <floor>:
 8011b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b44:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8011b48:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8011b4c:	2e13      	cmp	r6, #19
 8011b4e:	4602      	mov	r2, r0
 8011b50:	460b      	mov	r3, r1
 8011b52:	4607      	mov	r7, r0
 8011b54:	460c      	mov	r4, r1
 8011b56:	4605      	mov	r5, r0
 8011b58:	dc34      	bgt.n	8011bc4 <floor+0x84>
 8011b5a:	2e00      	cmp	r6, #0
 8011b5c:	da15      	bge.n	8011b8a <floor+0x4a>
 8011b5e:	a334      	add	r3, pc, #208	; (adr r3, 8011c30 <floor+0xf0>)
 8011b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b64:	f7ee fb3e 	bl	80001e4 <__adddf3>
 8011b68:	2200      	movs	r2, #0
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	f7ee ff80 	bl	8000a70 <__aeabi_dcmpgt>
 8011b70:	b140      	cbz	r0, 8011b84 <floor+0x44>
 8011b72:	2c00      	cmp	r4, #0
 8011b74:	da59      	bge.n	8011c2a <floor+0xea>
 8011b76:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011b7a:	ea57 0503 	orrs.w	r5, r7, r3
 8011b7e:	d001      	beq.n	8011b84 <floor+0x44>
 8011b80:	2500      	movs	r5, #0
 8011b82:	4c2d      	ldr	r4, [pc, #180]	; (8011c38 <floor+0xf8>)
 8011b84:	4623      	mov	r3, r4
 8011b86:	462f      	mov	r7, r5
 8011b88:	e025      	b.n	8011bd6 <floor+0x96>
 8011b8a:	4a2c      	ldr	r2, [pc, #176]	; (8011c3c <floor+0xfc>)
 8011b8c:	fa42 f806 	asr.w	r8, r2, r6
 8011b90:	ea01 0208 	and.w	r2, r1, r8
 8011b94:	4302      	orrs	r2, r0
 8011b96:	d01e      	beq.n	8011bd6 <floor+0x96>
 8011b98:	a325      	add	r3, pc, #148	; (adr r3, 8011c30 <floor+0xf0>)
 8011b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9e:	f7ee fb21 	bl	80001e4 <__adddf3>
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	f7ee ff63 	bl	8000a70 <__aeabi_dcmpgt>
 8011baa:	2800      	cmp	r0, #0
 8011bac:	d0ea      	beq.n	8011b84 <floor+0x44>
 8011bae:	2c00      	cmp	r4, #0
 8011bb0:	bfbe      	ittt	lt
 8011bb2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011bb6:	fa43 f606 	asrlt.w	r6, r3, r6
 8011bba:	19a4      	addlt	r4, r4, r6
 8011bbc:	2500      	movs	r5, #0
 8011bbe:	ea24 0408 	bic.w	r4, r4, r8
 8011bc2:	e7df      	b.n	8011b84 <floor+0x44>
 8011bc4:	2e33      	cmp	r6, #51	; 0x33
 8011bc6:	dd0a      	ble.n	8011bde <floor+0x9e>
 8011bc8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011bcc:	d103      	bne.n	8011bd6 <floor+0x96>
 8011bce:	f7ee fb09 	bl	80001e4 <__adddf3>
 8011bd2:	4607      	mov	r7, r0
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	4638      	mov	r0, r7
 8011bd8:	4619      	mov	r1, r3
 8011bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bde:	f04f 32ff 	mov.w	r2, #4294967295
 8011be2:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8011be6:	fa22 f808 	lsr.w	r8, r2, r8
 8011bea:	ea18 0f00 	tst.w	r8, r0
 8011bee:	d0f2      	beq.n	8011bd6 <floor+0x96>
 8011bf0:	a30f      	add	r3, pc, #60	; (adr r3, 8011c30 <floor+0xf0>)
 8011bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf6:	f7ee faf5 	bl	80001e4 <__adddf3>
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	f7ee ff37 	bl	8000a70 <__aeabi_dcmpgt>
 8011c02:	2800      	cmp	r0, #0
 8011c04:	d0be      	beq.n	8011b84 <floor+0x44>
 8011c06:	2c00      	cmp	r4, #0
 8011c08:	da02      	bge.n	8011c10 <floor+0xd0>
 8011c0a:	2e14      	cmp	r6, #20
 8011c0c:	d103      	bne.n	8011c16 <floor+0xd6>
 8011c0e:	3401      	adds	r4, #1
 8011c10:	ea25 0508 	bic.w	r5, r5, r8
 8011c14:	e7b6      	b.n	8011b84 <floor+0x44>
 8011c16:	2301      	movs	r3, #1
 8011c18:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011c1c:	fa03 f606 	lsl.w	r6, r3, r6
 8011c20:	4435      	add	r5, r6
 8011c22:	42bd      	cmp	r5, r7
 8011c24:	bf38      	it	cc
 8011c26:	18e4      	addcc	r4, r4, r3
 8011c28:	e7f2      	b.n	8011c10 <floor+0xd0>
 8011c2a:	2500      	movs	r5, #0
 8011c2c:	462c      	mov	r4, r5
 8011c2e:	e7a9      	b.n	8011b84 <floor+0x44>
 8011c30:	8800759c 	.word	0x8800759c
 8011c34:	7e37e43c 	.word	0x7e37e43c
 8011c38:	bff00000 	.word	0xbff00000
 8011c3c:	000fffff 	.word	0x000fffff

08011c40 <scalbn>:
 8011c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c42:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8011c46:	4604      	mov	r4, r0
 8011c48:	460d      	mov	r5, r1
 8011c4a:	4617      	mov	r7, r2
 8011c4c:	460b      	mov	r3, r1
 8011c4e:	b996      	cbnz	r6, 8011c76 <scalbn+0x36>
 8011c50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011c54:	4303      	orrs	r3, r0
 8011c56:	d039      	beq.n	8011ccc <scalbn+0x8c>
 8011c58:	4b35      	ldr	r3, [pc, #212]	; (8011d30 <scalbn+0xf0>)
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	f7ee fc78 	bl	8000550 <__aeabi_dmul>
 8011c60:	4b34      	ldr	r3, [pc, #208]	; (8011d34 <scalbn+0xf4>)
 8011c62:	4604      	mov	r4, r0
 8011c64:	429f      	cmp	r7, r3
 8011c66:	460d      	mov	r5, r1
 8011c68:	da0f      	bge.n	8011c8a <scalbn+0x4a>
 8011c6a:	a32d      	add	r3, pc, #180	; (adr r3, 8011d20 <scalbn+0xe0>)
 8011c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c70:	f7ee fc6e 	bl	8000550 <__aeabi_dmul>
 8011c74:	e006      	b.n	8011c84 <scalbn+0x44>
 8011c76:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011c7a:	4296      	cmp	r6, r2
 8011c7c:	d10a      	bne.n	8011c94 <scalbn+0x54>
 8011c7e:	4602      	mov	r2, r0
 8011c80:	f7ee fab0 	bl	80001e4 <__adddf3>
 8011c84:	4604      	mov	r4, r0
 8011c86:	460d      	mov	r5, r1
 8011c88:	e020      	b.n	8011ccc <scalbn+0x8c>
 8011c8a:	460b      	mov	r3, r1
 8011c8c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011c90:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8011c94:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8011c98:	19b9      	adds	r1, r7, r6
 8011c9a:	4291      	cmp	r1, r2
 8011c9c:	dd0e      	ble.n	8011cbc <scalbn+0x7c>
 8011c9e:	a322      	add	r3, pc, #136	; (adr r3, 8011d28 <scalbn+0xe8>)
 8011ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8011ca8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8011cac:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8011cb0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8011cb4:	4820      	ldr	r0, [pc, #128]	; (8011d38 <scalbn+0xf8>)
 8011cb6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8011cba:	e7d9      	b.n	8011c70 <scalbn+0x30>
 8011cbc:	2900      	cmp	r1, #0
 8011cbe:	dd08      	ble.n	8011cd2 <scalbn+0x92>
 8011cc0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011cc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011cc8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8011ccc:	4620      	mov	r0, r4
 8011cce:	4629      	mov	r1, r5
 8011cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cd2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8011cd6:	da16      	bge.n	8011d06 <scalbn+0xc6>
 8011cd8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011cdc:	429f      	cmp	r7, r3
 8011cde:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8011ce2:	dd08      	ble.n	8011cf6 <scalbn+0xb6>
 8011ce4:	4c15      	ldr	r4, [pc, #84]	; (8011d3c <scalbn+0xfc>)
 8011ce6:	4814      	ldr	r0, [pc, #80]	; (8011d38 <scalbn+0xf8>)
 8011ce8:	f363 74df 	bfi	r4, r3, #31, #1
 8011cec:	a30e      	add	r3, pc, #56	; (adr r3, 8011d28 <scalbn+0xe8>)
 8011cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf2:	4621      	mov	r1, r4
 8011cf4:	e7bc      	b.n	8011c70 <scalbn+0x30>
 8011cf6:	4c12      	ldr	r4, [pc, #72]	; (8011d40 <scalbn+0x100>)
 8011cf8:	4812      	ldr	r0, [pc, #72]	; (8011d44 <scalbn+0x104>)
 8011cfa:	f363 74df 	bfi	r4, r3, #31, #1
 8011cfe:	a308      	add	r3, pc, #32	; (adr r3, 8011d20 <scalbn+0xe0>)
 8011d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d04:	e7f5      	b.n	8011cf2 <scalbn+0xb2>
 8011d06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011d0a:	3136      	adds	r1, #54	; 0x36
 8011d0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011d10:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8011d14:	4620      	mov	r0, r4
 8011d16:	4629      	mov	r1, r5
 8011d18:	2200      	movs	r2, #0
 8011d1a:	4b0b      	ldr	r3, [pc, #44]	; (8011d48 <scalbn+0x108>)
 8011d1c:	e7a8      	b.n	8011c70 <scalbn+0x30>
 8011d1e:	bf00      	nop
 8011d20:	c2f8f359 	.word	0xc2f8f359
 8011d24:	01a56e1f 	.word	0x01a56e1f
 8011d28:	8800759c 	.word	0x8800759c
 8011d2c:	7e37e43c 	.word	0x7e37e43c
 8011d30:	43500000 	.word	0x43500000
 8011d34:	ffff3cb0 	.word	0xffff3cb0
 8011d38:	8800759c 	.word	0x8800759c
 8011d3c:	7e37e43c 	.word	0x7e37e43c
 8011d40:	01a56e1f 	.word	0x01a56e1f
 8011d44:	c2f8f359 	.word	0xc2f8f359
 8011d48:	3c900000 	.word	0x3c900000

08011d4c <floorf>:
 8011d4c:	b570      	push	{r4, r5, r6, lr}
 8011d4e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8011d52:	3d7f      	subs	r5, #127	; 0x7f
 8011d54:	2d16      	cmp	r5, #22
 8011d56:	4601      	mov	r1, r0
 8011d58:	4604      	mov	r4, r0
 8011d5a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8011d5e:	dc26      	bgt.n	8011dae <floorf+0x62>
 8011d60:	2d00      	cmp	r5, #0
 8011d62:	da0e      	bge.n	8011d82 <floorf+0x36>
 8011d64:	4917      	ldr	r1, [pc, #92]	; (8011dc4 <floorf+0x78>)
 8011d66:	f7ee ff41 	bl	8000bec <__addsf3>
 8011d6a:	2100      	movs	r1, #0
 8011d6c:	f7ef fa02 	bl	8001174 <__aeabi_fcmpgt>
 8011d70:	b128      	cbz	r0, 8011d7e <floorf+0x32>
 8011d72:	2c00      	cmp	r4, #0
 8011d74:	da23      	bge.n	8011dbe <floorf+0x72>
 8011d76:	4b14      	ldr	r3, [pc, #80]	; (8011dc8 <floorf+0x7c>)
 8011d78:	2e00      	cmp	r6, #0
 8011d7a:	bf18      	it	ne
 8011d7c:	461c      	movne	r4, r3
 8011d7e:	4621      	mov	r1, r4
 8011d80:	e01b      	b.n	8011dba <floorf+0x6e>
 8011d82:	4e12      	ldr	r6, [pc, #72]	; (8011dcc <floorf+0x80>)
 8011d84:	412e      	asrs	r6, r5
 8011d86:	4230      	tst	r0, r6
 8011d88:	d017      	beq.n	8011dba <floorf+0x6e>
 8011d8a:	490e      	ldr	r1, [pc, #56]	; (8011dc4 <floorf+0x78>)
 8011d8c:	f7ee ff2e 	bl	8000bec <__addsf3>
 8011d90:	2100      	movs	r1, #0
 8011d92:	f7ef f9ef 	bl	8001174 <__aeabi_fcmpgt>
 8011d96:	2800      	cmp	r0, #0
 8011d98:	d0f1      	beq.n	8011d7e <floorf+0x32>
 8011d9a:	2c00      	cmp	r4, #0
 8011d9c:	bfbe      	ittt	lt
 8011d9e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8011da2:	fa43 f505 	asrlt.w	r5, r3, r5
 8011da6:	1964      	addlt	r4, r4, r5
 8011da8:	ea24 0406 	bic.w	r4, r4, r6
 8011dac:	e7e7      	b.n	8011d7e <floorf+0x32>
 8011dae:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8011db2:	d302      	bcc.n	8011dba <floorf+0x6e>
 8011db4:	f7ee ff1a 	bl	8000bec <__addsf3>
 8011db8:	4601      	mov	r1, r0
 8011dba:	4608      	mov	r0, r1
 8011dbc:	bd70      	pop	{r4, r5, r6, pc}
 8011dbe:	2400      	movs	r4, #0
 8011dc0:	e7dd      	b.n	8011d7e <floorf+0x32>
 8011dc2:	bf00      	nop
 8011dc4:	7149f2ca 	.word	0x7149f2ca
 8011dc8:	bf800000 	.word	0xbf800000
 8011dcc:	007fffff 	.word	0x007fffff

08011dd0 <nanf>:
 8011dd0:	4800      	ldr	r0, [pc, #0]	; (8011dd4 <nanf+0x4>)
 8011dd2:	4770      	bx	lr
 8011dd4:	7fc00000 	.word	0x7fc00000

08011dd8 <scalbnf>:
 8011dd8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8011ddc:	b538      	push	{r3, r4, r5, lr}
 8011dde:	4603      	mov	r3, r0
 8011de0:	460d      	mov	r5, r1
 8011de2:	4604      	mov	r4, r0
 8011de4:	d02a      	beq.n	8011e3c <scalbnf+0x64>
 8011de6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011dea:	d304      	bcc.n	8011df6 <scalbnf+0x1e>
 8011dec:	4601      	mov	r1, r0
 8011dee:	f7ee fefd 	bl	8000bec <__addsf3>
 8011df2:	4603      	mov	r3, r0
 8011df4:	e022      	b.n	8011e3c <scalbnf+0x64>
 8011df6:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8011dfa:	d117      	bne.n	8011e2c <scalbnf+0x54>
 8011dfc:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8011e00:	f7ee fffc 	bl	8000dfc <__aeabi_fmul>
 8011e04:	4a17      	ldr	r2, [pc, #92]	; (8011e64 <scalbnf+0x8c>)
 8011e06:	4603      	mov	r3, r0
 8011e08:	4295      	cmp	r5, r2
 8011e0a:	db0b      	blt.n	8011e24 <scalbnf+0x4c>
 8011e0c:	4604      	mov	r4, r0
 8011e0e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8011e12:	3a19      	subs	r2, #25
 8011e14:	442a      	add	r2, r5
 8011e16:	2afe      	cmp	r2, #254	; 0xfe
 8011e18:	dd0a      	ble.n	8011e30 <scalbnf+0x58>
 8011e1a:	4913      	ldr	r1, [pc, #76]	; (8011e68 <scalbnf+0x90>)
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f361 001e 	bfi	r0, r1, #0, #31
 8011e22:	e000      	b.n	8011e26 <scalbnf+0x4e>
 8011e24:	4911      	ldr	r1, [pc, #68]	; (8011e6c <scalbnf+0x94>)
 8011e26:	f7ee ffe9 	bl	8000dfc <__aeabi_fmul>
 8011e2a:	e7e2      	b.n	8011df2 <scalbnf+0x1a>
 8011e2c:	0dd2      	lsrs	r2, r2, #23
 8011e2e:	e7f1      	b.n	8011e14 <scalbnf+0x3c>
 8011e30:	2a00      	cmp	r2, #0
 8011e32:	dd05      	ble.n	8011e40 <scalbnf+0x68>
 8011e34:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8011e38:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	bd38      	pop	{r3, r4, r5, pc}
 8011e40:	f112 0f16 	cmn.w	r2, #22
 8011e44:	da05      	bge.n	8011e52 <scalbnf+0x7a>
 8011e46:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011e4a:	4295      	cmp	r5, r2
 8011e4c:	dce5      	bgt.n	8011e1a <scalbnf+0x42>
 8011e4e:	4907      	ldr	r1, [pc, #28]	; (8011e6c <scalbnf+0x94>)
 8011e50:	e7e4      	b.n	8011e1c <scalbnf+0x44>
 8011e52:	3219      	adds	r2, #25
 8011e54:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8011e58:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8011e5c:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8011e60:	e7e1      	b.n	8011e26 <scalbnf+0x4e>
 8011e62:	bf00      	nop
 8011e64:	ffff3cb0 	.word	0xffff3cb0
 8011e68:	7149f2ca 	.word	0x7149f2ca
 8011e6c:	0da24260 	.word	0x0da24260

08011e70 <__errno>:
 8011e70:	4b01      	ldr	r3, [pc, #4]	; (8011e78 <__errno+0x8>)
 8011e72:	6818      	ldr	r0, [r3, #0]
 8011e74:	4770      	bx	lr
 8011e76:	bf00      	nop
 8011e78:	200001e0 	.word	0x200001e0

08011e7c <__libc_init_array>:
 8011e7c:	b570      	push	{r4, r5, r6, lr}
 8011e7e:	2600      	movs	r6, #0
 8011e80:	4d0c      	ldr	r5, [pc, #48]	; (8011eb4 <__libc_init_array+0x38>)
 8011e82:	4c0d      	ldr	r4, [pc, #52]	; (8011eb8 <__libc_init_array+0x3c>)
 8011e84:	1b64      	subs	r4, r4, r5
 8011e86:	10a4      	asrs	r4, r4, #2
 8011e88:	42a6      	cmp	r6, r4
 8011e8a:	d109      	bne.n	8011ea0 <__libc_init_array+0x24>
 8011e8c:	f002 feda 	bl	8014c44 <_init>
 8011e90:	2600      	movs	r6, #0
 8011e92:	4d0a      	ldr	r5, [pc, #40]	; (8011ebc <__libc_init_array+0x40>)
 8011e94:	4c0a      	ldr	r4, [pc, #40]	; (8011ec0 <__libc_init_array+0x44>)
 8011e96:	1b64      	subs	r4, r4, r5
 8011e98:	10a4      	asrs	r4, r4, #2
 8011e9a:	42a6      	cmp	r6, r4
 8011e9c:	d105      	bne.n	8011eaa <__libc_init_array+0x2e>
 8011e9e:	bd70      	pop	{r4, r5, r6, pc}
 8011ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ea4:	4798      	blx	r3
 8011ea6:	3601      	adds	r6, #1
 8011ea8:	e7ee      	b.n	8011e88 <__libc_init_array+0xc>
 8011eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8011eae:	4798      	blx	r3
 8011eb0:	3601      	adds	r6, #1
 8011eb2:	e7f2      	b.n	8011e9a <__libc_init_array+0x1e>
 8011eb4:	08015f4c 	.word	0x08015f4c
 8011eb8:	08015f4c 	.word	0x08015f4c
 8011ebc:	08015f4c 	.word	0x08015f4c
 8011ec0:	08015f58 	.word	0x08015f58

08011ec4 <malloc>:
 8011ec4:	4b02      	ldr	r3, [pc, #8]	; (8011ed0 <malloc+0xc>)
 8011ec6:	4601      	mov	r1, r0
 8011ec8:	6818      	ldr	r0, [r3, #0]
 8011eca:	f000 b87b 	b.w	8011fc4 <_malloc_r>
 8011ece:	bf00      	nop
 8011ed0:	200001e0 	.word	0x200001e0

08011ed4 <free>:
 8011ed4:	4b02      	ldr	r3, [pc, #8]	; (8011ee0 <free+0xc>)
 8011ed6:	4601      	mov	r1, r0
 8011ed8:	6818      	ldr	r0, [r3, #0]
 8011eda:	f000 b827 	b.w	8011f2c <_free_r>
 8011ede:	bf00      	nop
 8011ee0:	200001e0 	.word	0x200001e0

08011ee4 <memcmp>:
 8011ee4:	b530      	push	{r4, r5, lr}
 8011ee6:	2400      	movs	r4, #0
 8011ee8:	3901      	subs	r1, #1
 8011eea:	42a2      	cmp	r2, r4
 8011eec:	d101      	bne.n	8011ef2 <memcmp+0xe>
 8011eee:	2000      	movs	r0, #0
 8011ef0:	e005      	b.n	8011efe <memcmp+0x1a>
 8011ef2:	5d03      	ldrb	r3, [r0, r4]
 8011ef4:	3401      	adds	r4, #1
 8011ef6:	5d0d      	ldrb	r5, [r1, r4]
 8011ef8:	42ab      	cmp	r3, r5
 8011efa:	d0f6      	beq.n	8011eea <memcmp+0x6>
 8011efc:	1b58      	subs	r0, r3, r5
 8011efe:	bd30      	pop	{r4, r5, pc}

08011f00 <memcpy>:
 8011f00:	440a      	add	r2, r1
 8011f02:	4291      	cmp	r1, r2
 8011f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8011f08:	d100      	bne.n	8011f0c <memcpy+0xc>
 8011f0a:	4770      	bx	lr
 8011f0c:	b510      	push	{r4, lr}
 8011f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f12:	4291      	cmp	r1, r2
 8011f14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f18:	d1f9      	bne.n	8011f0e <memcpy+0xe>
 8011f1a:	bd10      	pop	{r4, pc}

08011f1c <memset>:
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	4402      	add	r2, r0
 8011f20:	4293      	cmp	r3, r2
 8011f22:	d100      	bne.n	8011f26 <memset+0xa>
 8011f24:	4770      	bx	lr
 8011f26:	f803 1b01 	strb.w	r1, [r3], #1
 8011f2a:	e7f9      	b.n	8011f20 <memset+0x4>

08011f2c <_free_r>:
 8011f2c:	b538      	push	{r3, r4, r5, lr}
 8011f2e:	4605      	mov	r5, r0
 8011f30:	2900      	cmp	r1, #0
 8011f32:	d043      	beq.n	8011fbc <_free_r+0x90>
 8011f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f38:	1f0c      	subs	r4, r1, #4
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	bfb8      	it	lt
 8011f3e:	18e4      	addlt	r4, r4, r3
 8011f40:	f001 fbc2 	bl	80136c8 <__malloc_lock>
 8011f44:	4a1e      	ldr	r2, [pc, #120]	; (8011fc0 <_free_r+0x94>)
 8011f46:	6813      	ldr	r3, [r2, #0]
 8011f48:	4610      	mov	r0, r2
 8011f4a:	b933      	cbnz	r3, 8011f5a <_free_r+0x2e>
 8011f4c:	6063      	str	r3, [r4, #4]
 8011f4e:	6014      	str	r4, [r2, #0]
 8011f50:	4628      	mov	r0, r5
 8011f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f56:	f001 bbbd 	b.w	80136d4 <__malloc_unlock>
 8011f5a:	42a3      	cmp	r3, r4
 8011f5c:	d90a      	bls.n	8011f74 <_free_r+0x48>
 8011f5e:	6821      	ldr	r1, [r4, #0]
 8011f60:	1862      	adds	r2, r4, r1
 8011f62:	4293      	cmp	r3, r2
 8011f64:	bf01      	itttt	eq
 8011f66:	681a      	ldreq	r2, [r3, #0]
 8011f68:	685b      	ldreq	r3, [r3, #4]
 8011f6a:	1852      	addeq	r2, r2, r1
 8011f6c:	6022      	streq	r2, [r4, #0]
 8011f6e:	6063      	str	r3, [r4, #4]
 8011f70:	6004      	str	r4, [r0, #0]
 8011f72:	e7ed      	b.n	8011f50 <_free_r+0x24>
 8011f74:	461a      	mov	r2, r3
 8011f76:	685b      	ldr	r3, [r3, #4]
 8011f78:	b10b      	cbz	r3, 8011f7e <_free_r+0x52>
 8011f7a:	42a3      	cmp	r3, r4
 8011f7c:	d9fa      	bls.n	8011f74 <_free_r+0x48>
 8011f7e:	6811      	ldr	r1, [r2, #0]
 8011f80:	1850      	adds	r0, r2, r1
 8011f82:	42a0      	cmp	r0, r4
 8011f84:	d10b      	bne.n	8011f9e <_free_r+0x72>
 8011f86:	6820      	ldr	r0, [r4, #0]
 8011f88:	4401      	add	r1, r0
 8011f8a:	1850      	adds	r0, r2, r1
 8011f8c:	4283      	cmp	r3, r0
 8011f8e:	6011      	str	r1, [r2, #0]
 8011f90:	d1de      	bne.n	8011f50 <_free_r+0x24>
 8011f92:	6818      	ldr	r0, [r3, #0]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	4401      	add	r1, r0
 8011f98:	6011      	str	r1, [r2, #0]
 8011f9a:	6053      	str	r3, [r2, #4]
 8011f9c:	e7d8      	b.n	8011f50 <_free_r+0x24>
 8011f9e:	d902      	bls.n	8011fa6 <_free_r+0x7a>
 8011fa0:	230c      	movs	r3, #12
 8011fa2:	602b      	str	r3, [r5, #0]
 8011fa4:	e7d4      	b.n	8011f50 <_free_r+0x24>
 8011fa6:	6820      	ldr	r0, [r4, #0]
 8011fa8:	1821      	adds	r1, r4, r0
 8011faa:	428b      	cmp	r3, r1
 8011fac:	bf01      	itttt	eq
 8011fae:	6819      	ldreq	r1, [r3, #0]
 8011fb0:	685b      	ldreq	r3, [r3, #4]
 8011fb2:	1809      	addeq	r1, r1, r0
 8011fb4:	6021      	streq	r1, [r4, #0]
 8011fb6:	6063      	str	r3, [r4, #4]
 8011fb8:	6054      	str	r4, [r2, #4]
 8011fba:	e7c9      	b.n	8011f50 <_free_r+0x24>
 8011fbc:	bd38      	pop	{r3, r4, r5, pc}
 8011fbe:	bf00      	nop
 8011fc0:	200008ec 	.word	0x200008ec

08011fc4 <_malloc_r>:
 8011fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fc6:	1ccd      	adds	r5, r1, #3
 8011fc8:	f025 0503 	bic.w	r5, r5, #3
 8011fcc:	3508      	adds	r5, #8
 8011fce:	2d0c      	cmp	r5, #12
 8011fd0:	bf38      	it	cc
 8011fd2:	250c      	movcc	r5, #12
 8011fd4:	2d00      	cmp	r5, #0
 8011fd6:	4606      	mov	r6, r0
 8011fd8:	db01      	blt.n	8011fde <_malloc_r+0x1a>
 8011fda:	42a9      	cmp	r1, r5
 8011fdc:	d903      	bls.n	8011fe6 <_malloc_r+0x22>
 8011fde:	230c      	movs	r3, #12
 8011fe0:	6033      	str	r3, [r6, #0]
 8011fe2:	2000      	movs	r0, #0
 8011fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fe6:	f001 fb6f 	bl	80136c8 <__malloc_lock>
 8011fea:	4921      	ldr	r1, [pc, #132]	; (8012070 <_malloc_r+0xac>)
 8011fec:	680a      	ldr	r2, [r1, #0]
 8011fee:	4614      	mov	r4, r2
 8011ff0:	b99c      	cbnz	r4, 801201a <_malloc_r+0x56>
 8011ff2:	4f20      	ldr	r7, [pc, #128]	; (8012074 <_malloc_r+0xb0>)
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	b923      	cbnz	r3, 8012002 <_malloc_r+0x3e>
 8011ff8:	4621      	mov	r1, r4
 8011ffa:	4630      	mov	r0, r6
 8011ffc:	f000 fca4 	bl	8012948 <_sbrk_r>
 8012000:	6038      	str	r0, [r7, #0]
 8012002:	4629      	mov	r1, r5
 8012004:	4630      	mov	r0, r6
 8012006:	f000 fc9f 	bl	8012948 <_sbrk_r>
 801200a:	1c43      	adds	r3, r0, #1
 801200c:	d123      	bne.n	8012056 <_malloc_r+0x92>
 801200e:	230c      	movs	r3, #12
 8012010:	4630      	mov	r0, r6
 8012012:	6033      	str	r3, [r6, #0]
 8012014:	f001 fb5e 	bl	80136d4 <__malloc_unlock>
 8012018:	e7e3      	b.n	8011fe2 <_malloc_r+0x1e>
 801201a:	6823      	ldr	r3, [r4, #0]
 801201c:	1b5b      	subs	r3, r3, r5
 801201e:	d417      	bmi.n	8012050 <_malloc_r+0x8c>
 8012020:	2b0b      	cmp	r3, #11
 8012022:	d903      	bls.n	801202c <_malloc_r+0x68>
 8012024:	6023      	str	r3, [r4, #0]
 8012026:	441c      	add	r4, r3
 8012028:	6025      	str	r5, [r4, #0]
 801202a:	e004      	b.n	8012036 <_malloc_r+0x72>
 801202c:	6863      	ldr	r3, [r4, #4]
 801202e:	42a2      	cmp	r2, r4
 8012030:	bf0c      	ite	eq
 8012032:	600b      	streq	r3, [r1, #0]
 8012034:	6053      	strne	r3, [r2, #4]
 8012036:	4630      	mov	r0, r6
 8012038:	f001 fb4c 	bl	80136d4 <__malloc_unlock>
 801203c:	f104 000b 	add.w	r0, r4, #11
 8012040:	1d23      	adds	r3, r4, #4
 8012042:	f020 0007 	bic.w	r0, r0, #7
 8012046:	1ac2      	subs	r2, r0, r3
 8012048:	d0cc      	beq.n	8011fe4 <_malloc_r+0x20>
 801204a:	1a1b      	subs	r3, r3, r0
 801204c:	50a3      	str	r3, [r4, r2]
 801204e:	e7c9      	b.n	8011fe4 <_malloc_r+0x20>
 8012050:	4622      	mov	r2, r4
 8012052:	6864      	ldr	r4, [r4, #4]
 8012054:	e7cc      	b.n	8011ff0 <_malloc_r+0x2c>
 8012056:	1cc4      	adds	r4, r0, #3
 8012058:	f024 0403 	bic.w	r4, r4, #3
 801205c:	42a0      	cmp	r0, r4
 801205e:	d0e3      	beq.n	8012028 <_malloc_r+0x64>
 8012060:	1a21      	subs	r1, r4, r0
 8012062:	4630      	mov	r0, r6
 8012064:	f000 fc70 	bl	8012948 <_sbrk_r>
 8012068:	3001      	adds	r0, #1
 801206a:	d1dd      	bne.n	8012028 <_malloc_r+0x64>
 801206c:	e7cf      	b.n	801200e <_malloc_r+0x4a>
 801206e:	bf00      	nop
 8012070:	200008ec 	.word	0x200008ec
 8012074:	200008f0 	.word	0x200008f0

08012078 <__cvt>:
 8012078:	2b00      	cmp	r3, #0
 801207a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801207e:	461f      	mov	r7, r3
 8012080:	bfbb      	ittet	lt
 8012082:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8012086:	461f      	movlt	r7, r3
 8012088:	2300      	movge	r3, #0
 801208a:	232d      	movlt	r3, #45	; 0x2d
 801208c:	b088      	sub	sp, #32
 801208e:	4614      	mov	r4, r2
 8012090:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012092:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012094:	7013      	strb	r3, [r2, #0]
 8012096:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012098:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 801209c:	f023 0820 	bic.w	r8, r3, #32
 80120a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80120a4:	d005      	beq.n	80120b2 <__cvt+0x3a>
 80120a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80120aa:	d100      	bne.n	80120ae <__cvt+0x36>
 80120ac:	3501      	adds	r5, #1
 80120ae:	2302      	movs	r3, #2
 80120b0:	e000      	b.n	80120b4 <__cvt+0x3c>
 80120b2:	2303      	movs	r3, #3
 80120b4:	aa07      	add	r2, sp, #28
 80120b6:	9204      	str	r2, [sp, #16]
 80120b8:	aa06      	add	r2, sp, #24
 80120ba:	e9cd a202 	strd	sl, r2, [sp, #8]
 80120be:	e9cd 3500 	strd	r3, r5, [sp]
 80120c2:	4622      	mov	r2, r4
 80120c4:	463b      	mov	r3, r7
 80120c6:	f000 fcff 	bl	8012ac8 <_dtoa_r>
 80120ca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80120ce:	4606      	mov	r6, r0
 80120d0:	d102      	bne.n	80120d8 <__cvt+0x60>
 80120d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80120d4:	07db      	lsls	r3, r3, #31
 80120d6:	d522      	bpl.n	801211e <__cvt+0xa6>
 80120d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80120dc:	eb06 0905 	add.w	r9, r6, r5
 80120e0:	d110      	bne.n	8012104 <__cvt+0x8c>
 80120e2:	7833      	ldrb	r3, [r6, #0]
 80120e4:	2b30      	cmp	r3, #48	; 0x30
 80120e6:	d10a      	bne.n	80120fe <__cvt+0x86>
 80120e8:	2200      	movs	r2, #0
 80120ea:	2300      	movs	r3, #0
 80120ec:	4620      	mov	r0, r4
 80120ee:	4639      	mov	r1, r7
 80120f0:	f7ee fc96 	bl	8000a20 <__aeabi_dcmpeq>
 80120f4:	b918      	cbnz	r0, 80120fe <__cvt+0x86>
 80120f6:	f1c5 0501 	rsb	r5, r5, #1
 80120fa:	f8ca 5000 	str.w	r5, [sl]
 80120fe:	f8da 3000 	ldr.w	r3, [sl]
 8012102:	4499      	add	r9, r3
 8012104:	2200      	movs	r2, #0
 8012106:	2300      	movs	r3, #0
 8012108:	4620      	mov	r0, r4
 801210a:	4639      	mov	r1, r7
 801210c:	f7ee fc88 	bl	8000a20 <__aeabi_dcmpeq>
 8012110:	b108      	cbz	r0, 8012116 <__cvt+0x9e>
 8012112:	f8cd 901c 	str.w	r9, [sp, #28]
 8012116:	2230      	movs	r2, #48	; 0x30
 8012118:	9b07      	ldr	r3, [sp, #28]
 801211a:	454b      	cmp	r3, r9
 801211c:	d307      	bcc.n	801212e <__cvt+0xb6>
 801211e:	4630      	mov	r0, r6
 8012120:	9b07      	ldr	r3, [sp, #28]
 8012122:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012124:	1b9b      	subs	r3, r3, r6
 8012126:	6013      	str	r3, [r2, #0]
 8012128:	b008      	add	sp, #32
 801212a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801212e:	1c59      	adds	r1, r3, #1
 8012130:	9107      	str	r1, [sp, #28]
 8012132:	701a      	strb	r2, [r3, #0]
 8012134:	e7f0      	b.n	8012118 <__cvt+0xa0>

08012136 <__exponent>:
 8012136:	4603      	mov	r3, r0
 8012138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801213a:	2900      	cmp	r1, #0
 801213c:	f803 2b02 	strb.w	r2, [r3], #2
 8012140:	bfb6      	itet	lt
 8012142:	222d      	movlt	r2, #45	; 0x2d
 8012144:	222b      	movge	r2, #43	; 0x2b
 8012146:	4249      	neglt	r1, r1
 8012148:	2909      	cmp	r1, #9
 801214a:	7042      	strb	r2, [r0, #1]
 801214c:	dd2b      	ble.n	80121a6 <__exponent+0x70>
 801214e:	f10d 0407 	add.w	r4, sp, #7
 8012152:	46a4      	mov	ip, r4
 8012154:	270a      	movs	r7, #10
 8012156:	fb91 f6f7 	sdiv	r6, r1, r7
 801215a:	460a      	mov	r2, r1
 801215c:	46a6      	mov	lr, r4
 801215e:	fb07 1516 	mls	r5, r7, r6, r1
 8012162:	2a63      	cmp	r2, #99	; 0x63
 8012164:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8012168:	4631      	mov	r1, r6
 801216a:	f104 34ff 	add.w	r4, r4, #4294967295
 801216e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012172:	dcf0      	bgt.n	8012156 <__exponent+0x20>
 8012174:	3130      	adds	r1, #48	; 0x30
 8012176:	f1ae 0502 	sub.w	r5, lr, #2
 801217a:	f804 1c01 	strb.w	r1, [r4, #-1]
 801217e:	4629      	mov	r1, r5
 8012180:	1c44      	adds	r4, r0, #1
 8012182:	4561      	cmp	r1, ip
 8012184:	d30a      	bcc.n	801219c <__exponent+0x66>
 8012186:	f10d 0209 	add.w	r2, sp, #9
 801218a:	eba2 020e 	sub.w	r2, r2, lr
 801218e:	4565      	cmp	r5, ip
 8012190:	bf88      	it	hi
 8012192:	2200      	movhi	r2, #0
 8012194:	4413      	add	r3, r2
 8012196:	1a18      	subs	r0, r3, r0
 8012198:	b003      	add	sp, #12
 801219a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801219c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80121a0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80121a4:	e7ed      	b.n	8012182 <__exponent+0x4c>
 80121a6:	2330      	movs	r3, #48	; 0x30
 80121a8:	3130      	adds	r1, #48	; 0x30
 80121aa:	7083      	strb	r3, [r0, #2]
 80121ac:	70c1      	strb	r1, [r0, #3]
 80121ae:	1d03      	adds	r3, r0, #4
 80121b0:	e7f1      	b.n	8012196 <__exponent+0x60>
	...

080121b4 <_printf_float>:
 80121b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b8:	b091      	sub	sp, #68	; 0x44
 80121ba:	460c      	mov	r4, r1
 80121bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80121c0:	4616      	mov	r6, r2
 80121c2:	461f      	mov	r7, r3
 80121c4:	4605      	mov	r5, r0
 80121c6:	f001 fa6d 	bl	80136a4 <_localeconv_r>
 80121ca:	6803      	ldr	r3, [r0, #0]
 80121cc:	4618      	mov	r0, r3
 80121ce:	9309      	str	r3, [sp, #36]	; 0x24
 80121d0:	f7ed fffa 	bl	80001c8 <strlen>
 80121d4:	2300      	movs	r3, #0
 80121d6:	930e      	str	r3, [sp, #56]	; 0x38
 80121d8:	f8d8 3000 	ldr.w	r3, [r8]
 80121dc:	900a      	str	r0, [sp, #40]	; 0x28
 80121de:	3307      	adds	r3, #7
 80121e0:	f023 0307 	bic.w	r3, r3, #7
 80121e4:	f103 0208 	add.w	r2, r3, #8
 80121e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80121ec:	f8d4 b000 	ldr.w	fp, [r4]
 80121f0:	f8c8 2000 	str.w	r2, [r8]
 80121f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80121fc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8012200:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8012204:	930b      	str	r3, [sp, #44]	; 0x2c
 8012206:	f04f 32ff 	mov.w	r2, #4294967295
 801220a:	4640      	mov	r0, r8
 801220c:	4b9c      	ldr	r3, [pc, #624]	; (8012480 <_printf_float+0x2cc>)
 801220e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012210:	f7ee fc38 	bl	8000a84 <__aeabi_dcmpun>
 8012214:	bb70      	cbnz	r0, 8012274 <_printf_float+0xc0>
 8012216:	f04f 32ff 	mov.w	r2, #4294967295
 801221a:	4640      	mov	r0, r8
 801221c:	4b98      	ldr	r3, [pc, #608]	; (8012480 <_printf_float+0x2cc>)
 801221e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012220:	f7ee fc12 	bl	8000a48 <__aeabi_dcmple>
 8012224:	bb30      	cbnz	r0, 8012274 <_printf_float+0xc0>
 8012226:	2200      	movs	r2, #0
 8012228:	2300      	movs	r3, #0
 801222a:	4640      	mov	r0, r8
 801222c:	4651      	mov	r1, sl
 801222e:	f7ee fc01 	bl	8000a34 <__aeabi_dcmplt>
 8012232:	b110      	cbz	r0, 801223a <_printf_float+0x86>
 8012234:	232d      	movs	r3, #45	; 0x2d
 8012236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801223a:	4b92      	ldr	r3, [pc, #584]	; (8012484 <_printf_float+0x2d0>)
 801223c:	4892      	ldr	r0, [pc, #584]	; (8012488 <_printf_float+0x2d4>)
 801223e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012242:	bf94      	ite	ls
 8012244:	4698      	movls	r8, r3
 8012246:	4680      	movhi	r8, r0
 8012248:	2303      	movs	r3, #3
 801224a:	f04f 0a00 	mov.w	sl, #0
 801224e:	6123      	str	r3, [r4, #16]
 8012250:	f02b 0304 	bic.w	r3, fp, #4
 8012254:	6023      	str	r3, [r4, #0]
 8012256:	4633      	mov	r3, r6
 8012258:	4621      	mov	r1, r4
 801225a:	4628      	mov	r0, r5
 801225c:	9700      	str	r7, [sp, #0]
 801225e:	aa0f      	add	r2, sp, #60	; 0x3c
 8012260:	f000 f9d4 	bl	801260c <_printf_common>
 8012264:	3001      	adds	r0, #1
 8012266:	f040 8090 	bne.w	801238a <_printf_float+0x1d6>
 801226a:	f04f 30ff 	mov.w	r0, #4294967295
 801226e:	b011      	add	sp, #68	; 0x44
 8012270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012274:	4642      	mov	r2, r8
 8012276:	4653      	mov	r3, sl
 8012278:	4640      	mov	r0, r8
 801227a:	4651      	mov	r1, sl
 801227c:	f7ee fc02 	bl	8000a84 <__aeabi_dcmpun>
 8012280:	b148      	cbz	r0, 8012296 <_printf_float+0xe2>
 8012282:	f1ba 0f00 	cmp.w	sl, #0
 8012286:	bfb8      	it	lt
 8012288:	232d      	movlt	r3, #45	; 0x2d
 801228a:	4880      	ldr	r0, [pc, #512]	; (801248c <_printf_float+0x2d8>)
 801228c:	bfb8      	it	lt
 801228e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012292:	4b7f      	ldr	r3, [pc, #508]	; (8012490 <_printf_float+0x2dc>)
 8012294:	e7d3      	b.n	801223e <_printf_float+0x8a>
 8012296:	6863      	ldr	r3, [r4, #4]
 8012298:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801229c:	1c5a      	adds	r2, r3, #1
 801229e:	d142      	bne.n	8012326 <_printf_float+0x172>
 80122a0:	2306      	movs	r3, #6
 80122a2:	6063      	str	r3, [r4, #4]
 80122a4:	2200      	movs	r2, #0
 80122a6:	9206      	str	r2, [sp, #24]
 80122a8:	aa0e      	add	r2, sp, #56	; 0x38
 80122aa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80122ae:	aa0d      	add	r2, sp, #52	; 0x34
 80122b0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80122b4:	9203      	str	r2, [sp, #12]
 80122b6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80122ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80122be:	6023      	str	r3, [r4, #0]
 80122c0:	6863      	ldr	r3, [r4, #4]
 80122c2:	4642      	mov	r2, r8
 80122c4:	9300      	str	r3, [sp, #0]
 80122c6:	4628      	mov	r0, r5
 80122c8:	4653      	mov	r3, sl
 80122ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80122cc:	f7ff fed4 	bl	8012078 <__cvt>
 80122d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80122d2:	4680      	mov	r8, r0
 80122d4:	2947      	cmp	r1, #71	; 0x47
 80122d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80122d8:	d108      	bne.n	80122ec <_printf_float+0x138>
 80122da:	1cc8      	adds	r0, r1, #3
 80122dc:	db02      	blt.n	80122e4 <_printf_float+0x130>
 80122de:	6863      	ldr	r3, [r4, #4]
 80122e0:	4299      	cmp	r1, r3
 80122e2:	dd40      	ble.n	8012366 <_printf_float+0x1b2>
 80122e4:	f1a9 0902 	sub.w	r9, r9, #2
 80122e8:	fa5f f989 	uxtb.w	r9, r9
 80122ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80122f0:	d81f      	bhi.n	8012332 <_printf_float+0x17e>
 80122f2:	464a      	mov	r2, r9
 80122f4:	3901      	subs	r1, #1
 80122f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80122fa:	910d      	str	r1, [sp, #52]	; 0x34
 80122fc:	f7ff ff1b 	bl	8012136 <__exponent>
 8012300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012302:	4682      	mov	sl, r0
 8012304:	1813      	adds	r3, r2, r0
 8012306:	2a01      	cmp	r2, #1
 8012308:	6123      	str	r3, [r4, #16]
 801230a:	dc02      	bgt.n	8012312 <_printf_float+0x15e>
 801230c:	6822      	ldr	r2, [r4, #0]
 801230e:	07d2      	lsls	r2, r2, #31
 8012310:	d501      	bpl.n	8012316 <_printf_float+0x162>
 8012312:	3301      	adds	r3, #1
 8012314:	6123      	str	r3, [r4, #16]
 8012316:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801231a:	2b00      	cmp	r3, #0
 801231c:	d09b      	beq.n	8012256 <_printf_float+0xa2>
 801231e:	232d      	movs	r3, #45	; 0x2d
 8012320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012324:	e797      	b.n	8012256 <_printf_float+0xa2>
 8012326:	2947      	cmp	r1, #71	; 0x47
 8012328:	d1bc      	bne.n	80122a4 <_printf_float+0xf0>
 801232a:	2b00      	cmp	r3, #0
 801232c:	d1ba      	bne.n	80122a4 <_printf_float+0xf0>
 801232e:	2301      	movs	r3, #1
 8012330:	e7b7      	b.n	80122a2 <_printf_float+0xee>
 8012332:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012336:	d118      	bne.n	801236a <_printf_float+0x1b6>
 8012338:	2900      	cmp	r1, #0
 801233a:	6863      	ldr	r3, [r4, #4]
 801233c:	dd0b      	ble.n	8012356 <_printf_float+0x1a2>
 801233e:	6121      	str	r1, [r4, #16]
 8012340:	b913      	cbnz	r3, 8012348 <_printf_float+0x194>
 8012342:	6822      	ldr	r2, [r4, #0]
 8012344:	07d0      	lsls	r0, r2, #31
 8012346:	d502      	bpl.n	801234e <_printf_float+0x19a>
 8012348:	3301      	adds	r3, #1
 801234a:	440b      	add	r3, r1
 801234c:	6123      	str	r3, [r4, #16]
 801234e:	f04f 0a00 	mov.w	sl, #0
 8012352:	65a1      	str	r1, [r4, #88]	; 0x58
 8012354:	e7df      	b.n	8012316 <_printf_float+0x162>
 8012356:	b913      	cbnz	r3, 801235e <_printf_float+0x1aa>
 8012358:	6822      	ldr	r2, [r4, #0]
 801235a:	07d2      	lsls	r2, r2, #31
 801235c:	d501      	bpl.n	8012362 <_printf_float+0x1ae>
 801235e:	3302      	adds	r3, #2
 8012360:	e7f4      	b.n	801234c <_printf_float+0x198>
 8012362:	2301      	movs	r3, #1
 8012364:	e7f2      	b.n	801234c <_printf_float+0x198>
 8012366:	f04f 0967 	mov.w	r9, #103	; 0x67
 801236a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801236c:	4299      	cmp	r1, r3
 801236e:	db05      	blt.n	801237c <_printf_float+0x1c8>
 8012370:	6823      	ldr	r3, [r4, #0]
 8012372:	6121      	str	r1, [r4, #16]
 8012374:	07d8      	lsls	r0, r3, #31
 8012376:	d5ea      	bpl.n	801234e <_printf_float+0x19a>
 8012378:	1c4b      	adds	r3, r1, #1
 801237a:	e7e7      	b.n	801234c <_printf_float+0x198>
 801237c:	2900      	cmp	r1, #0
 801237e:	bfcc      	ite	gt
 8012380:	2201      	movgt	r2, #1
 8012382:	f1c1 0202 	rsble	r2, r1, #2
 8012386:	4413      	add	r3, r2
 8012388:	e7e0      	b.n	801234c <_printf_float+0x198>
 801238a:	6823      	ldr	r3, [r4, #0]
 801238c:	055a      	lsls	r2, r3, #21
 801238e:	d407      	bmi.n	80123a0 <_printf_float+0x1ec>
 8012390:	6923      	ldr	r3, [r4, #16]
 8012392:	4642      	mov	r2, r8
 8012394:	4631      	mov	r1, r6
 8012396:	4628      	mov	r0, r5
 8012398:	47b8      	blx	r7
 801239a:	3001      	adds	r0, #1
 801239c:	d12b      	bne.n	80123f6 <_printf_float+0x242>
 801239e:	e764      	b.n	801226a <_printf_float+0xb6>
 80123a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80123a4:	f240 80dd 	bls.w	8012562 <_printf_float+0x3ae>
 80123a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80123ac:	2200      	movs	r2, #0
 80123ae:	2300      	movs	r3, #0
 80123b0:	f7ee fb36 	bl	8000a20 <__aeabi_dcmpeq>
 80123b4:	2800      	cmp	r0, #0
 80123b6:	d033      	beq.n	8012420 <_printf_float+0x26c>
 80123b8:	2301      	movs	r3, #1
 80123ba:	4631      	mov	r1, r6
 80123bc:	4628      	mov	r0, r5
 80123be:	4a35      	ldr	r2, [pc, #212]	; (8012494 <_printf_float+0x2e0>)
 80123c0:	47b8      	blx	r7
 80123c2:	3001      	adds	r0, #1
 80123c4:	f43f af51 	beq.w	801226a <_printf_float+0xb6>
 80123c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80123cc:	429a      	cmp	r2, r3
 80123ce:	db02      	blt.n	80123d6 <_printf_float+0x222>
 80123d0:	6823      	ldr	r3, [r4, #0]
 80123d2:	07d8      	lsls	r0, r3, #31
 80123d4:	d50f      	bpl.n	80123f6 <_printf_float+0x242>
 80123d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123da:	4631      	mov	r1, r6
 80123dc:	4628      	mov	r0, r5
 80123de:	47b8      	blx	r7
 80123e0:	3001      	adds	r0, #1
 80123e2:	f43f af42 	beq.w	801226a <_printf_float+0xb6>
 80123e6:	f04f 0800 	mov.w	r8, #0
 80123ea:	f104 091a 	add.w	r9, r4, #26
 80123ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123f0:	3b01      	subs	r3, #1
 80123f2:	4543      	cmp	r3, r8
 80123f4:	dc09      	bgt.n	801240a <_printf_float+0x256>
 80123f6:	6823      	ldr	r3, [r4, #0]
 80123f8:	079b      	lsls	r3, r3, #30
 80123fa:	f100 8102 	bmi.w	8012602 <_printf_float+0x44e>
 80123fe:	68e0      	ldr	r0, [r4, #12]
 8012400:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012402:	4298      	cmp	r0, r3
 8012404:	bfb8      	it	lt
 8012406:	4618      	movlt	r0, r3
 8012408:	e731      	b.n	801226e <_printf_float+0xba>
 801240a:	2301      	movs	r3, #1
 801240c:	464a      	mov	r2, r9
 801240e:	4631      	mov	r1, r6
 8012410:	4628      	mov	r0, r5
 8012412:	47b8      	blx	r7
 8012414:	3001      	adds	r0, #1
 8012416:	f43f af28 	beq.w	801226a <_printf_float+0xb6>
 801241a:	f108 0801 	add.w	r8, r8, #1
 801241e:	e7e6      	b.n	80123ee <_printf_float+0x23a>
 8012420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012422:	2b00      	cmp	r3, #0
 8012424:	dc38      	bgt.n	8012498 <_printf_float+0x2e4>
 8012426:	2301      	movs	r3, #1
 8012428:	4631      	mov	r1, r6
 801242a:	4628      	mov	r0, r5
 801242c:	4a19      	ldr	r2, [pc, #100]	; (8012494 <_printf_float+0x2e0>)
 801242e:	47b8      	blx	r7
 8012430:	3001      	adds	r0, #1
 8012432:	f43f af1a 	beq.w	801226a <_printf_float+0xb6>
 8012436:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801243a:	4313      	orrs	r3, r2
 801243c:	d102      	bne.n	8012444 <_printf_float+0x290>
 801243e:	6823      	ldr	r3, [r4, #0]
 8012440:	07d9      	lsls	r1, r3, #31
 8012442:	d5d8      	bpl.n	80123f6 <_printf_float+0x242>
 8012444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012448:	4631      	mov	r1, r6
 801244a:	4628      	mov	r0, r5
 801244c:	47b8      	blx	r7
 801244e:	3001      	adds	r0, #1
 8012450:	f43f af0b 	beq.w	801226a <_printf_float+0xb6>
 8012454:	f04f 0900 	mov.w	r9, #0
 8012458:	f104 0a1a 	add.w	sl, r4, #26
 801245c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801245e:	425b      	negs	r3, r3
 8012460:	454b      	cmp	r3, r9
 8012462:	dc01      	bgt.n	8012468 <_printf_float+0x2b4>
 8012464:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012466:	e794      	b.n	8012392 <_printf_float+0x1de>
 8012468:	2301      	movs	r3, #1
 801246a:	4652      	mov	r2, sl
 801246c:	4631      	mov	r1, r6
 801246e:	4628      	mov	r0, r5
 8012470:	47b8      	blx	r7
 8012472:	3001      	adds	r0, #1
 8012474:	f43f aef9 	beq.w	801226a <_printf_float+0xb6>
 8012478:	f109 0901 	add.w	r9, r9, #1
 801247c:	e7ee      	b.n	801245c <_printf_float+0x2a8>
 801247e:	bf00      	nop
 8012480:	7fefffff 	.word	0x7fefffff
 8012484:	08015b64 	.word	0x08015b64
 8012488:	08015b68 	.word	0x08015b68
 801248c:	08015b70 	.word	0x08015b70
 8012490:	08015b6c 	.word	0x08015b6c
 8012494:	08015b74 	.word	0x08015b74
 8012498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801249a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801249c:	429a      	cmp	r2, r3
 801249e:	bfa8      	it	ge
 80124a0:	461a      	movge	r2, r3
 80124a2:	2a00      	cmp	r2, #0
 80124a4:	4691      	mov	r9, r2
 80124a6:	dc37      	bgt.n	8012518 <_printf_float+0x364>
 80124a8:	f04f 0b00 	mov.w	fp, #0
 80124ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80124b0:	f104 021a 	add.w	r2, r4, #26
 80124b4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80124b8:	ebaa 0309 	sub.w	r3, sl, r9
 80124bc:	455b      	cmp	r3, fp
 80124be:	dc33      	bgt.n	8012528 <_printf_float+0x374>
 80124c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80124c4:	429a      	cmp	r2, r3
 80124c6:	db3b      	blt.n	8012540 <_printf_float+0x38c>
 80124c8:	6823      	ldr	r3, [r4, #0]
 80124ca:	07da      	lsls	r2, r3, #31
 80124cc:	d438      	bmi.n	8012540 <_printf_float+0x38c>
 80124ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80124d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80124d2:	eba2 030a 	sub.w	r3, r2, sl
 80124d6:	eba2 0901 	sub.w	r9, r2, r1
 80124da:	4599      	cmp	r9, r3
 80124dc:	bfa8      	it	ge
 80124de:	4699      	movge	r9, r3
 80124e0:	f1b9 0f00 	cmp.w	r9, #0
 80124e4:	dc34      	bgt.n	8012550 <_printf_float+0x39c>
 80124e6:	f04f 0800 	mov.w	r8, #0
 80124ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80124ee:	f104 0a1a 	add.w	sl, r4, #26
 80124f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80124f6:	1a9b      	subs	r3, r3, r2
 80124f8:	eba3 0309 	sub.w	r3, r3, r9
 80124fc:	4543      	cmp	r3, r8
 80124fe:	f77f af7a 	ble.w	80123f6 <_printf_float+0x242>
 8012502:	2301      	movs	r3, #1
 8012504:	4652      	mov	r2, sl
 8012506:	4631      	mov	r1, r6
 8012508:	4628      	mov	r0, r5
 801250a:	47b8      	blx	r7
 801250c:	3001      	adds	r0, #1
 801250e:	f43f aeac 	beq.w	801226a <_printf_float+0xb6>
 8012512:	f108 0801 	add.w	r8, r8, #1
 8012516:	e7ec      	b.n	80124f2 <_printf_float+0x33e>
 8012518:	4613      	mov	r3, r2
 801251a:	4631      	mov	r1, r6
 801251c:	4642      	mov	r2, r8
 801251e:	4628      	mov	r0, r5
 8012520:	47b8      	blx	r7
 8012522:	3001      	adds	r0, #1
 8012524:	d1c0      	bne.n	80124a8 <_printf_float+0x2f4>
 8012526:	e6a0      	b.n	801226a <_printf_float+0xb6>
 8012528:	2301      	movs	r3, #1
 801252a:	4631      	mov	r1, r6
 801252c:	4628      	mov	r0, r5
 801252e:	920b      	str	r2, [sp, #44]	; 0x2c
 8012530:	47b8      	blx	r7
 8012532:	3001      	adds	r0, #1
 8012534:	f43f ae99 	beq.w	801226a <_printf_float+0xb6>
 8012538:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801253a:	f10b 0b01 	add.w	fp, fp, #1
 801253e:	e7b9      	b.n	80124b4 <_printf_float+0x300>
 8012540:	4631      	mov	r1, r6
 8012542:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012546:	4628      	mov	r0, r5
 8012548:	47b8      	blx	r7
 801254a:	3001      	adds	r0, #1
 801254c:	d1bf      	bne.n	80124ce <_printf_float+0x31a>
 801254e:	e68c      	b.n	801226a <_printf_float+0xb6>
 8012550:	464b      	mov	r3, r9
 8012552:	4631      	mov	r1, r6
 8012554:	4628      	mov	r0, r5
 8012556:	eb08 020a 	add.w	r2, r8, sl
 801255a:	47b8      	blx	r7
 801255c:	3001      	adds	r0, #1
 801255e:	d1c2      	bne.n	80124e6 <_printf_float+0x332>
 8012560:	e683      	b.n	801226a <_printf_float+0xb6>
 8012562:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012564:	2a01      	cmp	r2, #1
 8012566:	dc01      	bgt.n	801256c <_printf_float+0x3b8>
 8012568:	07db      	lsls	r3, r3, #31
 801256a:	d537      	bpl.n	80125dc <_printf_float+0x428>
 801256c:	2301      	movs	r3, #1
 801256e:	4642      	mov	r2, r8
 8012570:	4631      	mov	r1, r6
 8012572:	4628      	mov	r0, r5
 8012574:	47b8      	blx	r7
 8012576:	3001      	adds	r0, #1
 8012578:	f43f ae77 	beq.w	801226a <_printf_float+0xb6>
 801257c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012580:	4631      	mov	r1, r6
 8012582:	4628      	mov	r0, r5
 8012584:	47b8      	blx	r7
 8012586:	3001      	adds	r0, #1
 8012588:	f43f ae6f 	beq.w	801226a <_printf_float+0xb6>
 801258c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012590:	2200      	movs	r2, #0
 8012592:	2300      	movs	r3, #0
 8012594:	f7ee fa44 	bl	8000a20 <__aeabi_dcmpeq>
 8012598:	b9d8      	cbnz	r0, 80125d2 <_printf_float+0x41e>
 801259a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801259c:	f108 0201 	add.w	r2, r8, #1
 80125a0:	3b01      	subs	r3, #1
 80125a2:	4631      	mov	r1, r6
 80125a4:	4628      	mov	r0, r5
 80125a6:	47b8      	blx	r7
 80125a8:	3001      	adds	r0, #1
 80125aa:	d10e      	bne.n	80125ca <_printf_float+0x416>
 80125ac:	e65d      	b.n	801226a <_printf_float+0xb6>
 80125ae:	2301      	movs	r3, #1
 80125b0:	464a      	mov	r2, r9
 80125b2:	4631      	mov	r1, r6
 80125b4:	4628      	mov	r0, r5
 80125b6:	47b8      	blx	r7
 80125b8:	3001      	adds	r0, #1
 80125ba:	f43f ae56 	beq.w	801226a <_printf_float+0xb6>
 80125be:	f108 0801 	add.w	r8, r8, #1
 80125c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80125c4:	3b01      	subs	r3, #1
 80125c6:	4543      	cmp	r3, r8
 80125c8:	dcf1      	bgt.n	80125ae <_printf_float+0x3fa>
 80125ca:	4653      	mov	r3, sl
 80125cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80125d0:	e6e0      	b.n	8012394 <_printf_float+0x1e0>
 80125d2:	f04f 0800 	mov.w	r8, #0
 80125d6:	f104 091a 	add.w	r9, r4, #26
 80125da:	e7f2      	b.n	80125c2 <_printf_float+0x40e>
 80125dc:	2301      	movs	r3, #1
 80125de:	4642      	mov	r2, r8
 80125e0:	e7df      	b.n	80125a2 <_printf_float+0x3ee>
 80125e2:	2301      	movs	r3, #1
 80125e4:	464a      	mov	r2, r9
 80125e6:	4631      	mov	r1, r6
 80125e8:	4628      	mov	r0, r5
 80125ea:	47b8      	blx	r7
 80125ec:	3001      	adds	r0, #1
 80125ee:	f43f ae3c 	beq.w	801226a <_printf_float+0xb6>
 80125f2:	f108 0801 	add.w	r8, r8, #1
 80125f6:	68e3      	ldr	r3, [r4, #12]
 80125f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80125fa:	1a5b      	subs	r3, r3, r1
 80125fc:	4543      	cmp	r3, r8
 80125fe:	dcf0      	bgt.n	80125e2 <_printf_float+0x42e>
 8012600:	e6fd      	b.n	80123fe <_printf_float+0x24a>
 8012602:	f04f 0800 	mov.w	r8, #0
 8012606:	f104 0919 	add.w	r9, r4, #25
 801260a:	e7f4      	b.n	80125f6 <_printf_float+0x442>

0801260c <_printf_common>:
 801260c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012610:	4616      	mov	r6, r2
 8012612:	4699      	mov	r9, r3
 8012614:	688a      	ldr	r2, [r1, #8]
 8012616:	690b      	ldr	r3, [r1, #16]
 8012618:	4607      	mov	r7, r0
 801261a:	4293      	cmp	r3, r2
 801261c:	bfb8      	it	lt
 801261e:	4613      	movlt	r3, r2
 8012620:	6033      	str	r3, [r6, #0]
 8012622:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012626:	460c      	mov	r4, r1
 8012628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801262c:	b10a      	cbz	r2, 8012632 <_printf_common+0x26>
 801262e:	3301      	adds	r3, #1
 8012630:	6033      	str	r3, [r6, #0]
 8012632:	6823      	ldr	r3, [r4, #0]
 8012634:	0699      	lsls	r1, r3, #26
 8012636:	bf42      	ittt	mi
 8012638:	6833      	ldrmi	r3, [r6, #0]
 801263a:	3302      	addmi	r3, #2
 801263c:	6033      	strmi	r3, [r6, #0]
 801263e:	6825      	ldr	r5, [r4, #0]
 8012640:	f015 0506 	ands.w	r5, r5, #6
 8012644:	d106      	bne.n	8012654 <_printf_common+0x48>
 8012646:	f104 0a19 	add.w	sl, r4, #25
 801264a:	68e3      	ldr	r3, [r4, #12]
 801264c:	6832      	ldr	r2, [r6, #0]
 801264e:	1a9b      	subs	r3, r3, r2
 8012650:	42ab      	cmp	r3, r5
 8012652:	dc28      	bgt.n	80126a6 <_printf_common+0x9a>
 8012654:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012658:	1e13      	subs	r3, r2, #0
 801265a:	6822      	ldr	r2, [r4, #0]
 801265c:	bf18      	it	ne
 801265e:	2301      	movne	r3, #1
 8012660:	0692      	lsls	r2, r2, #26
 8012662:	d42d      	bmi.n	80126c0 <_printf_common+0xb4>
 8012664:	4649      	mov	r1, r9
 8012666:	4638      	mov	r0, r7
 8012668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801266c:	47c0      	blx	r8
 801266e:	3001      	adds	r0, #1
 8012670:	d020      	beq.n	80126b4 <_printf_common+0xa8>
 8012672:	6823      	ldr	r3, [r4, #0]
 8012674:	68e5      	ldr	r5, [r4, #12]
 8012676:	f003 0306 	and.w	r3, r3, #6
 801267a:	2b04      	cmp	r3, #4
 801267c:	bf18      	it	ne
 801267e:	2500      	movne	r5, #0
 8012680:	6832      	ldr	r2, [r6, #0]
 8012682:	f04f 0600 	mov.w	r6, #0
 8012686:	68a3      	ldr	r3, [r4, #8]
 8012688:	bf08      	it	eq
 801268a:	1aad      	subeq	r5, r5, r2
 801268c:	6922      	ldr	r2, [r4, #16]
 801268e:	bf08      	it	eq
 8012690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012694:	4293      	cmp	r3, r2
 8012696:	bfc4      	itt	gt
 8012698:	1a9b      	subgt	r3, r3, r2
 801269a:	18ed      	addgt	r5, r5, r3
 801269c:	341a      	adds	r4, #26
 801269e:	42b5      	cmp	r5, r6
 80126a0:	d11a      	bne.n	80126d8 <_printf_common+0xcc>
 80126a2:	2000      	movs	r0, #0
 80126a4:	e008      	b.n	80126b8 <_printf_common+0xac>
 80126a6:	2301      	movs	r3, #1
 80126a8:	4652      	mov	r2, sl
 80126aa:	4649      	mov	r1, r9
 80126ac:	4638      	mov	r0, r7
 80126ae:	47c0      	blx	r8
 80126b0:	3001      	adds	r0, #1
 80126b2:	d103      	bne.n	80126bc <_printf_common+0xb0>
 80126b4:	f04f 30ff 	mov.w	r0, #4294967295
 80126b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126bc:	3501      	adds	r5, #1
 80126be:	e7c4      	b.n	801264a <_printf_common+0x3e>
 80126c0:	2030      	movs	r0, #48	; 0x30
 80126c2:	18e1      	adds	r1, r4, r3
 80126c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80126c8:	1c5a      	adds	r2, r3, #1
 80126ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80126ce:	4422      	add	r2, r4
 80126d0:	3302      	adds	r3, #2
 80126d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80126d6:	e7c5      	b.n	8012664 <_printf_common+0x58>
 80126d8:	2301      	movs	r3, #1
 80126da:	4622      	mov	r2, r4
 80126dc:	4649      	mov	r1, r9
 80126de:	4638      	mov	r0, r7
 80126e0:	47c0      	blx	r8
 80126e2:	3001      	adds	r0, #1
 80126e4:	d0e6      	beq.n	80126b4 <_printf_common+0xa8>
 80126e6:	3601      	adds	r6, #1
 80126e8:	e7d9      	b.n	801269e <_printf_common+0x92>
	...

080126ec <_printf_i>:
 80126ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80126f0:	460c      	mov	r4, r1
 80126f2:	7e27      	ldrb	r7, [r4, #24]
 80126f4:	4691      	mov	r9, r2
 80126f6:	2f78      	cmp	r7, #120	; 0x78
 80126f8:	4680      	mov	r8, r0
 80126fa:	469a      	mov	sl, r3
 80126fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80126fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012702:	d807      	bhi.n	8012714 <_printf_i+0x28>
 8012704:	2f62      	cmp	r7, #98	; 0x62
 8012706:	d80a      	bhi.n	801271e <_printf_i+0x32>
 8012708:	2f00      	cmp	r7, #0
 801270a:	f000 80d9 	beq.w	80128c0 <_printf_i+0x1d4>
 801270e:	2f58      	cmp	r7, #88	; 0x58
 8012710:	f000 80a4 	beq.w	801285c <_printf_i+0x170>
 8012714:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801271c:	e03a      	b.n	8012794 <_printf_i+0xa8>
 801271e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012722:	2b15      	cmp	r3, #21
 8012724:	d8f6      	bhi.n	8012714 <_printf_i+0x28>
 8012726:	a001      	add	r0, pc, #4	; (adr r0, 801272c <_printf_i+0x40>)
 8012728:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801272c:	08012785 	.word	0x08012785
 8012730:	08012799 	.word	0x08012799
 8012734:	08012715 	.word	0x08012715
 8012738:	08012715 	.word	0x08012715
 801273c:	08012715 	.word	0x08012715
 8012740:	08012715 	.word	0x08012715
 8012744:	08012799 	.word	0x08012799
 8012748:	08012715 	.word	0x08012715
 801274c:	08012715 	.word	0x08012715
 8012750:	08012715 	.word	0x08012715
 8012754:	08012715 	.word	0x08012715
 8012758:	080128a7 	.word	0x080128a7
 801275c:	080127c9 	.word	0x080127c9
 8012760:	08012889 	.word	0x08012889
 8012764:	08012715 	.word	0x08012715
 8012768:	08012715 	.word	0x08012715
 801276c:	080128c9 	.word	0x080128c9
 8012770:	08012715 	.word	0x08012715
 8012774:	080127c9 	.word	0x080127c9
 8012778:	08012715 	.word	0x08012715
 801277c:	08012715 	.word	0x08012715
 8012780:	08012891 	.word	0x08012891
 8012784:	680b      	ldr	r3, [r1, #0]
 8012786:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801278a:	1d1a      	adds	r2, r3, #4
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	600a      	str	r2, [r1, #0]
 8012790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012794:	2301      	movs	r3, #1
 8012796:	e0a4      	b.n	80128e2 <_printf_i+0x1f6>
 8012798:	6825      	ldr	r5, [r4, #0]
 801279a:	6808      	ldr	r0, [r1, #0]
 801279c:	062e      	lsls	r6, r5, #24
 801279e:	f100 0304 	add.w	r3, r0, #4
 80127a2:	d50a      	bpl.n	80127ba <_printf_i+0xce>
 80127a4:	6805      	ldr	r5, [r0, #0]
 80127a6:	600b      	str	r3, [r1, #0]
 80127a8:	2d00      	cmp	r5, #0
 80127aa:	da03      	bge.n	80127b4 <_printf_i+0xc8>
 80127ac:	232d      	movs	r3, #45	; 0x2d
 80127ae:	426d      	negs	r5, r5
 80127b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127b4:	230a      	movs	r3, #10
 80127b6:	485e      	ldr	r0, [pc, #376]	; (8012930 <_printf_i+0x244>)
 80127b8:	e019      	b.n	80127ee <_printf_i+0x102>
 80127ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80127be:	6805      	ldr	r5, [r0, #0]
 80127c0:	600b      	str	r3, [r1, #0]
 80127c2:	bf18      	it	ne
 80127c4:	b22d      	sxthne	r5, r5
 80127c6:	e7ef      	b.n	80127a8 <_printf_i+0xbc>
 80127c8:	680b      	ldr	r3, [r1, #0]
 80127ca:	6825      	ldr	r5, [r4, #0]
 80127cc:	1d18      	adds	r0, r3, #4
 80127ce:	6008      	str	r0, [r1, #0]
 80127d0:	0628      	lsls	r0, r5, #24
 80127d2:	d501      	bpl.n	80127d8 <_printf_i+0xec>
 80127d4:	681d      	ldr	r5, [r3, #0]
 80127d6:	e002      	b.n	80127de <_printf_i+0xf2>
 80127d8:	0669      	lsls	r1, r5, #25
 80127da:	d5fb      	bpl.n	80127d4 <_printf_i+0xe8>
 80127dc:	881d      	ldrh	r5, [r3, #0]
 80127de:	2f6f      	cmp	r7, #111	; 0x6f
 80127e0:	bf0c      	ite	eq
 80127e2:	2308      	moveq	r3, #8
 80127e4:	230a      	movne	r3, #10
 80127e6:	4852      	ldr	r0, [pc, #328]	; (8012930 <_printf_i+0x244>)
 80127e8:	2100      	movs	r1, #0
 80127ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80127ee:	6866      	ldr	r6, [r4, #4]
 80127f0:	2e00      	cmp	r6, #0
 80127f2:	bfa8      	it	ge
 80127f4:	6821      	ldrge	r1, [r4, #0]
 80127f6:	60a6      	str	r6, [r4, #8]
 80127f8:	bfa4      	itt	ge
 80127fa:	f021 0104 	bicge.w	r1, r1, #4
 80127fe:	6021      	strge	r1, [r4, #0]
 8012800:	b90d      	cbnz	r5, 8012806 <_printf_i+0x11a>
 8012802:	2e00      	cmp	r6, #0
 8012804:	d04d      	beq.n	80128a2 <_printf_i+0x1b6>
 8012806:	4616      	mov	r6, r2
 8012808:	fbb5 f1f3 	udiv	r1, r5, r3
 801280c:	fb03 5711 	mls	r7, r3, r1, r5
 8012810:	5dc7      	ldrb	r7, [r0, r7]
 8012812:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012816:	462f      	mov	r7, r5
 8012818:	42bb      	cmp	r3, r7
 801281a:	460d      	mov	r5, r1
 801281c:	d9f4      	bls.n	8012808 <_printf_i+0x11c>
 801281e:	2b08      	cmp	r3, #8
 8012820:	d10b      	bne.n	801283a <_printf_i+0x14e>
 8012822:	6823      	ldr	r3, [r4, #0]
 8012824:	07df      	lsls	r7, r3, #31
 8012826:	d508      	bpl.n	801283a <_printf_i+0x14e>
 8012828:	6923      	ldr	r3, [r4, #16]
 801282a:	6861      	ldr	r1, [r4, #4]
 801282c:	4299      	cmp	r1, r3
 801282e:	bfde      	ittt	le
 8012830:	2330      	movle	r3, #48	; 0x30
 8012832:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012836:	f106 36ff 	addle.w	r6, r6, #4294967295
 801283a:	1b92      	subs	r2, r2, r6
 801283c:	6122      	str	r2, [r4, #16]
 801283e:	464b      	mov	r3, r9
 8012840:	4621      	mov	r1, r4
 8012842:	4640      	mov	r0, r8
 8012844:	f8cd a000 	str.w	sl, [sp]
 8012848:	aa03      	add	r2, sp, #12
 801284a:	f7ff fedf 	bl	801260c <_printf_common>
 801284e:	3001      	adds	r0, #1
 8012850:	d14c      	bne.n	80128ec <_printf_i+0x200>
 8012852:	f04f 30ff 	mov.w	r0, #4294967295
 8012856:	b004      	add	sp, #16
 8012858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801285c:	4834      	ldr	r0, [pc, #208]	; (8012930 <_printf_i+0x244>)
 801285e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012862:	680e      	ldr	r6, [r1, #0]
 8012864:	6823      	ldr	r3, [r4, #0]
 8012866:	f856 5b04 	ldr.w	r5, [r6], #4
 801286a:	061f      	lsls	r7, r3, #24
 801286c:	600e      	str	r6, [r1, #0]
 801286e:	d514      	bpl.n	801289a <_printf_i+0x1ae>
 8012870:	07d9      	lsls	r1, r3, #31
 8012872:	bf44      	itt	mi
 8012874:	f043 0320 	orrmi.w	r3, r3, #32
 8012878:	6023      	strmi	r3, [r4, #0]
 801287a:	b91d      	cbnz	r5, 8012884 <_printf_i+0x198>
 801287c:	6823      	ldr	r3, [r4, #0]
 801287e:	f023 0320 	bic.w	r3, r3, #32
 8012882:	6023      	str	r3, [r4, #0]
 8012884:	2310      	movs	r3, #16
 8012886:	e7af      	b.n	80127e8 <_printf_i+0xfc>
 8012888:	6823      	ldr	r3, [r4, #0]
 801288a:	f043 0320 	orr.w	r3, r3, #32
 801288e:	6023      	str	r3, [r4, #0]
 8012890:	2378      	movs	r3, #120	; 0x78
 8012892:	4828      	ldr	r0, [pc, #160]	; (8012934 <_printf_i+0x248>)
 8012894:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012898:	e7e3      	b.n	8012862 <_printf_i+0x176>
 801289a:	065e      	lsls	r6, r3, #25
 801289c:	bf48      	it	mi
 801289e:	b2ad      	uxthmi	r5, r5
 80128a0:	e7e6      	b.n	8012870 <_printf_i+0x184>
 80128a2:	4616      	mov	r6, r2
 80128a4:	e7bb      	b.n	801281e <_printf_i+0x132>
 80128a6:	680b      	ldr	r3, [r1, #0]
 80128a8:	6826      	ldr	r6, [r4, #0]
 80128aa:	1d1d      	adds	r5, r3, #4
 80128ac:	6960      	ldr	r0, [r4, #20]
 80128ae:	600d      	str	r5, [r1, #0]
 80128b0:	0635      	lsls	r5, r6, #24
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	d501      	bpl.n	80128ba <_printf_i+0x1ce>
 80128b6:	6018      	str	r0, [r3, #0]
 80128b8:	e002      	b.n	80128c0 <_printf_i+0x1d4>
 80128ba:	0671      	lsls	r1, r6, #25
 80128bc:	d5fb      	bpl.n	80128b6 <_printf_i+0x1ca>
 80128be:	8018      	strh	r0, [r3, #0]
 80128c0:	2300      	movs	r3, #0
 80128c2:	4616      	mov	r6, r2
 80128c4:	6123      	str	r3, [r4, #16]
 80128c6:	e7ba      	b.n	801283e <_printf_i+0x152>
 80128c8:	680b      	ldr	r3, [r1, #0]
 80128ca:	1d1a      	adds	r2, r3, #4
 80128cc:	600a      	str	r2, [r1, #0]
 80128ce:	681e      	ldr	r6, [r3, #0]
 80128d0:	2100      	movs	r1, #0
 80128d2:	4630      	mov	r0, r6
 80128d4:	6862      	ldr	r2, [r4, #4]
 80128d6:	f000 fee9 	bl	80136ac <memchr>
 80128da:	b108      	cbz	r0, 80128e0 <_printf_i+0x1f4>
 80128dc:	1b80      	subs	r0, r0, r6
 80128de:	6060      	str	r0, [r4, #4]
 80128e0:	6863      	ldr	r3, [r4, #4]
 80128e2:	6123      	str	r3, [r4, #16]
 80128e4:	2300      	movs	r3, #0
 80128e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128ea:	e7a8      	b.n	801283e <_printf_i+0x152>
 80128ec:	4632      	mov	r2, r6
 80128ee:	4649      	mov	r1, r9
 80128f0:	4640      	mov	r0, r8
 80128f2:	6923      	ldr	r3, [r4, #16]
 80128f4:	47d0      	blx	sl
 80128f6:	3001      	adds	r0, #1
 80128f8:	d0ab      	beq.n	8012852 <_printf_i+0x166>
 80128fa:	6823      	ldr	r3, [r4, #0]
 80128fc:	079b      	lsls	r3, r3, #30
 80128fe:	d413      	bmi.n	8012928 <_printf_i+0x23c>
 8012900:	68e0      	ldr	r0, [r4, #12]
 8012902:	9b03      	ldr	r3, [sp, #12]
 8012904:	4298      	cmp	r0, r3
 8012906:	bfb8      	it	lt
 8012908:	4618      	movlt	r0, r3
 801290a:	e7a4      	b.n	8012856 <_printf_i+0x16a>
 801290c:	2301      	movs	r3, #1
 801290e:	4632      	mov	r2, r6
 8012910:	4649      	mov	r1, r9
 8012912:	4640      	mov	r0, r8
 8012914:	47d0      	blx	sl
 8012916:	3001      	adds	r0, #1
 8012918:	d09b      	beq.n	8012852 <_printf_i+0x166>
 801291a:	3501      	adds	r5, #1
 801291c:	68e3      	ldr	r3, [r4, #12]
 801291e:	9903      	ldr	r1, [sp, #12]
 8012920:	1a5b      	subs	r3, r3, r1
 8012922:	42ab      	cmp	r3, r5
 8012924:	dcf2      	bgt.n	801290c <_printf_i+0x220>
 8012926:	e7eb      	b.n	8012900 <_printf_i+0x214>
 8012928:	2500      	movs	r5, #0
 801292a:	f104 0619 	add.w	r6, r4, #25
 801292e:	e7f5      	b.n	801291c <_printf_i+0x230>
 8012930:	08015b76 	.word	0x08015b76
 8012934:	08015b87 	.word	0x08015b87

08012938 <realloc>:
 8012938:	4b02      	ldr	r3, [pc, #8]	; (8012944 <realloc+0xc>)
 801293a:	460a      	mov	r2, r1
 801293c:	4601      	mov	r1, r0
 801293e:	6818      	ldr	r0, [r3, #0]
 8012940:	f001 ba5e 	b.w	8013e00 <_realloc_r>
 8012944:	200001e0 	.word	0x200001e0

08012948 <_sbrk_r>:
 8012948:	b538      	push	{r3, r4, r5, lr}
 801294a:	2300      	movs	r3, #0
 801294c:	4d05      	ldr	r5, [pc, #20]	; (8012964 <_sbrk_r+0x1c>)
 801294e:	4604      	mov	r4, r0
 8012950:	4608      	mov	r0, r1
 8012952:	602b      	str	r3, [r5, #0]
 8012954:	f7f4 f984 	bl	8006c60 <_sbrk>
 8012958:	1c43      	adds	r3, r0, #1
 801295a:	d102      	bne.n	8012962 <_sbrk_r+0x1a>
 801295c:	682b      	ldr	r3, [r5, #0]
 801295e:	b103      	cbz	r3, 8012962 <_sbrk_r+0x1a>
 8012960:	6023      	str	r3, [r4, #0]
 8012962:	bd38      	pop	{r3, r4, r5, pc}
 8012964:	200021bc 	.word	0x200021bc

08012968 <siprintf>:
 8012968:	b40e      	push	{r1, r2, r3}
 801296a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801296e:	b500      	push	{lr}
 8012970:	b09c      	sub	sp, #112	; 0x70
 8012972:	ab1d      	add	r3, sp, #116	; 0x74
 8012974:	9002      	str	r0, [sp, #8]
 8012976:	9006      	str	r0, [sp, #24]
 8012978:	9107      	str	r1, [sp, #28]
 801297a:	9104      	str	r1, [sp, #16]
 801297c:	4808      	ldr	r0, [pc, #32]	; (80129a0 <siprintf+0x38>)
 801297e:	4909      	ldr	r1, [pc, #36]	; (80129a4 <siprintf+0x3c>)
 8012980:	f853 2b04 	ldr.w	r2, [r3], #4
 8012984:	9105      	str	r1, [sp, #20]
 8012986:	6800      	ldr	r0, [r0, #0]
 8012988:	a902      	add	r1, sp, #8
 801298a:	9301      	str	r3, [sp, #4]
 801298c:	f001 faba 	bl	8013f04 <_svfiprintf_r>
 8012990:	2200      	movs	r2, #0
 8012992:	9b02      	ldr	r3, [sp, #8]
 8012994:	701a      	strb	r2, [r3, #0]
 8012996:	b01c      	add	sp, #112	; 0x70
 8012998:	f85d eb04 	ldr.w	lr, [sp], #4
 801299c:	b003      	add	sp, #12
 801299e:	4770      	bx	lr
 80129a0:	200001e0 	.word	0x200001e0
 80129a4:	ffff0208 	.word	0xffff0208

080129a8 <quorem>:
 80129a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ac:	6903      	ldr	r3, [r0, #16]
 80129ae:	690c      	ldr	r4, [r1, #16]
 80129b0:	4607      	mov	r7, r0
 80129b2:	42a3      	cmp	r3, r4
 80129b4:	f2c0 8083 	blt.w	8012abe <quorem+0x116>
 80129b8:	3c01      	subs	r4, #1
 80129ba:	f100 0514 	add.w	r5, r0, #20
 80129be:	f101 0814 	add.w	r8, r1, #20
 80129c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80129c6:	9301      	str	r3, [sp, #4]
 80129c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80129cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80129d0:	3301      	adds	r3, #1
 80129d2:	429a      	cmp	r2, r3
 80129d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80129d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80129dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80129e0:	d332      	bcc.n	8012a48 <quorem+0xa0>
 80129e2:	f04f 0e00 	mov.w	lr, #0
 80129e6:	4640      	mov	r0, r8
 80129e8:	46ac      	mov	ip, r5
 80129ea:	46f2      	mov	sl, lr
 80129ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80129f0:	b293      	uxth	r3, r2
 80129f2:	fb06 e303 	mla	r3, r6, r3, lr
 80129f6:	0c12      	lsrs	r2, r2, #16
 80129f8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80129fc:	fb06 e202 	mla	r2, r6, r2, lr
 8012a00:	b29b      	uxth	r3, r3
 8012a02:	ebaa 0303 	sub.w	r3, sl, r3
 8012a06:	f8dc a000 	ldr.w	sl, [ip]
 8012a0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012a0e:	fa1f fa8a 	uxth.w	sl, sl
 8012a12:	4453      	add	r3, sl
 8012a14:	fa1f fa82 	uxth.w	sl, r2
 8012a18:	f8dc 2000 	ldr.w	r2, [ip]
 8012a1c:	4581      	cmp	r9, r0
 8012a1e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012a22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012a26:	b29b      	uxth	r3, r3
 8012a28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012a2c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012a30:	f84c 3b04 	str.w	r3, [ip], #4
 8012a34:	d2da      	bcs.n	80129ec <quorem+0x44>
 8012a36:	f855 300b 	ldr.w	r3, [r5, fp]
 8012a3a:	b92b      	cbnz	r3, 8012a48 <quorem+0xa0>
 8012a3c:	9b01      	ldr	r3, [sp, #4]
 8012a3e:	3b04      	subs	r3, #4
 8012a40:	429d      	cmp	r5, r3
 8012a42:	461a      	mov	r2, r3
 8012a44:	d32f      	bcc.n	8012aa6 <quorem+0xfe>
 8012a46:	613c      	str	r4, [r7, #16]
 8012a48:	4638      	mov	r0, r7
 8012a4a:	f001 f8c3 	bl	8013bd4 <__mcmp>
 8012a4e:	2800      	cmp	r0, #0
 8012a50:	db25      	blt.n	8012a9e <quorem+0xf6>
 8012a52:	4628      	mov	r0, r5
 8012a54:	f04f 0c00 	mov.w	ip, #0
 8012a58:	3601      	adds	r6, #1
 8012a5a:	f858 1b04 	ldr.w	r1, [r8], #4
 8012a5e:	f8d0 e000 	ldr.w	lr, [r0]
 8012a62:	b28b      	uxth	r3, r1
 8012a64:	ebac 0303 	sub.w	r3, ip, r3
 8012a68:	fa1f f28e 	uxth.w	r2, lr
 8012a6c:	4413      	add	r3, r2
 8012a6e:	0c0a      	lsrs	r2, r1, #16
 8012a70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012a74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012a78:	b29b      	uxth	r3, r3
 8012a7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012a7e:	45c1      	cmp	r9, r8
 8012a80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012a84:	f840 3b04 	str.w	r3, [r0], #4
 8012a88:	d2e7      	bcs.n	8012a5a <quorem+0xb2>
 8012a8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012a8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012a92:	b922      	cbnz	r2, 8012a9e <quorem+0xf6>
 8012a94:	3b04      	subs	r3, #4
 8012a96:	429d      	cmp	r5, r3
 8012a98:	461a      	mov	r2, r3
 8012a9a:	d30a      	bcc.n	8012ab2 <quorem+0x10a>
 8012a9c:	613c      	str	r4, [r7, #16]
 8012a9e:	4630      	mov	r0, r6
 8012aa0:	b003      	add	sp, #12
 8012aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aa6:	6812      	ldr	r2, [r2, #0]
 8012aa8:	3b04      	subs	r3, #4
 8012aaa:	2a00      	cmp	r2, #0
 8012aac:	d1cb      	bne.n	8012a46 <quorem+0x9e>
 8012aae:	3c01      	subs	r4, #1
 8012ab0:	e7c6      	b.n	8012a40 <quorem+0x98>
 8012ab2:	6812      	ldr	r2, [r2, #0]
 8012ab4:	3b04      	subs	r3, #4
 8012ab6:	2a00      	cmp	r2, #0
 8012ab8:	d1f0      	bne.n	8012a9c <quorem+0xf4>
 8012aba:	3c01      	subs	r4, #1
 8012abc:	e7eb      	b.n	8012a96 <quorem+0xee>
 8012abe:	2000      	movs	r0, #0
 8012ac0:	e7ee      	b.n	8012aa0 <quorem+0xf8>
 8012ac2:	0000      	movs	r0, r0
 8012ac4:	0000      	movs	r0, r0
	...

08012ac8 <_dtoa_r>:
 8012ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012acc:	4616      	mov	r6, r2
 8012ace:	461f      	mov	r7, r3
 8012ad0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012ad2:	b099      	sub	sp, #100	; 0x64
 8012ad4:	4605      	mov	r5, r0
 8012ad6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012ada:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8012ade:	b974      	cbnz	r4, 8012afe <_dtoa_r+0x36>
 8012ae0:	2010      	movs	r0, #16
 8012ae2:	f7ff f9ef 	bl	8011ec4 <malloc>
 8012ae6:	4602      	mov	r2, r0
 8012ae8:	6268      	str	r0, [r5, #36]	; 0x24
 8012aea:	b920      	cbnz	r0, 8012af6 <_dtoa_r+0x2e>
 8012aec:	21ea      	movs	r1, #234	; 0xea
 8012aee:	4bae      	ldr	r3, [pc, #696]	; (8012da8 <_dtoa_r+0x2e0>)
 8012af0:	48ae      	ldr	r0, [pc, #696]	; (8012dac <_dtoa_r+0x2e4>)
 8012af2:	f001 fb07 	bl	8014104 <__assert_func>
 8012af6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012afa:	6004      	str	r4, [r0, #0]
 8012afc:	60c4      	str	r4, [r0, #12]
 8012afe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012b00:	6819      	ldr	r1, [r3, #0]
 8012b02:	b151      	cbz	r1, 8012b1a <_dtoa_r+0x52>
 8012b04:	685a      	ldr	r2, [r3, #4]
 8012b06:	2301      	movs	r3, #1
 8012b08:	4093      	lsls	r3, r2
 8012b0a:	604a      	str	r2, [r1, #4]
 8012b0c:	608b      	str	r3, [r1, #8]
 8012b0e:	4628      	mov	r0, r5
 8012b10:	f000 fe26 	bl	8013760 <_Bfree>
 8012b14:	2200      	movs	r2, #0
 8012b16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012b18:	601a      	str	r2, [r3, #0]
 8012b1a:	1e3b      	subs	r3, r7, #0
 8012b1c:	bfaf      	iteee	ge
 8012b1e:	2300      	movge	r3, #0
 8012b20:	2201      	movlt	r2, #1
 8012b22:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012b26:	9305      	strlt	r3, [sp, #20]
 8012b28:	bfa8      	it	ge
 8012b2a:	f8c8 3000 	strge.w	r3, [r8]
 8012b2e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8012b32:	4b9f      	ldr	r3, [pc, #636]	; (8012db0 <_dtoa_r+0x2e8>)
 8012b34:	bfb8      	it	lt
 8012b36:	f8c8 2000 	strlt.w	r2, [r8]
 8012b3a:	ea33 0309 	bics.w	r3, r3, r9
 8012b3e:	d119      	bne.n	8012b74 <_dtoa_r+0xac>
 8012b40:	f242 730f 	movw	r3, #9999	; 0x270f
 8012b44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012b46:	6013      	str	r3, [r2, #0]
 8012b48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012b4c:	4333      	orrs	r3, r6
 8012b4e:	f000 8580 	beq.w	8013652 <_dtoa_r+0xb8a>
 8012b52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012b54:	b953      	cbnz	r3, 8012b6c <_dtoa_r+0xa4>
 8012b56:	4b97      	ldr	r3, [pc, #604]	; (8012db4 <_dtoa_r+0x2ec>)
 8012b58:	e022      	b.n	8012ba0 <_dtoa_r+0xd8>
 8012b5a:	4b97      	ldr	r3, [pc, #604]	; (8012db8 <_dtoa_r+0x2f0>)
 8012b5c:	9308      	str	r3, [sp, #32]
 8012b5e:	3308      	adds	r3, #8
 8012b60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8012b62:	6013      	str	r3, [r2, #0]
 8012b64:	9808      	ldr	r0, [sp, #32]
 8012b66:	b019      	add	sp, #100	; 0x64
 8012b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b6c:	4b91      	ldr	r3, [pc, #580]	; (8012db4 <_dtoa_r+0x2ec>)
 8012b6e:	9308      	str	r3, [sp, #32]
 8012b70:	3303      	adds	r3, #3
 8012b72:	e7f5      	b.n	8012b60 <_dtoa_r+0x98>
 8012b74:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8012b78:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8012b7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012b80:	2200      	movs	r2, #0
 8012b82:	2300      	movs	r3, #0
 8012b84:	f7ed ff4c 	bl	8000a20 <__aeabi_dcmpeq>
 8012b88:	4680      	mov	r8, r0
 8012b8a:	b158      	cbz	r0, 8012ba4 <_dtoa_r+0xdc>
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012b90:	6013      	str	r3, [r2, #0]
 8012b92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	f000 8559 	beq.w	801364c <_dtoa_r+0xb84>
 8012b9a:	4888      	ldr	r0, [pc, #544]	; (8012dbc <_dtoa_r+0x2f4>)
 8012b9c:	6018      	str	r0, [r3, #0]
 8012b9e:	1e43      	subs	r3, r0, #1
 8012ba0:	9308      	str	r3, [sp, #32]
 8012ba2:	e7df      	b.n	8012b64 <_dtoa_r+0x9c>
 8012ba4:	ab16      	add	r3, sp, #88	; 0x58
 8012ba6:	9301      	str	r3, [sp, #4]
 8012ba8:	ab17      	add	r3, sp, #92	; 0x5c
 8012baa:	9300      	str	r3, [sp, #0]
 8012bac:	4628      	mov	r0, r5
 8012bae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012bb2:	f001 f8bb 	bl	8013d2c <__d2b>
 8012bb6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012bba:	4682      	mov	sl, r0
 8012bbc:	2c00      	cmp	r4, #0
 8012bbe:	d07e      	beq.n	8012cbe <_dtoa_r+0x1f6>
 8012bc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012bc6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8012bca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012bce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8012bd2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8012bd6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8012bda:	2200      	movs	r2, #0
 8012bdc:	4b78      	ldr	r3, [pc, #480]	; (8012dc0 <_dtoa_r+0x2f8>)
 8012bde:	f7ed faff 	bl	80001e0 <__aeabi_dsub>
 8012be2:	a36b      	add	r3, pc, #428	; (adr r3, 8012d90 <_dtoa_r+0x2c8>)
 8012be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012be8:	f7ed fcb2 	bl	8000550 <__aeabi_dmul>
 8012bec:	a36a      	add	r3, pc, #424	; (adr r3, 8012d98 <_dtoa_r+0x2d0>)
 8012bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf2:	f7ed faf7 	bl	80001e4 <__adddf3>
 8012bf6:	4606      	mov	r6, r0
 8012bf8:	4620      	mov	r0, r4
 8012bfa:	460f      	mov	r7, r1
 8012bfc:	f7ed fc3e 	bl	800047c <__aeabi_i2d>
 8012c00:	a367      	add	r3, pc, #412	; (adr r3, 8012da0 <_dtoa_r+0x2d8>)
 8012c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c06:	f7ed fca3 	bl	8000550 <__aeabi_dmul>
 8012c0a:	4602      	mov	r2, r0
 8012c0c:	460b      	mov	r3, r1
 8012c0e:	4630      	mov	r0, r6
 8012c10:	4639      	mov	r1, r7
 8012c12:	f7ed fae7 	bl	80001e4 <__adddf3>
 8012c16:	4606      	mov	r6, r0
 8012c18:	460f      	mov	r7, r1
 8012c1a:	f7ed ff49 	bl	8000ab0 <__aeabi_d2iz>
 8012c1e:	2200      	movs	r2, #0
 8012c20:	4681      	mov	r9, r0
 8012c22:	2300      	movs	r3, #0
 8012c24:	4630      	mov	r0, r6
 8012c26:	4639      	mov	r1, r7
 8012c28:	f7ed ff04 	bl	8000a34 <__aeabi_dcmplt>
 8012c2c:	b148      	cbz	r0, 8012c42 <_dtoa_r+0x17a>
 8012c2e:	4648      	mov	r0, r9
 8012c30:	f7ed fc24 	bl	800047c <__aeabi_i2d>
 8012c34:	4632      	mov	r2, r6
 8012c36:	463b      	mov	r3, r7
 8012c38:	f7ed fef2 	bl	8000a20 <__aeabi_dcmpeq>
 8012c3c:	b908      	cbnz	r0, 8012c42 <_dtoa_r+0x17a>
 8012c3e:	f109 39ff 	add.w	r9, r9, #4294967295
 8012c42:	f1b9 0f16 	cmp.w	r9, #22
 8012c46:	d857      	bhi.n	8012cf8 <_dtoa_r+0x230>
 8012c48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012c4c:	4b5d      	ldr	r3, [pc, #372]	; (8012dc4 <_dtoa_r+0x2fc>)
 8012c4e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8012c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c56:	f7ed feed 	bl	8000a34 <__aeabi_dcmplt>
 8012c5a:	2800      	cmp	r0, #0
 8012c5c:	d04e      	beq.n	8012cfc <_dtoa_r+0x234>
 8012c5e:	2300      	movs	r3, #0
 8012c60:	f109 39ff 	add.w	r9, r9, #4294967295
 8012c64:	930f      	str	r3, [sp, #60]	; 0x3c
 8012c66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012c68:	1b1c      	subs	r4, r3, r4
 8012c6a:	1e63      	subs	r3, r4, #1
 8012c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8012c6e:	bf49      	itett	mi
 8012c70:	f1c4 0301 	rsbmi	r3, r4, #1
 8012c74:	2300      	movpl	r3, #0
 8012c76:	9306      	strmi	r3, [sp, #24]
 8012c78:	2300      	movmi	r3, #0
 8012c7a:	bf54      	ite	pl
 8012c7c:	9306      	strpl	r3, [sp, #24]
 8012c7e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8012c80:	f1b9 0f00 	cmp.w	r9, #0
 8012c84:	db3c      	blt.n	8012d00 <_dtoa_r+0x238>
 8012c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c88:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012c8c:	444b      	add	r3, r9
 8012c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8012c90:	2300      	movs	r3, #0
 8012c92:	930a      	str	r3, [sp, #40]	; 0x28
 8012c94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012c96:	2b09      	cmp	r3, #9
 8012c98:	d86c      	bhi.n	8012d74 <_dtoa_r+0x2ac>
 8012c9a:	2b05      	cmp	r3, #5
 8012c9c:	bfc4      	itt	gt
 8012c9e:	3b04      	subgt	r3, #4
 8012ca0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8012ca2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012ca4:	bfc8      	it	gt
 8012ca6:	2400      	movgt	r4, #0
 8012ca8:	f1a3 0302 	sub.w	r3, r3, #2
 8012cac:	bfd8      	it	le
 8012cae:	2401      	movle	r4, #1
 8012cb0:	2b03      	cmp	r3, #3
 8012cb2:	f200 808b 	bhi.w	8012dcc <_dtoa_r+0x304>
 8012cb6:	e8df f003 	tbb	[pc, r3]
 8012cba:	4f2d      	.short	0x4f2d
 8012cbc:	5b4d      	.short	0x5b4d
 8012cbe:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8012cc2:	441c      	add	r4, r3
 8012cc4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8012cc8:	2b20      	cmp	r3, #32
 8012cca:	bfc3      	ittte	gt
 8012ccc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012cd0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8012cd4:	fa09 f303 	lslgt.w	r3, r9, r3
 8012cd8:	f1c3 0320 	rsble	r3, r3, #32
 8012cdc:	bfc6      	itte	gt
 8012cde:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012ce2:	4318      	orrgt	r0, r3
 8012ce4:	fa06 f003 	lslle.w	r0, r6, r3
 8012ce8:	f7ed fbb8 	bl	800045c <__aeabi_ui2d>
 8012cec:	2301      	movs	r3, #1
 8012cee:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8012cf2:	3c01      	subs	r4, #1
 8012cf4:	9313      	str	r3, [sp, #76]	; 0x4c
 8012cf6:	e770      	b.n	8012bda <_dtoa_r+0x112>
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	e7b3      	b.n	8012c64 <_dtoa_r+0x19c>
 8012cfc:	900f      	str	r0, [sp, #60]	; 0x3c
 8012cfe:	e7b2      	b.n	8012c66 <_dtoa_r+0x19e>
 8012d00:	9b06      	ldr	r3, [sp, #24]
 8012d02:	eba3 0309 	sub.w	r3, r3, r9
 8012d06:	9306      	str	r3, [sp, #24]
 8012d08:	f1c9 0300 	rsb	r3, r9, #0
 8012d0c:	930a      	str	r3, [sp, #40]	; 0x28
 8012d0e:	2300      	movs	r3, #0
 8012d10:	930e      	str	r3, [sp, #56]	; 0x38
 8012d12:	e7bf      	b.n	8012c94 <_dtoa_r+0x1cc>
 8012d14:	2300      	movs	r3, #0
 8012d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	dc59      	bgt.n	8012dd2 <_dtoa_r+0x30a>
 8012d1e:	f04f 0b01 	mov.w	fp, #1
 8012d22:	465b      	mov	r3, fp
 8012d24:	f8cd b008 	str.w	fp, [sp, #8]
 8012d28:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8012d30:	6042      	str	r2, [r0, #4]
 8012d32:	2204      	movs	r2, #4
 8012d34:	f102 0614 	add.w	r6, r2, #20
 8012d38:	429e      	cmp	r6, r3
 8012d3a:	6841      	ldr	r1, [r0, #4]
 8012d3c:	d94f      	bls.n	8012dde <_dtoa_r+0x316>
 8012d3e:	4628      	mov	r0, r5
 8012d40:	f000 fcce 	bl	80136e0 <_Balloc>
 8012d44:	9008      	str	r0, [sp, #32]
 8012d46:	2800      	cmp	r0, #0
 8012d48:	d14d      	bne.n	8012de6 <_dtoa_r+0x31e>
 8012d4a:	4602      	mov	r2, r0
 8012d4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012d50:	4b1d      	ldr	r3, [pc, #116]	; (8012dc8 <_dtoa_r+0x300>)
 8012d52:	e6cd      	b.n	8012af0 <_dtoa_r+0x28>
 8012d54:	2301      	movs	r3, #1
 8012d56:	e7de      	b.n	8012d16 <_dtoa_r+0x24e>
 8012d58:	2300      	movs	r3, #0
 8012d5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012d5e:	eb09 0b03 	add.w	fp, r9, r3
 8012d62:	f10b 0301 	add.w	r3, fp, #1
 8012d66:	2b01      	cmp	r3, #1
 8012d68:	9302      	str	r3, [sp, #8]
 8012d6a:	bfb8      	it	lt
 8012d6c:	2301      	movlt	r3, #1
 8012d6e:	e7dd      	b.n	8012d2c <_dtoa_r+0x264>
 8012d70:	2301      	movs	r3, #1
 8012d72:	e7f2      	b.n	8012d5a <_dtoa_r+0x292>
 8012d74:	2401      	movs	r4, #1
 8012d76:	2300      	movs	r3, #0
 8012d78:	940b      	str	r4, [sp, #44]	; 0x2c
 8012d7a:	9322      	str	r3, [sp, #136]	; 0x88
 8012d7c:	f04f 3bff 	mov.w	fp, #4294967295
 8012d80:	2200      	movs	r2, #0
 8012d82:	2312      	movs	r3, #18
 8012d84:	f8cd b008 	str.w	fp, [sp, #8]
 8012d88:	9223      	str	r2, [sp, #140]	; 0x8c
 8012d8a:	e7cf      	b.n	8012d2c <_dtoa_r+0x264>
 8012d8c:	f3af 8000 	nop.w
 8012d90:	636f4361 	.word	0x636f4361
 8012d94:	3fd287a7 	.word	0x3fd287a7
 8012d98:	8b60c8b3 	.word	0x8b60c8b3
 8012d9c:	3fc68a28 	.word	0x3fc68a28
 8012da0:	509f79fb 	.word	0x509f79fb
 8012da4:	3fd34413 	.word	0x3fd34413
 8012da8:	08015ba5 	.word	0x08015ba5
 8012dac:	08015bbc 	.word	0x08015bbc
 8012db0:	7ff00000 	.word	0x7ff00000
 8012db4:	08015ba1 	.word	0x08015ba1
 8012db8:	08015b98 	.word	0x08015b98
 8012dbc:	08015b75 	.word	0x08015b75
 8012dc0:	3ff80000 	.word	0x3ff80000
 8012dc4:	08015cb8 	.word	0x08015cb8
 8012dc8:	08015c1b 	.word	0x08015c1b
 8012dcc:	2301      	movs	r3, #1
 8012dce:	930b      	str	r3, [sp, #44]	; 0x2c
 8012dd0:	e7d4      	b.n	8012d7c <_dtoa_r+0x2b4>
 8012dd2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8012dd6:	465b      	mov	r3, fp
 8012dd8:	f8cd b008 	str.w	fp, [sp, #8]
 8012ddc:	e7a6      	b.n	8012d2c <_dtoa_r+0x264>
 8012dde:	3101      	adds	r1, #1
 8012de0:	6041      	str	r1, [r0, #4]
 8012de2:	0052      	lsls	r2, r2, #1
 8012de4:	e7a6      	b.n	8012d34 <_dtoa_r+0x26c>
 8012de6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012de8:	9a08      	ldr	r2, [sp, #32]
 8012dea:	601a      	str	r2, [r3, #0]
 8012dec:	9b02      	ldr	r3, [sp, #8]
 8012dee:	2b0e      	cmp	r3, #14
 8012df0:	f200 80a8 	bhi.w	8012f44 <_dtoa_r+0x47c>
 8012df4:	2c00      	cmp	r4, #0
 8012df6:	f000 80a5 	beq.w	8012f44 <_dtoa_r+0x47c>
 8012dfa:	f1b9 0f00 	cmp.w	r9, #0
 8012dfe:	dd34      	ble.n	8012e6a <_dtoa_r+0x3a2>
 8012e00:	4a9a      	ldr	r2, [pc, #616]	; (801306c <_dtoa_r+0x5a4>)
 8012e02:	f009 030f 	and.w	r3, r9, #15
 8012e06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012e0a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8012e0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012e12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8012e16:	ea4f 1429 	mov.w	r4, r9, asr #4
 8012e1a:	d016      	beq.n	8012e4a <_dtoa_r+0x382>
 8012e1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012e20:	4b93      	ldr	r3, [pc, #588]	; (8013070 <_dtoa_r+0x5a8>)
 8012e22:	2703      	movs	r7, #3
 8012e24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012e28:	f7ed fcbc 	bl	80007a4 <__aeabi_ddiv>
 8012e2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012e30:	f004 040f 	and.w	r4, r4, #15
 8012e34:	4e8e      	ldr	r6, [pc, #568]	; (8013070 <_dtoa_r+0x5a8>)
 8012e36:	b954      	cbnz	r4, 8012e4e <_dtoa_r+0x386>
 8012e38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012e3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012e40:	f7ed fcb0 	bl	80007a4 <__aeabi_ddiv>
 8012e44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012e48:	e029      	b.n	8012e9e <_dtoa_r+0x3d6>
 8012e4a:	2702      	movs	r7, #2
 8012e4c:	e7f2      	b.n	8012e34 <_dtoa_r+0x36c>
 8012e4e:	07e1      	lsls	r1, r4, #31
 8012e50:	d508      	bpl.n	8012e64 <_dtoa_r+0x39c>
 8012e52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012e56:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012e5a:	f7ed fb79 	bl	8000550 <__aeabi_dmul>
 8012e5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012e62:	3701      	adds	r7, #1
 8012e64:	1064      	asrs	r4, r4, #1
 8012e66:	3608      	adds	r6, #8
 8012e68:	e7e5      	b.n	8012e36 <_dtoa_r+0x36e>
 8012e6a:	f000 80a5 	beq.w	8012fb8 <_dtoa_r+0x4f0>
 8012e6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012e72:	f1c9 0400 	rsb	r4, r9, #0
 8012e76:	4b7d      	ldr	r3, [pc, #500]	; (801306c <_dtoa_r+0x5a4>)
 8012e78:	f004 020f 	and.w	r2, r4, #15
 8012e7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e84:	f7ed fb64 	bl	8000550 <__aeabi_dmul>
 8012e88:	2702      	movs	r7, #2
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012e90:	4e77      	ldr	r6, [pc, #476]	; (8013070 <_dtoa_r+0x5a8>)
 8012e92:	1124      	asrs	r4, r4, #4
 8012e94:	2c00      	cmp	r4, #0
 8012e96:	f040 8084 	bne.w	8012fa2 <_dtoa_r+0x4da>
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d1d2      	bne.n	8012e44 <_dtoa_r+0x37c>
 8012e9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	f000 808b 	beq.w	8012fbc <_dtoa_r+0x4f4>
 8012ea6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8012eaa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8012eae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	4b6f      	ldr	r3, [pc, #444]	; (8013074 <_dtoa_r+0x5ac>)
 8012eb6:	f7ed fdbd 	bl	8000a34 <__aeabi_dcmplt>
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	d07e      	beq.n	8012fbc <_dtoa_r+0x4f4>
 8012ebe:	9b02      	ldr	r3, [sp, #8]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d07b      	beq.n	8012fbc <_dtoa_r+0x4f4>
 8012ec4:	f1bb 0f00 	cmp.w	fp, #0
 8012ec8:	dd38      	ble.n	8012f3c <_dtoa_r+0x474>
 8012eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012ece:	2200      	movs	r2, #0
 8012ed0:	4b69      	ldr	r3, [pc, #420]	; (8013078 <_dtoa_r+0x5b0>)
 8012ed2:	f7ed fb3d 	bl	8000550 <__aeabi_dmul>
 8012ed6:	465c      	mov	r4, fp
 8012ed8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012edc:	f109 38ff 	add.w	r8, r9, #4294967295
 8012ee0:	3701      	adds	r7, #1
 8012ee2:	4638      	mov	r0, r7
 8012ee4:	f7ed faca 	bl	800047c <__aeabi_i2d>
 8012ee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012eec:	f7ed fb30 	bl	8000550 <__aeabi_dmul>
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	4b62      	ldr	r3, [pc, #392]	; (801307c <_dtoa_r+0x5b4>)
 8012ef4:	f7ed f976 	bl	80001e4 <__adddf3>
 8012ef8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012efc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012f00:	9611      	str	r6, [sp, #68]	; 0x44
 8012f02:	2c00      	cmp	r4, #0
 8012f04:	d15d      	bne.n	8012fc2 <_dtoa_r+0x4fa>
 8012f06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	4b5c      	ldr	r3, [pc, #368]	; (8013080 <_dtoa_r+0x5b8>)
 8012f0e:	f7ed f967 	bl	80001e0 <__aeabi_dsub>
 8012f12:	4602      	mov	r2, r0
 8012f14:	460b      	mov	r3, r1
 8012f16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012f1a:	4633      	mov	r3, r6
 8012f1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012f1e:	f7ed fda7 	bl	8000a70 <__aeabi_dcmpgt>
 8012f22:	2800      	cmp	r0, #0
 8012f24:	f040 829e 	bne.w	8013464 <_dtoa_r+0x99c>
 8012f28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012f2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012f2e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012f32:	f7ed fd7f 	bl	8000a34 <__aeabi_dcmplt>
 8012f36:	2800      	cmp	r0, #0
 8012f38:	f040 8292 	bne.w	8013460 <_dtoa_r+0x998>
 8012f3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8012f40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8012f44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	f2c0 8153 	blt.w	80131f2 <_dtoa_r+0x72a>
 8012f4c:	f1b9 0f0e 	cmp.w	r9, #14
 8012f50:	f300 814f 	bgt.w	80131f2 <_dtoa_r+0x72a>
 8012f54:	4b45      	ldr	r3, [pc, #276]	; (801306c <_dtoa_r+0x5a4>)
 8012f56:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8012f5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012f5e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8012f62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	f280 80db 	bge.w	8013120 <_dtoa_r+0x658>
 8012f6a:	9b02      	ldr	r3, [sp, #8]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	f300 80d7 	bgt.w	8013120 <_dtoa_r+0x658>
 8012f72:	f040 8274 	bne.w	801345e <_dtoa_r+0x996>
 8012f76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	4b40      	ldr	r3, [pc, #256]	; (8013080 <_dtoa_r+0x5b8>)
 8012f7e:	f7ed fae7 	bl	8000550 <__aeabi_dmul>
 8012f82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f86:	f7ed fd69 	bl	8000a5c <__aeabi_dcmpge>
 8012f8a:	9c02      	ldr	r4, [sp, #8]
 8012f8c:	4626      	mov	r6, r4
 8012f8e:	2800      	cmp	r0, #0
 8012f90:	f040 824a 	bne.w	8013428 <_dtoa_r+0x960>
 8012f94:	2331      	movs	r3, #49	; 0x31
 8012f96:	9f08      	ldr	r7, [sp, #32]
 8012f98:	f109 0901 	add.w	r9, r9, #1
 8012f9c:	f807 3b01 	strb.w	r3, [r7], #1
 8012fa0:	e246      	b.n	8013430 <_dtoa_r+0x968>
 8012fa2:	07e2      	lsls	r2, r4, #31
 8012fa4:	d505      	bpl.n	8012fb2 <_dtoa_r+0x4ea>
 8012fa6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012faa:	f7ed fad1 	bl	8000550 <__aeabi_dmul>
 8012fae:	2301      	movs	r3, #1
 8012fb0:	3701      	adds	r7, #1
 8012fb2:	1064      	asrs	r4, r4, #1
 8012fb4:	3608      	adds	r6, #8
 8012fb6:	e76d      	b.n	8012e94 <_dtoa_r+0x3cc>
 8012fb8:	2702      	movs	r7, #2
 8012fba:	e770      	b.n	8012e9e <_dtoa_r+0x3d6>
 8012fbc:	46c8      	mov	r8, r9
 8012fbe:	9c02      	ldr	r4, [sp, #8]
 8012fc0:	e78f      	b.n	8012ee2 <_dtoa_r+0x41a>
 8012fc2:	9908      	ldr	r1, [sp, #32]
 8012fc4:	4b29      	ldr	r3, [pc, #164]	; (801306c <_dtoa_r+0x5a4>)
 8012fc6:	4421      	add	r1, r4
 8012fc8:	9112      	str	r1, [sp, #72]	; 0x48
 8012fca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012fcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012fd0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8012fd4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012fd8:	2900      	cmp	r1, #0
 8012fda:	d055      	beq.n	8013088 <_dtoa_r+0x5c0>
 8012fdc:	2000      	movs	r0, #0
 8012fde:	4929      	ldr	r1, [pc, #164]	; (8013084 <_dtoa_r+0x5bc>)
 8012fe0:	f7ed fbe0 	bl	80007a4 <__aeabi_ddiv>
 8012fe4:	463b      	mov	r3, r7
 8012fe6:	4632      	mov	r2, r6
 8012fe8:	f7ed f8fa 	bl	80001e0 <__aeabi_dsub>
 8012fec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012ff0:	9f08      	ldr	r7, [sp, #32]
 8012ff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ff6:	f7ed fd5b 	bl	8000ab0 <__aeabi_d2iz>
 8012ffa:	4604      	mov	r4, r0
 8012ffc:	f7ed fa3e 	bl	800047c <__aeabi_i2d>
 8013000:	4602      	mov	r2, r0
 8013002:	460b      	mov	r3, r1
 8013004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013008:	f7ed f8ea 	bl	80001e0 <__aeabi_dsub>
 801300c:	4602      	mov	r2, r0
 801300e:	460b      	mov	r3, r1
 8013010:	3430      	adds	r4, #48	; 0x30
 8013012:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013016:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801301a:	f807 4b01 	strb.w	r4, [r7], #1
 801301e:	f7ed fd09 	bl	8000a34 <__aeabi_dcmplt>
 8013022:	2800      	cmp	r0, #0
 8013024:	d174      	bne.n	8013110 <_dtoa_r+0x648>
 8013026:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801302a:	2000      	movs	r0, #0
 801302c:	4911      	ldr	r1, [pc, #68]	; (8013074 <_dtoa_r+0x5ac>)
 801302e:	f7ed f8d7 	bl	80001e0 <__aeabi_dsub>
 8013032:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013036:	f7ed fcfd 	bl	8000a34 <__aeabi_dcmplt>
 801303a:	2800      	cmp	r0, #0
 801303c:	f040 80b6 	bne.w	80131ac <_dtoa_r+0x6e4>
 8013040:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013042:	429f      	cmp	r7, r3
 8013044:	f43f af7a 	beq.w	8012f3c <_dtoa_r+0x474>
 8013048:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801304c:	2200      	movs	r2, #0
 801304e:	4b0a      	ldr	r3, [pc, #40]	; (8013078 <_dtoa_r+0x5b0>)
 8013050:	f7ed fa7e 	bl	8000550 <__aeabi_dmul>
 8013054:	2200      	movs	r2, #0
 8013056:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801305a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801305e:	4b06      	ldr	r3, [pc, #24]	; (8013078 <_dtoa_r+0x5b0>)
 8013060:	f7ed fa76 	bl	8000550 <__aeabi_dmul>
 8013064:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013068:	e7c3      	b.n	8012ff2 <_dtoa_r+0x52a>
 801306a:	bf00      	nop
 801306c:	08015cb8 	.word	0x08015cb8
 8013070:	08015c90 	.word	0x08015c90
 8013074:	3ff00000 	.word	0x3ff00000
 8013078:	40240000 	.word	0x40240000
 801307c:	401c0000 	.word	0x401c0000
 8013080:	40140000 	.word	0x40140000
 8013084:	3fe00000 	.word	0x3fe00000
 8013088:	4630      	mov	r0, r6
 801308a:	4639      	mov	r1, r7
 801308c:	f7ed fa60 	bl	8000550 <__aeabi_dmul>
 8013090:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013092:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013096:	9c08      	ldr	r4, [sp, #32]
 8013098:	9314      	str	r3, [sp, #80]	; 0x50
 801309a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801309e:	f7ed fd07 	bl	8000ab0 <__aeabi_d2iz>
 80130a2:	9015      	str	r0, [sp, #84]	; 0x54
 80130a4:	f7ed f9ea 	bl	800047c <__aeabi_i2d>
 80130a8:	4602      	mov	r2, r0
 80130aa:	460b      	mov	r3, r1
 80130ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80130b0:	f7ed f896 	bl	80001e0 <__aeabi_dsub>
 80130b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80130b6:	4606      	mov	r6, r0
 80130b8:	3330      	adds	r3, #48	; 0x30
 80130ba:	f804 3b01 	strb.w	r3, [r4], #1
 80130be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80130c0:	460f      	mov	r7, r1
 80130c2:	429c      	cmp	r4, r3
 80130c4:	f04f 0200 	mov.w	r2, #0
 80130c8:	d124      	bne.n	8013114 <_dtoa_r+0x64c>
 80130ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80130ce:	4bb3      	ldr	r3, [pc, #716]	; (801339c <_dtoa_r+0x8d4>)
 80130d0:	f7ed f888 	bl	80001e4 <__adddf3>
 80130d4:	4602      	mov	r2, r0
 80130d6:	460b      	mov	r3, r1
 80130d8:	4630      	mov	r0, r6
 80130da:	4639      	mov	r1, r7
 80130dc:	f7ed fcc8 	bl	8000a70 <__aeabi_dcmpgt>
 80130e0:	2800      	cmp	r0, #0
 80130e2:	d162      	bne.n	80131aa <_dtoa_r+0x6e2>
 80130e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80130e8:	2000      	movs	r0, #0
 80130ea:	49ac      	ldr	r1, [pc, #688]	; (801339c <_dtoa_r+0x8d4>)
 80130ec:	f7ed f878 	bl	80001e0 <__aeabi_dsub>
 80130f0:	4602      	mov	r2, r0
 80130f2:	460b      	mov	r3, r1
 80130f4:	4630      	mov	r0, r6
 80130f6:	4639      	mov	r1, r7
 80130f8:	f7ed fc9c 	bl	8000a34 <__aeabi_dcmplt>
 80130fc:	2800      	cmp	r0, #0
 80130fe:	f43f af1d 	beq.w	8012f3c <_dtoa_r+0x474>
 8013102:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8013104:	1e7b      	subs	r3, r7, #1
 8013106:	9314      	str	r3, [sp, #80]	; 0x50
 8013108:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801310c:	2b30      	cmp	r3, #48	; 0x30
 801310e:	d0f8      	beq.n	8013102 <_dtoa_r+0x63a>
 8013110:	46c1      	mov	r9, r8
 8013112:	e03a      	b.n	801318a <_dtoa_r+0x6c2>
 8013114:	4ba2      	ldr	r3, [pc, #648]	; (80133a0 <_dtoa_r+0x8d8>)
 8013116:	f7ed fa1b 	bl	8000550 <__aeabi_dmul>
 801311a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801311e:	e7bc      	b.n	801309a <_dtoa_r+0x5d2>
 8013120:	9f08      	ldr	r7, [sp, #32]
 8013122:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013126:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801312a:	f7ed fb3b 	bl	80007a4 <__aeabi_ddiv>
 801312e:	f7ed fcbf 	bl	8000ab0 <__aeabi_d2iz>
 8013132:	4604      	mov	r4, r0
 8013134:	f7ed f9a2 	bl	800047c <__aeabi_i2d>
 8013138:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801313c:	f7ed fa08 	bl	8000550 <__aeabi_dmul>
 8013140:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8013144:	460b      	mov	r3, r1
 8013146:	4602      	mov	r2, r0
 8013148:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801314c:	f7ed f848 	bl	80001e0 <__aeabi_dsub>
 8013150:	f807 6b01 	strb.w	r6, [r7], #1
 8013154:	9e08      	ldr	r6, [sp, #32]
 8013156:	9b02      	ldr	r3, [sp, #8]
 8013158:	1bbe      	subs	r6, r7, r6
 801315a:	42b3      	cmp	r3, r6
 801315c:	d13a      	bne.n	80131d4 <_dtoa_r+0x70c>
 801315e:	4602      	mov	r2, r0
 8013160:	460b      	mov	r3, r1
 8013162:	f7ed f83f 	bl	80001e4 <__adddf3>
 8013166:	4602      	mov	r2, r0
 8013168:	460b      	mov	r3, r1
 801316a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801316e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013172:	f7ed fc7d 	bl	8000a70 <__aeabi_dcmpgt>
 8013176:	bb58      	cbnz	r0, 80131d0 <_dtoa_r+0x708>
 8013178:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801317c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013180:	f7ed fc4e 	bl	8000a20 <__aeabi_dcmpeq>
 8013184:	b108      	cbz	r0, 801318a <_dtoa_r+0x6c2>
 8013186:	07e1      	lsls	r1, r4, #31
 8013188:	d422      	bmi.n	80131d0 <_dtoa_r+0x708>
 801318a:	4628      	mov	r0, r5
 801318c:	4651      	mov	r1, sl
 801318e:	f000 fae7 	bl	8013760 <_Bfree>
 8013192:	2300      	movs	r3, #0
 8013194:	703b      	strb	r3, [r7, #0]
 8013196:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013198:	f109 0001 	add.w	r0, r9, #1
 801319c:	6018      	str	r0, [r3, #0]
 801319e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	f43f acdf 	beq.w	8012b64 <_dtoa_r+0x9c>
 80131a6:	601f      	str	r7, [r3, #0]
 80131a8:	e4dc      	b.n	8012b64 <_dtoa_r+0x9c>
 80131aa:	4627      	mov	r7, r4
 80131ac:	463b      	mov	r3, r7
 80131ae:	461f      	mov	r7, r3
 80131b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80131b4:	2a39      	cmp	r2, #57	; 0x39
 80131b6:	d107      	bne.n	80131c8 <_dtoa_r+0x700>
 80131b8:	9a08      	ldr	r2, [sp, #32]
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d1f7      	bne.n	80131ae <_dtoa_r+0x6e6>
 80131be:	2230      	movs	r2, #48	; 0x30
 80131c0:	9908      	ldr	r1, [sp, #32]
 80131c2:	f108 0801 	add.w	r8, r8, #1
 80131c6:	700a      	strb	r2, [r1, #0]
 80131c8:	781a      	ldrb	r2, [r3, #0]
 80131ca:	3201      	adds	r2, #1
 80131cc:	701a      	strb	r2, [r3, #0]
 80131ce:	e79f      	b.n	8013110 <_dtoa_r+0x648>
 80131d0:	46c8      	mov	r8, r9
 80131d2:	e7eb      	b.n	80131ac <_dtoa_r+0x6e4>
 80131d4:	2200      	movs	r2, #0
 80131d6:	4b72      	ldr	r3, [pc, #456]	; (80133a0 <_dtoa_r+0x8d8>)
 80131d8:	f7ed f9ba 	bl	8000550 <__aeabi_dmul>
 80131dc:	4602      	mov	r2, r0
 80131de:	460b      	mov	r3, r1
 80131e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80131e4:	2200      	movs	r2, #0
 80131e6:	2300      	movs	r3, #0
 80131e8:	f7ed fc1a 	bl	8000a20 <__aeabi_dcmpeq>
 80131ec:	2800      	cmp	r0, #0
 80131ee:	d098      	beq.n	8013122 <_dtoa_r+0x65a>
 80131f0:	e7cb      	b.n	801318a <_dtoa_r+0x6c2>
 80131f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80131f4:	2a00      	cmp	r2, #0
 80131f6:	f000 80cd 	beq.w	8013394 <_dtoa_r+0x8cc>
 80131fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80131fc:	2a01      	cmp	r2, #1
 80131fe:	f300 80af 	bgt.w	8013360 <_dtoa_r+0x898>
 8013202:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013204:	2a00      	cmp	r2, #0
 8013206:	f000 80a7 	beq.w	8013358 <_dtoa_r+0x890>
 801320a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801320e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013210:	9f06      	ldr	r7, [sp, #24]
 8013212:	9a06      	ldr	r2, [sp, #24]
 8013214:	2101      	movs	r1, #1
 8013216:	441a      	add	r2, r3
 8013218:	9206      	str	r2, [sp, #24]
 801321a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801321c:	4628      	mov	r0, r5
 801321e:	441a      	add	r2, r3
 8013220:	9209      	str	r2, [sp, #36]	; 0x24
 8013222:	f000 fb57 	bl	80138d4 <__i2b>
 8013226:	4606      	mov	r6, r0
 8013228:	2f00      	cmp	r7, #0
 801322a:	dd0c      	ble.n	8013246 <_dtoa_r+0x77e>
 801322c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801322e:	2b00      	cmp	r3, #0
 8013230:	dd09      	ble.n	8013246 <_dtoa_r+0x77e>
 8013232:	42bb      	cmp	r3, r7
 8013234:	bfa8      	it	ge
 8013236:	463b      	movge	r3, r7
 8013238:	9a06      	ldr	r2, [sp, #24]
 801323a:	1aff      	subs	r7, r7, r3
 801323c:	1ad2      	subs	r2, r2, r3
 801323e:	9206      	str	r2, [sp, #24]
 8013240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013242:	1ad3      	subs	r3, r2, r3
 8013244:	9309      	str	r3, [sp, #36]	; 0x24
 8013246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013248:	b1f3      	cbz	r3, 8013288 <_dtoa_r+0x7c0>
 801324a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801324c:	2b00      	cmp	r3, #0
 801324e:	f000 80a9 	beq.w	80133a4 <_dtoa_r+0x8dc>
 8013252:	2c00      	cmp	r4, #0
 8013254:	dd10      	ble.n	8013278 <_dtoa_r+0x7b0>
 8013256:	4631      	mov	r1, r6
 8013258:	4622      	mov	r2, r4
 801325a:	4628      	mov	r0, r5
 801325c:	f000 fbf4 	bl	8013a48 <__pow5mult>
 8013260:	4652      	mov	r2, sl
 8013262:	4601      	mov	r1, r0
 8013264:	4606      	mov	r6, r0
 8013266:	4628      	mov	r0, r5
 8013268:	f000 fb4a 	bl	8013900 <__multiply>
 801326c:	4680      	mov	r8, r0
 801326e:	4651      	mov	r1, sl
 8013270:	4628      	mov	r0, r5
 8013272:	f000 fa75 	bl	8013760 <_Bfree>
 8013276:	46c2      	mov	sl, r8
 8013278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801327a:	1b1a      	subs	r2, r3, r4
 801327c:	d004      	beq.n	8013288 <_dtoa_r+0x7c0>
 801327e:	4651      	mov	r1, sl
 8013280:	4628      	mov	r0, r5
 8013282:	f000 fbe1 	bl	8013a48 <__pow5mult>
 8013286:	4682      	mov	sl, r0
 8013288:	2101      	movs	r1, #1
 801328a:	4628      	mov	r0, r5
 801328c:	f000 fb22 	bl	80138d4 <__i2b>
 8013290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013292:	4604      	mov	r4, r0
 8013294:	2b00      	cmp	r3, #0
 8013296:	f340 8087 	ble.w	80133a8 <_dtoa_r+0x8e0>
 801329a:	461a      	mov	r2, r3
 801329c:	4601      	mov	r1, r0
 801329e:	4628      	mov	r0, r5
 80132a0:	f000 fbd2 	bl	8013a48 <__pow5mult>
 80132a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80132a6:	4604      	mov	r4, r0
 80132a8:	2b01      	cmp	r3, #1
 80132aa:	f340 8080 	ble.w	80133ae <_dtoa_r+0x8e6>
 80132ae:	f04f 0800 	mov.w	r8, #0
 80132b2:	6923      	ldr	r3, [r4, #16]
 80132b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80132b8:	6918      	ldr	r0, [r3, #16]
 80132ba:	f000 fabd 	bl	8013838 <__hi0bits>
 80132be:	f1c0 0020 	rsb	r0, r0, #32
 80132c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132c4:	4418      	add	r0, r3
 80132c6:	f010 001f 	ands.w	r0, r0, #31
 80132ca:	f000 8092 	beq.w	80133f2 <_dtoa_r+0x92a>
 80132ce:	f1c0 0320 	rsb	r3, r0, #32
 80132d2:	2b04      	cmp	r3, #4
 80132d4:	f340 808a 	ble.w	80133ec <_dtoa_r+0x924>
 80132d8:	f1c0 001c 	rsb	r0, r0, #28
 80132dc:	9b06      	ldr	r3, [sp, #24]
 80132de:	4407      	add	r7, r0
 80132e0:	4403      	add	r3, r0
 80132e2:	9306      	str	r3, [sp, #24]
 80132e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132e6:	4403      	add	r3, r0
 80132e8:	9309      	str	r3, [sp, #36]	; 0x24
 80132ea:	9b06      	ldr	r3, [sp, #24]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	dd05      	ble.n	80132fc <_dtoa_r+0x834>
 80132f0:	4651      	mov	r1, sl
 80132f2:	461a      	mov	r2, r3
 80132f4:	4628      	mov	r0, r5
 80132f6:	f000 fc01 	bl	8013afc <__lshift>
 80132fa:	4682      	mov	sl, r0
 80132fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132fe:	2b00      	cmp	r3, #0
 8013300:	dd05      	ble.n	801330e <_dtoa_r+0x846>
 8013302:	4621      	mov	r1, r4
 8013304:	461a      	mov	r2, r3
 8013306:	4628      	mov	r0, r5
 8013308:	f000 fbf8 	bl	8013afc <__lshift>
 801330c:	4604      	mov	r4, r0
 801330e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013310:	2b00      	cmp	r3, #0
 8013312:	d070      	beq.n	80133f6 <_dtoa_r+0x92e>
 8013314:	4621      	mov	r1, r4
 8013316:	4650      	mov	r0, sl
 8013318:	f000 fc5c 	bl	8013bd4 <__mcmp>
 801331c:	2800      	cmp	r0, #0
 801331e:	da6a      	bge.n	80133f6 <_dtoa_r+0x92e>
 8013320:	2300      	movs	r3, #0
 8013322:	4651      	mov	r1, sl
 8013324:	220a      	movs	r2, #10
 8013326:	4628      	mov	r0, r5
 8013328:	f000 fa3c 	bl	80137a4 <__multadd>
 801332c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801332e:	4682      	mov	sl, r0
 8013330:	f109 39ff 	add.w	r9, r9, #4294967295
 8013334:	2b00      	cmp	r3, #0
 8013336:	f000 8193 	beq.w	8013660 <_dtoa_r+0xb98>
 801333a:	4631      	mov	r1, r6
 801333c:	2300      	movs	r3, #0
 801333e:	220a      	movs	r2, #10
 8013340:	4628      	mov	r0, r5
 8013342:	f000 fa2f 	bl	80137a4 <__multadd>
 8013346:	f1bb 0f00 	cmp.w	fp, #0
 801334a:	4606      	mov	r6, r0
 801334c:	f300 8093 	bgt.w	8013476 <_dtoa_r+0x9ae>
 8013350:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013352:	2b02      	cmp	r3, #2
 8013354:	dc57      	bgt.n	8013406 <_dtoa_r+0x93e>
 8013356:	e08e      	b.n	8013476 <_dtoa_r+0x9ae>
 8013358:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801335a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801335e:	e756      	b.n	801320e <_dtoa_r+0x746>
 8013360:	9b02      	ldr	r3, [sp, #8]
 8013362:	1e5c      	subs	r4, r3, #1
 8013364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013366:	42a3      	cmp	r3, r4
 8013368:	bfb7      	itett	lt
 801336a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801336c:	1b1c      	subge	r4, r3, r4
 801336e:	1ae2      	sublt	r2, r4, r3
 8013370:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013372:	bfbe      	ittt	lt
 8013374:	940a      	strlt	r4, [sp, #40]	; 0x28
 8013376:	189b      	addlt	r3, r3, r2
 8013378:	930e      	strlt	r3, [sp, #56]	; 0x38
 801337a:	9b02      	ldr	r3, [sp, #8]
 801337c:	bfb8      	it	lt
 801337e:	2400      	movlt	r4, #0
 8013380:	2b00      	cmp	r3, #0
 8013382:	bfbb      	ittet	lt
 8013384:	9b06      	ldrlt	r3, [sp, #24]
 8013386:	9a02      	ldrlt	r2, [sp, #8]
 8013388:	9f06      	ldrge	r7, [sp, #24]
 801338a:	1a9f      	sublt	r7, r3, r2
 801338c:	bfac      	ite	ge
 801338e:	9b02      	ldrge	r3, [sp, #8]
 8013390:	2300      	movlt	r3, #0
 8013392:	e73e      	b.n	8013212 <_dtoa_r+0x74a>
 8013394:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013396:	9f06      	ldr	r7, [sp, #24]
 8013398:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801339a:	e745      	b.n	8013228 <_dtoa_r+0x760>
 801339c:	3fe00000 	.word	0x3fe00000
 80133a0:	40240000 	.word	0x40240000
 80133a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133a6:	e76a      	b.n	801327e <_dtoa_r+0x7b6>
 80133a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80133aa:	2b01      	cmp	r3, #1
 80133ac:	dc19      	bgt.n	80133e2 <_dtoa_r+0x91a>
 80133ae:	9b04      	ldr	r3, [sp, #16]
 80133b0:	b9bb      	cbnz	r3, 80133e2 <_dtoa_r+0x91a>
 80133b2:	9b05      	ldr	r3, [sp, #20]
 80133b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80133b8:	b99b      	cbnz	r3, 80133e2 <_dtoa_r+0x91a>
 80133ba:	9b05      	ldr	r3, [sp, #20]
 80133bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80133c0:	0d1b      	lsrs	r3, r3, #20
 80133c2:	051b      	lsls	r3, r3, #20
 80133c4:	b183      	cbz	r3, 80133e8 <_dtoa_r+0x920>
 80133c6:	f04f 0801 	mov.w	r8, #1
 80133ca:	9b06      	ldr	r3, [sp, #24]
 80133cc:	3301      	adds	r3, #1
 80133ce:	9306      	str	r3, [sp, #24]
 80133d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133d2:	3301      	adds	r3, #1
 80133d4:	9309      	str	r3, [sp, #36]	; 0x24
 80133d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80133d8:	2b00      	cmp	r3, #0
 80133da:	f47f af6a 	bne.w	80132b2 <_dtoa_r+0x7ea>
 80133de:	2001      	movs	r0, #1
 80133e0:	e76f      	b.n	80132c2 <_dtoa_r+0x7fa>
 80133e2:	f04f 0800 	mov.w	r8, #0
 80133e6:	e7f6      	b.n	80133d6 <_dtoa_r+0x90e>
 80133e8:	4698      	mov	r8, r3
 80133ea:	e7f4      	b.n	80133d6 <_dtoa_r+0x90e>
 80133ec:	f43f af7d 	beq.w	80132ea <_dtoa_r+0x822>
 80133f0:	4618      	mov	r0, r3
 80133f2:	301c      	adds	r0, #28
 80133f4:	e772      	b.n	80132dc <_dtoa_r+0x814>
 80133f6:	9b02      	ldr	r3, [sp, #8]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	dc36      	bgt.n	801346a <_dtoa_r+0x9a2>
 80133fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80133fe:	2b02      	cmp	r3, #2
 8013400:	dd33      	ble.n	801346a <_dtoa_r+0x9a2>
 8013402:	f8dd b008 	ldr.w	fp, [sp, #8]
 8013406:	f1bb 0f00 	cmp.w	fp, #0
 801340a:	d10d      	bne.n	8013428 <_dtoa_r+0x960>
 801340c:	4621      	mov	r1, r4
 801340e:	465b      	mov	r3, fp
 8013410:	2205      	movs	r2, #5
 8013412:	4628      	mov	r0, r5
 8013414:	f000 f9c6 	bl	80137a4 <__multadd>
 8013418:	4601      	mov	r1, r0
 801341a:	4604      	mov	r4, r0
 801341c:	4650      	mov	r0, sl
 801341e:	f000 fbd9 	bl	8013bd4 <__mcmp>
 8013422:	2800      	cmp	r0, #0
 8013424:	f73f adb6 	bgt.w	8012f94 <_dtoa_r+0x4cc>
 8013428:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801342a:	9f08      	ldr	r7, [sp, #32]
 801342c:	ea6f 0903 	mvn.w	r9, r3
 8013430:	f04f 0800 	mov.w	r8, #0
 8013434:	4621      	mov	r1, r4
 8013436:	4628      	mov	r0, r5
 8013438:	f000 f992 	bl	8013760 <_Bfree>
 801343c:	2e00      	cmp	r6, #0
 801343e:	f43f aea4 	beq.w	801318a <_dtoa_r+0x6c2>
 8013442:	f1b8 0f00 	cmp.w	r8, #0
 8013446:	d005      	beq.n	8013454 <_dtoa_r+0x98c>
 8013448:	45b0      	cmp	r8, r6
 801344a:	d003      	beq.n	8013454 <_dtoa_r+0x98c>
 801344c:	4641      	mov	r1, r8
 801344e:	4628      	mov	r0, r5
 8013450:	f000 f986 	bl	8013760 <_Bfree>
 8013454:	4631      	mov	r1, r6
 8013456:	4628      	mov	r0, r5
 8013458:	f000 f982 	bl	8013760 <_Bfree>
 801345c:	e695      	b.n	801318a <_dtoa_r+0x6c2>
 801345e:	2400      	movs	r4, #0
 8013460:	4626      	mov	r6, r4
 8013462:	e7e1      	b.n	8013428 <_dtoa_r+0x960>
 8013464:	46c1      	mov	r9, r8
 8013466:	4626      	mov	r6, r4
 8013468:	e594      	b.n	8012f94 <_dtoa_r+0x4cc>
 801346a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801346c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8013470:	2b00      	cmp	r3, #0
 8013472:	f000 80fc 	beq.w	801366e <_dtoa_r+0xba6>
 8013476:	2f00      	cmp	r7, #0
 8013478:	dd05      	ble.n	8013486 <_dtoa_r+0x9be>
 801347a:	4631      	mov	r1, r6
 801347c:	463a      	mov	r2, r7
 801347e:	4628      	mov	r0, r5
 8013480:	f000 fb3c 	bl	8013afc <__lshift>
 8013484:	4606      	mov	r6, r0
 8013486:	f1b8 0f00 	cmp.w	r8, #0
 801348a:	d05c      	beq.n	8013546 <_dtoa_r+0xa7e>
 801348c:	4628      	mov	r0, r5
 801348e:	6871      	ldr	r1, [r6, #4]
 8013490:	f000 f926 	bl	80136e0 <_Balloc>
 8013494:	4607      	mov	r7, r0
 8013496:	b928      	cbnz	r0, 80134a4 <_dtoa_r+0x9dc>
 8013498:	4602      	mov	r2, r0
 801349a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801349e:	4b7e      	ldr	r3, [pc, #504]	; (8013698 <_dtoa_r+0xbd0>)
 80134a0:	f7ff bb26 	b.w	8012af0 <_dtoa_r+0x28>
 80134a4:	6932      	ldr	r2, [r6, #16]
 80134a6:	f106 010c 	add.w	r1, r6, #12
 80134aa:	3202      	adds	r2, #2
 80134ac:	0092      	lsls	r2, r2, #2
 80134ae:	300c      	adds	r0, #12
 80134b0:	f7fe fd26 	bl	8011f00 <memcpy>
 80134b4:	2201      	movs	r2, #1
 80134b6:	4639      	mov	r1, r7
 80134b8:	4628      	mov	r0, r5
 80134ba:	f000 fb1f 	bl	8013afc <__lshift>
 80134be:	46b0      	mov	r8, r6
 80134c0:	4606      	mov	r6, r0
 80134c2:	9b08      	ldr	r3, [sp, #32]
 80134c4:	3301      	adds	r3, #1
 80134c6:	9302      	str	r3, [sp, #8]
 80134c8:	9b08      	ldr	r3, [sp, #32]
 80134ca:	445b      	add	r3, fp
 80134cc:	930a      	str	r3, [sp, #40]	; 0x28
 80134ce:	9b04      	ldr	r3, [sp, #16]
 80134d0:	f003 0301 	and.w	r3, r3, #1
 80134d4:	9309      	str	r3, [sp, #36]	; 0x24
 80134d6:	9b02      	ldr	r3, [sp, #8]
 80134d8:	4621      	mov	r1, r4
 80134da:	4650      	mov	r0, sl
 80134dc:	f103 3bff 	add.w	fp, r3, #4294967295
 80134e0:	f7ff fa62 	bl	80129a8 <quorem>
 80134e4:	4603      	mov	r3, r0
 80134e6:	4641      	mov	r1, r8
 80134e8:	3330      	adds	r3, #48	; 0x30
 80134ea:	9004      	str	r0, [sp, #16]
 80134ec:	4650      	mov	r0, sl
 80134ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80134f0:	f000 fb70 	bl	8013bd4 <__mcmp>
 80134f4:	4632      	mov	r2, r6
 80134f6:	9006      	str	r0, [sp, #24]
 80134f8:	4621      	mov	r1, r4
 80134fa:	4628      	mov	r0, r5
 80134fc:	f000 fb86 	bl	8013c0c <__mdiff>
 8013500:	68c2      	ldr	r2, [r0, #12]
 8013502:	4607      	mov	r7, r0
 8013504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013506:	bb02      	cbnz	r2, 801354a <_dtoa_r+0xa82>
 8013508:	4601      	mov	r1, r0
 801350a:	4650      	mov	r0, sl
 801350c:	f000 fb62 	bl	8013bd4 <__mcmp>
 8013510:	4602      	mov	r2, r0
 8013512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013514:	4639      	mov	r1, r7
 8013516:	4628      	mov	r0, r5
 8013518:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 801351c:	f000 f920 	bl	8013760 <_Bfree>
 8013520:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013522:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013524:	9f02      	ldr	r7, [sp, #8]
 8013526:	ea43 0102 	orr.w	r1, r3, r2
 801352a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801352c:	430b      	orrs	r3, r1
 801352e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013530:	d10d      	bne.n	801354e <_dtoa_r+0xa86>
 8013532:	2b39      	cmp	r3, #57	; 0x39
 8013534:	d027      	beq.n	8013586 <_dtoa_r+0xabe>
 8013536:	9a06      	ldr	r2, [sp, #24]
 8013538:	2a00      	cmp	r2, #0
 801353a:	dd01      	ble.n	8013540 <_dtoa_r+0xa78>
 801353c:	9b04      	ldr	r3, [sp, #16]
 801353e:	3331      	adds	r3, #49	; 0x31
 8013540:	f88b 3000 	strb.w	r3, [fp]
 8013544:	e776      	b.n	8013434 <_dtoa_r+0x96c>
 8013546:	4630      	mov	r0, r6
 8013548:	e7b9      	b.n	80134be <_dtoa_r+0x9f6>
 801354a:	2201      	movs	r2, #1
 801354c:	e7e2      	b.n	8013514 <_dtoa_r+0xa4c>
 801354e:	9906      	ldr	r1, [sp, #24]
 8013550:	2900      	cmp	r1, #0
 8013552:	db04      	blt.n	801355e <_dtoa_r+0xa96>
 8013554:	9822      	ldr	r0, [sp, #136]	; 0x88
 8013556:	4301      	orrs	r1, r0
 8013558:	9809      	ldr	r0, [sp, #36]	; 0x24
 801355a:	4301      	orrs	r1, r0
 801355c:	d120      	bne.n	80135a0 <_dtoa_r+0xad8>
 801355e:	2a00      	cmp	r2, #0
 8013560:	ddee      	ble.n	8013540 <_dtoa_r+0xa78>
 8013562:	4651      	mov	r1, sl
 8013564:	2201      	movs	r2, #1
 8013566:	4628      	mov	r0, r5
 8013568:	9302      	str	r3, [sp, #8]
 801356a:	f000 fac7 	bl	8013afc <__lshift>
 801356e:	4621      	mov	r1, r4
 8013570:	4682      	mov	sl, r0
 8013572:	f000 fb2f 	bl	8013bd4 <__mcmp>
 8013576:	2800      	cmp	r0, #0
 8013578:	9b02      	ldr	r3, [sp, #8]
 801357a:	dc02      	bgt.n	8013582 <_dtoa_r+0xaba>
 801357c:	d1e0      	bne.n	8013540 <_dtoa_r+0xa78>
 801357e:	07da      	lsls	r2, r3, #31
 8013580:	d5de      	bpl.n	8013540 <_dtoa_r+0xa78>
 8013582:	2b39      	cmp	r3, #57	; 0x39
 8013584:	d1da      	bne.n	801353c <_dtoa_r+0xa74>
 8013586:	2339      	movs	r3, #57	; 0x39
 8013588:	f88b 3000 	strb.w	r3, [fp]
 801358c:	463b      	mov	r3, r7
 801358e:	461f      	mov	r7, r3
 8013590:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8013594:	3b01      	subs	r3, #1
 8013596:	2a39      	cmp	r2, #57	; 0x39
 8013598:	d050      	beq.n	801363c <_dtoa_r+0xb74>
 801359a:	3201      	adds	r2, #1
 801359c:	701a      	strb	r2, [r3, #0]
 801359e:	e749      	b.n	8013434 <_dtoa_r+0x96c>
 80135a0:	2a00      	cmp	r2, #0
 80135a2:	dd03      	ble.n	80135ac <_dtoa_r+0xae4>
 80135a4:	2b39      	cmp	r3, #57	; 0x39
 80135a6:	d0ee      	beq.n	8013586 <_dtoa_r+0xabe>
 80135a8:	3301      	adds	r3, #1
 80135aa:	e7c9      	b.n	8013540 <_dtoa_r+0xa78>
 80135ac:	9a02      	ldr	r2, [sp, #8]
 80135ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80135b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80135b4:	428a      	cmp	r2, r1
 80135b6:	d02a      	beq.n	801360e <_dtoa_r+0xb46>
 80135b8:	4651      	mov	r1, sl
 80135ba:	2300      	movs	r3, #0
 80135bc:	220a      	movs	r2, #10
 80135be:	4628      	mov	r0, r5
 80135c0:	f000 f8f0 	bl	80137a4 <__multadd>
 80135c4:	45b0      	cmp	r8, r6
 80135c6:	4682      	mov	sl, r0
 80135c8:	f04f 0300 	mov.w	r3, #0
 80135cc:	f04f 020a 	mov.w	r2, #10
 80135d0:	4641      	mov	r1, r8
 80135d2:	4628      	mov	r0, r5
 80135d4:	d107      	bne.n	80135e6 <_dtoa_r+0xb1e>
 80135d6:	f000 f8e5 	bl	80137a4 <__multadd>
 80135da:	4680      	mov	r8, r0
 80135dc:	4606      	mov	r6, r0
 80135de:	9b02      	ldr	r3, [sp, #8]
 80135e0:	3301      	adds	r3, #1
 80135e2:	9302      	str	r3, [sp, #8]
 80135e4:	e777      	b.n	80134d6 <_dtoa_r+0xa0e>
 80135e6:	f000 f8dd 	bl	80137a4 <__multadd>
 80135ea:	4631      	mov	r1, r6
 80135ec:	4680      	mov	r8, r0
 80135ee:	2300      	movs	r3, #0
 80135f0:	220a      	movs	r2, #10
 80135f2:	4628      	mov	r0, r5
 80135f4:	f000 f8d6 	bl	80137a4 <__multadd>
 80135f8:	4606      	mov	r6, r0
 80135fa:	e7f0      	b.n	80135de <_dtoa_r+0xb16>
 80135fc:	f1bb 0f00 	cmp.w	fp, #0
 8013600:	bfcc      	ite	gt
 8013602:	465f      	movgt	r7, fp
 8013604:	2701      	movle	r7, #1
 8013606:	f04f 0800 	mov.w	r8, #0
 801360a:	9a08      	ldr	r2, [sp, #32]
 801360c:	4417      	add	r7, r2
 801360e:	4651      	mov	r1, sl
 8013610:	2201      	movs	r2, #1
 8013612:	4628      	mov	r0, r5
 8013614:	9302      	str	r3, [sp, #8]
 8013616:	f000 fa71 	bl	8013afc <__lshift>
 801361a:	4621      	mov	r1, r4
 801361c:	4682      	mov	sl, r0
 801361e:	f000 fad9 	bl	8013bd4 <__mcmp>
 8013622:	2800      	cmp	r0, #0
 8013624:	dcb2      	bgt.n	801358c <_dtoa_r+0xac4>
 8013626:	d102      	bne.n	801362e <_dtoa_r+0xb66>
 8013628:	9b02      	ldr	r3, [sp, #8]
 801362a:	07db      	lsls	r3, r3, #31
 801362c:	d4ae      	bmi.n	801358c <_dtoa_r+0xac4>
 801362e:	463b      	mov	r3, r7
 8013630:	461f      	mov	r7, r3
 8013632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013636:	2a30      	cmp	r2, #48	; 0x30
 8013638:	d0fa      	beq.n	8013630 <_dtoa_r+0xb68>
 801363a:	e6fb      	b.n	8013434 <_dtoa_r+0x96c>
 801363c:	9a08      	ldr	r2, [sp, #32]
 801363e:	429a      	cmp	r2, r3
 8013640:	d1a5      	bne.n	801358e <_dtoa_r+0xac6>
 8013642:	2331      	movs	r3, #49	; 0x31
 8013644:	f109 0901 	add.w	r9, r9, #1
 8013648:	7013      	strb	r3, [r2, #0]
 801364a:	e6f3      	b.n	8013434 <_dtoa_r+0x96c>
 801364c:	4b13      	ldr	r3, [pc, #76]	; (801369c <_dtoa_r+0xbd4>)
 801364e:	f7ff baa7 	b.w	8012ba0 <_dtoa_r+0xd8>
 8013652:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013654:	2b00      	cmp	r3, #0
 8013656:	f47f aa80 	bne.w	8012b5a <_dtoa_r+0x92>
 801365a:	4b11      	ldr	r3, [pc, #68]	; (80136a0 <_dtoa_r+0xbd8>)
 801365c:	f7ff baa0 	b.w	8012ba0 <_dtoa_r+0xd8>
 8013660:	f1bb 0f00 	cmp.w	fp, #0
 8013664:	dc03      	bgt.n	801366e <_dtoa_r+0xba6>
 8013666:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013668:	2b02      	cmp	r3, #2
 801366a:	f73f aecc 	bgt.w	8013406 <_dtoa_r+0x93e>
 801366e:	9f08      	ldr	r7, [sp, #32]
 8013670:	4621      	mov	r1, r4
 8013672:	4650      	mov	r0, sl
 8013674:	f7ff f998 	bl	80129a8 <quorem>
 8013678:	9a08      	ldr	r2, [sp, #32]
 801367a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801367e:	f807 3b01 	strb.w	r3, [r7], #1
 8013682:	1aba      	subs	r2, r7, r2
 8013684:	4593      	cmp	fp, r2
 8013686:	ddb9      	ble.n	80135fc <_dtoa_r+0xb34>
 8013688:	4651      	mov	r1, sl
 801368a:	2300      	movs	r3, #0
 801368c:	220a      	movs	r2, #10
 801368e:	4628      	mov	r0, r5
 8013690:	f000 f888 	bl	80137a4 <__multadd>
 8013694:	4682      	mov	sl, r0
 8013696:	e7eb      	b.n	8013670 <_dtoa_r+0xba8>
 8013698:	08015c1b 	.word	0x08015c1b
 801369c:	08015b74 	.word	0x08015b74
 80136a0:	08015b98 	.word	0x08015b98

080136a4 <_localeconv_r>:
 80136a4:	4800      	ldr	r0, [pc, #0]	; (80136a8 <_localeconv_r+0x4>)
 80136a6:	4770      	bx	lr
 80136a8:	20000334 	.word	0x20000334

080136ac <memchr>:
 80136ac:	4603      	mov	r3, r0
 80136ae:	b510      	push	{r4, lr}
 80136b0:	b2c9      	uxtb	r1, r1
 80136b2:	4402      	add	r2, r0
 80136b4:	4293      	cmp	r3, r2
 80136b6:	4618      	mov	r0, r3
 80136b8:	d101      	bne.n	80136be <memchr+0x12>
 80136ba:	2000      	movs	r0, #0
 80136bc:	e003      	b.n	80136c6 <memchr+0x1a>
 80136be:	7804      	ldrb	r4, [r0, #0]
 80136c0:	3301      	adds	r3, #1
 80136c2:	428c      	cmp	r4, r1
 80136c4:	d1f6      	bne.n	80136b4 <memchr+0x8>
 80136c6:	bd10      	pop	{r4, pc}

080136c8 <__malloc_lock>:
 80136c8:	4801      	ldr	r0, [pc, #4]	; (80136d0 <__malloc_lock+0x8>)
 80136ca:	f000 bd4c 	b.w	8014166 <__retarget_lock_acquire_recursive>
 80136ce:	bf00      	nop
 80136d0:	200021c4 	.word	0x200021c4

080136d4 <__malloc_unlock>:
 80136d4:	4801      	ldr	r0, [pc, #4]	; (80136dc <__malloc_unlock+0x8>)
 80136d6:	f000 bd47 	b.w	8014168 <__retarget_lock_release_recursive>
 80136da:	bf00      	nop
 80136dc:	200021c4 	.word	0x200021c4

080136e0 <_Balloc>:
 80136e0:	b570      	push	{r4, r5, r6, lr}
 80136e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80136e4:	4604      	mov	r4, r0
 80136e6:	460d      	mov	r5, r1
 80136e8:	b976      	cbnz	r6, 8013708 <_Balloc+0x28>
 80136ea:	2010      	movs	r0, #16
 80136ec:	f7fe fbea 	bl	8011ec4 <malloc>
 80136f0:	4602      	mov	r2, r0
 80136f2:	6260      	str	r0, [r4, #36]	; 0x24
 80136f4:	b920      	cbnz	r0, 8013700 <_Balloc+0x20>
 80136f6:	2166      	movs	r1, #102	; 0x66
 80136f8:	4b17      	ldr	r3, [pc, #92]	; (8013758 <_Balloc+0x78>)
 80136fa:	4818      	ldr	r0, [pc, #96]	; (801375c <_Balloc+0x7c>)
 80136fc:	f000 fd02 	bl	8014104 <__assert_func>
 8013700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013704:	6006      	str	r6, [r0, #0]
 8013706:	60c6      	str	r6, [r0, #12]
 8013708:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801370a:	68f3      	ldr	r3, [r6, #12]
 801370c:	b183      	cbz	r3, 8013730 <_Balloc+0x50>
 801370e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013710:	68db      	ldr	r3, [r3, #12]
 8013712:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013716:	b9b8      	cbnz	r0, 8013748 <_Balloc+0x68>
 8013718:	2101      	movs	r1, #1
 801371a:	fa01 f605 	lsl.w	r6, r1, r5
 801371e:	1d72      	adds	r2, r6, #5
 8013720:	4620      	mov	r0, r4
 8013722:	0092      	lsls	r2, r2, #2
 8013724:	f000 fb5e 	bl	8013de4 <_calloc_r>
 8013728:	b160      	cbz	r0, 8013744 <_Balloc+0x64>
 801372a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801372e:	e00e      	b.n	801374e <_Balloc+0x6e>
 8013730:	2221      	movs	r2, #33	; 0x21
 8013732:	2104      	movs	r1, #4
 8013734:	4620      	mov	r0, r4
 8013736:	f000 fb55 	bl	8013de4 <_calloc_r>
 801373a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801373c:	60f0      	str	r0, [r6, #12]
 801373e:	68db      	ldr	r3, [r3, #12]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d1e4      	bne.n	801370e <_Balloc+0x2e>
 8013744:	2000      	movs	r0, #0
 8013746:	bd70      	pop	{r4, r5, r6, pc}
 8013748:	6802      	ldr	r2, [r0, #0]
 801374a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801374e:	2300      	movs	r3, #0
 8013750:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013754:	e7f7      	b.n	8013746 <_Balloc+0x66>
 8013756:	bf00      	nop
 8013758:	08015ba5 	.word	0x08015ba5
 801375c:	08015c2c 	.word	0x08015c2c

08013760 <_Bfree>:
 8013760:	b570      	push	{r4, r5, r6, lr}
 8013762:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013764:	4605      	mov	r5, r0
 8013766:	460c      	mov	r4, r1
 8013768:	b976      	cbnz	r6, 8013788 <_Bfree+0x28>
 801376a:	2010      	movs	r0, #16
 801376c:	f7fe fbaa 	bl	8011ec4 <malloc>
 8013770:	4602      	mov	r2, r0
 8013772:	6268      	str	r0, [r5, #36]	; 0x24
 8013774:	b920      	cbnz	r0, 8013780 <_Bfree+0x20>
 8013776:	218a      	movs	r1, #138	; 0x8a
 8013778:	4b08      	ldr	r3, [pc, #32]	; (801379c <_Bfree+0x3c>)
 801377a:	4809      	ldr	r0, [pc, #36]	; (80137a0 <_Bfree+0x40>)
 801377c:	f000 fcc2 	bl	8014104 <__assert_func>
 8013780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013784:	6006      	str	r6, [r0, #0]
 8013786:	60c6      	str	r6, [r0, #12]
 8013788:	b13c      	cbz	r4, 801379a <_Bfree+0x3a>
 801378a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801378c:	6862      	ldr	r2, [r4, #4]
 801378e:	68db      	ldr	r3, [r3, #12]
 8013790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013794:	6021      	str	r1, [r4, #0]
 8013796:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801379a:	bd70      	pop	{r4, r5, r6, pc}
 801379c:	08015ba5 	.word	0x08015ba5
 80137a0:	08015c2c 	.word	0x08015c2c

080137a4 <__multadd>:
 80137a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137a8:	4698      	mov	r8, r3
 80137aa:	460c      	mov	r4, r1
 80137ac:	2300      	movs	r3, #0
 80137ae:	690e      	ldr	r6, [r1, #16]
 80137b0:	4607      	mov	r7, r0
 80137b2:	f101 0014 	add.w	r0, r1, #20
 80137b6:	6805      	ldr	r5, [r0, #0]
 80137b8:	3301      	adds	r3, #1
 80137ba:	b2a9      	uxth	r1, r5
 80137bc:	fb02 8101 	mla	r1, r2, r1, r8
 80137c0:	0c2d      	lsrs	r5, r5, #16
 80137c2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80137c6:	fb02 c505 	mla	r5, r2, r5, ip
 80137ca:	b289      	uxth	r1, r1
 80137cc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80137d0:	429e      	cmp	r6, r3
 80137d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80137d6:	f840 1b04 	str.w	r1, [r0], #4
 80137da:	dcec      	bgt.n	80137b6 <__multadd+0x12>
 80137dc:	f1b8 0f00 	cmp.w	r8, #0
 80137e0:	d022      	beq.n	8013828 <__multadd+0x84>
 80137e2:	68a3      	ldr	r3, [r4, #8]
 80137e4:	42b3      	cmp	r3, r6
 80137e6:	dc19      	bgt.n	801381c <__multadd+0x78>
 80137e8:	6861      	ldr	r1, [r4, #4]
 80137ea:	4638      	mov	r0, r7
 80137ec:	3101      	adds	r1, #1
 80137ee:	f7ff ff77 	bl	80136e0 <_Balloc>
 80137f2:	4605      	mov	r5, r0
 80137f4:	b928      	cbnz	r0, 8013802 <__multadd+0x5e>
 80137f6:	4602      	mov	r2, r0
 80137f8:	21b5      	movs	r1, #181	; 0xb5
 80137fa:	4b0d      	ldr	r3, [pc, #52]	; (8013830 <__multadd+0x8c>)
 80137fc:	480d      	ldr	r0, [pc, #52]	; (8013834 <__multadd+0x90>)
 80137fe:	f000 fc81 	bl	8014104 <__assert_func>
 8013802:	6922      	ldr	r2, [r4, #16]
 8013804:	f104 010c 	add.w	r1, r4, #12
 8013808:	3202      	adds	r2, #2
 801380a:	0092      	lsls	r2, r2, #2
 801380c:	300c      	adds	r0, #12
 801380e:	f7fe fb77 	bl	8011f00 <memcpy>
 8013812:	4621      	mov	r1, r4
 8013814:	4638      	mov	r0, r7
 8013816:	f7ff ffa3 	bl	8013760 <_Bfree>
 801381a:	462c      	mov	r4, r5
 801381c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013820:	3601      	adds	r6, #1
 8013822:	f8c3 8014 	str.w	r8, [r3, #20]
 8013826:	6126      	str	r6, [r4, #16]
 8013828:	4620      	mov	r0, r4
 801382a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801382e:	bf00      	nop
 8013830:	08015c1b 	.word	0x08015c1b
 8013834:	08015c2c 	.word	0x08015c2c

08013838 <__hi0bits>:
 8013838:	0c02      	lsrs	r2, r0, #16
 801383a:	0412      	lsls	r2, r2, #16
 801383c:	4603      	mov	r3, r0
 801383e:	b9ca      	cbnz	r2, 8013874 <__hi0bits+0x3c>
 8013840:	0403      	lsls	r3, r0, #16
 8013842:	2010      	movs	r0, #16
 8013844:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013848:	bf04      	itt	eq
 801384a:	021b      	lsleq	r3, r3, #8
 801384c:	3008      	addeq	r0, #8
 801384e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013852:	bf04      	itt	eq
 8013854:	011b      	lsleq	r3, r3, #4
 8013856:	3004      	addeq	r0, #4
 8013858:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801385c:	bf04      	itt	eq
 801385e:	009b      	lsleq	r3, r3, #2
 8013860:	3002      	addeq	r0, #2
 8013862:	2b00      	cmp	r3, #0
 8013864:	db05      	blt.n	8013872 <__hi0bits+0x3a>
 8013866:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801386a:	f100 0001 	add.w	r0, r0, #1
 801386e:	bf08      	it	eq
 8013870:	2020      	moveq	r0, #32
 8013872:	4770      	bx	lr
 8013874:	2000      	movs	r0, #0
 8013876:	e7e5      	b.n	8013844 <__hi0bits+0xc>

08013878 <__lo0bits>:
 8013878:	6803      	ldr	r3, [r0, #0]
 801387a:	4602      	mov	r2, r0
 801387c:	f013 0007 	ands.w	r0, r3, #7
 8013880:	d00b      	beq.n	801389a <__lo0bits+0x22>
 8013882:	07d9      	lsls	r1, r3, #31
 8013884:	d422      	bmi.n	80138cc <__lo0bits+0x54>
 8013886:	0798      	lsls	r0, r3, #30
 8013888:	bf49      	itett	mi
 801388a:	085b      	lsrmi	r3, r3, #1
 801388c:	089b      	lsrpl	r3, r3, #2
 801388e:	2001      	movmi	r0, #1
 8013890:	6013      	strmi	r3, [r2, #0]
 8013892:	bf5c      	itt	pl
 8013894:	2002      	movpl	r0, #2
 8013896:	6013      	strpl	r3, [r2, #0]
 8013898:	4770      	bx	lr
 801389a:	b299      	uxth	r1, r3
 801389c:	b909      	cbnz	r1, 80138a2 <__lo0bits+0x2a>
 801389e:	2010      	movs	r0, #16
 80138a0:	0c1b      	lsrs	r3, r3, #16
 80138a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80138a6:	bf04      	itt	eq
 80138a8:	0a1b      	lsreq	r3, r3, #8
 80138aa:	3008      	addeq	r0, #8
 80138ac:	0719      	lsls	r1, r3, #28
 80138ae:	bf04      	itt	eq
 80138b0:	091b      	lsreq	r3, r3, #4
 80138b2:	3004      	addeq	r0, #4
 80138b4:	0799      	lsls	r1, r3, #30
 80138b6:	bf04      	itt	eq
 80138b8:	089b      	lsreq	r3, r3, #2
 80138ba:	3002      	addeq	r0, #2
 80138bc:	07d9      	lsls	r1, r3, #31
 80138be:	d403      	bmi.n	80138c8 <__lo0bits+0x50>
 80138c0:	085b      	lsrs	r3, r3, #1
 80138c2:	f100 0001 	add.w	r0, r0, #1
 80138c6:	d003      	beq.n	80138d0 <__lo0bits+0x58>
 80138c8:	6013      	str	r3, [r2, #0]
 80138ca:	4770      	bx	lr
 80138cc:	2000      	movs	r0, #0
 80138ce:	4770      	bx	lr
 80138d0:	2020      	movs	r0, #32
 80138d2:	4770      	bx	lr

080138d4 <__i2b>:
 80138d4:	b510      	push	{r4, lr}
 80138d6:	460c      	mov	r4, r1
 80138d8:	2101      	movs	r1, #1
 80138da:	f7ff ff01 	bl	80136e0 <_Balloc>
 80138de:	4602      	mov	r2, r0
 80138e0:	b928      	cbnz	r0, 80138ee <__i2b+0x1a>
 80138e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80138e6:	4b04      	ldr	r3, [pc, #16]	; (80138f8 <__i2b+0x24>)
 80138e8:	4804      	ldr	r0, [pc, #16]	; (80138fc <__i2b+0x28>)
 80138ea:	f000 fc0b 	bl	8014104 <__assert_func>
 80138ee:	2301      	movs	r3, #1
 80138f0:	6144      	str	r4, [r0, #20]
 80138f2:	6103      	str	r3, [r0, #16]
 80138f4:	bd10      	pop	{r4, pc}
 80138f6:	bf00      	nop
 80138f8:	08015c1b 	.word	0x08015c1b
 80138fc:	08015c2c 	.word	0x08015c2c

08013900 <__multiply>:
 8013900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013904:	4614      	mov	r4, r2
 8013906:	690a      	ldr	r2, [r1, #16]
 8013908:	6923      	ldr	r3, [r4, #16]
 801390a:	460d      	mov	r5, r1
 801390c:	429a      	cmp	r2, r3
 801390e:	bfbe      	ittt	lt
 8013910:	460b      	movlt	r3, r1
 8013912:	4625      	movlt	r5, r4
 8013914:	461c      	movlt	r4, r3
 8013916:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801391a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801391e:	68ab      	ldr	r3, [r5, #8]
 8013920:	6869      	ldr	r1, [r5, #4]
 8013922:	eb0a 0709 	add.w	r7, sl, r9
 8013926:	42bb      	cmp	r3, r7
 8013928:	b085      	sub	sp, #20
 801392a:	bfb8      	it	lt
 801392c:	3101      	addlt	r1, #1
 801392e:	f7ff fed7 	bl	80136e0 <_Balloc>
 8013932:	b930      	cbnz	r0, 8013942 <__multiply+0x42>
 8013934:	4602      	mov	r2, r0
 8013936:	f240 115d 	movw	r1, #349	; 0x15d
 801393a:	4b41      	ldr	r3, [pc, #260]	; (8013a40 <__multiply+0x140>)
 801393c:	4841      	ldr	r0, [pc, #260]	; (8013a44 <__multiply+0x144>)
 801393e:	f000 fbe1 	bl	8014104 <__assert_func>
 8013942:	f100 0614 	add.w	r6, r0, #20
 8013946:	4633      	mov	r3, r6
 8013948:	2200      	movs	r2, #0
 801394a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801394e:	4543      	cmp	r3, r8
 8013950:	d31e      	bcc.n	8013990 <__multiply+0x90>
 8013952:	f105 0c14 	add.w	ip, r5, #20
 8013956:	f104 0314 	add.w	r3, r4, #20
 801395a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801395e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013962:	9202      	str	r2, [sp, #8]
 8013964:	ebac 0205 	sub.w	r2, ip, r5
 8013968:	3a15      	subs	r2, #21
 801396a:	f022 0203 	bic.w	r2, r2, #3
 801396e:	3204      	adds	r2, #4
 8013970:	f105 0115 	add.w	r1, r5, #21
 8013974:	458c      	cmp	ip, r1
 8013976:	bf38      	it	cc
 8013978:	2204      	movcc	r2, #4
 801397a:	9201      	str	r2, [sp, #4]
 801397c:	9a02      	ldr	r2, [sp, #8]
 801397e:	9303      	str	r3, [sp, #12]
 8013980:	429a      	cmp	r2, r3
 8013982:	d808      	bhi.n	8013996 <__multiply+0x96>
 8013984:	2f00      	cmp	r7, #0
 8013986:	dc55      	bgt.n	8013a34 <__multiply+0x134>
 8013988:	6107      	str	r7, [r0, #16]
 801398a:	b005      	add	sp, #20
 801398c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013990:	f843 2b04 	str.w	r2, [r3], #4
 8013994:	e7db      	b.n	801394e <__multiply+0x4e>
 8013996:	f8b3 a000 	ldrh.w	sl, [r3]
 801399a:	f1ba 0f00 	cmp.w	sl, #0
 801399e:	d020      	beq.n	80139e2 <__multiply+0xe2>
 80139a0:	46b1      	mov	r9, r6
 80139a2:	2200      	movs	r2, #0
 80139a4:	f105 0e14 	add.w	lr, r5, #20
 80139a8:	f85e 4b04 	ldr.w	r4, [lr], #4
 80139ac:	f8d9 b000 	ldr.w	fp, [r9]
 80139b0:	b2a1      	uxth	r1, r4
 80139b2:	fa1f fb8b 	uxth.w	fp, fp
 80139b6:	fb0a b101 	mla	r1, sl, r1, fp
 80139ba:	4411      	add	r1, r2
 80139bc:	f8d9 2000 	ldr.w	r2, [r9]
 80139c0:	0c24      	lsrs	r4, r4, #16
 80139c2:	0c12      	lsrs	r2, r2, #16
 80139c4:	fb0a 2404 	mla	r4, sl, r4, r2
 80139c8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80139cc:	b289      	uxth	r1, r1
 80139ce:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80139d2:	45f4      	cmp	ip, lr
 80139d4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80139d8:	f849 1b04 	str.w	r1, [r9], #4
 80139dc:	d8e4      	bhi.n	80139a8 <__multiply+0xa8>
 80139de:	9901      	ldr	r1, [sp, #4]
 80139e0:	5072      	str	r2, [r6, r1]
 80139e2:	9a03      	ldr	r2, [sp, #12]
 80139e4:	3304      	adds	r3, #4
 80139e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80139ea:	f1b9 0f00 	cmp.w	r9, #0
 80139ee:	d01f      	beq.n	8013a30 <__multiply+0x130>
 80139f0:	46b6      	mov	lr, r6
 80139f2:	f04f 0a00 	mov.w	sl, #0
 80139f6:	6834      	ldr	r4, [r6, #0]
 80139f8:	f105 0114 	add.w	r1, r5, #20
 80139fc:	880a      	ldrh	r2, [r1, #0]
 80139fe:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013a02:	b2a4      	uxth	r4, r4
 8013a04:	fb09 b202 	mla	r2, r9, r2, fp
 8013a08:	4492      	add	sl, r2
 8013a0a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013a0e:	f84e 4b04 	str.w	r4, [lr], #4
 8013a12:	f851 4b04 	ldr.w	r4, [r1], #4
 8013a16:	f8be 2000 	ldrh.w	r2, [lr]
 8013a1a:	0c24      	lsrs	r4, r4, #16
 8013a1c:	fb09 2404 	mla	r4, r9, r4, r2
 8013a20:	458c      	cmp	ip, r1
 8013a22:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013a26:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013a2a:	d8e7      	bhi.n	80139fc <__multiply+0xfc>
 8013a2c:	9a01      	ldr	r2, [sp, #4]
 8013a2e:	50b4      	str	r4, [r6, r2]
 8013a30:	3604      	adds	r6, #4
 8013a32:	e7a3      	b.n	801397c <__multiply+0x7c>
 8013a34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d1a5      	bne.n	8013988 <__multiply+0x88>
 8013a3c:	3f01      	subs	r7, #1
 8013a3e:	e7a1      	b.n	8013984 <__multiply+0x84>
 8013a40:	08015c1b 	.word	0x08015c1b
 8013a44:	08015c2c 	.word	0x08015c2c

08013a48 <__pow5mult>:
 8013a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a4c:	4615      	mov	r5, r2
 8013a4e:	f012 0203 	ands.w	r2, r2, #3
 8013a52:	4606      	mov	r6, r0
 8013a54:	460f      	mov	r7, r1
 8013a56:	d007      	beq.n	8013a68 <__pow5mult+0x20>
 8013a58:	4c25      	ldr	r4, [pc, #148]	; (8013af0 <__pow5mult+0xa8>)
 8013a5a:	3a01      	subs	r2, #1
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013a62:	f7ff fe9f 	bl	80137a4 <__multadd>
 8013a66:	4607      	mov	r7, r0
 8013a68:	10ad      	asrs	r5, r5, #2
 8013a6a:	d03d      	beq.n	8013ae8 <__pow5mult+0xa0>
 8013a6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013a6e:	b97c      	cbnz	r4, 8013a90 <__pow5mult+0x48>
 8013a70:	2010      	movs	r0, #16
 8013a72:	f7fe fa27 	bl	8011ec4 <malloc>
 8013a76:	4602      	mov	r2, r0
 8013a78:	6270      	str	r0, [r6, #36]	; 0x24
 8013a7a:	b928      	cbnz	r0, 8013a88 <__pow5mult+0x40>
 8013a7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013a80:	4b1c      	ldr	r3, [pc, #112]	; (8013af4 <__pow5mult+0xac>)
 8013a82:	481d      	ldr	r0, [pc, #116]	; (8013af8 <__pow5mult+0xb0>)
 8013a84:	f000 fb3e 	bl	8014104 <__assert_func>
 8013a88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013a8c:	6004      	str	r4, [r0, #0]
 8013a8e:	60c4      	str	r4, [r0, #12]
 8013a90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013a94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013a98:	b94c      	cbnz	r4, 8013aae <__pow5mult+0x66>
 8013a9a:	f240 2171 	movw	r1, #625	; 0x271
 8013a9e:	4630      	mov	r0, r6
 8013aa0:	f7ff ff18 	bl	80138d4 <__i2b>
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	4604      	mov	r4, r0
 8013aa8:	f8c8 0008 	str.w	r0, [r8, #8]
 8013aac:	6003      	str	r3, [r0, #0]
 8013aae:	f04f 0900 	mov.w	r9, #0
 8013ab2:	07eb      	lsls	r3, r5, #31
 8013ab4:	d50a      	bpl.n	8013acc <__pow5mult+0x84>
 8013ab6:	4639      	mov	r1, r7
 8013ab8:	4622      	mov	r2, r4
 8013aba:	4630      	mov	r0, r6
 8013abc:	f7ff ff20 	bl	8013900 <__multiply>
 8013ac0:	4680      	mov	r8, r0
 8013ac2:	4639      	mov	r1, r7
 8013ac4:	4630      	mov	r0, r6
 8013ac6:	f7ff fe4b 	bl	8013760 <_Bfree>
 8013aca:	4647      	mov	r7, r8
 8013acc:	106d      	asrs	r5, r5, #1
 8013ace:	d00b      	beq.n	8013ae8 <__pow5mult+0xa0>
 8013ad0:	6820      	ldr	r0, [r4, #0]
 8013ad2:	b938      	cbnz	r0, 8013ae4 <__pow5mult+0x9c>
 8013ad4:	4622      	mov	r2, r4
 8013ad6:	4621      	mov	r1, r4
 8013ad8:	4630      	mov	r0, r6
 8013ada:	f7ff ff11 	bl	8013900 <__multiply>
 8013ade:	6020      	str	r0, [r4, #0]
 8013ae0:	f8c0 9000 	str.w	r9, [r0]
 8013ae4:	4604      	mov	r4, r0
 8013ae6:	e7e4      	b.n	8013ab2 <__pow5mult+0x6a>
 8013ae8:	4638      	mov	r0, r7
 8013aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013aee:	bf00      	nop
 8013af0:	08015d80 	.word	0x08015d80
 8013af4:	08015ba5 	.word	0x08015ba5
 8013af8:	08015c2c 	.word	0x08015c2c

08013afc <__lshift>:
 8013afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b00:	460c      	mov	r4, r1
 8013b02:	4607      	mov	r7, r0
 8013b04:	4691      	mov	r9, r2
 8013b06:	6923      	ldr	r3, [r4, #16]
 8013b08:	6849      	ldr	r1, [r1, #4]
 8013b0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013b0e:	68a3      	ldr	r3, [r4, #8]
 8013b10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013b14:	f108 0601 	add.w	r6, r8, #1
 8013b18:	42b3      	cmp	r3, r6
 8013b1a:	db0b      	blt.n	8013b34 <__lshift+0x38>
 8013b1c:	4638      	mov	r0, r7
 8013b1e:	f7ff fddf 	bl	80136e0 <_Balloc>
 8013b22:	4605      	mov	r5, r0
 8013b24:	b948      	cbnz	r0, 8013b3a <__lshift+0x3e>
 8013b26:	4602      	mov	r2, r0
 8013b28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013b2c:	4b27      	ldr	r3, [pc, #156]	; (8013bcc <__lshift+0xd0>)
 8013b2e:	4828      	ldr	r0, [pc, #160]	; (8013bd0 <__lshift+0xd4>)
 8013b30:	f000 fae8 	bl	8014104 <__assert_func>
 8013b34:	3101      	adds	r1, #1
 8013b36:	005b      	lsls	r3, r3, #1
 8013b38:	e7ee      	b.n	8013b18 <__lshift+0x1c>
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	f100 0114 	add.w	r1, r0, #20
 8013b40:	f100 0210 	add.w	r2, r0, #16
 8013b44:	4618      	mov	r0, r3
 8013b46:	4553      	cmp	r3, sl
 8013b48:	db33      	blt.n	8013bb2 <__lshift+0xb6>
 8013b4a:	6920      	ldr	r0, [r4, #16]
 8013b4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013b50:	f104 0314 	add.w	r3, r4, #20
 8013b54:	f019 091f 	ands.w	r9, r9, #31
 8013b58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013b5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013b60:	d02b      	beq.n	8013bba <__lshift+0xbe>
 8013b62:	468a      	mov	sl, r1
 8013b64:	2200      	movs	r2, #0
 8013b66:	f1c9 0e20 	rsb	lr, r9, #32
 8013b6a:	6818      	ldr	r0, [r3, #0]
 8013b6c:	fa00 f009 	lsl.w	r0, r0, r9
 8013b70:	4302      	orrs	r2, r0
 8013b72:	f84a 2b04 	str.w	r2, [sl], #4
 8013b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b7a:	459c      	cmp	ip, r3
 8013b7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013b80:	d8f3      	bhi.n	8013b6a <__lshift+0x6e>
 8013b82:	ebac 0304 	sub.w	r3, ip, r4
 8013b86:	3b15      	subs	r3, #21
 8013b88:	f023 0303 	bic.w	r3, r3, #3
 8013b8c:	3304      	adds	r3, #4
 8013b8e:	f104 0015 	add.w	r0, r4, #21
 8013b92:	4584      	cmp	ip, r0
 8013b94:	bf38      	it	cc
 8013b96:	2304      	movcc	r3, #4
 8013b98:	50ca      	str	r2, [r1, r3]
 8013b9a:	b10a      	cbz	r2, 8013ba0 <__lshift+0xa4>
 8013b9c:	f108 0602 	add.w	r6, r8, #2
 8013ba0:	3e01      	subs	r6, #1
 8013ba2:	4638      	mov	r0, r7
 8013ba4:	4621      	mov	r1, r4
 8013ba6:	612e      	str	r6, [r5, #16]
 8013ba8:	f7ff fdda 	bl	8013760 <_Bfree>
 8013bac:	4628      	mov	r0, r5
 8013bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8013bb6:	3301      	adds	r3, #1
 8013bb8:	e7c5      	b.n	8013b46 <__lshift+0x4a>
 8013bba:	3904      	subs	r1, #4
 8013bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013bc0:	459c      	cmp	ip, r3
 8013bc2:	f841 2f04 	str.w	r2, [r1, #4]!
 8013bc6:	d8f9      	bhi.n	8013bbc <__lshift+0xc0>
 8013bc8:	e7ea      	b.n	8013ba0 <__lshift+0xa4>
 8013bca:	bf00      	nop
 8013bcc:	08015c1b 	.word	0x08015c1b
 8013bd0:	08015c2c 	.word	0x08015c2c

08013bd4 <__mcmp>:
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	690a      	ldr	r2, [r1, #16]
 8013bd8:	6900      	ldr	r0, [r0, #16]
 8013bda:	b530      	push	{r4, r5, lr}
 8013bdc:	1a80      	subs	r0, r0, r2
 8013bde:	d10d      	bne.n	8013bfc <__mcmp+0x28>
 8013be0:	3314      	adds	r3, #20
 8013be2:	3114      	adds	r1, #20
 8013be4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013be8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013bec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013bf0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013bf4:	4295      	cmp	r5, r2
 8013bf6:	d002      	beq.n	8013bfe <__mcmp+0x2a>
 8013bf8:	d304      	bcc.n	8013c04 <__mcmp+0x30>
 8013bfa:	2001      	movs	r0, #1
 8013bfc:	bd30      	pop	{r4, r5, pc}
 8013bfe:	42a3      	cmp	r3, r4
 8013c00:	d3f4      	bcc.n	8013bec <__mcmp+0x18>
 8013c02:	e7fb      	b.n	8013bfc <__mcmp+0x28>
 8013c04:	f04f 30ff 	mov.w	r0, #4294967295
 8013c08:	e7f8      	b.n	8013bfc <__mcmp+0x28>
	...

08013c0c <__mdiff>:
 8013c0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c10:	460c      	mov	r4, r1
 8013c12:	4606      	mov	r6, r0
 8013c14:	4611      	mov	r1, r2
 8013c16:	4620      	mov	r0, r4
 8013c18:	4692      	mov	sl, r2
 8013c1a:	f7ff ffdb 	bl	8013bd4 <__mcmp>
 8013c1e:	1e05      	subs	r5, r0, #0
 8013c20:	d111      	bne.n	8013c46 <__mdiff+0x3a>
 8013c22:	4629      	mov	r1, r5
 8013c24:	4630      	mov	r0, r6
 8013c26:	f7ff fd5b 	bl	80136e0 <_Balloc>
 8013c2a:	4602      	mov	r2, r0
 8013c2c:	b928      	cbnz	r0, 8013c3a <__mdiff+0x2e>
 8013c2e:	f240 2132 	movw	r1, #562	; 0x232
 8013c32:	4b3c      	ldr	r3, [pc, #240]	; (8013d24 <__mdiff+0x118>)
 8013c34:	483c      	ldr	r0, [pc, #240]	; (8013d28 <__mdiff+0x11c>)
 8013c36:	f000 fa65 	bl	8014104 <__assert_func>
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013c40:	4610      	mov	r0, r2
 8013c42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c46:	bfa4      	itt	ge
 8013c48:	4653      	movge	r3, sl
 8013c4a:	46a2      	movge	sl, r4
 8013c4c:	4630      	mov	r0, r6
 8013c4e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8013c52:	bfa6      	itte	ge
 8013c54:	461c      	movge	r4, r3
 8013c56:	2500      	movge	r5, #0
 8013c58:	2501      	movlt	r5, #1
 8013c5a:	f7ff fd41 	bl	80136e0 <_Balloc>
 8013c5e:	4602      	mov	r2, r0
 8013c60:	b918      	cbnz	r0, 8013c6a <__mdiff+0x5e>
 8013c62:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013c66:	4b2f      	ldr	r3, [pc, #188]	; (8013d24 <__mdiff+0x118>)
 8013c68:	e7e4      	b.n	8013c34 <__mdiff+0x28>
 8013c6a:	f100 0814 	add.w	r8, r0, #20
 8013c6e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8013c72:	60c5      	str	r5, [r0, #12]
 8013c74:	f04f 0c00 	mov.w	ip, #0
 8013c78:	f10a 0514 	add.w	r5, sl, #20
 8013c7c:	f10a 0010 	add.w	r0, sl, #16
 8013c80:	46c2      	mov	sl, r8
 8013c82:	6926      	ldr	r6, [r4, #16]
 8013c84:	f104 0914 	add.w	r9, r4, #20
 8013c88:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8013c8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013c90:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8013c94:	f859 3b04 	ldr.w	r3, [r9], #4
 8013c98:	fa1f f18b 	uxth.w	r1, fp
 8013c9c:	4461      	add	r1, ip
 8013c9e:	fa1f fc83 	uxth.w	ip, r3
 8013ca2:	0c1b      	lsrs	r3, r3, #16
 8013ca4:	eba1 010c 	sub.w	r1, r1, ip
 8013ca8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013cac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013cb0:	b289      	uxth	r1, r1
 8013cb2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8013cb6:	454e      	cmp	r6, r9
 8013cb8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013cbc:	f84a 3b04 	str.w	r3, [sl], #4
 8013cc0:	d8e6      	bhi.n	8013c90 <__mdiff+0x84>
 8013cc2:	1b33      	subs	r3, r6, r4
 8013cc4:	3b15      	subs	r3, #21
 8013cc6:	f023 0303 	bic.w	r3, r3, #3
 8013cca:	3415      	adds	r4, #21
 8013ccc:	3304      	adds	r3, #4
 8013cce:	42a6      	cmp	r6, r4
 8013cd0:	bf38      	it	cc
 8013cd2:	2304      	movcc	r3, #4
 8013cd4:	441d      	add	r5, r3
 8013cd6:	4443      	add	r3, r8
 8013cd8:	461e      	mov	r6, r3
 8013cda:	462c      	mov	r4, r5
 8013cdc:	4574      	cmp	r4, lr
 8013cde:	d30e      	bcc.n	8013cfe <__mdiff+0xf2>
 8013ce0:	f10e 0103 	add.w	r1, lr, #3
 8013ce4:	1b49      	subs	r1, r1, r5
 8013ce6:	f021 0103 	bic.w	r1, r1, #3
 8013cea:	3d03      	subs	r5, #3
 8013cec:	45ae      	cmp	lr, r5
 8013cee:	bf38      	it	cc
 8013cf0:	2100      	movcc	r1, #0
 8013cf2:	4419      	add	r1, r3
 8013cf4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8013cf8:	b18b      	cbz	r3, 8013d1e <__mdiff+0x112>
 8013cfa:	6117      	str	r7, [r2, #16]
 8013cfc:	e7a0      	b.n	8013c40 <__mdiff+0x34>
 8013cfe:	f854 8b04 	ldr.w	r8, [r4], #4
 8013d02:	fa1f f188 	uxth.w	r1, r8
 8013d06:	4461      	add	r1, ip
 8013d08:	1408      	asrs	r0, r1, #16
 8013d0a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8013d0e:	b289      	uxth	r1, r1
 8013d10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013d14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013d18:	f846 1b04 	str.w	r1, [r6], #4
 8013d1c:	e7de      	b.n	8013cdc <__mdiff+0xd0>
 8013d1e:	3f01      	subs	r7, #1
 8013d20:	e7e8      	b.n	8013cf4 <__mdiff+0xe8>
 8013d22:	bf00      	nop
 8013d24:	08015c1b 	.word	0x08015c1b
 8013d28:	08015c2c 	.word	0x08015c2c

08013d2c <__d2b>:
 8013d2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013d30:	2101      	movs	r1, #1
 8013d32:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8013d36:	4690      	mov	r8, r2
 8013d38:	461d      	mov	r5, r3
 8013d3a:	f7ff fcd1 	bl	80136e0 <_Balloc>
 8013d3e:	4604      	mov	r4, r0
 8013d40:	b930      	cbnz	r0, 8013d50 <__d2b+0x24>
 8013d42:	4602      	mov	r2, r0
 8013d44:	f240 310a 	movw	r1, #778	; 0x30a
 8013d48:	4b24      	ldr	r3, [pc, #144]	; (8013ddc <__d2b+0xb0>)
 8013d4a:	4825      	ldr	r0, [pc, #148]	; (8013de0 <__d2b+0xb4>)
 8013d4c:	f000 f9da 	bl	8014104 <__assert_func>
 8013d50:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8013d54:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8013d58:	bb2d      	cbnz	r5, 8013da6 <__d2b+0x7a>
 8013d5a:	9301      	str	r3, [sp, #4]
 8013d5c:	f1b8 0300 	subs.w	r3, r8, #0
 8013d60:	d026      	beq.n	8013db0 <__d2b+0x84>
 8013d62:	4668      	mov	r0, sp
 8013d64:	9300      	str	r3, [sp, #0]
 8013d66:	f7ff fd87 	bl	8013878 <__lo0bits>
 8013d6a:	9900      	ldr	r1, [sp, #0]
 8013d6c:	b1f0      	cbz	r0, 8013dac <__d2b+0x80>
 8013d6e:	9a01      	ldr	r2, [sp, #4]
 8013d70:	f1c0 0320 	rsb	r3, r0, #32
 8013d74:	fa02 f303 	lsl.w	r3, r2, r3
 8013d78:	430b      	orrs	r3, r1
 8013d7a:	40c2      	lsrs	r2, r0
 8013d7c:	6163      	str	r3, [r4, #20]
 8013d7e:	9201      	str	r2, [sp, #4]
 8013d80:	9b01      	ldr	r3, [sp, #4]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	bf14      	ite	ne
 8013d86:	2102      	movne	r1, #2
 8013d88:	2101      	moveq	r1, #1
 8013d8a:	61a3      	str	r3, [r4, #24]
 8013d8c:	6121      	str	r1, [r4, #16]
 8013d8e:	b1c5      	cbz	r5, 8013dc2 <__d2b+0x96>
 8013d90:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013d94:	4405      	add	r5, r0
 8013d96:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013d9a:	603d      	str	r5, [r7, #0]
 8013d9c:	6030      	str	r0, [r6, #0]
 8013d9e:	4620      	mov	r0, r4
 8013da0:	b002      	add	sp, #8
 8013da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013daa:	e7d6      	b.n	8013d5a <__d2b+0x2e>
 8013dac:	6161      	str	r1, [r4, #20]
 8013dae:	e7e7      	b.n	8013d80 <__d2b+0x54>
 8013db0:	a801      	add	r0, sp, #4
 8013db2:	f7ff fd61 	bl	8013878 <__lo0bits>
 8013db6:	2101      	movs	r1, #1
 8013db8:	9b01      	ldr	r3, [sp, #4]
 8013dba:	6121      	str	r1, [r4, #16]
 8013dbc:	6163      	str	r3, [r4, #20]
 8013dbe:	3020      	adds	r0, #32
 8013dc0:	e7e5      	b.n	8013d8e <__d2b+0x62>
 8013dc2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8013dc6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013dca:	6038      	str	r0, [r7, #0]
 8013dcc:	6918      	ldr	r0, [r3, #16]
 8013dce:	f7ff fd33 	bl	8013838 <__hi0bits>
 8013dd2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8013dd6:	6031      	str	r1, [r6, #0]
 8013dd8:	e7e1      	b.n	8013d9e <__d2b+0x72>
 8013dda:	bf00      	nop
 8013ddc:	08015c1b 	.word	0x08015c1b
 8013de0:	08015c2c 	.word	0x08015c2c

08013de4 <_calloc_r>:
 8013de4:	b538      	push	{r3, r4, r5, lr}
 8013de6:	fb02 f501 	mul.w	r5, r2, r1
 8013dea:	4629      	mov	r1, r5
 8013dec:	f7fe f8ea 	bl	8011fc4 <_malloc_r>
 8013df0:	4604      	mov	r4, r0
 8013df2:	b118      	cbz	r0, 8013dfc <_calloc_r+0x18>
 8013df4:	462a      	mov	r2, r5
 8013df6:	2100      	movs	r1, #0
 8013df8:	f7fe f890 	bl	8011f1c <memset>
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	bd38      	pop	{r3, r4, r5, pc}

08013e00 <_realloc_r>:
 8013e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e02:	4607      	mov	r7, r0
 8013e04:	4614      	mov	r4, r2
 8013e06:	460e      	mov	r6, r1
 8013e08:	b921      	cbnz	r1, 8013e14 <_realloc_r+0x14>
 8013e0a:	4611      	mov	r1, r2
 8013e0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013e10:	f7fe b8d8 	b.w	8011fc4 <_malloc_r>
 8013e14:	b922      	cbnz	r2, 8013e20 <_realloc_r+0x20>
 8013e16:	f7fe f889 	bl	8011f2c <_free_r>
 8013e1a:	4625      	mov	r5, r4
 8013e1c:	4628      	mov	r0, r5
 8013e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e20:	f000 f9cf 	bl	80141c2 <_malloc_usable_size_r>
 8013e24:	42a0      	cmp	r0, r4
 8013e26:	d20f      	bcs.n	8013e48 <_realloc_r+0x48>
 8013e28:	4621      	mov	r1, r4
 8013e2a:	4638      	mov	r0, r7
 8013e2c:	f7fe f8ca 	bl	8011fc4 <_malloc_r>
 8013e30:	4605      	mov	r5, r0
 8013e32:	2800      	cmp	r0, #0
 8013e34:	d0f2      	beq.n	8013e1c <_realloc_r+0x1c>
 8013e36:	4631      	mov	r1, r6
 8013e38:	4622      	mov	r2, r4
 8013e3a:	f7fe f861 	bl	8011f00 <memcpy>
 8013e3e:	4631      	mov	r1, r6
 8013e40:	4638      	mov	r0, r7
 8013e42:	f7fe f873 	bl	8011f2c <_free_r>
 8013e46:	e7e9      	b.n	8013e1c <_realloc_r+0x1c>
 8013e48:	4635      	mov	r5, r6
 8013e4a:	e7e7      	b.n	8013e1c <_realloc_r+0x1c>

08013e4c <__ssputs_r>:
 8013e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e50:	688e      	ldr	r6, [r1, #8]
 8013e52:	4682      	mov	sl, r0
 8013e54:	429e      	cmp	r6, r3
 8013e56:	460c      	mov	r4, r1
 8013e58:	4690      	mov	r8, r2
 8013e5a:	461f      	mov	r7, r3
 8013e5c:	d838      	bhi.n	8013ed0 <__ssputs_r+0x84>
 8013e5e:	898a      	ldrh	r2, [r1, #12]
 8013e60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013e64:	d032      	beq.n	8013ecc <__ssputs_r+0x80>
 8013e66:	6825      	ldr	r5, [r4, #0]
 8013e68:	6909      	ldr	r1, [r1, #16]
 8013e6a:	3301      	adds	r3, #1
 8013e6c:	eba5 0901 	sub.w	r9, r5, r1
 8013e70:	6965      	ldr	r5, [r4, #20]
 8013e72:	444b      	add	r3, r9
 8013e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013e7c:	106d      	asrs	r5, r5, #1
 8013e7e:	429d      	cmp	r5, r3
 8013e80:	bf38      	it	cc
 8013e82:	461d      	movcc	r5, r3
 8013e84:	0553      	lsls	r3, r2, #21
 8013e86:	d531      	bpl.n	8013eec <__ssputs_r+0xa0>
 8013e88:	4629      	mov	r1, r5
 8013e8a:	f7fe f89b 	bl	8011fc4 <_malloc_r>
 8013e8e:	4606      	mov	r6, r0
 8013e90:	b950      	cbnz	r0, 8013ea8 <__ssputs_r+0x5c>
 8013e92:	230c      	movs	r3, #12
 8013e94:	f04f 30ff 	mov.w	r0, #4294967295
 8013e98:	f8ca 3000 	str.w	r3, [sl]
 8013e9c:	89a3      	ldrh	r3, [r4, #12]
 8013e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ea2:	81a3      	strh	r3, [r4, #12]
 8013ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ea8:	464a      	mov	r2, r9
 8013eaa:	6921      	ldr	r1, [r4, #16]
 8013eac:	f7fe f828 	bl	8011f00 <memcpy>
 8013eb0:	89a3      	ldrh	r3, [r4, #12]
 8013eb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013eba:	81a3      	strh	r3, [r4, #12]
 8013ebc:	6126      	str	r6, [r4, #16]
 8013ebe:	444e      	add	r6, r9
 8013ec0:	6026      	str	r6, [r4, #0]
 8013ec2:	463e      	mov	r6, r7
 8013ec4:	6165      	str	r5, [r4, #20]
 8013ec6:	eba5 0509 	sub.w	r5, r5, r9
 8013eca:	60a5      	str	r5, [r4, #8]
 8013ecc:	42be      	cmp	r6, r7
 8013ece:	d900      	bls.n	8013ed2 <__ssputs_r+0x86>
 8013ed0:	463e      	mov	r6, r7
 8013ed2:	4632      	mov	r2, r6
 8013ed4:	4641      	mov	r1, r8
 8013ed6:	6820      	ldr	r0, [r4, #0]
 8013ed8:	f000 f959 	bl	801418e <memmove>
 8013edc:	68a3      	ldr	r3, [r4, #8]
 8013ede:	6822      	ldr	r2, [r4, #0]
 8013ee0:	1b9b      	subs	r3, r3, r6
 8013ee2:	4432      	add	r2, r6
 8013ee4:	2000      	movs	r0, #0
 8013ee6:	60a3      	str	r3, [r4, #8]
 8013ee8:	6022      	str	r2, [r4, #0]
 8013eea:	e7db      	b.n	8013ea4 <__ssputs_r+0x58>
 8013eec:	462a      	mov	r2, r5
 8013eee:	f7ff ff87 	bl	8013e00 <_realloc_r>
 8013ef2:	4606      	mov	r6, r0
 8013ef4:	2800      	cmp	r0, #0
 8013ef6:	d1e1      	bne.n	8013ebc <__ssputs_r+0x70>
 8013ef8:	4650      	mov	r0, sl
 8013efa:	6921      	ldr	r1, [r4, #16]
 8013efc:	f7fe f816 	bl	8011f2c <_free_r>
 8013f00:	e7c7      	b.n	8013e92 <__ssputs_r+0x46>
	...

08013f04 <_svfiprintf_r>:
 8013f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f08:	4698      	mov	r8, r3
 8013f0a:	898b      	ldrh	r3, [r1, #12]
 8013f0c:	4607      	mov	r7, r0
 8013f0e:	061b      	lsls	r3, r3, #24
 8013f10:	460d      	mov	r5, r1
 8013f12:	4614      	mov	r4, r2
 8013f14:	b09d      	sub	sp, #116	; 0x74
 8013f16:	d50e      	bpl.n	8013f36 <_svfiprintf_r+0x32>
 8013f18:	690b      	ldr	r3, [r1, #16]
 8013f1a:	b963      	cbnz	r3, 8013f36 <_svfiprintf_r+0x32>
 8013f1c:	2140      	movs	r1, #64	; 0x40
 8013f1e:	f7fe f851 	bl	8011fc4 <_malloc_r>
 8013f22:	6028      	str	r0, [r5, #0]
 8013f24:	6128      	str	r0, [r5, #16]
 8013f26:	b920      	cbnz	r0, 8013f32 <_svfiprintf_r+0x2e>
 8013f28:	230c      	movs	r3, #12
 8013f2a:	603b      	str	r3, [r7, #0]
 8013f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f30:	e0d1      	b.n	80140d6 <_svfiprintf_r+0x1d2>
 8013f32:	2340      	movs	r3, #64	; 0x40
 8013f34:	616b      	str	r3, [r5, #20]
 8013f36:	2300      	movs	r3, #0
 8013f38:	9309      	str	r3, [sp, #36]	; 0x24
 8013f3a:	2320      	movs	r3, #32
 8013f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013f40:	2330      	movs	r3, #48	; 0x30
 8013f42:	f04f 0901 	mov.w	r9, #1
 8013f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80140f0 <_svfiprintf_r+0x1ec>
 8013f4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013f52:	4623      	mov	r3, r4
 8013f54:	469a      	mov	sl, r3
 8013f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f5a:	b10a      	cbz	r2, 8013f60 <_svfiprintf_r+0x5c>
 8013f5c:	2a25      	cmp	r2, #37	; 0x25
 8013f5e:	d1f9      	bne.n	8013f54 <_svfiprintf_r+0x50>
 8013f60:	ebba 0b04 	subs.w	fp, sl, r4
 8013f64:	d00b      	beq.n	8013f7e <_svfiprintf_r+0x7a>
 8013f66:	465b      	mov	r3, fp
 8013f68:	4622      	mov	r2, r4
 8013f6a:	4629      	mov	r1, r5
 8013f6c:	4638      	mov	r0, r7
 8013f6e:	f7ff ff6d 	bl	8013e4c <__ssputs_r>
 8013f72:	3001      	adds	r0, #1
 8013f74:	f000 80aa 	beq.w	80140cc <_svfiprintf_r+0x1c8>
 8013f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f7a:	445a      	add	r2, fp
 8013f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8013f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	f000 80a2 	beq.w	80140cc <_svfiprintf_r+0x1c8>
 8013f88:	2300      	movs	r3, #0
 8013f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8013f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f92:	f10a 0a01 	add.w	sl, sl, #1
 8013f96:	9304      	str	r3, [sp, #16]
 8013f98:	9307      	str	r3, [sp, #28]
 8013f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8013fa0:	4654      	mov	r4, sl
 8013fa2:	2205      	movs	r2, #5
 8013fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fa8:	4851      	ldr	r0, [pc, #324]	; (80140f0 <_svfiprintf_r+0x1ec>)
 8013faa:	f7ff fb7f 	bl	80136ac <memchr>
 8013fae:	9a04      	ldr	r2, [sp, #16]
 8013fb0:	b9d8      	cbnz	r0, 8013fea <_svfiprintf_r+0xe6>
 8013fb2:	06d0      	lsls	r0, r2, #27
 8013fb4:	bf44      	itt	mi
 8013fb6:	2320      	movmi	r3, #32
 8013fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013fbc:	0711      	lsls	r1, r2, #28
 8013fbe:	bf44      	itt	mi
 8013fc0:	232b      	movmi	r3, #43	; 0x2b
 8013fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8013fca:	2b2a      	cmp	r3, #42	; 0x2a
 8013fcc:	d015      	beq.n	8013ffa <_svfiprintf_r+0xf6>
 8013fce:	4654      	mov	r4, sl
 8013fd0:	2000      	movs	r0, #0
 8013fd2:	f04f 0c0a 	mov.w	ip, #10
 8013fd6:	9a07      	ldr	r2, [sp, #28]
 8013fd8:	4621      	mov	r1, r4
 8013fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013fde:	3b30      	subs	r3, #48	; 0x30
 8013fe0:	2b09      	cmp	r3, #9
 8013fe2:	d94e      	bls.n	8014082 <_svfiprintf_r+0x17e>
 8013fe4:	b1b0      	cbz	r0, 8014014 <_svfiprintf_r+0x110>
 8013fe6:	9207      	str	r2, [sp, #28]
 8013fe8:	e014      	b.n	8014014 <_svfiprintf_r+0x110>
 8013fea:	eba0 0308 	sub.w	r3, r0, r8
 8013fee:	fa09 f303 	lsl.w	r3, r9, r3
 8013ff2:	4313      	orrs	r3, r2
 8013ff4:	46a2      	mov	sl, r4
 8013ff6:	9304      	str	r3, [sp, #16]
 8013ff8:	e7d2      	b.n	8013fa0 <_svfiprintf_r+0x9c>
 8013ffa:	9b03      	ldr	r3, [sp, #12]
 8013ffc:	1d19      	adds	r1, r3, #4
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	9103      	str	r1, [sp, #12]
 8014002:	2b00      	cmp	r3, #0
 8014004:	bfbb      	ittet	lt
 8014006:	425b      	neglt	r3, r3
 8014008:	f042 0202 	orrlt.w	r2, r2, #2
 801400c:	9307      	strge	r3, [sp, #28]
 801400e:	9307      	strlt	r3, [sp, #28]
 8014010:	bfb8      	it	lt
 8014012:	9204      	strlt	r2, [sp, #16]
 8014014:	7823      	ldrb	r3, [r4, #0]
 8014016:	2b2e      	cmp	r3, #46	; 0x2e
 8014018:	d10c      	bne.n	8014034 <_svfiprintf_r+0x130>
 801401a:	7863      	ldrb	r3, [r4, #1]
 801401c:	2b2a      	cmp	r3, #42	; 0x2a
 801401e:	d135      	bne.n	801408c <_svfiprintf_r+0x188>
 8014020:	9b03      	ldr	r3, [sp, #12]
 8014022:	3402      	adds	r4, #2
 8014024:	1d1a      	adds	r2, r3, #4
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	9203      	str	r2, [sp, #12]
 801402a:	2b00      	cmp	r3, #0
 801402c:	bfb8      	it	lt
 801402e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014032:	9305      	str	r3, [sp, #20]
 8014034:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014100 <_svfiprintf_r+0x1fc>
 8014038:	2203      	movs	r2, #3
 801403a:	4650      	mov	r0, sl
 801403c:	7821      	ldrb	r1, [r4, #0]
 801403e:	f7ff fb35 	bl	80136ac <memchr>
 8014042:	b140      	cbz	r0, 8014056 <_svfiprintf_r+0x152>
 8014044:	2340      	movs	r3, #64	; 0x40
 8014046:	eba0 000a 	sub.w	r0, r0, sl
 801404a:	fa03 f000 	lsl.w	r0, r3, r0
 801404e:	9b04      	ldr	r3, [sp, #16]
 8014050:	3401      	adds	r4, #1
 8014052:	4303      	orrs	r3, r0
 8014054:	9304      	str	r3, [sp, #16]
 8014056:	f814 1b01 	ldrb.w	r1, [r4], #1
 801405a:	2206      	movs	r2, #6
 801405c:	4825      	ldr	r0, [pc, #148]	; (80140f4 <_svfiprintf_r+0x1f0>)
 801405e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014062:	f7ff fb23 	bl	80136ac <memchr>
 8014066:	2800      	cmp	r0, #0
 8014068:	d038      	beq.n	80140dc <_svfiprintf_r+0x1d8>
 801406a:	4b23      	ldr	r3, [pc, #140]	; (80140f8 <_svfiprintf_r+0x1f4>)
 801406c:	bb1b      	cbnz	r3, 80140b6 <_svfiprintf_r+0x1b2>
 801406e:	9b03      	ldr	r3, [sp, #12]
 8014070:	3307      	adds	r3, #7
 8014072:	f023 0307 	bic.w	r3, r3, #7
 8014076:	3308      	adds	r3, #8
 8014078:	9303      	str	r3, [sp, #12]
 801407a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801407c:	4433      	add	r3, r6
 801407e:	9309      	str	r3, [sp, #36]	; 0x24
 8014080:	e767      	b.n	8013f52 <_svfiprintf_r+0x4e>
 8014082:	460c      	mov	r4, r1
 8014084:	2001      	movs	r0, #1
 8014086:	fb0c 3202 	mla	r2, ip, r2, r3
 801408a:	e7a5      	b.n	8013fd8 <_svfiprintf_r+0xd4>
 801408c:	2300      	movs	r3, #0
 801408e:	f04f 0c0a 	mov.w	ip, #10
 8014092:	4619      	mov	r1, r3
 8014094:	3401      	adds	r4, #1
 8014096:	9305      	str	r3, [sp, #20]
 8014098:	4620      	mov	r0, r4
 801409a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801409e:	3a30      	subs	r2, #48	; 0x30
 80140a0:	2a09      	cmp	r2, #9
 80140a2:	d903      	bls.n	80140ac <_svfiprintf_r+0x1a8>
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d0c5      	beq.n	8014034 <_svfiprintf_r+0x130>
 80140a8:	9105      	str	r1, [sp, #20]
 80140aa:	e7c3      	b.n	8014034 <_svfiprintf_r+0x130>
 80140ac:	4604      	mov	r4, r0
 80140ae:	2301      	movs	r3, #1
 80140b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80140b4:	e7f0      	b.n	8014098 <_svfiprintf_r+0x194>
 80140b6:	ab03      	add	r3, sp, #12
 80140b8:	9300      	str	r3, [sp, #0]
 80140ba:	462a      	mov	r2, r5
 80140bc:	4638      	mov	r0, r7
 80140be:	4b0f      	ldr	r3, [pc, #60]	; (80140fc <_svfiprintf_r+0x1f8>)
 80140c0:	a904      	add	r1, sp, #16
 80140c2:	f7fe f877 	bl	80121b4 <_printf_float>
 80140c6:	1c42      	adds	r2, r0, #1
 80140c8:	4606      	mov	r6, r0
 80140ca:	d1d6      	bne.n	801407a <_svfiprintf_r+0x176>
 80140cc:	89ab      	ldrh	r3, [r5, #12]
 80140ce:	065b      	lsls	r3, r3, #25
 80140d0:	f53f af2c 	bmi.w	8013f2c <_svfiprintf_r+0x28>
 80140d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80140d6:	b01d      	add	sp, #116	; 0x74
 80140d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140dc:	ab03      	add	r3, sp, #12
 80140de:	9300      	str	r3, [sp, #0]
 80140e0:	462a      	mov	r2, r5
 80140e2:	4638      	mov	r0, r7
 80140e4:	4b05      	ldr	r3, [pc, #20]	; (80140fc <_svfiprintf_r+0x1f8>)
 80140e6:	a904      	add	r1, sp, #16
 80140e8:	f7fe fb00 	bl	80126ec <_printf_i>
 80140ec:	e7eb      	b.n	80140c6 <_svfiprintf_r+0x1c2>
 80140ee:	bf00      	nop
 80140f0:	08015d8c 	.word	0x08015d8c
 80140f4:	08015d96 	.word	0x08015d96
 80140f8:	080121b5 	.word	0x080121b5
 80140fc:	08013e4d 	.word	0x08013e4d
 8014100:	08015d92 	.word	0x08015d92

08014104 <__assert_func>:
 8014104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014106:	4614      	mov	r4, r2
 8014108:	461a      	mov	r2, r3
 801410a:	4b09      	ldr	r3, [pc, #36]	; (8014130 <__assert_func+0x2c>)
 801410c:	4605      	mov	r5, r0
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	68d8      	ldr	r0, [r3, #12]
 8014112:	b14c      	cbz	r4, 8014128 <__assert_func+0x24>
 8014114:	4b07      	ldr	r3, [pc, #28]	; (8014134 <__assert_func+0x30>)
 8014116:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801411a:	9100      	str	r1, [sp, #0]
 801411c:	462b      	mov	r3, r5
 801411e:	4906      	ldr	r1, [pc, #24]	; (8014138 <__assert_func+0x34>)
 8014120:	f000 f80e 	bl	8014140 <fiprintf>
 8014124:	f000 fa7a 	bl	801461c <abort>
 8014128:	4b04      	ldr	r3, [pc, #16]	; (801413c <__assert_func+0x38>)
 801412a:	461c      	mov	r4, r3
 801412c:	e7f3      	b.n	8014116 <__assert_func+0x12>
 801412e:	bf00      	nop
 8014130:	200001e0 	.word	0x200001e0
 8014134:	08015d9d 	.word	0x08015d9d
 8014138:	08015daa 	.word	0x08015daa
 801413c:	08015dd8 	.word	0x08015dd8

08014140 <fiprintf>:
 8014140:	b40e      	push	{r1, r2, r3}
 8014142:	b503      	push	{r0, r1, lr}
 8014144:	4601      	mov	r1, r0
 8014146:	ab03      	add	r3, sp, #12
 8014148:	4805      	ldr	r0, [pc, #20]	; (8014160 <fiprintf+0x20>)
 801414a:	f853 2b04 	ldr.w	r2, [r3], #4
 801414e:	6800      	ldr	r0, [r0, #0]
 8014150:	9301      	str	r3, [sp, #4]
 8014152:	f000 f865 	bl	8014220 <_vfiprintf_r>
 8014156:	b002      	add	sp, #8
 8014158:	f85d eb04 	ldr.w	lr, [sp], #4
 801415c:	b003      	add	sp, #12
 801415e:	4770      	bx	lr
 8014160:	200001e0 	.word	0x200001e0

08014164 <__retarget_lock_init_recursive>:
 8014164:	4770      	bx	lr

08014166 <__retarget_lock_acquire_recursive>:
 8014166:	4770      	bx	lr

08014168 <__retarget_lock_release_recursive>:
 8014168:	4770      	bx	lr

0801416a <__ascii_mbtowc>:
 801416a:	b082      	sub	sp, #8
 801416c:	b901      	cbnz	r1, 8014170 <__ascii_mbtowc+0x6>
 801416e:	a901      	add	r1, sp, #4
 8014170:	b142      	cbz	r2, 8014184 <__ascii_mbtowc+0x1a>
 8014172:	b14b      	cbz	r3, 8014188 <__ascii_mbtowc+0x1e>
 8014174:	7813      	ldrb	r3, [r2, #0]
 8014176:	600b      	str	r3, [r1, #0]
 8014178:	7812      	ldrb	r2, [r2, #0]
 801417a:	1e10      	subs	r0, r2, #0
 801417c:	bf18      	it	ne
 801417e:	2001      	movne	r0, #1
 8014180:	b002      	add	sp, #8
 8014182:	4770      	bx	lr
 8014184:	4610      	mov	r0, r2
 8014186:	e7fb      	b.n	8014180 <__ascii_mbtowc+0x16>
 8014188:	f06f 0001 	mvn.w	r0, #1
 801418c:	e7f8      	b.n	8014180 <__ascii_mbtowc+0x16>

0801418e <memmove>:
 801418e:	4288      	cmp	r0, r1
 8014190:	b510      	push	{r4, lr}
 8014192:	eb01 0402 	add.w	r4, r1, r2
 8014196:	d902      	bls.n	801419e <memmove+0x10>
 8014198:	4284      	cmp	r4, r0
 801419a:	4623      	mov	r3, r4
 801419c:	d807      	bhi.n	80141ae <memmove+0x20>
 801419e:	1e43      	subs	r3, r0, #1
 80141a0:	42a1      	cmp	r1, r4
 80141a2:	d008      	beq.n	80141b6 <memmove+0x28>
 80141a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80141a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80141ac:	e7f8      	b.n	80141a0 <memmove+0x12>
 80141ae:	4601      	mov	r1, r0
 80141b0:	4402      	add	r2, r0
 80141b2:	428a      	cmp	r2, r1
 80141b4:	d100      	bne.n	80141b8 <memmove+0x2a>
 80141b6:	bd10      	pop	{r4, pc}
 80141b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80141bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80141c0:	e7f7      	b.n	80141b2 <memmove+0x24>

080141c2 <_malloc_usable_size_r>:
 80141c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141c6:	1f18      	subs	r0, r3, #4
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	bfbc      	itt	lt
 80141cc:	580b      	ldrlt	r3, [r1, r0]
 80141ce:	18c0      	addlt	r0, r0, r3
 80141d0:	4770      	bx	lr

080141d2 <__sfputc_r>:
 80141d2:	6893      	ldr	r3, [r2, #8]
 80141d4:	b410      	push	{r4}
 80141d6:	3b01      	subs	r3, #1
 80141d8:	2b00      	cmp	r3, #0
 80141da:	6093      	str	r3, [r2, #8]
 80141dc:	da07      	bge.n	80141ee <__sfputc_r+0x1c>
 80141de:	6994      	ldr	r4, [r2, #24]
 80141e0:	42a3      	cmp	r3, r4
 80141e2:	db01      	blt.n	80141e8 <__sfputc_r+0x16>
 80141e4:	290a      	cmp	r1, #10
 80141e6:	d102      	bne.n	80141ee <__sfputc_r+0x1c>
 80141e8:	bc10      	pop	{r4}
 80141ea:	f000 b949 	b.w	8014480 <__swbuf_r>
 80141ee:	6813      	ldr	r3, [r2, #0]
 80141f0:	1c58      	adds	r0, r3, #1
 80141f2:	6010      	str	r0, [r2, #0]
 80141f4:	7019      	strb	r1, [r3, #0]
 80141f6:	4608      	mov	r0, r1
 80141f8:	bc10      	pop	{r4}
 80141fa:	4770      	bx	lr

080141fc <__sfputs_r>:
 80141fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141fe:	4606      	mov	r6, r0
 8014200:	460f      	mov	r7, r1
 8014202:	4614      	mov	r4, r2
 8014204:	18d5      	adds	r5, r2, r3
 8014206:	42ac      	cmp	r4, r5
 8014208:	d101      	bne.n	801420e <__sfputs_r+0x12>
 801420a:	2000      	movs	r0, #0
 801420c:	e007      	b.n	801421e <__sfputs_r+0x22>
 801420e:	463a      	mov	r2, r7
 8014210:	4630      	mov	r0, r6
 8014212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014216:	f7ff ffdc 	bl	80141d2 <__sfputc_r>
 801421a:	1c43      	adds	r3, r0, #1
 801421c:	d1f3      	bne.n	8014206 <__sfputs_r+0xa>
 801421e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014220 <_vfiprintf_r>:
 8014220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014224:	460d      	mov	r5, r1
 8014226:	4614      	mov	r4, r2
 8014228:	4698      	mov	r8, r3
 801422a:	4606      	mov	r6, r0
 801422c:	b09d      	sub	sp, #116	; 0x74
 801422e:	b118      	cbz	r0, 8014238 <_vfiprintf_r+0x18>
 8014230:	6983      	ldr	r3, [r0, #24]
 8014232:	b90b      	cbnz	r3, 8014238 <_vfiprintf_r+0x18>
 8014234:	f000 fb14 	bl	8014860 <__sinit>
 8014238:	4b89      	ldr	r3, [pc, #548]	; (8014460 <_vfiprintf_r+0x240>)
 801423a:	429d      	cmp	r5, r3
 801423c:	d11b      	bne.n	8014276 <_vfiprintf_r+0x56>
 801423e:	6875      	ldr	r5, [r6, #4]
 8014240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014242:	07d9      	lsls	r1, r3, #31
 8014244:	d405      	bmi.n	8014252 <_vfiprintf_r+0x32>
 8014246:	89ab      	ldrh	r3, [r5, #12]
 8014248:	059a      	lsls	r2, r3, #22
 801424a:	d402      	bmi.n	8014252 <_vfiprintf_r+0x32>
 801424c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801424e:	f7ff ff8a 	bl	8014166 <__retarget_lock_acquire_recursive>
 8014252:	89ab      	ldrh	r3, [r5, #12]
 8014254:	071b      	lsls	r3, r3, #28
 8014256:	d501      	bpl.n	801425c <_vfiprintf_r+0x3c>
 8014258:	692b      	ldr	r3, [r5, #16]
 801425a:	b9eb      	cbnz	r3, 8014298 <_vfiprintf_r+0x78>
 801425c:	4629      	mov	r1, r5
 801425e:	4630      	mov	r0, r6
 8014260:	f000 f96e 	bl	8014540 <__swsetup_r>
 8014264:	b1c0      	cbz	r0, 8014298 <_vfiprintf_r+0x78>
 8014266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014268:	07dc      	lsls	r4, r3, #31
 801426a:	d50e      	bpl.n	801428a <_vfiprintf_r+0x6a>
 801426c:	f04f 30ff 	mov.w	r0, #4294967295
 8014270:	b01d      	add	sp, #116	; 0x74
 8014272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014276:	4b7b      	ldr	r3, [pc, #492]	; (8014464 <_vfiprintf_r+0x244>)
 8014278:	429d      	cmp	r5, r3
 801427a:	d101      	bne.n	8014280 <_vfiprintf_r+0x60>
 801427c:	68b5      	ldr	r5, [r6, #8]
 801427e:	e7df      	b.n	8014240 <_vfiprintf_r+0x20>
 8014280:	4b79      	ldr	r3, [pc, #484]	; (8014468 <_vfiprintf_r+0x248>)
 8014282:	429d      	cmp	r5, r3
 8014284:	bf08      	it	eq
 8014286:	68f5      	ldreq	r5, [r6, #12]
 8014288:	e7da      	b.n	8014240 <_vfiprintf_r+0x20>
 801428a:	89ab      	ldrh	r3, [r5, #12]
 801428c:	0598      	lsls	r0, r3, #22
 801428e:	d4ed      	bmi.n	801426c <_vfiprintf_r+0x4c>
 8014290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014292:	f7ff ff69 	bl	8014168 <__retarget_lock_release_recursive>
 8014296:	e7e9      	b.n	801426c <_vfiprintf_r+0x4c>
 8014298:	2300      	movs	r3, #0
 801429a:	9309      	str	r3, [sp, #36]	; 0x24
 801429c:	2320      	movs	r3, #32
 801429e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80142a2:	2330      	movs	r3, #48	; 0x30
 80142a4:	f04f 0901 	mov.w	r9, #1
 80142a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80142ac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801446c <_vfiprintf_r+0x24c>
 80142b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80142b4:	4623      	mov	r3, r4
 80142b6:	469a      	mov	sl, r3
 80142b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142bc:	b10a      	cbz	r2, 80142c2 <_vfiprintf_r+0xa2>
 80142be:	2a25      	cmp	r2, #37	; 0x25
 80142c0:	d1f9      	bne.n	80142b6 <_vfiprintf_r+0x96>
 80142c2:	ebba 0b04 	subs.w	fp, sl, r4
 80142c6:	d00b      	beq.n	80142e0 <_vfiprintf_r+0xc0>
 80142c8:	465b      	mov	r3, fp
 80142ca:	4622      	mov	r2, r4
 80142cc:	4629      	mov	r1, r5
 80142ce:	4630      	mov	r0, r6
 80142d0:	f7ff ff94 	bl	80141fc <__sfputs_r>
 80142d4:	3001      	adds	r0, #1
 80142d6:	f000 80aa 	beq.w	801442e <_vfiprintf_r+0x20e>
 80142da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142dc:	445a      	add	r2, fp
 80142de:	9209      	str	r2, [sp, #36]	; 0x24
 80142e0:	f89a 3000 	ldrb.w	r3, [sl]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	f000 80a2 	beq.w	801442e <_vfiprintf_r+0x20e>
 80142ea:	2300      	movs	r3, #0
 80142ec:	f04f 32ff 	mov.w	r2, #4294967295
 80142f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142f4:	f10a 0a01 	add.w	sl, sl, #1
 80142f8:	9304      	str	r3, [sp, #16]
 80142fa:	9307      	str	r3, [sp, #28]
 80142fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014300:	931a      	str	r3, [sp, #104]	; 0x68
 8014302:	4654      	mov	r4, sl
 8014304:	2205      	movs	r2, #5
 8014306:	f814 1b01 	ldrb.w	r1, [r4], #1
 801430a:	4858      	ldr	r0, [pc, #352]	; (801446c <_vfiprintf_r+0x24c>)
 801430c:	f7ff f9ce 	bl	80136ac <memchr>
 8014310:	9a04      	ldr	r2, [sp, #16]
 8014312:	b9d8      	cbnz	r0, 801434c <_vfiprintf_r+0x12c>
 8014314:	06d1      	lsls	r1, r2, #27
 8014316:	bf44      	itt	mi
 8014318:	2320      	movmi	r3, #32
 801431a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801431e:	0713      	lsls	r3, r2, #28
 8014320:	bf44      	itt	mi
 8014322:	232b      	movmi	r3, #43	; 0x2b
 8014324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014328:	f89a 3000 	ldrb.w	r3, [sl]
 801432c:	2b2a      	cmp	r3, #42	; 0x2a
 801432e:	d015      	beq.n	801435c <_vfiprintf_r+0x13c>
 8014330:	4654      	mov	r4, sl
 8014332:	2000      	movs	r0, #0
 8014334:	f04f 0c0a 	mov.w	ip, #10
 8014338:	9a07      	ldr	r2, [sp, #28]
 801433a:	4621      	mov	r1, r4
 801433c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014340:	3b30      	subs	r3, #48	; 0x30
 8014342:	2b09      	cmp	r3, #9
 8014344:	d94e      	bls.n	80143e4 <_vfiprintf_r+0x1c4>
 8014346:	b1b0      	cbz	r0, 8014376 <_vfiprintf_r+0x156>
 8014348:	9207      	str	r2, [sp, #28]
 801434a:	e014      	b.n	8014376 <_vfiprintf_r+0x156>
 801434c:	eba0 0308 	sub.w	r3, r0, r8
 8014350:	fa09 f303 	lsl.w	r3, r9, r3
 8014354:	4313      	orrs	r3, r2
 8014356:	46a2      	mov	sl, r4
 8014358:	9304      	str	r3, [sp, #16]
 801435a:	e7d2      	b.n	8014302 <_vfiprintf_r+0xe2>
 801435c:	9b03      	ldr	r3, [sp, #12]
 801435e:	1d19      	adds	r1, r3, #4
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	9103      	str	r1, [sp, #12]
 8014364:	2b00      	cmp	r3, #0
 8014366:	bfbb      	ittet	lt
 8014368:	425b      	neglt	r3, r3
 801436a:	f042 0202 	orrlt.w	r2, r2, #2
 801436e:	9307      	strge	r3, [sp, #28]
 8014370:	9307      	strlt	r3, [sp, #28]
 8014372:	bfb8      	it	lt
 8014374:	9204      	strlt	r2, [sp, #16]
 8014376:	7823      	ldrb	r3, [r4, #0]
 8014378:	2b2e      	cmp	r3, #46	; 0x2e
 801437a:	d10c      	bne.n	8014396 <_vfiprintf_r+0x176>
 801437c:	7863      	ldrb	r3, [r4, #1]
 801437e:	2b2a      	cmp	r3, #42	; 0x2a
 8014380:	d135      	bne.n	80143ee <_vfiprintf_r+0x1ce>
 8014382:	9b03      	ldr	r3, [sp, #12]
 8014384:	3402      	adds	r4, #2
 8014386:	1d1a      	adds	r2, r3, #4
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	9203      	str	r2, [sp, #12]
 801438c:	2b00      	cmp	r3, #0
 801438e:	bfb8      	it	lt
 8014390:	f04f 33ff 	movlt.w	r3, #4294967295
 8014394:	9305      	str	r3, [sp, #20]
 8014396:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801447c <_vfiprintf_r+0x25c>
 801439a:	2203      	movs	r2, #3
 801439c:	4650      	mov	r0, sl
 801439e:	7821      	ldrb	r1, [r4, #0]
 80143a0:	f7ff f984 	bl	80136ac <memchr>
 80143a4:	b140      	cbz	r0, 80143b8 <_vfiprintf_r+0x198>
 80143a6:	2340      	movs	r3, #64	; 0x40
 80143a8:	eba0 000a 	sub.w	r0, r0, sl
 80143ac:	fa03 f000 	lsl.w	r0, r3, r0
 80143b0:	9b04      	ldr	r3, [sp, #16]
 80143b2:	3401      	adds	r4, #1
 80143b4:	4303      	orrs	r3, r0
 80143b6:	9304      	str	r3, [sp, #16]
 80143b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143bc:	2206      	movs	r2, #6
 80143be:	482c      	ldr	r0, [pc, #176]	; (8014470 <_vfiprintf_r+0x250>)
 80143c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80143c4:	f7ff f972 	bl	80136ac <memchr>
 80143c8:	2800      	cmp	r0, #0
 80143ca:	d03f      	beq.n	801444c <_vfiprintf_r+0x22c>
 80143cc:	4b29      	ldr	r3, [pc, #164]	; (8014474 <_vfiprintf_r+0x254>)
 80143ce:	bb1b      	cbnz	r3, 8014418 <_vfiprintf_r+0x1f8>
 80143d0:	9b03      	ldr	r3, [sp, #12]
 80143d2:	3307      	adds	r3, #7
 80143d4:	f023 0307 	bic.w	r3, r3, #7
 80143d8:	3308      	adds	r3, #8
 80143da:	9303      	str	r3, [sp, #12]
 80143dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143de:	443b      	add	r3, r7
 80143e0:	9309      	str	r3, [sp, #36]	; 0x24
 80143e2:	e767      	b.n	80142b4 <_vfiprintf_r+0x94>
 80143e4:	460c      	mov	r4, r1
 80143e6:	2001      	movs	r0, #1
 80143e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80143ec:	e7a5      	b.n	801433a <_vfiprintf_r+0x11a>
 80143ee:	2300      	movs	r3, #0
 80143f0:	f04f 0c0a 	mov.w	ip, #10
 80143f4:	4619      	mov	r1, r3
 80143f6:	3401      	adds	r4, #1
 80143f8:	9305      	str	r3, [sp, #20]
 80143fa:	4620      	mov	r0, r4
 80143fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014400:	3a30      	subs	r2, #48	; 0x30
 8014402:	2a09      	cmp	r2, #9
 8014404:	d903      	bls.n	801440e <_vfiprintf_r+0x1ee>
 8014406:	2b00      	cmp	r3, #0
 8014408:	d0c5      	beq.n	8014396 <_vfiprintf_r+0x176>
 801440a:	9105      	str	r1, [sp, #20]
 801440c:	e7c3      	b.n	8014396 <_vfiprintf_r+0x176>
 801440e:	4604      	mov	r4, r0
 8014410:	2301      	movs	r3, #1
 8014412:	fb0c 2101 	mla	r1, ip, r1, r2
 8014416:	e7f0      	b.n	80143fa <_vfiprintf_r+0x1da>
 8014418:	ab03      	add	r3, sp, #12
 801441a:	9300      	str	r3, [sp, #0]
 801441c:	462a      	mov	r2, r5
 801441e:	4630      	mov	r0, r6
 8014420:	4b15      	ldr	r3, [pc, #84]	; (8014478 <_vfiprintf_r+0x258>)
 8014422:	a904      	add	r1, sp, #16
 8014424:	f7fd fec6 	bl	80121b4 <_printf_float>
 8014428:	4607      	mov	r7, r0
 801442a:	1c78      	adds	r0, r7, #1
 801442c:	d1d6      	bne.n	80143dc <_vfiprintf_r+0x1bc>
 801442e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014430:	07d9      	lsls	r1, r3, #31
 8014432:	d405      	bmi.n	8014440 <_vfiprintf_r+0x220>
 8014434:	89ab      	ldrh	r3, [r5, #12]
 8014436:	059a      	lsls	r2, r3, #22
 8014438:	d402      	bmi.n	8014440 <_vfiprintf_r+0x220>
 801443a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801443c:	f7ff fe94 	bl	8014168 <__retarget_lock_release_recursive>
 8014440:	89ab      	ldrh	r3, [r5, #12]
 8014442:	065b      	lsls	r3, r3, #25
 8014444:	f53f af12 	bmi.w	801426c <_vfiprintf_r+0x4c>
 8014448:	9809      	ldr	r0, [sp, #36]	; 0x24
 801444a:	e711      	b.n	8014270 <_vfiprintf_r+0x50>
 801444c:	ab03      	add	r3, sp, #12
 801444e:	9300      	str	r3, [sp, #0]
 8014450:	462a      	mov	r2, r5
 8014452:	4630      	mov	r0, r6
 8014454:	4b08      	ldr	r3, [pc, #32]	; (8014478 <_vfiprintf_r+0x258>)
 8014456:	a904      	add	r1, sp, #16
 8014458:	f7fe f948 	bl	80126ec <_printf_i>
 801445c:	e7e4      	b.n	8014428 <_vfiprintf_r+0x208>
 801445e:	bf00      	nop
 8014460:	08015f04 	.word	0x08015f04
 8014464:	08015f24 	.word	0x08015f24
 8014468:	08015ee4 	.word	0x08015ee4
 801446c:	08015d8c 	.word	0x08015d8c
 8014470:	08015d96 	.word	0x08015d96
 8014474:	080121b5 	.word	0x080121b5
 8014478:	080141fd 	.word	0x080141fd
 801447c:	08015d92 	.word	0x08015d92

08014480 <__swbuf_r>:
 8014480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014482:	460e      	mov	r6, r1
 8014484:	4614      	mov	r4, r2
 8014486:	4605      	mov	r5, r0
 8014488:	b118      	cbz	r0, 8014492 <__swbuf_r+0x12>
 801448a:	6983      	ldr	r3, [r0, #24]
 801448c:	b90b      	cbnz	r3, 8014492 <__swbuf_r+0x12>
 801448e:	f000 f9e7 	bl	8014860 <__sinit>
 8014492:	4b21      	ldr	r3, [pc, #132]	; (8014518 <__swbuf_r+0x98>)
 8014494:	429c      	cmp	r4, r3
 8014496:	d12b      	bne.n	80144f0 <__swbuf_r+0x70>
 8014498:	686c      	ldr	r4, [r5, #4]
 801449a:	69a3      	ldr	r3, [r4, #24]
 801449c:	60a3      	str	r3, [r4, #8]
 801449e:	89a3      	ldrh	r3, [r4, #12]
 80144a0:	071a      	lsls	r2, r3, #28
 80144a2:	d52f      	bpl.n	8014504 <__swbuf_r+0x84>
 80144a4:	6923      	ldr	r3, [r4, #16]
 80144a6:	b36b      	cbz	r3, 8014504 <__swbuf_r+0x84>
 80144a8:	6923      	ldr	r3, [r4, #16]
 80144aa:	6820      	ldr	r0, [r4, #0]
 80144ac:	b2f6      	uxtb	r6, r6
 80144ae:	1ac0      	subs	r0, r0, r3
 80144b0:	6963      	ldr	r3, [r4, #20]
 80144b2:	4637      	mov	r7, r6
 80144b4:	4283      	cmp	r3, r0
 80144b6:	dc04      	bgt.n	80144c2 <__swbuf_r+0x42>
 80144b8:	4621      	mov	r1, r4
 80144ba:	4628      	mov	r0, r5
 80144bc:	f000 f93c 	bl	8014738 <_fflush_r>
 80144c0:	bb30      	cbnz	r0, 8014510 <__swbuf_r+0x90>
 80144c2:	68a3      	ldr	r3, [r4, #8]
 80144c4:	3001      	adds	r0, #1
 80144c6:	3b01      	subs	r3, #1
 80144c8:	60a3      	str	r3, [r4, #8]
 80144ca:	6823      	ldr	r3, [r4, #0]
 80144cc:	1c5a      	adds	r2, r3, #1
 80144ce:	6022      	str	r2, [r4, #0]
 80144d0:	701e      	strb	r6, [r3, #0]
 80144d2:	6963      	ldr	r3, [r4, #20]
 80144d4:	4283      	cmp	r3, r0
 80144d6:	d004      	beq.n	80144e2 <__swbuf_r+0x62>
 80144d8:	89a3      	ldrh	r3, [r4, #12]
 80144da:	07db      	lsls	r3, r3, #31
 80144dc:	d506      	bpl.n	80144ec <__swbuf_r+0x6c>
 80144de:	2e0a      	cmp	r6, #10
 80144e0:	d104      	bne.n	80144ec <__swbuf_r+0x6c>
 80144e2:	4621      	mov	r1, r4
 80144e4:	4628      	mov	r0, r5
 80144e6:	f000 f927 	bl	8014738 <_fflush_r>
 80144ea:	b988      	cbnz	r0, 8014510 <__swbuf_r+0x90>
 80144ec:	4638      	mov	r0, r7
 80144ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144f0:	4b0a      	ldr	r3, [pc, #40]	; (801451c <__swbuf_r+0x9c>)
 80144f2:	429c      	cmp	r4, r3
 80144f4:	d101      	bne.n	80144fa <__swbuf_r+0x7a>
 80144f6:	68ac      	ldr	r4, [r5, #8]
 80144f8:	e7cf      	b.n	801449a <__swbuf_r+0x1a>
 80144fa:	4b09      	ldr	r3, [pc, #36]	; (8014520 <__swbuf_r+0xa0>)
 80144fc:	429c      	cmp	r4, r3
 80144fe:	bf08      	it	eq
 8014500:	68ec      	ldreq	r4, [r5, #12]
 8014502:	e7ca      	b.n	801449a <__swbuf_r+0x1a>
 8014504:	4621      	mov	r1, r4
 8014506:	4628      	mov	r0, r5
 8014508:	f000 f81a 	bl	8014540 <__swsetup_r>
 801450c:	2800      	cmp	r0, #0
 801450e:	d0cb      	beq.n	80144a8 <__swbuf_r+0x28>
 8014510:	f04f 37ff 	mov.w	r7, #4294967295
 8014514:	e7ea      	b.n	80144ec <__swbuf_r+0x6c>
 8014516:	bf00      	nop
 8014518:	08015f04 	.word	0x08015f04
 801451c:	08015f24 	.word	0x08015f24
 8014520:	08015ee4 	.word	0x08015ee4

08014524 <__ascii_wctomb>:
 8014524:	4603      	mov	r3, r0
 8014526:	4608      	mov	r0, r1
 8014528:	b141      	cbz	r1, 801453c <__ascii_wctomb+0x18>
 801452a:	2aff      	cmp	r2, #255	; 0xff
 801452c:	d904      	bls.n	8014538 <__ascii_wctomb+0x14>
 801452e:	228a      	movs	r2, #138	; 0x8a
 8014530:	f04f 30ff 	mov.w	r0, #4294967295
 8014534:	601a      	str	r2, [r3, #0]
 8014536:	4770      	bx	lr
 8014538:	2001      	movs	r0, #1
 801453a:	700a      	strb	r2, [r1, #0]
 801453c:	4770      	bx	lr
	...

08014540 <__swsetup_r>:
 8014540:	4b32      	ldr	r3, [pc, #200]	; (801460c <__swsetup_r+0xcc>)
 8014542:	b570      	push	{r4, r5, r6, lr}
 8014544:	681d      	ldr	r5, [r3, #0]
 8014546:	4606      	mov	r6, r0
 8014548:	460c      	mov	r4, r1
 801454a:	b125      	cbz	r5, 8014556 <__swsetup_r+0x16>
 801454c:	69ab      	ldr	r3, [r5, #24]
 801454e:	b913      	cbnz	r3, 8014556 <__swsetup_r+0x16>
 8014550:	4628      	mov	r0, r5
 8014552:	f000 f985 	bl	8014860 <__sinit>
 8014556:	4b2e      	ldr	r3, [pc, #184]	; (8014610 <__swsetup_r+0xd0>)
 8014558:	429c      	cmp	r4, r3
 801455a:	d10f      	bne.n	801457c <__swsetup_r+0x3c>
 801455c:	686c      	ldr	r4, [r5, #4]
 801455e:	89a3      	ldrh	r3, [r4, #12]
 8014560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014564:	0719      	lsls	r1, r3, #28
 8014566:	d42c      	bmi.n	80145c2 <__swsetup_r+0x82>
 8014568:	06dd      	lsls	r5, r3, #27
 801456a:	d411      	bmi.n	8014590 <__swsetup_r+0x50>
 801456c:	2309      	movs	r3, #9
 801456e:	6033      	str	r3, [r6, #0]
 8014570:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014574:	f04f 30ff 	mov.w	r0, #4294967295
 8014578:	81a3      	strh	r3, [r4, #12]
 801457a:	e03e      	b.n	80145fa <__swsetup_r+0xba>
 801457c:	4b25      	ldr	r3, [pc, #148]	; (8014614 <__swsetup_r+0xd4>)
 801457e:	429c      	cmp	r4, r3
 8014580:	d101      	bne.n	8014586 <__swsetup_r+0x46>
 8014582:	68ac      	ldr	r4, [r5, #8]
 8014584:	e7eb      	b.n	801455e <__swsetup_r+0x1e>
 8014586:	4b24      	ldr	r3, [pc, #144]	; (8014618 <__swsetup_r+0xd8>)
 8014588:	429c      	cmp	r4, r3
 801458a:	bf08      	it	eq
 801458c:	68ec      	ldreq	r4, [r5, #12]
 801458e:	e7e6      	b.n	801455e <__swsetup_r+0x1e>
 8014590:	0758      	lsls	r0, r3, #29
 8014592:	d512      	bpl.n	80145ba <__swsetup_r+0x7a>
 8014594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014596:	b141      	cbz	r1, 80145aa <__swsetup_r+0x6a>
 8014598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801459c:	4299      	cmp	r1, r3
 801459e:	d002      	beq.n	80145a6 <__swsetup_r+0x66>
 80145a0:	4630      	mov	r0, r6
 80145a2:	f7fd fcc3 	bl	8011f2c <_free_r>
 80145a6:	2300      	movs	r3, #0
 80145a8:	6363      	str	r3, [r4, #52]	; 0x34
 80145aa:	89a3      	ldrh	r3, [r4, #12]
 80145ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80145b0:	81a3      	strh	r3, [r4, #12]
 80145b2:	2300      	movs	r3, #0
 80145b4:	6063      	str	r3, [r4, #4]
 80145b6:	6923      	ldr	r3, [r4, #16]
 80145b8:	6023      	str	r3, [r4, #0]
 80145ba:	89a3      	ldrh	r3, [r4, #12]
 80145bc:	f043 0308 	orr.w	r3, r3, #8
 80145c0:	81a3      	strh	r3, [r4, #12]
 80145c2:	6923      	ldr	r3, [r4, #16]
 80145c4:	b94b      	cbnz	r3, 80145da <__swsetup_r+0x9a>
 80145c6:	89a3      	ldrh	r3, [r4, #12]
 80145c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80145cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80145d0:	d003      	beq.n	80145da <__swsetup_r+0x9a>
 80145d2:	4621      	mov	r1, r4
 80145d4:	4630      	mov	r0, r6
 80145d6:	f000 fa05 	bl	80149e4 <__smakebuf_r>
 80145da:	89a0      	ldrh	r0, [r4, #12]
 80145dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80145e0:	f010 0301 	ands.w	r3, r0, #1
 80145e4:	d00a      	beq.n	80145fc <__swsetup_r+0xbc>
 80145e6:	2300      	movs	r3, #0
 80145e8:	60a3      	str	r3, [r4, #8]
 80145ea:	6963      	ldr	r3, [r4, #20]
 80145ec:	425b      	negs	r3, r3
 80145ee:	61a3      	str	r3, [r4, #24]
 80145f0:	6923      	ldr	r3, [r4, #16]
 80145f2:	b943      	cbnz	r3, 8014606 <__swsetup_r+0xc6>
 80145f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80145f8:	d1ba      	bne.n	8014570 <__swsetup_r+0x30>
 80145fa:	bd70      	pop	{r4, r5, r6, pc}
 80145fc:	0781      	lsls	r1, r0, #30
 80145fe:	bf58      	it	pl
 8014600:	6963      	ldrpl	r3, [r4, #20]
 8014602:	60a3      	str	r3, [r4, #8]
 8014604:	e7f4      	b.n	80145f0 <__swsetup_r+0xb0>
 8014606:	2000      	movs	r0, #0
 8014608:	e7f7      	b.n	80145fa <__swsetup_r+0xba>
 801460a:	bf00      	nop
 801460c:	200001e0 	.word	0x200001e0
 8014610:	08015f04 	.word	0x08015f04
 8014614:	08015f24 	.word	0x08015f24
 8014618:	08015ee4 	.word	0x08015ee4

0801461c <abort>:
 801461c:	2006      	movs	r0, #6
 801461e:	b508      	push	{r3, lr}
 8014620:	f000 fa48 	bl	8014ab4 <raise>
 8014624:	2001      	movs	r0, #1
 8014626:	f7f2 faa8 	bl	8006b7a <_exit>
	...

0801462c <__sflush_r>:
 801462c:	898a      	ldrh	r2, [r1, #12]
 801462e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014632:	4605      	mov	r5, r0
 8014634:	0710      	lsls	r0, r2, #28
 8014636:	460c      	mov	r4, r1
 8014638:	d458      	bmi.n	80146ec <__sflush_r+0xc0>
 801463a:	684b      	ldr	r3, [r1, #4]
 801463c:	2b00      	cmp	r3, #0
 801463e:	dc05      	bgt.n	801464c <__sflush_r+0x20>
 8014640:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014642:	2b00      	cmp	r3, #0
 8014644:	dc02      	bgt.n	801464c <__sflush_r+0x20>
 8014646:	2000      	movs	r0, #0
 8014648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801464c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801464e:	2e00      	cmp	r6, #0
 8014650:	d0f9      	beq.n	8014646 <__sflush_r+0x1a>
 8014652:	2300      	movs	r3, #0
 8014654:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014658:	682f      	ldr	r7, [r5, #0]
 801465a:	602b      	str	r3, [r5, #0]
 801465c:	d032      	beq.n	80146c4 <__sflush_r+0x98>
 801465e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014660:	89a3      	ldrh	r3, [r4, #12]
 8014662:	075a      	lsls	r2, r3, #29
 8014664:	d505      	bpl.n	8014672 <__sflush_r+0x46>
 8014666:	6863      	ldr	r3, [r4, #4]
 8014668:	1ac0      	subs	r0, r0, r3
 801466a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801466c:	b10b      	cbz	r3, 8014672 <__sflush_r+0x46>
 801466e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014670:	1ac0      	subs	r0, r0, r3
 8014672:	2300      	movs	r3, #0
 8014674:	4602      	mov	r2, r0
 8014676:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014678:	4628      	mov	r0, r5
 801467a:	6a21      	ldr	r1, [r4, #32]
 801467c:	47b0      	blx	r6
 801467e:	1c43      	adds	r3, r0, #1
 8014680:	89a3      	ldrh	r3, [r4, #12]
 8014682:	d106      	bne.n	8014692 <__sflush_r+0x66>
 8014684:	6829      	ldr	r1, [r5, #0]
 8014686:	291d      	cmp	r1, #29
 8014688:	d82c      	bhi.n	80146e4 <__sflush_r+0xb8>
 801468a:	4a2a      	ldr	r2, [pc, #168]	; (8014734 <__sflush_r+0x108>)
 801468c:	40ca      	lsrs	r2, r1
 801468e:	07d6      	lsls	r6, r2, #31
 8014690:	d528      	bpl.n	80146e4 <__sflush_r+0xb8>
 8014692:	2200      	movs	r2, #0
 8014694:	6062      	str	r2, [r4, #4]
 8014696:	6922      	ldr	r2, [r4, #16]
 8014698:	04d9      	lsls	r1, r3, #19
 801469a:	6022      	str	r2, [r4, #0]
 801469c:	d504      	bpl.n	80146a8 <__sflush_r+0x7c>
 801469e:	1c42      	adds	r2, r0, #1
 80146a0:	d101      	bne.n	80146a6 <__sflush_r+0x7a>
 80146a2:	682b      	ldr	r3, [r5, #0]
 80146a4:	b903      	cbnz	r3, 80146a8 <__sflush_r+0x7c>
 80146a6:	6560      	str	r0, [r4, #84]	; 0x54
 80146a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80146aa:	602f      	str	r7, [r5, #0]
 80146ac:	2900      	cmp	r1, #0
 80146ae:	d0ca      	beq.n	8014646 <__sflush_r+0x1a>
 80146b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146b4:	4299      	cmp	r1, r3
 80146b6:	d002      	beq.n	80146be <__sflush_r+0x92>
 80146b8:	4628      	mov	r0, r5
 80146ba:	f7fd fc37 	bl	8011f2c <_free_r>
 80146be:	2000      	movs	r0, #0
 80146c0:	6360      	str	r0, [r4, #52]	; 0x34
 80146c2:	e7c1      	b.n	8014648 <__sflush_r+0x1c>
 80146c4:	6a21      	ldr	r1, [r4, #32]
 80146c6:	2301      	movs	r3, #1
 80146c8:	4628      	mov	r0, r5
 80146ca:	47b0      	blx	r6
 80146cc:	1c41      	adds	r1, r0, #1
 80146ce:	d1c7      	bne.n	8014660 <__sflush_r+0x34>
 80146d0:	682b      	ldr	r3, [r5, #0]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d0c4      	beq.n	8014660 <__sflush_r+0x34>
 80146d6:	2b1d      	cmp	r3, #29
 80146d8:	d001      	beq.n	80146de <__sflush_r+0xb2>
 80146da:	2b16      	cmp	r3, #22
 80146dc:	d101      	bne.n	80146e2 <__sflush_r+0xb6>
 80146de:	602f      	str	r7, [r5, #0]
 80146e0:	e7b1      	b.n	8014646 <__sflush_r+0x1a>
 80146e2:	89a3      	ldrh	r3, [r4, #12]
 80146e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80146e8:	81a3      	strh	r3, [r4, #12]
 80146ea:	e7ad      	b.n	8014648 <__sflush_r+0x1c>
 80146ec:	690f      	ldr	r7, [r1, #16]
 80146ee:	2f00      	cmp	r7, #0
 80146f0:	d0a9      	beq.n	8014646 <__sflush_r+0x1a>
 80146f2:	0793      	lsls	r3, r2, #30
 80146f4:	bf18      	it	ne
 80146f6:	2300      	movne	r3, #0
 80146f8:	680e      	ldr	r6, [r1, #0]
 80146fa:	bf08      	it	eq
 80146fc:	694b      	ldreq	r3, [r1, #20]
 80146fe:	eba6 0807 	sub.w	r8, r6, r7
 8014702:	600f      	str	r7, [r1, #0]
 8014704:	608b      	str	r3, [r1, #8]
 8014706:	f1b8 0f00 	cmp.w	r8, #0
 801470a:	dd9c      	ble.n	8014646 <__sflush_r+0x1a>
 801470c:	4643      	mov	r3, r8
 801470e:	463a      	mov	r2, r7
 8014710:	4628      	mov	r0, r5
 8014712:	6a21      	ldr	r1, [r4, #32]
 8014714:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014716:	47b0      	blx	r6
 8014718:	2800      	cmp	r0, #0
 801471a:	dc06      	bgt.n	801472a <__sflush_r+0xfe>
 801471c:	89a3      	ldrh	r3, [r4, #12]
 801471e:	f04f 30ff 	mov.w	r0, #4294967295
 8014722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014726:	81a3      	strh	r3, [r4, #12]
 8014728:	e78e      	b.n	8014648 <__sflush_r+0x1c>
 801472a:	4407      	add	r7, r0
 801472c:	eba8 0800 	sub.w	r8, r8, r0
 8014730:	e7e9      	b.n	8014706 <__sflush_r+0xda>
 8014732:	bf00      	nop
 8014734:	20400001 	.word	0x20400001

08014738 <_fflush_r>:
 8014738:	b538      	push	{r3, r4, r5, lr}
 801473a:	690b      	ldr	r3, [r1, #16]
 801473c:	4605      	mov	r5, r0
 801473e:	460c      	mov	r4, r1
 8014740:	b913      	cbnz	r3, 8014748 <_fflush_r+0x10>
 8014742:	2500      	movs	r5, #0
 8014744:	4628      	mov	r0, r5
 8014746:	bd38      	pop	{r3, r4, r5, pc}
 8014748:	b118      	cbz	r0, 8014752 <_fflush_r+0x1a>
 801474a:	6983      	ldr	r3, [r0, #24]
 801474c:	b90b      	cbnz	r3, 8014752 <_fflush_r+0x1a>
 801474e:	f000 f887 	bl	8014860 <__sinit>
 8014752:	4b14      	ldr	r3, [pc, #80]	; (80147a4 <_fflush_r+0x6c>)
 8014754:	429c      	cmp	r4, r3
 8014756:	d11b      	bne.n	8014790 <_fflush_r+0x58>
 8014758:	686c      	ldr	r4, [r5, #4]
 801475a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d0ef      	beq.n	8014742 <_fflush_r+0xa>
 8014762:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014764:	07d0      	lsls	r0, r2, #31
 8014766:	d404      	bmi.n	8014772 <_fflush_r+0x3a>
 8014768:	0599      	lsls	r1, r3, #22
 801476a:	d402      	bmi.n	8014772 <_fflush_r+0x3a>
 801476c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801476e:	f7ff fcfa 	bl	8014166 <__retarget_lock_acquire_recursive>
 8014772:	4628      	mov	r0, r5
 8014774:	4621      	mov	r1, r4
 8014776:	f7ff ff59 	bl	801462c <__sflush_r>
 801477a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801477c:	4605      	mov	r5, r0
 801477e:	07da      	lsls	r2, r3, #31
 8014780:	d4e0      	bmi.n	8014744 <_fflush_r+0xc>
 8014782:	89a3      	ldrh	r3, [r4, #12]
 8014784:	059b      	lsls	r3, r3, #22
 8014786:	d4dd      	bmi.n	8014744 <_fflush_r+0xc>
 8014788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801478a:	f7ff fced 	bl	8014168 <__retarget_lock_release_recursive>
 801478e:	e7d9      	b.n	8014744 <_fflush_r+0xc>
 8014790:	4b05      	ldr	r3, [pc, #20]	; (80147a8 <_fflush_r+0x70>)
 8014792:	429c      	cmp	r4, r3
 8014794:	d101      	bne.n	801479a <_fflush_r+0x62>
 8014796:	68ac      	ldr	r4, [r5, #8]
 8014798:	e7df      	b.n	801475a <_fflush_r+0x22>
 801479a:	4b04      	ldr	r3, [pc, #16]	; (80147ac <_fflush_r+0x74>)
 801479c:	429c      	cmp	r4, r3
 801479e:	bf08      	it	eq
 80147a0:	68ec      	ldreq	r4, [r5, #12]
 80147a2:	e7da      	b.n	801475a <_fflush_r+0x22>
 80147a4:	08015f04 	.word	0x08015f04
 80147a8:	08015f24 	.word	0x08015f24
 80147ac:	08015ee4 	.word	0x08015ee4

080147b0 <std>:
 80147b0:	2300      	movs	r3, #0
 80147b2:	b510      	push	{r4, lr}
 80147b4:	4604      	mov	r4, r0
 80147b6:	e9c0 3300 	strd	r3, r3, [r0]
 80147ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80147be:	6083      	str	r3, [r0, #8]
 80147c0:	8181      	strh	r1, [r0, #12]
 80147c2:	6643      	str	r3, [r0, #100]	; 0x64
 80147c4:	81c2      	strh	r2, [r0, #14]
 80147c6:	6183      	str	r3, [r0, #24]
 80147c8:	4619      	mov	r1, r3
 80147ca:	2208      	movs	r2, #8
 80147cc:	305c      	adds	r0, #92	; 0x5c
 80147ce:	f7fd fba5 	bl	8011f1c <memset>
 80147d2:	4b05      	ldr	r3, [pc, #20]	; (80147e8 <std+0x38>)
 80147d4:	6224      	str	r4, [r4, #32]
 80147d6:	6263      	str	r3, [r4, #36]	; 0x24
 80147d8:	4b04      	ldr	r3, [pc, #16]	; (80147ec <std+0x3c>)
 80147da:	62a3      	str	r3, [r4, #40]	; 0x28
 80147dc:	4b04      	ldr	r3, [pc, #16]	; (80147f0 <std+0x40>)
 80147de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80147e0:	4b04      	ldr	r3, [pc, #16]	; (80147f4 <std+0x44>)
 80147e2:	6323      	str	r3, [r4, #48]	; 0x30
 80147e4:	bd10      	pop	{r4, pc}
 80147e6:	bf00      	nop
 80147e8:	08014aed 	.word	0x08014aed
 80147ec:	08014b0f 	.word	0x08014b0f
 80147f0:	08014b47 	.word	0x08014b47
 80147f4:	08014b6b 	.word	0x08014b6b

080147f8 <_cleanup_r>:
 80147f8:	4901      	ldr	r1, [pc, #4]	; (8014800 <_cleanup_r+0x8>)
 80147fa:	f000 b8af 	b.w	801495c <_fwalk_reent>
 80147fe:	bf00      	nop
 8014800:	08014739 	.word	0x08014739

08014804 <__sfmoreglue>:
 8014804:	b570      	push	{r4, r5, r6, lr}
 8014806:	2568      	movs	r5, #104	; 0x68
 8014808:	1e4a      	subs	r2, r1, #1
 801480a:	4355      	muls	r5, r2
 801480c:	460e      	mov	r6, r1
 801480e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014812:	f7fd fbd7 	bl	8011fc4 <_malloc_r>
 8014816:	4604      	mov	r4, r0
 8014818:	b140      	cbz	r0, 801482c <__sfmoreglue+0x28>
 801481a:	2100      	movs	r1, #0
 801481c:	e9c0 1600 	strd	r1, r6, [r0]
 8014820:	300c      	adds	r0, #12
 8014822:	60a0      	str	r0, [r4, #8]
 8014824:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014828:	f7fd fb78 	bl	8011f1c <memset>
 801482c:	4620      	mov	r0, r4
 801482e:	bd70      	pop	{r4, r5, r6, pc}

08014830 <__sfp_lock_acquire>:
 8014830:	4801      	ldr	r0, [pc, #4]	; (8014838 <__sfp_lock_acquire+0x8>)
 8014832:	f7ff bc98 	b.w	8014166 <__retarget_lock_acquire_recursive>
 8014836:	bf00      	nop
 8014838:	200021c8 	.word	0x200021c8

0801483c <__sfp_lock_release>:
 801483c:	4801      	ldr	r0, [pc, #4]	; (8014844 <__sfp_lock_release+0x8>)
 801483e:	f7ff bc93 	b.w	8014168 <__retarget_lock_release_recursive>
 8014842:	bf00      	nop
 8014844:	200021c8 	.word	0x200021c8

08014848 <__sinit_lock_acquire>:
 8014848:	4801      	ldr	r0, [pc, #4]	; (8014850 <__sinit_lock_acquire+0x8>)
 801484a:	f7ff bc8c 	b.w	8014166 <__retarget_lock_acquire_recursive>
 801484e:	bf00      	nop
 8014850:	200021c3 	.word	0x200021c3

08014854 <__sinit_lock_release>:
 8014854:	4801      	ldr	r0, [pc, #4]	; (801485c <__sinit_lock_release+0x8>)
 8014856:	f7ff bc87 	b.w	8014168 <__retarget_lock_release_recursive>
 801485a:	bf00      	nop
 801485c:	200021c3 	.word	0x200021c3

08014860 <__sinit>:
 8014860:	b510      	push	{r4, lr}
 8014862:	4604      	mov	r4, r0
 8014864:	f7ff fff0 	bl	8014848 <__sinit_lock_acquire>
 8014868:	69a3      	ldr	r3, [r4, #24]
 801486a:	b11b      	cbz	r3, 8014874 <__sinit+0x14>
 801486c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014870:	f7ff bff0 	b.w	8014854 <__sinit_lock_release>
 8014874:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014878:	6523      	str	r3, [r4, #80]	; 0x50
 801487a:	4b13      	ldr	r3, [pc, #76]	; (80148c8 <__sinit+0x68>)
 801487c:	4a13      	ldr	r2, [pc, #76]	; (80148cc <__sinit+0x6c>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	62a2      	str	r2, [r4, #40]	; 0x28
 8014882:	42a3      	cmp	r3, r4
 8014884:	bf08      	it	eq
 8014886:	2301      	moveq	r3, #1
 8014888:	4620      	mov	r0, r4
 801488a:	bf08      	it	eq
 801488c:	61a3      	streq	r3, [r4, #24]
 801488e:	f000 f81f 	bl	80148d0 <__sfp>
 8014892:	6060      	str	r0, [r4, #4]
 8014894:	4620      	mov	r0, r4
 8014896:	f000 f81b 	bl	80148d0 <__sfp>
 801489a:	60a0      	str	r0, [r4, #8]
 801489c:	4620      	mov	r0, r4
 801489e:	f000 f817 	bl	80148d0 <__sfp>
 80148a2:	2200      	movs	r2, #0
 80148a4:	2104      	movs	r1, #4
 80148a6:	60e0      	str	r0, [r4, #12]
 80148a8:	6860      	ldr	r0, [r4, #4]
 80148aa:	f7ff ff81 	bl	80147b0 <std>
 80148ae:	2201      	movs	r2, #1
 80148b0:	2109      	movs	r1, #9
 80148b2:	68a0      	ldr	r0, [r4, #8]
 80148b4:	f7ff ff7c 	bl	80147b0 <std>
 80148b8:	2202      	movs	r2, #2
 80148ba:	2112      	movs	r1, #18
 80148bc:	68e0      	ldr	r0, [r4, #12]
 80148be:	f7ff ff77 	bl	80147b0 <std>
 80148c2:	2301      	movs	r3, #1
 80148c4:	61a3      	str	r3, [r4, #24]
 80148c6:	e7d1      	b.n	801486c <__sinit+0xc>
 80148c8:	08015b60 	.word	0x08015b60
 80148cc:	080147f9 	.word	0x080147f9

080148d0 <__sfp>:
 80148d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148d2:	4607      	mov	r7, r0
 80148d4:	f7ff ffac 	bl	8014830 <__sfp_lock_acquire>
 80148d8:	4b1e      	ldr	r3, [pc, #120]	; (8014954 <__sfp+0x84>)
 80148da:	681e      	ldr	r6, [r3, #0]
 80148dc:	69b3      	ldr	r3, [r6, #24]
 80148de:	b913      	cbnz	r3, 80148e6 <__sfp+0x16>
 80148e0:	4630      	mov	r0, r6
 80148e2:	f7ff ffbd 	bl	8014860 <__sinit>
 80148e6:	3648      	adds	r6, #72	; 0x48
 80148e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80148ec:	3b01      	subs	r3, #1
 80148ee:	d503      	bpl.n	80148f8 <__sfp+0x28>
 80148f0:	6833      	ldr	r3, [r6, #0]
 80148f2:	b30b      	cbz	r3, 8014938 <__sfp+0x68>
 80148f4:	6836      	ldr	r6, [r6, #0]
 80148f6:	e7f7      	b.n	80148e8 <__sfp+0x18>
 80148f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80148fc:	b9d5      	cbnz	r5, 8014934 <__sfp+0x64>
 80148fe:	4b16      	ldr	r3, [pc, #88]	; (8014958 <__sfp+0x88>)
 8014900:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014904:	60e3      	str	r3, [r4, #12]
 8014906:	6665      	str	r5, [r4, #100]	; 0x64
 8014908:	f7ff fc2c 	bl	8014164 <__retarget_lock_init_recursive>
 801490c:	f7ff ff96 	bl	801483c <__sfp_lock_release>
 8014910:	2208      	movs	r2, #8
 8014912:	4629      	mov	r1, r5
 8014914:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014918:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801491c:	6025      	str	r5, [r4, #0]
 801491e:	61a5      	str	r5, [r4, #24]
 8014920:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014924:	f7fd fafa 	bl	8011f1c <memset>
 8014928:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801492c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014930:	4620      	mov	r0, r4
 8014932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014934:	3468      	adds	r4, #104	; 0x68
 8014936:	e7d9      	b.n	80148ec <__sfp+0x1c>
 8014938:	2104      	movs	r1, #4
 801493a:	4638      	mov	r0, r7
 801493c:	f7ff ff62 	bl	8014804 <__sfmoreglue>
 8014940:	4604      	mov	r4, r0
 8014942:	6030      	str	r0, [r6, #0]
 8014944:	2800      	cmp	r0, #0
 8014946:	d1d5      	bne.n	80148f4 <__sfp+0x24>
 8014948:	f7ff ff78 	bl	801483c <__sfp_lock_release>
 801494c:	230c      	movs	r3, #12
 801494e:	603b      	str	r3, [r7, #0]
 8014950:	e7ee      	b.n	8014930 <__sfp+0x60>
 8014952:	bf00      	nop
 8014954:	08015b60 	.word	0x08015b60
 8014958:	ffff0001 	.word	0xffff0001

0801495c <_fwalk_reent>:
 801495c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014960:	4606      	mov	r6, r0
 8014962:	4688      	mov	r8, r1
 8014964:	2700      	movs	r7, #0
 8014966:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801496a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801496e:	f1b9 0901 	subs.w	r9, r9, #1
 8014972:	d505      	bpl.n	8014980 <_fwalk_reent+0x24>
 8014974:	6824      	ldr	r4, [r4, #0]
 8014976:	2c00      	cmp	r4, #0
 8014978:	d1f7      	bne.n	801496a <_fwalk_reent+0xe>
 801497a:	4638      	mov	r0, r7
 801497c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014980:	89ab      	ldrh	r3, [r5, #12]
 8014982:	2b01      	cmp	r3, #1
 8014984:	d907      	bls.n	8014996 <_fwalk_reent+0x3a>
 8014986:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801498a:	3301      	adds	r3, #1
 801498c:	d003      	beq.n	8014996 <_fwalk_reent+0x3a>
 801498e:	4629      	mov	r1, r5
 8014990:	4630      	mov	r0, r6
 8014992:	47c0      	blx	r8
 8014994:	4307      	orrs	r7, r0
 8014996:	3568      	adds	r5, #104	; 0x68
 8014998:	e7e9      	b.n	801496e <_fwalk_reent+0x12>

0801499a <__swhatbuf_r>:
 801499a:	b570      	push	{r4, r5, r6, lr}
 801499c:	460e      	mov	r6, r1
 801499e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149a2:	4614      	mov	r4, r2
 80149a4:	2900      	cmp	r1, #0
 80149a6:	461d      	mov	r5, r3
 80149a8:	b096      	sub	sp, #88	; 0x58
 80149aa:	da07      	bge.n	80149bc <__swhatbuf_r+0x22>
 80149ac:	2300      	movs	r3, #0
 80149ae:	602b      	str	r3, [r5, #0]
 80149b0:	89b3      	ldrh	r3, [r6, #12]
 80149b2:	061a      	lsls	r2, r3, #24
 80149b4:	d410      	bmi.n	80149d8 <__swhatbuf_r+0x3e>
 80149b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80149ba:	e00e      	b.n	80149da <__swhatbuf_r+0x40>
 80149bc:	466a      	mov	r2, sp
 80149be:	f000 f8fb 	bl	8014bb8 <_fstat_r>
 80149c2:	2800      	cmp	r0, #0
 80149c4:	dbf2      	blt.n	80149ac <__swhatbuf_r+0x12>
 80149c6:	9a01      	ldr	r2, [sp, #4]
 80149c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80149cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80149d0:	425a      	negs	r2, r3
 80149d2:	415a      	adcs	r2, r3
 80149d4:	602a      	str	r2, [r5, #0]
 80149d6:	e7ee      	b.n	80149b6 <__swhatbuf_r+0x1c>
 80149d8:	2340      	movs	r3, #64	; 0x40
 80149da:	2000      	movs	r0, #0
 80149dc:	6023      	str	r3, [r4, #0]
 80149de:	b016      	add	sp, #88	; 0x58
 80149e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080149e4 <__smakebuf_r>:
 80149e4:	898b      	ldrh	r3, [r1, #12]
 80149e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80149e8:	079d      	lsls	r5, r3, #30
 80149ea:	4606      	mov	r6, r0
 80149ec:	460c      	mov	r4, r1
 80149ee:	d507      	bpl.n	8014a00 <__smakebuf_r+0x1c>
 80149f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80149f4:	6023      	str	r3, [r4, #0]
 80149f6:	6123      	str	r3, [r4, #16]
 80149f8:	2301      	movs	r3, #1
 80149fa:	6163      	str	r3, [r4, #20]
 80149fc:	b002      	add	sp, #8
 80149fe:	bd70      	pop	{r4, r5, r6, pc}
 8014a00:	466a      	mov	r2, sp
 8014a02:	ab01      	add	r3, sp, #4
 8014a04:	f7ff ffc9 	bl	801499a <__swhatbuf_r>
 8014a08:	9900      	ldr	r1, [sp, #0]
 8014a0a:	4605      	mov	r5, r0
 8014a0c:	4630      	mov	r0, r6
 8014a0e:	f7fd fad9 	bl	8011fc4 <_malloc_r>
 8014a12:	b948      	cbnz	r0, 8014a28 <__smakebuf_r+0x44>
 8014a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a18:	059a      	lsls	r2, r3, #22
 8014a1a:	d4ef      	bmi.n	80149fc <__smakebuf_r+0x18>
 8014a1c:	f023 0303 	bic.w	r3, r3, #3
 8014a20:	f043 0302 	orr.w	r3, r3, #2
 8014a24:	81a3      	strh	r3, [r4, #12]
 8014a26:	e7e3      	b.n	80149f0 <__smakebuf_r+0xc>
 8014a28:	4b0d      	ldr	r3, [pc, #52]	; (8014a60 <__smakebuf_r+0x7c>)
 8014a2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8014a2c:	89a3      	ldrh	r3, [r4, #12]
 8014a2e:	6020      	str	r0, [r4, #0]
 8014a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a34:	81a3      	strh	r3, [r4, #12]
 8014a36:	9b00      	ldr	r3, [sp, #0]
 8014a38:	6120      	str	r0, [r4, #16]
 8014a3a:	6163      	str	r3, [r4, #20]
 8014a3c:	9b01      	ldr	r3, [sp, #4]
 8014a3e:	b15b      	cbz	r3, 8014a58 <__smakebuf_r+0x74>
 8014a40:	4630      	mov	r0, r6
 8014a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a46:	f000 f8c9 	bl	8014bdc <_isatty_r>
 8014a4a:	b128      	cbz	r0, 8014a58 <__smakebuf_r+0x74>
 8014a4c:	89a3      	ldrh	r3, [r4, #12]
 8014a4e:	f023 0303 	bic.w	r3, r3, #3
 8014a52:	f043 0301 	orr.w	r3, r3, #1
 8014a56:	81a3      	strh	r3, [r4, #12]
 8014a58:	89a0      	ldrh	r0, [r4, #12]
 8014a5a:	4305      	orrs	r5, r0
 8014a5c:	81a5      	strh	r5, [r4, #12]
 8014a5e:	e7cd      	b.n	80149fc <__smakebuf_r+0x18>
 8014a60:	080147f9 	.word	0x080147f9

08014a64 <_raise_r>:
 8014a64:	291f      	cmp	r1, #31
 8014a66:	b538      	push	{r3, r4, r5, lr}
 8014a68:	4604      	mov	r4, r0
 8014a6a:	460d      	mov	r5, r1
 8014a6c:	d904      	bls.n	8014a78 <_raise_r+0x14>
 8014a6e:	2316      	movs	r3, #22
 8014a70:	6003      	str	r3, [r0, #0]
 8014a72:	f04f 30ff 	mov.w	r0, #4294967295
 8014a76:	bd38      	pop	{r3, r4, r5, pc}
 8014a78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014a7a:	b112      	cbz	r2, 8014a82 <_raise_r+0x1e>
 8014a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014a80:	b94b      	cbnz	r3, 8014a96 <_raise_r+0x32>
 8014a82:	4620      	mov	r0, r4
 8014a84:	f000 f830 	bl	8014ae8 <_getpid_r>
 8014a88:	462a      	mov	r2, r5
 8014a8a:	4601      	mov	r1, r0
 8014a8c:	4620      	mov	r0, r4
 8014a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a92:	f000 b817 	b.w	8014ac4 <_kill_r>
 8014a96:	2b01      	cmp	r3, #1
 8014a98:	d00a      	beq.n	8014ab0 <_raise_r+0x4c>
 8014a9a:	1c59      	adds	r1, r3, #1
 8014a9c:	d103      	bne.n	8014aa6 <_raise_r+0x42>
 8014a9e:	2316      	movs	r3, #22
 8014aa0:	6003      	str	r3, [r0, #0]
 8014aa2:	2001      	movs	r0, #1
 8014aa4:	e7e7      	b.n	8014a76 <_raise_r+0x12>
 8014aa6:	2400      	movs	r4, #0
 8014aa8:	4628      	mov	r0, r5
 8014aaa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014aae:	4798      	blx	r3
 8014ab0:	2000      	movs	r0, #0
 8014ab2:	e7e0      	b.n	8014a76 <_raise_r+0x12>

08014ab4 <raise>:
 8014ab4:	4b02      	ldr	r3, [pc, #8]	; (8014ac0 <raise+0xc>)
 8014ab6:	4601      	mov	r1, r0
 8014ab8:	6818      	ldr	r0, [r3, #0]
 8014aba:	f7ff bfd3 	b.w	8014a64 <_raise_r>
 8014abe:	bf00      	nop
 8014ac0:	200001e0 	.word	0x200001e0

08014ac4 <_kill_r>:
 8014ac4:	b538      	push	{r3, r4, r5, lr}
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	4d06      	ldr	r5, [pc, #24]	; (8014ae4 <_kill_r+0x20>)
 8014aca:	4604      	mov	r4, r0
 8014acc:	4608      	mov	r0, r1
 8014ace:	4611      	mov	r1, r2
 8014ad0:	602b      	str	r3, [r5, #0]
 8014ad2:	f7f2 f842 	bl	8006b5a <_kill>
 8014ad6:	1c43      	adds	r3, r0, #1
 8014ad8:	d102      	bne.n	8014ae0 <_kill_r+0x1c>
 8014ada:	682b      	ldr	r3, [r5, #0]
 8014adc:	b103      	cbz	r3, 8014ae0 <_kill_r+0x1c>
 8014ade:	6023      	str	r3, [r4, #0]
 8014ae0:	bd38      	pop	{r3, r4, r5, pc}
 8014ae2:	bf00      	nop
 8014ae4:	200021bc 	.word	0x200021bc

08014ae8 <_getpid_r>:
 8014ae8:	f7f2 b830 	b.w	8006b4c <_getpid>

08014aec <__sread>:
 8014aec:	b510      	push	{r4, lr}
 8014aee:	460c      	mov	r4, r1
 8014af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014af4:	f000 f894 	bl	8014c20 <_read_r>
 8014af8:	2800      	cmp	r0, #0
 8014afa:	bfab      	itete	ge
 8014afc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014afe:	89a3      	ldrhlt	r3, [r4, #12]
 8014b00:	181b      	addge	r3, r3, r0
 8014b02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014b06:	bfac      	ite	ge
 8014b08:	6563      	strge	r3, [r4, #84]	; 0x54
 8014b0a:	81a3      	strhlt	r3, [r4, #12]
 8014b0c:	bd10      	pop	{r4, pc}

08014b0e <__swrite>:
 8014b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b12:	461f      	mov	r7, r3
 8014b14:	898b      	ldrh	r3, [r1, #12]
 8014b16:	4605      	mov	r5, r0
 8014b18:	05db      	lsls	r3, r3, #23
 8014b1a:	460c      	mov	r4, r1
 8014b1c:	4616      	mov	r6, r2
 8014b1e:	d505      	bpl.n	8014b2c <__swrite+0x1e>
 8014b20:	2302      	movs	r3, #2
 8014b22:	2200      	movs	r2, #0
 8014b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b28:	f000 f868 	bl	8014bfc <_lseek_r>
 8014b2c:	89a3      	ldrh	r3, [r4, #12]
 8014b2e:	4632      	mov	r2, r6
 8014b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014b34:	81a3      	strh	r3, [r4, #12]
 8014b36:	4628      	mov	r0, r5
 8014b38:	463b      	mov	r3, r7
 8014b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b42:	f000 b817 	b.w	8014b74 <_write_r>

08014b46 <__sseek>:
 8014b46:	b510      	push	{r4, lr}
 8014b48:	460c      	mov	r4, r1
 8014b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b4e:	f000 f855 	bl	8014bfc <_lseek_r>
 8014b52:	1c43      	adds	r3, r0, #1
 8014b54:	89a3      	ldrh	r3, [r4, #12]
 8014b56:	bf15      	itete	ne
 8014b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8014b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014b62:	81a3      	strheq	r3, [r4, #12]
 8014b64:	bf18      	it	ne
 8014b66:	81a3      	strhne	r3, [r4, #12]
 8014b68:	bd10      	pop	{r4, pc}

08014b6a <__sclose>:
 8014b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b6e:	f000 b813 	b.w	8014b98 <_close_r>
	...

08014b74 <_write_r>:
 8014b74:	b538      	push	{r3, r4, r5, lr}
 8014b76:	4604      	mov	r4, r0
 8014b78:	4608      	mov	r0, r1
 8014b7a:	4611      	mov	r1, r2
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	4d05      	ldr	r5, [pc, #20]	; (8014b94 <_write_r+0x20>)
 8014b80:	602a      	str	r2, [r5, #0]
 8014b82:	461a      	mov	r2, r3
 8014b84:	f7f2 f820 	bl	8006bc8 <_write>
 8014b88:	1c43      	adds	r3, r0, #1
 8014b8a:	d102      	bne.n	8014b92 <_write_r+0x1e>
 8014b8c:	682b      	ldr	r3, [r5, #0]
 8014b8e:	b103      	cbz	r3, 8014b92 <_write_r+0x1e>
 8014b90:	6023      	str	r3, [r4, #0]
 8014b92:	bd38      	pop	{r3, r4, r5, pc}
 8014b94:	200021bc 	.word	0x200021bc

08014b98 <_close_r>:
 8014b98:	b538      	push	{r3, r4, r5, lr}
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	4d05      	ldr	r5, [pc, #20]	; (8014bb4 <_close_r+0x1c>)
 8014b9e:	4604      	mov	r4, r0
 8014ba0:	4608      	mov	r0, r1
 8014ba2:	602b      	str	r3, [r5, #0]
 8014ba4:	f7f2 f82c 	bl	8006c00 <_close>
 8014ba8:	1c43      	adds	r3, r0, #1
 8014baa:	d102      	bne.n	8014bb2 <_close_r+0x1a>
 8014bac:	682b      	ldr	r3, [r5, #0]
 8014bae:	b103      	cbz	r3, 8014bb2 <_close_r+0x1a>
 8014bb0:	6023      	str	r3, [r4, #0]
 8014bb2:	bd38      	pop	{r3, r4, r5, pc}
 8014bb4:	200021bc 	.word	0x200021bc

08014bb8 <_fstat_r>:
 8014bb8:	b538      	push	{r3, r4, r5, lr}
 8014bba:	2300      	movs	r3, #0
 8014bbc:	4d06      	ldr	r5, [pc, #24]	; (8014bd8 <_fstat_r+0x20>)
 8014bbe:	4604      	mov	r4, r0
 8014bc0:	4608      	mov	r0, r1
 8014bc2:	4611      	mov	r1, r2
 8014bc4:	602b      	str	r3, [r5, #0]
 8014bc6:	f7f2 f826 	bl	8006c16 <_fstat>
 8014bca:	1c43      	adds	r3, r0, #1
 8014bcc:	d102      	bne.n	8014bd4 <_fstat_r+0x1c>
 8014bce:	682b      	ldr	r3, [r5, #0]
 8014bd0:	b103      	cbz	r3, 8014bd4 <_fstat_r+0x1c>
 8014bd2:	6023      	str	r3, [r4, #0]
 8014bd4:	bd38      	pop	{r3, r4, r5, pc}
 8014bd6:	bf00      	nop
 8014bd8:	200021bc 	.word	0x200021bc

08014bdc <_isatty_r>:
 8014bdc:	b538      	push	{r3, r4, r5, lr}
 8014bde:	2300      	movs	r3, #0
 8014be0:	4d05      	ldr	r5, [pc, #20]	; (8014bf8 <_isatty_r+0x1c>)
 8014be2:	4604      	mov	r4, r0
 8014be4:	4608      	mov	r0, r1
 8014be6:	602b      	str	r3, [r5, #0]
 8014be8:	f7f2 f824 	bl	8006c34 <_isatty>
 8014bec:	1c43      	adds	r3, r0, #1
 8014bee:	d102      	bne.n	8014bf6 <_isatty_r+0x1a>
 8014bf0:	682b      	ldr	r3, [r5, #0]
 8014bf2:	b103      	cbz	r3, 8014bf6 <_isatty_r+0x1a>
 8014bf4:	6023      	str	r3, [r4, #0]
 8014bf6:	bd38      	pop	{r3, r4, r5, pc}
 8014bf8:	200021bc 	.word	0x200021bc

08014bfc <_lseek_r>:
 8014bfc:	b538      	push	{r3, r4, r5, lr}
 8014bfe:	4604      	mov	r4, r0
 8014c00:	4608      	mov	r0, r1
 8014c02:	4611      	mov	r1, r2
 8014c04:	2200      	movs	r2, #0
 8014c06:	4d05      	ldr	r5, [pc, #20]	; (8014c1c <_lseek_r+0x20>)
 8014c08:	602a      	str	r2, [r5, #0]
 8014c0a:	461a      	mov	r2, r3
 8014c0c:	f7f2 f81c 	bl	8006c48 <_lseek>
 8014c10:	1c43      	adds	r3, r0, #1
 8014c12:	d102      	bne.n	8014c1a <_lseek_r+0x1e>
 8014c14:	682b      	ldr	r3, [r5, #0]
 8014c16:	b103      	cbz	r3, 8014c1a <_lseek_r+0x1e>
 8014c18:	6023      	str	r3, [r4, #0]
 8014c1a:	bd38      	pop	{r3, r4, r5, pc}
 8014c1c:	200021bc 	.word	0x200021bc

08014c20 <_read_r>:
 8014c20:	b538      	push	{r3, r4, r5, lr}
 8014c22:	4604      	mov	r4, r0
 8014c24:	4608      	mov	r0, r1
 8014c26:	4611      	mov	r1, r2
 8014c28:	2200      	movs	r2, #0
 8014c2a:	4d05      	ldr	r5, [pc, #20]	; (8014c40 <_read_r+0x20>)
 8014c2c:	602a      	str	r2, [r5, #0]
 8014c2e:	461a      	mov	r2, r3
 8014c30:	f7f1 ffad 	bl	8006b8e <_read>
 8014c34:	1c43      	adds	r3, r0, #1
 8014c36:	d102      	bne.n	8014c3e <_read_r+0x1e>
 8014c38:	682b      	ldr	r3, [r5, #0]
 8014c3a:	b103      	cbz	r3, 8014c3e <_read_r+0x1e>
 8014c3c:	6023      	str	r3, [r4, #0]
 8014c3e:	bd38      	pop	{r3, r4, r5, pc}
 8014c40:	200021bc 	.word	0x200021bc

08014c44 <_init>:
 8014c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c46:	bf00      	nop
 8014c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c4a:	bc08      	pop	{r3}
 8014c4c:	469e      	mov	lr, r3
 8014c4e:	4770      	bx	lr

08014c50 <_fini>:
 8014c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c52:	bf00      	nop
 8014c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c56:	bc08      	pop	{r3}
 8014c58:	469e      	mov	lr, r3
 8014c5a:	4770      	bx	lr
