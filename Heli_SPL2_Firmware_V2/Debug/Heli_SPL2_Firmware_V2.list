
Heli_SPL2_Firmware_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000128cc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012ec  08012a58  08012a58  00022a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d44  08013d44  0003038c  2**0
                  CONTENTS
  4 .ARM          00000008  08013d44  08013d44  00023d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d4c  08013d4c  0003038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08013d4c  08013d4c  00023d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013d58  08013d58  00023d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000038c  20000000  08013d5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d50  2000038c  080140e8  0003038c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020dc  080140e8  000320dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003038c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004adfa  00000000  00000000  000303b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f57  00000000  00000000  0007b1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002080  00000000  00000000  00081108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ea0  00000000  00000000  00083188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029406  00000000  00000000  00085028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000256e6  00000000  00000000  000ae42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf1db  00000000  00000000  000d3b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a2cef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a350  00000000  00000000  001a2d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000038c 	.word	0x2000038c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08012a3c 	.word	0x08012a3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000390 	.word	0x20000390
 80001c4:	08012a3c 	.word	0x08012a3c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_frsub>:
 8000be0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	e002      	b.n	8000bec <__addsf3>
 8000be6:	bf00      	nop

08000be8 <__aeabi_fsub>:
 8000be8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bec <__addsf3>:
 8000bec:	0042      	lsls	r2, r0, #1
 8000bee:	bf1f      	itttt	ne
 8000bf0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bf4:	ea92 0f03 	teqne	r2, r3
 8000bf8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c00:	d06a      	beq.n	8000cd8 <__addsf3+0xec>
 8000c02:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c0a:	bfc1      	itttt	gt
 8000c0c:	18d2      	addgt	r2, r2, r3
 8000c0e:	4041      	eorgt	r1, r0
 8000c10:	4048      	eorgt	r0, r1
 8000c12:	4041      	eorgt	r1, r0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	2b19      	cmp	r3, #25
 8000c1a:	bf88      	it	hi
 8000c1c:	4770      	bxhi	lr
 8000c1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4240      	negne	r0, r0
 8000c2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4249      	negne	r1, r1
 8000c3e:	ea92 0f03 	teq	r2, r3
 8000c42:	d03f      	beq.n	8000cc4 <__addsf3+0xd8>
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	fa41 fc03 	asr.w	ip, r1, r3
 8000c4c:	eb10 000c 	adds.w	r0, r0, ip
 8000c50:	f1c3 0320 	rsb	r3, r3, #32
 8000c54:	fa01 f103 	lsl.w	r1, r1, r3
 8000c58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5c:	d502      	bpl.n	8000c64 <__addsf3+0x78>
 8000c5e:	4249      	negs	r1, r1
 8000c60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c68:	d313      	bcc.n	8000c92 <__addsf3+0xa6>
 8000c6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c6e:	d306      	bcc.n	8000c7e <__addsf3+0x92>
 8000c70:	0840      	lsrs	r0, r0, #1
 8000c72:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c76:	f102 0201 	add.w	r2, r2, #1
 8000c7a:	2afe      	cmp	r2, #254	; 0xfe
 8000c7c:	d251      	bcs.n	8000d22 <__addsf3+0x136>
 8000c7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c86:	bf08      	it	eq
 8000c88:	f020 0001 	biceq.w	r0, r0, #1
 8000c8c:	ea40 0003 	orr.w	r0, r0, r3
 8000c90:	4770      	bx	lr
 8000c92:	0049      	lsls	r1, r1, #1
 8000c94:	eb40 0000 	adc.w	r0, r0, r0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	bf28      	it	cs
 8000c9c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ca0:	d2ed      	bcs.n	8000c7e <__addsf3+0x92>
 8000ca2:	fab0 fc80 	clz	ip, r0
 8000ca6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000caa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cae:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cb2:	bfaa      	itet	ge
 8000cb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb8:	4252      	neglt	r2, r2
 8000cba:	4318      	orrge	r0, r3
 8000cbc:	bfbc      	itt	lt
 8000cbe:	40d0      	lsrlt	r0, r2
 8000cc0:	4318      	orrlt	r0, r3
 8000cc2:	4770      	bx	lr
 8000cc4:	f092 0f00 	teq	r2, #0
 8000cc8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ccc:	bf06      	itte	eq
 8000cce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cd2:	3201      	addeq	r2, #1
 8000cd4:	3b01      	subne	r3, #1
 8000cd6:	e7b5      	b.n	8000c44 <__addsf3+0x58>
 8000cd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce0:	bf18      	it	ne
 8000ce2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce6:	d021      	beq.n	8000d2c <__addsf3+0x140>
 8000ce8:	ea92 0f03 	teq	r2, r3
 8000cec:	d004      	beq.n	8000cf8 <__addsf3+0x10c>
 8000cee:	f092 0f00 	teq	r2, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	4608      	moveq	r0, r1
 8000cf6:	4770      	bx	lr
 8000cf8:	ea90 0f01 	teq	r0, r1
 8000cfc:	bf1c      	itt	ne
 8000cfe:	2000      	movne	r0, #0
 8000d00:	4770      	bxne	lr
 8000d02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d06:	d104      	bne.n	8000d12 <__addsf3+0x126>
 8000d08:	0040      	lsls	r0, r0, #1
 8000d0a:	bf28      	it	cs
 8000d0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d16:	bf3c      	itt	cc
 8000d18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d1c:	4770      	bxcc	lr
 8000d1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2a:	4770      	bx	lr
 8000d2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d30:	bf16      	itet	ne
 8000d32:	4608      	movne	r0, r1
 8000d34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d38:	4601      	movne	r1, r0
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	bf06      	itte	eq
 8000d3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d42:	ea90 0f01 	teqeq	r0, r1
 8000d46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_ui2f>:
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e004      	b.n	8000d5c <__aeabi_i2f+0x8>
 8000d52:	bf00      	nop

08000d54 <__aeabi_i2f>:
 8000d54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d58:	bf48      	it	mi
 8000d5a:	4240      	negmi	r0, r0
 8000d5c:	ea5f 0c00 	movs.w	ip, r0
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d68:	4601      	mov	r1, r0
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	e01c      	b.n	8000daa <__aeabi_l2f+0x2a>

08000d70 <__aeabi_ul2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e00a      	b.n	8000d94 <__aeabi_l2f+0x14>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_l2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d8c:	d502      	bpl.n	8000d94 <__aeabi_l2f+0x14>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	ea5f 0c01 	movs.w	ip, r1
 8000d98:	bf02      	ittt	eq
 8000d9a:	4684      	moveq	ip, r0
 8000d9c:	4601      	moveq	r1, r0
 8000d9e:	2000      	moveq	r0, #0
 8000da0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000da4:	bf08      	it	eq
 8000da6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000daa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dae:	fabc f28c 	clz	r2, ip
 8000db2:	3a08      	subs	r2, #8
 8000db4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db8:	db10      	blt.n	8000ddc <__aeabi_l2f+0x5c>
 8000dba:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dc4:	f1c2 0220 	rsb	r2, r2, #32
 8000dc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dcc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd0:	eb43 0002 	adc.w	r0, r3, r2
 8000dd4:	bf08      	it	eq
 8000dd6:	f020 0001 	biceq.w	r0, r0, #1
 8000dda:	4770      	bx	lr
 8000ddc:	f102 0220 	add.w	r2, r2, #32
 8000de0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dec:	fa21 f202 	lsr.w	r2, r1, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fmul>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d06f      	beq.n	8000ef4 <__aeabi_fmul+0xf8>
 8000e14:	441a      	add	r2, r3
 8000e16:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1a:	0240      	lsls	r0, r0, #9
 8000e1c:	bf18      	it	ne
 8000e1e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e22:	d01e      	beq.n	8000e62 <__aeabi_fmul+0x66>
 8000e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e28:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e2c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e30:	fba0 3101 	umull	r3, r1, r0, r1
 8000e34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e3c:	bf3e      	ittt	cc
 8000e3e:	0049      	lslcc	r1, r1, #1
 8000e40:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e44:	005b      	lslcc	r3, r3, #1
 8000e46:	ea40 0001 	orr.w	r0, r0, r1
 8000e4a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e4e:	2afd      	cmp	r2, #253	; 0xfd
 8000e50:	d81d      	bhi.n	8000e8e <__aeabi_fmul+0x92>
 8000e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e5a:	bf08      	it	eq
 8000e5c:	f020 0001 	biceq.w	r0, r0, #1
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e6a:	bf08      	it	eq
 8000e6c:	0249      	lsleq	r1, r1, #9
 8000e6e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e72:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e76:	3a7f      	subs	r2, #127	; 0x7f
 8000e78:	bfc2      	ittt	gt
 8000e7a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e7e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e82:	4770      	bxgt	lr
 8000e84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	3a01      	subs	r2, #1
 8000e8e:	dc5d      	bgt.n	8000f4c <__aeabi_fmul+0x150>
 8000e90:	f112 0f19 	cmn.w	r2, #25
 8000e94:	bfdc      	itt	le
 8000e96:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e9a:	4770      	bxle	lr
 8000e9c:	f1c2 0200 	rsb	r2, r2, #0
 8000ea0:	0041      	lsls	r1, r0, #1
 8000ea2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ea6:	f1c2 0220 	rsb	r2, r2, #32
 8000eaa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eae:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eb2:	f140 0000 	adc.w	r0, r0, #0
 8000eb6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eba:	bf08      	it	eq
 8000ebc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec0:	4770      	bx	lr
 8000ec2:	f092 0f00 	teq	r2, #0
 8000ec6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0040      	lsleq	r0, r0, #1
 8000ece:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed2:	3a01      	subeq	r2, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fmul+0xce>
 8000ed6:	ea40 000c 	orr.w	r0, r0, ip
 8000eda:	f093 0f00 	teq	r3, #0
 8000ede:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0049      	lsleq	r1, r1, #1
 8000ee6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eea:	3b01      	subeq	r3, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xe6>
 8000eee:	ea41 010c 	orr.w	r1, r1, ip
 8000ef2:	e78f      	b.n	8000e14 <__aeabi_fmul+0x18>
 8000ef4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	bf18      	it	ne
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d00a      	beq.n	8000f1a <__aeabi_fmul+0x11e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	d1d8      	bne.n	8000ec2 <__aeabi_fmul+0xc6>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f18:	4770      	bx	lr
 8000f1a:	f090 0f00 	teq	r0, #0
 8000f1e:	bf17      	itett	ne
 8000f20:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f24:	4608      	moveq	r0, r1
 8000f26:	f091 0f00 	teqne	r1, #0
 8000f2a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f2e:	d014      	beq.n	8000f5a <__aeabi_fmul+0x15e>
 8000f30:	ea92 0f0c 	teq	r2, ip
 8000f34:	d101      	bne.n	8000f3a <__aeabi_fmul+0x13e>
 8000f36:	0242      	lsls	r2, r0, #9
 8000f38:	d10f      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f3a:	ea93 0f0c 	teq	r3, ip
 8000f3e:	d103      	bne.n	8000f48 <__aeabi_fmul+0x14c>
 8000f40:	024b      	lsls	r3, r1, #9
 8000f42:	bf18      	it	ne
 8000f44:	4608      	movne	r0, r1
 8000f46:	d108      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f48:	ea80 0001 	eor.w	r0, r0, r1
 8000f4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f58:	4770      	bx	lr
 8000f5a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f5e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f62:	4770      	bx	lr

08000f64 <__aeabi_fdiv>:
 8000f64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f6c:	bf1e      	ittt	ne
 8000f6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f72:	ea92 0f0c 	teqne	r2, ip
 8000f76:	ea93 0f0c 	teqne	r3, ip
 8000f7a:	d069      	beq.n	8001050 <__aeabi_fdiv+0xec>
 8000f7c:	eba2 0203 	sub.w	r2, r2, r3
 8000f80:	ea80 0c01 	eor.w	ip, r0, r1
 8000f84:	0249      	lsls	r1, r1, #9
 8000f86:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f8a:	d037      	beq.n	8000ffc <__aeabi_fdiv+0x98>
 8000f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f90:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f94:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	bf38      	it	cc
 8000fa0:	005b      	lslcc	r3, r3, #1
 8000fa2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fa6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000faa:	428b      	cmp	r3, r1
 8000fac:	bf24      	itt	cs
 8000fae:	1a5b      	subcs	r3, r3, r1
 8000fb0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fb4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fbe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fc2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fc6:	bf24      	itt	cs
 8000fc8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fcc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fd0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fd4:	bf24      	itt	cs
 8000fd6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fda:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	bf18      	it	ne
 8000fe2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fe6:	d1e0      	bne.n	8000faa <__aeabi_fdiv+0x46>
 8000fe8:	2afd      	cmp	r2, #253	; 0xfd
 8000fea:	f63f af50 	bhi.w	8000e8e <__aeabi_fmul+0x92>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ff4:	bf08      	it	eq
 8000ff6:	f020 0001 	biceq.w	r0, r0, #1
 8000ffa:	4770      	bx	lr
 8000ffc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001000:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001004:	327f      	adds	r2, #127	; 0x7f
 8001006:	bfc2      	ittt	gt
 8001008:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800100c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001010:	4770      	bxgt	lr
 8001012:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	3a01      	subs	r2, #1
 800101c:	e737      	b.n	8000e8e <__aeabi_fmul+0x92>
 800101e:	f092 0f00 	teq	r2, #0
 8001022:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001026:	bf02      	ittt	eq
 8001028:	0040      	lsleq	r0, r0, #1
 800102a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800102e:	3a01      	subeq	r2, #1
 8001030:	d0f9      	beq.n	8001026 <__aeabi_fdiv+0xc2>
 8001032:	ea40 000c 	orr.w	r0, r0, ip
 8001036:	f093 0f00 	teq	r3, #0
 800103a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0049      	lsleq	r1, r1, #1
 8001042:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001046:	3b01      	subeq	r3, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xda>
 800104a:	ea41 010c 	orr.w	r1, r1, ip
 800104e:	e795      	b.n	8000f7c <__aeabi_fdiv+0x18>
 8001050:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001054:	ea92 0f0c 	teq	r2, ip
 8001058:	d108      	bne.n	800106c <__aeabi_fdiv+0x108>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	f47f af7d 	bne.w	8000f5a <__aeabi_fmul+0x15e>
 8001060:	ea93 0f0c 	teq	r3, ip
 8001064:	f47f af70 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001068:	4608      	mov	r0, r1
 800106a:	e776      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800106c:	ea93 0f0c 	teq	r3, ip
 8001070:	d104      	bne.n	800107c <__aeabi_fdiv+0x118>
 8001072:	024b      	lsls	r3, r1, #9
 8001074:	f43f af4c 	beq.w	8000f10 <__aeabi_fmul+0x114>
 8001078:	4608      	mov	r0, r1
 800107a:	e76e      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800107c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001080:	bf18      	it	ne
 8001082:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001086:	d1ca      	bne.n	800101e <__aeabi_fdiv+0xba>
 8001088:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800108c:	f47f af5c 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001090:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001094:	f47f af3c 	bne.w	8000f10 <__aeabi_fmul+0x114>
 8001098:	e75f      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800109a:	bf00      	nop

0800109c <__gesf2>:
 800109c:	f04f 3cff 	mov.w	ip, #4294967295
 80010a0:	e006      	b.n	80010b0 <__cmpsf2+0x4>
 80010a2:	bf00      	nop

080010a4 <__lesf2>:
 80010a4:	f04f 0c01 	mov.w	ip, #1
 80010a8:	e002      	b.n	80010b0 <__cmpsf2+0x4>
 80010aa:	bf00      	nop

080010ac <__cmpsf2>:
 80010ac:	f04f 0c01 	mov.w	ip, #1
 80010b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c0:	bf18      	it	ne
 80010c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010c6:	d011      	beq.n	80010ec <__cmpsf2+0x40>
 80010c8:	b001      	add	sp, #4
 80010ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ce:	bf18      	it	ne
 80010d0:	ea90 0f01 	teqne	r0, r1
 80010d4:	bf58      	it	pl
 80010d6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010da:	bf88      	it	hi
 80010dc:	17c8      	asrhi	r0, r1, #31
 80010de:	bf38      	it	cc
 80010e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010e4:	bf18      	it	ne
 80010e6:	f040 0001 	orrne.w	r0, r0, #1
 80010ea:	4770      	bx	lr
 80010ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f0:	d102      	bne.n	80010f8 <__cmpsf2+0x4c>
 80010f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010f6:	d105      	bne.n	8001104 <__cmpsf2+0x58>
 80010f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010fc:	d1e4      	bne.n	80010c8 <__cmpsf2+0x1c>
 80010fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001102:	d0e1      	beq.n	80010c8 <__cmpsf2+0x1c>
 8001104:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <__aeabi_cfrcmple>:
 800110c:	4684      	mov	ip, r0
 800110e:	4608      	mov	r0, r1
 8001110:	4661      	mov	r1, ip
 8001112:	e7ff      	b.n	8001114 <__aeabi_cfcmpeq>

08001114 <__aeabi_cfcmpeq>:
 8001114:	b50f      	push	{r0, r1, r2, r3, lr}
 8001116:	f7ff ffc9 	bl	80010ac <__cmpsf2>
 800111a:	2800      	cmp	r0, #0
 800111c:	bf48      	it	mi
 800111e:	f110 0f00 	cmnmi.w	r0, #0
 8001122:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001124 <__aeabi_fcmpeq>:
 8001124:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001128:	f7ff fff4 	bl	8001114 <__aeabi_cfcmpeq>
 800112c:	bf0c      	ite	eq
 800112e:	2001      	moveq	r0, #1
 8001130:	2000      	movne	r0, #0
 8001132:	f85d fb08 	ldr.w	pc, [sp], #8
 8001136:	bf00      	nop

08001138 <__aeabi_fcmplt>:
 8001138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800113c:	f7ff ffea 	bl	8001114 <__aeabi_cfcmpeq>
 8001140:	bf34      	ite	cc
 8001142:	2001      	movcc	r0, #1
 8001144:	2000      	movcs	r0, #0
 8001146:	f85d fb08 	ldr.w	pc, [sp], #8
 800114a:	bf00      	nop

0800114c <__aeabi_fcmple>:
 800114c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001150:	f7ff ffe0 	bl	8001114 <__aeabi_cfcmpeq>
 8001154:	bf94      	ite	ls
 8001156:	2001      	movls	r0, #1
 8001158:	2000      	movhi	r0, #0
 800115a:	f85d fb08 	ldr.w	pc, [sp], #8
 800115e:	bf00      	nop

08001160 <__aeabi_fcmpge>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff ffd2 	bl	800110c <__aeabi_cfrcmple>
 8001168:	bf94      	ite	ls
 800116a:	2001      	movls	r0, #1
 800116c:	2000      	movhi	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmpgt>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffc8 	bl	800110c <__aeabi_cfrcmple>
 800117c:	bf34      	ite	cc
 800117e:	2001      	movcc	r0, #1
 8001180:	2000      	movcs	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmpun>:
 8001188:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800118c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001190:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001194:	d102      	bne.n	800119c <__aeabi_fcmpun+0x14>
 8001196:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800119a:	d108      	bne.n	80011ae <__aeabi_fcmpun+0x26>
 800119c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011a0:	d102      	bne.n	80011a8 <__aeabi_fcmpun+0x20>
 80011a2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011a6:	d102      	bne.n	80011ae <__aeabi_fcmpun+0x26>
 80011a8:	f04f 0000 	mov.w	r0, #0
 80011ac:	4770      	bx	lr
 80011ae:	f04f 0001 	mov.w	r0, #1
 80011b2:	4770      	bx	lr

080011b4 <__aeabi_f2iz>:
 80011b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011bc:	d30f      	bcc.n	80011de <__aeabi_f2iz+0x2a>
 80011be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011c6:	d90d      	bls.n	80011e4 <__aeabi_f2iz+0x30>
 80011c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	bf18      	it	ne
 80011da:	4240      	negne	r0, r0
 80011dc:	4770      	bx	lr
 80011de:	f04f 0000 	mov.w	r0, #0
 80011e2:	4770      	bx	lr
 80011e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e8:	d101      	bne.n	80011ee <__aeabi_f2iz+0x3a>
 80011ea:	0242      	lsls	r2, r0, #9
 80011ec:	d105      	bne.n	80011fa <__aeabi_f2iz+0x46>
 80011ee:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011f2:	bf08      	it	eq
 80011f4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011f8:	4770      	bx	lr
 80011fa:	f04f 0000 	mov.w	r0, #0
 80011fe:	4770      	bx	lr

08001200 <__aeabi_f2uiz>:
 8001200:	0042      	lsls	r2, r0, #1
 8001202:	d20e      	bcs.n	8001222 <__aeabi_f2uiz+0x22>
 8001204:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001208:	d30b      	bcc.n	8001222 <__aeabi_f2uiz+0x22>
 800120a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800120e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001212:	d409      	bmi.n	8001228 <__aeabi_f2uiz+0x28>
 8001214:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800121c:	fa23 f002 	lsr.w	r0, r3, r2
 8001220:	4770      	bx	lr
 8001222:	f04f 0000 	mov.w	r0, #0
 8001226:	4770      	bx	lr
 8001228:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800122c:	d101      	bne.n	8001232 <__aeabi_f2uiz+0x32>
 800122e:	0242      	lsls	r2, r0, #9
 8001230:	d102      	bne.n	8001238 <__aeabi_f2uiz+0x38>
 8001232:	f04f 30ff 	mov.w	r0, #4294967295
 8001236:	4770      	bx	lr
 8001238:	f04f 0000 	mov.w	r0, #0
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <__aeabi_uldivmod>:
 8001240:	b953      	cbnz	r3, 8001258 <__aeabi_uldivmod+0x18>
 8001242:	b94a      	cbnz	r2, 8001258 <__aeabi_uldivmod+0x18>
 8001244:	2900      	cmp	r1, #0
 8001246:	bf08      	it	eq
 8001248:	2800      	cmpeq	r0, #0
 800124a:	bf1c      	itt	ne
 800124c:	f04f 31ff 	movne.w	r1, #4294967295
 8001250:	f04f 30ff 	movne.w	r0, #4294967295
 8001254:	f000 b96e 	b.w	8001534 <__aeabi_idiv0>
 8001258:	f1ad 0c08 	sub.w	ip, sp, #8
 800125c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001260:	f000 f806 	bl	8001270 <__udivmoddi4>
 8001264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800126c:	b004      	add	sp, #16
 800126e:	4770      	bx	lr

08001270 <__udivmoddi4>:
 8001270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001274:	9e08      	ldr	r6, [sp, #32]
 8001276:	460d      	mov	r5, r1
 8001278:	4604      	mov	r4, r0
 800127a:	468e      	mov	lr, r1
 800127c:	2b00      	cmp	r3, #0
 800127e:	f040 8083 	bne.w	8001388 <__udivmoddi4+0x118>
 8001282:	428a      	cmp	r2, r1
 8001284:	4617      	mov	r7, r2
 8001286:	d947      	bls.n	8001318 <__udivmoddi4+0xa8>
 8001288:	fab2 f382 	clz	r3, r2
 800128c:	b14b      	cbz	r3, 80012a2 <__udivmoddi4+0x32>
 800128e:	f1c3 0120 	rsb	r1, r3, #32
 8001292:	fa05 fe03 	lsl.w	lr, r5, r3
 8001296:	fa20 f101 	lsr.w	r1, r0, r1
 800129a:	409f      	lsls	r7, r3
 800129c:	ea41 0e0e 	orr.w	lr, r1, lr
 80012a0:	409c      	lsls	r4, r3
 80012a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80012a6:	fbbe fcf8 	udiv	ip, lr, r8
 80012aa:	fa1f f987 	uxth.w	r9, r7
 80012ae:	fb08 e21c 	mls	r2, r8, ip, lr
 80012b2:	fb0c f009 	mul.w	r0, ip, r9
 80012b6:	0c21      	lsrs	r1, r4, #16
 80012b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80012bc:	4290      	cmp	r0, r2
 80012be:	d90a      	bls.n	80012d6 <__udivmoddi4+0x66>
 80012c0:	18ba      	adds	r2, r7, r2
 80012c2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80012c6:	f080 8118 	bcs.w	80014fa <__udivmoddi4+0x28a>
 80012ca:	4290      	cmp	r0, r2
 80012cc:	f240 8115 	bls.w	80014fa <__udivmoddi4+0x28a>
 80012d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80012d4:	443a      	add	r2, r7
 80012d6:	1a12      	subs	r2, r2, r0
 80012d8:	fbb2 f0f8 	udiv	r0, r2, r8
 80012dc:	fb08 2210 	mls	r2, r8, r0, r2
 80012e0:	fb00 f109 	mul.w	r1, r0, r9
 80012e4:	b2a4      	uxth	r4, r4
 80012e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012ea:	42a1      	cmp	r1, r4
 80012ec:	d909      	bls.n	8001302 <__udivmoddi4+0x92>
 80012ee:	193c      	adds	r4, r7, r4
 80012f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80012f4:	f080 8103 	bcs.w	80014fe <__udivmoddi4+0x28e>
 80012f8:	42a1      	cmp	r1, r4
 80012fa:	f240 8100 	bls.w	80014fe <__udivmoddi4+0x28e>
 80012fe:	3802      	subs	r0, #2
 8001300:	443c      	add	r4, r7
 8001302:	1a64      	subs	r4, r4, r1
 8001304:	2100      	movs	r1, #0
 8001306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800130a:	b11e      	cbz	r6, 8001314 <__udivmoddi4+0xa4>
 800130c:	2200      	movs	r2, #0
 800130e:	40dc      	lsrs	r4, r3
 8001310:	e9c6 4200 	strd	r4, r2, [r6]
 8001314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001318:	b902      	cbnz	r2, 800131c <__udivmoddi4+0xac>
 800131a:	deff      	udf	#255	; 0xff
 800131c:	fab2 f382 	clz	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d14f      	bne.n	80013c4 <__udivmoddi4+0x154>
 8001324:	1a8d      	subs	r5, r1, r2
 8001326:	2101      	movs	r1, #1
 8001328:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800132c:	fa1f f882 	uxth.w	r8, r2
 8001330:	fbb5 fcfe 	udiv	ip, r5, lr
 8001334:	fb0e 551c 	mls	r5, lr, ip, r5
 8001338:	fb08 f00c 	mul.w	r0, r8, ip
 800133c:	0c22      	lsrs	r2, r4, #16
 800133e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001342:	42a8      	cmp	r0, r5
 8001344:	d907      	bls.n	8001356 <__udivmoddi4+0xe6>
 8001346:	197d      	adds	r5, r7, r5
 8001348:	f10c 32ff 	add.w	r2, ip, #4294967295
 800134c:	d202      	bcs.n	8001354 <__udivmoddi4+0xe4>
 800134e:	42a8      	cmp	r0, r5
 8001350:	f200 80e9 	bhi.w	8001526 <__udivmoddi4+0x2b6>
 8001354:	4694      	mov	ip, r2
 8001356:	1a2d      	subs	r5, r5, r0
 8001358:	fbb5 f0fe 	udiv	r0, r5, lr
 800135c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001360:	fb08 f800 	mul.w	r8, r8, r0
 8001364:	b2a4      	uxth	r4, r4
 8001366:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800136a:	45a0      	cmp	r8, r4
 800136c:	d907      	bls.n	800137e <__udivmoddi4+0x10e>
 800136e:	193c      	adds	r4, r7, r4
 8001370:	f100 32ff 	add.w	r2, r0, #4294967295
 8001374:	d202      	bcs.n	800137c <__udivmoddi4+0x10c>
 8001376:	45a0      	cmp	r8, r4
 8001378:	f200 80d9 	bhi.w	800152e <__udivmoddi4+0x2be>
 800137c:	4610      	mov	r0, r2
 800137e:	eba4 0408 	sub.w	r4, r4, r8
 8001382:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001386:	e7c0      	b.n	800130a <__udivmoddi4+0x9a>
 8001388:	428b      	cmp	r3, r1
 800138a:	d908      	bls.n	800139e <__udivmoddi4+0x12e>
 800138c:	2e00      	cmp	r6, #0
 800138e:	f000 80b1 	beq.w	80014f4 <__udivmoddi4+0x284>
 8001392:	2100      	movs	r1, #0
 8001394:	e9c6 0500 	strd	r0, r5, [r6]
 8001398:	4608      	mov	r0, r1
 800139a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800139e:	fab3 f183 	clz	r1, r3
 80013a2:	2900      	cmp	r1, #0
 80013a4:	d14b      	bne.n	800143e <__udivmoddi4+0x1ce>
 80013a6:	42ab      	cmp	r3, r5
 80013a8:	d302      	bcc.n	80013b0 <__udivmoddi4+0x140>
 80013aa:	4282      	cmp	r2, r0
 80013ac:	f200 80b9 	bhi.w	8001522 <__udivmoddi4+0x2b2>
 80013b0:	1a84      	subs	r4, r0, r2
 80013b2:	eb65 0303 	sbc.w	r3, r5, r3
 80013b6:	2001      	movs	r0, #1
 80013b8:	469e      	mov	lr, r3
 80013ba:	2e00      	cmp	r6, #0
 80013bc:	d0aa      	beq.n	8001314 <__udivmoddi4+0xa4>
 80013be:	e9c6 4e00 	strd	r4, lr, [r6]
 80013c2:	e7a7      	b.n	8001314 <__udivmoddi4+0xa4>
 80013c4:	409f      	lsls	r7, r3
 80013c6:	f1c3 0220 	rsb	r2, r3, #32
 80013ca:	40d1      	lsrs	r1, r2
 80013cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80013d4:	fa1f f887 	uxth.w	r8, r7
 80013d8:	fb0e 1110 	mls	r1, lr, r0, r1
 80013dc:	fa24 f202 	lsr.w	r2, r4, r2
 80013e0:	409d      	lsls	r5, r3
 80013e2:	fb00 fc08 	mul.w	ip, r0, r8
 80013e6:	432a      	orrs	r2, r5
 80013e8:	0c15      	lsrs	r5, r2, #16
 80013ea:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013ee:	45ac      	cmp	ip, r5
 80013f0:	fa04 f403 	lsl.w	r4, r4, r3
 80013f4:	d909      	bls.n	800140a <__udivmoddi4+0x19a>
 80013f6:	197d      	adds	r5, r7, r5
 80013f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80013fc:	f080 808f 	bcs.w	800151e <__udivmoddi4+0x2ae>
 8001400:	45ac      	cmp	ip, r5
 8001402:	f240 808c 	bls.w	800151e <__udivmoddi4+0x2ae>
 8001406:	3802      	subs	r0, #2
 8001408:	443d      	add	r5, r7
 800140a:	eba5 050c 	sub.w	r5, r5, ip
 800140e:	fbb5 f1fe 	udiv	r1, r5, lr
 8001412:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001416:	fb01 f908 	mul.w	r9, r1, r8
 800141a:	b295      	uxth	r5, r2
 800141c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001420:	45a9      	cmp	r9, r5
 8001422:	d907      	bls.n	8001434 <__udivmoddi4+0x1c4>
 8001424:	197d      	adds	r5, r7, r5
 8001426:	f101 32ff 	add.w	r2, r1, #4294967295
 800142a:	d274      	bcs.n	8001516 <__udivmoddi4+0x2a6>
 800142c:	45a9      	cmp	r9, r5
 800142e:	d972      	bls.n	8001516 <__udivmoddi4+0x2a6>
 8001430:	3902      	subs	r1, #2
 8001432:	443d      	add	r5, r7
 8001434:	eba5 0509 	sub.w	r5, r5, r9
 8001438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800143c:	e778      	b.n	8001330 <__udivmoddi4+0xc0>
 800143e:	f1c1 0720 	rsb	r7, r1, #32
 8001442:	408b      	lsls	r3, r1
 8001444:	fa22 fc07 	lsr.w	ip, r2, r7
 8001448:	ea4c 0c03 	orr.w	ip, ip, r3
 800144c:	fa25 f407 	lsr.w	r4, r5, r7
 8001450:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001454:	fbb4 f9fe 	udiv	r9, r4, lr
 8001458:	fa1f f88c 	uxth.w	r8, ip
 800145c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001460:	fa20 f307 	lsr.w	r3, r0, r7
 8001464:	fb09 fa08 	mul.w	sl, r9, r8
 8001468:	408d      	lsls	r5, r1
 800146a:	431d      	orrs	r5, r3
 800146c:	0c2b      	lsrs	r3, r5, #16
 800146e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001472:	45a2      	cmp	sl, r4
 8001474:	fa02 f201 	lsl.w	r2, r2, r1
 8001478:	fa00 f301 	lsl.w	r3, r0, r1
 800147c:	d909      	bls.n	8001492 <__udivmoddi4+0x222>
 800147e:	eb1c 0404 	adds.w	r4, ip, r4
 8001482:	f109 30ff 	add.w	r0, r9, #4294967295
 8001486:	d248      	bcs.n	800151a <__udivmoddi4+0x2aa>
 8001488:	45a2      	cmp	sl, r4
 800148a:	d946      	bls.n	800151a <__udivmoddi4+0x2aa>
 800148c:	f1a9 0902 	sub.w	r9, r9, #2
 8001490:	4464      	add	r4, ip
 8001492:	eba4 040a 	sub.w	r4, r4, sl
 8001496:	fbb4 f0fe 	udiv	r0, r4, lr
 800149a:	fb0e 4410 	mls	r4, lr, r0, r4
 800149e:	fb00 fa08 	mul.w	sl, r0, r8
 80014a2:	b2ad      	uxth	r5, r5
 80014a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80014a8:	45a2      	cmp	sl, r4
 80014aa:	d908      	bls.n	80014be <__udivmoddi4+0x24e>
 80014ac:	eb1c 0404 	adds.w	r4, ip, r4
 80014b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80014b4:	d22d      	bcs.n	8001512 <__udivmoddi4+0x2a2>
 80014b6:	45a2      	cmp	sl, r4
 80014b8:	d92b      	bls.n	8001512 <__udivmoddi4+0x2a2>
 80014ba:	3802      	subs	r0, #2
 80014bc:	4464      	add	r4, ip
 80014be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80014c2:	fba0 8902 	umull	r8, r9, r0, r2
 80014c6:	eba4 040a 	sub.w	r4, r4, sl
 80014ca:	454c      	cmp	r4, r9
 80014cc:	46c6      	mov	lr, r8
 80014ce:	464d      	mov	r5, r9
 80014d0:	d319      	bcc.n	8001506 <__udivmoddi4+0x296>
 80014d2:	d016      	beq.n	8001502 <__udivmoddi4+0x292>
 80014d4:	b15e      	cbz	r6, 80014ee <__udivmoddi4+0x27e>
 80014d6:	ebb3 020e 	subs.w	r2, r3, lr
 80014da:	eb64 0405 	sbc.w	r4, r4, r5
 80014de:	fa04 f707 	lsl.w	r7, r4, r7
 80014e2:	fa22 f301 	lsr.w	r3, r2, r1
 80014e6:	431f      	orrs	r7, r3
 80014e8:	40cc      	lsrs	r4, r1
 80014ea:	e9c6 7400 	strd	r7, r4, [r6]
 80014ee:	2100      	movs	r1, #0
 80014f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014f4:	4631      	mov	r1, r6
 80014f6:	4630      	mov	r0, r6
 80014f8:	e70c      	b.n	8001314 <__udivmoddi4+0xa4>
 80014fa:	468c      	mov	ip, r1
 80014fc:	e6eb      	b.n	80012d6 <__udivmoddi4+0x66>
 80014fe:	4610      	mov	r0, r2
 8001500:	e6ff      	b.n	8001302 <__udivmoddi4+0x92>
 8001502:	4543      	cmp	r3, r8
 8001504:	d2e6      	bcs.n	80014d4 <__udivmoddi4+0x264>
 8001506:	ebb8 0e02 	subs.w	lr, r8, r2
 800150a:	eb69 050c 	sbc.w	r5, r9, ip
 800150e:	3801      	subs	r0, #1
 8001510:	e7e0      	b.n	80014d4 <__udivmoddi4+0x264>
 8001512:	4628      	mov	r0, r5
 8001514:	e7d3      	b.n	80014be <__udivmoddi4+0x24e>
 8001516:	4611      	mov	r1, r2
 8001518:	e78c      	b.n	8001434 <__udivmoddi4+0x1c4>
 800151a:	4681      	mov	r9, r0
 800151c:	e7b9      	b.n	8001492 <__udivmoddi4+0x222>
 800151e:	4608      	mov	r0, r1
 8001520:	e773      	b.n	800140a <__udivmoddi4+0x19a>
 8001522:	4608      	mov	r0, r1
 8001524:	e749      	b.n	80013ba <__udivmoddi4+0x14a>
 8001526:	f1ac 0c02 	sub.w	ip, ip, #2
 800152a:	443d      	add	r5, r7
 800152c:	e713      	b.n	8001356 <__udivmoddi4+0xe6>
 800152e:	3802      	subs	r0, #2
 8001530:	443c      	add	r4, r7
 8001532:	e724      	b.n	800137e <__udivmoddi4+0x10e>

08001534 <__aeabi_idiv0>:
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop

08001538 <_ZN6I2Cdev7readBitEhhhPh>:
 * @param regAddr Register regAddr to read from
 * @param bitNum Bit position to read (0-7)
 * @param data Container for single bit value
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af04      	add	r7, sp, #16
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	460b      	mov	r3, r1
 8001546:	71bb      	strb	r3, [r7, #6]
 8001548:	4613      	mov	r3, r2
 800154a:	717b      	strb	r3, [r7, #5]
  uint8_t buffer;
  sendBuf[0] = regAddr;
 800154c:	4a1a      	ldr	r2, [pc, #104]	; (80015b8 <_ZN6I2Cdev7readBitEhhhPh+0x80>)
 800154e:	79bb      	ldrb	r3, [r7, #6]
 8001550:	7013      	strb	r3, [r2, #0]
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	b299      	uxth	r1, r3
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	b29a      	uxth	r2, r3
 800155a:	2301      	movs	r3, #1
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	2301      	movs	r3, #1
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	f107 030e 	add.w	r3, r7, #14
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	4814      	ldr	r0, [pc, #80]	; (80015bc <_ZN6I2Cdev7readBitEhhhPh+0x84>)
 800156c:	f005 fd1a 	bl	8006fa4 <HAL_I2C_Mem_Read>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf14      	ite	ne
 8001576:	2301      	movne	r3, #1
 8001578:	2300      	moveq	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <_ZN6I2Cdev7readBitEhhhPh+0x4e>
	  MX_I2C1_Init();
 8001580:	f003 f8fe 	bl	8004780 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001584:	e7e5      	b.n	8001552 <_ZN6I2Cdev7readBitEhhhPh+0x1a>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001586:	2301      	movs	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
  *data = buffer & (1 << bitNum);
 800158a:	797b      	ldrb	r3, [r7, #5]
 800158c:	2201      	movs	r2, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	b25a      	sxtb	r2, r3
 8001594:	7bbb      	ldrb	r3, [r7, #14]
 8001596:	b25b      	sxtb	r3, r3
 8001598:	4013      	ands	r3, r2
 800159a:	b25b      	sxtb	r3, r3
 800159c:	b2da      	uxtb	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	701a      	strb	r2, [r3, #0]
  return response == BCM2835_I2C_REASON_OK ;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	b25b      	sxtb	r3, r3
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200003a8 	.word	0x200003a8
 80015bc:	200006b4 	.word	0x200006b4

080015c0 <_ZN6I2Cdev8readBitsEhhhhPh>:
 * @param bitStart First bit position to read (0-7)
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data) {
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af04      	add	r7, sp, #16
 80015c6:	4604      	mov	r4, r0
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4623      	mov	r3, r4
 80015d0:	71fb      	strb	r3, [r7, #7]
 80015d2:	4603      	mov	r3, r0
 80015d4:	71bb      	strb	r3, [r7, #6]
 80015d6:	460b      	mov	r3, r1
 80015d8:	717b      	strb	r3, [r7, #5]
 80015da:	4613      	mov	r3, r2
 80015dc:	713b      	strb	r3, [r7, #4]
  // 01101001 read byte
  // 76543210 bit numbers
  //    xxx   args: bitStart=4, length=3
  //    010   masked
  //   -> 010 shifted
  sendBuf[0] = regAddr;
 80015de:	4a25      	ldr	r2, [pc, #148]	; (8001674 <_ZN6I2Cdev8readBitsEhhhhPh+0xb4>)
 80015e0:	79bb      	ldrb	r3, [r7, #6]
 80015e2:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	b299      	uxth	r1, r3
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	2301      	movs	r3, #1
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	2301      	movs	r3, #1
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2301      	movs	r3, #1
 80015fc:	481e      	ldr	r0, [pc, #120]	; (8001678 <_ZN6I2Cdev8readBitsEhhhhPh+0xb8>)
 80015fe:	f005 fcd1 	bl	8006fa4 <HAL_I2C_Mem_Read>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf14      	ite	ne
 8001608:	2301      	movne	r3, #1
 800160a:	2300      	moveq	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <_ZN6I2Cdev8readBitsEhhhhPh+0x58>
  	  MX_I2C1_Init();
 8001612:	f003 f8b5 	bl	8004780 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001616:	e7e5      	b.n	80015e4 <_ZN6I2Cdev8readBitsEhhhhPh+0x24>
    }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
  uint8_t b = buffer;
 800161c:	7b3b      	ldrb	r3, [r7, #12]
 800161e:	73bb      	strb	r3, [r7, #14]
  if (response == BCM2835_I2C_REASON_OK) {
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d11a      	bne.n	800165c <_ZN6I2Cdev8readBitsEhhhhPh+0x9c>
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001626:	793b      	ldrb	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	1e5a      	subs	r2, r3, #1
 8001630:	7979      	ldrb	r1, [r7, #5]
 8001632:	793b      	ldrb	r3, [r7, #4]
 8001634:	1acb      	subs	r3, r1, r3
 8001636:	3301      	adds	r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	737b      	strb	r3, [r7, #13]
    b &= mask;
 800163e:	7bba      	ldrb	r2, [r7, #14]
 8001640:	7b7b      	ldrb	r3, [r7, #13]
 8001642:	4013      	ands	r3, r2
 8001644:	73bb      	strb	r3, [r7, #14]
    b >>= (bitStart - length + 1);
 8001646:	7bba      	ldrb	r2, [r7, #14]
 8001648:	7979      	ldrb	r1, [r7, #5]
 800164a:	793b      	ldrb	r3, [r7, #4]
 800164c:	1acb      	subs	r3, r1, r3
 800164e:	3301      	adds	r3, #1
 8001650:	fa42 f303 	asr.w	r3, r2, r3
 8001654:	73bb      	strb	r3, [r7, #14]
    *data = b;
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	7bba      	ldrb	r2, [r7, #14]
 800165a:	701a      	strb	r2, [r3, #0]
  }
  return response == BCM2835_I2C_REASON_OK;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	2b01      	cmp	r3, #1
 8001660:	bf0c      	ite	eq
 8001662:	2301      	moveq	r3, #1
 8001664:	2300      	movne	r3, #0
 8001666:	b2db      	uxtb	r3, r3
 8001668:	b25b      	sxtb	r3, r3
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}
 8001672:	bf00      	nop
 8001674:	200003a8 	.word	0x200003a8
 8001678:	200006b4 	.word	0x200006b4

0800167c <_ZN6I2Cdev8readByteEhhPh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af04      	add	r7, sp, #16
 8001682:	4603      	mov	r3, r0
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	460b      	mov	r3, r1
 800168a:	71bb      	strb	r3, [r7, #6]
  sendBuf[0] = regAddr;
 800168c:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <_ZN6I2Cdev8readByteEhhPh+0x6c>)
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	b299      	uxth	r1, r3
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	b29a      	uxth	r2, r3
 800169a:	2301      	movs	r3, #1
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	2301      	movs	r3, #1
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	f107 030e 	add.w	r3, r7, #14
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	4810      	ldr	r0, [pc, #64]	; (80016ec <_ZN6I2Cdev8readByteEhhPh+0x70>)
 80016ac:	f005 fc7a 	bl	8006fa4 <HAL_I2C_Mem_Read>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <_ZN6I2Cdev8readByteEhhPh+0x4a>
    MX_I2C1_Init();
 80016c0:	f003 f85e 	bl	8004780 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80016c4:	e7e5      	b.n	8001692 <_ZN6I2Cdev8readByteEhhPh+0x16>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
  data[0] = buffer;
 80016ca:	7bba      	ldrb	r2, [r7, #14]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	701a      	strb	r2, [r3, #0]
  return response == BCM2835_I2C_REASON_OK;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	bf0c      	ite	eq
 80016d6:	2301      	moveq	r3, #1
 80016d8:	2300      	movne	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	b25b      	sxtb	r3, r3
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200003a8 	.word	0x200003a8
 80016ec:	200006b4 	.word	0x200006b4

080016f0 <_ZN6I2Cdev9readBytesEhhhPh>:
 * @param regAddr First register regAddr to read from
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @return I2C_TransferReturn_TypeDef http://downloads.energymicro.com/documentation/doxygen/group__I2C.html
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data) {
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af04      	add	r7, sp, #16
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	460b      	mov	r3, r1
 80016fe:	71bb      	strb	r3, [r7, #6]
 8001700:	4613      	mov	r3, r2
 8001702:	717b      	strb	r3, [r7, #5]
  uint8_t response = BCM2835_I2C_REASON_OK;
  int i ;
  for (i = 0; i < length ; i++) {
    data[i] = (uint8_t) buffer[i];
  }
  return response == BCM2835_I2C_REASON_OK;
 8001704:	466b      	mov	r3, sp
 8001706:	461d      	mov	r5, r3
  sendBuf[0] = regAddr;
 8001708:	4a32      	ldr	r2, [pc, #200]	; (80017d4 <_ZN6I2Cdev9readBytesEhhhPh+0xe4>)
 800170a:	79bb      	ldrb	r3, [r7, #6]
 800170c:	7013      	strb	r3, [r2, #0]
  uint8_t buffer[length];
 800170e:	797b      	ldrb	r3, [r7, #5]
 8001710:	1e5c      	subs	r4, r3, #1
 8001712:	613c      	str	r4, [r7, #16]
 8001714:	4623      	mov	r3, r4
 8001716:	3301      	adds	r3, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	00cb      	lsls	r3, r1, #3
 8001728:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800172c:	00c2      	lsls	r2, r0, #3
 800172e:	4623      	mov	r3, r4
 8001730:	3301      	adds	r3, #1
 8001732:	4618      	mov	r0, r3
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	00cb      	lsls	r3, r1, #3
 8001742:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001746:	00c2      	lsls	r2, r0, #3
 8001748:	4623      	mov	r3, r4
 800174a:	3301      	adds	r3, #1
 800174c:	3307      	adds	r3, #7
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	ebad 0d03 	sub.w	sp, sp, r3
 8001756:	ab04      	add	r3, sp, #16
 8001758:	3300      	adds	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	b299      	uxth	r1, r3
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	b298      	uxth	r0, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	797a      	ldrb	r2, [r7, #5]
 8001768:	b292      	uxth	r2, r2
 800176a:	2401      	movs	r4, #1
 800176c:	9402      	str	r4, [sp, #8]
 800176e:	9201      	str	r2, [sp, #4]
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	4602      	mov	r2, r0
 8001776:	4818      	ldr	r0, [pc, #96]	; (80017d8 <_ZN6I2Cdev9readBytesEhhhPh+0xe8>)
 8001778:	f005 fc14 	bl	8006fa4 <HAL_I2C_Mem_Read>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <_ZN6I2Cdev9readBytesEhhhPh+0xa2>
    MX_I2C1_Init();
 800178c:	f002 fff8 	bl	8004780 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 8001790:	e7e4      	b.n	800175c <_ZN6I2Cdev9readBytesEhhhPh+0x6c>
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001792:	2301      	movs	r3, #1
 8001794:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < length ; i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	797b      	ldrb	r3, [r7, #5]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	429a      	cmp	r2, r3
 80017a0:	da0b      	bge.n	80017ba <_ZN6I2Cdev9readBytesEhhhPh+0xca>
    data[i] = (uint8_t) buffer[i];
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	440a      	add	r2, r1
 80017ae:	7812      	ldrb	r2, [r2, #0]
 80017b0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < length ; i++) {
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e7ef      	b.n	800179a <_ZN6I2Cdev9readBytesEhhhPh+0xaa>
  return response == BCM2835_I2C_REASON_OK;
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	46ad      	mov	sp, r5
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bdb0      	pop	{r4, r5, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200003a8 	.word	0x200003a8
 80017d8:	200006b4 	.word	0x200006b4

080017dc <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af04      	add	r7, sp, #16
 80017e2:	4604      	mov	r4, r0
 80017e4:	4608      	mov	r0, r1
 80017e6:	4611      	mov	r1, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	4623      	mov	r3, r4
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	4603      	mov	r3, r0
 80017f0:	71bb      	strb	r3, [r7, #6]
 80017f2:	460b      	mov	r3, r1
 80017f4:	717b      	strb	r3, [r7, #5]
 80017f6:	4613      	mov	r3, r2
 80017f8:	713b      	strb	r3, [r7, #4]

  //first reading registery value
  sendBuf[0] = regAddr;
 80017fa:	4a34      	ldr	r2, [pc, #208]	; (80018cc <_ZN6I2Cdev8writeBitEhhhh+0xf0>)
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	b299      	uxth	r1, r3
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	b29a      	uxth	r2, r3
 8001808:	2301      	movs	r3, #1
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	2301      	movs	r3, #1
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	f107 030e 	add.w	r3, r7, #14
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	482d      	ldr	r0, [pc, #180]	; (80018d0 <_ZN6I2Cdev8writeBitEhhhh+0xf4>)
 800181a:	f005 fbc3 	bl	8006fa4 <HAL_I2C_Mem_Read>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf14      	ite	ne
 8001824:	2301      	movne	r3, #1
 8001826:	2300      	moveq	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <_ZN6I2Cdev8writeBitEhhhh+0x58>
    MX_I2C1_Init();
 800182e:	f002 ffa7 	bl	8004780 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001832:	e7e5      	b.n	8001800 <_ZN6I2Cdev8writeBitEhhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d13b      	bne.n	80018b6 <_ZN6I2Cdev8writeBitEhhhh+0xda>
    uint8_t b = buffer ;
 800183e:	7bbb      	ldrb	r3, [r7, #14]
 8001840:	737b      	strb	r3, [r7, #13]
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8001842:	793b      	ldrb	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00a      	beq.n	800185e <_ZN6I2Cdev8writeBitEhhhh+0x82>
 8001848:	797b      	ldrb	r3, [r7, #5]
 800184a:	2201      	movs	r2, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	b25a      	sxtb	r2, r3
 8001852:	7b7b      	ldrb	r3, [r7, #13]
 8001854:	b25b      	sxtb	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b25b      	sxtb	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	e00b      	b.n	8001876 <_ZN6I2Cdev8writeBitEhhhh+0x9a>
 800185e:	797b      	ldrb	r3, [r7, #5]
 8001860:	2201      	movs	r2, #1
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	b25b      	sxtb	r3, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	b25a      	sxtb	r2, r3
 800186c:	7b7b      	ldrb	r3, [r7, #13]
 800186e:	b25b      	sxtb	r3, r3
 8001870:	4013      	ands	r3, r2
 8001872:	b25b      	sxtb	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	737b      	strb	r3, [r7, #13]
    sendBuf[1] = b ;
 8001878:	7b7a      	ldrb	r2, [r7, #13]
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <_ZN6I2Cdev8writeBitEhhhh+0xf0>)
 800187c:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	b299      	uxth	r1, r3
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	b29a      	uxth	r2, r3
 8001886:	2301      	movs	r3, #1
 8001888:	9302      	str	r3, [sp, #8]
 800188a:	2301      	movs	r3, #1
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	f107 030d 	add.w	r3, r7, #13
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2301      	movs	r3, #1
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <_ZN6I2Cdev8writeBitEhhhh+0xf4>)
 8001898:	f005 fa8a 	bl	8006db0 <HAL_I2C_Mem_Write>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf14      	ite	ne
 80018a2:	2301      	movne	r3, #1
 80018a4:	2300      	moveq	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <_ZN6I2Cdev8writeBitEhhhh+0xd6>
    	MX_I2C1_Init();
 80018ac:	f002 ff68 	bl	8004780 <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80018b0:	e7e5      	b.n	800187e <_ZN6I2Cdev8writeBitEhhhh+0xa2>
    }
    response = BCM2835_I2C_REASON_OK;
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
  }
  return response == BCM2835_I2C_REASON_OK;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200003a8 	.word	0x200003a8
 80018d0:	200006b4 	.word	0x200006b4

080018d4 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b089      	sub	sp, #36	; 0x24
 80018d8:	af04      	add	r7, sp, #16
 80018da:	4604      	mov	r4, r0
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	4603      	mov	r3, r0
 80018e8:	71bb      	strb	r3, [r7, #6]
 80018ea:	460b      	mov	r3, r1
 80018ec:	717b      	strb	r3, [r7, #5]
 80018ee:	4613      	mov	r3, r2
 80018f0:	713b      	strb	r3, [r7, #4]
  // 10101111 original value (sample)
  // 10100011 original & ~mask
  // 10101011 masked | value

  //first reading registery value
  sendBuf[0] = regAddr;
 80018f2:	4a3c      	ldr	r2, [pc, #240]	; (80019e4 <_ZN6I2Cdev9writeBitsEhhhhh+0x110>)
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	b299      	uxth	r1, r3
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	2301      	movs	r3, #1
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	2301      	movs	r3, #1
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	f107 030d 	add.w	r3, r7, #13
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2301      	movs	r3, #1
 8001910:	4835      	ldr	r0, [pc, #212]	; (80019e8 <_ZN6I2Cdev9writeBitsEhhhhh+0x114>)
 8001912:	f005 fb47 	bl	8006fa4 <HAL_I2C_Mem_Read>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf14      	ite	ne
 800191c:	2301      	movne	r3, #1
 800191e:	2300      	moveq	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <_ZN6I2Cdev9writeBitsEhhhhh+0x58>
    MX_I2C1_Init();
 8001926:	f002 ff2b 	bl	8004780 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800192a:	e7e5      	b.n	80018f8 <_ZN6I2Cdev9writeBitsEhhhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d14c      	bne.n	80019d0 <_ZN6I2Cdev9writeBitsEhhhhh+0xfc>
    uint8_t b = buffer;
 8001936:	7b7b      	ldrb	r3, [r7, #13]
 8001938:	733b      	strb	r3, [r7, #12]
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800193a:	793b      	ldrb	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	7979      	ldrb	r1, [r7, #5]
 8001946:	793b      	ldrb	r3, [r7, #4]
 8001948:	1acb      	subs	r3, r1, r3
 800194a:	3301      	adds	r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	73bb      	strb	r3, [r7, #14]
    data <<= (bitStart - length + 1); // shift data into correct position
 8001952:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001956:	7979      	ldrb	r1, [r7, #5]
 8001958:	793b      	ldrb	r3, [r7, #4]
 800195a:	1acb      	subs	r3, r1, r3
 800195c:	3301      	adds	r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	f887 3020 	strb.w	r3, [r7, #32]
    data &= mask; // zero all non-important bits in data
 8001966:	f897 2020 	ldrb.w	r2, [r7, #32]
 800196a:	7bbb      	ldrb	r3, [r7, #14]
 800196c:	4013      	ands	r3, r2
 800196e:	f887 3020 	strb.w	r3, [r7, #32]
    b &= ~(mask); // zero all important bits in existing byte
 8001972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001976:	43db      	mvns	r3, r3
 8001978:	b25a      	sxtb	r2, r3
 800197a:	7b3b      	ldrb	r3, [r7, #12]
 800197c:	b25b      	sxtb	r3, r3
 800197e:	4013      	ands	r3, r2
 8001980:	b25b      	sxtb	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	733b      	strb	r3, [r7, #12]
    b |= data; // combine data with existing byte
 8001986:	7b3a      	ldrb	r2, [r7, #12]
 8001988:	f897 3020 	ldrb.w	r3, [r7, #32]
 800198c:	4313      	orrs	r3, r2
 800198e:	b2db      	uxtb	r3, r3
 8001990:	733b      	strb	r3, [r7, #12]
    sendBuf[1] = b ;
 8001992:	7b3a      	ldrb	r2, [r7, #12]
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <_ZN6I2Cdev9writeBitsEhhhhh+0x110>)
 8001996:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	b299      	uxth	r1, r3
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	2301      	movs	r3, #1
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	2301      	movs	r3, #1
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2301      	movs	r3, #1
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <_ZN6I2Cdev9writeBitsEhhhhh+0x114>)
 80019b2:	f005 f9fd 	bl	8006db0 <HAL_I2C_Mem_Write>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf14      	ite	ne
 80019bc:	2301      	movne	r3, #1
 80019be:	2300      	moveq	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <_ZN6I2Cdev9writeBitsEhhhhh+0xf8>
       MX_I2C1_Init();
 80019c6:	f002 fedb 	bl	8004780 <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80019ca:	e7e5      	b.n	8001998 <_ZN6I2Cdev9writeBitsEhhhhh+0xc4>
    }
    response = BCM2835_I2C_REASON_OK;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
    }
  return response == BCM2835_I2C_REASON_OK;
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	bf0c      	ite	eq
 80019d6:	2301      	moveq	r3, #1
 80019d8:	2300      	movne	r3, #0
 80019da:	b2db      	uxtb	r3, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	200003a8 	.word	0x200003a8
 80019e8:	200006b4 	.word	0x200006b4

080019ec <_ZN6I2Cdev9writeByteEhhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af04      	add	r7, sp, #16
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	460b      	mov	r3, r1
 80019f8:	71bb      	strb	r3, [r7, #6]
 80019fa:	4613      	mov	r3, r2
 80019fc:	717b      	strb	r3, [r7, #5]

  sendBuf[0] = regAddr;
 80019fe:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <_ZN6I2Cdev9writeByteEhhh+0x68>)
 8001a00:	79bb      	ldrb	r3, [r7, #6]
 8001a02:	7013      	strb	r3, [r2, #0]
  sendBuf[1] = data;
 8001a04:	797a      	ldrb	r2, [r7, #5]
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <_ZN6I2Cdev9writeByteEhhh+0x68>)
 8001a08:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	b299      	uxth	r1, r3
 8001a0e:	79bb      	ldrb	r3, [r7, #6]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	2301      	movs	r3, #1
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	2301      	movs	r3, #1
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	1d7b      	adds	r3, r7, #5
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	480d      	ldr	r0, [pc, #52]	; (8001a58 <_ZN6I2Cdev9writeByteEhhh+0x6c>)
 8001a22:	f005 f9c5 	bl	8006db0 <HAL_I2C_Mem_Write>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <_ZN6I2Cdev9writeByteEhhh+0x50>
     MX_I2C1_Init();
 8001a36:	f002 fea3 	bl	8004780 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001a3a:	e7e6      	b.n	8001a0a <_ZN6I2Cdev9writeByteEhhh+0x1e>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200003a8 	.word	0x200003a8
 8001a58:	200006b4 	.word	0x200006b4

08001a5c <_ZN6I2Cdev9writeWordEhht>:
    data[i] = (buffer[i*2] << 8) | buffer[i*2+1] ;
  }
  return  response == BCM2835_I2C_REASON_OK ;
}

bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af04      	add	r7, sp, #16
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
 8001a66:	460b      	mov	r3, r1
 8001a68:	71bb      	strb	r3, [r7, #6]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	80bb      	strh	r3, [r7, #4]

  sendBuf[0] = (uint8_t) (data >> 8); //MSByte
 8001a6e:	88bb      	ldrh	r3, [r7, #4]
 8001a70:	121b      	asrs	r3, r3, #8
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <_ZN6I2Cdev9writeWordEhht+0x70>)
 8001a76:	701a      	strb	r2, [r3, #0]
  sendBuf[1] = (uint8_t) (data >> 0); //LSByte
 8001a78:	88bb      	ldrh	r3, [r7, #4]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <_ZN6I2Cdev9writeWordEhht+0x70>)
 8001a7e:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	b299      	uxth	r1, r3
 8001a84:	79bb      	ldrb	r3, [r7, #6]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	2301      	movs	r3, #1
 8001a8a:	9302      	str	r3, [sp, #8]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <_ZN6I2Cdev9writeWordEhht+0x70>)
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2301      	movs	r3, #1
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <_ZN6I2Cdev9writeWordEhht+0x74>)
 8001a98:	f005 f98a 	bl	8006db0 <HAL_I2C_Mem_Write>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	2300      	moveq	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <_ZN6I2Cdev9writeWordEhht+0x56>
     MX_I2C1_Init();
 8001aac:	f002 fe68 	bl	8004780 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 8001ab0:	e7e6      	b.n	8001a80 <_ZN6I2Cdev9writeWordEhht+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200003a8 	.word	0x200003a8
 8001ad0:	200006b4 	.word	0x200006b4

08001ad4 <_ZN6I2Cdev10writeBytesEhhhPh>:

bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af04      	add	r7, sp, #16
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	71bb      	strb	r3, [r7, #6]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  for (i = 0; i < length; i++) {
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	797b      	ldrb	r3, [r7, #5]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d20a      	bcs.n	8001b0a <_ZN6I2Cdev10writeBytesEhhhPh+0x36>
    sendBuf[i] = data[i] ;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	441a      	add	r2, r3
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	7811      	ldrb	r1, [r2, #0]
 8001afe:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <_ZN6I2Cdev10writeBytesEhhhPh+0x84>)
 8001b00:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < length; i++) {
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	3301      	adds	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e7f0      	b.n	8001aec <_ZN6I2Cdev10writeBytesEhhhPh+0x18>
  }
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	b299      	uxth	r1, r3
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	797b      	ldrb	r3, [r7, #5]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2001      	movs	r0, #1
 8001b18:	9002      	str	r0, [sp, #8]
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <_ZN6I2Cdev10writeBytesEhhhPh+0x84>)
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2301      	movs	r3, #1
 8001b22:	480e      	ldr	r0, [pc, #56]	; (8001b5c <_ZN6I2Cdev10writeBytesEhhhPh+0x88>)
 8001b24:	f005 f944 	bl	8006db0 <HAL_I2C_Mem_Write>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf14      	ite	ne
 8001b2e:	2301      	movne	r3, #1
 8001b30:	2300      	moveq	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <_ZN6I2Cdev10writeBytesEhhhPh+0x6a>
     MX_I2C1_Init();
 8001b38:	f002 fe22 	bl	8004780 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001b3c:	e7e5      	b.n	8001b0a <_ZN6I2Cdev10writeBytesEhhhPh+0x36>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73bb      	strb	r3, [r7, #14]
  return response == BCM2835_I2C_REASON_OK ;
 8001b42:	7bbb      	ldrb	r3, [r7, #14]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200003a8 	.word	0x200003a8
 8001b5c:	200006b4 	.word	0x200006b4

08001b60 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f00c f949 	bl	800de00 <asinf>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f00b ffc3 	bl	800db0c <atanf>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f00c f8c3 	bl	800dd24 <cosf>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f00c f8ef 	bl	800dd94 <sinf>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f00c f93f 	bl	800de4c <sqrtf>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_ZN26MPU6050_6Axis_MotionApps20C1EhPv>:



class MPU6050_6Axis_MotionApps20 : public MPU6050 {
    public:
        MPU6050_6Axis_MotionApps20(uint8_t address=MPU6050_DEFAULT_ADDRESS, void *wireObj=0) : MPU6050(address) { }
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	460b      	mov	r3, r1
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	72fb      	strb	r3, [r7, #11]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	7afa      	ldrb	r2, [r7, #11]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fd2d 	bl	800264c <_ZN7MPU6050C1Eh>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_Z17MPU6050_resetFIFOv>:
 * @brief Clears the FIFO (First In First Out) of the MPU6050
 * 
 * --Custom Method!
 */
void MPU6050_resetFIFO()
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  //mpu.setFIFOEnabled(false);
  mpu.resetFIFO();
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <_Z17MPU6050_resetFIFOv+0x10>)
 8001c02:	f000 fe5e 	bl	80028c2 <_ZN7MPU60509resetFIFOEv>
  //mpu.setFIFOEnabled(true);
  //mpu.getIntStatus();
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200004bc 	.word	0x200004bc

08001c10 <_Z28MPU6050_WaitForQuaternionSetv>:
 * @brief Waits until a new Quaternion-set is available in the FIFO
 * 
 * --Custom Method!
 */
void MPU6050_WaitForQuaternionSet()
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  FIFOCounter = mpu.getFIFOCount();
 8001c14:	480a      	ldr	r0, [pc, #40]	; (8001c40 <_Z28MPU6050_WaitForQuaternionSetv+0x30>)
 8001c16:	f000 fea5 	bl	8002964 <_ZN7MPU605012getFIFOCountEv>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <_Z28MPU6050_WaitForQuaternionSetv+0x34>)
 8001c20:	801a      	strh	r2, [r3, #0]
  while (FIFOCounter < 42) FIFOCounter = mpu.getFIFOCount();  //wait until there are more than 42 bytes in the FIFO
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <_Z28MPU6050_WaitForQuaternionSetv+0x34>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	2b29      	cmp	r3, #41	; 0x29
 8001c28:	d807      	bhi.n	8001c3a <_Z28MPU6050_WaitForQuaternionSetv+0x2a>
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <_Z28MPU6050_WaitForQuaternionSetv+0x30>)
 8001c2c:	f000 fe9a 	bl	8002964 <_ZN7MPU605012getFIFOCountEv>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <_Z28MPU6050_WaitForQuaternionSetv+0x34>)
 8001c36:	801a      	strh	r2, [r3, #0]
 8001c38:	e7f3      	b.n	8001c22 <_Z28MPU6050_WaitForQuaternionSetv+0x12>
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200004bc 	.word	0x200004bc
 8001c44:	200004b8 	.word	0x200004b8

08001c48 <_Z28MPU6050_ConvertToQuaternionsv>:
 * @brief Reads a Quaternion-set from the FIFO and assembles the data to W,X,Y,Z
 * 
 * --Custom Method!
 */
void MPU6050_ConvertToQuaternions()
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  if ((FIFOCounter == 42) | (FIFOCounter == 84))
 8001c4c:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	2b2a      	cmp	r3, #42	; 0x2a
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	2b54      	cmp	r3, #84	; 0x54
 8001c60:	bf0c      	ite	eq
 8001c62:	2301      	moveq	r3, #1
 8001c64:	2300      	movne	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d070      	beq.n	8001d52 <_Z28MPU6050_ConvertToQuaternionsv+0x10a>
  {
    mpu.getFIFOBytes(MPU6050_RX_buf, 16);
 8001c70:	2210      	movs	r2, #16
 8001c72:	493a      	ldr	r1, [pc, #232]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c74:	483a      	ldr	r0, [pc, #232]	; (8001d60 <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001c76:	f000 fe8f 	bl	8002998 <_ZN7MPU605012getFIFOBytesEPhh>
    MPUoutputQuaternion[0] = (float)(((int32_t)MPU6050_RX_buf[0] << 24)  | ((int32_t)MPU6050_RX_buf[1] << 16)  | ((int32_t)MPU6050_RX_buf[2] << 8)  | MPU6050_RX_buf[3 ]) / 1073741824;
 8001c7a:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	061a      	lsls	r2, r3, #24
 8001c80:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c82:	785b      	ldrb	r3, [r3, #1]
 8001c84:	041b      	lsls	r3, r3, #16
 8001c86:	431a      	orrs	r2, r3
 8001c88:	4b34      	ldr	r3, [pc, #208]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c8a:	789b      	ldrb	r3, [r3, #2]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	4a32      	ldr	r2, [pc, #200]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c92:	78d2      	ldrb	r2, [r2, #3]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f85c 	bl	8000d54 <__aeabi_i2f>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f95e 	bl	8000f64 <__aeabi_fdiv>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <_Z28MPU6050_ConvertToQuaternionsv+0x11c>)
 8001cae:	601a      	str	r2, [r3, #0]
    MPUoutputQuaternion[1] = (float)(((int32_t)MPU6050_RX_buf[4] << 24)  | ((int32_t)MPU6050_RX_buf[5] << 16)  | ((int32_t)MPU6050_RX_buf[6] << 8)  | MPU6050_RX_buf[7 ]) / 1073741824;
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cb2:	791b      	ldrb	r3, [r3, #4]
 8001cb4:	061a      	lsls	r2, r3, #24
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cb8:	795b      	ldrb	r3, [r3, #5]
 8001cba:	041b      	lsls	r3, r3, #16
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cc0:	799b      	ldrb	r3, [r3, #6]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cc8:	79d2      	ldrb	r2, [r2, #7]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f841 	bl	8000d54 <__aeabi_i2f>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff f943 	bl	8000f64 <__aeabi_fdiv>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <_Z28MPU6050_ConvertToQuaternionsv+0x11c>)
 8001ce4:	605a      	str	r2, [r3, #4]
    MPUoutputQuaternion[2] = (float)(((int32_t)MPU6050_RX_buf[8] << 24)  | ((int32_t)MPU6050_RX_buf[9] << 16)  | ((int32_t)MPU6050_RX_buf[10] << 8) | MPU6050_RX_buf[11]) / 1073741824;
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001ce8:	7a1b      	ldrb	r3, [r3, #8]
 8001cea:	061a      	lsls	r2, r3, #24
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cee:	7a5b      	ldrb	r3, [r3, #9]
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cf6:	7a9b      	ldrb	r3, [r3, #10]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cfe:	7ad2      	ldrb	r2, [r2, #11]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f826 	bl	8000d54 <__aeabi_i2f>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f928 	bl	8000f64 <__aeabi_fdiv>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <_Z28MPU6050_ConvertToQuaternionsv+0x11c>)
 8001d1a:	609a      	str	r2, [r3, #8]
    MPUoutputQuaternion[3] = (float)(((int32_t)MPU6050_RX_buf[12] << 24) | ((int32_t)MPU6050_RX_buf[13] << 16) | ((int32_t)MPU6050_RX_buf[14] << 8) | MPU6050_RX_buf[15]) / 1073741824;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d1e:	7b1b      	ldrb	r3, [r3, #12]
 8001d20:	061a      	lsls	r2, r3, #24
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d24:	7b5b      	ldrb	r3, [r3, #13]
 8001d26:	041b      	lsls	r3, r3, #16
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d2c:	7b9b      	ldrb	r3, [r3, #14]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	4313      	orrs	r3, r2
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d34:	7bd2      	ldrb	r2, [r2, #15]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f80b 	bl	8000d54 <__aeabi_i2f>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff f90d 	bl	8000f64 <__aeabi_fdiv>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <_Z28MPU6050_ConvertToQuaternionsv+0x11c>)
 8001d50:	60da      	str	r2, [r3, #12]
  }
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200004b8 	.word	0x200004b8
 8001d5c:	200004a8 	.word	0x200004a8
 8001d60:	200004bc 	.word	0x200004bc
 8001d64:	20000564 	.word	0x20000564

08001d68 <_Z27MPU6050_GetOriginQuaternionv>:
 * @brief Saves the current MPU6050 raw Quaternion as the Origin Quaternion
 * 
 * --Custom Method!
 */
void MPU6050_GetOriginQuaternion()
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  OriginQuaternion[0] = MPUoutputQuaternion[0];
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d72:	6013      	str	r3, [r2, #0]
  OriginQuaternion[1] = MPUoutputQuaternion[1];
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d7a:	6053      	str	r3, [r2, #4]
  OriginQuaternion[2] = MPUoutputQuaternion[2];
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d82:	6093      	str	r3, [r2, #8]
  OriginQuaternion[3] = MPUoutputQuaternion[3];
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d8a:	60d3      	str	r3, [r2, #12]
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	20000564 	.word	0x20000564
 8001d98:	20000574 	.word	0x20000574

08001d9c <_Z28update_FrameOriginQuaternionv>:
 * It does this to then be able to apply that Quaternion rotation to the W-Quaternion
 * 
 * --Custom Method!
 */
void update_FrameOriginQuaternion()//NOTDONE rename and add deadzones
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
  updateQuaternion[0] = cos((float)SBUS_Channels[3] / 10000);                   //create rotation Quaternion
 8001da2:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <_Z28update_FrameOriginQuaternionv+0xe4>)
 8001da4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe ffd3 	bl	8000d54 <__aeabi_i2f>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4934      	ldr	r1, [pc, #208]	; (8001e84 <_Z28update_FrameOriginQuaternionv+0xe8>)
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff f8d6 	bl	8000f64 <__aeabi_fdiv>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fee8 	bl	8001b90 <_ZSt3cosf>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4a31      	ldr	r2, [pc, #196]	; (8001e88 <_Z28update_FrameOriginQuaternionv+0xec>)
 8001dc4:	6013      	str	r3, [r2, #0]
  updateQuaternion[1] = (float)sin((float)SBUS_Channels[0] / (float)10000);
 8001dc6:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <_Z28update_FrameOriginQuaternionv+0xe4>)
 8001dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ffc1 	bl	8000d54 <__aeabi_i2f>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	492b      	ldr	r1, [pc, #172]	; (8001e84 <_Z28update_FrameOriginQuaternionv+0xe8>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f8c4 	bl	8000f64 <__aeabi_fdiv>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fee2 	bl	8001ba8 <_ZSt3sinf>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4a28      	ldr	r2, [pc, #160]	; (8001e88 <_Z28update_FrameOriginQuaternionv+0xec>)
 8001de8:	6053      	str	r3, [r2, #4]
  updateQuaternion[2] = (float)sin((float)SBUS_Channels[1] / (float)10000);
 8001dea:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <_Z28update_FrameOriginQuaternionv+0xe4>)
 8001dec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe ffaf 	bl	8000d54 <__aeabi_i2f>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4922      	ldr	r1, [pc, #136]	; (8001e84 <_Z28update_FrameOriginQuaternionv+0xe8>)
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff f8b2 	bl	8000f64 <__aeabi_fdiv>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fed0 	bl	8001ba8 <_ZSt3sinf>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <_Z28update_FrameOriginQuaternionv+0xec>)
 8001e0c:	6093      	str	r3, [r2, #8]
  updateQuaternion[3] = sin((float)SBUS_Channels[3] / 10000);
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <_Z28update_FrameOriginQuaternionv+0xe4>)
 8001e10:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe ff9d 	bl	8000d54 <__aeabi_i2f>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4919      	ldr	r1, [pc, #100]	; (8001e84 <_Z28update_FrameOriginQuaternionv+0xe8>)
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f8a0 	bl	8000f64 <__aeabi_fdiv>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff febe 	bl	8001ba8 <_ZSt3sinf>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4a16      	ldr	r2, [pc, #88]	; (8001e88 <_Z28update_FrameOriginQuaternionv+0xec>)
 8001e30:	60d3      	str	r3, [r2, #12]

  float *p3 = QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(FrameOriginQuaternion, LoopWQuaternion)), updateQuaternion));
 8001e32:	4916      	ldr	r1, [pc, #88]	; (8001e8c <_Z28update_FrameOriginQuaternionv+0xf0>)
 8001e34:	4816      	ldr	r0, [pc, #88]	; (8001e90 <_Z28update_FrameOriginQuaternionv+0xf4>)
 8001e36:	f000 fb81 	bl	800253c <_Z15QuaternionSLERPPfS_>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fb8f 	bl	8002560 <_Z19QuaternionNormalizePf>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4910      	ldr	r1, [pc, #64]	; (8001e88 <_Z28update_FrameOriginQuaternionv+0xec>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fa4a 	bl	80022e0 <_Z17QuaternionProductPfS_>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fb86 	bl	8002560 <_Z19QuaternionNormalizePf>
 8001e54:	6078      	str	r0, [r7, #4]
  LoopWQuaternion[0] = *p3;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <_Z28update_FrameOriginQuaternionv+0xf0>)
 8001e5c:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p3 + 1);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <_Z28update_FrameOriginQuaternionv+0xf0>)
 8001e64:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p3 + 2);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <_Z28update_FrameOriginQuaternionv+0xf0>)
 8001e6c:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p3 + 3);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <_Z28update_FrameOriginQuaternionv+0xf0>)
 8001e74:	60d3      	str	r3, [r2, #12]
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000654 	.word	0x20000654
 8001e84:	461c4000 	.word	0x461c4000
 8001e88:	20000594 	.word	0x20000594
 8001e8c:	20000014 	.word	0x20000014
 8001e90:	20000004 	.word	0x20000004

08001e94 <_Z12MPU6050_initv>:
 * @brief Initializes the MPU6050 and initializes and starts the DMP functionality
 * 
 * --Custom Method!
 */
void MPU6050_init()
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);  //disable SBUS pin interrupt
 8001e9a:	2006      	movs	r0, #6
 8001e9c:	f004 fc2b 	bl	80066f6 <HAL_NVIC_DisableIRQ>
  HAL_Delay(10);
 8001ea0:	200a      	movs	r0, #10
 8001ea2:	f003 ffc5 	bl	8005e30 <HAL_Delay>
  mpu.initialize();                 //initialize that object
 8001ea6:	4826      	ldr	r0, [pc, #152]	; (8001f40 <_Z12MPU6050_initv+0xac>)
 8001ea8:	f000 fbdf 	bl	800266a <_ZN7MPU605010initializeEv>
  if (mpu.testConnection()) HAL_GPIO_TogglePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin);   //NOTDONE debug
 8001eac:	4824      	ldr	r0, [pc, #144]	; (8001f40 <_Z12MPU6050_initv+0xac>)
 8001eae:	f000 fbf4 	bl	800269a <_ZN7MPU605014testConnectionEv>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <_Z12MPU6050_initv+0x2c>
 8001eb8:	2110      	movs	r1, #16
 8001eba:	4822      	ldr	r0, [pc, #136]	; (8001f44 <_Z12MPU6050_initv+0xb0>)
 8001ebc:	f004 fe03 	bl	8006ac6 <HAL_GPIO_TogglePin>
  uint8_t devStatus = mpu.dmpInitialize();              //initialize DMP (Digital Motion Processing)
 8001ec0:	481f      	ldr	r0, [pc, #124]	; (8001f40 <_Z12MPU6050_initv+0xac>)
 8001ec2:	f001 f979 	bl	80031b8 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
  
  mpu.setXAccelOffset( 1044);         //apply custom offset values
 8001eca:	f240 4114 	movw	r1, #1044	; 0x414
 8001ece:	481c      	ldr	r0, [pc, #112]	; (8001f40 <_Z12MPU6050_initv+0xac>)
 8001ed0:	f000 fe2a 	bl	8002b28 <_ZN7MPU605015setXAccelOffsetEs>
  mpu.setYAccelOffset(-1699);
 8001ed4:	491c      	ldr	r1, [pc, #112]	; (8001f48 <_Z12MPU6050_initv+0xb4>)
 8001ed6:	481a      	ldr	r0, [pc, #104]	; (8001f40 <_Z12MPU6050_initv+0xac>)
 8001ed8:	f000 fe37 	bl	8002b4a <_ZN7MPU605015setYAccelOffsetEs>
  mpu.setZAccelOffset(  692);
 8001edc:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8001ee0:	4817      	ldr	r0, [pc, #92]	; (8001f40 <_Z12MPU6050_initv+0xac>)
 8001ee2:	f000 fe43 	bl	8002b6c <_ZN7MPU605015setZAccelOffsetEs>
  mpu.setXGyroOffset(   -53);
 8001ee6:	f06f 0134 	mvn.w	r1, #52	; 0x34
 8001eea:	4815      	ldr	r0, [pc, #84]	; (8001f40 <_Z12MPU6050_initv+0xac>)
 8001eec:	f000 fe4f 	bl	8002b8e <_ZN7MPU605014setXGyroOffsetEs>
  mpu.setYGyroOffset(   -26);
 8001ef0:	f06f 0119 	mvn.w	r1, #25
 8001ef4:	4812      	ldr	r0, [pc, #72]	; (8001f40 <_Z12MPU6050_initv+0xac>)
 8001ef6:	f000 fe5b 	bl	8002bb0 <_ZN7MPU605014setYGyroOffsetEs>
  mpu.setZGyroOffset(   -33);
 8001efa:	f06f 0120 	mvn.w	r1, #32
 8001efe:	4810      	ldr	r0, [pc, #64]	; (8001f40 <_Z12MPU6050_initv+0xac>)
 8001f00:	f000 fe67 	bl	8002bd2 <_ZN7MPU605014setZGyroOffsetEs>

  if (devStatus == 0) {
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10a      	bne.n	8001f20 <_Z12MPU6050_initv+0x8c>
      mpu.setDMPEnabled(true);
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <_Z12MPU6050_initv+0xac>)
 8001f0e:	f000 fe71 	bl	8002bf4 <_ZN7MPU605013setDMPEnabledEb>
      mpu.getIntStatus();
 8001f12:	480b      	ldr	r0, [pc, #44]	; (8001f40 <_Z12MPU6050_initv+0xac>)
 8001f14:	f000 fca1 	bl	800285a <_ZN7MPU605012getIntStatusEv>
      packetSize = 42;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <_Z12MPU6050_initv+0xb8>)
 8001f1a:	222a      	movs	r2, #42	; 0x2a
 8001f1c:	801a      	strh	r2, [r3, #0]
 8001f1e:	e003      	b.n	8001f28 <_Z12MPU6050_initv+0x94>
  } else {
      HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);   //NOTDONE debug
 8001f20:	2120      	movs	r1, #32
 8001f22:	4808      	ldr	r0, [pc, #32]	; (8001f44 <_Z12MPU6050_initv+0xb0>)
 8001f24:	f004 fdcf 	bl	8006ac6 <HAL_GPIO_TogglePin>
  }
  HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);   //NOTDONE debug
 8001f28:	2120      	movs	r1, #32
 8001f2a:	4806      	ldr	r0, [pc, #24]	; (8001f44 <_Z12MPU6050_initv+0xb0>)
 8001f2c:	f004 fdcb 	bl	8006ac6 <HAL_GPIO_TogglePin>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   //enable SBUS pin interrupt
 8001f30:	2006      	movs	r0, #6
 8001f32:	f004 fbd2 	bl	80066da <HAL_NVIC_EnableIRQ>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200004bc 	.word	0x200004bc
 8001f44:	40020000 	.word	0x40020000
 8001f48:	fffff95d 	.word	0xfffff95d
 8001f4c:	200004ba 	.word	0x200004ba

08001f50 <_Z19MPU6050_calibrationv>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void MPU6050_calibration()//NOTDONE comment
{
 8001f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f54:	b0e1      	sub	sp, #388	; 0x184
 8001f56:	af08      	add	r7, sp, #32
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);  //disable SBUS pin interrupt
 8001f58:	2006      	movs	r0, #6
 8001f5a:	f004 fbcc 	bl	80066f6 <HAL_NVIC_DisableIRQ>
  uint8_t MPU_calibrated = false;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  while (MPU_calibrated == false)
 8001f64:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f040 8193 	bne.w	8002294 <_Z19MPU6050_calibrationv+0x344>
  {
    uint16_t counter = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
    MPU6050_resetFIFO();
 8001f74:	f7ff fe42 	bl	8001bfc <_Z17MPU6050_resetFIFOv>
    MPU6050_WaitForQuaternionSet();
 8001f78:	f7ff fe4a 	bl	8001c10 <_Z28MPU6050_WaitForQuaternionSetv>
    MPU6050_ConvertToQuaternions();
 8001f7c:	f7ff fe64 	bl	8001c48 <_Z28MPU6050_ConvertToQuaternionsv>
    MPU6050_GetOriginQuaternion();
 8001f80:	f7ff fef2 	bl	8001d68 <_Z27MPU6050_GetOriginQuaternionv>
    get_XW_diffAngles();
 8001f84:	f001 fbe0 	bl	8003748 <_Z17get_XW_diffAnglesv>

    uint16_t oldTime = TIM11->CNT;
 8001f88:	4bb8      	ldr	r3, [pc, #736]	; (800226c <_Z19MPU6050_calibrationv+0x31c>)
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a

    float startAngles[3] = {
    PID_Pitch_xw_diff,
    PID_Roll_xw_diff ,
    PID_Yaw_xw_diff  };
 8001f90:	4bb7      	ldr	r3, [pc, #732]	; (8002270 <_Z19MPU6050_calibrationv+0x320>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001f98:	4bb6      	ldr	r3, [pc, #728]	; (8002274 <_Z19MPU6050_calibrationv+0x324>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001fa0:	4bb5      	ldr	r3, [pc, #724]	; (8002278 <_Z19MPU6050_calibrationv+0x328>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    while 
    (                                                                                                                                     \
    (startAngles[0] - PID_Pitch_xw_diff < MPU6050_cal_Pitch_MaxDev) & (startAngles[0] - PID_Pitch_xw_diff > -MPU6050_cal_Pitch_MaxDev) &  \
 8001fa8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001fac:	4ab0      	ldr	r2, [pc, #704]	; (8002270 <_Z19MPU6050_calibrationv+0x320>)
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fe18 	bl	8000be8 <__aeabi_fsub>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2201      	movs	r2, #1
 8001fbc:	4614      	mov	r4, r2
 8001fbe:	49af      	ldr	r1, [pc, #700]	; (800227c <_Z19MPU6050_calibrationv+0x32c>)
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff f8b9 	bl	8001138 <__aeabi_fcmplt>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <_Z19MPU6050_calibrationv+0x80>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	461c      	mov	r4, r3
 8001fd0:	b2e4      	uxtb	r4, r4
 8001fd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001fd6:	4aa6      	ldr	r2, [pc, #664]	; (8002270 <_Z19MPU6050_calibrationv+0x320>)
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fe03 	bl	8000be8 <__aeabi_fsub>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4615      	mov	r5, r2
 8001fe8:	49a5      	ldr	r1, [pc, #660]	; (8002280 <_Z19MPU6050_calibrationv+0x330>)
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f8c2 	bl	8001174 <__aeabi_fcmpgt>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <_Z19MPU6050_calibrationv+0xaa>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	461d      	mov	r5, r3
 8001ffa:	b2eb      	uxtb	r3, r5
 8001ffc:	4023      	ands	r3, r4
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461c      	mov	r4, r3
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 8002002:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002006:	4a9b      	ldr	r2, [pc, #620]	; (8002274 <_Z19MPU6050_calibrationv+0x324>)
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fdeb 	bl	8000be8 <__aeabi_fsub>
 8002012:	4603      	mov	r3, r0
 8002014:	2201      	movs	r2, #1
 8002016:	4615      	mov	r5, r2
 8002018:	4998      	ldr	r1, [pc, #608]	; (800227c <_Z19MPU6050_calibrationv+0x32c>)
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f88c 	bl	8001138 <__aeabi_fcmplt>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <_Z19MPU6050_calibrationv+0xda>
 8002026:	2300      	movs	r3, #0
 8002028:	461d      	mov	r5, r3
 800202a:	b2eb      	uxtb	r3, r5
    (startAngles[0] - PID_Pitch_xw_diff < MPU6050_cal_Pitch_MaxDev) & (startAngles[0] - PID_Pitch_xw_diff > -MPU6050_cal_Pitch_MaxDev) &  \
 800202c:	401c      	ands	r4, r3
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 800202e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002032:	4a90      	ldr	r2, [pc, #576]	; (8002274 <_Z19MPU6050_calibrationv+0x324>)
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fdd5 	bl	8000be8 <__aeabi_fsub>
 800203e:	4603      	mov	r3, r0
 8002040:	2201      	movs	r2, #1
 8002042:	4615      	mov	r5, r2
 8002044:	498e      	ldr	r1, [pc, #568]	; (8002280 <_Z19MPU6050_calibrationv+0x330>)
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff f894 	bl	8001174 <__aeabi_fcmpgt>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <_Z19MPU6050_calibrationv+0x106>
 8002052:	2300      	movs	r3, #0
 8002054:	461d      	mov	r5, r3
 8002056:	b2eb      	uxtb	r3, r5
 8002058:	401c      	ands	r4, r3
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 800205a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800205e:	4a86      	ldr	r2, [pc, #536]	; (8002278 <_Z19MPU6050_calibrationv+0x328>)
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fdbf 	bl	8000be8 <__aeabi_fsub>
 800206a:	4603      	mov	r3, r0
 800206c:	2201      	movs	r2, #1
 800206e:	4615      	mov	r5, r2
 8002070:	4982      	ldr	r1, [pc, #520]	; (800227c <_Z19MPU6050_calibrationv+0x32c>)
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f860 	bl	8001138 <__aeabi_fcmplt>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <_Z19MPU6050_calibrationv+0x132>
 800207e:	2300      	movs	r3, #0
 8002080:	461d      	mov	r5, r3
 8002082:	b2eb      	uxtb	r3, r5
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 8002084:	401c      	ands	r4, r3
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 8002086:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800208a:	4a7b      	ldr	r2, [pc, #492]	; (8002278 <_Z19MPU6050_calibrationv+0x328>)
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fda9 	bl	8000be8 <__aeabi_fsub>
 8002096:	4603      	mov	r3, r0
 8002098:	2201      	movs	r2, #1
 800209a:	4615      	mov	r5, r2
 800209c:	4978      	ldr	r1, [pc, #480]	; (8002280 <_Z19MPU6050_calibrationv+0x330>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f868 	bl	8001174 <__aeabi_fcmpgt>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <_Z19MPU6050_calibrationv+0x15e>
 80020aa:	2300      	movs	r3, #0
 80020ac:	461d      	mov	r5, r3
 80020ae:	b2eb      	uxtb	r3, r5
 80020b0:	4023      	ands	r3, r4
    (counter < MPU6050_cal_Time)                                                                                                          \
 80020b2:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 80020b6:	f240 31e7 	movw	r1, #999	; 0x3e7
 80020ba:	428a      	cmp	r2, r1
 80020bc:	bf94      	ite	ls
 80020be:	2201      	movls	r2, #1
 80020c0:	2200      	movhi	r2, #0
 80020c2:	b2d2      	uxtb	r2, r2
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 80020c4:	4013      	ands	r3, r2
    (counter < MPU6050_cal_Time)                                                                                                          \
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 80c0 	beq.w	800224c <_Z19MPU6050_calibrationv+0x2fc>
    )                                                                                                                                     \
    {
      MPU6050_resetFIFO();
 80020cc:	f7ff fd96 	bl	8001bfc <_Z17MPU6050_resetFIFOv>
      MPU6050_WaitForQuaternionSet();
 80020d0:	f7ff fd9e 	bl	8001c10 <_Z28MPU6050_WaitForQuaternionSetv>
      MPU6050_ConvertToQuaternions();
 80020d4:	f7ff fdb8 	bl	8001c48 <_Z28MPU6050_ConvertToQuaternionsv>
      get_XW_diffAngles();
 80020d8:	f001 fb36 	bl	8003748 <_Z17get_XW_diffAnglesv>
      for (size_t i = 0; i < 1; i++)
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80020e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 8097 	bne.w	800221a <_Z19MPU6050_calibrationv+0x2ca>
	      uint8_t x = 0;
	      while (msg[x] != NULL) x++;
	      unsigned char msgTransmit[x];
	      for (size_t i = 0; i < x; i++) msgTransmit[i] = msg[i];
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
      }
 80020ec:	466b      	mov	r3, sp
 80020ee:	603b      	str	r3, [r7, #0]
        , MPU6050_RX_buf[0]                    \
 80020f0:	4b64      	ldr	r3, [pc, #400]	; (8002284 <_Z19MPU6050_calibrationv+0x334>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
	      sprintf((char*)msg,"%hu %f %f %f %hu %hu \r\n" \
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	4b5e      	ldr	r3, [pc, #376]	; (8002270 <_Z19MPU6050_calibrationv+0x320>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe f9d0 	bl	80004a0 <__aeabi_f2d>
 8002100:	4604      	mov	r4, r0
 8002102:	460d      	mov	r5, r1
 8002104:	4b5b      	ldr	r3, [pc, #364]	; (8002274 <_Z19MPU6050_calibrationv+0x324>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f9c9 	bl	80004a0 <__aeabi_f2d>
 800210e:	4680      	mov	r8, r0
 8002110:	4689      	mov	r9, r1
 8002112:	4b59      	ldr	r3, [pc, #356]	; (8002278 <_Z19MPU6050_calibrationv+0x328>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe f9c2 	bl	80004a0 <__aeabi_f2d>
 800211c:	4682      	mov	sl, r0
 800211e:	468b      	mov	fp, r1
 8002120:	f8b7 6158 	ldrh.w	r6, [r7, #344]	; 0x158
        , mpu.getFIFOCount());
 8002124:	4858      	ldr	r0, [pc, #352]	; (8002288 <_Z19MPU6050_calibrationv+0x338>)
 8002126:	f000 fc1d 	bl	8002964 <_ZN7MPU605012getFIFOCountEv>
 800212a:	4603      	mov	r3, r0
	      sprintf((char*)msg,"%hu %f %f %f %hu %hu \r\n" \
 800212c:	461a      	mov	r2, r3
 800212e:	f107 030c 	add.w	r3, r7, #12
 8002132:	9207      	str	r2, [sp, #28]
 8002134:	9606      	str	r6, [sp, #24]
 8002136:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800213a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800213e:	e9cd 4500 	strd	r4, r5, [sp]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	4951      	ldr	r1, [pc, #324]	; (800228c <_Z19MPU6050_calibrationv+0x33c>)
 8002146:	4618      	mov	r0, r3
 8002148:	f00e fb0a 	bl	8010760 <siprintf>
	      uint8_t x = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
	      while (msg[x] != NULL) x++;
 8002152:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8002156:	f107 020c 	add.w	r2, r7, #12
 800215a:	5cd3      	ldrb	r3, [r2, r3]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <_Z19MPU6050_calibrationv+0x21c>
 8002160:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8002164:	3301      	adds	r3, #1
 8002166:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
 800216a:	e7f2      	b.n	8002152 <_Z19MPU6050_calibrationv+0x202>
	      unsigned char msgTransmit[x];
 800216c:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8002170:	1e5c      	subs	r4, r3, #1
 8002172:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8002176:	4623      	mov	r3, r4
 8002178:	3301      	adds	r3, #1
 800217a:	4618      	mov	r0, r3
 800217c:	f04f 0100 	mov.w	r1, #0
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	00cb      	lsls	r3, r1, #3
 800218a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800218e:	00c2      	lsls	r2, r0, #3
 8002190:	4623      	mov	r3, r4
 8002192:	3301      	adds	r3, #1
 8002194:	4618      	mov	r0, r3
 8002196:	f04f 0100 	mov.w	r1, #0
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	00cb      	lsls	r3, r1, #3
 80021a4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80021a8:	00c2      	lsls	r2, r0, #3
 80021aa:	4623      	mov	r3, r4
 80021ac:	3301      	adds	r3, #1
 80021ae:	3307      	adds	r3, #7
 80021b0:	08db      	lsrs	r3, r3, #3
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	ebad 0d03 	sub.w	sp, sp, r3
 80021b8:	ab08      	add	r3, sp, #32
 80021ba:	3300      	adds	r3, #0
 80021bc:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	      for (size_t i = 0; i < x; i++) msgTransmit[i] = msg[i];
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021c6:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 80021ca:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d212      	bcs.n	80021f8 <_Z19MPU6050_calibrationv+0x2a8>
 80021d2:	f107 020c 	add.w	r2, r7, #12
 80021d6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80021da:	4413      	add	r3, r2
 80021dc:	7819      	ldrb	r1, [r3, #0]
 80021de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021e2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80021e6:	4413      	add	r3, r2
 80021e8:	460a      	mov	r2, r1
 80021ea:	701a      	strb	r2, [r3, #0]
 80021ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80021f0:	3301      	adds	r3, #1
 80021f2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021f6:	e7e6      	b.n	80021c6 <_Z19MPU6050_calibrationv+0x276>
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 80021f8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021fc:	b2a3      	uxth	r3, r4
 80021fe:	3301      	adds	r3, #1
 8002200:	b29b      	uxth	r3, r3
 8002202:	4619      	mov	r1, r3
 8002204:	4610      	mov	r0, r2
 8002206:	f00a ffc7 	bl	800d198 <CDC_Transmit_FS>
 800220a:	f8d7 d000 	ldr.w	sp, [r7]
      for (size_t i = 0; i < 1; i++)
 800220e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002212:	3301      	adds	r3, #1
 8002214:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002218:	e763      	b.n	80020e2 <_Z19MPU6050_calibrationv+0x192>

      while ((TIM11->CNT - oldTime) < 10000) ;
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <_Z19MPU6050_calibrationv+0x31c>)
 800221c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800221e:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f242 720f 	movw	r2, #9999	; 0x270f
 8002228:	4293      	cmp	r3, r2
 800222a:	bf94      	ite	ls
 800222c:	2301      	movls	r3, #1
 800222e:	2300      	movhi	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d000      	beq.n	8002238 <_Z19MPU6050_calibrationv+0x2e8>
 8002236:	e7f0      	b.n	800221a <_Z19MPU6050_calibrationv+0x2ca>
      oldTime = TIM11->CNT;
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <_Z19MPU6050_calibrationv+0x31c>)
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
      counter += 10;
 8002240:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8002244:	330a      	adds	r3, #10
 8002246:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
    while 
 800224a:	e6ad      	b.n	8001fa8 <_Z19MPU6050_calibrationv+0x58>
    }
    if (counter >= MPU6050_cal_Time)
 800224c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8002250:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002254:	d304      	bcc.n	8002260 <_Z19MPU6050_calibrationv+0x310>
    {
      MPU6050_GetOriginQuaternion();
 8002256:	f7ff fd87 	bl	8001d68 <_Z27MPU6050_GetOriginQuaternionv>
      MPU_calibrated = true;
 800225a:	2301      	movs	r3, #1
 800225c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
    }
    HAL_GPIO_TogglePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin);
 8002260:	2180      	movs	r1, #128	; 0x80
 8002262:	480b      	ldr	r0, [pc, #44]	; (8002290 <_Z19MPU6050_calibrationv+0x340>)
 8002264:	f004 fc2f 	bl	8006ac6 <HAL_GPIO_TogglePin>
  while (MPU_calibrated == false)
 8002268:	e67c      	b.n	8001f64 <_Z19MPU6050_calibrationv+0x14>
 800226a:	bf00      	nop
 800226c:	40014800 	.word	0x40014800
 8002270:	20000510 	.word	0x20000510
 8002274:	20000514 	.word	0x20000514
 8002278:	20000518 	.word	0x20000518
 800227c:	40a00000 	.word	0x40a00000
 8002280:	c0a00000 	.word	0xc0a00000
 8002284:	200004a8 	.word	0x200004a8
 8002288:	200004bc 	.word	0x200004bc
 800228c:	08012a58 	.word	0x08012a58
 8002290:	40020000 	.word	0x40020000
  }
  MPU6050_GetOriginQuaternion();
 8002294:	f7ff fd68 	bl	8001d68 <_Z27MPU6050_GetOriginQuaternionv>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   //enable SBUS pin interrupt
 8002298:	2006      	movs	r0, #6
 800229a:	f004 fa1e 	bl	80066da <HAL_NVIC_EnableIRQ>

  float *p = QuaternionNormalize(GyroOriginQuaternion);
 800229e:	480f      	ldr	r0, [pc, #60]	; (80022dc <_Z19MPU6050_calibrationv+0x38c>)
 80022a0:	f000 f95e 	bl	8002560 <_Z19QuaternionNormalizePf>
 80022a4:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
  GyroOriginQuaternion[0] = *p;
 80022a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <_Z19MPU6050_calibrationv+0x38c>)
 80022b0:	6013      	str	r3, [r2, #0]
  GyroOriginQuaternion[1] = *(p + 1);
 80022b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a08      	ldr	r2, [pc, #32]	; (80022dc <_Z19MPU6050_calibrationv+0x38c>)
 80022ba:	6053      	str	r3, [r2, #4]
  GyroOriginQuaternion[2] = *(p + 2);
 80022bc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	4a06      	ldr	r2, [pc, #24]	; (80022dc <_Z19MPU6050_calibrationv+0x38c>)
 80022c4:	6093      	str	r3, [r2, #8]
  GyroOriginQuaternion[3] = *(p + 3);
 80022c6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a03      	ldr	r2, [pc, #12]	; (80022dc <_Z19MPU6050_calibrationv+0x38c>)
 80022ce:	60d3      	str	r3, [r2, #12]

}
 80022d0:	bf00      	nop
 80022d2:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 80022d6:	46bd      	mov	sp, r7
 80022d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022dc:	20000024 	.word	0x20000024

080022e0 <_Z17QuaternionProductPfS_>:
 * @return float product-Quaternion
 * 
 * --Custom Method!
 */
float *QuaternionProduct(float *q1, float *q2)
{
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  static float q3[4];
  q3[0] = (q1[0] * q2[0]) - (q1[1] * q2[1]) - (q1[2] * q2[2]) - (q1[3] * q2[3]);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	4610      	mov	r0, r2
 80022f6:	f7fe fd81 	bl	8000dfc <__aeabi_fmul>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461c      	mov	r4, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3304      	adds	r3, #4
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	3304      	adds	r3, #4
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	4610      	mov	r0, r2
 800230e:	f7fe fd75 	bl	8000dfc <__aeabi_fmul>
 8002312:	4603      	mov	r3, r0
 8002314:	4619      	mov	r1, r3
 8002316:	4620      	mov	r0, r4
 8002318:	f7fe fc66 	bl	8000be8 <__aeabi_fsub>
 800231c:	4603      	mov	r3, r0
 800231e:	461c      	mov	r4, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3308      	adds	r3, #8
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	3308      	adds	r3, #8
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	4610      	mov	r0, r2
 8002330:	f7fe fd64 	bl	8000dfc <__aeabi_fmul>
 8002334:	4603      	mov	r3, r0
 8002336:	4619      	mov	r1, r3
 8002338:	4620      	mov	r0, r4
 800233a:	f7fe fc55 	bl	8000be8 <__aeabi_fsub>
 800233e:	4603      	mov	r3, r0
 8002340:	461c      	mov	r4, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	330c      	adds	r3, #12
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	330c      	adds	r3, #12
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4619      	mov	r1, r3
 8002350:	4610      	mov	r0, r2
 8002352:	f7fe fd53 	bl	8000dfc <__aeabi_fmul>
 8002356:	4603      	mov	r3, r0
 8002358:	4619      	mov	r1, r3
 800235a:	4620      	mov	r0, r4
 800235c:	f7fe fc44 	bl	8000be8 <__aeabi_fsub>
 8002360:	4603      	mov	r3, r0
 8002362:	461a      	mov	r2, r3
 8002364:	4b61      	ldr	r3, [pc, #388]	; (80024ec <_Z17QuaternionProductPfS_+0x20c>)
 8002366:	601a      	str	r2, [r3, #0]
  q3[1] = (q1[0] * q2[1]) + (q1[1] * q2[0]) + (q1[2] * q2[3]) - (q1[3] * q2[2]);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	3304      	adds	r3, #4
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4619      	mov	r1, r3
 8002374:	4610      	mov	r0, r2
 8002376:	f7fe fd41 	bl	8000dfc <__aeabi_fmul>
 800237a:	4603      	mov	r3, r0
 800237c:	461c      	mov	r4, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3304      	adds	r3, #4
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	4610      	mov	r0, r2
 800238c:	f7fe fd36 	bl	8000dfc <__aeabi_fmul>
 8002390:	4603      	mov	r3, r0
 8002392:	4619      	mov	r1, r3
 8002394:	4620      	mov	r0, r4
 8002396:	f7fe fc29 	bl	8000bec <__addsf3>
 800239a:	4603      	mov	r3, r0
 800239c:	461c      	mov	r4, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3308      	adds	r3, #8
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	330c      	adds	r3, #12
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4619      	mov	r1, r3
 80023ac:	4610      	mov	r0, r2
 80023ae:	f7fe fd25 	bl	8000dfc <__aeabi_fmul>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4619      	mov	r1, r3
 80023b6:	4620      	mov	r0, r4
 80023b8:	f7fe fc18 	bl	8000bec <__addsf3>
 80023bc:	4603      	mov	r3, r0
 80023be:	461c      	mov	r4, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	330c      	adds	r3, #12
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	3308      	adds	r3, #8
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	4610      	mov	r0, r2
 80023d0:	f7fe fd14 	bl	8000dfc <__aeabi_fmul>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4619      	mov	r1, r3
 80023d8:	4620      	mov	r0, r4
 80023da:	f7fe fc05 	bl	8000be8 <__aeabi_fsub>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b42      	ldr	r3, [pc, #264]	; (80024ec <_Z17QuaternionProductPfS_+0x20c>)
 80023e4:	605a      	str	r2, [r3, #4]
  q3[2] = (q1[0] * q2[2]) - (q1[1] * q2[3]) + (q1[2] * q2[0]) + (q1[3] * q2[1]);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	3308      	adds	r3, #8
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4619      	mov	r1, r3
 80023f2:	4610      	mov	r0, r2
 80023f4:	f7fe fd02 	bl	8000dfc <__aeabi_fmul>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461c      	mov	r4, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3304      	adds	r3, #4
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	330c      	adds	r3, #12
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	4610      	mov	r0, r2
 800240c:	f7fe fcf6 	bl	8000dfc <__aeabi_fmul>
 8002410:	4603      	mov	r3, r0
 8002412:	4619      	mov	r1, r3
 8002414:	4620      	mov	r0, r4
 8002416:	f7fe fbe7 	bl	8000be8 <__aeabi_fsub>
 800241a:	4603      	mov	r3, r0
 800241c:	461c      	mov	r4, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3308      	adds	r3, #8
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4619      	mov	r1, r3
 800242a:	4610      	mov	r0, r2
 800242c:	f7fe fce6 	bl	8000dfc <__aeabi_fmul>
 8002430:	4603      	mov	r3, r0
 8002432:	4619      	mov	r1, r3
 8002434:	4620      	mov	r0, r4
 8002436:	f7fe fbd9 	bl	8000bec <__addsf3>
 800243a:	4603      	mov	r3, r0
 800243c:	461c      	mov	r4, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	330c      	adds	r3, #12
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	3304      	adds	r3, #4
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4619      	mov	r1, r3
 800244c:	4610      	mov	r0, r2
 800244e:	f7fe fcd5 	bl	8000dfc <__aeabi_fmul>
 8002452:	4603      	mov	r3, r0
 8002454:	4619      	mov	r1, r3
 8002456:	4620      	mov	r0, r4
 8002458:	f7fe fbc8 	bl	8000bec <__addsf3>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	4b22      	ldr	r3, [pc, #136]	; (80024ec <_Z17QuaternionProductPfS_+0x20c>)
 8002462:	609a      	str	r2, [r3, #8]
  q3[3] = (q1[0] * q2[3]) + (q1[1] * q2[2]) - (q1[2] * q2[1]) + (q1[3] * q2[0]);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	330c      	adds	r3, #12
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4619      	mov	r1, r3
 8002470:	4610      	mov	r0, r2
 8002472:	f7fe fcc3 	bl	8000dfc <__aeabi_fmul>
 8002476:	4603      	mov	r3, r0
 8002478:	461c      	mov	r4, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3304      	adds	r3, #4
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	3308      	adds	r3, #8
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f7fe fcb7 	bl	8000dfc <__aeabi_fmul>
 800248e:	4603      	mov	r3, r0
 8002490:	4619      	mov	r1, r3
 8002492:	4620      	mov	r0, r4
 8002494:	f7fe fbaa 	bl	8000bec <__addsf3>
 8002498:	4603      	mov	r3, r0
 800249a:	461c      	mov	r4, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3308      	adds	r3, #8
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	3304      	adds	r3, #4
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	4610      	mov	r0, r2
 80024ac:	f7fe fca6 	bl	8000dfc <__aeabi_fmul>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4619      	mov	r1, r3
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7fe fb97 	bl	8000be8 <__aeabi_fsub>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461c      	mov	r4, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	330c      	adds	r3, #12
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4619      	mov	r1, r3
 80024ca:	4610      	mov	r0, r2
 80024cc:	f7fe fc96 	bl	8000dfc <__aeabi_fmul>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4619      	mov	r1, r3
 80024d4:	4620      	mov	r0, r4
 80024d6:	f7fe fb89 	bl	8000bec <__addsf3>
 80024da:	4603      	mov	r3, r0
 80024dc:	461a      	mov	r2, r3
 80024de:	4b03      	ldr	r3, [pc, #12]	; (80024ec <_Z17QuaternionProductPfS_+0x20c>)
 80024e0:	60da      	str	r2, [r3, #12]
  return q3;
 80024e2:	4b02      	ldr	r3, [pc, #8]	; (80024ec <_Z17QuaternionProductPfS_+0x20c>)
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd90      	pop	{r4, r7, pc}
 80024ec:	200004dc 	.word	0x200004dc

080024f0 <_Z17QuaternionInversePf>:
 * @return float inverse Quaternion
 * 
 * --Custom Method!
 */
float *QuaternionInverse(float *q1)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  static float qi[4];
  qi[0] = q1[0];
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <_Z17QuaternionInversePf+0x48>)
 80024fe:	6013      	str	r3, [r2, #0]
  qi[1] = q1[1] * -1;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3304      	adds	r3, #4
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800250a:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <_Z17QuaternionInversePf+0x48>)
 800250c:	6053      	str	r3, [r2, #4]
  qi[2] = q1[2] * -1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3308      	adds	r3, #8
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002518:	4a07      	ldr	r2, [pc, #28]	; (8002538 <_Z17QuaternionInversePf+0x48>)
 800251a:	6093      	str	r3, [r2, #8]
  qi[3] = q1[3] * -1;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	330c      	adds	r3, #12
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002526:	4a04      	ldr	r2, [pc, #16]	; (8002538 <_Z17QuaternionInversePf+0x48>)
 8002528:	60d3      	str	r3, [r2, #12]
  return qi;
 800252a:	4b03      	ldr	r3, [pc, #12]	; (8002538 <_Z17QuaternionInversePf+0x48>)
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	200004ec 	.word	0x200004ec

0800253c <_Z15QuaternionSLERPPfS_>:
 * @return float interpolation quaternion
 * 
 * --Custom Method!
 */
float * QuaternionSLERP(float *q1, float *q2)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  return QuaternionProduct(&q2[0], QuaternionInverse(&q1[0]));
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff ffd2 	bl	80024f0 <_Z17QuaternionInversePf>
 800254c:	4603      	mov	r3, r0
 800254e:	4619      	mov	r1, r3
 8002550:	6838      	ldr	r0, [r7, #0]
 8002552:	f7ff fec5 	bl	80022e0 <_Z17QuaternionProductPfS_>
 8002556:	4603      	mov	r3, r0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_Z19QuaternionNormalizePf>:
 * @return float* pointer to normalized quaternion
 * 
 * --Custom Method!
 */
float *QuaternionNormalize(float *q1)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  float vectorlength = sqrt((q1[0] * q1[0]) + (q1[1] * q1[1]) + (q1[2] * q1[2]) + (q1[3] * q1[3]));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	4610      	mov	r0, r2
 8002574:	f7fe fc42 	bl	8000dfc <__aeabi_fmul>
 8002578:	4603      	mov	r3, r0
 800257a:	461c      	mov	r4, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3304      	adds	r3, #4
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	4610      	mov	r0, r2
 800258c:	f7fe fc36 	bl	8000dfc <__aeabi_fmul>
 8002590:	4603      	mov	r3, r0
 8002592:	4619      	mov	r1, r3
 8002594:	4620      	mov	r0, r4
 8002596:	f7fe fb29 	bl	8000bec <__addsf3>
 800259a:	4603      	mov	r3, r0
 800259c:	461c      	mov	r4, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3308      	adds	r3, #8
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3308      	adds	r3, #8
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4619      	mov	r1, r3
 80025ac:	4610      	mov	r0, r2
 80025ae:	f7fe fc25 	bl	8000dfc <__aeabi_fmul>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4619      	mov	r1, r3
 80025b6:	4620      	mov	r0, r4
 80025b8:	f7fe fb18 	bl	8000bec <__addsf3>
 80025bc:	4603      	mov	r3, r0
 80025be:	461c      	mov	r4, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	330c      	adds	r3, #12
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	330c      	adds	r3, #12
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	4610      	mov	r0, r2
 80025d0:	f7fe fc14 	bl	8000dfc <__aeabi_fmul>
 80025d4:	4603      	mov	r3, r0
 80025d6:	4619      	mov	r1, r3
 80025d8:	4620      	mov	r0, r4
 80025da:	f7fe fb07 	bl	8000bec <__addsf3>
 80025de:	4603      	mov	r3, r0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff faed 	bl	8001bc0 <_ZSt4sqrtf>
 80025e6:	60f8      	str	r0, [r7, #12]
  static float qn[4];
  qn[0] = q1[0] / vectorlength;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68f9      	ldr	r1, [r7, #12]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fcb8 	bl	8000f64 <__aeabi_fdiv>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b13      	ldr	r3, [pc, #76]	; (8002648 <_Z19QuaternionNormalizePf+0xe8>)
 80025fa:	601a      	str	r2, [r3, #0]
  qn[1] = q1[1] / vectorlength;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3304      	adds	r3, #4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68f9      	ldr	r1, [r7, #12]
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fcad 	bl	8000f64 <__aeabi_fdiv>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <_Z19QuaternionNormalizePf+0xe8>)
 8002610:	605a      	str	r2, [r3, #4]
  qn[2] = q1[2] / vectorlength;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3308      	adds	r3, #8
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68f9      	ldr	r1, [r7, #12]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fca2 	bl	8000f64 <__aeabi_fdiv>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <_Z19QuaternionNormalizePf+0xe8>)
 8002626:	609a      	str	r2, [r3, #8]
  qn[3] = q1[3] / vectorlength;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	330c      	adds	r3, #12
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68f9      	ldr	r1, [r7, #12]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fc97 	bl	8000f64 <__aeabi_fdiv>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	4b03      	ldr	r3, [pc, #12]	; (8002648 <_Z19QuaternionNormalizePf+0xe8>)
 800263c:	60da      	str	r2, [r3, #12]
  return qn;
 800263e:	4b02      	ldr	r3, [pc, #8]	; (8002648 <_Z19QuaternionNormalizePf+0xe8>)
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	bd90      	pop	{r4, r7, pc}
 8002648:	200004fc 	.word	0x200004fc

0800264c <_ZN7MPU6050C1Eh>:
 * @param address I2C address
 * @see MPU6050_DEFAULT_ADDRESS
 * @see MPU6050_ADDRESS_AD0_LOW
 * @see MPU6050_ADDRESS_AD0_HIGH
 */
MPU6050::MPU6050(uint8_t address) {
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
    devAddr = address;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	719a      	strb	r2, [r3, #6]
}
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 8002672:	2101      	movs	r1, #1
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f962 	bl	800293e <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 800267a:	2100      	movs	r1, #0
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f854 	bl	800272a <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8002682:	2100      	movs	r1, #0
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f863 	bl	8002750 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 800268a:	2100      	movs	r1, #0
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f945 	bl	800291c <_ZN7MPU605015setSleepEnabledEb>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_ZN7MPU605014testConnectionEv>:

/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool MPU6050::testConnection() {
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
    return getDeviceID() == 0x34;
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f991 	bl	80029ca <_ZN7MPU605011getDeviceIDEv>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b34      	cmp	r3, #52	; 0x34
 80026ac:	bf0c      	ite	eq
 80026ae:	2301      	moveq	r3, #1
 80026b0:	2300      	movne	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <_ZN7MPU60507setRateEh>:
/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050::setRate(uint8_t rate) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	799b      	ldrb	r3, [r3, #6]
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	2119      	movs	r1, #25
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff f98b 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <_ZN7MPU605020setExternalFrameSyncEh>:
/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG
 * @param sync New FSYNC configuration value
 */
void MPU6050::setExternalFrameSync(uint8_t sync) {
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af02      	add	r7, sp, #8
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7998      	ldrb	r0, [r3, #6]
 80026ee:	78fb      	ldrb	r3, [r7, #3]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	2303      	movs	r3, #3
 80026f4:	2205      	movs	r2, #5
 80026f6:	211a      	movs	r1, #26
 80026f8:	f7ff f8ec 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <_ZN7MPU605011setDLPFModeEh>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af02      	add	r7, sp, #8
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	7998      	ldrb	r0, [r3, #6]
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2303      	movs	r3, #3
 800271a:	2202      	movs	r2, #2
 800271c:	211a      	movs	r1, #26
 800271e:	f7ff f8d9 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af02      	add	r7, sp, #8
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	7998      	ldrb	r0, [r3, #6]
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2302      	movs	r3, #2
 8002740:	2204      	movs	r2, #4
 8002742:	211b      	movs	r1, #27
 8002744:	f7ff f8c6 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af02      	add	r7, sp, #8
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7998      	ldrb	r0, [r3, #6]
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2302      	movs	r3, #2
 8002766:	2204      	movs	r2, #4
 8002768:	211c      	movs	r1, #28
 800276a:	f7ff f8b3 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <_ZN7MPU605027setMotionDetectionThresholdEh>:
/** Set motion detection event acceleration threshold.
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050::setMotionDetectionThreshold(uint8_t threshold) {
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	460b      	mov	r3, r1
 8002780:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_THR, threshold);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	799b      	ldrb	r3, [r3, #6]
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	211f      	movs	r1, #31
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff f92e 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <_ZN7MPU605026setMotionDetectionDurationEh>:
/** Set motion detection event duration threshold.
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050::setMotionDetectionDuration(uint8_t duration) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_DUR, duration);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	799b      	ldrb	r3, [r3, #6]
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	2120      	movs	r1, #32
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff f91d 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
/** Set zero motion detection event acceleration threshold.
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	799b      	ldrb	r3, [r3, #6]
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	2121      	movs	r1, #33	; 0x21
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff f90c 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
/** Set zero motion detection event duration threshold.
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	799b      	ldrb	r3, [r3, #6]
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	2122      	movs	r1, #34	; 0x22
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff f8fb 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <_ZN7MPU605015setSlaveAddressEhh>:
 * @param num Slave number (0-3)
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	70fb      	strb	r3, [r7, #3]
 800280a:	4613      	mov	r3, r2
 800280c:	70bb      	strb	r3, [r7, #2]
    if (num > 3) return;
 800280e:	78fb      	ldrb	r3, [r7, #3]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d80d      	bhi.n	8002830 <_ZN7MPU605015setSlaveAddressEhh+0x32>
    I2Cdev::writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7998      	ldrb	r0, [r3, #6]
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	461a      	mov	r2, r3
 800281c:	0052      	lsls	r2, r2, #1
 800281e:	4413      	add	r3, r2
 8002820:	b2db      	uxtb	r3, r3
 8002822:	3325      	adds	r3, #37	; 0x25
 8002824:	b2db      	uxtb	r3, r3
 8002826:	78ba      	ldrb	r2, [r7, #2]
 8002828:	4619      	mov	r1, r3
 800282a:	f7ff f8df 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
 800282e:	e000      	b.n	8002832 <_ZN7MPU605015setSlaveAddressEhh+0x34>
    if (num > 3) return;
 8002830:	bf00      	nop
}
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_ZN7MPU605013setIntEnabledEh>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050::setIntEnabled(uint8_t enabled) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	799b      	ldrb	r3, [r3, #6]
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	2138      	movs	r1, #56	; 0x38
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff f8cd 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
    I2Cdev::readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	7998      	ldrb	r0, [r3, #6]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3307      	adds	r3, #7
 800286a:	461a      	mov	r2, r3
 800286c:	213a      	movs	r1, #58	; 0x3a
 800286e:	f7fe ff05 	bl	800167c <_ZN6I2Cdev8readByteEhhPh>
    return buffer[0];
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	79db      	ldrb	r3, [r3, #7]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <_ZN7MPU605014setFIFOEnabledEb>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050::setFIFOEnabled(bool enabled) {
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7998      	ldrb	r0, [r3, #6]
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	2206      	movs	r2, #6
 8002892:	216a      	movs	r1, #106	; 0x6a
 8002894:	f7fe ffa2 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <_ZN7MPU605023setI2CMasterModeEnabledEb>:
 * @param enabled New I2C Master Mode enabled status
 * @see getI2CMasterModeEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
 */
void MPU6050::setI2CMasterModeEnabled(bool enabled) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7998      	ldrb	r0, [r3, #6]
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	2205      	movs	r2, #5
 80028b4:	216a      	movs	r1, #106	; 0x6a
 80028b6:	f7fe ff91 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <_ZN7MPU60509resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7998      	ldrb	r0, [r3, #6]
 80028ce:	2301      	movs	r3, #1
 80028d0:	2202      	movs	r2, #2
 80028d2:	216a      	movs	r1, #106	; 0x6a
 80028d4:	f7fe ff82 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <_ZN7MPU605014resetI2CMasterEv>:
 * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050::resetI2CMaster() {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	7998      	ldrb	r0, [r3, #6]
 80028ec:	2301      	movs	r3, #1
 80028ee:	2201      	movs	r2, #1
 80028f0:	216a      	movs	r1, #106	; 0x6a
 80028f2:	f7fe ff73 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <_ZN7MPU60505resetEv>:
/** Trigger a full device reset.
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050::reset() {
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7998      	ldrb	r0, [r3, #6]
 800290a:	2301      	movs	r3, #1
 800290c:	2207      	movs	r2, #7
 800290e:	216b      	movs	r1, #107	; 0x6b
 8002910:	f7fe ff64 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7998      	ldrb	r0, [r3, #6]
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	2206      	movs	r2, #6
 8002930:	216b      	movs	r1, #107	; 0x6b
 8002932:	f7fe ff53 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af02      	add	r7, sp, #8
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	460b      	mov	r3, r1
 8002948:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7998      	ldrb	r0, [r3, #6]
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2303      	movs	r3, #3
 8002954:	2202      	movs	r2, #2
 8002956:	216b      	movs	r1, #107	; 0x6b
 8002958:	f7fe ffbc 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
    I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7998      	ldrb	r0, [r3, #6]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3307      	adds	r3, #7
 8002974:	2202      	movs	r2, #2
 8002976:	2172      	movs	r1, #114	; 0x72
 8002978:	f7fe feba 	bl	80016f0 <_ZN6I2Cdev9readBytesEhhhPh>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	79db      	ldrb	r3, [r3, #7]
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	b21a      	sxth	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	7a1b      	ldrb	r3, [r3, #8]
 8002988:	b21b      	sxth	r3, r3
 800298a:	4313      	orrs	r3, r2
 800298c:	b21b      	sxth	r3, r3
 800298e:	b29b      	uxth	r3, r3
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    I2Cdev::readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	4613      	mov	r3, r2
 80029a4:	71fb      	strb	r3, [r7, #7]
    if(length > 0){
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <_ZN7MPU605012getFIFOBytesEPhh+0x24>
        I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	7998      	ldrb	r0, [r3, #6]
 80029b0:	79fa      	ldrb	r2, [r7, #7]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2174      	movs	r1, #116	; 0x74
 80029b6:	f7fe fe9b 	bl	80016f0 <_ZN6I2Cdev9readBytesEhhhPh>
    } else {
    	*data = 0;
    }
}
 80029ba:	e002      	b.n	80029c2 <_ZN7MPU605012getFIFOBytesEPhh+0x2a>
    	*data = 0;
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
}
 80029c2:	bf00      	nop
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <_ZN7MPU605011getDeviceIDEv>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af02      	add	r7, sp, #8
 80029d0:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	7998      	ldrb	r0, [r3, #6]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3307      	adds	r3, #7
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	2306      	movs	r3, #6
 80029de:	2206      	movs	r2, #6
 80029e0:	2175      	movs	r1, #117	; 0x75
 80029e2:	f7fe fded 	bl	80015c0 <_ZN6I2Cdev8readBitsEhhhhPh>
    return buffer[0];
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	79db      	ldrb	r3, [r3, #7]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <_ZN7MPU605015getOTPBankValidEv>:

// ======== UNDOCUMENTED/DMP REGISTERS/METHODS ========

// XG_OFFS_TC register

uint8_t MPU6050::getOTPBankValid() {
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
    I2Cdev::readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	7998      	ldrb	r0, [r3, #6]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3307      	adds	r3, #7
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	f7fe fd97 	bl	8001538 <_ZN6I2Cdev7readBitEhhhPh>
    return buffer[0];
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	79db      	ldrb	r3, [r3, #7]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <_ZN7MPU605015setOTPBankValidEb>:
void MPU6050::setOTPBankValid(bool enabled) {
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	7998      	ldrb	r0, [r3, #6]
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	f7fe fed6 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_ZN7MPU605016getXGyroOffsetTCEv>:
int8_t MPU6050::getXGyroOffsetTC() {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	7998      	ldrb	r0, [r3, #6]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3307      	adds	r3, #7
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	2306      	movs	r3, #6
 8002a4c:	2206      	movs	r2, #6
 8002a4e:	2100      	movs	r1, #0
 8002a50:	f7fe fdb6 	bl	80015c0 <_ZN6I2Cdev8readBitsEhhhhPh>
    return buffer[0];
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	79db      	ldrb	r3, [r3, #7]
 8002a58:	b25b      	sxtb	r3, r3
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <_ZN7MPU605016setXGyroOffsetTCEa>:
void MPU6050::setXGyroOffsetTC(int8_t offset) {
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af02      	add	r7, sp, #8
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7998      	ldrb	r0, [r3, #6]
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	2306      	movs	r3, #6
 8002a78:	2206      	movs	r2, #6
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	f7fe ff2a 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_ZN7MPU605016getYGyroOffsetTCEv>:

// YG_OFFS_TC register

int8_t MPU6050::getYGyroOffsetTC() {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7998      	ldrb	r0, [r3, #6]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3307      	adds	r3, #7
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	2306      	movs	r3, #6
 8002a9c:	2206      	movs	r2, #6
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	f7fe fd8e 	bl	80015c0 <_ZN6I2Cdev8readBitsEhhhhPh>
    return buffer[0];
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	79db      	ldrb	r3, [r3, #7]
 8002aa8:	b25b      	sxtb	r3, r3
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <_ZN7MPU605016setYGyroOffsetTCEa>:
void MPU6050::setYGyroOffsetTC(int8_t offset) {
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af02      	add	r7, sp, #8
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	7998      	ldrb	r0, [r3, #6]
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	2306      	movs	r3, #6
 8002ac8:	2206      	movs	r2, #6
 8002aca:	2101      	movs	r1, #1
 8002acc:	f7fe ff02 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_ZN7MPU605016getZGyroOffsetTCEv>:

// ZG_OFFS_TC register

int8_t MPU6050::getZGyroOffsetTC() {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	7998      	ldrb	r0, [r3, #6]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3307      	adds	r3, #7
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	2306      	movs	r3, #6
 8002aec:	2206      	movs	r2, #6
 8002aee:	2102      	movs	r1, #2
 8002af0:	f7fe fd66 	bl	80015c0 <_ZN6I2Cdev8readBitsEhhhhPh>
    return buffer[0];
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	79db      	ldrb	r3, [r3, #7]
 8002af8:	b25b      	sxtb	r3, r3
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <_ZN7MPU605016setZGyroOffsetTCEa>:
void MPU6050::setZGyroOffsetTC(int8_t offset) {
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af02      	add	r7, sp, #8
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7998      	ldrb	r0, [r3, #6]
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	2306      	movs	r3, #6
 8002b18:	2206      	movs	r2, #6
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	f7fe feda 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_ZN7MPU605015setXAccelOffsetEs>:

int16_t MPU6050::getXAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	799b      	ldrb	r3, [r3, #6]
 8002b38:	887a      	ldrh	r2, [r7, #2]
 8002b3a:	2106      	movs	r1, #6
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe ff8d 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <_ZN7MPU605015setYAccelOffsetEs>:

int16_t MPU6050::getYAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	799b      	ldrb	r3, [r3, #6]
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	2108      	movs	r1, #8
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe ff7c 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_ZN7MPU605015setZAccelOffsetEs>:

int16_t MPU6050::getZAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	799b      	ldrb	r3, [r3, #6]
 8002b7c:	887a      	ldrh	r2, [r7, #2]
 8002b7e:	210a      	movs	r1, #10
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe ff6b 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <_ZN7MPU605014setXGyroOffsetEs>:

int16_t MPU6050::getXGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	460b      	mov	r3, r1
 8002b98:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	799b      	ldrb	r3, [r3, #6]
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	2113      	movs	r1, #19
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe ff5a 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_ZN7MPU605014setYGyroOffsetEs>:

int16_t MPU6050::getYGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	799b      	ldrb	r3, [r3, #6]
 8002bc0:	887a      	ldrh	r2, [r7, #2]
 8002bc2:	2115      	movs	r1, #21
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe ff49 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <_ZN7MPU605014setZGyroOffsetEs>:

int16_t MPU6050::getZGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	799b      	ldrb	r3, [r3, #6]
 8002be2:	887a      	ldrh	r2, [r7, #2]
 8002be4:	2117      	movs	r1, #23
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe ff38 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    I2Cdev::readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	7998      	ldrb	r0, [r3, #6]
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	2207      	movs	r2, #7
 8002c08:	216a      	movs	r1, #106	; 0x6a
 8002c0a:	f7fe fde7 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <_ZN7MPU60508resetDMPEv>:
void MPU6050::resetDMP() {
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7998      	ldrb	r0, [r3, #6]
 8002c22:	2301      	movs	r3, #1
 8002c24:	2203      	movs	r2, #3
 8002c26:	216a      	movs	r1, #106	; 0x6a
 8002c28:	f7fe fdd8 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <_ZN7MPU605013setMemoryBankEhbb>:

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	461a      	mov	r2, r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	70fb      	strb	r3, [r7, #3]
 8002c46:	460b      	mov	r3, r1
 8002c48:	70bb      	strb	r3, [r7, #2]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	707b      	strb	r3, [r7, #1]
    bank &= 0x1F;
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	70fb      	strb	r3, [r7, #3]
    if (userBank) bank |= 0x20;
 8002c56:	787b      	ldrb	r3, [r7, #1]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <_ZN7MPU605013setMemoryBankEhbb+0x30>
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	f043 0320 	orr.w	r3, r3, #32
 8002c62:	70fb      	strb	r3, [r7, #3]
    if (prefetchEnabled) bank |= 0x40;
 8002c64:	78bb      	ldrb	r3, [r7, #2]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <_ZN7MPU605013setMemoryBankEhbb+0x3e>
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c70:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	799b      	ldrb	r3, [r3, #6]
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	216d      	movs	r1, #109	; 0x6d
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe feb6 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <_ZN7MPU605021setMemoryStartAddressEh>:

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	799b      	ldrb	r3, [r3, #6]
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	216e      	movs	r1, #110	; 0x6e
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe fea5 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <_ZN7MPU605014readMemoryByteEv>:

// MEM_R_W register

uint8_t MPU6050::readMemoryByte() {
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
    I2Cdev::readByte(devAddr, MPU6050_RA_MEM_R_W, buffer);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	7998      	ldrb	r0, [r3, #6]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3307      	adds	r3, #7
 8002cba:	461a      	mov	r2, r3
 8002cbc:	216f      	movs	r1, #111	; 0x6f
 8002cbe:	f7fe fcdd 	bl	800167c <_ZN6I2Cdev8readByteEhhPh>
    return buffer[0];
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	79db      	ldrb	r3, [r3, #7]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <_ZN7MPU605015readMemoryBlockEPhthh>:
void MPU6050::writeMemoryByte(uint8_t data) {
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_R_W, data);
}
void MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	461a      	mov	r2, r3
 8002cdc:	460b      	mov	r3, r1
 8002cde:	80fb      	strh	r3, [r7, #6]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002ce4:	7979      	ldrb	r1, [r7, #5]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2200      	movs	r2, #0
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f7ff ffa2 	bl	8002c34 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002cf0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff ffc6 	bl	8002c88 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	82bb      	strh	r3, [r7, #20]
 8002d00:	8aba      	ldrh	r2, [r7, #20]
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d244      	bcs.n	8002d92 <_ZN7MPU605015readMemoryBlockEPhthh+0xc4>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002d08:	2310      	movs	r3, #16
 8002d0a:	75fb      	strb	r3, [r7, #23]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002d0c:	8aba      	ldrh	r2, [r7, #20]
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
 8002d10:	441a      	add	r2, r3
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	dd05      	ble.n	8002d24 <_ZN7MPU605015readMemoryBlockEPhthh+0x56>
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	8abb      	ldrh	r3, [r7, #20]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	75fb      	strb	r3, [r7, #23]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002d24:	7dfa      	ldrb	r2, [r7, #23]
 8002d26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d2a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	dd03      	ble.n	8002d3a <_ZN7MPU605015readMemoryBlockEPhthh+0x6c>
 8002d32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d36:	425b      	negs	r3, r3
 8002d38:	75fb      	strb	r3, [r7, #23]

        // read the chunk of data as specified
        I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	7998      	ldrb	r0, [r3, #6]
 8002d3e:	8abb      	ldrh	r3, [r7, #20]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	4413      	add	r3, r2
 8002d44:	7dfa      	ldrb	r2, [r7, #23]
 8002d46:	216f      	movs	r1, #111	; 0x6f
 8002d48:	f7fe fcd2 	bl	80016f0 <_ZN6I2Cdev9readBytesEhhhPh>
        
        // increase byte index by [chunkSize]
        i += chunkSize;
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	8abb      	ldrh	r3, [r7, #20]
 8002d52:	4413      	add	r3, r2
 8002d54:	82bb      	strh	r3, [r7, #20]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002d56:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002d5a:	7dfb      	ldrb	r3, [r7, #23]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f887 3020 	strb.w	r3, [r7, #32]

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002d62:	8aba      	ldrh	r2, [r7, #20]
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d2ca      	bcs.n	8002d00 <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
            if (address == 0) bank++;
 8002d6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <_ZN7MPU605015readMemoryBlockEPhthh+0xaa>
 8002d72:	797b      	ldrb	r3, [r7, #5]
 8002d74:	3301      	adds	r3, #1
 8002d76:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002d78:	7979      	ldrb	r1, [r7, #5]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f7ff ff58 	bl	8002c34 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002d84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f7ff ff7c 	bl	8002c88 <_ZN7MPU605021setMemoryStartAddressEh>
    for (uint16_t i = 0; i < dataSize;) {
 8002d90:	e7b6      	b.n	8002d00 <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
        }
    }
}
 8002d92:	bf00      	nop
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <_ZN7MPU605016writeMemoryBlockEPKhthhbb>:
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b088      	sub	sp, #32
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	4611      	mov	r1, r2
 8002da6:	461a      	mov	r2, r3
 8002da8:	460b      	mov	r3, r1
 8002daa:	80fb      	strh	r3, [r7, #6]
 8002dac:	4613      	mov	r3, r2
 8002dae:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002db0:	7979      	ldrb	r1, [r7, #5]
 8002db2:	2300      	movs	r3, #0
 8002db4:	2200      	movs	r2, #0
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f7ff ff3c 	bl	8002c34 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002dbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f7ff ff60 	bl	8002c88 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61bb      	str	r3, [r7, #24]
    uint8_t *progBuffer=0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002dd0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x48>
 8002dd8:	2010      	movs	r0, #16
 8002dda:	f00c ff6f 	bl	800fcbc <malloc>
 8002dde:	4603      	mov	r3, r0
 8002de0:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002de2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d004      	beq.n	8002df4 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5a>
 8002dea:	2010      	movs	r0, #16
 8002dec:	f00c ff66 	bl	800fcbc <malloc>
 8002df0:	4603      	mov	r3, r0
 8002df2:	617b      	str	r3, [r7, #20]
    for (i = 0; i < dataSize;) {
 8002df4:	2300      	movs	r3, #0
 8002df6:	827b      	strh	r3, [r7, #18]
 8002df8:	8a7a      	ldrh	r2, [r7, #18]
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	f080 808e 	bcs.w	8002f1e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x184>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002e02:	2310      	movs	r3, #16
 8002e04:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002e06:	8a7a      	ldrh	r2, [r7, #18]
 8002e08:	7ffb      	ldrb	r3, [r7, #31]
 8002e0a:	441a      	add	r2, r3
 8002e0c:	88fb      	ldrh	r3, [r7, #6]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	dd05      	ble.n	8002e1e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x84>
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	8a7b      	ldrh	r3, [r7, #18]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002e1e:	7ffa      	ldrb	r2, [r7, #31]
 8002e20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e24:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	dd03      	ble.n	8002e34 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x9a>
 8002e2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e30:	425b      	negs	r3, r3
 8002e32:	77fb      	strb	r3, [r7, #31]
        
        if (useProgMem) {
 8002e34:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d013      	beq.n	8002e64 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xca>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	747b      	strb	r3, [r7, #17]
 8002e40:	7c7a      	ldrb	r2, [r7, #17]
 8002e42:	7ffb      	ldrb	r3, [r7, #31]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d211      	bcs.n	8002e6c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xd2>
 8002e48:	8a7a      	ldrh	r2, [r7, #18]
 8002e4a:	7c7b      	ldrb	r3, [r7, #17]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	441a      	add	r2, r3
 8002e52:	7c7b      	ldrb	r3, [r7, #17]
 8002e54:	6979      	ldr	r1, [r7, #20]
 8002e56:	440b      	add	r3, r1
 8002e58:	7812      	ldrb	r2, [r2, #0]
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	7c7b      	ldrb	r3, [r7, #17]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	747b      	strb	r3, [r7, #17]
 8002e62:	e7ed      	b.n	8002e40 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xa6>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 8002e64:	8a7b      	ldrh	r3, [r7, #18]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	4413      	add	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
        }

        I2Cdev::writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	7998      	ldrb	r0, [r3, #6]
 8002e70:	7ffa      	ldrb	r2, [r7, #31]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	216f      	movs	r1, #111	; 0x6f
 8002e76:	f7fe fe2d 	bl	8001ad4 <_ZN6I2Cdev10writeBytesEhhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 8002e7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d02a      	beq.n	8002ed8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d027      	beq.n	8002ed8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
            setMemoryBank(bank);
 8002e88:	7979      	ldrb	r1, [r7, #5]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f7ff fed0 	bl	8002c34 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002e94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e98:	4619      	mov	r1, r3
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f7ff fef4 	bl	8002c88 <_ZN7MPU605021setMemoryStartAddressEh>
            I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	7998      	ldrb	r0, [r3, #6]
 8002ea4:	7ffa      	ldrb	r2, [r7, #31]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	216f      	movs	r1, #111	; 0x6f
 8002eaa:	f7fe fc21 	bl	80016f0 <_ZN6I2Cdev9readBytesEhhhPh>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 8002eae:	7ffb      	ldrb	r3, [r7, #31]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	69b9      	ldr	r1, [r7, #24]
 8002eb4:	6978      	ldr	r0, [r7, #20]
 8002eb6:	f00c ff11 	bl	800fcdc <memcmp>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00b      	beq.n	8002ed8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
 8002ec0:	69b8      	ldr	r0, [r7, #24]
 8002ec2:	f00c ff03 	bl	800fccc <free>
                if (useProgMem) free(progBuffer);
 8002ec6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
 8002ece:	6978      	ldr	r0, [r7, #20]
 8002ed0:	f00c fefc 	bl	800fccc <free>
                return false; // uh oh.
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e031      	b.n	8002f3c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a2>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	8a7b      	ldrh	r3, [r7, #18]
 8002ede:	4413      	add	r3, r2
 8002ee0:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002ee2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002ee6:	7ffb      	ldrb	r3, [r7, #31]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002eee:	8a7a      	ldrh	r2, [r7, #18]
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d280      	bcs.n	8002df8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
            if (address == 0) bank++;
 8002ef6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d102      	bne.n	8002f04 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x16a>
 8002efe:	797b      	ldrb	r3, [r7, #5]
 8002f00:	3301      	adds	r3, #1
 8002f02:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002f04:	7979      	ldrb	r1, [r7, #5]
 8002f06:	2300      	movs	r3, #0
 8002f08:	2200      	movs	r2, #0
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f7ff fe92 	bl	8002c34 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002f10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f14:	4619      	mov	r1, r3
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f7ff feb6 	bl	8002c88 <_ZN7MPU605021setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 8002f1c:	e76c      	b.n	8002df8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
        }
    }
    if (verify) free(verifyBuffer);
 8002f1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x192>
 8002f26:	69b8      	ldr	r0, [r7, #24]
 8002f28:	f00c fed0 	bl	800fccc <free>
    if (useProgMem) free(progBuffer);
 8002f2c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a0>
 8002f34:	6978      	ldr	r0, [r7, #20]
 8002f36:	f00c fec9 	bl	800fccc <free>
    return true;
 8002f3a:	2301      	movs	r3, #1
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3720      	adds	r7, #32
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af04      	add	r7, sp, #16
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	461a      	mov	r2, r3
 8002f52:	460b      	mov	r3, r1
 8002f54:	80fb      	strh	r3, [r7, #6]
 8002f56:	4613      	mov	r3, r2
 8002f58:	717b      	strb	r3, [r7, #5]
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 8002f5a:	7979      	ldrb	r1, [r7, #5]
 8002f5c:	88fa      	ldrh	r2, [r7, #6]
 8002f5e:	2301      	movs	r3, #1
 8002f60:	9302      	str	r3, [sp, #8]
 8002f62:	7f3b      	ldrb	r3, [r7, #28]
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	7e3b      	ldrb	r3, [r7, #24]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f7ff ff13 	bl	8002d9a <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 8002f74:	4603      	mov	r3, r0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>:
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b08c      	sub	sp, #48	; 0x30
 8002f82:	af04      	add	r7, sp, #16
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	4611      	mov	r1, r2
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	80fb      	strh	r3, [r7, #6]
 8002f90:	4613      	mov	r3, r2
 8002f92:	717b      	strb	r3, [r7, #5]
    uint8_t *progBuffer = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
	uint8_t success, special;
    uint16_t i, j;
    if (useProgMem) {
 8002f98:	797b      	ldrb	r3, [r7, #5]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d004      	beq.n	8002fa8 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2a>
        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
 8002f9e:	2008      	movs	r0, #8
 8002fa0:	f00c fe8c 	bl	800fcbc <malloc>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	61fb      	str	r3, [r7, #28]
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
 8002fa8:	2300      	movs	r3, #0
 8002faa:	833b      	strh	r3, [r7, #24]
 8002fac:	8b3a      	ldrh	r2, [r7, #24]
 8002fae:	88fb      	ldrh	r3, [r7, #6]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f080 80a1 	bcs.w	80030f8 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x17a>
        if (useProgMem) {
 8002fb6:	797b      	ldrb	r3, [r7, #5]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d018      	beq.n	8002fee <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x70>
            bank = pgm_read_byte(data + i++);
 8002fbc:	8b3b      	ldrh	r3, [r7, #24]
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	833a      	strh	r2, [r7, #24]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	757b      	strb	r3, [r7, #21]
            offset = pgm_read_byte(data + i++);
 8002fcc:	8b3b      	ldrh	r3, [r7, #24]
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	833a      	strh	r2, [r7, #24]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	753b      	strb	r3, [r7, #20]
            length = pgm_read_byte(data + i++);
 8002fdc:	8b3b      	ldrh	r3, [r7, #24]
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	833a      	strh	r2, [r7, #24]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	74fb      	strb	r3, [r7, #19]
 8002fec:	e017      	b.n	800301e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xa0>
        } else {
            bank = data[i++];
 8002fee:	8b3b      	ldrh	r3, [r7, #24]
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	833a      	strh	r2, [r7, #24]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	757b      	strb	r3, [r7, #21]
            offset = data[i++];
 8002ffe:	8b3b      	ldrh	r3, [r7, #24]
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	833a      	strh	r2, [r7, #24]
 8003004:	461a      	mov	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	4413      	add	r3, r2
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	753b      	strb	r3, [r7, #20]
            length = data[i++];
 800300e:	8b3b      	ldrh	r3, [r7, #24]
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	833a      	strh	r2, [r7, #24]
 8003014:	461a      	mov	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	4413      	add	r3, r2
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	74fb      	strb	r3, [r7, #19]
        }

        // write data or perform special action
        if (length > 0) {
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d03a      	beq.n	800309a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x11c>
            Serial.print(bank);
            Serial.print(", offset ");
            Serial.print(offset);
            Serial.print(", length=");
            Serial.println(length);*/
            if (useProgMem) {
 8003024:	797b      	ldrb	r3, [r7, #5]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d01d      	beq.n	8003066 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xe8>
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
 800302a:	7cfb      	ldrb	r3, [r7, #19]
 800302c:	2b04      	cmp	r3, #4
 800302e:	d905      	bls.n	800303c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xbe>
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	4619      	mov	r1, r3
 8003034:	69f8      	ldr	r0, [r7, #28]
 8003036:	f00d fb7b 	bl	8010730 <realloc>
 800303a:	61f8      	str	r0, [r7, #28]
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 800303c:	2300      	movs	r3, #0
 800303e:	82fb      	strh	r3, [r7, #22]
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	b29b      	uxth	r3, r3
 8003044:	8afa      	ldrh	r2, [r7, #22]
 8003046:	429a      	cmp	r2, r3
 8003048:	d211      	bcs.n	800306e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xf0>
 800304a:	8b3a      	ldrh	r2, [r7, #24]
 800304c:	8afb      	ldrh	r3, [r7, #22]
 800304e:	4413      	add	r3, r2
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	441a      	add	r2, r3
 8003054:	8afb      	ldrh	r3, [r7, #22]
 8003056:	69f9      	ldr	r1, [r7, #28]
 8003058:	440b      	add	r3, r1
 800305a:	7812      	ldrb	r2, [r2, #0]
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	8afb      	ldrh	r3, [r7, #22]
 8003060:	3301      	adds	r3, #1
 8003062:	82fb      	strh	r3, [r7, #22]
 8003064:	e7ec      	b.n	8003040 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xc2>
            } else {
                progBuffer = (uint8_t *)data + i;
 8003066:	8b3b      	ldrh	r3, [r7, #24]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	4413      	add	r3, r2
 800306c:	61fb      	str	r3, [r7, #28]
            }
            success = writeMemoryBlock(progBuffer, length, bank, offset, true);
 800306e:	7cfb      	ldrb	r3, [r7, #19]
 8003070:	b29a      	uxth	r2, r3
 8003072:	7d79      	ldrb	r1, [r7, #21]
 8003074:	2300      	movs	r3, #0
 8003076:	9302      	str	r3, [sp, #8]
 8003078:	2301      	movs	r3, #1
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	7d3b      	ldrb	r3, [r7, #20]
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	460b      	mov	r3, r1
 8003082:	69f9      	ldr	r1, [r7, #28]
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f7ff fe88 	bl	8002d9a <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 800308a:	4603      	mov	r3, r0
 800308c:	76fb      	strb	r3, [r7, #27]
            i += length;
 800308e:	7cfb      	ldrb	r3, [r7, #19]
 8003090:	b29a      	uxth	r2, r3
 8003092:	8b3b      	ldrh	r3, [r7, #24]
 8003094:	4413      	add	r3, r2
 8003096:	833b      	strh	r3, [r7, #24]
 8003098:	e022      	b.n	80030e0 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            // special instruction
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
            if (useProgMem) {
 800309a:	797b      	ldrb	r3, [r7, #5]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x134>
                special = pgm_read_byte(data + i++);
 80030a0:	8b3b      	ldrh	r3, [r7, #24]
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	833a      	strh	r2, [r7, #24]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4413      	add	r3, r2
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	76bb      	strb	r3, [r7, #26]
 80030b0:	e007      	b.n	80030c2 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x144>
            } else {
                special = data[i++];
 80030b2:	8b3b      	ldrh	r3, [r7, #24]
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	833a      	strh	r2, [r7, #24]
 80030b8:	461a      	mov	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4413      	add	r3, r2
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	76bb      	strb	r3, [r7, #26]
            }
            /*Serial.print("Special command code ");
            Serial.print(special, HEX);
            Serial.println(" found...");*/
            if (special == 0x01) {
 80030c2:	7ebb      	ldrb	r3, [r7, #26]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d109      	bne.n	80030dc <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15e>
                // enable DMP-related interrupts
                
                //setIntZeroMotionEnabled(true);
                //setIntFIFOBufferOverflowEnabled(true);
                //setIntDMPEnabled(true);
                I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	799b      	ldrb	r3, [r3, #6]
 80030cc:	2232      	movs	r2, #50	; 0x32
 80030ce:	2138      	movs	r1, #56	; 0x38
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fe fc8b 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>

                success = true;
 80030d6:	2301      	movs	r3, #1
 80030d8:	76fb      	strb	r3, [r7, #27]
 80030da:	e001      	b.n	80030e0 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            } else {
                // unknown special command
                success = false;
 80030dc:	2300      	movs	r3, #0
 80030de:	76fb      	strb	r3, [r7, #27]
            }
        }
        
        if (!success) {
 80030e0:	7efb      	ldrb	r3, [r7, #27]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f47f af62 	bne.w	8002fac <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2e>
            if (useProgMem) free(progBuffer);
 80030e8:	797b      	ldrb	r3, [r7, #5]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x176>
 80030ee:	69f8      	ldr	r0, [r7, #28]
 80030f0:	f00c fdec 	bl	800fccc <free>
            return false; // uh oh
 80030f4:	2300      	movs	r3, #0
 80030f6:	e006      	b.n	8003106 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x188>
        }
    }
    if (useProgMem) free(progBuffer);
 80030f8:	797b      	ldrb	r3, [r7, #5]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x186>
 80030fe:	69f8      	ldr	r0, [r7, #28]
 8003100:	f00c fde4 	bl	800fccc <free>
    return true;
 8003104:	2301      	movs	r3, #1
}
 8003106:	4618      	mov	r0, r3
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>:
bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	4613      	mov	r3, r2
 800311a:	80fb      	strh	r3, [r7, #6]
    return writeDMPConfigurationSet(data, dataSize, true);
 800311c:	88fa      	ldrh	r2, [r7, #6]
 800311e:	2301      	movs	r3, #1
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7ff ff2b 	bl	8002f7e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>
 8003128:	4603      	mov	r3, r0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <_ZN7MPU605013setDMPConfig1Eh>:

uint8_t MPU6050::getDMPConfig1() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig1(uint8_t config) {
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	799b      	ldrb	r3, [r3, #6]
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	2170      	movs	r1, #112	; 0x70
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe fc50 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <_ZN7MPU605013setDMPConfig2Eh>:

uint8_t MPU6050::getDMPConfig2() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig2(uint8_t config) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	799b      	ldrb	r3, [r3, #6]
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	2171      	movs	r1, #113	; 0x71
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe fc3f 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <_Z41__static_initialization_and_destruction_0ii>:
     } while (!packetReceived);
            HAL_GPIO_TogglePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin);   //NOTDONE debug

     getFIFOBytes(data, length); //Get 1 packet
     return 1;
}
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d109      	bne.n	800319c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800318e:	4293      	cmp	r3, r2
 8003190:	d104      	bne.n	800319c <_Z41__static_initialization_and_destruction_0ii+0x24>
MPU6050_6Axis_MotionApps20 mpu;                      //create new object
 8003192:	2200      	movs	r2, #0
 8003194:	21d0      	movs	r1, #208	; 0xd0
 8003196:	4803      	ldr	r0, [pc, #12]	; (80031a4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8003198:	f7fe fd1e 	bl	8001bd8 <_ZN26MPU6050_6Axis_MotionApps20C1EhPv>
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	200004bc 	.word	0x200004bc

080031a8 <_GLOBAL__sub_I_MPU6050_TX_buf>:
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80031b0:	2001      	movs	r0, #1
 80031b2:	f7ff ffe1 	bl	8003178 <_Z41__static_initialization_and_destruction_0ii>
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv>:
#ifndef MPU6050_DMP_FIFO_RATE_DIVISOR 
#define MPU6050_DMP_FIFO_RATE_DIVISOR 0x01 // The New instance of the Firmware has this as the default
#endif

// I Simplified this:
uint8_t MPU6050_6Axis_MotionApps20::dmpInitialize() {
 80031b8:	b5b0      	push	{r4, r5, r7, lr}
 80031ba:	b0ae      	sub	sp, #184	; 0xb8
 80031bc:	af04      	add	r7, sp, #16
 80031be:	6078      	str	r0, [r7, #4]
    // reset device
    DEBUG_PRINTLN(F("\n\nResetting MPU6050..."));
    reset();
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fb9b 	bl	80028fe <_ZN7MPU60505resetEv>
    HAL_Delay(30); // wait after reset
 80031c8:	201e      	movs	r0, #30
 80031ca:	f002 fe31 	bl	8005e30 <HAL_Delay>
    Serial.println(F("Enabling wake cycle..."));
    setWakeCycleEnabled(true);*/

    // disable sleep mode
    DEBUG_PRINTLN(F("Disabling sleep mode..."));
    setSleepEnabled(false);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2100      	movs	r1, #0
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fba2 	bl	800291c <_ZN7MPU605015setSleepEnabledEb>

    // get MPU hardware revision
    DEBUG_PRINTLN(F("Selecting user bank 16..."));
    setMemoryBank(0x10, true, true);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	2301      	movs	r3, #1
 80031dc:	2201      	movs	r2, #1
 80031de:	2110      	movs	r1, #16
 80031e0:	f7ff fd28 	bl	8002c34 <_ZN7MPU605013setMemoryBankEhbb>
    DEBUG_PRINTLN(F("Selecting memory byte 6..."));
    setMemoryStartAddress(0x06);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2106      	movs	r1, #6
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fd4d 	bl	8002c88 <_ZN7MPU605021setMemoryStartAddressEh>
    DEBUG_PRINTLN(F("Checking hardware revision..."));
    readMemoryByte();
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fd5a 	bl	8002caa <_ZN7MPU605014readMemoryByteEv>
    DEBUG_PRINT(F("Revision @ user[16][6] = "));
    DEBUG_PRINTLNF(hwRevision, HEX);
    DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
    setMemoryBank(0, false, false);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	2300      	movs	r3, #0
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	f7ff fd19 	bl	8002c34 <_ZN7MPU605013setMemoryBankEhbb>

    // check OTP bank valid
    DEBUG_PRINTLN(F("Reading OTP bank valid flag..."));
    getOTPBankValid();
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fbf4 	bl	80029f2 <_ZN7MPU605015getOTPBankValidEv>
    DEBUG_PRINT(F("OTP bank is "));
    DEBUG_PRINTLN(otpValid ? F("valid!") : F("invalid!"));

    // get X/Y/Z gyro offsets
    DEBUG_PRINTLN(F("Reading gyro offset TC values..."));
    int8_t xgOffsetTC = getXGyroOffsetTC();
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fc13 	bl	8002a38 <_ZN7MPU605016getXGyroOffsetTCEv>
 8003212:	4603      	mov	r3, r0
 8003214:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    int8_t ygOffsetTC = getYGyroOffsetTC();
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fc34 	bl	8002a88 <_ZN7MPU605016getYGyroOffsetTCEv>
 8003220:	4603      	mov	r3, r0
 8003222:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    int8_t zgOffsetTC = getZGyroOffsetTC();
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fc55 	bl	8002ad8 <_ZN7MPU605016getZGyroOffsetTCEv>
 800322e:	4603      	mov	r3, r0
 8003230:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    DEBUG_PRINT(F("Z gyro offset = "));
    DEBUG_PRINTLN(zgOffsetTC);

    // setup weird slave stuff (?)
    DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
    setSlaveAddress(0, 0x7F);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	227f      	movs	r2, #127	; 0x7f
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fadf 	bl	80027fe <_ZN7MPU605015setSlaveAddressEhh>
    DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
    setI2CMasterModeEnabled(false);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fb2b 	bl	80028a0 <_ZN7MPU605023setI2CMasterModeEnabledEb>
    DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
    setSlaveAddress(0, 0x68);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2268      	movs	r2, #104	; 0x68
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fad4 	bl	80027fe <_ZN7MPU605015setSlaveAddressEhh>
    DEBUG_PRINTLN(F("Resetting I2C Master control..."));
    resetI2CMaster();
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fb41 	bl	80028e0 <_ZN7MPU605014resetI2CMasterEv>
    HAL_Delay(20);
 800325e:	2014      	movs	r0, #20
 8003260:	f002 fde6 	bl	8005e30 <HAL_Delay>

    // load DMP code into memory banks
    DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
    DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
    DEBUG_PRINTLN(F(" bytes)"));
    if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) {
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	2301      	movs	r3, #1
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	2300      	movs	r3, #0
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	2300      	movs	r3, #0
 8003270:	f240 7289 	movw	r2, #1929	; 0x789
 8003274:	49c7      	ldr	r1, [pc, #796]	; (8003594 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3dc>)
 8003276:	f7ff fe65 	bl	8002f44 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 825c 	beq.w	800373a <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x582>

        // write DMP configuration
        DEBUG_PRINT(F("Writing DMP configuration to MPU memory banks ("));
        DEBUG_PRINT(MPU6050_DMP_CONFIG_SIZE);
        DEBUG_PRINTLN(F(" bytes in config def)"));
        if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	22c0      	movs	r2, #192	; 0xc0
 8003286:	49c4      	ldr	r1, [pc, #784]	; (8003598 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e0>)
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff40 	bl	800310e <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8250 	beq.w	8003736 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x57e>
            DEBUG_PRINTLN(F("Success! DMP configuration written and verified."));

            DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
            setClockSource(MPU6050_CLOCK_PLL_ZGYRO);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2103      	movs	r1, #3
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fb4f 	bl	800293e <_ZN7MPU605014setClockSourceEh>

            DEBUG_PRINTLN(F("Setting DMP and FIFO_OFLOW interrupts enabled..."));
            setIntEnabled(0x12);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2112      	movs	r1, #18
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fac7 	bl	8002838 <_ZN7MPU605013setIntEnabledEh>

            DEBUG_PRINTLN(F("Setting sample rate to 200Hz..."));
            setRate(4); // 1khz / (1 + 4) = 200 Hz
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2104      	movs	r1, #4
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fa04 	bl	80026bc <_ZN7MPU60507setRateEh>

            DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
            setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2101      	movs	r1, #1
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fa10 	bl	80026de <_ZN7MPU605020setExternalFrameSyncEh>

            DEBUG_PRINTLN(F("Setting DLPF bandwidth to 42Hz..."));
            setDLPFMode(MPU6050_DLPF_BW_42);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2103      	movs	r1, #3
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fa1e 	bl	8002704 <_ZN7MPU605011setDLPFModeEh>

            DEBUG_PRINTLN(F("Setting gyro sensitivity to +/- 2000 deg/sec..."));
            setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2103      	movs	r1, #3
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fa2c 	bl	800272a <_ZN7MPU605021setFullScaleGyroRangeEh>

            DEBUG_PRINTLN(F("Setting DMP configuration bytes (function unknown)..."));
            setDMPConfig1(0x03);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2103      	movs	r1, #3
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff ff2b 	bl	8003132 <_ZN7MPU605013setDMPConfig1Eh>
            setDMPConfig2(0x00);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff ff37 	bl	8003154 <_ZN7MPU605013setDMPConfig2Eh>

            DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
            setOTPBankValid(false);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff fb93 	bl	8002a16 <_ZN7MPU605015setOTPBankValidEb>

            DEBUG_PRINTLN(F("Setting X/Y/Z gyro offset TCs to previous values..."));
            setXGyroOffsetTC(xgOffsetTC);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f997 20a3 	ldrsb.w	r2, [r7, #163]	; 0xa3
 80032f6:	4611      	mov	r1, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fbb2 	bl	8002a62 <_ZN7MPU605016setXGyroOffsetTCEa>
            setYGyroOffsetTC(ygOffsetTC);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f997 20a2 	ldrsb.w	r2, [r7, #162]	; 0xa2
 8003304:	4611      	mov	r1, r2
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fbd3 	bl	8002ab2 <_ZN7MPU605016setYGyroOffsetTCEa>
            setZGyroOffsetTC(zgOffsetTC);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f997 20a1 	ldrsb.w	r2, [r7, #161]	; 0xa1
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fbf4 	bl	8002b02 <_ZN7MPU605016setZGyroOffsetTCEa>
            //setYGyroOffset(0);
            //setZGyroOffset(0);

            DEBUG_PRINTLN(F("Writing final memory update 1/7 (function unknown)..."));
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003320:	2300      	movs	r3, #0
 8003322:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003326:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800332a:	2b03      	cmp	r3, #3
 800332c:	d906      	bls.n	800333c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x184>
 800332e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003332:	1c9a      	adds	r2, r3, #2
 8003334:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003338:	429a      	cmp	r2, r3
 800333a:	db15      	blt.n	8003368 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x1b0>
 800333c:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003340:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003344:	4995      	ldr	r1, [pc, #596]	; (800359c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 8003346:	5c8a      	ldrb	r2, [r1, r2]
 8003348:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800334c:	440b      	add	r3, r1
 800334e:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003352:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003356:	3301      	adds	r3, #1
 8003358:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800335c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003360:	3301      	adds	r3, #1
 8003362:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003366:	e7de      	b.n	8003326 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x16e>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800336e:	3103      	adds	r1, #3
 8003370:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003374:	b29a      	uxth	r2, r3
 8003376:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 800337a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800337e:	2500      	movs	r5, #0
 8003380:	9502      	str	r5, [sp, #8]
 8003382:	2501      	movs	r5, #1
 8003384:	9501      	str	r5, [sp, #4]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	4623      	mov	r3, r4
 800338a:	f7ff fd06 	bl	8002d9a <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Writing final memory update 2/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 800338e:	2300      	movs	r3, #0
 8003390:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003394:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003398:	2b03      	cmp	r3, #3
 800339a:	d906      	bls.n	80033aa <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x1f2>
 800339c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80033a0:	1c9a      	adds	r2, r3, #2
 80033a2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033a6:	429a      	cmp	r2, r3
 80033a8:	db15      	blt.n	80033d6 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x21e>
 80033aa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80033ae:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033b2:	497a      	ldr	r1, [pc, #488]	; (800359c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 80033b4:	5c8a      	ldrb	r2, [r1, r2]
 80033b6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80033ba:	440b      	add	r3, r1
 80033bc:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80033c0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033c4:	3301      	adds	r3, #1
 80033c6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80033ca:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80033ce:	3301      	adds	r3, #1
 80033d0:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80033d4:	e7de      	b.n	8003394 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x1dc>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80033dc:	3103      	adds	r1, #3
 80033de:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 80033e8:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80033ec:	2500      	movs	r5, #0
 80033ee:	9502      	str	r5, [sp, #8]
 80033f0:	2501      	movs	r5, #1
 80033f2:	9501      	str	r5, [sp, #4]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	4623      	mov	r3, r4
 80033f8:	f7ff fccf 	bl	8002d9a <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fa5f 	bl	80028c2 <_ZN7MPU60509resetFIFOEv>

            DEBUG_PRINTLN(F("Reading FIFO count..."));
            uint16_t fifoCount = getFIFOCount();
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff faac 	bl	8002964 <_ZN7MPU605012getFIFOCountEv>
 800340c:	4603      	mov	r3, r0
 800340e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            uint8_t fifoBuffer[128];

            DEBUG_PRINT(F("Current FIFO count="));
            DEBUG_PRINTLN(fifoCount);
            getFIFOBytes(fifoBuffer, fifoCount);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	f107 010c 	add.w	r1, r7, #12
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff faba 	bl	8002998 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
            setMotionDetectionThreshold(2);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2102      	movs	r1, #2
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff f9a4 	bl	8002776 <_ZN7MPU605027setMotionDetectionThresholdEh>

            DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
            setZeroMotionDetectionThreshold(156);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	219c      	movs	r1, #156	; 0x9c
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff f9c1 	bl	80027ba <_ZN7MPU605031setZeroMotionDetectionThresholdEh>

            DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
            setMotionDetectionDuration(80);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2150      	movs	r1, #80	; 0x50
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff f9ab 	bl	8002798 <_ZN7MPU605026setMotionDetectionDurationEh>

            DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
            setZeroMotionDetectionDuration(0);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2100      	movs	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff f9c8 	bl	80027dc <_ZN7MPU605030setZeroMotionDetectionDurationEh>

            DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fa37 	bl	80028c2 <_ZN7MPU60509resetFIFOEv>

            DEBUG_PRINTLN(F("Enabling FIFO..."));
            setFIFOEnabled(true);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2101      	movs	r1, #1
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fa10 	bl	800287e <_ZN7MPU605014setFIFOEnabledEb>

            DEBUG_PRINTLN(F("Enabling DMP..."));
            setDMPEnabled(true);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2101      	movs	r1, #1
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fbc6 	bl	8002bf4 <_ZN7MPU605013setDMPEnabledEb>

            DEBUG_PRINTLN(F("Resetting DMP..."));
            resetDMP();
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff fbd3 	bl	8002c16 <_ZN7MPU60508resetDMPEv>

            DEBUG_PRINTLN(F("Writing final memory update 3/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003470:	2300      	movs	r3, #0
 8003472:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003476:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800347a:	2b03      	cmp	r3, #3
 800347c:	d906      	bls.n	800348c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x2d4>
 800347e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003482:	1c9a      	adds	r2, r3, #2
 8003484:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003488:	429a      	cmp	r2, r3
 800348a:	db15      	blt.n	80034b8 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x300>
 800348c:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003490:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003494:	4941      	ldr	r1, [pc, #260]	; (800359c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 8003496:	5c8a      	ldrb	r2, [r1, r2]
 8003498:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800349c:	440b      	add	r3, r1
 800349e:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80034a2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80034a6:	3301      	adds	r3, #1
 80034a8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80034ac:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80034b0:	3301      	adds	r3, #1
 80034b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80034b6:	e7de      	b.n	8003476 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x2be>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80034be:	3103      	adds	r1, #3
 80034c0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 80034ca:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80034ce:	2500      	movs	r5, #0
 80034d0:	9502      	str	r5, [sp, #8]
 80034d2:	2501      	movs	r5, #1
 80034d4:	9501      	str	r5, [sp, #4]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	4623      	mov	r3, r4
 80034da:	f7ff fc5e 	bl	8002d9a <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Writing final memory update 4/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80034de:	2300      	movs	r3, #0
 80034e0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80034e4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d906      	bls.n	80034fa <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x342>
 80034ec:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80034f0:	1c9a      	adds	r2, r3, #2
 80034f2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80034f6:	429a      	cmp	r2, r3
 80034f8:	db15      	blt.n	8003526 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x36e>
 80034fa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80034fe:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003502:	4926      	ldr	r1, [pc, #152]	; (800359c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 8003504:	5c8a      	ldrb	r2, [r1, r2]
 8003506:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800350a:	440b      	add	r3, r1
 800350c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003510:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003514:	3301      	adds	r3, #1
 8003516:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800351a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800351e:	3301      	adds	r3, #1
 8003520:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003524:	e7de      	b.n	80034e4 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x32c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800352c:	3103      	adds	r1, #3
 800352e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003532:	b29a      	uxth	r2, r3
 8003534:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 8003538:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800353c:	2500      	movs	r5, #0
 800353e:	9502      	str	r5, [sp, #8]
 8003540:	2501      	movs	r5, #1
 8003542:	9501      	str	r5, [sp, #4]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	4623      	mov	r3, r4
 8003548:	f7ff fc27 	bl	8002d9a <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Writing final memory update 5/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 800354c:	2300      	movs	r3, #0
 800354e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003552:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003556:	2b03      	cmp	r3, #3
 8003558:	d906      	bls.n	8003568 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3b0>
 800355a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800355e:	1c9a      	adds	r2, r3, #2
 8003560:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003564:	429a      	cmp	r2, r3
 8003566:	db1b      	blt.n	80035a0 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e8>
 8003568:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800356c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003570:	490a      	ldr	r1, [pc, #40]	; (800359c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 8003572:	5c8a      	ldrb	r2, [r1, r2]
 8003574:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003578:	440b      	add	r3, r1
 800357a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800357e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003582:	3301      	adds	r3, #1
 8003584:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003588:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800358c:	3301      	adds	r3, #1
 800358e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003592:	e7de      	b.n	8003552 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x39a>
 8003594:	08012b04 	.word	0x08012b04
 8003598:	08013290 	.word	0x08013290
 800359c:	08013350 	.word	0x08013350
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80035a6:	3103      	adds	r1, #3
 80035a8:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 80035b2:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80035b6:	2500      	movs	r5, #0
 80035b8:	9502      	str	r5, [sp, #8]
 80035ba:	2501      	movs	r5, #1
 80035bc:	9501      	str	r5, [sp, #4]
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	4623      	mov	r3, r4
 80035c2:	f7ff fbea 	bl	8002d9a <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff f9cb 	bl	8002964 <_ZN7MPU605012getFIFOCountEv>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80035d4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80035d8:	2b02      	cmp	r3, #2
 80035da:	bf94      	ite	ls
 80035dc:	2301      	movls	r3, #1
 80035de:	2300      	movhi	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d000      	beq.n	80035e8 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x430>
 80035e6:	e7ee      	b.n	80035c6 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x40e>

            DEBUG_PRINT(F("Current FIFO count="));
            DEBUG_PRINTLN(fifoCount);
            DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	f107 010c 	add.w	r1, r7, #12
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff f9cf 	bl	8002998 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Reading interrupt status..."));
            getIntStatus();
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff f92c 	bl	800285a <_ZN7MPU605012getIntStatusEv>

            DEBUG_PRINT(F("Current interrupt status="));
            DEBUG_PRINTLNF(mpuIntStatus, HEX);

            DEBUG_PRINTLN(F("Reading final memory update 6/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003602:	2300      	movs	r3, #0
 8003604:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003608:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800360c:	2b03      	cmp	r3, #3
 800360e:	d906      	bls.n	800361e <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x466>
 8003610:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003614:	1c9a      	adds	r2, r3, #2
 8003616:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800361a:	429a      	cmp	r2, r3
 800361c:	db15      	blt.n	800364a <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x492>
 800361e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003622:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003626:	4947      	ldr	r1, [pc, #284]	; (8003744 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x58c>)
 8003628:	5c8a      	ldrb	r2, [r1, r2]
 800362a:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800362e:	440b      	add	r3, r1
 8003630:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003634:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003638:	3301      	adds	r3, #1
 800363a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800363e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003642:	3301      	adds	r3, #1
 8003644:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003648:	e7de      	b.n	8003608 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x450>
            readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003650:	3103      	adds	r1, #3
 8003652:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003656:	b29a      	uxth	r2, r3
 8003658:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 800365c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	4623      	mov	r3, r4
 8003664:	f7ff fb33 	bl	8002cce <_ZN7MPU605015readMemoryBlockEPhthh>

            DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff f97a 	bl	8002964 <_ZN7MPU605012getFIFOCountEv>
 8003670:	4603      	mov	r3, r0
 8003672:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8003676:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800367a:	2b02      	cmp	r3, #2
 800367c:	bf94      	ite	ls
 800367e:	2301      	movls	r3, #1
 8003680:	2300      	movhi	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d000      	beq.n	800368a <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x4d2>
 8003688:	e7ee      	b.n	8003668 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x4b0>

            DEBUG_PRINT(F("Current FIFO count="));
            DEBUG_PRINTLN(fifoCount);

            DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	f107 010c 	add.w	r1, r7, #12
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff f97e 	bl	8002998 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Reading interrupt status..."));
            getIntStatus();
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff f8db 	bl	800285a <_ZN7MPU605012getIntStatusEv>

            DEBUG_PRINT(F("Current interrupt status="));
            DEBUG_PRINTLNF(mpuIntStatus, HEX);

            DEBUG_PRINTLN(F("Writing final memory update 7/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80036a4:	2300      	movs	r3, #0
 80036a6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80036aa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d906      	bls.n	80036c0 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x508>
 80036b2:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80036b6:	1c9a      	adds	r2, r3, #2
 80036b8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80036bc:	429a      	cmp	r2, r3
 80036be:	db15      	blt.n	80036ec <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x534>
 80036c0:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80036c4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80036c8:	491e      	ldr	r1, [pc, #120]	; (8003744 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x58c>)
 80036ca:	5c8a      	ldrb	r2, [r1, r2]
 80036cc:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80036d0:	440b      	add	r3, r1
 80036d2:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80036d6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80036da:	3301      	adds	r3, #1
 80036dc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80036e0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80036e4:	3301      	adds	r3, #1
 80036e6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80036ea:	e7de      	b.n	80036aa <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x4f2>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80036f2:	3103      	adds	r1, #3
 80036f4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 80036fe:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003702:	2500      	movs	r5, #0
 8003704:	9502      	str	r5, [sp, #8]
 8003706:	2501      	movs	r5, #1
 8003708:	9501      	str	r5, [sp, #4]
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	4623      	mov	r3, r4
 800370e:	f7ff fb44 	bl	8002d9a <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("DMP is good to go! Finally."));

            DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
            setDMPEnabled(false);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fa6c 	bl	8002bf4 <_ZN7MPU605013setDMPEnabledEb>

            DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
            dmpPacketSize = 42;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	222a      	movs	r2, #42	; 0x2a
 8003720:	839a      	strh	r2, [r3, #28]
            /*if ((dmpPacketBuffer = (uint8_t *)malloc(42)) == 0) {
                return 3; // TODO: proper error code for no memory
            }*/

            DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
            resetFIFO();
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff f8cc 	bl	80028c2 <_ZN7MPU60509resetFIFOEv>
            getIntStatus();
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff f894 	bl	800285a <_ZN7MPU605012getIntStatusEv>
        }
    } else {
        DEBUG_PRINTLN(F("ERROR! DMP code verification failed."));
        return 1; // main binary block loading failed
    }
    return 0; // success
 8003732:	2300      	movs	r3, #0
 8003734:	e002      	b.n	800373c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x584>
            return 2; // configuration block loading failed
 8003736:	2302      	movs	r3, #2
 8003738:	e000      	b.n	800373c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x584>
        return 1; // main binary block loading failed
 800373a:	2301      	movs	r3, #1
}
 800373c:	4618      	mov	r0, r3
 800373e:	37a8      	adds	r7, #168	; 0xa8
 8003740:	46bd      	mov	sp, r7
 8003742:	bdb0      	pop	{r4, r5, r7, pc}
 8003744:	08013350 	.word	0x08013350

08003748 <_Z17get_XW_diffAnglesv>:
 * form of a Quaternion and then converts it to usable PITCH,ROLL,YAW angles
 * 
 * --Custom Method!
 */
void get_XW_diffAngles()
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
  //float *p = QuaternionSLERP(QuaternionProduct(QuaternionSLERP(&OriginQuaternion[0], &MPUoutputQuaternion[0]), &FrameOriginQuaternion[0]), &LoopWQuaternion[0]);
  //float *p = QuaternionNormalize(QuaternionSLERP(FrameOriginQuaternion, QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(OriginQuaternion, MPUoutputQuaternion)), FrameOriginQuaternion)), FrameOriginQuaternion)), LoopWQuaternion))));
  float *p = QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(GyroOriginQuaternion, QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(OriginQuaternion, GyroOriginQuaternion)), MPUoutputQuaternion)))), FrameOriginQuaternion)), FrameOriginQuaternion)), LoopWQuaternion));
 800374e:	4960      	ldr	r1, [pc, #384]	; (80038d0 <_Z17get_XW_diffAnglesv+0x188>)
 8003750:	4860      	ldr	r0, [pc, #384]	; (80038d4 <_Z17get_XW_diffAnglesv+0x18c>)
 8003752:	f7fe fef3 	bl	800253c <_Z15QuaternionSLERPPfS_>
 8003756:	4603      	mov	r3, r0
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe ff01 	bl	8002560 <_Z19QuaternionNormalizePf>
 800375e:	4603      	mov	r3, r0
 8003760:	495d      	ldr	r1, [pc, #372]	; (80038d8 <_Z17get_XW_diffAnglesv+0x190>)
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe fdbc 	bl	80022e0 <_Z17QuaternionProductPfS_>
 8003768:	4603      	mov	r3, r0
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe fef8 	bl	8002560 <_Z19QuaternionNormalizePf>
 8003770:	4603      	mov	r3, r0
 8003772:	4619      	mov	r1, r3
 8003774:	4856      	ldr	r0, [pc, #344]	; (80038d0 <_Z17get_XW_diffAnglesv+0x188>)
 8003776:	f7fe fee1 	bl	800253c <_Z15QuaternionSLERPPfS_>
 800377a:	4603      	mov	r3, r0
 800377c:	4618      	mov	r0, r3
 800377e:	f7fe feef 	bl	8002560 <_Z19QuaternionNormalizePf>
 8003782:	4603      	mov	r3, r0
 8003784:	4955      	ldr	r1, [pc, #340]	; (80038dc <_Z17get_XW_diffAnglesv+0x194>)
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe fdaa 	bl	80022e0 <_Z17QuaternionProductPfS_>
 800378c:	4603      	mov	r3, r0
 800378e:	4618      	mov	r0, r3
 8003790:	f7fe fee6 	bl	8002560 <_Z19QuaternionNormalizePf>
 8003794:	4603      	mov	r3, r0
 8003796:	4951      	ldr	r1, [pc, #324]	; (80038dc <_Z17get_XW_diffAnglesv+0x194>)
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe fecf 	bl	800253c <_Z15QuaternionSLERPPfS_>
 800379e:	4603      	mov	r3, r0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fe fedd 	bl	8002560 <_Z19QuaternionNormalizePf>
 80037a6:	4603      	mov	r3, r0
 80037a8:	494d      	ldr	r1, [pc, #308]	; (80038e0 <_Z17get_XW_diffAnglesv+0x198>)
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe fd98 	bl	80022e0 <_Z17QuaternionProductPfS_>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe fed4 	bl	8002560 <_Z19QuaternionNormalizePf>
 80037b8:	6078      	str	r0, [r7, #4]
  
  LoopXWQuaternion[0] = *p;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a49      	ldr	r2, [pc, #292]	; (80038e4 <_Z17get_XW_diffAnglesv+0x19c>)
 80037c0:	6013      	str	r3, [r2, #0]
  LoopXWQuaternion[1] = *(p + 1);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4a47      	ldr	r2, [pc, #284]	; (80038e4 <_Z17get_XW_diffAnglesv+0x19c>)
 80037c8:	6053      	str	r3, [r2, #4]
  LoopXWQuaternion[2] = *(p + 2);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	4a45      	ldr	r2, [pc, #276]	; (80038e4 <_Z17get_XW_diffAnglesv+0x19c>)
 80037d0:	6093      	str	r3, [r2, #8]
  LoopXWQuaternion[3] = *(p + 3);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	4a43      	ldr	r2, [pc, #268]	; (80038e4 <_Z17get_XW_diffAnglesv+0x19c>)
 80037d8:	60d3      	str	r3, [r2, #12]

  //difference x-w in degrees
  PID_Pitch_xw_diff = 2 * (((float)asin(LoopXWQuaternion[2]) * 180) / M_PI);
 80037da:	4b42      	ldr	r3, [pc, #264]	; (80038e4 <_Z17get_XW_diffAnglesv+0x19c>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe f9be 	bl	8001b60 <_ZSt4asinf>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4940      	ldr	r1, [pc, #256]	; (80038e8 <_Z17get_XW_diffAnglesv+0x1a0>)
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fd fb07 	bl	8000dfc <__aeabi_fmul>
 80037ee:	4603      	mov	r3, r0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fc fe55 	bl	80004a0 <__aeabi_f2d>
 80037f6:	a334      	add	r3, pc, #208	; (adr r3, 80038c8 <_Z17get_XW_diffAnglesv+0x180>)
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f7fc ffd2 	bl	80007a4 <__aeabi_ddiv>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4610      	mov	r0, r2
 8003806:	4619      	mov	r1, r3
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	f7fc fcea 	bl	80001e4 <__adddf3>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	f7fd f992 	bl	8000b40 <__aeabi_d2f>
 800381c:	4603      	mov	r3, r0
 800381e:	4a33      	ldr	r2, [pc, #204]	; (80038ec <_Z17get_XW_diffAnglesv+0x1a4>)
 8003820:	6013      	str	r3, [r2, #0]
  PID_Roll_xw_diff  = 2 * (((float)asin(LoopXWQuaternion[1]) * 180) / M_PI);
 8003822:	4b30      	ldr	r3, [pc, #192]	; (80038e4 <_Z17get_XW_diffAnglesv+0x19c>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe f99a 	bl	8001b60 <_ZSt4asinf>
 800382c:	4603      	mov	r3, r0
 800382e:	492e      	ldr	r1, [pc, #184]	; (80038e8 <_Z17get_XW_diffAnglesv+0x1a0>)
 8003830:	4618      	mov	r0, r3
 8003832:	f7fd fae3 	bl	8000dfc <__aeabi_fmul>
 8003836:	4603      	mov	r3, r0
 8003838:	4618      	mov	r0, r3
 800383a:	f7fc fe31 	bl	80004a0 <__aeabi_f2d>
 800383e:	a322      	add	r3, pc, #136	; (adr r3, 80038c8 <_Z17get_XW_diffAnglesv+0x180>)
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f7fc ffae 	bl	80007a4 <__aeabi_ddiv>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	f7fc fcc6 	bl	80001e4 <__adddf3>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4610      	mov	r0, r2
 800385e:	4619      	mov	r1, r3
 8003860:	f7fd f96e 	bl	8000b40 <__aeabi_d2f>
 8003864:	4603      	mov	r3, r0
 8003866:	4a22      	ldr	r2, [pc, #136]	; (80038f0 <_Z17get_XW_diffAnglesv+0x1a8>)
 8003868:	6013      	str	r3, [r2, #0]
  PID_Yaw_xw_diff   = 2 * (((float)atan(LoopXWQuaternion[3] / LoopXWQuaternion[0]) * 180) / M_PI);
 800386a:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <_Z17get_XW_diffAnglesv+0x19c>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <_Z17get_XW_diffAnglesv+0x19c>)
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	4611      	mov	r1, r2
 8003874:	4618      	mov	r0, r3
 8003876:	f7fd fb75 	bl	8000f64 <__aeabi_fdiv>
 800387a:	4603      	mov	r3, r0
 800387c:	4618      	mov	r0, r3
 800387e:	f7fe f97b 	bl	8001b78 <_ZSt4atanf>
 8003882:	4603      	mov	r3, r0
 8003884:	4918      	ldr	r1, [pc, #96]	; (80038e8 <_Z17get_XW_diffAnglesv+0x1a0>)
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd fab8 	bl	8000dfc <__aeabi_fmul>
 800388c:	4603      	mov	r3, r0
 800388e:	4618      	mov	r0, r3
 8003890:	f7fc fe06 	bl	80004a0 <__aeabi_f2d>
 8003894:	a30c      	add	r3, pc, #48	; (adr r3, 80038c8 <_Z17get_XW_diffAnglesv+0x180>)
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f7fc ff83 	bl	80007a4 <__aeabi_ddiv>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4610      	mov	r0, r2
 80038a4:	4619      	mov	r1, r3
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	f7fc fc9b 	bl	80001e4 <__adddf3>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4610      	mov	r0, r2
 80038b4:	4619      	mov	r1, r3
 80038b6:	f7fd f943 	bl	8000b40 <__aeabi_d2f>
 80038ba:	4603      	mov	r3, r0
 80038bc:	4a0d      	ldr	r2, [pc, #52]	; (80038f4 <_Z17get_XW_diffAnglesv+0x1ac>)
 80038be:	6013      	str	r3, [r2, #0]
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	54442d18 	.word	0x54442d18
 80038cc:	400921fb 	.word	0x400921fb
 80038d0:	20000024 	.word	0x20000024
 80038d4:	20000574 	.word	0x20000574
 80038d8:	20000564 	.word	0x20000564
 80038dc:	20000004 	.word	0x20000004
 80038e0:	20000014 	.word	0x20000014
 80038e4:	20000584 	.word	0x20000584
 80038e8:	43340000 	.word	0x43340000
 80038ec:	20000510 	.word	0x20000510
 80038f0:	20000514 	.word	0x20000514
 80038f4:	20000518 	.word	0x20000518

080038f8 <_Z17reset_WQuaternionv>:
 * @brief 
 * 
 * //NOTDONE
 */
void reset_WQuaternion()
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
  float *p = QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(GyroOriginQuaternion, QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(OriginQuaternion, GyroOriginQuaternion)), MPUoutputQuaternion)))), FrameOriginQuaternion));
 80038fe:	491c      	ldr	r1, [pc, #112]	; (8003970 <_Z17reset_WQuaternionv+0x78>)
 8003900:	481c      	ldr	r0, [pc, #112]	; (8003974 <_Z17reset_WQuaternionv+0x7c>)
 8003902:	f7fe fe1b 	bl	800253c <_Z15QuaternionSLERPPfS_>
 8003906:	4603      	mov	r3, r0
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe fe29 	bl	8002560 <_Z19QuaternionNormalizePf>
 800390e:	4603      	mov	r3, r0
 8003910:	4919      	ldr	r1, [pc, #100]	; (8003978 <_Z17reset_WQuaternionv+0x80>)
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fce4 	bl	80022e0 <_Z17QuaternionProductPfS_>
 8003918:	4603      	mov	r3, r0
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe fe20 	bl	8002560 <_Z19QuaternionNormalizePf>
 8003920:	4603      	mov	r3, r0
 8003922:	4619      	mov	r1, r3
 8003924:	4812      	ldr	r0, [pc, #72]	; (8003970 <_Z17reset_WQuaternionv+0x78>)
 8003926:	f7fe fe09 	bl	800253c <_Z15QuaternionSLERPPfS_>
 800392a:	4603      	mov	r3, r0
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe fe17 	bl	8002560 <_Z19QuaternionNormalizePf>
 8003932:	4603      	mov	r3, r0
 8003934:	4911      	ldr	r1, [pc, #68]	; (800397c <_Z17reset_WQuaternionv+0x84>)
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe fcd2 	bl	80022e0 <_Z17QuaternionProductPfS_>
 800393c:	4603      	mov	r3, r0
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe fe0e 	bl	8002560 <_Z19QuaternionNormalizePf>
 8003944:	6078      	str	r0, [r7, #4]
  LoopWQuaternion[0] = *p;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a0d      	ldr	r2, [pc, #52]	; (8003980 <_Z17reset_WQuaternionv+0x88>)
 800394c:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p + 1);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <_Z17reset_WQuaternionv+0x88>)
 8003954:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p + 2);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	4a09      	ldr	r2, [pc, #36]	; (8003980 <_Z17reset_WQuaternionv+0x88>)
 800395c:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p + 3);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	4a07      	ldr	r2, [pc, #28]	; (8003980 <_Z17reset_WQuaternionv+0x88>)
 8003964:	60d3      	str	r3, [r2, #12]
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000024 	.word	0x20000024
 8003974:	20000574 	.word	0x20000574
 8003978:	20000564 	.word	0x20000564
 800397c:	20000004 	.word	0x20000004
 8003980:	20000014 	.word	0x20000014

08003984 <_Z10update_PIDv>:
 * @brief Gets PITCH,ROLL,YAW Y values and integrates/differentiates
 * 
 * --Custom Method!
 */
void update_PID()
{
 8003984:	b598      	push	{r3, r4, r7, lr}
 8003986:	af00      	add	r7, sp, #0
  PID_Yaw_xw_diff = -PID_Yaw_xw_diff;
 8003988:	4b94      	ldr	r3, [pc, #592]	; (8003bdc <_Z10update_PIDv+0x258>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003990:	4a92      	ldr	r2, [pc, #584]	; (8003bdc <_Z10update_PIDv+0x258>)
 8003992:	6013      	str	r3, [r2, #0]
  Pitch_I_Sum += (PID_Pitch_xw_diff * Pitch_PID_k[1]);                                                                                  // integrate
 8003994:	4b92      	ldr	r3, [pc, #584]	; (8003be0 <_Z10update_PIDv+0x25c>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4a92      	ldr	r2, [pc, #584]	; (8003be4 <_Z10update_PIDv+0x260>)
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fa2c 	bl	8000dfc <__aeabi_fmul>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	4b8f      	ldr	r3, [pc, #572]	; (8003be8 <_Z10update_PIDv+0x264>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4619      	mov	r1, r3
 80039ae:	4610      	mov	r0, r2
 80039b0:	f7fd f91c 	bl	8000bec <__addsf3>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461a      	mov	r2, r3
 80039b8:	4b8b      	ldr	r3, [pc, #556]	; (8003be8 <_Z10update_PIDv+0x264>)
 80039ba:	601a      	str	r2, [r3, #0]
  Roll_I_Sum  += (PID_Roll_xw_diff  * Roll_PID_k[1] );
 80039bc:	4b8b      	ldr	r3, [pc, #556]	; (8003bec <_Z10update_PIDv+0x268>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4a8b      	ldr	r2, [pc, #556]	; (8003bf0 <_Z10update_PIDv+0x26c>)
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fd fa18 	bl	8000dfc <__aeabi_fmul>
 80039cc:	4603      	mov	r3, r0
 80039ce:	461a      	mov	r2, r3
 80039d0:	4b88      	ldr	r3, [pc, #544]	; (8003bf4 <_Z10update_PIDv+0x270>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4619      	mov	r1, r3
 80039d6:	4610      	mov	r0, r2
 80039d8:	f7fd f908 	bl	8000bec <__addsf3>
 80039dc:	4603      	mov	r3, r0
 80039de:	461a      	mov	r2, r3
 80039e0:	4b84      	ldr	r3, [pc, #528]	; (8003bf4 <_Z10update_PIDv+0x270>)
 80039e2:	601a      	str	r2, [r3, #0]
  Yaw_I_Sum   += (PID_Yaw_xw_diff   * Yaw_PID_k[1]  );
 80039e4:	4b84      	ldr	r3, [pc, #528]	; (8003bf8 <_Z10update_PIDv+0x274>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	4a7c      	ldr	r2, [pc, #496]	; (8003bdc <_Z10update_PIDv+0x258>)
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	4611      	mov	r1, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fd fa04 	bl	8000dfc <__aeabi_fmul>
 80039f4:	4603      	mov	r3, r0
 80039f6:	461a      	mov	r2, r3
 80039f8:	4b80      	ldr	r3, [pc, #512]	; (8003bfc <_Z10update_PIDv+0x278>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f7fd f8f4 	bl	8000bec <__addsf3>
 8003a04:	4603      	mov	r3, r0
 8003a06:	461a      	mov	r2, r3
 8003a08:	4b7c      	ldr	r3, [pc, #496]	; (8003bfc <_Z10update_PIDv+0x278>)
 8003a0a:	601a      	str	r2, [r3, #0]

  if (Pitch_I_Sum >  500) Pitch_I_Sum =  500;                         //constrain integration (-500 500)
 8003a0c:	4b76      	ldr	r3, [pc, #472]	; (8003be8 <_Z10update_PIDv+0x264>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	497b      	ldr	r1, [pc, #492]	; (8003c00 <_Z10update_PIDv+0x27c>)
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd fbae 	bl	8001174 <__aeabi_fcmpgt>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <_Z10update_PIDv+0xa0>
 8003a1e:	4b72      	ldr	r3, [pc, #456]	; (8003be8 <_Z10update_PIDv+0x264>)
 8003a20:	4a77      	ldr	r2, [pc, #476]	; (8003c00 <_Z10update_PIDv+0x27c>)
 8003a22:	601a      	str	r2, [r3, #0]
  if (Roll_I_Sum  >  500) Roll_I_Sum  =  500;
 8003a24:	4b73      	ldr	r3, [pc, #460]	; (8003bf4 <_Z10update_PIDv+0x270>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4975      	ldr	r1, [pc, #468]	; (8003c00 <_Z10update_PIDv+0x27c>)
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd fba2 	bl	8001174 <__aeabi_fcmpgt>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <_Z10update_PIDv+0xb8>
 8003a36:	4b6f      	ldr	r3, [pc, #444]	; (8003bf4 <_Z10update_PIDv+0x270>)
 8003a38:	4a71      	ldr	r2, [pc, #452]	; (8003c00 <_Z10update_PIDv+0x27c>)
 8003a3a:	601a      	str	r2, [r3, #0]
  if (Yaw_I_Sum   >  500) Yaw_I_Sum   =  500;
 8003a3c:	4b6f      	ldr	r3, [pc, #444]	; (8003bfc <_Z10update_PIDv+0x278>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	496f      	ldr	r1, [pc, #444]	; (8003c00 <_Z10update_PIDv+0x27c>)
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fd fb96 	bl	8001174 <__aeabi_fcmpgt>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <_Z10update_PIDv+0xd0>
 8003a4e:	4b6b      	ldr	r3, [pc, #428]	; (8003bfc <_Z10update_PIDv+0x278>)
 8003a50:	4a6b      	ldr	r2, [pc, #428]	; (8003c00 <_Z10update_PIDv+0x27c>)
 8003a52:	601a      	str	r2, [r3, #0]
  if (Pitch_I_Sum < -500) Pitch_I_Sum = -500;       //NOTDONE use defines for values
 8003a54:	4b64      	ldr	r3, [pc, #400]	; (8003be8 <_Z10update_PIDv+0x264>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	496a      	ldr	r1, [pc, #424]	; (8003c04 <_Z10update_PIDv+0x280>)
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fd fb6c 	bl	8001138 <__aeabi_fcmplt>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <_Z10update_PIDv+0xe8>
 8003a66:	4b60      	ldr	r3, [pc, #384]	; (8003be8 <_Z10update_PIDv+0x264>)
 8003a68:	4a66      	ldr	r2, [pc, #408]	; (8003c04 <_Z10update_PIDv+0x280>)
 8003a6a:	601a      	str	r2, [r3, #0]
  if (Roll_I_Sum  < -500) Roll_I_Sum  = -500;
 8003a6c:	4b61      	ldr	r3, [pc, #388]	; (8003bf4 <_Z10update_PIDv+0x270>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4964      	ldr	r1, [pc, #400]	; (8003c04 <_Z10update_PIDv+0x280>)
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd fb60 	bl	8001138 <__aeabi_fcmplt>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <_Z10update_PIDv+0x100>
 8003a7e:	4b5d      	ldr	r3, [pc, #372]	; (8003bf4 <_Z10update_PIDv+0x270>)
 8003a80:	4a60      	ldr	r2, [pc, #384]	; (8003c04 <_Z10update_PIDv+0x280>)
 8003a82:	601a      	str	r2, [r3, #0]
  if (Yaw_I_Sum   <    0) Yaw_I_Sum   =    0;
 8003a84:	4b5d      	ldr	r3, [pc, #372]	; (8003bfc <_Z10update_PIDv+0x278>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fd fb53 	bl	8001138 <__aeabi_fcmplt>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <_Z10update_PIDv+0x11c>
 8003a98:	4b58      	ldr	r3, [pc, #352]	; (8003bfc <_Z10update_PIDv+0x278>)
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

  PID_Pitch_y = (PID_Pitch_xw_diff * Pitch_PID_k[0] * 10) + Pitch_I_Sum + ((PID_Pitch_xw_diff - Pitch_D_old) * Pitch_PID_k[2] * 100);   //combine P,I,D values
 8003aa0:	4b4f      	ldr	r3, [pc, #316]	; (8003be0 <_Z10update_PIDv+0x25c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a4f      	ldr	r2, [pc, #316]	; (8003be4 <_Z10update_PIDv+0x260>)
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fd f9a6 	bl	8000dfc <__aeabi_fmul>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4955      	ldr	r1, [pc, #340]	; (8003c08 <_Z10update_PIDv+0x284>)
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fd f9a1 	bl	8000dfc <__aeabi_fmul>
 8003aba:	4603      	mov	r3, r0
 8003abc:	461a      	mov	r2, r3
 8003abe:	4b4a      	ldr	r3, [pc, #296]	; (8003be8 <_Z10update_PIDv+0x264>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	f7fd f891 	bl	8000bec <__addsf3>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461c      	mov	r4, r3
 8003ace:	4b45      	ldr	r3, [pc, #276]	; (8003be4 <_Z10update_PIDv+0x260>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a4e      	ldr	r2, [pc, #312]	; (8003c0c <_Z10update_PIDv+0x288>)
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fd f885 	bl	8000be8 <__aeabi_fsub>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4b3f      	ldr	r3, [pc, #252]	; (8003be0 <_Z10update_PIDv+0x25c>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f7fd f987 	bl	8000dfc <__aeabi_fmul>
 8003aee:	4603      	mov	r3, r0
 8003af0:	4947      	ldr	r1, [pc, #284]	; (8003c10 <_Z10update_PIDv+0x28c>)
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd f982 	bl	8000dfc <__aeabi_fmul>
 8003af8:	4603      	mov	r3, r0
 8003afa:	4619      	mov	r1, r3
 8003afc:	4620      	mov	r0, r4
 8003afe:	f7fd f875 	bl	8000bec <__addsf3>
 8003b02:	4603      	mov	r3, r0
 8003b04:	461a      	mov	r2, r3
 8003b06:	4b43      	ldr	r3, [pc, #268]	; (8003c14 <_Z10update_PIDv+0x290>)
 8003b08:	601a      	str	r2, [r3, #0]
  PID_Roll_y  = (PID_Roll_xw_diff  * Roll_PID_k[0]  * 10) + Roll_I_Sum  + ((PID_Roll_xw_diff  - Roll_D_old ) * Roll_PID_k[2]  * 100);
 8003b0a:	4b38      	ldr	r3, [pc, #224]	; (8003bec <_Z10update_PIDv+0x268>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a38      	ldr	r2, [pc, #224]	; (8003bf0 <_Z10update_PIDv+0x26c>)
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fd f971 	bl	8000dfc <__aeabi_fmul>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	493a      	ldr	r1, [pc, #232]	; (8003c08 <_Z10update_PIDv+0x284>)
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fd f96c 	bl	8000dfc <__aeabi_fmul>
 8003b24:	4603      	mov	r3, r0
 8003b26:	461a      	mov	r2, r3
 8003b28:	4b32      	ldr	r3, [pc, #200]	; (8003bf4 <_Z10update_PIDv+0x270>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	f7fd f85c 	bl	8000bec <__addsf3>
 8003b34:	4603      	mov	r3, r0
 8003b36:	461c      	mov	r4, r3
 8003b38:	4b2d      	ldr	r3, [pc, #180]	; (8003bf0 <_Z10update_PIDv+0x26c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a36      	ldr	r2, [pc, #216]	; (8003c18 <_Z10update_PIDv+0x294>)
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fd f850 	bl	8000be8 <__aeabi_fsub>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4b27      	ldr	r3, [pc, #156]	; (8003bec <_Z10update_PIDv+0x268>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	4619      	mov	r1, r3
 8003b52:	4610      	mov	r0, r2
 8003b54:	f7fd f952 	bl	8000dfc <__aeabi_fmul>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	492d      	ldr	r1, [pc, #180]	; (8003c10 <_Z10update_PIDv+0x28c>)
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fd f94d 	bl	8000dfc <__aeabi_fmul>
 8003b62:	4603      	mov	r3, r0
 8003b64:	4619      	mov	r1, r3
 8003b66:	4620      	mov	r0, r4
 8003b68:	f7fd f840 	bl	8000bec <__addsf3>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <_Z10update_PIDv+0x298>)
 8003b72:	601a      	str	r2, [r3, #0]
  PID_Yaw_y   = (PID_Yaw_xw_diff   * Yaw_PID_k[0]   * 10) + Yaw_I_Sum   + ((PID_Yaw_xw_diff   - Yaw_D_old  ) * Yaw_PID_k[2]   * 100);          //NOTDONE use defines for values
 8003b74:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <_Z10update_PIDv+0x274>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <_Z10update_PIDv+0x258>)
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fd f93c 	bl	8000dfc <__aeabi_fmul>
 8003b84:	4603      	mov	r3, r0
 8003b86:	4920      	ldr	r1, [pc, #128]	; (8003c08 <_Z10update_PIDv+0x284>)
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fd f937 	bl	8000dfc <__aeabi_fmul>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	461a      	mov	r2, r3
 8003b92:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <_Z10update_PIDv+0x278>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4619      	mov	r1, r3
 8003b98:	4610      	mov	r0, r2
 8003b9a:	f7fd f827 	bl	8000bec <__addsf3>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	461c      	mov	r4, r3
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <_Z10update_PIDv+0x258>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1e      	ldr	r2, [pc, #120]	; (8003c20 <_Z10update_PIDv+0x29c>)
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fd f81b 	bl	8000be8 <__aeabi_fsub>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <_Z10update_PIDv+0x274>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f7fd f91d 	bl	8000dfc <__aeabi_fmul>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4912      	ldr	r1, [pc, #72]	; (8003c10 <_Z10update_PIDv+0x28c>)
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd f918 	bl	8000dfc <__aeabi_fmul>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f7fd f80b 	bl	8000bec <__addsf3>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	e024      	b.n	8003c24 <_Z10update_PIDv+0x2a0>
 8003bda:	bf00      	nop
 8003bdc:	20000518 	.word	0x20000518
 8003be0:	20000528 	.word	0x20000528
 8003be4:	20000510 	.word	0x20000510
 8003be8:	2000054c 	.word	0x2000054c
 8003bec:	20000534 	.word	0x20000534
 8003bf0:	20000514 	.word	0x20000514
 8003bf4:	20000550 	.word	0x20000550
 8003bf8:	20000540 	.word	0x20000540
 8003bfc:	20000554 	.word	0x20000554
 8003c00:	43fa0000 	.word	0x43fa0000
 8003c04:	c3fa0000 	.word	0xc3fa0000
 8003c08:	41200000 	.word	0x41200000
 8003c0c:	20000558 	.word	0x20000558
 8003c10:	42c80000 	.word	0x42c80000
 8003c14:	2000051c 	.word	0x2000051c
 8003c18:	2000055c 	.word	0x2000055c
 8003c1c:	20000520 	.word	0x20000520
 8003c20:	20000560 	.word	0x20000560
 8003c24:	461a      	mov	r2, r3
 8003c26:	4b2d      	ldr	r3, [pc, #180]	; (8003cdc <_Z10update_PIDv+0x358>)
 8003c28:	601a      	str	r2, [r3, #0]

  Pitch_D_old = PID_Pitch_xw_diff;                                                                                                      // differentiate
 8003c2a:	4b2d      	ldr	r3, [pc, #180]	; (8003ce0 <_Z10update_PIDv+0x35c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2d      	ldr	r2, [pc, #180]	; (8003ce4 <_Z10update_PIDv+0x360>)
 8003c30:	6013      	str	r3, [r2, #0]
  Roll_D_old  = PID_Roll_xw_diff ;
 8003c32:	4b2d      	ldr	r3, [pc, #180]	; (8003ce8 <_Z10update_PIDv+0x364>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2d      	ldr	r2, [pc, #180]	; (8003cec <_Z10update_PIDv+0x368>)
 8003c38:	6013      	str	r3, [r2, #0]
  Yaw_D_old   = PID_Yaw_xw_diff  ;
 8003c3a:	4b2d      	ldr	r3, [pc, #180]	; (8003cf0 <_Z10update_PIDv+0x36c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2d      	ldr	r2, [pc, #180]	; (8003cf4 <_Z10update_PIDv+0x370>)
 8003c40:	6013      	str	r3, [r2, #0]

  if (PID_Pitch_y > 500 ) PID_Pitch_y = 500 ;
 8003c42:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <_Z10update_PIDv+0x374>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	492d      	ldr	r1, [pc, #180]	; (8003cfc <_Z10update_PIDv+0x378>)
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fd fa93 	bl	8001174 <__aeabi_fcmpgt>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <_Z10update_PIDv+0x2d6>
 8003c54:	4b28      	ldr	r3, [pc, #160]	; (8003cf8 <_Z10update_PIDv+0x374>)
 8003c56:	4a29      	ldr	r2, [pc, #164]	; (8003cfc <_Z10update_PIDv+0x378>)
 8003c58:	601a      	str	r2, [r3, #0]
  if (PID_Roll_y  > 500 ) PID_Roll_y  = 500 ;                            //NOTDONE use defines for values
 8003c5a:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <_Z10update_PIDv+0x37c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4927      	ldr	r1, [pc, #156]	; (8003cfc <_Z10update_PIDv+0x378>)
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fd fa87 	bl	8001174 <__aeabi_fcmpgt>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <_Z10update_PIDv+0x2ee>
 8003c6c:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <_Z10update_PIDv+0x37c>)
 8003c6e:	4a23      	ldr	r2, [pc, #140]	; (8003cfc <_Z10update_PIDv+0x378>)
 8003c70:	601a      	str	r2, [r3, #0]
  if (PID_Yaw_y   > 1000) PID_Yaw_y   = 1000;
 8003c72:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <_Z10update_PIDv+0x358>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4923      	ldr	r1, [pc, #140]	; (8003d04 <_Z10update_PIDv+0x380>)
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fd fa7b 	bl	8001174 <__aeabi_fcmpgt>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <_Z10update_PIDv+0x306>
 8003c84:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <_Z10update_PIDv+0x358>)
 8003c86:	4a1f      	ldr	r2, [pc, #124]	; (8003d04 <_Z10update_PIDv+0x380>)
 8003c88:	601a      	str	r2, [r3, #0]
  if (PID_Pitch_y < -500) PID_Pitch_y = -500;
 8003c8a:	4b1b      	ldr	r3, [pc, #108]	; (8003cf8 <_Z10update_PIDv+0x374>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	491e      	ldr	r1, [pc, #120]	; (8003d08 <_Z10update_PIDv+0x384>)
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fd fa51 	bl	8001138 <__aeabi_fcmplt>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <_Z10update_PIDv+0x31e>
 8003c9c:	4b16      	ldr	r3, [pc, #88]	; (8003cf8 <_Z10update_PIDv+0x374>)
 8003c9e:	4a1a      	ldr	r2, [pc, #104]	; (8003d08 <_Z10update_PIDv+0x384>)
 8003ca0:	601a      	str	r2, [r3, #0]
  if (PID_Roll_y  < -500) PID_Roll_y  = -500;
 8003ca2:	4b17      	ldr	r3, [pc, #92]	; (8003d00 <_Z10update_PIDv+0x37c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4918      	ldr	r1, [pc, #96]	; (8003d08 <_Z10update_PIDv+0x384>)
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fd fa45 	bl	8001138 <__aeabi_fcmplt>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <_Z10update_PIDv+0x336>
 8003cb4:	4b12      	ldr	r3, [pc, #72]	; (8003d00 <_Z10update_PIDv+0x37c>)
 8003cb6:	4a14      	ldr	r2, [pc, #80]	; (8003d08 <_Z10update_PIDv+0x384>)
 8003cb8:	601a      	str	r2, [r3, #0]
  if (PID_Yaw_y   <    0) PID_Yaw_y   =    0;
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <_Z10update_PIDv+0x358>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f04f 0100 	mov.w	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fd fa38 	bl	8001138 <__aeabi_fcmplt>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d100      	bne.n	8003cd0 <_Z10update_PIDv+0x34c>
}
 8003cce:	e003      	b.n	8003cd8 <_Z10update_PIDv+0x354>
  if (PID_Yaw_y   <    0) PID_Yaw_y   =    0;
 8003cd0:	4b02      	ldr	r3, [pc, #8]	; (8003cdc <_Z10update_PIDv+0x358>)
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]
}
 8003cd8:	bf00      	nop
 8003cda:	bd98      	pop	{r3, r4, r7, pc}
 8003cdc:	20000524 	.word	0x20000524
 8003ce0:	20000510 	.word	0x20000510
 8003ce4:	20000558 	.word	0x20000558
 8003ce8:	20000514 	.word	0x20000514
 8003cec:	2000055c 	.word	0x2000055c
 8003cf0:	20000518 	.word	0x20000518
 8003cf4:	20000560 	.word	0x20000560
 8003cf8:	2000051c 	.word	0x2000051c
 8003cfc:	43fa0000 	.word	0x43fa0000
 8003d00:	20000520 	.word	0x20000520
 8003d04:	447a0000 	.word	0x447a0000
 8003d08:	c3fa0000 	.word	0xc3fa0000

08003d0c <_Z12getPIDValuesv>:
 * @brief This method extracts the PID values for PITCH,ROLL,YAW that can be live tuned on the remote
 * 
 * --Custom Method!
 */
void getPIDValues()
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  if (tuningMode == 1)
 8003d10:	4baa      	ldr	r3, [pc, #680]	; (8003fbc <_Z12getPIDValuesv+0x2b0>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	f040 81d8 	bne.w	80040ca <_Z12getPIDValuesv+0x3be>
  {
    if ((SBUS_Channels[5] <= 1000) & (SBUS_Channels[5] >= 990))
 8003d1a:	4ba9      	ldr	r3, [pc, #676]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003d1c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003d20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d24:	bfd4      	ite	le
 8003d26:	2301      	movle	r3, #1
 8003d28:	2300      	movgt	r3, #0
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	4ba4      	ldr	r3, [pc, #656]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003d2e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003d32:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003d36:	428b      	cmp	r3, r1
 8003d38:	bfcc      	ite	gt
 8003d3a:	2301      	movgt	r3, #1
 8003d3c:	2300      	movle	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	4013      	ands	r3, r2
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8082 	beq.w	8003e4e <_Z12getPIDValuesv+0x142>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Pitch_PID_k[0] = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003d4a:	4b9d      	ldr	r3, [pc, #628]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003d4c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d54:	bfd4      	ite	le
 8003d56:	2301      	movle	r3, #1
 8003d58:	2300      	movgt	r3, #0
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	4b98      	ldr	r3, [pc, #608]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003d5e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003d62:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003d66:	428b      	cmp	r3, r1
 8003d68:	bfcc      	ite	gt
 8003d6a:	2301      	movgt	r3, #1
 8003d6c:	2300      	movle	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	4013      	ands	r3, r2
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d014      	beq.n	8003da2 <_Z12getPIDValuesv+0x96>
 8003d78:	4b91      	ldr	r3, [pc, #580]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003d7a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fc ffe8 	bl	8000d54 <__aeabi_i2f>
 8003d84:	4603      	mov	r3, r0
 8003d86:	498f      	ldr	r1, [pc, #572]	; (8003fc4 <_Z12getPIDValuesv+0x2b8>)
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fd f8eb 	bl	8000f64 <__aeabi_fdiv>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fc ff29 	bl	8000bec <__addsf3>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4b8a      	ldr	r3, [pc, #552]	; (8003fc8 <_Z12getPIDValuesv+0x2bc>)
 8003da0:	601a      	str	r2, [r3, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Pitch_PID_k[1] = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003da2:	4b87      	ldr	r3, [pc, #540]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003da4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003da8:	2b0a      	cmp	r3, #10
 8003daa:	bfd4      	ite	le
 8003dac:	2301      	movle	r3, #1
 8003dae:	2300      	movgt	r3, #0
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4b83      	ldr	r3, [pc, #524]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003db4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003db8:	f113 0f0a 	cmn.w	r3, #10
 8003dbc:	bfac      	ite	ge
 8003dbe:	2301      	movge	r3, #1
 8003dc0:	2300      	movlt	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d014      	beq.n	8003df6 <_Z12getPIDValuesv+0xea>
 8003dcc:	4b7c      	ldr	r3, [pc, #496]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003dce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fc ffbe 	bl	8000d54 <__aeabi_i2f>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	497a      	ldr	r1, [pc, #488]	; (8003fc4 <_Z12getPIDValuesv+0x2b8>)
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fd f8c1 	bl	8000f64 <__aeabi_fdiv>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fc feff 	bl	8000bec <__addsf3>
 8003dee:	4603      	mov	r3, r0
 8003df0:	461a      	mov	r2, r3
 8003df2:	4b75      	ldr	r3, [pc, #468]	; (8003fc8 <_Z12getPIDValuesv+0x2bc>)
 8003df4:	605a      	str	r2, [r3, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Pitch_PID_k[2] = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values       
 8003df6:	4b72      	ldr	r3, [pc, #456]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003df8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003dfc:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8003e00:	4293      	cmp	r3, r2
 8003e02:	bfb4      	ite	lt
 8003e04:	2301      	movlt	r3, #1
 8003e06:	2300      	movge	r3, #0
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	4b6d      	ldr	r3, [pc, #436]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003e0c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e10:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003e14:	bfac      	ite	ge
 8003e16:	2301      	movge	r3, #1
 8003e18:	2300      	movlt	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d014      	beq.n	8003e4e <_Z12getPIDValuesv+0x142>
 8003e24:	4b66      	ldr	r3, [pc, #408]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003e26:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fc ff92 	bl	8000d54 <__aeabi_i2f>
 8003e30:	4603      	mov	r3, r0
 8003e32:	4964      	ldr	r1, [pc, #400]	; (8003fc4 <_Z12getPIDValuesv+0x2b8>)
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fd f895 	bl	8000f64 <__aeabi_fdiv>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fc fed3 	bl	8000bec <__addsf3>
 8003e46:	4603      	mov	r3, r0
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4b5f      	ldr	r3, [pc, #380]	; (8003fc8 <_Z12getPIDValuesv+0x2bc>)
 8003e4c:	609a      	str	r2, [r3, #8]
    }
    if ((SBUS_Channels[5] <= 10) & (SBUS_Channels[5] >= -10))
 8003e4e:	4b5c      	ldr	r3, [pc, #368]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003e50:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003e54:	2b0a      	cmp	r3, #10
 8003e56:	bfd4      	ite	le
 8003e58:	2301      	movle	r3, #1
 8003e5a:	2300      	movgt	r3, #0
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	4b58      	ldr	r3, [pc, #352]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003e60:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003e64:	f113 0f0a 	cmn.w	r3, #10
 8003e68:	bfac      	ite	ge
 8003e6a:	2301      	movge	r3, #1
 8003e6c:	2300      	movlt	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	4013      	ands	r3, r2
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8082 	beq.w	8003f7e <_Z12getPIDValuesv+0x272>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Roll_PID_k[0]  = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003e7a:	4b51      	ldr	r3, [pc, #324]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003e7c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e84:	bfd4      	ite	le
 8003e86:	2301      	movle	r3, #1
 8003e88:	2300      	movgt	r3, #0
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	4b4c      	ldr	r3, [pc, #304]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003e8e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e92:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003e96:	428b      	cmp	r3, r1
 8003e98:	bfcc      	ite	gt
 8003e9a:	2301      	movgt	r3, #1
 8003e9c:	2300      	movle	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d014      	beq.n	8003ed2 <_Z12getPIDValuesv+0x1c6>
 8003ea8:	4b45      	ldr	r3, [pc, #276]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003eaa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fc ff50 	bl	8000d54 <__aeabi_i2f>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	4943      	ldr	r1, [pc, #268]	; (8003fc4 <_Z12getPIDValuesv+0x2b8>)
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fd f853 	bl	8000f64 <__aeabi_fdiv>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fc fe91 	bl	8000bec <__addsf3>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4b3f      	ldr	r3, [pc, #252]	; (8003fcc <_Z12getPIDValuesv+0x2c0>)
 8003ed0:	601a      	str	r2, [r3, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Roll_PID_k[1]  = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003ed2:	4b3b      	ldr	r3, [pc, #236]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003ed4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ed8:	2b0a      	cmp	r3, #10
 8003eda:	bfd4      	ite	le
 8003edc:	2301      	movle	r3, #1
 8003ede:	2300      	movgt	r3, #0
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003ee4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ee8:	f113 0f0a 	cmn.w	r3, #10
 8003eec:	bfac      	ite	ge
 8003eee:	2301      	movge	r3, #1
 8003ef0:	2300      	movlt	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d014      	beq.n	8003f26 <_Z12getPIDValuesv+0x21a>
 8003efc:	4b30      	ldr	r3, [pc, #192]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003efe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fc ff26 	bl	8000d54 <__aeabi_i2f>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	492e      	ldr	r1, [pc, #184]	; (8003fc4 <_Z12getPIDValuesv+0x2b8>)
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fd f829 	bl	8000f64 <__aeabi_fdiv>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fc fe67 	bl	8000bec <__addsf3>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b2a      	ldr	r3, [pc, #168]	; (8003fcc <_Z12getPIDValuesv+0x2c0>)
 8003f24:	605a      	str	r2, [r3, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Roll_PID_k[2]  = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values       
 8003f26:	4b26      	ldr	r3, [pc, #152]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003f28:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003f2c:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8003f30:	4293      	cmp	r3, r2
 8003f32:	bfb4      	ite	lt
 8003f34:	2301      	movlt	r3, #1
 8003f36:	2300      	movge	r3, #0
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003f3c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003f40:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003f44:	bfac      	ite	ge
 8003f46:	2301      	movge	r3, #1
 8003f48:	2300      	movlt	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d014      	beq.n	8003f7e <_Z12getPIDValuesv+0x272>
 8003f54:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003f56:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fc fefa 	bl	8000d54 <__aeabi_i2f>
 8003f60:	4603      	mov	r3, r0
 8003f62:	4918      	ldr	r1, [pc, #96]	; (8003fc4 <_Z12getPIDValuesv+0x2b8>)
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fc fffd 	bl	8000f64 <__aeabi_fdiv>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fc fe3b 	bl	8000bec <__addsf3>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <_Z12getPIDValuesv+0x2c0>)
 8003f7c:	609a      	str	r2, [r3, #8]
    }
    if ((SBUS_Channels[5] <= -990) & (SBUS_Channels[5] >= -1000))
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003f80:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003f84:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	bfb4      	ite	lt
 8003f8c:	2301      	movlt	r3, #1
 8003f8e:	2300      	movge	r3, #0
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003f94:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003f98:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003f9c:	bfac      	ite	ge
 8003f9e:	2301      	movge	r3, #1
 8003fa0:	2300      	movlt	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 808e 	beq.w	80040ca <_Z12getPIDValuesv+0x3be>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Yaw_PID_k[0]   = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003fae:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <_Z12getPIDValuesv+0x2b4>)
 8003fb0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003fb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fb8:	e00a      	b.n	8003fd0 <_Z12getPIDValuesv+0x2c4>
 8003fba:	bf00      	nop
 8003fbc:	20000000 	.word	0x20000000
 8003fc0:	20000654 	.word	0x20000654
 8003fc4:	44fa0000 	.word	0x44fa0000
 8003fc8:	20000528 	.word	0x20000528
 8003fcc:	20000534 	.word	0x20000534
 8003fd0:	bfd4      	ite	le
 8003fd2:	2301      	movle	r3, #1
 8003fd4:	2300      	movgt	r3, #0
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	4b3d      	ldr	r3, [pc, #244]	; (80040d0 <_Z12getPIDValuesv+0x3c4>)
 8003fda:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003fde:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003fe2:	428b      	cmp	r3, r1
 8003fe4:	bfcc      	ite	gt
 8003fe6:	2301      	movgt	r3, #1
 8003fe8:	2300      	movle	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	4013      	ands	r3, r2
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d014      	beq.n	800401e <_Z12getPIDValuesv+0x312>
 8003ff4:	4b36      	ldr	r3, [pc, #216]	; (80040d0 <_Z12getPIDValuesv+0x3c4>)
 8003ff6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fc feaa 	bl	8000d54 <__aeabi_i2f>
 8004000:	4603      	mov	r3, r0
 8004002:	4934      	ldr	r1, [pc, #208]	; (80040d4 <_Z12getPIDValuesv+0x3c8>)
 8004004:	4618      	mov	r0, r3
 8004006:	f7fc ffad 	bl	8000f64 <__aeabi_fdiv>
 800400a:	4603      	mov	r3, r0
 800400c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004010:	4618      	mov	r0, r3
 8004012:	f7fc fdeb 	bl	8000bec <__addsf3>
 8004016:	4603      	mov	r3, r0
 8004018:	461a      	mov	r2, r3
 800401a:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <_Z12getPIDValuesv+0x3cc>)
 800401c:	601a      	str	r2, [r3, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Yaw_PID_k[1]   = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 800401e:	4b2c      	ldr	r3, [pc, #176]	; (80040d0 <_Z12getPIDValuesv+0x3c4>)
 8004020:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004024:	2b0a      	cmp	r3, #10
 8004026:	bfd4      	ite	le
 8004028:	2301      	movle	r3, #1
 800402a:	2300      	movgt	r3, #0
 800402c:	b2da      	uxtb	r2, r3
 800402e:	4b28      	ldr	r3, [pc, #160]	; (80040d0 <_Z12getPIDValuesv+0x3c4>)
 8004030:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004034:	f113 0f0a 	cmn.w	r3, #10
 8004038:	bfac      	ite	ge
 800403a:	2301      	movge	r3, #1
 800403c:	2300      	movlt	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	4013      	ands	r3, r2
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d014      	beq.n	8004072 <_Z12getPIDValuesv+0x366>
 8004048:	4b21      	ldr	r3, [pc, #132]	; (80040d0 <_Z12getPIDValuesv+0x3c4>)
 800404a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fc fe80 	bl	8000d54 <__aeabi_i2f>
 8004054:	4603      	mov	r3, r0
 8004056:	491f      	ldr	r1, [pc, #124]	; (80040d4 <_Z12getPIDValuesv+0x3c8>)
 8004058:	4618      	mov	r0, r3
 800405a:	f7fc ff83 	bl	8000f64 <__aeabi_fdiv>
 800405e:	4603      	mov	r3, r0
 8004060:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004064:	4618      	mov	r0, r3
 8004066:	f7fc fdc1 	bl	8000bec <__addsf3>
 800406a:	4603      	mov	r3, r0
 800406c:	461a      	mov	r2, r3
 800406e:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <_Z12getPIDValuesv+0x3cc>)
 8004070:	605a      	str	r2, [r3, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Yaw_PID_k[2]   = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values       
 8004072:	4b17      	ldr	r3, [pc, #92]	; (80040d0 <_Z12getPIDValuesv+0x3c4>)
 8004074:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004078:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 800407c:	4293      	cmp	r3, r2
 800407e:	bfb4      	ite	lt
 8004080:	2301      	movlt	r3, #1
 8004082:	2300      	movge	r3, #0
 8004084:	b2da      	uxtb	r2, r3
 8004086:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <_Z12getPIDValuesv+0x3c4>)
 8004088:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800408c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004090:	bfac      	ite	ge
 8004092:	2301      	movge	r3, #1
 8004094:	2300      	movlt	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	4013      	ands	r3, r2
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d014      	beq.n	80040ca <_Z12getPIDValuesv+0x3be>
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <_Z12getPIDValuesv+0x3c4>)
 80040a2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc fe54 	bl	8000d54 <__aeabi_i2f>
 80040ac:	4603      	mov	r3, r0
 80040ae:	4909      	ldr	r1, [pc, #36]	; (80040d4 <_Z12getPIDValuesv+0x3c8>)
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fc ff57 	bl	8000f64 <__aeabi_fdiv>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc fd95 	bl	8000bec <__addsf3>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <_Z12getPIDValuesv+0x3cc>)
 80040c8:	609a      	str	r2, [r3, #8]
    }
  }
}
 80040ca:	bf00      	nop
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000654 	.word	0x20000654
 80040d4:	44fa0000 	.word	0x44fa0000
 80040d8:	20000540 	.word	0x20000540
 80040dc:	00000000 	.word	0x00000000

080040e0 <_Z14getAngleOffsetv>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void getAngleOffset()
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  if (tuningMode == 2)
 80040e4:	4b36      	ldr	r3, [pc, #216]	; (80041c0 <_Z14getAngleOffsetv+0xe0>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d160      	bne.n	80041ae <_Z14getAngleOffsetv+0xce>
  {
    mainMotorAngleOffset = (float)SBUS_Channels[7] / 10;
 80040ec:	4b35      	ldr	r3, [pc, #212]	; (80041c4 <_Z14getAngleOffsetv+0xe4>)
 80040ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fc fe2e 	bl	8000d54 <__aeabi_i2f>
 80040f8:	4603      	mov	r3, r0
 80040fa:	4933      	ldr	r1, [pc, #204]	; (80041c8 <_Z14getAngleOffsetv+0xe8>)
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fc ff31 	bl	8000f64 <__aeabi_fdiv>
 8004102:	4603      	mov	r3, r0
 8004104:	4618      	mov	r0, r3
 8004106:	f7fd f855 	bl	80011b4 <__aeabi_f2iz>
 800410a:	4603      	mov	r3, r0
 800410c:	b25a      	sxtb	r2, r3
 800410e:	4b2f      	ldr	r3, [pc, #188]	; (80041cc <_Z14getAngleOffsetv+0xec>)
 8004110:	701a      	strb	r2, [r3, #0]
    sin_OffsetAngle = sin(((float)mainMotorAngleOffset * M_PI) / 180);
 8004112:	4b2e      	ldr	r3, [pc, #184]	; (80041cc <_Z14getAngleOffsetv+0xec>)
 8004114:	f993 3000 	ldrsb.w	r3, [r3]
 8004118:	4618      	mov	r0, r3
 800411a:	f7fc fe1b 	bl	8000d54 <__aeabi_i2f>
 800411e:	4603      	mov	r3, r0
 8004120:	4618      	mov	r0, r3
 8004122:	f7fc f9bd 	bl	80004a0 <__aeabi_f2d>
 8004126:	a324      	add	r3, pc, #144	; (adr r3, 80041b8 <_Z14getAngleOffsetv+0xd8>)
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f7fc fa10 	bl	8000550 <__aeabi_dmul>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4610      	mov	r0, r2
 8004136:	4619      	mov	r1, r3
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <_Z14getAngleOffsetv+0xf0>)
 800413e:	f7fc fb31 	bl	80007a4 <__aeabi_ddiv>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4610      	mov	r0, r2
 8004148:	4619      	mov	r1, r3
 800414a:	f009 fc99 	bl	800da80 <sin>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4610      	mov	r0, r2
 8004154:	4619      	mov	r1, r3
 8004156:	f7fc fcf3 	bl	8000b40 <__aeabi_d2f>
 800415a:	4603      	mov	r3, r0
 800415c:	4a1d      	ldr	r2, [pc, #116]	; (80041d4 <_Z14getAngleOffsetv+0xf4>)
 800415e:	6013      	str	r3, [r2, #0]
    cos_OffsetAngle = cos(((float)mainMotorAngleOffset * M_PI) / 180);
 8004160:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <_Z14getAngleOffsetv+0xec>)
 8004162:	f993 3000 	ldrsb.w	r3, [r3]
 8004166:	4618      	mov	r0, r3
 8004168:	f7fc fdf4 	bl	8000d54 <__aeabi_i2f>
 800416c:	4603      	mov	r3, r0
 800416e:	4618      	mov	r0, r3
 8004170:	f7fc f996 	bl	80004a0 <__aeabi_f2d>
 8004174:	a310      	add	r3, pc, #64	; (adr r3, 80041b8 <_Z14getAngleOffsetv+0xd8>)
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	f7fc f9e9 	bl	8000550 <__aeabi_dmul>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4610      	mov	r0, r2
 8004184:	4619      	mov	r1, r3
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	4b11      	ldr	r3, [pc, #68]	; (80041d0 <_Z14getAngleOffsetv+0xf0>)
 800418c:	f7fc fb0a 	bl	80007a4 <__aeabi_ddiv>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4610      	mov	r0, r2
 8004196:	4619      	mov	r1, r3
 8004198:	f009 fc30 	bl	800d9fc <cos>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	f7fc fccc 	bl	8000b40 <__aeabi_d2f>
 80041a8:	4603      	mov	r3, r0
 80041aa:	4a0b      	ldr	r2, [pc, #44]	; (80041d8 <_Z14getAngleOffsetv+0xf8>)
 80041ac:	6013      	str	r3, [r2, #0]
  }
}
 80041ae:	bf00      	nop
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	f3af 8000 	nop.w
 80041b8:	54442d18 	.word	0x54442d18
 80041bc:	400921fb 	.word	0x400921fb
 80041c0:	20000000 	.word	0x20000000
 80041c4:	20000654 	.word	0x20000654
 80041c8:	41200000 	.word	0x41200000
 80041cc:	200007e4 	.word	0x200007e4
 80041d0:	40668000 	.word	0x40668000
 80041d4:	200007e8 	.word	0x200007e8
 80041d8:	200007ec 	.word	0x200007ec

080041dc <_Z16switchTuningModev>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void switchTuningMode()
{
 80041dc:	b598      	push	{r3, r4, r7, lr}
 80041de:	af00      	add	r7, sp, #0
  if ((buttonPressed == false) & (HAL_GPIO_ReadPin(ONBOARD_BUTTON_2_GPIO_Port, ONBOARD_BUTTON_2_Pin) == true))
 80041e0:	4b25      	ldr	r3, [pc, #148]	; (8004278 <_Z16switchTuningModev+0x9c>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bf0c      	ite	eq
 80041e8:	2301      	moveq	r3, #1
 80041ea:	2300      	movne	r3, #0
 80041ec:	b2dc      	uxtb	r4, r3
 80041ee:	2102      	movs	r1, #2
 80041f0:	4822      	ldr	r0, [pc, #136]	; (800427c <_Z16switchTuningModev+0xa0>)
 80041f2:	f002 fc39 	bl	8006a68 <HAL_GPIO_ReadPin>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	4023      	ands	r3, r4
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	bf14      	ite	ne
 800420a:	2301      	movne	r3, #1
 800420c:	2300      	moveq	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d011      	beq.n	8004238 <_Z16switchTuningModev+0x5c>
  {
    if (tuningMode == 1) tuningMode = 2;
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <_Z16switchTuningModev+0xa4>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d103      	bne.n	8004224 <_Z16switchTuningModev+0x48>
 800421c:	4b18      	ldr	r3, [pc, #96]	; (8004280 <_Z16switchTuningModev+0xa4>)
 800421e:	2202      	movs	r2, #2
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	e002      	b.n	800422a <_Z16switchTuningModev+0x4e>
    else tuningMode = 1;
 8004224:	4b16      	ldr	r3, [pc, #88]	; (8004280 <_Z16switchTuningModev+0xa4>)
 8004226:	2201      	movs	r2, #1
 8004228:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);
 800422a:	2120      	movs	r1, #32
 800422c:	4813      	ldr	r0, [pc, #76]	; (800427c <_Z16switchTuningModev+0xa0>)
 800422e:	f002 fc4a 	bl	8006ac6 <HAL_GPIO_TogglePin>
    buttonPressed = true;
 8004232:	4b11      	ldr	r3, [pc, #68]	; (8004278 <_Z16switchTuningModev+0x9c>)
 8004234:	2201      	movs	r2, #1
 8004236:	701a      	strb	r2, [r3, #0]
  }
  if ((buttonPressed == true) & (HAL_GPIO_ReadPin(ONBOARD_BUTTON_2_GPIO_Port, ONBOARD_BUTTON_2_Pin) == false))
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <_Z16switchTuningModev+0x9c>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b01      	cmp	r3, #1
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2dc      	uxtb	r4, r3
 8004246:	2102      	movs	r1, #2
 8004248:	480c      	ldr	r0, [pc, #48]	; (800427c <_Z16switchTuningModev+0xa0>)
 800424a:	f002 fc0d 	bl	8006a68 <HAL_GPIO_ReadPin>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf0c      	ite	eq
 8004254:	2301      	moveq	r3, #1
 8004256:	2300      	movne	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	4023      	ands	r3, r4
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	bf14      	ite	ne
 8004262:	2301      	movne	r3, #1
 8004264:	2300      	moveq	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <_Z16switchTuningModev+0x96>
  {
    buttonPressed = false;
 800426c:	4b02      	ldr	r3, [pc, #8]	; (8004278 <_Z16switchTuningModev+0x9c>)
 800426e:	2200      	movs	r2, #0
 8004270:	701a      	strb	r2, [r3, #0]
  }
 8004272:	bf00      	nop
 8004274:	bd98      	pop	{r3, r4, r7, pc}
 8004276:	bf00      	nop
 8004278:	2000050c 	.word	0x2000050c
 800427c:	40020000 	.word	0x40020000
 8004280:	20000000 	.word	0x20000000

08004284 <_Z16SBUS_RecieveBitsv>:
 * for later processing.
 * 
 * --Custom Method!
 */
void SBUS_RecieveBits()
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
  TIM4->CCR1 = (uint16_t)(fastPPM_CenterTime + ((float)SBUS_Channels[2] * PPMmainMotorScaler));
 800428a:	4b35      	ldr	r3, [pc, #212]	; (8004360 <_Z16SBUS_RecieveBitsv+0xdc>)
 800428c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004290:	4618      	mov	r0, r3
 8004292:	f7fc fd5f 	bl	8000d54 <__aeabi_i2f>
 8004296:	4603      	mov	r3, r0
 8004298:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800429c:	4618      	mov	r0, r3
 800429e:	f7fc fdad 	bl	8000dfc <__aeabi_fmul>
 80042a2:	4603      	mov	r3, r0
 80042a4:	492f      	ldr	r1, [pc, #188]	; (8004364 <_Z16SBUS_RecieveBitsv+0xe0>)
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fc fca0 	bl	8000bec <__addsf3>
 80042ac:	4603      	mov	r3, r0
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fc ffa6 	bl	8001200 <__aeabi_f2uiz>
 80042b4:	4603      	mov	r3, r0
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <_Z16SBUS_RecieveBitsv+0xe4>)
 80042ba:	635a      	str	r2, [r3, #52]	; 0x34
  SBUS_timerCount = TIM11->CNT + SBUS_StartTimeOffset;                                                      //get current clock count from TIM11 + time offset
 80042bc:	4b2b      	ldr	r3, [pc, #172]	; (800436c <_Z16SBUS_RecieveBitsv+0xe8>)
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b06      	subs	r3, #6
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	4b2a      	ldr	r3, [pc, #168]	; (8004370 <_Z16SBUS_RecieveBitsv+0xec>)
 80042c8:	801a      	strh	r2, [r3, #0]
  SBUS_RxBitString[0] = true;                                                                               //sets the first value in the array to 1 as the interrupt is not fast
 80042ca:	4b2a      	ldr	r3, [pc, #168]	; (8004374 <_Z16SBUS_RecieveBitsv+0xf0>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	701a      	strb	r2, [r3, #0]
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)                                                            //\->enough to be able to measure the pin for the first bit
 80042d0:	2301      	movs	r3, #1
 80042d2:	607b      	str	r3, [r7, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b8f      	cmp	r3, #143	; 0x8f
 80042d8:	d83a      	bhi.n	8004350 <_Z16SBUS_RecieveBitsv+0xcc>
  {
    ONBOARD_WRITE_3_GPIO_Port->BSRR = (uint32_t)ONBOARD_WRITE_3_Pin << 16U;                                 //NOTDONE debug
 80042da:	4b27      	ldr	r3, [pc, #156]	; (8004378 <_Z16SBUS_RecieveBitsv+0xf4>)
 80042dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042e0:	619a      	str	r2, [r3, #24]
    SBUS_RxBitString[i] = ((ONBOARD_READ_IT_3_GPIO_Port->IDR & ONBOARD_READ_IT_3_Pin) != 0 ? true : false); //if the SBUS pin is HIGH then the value is 1 else 0
 80042e2:	4b26      	ldr	r3, [pc, #152]	; (800437c <_Z16SBUS_RecieveBitsv+0xf8>)
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bf14      	ite	ne
 80042ee:	2301      	movne	r3, #1
 80042f0:	2300      	moveq	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	4619      	mov	r1, r3
 80042f6:	4a1f      	ldr	r2, [pc, #124]	; (8004374 <_Z16SBUS_RecieveBitsv+0xf0>)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4413      	add	r3, r2
 80042fc:	460a      	mov	r2, r1
 80042fe:	701a      	strb	r2, [r3, #0]
    ONBOARD_WRITE_3_GPIO_Port->BSRR = ONBOARD_WRITE_3_Pin;                                                  //NOTDONE debug
 8004300:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <_Z16SBUS_RecieveBitsv+0xf4>)
 8004302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004306:	619a      	str	r2, [r3, #24]
    while ((TIM11->CNT - SBUS_timerCount) < SBUS_ClockCyclesPerBit)                                         //wait until x clock pulses passed
 8004308:	4b18      	ldr	r3, [pc, #96]	; (800436c <_Z16SBUS_RecieveBitsv+0xe8>)
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	4a18      	ldr	r2, [pc, #96]	; (8004370 <_Z16SBUS_RecieveBitsv+0xec>)
 800430e:	8812      	ldrh	r2, [r2, #0]
 8004310:	1a9a      	subs	r2, r3, r2
 8004312:	4b16      	ldr	r3, [pc, #88]	; (800436c <_Z16SBUS_RecieveBitsv+0xe8>)
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	3301      	adds	r3, #1
 8004318:	21a0      	movs	r1, #160	; 0xa0
 800431a:	fbb1 f3f3 	udiv	r3, r1, r3
 800431e:	429a      	cmp	r2, r3
 8004320:	bf34      	ite	cc
 8004322:	2301      	movcc	r3, #1
 8004324:	2300      	movcs	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d000      	beq.n	800432e <_Z16SBUS_RecieveBitsv+0xaa>
 800432c:	e7ec      	b.n	8004308 <_Z16SBUS_RecieveBitsv+0x84>
    {
    }
    SBUS_timerCount += SBUS_ClockCyclesPerBit;
 800432e:	4b0f      	ldr	r3, [pc, #60]	; (800436c <_Z16SBUS_RecieveBitsv+0xe8>)
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	3301      	adds	r3, #1
 8004334:	22a0      	movs	r2, #160	; 0xa0
 8004336:	fbb2 f3f3 	udiv	r3, r2, r3
 800433a:	b29a      	uxth	r2, r3
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <_Z16SBUS_RecieveBitsv+0xec>)
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	4413      	add	r3, r2
 8004342:	b29a      	uxth	r2, r3
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <_Z16SBUS_RecieveBitsv+0xec>)
 8004346:	801a      	strh	r2, [r3, #0]
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)                                                            //\->enough to be able to measure the pin for the first bit
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3301      	adds	r3, #1
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	e7c1      	b.n	80042d4 <_Z16SBUS_RecieveBitsv+0x50>
  }
  SBUSNewPackage = true;
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <_Z16SBUS_RecieveBitsv+0xfc>)
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000654 	.word	0x20000654
 8004364:	44bb8000 	.word	0x44bb8000
 8004368:	40000800 	.word	0x40000800
 800436c:	40014800 	.word	0x40014800
 8004370:	200005a4 	.word	0x200005a4
 8004374:	200005a8 	.word	0x200005a8
 8004378:	40020000 	.word	0x40020000
 800437c:	40020800 	.word	0x40020800
 8004380:	20000664 	.word	0x20000664

08004384 <_Z19SBUS_postProcessingv>:
 * channels.
 * 
 * --Custom Method!
 */
void SBUS_postProcessing()
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
  //verify:

  SBUS_CorruptedPackage = false;                                                                                          //reset corrupted package flag
 800438a:	4b85      	ldr	r3, [pc, #532]	; (80045a0 <_Z19SBUS_postProcessingv+0x21c>)
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)                                                                         //repeat for each byte
 8004390:	2300      	movs	r3, #0
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	2b0b      	cmp	r3, #11
 8004398:	d85b      	bhi.n	8004452 <_Z19SBUS_postProcessingv+0xce>
  {
    if ((SBUS_RxBitString[0 + (i * SBUS_BitsPerByte)] == true) & (SBUS_RxBitString[10 + (i * SBUS_BitsPerByte)] == false) & (SBUS_RxBitString[11 + (i * SBUS_BitsPerByte)] == false))
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	4613      	mov	r3, r2
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	461a      	mov	r2, r3
 80043a6:	4b7f      	ldr	r3, [pc, #508]	; (80045a4 <_Z19SBUS_postProcessingv+0x220>)
 80043a8:	5c9b      	ldrb	r3, [r3, r2]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	bf0c      	ite	eq
 80043ae:	2301      	moveq	r3, #1
 80043b0:	2300      	movne	r3, #0
 80043b2:	b2d9      	uxtb	r1, r3
 80043b4:	69fa      	ldr	r2, [r7, #28]
 80043b6:	4613      	mov	r3, r2
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	330a      	adds	r3, #10
 80043c0:	4a78      	ldr	r2, [pc, #480]	; (80045a4 <_Z19SBUS_postProcessingv+0x220>)
 80043c2:	5cd3      	ldrb	r3, [r2, r3]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	bf0c      	ite	eq
 80043c8:	2301      	moveq	r3, #1
 80043ca:	2300      	movne	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	400b      	ands	r3, r1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	4619      	mov	r1, r3
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	4613      	mov	r3, r2
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	330b      	adds	r3, #11
 80043e0:	4a70      	ldr	r2, [pc, #448]	; (80045a4 <_Z19SBUS_postProcessingv+0x220>)
 80043e2:	5cd3      	ldrb	r3, [r2, r3]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	400b      	ands	r3, r1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d027      	beq.n	8004444 <_Z19SBUS_postProcessingv+0xc0>
    {                                                                                                                     //^->check start bit, 2 stop bit
      uint8_t parityCheck = false;
 80043f4:	2300      	movs	r3, #0
 80043f6:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                                                                      //generate parity from 8 bits
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2b07      	cmp	r3, #7
 8004400:	d811      	bhi.n	8004426 <_Z19SBUS_postProcessingv+0xa2>
      {
        parityCheck ^= SBUS_RxBitString[1 + x + (i * SBUS_BitsPerByte)];
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	4613      	mov	r3, r2
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	461a      	mov	r2, r3
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	4413      	add	r3, r2
 8004412:	3301      	adds	r3, #1
 8004414:	4a63      	ldr	r2, [pc, #396]	; (80045a4 <_Z19SBUS_postProcessingv+0x220>)
 8004416:	5cd2      	ldrb	r2, [r2, r3]
 8004418:	7efb      	ldrb	r3, [r7, #27]
 800441a:	4053      	eors	r3, r2
 800441c:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                                                                      //generate parity from 8 bits
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	3301      	adds	r3, #1
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	e7ea      	b.n	80043fc <_Z19SBUS_postProcessingv+0x78>
      }
      if (parityCheck == SBUS_RxBitString[9 + (i * SBUS_BitsPerByte)]) SBUS_CorruptedPackage = true;                      //if parity fails set corrupted flag
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	4613      	mov	r3, r2
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	3309      	adds	r3, #9
 8004432:	4a5c      	ldr	r2, [pc, #368]	; (80045a4 <_Z19SBUS_postProcessingv+0x220>)
 8004434:	5cd3      	ldrb	r3, [r2, r3]
 8004436:	7efa      	ldrb	r2, [r7, #27]
 8004438:	429a      	cmp	r2, r3
 800443a:	d106      	bne.n	800444a <_Z19SBUS_postProcessingv+0xc6>
 800443c:	4b58      	ldr	r3, [pc, #352]	; (80045a0 <_Z19SBUS_postProcessingv+0x21c>)
 800443e:	2201      	movs	r2, #1
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	e002      	b.n	800444a <_Z19SBUS_postProcessingv+0xc6>
    }
    else SBUS_CorruptedPackage = true;                                                                                    //if start or stop bits fail set corrupted flag
 8004444:	4b56      	ldr	r3, [pc, #344]	; (80045a0 <_Z19SBUS_postProcessingv+0x21c>)
 8004446:	2201      	movs	r2, #1
 8004448:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)                                                                         //repeat for each byte
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3301      	adds	r3, #1
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	e7a0      	b.n	8004394 <_Z19SBUS_postProcessingv+0x10>
  }

  SBUS_Bytes[0] = 0;                                                                                                      //Reset the first byte (header byte)
 8004452:	4b55      	ldr	r3, [pc, #340]	; (80045a8 <_Z19SBUS_postProcessingv+0x224>)
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b07      	cmp	r3, #7
 8004460:	d816      	bhi.n	8004490 <_Z19SBUS_postProcessingv+0x10c>
  {
    SBUS_Bytes[0] |= SBUS_RxBitString[1 + i] << (7 - i);                                                                  //assemble new header byte
 8004462:	4b51      	ldr	r3, [pc, #324]	; (80045a8 <_Z19SBUS_postProcessingv+0x224>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	b25a      	sxtb	r2, r3
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	3301      	adds	r3, #1
 800446c:	494d      	ldr	r1, [pc, #308]	; (80045a4 <_Z19SBUS_postProcessingv+0x220>)
 800446e:	5ccb      	ldrb	r3, [r1, r3]
 8004470:	4619      	mov	r1, r3
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f1c3 0307 	rsb	r3, r3, #7
 8004478:	fa01 f303 	lsl.w	r3, r1, r3
 800447c:	b25b      	sxtb	r3, r3
 800447e:	4313      	orrs	r3, r2
 8004480:	b25b      	sxtb	r3, r3
 8004482:	b2da      	uxtb	r2, r3
 8004484:	4b48      	ldr	r3, [pc, #288]	; (80045a8 <_Z19SBUS_postProcessingv+0x224>)
 8004486:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	3301      	adds	r3, #1
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	e7e5      	b.n	800445c <_Z19SBUS_postProcessingv+0xd8>
  }
  if (SBUS_Bytes[0] != 0x0FU) SBUS_CorruptedPackage = true;                                                               //check if header byte is 0x0F
 8004490:	4b45      	ldr	r3, [pc, #276]	; (80045a8 <_Z19SBUS_postProcessingv+0x224>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b0f      	cmp	r3, #15
 8004496:	d002      	beq.n	800449e <_Z19SBUS_postProcessingv+0x11a>
 8004498:	4b41      	ldr	r3, [pc, #260]	; (80045a0 <_Z19SBUS_postProcessingv+0x21c>)
 800449a:	2201      	movs	r2, #1
 800449c:	701a      	strb	r2, [r3, #0]

  //assemble channels:

  if (SBUS_CorruptedPackage == false)
 800449e:	4b40      	ldr	r3, [pc, #256]	; (80045a0 <_Z19SBUS_postProcessingv+0x21c>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d175      	bne.n	8004592 <_Z19SBUS_postProcessingv+0x20e>
  {
    uint8_t byteNumber = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	73fb      	strb	r3, [r7, #15]
    uint8_t bitNumber = 0;                                                                                                //0(LSB) to 7/(MSB)
 80044aa:	2300      	movs	r3, #0
 80044ac:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b07      	cmp	r3, #7
 80044b6:	d86c      	bhi.n	8004592 <_Z19SBUS_postProcessingv+0x20e>
    {
      uint8_t bitInChannel = 0;                                                                                           //0(LSB) to 10(MSB)
 80044b8:	2300      	movs	r3, #0
 80044ba:	71fb      	strb	r3, [r7, #7]
      SBUS_TempChannels[i] = 0;
 80044bc:	4a3b      	ldr	r2, [pc, #236]	; (80045ac <_Z19SBUS_postProcessingv+0x228>)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2100      	movs	r1, #0
 80044c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      while (bitInChannel <= 10)
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	2b0a      	cmp	r3, #10
 80044ca:	d843      	bhi.n	8004554 <_Z19SBUS_postProcessingv+0x1d0>
      {
        if (bitNumber <= 7)
 80044cc:	7bbb      	ldrb	r3, [r7, #14]
 80044ce:	2b07      	cmp	r3, #7
 80044d0:	d81a      	bhi.n	8004508 <_Z19SBUS_postProcessingv+0x184>
        {
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;   //transfer bit
 80044d2:	4a36      	ldr	r2, [pc, #216]	; (80045ac <_Z19SBUS_postProcessingv+0x228>)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80044da:	7bbb      	ldrb	r3, [r7, #14]
 80044dc:	f103 000d 	add.w	r0, r3, #13
 80044e0:	7bfa      	ldrb	r2, [r7, #15]
 80044e2:	4613      	mov	r3, r2
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	4413      	add	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4403      	add	r3, r0
 80044ec:	4a2d      	ldr	r2, [pc, #180]	; (80045a4 <_Z19SBUS_postProcessingv+0x220>)
 80044ee:	5cd3      	ldrb	r3, [r2, r3]
 80044f0:	461a      	mov	r2, r3
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	b21b      	sxth	r3, r3
 80044fa:	430b      	orrs	r3, r1
 80044fc:	b219      	sxth	r1, r3
 80044fe:	4a2b      	ldr	r2, [pc, #172]	; (80045ac <_Z19SBUS_postProcessingv+0x228>)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004506:	e01e      	b.n	8004546 <_Z19SBUS_postProcessingv+0x1c2>
        }
        else
        {
          byteNumber ++;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	3301      	adds	r3, #1
 800450c:	73fb      	strb	r3, [r7, #15]
          bitNumber = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	73bb      	strb	r3, [r7, #14]
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;   //transfer bit
 8004512:	4a26      	ldr	r2, [pc, #152]	; (80045ac <_Z19SBUS_postProcessingv+0x228>)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800451a:	7bbb      	ldrb	r3, [r7, #14]
 800451c:	f103 000d 	add.w	r0, r3, #13
 8004520:	7bfa      	ldrb	r2, [r7, #15]
 8004522:	4613      	mov	r3, r2
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4403      	add	r3, r0
 800452c:	4a1d      	ldr	r2, [pc, #116]	; (80045a4 <_Z19SBUS_postProcessingv+0x220>)
 800452e:	5cd3      	ldrb	r3, [r2, r3]
 8004530:	461a      	mov	r2, r3
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	b21b      	sxth	r3, r3
 800453a:	430b      	orrs	r3, r1
 800453c:	b219      	sxth	r1, r3
 800453e:	4a1b      	ldr	r2, [pc, #108]	; (80045ac <_Z19SBUS_postProcessingv+0x228>)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        bitNumber ++;
 8004546:	7bbb      	ldrb	r3, [r7, #14]
 8004548:	3301      	adds	r3, #1
 800454a:	73bb      	strb	r3, [r7, #14]
        bitInChannel ++;
 800454c:	79fb      	ldrb	r3, [r7, #7]
 800454e:	3301      	adds	r3, #1
 8004550:	71fb      	strb	r3, [r7, #7]
      while (bitInChannel <= 10)
 8004552:	e7b8      	b.n	80044c6 <_Z19SBUS_postProcessingv+0x142>
      }
      
      SBUS_Channels[i] = ((SBUS_rawValueCenter - (float)SBUS_TempChannels[i]) * SBUS_ConversionRation);            //map from 233, 1875 to -1000, 1000 and transfer channel value
 8004554:	4a15      	ldr	r2, [pc, #84]	; (80045ac <_Z19SBUS_postProcessingv+0x228>)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800455c:	4618      	mov	r0, r3
 800455e:	f7fc fbf9 	bl	8000d54 <__aeabi_i2f>
 8004562:	4603      	mov	r3, r0
 8004564:	4619      	mov	r1, r3
 8004566:	4812      	ldr	r0, [pc, #72]	; (80045b0 <_Z19SBUS_postProcessingv+0x22c>)
 8004568:	f7fc fb3e 	bl	8000be8 <__aeabi_fsub>
 800456c:	4603      	mov	r3, r0
 800456e:	4911      	ldr	r1, [pc, #68]	; (80045b4 <_Z19SBUS_postProcessingv+0x230>)
 8004570:	4618      	mov	r0, r3
 8004572:	f7fc fc43 	bl	8000dfc <__aeabi_fmul>
 8004576:	4603      	mov	r3, r0
 8004578:	4618      	mov	r0, r3
 800457a:	f7fc fe1b 	bl	80011b4 <__aeabi_f2iz>
 800457e:	4603      	mov	r3, r0
 8004580:	b219      	sxth	r1, r3
 8004582:	4a0d      	ldr	r2, [pc, #52]	; (80045b8 <_Z19SBUS_postProcessingv+0x234>)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	3301      	adds	r3, #1
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	e78f      	b.n	80044b2 <_Z19SBUS_postProcessingv+0x12e>
    }
  }
  SBUSNewPackage = false;                                                                                                 //reset flag
 8004592:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <_Z19SBUS_postProcessingv+0x238>)
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
 8004598:	bf00      	nop
 800459a:	3720      	adds	r7, #32
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20000034 	.word	0x20000034
 80045a4:	200005a8 	.word	0x200005a8
 80045a8:	20000638 	.word	0x20000638
 80045ac:	20000644 	.word	0x20000644
 80045b0:	4483c000 	.word	0x4483c000
 80045b4:	3f9be84d 	.word	0x3f9be84d
 80045b8:	20000654 	.word	0x20000654
 80045bc:	20000664 	.word	0x20000664

080045c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045c4:	f001 fbc6 	bl	8005d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045c8:	f000 f82e 	bl	8004628 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045cc:	f000 fa04 	bl	80049d8 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80045d0:	f000 f87a 	bl	80046c8 <_ZL12MX_ADC1_Initv>
  MX_TIM3_Init();
 80045d4:	f000 f908 	bl	80047e8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80045d8:	f000 f96e 	bl	80048b8 <_ZL12MX_TIM4_Initv>
  MX_TIM11_Init();
 80045dc:	f000 f9d4 	bl	8004988 <_ZL13MX_TIM11_Initv>
  MX_USB_DEVICE_Init();
 80045e0:	f008 fd08 	bl	800cff4 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80045e4:	f000 f8cc 	bl	8004780 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim11);    //start TIM11
 80045e8:	480c      	ldr	r0, [pc, #48]	; (800461c <main+0x5c>)
 80045ea:	f005 f86f 	bl	80096cc <HAL_TIM_Base_Start>
  MPU6050_init();
 80045ee:	f7fd fc51 	bl	8001e94 <_Z12MPU6050_initv>
  PPM_init();
 80045f2:	f000 fc6f 	bl	8004ed4 <_Z8PPM_initv>
  while (SBUS_CorruptedPackage == true)     //only continue if the heli is connected to the remote
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <main+0x60>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d106      	bne.n	800460c <main+0x4c>
  {
    if (SBUSNewPackage == true) SBUS_postProcessing();
 80045fe:	4b09      	ldr	r3, [pc, #36]	; (8004624 <main+0x64>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d1f7      	bne.n	80045f6 <main+0x36>
 8004606:	f7ff febd 	bl	8004384 <_Z19SBUS_postProcessingv>
  while (SBUS_CorruptedPackage == true)     //only continue if the heli is connected to the remote
 800460a:	e7f4      	b.n	80045f6 <main+0x36>
  }
  ESCCalibration();
 800460c:	f000 fc70 	bl	8004ef0 <_Z14ESCCalibrationv>
  MPU6050_calibration();
 8004610:	f7fd fc9e 	bl	8001f50 <_Z19MPU6050_calibrationv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 8004614:	f000 fdcc 	bl	80051b0 <_Z4loopv>
 8004618:	e7fc      	b.n	8004614 <main+0x54>
 800461a:	bf00      	nop
 800461c:	20000798 	.word	0x20000798
 8004620:	20000034 	.word	0x20000034
 8004624:	20000664 	.word	0x20000664

08004628 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b092      	sub	sp, #72	; 0x48
 800462c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800462e:	f107 0318 	add.w	r3, r7, #24
 8004632:	2230      	movs	r2, #48	; 0x30
 8004634:	2100      	movs	r1, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f00b fb6c 	bl	800fd14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800463c:	1d3b      	adds	r3, r7, #4
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	609a      	str	r2, [r3, #8]
 8004646:	60da      	str	r2, [r3, #12]
 8004648:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800464a:	2301      	movs	r3, #1
 800464c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800464e:	2301      	movs	r3, #1
 8004650:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004652:	2302      	movs	r3, #2
 8004654:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800465a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 800465c:	2308      	movs	r3, #8
 800465e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004660:	23c0      	movs	r3, #192	; 0xc0
 8004662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8004664:	2306      	movs	r3, #6
 8004666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004668:	2308      	movs	r3, #8
 800466a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800466c:	f107 0318 	add.w	r3, r7, #24
 8004670:	4618      	mov	r0, r3
 8004672:	f004 fb6d 	bl	8008d50 <HAL_RCC_OscConfig>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf14      	ite	ne
 800467c:	2301      	movne	r3, #1
 800467e:	2300      	moveq	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8004686:	f000 fa6f 	bl	8004b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800468a:	230f      	movs	r3, #15
 800468c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800468e:	2302      	movs	r3, #2
 8004690:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8004692:	2390      	movs	r3, #144	; 0x90
 8004694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800469e:	1d3b      	adds	r3, r7, #4
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f004 fda4 	bl	80091f0 <HAL_RCC_ClockConfig>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bf14      	ite	ne
 80046ae:	2301      	movne	r3, #1
 80046b0:	2300      	moveq	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 80046b8:	f000 fa56 	bl	8004b68 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80046bc:	f004 fe84 	bl	80093c8 <HAL_RCC_EnableCSS>
}
 80046c0:	bf00      	nop
 80046c2:	3748      	adds	r7, #72	; 0x48
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80046ce:	463b      	mov	r3, r7
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	609a      	str	r2, [r3, #8]
 80046d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80046da:	4b26      	ldr	r3, [pc, #152]	; (8004774 <_ZL12MX_ADC1_Initv+0xac>)
 80046dc:	4a26      	ldr	r2, [pc, #152]	; (8004778 <_ZL12MX_ADC1_Initv+0xb0>)
 80046de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80046e0:	4b24      	ldr	r3, [pc, #144]	; (8004774 <_ZL12MX_ADC1_Initv+0xac>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80046e6:	4b23      	ldr	r3, [pc, #140]	; (8004774 <_ZL12MX_ADC1_Initv+0xac>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80046ec:	4b21      	ldr	r3, [pc, #132]	; (8004774 <_ZL12MX_ADC1_Initv+0xac>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80046f2:	4b20      	ldr	r3, [pc, #128]	; (8004774 <_ZL12MX_ADC1_Initv+0xac>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80046f8:	4b1e      	ldr	r3, [pc, #120]	; (8004774 <_ZL12MX_ADC1_Initv+0xac>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004700:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <_ZL12MX_ADC1_Initv+0xac>)
 8004702:	2200      	movs	r2, #0
 8004704:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004706:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <_ZL12MX_ADC1_Initv+0xac>)
 8004708:	4a1c      	ldr	r2, [pc, #112]	; (800477c <_ZL12MX_ADC1_Initv+0xb4>)
 800470a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800470c:	4b19      	ldr	r3, [pc, #100]	; (8004774 <_ZL12MX_ADC1_Initv+0xac>)
 800470e:	2200      	movs	r2, #0
 8004710:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004712:	4b18      	ldr	r3, [pc, #96]	; (8004774 <_ZL12MX_ADC1_Initv+0xac>)
 8004714:	2201      	movs	r2, #1
 8004716:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004718:	4b16      	ldr	r3, [pc, #88]	; (8004774 <_ZL12MX_ADC1_Initv+0xac>)
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004720:	4b14      	ldr	r3, [pc, #80]	; (8004774 <_ZL12MX_ADC1_Initv+0xac>)
 8004722:	2201      	movs	r2, #1
 8004724:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004726:	4813      	ldr	r0, [pc, #76]	; (8004774 <_ZL12MX_ADC1_Initv+0xac>)
 8004728:	f001 fba6 	bl	8005e78 <HAL_ADC_Init>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	bf14      	ite	ne
 8004732:	2301      	movne	r3, #1
 8004734:	2300      	moveq	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 800473c:	f000 fa14 	bl	8004b68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004740:	230b      	movs	r3, #11
 8004742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004744:	2301      	movs	r3, #1
 8004746:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8004748:	2301      	movs	r3, #1
 800474a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800474c:	463b      	mov	r3, r7
 800474e:	4619      	mov	r1, r3
 8004750:	4808      	ldr	r0, [pc, #32]	; (8004774 <_ZL12MX_ADC1_Initv+0xac>)
 8004752:	f001 fc85 	bl	8006060 <HAL_ADC_ConfigChannel>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8004766:	f000 f9ff 	bl	8004b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	2000066c 	.word	0x2000066c
 8004778:	40012000 	.word	0x40012000
 800477c:	0f000001 	.word	0x0f000001

08004780 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004784:	4b15      	ldr	r3, [pc, #84]	; (80047dc <MX_I2C1_Init+0x5c>)
 8004786:	4a16      	ldr	r2, [pc, #88]	; (80047e0 <MX_I2C1_Init+0x60>)
 8004788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800478a:	4b14      	ldr	r3, [pc, #80]	; (80047dc <MX_I2C1_Init+0x5c>)
 800478c:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <MX_I2C1_Init+0x64>)
 800478e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004790:	4b12      	ldr	r3, [pc, #72]	; (80047dc <MX_I2C1_Init+0x5c>)
 8004792:	2200      	movs	r2, #0
 8004794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004796:	4b11      	ldr	r3, [pc, #68]	; (80047dc <MX_I2C1_Init+0x5c>)
 8004798:	2200      	movs	r2, #0
 800479a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800479c:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <MX_I2C1_Init+0x5c>)
 800479e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047a4:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <MX_I2C1_Init+0x5c>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80047aa:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <MX_I2C1_Init+0x5c>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047b0:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <MX_I2C1_Init+0x5c>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047b6:	4b09      	ldr	r3, [pc, #36]	; (80047dc <MX_I2C1_Init+0x5c>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80047bc:	4807      	ldr	r0, [pc, #28]	; (80047dc <MX_I2C1_Init+0x5c>)
 80047be:	f002 f9b3 	bl	8006b28 <HAL_I2C_Init>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bf14      	ite	ne
 80047c8:	2301      	movne	r3, #1
 80047ca:	2300      	moveq	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <MX_I2C1_Init+0x56>
  {
    Error_Handler();
 80047d2:	f000 f9c9 	bl	8004b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80047d6:	bf00      	nop
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	200006b4 	.word	0x200006b4
 80047e0:	40005400 	.word	0x40005400
 80047e4:	00061a80 	.word	0x00061a80

080047e8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	; 0x28
 80047ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047ee:	f107 0320 	add.w	r3, r7, #32
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047f8:	1d3b      	adds	r3, r7, #4
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	605a      	str	r2, [r3, #4]
 8004800:	609a      	str	r2, [r3, #8]
 8004802:	60da      	str	r2, [r3, #12]
 8004804:	611a      	str	r2, [r3, #16]
 8004806:	615a      	str	r2, [r3, #20]
 8004808:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800480a:	4b29      	ldr	r3, [pc, #164]	; (80048b0 <_ZL12MX_TIM3_Initv+0xc8>)
 800480c:	4a29      	ldr	r2, [pc, #164]	; (80048b4 <_ZL12MX_TIM3_Initv+0xcc>)
 800480e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 8004810:	4b27      	ldr	r3, [pc, #156]	; (80048b0 <_ZL12MX_TIM3_Initv+0xc8>)
 8004812:	220f      	movs	r2, #15
 8004814:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004816:	4b26      	ldr	r3, [pc, #152]	; (80048b0 <_ZL12MX_TIM3_Initv+0xc8>)
 8004818:	2200      	movs	r2, #0
 800481a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000 - 1;
 800481c:	4b24      	ldr	r3, [pc, #144]	; (80048b0 <_ZL12MX_TIM3_Initv+0xc8>)
 800481e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004822:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004824:	4b22      	ldr	r3, [pc, #136]	; (80048b0 <_ZL12MX_TIM3_Initv+0xc8>)
 8004826:	2200      	movs	r2, #0
 8004828:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800482a:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <_ZL12MX_TIM3_Initv+0xc8>)
 800482c:	2200      	movs	r2, #0
 800482e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004830:	481f      	ldr	r0, [pc, #124]	; (80048b0 <_ZL12MX_TIM3_Initv+0xc8>)
 8004832:	f005 f81f 	bl	8009874 <HAL_TIM_PWM_Init>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf14      	ite	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2300      	moveq	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8004846:	f000 f98f 	bl	8004b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800484a:	2300      	movs	r3, #0
 800484c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800484e:	2300      	movs	r3, #0
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004852:	f107 0320 	add.w	r3, r7, #32
 8004856:	4619      	mov	r1, r3
 8004858:	4815      	ldr	r0, [pc, #84]	; (80048b0 <_ZL12MX_TIM3_Initv+0xc8>)
 800485a:	f005 fc4f 	bl	800a0fc <HAL_TIMEx_MasterConfigSynchronization>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	bf14      	ite	ne
 8004864:	2301      	movne	r3, #1
 8004866:	2300      	moveq	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 800486e:	f000 f97b 	bl	8004b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004872:	2360      	movs	r3, #96	; 0x60
 8004874:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004876:	2300      	movs	r3, #0
 8004878:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004882:	1d3b      	adds	r3, r7, #4
 8004884:	2200      	movs	r2, #0
 8004886:	4619      	mov	r1, r3
 8004888:	4809      	ldr	r0, [pc, #36]	; (80048b0 <_ZL12MX_TIM3_Initv+0xc8>)
 800488a:	f005 f90b 	bl	8009aa4 <HAL_TIM_PWM_ConfigChannel>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	bf14      	ite	ne
 8004894:	2301      	movne	r3, #1
 8004896:	2300      	moveq	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 800489e:	f000 f963 	bl	8004b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80048a2:	4803      	ldr	r0, [pc, #12]	; (80048b0 <_ZL12MX_TIM3_Initv+0xc8>)
 80048a4:	f001 f8ca 	bl	8005a3c <HAL_TIM_MspPostInit>

}
 80048a8:	bf00      	nop
 80048aa:	3728      	adds	r7, #40	; 0x28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20000708 	.word	0x20000708
 80048b4:	40000400 	.word	0x40000400

080048b8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08a      	sub	sp, #40	; 0x28
 80048bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048be:	f107 0320 	add.w	r3, r7, #32
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048c8:	1d3b      	adds	r3, r7, #4
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	605a      	str	r2, [r3, #4]
 80048d0:	609a      	str	r2, [r3, #8]
 80048d2:	60da      	str	r2, [r3, #12]
 80048d4:	611a      	str	r2, [r3, #16]
 80048d6:	615a      	str	r2, [r3, #20]
 80048d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80048da:	4b29      	ldr	r3, [pc, #164]	; (8004980 <_ZL12MX_TIM4_Initv+0xc8>)
 80048dc:	4a29      	ldr	r2, [pc, #164]	; (8004984 <_ZL12MX_TIM4_Initv+0xcc>)
 80048de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16 - 1;
 80048e0:	4b27      	ldr	r3, [pc, #156]	; (8004980 <_ZL12MX_TIM4_Initv+0xc8>)
 80048e2:	220f      	movs	r2, #15
 80048e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048e6:	4b26      	ldr	r3, [pc, #152]	; (8004980 <_ZL12MX_TIM4_Initv+0xc8>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2500 -1;
 80048ec:	4b24      	ldr	r3, [pc, #144]	; (8004980 <_ZL12MX_TIM4_Initv+0xc8>)
 80048ee:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80048f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048f4:	4b22      	ldr	r3, [pc, #136]	; (8004980 <_ZL12MX_TIM4_Initv+0xc8>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048fa:	4b21      	ldr	r3, [pc, #132]	; (8004980 <_ZL12MX_TIM4_Initv+0xc8>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004900:	481f      	ldr	r0, [pc, #124]	; (8004980 <_ZL12MX_TIM4_Initv+0xc8>)
 8004902:	f004 ffb7 	bl	8009874 <HAL_TIM_PWM_Init>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 8004916:	f000 f927 	bl	8004b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800491a:	2300      	movs	r3, #0
 800491c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800491e:	2300      	movs	r3, #0
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004922:	f107 0320 	add.w	r3, r7, #32
 8004926:	4619      	mov	r1, r3
 8004928:	4815      	ldr	r0, [pc, #84]	; (8004980 <_ZL12MX_TIM4_Initv+0xc8>)
 800492a:	f005 fbe7 	bl	800a0fc <HAL_TIMEx_MasterConfigSynchronization>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 800493e:	f000 f913 	bl	8004b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004942:	2360      	movs	r3, #96	; 0x60
 8004944:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004952:	1d3b      	adds	r3, r7, #4
 8004954:	2200      	movs	r2, #0
 8004956:	4619      	mov	r1, r3
 8004958:	4809      	ldr	r0, [pc, #36]	; (8004980 <_ZL12MX_TIM4_Initv+0xc8>)
 800495a:	f005 f8a3 	bl	8009aa4 <HAL_TIM_PWM_ConfigChannel>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	bf14      	ite	ne
 8004964:	2301      	movne	r3, #1
 8004966:	2300      	moveq	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 800496e:	f000 f8fb 	bl	8004b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004972:	4803      	ldr	r0, [pc, #12]	; (8004980 <_ZL12MX_TIM4_Initv+0xc8>)
 8004974:	f001 f862 	bl	8005a3c <HAL_TIM_MspPostInit>

}
 8004978:	bf00      	nop
 800497a:	3728      	adds	r7, #40	; 0x28
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	20000750 	.word	0x20000750
 8004984:	40000800 	.word	0x40000800

08004988 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800498c:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <_ZL13MX_TIM11_Initv+0x48>)
 800498e:	4a11      	ldr	r2, [pc, #68]	; (80049d4 <_ZL13MX_TIM11_Initv+0x4c>)
 8004990:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16 - 1;
 8004992:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <_ZL13MX_TIM11_Initv+0x48>)
 8004994:	220f      	movs	r2, #15
 8004996:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004998:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <_ZL13MX_TIM11_Initv+0x48>)
 800499a:	2200      	movs	r2, #0
 800499c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800499e:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <_ZL13MX_TIM11_Initv+0x48>)
 80049a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049a4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049a6:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <_ZL13MX_TIM11_Initv+0x48>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049ac:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <_ZL13MX_TIM11_Initv+0x48>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80049b2:	4807      	ldr	r0, [pc, #28]	; (80049d0 <_ZL13MX_TIM11_Initv+0x48>)
 80049b4:	f004 fe3a 	bl	800962c <HAL_TIM_Base_Init>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	bf14      	ite	ne
 80049be:	2301      	movne	r3, #1
 80049c0:	2300      	moveq	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 80049c8:	f000 f8ce 	bl	8004b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80049cc:	bf00      	nop
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000798 	.word	0x20000798
 80049d4:	40014800 	.word	0x40014800

080049d8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08a      	sub	sp, #40	; 0x28
 80049dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049de:	f107 0314 	add.w	r3, r7, #20
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	605a      	str	r2, [r3, #4]
 80049e8:	609a      	str	r2, [r3, #8]
 80049ea:	60da      	str	r2, [r3, #12]
 80049ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
 80049f2:	4b48      	ldr	r3, [pc, #288]	; (8004b14 <_ZL12MX_GPIO_Initv+0x13c>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	4a47      	ldr	r2, [pc, #284]	; (8004b14 <_ZL12MX_GPIO_Initv+0x13c>)
 80049f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fc:	6313      	str	r3, [r2, #48]	; 0x30
 80049fe:	4b45      	ldr	r3, [pc, #276]	; (8004b14 <_ZL12MX_GPIO_Initv+0x13c>)
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	4b41      	ldr	r3, [pc, #260]	; (8004b14 <_ZL12MX_GPIO_Initv+0x13c>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	4a40      	ldr	r2, [pc, #256]	; (8004b14 <_ZL12MX_GPIO_Initv+0x13c>)
 8004a14:	f043 0304 	orr.w	r3, r3, #4
 8004a18:	6313      	str	r3, [r2, #48]	; 0x30
 8004a1a:	4b3e      	ldr	r3, [pc, #248]	; (8004b14 <_ZL12MX_GPIO_Initv+0x13c>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	4b3a      	ldr	r3, [pc, #232]	; (8004b14 <_ZL12MX_GPIO_Initv+0x13c>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	4a39      	ldr	r2, [pc, #228]	; (8004b14 <_ZL12MX_GPIO_Initv+0x13c>)
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	6313      	str	r3, [r2, #48]	; 0x30
 8004a36:	4b37      	ldr	r3, [pc, #220]	; (8004b14 <_ZL12MX_GPIO_Initv+0x13c>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	4b33      	ldr	r3, [pc, #204]	; (8004b14 <_ZL12MX_GPIO_Initv+0x13c>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	4a32      	ldr	r2, [pc, #200]	; (8004b14 <_ZL12MX_GPIO_Initv+0x13c>)
 8004a4c:	f043 0302 	orr.w	r3, r3, #2
 8004a50:	6313      	str	r3, [r2, #48]	; 0x30
 8004a52:	4b30      	ldr	r3, [pc, #192]	; (8004b14 <_ZL12MX_GPIO_Initv+0x13c>)
 8004a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	607b      	str	r3, [r7, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8004a64:	482c      	ldr	r0, [pc, #176]	; (8004b18 <_ZL12MX_GPIO_Initv+0x140>)
 8004a66:	f002 f816 	bl	8006a96 <HAL_GPIO_WritePin>
                          |ONBOARD_WRITE_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_RESET);
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a70:	482a      	ldr	r0, [pc, #168]	; (8004b1c <_ZL12MX_GPIO_Initv+0x144>)
 8004a72:	f002 f810 	bl	8006a96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_READ_IT_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_IT_3_Pin;
 8004a76:	2301      	movs	r3, #1
 8004a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_IT_3_GPIO_Port, &GPIO_InitStruct);
 8004a84:	f107 0314 	add.w	r3, r7, #20
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4824      	ldr	r0, [pc, #144]	; (8004b1c <_ZL12MX_GPIO_Initv+0x144>)
 8004a8c:	f001 fe4e 	bl	800672c <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_BUTTON_1_Pin ONBOARD_BUTTON_2_Pin ONBOARD_BUTTON_3_Pin ONBOARD_BUTTON_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_BUTTON_1_Pin|ONBOARD_BUTTON_2_Pin|ONBOARD_BUTTON_3_Pin|ONBOARD_BUTTON_4_Pin;
 8004a90:	230f      	movs	r3, #15
 8004a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a9c:	f107 0314 	add.w	r3, r7, #20
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	481d      	ldr	r0, [pc, #116]	; (8004b18 <_ZL12MX_GPIO_Initv+0x140>)
 8004aa4:	f001 fe42 	bl	800672c <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_LED_1_Pin ONBOARD_LED_2_Pin ONBOARD_LED_3_Pin ONBOARD_LED_4_Pin
                           ONBOARD_WRITE_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 8004aa8:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8004aac:	617b      	str	r3, [r7, #20]
                          |ONBOARD_WRITE_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aba:	f107 0314 	add.w	r3, r7, #20
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4815      	ldr	r0, [pc, #84]	; (8004b18 <_ZL12MX_GPIO_Initv+0x140>)
 8004ac2:	f001 fe33 	bl	800672c <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_WRITE_2_Pin */
  GPIO_InitStruct.Pin = ONBOARD_WRITE_2_Pin;
 8004ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004acc:	2301      	movs	r3, #1
 8004ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ONBOARD_WRITE_2_GPIO_Port, &GPIO_InitStruct);
 8004ad8:	f107 0314 	add.w	r3, r7, #20
 8004adc:	4619      	mov	r1, r3
 8004ade:	480f      	ldr	r0, [pc, #60]	; (8004b1c <_ZL12MX_GPIO_Initv+0x144>)
 8004ae0:	f001 fe24 	bl	800672c <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_READ_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_4_Pin;
 8004ae4:	2380      	movs	r3, #128	; 0x80
 8004ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_4_GPIO_Port, &GPIO_InitStruct);
 8004af0:	f107 0314 	add.w	r3, r7, #20
 8004af4:	4619      	mov	r1, r3
 8004af6:	480a      	ldr	r0, [pc, #40]	; (8004b20 <_ZL12MX_GPIO_Initv+0x148>)
 8004af8:	f001 fe18 	bl	800672c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004afc:	2200      	movs	r2, #0
 8004afe:	2100      	movs	r1, #0
 8004b00:	2006      	movs	r0, #6
 8004b02:	f001 fdce 	bl	80066a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004b06:	2006      	movs	r0, #6
 8004b08:	f001 fde7 	bl	80066da <HAL_NVIC_EnableIRQ>

}
 8004b0c:	bf00      	nop
 8004b0e:	3728      	adds	r7, #40	; 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40023800 	.word	0x40023800
 8004b18:	40020000 	.word	0x40020000
 8004b1c:	40020800 	.word	0x40020800
 8004b20:	40020400 	.word	0x40020400

08004b24 <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin SBUS pin
 * 
 * --Custom Method!
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	80fb      	strh	r3, [r7, #6]
  if (TIM11->CNT - PinInterruptLastTime > SBUS_interruptDeactivationTime)
 8004b2e:	4b0c      	ldr	r3, [pc, #48]	; (8004b60 <HAL_GPIO_EXTI_Callback+0x3c>)
 8004b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b32:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <HAL_GPIO_EXTI_Callback+0x40>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f640 0298 	movw	r2, #2200	; 0x898
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	bf8c      	ite	hi
 8004b40:	2301      	movhi	r3, #1
 8004b42:	2300      	movls	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_GPIO_EXTI_Callback+0x32>
  {
    SBUS_RecieveBits();
 8004b4a:	f7ff fb9b 	bl	8004284 <_Z16SBUS_RecieveBitsv>
    PinInterruptLastTime = TIM11->CNT;
 8004b4e:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <HAL_GPIO_EXTI_Callback+0x3c>)
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <HAL_GPIO_EXTI_Callback+0x40>)
 8004b54:	6013      	str	r3, [r2, #0]
  }
}
 8004b56:	bf00      	nop
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40014800 	.word	0x40014800
 8004b64:	20000668 	.word	0x20000668

08004b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b6c:	b672      	cpsid	i
}
 8004b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b70:	e7fe      	b.n	8004b70 <Error_Handler+0x8>
 8004b72:	0000      	movs	r0, r0
 8004b74:	0000      	movs	r0, r0
	...

08004b78 <_Z20updateMainMotorSpeedv>:
 * Then it combines the throttle input and the PITCH,ROLL Y values together with the angle to get the new motorspeed
 * 
 * --Custom Method!
 */
void updateMainMotorSpeed()
{
 8004b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b7c:	af00      	add	r7, sp, #0
  ADC1->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, ADC_CHANNEL_11);               //reset sample rate
 8004b7e:	4bac      	ldr	r3, [pc, #688]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	4aab      	ldr	r2, [pc, #684]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004b84:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004b88:	60d3      	str	r3, [r2, #12]
  ADC1->SMPR1 |= ADC_SMPR1(ADC_SAMPLETIME_15CYCLES, ADC_CHANNEL_11);        //set new sample rate Channel 11
 8004b8a:	4ba9      	ldr	r3, [pc, #676]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	4aa8      	ldr	r2, [pc, #672]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004b90:	f043 0308 	orr.w	r3, r3, #8
 8004b94:	60d3      	str	r3, [r2, #12]
  ADC1->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, 1);                              //reset Rank
 8004b96:	4ba6      	ldr	r3, [pc, #664]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9a:	4aa5      	ldr	r2, [pc, #660]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004b9c:	f023 031f 	bic.w	r3, r3, #31
 8004ba0:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= ADC_SQR3_RK(ADC_CHANNEL_11, 1);                             //set new Rank Channel 11
 8004ba2:	4ba3      	ldr	r3, [pc, #652]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba6:	4aa2      	ldr	r2, [pc, #648]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004ba8:	f043 030b 	orr.w	r3, r3, #11
 8004bac:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_ADC_Start(&hadc1);                                                    //start ADC
 8004bae:	48a1      	ldr	r0, [pc, #644]	; (8004e34 <_Z20updateMainMotorSpeedv+0x2bc>)
 8004bb0:	f001 f9a6 	bl	8005f00 <HAL_ADC_Start>
	adcValueChannel11 = (uint16_t)ADC1->DR;                                   //read ADC value
 8004bb4:	4b9e      	ldr	r3, [pc, #632]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	4b9f      	ldr	r3, [pc, #636]	; (8004e38 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004bbc:	801a      	strh	r2, [r3, #0]

	ADC1->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, ADC_CHANNEL_12);               //reset sample rate
 8004bbe:	4b9c      	ldr	r3, [pc, #624]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	4a9b      	ldr	r2, [pc, #620]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004bc4:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8004bc8:	60d3      	str	r3, [r2, #12]
  ADC1->SMPR1 |= ADC_SMPR1(ADC_SAMPLETIME_15CYCLES, ADC_CHANNEL_12);        //set new sample rate Channel 12
 8004bca:	4b99      	ldr	r3, [pc, #612]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	4a98      	ldr	r2, [pc, #608]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bd4:	60d3      	str	r3, [r2, #12]
  ADC1->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, 1);                              //reset Rank
 8004bd6:	4b96      	ldr	r3, [pc, #600]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bda:	4a95      	ldr	r2, [pc, #596]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004bdc:	f023 031f 	bic.w	r3, r3, #31
 8004be0:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= ADC_SQR3_RK(ADC_CHANNEL_12, 1);                             //set new Rank Channel 12
 8004be2:	4b93      	ldr	r3, [pc, #588]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be6:	4a92      	ldr	r2, [pc, #584]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004be8:	f043 030c 	orr.w	r3, r3, #12
 8004bec:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_ADC_Start(&hadc1);                                                    //start ADC
 8004bee:	4891      	ldr	r0, [pc, #580]	; (8004e34 <_Z20updateMainMotorSpeedv+0x2bc>)
 8004bf0:	f001 f986 	bl	8005f00 <HAL_ADC_Start>
	adcValueChannel12 = (uint16_t)ADC1->DR;                                   //read ADC value
 8004bf4:	4b8e      	ldr	r3, [pc, #568]	; (8004e30 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	4b90      	ldr	r3, [pc, #576]	; (8004e3c <_Z20updateMainMotorSpeedv+0x2c4>)
 8004bfc:	801a      	strh	r2, [r3, #0]

  if (SBUS_Channels[2] > motorDeadzone)
 8004bfe:	4b90      	ldr	r3, [pc, #576]	; (8004e40 <_Z20updateMainMotorSpeedv+0x2c8>)
 8004c00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004c04:	f46f 726d 	mvn.w	r2, #948	; 0x3b4
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	f2c0 80fc 	blt.w	8004e06 <_Z20updateMainMotorSpeedv+0x28e>
  {
    TIM4->CCR1 = (uint16_t)(                                                                                                                                                      \
      fastPPM_CenterTime                                                                                                                                                          \
    + ((float)SBUS_Channels[2] * PPMmainMotorScaler)                                                                                                                              \
 8004c0e:	4b8c      	ldr	r3, [pc, #560]	; (8004e40 <_Z20updateMainMotorSpeedv+0x2c8>)
 8004c10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fc f89d 	bl	8000d54 <__aeabi_i2f>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fc f8eb 	bl	8000dfc <__aeabi_fmul>
 8004c26:	4603      	mov	r3, r0
 8004c28:	4986      	ldr	r1, [pc, #536]	; (8004e44 <_Z20updateMainMotorSpeedv+0x2cc>)
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fb ffde 	bl	8000bec <__addsf3>
 8004c30:	4603      	mov	r3, r0
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fb fc34 	bl	80004a0 <__aeabi_f2d>
 8004c38:	4604      	mov	r4, r0
 8004c3a:	460d      	mov	r5, r1
    + ((((((float)adcValueChannel12 - hall2_center) * hall2_scaler) * cos_OffsetAngle) - ((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * sin_OffsetAngle)) * (PID_Pitch_y * 1))   \
 8004c3c:	4b7f      	ldr	r3, [pc, #508]	; (8004e3c <_Z20updateMainMotorSpeedv+0x2c4>)
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fc f883 	bl	8000d4c <__aeabi_ui2f>
 8004c46:	4603      	mov	r3, r0
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fb fc29 	bl	80004a0 <__aeabi_f2d>
 8004c4e:	a372      	add	r3, pc, #456	; (adr r3, 8004e18 <_Z20updateMainMotorSpeedv+0x2a0>)
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f7fb fac4 	bl	80001e0 <__aeabi_dsub>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8004c64:	4b78      	ldr	r3, [pc, #480]	; (8004e48 <_Z20updateMainMotorSpeedv+0x2d0>)
 8004c66:	f7fb fc73 	bl	8000550 <__aeabi_dmul>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4690      	mov	r8, r2
 8004c70:	4699      	mov	r9, r3
 8004c72:	4b76      	ldr	r3, [pc, #472]	; (8004e4c <_Z20updateMainMotorSpeedv+0x2d4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fb fc12 	bl	80004a0 <__aeabi_f2d>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4640      	mov	r0, r8
 8004c82:	4649      	mov	r1, r9
 8004c84:	f7fb fc64 	bl	8000550 <__aeabi_dmul>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4690      	mov	r8, r2
 8004c8e:	4699      	mov	r9, r3
 8004c90:	4b69      	ldr	r3, [pc, #420]	; (8004e38 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fc f859 	bl	8000d4c <__aeabi_ui2f>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fb fbff 	bl	80004a0 <__aeabi_f2d>
 8004ca2:	a35f      	add	r3, pc, #380	; (adr r3, 8004e20 <_Z20updateMainMotorSpeedv+0x2a8>)
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	f7fb fa9a 	bl	80001e0 <__aeabi_dsub>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	a35c      	add	r3, pc, #368	; (adr r3, 8004e28 <_Z20updateMainMotorSpeedv+0x2b0>)
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f7fb fc49 	bl	8000550 <__aeabi_dmul>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4692      	mov	sl, r2
 8004cc4:	469b      	mov	fp, r3
 8004cc6:	4b62      	ldr	r3, [pc, #392]	; (8004e50 <_Z20updateMainMotorSpeedv+0x2d8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fb fbe8 	bl	80004a0 <__aeabi_f2d>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4650      	mov	r0, sl
 8004cd6:	4659      	mov	r1, fp
 8004cd8:	f7fb fc3a 	bl	8000550 <__aeabi_dmul>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4640      	mov	r0, r8
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	f7fb fa7c 	bl	80001e0 <__aeabi_dsub>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4690      	mov	r8, r2
 8004cee:	4699      	mov	r9, r3
 8004cf0:	4b58      	ldr	r3, [pc, #352]	; (8004e54 <_Z20updateMainMotorSpeedv+0x2dc>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fb fbd3 	bl	80004a0 <__aeabi_f2d>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4640      	mov	r0, r8
 8004d00:	4649      	mov	r1, r9
 8004d02:	f7fb fc25 	bl	8000550 <__aeabi_dmul>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	f7fb fa69 	bl	80001e4 <__adddf3>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4614      	mov	r4, r2
 8004d18:	461d      	mov	r5, r3
    + ((((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * cos_OffsetAngle) + ((((float)adcValueChannel12 - hall2_center) * hall2_scaler) * sin_OffsetAngle)) * (PID_Roll_y  * 1))   \
 8004d1a:	4b47      	ldr	r3, [pc, #284]	; (8004e38 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fc f814 	bl	8000d4c <__aeabi_ui2f>
 8004d24:	4603      	mov	r3, r0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fb fbba 	bl	80004a0 <__aeabi_f2d>
 8004d2c:	a33c      	add	r3, pc, #240	; (adr r3, 8004e20 <_Z20updateMainMotorSpeedv+0x2a8>)
 8004d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d32:	f7fb fa55 	bl	80001e0 <__aeabi_dsub>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	a33a      	add	r3, pc, #232	; (adr r3, 8004e28 <_Z20updateMainMotorSpeedv+0x2b0>)
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	f7fb fc04 	bl	8000550 <__aeabi_dmul>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4690      	mov	r8, r2
 8004d4e:	4699      	mov	r9, r3
 8004d50:	4b3e      	ldr	r3, [pc, #248]	; (8004e4c <_Z20updateMainMotorSpeedv+0x2d4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fb fba3 	bl	80004a0 <__aeabi_f2d>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4640      	mov	r0, r8
 8004d60:	4649      	mov	r1, r9
 8004d62:	f7fb fbf5 	bl	8000550 <__aeabi_dmul>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4690      	mov	r8, r2
 8004d6c:	4699      	mov	r9, r3
 8004d6e:	4b33      	ldr	r3, [pc, #204]	; (8004e3c <_Z20updateMainMotorSpeedv+0x2c4>)
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fb ffea 	bl	8000d4c <__aeabi_ui2f>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fb fb90 	bl	80004a0 <__aeabi_f2d>
 8004d80:	a325      	add	r3, pc, #148	; (adr r3, 8004e18 <_Z20updateMainMotorSpeedv+0x2a0>)
 8004d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d86:	f7fb fa2b 	bl	80001e0 <__aeabi_dsub>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4610      	mov	r0, r2
 8004d90:	4619      	mov	r1, r3
 8004d92:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8004d96:	4b2c      	ldr	r3, [pc, #176]	; (8004e48 <_Z20updateMainMotorSpeedv+0x2d0>)
 8004d98:	f7fb fbda 	bl	8000550 <__aeabi_dmul>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4692      	mov	sl, r2
 8004da2:	469b      	mov	fp, r3
 8004da4:	4b2a      	ldr	r3, [pc, #168]	; (8004e50 <_Z20updateMainMotorSpeedv+0x2d8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fb fb79 	bl	80004a0 <__aeabi_f2d>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4650      	mov	r0, sl
 8004db4:	4659      	mov	r1, fp
 8004db6:	f7fb fbcb 	bl	8000550 <__aeabi_dmul>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	f7fb fa0f 	bl	80001e4 <__adddf3>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4690      	mov	r8, r2
 8004dcc:	4699      	mov	r9, r3
 8004dce:	4b22      	ldr	r3, [pc, #136]	; (8004e58 <_Z20updateMainMotorSpeedv+0x2e0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fb fb64 	bl	80004a0 <__aeabi_f2d>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4640      	mov	r0, r8
 8004dde:	4649      	mov	r1, r9
 8004de0:	f7fb fbb6 	bl	8000550 <__aeabi_dmul>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4620      	mov	r0, r4
 8004dea:	4629      	mov	r1, r5
 8004dec:	f7fb f9fa 	bl	80001e4 <__adddf3>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
    TIM4->CCR1 = (uint16_t)(                                                                                                                                                      \
 8004df4:	4610      	mov	r0, r2
 8004df6:	4619      	mov	r1, r3
 8004df8:	f7fb fe82 	bl	8000b00 <__aeabi_d2uiz>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	4b16      	ldr	r3, [pc, #88]	; (8004e5c <_Z20updateMainMotorSpeedv+0x2e4>)
 8004e02:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    TIM4->CCR1 = fastPPM_MinTime;
  }
}
 8004e04:	e003      	b.n	8004e0e <_Z20updateMainMotorSpeedv+0x296>
    TIM4->CCR1 = fastPPM_MinTime;
 8004e06:	4b15      	ldr	r3, [pc, #84]	; (8004e5c <_Z20updateMainMotorSpeedv+0x2e4>)
 8004e08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e0c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004e0e:	bf00      	nop
 8004e10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e14:	f3af 8000 	nop.w
 8004e18:	00000000 	.word	0x00000000
 8004e1c:	4093b000 	.word	0x4093b000
 8004e20:	00000000 	.word	0x00000000
 8004e24:	4093c400 	.word	0x4093c400
 8004e28:	6d92aca5 	.word	0x6d92aca5
 8004e2c:	3f4fa8ef 	.word	0x3f4fa8ef
 8004e30:	40012000 	.word	0x40012000
 8004e34:	2000066c 	.word	0x2000066c
 8004e38:	200007e0 	.word	0x200007e0
 8004e3c:	200007e2 	.word	0x200007e2
 8004e40:	20000654 	.word	0x20000654
 8004e44:	44bb8000 	.word	0x44bb8000
 8004e48:	3f501010 	.word	0x3f501010
 8004e4c:	200007ec 	.word	0x200007ec
 8004e50:	200007e8 	.word	0x200007e8
 8004e54:	2000051c 	.word	0x2000051c
 8004e58:	20000520 	.word	0x20000520
 8004e5c:	40000800 	.word	0x40000800

08004e60 <_Z20updateTailMotorSpeedv>:
 * If the throttle is above a given deadzone the motor speed is YAW Y value
 * 
 * --Custom Method!
 */
void updateTailMotorSpeed()
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  if (SBUS_Channels[2] > motorDeadzone)
 8004e64:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <_Z20updateTailMotorSpeedv+0x58>)
 8004e66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004e6a:	f46f 726d 	mvn.w	r2, #948	; 0x3b4
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	db0e      	blt.n	8004e90 <_Z20updateTailMotorSpeedv+0x30>
  {
    TIM3->CCR1 = (uint16_t)(slowPPM1_MinTime + PID_Yaw_y);
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <_Z20updateTailMotorSpeedv+0x5c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4912      	ldr	r1, [pc, #72]	; (8004ec0 <_Z20updateTailMotorSpeedv+0x60>)
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fb feb7 	bl	8000bec <__addsf3>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fc f9bd 	bl	8001200 <__aeabi_f2uiz>
 8004e86:	4603      	mov	r3, r0
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <_Z20updateTailMotorSpeedv+0x64>)
 8004e8c:	635a      	str	r2, [r3, #52]	; 0x34
    Pitch_I_Sum = 0;
    Roll_I_Sum  = 0;
    Yaw_I_Sum   = 0;
    reset_WQuaternion();
  }
}
 8004e8e:	e011      	b.n	8004eb4 <_Z20updateTailMotorSpeedv+0x54>
    TIM3->CCR1 = slowPPM1_MinTime;
 8004e90:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <_Z20updateTailMotorSpeedv+0x64>)
 8004e92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e96:	635a      	str	r2, [r3, #52]	; 0x34
    Pitch_I_Sum = 0;
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <_Z20updateTailMotorSpeedv+0x68>)
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
    Roll_I_Sum  = 0;
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <_Z20updateTailMotorSpeedv+0x6c>)
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
    Yaw_I_Sum   = 0;
 8004ea8:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <_Z20updateTailMotorSpeedv+0x70>)
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
    reset_WQuaternion();
 8004eb0:	f7fe fd22 	bl	80038f8 <_Z17reset_WQuaternionv>
}
 8004eb4:	bf00      	nop
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20000654 	.word	0x20000654
 8004ebc:	20000524 	.word	0x20000524
 8004ec0:	447a0000 	.word	0x447a0000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	2000054c 	.word	0x2000054c
 8004ecc:	20000550 	.word	0x20000550
 8004ed0:	20000554 	.word	0x20000554

08004ed4 <_Z8PPM_initv>:
 * @brief Initializes TIM 3 and 4 used for generating the PPM signals
 * 
 * --Custom Method!
 */
void PPM_init()
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim3);
 8004ed8:	4803      	ldr	r0, [pc, #12]	; (8004ee8 <_Z8PPM_initv+0x14>)
 8004eda:	f004 fc5d 	bl	8009798 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8004ede:	4803      	ldr	r0, [pc, #12]	; (8004eec <_Z8PPM_initv+0x18>)
 8004ee0:	f004 fc5a 	bl	8009798 <HAL_TIM_Base_Start_IT>
}
 8004ee4:	bf00      	nop
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20000708 	.word	0x20000708
 8004eec:	20000750 	.word	0x20000750

08004ef0 <_Z14ESCCalibrationv>:
 * If BT1 is not pressed, it gives the ESCs x time to initialize
 * 
 * --Custom Method!
 */
void ESCCalibration()
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == true)
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	486d      	ldr	r0, [pc, #436]	; (80050b0 <_Z14ESCCalibrationv+0x1c0>)
 8004efa:	f001 fdb5 	bl	8006a68 <HAL_GPIO_ReadPin>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	bf0c      	ite	eq
 8004f04:	2301      	moveq	r3, #1
 8004f06:	2300      	movne	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 80b8 	beq.w	8005080 <_Z14ESCCalibrationv+0x190>
  {
    uint16_t counter = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);   //NOTDONE debug
 8004f14:	2120      	movs	r1, #32
 8004f16:	4866      	ldr	r0, [pc, #408]	; (80050b0 <_Z14ESCCalibrationv+0x1c0>)
 8004f18:	f001 fdd5 	bl	8006ac6 <HAL_GPIO_TogglePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);                                                                             //start PPM for tail motor
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	4865      	ldr	r0, [pc, #404]	; (80050b4 <_Z14ESCCalibrationv+0x1c4>)
 8004f20:	f004 fcf8 	bl	8009914 <HAL_TIM_PWM_Start>
    uint16_t oldTime = TIM11->CNT;
 8004f24:	4b64      	ldr	r3, [pc, #400]	; (80050b8 <_Z14ESCCalibrationv+0x1c8>)
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	80bb      	strh	r3, [r7, #4]

    //main-motor
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4860      	ldr	r0, [pc, #384]	; (80050b0 <_Z14ESCCalibrationv+0x1c0>)
 8004f2e:	f001 fd9b 	bl	8006a68 <HAL_GPIO_ReadPin>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004f44:	428b      	cmp	r3, r1
 8004f46:	bf94      	ite	ls
 8004f48:	2301      	movls	r3, #1
 8004f4a:	2300      	movhi	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	bf14      	ite	ne
 8004f56:	2301      	movne	r3, #1
 8004f58:	2300      	moveq	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d033      	beq.n	8004fc8 <_Z14ESCCalibrationv+0xd8>
    {
      if (SBUSNewPackage == true) SBUS_postProcessing();                                                                  //process new packets
 8004f60:	4b56      	ldr	r3, [pc, #344]	; (80050bc <_Z14ESCCalibrationv+0x1cc>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <_Z14ESCCalibrationv+0x7c>
 8004f68:	f7ff fa0c 	bl	8004384 <_Z19SBUS_postProcessingv>
      TIM3->CCR1 = (uint16_t)(slowPPM1_CenterTime + (SBUS_Channels[2] * PPMtailMotorScaler));                             //update motor speed
 8004f6c:	4b54      	ldr	r3, [pc, #336]	; (80050c0 <_Z14ESCCalibrationv+0x1d0>)
 8004f6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fb feee 	bl	8000d54 <__aeabi_i2f>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fb ff3c 	bl	8000dfc <__aeabi_fmul>
 8004f84:	4603      	mov	r3, r0
 8004f86:	494f      	ldr	r1, [pc, #316]	; (80050c4 <_Z14ESCCalibrationv+0x1d4>)
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fb fe2f 	bl	8000bec <__addsf3>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fc f935 	bl	8001200 <__aeabi_f2uiz>
 8004f96:	4603      	mov	r3, r0
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	4b4b      	ldr	r3, [pc, #300]	; (80050c8 <_Z14ESCCalibrationv+0x1d8>)
 8004f9c:	635a      	str	r2, [r3, #52]	; 0x34
      while ((TIM11->CNT - oldTime) < 10000);                                                                             //wait for 10 milliseconds to pass
 8004f9e:	4b46      	ldr	r3, [pc, #280]	; (80050b8 <_Z14ESCCalibrationv+0x1c8>)
 8004fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fa2:	88bb      	ldrh	r3, [r7, #4]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f242 720f 	movw	r2, #9999	; 0x270f
 8004faa:	4293      	cmp	r3, r2
 8004fac:	bf94      	ite	ls
 8004fae:	2301      	movls	r3, #1
 8004fb0:	2300      	movhi	r3, #0
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d000      	beq.n	8004fba <_Z14ESCCalibrationv+0xca>
 8004fb8:	e7f1      	b.n	8004f9e <_Z14ESCCalibrationv+0xae>
      oldTime = TIM11->CNT;
 8004fba:	4b3f      	ldr	r3, [pc, #252]	; (80050b8 <_Z14ESCCalibrationv+0x1c8>)
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	80bb      	strh	r3, [r7, #4]
      counter += 10;
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	330a      	adds	r3, #10
 8004fc4:	80fb      	strh	r3, [r7, #6]
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 8004fc6:	e7b0      	b.n	8004f2a <_Z14ESCCalibrationv+0x3a>
    }

    counter = 0;                                                                                                          //reset counter
 8004fc8:	2300      	movs	r3, #0
 8004fca:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_TogglePin(ONBOARD_LED_3_GPIO_Port, ONBOARD_LED_3_Pin);   //NOTDONE debug
 8004fcc:	2140      	movs	r1, #64	; 0x40
 8004fce:	4838      	ldr	r0, [pc, #224]	; (80050b0 <_Z14ESCCalibrationv+0x1c0>)
 8004fd0:	f001 fd79 	bl	8006ac6 <HAL_GPIO_TogglePin>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);                                                                             //start PPM for main motor
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	483d      	ldr	r0, [pc, #244]	; (80050cc <_Z14ESCCalibrationv+0x1dc>)
 8004fd8:	f004 fc9c 	bl	8009914 <HAL_TIM_PWM_Start>
    oldTime = TIM11->CNT;
 8004fdc:	4b36      	ldr	r3, [pc, #216]	; (80050b8 <_Z14ESCCalibrationv+0x1c8>)
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	80bb      	strh	r3, [r7, #4]

    //tail-motor
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	4832      	ldr	r0, [pc, #200]	; (80050b0 <_Z14ESCCalibrationv+0x1c0>)
 8004fe6:	f001 fd3f 	bl	8006a68 <HAL_GPIO_ReadPin>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bf0c      	ite	eq
 8004ff0:	2301      	moveq	r3, #1
 8004ff2:	2300      	movne	r3, #0
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	88fb      	ldrh	r3, [r7, #6]
 8004ff8:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004ffc:	428b      	cmp	r3, r1
 8004ffe:	bf94      	ite	ls
 8005000:	2301      	movls	r3, #1
 8005002:	2300      	movhi	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	4313      	orrs	r3, r2
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	bf14      	ite	ne
 800500e:	2301      	movne	r3, #1
 8005010:	2300      	moveq	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d047      	beq.n	80050a8 <_Z14ESCCalibrationv+0x1b8>
    {
      if (SBUSNewPackage == true) SBUS_postProcessing();                                                                  //process new packets
 8005018:	4b28      	ldr	r3, [pc, #160]	; (80050bc <_Z14ESCCalibrationv+0x1cc>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <_Z14ESCCalibrationv+0x134>
 8005020:	f7ff f9b0 	bl	8004384 <_Z19SBUS_postProcessingv>
      TIM4->CCR1 = (uint16_t)(fastPPM_CenterTime + (SBUS_Channels[2] * PPMmainMotorScaler));                              //update motor speed
 8005024:	4b26      	ldr	r3, [pc, #152]	; (80050c0 <_Z14ESCCalibrationv+0x1d0>)
 8005026:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800502a:	4618      	mov	r0, r3
 800502c:	f7fb fe92 	bl	8000d54 <__aeabi_i2f>
 8005030:	4603      	mov	r3, r0
 8005032:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005036:	4618      	mov	r0, r3
 8005038:	f7fb fee0 	bl	8000dfc <__aeabi_fmul>
 800503c:	4603      	mov	r3, r0
 800503e:	4921      	ldr	r1, [pc, #132]	; (80050c4 <_Z14ESCCalibrationv+0x1d4>)
 8005040:	4618      	mov	r0, r3
 8005042:	f7fb fdd3 	bl	8000bec <__addsf3>
 8005046:	4603      	mov	r3, r0
 8005048:	4618      	mov	r0, r3
 800504a:	f7fc f8d9 	bl	8001200 <__aeabi_f2uiz>
 800504e:	4603      	mov	r3, r0
 8005050:	b29a      	uxth	r2, r3
 8005052:	4b1f      	ldr	r3, [pc, #124]	; (80050d0 <_Z14ESCCalibrationv+0x1e0>)
 8005054:	635a      	str	r2, [r3, #52]	; 0x34
      while ((TIM11->CNT - oldTime) < 10000);                                                                             //wait for 10 milliseconds to pass
 8005056:	4b18      	ldr	r3, [pc, #96]	; (80050b8 <_Z14ESCCalibrationv+0x1c8>)
 8005058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800505a:	88bb      	ldrh	r3, [r7, #4]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f242 720f 	movw	r2, #9999	; 0x270f
 8005062:	4293      	cmp	r3, r2
 8005064:	bf94      	ite	ls
 8005066:	2301      	movls	r3, #1
 8005068:	2300      	movhi	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d000      	beq.n	8005072 <_Z14ESCCalibrationv+0x182>
 8005070:	e7f1      	b.n	8005056 <_Z14ESCCalibrationv+0x166>
      oldTime = TIM11->CNT;
 8005072:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <_Z14ESCCalibrationv+0x1c8>)
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	80bb      	strh	r3, [r7, #4]
      counter += 10;
 8005078:	88fb      	ldrh	r3, [r7, #6]
 800507a:	330a      	adds	r3, #10
 800507c:	80fb      	strh	r3, [r7, #6]
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 800507e:	e7b0      	b.n	8004fe2 <_Z14ESCCalibrationv+0xf2>
    }
  }
  else
  {
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);                                                                             //start PPM for tail motor
 8005080:	2100      	movs	r1, #0
 8005082:	480c      	ldr	r0, [pc, #48]	; (80050b4 <_Z14ESCCalibrationv+0x1c4>)
 8005084:	f004 fc46 	bl	8009914 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);                                                                             //start PPM for main motor
 8005088:	2100      	movs	r1, #0
 800508a:	4810      	ldr	r0, [pc, #64]	; (80050cc <_Z14ESCCalibrationv+0x1dc>)
 800508c:	f004 fc42 	bl	8009914 <HAL_TIM_PWM_Start>

    TIM3->CCR1 = slowPPM1_MinTime;                                                                                        //set to 0%
 8005090:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <_Z14ESCCalibrationv+0x1d8>)
 8005092:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005096:	635a      	str	r2, [r3, #52]	; 0x34
    TIM4->CCR1 = fastPPM_MinTime;                                                                                         //set to 0%
 8005098:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <_Z14ESCCalibrationv+0x1e0>)
 800509a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800509e:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(ESC_StartupDelay);
 80050a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050a4:	f000 fec4 	bl	8005e30 <HAL_Delay>
  }
 80050a8:	bf00      	nop
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40020000 	.word	0x40020000
 80050b4:	20000708 	.word	0x20000708
 80050b8:	40014800 	.word	0x40014800
 80050bc:	20000664 	.word	0x20000664
 80050c0:	20000654 	.word	0x20000654
 80050c4:	44bb8000 	.word	0x44bb8000
 80050c8:	40000400 	.word	0x40000400
 80050cc:	20000750 	.word	0x20000750
 80050d0:	40000800 	.word	0x40000800
 80050d4:	00000000 	.word	0x00000000

080050d8 <_Z41__static_initialization_and_destruction_0ii>:
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d14a      	bne.n	800517e <_Z41__static_initialization_and_destruction_0ii+0xa6>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d145      	bne.n	800517e <_Z41__static_initialization_and_destruction_0ii+0xa6>
float sin_OffsetAngle = sin(((float)mainMotorAngleOffset * 180) / M_PI);
 80050f2:	4b27      	ldr	r3, [pc, #156]	; (8005190 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80050f4:	f993 3000 	ldrsb.w	r3, [r3]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fb fe2b 	bl	8000d54 <__aeabi_i2f>
 80050fe:	4603      	mov	r3, r0
 8005100:	4924      	ldr	r1, [pc, #144]	; (8005194 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005102:	4618      	mov	r0, r3
 8005104:	f7fb fe7a 	bl	8000dfc <__aeabi_fmul>
 8005108:	4603      	mov	r3, r0
 800510a:	4618      	mov	r0, r3
 800510c:	f7fb f9c8 	bl	80004a0 <__aeabi_f2d>
 8005110:	a31d      	add	r3, pc, #116	; (adr r3, 8005188 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8005112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005116:	f7fb fb45 	bl	80007a4 <__aeabi_ddiv>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4610      	mov	r0, r2
 8005120:	4619      	mov	r1, r3
 8005122:	f008 fcad 	bl	800da80 <sin>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4610      	mov	r0, r2
 800512c:	4619      	mov	r1, r3
 800512e:	f7fb fd07 	bl	8000b40 <__aeabi_d2f>
 8005132:	4603      	mov	r3, r0
 8005134:	4a18      	ldr	r2, [pc, #96]	; (8005198 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8005136:	6013      	str	r3, [r2, #0]
float cos_OffsetAngle = cos(((float)mainMotorAngleOffset * 180) / M_PI);
 8005138:	4b15      	ldr	r3, [pc, #84]	; (8005190 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800513a:	f993 3000 	ldrsb.w	r3, [r3]
 800513e:	4618      	mov	r0, r3
 8005140:	f7fb fe08 	bl	8000d54 <__aeabi_i2f>
 8005144:	4603      	mov	r3, r0
 8005146:	4913      	ldr	r1, [pc, #76]	; (8005194 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005148:	4618      	mov	r0, r3
 800514a:	f7fb fe57 	bl	8000dfc <__aeabi_fmul>
 800514e:	4603      	mov	r3, r0
 8005150:	4618      	mov	r0, r3
 8005152:	f7fb f9a5 	bl	80004a0 <__aeabi_f2d>
 8005156:	a30c      	add	r3, pc, #48	; (adr r3, 8005188 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f7fb fb22 	bl	80007a4 <__aeabi_ddiv>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4610      	mov	r0, r2
 8005166:	4619      	mov	r1, r3
 8005168:	f008 fc48 	bl	800d9fc <cos>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4610      	mov	r0, r2
 8005172:	4619      	mov	r1, r3
 8005174:	f7fb fce4 	bl	8000b40 <__aeabi_d2f>
 8005178:	4603      	mov	r3, r0
 800517a:	4a08      	ldr	r2, [pc, #32]	; (800519c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	bf00      	nop
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	54442d18 	.word	0x54442d18
 800518c:	400921fb 	.word	0x400921fb
 8005190:	200007e4 	.word	0x200007e4
 8005194:	43340000 	.word	0x43340000
 8005198:	200007e8 	.word	0x200007e8
 800519c:	200007ec 	.word	0x200007ec

080051a0 <_GLOBAL__sub_I_adcValueChannel11>:
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80051a8:	2001      	movs	r0, #1
 80051aa:	f7ff ff95 	bl	80050d8 <_Z41__static_initialization_and_destruction_0ii>
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <_Z4loopv>:
#include "PID.h"

uint8_t task;

void loop()
{
 80051b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b4:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 80051b8:	af2c      	add	r7, sp, #176	; 0xb0
  if (TIM4->CNT >= (fastPPM_Pulselength - fastPPM_calcutationTime))
 80051ba:	4b2e      	ldr	r3, [pc, #184]	; (8005274 <_Z4loopv+0xc4>)
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	f640 1287 	movw	r2, #2439	; 0x987
 80051c2:	4293      	cmp	r3, r2
 80051c4:	bf8c      	ite	hi
 80051c6:	2301      	movhi	r3, #1
 80051c8:	2300      	movls	r3, #0
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8311 	beq.w	80057f4 <_Z4loopv+0x644>
  {
    switch (task)                       //disable the SBUS pin interrupt for the selected tasks
 80051d2:	4b29      	ldr	r3, [pc, #164]	; (8005278 <_Z4loopv+0xc8>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b05      	cmp	r3, #5
 80051d8:	d103      	bne.n	80051e2 <_Z4loopv+0x32>
    {
    case 5:
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80051da:	2006      	movs	r0, #6
 80051dc:	f001 fa8b 	bl	80066f6 <HAL_NVIC_DisableIRQ>
      break;
 80051e0:	e000      	b.n	80051e4 <_Z4loopv+0x34>
    default:
      break;
 80051e2:	bf00      	nop
    }
    updateMainMotorSpeed();
 80051e4:	f7ff fcc8 	bl	8004b78 <_Z20updateMainMotorSpeedv>
    //PPM only updates the next cycle
    switch (task)                       //execute the selected task
 80051e8:	4b23      	ldr	r3, [pc, #140]	; (8005278 <_Z4loopv+0xc8>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	3b01      	subs	r3, #1
 80051ee:	2b09      	cmp	r3, #9
 80051f0:	f200 82df 	bhi.w	80057b2 <_Z4loopv+0x602>
 80051f4:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <_Z4loopv+0x4c>)
 80051f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fa:	bf00      	nop
 80051fc:	08005225 	.word	0x08005225
 8005200:	08005239 	.word	0x08005239
 8005204:	080057b3 	.word	0x080057b3
 8005208:	080057b3 	.word	0x080057b3
 800520c:	080057b3 	.word	0x080057b3
 8005210:	080057b3 	.word	0x080057b3
 8005214:	080057b3 	.word	0x080057b3
 8005218:	080057b3 	.word	0x080057b3
 800521c:	0800526d 	.word	0x0800526d
 8005220:	08005285 	.word	0x08005285
    {
    case 1:
      MPU6050_WaitForQuaternionSet();   //500 us if given 5000 us after FIFO reset
 8005224:	f7fc fcf4 	bl	8001c10 <_Z28MPU6050_WaitForQuaternionSetv>
      MPU6050_ConvertToQuaternions();   //650 us
 8005228:	f7fc fd0e 	bl	8001c48 <_Z28MPU6050_ConvertToQuaternionsv>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800522c:	2006      	movs	r0, #6
 800522e:	f001 fa54 	bl	80066da <HAL_NVIC_EnableIRQ>
      get_XW_diffAngles();    //1100 us
 8005232:	f7fe fa89 	bl	8003748 <_Z17get_XW_diffAnglesv>
      break;
 8005236:	e2bf      	b.n	80057b8 <_Z4loopv+0x608>
    case 2:
      update_PID(); 	  //140 us
 8005238:	f7fe fba4 	bl	8003984 <_Z10update_PIDv>
      updateTailMotorSpeed();   //8 us
 800523c:	f7ff fe10 	bl	8004e60 <_Z20updateTailMotorSpeedv>
      update_FrameOriginQuaternion();   //600 us
 8005240:	f7fc fdac 	bl	8001d9c <_Z28update_FrameOriginQuaternionv>
      if (SBUSNewPackage == true) SBUS_postProcessing();    //800 us
 8005244:	4b0d      	ldr	r3, [pc, #52]	; (800527c <_Z4loopv+0xcc>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <_Z4loopv+0xa0>
 800524c:	f7ff f89a 	bl	8004384 <_Z19SBUS_postProcessingv>
      if (SBUS_Channels[4] >= 990)  //if the set-PID-switch on the remote is on, read the values
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <_Z4loopv+0xd0>)
 8005252:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005256:	f240 32dd 	movw	r2, #989	; 0x3dd
 800525a:	4293      	cmp	r3, r2
 800525c:	dd03      	ble.n	8005266 <_Z4loopv+0xb6>
      {
        getPIDValues();   //30 us
 800525e:	f7fe fd55 	bl	8003d0c <_Z12getPIDValuesv>
        getAngleOffset();   //450us
 8005262:	f7fe ff3d 	bl	80040e0 <_Z14getAngleOffsetv>
      }
      switchTuningMode();   //12 us
 8005266:	f7fe ffb9 	bl	80041dc <_Z16switchTuningModev>
      break;
 800526a:	e2a5      	b.n	80057b8 <_Z4loopv+0x608>
    case 9:
      MPU6050_resetFIFO();    //300 us
 800526c:	f7fc fcc6 	bl	8001bfc <_Z17MPU6050_resetFIFOv>
      break;
 8005270:	e2a2      	b.n	80057b8 <_Z4loopv+0x608>
 8005272:	bf00      	nop
 8005274:	40000800 	.word	0x40000800
 8005278:	200007f0 	.word	0x200007f0
 800527c:	20000664 	.word	0x20000664
 8005280:	20000654 	.word	0x20000654
    case 10:
      task = 0;                 //reset to task 1  (keep in mind task ++; below)
 8005284:	4bb0      	ldr	r3, [pc, #704]	; (8005548 <_Z4loopv+0x398>)
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]

      if (SBUS_Channels[2] <= motorDeadzone)
 800528a:	4bb0      	ldr	r3, [pc, #704]	; (800554c <_Z4loopv+0x39c>)
 800528c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005290:	f46f 726d 	mvn.w	r2, #948	; 0x3b4
 8005294:	4293      	cmp	r3, r2
 8005296:	f280 828e 	bge.w	80057b6 <_Z4loopv+0x606>
      {
        for (size_t i = 0; i < 1; i++)
 800529a:	2300      	movs	r3, #0
 800529c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80052a0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f040 8286 	bne.w	80057b6 <_Z4loopv+0x606>
	        for (size_t i = 0; i < x; i++)
	        {
	        	msgTransmit[i] = msg[i];
	        }
	        CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
        }
 80052aa:	466b      	mov	r3, sp
 80052ac:	607b      	str	r3, [r7, #4]
          , LoopXWQuaternion[0]                                                                                                                                                                      \
 80052ae:	4ba8      	ldr	r3, [pc, #672]	; (8005550 <_Z4loopv+0x3a0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fb f8f4 	bl	80004a0 <__aeabi_f2d>
 80052b8:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
          , LoopXWQuaternion[1]                                                                                                                                                                      \
 80052bc:	4ba4      	ldr	r3, [pc, #656]	; (8005550 <_Z4loopv+0x3a0>)
 80052be:	685b      	ldr	r3, [r3, #4]
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fb f8ed 	bl	80004a0 <__aeabi_f2d>
 80052c6:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
          , LoopXWQuaternion[2]                                                                                                                                                                      \
 80052ca:	4ba1      	ldr	r3, [pc, #644]	; (8005550 <_Z4loopv+0x3a0>)
 80052cc:	689b      	ldr	r3, [r3, #8]
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fb f8e6 	bl	80004a0 <__aeabi_f2d>
 80052d4:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
          , LoopXWQuaternion[3]                                                                                                                                                                      \
 80052d8:	4b9d      	ldr	r3, [pc, #628]	; (8005550 <_Z4loopv+0x3a0>)
 80052da:	68db      	ldr	r3, [r3, #12]
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fb f8df 	bl	80004a0 <__aeabi_f2d>
 80052e2:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
 80052e6:	4b9b      	ldr	r3, [pc, #620]	; (8005554 <_Z4loopv+0x3a4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fb f8d8 	bl	80004a0 <__aeabi_f2d>
 80052f0:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
 80052f4:	4b98      	ldr	r3, [pc, #608]	; (8005558 <_Z4loopv+0x3a8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7fb f8d1 	bl	80004a0 <__aeabi_f2d>
 80052fe:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
 8005302:	4b96      	ldr	r3, [pc, #600]	; (800555c <_Z4loopv+0x3ac>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f7fb f8ca 	bl	80004a0 <__aeabi_f2d>
 800530c:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
 8005310:	4b93      	ldr	r3, [pc, #588]	; (8005560 <_Z4loopv+0x3b0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4618      	mov	r0, r3
 8005316:	f7fb f8c3 	bl	80004a0 <__aeabi_f2d>
 800531a:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 800531e:	4b91      	ldr	r3, [pc, #580]	; (8005564 <_Z4loopv+0x3b4>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fb f8bc 	bl	80004a0 <__aeabi_f2d>
 8005328:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 800532c:	4b8e      	ldr	r3, [pc, #568]	; (8005568 <_Z4loopv+0x3b8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	f7fb f8b5 	bl	80004a0 <__aeabi_f2d>
 8005336:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
          , Pitch_PID_k[0] * 100                                                                                                                                                                     \
 800533a:	4b8c      	ldr	r3, [pc, #560]	; (800556c <_Z4loopv+0x3bc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	498c      	ldr	r1, [pc, #560]	; (8005570 <_Z4loopv+0x3c0>)
 8005340:	4618      	mov	r0, r3
 8005342:	f7fb fd5b 	bl	8000dfc <__aeabi_fmul>
 8005346:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 8005348:	4618      	mov	r0, r3
 800534a:	f7fb f8a9 	bl	80004a0 <__aeabi_f2d>
 800534e:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
          , Pitch_PID_k[1] * 100                                                                                                                                                                     \
 8005352:	4b86      	ldr	r3, [pc, #536]	; (800556c <_Z4loopv+0x3bc>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	4986      	ldr	r1, [pc, #536]	; (8005570 <_Z4loopv+0x3c0>)
 8005358:	4618      	mov	r0, r3
 800535a:	f7fb fd4f 	bl	8000dfc <__aeabi_fmul>
 800535e:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 8005360:	4618      	mov	r0, r3
 8005362:	f7fb f89d 	bl	80004a0 <__aeabi_f2d>
 8005366:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
          , Pitch_PID_k[2] * 100                                                                                                                                                                     \
 800536a:	4b80      	ldr	r3, [pc, #512]	; (800556c <_Z4loopv+0x3bc>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	4980      	ldr	r1, [pc, #512]	; (8005570 <_Z4loopv+0x3c0>)
 8005370:	4618      	mov	r0, r3
 8005372:	f7fb fd43 	bl	8000dfc <__aeabi_fmul>
 8005376:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 8005378:	4618      	mov	r0, r3
 800537a:	f7fb f891 	bl	80004a0 <__aeabi_f2d>
 800537e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
          , Roll_PID_k[0] * 100                                                                                                                                                                      \
 8005382:	4b7c      	ldr	r3, [pc, #496]	; (8005574 <_Z4loopv+0x3c4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	497a      	ldr	r1, [pc, #488]	; (8005570 <_Z4loopv+0x3c0>)
 8005388:	4618      	mov	r0, r3
 800538a:	f7fb fd37 	bl	8000dfc <__aeabi_fmul>
 800538e:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 8005390:	4618      	mov	r0, r3
 8005392:	f7fb f885 	bl	80004a0 <__aeabi_f2d>
 8005396:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
          , Roll_PID_k[1] * 100                                                                                                                                                                      \
 800539a:	4b76      	ldr	r3, [pc, #472]	; (8005574 <_Z4loopv+0x3c4>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	4974      	ldr	r1, [pc, #464]	; (8005570 <_Z4loopv+0x3c0>)
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fb fd2b 	bl	8000dfc <__aeabi_fmul>
 80053a6:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fb f879 	bl	80004a0 <__aeabi_f2d>
 80053ae:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
          , Roll_PID_k[2] * 100                                                                                                                                                                      \
 80053b2:	4b70      	ldr	r3, [pc, #448]	; (8005574 <_Z4loopv+0x3c4>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	496e      	ldr	r1, [pc, #440]	; (8005570 <_Z4loopv+0x3c0>)
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fb fd1f 	bl	8000dfc <__aeabi_fmul>
 80053be:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fb f86d 	bl	80004a0 <__aeabi_f2d>
 80053c6:	e9c7 0108 	strd	r0, r1, [r7, #32]
          , Yaw_PID_k[0] * 100                                                                                                                                                                       \
 80053ca:	4b6b      	ldr	r3, [pc, #428]	; (8005578 <_Z4loopv+0x3c8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4968      	ldr	r1, [pc, #416]	; (8005570 <_Z4loopv+0x3c0>)
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fb fd13 	bl	8000dfc <__aeabi_fmul>
 80053d6:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fb f861 	bl	80004a0 <__aeabi_f2d>
 80053de:	e9c7 0106 	strd	r0, r1, [r7, #24]
          , Yaw_PID_k[1] * 100                                                                                                                                                                       \
 80053e2:	4b65      	ldr	r3, [pc, #404]	; (8005578 <_Z4loopv+0x3c8>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	4962      	ldr	r1, [pc, #392]	; (8005570 <_Z4loopv+0x3c0>)
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fb fd07 	bl	8000dfc <__aeabi_fmul>
 80053ee:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fb f855 	bl	80004a0 <__aeabi_f2d>
 80053f6:	e9c7 0104 	strd	r0, r1, [r7, #16]
          , Yaw_PID_k[2] * 100                                                                                                                                                                       \
 80053fa:	4b5f      	ldr	r3, [pc, #380]	; (8005578 <_Z4loopv+0x3c8>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	495c      	ldr	r1, [pc, #368]	; (8005570 <_Z4loopv+0x3c0>)
 8005400:	4618      	mov	r0, r3
 8005402:	f7fb fcfb 	bl	8000dfc <__aeabi_fmul>
 8005406:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 8005408:	4618      	mov	r0, r3
 800540a:	f7fb f849 	bl	80004a0 <__aeabi_f2d>
 800540e:	e9c7 0102 	strd	r0, r1, [r7, #8]
          , ((((((float)adcValueChannel12 - hall2_center) * hall2_scaler) * cos_OffsetAngle) - ((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * sin_OffsetAngle)) * (PID_Pitch_y * 1))  \
 8005412:	4b5a      	ldr	r3, [pc, #360]	; (800557c <_Z4loopv+0x3cc>)
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f7fb fc98 	bl	8000d4c <__aeabi_ui2f>
 800541c:	4603      	mov	r3, r0
 800541e:	4618      	mov	r0, r3
 8005420:	f7fb f83e 	bl	80004a0 <__aeabi_f2d>
 8005424:	a342      	add	r3, pc, #264	; (adr r3, 8005530 <_Z4loopv+0x380>)
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	f7fa fed9 	bl	80001e0 <__aeabi_dsub>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4610      	mov	r0, r2
 8005434:	4619      	mov	r1, r3
 8005436:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800543a:	4b51      	ldr	r3, [pc, #324]	; (8005580 <_Z4loopv+0x3d0>)
 800543c:	f7fb f888 	bl	8000550 <__aeabi_dmul>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4614      	mov	r4, r2
 8005446:	461d      	mov	r5, r3
 8005448:	4b4e      	ldr	r3, [pc, #312]	; (8005584 <_Z4loopv+0x3d4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f7fb f827 	bl	80004a0 <__aeabi_f2d>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4620      	mov	r0, r4
 8005458:	4629      	mov	r1, r5
 800545a:	f7fb f879 	bl	8000550 <__aeabi_dmul>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4690      	mov	r8, r2
 8005464:	4699      	mov	r9, r3
 8005466:	4b48      	ldr	r3, [pc, #288]	; (8005588 <_Z4loopv+0x3d8>)
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fb fc6e 	bl	8000d4c <__aeabi_ui2f>
 8005470:	4603      	mov	r3, r0
 8005472:	4618      	mov	r0, r3
 8005474:	f7fb f814 	bl	80004a0 <__aeabi_f2d>
 8005478:	a32f      	add	r3, pc, #188	; (adr r3, 8005538 <_Z4loopv+0x388>)
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	f7fa feaf 	bl	80001e0 <__aeabi_dsub>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4610      	mov	r0, r2
 8005488:	4619      	mov	r1, r3
 800548a:	a32d      	add	r3, pc, #180	; (adr r3, 8005540 <_Z4loopv+0x390>)
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	f7fb f85e 	bl	8000550 <__aeabi_dmul>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4614      	mov	r4, r2
 800549a:	461d      	mov	r5, r3
 800549c:	4b3b      	ldr	r3, [pc, #236]	; (800558c <_Z4loopv+0x3dc>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fa fffd 	bl	80004a0 <__aeabi_f2d>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4620      	mov	r0, r4
 80054ac:	4629      	mov	r1, r5
 80054ae:	f7fb f84f 	bl	8000550 <__aeabi_dmul>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4640      	mov	r0, r8
 80054b8:	4649      	mov	r1, r9
 80054ba:	f7fa fe91 	bl	80001e0 <__aeabi_dsub>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4614      	mov	r4, r2
 80054c4:	461d      	mov	r5, r3
 80054c6:	4b26      	ldr	r3, [pc, #152]	; (8005560 <_Z4loopv+0x3b0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fa ffe8 	bl	80004a0 <__aeabi_f2d>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 80054d4:	4620      	mov	r0, r4
 80054d6:	4629      	mov	r1, r5
 80054d8:	f7fb f83a 	bl	8000550 <__aeabi_dmul>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4692      	mov	sl, r2
 80054e2:	469b      	mov	fp, r3
          , ((((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * cos_OffsetAngle) + ((((float)adcValueChannel12 - hall2_center) * hall2_scaler) * sin_OffsetAngle)) * (PID_Roll_y  * 1))  \
 80054e4:	4b28      	ldr	r3, [pc, #160]	; (8005588 <_Z4loopv+0x3d8>)
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fb fc2f 	bl	8000d4c <__aeabi_ui2f>
 80054ee:	4603      	mov	r3, r0
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fa ffd5 	bl	80004a0 <__aeabi_f2d>
 80054f6:	a310      	add	r3, pc, #64	; (adr r3, 8005538 <_Z4loopv+0x388>)
 80054f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fc:	f7fa fe70 	bl	80001e0 <__aeabi_dsub>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4610      	mov	r0, r2
 8005506:	4619      	mov	r1, r3
 8005508:	a30d      	add	r3, pc, #52	; (adr r3, 8005540 <_Z4loopv+0x390>)
 800550a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550e:	f7fb f81f 	bl	8000550 <__aeabi_dmul>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	4614      	mov	r4, r2
 8005518:	461d      	mov	r5, r3
 800551a:	4b1a      	ldr	r3, [pc, #104]	; (8005584 <_Z4loopv+0x3d4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f7fa ffbe 	bl	80004a0 <__aeabi_f2d>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4620      	mov	r0, r4
 800552a:	e031      	b.n	8005590 <_Z4loopv+0x3e0>
 800552c:	f3af 8000 	nop.w
 8005530:	00000000 	.word	0x00000000
 8005534:	4093b000 	.word	0x4093b000
 8005538:	00000000 	.word	0x00000000
 800553c:	4093c400 	.word	0x4093c400
 8005540:	6d92aca5 	.word	0x6d92aca5
 8005544:	3f4fa8ef 	.word	0x3f4fa8ef
 8005548:	200007f0 	.word	0x200007f0
 800554c:	20000654 	.word	0x20000654
 8005550:	20000584 	.word	0x20000584
 8005554:	20000510 	.word	0x20000510
 8005558:	20000514 	.word	0x20000514
 800555c:	20000518 	.word	0x20000518
 8005560:	2000051c 	.word	0x2000051c
 8005564:	20000520 	.word	0x20000520
 8005568:	20000524 	.word	0x20000524
 800556c:	20000528 	.word	0x20000528
 8005570:	42c80000 	.word	0x42c80000
 8005574:	20000534 	.word	0x20000534
 8005578:	20000540 	.word	0x20000540
 800557c:	200007e2 	.word	0x200007e2
 8005580:	3f501010 	.word	0x3f501010
 8005584:	200007ec 	.word	0x200007ec
 8005588:	200007e0 	.word	0x200007e0
 800558c:	200007e8 	.word	0x200007e8
 8005590:	4629      	mov	r1, r5
 8005592:	f7fa ffdd 	bl	8000550 <__aeabi_dmul>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4690      	mov	r8, r2
 800559c:	4699      	mov	r9, r3
 800559e:	4b9a      	ldr	r3, [pc, #616]	; (8005808 <_Z4loopv+0x658>)
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fb fbd2 	bl	8000d4c <__aeabi_ui2f>
 80055a8:	4603      	mov	r3, r0
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fa ff78 	bl	80004a0 <__aeabi_f2d>
 80055b0:	a393      	add	r3, pc, #588	; (adr r3, 8005800 <_Z4loopv+0x650>)
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	f7fa fe13 	bl	80001e0 <__aeabi_dsub>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4610      	mov	r0, r2
 80055c0:	4619      	mov	r1, r3
 80055c2:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 80055c6:	4b91      	ldr	r3, [pc, #580]	; (800580c <_Z4loopv+0x65c>)
 80055c8:	f7fa ffc2 	bl	8000550 <__aeabi_dmul>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4614      	mov	r4, r2
 80055d2:	461d      	mov	r5, r3
 80055d4:	4b8e      	ldr	r3, [pc, #568]	; (8005810 <_Z4loopv+0x660>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fa ff61 	bl	80004a0 <__aeabi_f2d>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4620      	mov	r0, r4
 80055e4:	4629      	mov	r1, r5
 80055e6:	f7fa ffb3 	bl	8000550 <__aeabi_dmul>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4640      	mov	r0, r8
 80055f0:	4649      	mov	r1, r9
 80055f2:	f7fa fdf7 	bl	80001e4 <__adddf3>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	4614      	mov	r4, r2
 80055fc:	461d      	mov	r5, r3
 80055fe:	4b85      	ldr	r3, [pc, #532]	; (8005814 <_Z4loopv+0x664>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f7fa ff4c 	bl	80004a0 <__aeabi_f2d>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 800560c:	4620      	mov	r0, r4
 800560e:	4629      	mov	r1, r5
 8005610:	f7fa ff9e 	bl	8000550 <__aeabi_dmul>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4614      	mov	r4, r2
 800561a:	461d      	mov	r5, r3
          , (float)SBUS_Channels[5]                                                                                                                                                                  \
 800561c:	4b7e      	ldr	r3, [pc, #504]	; (8005818 <_Z4loopv+0x668>)
 800561e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005622:	4618      	mov	r0, r3
 8005624:	f7fb fb96 	bl	8000d54 <__aeabi_i2f>
 8005628:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 800562a:	4618      	mov	r0, r3
 800562c:	f7fa ff38 	bl	80004a0 <__aeabi_f2d>
 8005630:	4b7a      	ldr	r3, [pc, #488]	; (800581c <_Z4loopv+0x66c>)
 8005632:	f993 3000 	ldrsb.w	r3, [r3]
 8005636:	f107 06a0 	add.w	r6, r7, #160	; 0xa0
 800563a:	932a      	str	r3, [sp, #168]	; 0xa8
 800563c:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8005640:	e9cd 4526 	strd	r4, r5, [sp, #152]	; 0x98
 8005644:	e9cd ab24 	strd	sl, fp, [sp, #144]	; 0x90
 8005648:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800564c:	e9cd 3422 	strd	r3, r4, [sp, #136]	; 0x88
 8005650:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005654:	e9cd 3420 	strd	r3, r4, [sp, #128]	; 0x80
 8005658:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800565c:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8005660:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005664:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
 8005668:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800566c:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
 8005670:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005674:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
 8005678:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800567c:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 8005680:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005684:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 8005688:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800568c:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 8005690:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8005694:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005698:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800569c:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 80056a0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80056a4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80056a8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80056ac:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80056b0:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80056b4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80056b8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80056bc:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80056c0:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80056c4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80056c8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80056cc:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80056d0:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80056d4:	e9cd 3400 	strd	r3, r4, [sp]
 80056d8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80056dc:	4950      	ldr	r1, [pc, #320]	; (8005820 <_Z4loopv+0x670>)
 80056de:	4630      	mov	r0, r6
 80056e0:	f00b f83e 	bl	8010760 <siprintf>
	        uint8_t x = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 31db 	strb.w	r3, [r7, #475]	; 0x1db
	        while (msg[x] != NULL)
 80056ea:	f897 31db 	ldrb.w	r3, [r7, #475]	; 0x1db
 80056ee:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80056f2:	5cd3      	ldrb	r3, [r2, r3]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <_Z4loopv+0x554>
	        	x++;
 80056f8:	f897 31db 	ldrb.w	r3, [r7, #475]	; 0x1db
 80056fc:	3301      	adds	r3, #1
 80056fe:	f887 31db 	strb.w	r3, [r7, #475]	; 0x1db
	        while (msg[x] != NULL)
 8005702:	e7f2      	b.n	80056ea <_Z4loopv+0x53a>
	        unsigned char msgTransmit[x];
 8005704:	f897 31db 	ldrb.w	r3, [r7, #475]	; 0x1db
 8005708:	1e5c      	subs	r4, r3, #1
 800570a:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 800570e:	4623      	mov	r3, r4
 8005710:	3301      	adds	r3, #1
 8005712:	4618      	mov	r0, r3
 8005714:	f04f 0100 	mov.w	r1, #0
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	00cb      	lsls	r3, r1, #3
 8005722:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005726:	00c2      	lsls	r2, r0, #3
 8005728:	4623      	mov	r3, r4
 800572a:	3301      	adds	r3, #1
 800572c:	4618      	mov	r0, r3
 800572e:	f04f 0100 	mov.w	r1, #0
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	f04f 0300 	mov.w	r3, #0
 800573a:	00cb      	lsls	r3, r1, #3
 800573c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005740:	00c2      	lsls	r2, r0, #3
 8005742:	4623      	mov	r3, r4
 8005744:	3301      	adds	r3, #1
 8005746:	3307      	adds	r3, #7
 8005748:	08db      	lsrs	r3, r3, #3
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	ebad 0d03 	sub.w	sp, sp, r3
 8005750:	ab2c      	add	r3, sp, #176	; 0xb0
 8005752:	3300      	adds	r3, #0
 8005754:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	        for (size_t i = 0; i < x; i++)
 8005758:	2300      	movs	r3, #0
 800575a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800575e:	f897 31db 	ldrb.w	r3, [r7, #475]	; 0x1db
 8005762:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8005766:	429a      	cmp	r2, r3
 8005768:	d212      	bcs.n	8005790 <_Z4loopv+0x5e0>
	        	msgTransmit[i] = msg[i];
 800576a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800576e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8005772:	4413      	add	r3, r2
 8005774:	7819      	ldrb	r1, [r3, #0]
 8005776:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800577a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800577e:	4413      	add	r3, r2
 8005780:	460a      	mov	r2, r1
 8005782:	701a      	strb	r2, [r3, #0]
	        for (size_t i = 0; i < x; i++)
 8005784:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8005788:	3301      	adds	r3, #1
 800578a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800578e:	e7e6      	b.n	800575e <_Z4loopv+0x5ae>
	        CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 8005790:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8005794:	b2a3      	uxth	r3, r4
 8005796:	3301      	adds	r3, #1
 8005798:	b29b      	uxth	r3, r3
 800579a:	4619      	mov	r1, r3
 800579c:	4610      	mov	r0, r2
 800579e:	f007 fcfb 	bl	800d198 <CDC_Transmit_FS>
 80057a2:	f8d7 d004 	ldr.w	sp, [r7, #4]
        for (size_t i = 0; i < 1; i++)
 80057a6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80057aa:	3301      	adds	r3, #1
 80057ac:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80057b0:	e576      	b.n	80052a0 <_Z4loopv+0xf0>
      }
      break;
    default:
      break;
 80057b2:	bf00      	nop
 80057b4:	e000      	b.n	80057b8 <_Z4loopv+0x608>
      break;
 80057b6:	bf00      	nop
    }
    task ++;
 80057b8:	4b1a      	ldr	r3, [pc, #104]	; (8005824 <_Z4loopv+0x674>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	3301      	adds	r3, #1
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	4b18      	ldr	r3, [pc, #96]	; (8005824 <_Z4loopv+0x674>)
 80057c2:	701a      	strb	r2, [r3, #0]

    while (TIM4->CNT > (fastPPM_Pulselength - fastPPM_calcutationTime));     //wait until TIM4 resets to 0
 80057c4:	4b18      	ldr	r3, [pc, #96]	; (8005828 <_Z4loopv+0x678>)
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	f640 1288 	movw	r2, #2440	; 0x988
 80057cc:	4293      	cmp	r3, r2
 80057ce:	bf8c      	ite	hi
 80057d0:	2301      	movhi	r3, #1
 80057d2:	2300      	movls	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d000      	beq.n	80057dc <_Z4loopv+0x62c>
 80057da:	e7f3      	b.n	80057c4 <_Z4loopv+0x614>
    while (TIM4->CNT < (fastPPM_Pulselength - fastPPM_calcutationTime));     //wait until fastPPM_Pulselength - fastPPM_calcutationTime has passed
 80057dc:	4b12      	ldr	r3, [pc, #72]	; (8005828 <_Z4loopv+0x678>)
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	f640 1287 	movw	r2, #2439	; 0x987
 80057e4:	4293      	cmp	r3, r2
 80057e6:	bf94      	ite	ls
 80057e8:	2301      	movls	r3, #1
 80057ea:	2300      	movhi	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d000      	beq.n	80057f4 <_Z4loopv+0x644>
 80057f2:	e7f3      	b.n	80057dc <_Z4loopv+0x62c>
  }
 80057f4:	bf00      	nop
 80057f6:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 80057fa:	46bd      	mov	sp, r7
 80057fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005800:	00000000 	.word	0x00000000
 8005804:	4093b000 	.word	0x4093b000
 8005808:	200007e2 	.word	0x200007e2
 800580c:	3f501010 	.word	0x3f501010
 8005810:	200007e8 	.word	0x200007e8
 8005814:	20000520 	.word	0x20000520
 8005818:	20000654 	.word	0x20000654
 800581c:	200007e4 	.word	0x200007e4
 8005820:	08012a70 	.word	0x08012a70
 8005824:	200007f0 	.word	0x200007f0
 8005828:	40000800 	.word	0x40000800

0800582c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005832:	2300      	movs	r3, #0
 8005834:	607b      	str	r3, [r7, #4]
 8005836:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <HAL_MspInit+0x48>)
 8005838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583a:	4a0e      	ldr	r2, [pc, #56]	; (8005874 <HAL_MspInit+0x48>)
 800583c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005840:	6453      	str	r3, [r2, #68]	; 0x44
 8005842:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <HAL_MspInit+0x48>)
 8005844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800584a:	607b      	str	r3, [r7, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800584e:	2300      	movs	r3, #0
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	4b08      	ldr	r3, [pc, #32]	; (8005874 <HAL_MspInit+0x48>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	4a07      	ldr	r2, [pc, #28]	; (8005874 <HAL_MspInit+0x48>)
 8005858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800585c:	6413      	str	r3, [r2, #64]	; 0x40
 800585e:	4b05      	ldr	r3, [pc, #20]	; (8005874 <HAL_MspInit+0x48>)
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr
 8005874:	40023800 	.word	0x40023800

08005878 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08a      	sub	sp, #40	; 0x28
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005880:	f107 0314 	add.w	r3, r7, #20
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	605a      	str	r2, [r3, #4]
 800588a:	609a      	str	r2, [r3, #8]
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a17      	ldr	r2, [pc, #92]	; (80058f4 <HAL_ADC_MspInit+0x7c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d127      	bne.n	80058ea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800589a:	2300      	movs	r3, #0
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <HAL_ADC_MspInit+0x80>)
 80058a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a2:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <HAL_ADC_MspInit+0x80>)
 80058a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a8:	6453      	str	r3, [r2, #68]	; 0x44
 80058aa:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <HAL_ADC_MspInit+0x80>)
 80058ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	4b0f      	ldr	r3, [pc, #60]	; (80058f8 <HAL_ADC_MspInit+0x80>)
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	4a0e      	ldr	r2, [pc, #56]	; (80058f8 <HAL_ADC_MspInit+0x80>)
 80058c0:	f043 0304 	orr.w	r3, r3, #4
 80058c4:	6313      	str	r3, [r2, #48]	; 0x30
 80058c6:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <HAL_ADC_MspInit+0x80>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ONBOARD_ADC_2_Pin|ONBOARD_ADC_1_Pin;
 80058d2:	2306      	movs	r3, #6
 80058d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058d6:	2303      	movs	r3, #3
 80058d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058de:	f107 0314 	add.w	r3, r7, #20
 80058e2:	4619      	mov	r1, r3
 80058e4:	4805      	ldr	r0, [pc, #20]	; (80058fc <HAL_ADC_MspInit+0x84>)
 80058e6:	f000 ff21 	bl	800672c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80058ea:	bf00      	nop
 80058ec:	3728      	adds	r7, #40	; 0x28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40012000 	.word	0x40012000
 80058f8:	40023800 	.word	0x40023800
 80058fc:	40020800 	.word	0x40020800

08005900 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005908:	f107 0314 	add.w	r3, r7, #20
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	605a      	str	r2, [r3, #4]
 8005912:	609a      	str	r2, [r3, #8]
 8005914:	60da      	str	r2, [r3, #12]
 8005916:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a19      	ldr	r2, [pc, #100]	; (8005984 <HAL_I2C_MspInit+0x84>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d12c      	bne.n	800597c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005922:	2300      	movs	r3, #0
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	4b18      	ldr	r3, [pc, #96]	; (8005988 <HAL_I2C_MspInit+0x88>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	4a17      	ldr	r2, [pc, #92]	; (8005988 <HAL_I2C_MspInit+0x88>)
 800592c:	f043 0302 	orr.w	r3, r3, #2
 8005930:	6313      	str	r3, [r2, #48]	; 0x30
 8005932:	4b15      	ldr	r3, [pc, #84]	; (8005988 <HAL_I2C_MspInit+0x88>)
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800593e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005944:	2312      	movs	r3, #18
 8005946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005948:	2300      	movs	r3, #0
 800594a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800594c:	2303      	movs	r3, #3
 800594e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005950:	2304      	movs	r3, #4
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005954:	f107 0314 	add.w	r3, r7, #20
 8005958:	4619      	mov	r1, r3
 800595a:	480c      	ldr	r0, [pc, #48]	; (800598c <HAL_I2C_MspInit+0x8c>)
 800595c:	f000 fee6 	bl	800672c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	4b08      	ldr	r3, [pc, #32]	; (8005988 <HAL_I2C_MspInit+0x88>)
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	4a07      	ldr	r2, [pc, #28]	; (8005988 <HAL_I2C_MspInit+0x88>)
 800596a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800596e:	6413      	str	r3, [r2, #64]	; 0x40
 8005970:	4b05      	ldr	r3, [pc, #20]	; (8005988 <HAL_I2C_MspInit+0x88>)
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800597c:	bf00      	nop
 800597e:	3728      	adds	r7, #40	; 0x28
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40005400 	.word	0x40005400
 8005988:	40023800 	.word	0x40023800
 800598c:	40020400 	.word	0x40020400

08005990 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a14      	ldr	r2, [pc, #80]	; (80059f0 <HAL_TIM_PWM_MspInit+0x60>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d10e      	bne.n	80059c0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	4b13      	ldr	r3, [pc, #76]	; (80059f4 <HAL_TIM_PWM_MspInit+0x64>)
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	4a12      	ldr	r2, [pc, #72]	; (80059f4 <HAL_TIM_PWM_MspInit+0x64>)
 80059ac:	f043 0302 	orr.w	r3, r3, #2
 80059b0:	6413      	str	r3, [r2, #64]	; 0x40
 80059b2:	4b10      	ldr	r3, [pc, #64]	; (80059f4 <HAL_TIM_PWM_MspInit+0x64>)
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80059be:	e012      	b.n	80059e6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a0c      	ldr	r2, [pc, #48]	; (80059f8 <HAL_TIM_PWM_MspInit+0x68>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d10d      	bne.n	80059e6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80059ca:	2300      	movs	r3, #0
 80059cc:	60bb      	str	r3, [r7, #8]
 80059ce:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <HAL_TIM_PWM_MspInit+0x64>)
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <HAL_TIM_PWM_MspInit+0x64>)
 80059d4:	f043 0304 	orr.w	r3, r3, #4
 80059d8:	6413      	str	r3, [r2, #64]	; 0x40
 80059da:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <HAL_TIM_PWM_MspInit+0x64>)
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	60bb      	str	r3, [r7, #8]
 80059e4:	68bb      	ldr	r3, [r7, #8]
}
 80059e6:	bf00      	nop
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40023800 	.word	0x40023800
 80059f8:	40000800 	.word	0x40000800

080059fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a0a      	ldr	r2, [pc, #40]	; (8005a34 <HAL_TIM_Base_MspInit+0x38>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d10d      	bne.n	8005a2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	4b09      	ldr	r3, [pc, #36]	; (8005a38 <HAL_TIM_Base_MspInit+0x3c>)
 8005a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a16:	4a08      	ldr	r2, [pc, #32]	; (8005a38 <HAL_TIM_Base_MspInit+0x3c>)
 8005a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8005a1e:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <HAL_TIM_Base_MspInit+0x3c>)
 8005a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005a2a:	bf00      	nop
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr
 8005a34:	40014800 	.word	0x40014800
 8005a38:	40023800 	.word	0x40023800

08005a3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08a      	sub	sp, #40	; 0x28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a44:	f107 0314 	add.w	r3, r7, #20
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	605a      	str	r2, [r3, #4]
 8005a4e:	609a      	str	r2, [r3, #8]
 8005a50:	60da      	str	r2, [r3, #12]
 8005a52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a24      	ldr	r2, [pc, #144]	; (8005aec <HAL_TIM_MspPostInit+0xb0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d11e      	bne.n	8005a9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a5e:	2300      	movs	r3, #0
 8005a60:	613b      	str	r3, [r7, #16]
 8005a62:	4b23      	ldr	r3, [pc, #140]	; (8005af0 <HAL_TIM_MspPostInit+0xb4>)
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	4a22      	ldr	r2, [pc, #136]	; (8005af0 <HAL_TIM_MspPostInit+0xb4>)
 8005a68:	f043 0304 	orr.w	r3, r3, #4
 8005a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a6e:	4b20      	ldr	r3, [pc, #128]	; (8005af0 <HAL_TIM_MspPostInit+0xb4>)
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	613b      	str	r3, [r7, #16]
 8005a78:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ONBOARD_WRITE_4_Pin;
 8005a7a:	2340      	movs	r3, #64	; 0x40
 8005a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a7e:	2302      	movs	r3, #2
 8005a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a86:	2300      	movs	r3, #0
 8005a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_4_GPIO_Port, &GPIO_InitStruct);
 8005a8e:	f107 0314 	add.w	r3, r7, #20
 8005a92:	4619      	mov	r1, r3
 8005a94:	4817      	ldr	r0, [pc, #92]	; (8005af4 <HAL_TIM_MspPostInit+0xb8>)
 8005a96:	f000 fe49 	bl	800672c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005a9a:	e022      	b.n	8005ae2 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a15      	ldr	r2, [pc, #84]	; (8005af8 <HAL_TIM_MspPostInit+0xbc>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d11d      	bne.n	8005ae2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <HAL_TIM_MspPostInit+0xb4>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	4a10      	ldr	r2, [pc, #64]	; (8005af0 <HAL_TIM_MspPostInit+0xb4>)
 8005ab0:	f043 0302 	orr.w	r3, r3, #2
 8005ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ab6:	4b0e      	ldr	r3, [pc, #56]	; (8005af0 <HAL_TIM_MspPostInit+0xb4>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ONBOARD_WRITE_1_Pin;
 8005ac2:	2340      	movs	r3, #64	; 0x40
 8005ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_1_GPIO_Port, &GPIO_InitStruct);
 8005ad6:	f107 0314 	add.w	r3, r7, #20
 8005ada:	4619      	mov	r1, r3
 8005adc:	4807      	ldr	r0, [pc, #28]	; (8005afc <HAL_TIM_MspPostInit+0xc0>)
 8005ade:	f000 fe25 	bl	800672c <HAL_GPIO_Init>
}
 8005ae2:	bf00      	nop
 8005ae4:	3728      	adds	r7, #40	; 0x28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40000400 	.word	0x40000400
 8005af0:	40023800 	.word	0x40023800
 8005af4:	40020800 	.word	0x40020800
 8005af8:	40000800 	.word	0x40000800
 8005afc:	40020400 	.word	0x40020400

08005b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005b04:	f003 fd78 	bl	80095f8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b08:	e7fe      	b.n	8005b08 <NMI_Handler+0x8>

08005b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b0e:	e7fe      	b.n	8005b0e <HardFault_Handler+0x4>

08005b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b14:	e7fe      	b.n	8005b14 <MemManage_Handler+0x4>

08005b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b16:	b480      	push	{r7}
 8005b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b1a:	e7fe      	b.n	8005b1a <BusFault_Handler+0x4>

08005b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b20:	e7fe      	b.n	8005b20 <UsageFault_Handler+0x4>

08005b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b22:	b480      	push	{r7}
 8005b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b26:	bf00      	nop
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bc80      	pop	{r7}
 8005b2c:	4770      	bx	lr

08005b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b32:	bf00      	nop
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr

08005b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b3e:	bf00      	nop
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b4a:	f000 f955 	bl	8005df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b4e:	bf00      	nop
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ONBOARD_READ_IT_3_Pin);
 8005b56:	2001      	movs	r0, #1
 8005b58:	f000 ffce 	bl	8006af8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005b5c:	bf00      	nop
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005b64:	4802      	ldr	r0, [pc, #8]	; (8005b70 <OTG_FS_IRQHandler+0x10>)
 8005b66:	f002 f8dc 	bl	8007d22 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005b6a:	bf00      	nop
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20001ccc 	.word	0x20001ccc

08005b74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
	return 1;
 8005b78:	2301      	movs	r3, #1
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr

08005b82 <_kill>:

int _kill(int pid, int sig)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005b8c:	f00a f86c 	bl	800fc68 <__errno>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2216      	movs	r2, #22
 8005b94:	601a      	str	r2, [r3, #0]
	return -1;
 8005b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <_exit>:

void _exit (int status)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005baa:	f04f 31ff 	mov.w	r1, #4294967295
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff ffe7 	bl	8005b82 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005bb4:	e7fe      	b.n	8005bb4 <_exit+0x12>

08005bb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b086      	sub	sp, #24
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]
 8005bc6:	e00a      	b.n	8005bde <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005bc8:	f3af 8000 	nop.w
 8005bcc:	4601      	mov	r1, r0
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	60ba      	str	r2, [r7, #8]
 8005bd4:	b2ca      	uxtb	r2, r1
 8005bd6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	dbf0      	blt.n	8005bc8 <_read+0x12>
	}

return len;
 8005be6:	687b      	ldr	r3, [r7, #4]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	e009      	b.n	8005c16 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	60ba      	str	r2, [r7, #8]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	3301      	adds	r3, #1
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	dbf1      	blt.n	8005c02 <_write+0x12>
	}
	return len;
 8005c1e:	687b      	ldr	r3, [r7, #4]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <_close>:

int _close(int file)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	return -1;
 8005c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr

08005c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c4e:	605a      	str	r2, [r3, #4]
	return 0;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr

08005c5c <_isatty>:

int _isatty(int file)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
	return 1;
 8005c64:	2301      	movs	r3, #1
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr

08005c70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
	return 0;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bc80      	pop	{r7}
 8005c86:	4770      	bx	lr

08005c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c90:	4a14      	ldr	r2, [pc, #80]	; (8005ce4 <_sbrk+0x5c>)
 8005c92:	4b15      	ldr	r3, [pc, #84]	; (8005ce8 <_sbrk+0x60>)
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c9c:	4b13      	ldr	r3, [pc, #76]	; (8005cec <_sbrk+0x64>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d102      	bne.n	8005caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ca4:	4b11      	ldr	r3, [pc, #68]	; (8005cec <_sbrk+0x64>)
 8005ca6:	4a12      	ldr	r2, [pc, #72]	; (8005cf0 <_sbrk+0x68>)
 8005ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005caa:	4b10      	ldr	r3, [pc, #64]	; (8005cec <_sbrk+0x64>)
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d207      	bcs.n	8005cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005cb8:	f009 ffd6 	bl	800fc68 <__errno>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	220c      	movs	r2, #12
 8005cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc6:	e009      	b.n	8005cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005cc8:	4b08      	ldr	r3, [pc, #32]	; (8005cec <_sbrk+0x64>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cce:	4b07      	ldr	r3, [pc, #28]	; (8005cec <_sbrk+0x64>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	4a05      	ldr	r2, [pc, #20]	; (8005cec <_sbrk+0x64>)
 8005cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005cda:	68fb      	ldr	r3, [r7, #12]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20020000 	.word	0x20020000
 8005ce8:	00000400 	.word	0x00000400
 8005cec:	200007f4 	.word	0x200007f4
 8005cf0:	200020e0 	.word	0x200020e0

08005cf4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005cf8:	bf00      	nop
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bc80      	pop	{r7}
 8005cfe:	4770      	bx	lr

08005d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005d04:	480d      	ldr	r0, [pc, #52]	; (8005d3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005d06:	490e      	ldr	r1, [pc, #56]	; (8005d40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005d08:	4a0e      	ldr	r2, [pc, #56]	; (8005d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d0c:	e002      	b.n	8005d14 <LoopCopyDataInit>

08005d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d12:	3304      	adds	r3, #4

08005d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d18:	d3f9      	bcc.n	8005d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d1a:	4a0b      	ldr	r2, [pc, #44]	; (8005d48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005d1c:	4c0b      	ldr	r4, [pc, #44]	; (8005d4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8005d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d20:	e001      	b.n	8005d26 <LoopFillZerobss>

08005d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d24:	3204      	adds	r2, #4

08005d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d28:	d3fb      	bcc.n	8005d22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005d2a:	f7ff ffe3 	bl	8005cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d2e:	f009 ffa1 	bl	800fc74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d32:	f7fe fc45 	bl	80045c0 <main>
  bx  lr    
 8005d36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005d38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d40:	2000038c 	.word	0x2000038c
  ldr r2, =_sidata
 8005d44:	08013d5c 	.word	0x08013d5c
  ldr r2, =_sbss
 8005d48:	2000038c 	.word	0x2000038c
  ldr r4, =_ebss
 8005d4c:	200020dc 	.word	0x200020dc

08005d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d50:	e7fe      	b.n	8005d50 <ADC_IRQHandler>
	...

08005d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d58:	4b0e      	ldr	r3, [pc, #56]	; (8005d94 <HAL_Init+0x40>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a0d      	ldr	r2, [pc, #52]	; (8005d94 <HAL_Init+0x40>)
 8005d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d64:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <HAL_Init+0x40>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a0a      	ldr	r2, [pc, #40]	; (8005d94 <HAL_Init+0x40>)
 8005d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d70:	4b08      	ldr	r3, [pc, #32]	; (8005d94 <HAL_Init+0x40>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a07      	ldr	r2, [pc, #28]	; (8005d94 <HAL_Init+0x40>)
 8005d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d7c:	2003      	movs	r0, #3
 8005d7e:	f000 fc85 	bl	800668c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d82:	200f      	movs	r0, #15
 8005d84:	f000 f808 	bl	8005d98 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005d88:	f7ff fd50 	bl	800582c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	40023c00 	.word	0x40023c00

08005d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005da0:	4b12      	ldr	r3, [pc, #72]	; (8005dec <HAL_InitTick+0x54>)
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	4b12      	ldr	r3, [pc, #72]	; (8005df0 <HAL_InitTick+0x58>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	4619      	mov	r1, r3
 8005daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8005db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fcab 	bl	8006712 <HAL_SYSTICK_Config>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e00e      	b.n	8005de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b0f      	cmp	r3, #15
 8005dca:	d80a      	bhi.n	8005de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005dcc:	2200      	movs	r2, #0
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd4:	f000 fc65 	bl	80066a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005dd8:	4a06      	ldr	r2, [pc, #24]	; (8005df4 <HAL_InitTick+0x5c>)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	e000      	b.n	8005de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	20000038 	.word	0x20000038
 8005df0:	20000040 	.word	0x20000040
 8005df4:	2000003c 	.word	0x2000003c

08005df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <HAL_IncTick+0x1c>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <HAL_IncTick+0x20>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4413      	add	r3, r2
 8005e08:	4a03      	ldr	r2, [pc, #12]	; (8005e18 <HAL_IncTick+0x20>)
 8005e0a:	6013      	str	r3, [r2, #0]
}
 8005e0c:	bf00      	nop
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr
 8005e14:	20000040 	.word	0x20000040
 8005e18:	20000804 	.word	0x20000804

08005e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8005e20:	4b02      	ldr	r3, [pc, #8]	; (8005e2c <HAL_GetTick+0x10>)
 8005e22:	681b      	ldr	r3, [r3, #0]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr
 8005e2c:	20000804 	.word	0x20000804

08005e30 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e38:	f7ff fff0 	bl	8005e1c <HAL_GetTick>
 8005e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e48:	d005      	beq.n	8005e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e4a:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <HAL_Delay+0x44>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e56:	bf00      	nop
 8005e58:	f7ff ffe0 	bl	8005e1c <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d8f7      	bhi.n	8005e58 <HAL_Delay+0x28>
  {
  }
}
 8005e68:	bf00      	nop
 8005e6a:	bf00      	nop
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000040 	.word	0x20000040

08005e78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e033      	b.n	8005ef6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff fcee 	bl	8005878 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	f003 0310 	and.w	r3, r3, #16
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d118      	bne.n	8005ee8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005ebe:	f023 0302 	bic.w	r3, r3, #2
 8005ec2:	f043 0202 	orr.w	r2, r3, #2
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f9e8 	bl	80062a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	f023 0303 	bic.w	r3, r3, #3
 8005ede:	f043 0201 	orr.w	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40
 8005ee6:	e001      	b.n	8005eec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_ADC_Start+0x1a>
 8005f16:	2302      	movs	r3, #2
 8005f18:	e095      	b.n	8006046 <HAL_ADC_Start+0x146>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d018      	beq.n	8005f62 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005f40:	4b43      	ldr	r3, [pc, #268]	; (8006050 <HAL_ADC_Start+0x150>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a43      	ldr	r2, [pc, #268]	; (8006054 <HAL_ADC_Start+0x154>)
 8005f46:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4a:	0c9a      	lsrs	r2, r3, #18
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	4413      	add	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8005f54:	e002      	b.n	8005f5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f9      	bne.n	8005f56 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d15d      	bne.n	800602c <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005f78:	f023 0301 	bic.w	r3, r3, #1
 8005f7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d007      	beq.n	8005fa2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005f9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fae:	d106      	bne.n	8005fbe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb4:	f023 0206 	bic.w	r2, r3, #6
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	645a      	str	r2, [r3, #68]	; 0x44
 8005fbc:	e002      	b.n	8005fc4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005fd4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005fd6:	4b20      	ldr	r3, [pc, #128]	; (8006058 <HAL_ADC_Start+0x158>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f003 031f 	and.w	r3, r3, #31
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10f      	bne.n	8006002 <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d129      	bne.n	8006044 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005ffe:	609a      	str	r2, [r3, #8]
 8006000:	e020      	b.n	8006044 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a15      	ldr	r2, [pc, #84]	; (800605c <HAL_ADC_Start+0x15c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d11b      	bne.n	8006044 <HAL_ADC_Start+0x144>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d114      	bne.n	8006044 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006028:	609a      	str	r2, [r3, #8]
 800602a:	e00b      	b.n	8006044 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006030:	f043 0210 	orr.w	r2, r3, #16
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603c:	f043 0201 	orr.w	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	bc80      	pop	{r7}
 800604e:	4770      	bx	lr
 8006050:	20000038 	.word	0x20000038
 8006054:	431bde83 	.word	0x431bde83
 8006058:	40012300 	.word	0x40012300
 800605c:	40012000 	.word	0x40012000

08006060 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_ADC_ConfigChannel+0x1c>
 8006078:	2302      	movs	r3, #2
 800607a:	e103      	b.n	8006284 <HAL_ADC_ConfigChannel+0x224>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b09      	cmp	r3, #9
 800608a:	d925      	bls.n	80060d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68d9      	ldr	r1, [r3, #12]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	b29b      	uxth	r3, r3
 8006098:	461a      	mov	r2, r3
 800609a:	4613      	mov	r3, r2
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	4413      	add	r3, r2
 80060a0:	3b1e      	subs	r3, #30
 80060a2:	2207      	movs	r2, #7
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	43da      	mvns	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	400a      	ands	r2, r1
 80060b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68d9      	ldr	r1, [r3, #12]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	4618      	mov	r0, r3
 80060c4:	4603      	mov	r3, r0
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	4403      	add	r3, r0
 80060ca:	3b1e      	subs	r3, #30
 80060cc:	409a      	lsls	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	60da      	str	r2, [r3, #12]
 80060d6:	e022      	b.n	800611e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6919      	ldr	r1, [r3, #16]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	4613      	mov	r3, r2
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	4413      	add	r3, r2
 80060ec:	2207      	movs	r2, #7
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	43da      	mvns	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	400a      	ands	r2, r1
 80060fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6919      	ldr	r1, [r3, #16]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	689a      	ldr	r2, [r3, #8]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	4618      	mov	r0, r3
 800610e:	4603      	mov	r3, r0
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	4403      	add	r3, r0
 8006114:	409a      	lsls	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b06      	cmp	r3, #6
 8006124:	d824      	bhi.n	8006170 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	3b05      	subs	r3, #5
 8006138:	221f      	movs	r2, #31
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	43da      	mvns	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	400a      	ands	r2, r1
 8006146:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	b29b      	uxth	r3, r3
 8006154:	4618      	mov	r0, r3
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	3b05      	subs	r3, #5
 8006162:	fa00 f203 	lsl.w	r2, r0, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	635a      	str	r2, [r3, #52]	; 0x34
 800616e:	e04c      	b.n	800620a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	2b0c      	cmp	r3, #12
 8006176:	d824      	bhi.n	80061c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	3b23      	subs	r3, #35	; 0x23
 800618a:	221f      	movs	r2, #31
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	43da      	mvns	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	400a      	ands	r2, r1
 8006198:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	4618      	mov	r0, r3
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	3b23      	subs	r3, #35	; 0x23
 80061b4:	fa00 f203 	lsl.w	r2, r0, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
 80061c0:	e023      	b.n	800620a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	3b41      	subs	r3, #65	; 0x41
 80061d4:	221f      	movs	r2, #31
 80061d6:	fa02 f303 	lsl.w	r3, r2, r3
 80061da:	43da      	mvns	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	400a      	ands	r2, r1
 80061e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	4618      	mov	r0, r3
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	3b41      	subs	r3, #65	; 0x41
 80061fe:	fa00 f203 	lsl.w	r2, r0, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a20      	ldr	r2, [pc, #128]	; (8006290 <HAL_ADC_ConfigChannel+0x230>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d109      	bne.n	8006228 <HAL_ADC_ConfigChannel+0x1c8>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b12      	cmp	r3, #18
 800621a:	d105      	bne.n	8006228 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800621c:	4b1d      	ldr	r3, [pc, #116]	; (8006294 <HAL_ADC_ConfigChannel+0x234>)
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	4a1c      	ldr	r2, [pc, #112]	; (8006294 <HAL_ADC_ConfigChannel+0x234>)
 8006222:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006226:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a18      	ldr	r2, [pc, #96]	; (8006290 <HAL_ADC_ConfigChannel+0x230>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d123      	bne.n	800627a <HAL_ADC_ConfigChannel+0x21a>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b10      	cmp	r3, #16
 8006238:	d003      	beq.n	8006242 <HAL_ADC_ConfigChannel+0x1e2>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b11      	cmp	r3, #17
 8006240:	d11b      	bne.n	800627a <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006242:	4b14      	ldr	r3, [pc, #80]	; (8006294 <HAL_ADC_ConfigChannel+0x234>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	4a13      	ldr	r2, [pc, #76]	; (8006294 <HAL_ADC_ConfigChannel+0x234>)
 8006248:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800624c:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b10      	cmp	r3, #16
 8006254:	d111      	bne.n	800627a <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006256:	4b10      	ldr	r3, [pc, #64]	; (8006298 <HAL_ADC_ConfigChannel+0x238>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a10      	ldr	r2, [pc, #64]	; (800629c <HAL_ADC_ConfigChannel+0x23c>)
 800625c:	fba2 2303 	umull	r2, r3, r2, r3
 8006260:	0c9a      	lsrs	r2, r3, #18
 8006262:	4613      	mov	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800626c:	e002      	b.n	8006274 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3b01      	subs	r3, #1
 8006272:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f9      	bne.n	800626e <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	bc80      	pop	{r7}
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40012000 	.word	0x40012000
 8006294:	40012300 	.word	0x40012300
 8006298:	20000038 	.word	0x20000038
 800629c:	431bde83 	.word	0x431bde83

080062a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80062a8:	4b7e      	ldr	r3, [pc, #504]	; (80064a4 <ADC_Init+0x204>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	4a7d      	ldr	r2, [pc, #500]	; (80064a4 <ADC_Init+0x204>)
 80062ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80062b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80062b4:	4b7b      	ldr	r3, [pc, #492]	; (80064a4 <ADC_Init+0x204>)
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	4979      	ldr	r1, [pc, #484]	; (80064a4 <ADC_Init+0x204>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6859      	ldr	r1, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	021a      	lsls	r2, r3, #8
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80062f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6859      	ldr	r1, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006316:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6899      	ldr	r1, [r3, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	4a5e      	ldr	r2, [pc, #376]	; (80064a8 <ADC_Init+0x208>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d022      	beq.n	800637a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006342:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6899      	ldr	r1, [r3, #8]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006364:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6899      	ldr	r1, [r3, #8]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	609a      	str	r2, [r3, #8]
 8006378:	e00f      	b.n	800639a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006388:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006398:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0202 	bic.w	r2, r2, #2
 80063a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6899      	ldr	r1, [r3, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	7e1b      	ldrb	r3, [r3, #24]
 80063b4:	005a      	lsls	r2, r3, #1
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d027      	beq.n	8006418 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80063e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	3b01      	subs	r3, #1
 80063ee:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80063f2:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	fa92 f2a2 	rbit	r2, r2
 80063fa:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	fab2 f282 	clz	r2, r2
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	fa03 f102 	lsl.w	r1, r3, r2
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	605a      	str	r2, [r3, #4]
 8006416:	e007      	b.n	8006428 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006426:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006436:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	3b01      	subs	r3, #1
 8006444:	051a      	lsls	r2, r3, #20
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800645c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6899      	ldr	r1, [r3, #8]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800646a:	025a      	lsls	r2, r3, #9
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006482:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6899      	ldr	r1, [r3, #8]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	029a      	lsls	r2, r3, #10
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	609a      	str	r2, [r3, #8]
}
 8006498:	bf00      	nop
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40012300 	.word	0x40012300
 80064a8:	0f000001 	.word	0x0f000001

080064ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064bc:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <__NVIC_SetPriorityGrouping+0x44>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064c8:	4013      	ands	r3, r2
 80064ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064de:	4a04      	ldr	r2, [pc, #16]	; (80064f0 <__NVIC_SetPriorityGrouping+0x44>)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	60d3      	str	r3, [r2, #12]
}
 80064e4:	bf00      	nop
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc80      	pop	{r7}
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	e000ed00 	.word	0xe000ed00

080064f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064f4:	b480      	push	{r7}
 80064f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064f8:	4b04      	ldr	r3, [pc, #16]	; (800650c <__NVIC_GetPriorityGrouping+0x18>)
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	0a1b      	lsrs	r3, r3, #8
 80064fe:	f003 0307 	and.w	r3, r3, #7
}
 8006502:	4618      	mov	r0, r3
 8006504:	46bd      	mov	sp, r7
 8006506:	bc80      	pop	{r7}
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	e000ed00 	.word	0xe000ed00

08006510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800651a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800651e:	2b00      	cmp	r3, #0
 8006520:	db0b      	blt.n	800653a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006522:	79fb      	ldrb	r3, [r7, #7]
 8006524:	f003 021f 	and.w	r2, r3, #31
 8006528:	4906      	ldr	r1, [pc, #24]	; (8006544 <__NVIC_EnableIRQ+0x34>)
 800652a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	2001      	movs	r0, #1
 8006532:	fa00 f202 	lsl.w	r2, r0, r2
 8006536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	bc80      	pop	{r7}
 8006542:	4770      	bx	lr
 8006544:	e000e100 	.word	0xe000e100

08006548 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	4603      	mov	r3, r0
 8006550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006556:	2b00      	cmp	r3, #0
 8006558:	db12      	blt.n	8006580 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	f003 021f 	and.w	r2, r3, #31
 8006560:	490a      	ldr	r1, [pc, #40]	; (800658c <__NVIC_DisableIRQ+0x44>)
 8006562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	2001      	movs	r0, #1
 800656a:	fa00 f202 	lsl.w	r2, r0, r2
 800656e:	3320      	adds	r3, #32
 8006570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006574:	f3bf 8f4f 	dsb	sy
}
 8006578:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800657a:	f3bf 8f6f 	isb	sy
}
 800657e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	e000e100 	.word	0xe000e100

08006590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	4603      	mov	r3, r0
 8006598:	6039      	str	r1, [r7, #0]
 800659a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800659c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	db0a      	blt.n	80065ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	490c      	ldr	r1, [pc, #48]	; (80065dc <__NVIC_SetPriority+0x4c>)
 80065aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ae:	0112      	lsls	r2, r2, #4
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	440b      	add	r3, r1
 80065b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065b8:	e00a      	b.n	80065d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	4908      	ldr	r1, [pc, #32]	; (80065e0 <__NVIC_SetPriority+0x50>)
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	f003 030f 	and.w	r3, r3, #15
 80065c6:	3b04      	subs	r3, #4
 80065c8:	0112      	lsls	r2, r2, #4
 80065ca:	b2d2      	uxtb	r2, r2
 80065cc:	440b      	add	r3, r1
 80065ce:	761a      	strb	r2, [r3, #24]
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	e000e100 	.word	0xe000e100
 80065e0:	e000ed00 	.word	0xe000ed00

080065e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b089      	sub	sp, #36	; 0x24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	f1c3 0307 	rsb	r3, r3, #7
 80065fe:	2b04      	cmp	r3, #4
 8006600:	bf28      	it	cs
 8006602:	2304      	movcs	r3, #4
 8006604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	3304      	adds	r3, #4
 800660a:	2b06      	cmp	r3, #6
 800660c:	d902      	bls.n	8006614 <NVIC_EncodePriority+0x30>
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	3b03      	subs	r3, #3
 8006612:	e000      	b.n	8006616 <NVIC_EncodePriority+0x32>
 8006614:	2300      	movs	r3, #0
 8006616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006618:	f04f 32ff 	mov.w	r2, #4294967295
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	fa02 f303 	lsl.w	r3, r2, r3
 8006622:	43da      	mvns	r2, r3
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	401a      	ands	r2, r3
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800662c:	f04f 31ff 	mov.w	r1, #4294967295
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	fa01 f303 	lsl.w	r3, r1, r3
 8006636:	43d9      	mvns	r1, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800663c:	4313      	orrs	r3, r2
         );
}
 800663e:	4618      	mov	r0, r3
 8006640:	3724      	adds	r7, #36	; 0x24
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr

08006648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3b01      	subs	r3, #1
 8006654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006658:	d301      	bcc.n	800665e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800665a:	2301      	movs	r3, #1
 800665c:	e00f      	b.n	800667e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800665e:	4a0a      	ldr	r2, [pc, #40]	; (8006688 <SysTick_Config+0x40>)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3b01      	subs	r3, #1
 8006664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006666:	210f      	movs	r1, #15
 8006668:	f04f 30ff 	mov.w	r0, #4294967295
 800666c:	f7ff ff90 	bl	8006590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006670:	4b05      	ldr	r3, [pc, #20]	; (8006688 <SysTick_Config+0x40>)
 8006672:	2200      	movs	r2, #0
 8006674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006676:	4b04      	ldr	r3, [pc, #16]	; (8006688 <SysTick_Config+0x40>)
 8006678:	2207      	movs	r2, #7
 800667a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	e000e010 	.word	0xe000e010

0800668c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7ff ff09 	bl	80064ac <__NVIC_SetPriorityGrouping>
}
 800669a:	bf00      	nop
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b086      	sub	sp, #24
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	4603      	mov	r3, r0
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	607a      	str	r2, [r7, #4]
 80066ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80066b4:	f7ff ff1e 	bl	80064f4 <__NVIC_GetPriorityGrouping>
 80066b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	68b9      	ldr	r1, [r7, #8]
 80066be:	6978      	ldr	r0, [r7, #20]
 80066c0:	f7ff ff90 	bl	80065e4 <NVIC_EncodePriority>
 80066c4:	4602      	mov	r2, r0
 80066c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ca:	4611      	mov	r1, r2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7ff ff5f 	bl	8006590 <__NVIC_SetPriority>
}
 80066d2:	bf00      	nop
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	4603      	mov	r3, r0
 80066e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff ff11 	bl	8006510 <__NVIC_EnableIRQ>
}
 80066ee:	bf00      	nop
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	4603      	mov	r3, r0
 80066fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff ff1f 	bl	8006548 <__NVIC_DisableIRQ>
}
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b082      	sub	sp, #8
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7ff ff94 	bl	8006648 <SysTick_Config>
 8006720:	4603      	mov	r3, r0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
	...

0800672c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800673a:	e16f      	b.n	8006a1c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	2101      	movs	r1, #1
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	fa01 f303 	lsl.w	r3, r1, r3
 8006748:	4013      	ands	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 8161 	beq.w	8006a16 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	2b01      	cmp	r3, #1
 800675e:	d005      	beq.n	800676c <HAL_GPIO_Init+0x40>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f003 0303 	and.w	r3, r3, #3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d130      	bne.n	80067ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	2203      	movs	r2, #3
 8006778:	fa02 f303 	lsl.w	r3, r2, r3
 800677c:	43db      	mvns	r3, r3
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	4013      	ands	r3, r2
 8006782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	005b      	lsls	r3, r3, #1
 800678c:	fa02 f303 	lsl.w	r3, r2, r3
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	4313      	orrs	r3, r2
 8006794:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067a2:	2201      	movs	r2, #1
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	fa02 f303 	lsl.w	r3, r2, r3
 80067aa:	43db      	mvns	r3, r3
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	4013      	ands	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	091b      	lsrs	r3, r3, #4
 80067b8:	f003 0201 	and.w	r2, r3, #1
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	fa02 f303 	lsl.w	r3, r2, r3
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d017      	beq.n	800680a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	2203      	movs	r2, #3
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	43db      	mvns	r3, r3
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4013      	ands	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	fa02 f303 	lsl.w	r3, r2, r3
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	4313      	orrs	r3, r2
 8006802:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d123      	bne.n	800685e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	08da      	lsrs	r2, r3, #3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	3208      	adds	r2, #8
 800681e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006822:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	220f      	movs	r2, #15
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	43db      	mvns	r3, r3
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4013      	ands	r3, r2
 8006838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	691a      	ldr	r2, [r3, #16]
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f003 0307 	and.w	r3, r3, #7
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	fa02 f303 	lsl.w	r3, r2, r3
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	08da      	lsrs	r2, r3, #3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3208      	adds	r2, #8
 8006858:	6939      	ldr	r1, [r7, #16]
 800685a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	2203      	movs	r2, #3
 800686a:	fa02 f303 	lsl.w	r3, r2, r3
 800686e:	43db      	mvns	r3, r3
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4013      	ands	r3, r2
 8006874:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f003 0203 	and.w	r2, r3, #3
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80bb 	beq.w	8006a16 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068a0:	2300      	movs	r3, #0
 80068a2:	60bb      	str	r3, [r7, #8]
 80068a4:	4b64      	ldr	r3, [pc, #400]	; (8006a38 <HAL_GPIO_Init+0x30c>)
 80068a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a8:	4a63      	ldr	r2, [pc, #396]	; (8006a38 <HAL_GPIO_Init+0x30c>)
 80068aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068ae:	6453      	str	r3, [r2, #68]	; 0x44
 80068b0:	4b61      	ldr	r3, [pc, #388]	; (8006a38 <HAL_GPIO_Init+0x30c>)
 80068b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068b8:	60bb      	str	r3, [r7, #8]
 80068ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80068bc:	4a5f      	ldr	r2, [pc, #380]	; (8006a3c <HAL_GPIO_Init+0x310>)
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	089b      	lsrs	r3, r3, #2
 80068c2:	3302      	adds	r3, #2
 80068c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f003 0303 	and.w	r3, r3, #3
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	220f      	movs	r2, #15
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	43db      	mvns	r3, r3
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4013      	ands	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a57      	ldr	r2, [pc, #348]	; (8006a40 <HAL_GPIO_Init+0x314>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d031      	beq.n	800694c <HAL_GPIO_Init+0x220>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a56      	ldr	r2, [pc, #344]	; (8006a44 <HAL_GPIO_Init+0x318>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d02b      	beq.n	8006948 <HAL_GPIO_Init+0x21c>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a55      	ldr	r2, [pc, #340]	; (8006a48 <HAL_GPIO_Init+0x31c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d025      	beq.n	8006944 <HAL_GPIO_Init+0x218>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a54      	ldr	r2, [pc, #336]	; (8006a4c <HAL_GPIO_Init+0x320>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d01f      	beq.n	8006940 <HAL_GPIO_Init+0x214>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a53      	ldr	r2, [pc, #332]	; (8006a50 <HAL_GPIO_Init+0x324>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d019      	beq.n	800693c <HAL_GPIO_Init+0x210>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a52      	ldr	r2, [pc, #328]	; (8006a54 <HAL_GPIO_Init+0x328>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d013      	beq.n	8006938 <HAL_GPIO_Init+0x20c>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a51      	ldr	r2, [pc, #324]	; (8006a58 <HAL_GPIO_Init+0x32c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d00d      	beq.n	8006934 <HAL_GPIO_Init+0x208>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a50      	ldr	r2, [pc, #320]	; (8006a5c <HAL_GPIO_Init+0x330>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d007      	beq.n	8006930 <HAL_GPIO_Init+0x204>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a4f      	ldr	r2, [pc, #316]	; (8006a60 <HAL_GPIO_Init+0x334>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d101      	bne.n	800692c <HAL_GPIO_Init+0x200>
 8006928:	2308      	movs	r3, #8
 800692a:	e010      	b.n	800694e <HAL_GPIO_Init+0x222>
 800692c:	2309      	movs	r3, #9
 800692e:	e00e      	b.n	800694e <HAL_GPIO_Init+0x222>
 8006930:	2307      	movs	r3, #7
 8006932:	e00c      	b.n	800694e <HAL_GPIO_Init+0x222>
 8006934:	2306      	movs	r3, #6
 8006936:	e00a      	b.n	800694e <HAL_GPIO_Init+0x222>
 8006938:	2305      	movs	r3, #5
 800693a:	e008      	b.n	800694e <HAL_GPIO_Init+0x222>
 800693c:	2304      	movs	r3, #4
 800693e:	e006      	b.n	800694e <HAL_GPIO_Init+0x222>
 8006940:	2303      	movs	r3, #3
 8006942:	e004      	b.n	800694e <HAL_GPIO_Init+0x222>
 8006944:	2302      	movs	r3, #2
 8006946:	e002      	b.n	800694e <HAL_GPIO_Init+0x222>
 8006948:	2301      	movs	r3, #1
 800694a:	e000      	b.n	800694e <HAL_GPIO_Init+0x222>
 800694c:	2300      	movs	r3, #0
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	f002 0203 	and.w	r2, r2, #3
 8006954:	0092      	lsls	r2, r2, #2
 8006956:	4093      	lsls	r3, r2
 8006958:	461a      	mov	r2, r3
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006960:	4936      	ldr	r1, [pc, #216]	; (8006a3c <HAL_GPIO_Init+0x310>)
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	089b      	lsrs	r3, r3, #2
 8006966:	3302      	adds	r3, #2
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800696e:	4b3d      	ldr	r3, [pc, #244]	; (8006a64 <HAL_GPIO_Init+0x338>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	43db      	mvns	r3, r3
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4013      	ands	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006992:	4a34      	ldr	r2, [pc, #208]	; (8006a64 <HAL_GPIO_Init+0x338>)
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006998:	4b32      	ldr	r3, [pc, #200]	; (8006a64 <HAL_GPIO_Init+0x338>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	43db      	mvns	r3, r3
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4013      	ands	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80069bc:	4a29      	ldr	r2, [pc, #164]	; (8006a64 <HAL_GPIO_Init+0x338>)
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80069c2:	4b28      	ldr	r3, [pc, #160]	; (8006a64 <HAL_GPIO_Init+0x338>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	43db      	mvns	r3, r3
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4013      	ands	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80069e6:	4a1f      	ldr	r2, [pc, #124]	; (8006a64 <HAL_GPIO_Init+0x338>)
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80069ec:	4b1d      	ldr	r3, [pc, #116]	; (8006a64 <HAL_GPIO_Init+0x338>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	43db      	mvns	r3, r3
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4013      	ands	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006a10:	4a14      	ldr	r2, [pc, #80]	; (8006a64 <HAL_GPIO_Init+0x338>)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	fa22 f303 	lsr.w	r3, r2, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f47f ae88 	bne.w	800673c <HAL_GPIO_Init+0x10>
  }
}
 8006a2c:	bf00      	nop
 8006a2e:	bf00      	nop
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bc80      	pop	{r7}
 8006a36:	4770      	bx	lr
 8006a38:	40023800 	.word	0x40023800
 8006a3c:	40013800 	.word	0x40013800
 8006a40:	40020000 	.word	0x40020000
 8006a44:	40020400 	.word	0x40020400
 8006a48:	40020800 	.word	0x40020800
 8006a4c:	40020c00 	.word	0x40020c00
 8006a50:	40021000 	.word	0x40021000
 8006a54:	40021400 	.word	0x40021400
 8006a58:	40021800 	.word	0x40021800
 8006a5c:	40021c00 	.word	0x40021c00
 8006a60:	40022000 	.word	0x40022000
 8006a64:	40013c00 	.word	0x40013c00

08006a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691a      	ldr	r2, [r3, #16]
 8006a78:	887b      	ldrh	r3, [r7, #2]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a80:	2301      	movs	r3, #1
 8006a82:	73fb      	strb	r3, [r7, #15]
 8006a84:	e001      	b.n	8006a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a86:	2300      	movs	r3, #0
 8006a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bc80      	pop	{r7}
 8006a94:	4770      	bx	lr

08006a96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b083      	sub	sp, #12
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	807b      	strh	r3, [r7, #2]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006aa6:	787b      	ldrb	r3, [r7, #1]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006aac:	887a      	ldrh	r2, [r7, #2]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006ab2:	e003      	b.n	8006abc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ab4:	887b      	ldrh	r3, [r7, #2]
 8006ab6:	041a      	lsls	r2, r3, #16
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	619a      	str	r2, [r3, #24]
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr

08006ac6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ad8:	887a      	ldrh	r2, [r7, #2]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4013      	ands	r3, r2
 8006ade:	041a      	lsls	r2, r3, #16
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	43d9      	mvns	r1, r3
 8006ae4:	887b      	ldrh	r3, [r7, #2]
 8006ae6:	400b      	ands	r3, r1
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	619a      	str	r2, [r3, #24]
}
 8006aee:	bf00      	nop
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr

08006af8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	4603      	mov	r3, r0
 8006b00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006b02:	4b08      	ldr	r3, [pc, #32]	; (8006b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b04:	695a      	ldr	r2, [r3, #20]
 8006b06:	88fb      	ldrh	r3, [r7, #6]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d006      	beq.n	8006b1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b0e:	4a05      	ldr	r2, [pc, #20]	; (8006b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b10:	88fb      	ldrh	r3, [r7, #6]
 8006b12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b14:	88fb      	ldrh	r3, [r7, #6]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fe f804 	bl	8004b24 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	40013c00 	.word	0x40013c00

08006b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e12b      	b.n	8006d92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d106      	bne.n	8006b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7fe fed6 	bl	8005900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2224      	movs	r2, #36	; 0x24
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0201 	bic.w	r2, r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006b8c:	f002 fd12 	bl	80095b4 <HAL_RCC_GetPCLK1Freq>
 8006b90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	4a81      	ldr	r2, [pc, #516]	; (8006d9c <HAL_I2C_Init+0x274>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d807      	bhi.n	8006bac <HAL_I2C_Init+0x84>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4a80      	ldr	r2, [pc, #512]	; (8006da0 <HAL_I2C_Init+0x278>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	bf94      	ite	ls
 8006ba4:	2301      	movls	r3, #1
 8006ba6:	2300      	movhi	r3, #0
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	e006      	b.n	8006bba <HAL_I2C_Init+0x92>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4a7d      	ldr	r2, [pc, #500]	; (8006da4 <HAL_I2C_Init+0x27c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	bf94      	ite	ls
 8006bb4:	2301      	movls	r3, #1
 8006bb6:	2300      	movhi	r3, #0
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e0e7      	b.n	8006d92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4a78      	ldr	r2, [pc, #480]	; (8006da8 <HAL_I2C_Init+0x280>)
 8006bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bca:	0c9b      	lsrs	r3, r3, #18
 8006bcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	4a6a      	ldr	r2, [pc, #424]	; (8006d9c <HAL_I2C_Init+0x274>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d802      	bhi.n	8006bfc <HAL_I2C_Init+0xd4>
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	e009      	b.n	8006c10 <HAL_I2C_Init+0xe8>
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006c02:	fb02 f303 	mul.w	r3, r2, r3
 8006c06:	4a69      	ldr	r2, [pc, #420]	; (8006dac <HAL_I2C_Init+0x284>)
 8006c08:	fba2 2303 	umull	r2, r3, r2, r3
 8006c0c:	099b      	lsrs	r3, r3, #6
 8006c0e:	3301      	adds	r3, #1
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	6812      	ldr	r2, [r2, #0]
 8006c14:	430b      	orrs	r3, r1
 8006c16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006c22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	495c      	ldr	r1, [pc, #368]	; (8006d9c <HAL_I2C_Init+0x274>)
 8006c2c:	428b      	cmp	r3, r1
 8006c2e:	d819      	bhi.n	8006c64 <HAL_I2C_Init+0x13c>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	1e59      	subs	r1, r3, #1
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c3e:	1c59      	adds	r1, r3, #1
 8006c40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006c44:	400b      	ands	r3, r1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <HAL_I2C_Init+0x138>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	1e59      	subs	r1, r3, #1
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c58:	3301      	adds	r3, #1
 8006c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c5e:	e051      	b.n	8006d04 <HAL_I2C_Init+0x1dc>
 8006c60:	2304      	movs	r3, #4
 8006c62:	e04f      	b.n	8006d04 <HAL_I2C_Init+0x1dc>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d111      	bne.n	8006c90 <HAL_I2C_Init+0x168>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	1e58      	subs	r0, r3, #1
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6859      	ldr	r1, [r3, #4]
 8006c74:	460b      	mov	r3, r1
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	440b      	add	r3, r1
 8006c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c7e:	3301      	adds	r3, #1
 8006c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	bf0c      	ite	eq
 8006c88:	2301      	moveq	r3, #1
 8006c8a:	2300      	movne	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	e012      	b.n	8006cb6 <HAL_I2C_Init+0x18e>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	1e58      	subs	r0, r3, #1
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6859      	ldr	r1, [r3, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	0099      	lsls	r1, r3, #2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	bf0c      	ite	eq
 8006cb0:	2301      	moveq	r3, #1
 8006cb2:	2300      	movne	r3, #0
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <HAL_I2C_Init+0x196>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e022      	b.n	8006d04 <HAL_I2C_Init+0x1dc>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10e      	bne.n	8006ce4 <HAL_I2C_Init+0x1bc>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	1e58      	subs	r0, r3, #1
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6859      	ldr	r1, [r3, #4]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	440b      	add	r3, r1
 8006cd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cd8:	3301      	adds	r3, #1
 8006cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce2:	e00f      	b.n	8006d04 <HAL_I2C_Init+0x1dc>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	1e58      	subs	r0, r3, #1
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6859      	ldr	r1, [r3, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	440b      	add	r3, r1
 8006cf2:	0099      	lsls	r1, r3, #2
 8006cf4:	440b      	add	r3, r1
 8006cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d04:	6879      	ldr	r1, [r7, #4]
 8006d06:	6809      	ldr	r1, [r1, #0]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	69da      	ldr	r2, [r3, #28]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006d32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	6911      	ldr	r1, [r2, #16]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	68d2      	ldr	r2, [r2, #12]
 8006d3e:	4311      	orrs	r1, r2
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	6812      	ldr	r2, [r2, #0]
 8006d44:	430b      	orrs	r3, r1
 8006d46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	695a      	ldr	r2, [r3, #20]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	000186a0 	.word	0x000186a0
 8006da0:	001e847f 	.word	0x001e847f
 8006da4:	003d08ff 	.word	0x003d08ff
 8006da8:	431bde83 	.word	0x431bde83
 8006dac:	10624dd3 	.word	0x10624dd3

08006db0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	4608      	mov	r0, r1
 8006dba:	4611      	mov	r1, r2
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	817b      	strh	r3, [r7, #10]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	813b      	strh	r3, [r7, #8]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006dca:	f7ff f827 	bl	8005e1c <HAL_GetTick>
 8006dce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b20      	cmp	r3, #32
 8006dda:	f040 80d9 	bne.w	8006f90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	2319      	movs	r3, #25
 8006de4:	2201      	movs	r2, #1
 8006de6:	496d      	ldr	r1, [pc, #436]	; (8006f9c <HAL_I2C_Mem_Write+0x1ec>)
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 fc7f 	bl	80076ec <I2C_WaitOnFlagUntilTimeout>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006df4:	2302      	movs	r3, #2
 8006df6:	e0cc      	b.n	8006f92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d101      	bne.n	8006e06 <HAL_I2C_Mem_Write+0x56>
 8006e02:	2302      	movs	r3, #2
 8006e04:	e0c5      	b.n	8006f92 <HAL_I2C_Mem_Write+0x1e2>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d007      	beq.n	8006e2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f042 0201 	orr.w	r2, r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2221      	movs	r2, #33	; 0x21
 8006e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2240      	movs	r2, #64	; 0x40
 8006e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a3a      	ldr	r2, [r7, #32]
 8006e56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4a4d      	ldr	r2, [pc, #308]	; (8006fa0 <HAL_I2C_Mem_Write+0x1f0>)
 8006e6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e6e:	88f8      	ldrh	r0, [r7, #6]
 8006e70:	893a      	ldrh	r2, [r7, #8]
 8006e72:	8979      	ldrh	r1, [r7, #10]
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 fab6 	bl	80073f0 <I2C_RequestMemoryWrite>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d052      	beq.n	8006f30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e081      	b.n	8006f92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 fd00 	bl	8007898 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00d      	beq.n	8006eba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d107      	bne.n	8006eb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e06b      	b.n	8006f92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	781a      	ldrb	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d11b      	bne.n	8006f30 <HAL_I2C_Mem_Write+0x180>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d017      	beq.n	8006f30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	781a      	ldrb	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1aa      	bne.n	8006e8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 fcec 	bl	800791a <I2C_WaitOnBTFFlagUntilTimeout>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00d      	beq.n	8006f64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d107      	bne.n	8006f60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e016      	b.n	8006f92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	e000      	b.n	8006f92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006f90:	2302      	movs	r3, #2
  }
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	00100002 	.word	0x00100002
 8006fa0:	ffff0000 	.word	0xffff0000

08006fa4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08c      	sub	sp, #48	; 0x30
 8006fa8:	af02      	add	r7, sp, #8
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	4608      	mov	r0, r1
 8006fae:	4611      	mov	r1, r2
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	817b      	strh	r3, [r7, #10]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	813b      	strh	r3, [r7, #8]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006fbe:	f7fe ff2d 	bl	8005e1c <HAL_GetTick>
 8006fc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b20      	cmp	r3, #32
 8006fce:	f040 8208 	bne.w	80073e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	2319      	movs	r3, #25
 8006fd8:	2201      	movs	r2, #1
 8006fda:	497b      	ldr	r1, [pc, #492]	; (80071c8 <HAL_I2C_Mem_Read+0x224>)
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 fb85 	bl	80076ec <I2C_WaitOnFlagUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e1fb      	b.n	80073e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <HAL_I2C_Mem_Read+0x56>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e1f4      	b.n	80073e4 <HAL_I2C_Mem_Read+0x440>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b01      	cmp	r3, #1
 800700e:	d007      	beq.n	8007020 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f042 0201 	orr.w	r2, r2, #1
 800701e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800702e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2222      	movs	r2, #34	; 0x22
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2240      	movs	r2, #64	; 0x40
 800703c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800704a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007050:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4a5b      	ldr	r2, [pc, #364]	; (80071cc <HAL_I2C_Mem_Read+0x228>)
 8007060:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007062:	88f8      	ldrh	r0, [r7, #6]
 8007064:	893a      	ldrh	r2, [r7, #8]
 8007066:	8979      	ldrh	r1, [r7, #10]
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	9301      	str	r3, [sp, #4]
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	4603      	mov	r3, r0
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 fa52 	bl	800751c <I2C_RequestMemoryRead>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e1b0      	b.n	80073e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007086:	2b00      	cmp	r3, #0
 8007088:	d113      	bne.n	80070b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800708a:	2300      	movs	r3, #0
 800708c:	623b      	str	r3, [r7, #32]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	623b      	str	r3, [r7, #32]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	623b      	str	r3, [r7, #32]
 800709e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	e184      	b.n	80073bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d11b      	bne.n	80070f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070ca:	2300      	movs	r3, #0
 80070cc:	61fb      	str	r3, [r7, #28]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	61fb      	str	r3, [r7, #28]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	61fb      	str	r3, [r7, #28]
 80070de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	e164      	b.n	80073bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d11b      	bne.n	8007132 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007108:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007118:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800711a:	2300      	movs	r3, #0
 800711c:	61bb      	str	r3, [r7, #24]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	61bb      	str	r3, [r7, #24]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	61bb      	str	r3, [r7, #24]
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	e144      	b.n	80073bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007132:	2300      	movs	r3, #0
 8007134:	617b      	str	r3, [r7, #20]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	617b      	str	r3, [r7, #20]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	617b      	str	r3, [r7, #20]
 8007146:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007148:	e138      	b.n	80073bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714e:	2b03      	cmp	r3, #3
 8007150:	f200 80f1 	bhi.w	8007336 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007158:	2b01      	cmp	r3, #1
 800715a:	d123      	bne.n	80071a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800715c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800715e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 fc1b 	bl	800799c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e139      	b.n	80073e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	691a      	ldr	r2, [r3, #16]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007198:	b29b      	uxth	r3, r3
 800719a:	3b01      	subs	r3, #1
 800719c:	b29a      	uxth	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80071a2:	e10b      	b.n	80073bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d14e      	bne.n	800724a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	2200      	movs	r2, #0
 80071b4:	4906      	ldr	r1, [pc, #24]	; (80071d0 <HAL_I2C_Mem_Read+0x22c>)
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 fa98 	bl	80076ec <I2C_WaitOnFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d008      	beq.n	80071d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e10e      	b.n	80073e4 <HAL_I2C_Mem_Read+0x440>
 80071c6:	bf00      	nop
 80071c8:	00100002 	.word	0x00100002
 80071cc:	ffff0000 	.word	0xffff0000
 80071d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691a      	ldr	r2, [r3, #16]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007200:	3b01      	subs	r3, #1
 8007202:	b29a      	uxth	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800720c:	b29b      	uxth	r3, r3
 800720e:	3b01      	subs	r3, #1
 8007210:	b29a      	uxth	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	691a      	ldr	r2, [r3, #16]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	b2d2      	uxtb	r2, r2
 8007222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007232:	3b01      	subs	r3, #1
 8007234:	b29a      	uxth	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800723e:	b29b      	uxth	r3, r3
 8007240:	3b01      	subs	r3, #1
 8007242:	b29a      	uxth	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007248:	e0b8      	b.n	80073bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007250:	2200      	movs	r2, #0
 8007252:	4966      	ldr	r1, [pc, #408]	; (80073ec <HAL_I2C_Mem_Read+0x448>)
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 fa49 	bl	80076ec <I2C_WaitOnFlagUntilTimeout>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e0bf      	b.n	80073e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	691a      	ldr	r2, [r3, #16]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	b2d2      	uxtb	r2, r2
 8007280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800729c:	b29b      	uxth	r3, r3
 800729e:	3b01      	subs	r3, #1
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ac:	2200      	movs	r2, #0
 80072ae:	494f      	ldr	r1, [pc, #316]	; (80073ec <HAL_I2C_Mem_Read+0x448>)
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 fa1b 	bl	80076ec <I2C_WaitOnFlagUntilTimeout>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e091      	b.n	80073e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691a      	ldr	r2, [r3, #16]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	3b01      	subs	r3, #1
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	b2d2      	uxtb	r2, r2
 800730e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732a:	b29b      	uxth	r3, r3
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007334:	e042      	b.n	80073bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007338:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 fb2e 	bl	800799c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e04c      	b.n	80073e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	691a      	ldr	r2, [r3, #16]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	b2d2      	uxtb	r2, r2
 8007356:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007366:	3b01      	subs	r3, #1
 8007368:	b29a      	uxth	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007372:	b29b      	uxth	r3, r3
 8007374:	3b01      	subs	r3, #1
 8007376:	b29a      	uxth	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b04      	cmp	r3, #4
 8007388:	d118      	bne.n	80073bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	691a      	ldr	r2, [r3, #16]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	b2d2      	uxtb	r2, r2
 8007396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f47f aec2 	bne.w	800714a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	e000      	b.n	80073e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80073e2:	2302      	movs	r3, #2
  }
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3728      	adds	r7, #40	; 0x28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	00010004 	.word	0x00010004

080073f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af02      	add	r7, sp, #8
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	4608      	mov	r0, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	461a      	mov	r2, r3
 80073fe:	4603      	mov	r3, r0
 8007400:	817b      	strh	r3, [r7, #10]
 8007402:	460b      	mov	r3, r1
 8007404:	813b      	strh	r3, [r7, #8]
 8007406:	4613      	mov	r3, r2
 8007408:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007418:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	2200      	movs	r2, #0
 8007422:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 f960 	bl	80076ec <I2C_WaitOnFlagUntilTimeout>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00d      	beq.n	800744e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007440:	d103      	bne.n	800744a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007448:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e05f      	b.n	800750e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800744e:	897b      	ldrh	r3, [r7, #10]
 8007450:	b2db      	uxtb	r3, r3
 8007452:	461a      	mov	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800745c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	6a3a      	ldr	r2, [r7, #32]
 8007462:	492d      	ldr	r1, [pc, #180]	; (8007518 <I2C_RequestMemoryWrite+0x128>)
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 f998 	bl	800779a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e04c      	b.n	800750e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007474:	2300      	movs	r3, #0
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	617b      	str	r3, [r7, #20]
 8007488:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800748a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800748c:	6a39      	ldr	r1, [r7, #32]
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 fa02 	bl	8007898 <I2C_WaitOnTXEFlagUntilTimeout>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00d      	beq.n	80074b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749e:	2b04      	cmp	r3, #4
 80074a0:	d107      	bne.n	80074b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e02b      	b.n	800750e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074b6:	88fb      	ldrh	r3, [r7, #6]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d105      	bne.n	80074c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074bc:	893b      	ldrh	r3, [r7, #8]
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	611a      	str	r2, [r3, #16]
 80074c6:	e021      	b.n	800750c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80074c8:	893b      	ldrh	r3, [r7, #8]
 80074ca:	0a1b      	lsrs	r3, r3, #8
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d8:	6a39      	ldr	r1, [r7, #32]
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 f9dc 	bl	8007898 <I2C_WaitOnTXEFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00d      	beq.n	8007502 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d107      	bne.n	80074fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e005      	b.n	800750e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007502:	893b      	ldrh	r3, [r7, #8]
 8007504:	b2da      	uxtb	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	00010002 	.word	0x00010002

0800751c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af02      	add	r7, sp, #8
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	4608      	mov	r0, r1
 8007526:	4611      	mov	r1, r2
 8007528:	461a      	mov	r2, r3
 800752a:	4603      	mov	r3, r0
 800752c:	817b      	strh	r3, [r7, #10]
 800752e:	460b      	mov	r3, r1
 8007530:	813b      	strh	r3, [r7, #8]
 8007532:	4613      	mov	r3, r2
 8007534:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007544:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007554:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	2200      	movs	r2, #0
 800755e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 f8c2 	bl	80076ec <I2C_WaitOnFlagUntilTimeout>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00d      	beq.n	800758a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800757c:	d103      	bne.n	8007586 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007584:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e0aa      	b.n	80076e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800758a:	897b      	ldrh	r3, [r7, #10]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	461a      	mov	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007598:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	6a3a      	ldr	r2, [r7, #32]
 800759e:	4952      	ldr	r1, [pc, #328]	; (80076e8 <I2C_RequestMemoryRead+0x1cc>)
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 f8fa 	bl	800779a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e097      	b.n	80076e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075b0:	2300      	movs	r3, #0
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c8:	6a39      	ldr	r1, [r7, #32]
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 f964 	bl	8007898 <I2C_WaitOnTXEFlagUntilTimeout>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00d      	beq.n	80075f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	2b04      	cmp	r3, #4
 80075dc:	d107      	bne.n	80075ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e076      	b.n	80076e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075f2:	88fb      	ldrh	r3, [r7, #6]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d105      	bne.n	8007604 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075f8:	893b      	ldrh	r3, [r7, #8]
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	611a      	str	r2, [r3, #16]
 8007602:	e021      	b.n	8007648 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007604:	893b      	ldrh	r3, [r7, #8]
 8007606:	0a1b      	lsrs	r3, r3, #8
 8007608:	b29b      	uxth	r3, r3
 800760a:	b2da      	uxtb	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007614:	6a39      	ldr	r1, [r7, #32]
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 f93e 	bl	8007898 <I2C_WaitOnTXEFlagUntilTimeout>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00d      	beq.n	800763e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007626:	2b04      	cmp	r3, #4
 8007628:	d107      	bne.n	800763a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007638:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e050      	b.n	80076e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800763e:	893b      	ldrh	r3, [r7, #8]
 8007640:	b2da      	uxtb	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800764a:	6a39      	ldr	r1, [r7, #32]
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 f923 	bl	8007898 <I2C_WaitOnTXEFlagUntilTimeout>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00d      	beq.n	8007674 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765c:	2b04      	cmp	r3, #4
 800765e:	d107      	bne.n	8007670 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800766e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e035      	b.n	80076e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007682:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	2200      	movs	r2, #0
 800768c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 f82b 	bl	80076ec <I2C_WaitOnFlagUntilTimeout>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00d      	beq.n	80076b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076aa:	d103      	bne.n	80076b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e013      	b.n	80076e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80076b8:	897b      	ldrh	r3, [r7, #10]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	f043 0301 	orr.w	r3, r3, #1
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	6a3a      	ldr	r2, [r7, #32]
 80076cc:	4906      	ldr	r1, [pc, #24]	; (80076e8 <I2C_RequestMemoryRead+0x1cc>)
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 f863 	bl	800779a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e000      	b.n	80076e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3718      	adds	r7, #24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	00010002 	.word	0x00010002

080076ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	603b      	str	r3, [r7, #0]
 80076f8:	4613      	mov	r3, r2
 80076fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076fc:	e025      	b.n	800774a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007704:	d021      	beq.n	800774a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007706:	f7fe fb89 	bl	8005e1c <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	429a      	cmp	r2, r3
 8007714:	d302      	bcc.n	800771c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d116      	bne.n	800774a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2220      	movs	r2, #32
 8007726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	f043 0220 	orr.w	r2, r3, #32
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e023      	b.n	8007792 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	0c1b      	lsrs	r3, r3, #16
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b01      	cmp	r3, #1
 8007752:	d10d      	bne.n	8007770 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	43da      	mvns	r2, r3
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	4013      	ands	r3, r2
 8007760:	b29b      	uxth	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	bf0c      	ite	eq
 8007766:	2301      	moveq	r3, #1
 8007768:	2300      	movne	r3, #0
 800776a:	b2db      	uxtb	r3, r3
 800776c:	461a      	mov	r2, r3
 800776e:	e00c      	b.n	800778a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	43da      	mvns	r2, r3
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4013      	ands	r3, r2
 800777c:	b29b      	uxth	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	bf0c      	ite	eq
 8007782:	2301      	moveq	r3, #1
 8007784:	2300      	movne	r3, #0
 8007786:	b2db      	uxtb	r3, r3
 8007788:	461a      	mov	r2, r3
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	429a      	cmp	r2, r3
 800778e:	d0b6      	beq.n	80076fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	607a      	str	r2, [r7, #4]
 80077a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80077a8:	e051      	b.n	800784e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077b8:	d123      	bne.n	8007802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2220      	movs	r2, #32
 80077de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	f043 0204 	orr.w	r2, r3, #4
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e046      	b.n	8007890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007808:	d021      	beq.n	800784e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800780a:	f7fe fb07 	bl	8005e1c <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	429a      	cmp	r2, r3
 8007818:	d302      	bcc.n	8007820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d116      	bne.n	800784e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2220      	movs	r2, #32
 800782a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783a:	f043 0220 	orr.w	r2, r3, #32
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e020      	b.n	8007890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	0c1b      	lsrs	r3, r3, #16
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b01      	cmp	r3, #1
 8007856:	d10c      	bne.n	8007872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	43da      	mvns	r2, r3
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	4013      	ands	r3, r2
 8007864:	b29b      	uxth	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	bf14      	ite	ne
 800786a:	2301      	movne	r3, #1
 800786c:	2300      	moveq	r3, #0
 800786e:	b2db      	uxtb	r3, r3
 8007870:	e00b      	b.n	800788a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	43da      	mvns	r2, r3
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	4013      	ands	r3, r2
 800787e:	b29b      	uxth	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	bf14      	ite	ne
 8007884:	2301      	movne	r3, #1
 8007886:	2300      	moveq	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d18d      	bne.n	80077aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078a4:	e02d      	b.n	8007902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f000 f8ce 	bl	8007a48 <I2C_IsAcknowledgeFailed>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e02d      	b.n	8007912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078bc:	d021      	beq.n	8007902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078be:	f7fe faad 	bl	8005e1c <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d302      	bcc.n	80078d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d116      	bne.n	8007902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2220      	movs	r2, #32
 80078de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	f043 0220 	orr.w	r2, r3, #32
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e007      	b.n	8007912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800790c:	2b80      	cmp	r3, #128	; 0x80
 800790e:	d1ca      	bne.n	80078a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007926:	e02d      	b.n	8007984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 f88d 	bl	8007a48 <I2C_IsAcknowledgeFailed>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e02d      	b.n	8007994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793e:	d021      	beq.n	8007984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007940:	f7fe fa6c 	bl	8005e1c <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	429a      	cmp	r2, r3
 800794e:	d302      	bcc.n	8007956 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d116      	bne.n	8007984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2220      	movs	r2, #32
 8007960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007970:	f043 0220 	orr.w	r2, r3, #32
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e007      	b.n	8007994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	f003 0304 	and.w	r3, r3, #4
 800798e:	2b04      	cmp	r3, #4
 8007990:	d1ca      	bne.n	8007928 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80079a8:	e042      	b.n	8007a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	f003 0310 	and.w	r3, r3, #16
 80079b4:	2b10      	cmp	r3, #16
 80079b6:	d119      	bne.n	80079ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f06f 0210 	mvn.w	r2, #16
 80079c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2220      	movs	r2, #32
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e029      	b.n	8007a40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ec:	f7fe fa16 	bl	8005e1c <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d302      	bcc.n	8007a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d116      	bne.n	8007a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	f043 0220 	orr.w	r2, r3, #32
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e007      	b.n	8007a40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3a:	2b40      	cmp	r3, #64	; 0x40
 8007a3c:	d1b5      	bne.n	80079aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a5e:	d11b      	bne.n	8007a98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a84:	f043 0204 	orr.w	r2, r3, #4
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e000      	b.n	8007a9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bc80      	pop	{r7}
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aa6:	b08f      	sub	sp, #60	; 0x3c
 8007aa8:	af0a      	add	r7, sp, #40	; 0x28
 8007aaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e10f      	b.n	8007cd6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d106      	bne.n	8007ad6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f005 fc95 	bl	800d400 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2203      	movs	r2, #3
 8007ada:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d102      	bne.n	8007af0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f002 fc85 	bl	800a404 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	603b      	str	r3, [r7, #0]
 8007b00:	687e      	ldr	r6, [r7, #4]
 8007b02:	466d      	mov	r5, sp
 8007b04:	f106 0410 	add.w	r4, r6, #16
 8007b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007b14:	e885 0003 	stmia.w	r5, {r0, r1}
 8007b18:	1d33      	adds	r3, r6, #4
 8007b1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b1c:	6838      	ldr	r0, [r7, #0]
 8007b1e:	f002 fb67 	bl	800a1f0 <USB_CoreInit>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d005      	beq.n	8007b34 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e0d0      	b.n	8007cd6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2100      	movs	r1, #0
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f002 fc72 	bl	800a424 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b40:	2300      	movs	r3, #0
 8007b42:	73fb      	strb	r3, [r7, #15]
 8007b44:	e04a      	b.n	8007bdc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007b46:	7bfa      	ldrb	r2, [r7, #15]
 8007b48:	6879      	ldr	r1, [r7, #4]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	1a9b      	subs	r3, r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	440b      	add	r3, r1
 8007b54:	333d      	adds	r3, #61	; 0x3d
 8007b56:	2201      	movs	r2, #1
 8007b58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007b5a:	7bfa      	ldrb	r2, [r7, #15]
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	00db      	lsls	r3, r3, #3
 8007b62:	1a9b      	subs	r3, r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	440b      	add	r3, r1
 8007b68:	333c      	adds	r3, #60	; 0x3c
 8007b6a:	7bfa      	ldrb	r2, [r7, #15]
 8007b6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007b6e:	7bfa      	ldrb	r2, [r7, #15]
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	b298      	uxth	r0, r3
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	4613      	mov	r3, r2
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	1a9b      	subs	r3, r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	440b      	add	r3, r1
 8007b80:	3342      	adds	r3, #66	; 0x42
 8007b82:	4602      	mov	r2, r0
 8007b84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007b86:	7bfa      	ldrb	r2, [r7, #15]
 8007b88:	6879      	ldr	r1, [r7, #4]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	00db      	lsls	r3, r3, #3
 8007b8e:	1a9b      	subs	r3, r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	440b      	add	r3, r1
 8007b94:	333f      	adds	r3, #63	; 0x3f
 8007b96:	2200      	movs	r2, #0
 8007b98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007b9a:	7bfa      	ldrb	r2, [r7, #15]
 8007b9c:	6879      	ldr	r1, [r7, #4]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	00db      	lsls	r3, r3, #3
 8007ba2:	1a9b      	subs	r3, r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	440b      	add	r3, r1
 8007ba8:	3344      	adds	r3, #68	; 0x44
 8007baa:	2200      	movs	r2, #0
 8007bac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007bae:	7bfa      	ldrb	r2, [r7, #15]
 8007bb0:	6879      	ldr	r1, [r7, #4]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	00db      	lsls	r3, r3, #3
 8007bb6:	1a9b      	subs	r3, r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	440b      	add	r3, r1
 8007bbc:	3348      	adds	r3, #72	; 0x48
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007bc2:	7bfa      	ldrb	r2, [r7, #15]
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	1a9b      	subs	r3, r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	440b      	add	r3, r1
 8007bd0:	3350      	adds	r3, #80	; 0x50
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	73fb      	strb	r3, [r7, #15]
 8007bdc:	7bfa      	ldrb	r2, [r7, #15]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d3af      	bcc.n	8007b46 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007be6:	2300      	movs	r3, #0
 8007be8:	73fb      	strb	r3, [r7, #15]
 8007bea:	e044      	b.n	8007c76 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007bec:	7bfa      	ldrb	r2, [r7, #15]
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	1a9b      	subs	r3, r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	440b      	add	r3, r1
 8007bfa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007c02:	7bfa      	ldrb	r2, [r7, #15]
 8007c04:	6879      	ldr	r1, [r7, #4]
 8007c06:	4613      	mov	r3, r2
 8007c08:	00db      	lsls	r3, r3, #3
 8007c0a:	1a9b      	subs	r3, r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	440b      	add	r3, r1
 8007c10:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007c14:	7bfa      	ldrb	r2, [r7, #15]
 8007c16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007c18:	7bfa      	ldrb	r2, [r7, #15]
 8007c1a:	6879      	ldr	r1, [r7, #4]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	00db      	lsls	r3, r3, #3
 8007c20:	1a9b      	subs	r3, r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	440b      	add	r3, r1
 8007c26:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007c2e:	7bfa      	ldrb	r2, [r7, #15]
 8007c30:	6879      	ldr	r1, [r7, #4]
 8007c32:	4613      	mov	r3, r2
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	1a9b      	subs	r3, r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	440b      	add	r3, r1
 8007c3c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007c40:	2200      	movs	r2, #0
 8007c42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007c44:	7bfa      	ldrb	r2, [r7, #15]
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	00db      	lsls	r3, r3, #3
 8007c4c:	1a9b      	subs	r3, r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	440b      	add	r3, r1
 8007c52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007c5a:	7bfa      	ldrb	r2, [r7, #15]
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	00db      	lsls	r3, r3, #3
 8007c62:	1a9b      	subs	r3, r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	440b      	add	r3, r1
 8007c68:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	3301      	adds	r3, #1
 8007c74:	73fb      	strb	r3, [r7, #15]
 8007c76:	7bfa      	ldrb	r2, [r7, #15]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d3b5      	bcc.n	8007bec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	603b      	str	r3, [r7, #0]
 8007c86:	687e      	ldr	r6, [r7, #4]
 8007c88:	466d      	mov	r5, sp
 8007c8a:	f106 0410 	add.w	r4, r6, #16
 8007c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007c9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8007c9e:	1d33      	adds	r3, r6, #4
 8007ca0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ca2:	6838      	ldr	r0, [r7, #0]
 8007ca4:	f002 fc0a 	bl	800a4bc <USB_DevInit>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d005      	beq.n	8007cba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e00d      	b.n	8007cd6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f003 fc7b 	bl	800b5ca <USB_DevDisconnect>

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007cde <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b082      	sub	sp, #8
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d101      	bne.n	8007cf4 <HAL_PCD_Start+0x16>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e012      	b.n	8007d1a <HAL_PCD_Start+0x3c>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f002 fb6f 	bl	800a3e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f003 fc3d 	bl	800b58a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007d22:	b590      	push	{r4, r7, lr}
 8007d24:	b08d      	sub	sp, #52	; 0x34
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f003 fcf4 	bl	800b726 <USB_GetMode>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f040 838f 	bne.w	8008464 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f003 fc5d 	bl	800b60a <USB_ReadInterrupts>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 8385 	beq.w	8008462 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f003 fc54 	bl	800b60a <USB_ReadInterrupts>
 8007d62:	4603      	mov	r3, r0
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d107      	bne.n	8007d7c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695a      	ldr	r2, [r3, #20]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f002 0202 	and.w	r2, r2, #2
 8007d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f003 fc42 	bl	800b60a <USB_ReadInterrupts>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f003 0310 	and.w	r3, r3, #16
 8007d8c:	2b10      	cmp	r3, #16
 8007d8e:	d161      	bne.n	8007e54 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699a      	ldr	r2, [r3, #24]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0210 	bic.w	r2, r2, #16
 8007d9e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	6a1b      	ldr	r3, [r3, #32]
 8007da4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	f003 020f 	and.w	r2, r3, #15
 8007dac:	4613      	mov	r3, r2
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	1a9b      	subs	r3, r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	4413      	add	r3, r2
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	0c5b      	lsrs	r3, r3, #17
 8007dc4:	f003 030f 	and.w	r3, r3, #15
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d124      	bne.n	8007e16 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d035      	beq.n	8007e44 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	091b      	lsrs	r3, r3, #4
 8007de0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007de2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	461a      	mov	r2, r3
 8007dea:	6a38      	ldr	r0, [r7, #32]
 8007dec:	f003 fa7f 	bl	800b2ee <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	091b      	lsrs	r3, r3, #4
 8007df8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007dfc:	441a      	add	r2, r3
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	699a      	ldr	r2, [r3, #24]
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	091b      	lsrs	r3, r3, #4
 8007e0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e0e:	441a      	add	r2, r3
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	619a      	str	r2, [r3, #24]
 8007e14:	e016      	b.n	8007e44 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	0c5b      	lsrs	r3, r3, #17
 8007e1a:	f003 030f 	and.w	r3, r3, #15
 8007e1e:	2b06      	cmp	r3, #6
 8007e20:	d110      	bne.n	8007e44 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007e28:	2208      	movs	r2, #8
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6a38      	ldr	r0, [r7, #32]
 8007e2e:	f003 fa5e 	bl	800b2ee <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	699a      	ldr	r2, [r3, #24]
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	091b      	lsrs	r3, r3, #4
 8007e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e3e:	441a      	add	r2, r3
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	699a      	ldr	r2, [r3, #24]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 0210 	orr.w	r2, r2, #16
 8007e52:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f003 fbd6 	bl	800b60a <USB_ReadInterrupts>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e68:	d16e      	bne.n	8007f48 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f003 fbdb 	bl	800b62e <USB_ReadDevAllOutEpInterrupt>
 8007e78:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007e7a:	e062      	b.n	8007f42 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d057      	beq.n	8007f36 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e8c:	b2d2      	uxtb	r2, r2
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f003 fbfe 	bl	800b692 <USB_ReadDevOutEPInterrupt>
 8007e96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00c      	beq.n	8007ebc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eae:	461a      	mov	r2, r3
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fda2 	bl	8008a00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	f003 0308 	and.w	r3, r3, #8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00c      	beq.n	8007ee0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	2308      	movs	r3, #8
 8007ed6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fe9c 	bl	8008c18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	f003 0310 	and.w	r3, r3, #16
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d008      	beq.n	8007efc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	2310      	movs	r3, #16
 8007efa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d008      	beq.n	8007f18 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	015a      	lsls	r2, r3, #5
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f12:	461a      	mov	r2, r3
 8007f14:	2320      	movs	r3, #32
 8007f16:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d009      	beq.n	8007f36 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f34:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	3301      	adds	r3, #1
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3e:	085b      	lsrs	r3, r3, #1
 8007f40:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d199      	bne.n	8007e7c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f003 fb5c 	bl	800b60a <USB_ReadInterrupts>
 8007f52:	4603      	mov	r3, r0
 8007f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f5c:	f040 80c0 	bne.w	80080e0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f003 fb7b 	bl	800b660 <USB_ReadDevAllInEpInterrupt>
 8007f6a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007f70:	e0b2      	b.n	80080d8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 80a7 	beq.w	80080cc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f84:	b2d2      	uxtb	r2, r2
 8007f86:	4611      	mov	r1, r2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f003 fb9f 	bl	800b6cc <USB_ReadDevInEPInterrupt>
 8007f8e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d057      	beq.n	800804a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	f003 030f 	and.w	r3, r3, #15
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	43db      	mvns	r3, r3
 8007fb4:	69f9      	ldr	r1, [r7, #28]
 8007fb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fba:	4013      	ands	r3, r2
 8007fbc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fca:	461a      	mov	r2, r3
 8007fcc:	2301      	movs	r3, #1
 8007fce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d132      	bne.n	800803e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fdc:	4613      	mov	r3, r2
 8007fde:	00db      	lsls	r3, r3, #3
 8007fe0:	1a9b      	subs	r3, r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	440b      	add	r3, r1
 8007fe6:	3348      	adds	r3, #72	; 0x48
 8007fe8:	6819      	ldr	r1, [r3, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fee:	4613      	mov	r3, r2
 8007ff0:	00db      	lsls	r3, r3, #3
 8007ff2:	1a9b      	subs	r3, r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4403      	add	r3, r0
 8007ff8:	3344      	adds	r3, #68	; 0x44
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4419      	add	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008002:	4613      	mov	r3, r2
 8008004:	00db      	lsls	r3, r3, #3
 8008006:	1a9b      	subs	r3, r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4403      	add	r3, r0
 800800c:	3348      	adds	r3, #72	; 0x48
 800800e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	2b00      	cmp	r3, #0
 8008014:	d113      	bne.n	800803e <HAL_PCD_IRQHandler+0x31c>
 8008016:	6879      	ldr	r1, [r7, #4]
 8008018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800801a:	4613      	mov	r3, r2
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	1a9b      	subs	r3, r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	3350      	adds	r3, #80	; 0x50
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d108      	bne.n	800803e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6818      	ldr	r0, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008036:	461a      	mov	r2, r3
 8008038:	2101      	movs	r1, #1
 800803a:	f003 fba3 	bl	800b784 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	b2db      	uxtb	r3, r3
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f005 fa5c 	bl	800d502 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	f003 0308 	and.w	r3, r3, #8
 8008050:	2b00      	cmp	r3, #0
 8008052:	d008      	beq.n	8008066 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	4413      	add	r3, r2
 800805c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008060:	461a      	mov	r2, r3
 8008062:	2308      	movs	r3, #8
 8008064:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	f003 0310 	and.w	r3, r3, #16
 800806c:	2b00      	cmp	r3, #0
 800806e:	d008      	beq.n	8008082 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807c:	461a      	mov	r2, r3
 800807e:	2310      	movs	r3, #16
 8008080:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008088:	2b00      	cmp	r3, #0
 800808a:	d008      	beq.n	800809e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008098:	461a      	mov	r2, r3
 800809a:	2340      	movs	r3, #64	; 0x40
 800809c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f003 0302 	and.w	r3, r3, #2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d008      	beq.n	80080ba <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b4:	461a      	mov	r2, r3
 80080b6:	2302      	movs	r3, #2
 80080b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80080c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fc0c 	bl	80088e4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ce:	3301      	adds	r3, #1
 80080d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	085b      	lsrs	r3, r3, #1
 80080d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f47f af49 	bne.w	8007f72 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f003 fa90 	bl	800b60a <USB_ReadInterrupts>
 80080ea:	4603      	mov	r3, r0
 80080ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080f4:	d114      	bne.n	8008120 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008104:	f023 0301 	bic.w	r3, r3, #1
 8008108:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f005 fa70 	bl	800d5f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	695a      	ldr	r2, [r3, #20]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800811e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4618      	mov	r0, r3
 8008126:	f003 fa70 	bl	800b60a <USB_ReadInterrupts>
 800812a:	4603      	mov	r3, r0
 800812c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008134:	d112      	bne.n	800815c <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b01      	cmp	r3, #1
 8008144:	d102      	bne.n	800814c <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f005 fa2c 	bl	800d5a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	695a      	ldr	r2, [r3, #20]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800815a:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4618      	mov	r0, r3
 8008162:	f003 fa52 	bl	800b60a <USB_ReadInterrupts>
 8008166:	4603      	mov	r3, r0
 8008168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800816c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008170:	f040 80c7 	bne.w	8008302 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	69fa      	ldr	r2, [r7, #28]
 800817e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008182:	f023 0301 	bic.w	r3, r3, #1
 8008186:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2110      	movs	r1, #16
 800818e:	4618      	mov	r0, r3
 8008190:	f002 faf8 	bl	800a784 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008194:	2300      	movs	r3, #0
 8008196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008198:	e056      	b.n	8008248 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800819a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a6:	461a      	mov	r2, r3
 80081a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80081ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80081ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081be:	0151      	lsls	r1, r2, #5
 80081c0:	69fa      	ldr	r2, [r7, #28]
 80081c2:	440a      	add	r2, r1
 80081c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081cc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80081ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081de:	0151      	lsls	r1, r2, #5
 80081e0:	69fa      	ldr	r2, [r7, #28]
 80081e2:	440a      	add	r2, r1
 80081e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	015a      	lsls	r2, r3, #5
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	4413      	add	r3, r2
 80081f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fa:	461a      	mov	r2, r3
 80081fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008200:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008212:	0151      	lsls	r1, r2, #5
 8008214:	69fa      	ldr	r2, [r7, #28]
 8008216:	440a      	add	r2, r1
 8008218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800821c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008220:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	4413      	add	r3, r2
 800822a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008232:	0151      	lsls	r1, r2, #5
 8008234:	69fa      	ldr	r2, [r7, #28]
 8008236:	440a      	add	r2, r1
 8008238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800823c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008240:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008244:	3301      	adds	r3, #1
 8008246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800824e:	429a      	cmp	r2, r3
 8008250:	d3a3      	bcc.n	800819a <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	69fa      	ldr	r2, [r7, #28]
 800825c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008260:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008264:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826a:	2b00      	cmp	r3, #0
 800826c:	d016      	beq.n	800829c <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008278:	69fa      	ldr	r2, [r7, #28]
 800827a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800827e:	f043 030b 	orr.w	r3, r3, #11
 8008282:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800828c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800828e:	69fa      	ldr	r2, [r7, #28]
 8008290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008294:	f043 030b 	orr.w	r3, r3, #11
 8008298:	6453      	str	r3, [r2, #68]	; 0x44
 800829a:	e015      	b.n	80082c8 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80082ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80082b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	69fa      	ldr	r2, [r7, #28]
 80082be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082c2:	f043 030b 	orr.w	r3, r3, #11
 80082c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	69fa      	ldr	r2, [r7, #28]
 80082d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80082da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80082ec:	461a      	mov	r2, r3
 80082ee:	f003 fa49 	bl	800b784 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	695a      	ldr	r2, [r3, #20]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008300:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4618      	mov	r0, r3
 8008308:	f003 f97f 	bl	800b60a <USB_ReadInterrupts>
 800830c:	4603      	mov	r3, r0
 800830e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008316:	d124      	bne.n	8008362 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4618      	mov	r0, r3
 800831e:	f003 fa0f 	bl	800b740 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4618      	mov	r0, r3
 8008328:	f002 fa88 	bl	800a83c <USB_GetDevSpeed>
 800832c:	4603      	mov	r3, r0
 800832e:	461a      	mov	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681c      	ldr	r4, [r3, #0]
 8008338:	f001 f932 	bl	80095a0 <HAL_RCC_GetHCLKFreq>
 800833c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008342:	b2db      	uxtb	r3, r3
 8008344:	461a      	mov	r2, r3
 8008346:	4620      	mov	r0, r4
 8008348:	f001 ffaa 	bl	800a2a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f005 f900 	bl	800d552 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	695a      	ldr	r2, [r3, #20]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008360:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4618      	mov	r0, r3
 8008368:	f003 f94f 	bl	800b60a <USB_ReadInterrupts>
 800836c:	4603      	mov	r3, r0
 800836e:	f003 0308 	and.w	r3, r3, #8
 8008372:	2b08      	cmp	r3, #8
 8008374:	d10a      	bne.n	800838c <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f005 f8dd 	bl	800d536 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695a      	ldr	r2, [r3, #20]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f002 0208 	and.w	r2, r2, #8
 800838a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4618      	mov	r0, r3
 8008392:	f003 f93a 	bl	800b60a <USB_ReadInterrupts>
 8008396:	4603      	mov	r3, r0
 8008398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800839c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083a0:	d10f      	bne.n	80083c2 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f005 f93f 	bl	800d630 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	695a      	ldr	r2, [r3, #20]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80083c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f003 f91f 	bl	800b60a <USB_ReadInterrupts>
 80083cc:	4603      	mov	r3, r0
 80083ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083d6:	d10f      	bne.n	80083f8 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80083d8:	2300      	movs	r3, #0
 80083da:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	4619      	mov	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f005 f912 	bl	800d60c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	695a      	ldr	r2, [r3, #20]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80083f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f003 f904 	bl	800b60a <USB_ReadInterrupts>
 8008402:	4603      	mov	r3, r0
 8008404:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800840c:	d10a      	bne.n	8008424 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f005 f920 	bl	800d654 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	695a      	ldr	r2, [r3, #20]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008422:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4618      	mov	r0, r3
 800842a:	f003 f8ee 	bl	800b60a <USB_ReadInterrupts>
 800842e:	4603      	mov	r3, r0
 8008430:	f003 0304 	and.w	r3, r3, #4
 8008434:	2b04      	cmp	r3, #4
 8008436:	d115      	bne.n	8008464 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	f003 0304 	and.w	r3, r3, #4
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f005 f910 	bl	800d670 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6859      	ldr	r1, [r3, #4]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	430a      	orrs	r2, r1
 800845e:	605a      	str	r2, [r3, #4]
 8008460:	e000      	b.n	8008464 <HAL_PCD_IRQHandler+0x742>
      return;
 8008462:	bf00      	nop
    }
  }
}
 8008464:	3734      	adds	r7, #52	; 0x34
 8008466:	46bd      	mov	sp, r7
 8008468:	bd90      	pop	{r4, r7, pc}

0800846a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b082      	sub	sp, #8
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	460b      	mov	r3, r1
 8008474:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800847c:	2b01      	cmp	r3, #1
 800847e:	d101      	bne.n	8008484 <HAL_PCD_SetAddress+0x1a>
 8008480:	2302      	movs	r3, #2
 8008482:	e013      	b.n	80084ac <HAL_PCD_SetAddress+0x42>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	78fa      	ldrb	r2, [r7, #3]
 8008490:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	78fa      	ldrb	r2, [r7, #3]
 800849a:	4611      	mov	r1, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f003 f84f 	bl	800b540 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	4608      	mov	r0, r1
 80084be:	4611      	mov	r1, r2
 80084c0:	461a      	mov	r2, r3
 80084c2:	4603      	mov	r3, r0
 80084c4:	70fb      	strb	r3, [r7, #3]
 80084c6:	460b      	mov	r3, r1
 80084c8:	803b      	strh	r3, [r7, #0]
 80084ca:	4613      	mov	r3, r2
 80084cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80084d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	da0f      	bge.n	80084fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084da:	78fb      	ldrb	r3, [r7, #3]
 80084dc:	f003 020f 	and.w	r2, r3, #15
 80084e0:	4613      	mov	r3, r2
 80084e2:	00db      	lsls	r3, r3, #3
 80084e4:	1a9b      	subs	r3, r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	3338      	adds	r3, #56	; 0x38
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	4413      	add	r3, r2
 80084ee:	3304      	adds	r3, #4
 80084f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2201      	movs	r2, #1
 80084f6:	705a      	strb	r2, [r3, #1]
 80084f8:	e00f      	b.n	800851a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084fa:	78fb      	ldrb	r3, [r7, #3]
 80084fc:	f003 020f 	and.w	r2, r3, #15
 8008500:	4613      	mov	r3, r2
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	1a9b      	subs	r3, r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	4413      	add	r3, r2
 8008510:	3304      	adds	r3, #4
 8008512:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800851a:	78fb      	ldrb	r3, [r7, #3]
 800851c:	f003 030f 	and.w	r3, r3, #15
 8008520:	b2da      	uxtb	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008526:	883a      	ldrh	r2, [r7, #0]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	78ba      	ldrb	r2, [r7, #2]
 8008530:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	785b      	ldrb	r3, [r3, #1]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d004      	beq.n	8008544 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	b29a      	uxth	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008544:	78bb      	ldrb	r3, [r7, #2]
 8008546:	2b02      	cmp	r3, #2
 8008548:	d102      	bne.n	8008550 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008556:	2b01      	cmp	r3, #1
 8008558:	d101      	bne.n	800855e <HAL_PCD_EP_Open+0xaa>
 800855a:	2302      	movs	r3, #2
 800855c:	e00e      	b.n	800857c <HAL_PCD_EP_Open+0xc8>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68f9      	ldr	r1, [r7, #12]
 800856c:	4618      	mov	r0, r3
 800856e:	f002 f989 	bl	800a884 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800857a:	7afb      	ldrb	r3, [r7, #11]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008594:	2b00      	cmp	r3, #0
 8008596:	da0f      	bge.n	80085b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008598:	78fb      	ldrb	r3, [r7, #3]
 800859a:	f003 020f 	and.w	r2, r3, #15
 800859e:	4613      	mov	r3, r2
 80085a0:	00db      	lsls	r3, r3, #3
 80085a2:	1a9b      	subs	r3, r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	3338      	adds	r3, #56	; 0x38
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	4413      	add	r3, r2
 80085ac:	3304      	adds	r3, #4
 80085ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2201      	movs	r2, #1
 80085b4:	705a      	strb	r2, [r3, #1]
 80085b6:	e00f      	b.n	80085d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	f003 020f 	and.w	r2, r3, #15
 80085be:	4613      	mov	r3, r2
 80085c0:	00db      	lsls	r3, r3, #3
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	4413      	add	r3, r2
 80085ce:	3304      	adds	r3, #4
 80085d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80085d8:	78fb      	ldrb	r3, [r7, #3]
 80085da:	f003 030f 	and.w	r3, r3, #15
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d101      	bne.n	80085f2 <HAL_PCD_EP_Close+0x6e>
 80085ee:	2302      	movs	r3, #2
 80085f0:	e00e      	b.n	8008610 <HAL_PCD_EP_Close+0x8c>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68f9      	ldr	r1, [r7, #12]
 8008600:	4618      	mov	r0, r3
 8008602:	f002 f9c5 	bl	800a990 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	607a      	str	r2, [r7, #4]
 8008622:	603b      	str	r3, [r7, #0]
 8008624:	460b      	mov	r3, r1
 8008626:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008628:	7afb      	ldrb	r3, [r7, #11]
 800862a:	f003 020f 	and.w	r2, r3, #15
 800862e:	4613      	mov	r3, r2
 8008630:	00db      	lsls	r3, r3, #3
 8008632:	1a9b      	subs	r3, r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	4413      	add	r3, r2
 800863e:	3304      	adds	r3, #4
 8008640:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2200      	movs	r2, #0
 8008652:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	2200      	movs	r2, #0
 8008658:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800865a:	7afb      	ldrb	r3, [r7, #11]
 800865c:	f003 030f 	and.w	r3, r3, #15
 8008660:	b2da      	uxtb	r2, r3
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d102      	bne.n	8008674 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008674:	7afb      	ldrb	r3, [r7, #11]
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	2b00      	cmp	r3, #0
 800867c:	d109      	bne.n	8008692 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6818      	ldr	r0, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	461a      	mov	r2, r3
 800868a:	6979      	ldr	r1, [r7, #20]
 800868c:	f002 fca0 	bl	800afd0 <USB_EP0StartXfer>
 8008690:	e008      	b.n	80086a4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	b2db      	uxtb	r3, r3
 800869c:	461a      	mov	r2, r3
 800869e:	6979      	ldr	r1, [r7, #20]
 80086a0:	f002 fa52 	bl	800ab48 <USB_EPStartXfer>
  }

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80086ba:	78fb      	ldrb	r3, [r7, #3]
 80086bc:	f003 020f 	and.w	r2, r3, #15
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	4613      	mov	r3, r2
 80086c4:	00db      	lsls	r3, r3, #3
 80086c6:	1a9b      	subs	r3, r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	440b      	add	r3, r1
 80086cc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80086d0:	681b      	ldr	r3, [r3, #0]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bc80      	pop	{r7}
 80086da:	4770      	bx	lr

080086dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	607a      	str	r2, [r7, #4]
 80086e6:	603b      	str	r3, [r7, #0]
 80086e8:	460b      	mov	r3, r1
 80086ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086ec:	7afb      	ldrb	r3, [r7, #11]
 80086ee:	f003 020f 	and.w	r2, r3, #15
 80086f2:	4613      	mov	r3, r2
 80086f4:	00db      	lsls	r3, r3, #3
 80086f6:	1a9b      	subs	r3, r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	3338      	adds	r3, #56	; 0x38
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	4413      	add	r3, r2
 8008700:	3304      	adds	r3, #4
 8008702:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	2200      	movs	r2, #0
 8008714:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2201      	movs	r2, #1
 800871a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800871c:	7afb      	ldrb	r3, [r7, #11]
 800871e:	f003 030f 	and.w	r3, r3, #15
 8008722:	b2da      	uxtb	r2, r3
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d102      	bne.n	8008736 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008736:	7afb      	ldrb	r3, [r7, #11]
 8008738:	f003 030f 	and.w	r3, r3, #15
 800873c:	2b00      	cmp	r3, #0
 800873e:	d109      	bne.n	8008754 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6818      	ldr	r0, [r3, #0]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	b2db      	uxtb	r3, r3
 800874a:	461a      	mov	r2, r3
 800874c:	6979      	ldr	r1, [r7, #20]
 800874e:	f002 fc3f 	bl	800afd0 <USB_EP0StartXfer>
 8008752:	e008      	b.n	8008766 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6818      	ldr	r0, [r3, #0]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	b2db      	uxtb	r3, r3
 800875e:	461a      	mov	r2, r3
 8008760:	6979      	ldr	r1, [r7, #20]
 8008762:	f002 f9f1 	bl	800ab48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800877c:	78fb      	ldrb	r3, [r7, #3]
 800877e:	f003 020f 	and.w	r2, r3, #15
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	429a      	cmp	r2, r3
 8008788:	d901      	bls.n	800878e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e050      	b.n	8008830 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800878e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008792:	2b00      	cmp	r3, #0
 8008794:	da0f      	bge.n	80087b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008796:	78fb      	ldrb	r3, [r7, #3]
 8008798:	f003 020f 	and.w	r2, r3, #15
 800879c:	4613      	mov	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	1a9b      	subs	r3, r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	3338      	adds	r3, #56	; 0x38
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	4413      	add	r3, r2
 80087aa:	3304      	adds	r3, #4
 80087ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2201      	movs	r2, #1
 80087b2:	705a      	strb	r2, [r3, #1]
 80087b4:	e00d      	b.n	80087d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80087b6:	78fa      	ldrb	r2, [r7, #3]
 80087b8:	4613      	mov	r3, r2
 80087ba:	00db      	lsls	r3, r3, #3
 80087bc:	1a9b      	subs	r3, r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	4413      	add	r3, r2
 80087c8:	3304      	adds	r3, #4
 80087ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2201      	movs	r2, #1
 80087d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087d8:	78fb      	ldrb	r3, [r7, #3]
 80087da:	f003 030f 	and.w	r3, r3, #15
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d101      	bne.n	80087f2 <HAL_PCD_EP_SetStall+0x82>
 80087ee:	2302      	movs	r3, #2
 80087f0:	e01e      	b.n	8008830 <HAL_PCD_EP_SetStall+0xc0>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68f9      	ldr	r1, [r7, #12]
 8008800:	4618      	mov	r0, r3
 8008802:	f002 fdcb 	bl	800b39c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008806:	78fb      	ldrb	r3, [r7, #3]
 8008808:	f003 030f 	and.w	r3, r3, #15
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10a      	bne.n	8008826 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6818      	ldr	r0, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	b2d9      	uxtb	r1, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008820:	461a      	mov	r2, r3
 8008822:	f002 ffaf 	bl	800b784 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	460b      	mov	r3, r1
 8008842:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008844:	78fb      	ldrb	r3, [r7, #3]
 8008846:	f003 020f 	and.w	r2, r3, #15
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	429a      	cmp	r2, r3
 8008850:	d901      	bls.n	8008856 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e042      	b.n	80088dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008856:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800885a:	2b00      	cmp	r3, #0
 800885c:	da0f      	bge.n	800887e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	f003 020f 	and.w	r2, r3, #15
 8008864:	4613      	mov	r3, r2
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	1a9b      	subs	r3, r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	3338      	adds	r3, #56	; 0x38
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	4413      	add	r3, r2
 8008872:	3304      	adds	r3, #4
 8008874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2201      	movs	r2, #1
 800887a:	705a      	strb	r2, [r3, #1]
 800887c:	e00f      	b.n	800889e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800887e:	78fb      	ldrb	r3, [r7, #3]
 8008880:	f003 020f 	and.w	r2, r3, #15
 8008884:	4613      	mov	r3, r2
 8008886:	00db      	lsls	r3, r3, #3
 8008888:	1a9b      	subs	r3, r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	4413      	add	r3, r2
 8008894:	3304      	adds	r3, #4
 8008896:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80088a4:	78fb      	ldrb	r3, [r7, #3]
 80088a6:	f003 030f 	and.w	r3, r3, #15
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d101      	bne.n	80088be <HAL_PCD_EP_ClrStall+0x86>
 80088ba:	2302      	movs	r3, #2
 80088bc:	e00e      	b.n	80088dc <HAL_PCD_EP_ClrStall+0xa4>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68f9      	ldr	r1, [r7, #12]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f002 fdd2 	bl	800b476 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b08a      	sub	sp, #40	; 0x28
 80088e8:	af02      	add	r7, sp, #8
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	4613      	mov	r3, r2
 80088fc:	00db      	lsls	r3, r3, #3
 80088fe:	1a9b      	subs	r3, r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	3338      	adds	r3, #56	; 0x38
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	4413      	add	r3, r2
 8008908:	3304      	adds	r3, #4
 800890a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	699a      	ldr	r2, [r3, #24]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	429a      	cmp	r2, r3
 8008916:	d901      	bls.n	800891c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e06c      	b.n	80089f6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	695a      	ldr	r2, [r3, #20]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	69fa      	ldr	r2, [r7, #28]
 800892e:	429a      	cmp	r2, r3
 8008930:	d902      	bls.n	8008938 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	3303      	adds	r3, #3
 800893c:	089b      	lsrs	r3, r3, #2
 800893e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008940:	e02b      	b.n	800899a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	695a      	ldr	r2, [r3, #20]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	69fa      	ldr	r2, [r7, #28]
 8008954:	429a      	cmp	r2, r3
 8008956:	d902      	bls.n	800895e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	3303      	adds	r3, #3
 8008962:	089b      	lsrs	r3, r3, #2
 8008964:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	68d9      	ldr	r1, [r3, #12]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	b2da      	uxtb	r2, r3
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008976:	b2db      	uxtb	r3, r3
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	4603      	mov	r3, r0
 800897c:	6978      	ldr	r0, [r7, #20]
 800897e:	f002 fc79 	bl	800b274 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	68da      	ldr	r2, [r3, #12]
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	441a      	add	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	699a      	ldr	r2, [r3, #24]
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	441a      	add	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	69ba      	ldr	r2, [r7, #24]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d809      	bhi.n	80089c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	699a      	ldr	r2, [r3, #24]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d203      	bcs.n	80089c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	695b      	ldr	r3, [r3, #20]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1be      	bne.n	8008942 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	695a      	ldr	r2, [r3, #20]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d811      	bhi.n	80089f4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	f003 030f 	and.w	r3, r3, #15
 80089d6:	2201      	movs	r2, #1
 80089d8:	fa02 f303 	lsl.w	r3, r2, r3
 80089dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	43db      	mvns	r3, r3
 80089ea:	6939      	ldr	r1, [r7, #16]
 80089ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089f0:	4013      	ands	r3, r2
 80089f2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3720      	adds	r7, #32
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
	...

08008a00 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	333c      	adds	r3, #60	; 0x3c
 8008a18:	3304      	adds	r3, #4
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	015a      	lsls	r2, r3, #5
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	f040 80a0 	bne.w	8008b78 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f003 0308 	and.w	r3, r3, #8
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d015      	beq.n	8008a6e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4a72      	ldr	r2, [pc, #456]	; (8008c10 <PCD_EP_OutXfrComplete_int+0x210>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	f240 80dd 	bls.w	8008c06 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f000 80d7 	beq.w	8008c06 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a64:	461a      	mov	r2, r3
 8008a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a6a:	6093      	str	r3, [r2, #8]
 8008a6c:	e0cb      	b.n	8008c06 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f003 0320 	and.w	r3, r3, #32
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d009      	beq.n	8008a8c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a84:	461a      	mov	r2, r3
 8008a86:	2320      	movs	r3, #32
 8008a88:	6093      	str	r3, [r2, #8]
 8008a8a:	e0bc      	b.n	8008c06 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f040 80b7 	bne.w	8008c06 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4a5d      	ldr	r2, [pc, #372]	; (8008c10 <PCD_EP_OutXfrComplete_int+0x210>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d90f      	bls.n	8008ac0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00a      	beq.n	8008ac0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008abc:	6093      	str	r3, [r2, #8]
 8008abe:	e0a2      	b.n	8008c06 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	00db      	lsls	r3, r3, #3
 8008ac8:	1a9b      	subs	r3, r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	440b      	add	r3, r1
 8008ace:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008ad2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	0159      	lsls	r1, r3, #5
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	440b      	add	r3, r1
 8008adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008ae6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	4613      	mov	r3, r2
 8008aee:	00db      	lsls	r3, r3, #3
 8008af0:	1a9b      	subs	r3, r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4403      	add	r3, r0
 8008af6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008afa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008afc:	6879      	ldr	r1, [r7, #4]
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	4613      	mov	r3, r2
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	1a9b      	subs	r3, r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	440b      	add	r3, r1
 8008b0a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008b0e:	6819      	ldr	r1, [r3, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	4613      	mov	r3, r2
 8008b16:	00db      	lsls	r3, r3, #3
 8008b18:	1a9b      	subs	r3, r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4403      	add	r3, r0
 8008b1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4419      	add	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	00db      	lsls	r3, r3, #3
 8008b2e:	1a9b      	subs	r3, r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4403      	add	r3, r0
 8008b34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008b38:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d114      	bne.n	8008b6a <PCD_EP_OutXfrComplete_int+0x16a>
 8008b40:	6879      	ldr	r1, [r7, #4]
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	4613      	mov	r3, r2
 8008b46:	00db      	lsls	r3, r3, #3
 8008b48:	1a9b      	subs	r3, r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	440b      	add	r3, r1
 8008b4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d108      	bne.n	8008b6a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6818      	ldr	r0, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008b62:	461a      	mov	r2, r3
 8008b64:	2101      	movs	r1, #1
 8008b66:	f002 fe0d 	bl	800b784 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	4619      	mov	r1, r3
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f004 fcab 	bl	800d4cc <HAL_PCD_DataOutStageCallback>
 8008b76:	e046      	b.n	8008c06 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4a26      	ldr	r2, [pc, #152]	; (8008c14 <PCD_EP_OutXfrComplete_int+0x214>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d124      	bne.n	8008bca <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b96:	461a      	mov	r2, r3
 8008b98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b9c:	6093      	str	r3, [r2, #8]
 8008b9e:	e032      	b.n	8008c06 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f003 0320 	and.w	r3, r3, #32
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d008      	beq.n	8008bbc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	2320      	movs	r3, #32
 8008bba:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f004 fc82 	bl	800d4cc <HAL_PCD_DataOutStageCallback>
 8008bc8:	e01d      	b.n	8008c06 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d114      	bne.n	8008bfa <PCD_EP_OutXfrComplete_int+0x1fa>
 8008bd0:	6879      	ldr	r1, [r7, #4]
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	00db      	lsls	r3, r3, #3
 8008bd8:	1a9b      	subs	r3, r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	440b      	add	r3, r1
 8008bde:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d108      	bne.n	8008bfa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6818      	ldr	r0, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	f002 fdc5 	bl	800b784 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f004 fc63 	bl	800d4cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	4f54300a 	.word	0x4f54300a
 8008c14:	4f54310a 	.word	0x4f54310a

08008c18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	333c      	adds	r3, #60	; 0x3c
 8008c30:	3304      	adds	r3, #4
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	015a      	lsls	r2, r3, #5
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4a15      	ldr	r2, [pc, #84]	; (8008ca0 <PCD_EP_OutSetupPacket_int+0x88>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d90e      	bls.n	8008c6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d009      	beq.n	8008c6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c64:	461a      	mov	r2, r3
 8008c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f004 fc1b 	bl	800d4a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	4a0a      	ldr	r2, [pc, #40]	; (8008ca0 <PCD_EP_OutSetupPacket_int+0x88>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d90c      	bls.n	8008c94 <PCD_EP_OutSetupPacket_int+0x7c>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d108      	bne.n	8008c94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6818      	ldr	r0, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	2101      	movs	r1, #1
 8008c90:	f002 fd78 	bl	800b784 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3718      	adds	r7, #24
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	4f54300a 	.word	0x4f54300a

08008ca4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	70fb      	strb	r3, [r7, #3]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008cbc:	78fb      	ldrb	r3, [r7, #3]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d107      	bne.n	8008cd2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008cc2:	883b      	ldrh	r3, [r7, #0]
 8008cc4:	0419      	lsls	r1, r3, #16
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	629a      	str	r2, [r3, #40]	; 0x28
 8008cd0:	e028      	b.n	8008d24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd8:	0c1b      	lsrs	r3, r3, #16
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	4413      	add	r3, r2
 8008cde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	73fb      	strb	r3, [r7, #15]
 8008ce4:	e00d      	b.n	8008d02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	7bfb      	ldrb	r3, [r7, #15]
 8008cec:	3340      	adds	r3, #64	; 0x40
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	0c1b      	lsrs	r3, r3, #16
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	73fb      	strb	r3, [r7, #15]
 8008d02:	7bfa      	ldrb	r2, [r7, #15]
 8008d04:	78fb      	ldrb	r3, [r7, #3]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d3ec      	bcc.n	8008ce6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008d0c:	883b      	ldrh	r3, [r7, #0]
 8008d0e:	0418      	lsls	r0, r3, #16
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6819      	ldr	r1, [r3, #0]
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	4302      	orrs	r2, r0
 8008d1c:	3340      	adds	r3, #64	; 0x40
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	440b      	add	r3, r1
 8008d22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bc80      	pop	{r7}
 8008d2e:	4770      	bx	lr

08008d30 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	887a      	ldrh	r2, [r7, #2]
 8008d42:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bc80      	pop	{r7}
 8008d4e:	4770      	bx	lr

08008d50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08a      	sub	sp, #40	; 0x28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e237      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d050      	beq.n	8008e10 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008d6e:	4ba3      	ldr	r3, [pc, #652]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f003 030c 	and.w	r3, r3, #12
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	d00c      	beq.n	8008d94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d7a:	4ba0      	ldr	r3, [pc, #640]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008d82:	2b08      	cmp	r3, #8
 8008d84:	d112      	bne.n	8008dac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d86:	4b9d      	ldr	r3, [pc, #628]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d92:	d10b      	bne.n	8008dac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d94:	4b99      	ldr	r3, [pc, #612]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d036      	beq.n	8008e0e <HAL_RCC_OscConfig+0xbe>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d132      	bne.n	8008e0e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e212      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685a      	ldr	r2, [r3, #4]
 8008db0:	4b93      	ldr	r3, [pc, #588]	; (8009000 <HAL_RCC_OscConfig+0x2b0>)
 8008db2:	b2d2      	uxtb	r2, r2
 8008db4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d013      	beq.n	8008de6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dbe:	f7fd f82d 	bl	8005e1c <HAL_GetTick>
 8008dc2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dc4:	e008      	b.n	8008dd8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008dc6:	f7fd f829 	bl	8005e1c <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	2b64      	cmp	r3, #100	; 0x64
 8008dd2:	d901      	bls.n	8008dd8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e1fc      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dd8:	4b88      	ldr	r3, [pc, #544]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d0f0      	beq.n	8008dc6 <HAL_RCC_OscConfig+0x76>
 8008de4:	e014      	b.n	8008e10 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008de6:	f7fd f819 	bl	8005e1c <HAL_GetTick>
 8008dea:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dec:	e008      	b.n	8008e00 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008dee:	f7fd f815 	bl	8005e1c <HAL_GetTick>
 8008df2:	4602      	mov	r2, r0
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	2b64      	cmp	r3, #100	; 0x64
 8008dfa:	d901      	bls.n	8008e00 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e1e8      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e00:	4b7e      	ldr	r3, [pc, #504]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1f0      	bne.n	8008dee <HAL_RCC_OscConfig+0x9e>
 8008e0c:	e000      	b.n	8008e10 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e0e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d077      	beq.n	8008f0c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008e1c:	4b77      	ldr	r3, [pc, #476]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	f003 030c 	and.w	r3, r3, #12
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00b      	beq.n	8008e40 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e28:	4b74      	ldr	r3, [pc, #464]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d126      	bne.n	8008e82 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e34:	4b71      	ldr	r3, [pc, #452]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d120      	bne.n	8008e82 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e40:	4b6e      	ldr	r3, [pc, #440]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0302 	and.w	r3, r3, #2
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d005      	beq.n	8008e58 <HAL_RCC_OscConfig+0x108>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d001      	beq.n	8008e58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e1bc      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e58:	4b68      	ldr	r3, [pc, #416]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	21f8      	movs	r1, #248	; 0xf8
 8008e66:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e68:	69b9      	ldr	r1, [r7, #24]
 8008e6a:	fa91 f1a1 	rbit	r1, r1
 8008e6e:	6179      	str	r1, [r7, #20]
  return result;
 8008e70:	6979      	ldr	r1, [r7, #20]
 8008e72:	fab1 f181 	clz	r1, r1
 8008e76:	b2c9      	uxtb	r1, r1
 8008e78:	408b      	lsls	r3, r1
 8008e7a:	4960      	ldr	r1, [pc, #384]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e80:	e044      	b.n	8008f0c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d02a      	beq.n	8008ee0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e8a:	4b5e      	ldr	r3, [pc, #376]	; (8009004 <HAL_RCC_OscConfig+0x2b4>)
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e90:	f7fc ffc4 	bl	8005e1c <HAL_GetTick>
 8008e94:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e96:	e008      	b.n	8008eaa <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e98:	f7fc ffc0 	bl	8005e1c <HAL_GetTick>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d901      	bls.n	8008eaa <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e193      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008eaa:	4b54      	ldr	r3, [pc, #336]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0f0      	beq.n	8008e98 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eb6:	4b51      	ldr	r3, [pc, #324]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	21f8      	movs	r1, #248	; 0xf8
 8008ec4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ec6:	6939      	ldr	r1, [r7, #16]
 8008ec8:	fa91 f1a1 	rbit	r1, r1
 8008ecc:	60f9      	str	r1, [r7, #12]
  return result;
 8008ece:	68f9      	ldr	r1, [r7, #12]
 8008ed0:	fab1 f181 	clz	r1, r1
 8008ed4:	b2c9      	uxtb	r1, r1
 8008ed6:	408b      	lsls	r3, r1
 8008ed8:	4948      	ldr	r1, [pc, #288]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008eda:	4313      	orrs	r3, r2
 8008edc:	600b      	str	r3, [r1, #0]
 8008ede:	e015      	b.n	8008f0c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ee0:	4b48      	ldr	r3, [pc, #288]	; (8009004 <HAL_RCC_OscConfig+0x2b4>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ee6:	f7fc ff99 	bl	8005e1c <HAL_GetTick>
 8008eea:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008eec:	e008      	b.n	8008f00 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008eee:	f7fc ff95 	bl	8005e1c <HAL_GetTick>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	6a3b      	ldr	r3, [r7, #32]
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d901      	bls.n	8008f00 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8008efc:	2303      	movs	r3, #3
 8008efe:	e168      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f00:	4b3e      	ldr	r3, [pc, #248]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0302 	and.w	r3, r3, #2
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1f0      	bne.n	8008eee <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 0308 	and.w	r3, r3, #8
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d030      	beq.n	8008f7a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d016      	beq.n	8008f4e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f20:	4b39      	ldr	r3, [pc, #228]	; (8009008 <HAL_RCC_OscConfig+0x2b8>)
 8008f22:	2201      	movs	r2, #1
 8008f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f26:	f7fc ff79 	bl	8005e1c <HAL_GetTick>
 8008f2a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f2c:	e008      	b.n	8008f40 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f2e:	f7fc ff75 	bl	8005e1c <HAL_GetTick>
 8008f32:	4602      	mov	r2, r0
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d901      	bls.n	8008f40 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e148      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f40:	4b2e      	ldr	r3, [pc, #184]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f44:	f003 0302 	and.w	r3, r3, #2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d0f0      	beq.n	8008f2e <HAL_RCC_OscConfig+0x1de>
 8008f4c:	e015      	b.n	8008f7a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f4e:	4b2e      	ldr	r3, [pc, #184]	; (8009008 <HAL_RCC_OscConfig+0x2b8>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f54:	f7fc ff62 	bl	8005e1c <HAL_GetTick>
 8008f58:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f5a:	e008      	b.n	8008f6e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f5c:	f7fc ff5e 	bl	8005e1c <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d901      	bls.n	8008f6e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e131      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f6e:	4b23      	ldr	r3, [pc, #140]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f72:	f003 0302 	and.w	r3, r3, #2
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1f0      	bne.n	8008f5c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 0304 	and.w	r3, r3, #4
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 8088 	beq.w	8009098 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f8e:	4b1b      	ldr	r3, [pc, #108]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d110      	bne.n	8008fbc <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60bb      	str	r3, [r7, #8]
 8008f9e:	4b17      	ldr	r3, [pc, #92]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa2:	4a16      	ldr	r2, [pc, #88]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8008faa:	4b14      	ldr	r3, [pc, #80]	; (8008ffc <HAL_RCC_OscConfig+0x2ac>)
 8008fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fb2:	60bb      	str	r3, [r7, #8]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008fbc:	4b13      	ldr	r3, [pc, #76]	; (800900c <HAL_RCC_OscConfig+0x2bc>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a12      	ldr	r2, [pc, #72]	; (800900c <HAL_RCC_OscConfig+0x2bc>)
 8008fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fc6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fc8:	4b10      	ldr	r3, [pc, #64]	; (800900c <HAL_RCC_OscConfig+0x2bc>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d123      	bne.n	800901c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008fd4:	4b0d      	ldr	r3, [pc, #52]	; (800900c <HAL_RCC_OscConfig+0x2bc>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a0c      	ldr	r2, [pc, #48]	; (800900c <HAL_RCC_OscConfig+0x2bc>)
 8008fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fe0:	f7fc ff1c 	bl	8005e1c <HAL_GetTick>
 8008fe4:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fe6:	e013      	b.n	8009010 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fe8:	f7fc ff18 	bl	8005e1c <HAL_GetTick>
 8008fec:	4602      	mov	r2, r0
 8008fee:	6a3b      	ldr	r3, [r7, #32]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d90c      	bls.n	8009010 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e0eb      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
 8008ffa:	bf00      	nop
 8008ffc:	40023800 	.word	0x40023800
 8009000:	40023802 	.word	0x40023802
 8009004:	42470000 	.word	0x42470000
 8009008:	42470e80 	.word	0x42470e80
 800900c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009010:	4b72      	ldr	r3, [pc, #456]	; (80091dc <HAL_RCC_OscConfig+0x48c>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0e5      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	689a      	ldr	r2, [r3, #8]
 8009020:	4b6f      	ldr	r3, [pc, #444]	; (80091e0 <HAL_RCC_OscConfig+0x490>)
 8009022:	b2d2      	uxtb	r2, r2
 8009024:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d015      	beq.n	800905a <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800902e:	f7fc fef5 	bl	8005e1c <HAL_GetTick>
 8009032:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009034:	e00a      	b.n	800904c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009036:	f7fc fef1 	bl	8005e1c <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	6a3b      	ldr	r3, [r7, #32]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	f241 3288 	movw	r2, #5000	; 0x1388
 8009044:	4293      	cmp	r3, r2
 8009046:	d901      	bls.n	800904c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e0c2      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800904c:	4b65      	ldr	r3, [pc, #404]	; (80091e4 <HAL_RCC_OscConfig+0x494>)
 800904e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d0ee      	beq.n	8009036 <HAL_RCC_OscConfig+0x2e6>
 8009058:	e014      	b.n	8009084 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800905a:	f7fc fedf 	bl	8005e1c <HAL_GetTick>
 800905e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009060:	e00a      	b.n	8009078 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009062:	f7fc fedb 	bl	8005e1c <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	6a3b      	ldr	r3, [r7, #32]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009070:	4293      	cmp	r3, r2
 8009072:	d901      	bls.n	8009078 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e0ac      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009078:	4b5a      	ldr	r3, [pc, #360]	; (80091e4 <HAL_RCC_OscConfig+0x494>)
 800907a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907c:	f003 0302 	and.w	r3, r3, #2
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1ee      	bne.n	8009062 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009088:	2b01      	cmp	r3, #1
 800908a:	d105      	bne.n	8009098 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800908c:	4b55      	ldr	r3, [pc, #340]	; (80091e4 <HAL_RCC_OscConfig+0x494>)
 800908e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009090:	4a54      	ldr	r2, [pc, #336]	; (80091e4 <HAL_RCC_OscConfig+0x494>)
 8009092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009096:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	2b00      	cmp	r3, #0
 800909e:	f000 8097 	beq.w	80091d0 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80090a2:	4b50      	ldr	r3, [pc, #320]	; (80091e4 <HAL_RCC_OscConfig+0x494>)
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f003 030c 	and.w	r3, r3, #12
 80090aa:	2b08      	cmp	r3, #8
 80090ac:	d061      	beq.n	8009172 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d146      	bne.n	8009144 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090b6:	4b4c      	ldr	r3, [pc, #304]	; (80091e8 <HAL_RCC_OscConfig+0x498>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090bc:	f7fc feae 	bl	8005e1c <HAL_GetTick>
 80090c0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090c2:	e008      	b.n	80090d6 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090c4:	f7fc feaa 	bl	8005e1c <HAL_GetTick>
 80090c8:	4602      	mov	r2, r0
 80090ca:	6a3b      	ldr	r3, [r7, #32]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	2b64      	cmp	r3, #100	; 0x64
 80090d0:	d901      	bls.n	80090d6 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e07d      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090d6:	4b43      	ldr	r3, [pc, #268]	; (80091e4 <HAL_RCC_OscConfig+0x494>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1f0      	bne.n	80090c4 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80090e2:	4b40      	ldr	r3, [pc, #256]	; (80091e4 <HAL_RCC_OscConfig+0x494>)
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	4b41      	ldr	r3, [pc, #260]	; (80091ec <HAL_RCC_OscConfig+0x49c>)
 80090e8:	4013      	ands	r3, r2
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	69d1      	ldr	r1, [r2, #28]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	6a12      	ldr	r2, [r2, #32]
 80090f2:	4311      	orrs	r1, r2
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090f8:	0192      	lsls	r2, r2, #6
 80090fa:	4311      	orrs	r1, r2
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009100:	0612      	lsls	r2, r2, #24
 8009102:	4311      	orrs	r1, r2
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009108:	0852      	lsrs	r2, r2, #1
 800910a:	3a01      	subs	r2, #1
 800910c:	0412      	lsls	r2, r2, #16
 800910e:	430a      	orrs	r2, r1
 8009110:	4934      	ldr	r1, [pc, #208]	; (80091e4 <HAL_RCC_OscConfig+0x494>)
 8009112:	4313      	orrs	r3, r2
 8009114:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009116:	4b34      	ldr	r3, [pc, #208]	; (80091e8 <HAL_RCC_OscConfig+0x498>)
 8009118:	2201      	movs	r2, #1
 800911a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800911c:	f7fc fe7e 	bl	8005e1c <HAL_GetTick>
 8009120:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009122:	e008      	b.n	8009136 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009124:	f7fc fe7a 	bl	8005e1c <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	2b64      	cmp	r3, #100	; 0x64
 8009130:	d901      	bls.n	8009136 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	e04d      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009136:	4b2b      	ldr	r3, [pc, #172]	; (80091e4 <HAL_RCC_OscConfig+0x494>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d0f0      	beq.n	8009124 <HAL_RCC_OscConfig+0x3d4>
 8009142:	e045      	b.n	80091d0 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009144:	4b28      	ldr	r3, [pc, #160]	; (80091e8 <HAL_RCC_OscConfig+0x498>)
 8009146:	2200      	movs	r2, #0
 8009148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800914a:	f7fc fe67 	bl	8005e1c <HAL_GetTick>
 800914e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009150:	e008      	b.n	8009164 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009152:	f7fc fe63 	bl	8005e1c <HAL_GetTick>
 8009156:	4602      	mov	r2, r0
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	1ad3      	subs	r3, r2, r3
 800915c:	2b64      	cmp	r3, #100	; 0x64
 800915e:	d901      	bls.n	8009164 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8009160:	2303      	movs	r3, #3
 8009162:	e036      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009164:	4b1f      	ldr	r3, [pc, #124]	; (80091e4 <HAL_RCC_OscConfig+0x494>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1f0      	bne.n	8009152 <HAL_RCC_OscConfig+0x402>
 8009170:	e02e      	b.n	80091d0 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d101      	bne.n	800917e <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e029      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800917e:	4b19      	ldr	r3, [pc, #100]	; (80091e4 <HAL_RCC_OscConfig+0x494>)
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	429a      	cmp	r2, r3
 8009190:	d11c      	bne.n	80091cc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800919c:	429a      	cmp	r2, r3
 800919e:	d115      	bne.n	80091cc <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	099b      	lsrs	r3, r3, #6
 80091a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d10d      	bne.n	80091cc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d106      	bne.n	80091cc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d001      	beq.n	80091d0 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e000      	b.n	80091d2 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3728      	adds	r7, #40	; 0x28
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	40007000 	.word	0x40007000
 80091e0:	40023870 	.word	0x40023870
 80091e4:	40023800 	.word	0x40023800
 80091e8:	42470060 	.word	0x42470060
 80091ec:	f0bc8000 	.word	0xf0bc8000

080091f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e0d2      	b.n	80093aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009204:	4b6b      	ldr	r3, [pc, #428]	; (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 030f 	and.w	r3, r3, #15
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	429a      	cmp	r2, r3
 8009210:	d90c      	bls.n	800922c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009212:	4b68      	ldr	r3, [pc, #416]	; (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	b2d2      	uxtb	r2, r2
 8009218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800921a:	4b66      	ldr	r3, [pc, #408]	; (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 030f 	and.w	r3, r3, #15
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	429a      	cmp	r2, r3
 8009226:	d001      	beq.n	800922c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e0be      	b.n	80093aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0302 	and.w	r3, r3, #2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d020      	beq.n	800927a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 0304 	and.w	r3, r3, #4
 8009240:	2b00      	cmp	r3, #0
 8009242:	d005      	beq.n	8009250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009244:	4b5c      	ldr	r3, [pc, #368]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	4a5b      	ldr	r2, [pc, #364]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 800924a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800924e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0308 	and.w	r3, r3, #8
 8009258:	2b00      	cmp	r3, #0
 800925a:	d005      	beq.n	8009268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800925c:	4b56      	ldr	r3, [pc, #344]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	4a55      	ldr	r2, [pc, #340]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009262:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009266:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009268:	4b53      	ldr	r3, [pc, #332]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	4950      	ldr	r1, [pc, #320]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009276:	4313      	orrs	r3, r2
 8009278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 0301 	and.w	r3, r3, #1
 8009282:	2b00      	cmp	r3, #0
 8009284:	d040      	beq.n	8009308 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d107      	bne.n	800929e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800928e:	4b4a      	ldr	r3, [pc, #296]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009296:	2b00      	cmp	r3, #0
 8009298:	d115      	bne.n	80092c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e085      	b.n	80093aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d107      	bne.n	80092b6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092a6:	4b44      	ldr	r3, [pc, #272]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d109      	bne.n	80092c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e079      	b.n	80093aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092b6:	4b40      	ldr	r3, [pc, #256]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 0302 	and.w	r3, r3, #2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d101      	bne.n	80092c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e071      	b.n	80093aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80092c6:	4b3c      	ldr	r3, [pc, #240]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f023 0203 	bic.w	r2, r3, #3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	4939      	ldr	r1, [pc, #228]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 80092d4:	4313      	orrs	r3, r2
 80092d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80092d8:	f7fc fda0 	bl	8005e1c <HAL_GetTick>
 80092dc:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092de:	e00a      	b.n	80092f6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092e0:	f7fc fd9c 	bl	8005e1c <HAL_GetTick>
 80092e4:	4602      	mov	r2, r0
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d901      	bls.n	80092f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80092f2:	2303      	movs	r3, #3
 80092f4:	e059      	b.n	80093aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092f6:	4b30      	ldr	r3, [pc, #192]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f003 020c 	and.w	r2, r3, #12
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	429a      	cmp	r2, r3
 8009306:	d1eb      	bne.n	80092e0 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009308:	4b2a      	ldr	r3, [pc, #168]	; (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 030f 	and.w	r3, r3, #15
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	429a      	cmp	r2, r3
 8009314:	d20c      	bcs.n	8009330 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009316:	4b27      	ldr	r3, [pc, #156]	; (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	b2d2      	uxtb	r2, r2
 800931c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800931e:	4b25      	ldr	r3, [pc, #148]	; (80093b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 030f 	and.w	r3, r3, #15
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	429a      	cmp	r2, r3
 800932a:	d001      	beq.n	8009330 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	e03c      	b.n	80093aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0304 	and.w	r3, r3, #4
 8009338:	2b00      	cmp	r3, #0
 800933a:	d008      	beq.n	800934e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800933c:	4b1e      	ldr	r3, [pc, #120]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	491b      	ldr	r1, [pc, #108]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 800934a:	4313      	orrs	r3, r2
 800934c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0308 	and.w	r3, r3, #8
 8009356:	2b00      	cmp	r3, #0
 8009358:	d009      	beq.n	800936e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800935a:	4b17      	ldr	r3, [pc, #92]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	4913      	ldr	r1, [pc, #76]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 800936a:	4313      	orrs	r3, r2
 800936c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800936e:	f000 f837 	bl	80093e0 <HAL_RCC_GetSysClockFreq>
 8009372:	4601      	mov	r1, r0
 8009374:	4b10      	ldr	r3, [pc, #64]	; (80093b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800937c:	22f0      	movs	r2, #240	; 0xf0
 800937e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	fa92 f2a2 	rbit	r2, r2
 8009386:	60fa      	str	r2, [r7, #12]
  return result;
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	fab2 f282 	clz	r2, r2
 800938e:	b2d2      	uxtb	r2, r2
 8009390:	40d3      	lsrs	r3, r2
 8009392:	4a0a      	ldr	r2, [pc, #40]	; (80093bc <HAL_RCC_ClockConfig+0x1cc>)
 8009394:	5cd3      	ldrb	r3, [r2, r3]
 8009396:	fa21 f303 	lsr.w	r3, r1, r3
 800939a:	4a09      	ldr	r2, [pc, #36]	; (80093c0 <HAL_RCC_ClockConfig+0x1d0>)
 800939c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800939e:	4b09      	ldr	r3, [pc, #36]	; (80093c4 <HAL_RCC_ClockConfig+0x1d4>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fc fcf8 	bl	8005d98 <HAL_InitTick>

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	40023c00 	.word	0x40023c00
 80093b8:	40023800 	.word	0x40023800
 80093bc:	08013380 	.word	0x08013380
 80093c0:	20000038 	.word	0x20000038
 80093c4:	2000003c 	.word	0x2000003c

080093c8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80093c8:	b480      	push	{r7}
 80093ca:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80093cc:	4b03      	ldr	r3, [pc, #12]	; (80093dc <HAL_RCC_EnableCSS+0x14>)
 80093ce:	2201      	movs	r2, #1
 80093d0:	601a      	str	r2, [r3, #0]
}
 80093d2:	bf00      	nop
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bc80      	pop	{r7}
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	4247004c 	.word	0x4247004c

080093e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80093e4:	b084      	sub	sp, #16
 80093e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80093e8:	2300      	movs	r3, #0
 80093ea:	607b      	str	r3, [r7, #4]
 80093ec:	2300      	movs	r3, #0
 80093ee:	60fb      	str	r3, [r7, #12]
 80093f0:	2300      	movs	r3, #0
 80093f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093f8:	4b67      	ldr	r3, [pc, #412]	; (8009598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	f003 030c 	and.w	r3, r3, #12
 8009400:	2b08      	cmp	r3, #8
 8009402:	d00d      	beq.n	8009420 <HAL_RCC_GetSysClockFreq+0x40>
 8009404:	2b08      	cmp	r3, #8
 8009406:	f200 80bd 	bhi.w	8009584 <HAL_RCC_GetSysClockFreq+0x1a4>
 800940a:	2b00      	cmp	r3, #0
 800940c:	d002      	beq.n	8009414 <HAL_RCC_GetSysClockFreq+0x34>
 800940e:	2b04      	cmp	r3, #4
 8009410:	d003      	beq.n	800941a <HAL_RCC_GetSysClockFreq+0x3a>
 8009412:	e0b7      	b.n	8009584 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009414:	4b61      	ldr	r3, [pc, #388]	; (800959c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009416:	60bb      	str	r3, [r7, #8]
       break;
 8009418:	e0b7      	b.n	800958a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800941a:	4b60      	ldr	r3, [pc, #384]	; (800959c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800941c:	60bb      	str	r3, [r7, #8]
      break;
 800941e:	e0b4      	b.n	800958a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009420:	4b5d      	ldr	r3, [pc, #372]	; (8009598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009428:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800942a:	4b5b      	ldr	r3, [pc, #364]	; (8009598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009432:	2b00      	cmp	r3, #0
 8009434:	d04d      	beq.n	80094d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009436:	4b58      	ldr	r3, [pc, #352]	; (8009598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	099b      	lsrs	r3, r3, #6
 800943c:	461a      	mov	r2, r3
 800943e:	f04f 0300 	mov.w	r3, #0
 8009442:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009446:	f04f 0100 	mov.w	r1, #0
 800944a:	ea02 0800 	and.w	r8, r2, r0
 800944e:	ea03 0901 	and.w	r9, r3, r1
 8009452:	4640      	mov	r0, r8
 8009454:	4649      	mov	r1, r9
 8009456:	f04f 0200 	mov.w	r2, #0
 800945a:	f04f 0300 	mov.w	r3, #0
 800945e:	014b      	lsls	r3, r1, #5
 8009460:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009464:	0142      	lsls	r2, r0, #5
 8009466:	4610      	mov	r0, r2
 8009468:	4619      	mov	r1, r3
 800946a:	ebb0 0008 	subs.w	r0, r0, r8
 800946e:	eb61 0109 	sbc.w	r1, r1, r9
 8009472:	f04f 0200 	mov.w	r2, #0
 8009476:	f04f 0300 	mov.w	r3, #0
 800947a:	018b      	lsls	r3, r1, #6
 800947c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009480:	0182      	lsls	r2, r0, #6
 8009482:	1a12      	subs	r2, r2, r0
 8009484:	eb63 0301 	sbc.w	r3, r3, r1
 8009488:	f04f 0000 	mov.w	r0, #0
 800948c:	f04f 0100 	mov.w	r1, #0
 8009490:	00d9      	lsls	r1, r3, #3
 8009492:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009496:	00d0      	lsls	r0, r2, #3
 8009498:	4602      	mov	r2, r0
 800949a:	460b      	mov	r3, r1
 800949c:	eb12 0208 	adds.w	r2, r2, r8
 80094a0:	eb43 0309 	adc.w	r3, r3, r9
 80094a4:	f04f 0000 	mov.w	r0, #0
 80094a8:	f04f 0100 	mov.w	r1, #0
 80094ac:	0299      	lsls	r1, r3, #10
 80094ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80094b2:	0290      	lsls	r0, r2, #10
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	4610      	mov	r0, r2
 80094ba:	4619      	mov	r1, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	461a      	mov	r2, r3
 80094c0:	f04f 0300 	mov.w	r3, #0
 80094c4:	f7f7 febc 	bl	8001240 <__aeabi_uldivmod>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	4613      	mov	r3, r2
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	e04a      	b.n	8009568 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094d2:	4b31      	ldr	r3, [pc, #196]	; (8009598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	099b      	lsrs	r3, r3, #6
 80094d8:	461a      	mov	r2, r3
 80094da:	f04f 0300 	mov.w	r3, #0
 80094de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80094e2:	f04f 0100 	mov.w	r1, #0
 80094e6:	ea02 0400 	and.w	r4, r2, r0
 80094ea:	ea03 0501 	and.w	r5, r3, r1
 80094ee:	4620      	mov	r0, r4
 80094f0:	4629      	mov	r1, r5
 80094f2:	f04f 0200 	mov.w	r2, #0
 80094f6:	f04f 0300 	mov.w	r3, #0
 80094fa:	014b      	lsls	r3, r1, #5
 80094fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009500:	0142      	lsls	r2, r0, #5
 8009502:	4610      	mov	r0, r2
 8009504:	4619      	mov	r1, r3
 8009506:	1b00      	subs	r0, r0, r4
 8009508:	eb61 0105 	sbc.w	r1, r1, r5
 800950c:	f04f 0200 	mov.w	r2, #0
 8009510:	f04f 0300 	mov.w	r3, #0
 8009514:	018b      	lsls	r3, r1, #6
 8009516:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800951a:	0182      	lsls	r2, r0, #6
 800951c:	1a12      	subs	r2, r2, r0
 800951e:	eb63 0301 	sbc.w	r3, r3, r1
 8009522:	f04f 0000 	mov.w	r0, #0
 8009526:	f04f 0100 	mov.w	r1, #0
 800952a:	00d9      	lsls	r1, r3, #3
 800952c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009530:	00d0      	lsls	r0, r2, #3
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	1912      	adds	r2, r2, r4
 8009538:	eb45 0303 	adc.w	r3, r5, r3
 800953c:	f04f 0000 	mov.w	r0, #0
 8009540:	f04f 0100 	mov.w	r1, #0
 8009544:	0299      	lsls	r1, r3, #10
 8009546:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800954a:	0290      	lsls	r0, r2, #10
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	4610      	mov	r0, r2
 8009552:	4619      	mov	r1, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	461a      	mov	r2, r3
 8009558:	f04f 0300 	mov.w	r3, #0
 800955c:	f7f7 fe70 	bl	8001240 <__aeabi_uldivmod>
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	4613      	mov	r3, r2
 8009566:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009568:	4b0b      	ldr	r3, [pc, #44]	; (8009598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	0c1b      	lsrs	r3, r3, #16
 800956e:	f003 0303 	and.w	r3, r3, #3
 8009572:	3301      	adds	r3, #1
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009580:	60bb      	str	r3, [r7, #8]
      break;
 8009582:	e002      	b.n	800958a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009584:	4b05      	ldr	r3, [pc, #20]	; (800959c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009586:	60bb      	str	r3, [r7, #8]
      break;
 8009588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800958a:	68bb      	ldr	r3, [r7, #8]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009596:	bf00      	nop
 8009598:	40023800 	.word	0x40023800
 800959c:	00f42400 	.word	0x00f42400

080095a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095a0:	b480      	push	{r7}
 80095a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80095a4:	4b02      	ldr	r3, [pc, #8]	; (80095b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80095a6:	681b      	ldr	r3, [r3, #0]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bc80      	pop	{r7}
 80095ae:	4770      	bx	lr
 80095b0:	20000038 	.word	0x20000038

080095b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80095ba:	f7ff fff1 	bl	80095a0 <HAL_RCC_GetHCLKFreq>
 80095be:	4601      	mov	r1, r0
 80095c0:	4b0b      	ldr	r3, [pc, #44]	; (80095f0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80095c8:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80095cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	fa92 f2a2 	rbit	r2, r2
 80095d4:	603a      	str	r2, [r7, #0]
  return result;
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	fab2 f282 	clz	r2, r2
 80095dc:	b2d2      	uxtb	r2, r2
 80095de:	40d3      	lsrs	r3, r2
 80095e0:	4a04      	ldr	r2, [pc, #16]	; (80095f4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80095e2:	5cd3      	ldrb	r3, [r2, r3]
 80095e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	40023800 	.word	0x40023800
 80095f4:	08013390 	.word	0x08013390

080095f8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80095fc:	4b06      	ldr	r3, [pc, #24]	; (8009618 <HAL_RCC_NMI_IRQHandler+0x20>)
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009604:	2b80      	cmp	r3, #128	; 0x80
 8009606:	d104      	bne.n	8009612 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009608:	f000 f80a 	bl	8009620 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800960c:	4b03      	ldr	r3, [pc, #12]	; (800961c <HAL_RCC_NMI_IRQHandler+0x24>)
 800960e:	2280      	movs	r2, #128	; 0x80
 8009610:	701a      	strb	r2, [r3, #0]
  }
}
 8009612:	bf00      	nop
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	40023800 	.word	0x40023800
 800961c:	4002380e 	.word	0x4002380e

08009620 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009620:	b480      	push	{r7}
 8009622:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8009624:	bf00      	nop
 8009626:	46bd      	mov	sp, r7
 8009628:	bc80      	pop	{r7}
 800962a:	4770      	bx	lr

0800962c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e041      	b.n	80096c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d106      	bne.n	8009658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7fc f9d2 	bl	80059fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2202      	movs	r2, #2
 800965c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	3304      	adds	r3, #4
 8009668:	4619      	mov	r1, r3
 800966a:	4610      	mov	r0, r2
 800966c:	f000 fad8 	bl	8009c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
	...

080096cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d001      	beq.n	80096e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e046      	b.n	8009772 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2202      	movs	r2, #2
 80096e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a22      	ldr	r2, [pc, #136]	; (800977c <HAL_TIM_Base_Start+0xb0>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d022      	beq.n	800973c <HAL_TIM_Base_Start+0x70>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096fe:	d01d      	beq.n	800973c <HAL_TIM_Base_Start+0x70>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a1e      	ldr	r2, [pc, #120]	; (8009780 <HAL_TIM_Base_Start+0xb4>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d018      	beq.n	800973c <HAL_TIM_Base_Start+0x70>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a1d      	ldr	r2, [pc, #116]	; (8009784 <HAL_TIM_Base_Start+0xb8>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d013      	beq.n	800973c <HAL_TIM_Base_Start+0x70>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a1b      	ldr	r2, [pc, #108]	; (8009788 <HAL_TIM_Base_Start+0xbc>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d00e      	beq.n	800973c <HAL_TIM_Base_Start+0x70>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a1a      	ldr	r2, [pc, #104]	; (800978c <HAL_TIM_Base_Start+0xc0>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d009      	beq.n	800973c <HAL_TIM_Base_Start+0x70>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a18      	ldr	r2, [pc, #96]	; (8009790 <HAL_TIM_Base_Start+0xc4>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d004      	beq.n	800973c <HAL_TIM_Base_Start+0x70>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a17      	ldr	r2, [pc, #92]	; (8009794 <HAL_TIM_Base_Start+0xc8>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d111      	bne.n	8009760 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f003 0307 	and.w	r3, r3, #7
 8009746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b06      	cmp	r3, #6
 800974c:	d010      	beq.n	8009770 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f042 0201 	orr.w	r2, r2, #1
 800975c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800975e:	e007      	b.n	8009770 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f042 0201 	orr.w	r2, r2, #1
 800976e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	bc80      	pop	{r7}
 800977a:	4770      	bx	lr
 800977c:	40010000 	.word	0x40010000
 8009780:	40000400 	.word	0x40000400
 8009784:	40000800 	.word	0x40000800
 8009788:	40000c00 	.word	0x40000c00
 800978c:	40010400 	.word	0x40010400
 8009790:	40014000 	.word	0x40014000
 8009794:	40001800 	.word	0x40001800

08009798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d001      	beq.n	80097b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	e04e      	b.n	800984e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2202      	movs	r2, #2
 80097b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68da      	ldr	r2, [r3, #12]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f042 0201 	orr.w	r2, r2, #1
 80097c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a22      	ldr	r2, [pc, #136]	; (8009858 <HAL_TIM_Base_Start_IT+0xc0>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d022      	beq.n	8009818 <HAL_TIM_Base_Start_IT+0x80>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097da:	d01d      	beq.n	8009818 <HAL_TIM_Base_Start_IT+0x80>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a1e      	ldr	r2, [pc, #120]	; (800985c <HAL_TIM_Base_Start_IT+0xc4>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d018      	beq.n	8009818 <HAL_TIM_Base_Start_IT+0x80>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a1d      	ldr	r2, [pc, #116]	; (8009860 <HAL_TIM_Base_Start_IT+0xc8>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d013      	beq.n	8009818 <HAL_TIM_Base_Start_IT+0x80>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a1b      	ldr	r2, [pc, #108]	; (8009864 <HAL_TIM_Base_Start_IT+0xcc>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d00e      	beq.n	8009818 <HAL_TIM_Base_Start_IT+0x80>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a1a      	ldr	r2, [pc, #104]	; (8009868 <HAL_TIM_Base_Start_IT+0xd0>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d009      	beq.n	8009818 <HAL_TIM_Base_Start_IT+0x80>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a18      	ldr	r2, [pc, #96]	; (800986c <HAL_TIM_Base_Start_IT+0xd4>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d004      	beq.n	8009818 <HAL_TIM_Base_Start_IT+0x80>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a17      	ldr	r2, [pc, #92]	; (8009870 <HAL_TIM_Base_Start_IT+0xd8>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d111      	bne.n	800983c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	f003 0307 	and.w	r3, r3, #7
 8009822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b06      	cmp	r3, #6
 8009828:	d010      	beq.n	800984c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f042 0201 	orr.w	r2, r2, #1
 8009838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800983a:	e007      	b.n	800984c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f042 0201 	orr.w	r2, r2, #1
 800984a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	bc80      	pop	{r7}
 8009856:	4770      	bx	lr
 8009858:	40010000 	.word	0x40010000
 800985c:	40000400 	.word	0x40000400
 8009860:	40000800 	.word	0x40000800
 8009864:	40000c00 	.word	0x40000c00
 8009868:	40010400 	.word	0x40010400
 800986c:	40014000 	.word	0x40014000
 8009870:	40001800 	.word	0x40001800

08009874 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d101      	bne.n	8009886 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e041      	b.n	800990a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b00      	cmp	r3, #0
 8009890:	d106      	bne.n	80098a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7fc f878 	bl	8005990 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2202      	movs	r2, #2
 80098a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	3304      	adds	r3, #4
 80098b0:	4619      	mov	r1, r3
 80098b2:	4610      	mov	r0, r2
 80098b4:	f000 f9b4 	bl	8009c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d109      	bne.n	8009938 <HAL_TIM_PWM_Start+0x24>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b01      	cmp	r3, #1
 800992e:	bf14      	ite	ne
 8009930:	2301      	movne	r3, #1
 8009932:	2300      	moveq	r3, #0
 8009934:	b2db      	uxtb	r3, r3
 8009936:	e022      	b.n	800997e <HAL_TIM_PWM_Start+0x6a>
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	2b04      	cmp	r3, #4
 800993c:	d109      	bne.n	8009952 <HAL_TIM_PWM_Start+0x3e>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b01      	cmp	r3, #1
 8009948:	bf14      	ite	ne
 800994a:	2301      	movne	r3, #1
 800994c:	2300      	moveq	r3, #0
 800994e:	b2db      	uxtb	r3, r3
 8009950:	e015      	b.n	800997e <HAL_TIM_PWM_Start+0x6a>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	2b08      	cmp	r3, #8
 8009956:	d109      	bne.n	800996c <HAL_TIM_PWM_Start+0x58>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b01      	cmp	r3, #1
 8009962:	bf14      	ite	ne
 8009964:	2301      	movne	r3, #1
 8009966:	2300      	moveq	r3, #0
 8009968:	b2db      	uxtb	r3, r3
 800996a:	e008      	b.n	800997e <HAL_TIM_PWM_Start+0x6a>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b01      	cmp	r3, #1
 8009976:	bf14      	ite	ne
 8009978:	2301      	movne	r3, #1
 800997a:	2300      	moveq	r3, #0
 800997c:	b2db      	uxtb	r3, r3
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e07c      	b.n	8009a80 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d104      	bne.n	8009996 <HAL_TIM_PWM_Start+0x82>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2202      	movs	r2, #2
 8009990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009994:	e013      	b.n	80099be <HAL_TIM_PWM_Start+0xaa>
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	2b04      	cmp	r3, #4
 800999a:	d104      	bne.n	80099a6 <HAL_TIM_PWM_Start+0x92>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099a4:	e00b      	b.n	80099be <HAL_TIM_PWM_Start+0xaa>
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d104      	bne.n	80099b6 <HAL_TIM_PWM_Start+0xa2>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2202      	movs	r2, #2
 80099b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099b4:	e003      	b.n	80099be <HAL_TIM_PWM_Start+0xaa>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2202      	movs	r2, #2
 80099ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2201      	movs	r2, #1
 80099c4:	6839      	ldr	r1, [r7, #0]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 fb74 	bl	800a0b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a2d      	ldr	r2, [pc, #180]	; (8009a88 <HAL_TIM_PWM_Start+0x174>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d004      	beq.n	80099e0 <HAL_TIM_PWM_Start+0xcc>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a2c      	ldr	r2, [pc, #176]	; (8009a8c <HAL_TIM_PWM_Start+0x178>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d101      	bne.n	80099e4 <HAL_TIM_PWM_Start+0xd0>
 80099e0:	2301      	movs	r3, #1
 80099e2:	e000      	b.n	80099e6 <HAL_TIM_PWM_Start+0xd2>
 80099e4:	2300      	movs	r3, #0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d007      	beq.n	80099fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a22      	ldr	r2, [pc, #136]	; (8009a88 <HAL_TIM_PWM_Start+0x174>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d022      	beq.n	8009a4a <HAL_TIM_PWM_Start+0x136>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a0c:	d01d      	beq.n	8009a4a <HAL_TIM_PWM_Start+0x136>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a1f      	ldr	r2, [pc, #124]	; (8009a90 <HAL_TIM_PWM_Start+0x17c>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d018      	beq.n	8009a4a <HAL_TIM_PWM_Start+0x136>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a1d      	ldr	r2, [pc, #116]	; (8009a94 <HAL_TIM_PWM_Start+0x180>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d013      	beq.n	8009a4a <HAL_TIM_PWM_Start+0x136>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a1c      	ldr	r2, [pc, #112]	; (8009a98 <HAL_TIM_PWM_Start+0x184>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d00e      	beq.n	8009a4a <HAL_TIM_PWM_Start+0x136>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a16      	ldr	r2, [pc, #88]	; (8009a8c <HAL_TIM_PWM_Start+0x178>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d009      	beq.n	8009a4a <HAL_TIM_PWM_Start+0x136>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a18      	ldr	r2, [pc, #96]	; (8009a9c <HAL_TIM_PWM_Start+0x188>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d004      	beq.n	8009a4a <HAL_TIM_PWM_Start+0x136>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a16      	ldr	r2, [pc, #88]	; (8009aa0 <HAL_TIM_PWM_Start+0x18c>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d111      	bne.n	8009a6e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	f003 0307 	and.w	r3, r3, #7
 8009a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b06      	cmp	r3, #6
 8009a5a:	d010      	beq.n	8009a7e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f042 0201 	orr.w	r2, r2, #1
 8009a6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a6c:	e007      	b.n	8009a7e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f042 0201 	orr.w	r2, r2, #1
 8009a7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	40010000 	.word	0x40010000
 8009a8c:	40010400 	.word	0x40010400
 8009a90:	40000400 	.word	0x40000400
 8009a94:	40000800 	.word	0x40000800
 8009a98:	40000c00 	.word	0x40000c00
 8009a9c:	40014000 	.word	0x40014000
 8009aa0:	40001800 	.word	0x40001800

08009aa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d101      	bne.n	8009abe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009aba:	2302      	movs	r3, #2
 8009abc:	e0ac      	b.n	8009c18 <HAL_TIM_PWM_ConfigChannel+0x174>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b0c      	cmp	r3, #12
 8009aca:	f200 809f 	bhi.w	8009c0c <HAL_TIM_PWM_ConfigChannel+0x168>
 8009ace:	a201      	add	r2, pc, #4	; (adr r2, 8009ad4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad4:	08009b09 	.word	0x08009b09
 8009ad8:	08009c0d 	.word	0x08009c0d
 8009adc:	08009c0d 	.word	0x08009c0d
 8009ae0:	08009c0d 	.word	0x08009c0d
 8009ae4:	08009b49 	.word	0x08009b49
 8009ae8:	08009c0d 	.word	0x08009c0d
 8009aec:	08009c0d 	.word	0x08009c0d
 8009af0:	08009c0d 	.word	0x08009c0d
 8009af4:	08009b8b 	.word	0x08009b8b
 8009af8:	08009c0d 	.word	0x08009c0d
 8009afc:	08009c0d 	.word	0x08009c0d
 8009b00:	08009c0d 	.word	0x08009c0d
 8009b04:	08009bcb 	.word	0x08009bcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68b9      	ldr	r1, [r7, #8]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 f924 	bl	8009d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	699a      	ldr	r2, [r3, #24]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f042 0208 	orr.w	r2, r2, #8
 8009b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	699a      	ldr	r2, [r3, #24]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f022 0204 	bic.w	r2, r2, #4
 8009b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6999      	ldr	r1, [r3, #24]
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	691a      	ldr	r2, [r3, #16]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	430a      	orrs	r2, r1
 8009b44:	619a      	str	r2, [r3, #24]
      break;
 8009b46:	e062      	b.n	8009c0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68b9      	ldr	r1, [r7, #8]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 f974 	bl	8009e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	699a      	ldr	r2, [r3, #24]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	699a      	ldr	r2, [r3, #24]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6999      	ldr	r1, [r3, #24]
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	021a      	lsls	r2, r3, #8
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	430a      	orrs	r2, r1
 8009b86:	619a      	str	r2, [r3, #24]
      break;
 8009b88:	e041      	b.n	8009c0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68b9      	ldr	r1, [r7, #8]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f000 f9c7 	bl	8009f24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	69da      	ldr	r2, [r3, #28]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f042 0208 	orr.w	r2, r2, #8
 8009ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	69da      	ldr	r2, [r3, #28]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f022 0204 	bic.w	r2, r2, #4
 8009bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	69d9      	ldr	r1, [r3, #28]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	691a      	ldr	r2, [r3, #16]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	430a      	orrs	r2, r1
 8009bc6:	61da      	str	r2, [r3, #28]
      break;
 8009bc8:	e021      	b.n	8009c0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68b9      	ldr	r1, [r7, #8]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 fa1b 	bl	800a00c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	69da      	ldr	r2, [r3, #28]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	69da      	ldr	r2, [r3, #28]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	69d9      	ldr	r1, [r3, #28]
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	021a      	lsls	r2, r3, #8
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	430a      	orrs	r2, r1
 8009c08:	61da      	str	r2, [r3, #28]
      break;
 8009c0a:	e000      	b.n	8009c0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009c0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a3f      	ldr	r2, [pc, #252]	; (8009d30 <TIM_Base_SetConfig+0x110>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d013      	beq.n	8009c60 <TIM_Base_SetConfig+0x40>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c3e:	d00f      	beq.n	8009c60 <TIM_Base_SetConfig+0x40>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a3c      	ldr	r2, [pc, #240]	; (8009d34 <TIM_Base_SetConfig+0x114>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d00b      	beq.n	8009c60 <TIM_Base_SetConfig+0x40>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a3b      	ldr	r2, [pc, #236]	; (8009d38 <TIM_Base_SetConfig+0x118>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d007      	beq.n	8009c60 <TIM_Base_SetConfig+0x40>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a3a      	ldr	r2, [pc, #232]	; (8009d3c <TIM_Base_SetConfig+0x11c>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d003      	beq.n	8009c60 <TIM_Base_SetConfig+0x40>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a39      	ldr	r2, [pc, #228]	; (8009d40 <TIM_Base_SetConfig+0x120>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d108      	bne.n	8009c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a2e      	ldr	r2, [pc, #184]	; (8009d30 <TIM_Base_SetConfig+0x110>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d02b      	beq.n	8009cd2 <TIM_Base_SetConfig+0xb2>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c80:	d027      	beq.n	8009cd2 <TIM_Base_SetConfig+0xb2>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a2b      	ldr	r2, [pc, #172]	; (8009d34 <TIM_Base_SetConfig+0x114>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d023      	beq.n	8009cd2 <TIM_Base_SetConfig+0xb2>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a2a      	ldr	r2, [pc, #168]	; (8009d38 <TIM_Base_SetConfig+0x118>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d01f      	beq.n	8009cd2 <TIM_Base_SetConfig+0xb2>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a29      	ldr	r2, [pc, #164]	; (8009d3c <TIM_Base_SetConfig+0x11c>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d01b      	beq.n	8009cd2 <TIM_Base_SetConfig+0xb2>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a28      	ldr	r2, [pc, #160]	; (8009d40 <TIM_Base_SetConfig+0x120>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d017      	beq.n	8009cd2 <TIM_Base_SetConfig+0xb2>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a27      	ldr	r2, [pc, #156]	; (8009d44 <TIM_Base_SetConfig+0x124>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d013      	beq.n	8009cd2 <TIM_Base_SetConfig+0xb2>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a26      	ldr	r2, [pc, #152]	; (8009d48 <TIM_Base_SetConfig+0x128>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d00f      	beq.n	8009cd2 <TIM_Base_SetConfig+0xb2>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a25      	ldr	r2, [pc, #148]	; (8009d4c <TIM_Base_SetConfig+0x12c>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d00b      	beq.n	8009cd2 <TIM_Base_SetConfig+0xb2>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a24      	ldr	r2, [pc, #144]	; (8009d50 <TIM_Base_SetConfig+0x130>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d007      	beq.n	8009cd2 <TIM_Base_SetConfig+0xb2>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a23      	ldr	r2, [pc, #140]	; (8009d54 <TIM_Base_SetConfig+0x134>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d003      	beq.n	8009cd2 <TIM_Base_SetConfig+0xb2>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a22      	ldr	r2, [pc, #136]	; (8009d58 <TIM_Base_SetConfig+0x138>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d108      	bne.n	8009ce4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	695b      	ldr	r3, [r3, #20]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	689a      	ldr	r2, [r3, #8]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a09      	ldr	r2, [pc, #36]	; (8009d30 <TIM_Base_SetConfig+0x110>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d003      	beq.n	8009d18 <TIM_Base_SetConfig+0xf8>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a0b      	ldr	r2, [pc, #44]	; (8009d40 <TIM_Base_SetConfig+0x120>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d103      	bne.n	8009d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	691a      	ldr	r2, [r3, #16]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	615a      	str	r2, [r3, #20]
}
 8009d26:	bf00      	nop
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bc80      	pop	{r7}
 8009d2e:	4770      	bx	lr
 8009d30:	40010000 	.word	0x40010000
 8009d34:	40000400 	.word	0x40000400
 8009d38:	40000800 	.word	0x40000800
 8009d3c:	40000c00 	.word	0x40000c00
 8009d40:	40010400 	.word	0x40010400
 8009d44:	40014000 	.word	0x40014000
 8009d48:	40014400 	.word	0x40014400
 8009d4c:	40014800 	.word	0x40014800
 8009d50:	40001800 	.word	0x40001800
 8009d54:	40001c00 	.word	0x40001c00
 8009d58:	40002000 	.word	0x40002000

08009d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b087      	sub	sp, #28
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	f023 0201 	bic.w	r2, r3, #1
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f023 0303 	bic.w	r3, r3, #3
 8009d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f023 0302 	bic.w	r3, r3, #2
 8009da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a20      	ldr	r2, [pc, #128]	; (8009e34 <TIM_OC1_SetConfig+0xd8>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d003      	beq.n	8009dc0 <TIM_OC1_SetConfig+0x64>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a1f      	ldr	r2, [pc, #124]	; (8009e38 <TIM_OC1_SetConfig+0xdc>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d10c      	bne.n	8009dda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	f023 0308 	bic.w	r3, r3, #8
 8009dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	697a      	ldr	r2, [r7, #20]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f023 0304 	bic.w	r3, r3, #4
 8009dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a15      	ldr	r2, [pc, #84]	; (8009e34 <TIM_OC1_SetConfig+0xd8>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d003      	beq.n	8009dea <TIM_OC1_SetConfig+0x8e>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a14      	ldr	r2, [pc, #80]	; (8009e38 <TIM_OC1_SetConfig+0xdc>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d111      	bne.n	8009e0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	693a      	ldr	r2, [r7, #16]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	699b      	ldr	r3, [r3, #24]
 8009e08:	693a      	ldr	r2, [r7, #16]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	697a      	ldr	r2, [r7, #20]
 8009e26:	621a      	str	r2, [r3, #32]
}
 8009e28:	bf00      	nop
 8009e2a:	371c      	adds	r7, #28
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bc80      	pop	{r7}
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	40010000 	.word	0x40010000
 8009e38:	40010400 	.word	0x40010400

08009e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	f023 0210 	bic.w	r2, r3, #16
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	021b      	lsls	r3, r3, #8
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	f023 0320 	bic.w	r3, r3, #32
 8009e86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	011b      	lsls	r3, r3, #4
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a21      	ldr	r2, [pc, #132]	; (8009f1c <TIM_OC2_SetConfig+0xe0>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d003      	beq.n	8009ea4 <TIM_OC2_SetConfig+0x68>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a20      	ldr	r2, [pc, #128]	; (8009f20 <TIM_OC2_SetConfig+0xe4>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d10d      	bne.n	8009ec0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	011b      	lsls	r3, r3, #4
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ebe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a16      	ldr	r2, [pc, #88]	; (8009f1c <TIM_OC2_SetConfig+0xe0>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d003      	beq.n	8009ed0 <TIM_OC2_SetConfig+0x94>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a15      	ldr	r2, [pc, #84]	; (8009f20 <TIM_OC2_SetConfig+0xe4>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d113      	bne.n	8009ef8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	695b      	ldr	r3, [r3, #20]
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	693a      	ldr	r2, [r7, #16]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	621a      	str	r2, [r3, #32]
}
 8009f12:	bf00      	nop
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bc80      	pop	{r7}
 8009f1a:	4770      	bx	lr
 8009f1c:	40010000 	.word	0x40010000
 8009f20:	40010400 	.word	0x40010400

08009f24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a1b      	ldr	r3, [r3, #32]
 8009f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f023 0303 	bic.w	r3, r3, #3
 8009f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	021b      	lsls	r3, r3, #8
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a21      	ldr	r2, [pc, #132]	; (800a004 <TIM_OC3_SetConfig+0xe0>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d003      	beq.n	8009f8a <TIM_OC3_SetConfig+0x66>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a20      	ldr	r2, [pc, #128]	; (800a008 <TIM_OC3_SetConfig+0xe4>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d10d      	bne.n	8009fa6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	021b      	lsls	r3, r3, #8
 8009f98:	697a      	ldr	r2, [r7, #20]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a16      	ldr	r2, [pc, #88]	; (800a004 <TIM_OC3_SetConfig+0xe0>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d003      	beq.n	8009fb6 <TIM_OC3_SetConfig+0x92>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a15      	ldr	r2, [pc, #84]	; (800a008 <TIM_OC3_SetConfig+0xe4>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d113      	bne.n	8009fde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	011b      	lsls	r3, r3, #4
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	011b      	lsls	r3, r3, #4
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	693a      	ldr	r2, [r7, #16]
 8009fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	685a      	ldr	r2, [r3, #4]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	697a      	ldr	r2, [r7, #20]
 8009ff6:	621a      	str	r2, [r3, #32]
}
 8009ff8:	bf00      	nop
 8009ffa:	371c      	adds	r7, #28
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bc80      	pop	{r7}
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	40010000 	.word	0x40010000
 800a008:	40010400 	.word	0x40010400

0800a00c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a1b      	ldr	r3, [r3, #32]
 800a01a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	69db      	ldr	r3, [r3, #28]
 800a032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a03a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	021b      	lsls	r3, r3, #8
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	031b      	lsls	r3, r3, #12
 800a05e:	693a      	ldr	r2, [r7, #16]
 800a060:	4313      	orrs	r3, r2
 800a062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a11      	ldr	r2, [pc, #68]	; (800a0ac <TIM_OC4_SetConfig+0xa0>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d003      	beq.n	800a074 <TIM_OC4_SetConfig+0x68>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a10      	ldr	r2, [pc, #64]	; (800a0b0 <TIM_OC4_SetConfig+0xa4>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d109      	bne.n	800a088 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a07a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	019b      	lsls	r3, r3, #6
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	4313      	orrs	r3, r2
 800a086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	697a      	ldr	r2, [r7, #20]
 800a08c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	685a      	ldr	r2, [r3, #4]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	621a      	str	r2, [r3, #32]
}
 800a0a2:	bf00      	nop
 800a0a4:	371c      	adds	r7, #28
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bc80      	pop	{r7}
 800a0aa:	4770      	bx	lr
 800a0ac:	40010000 	.word	0x40010000
 800a0b0:	40010400 	.word	0x40010400

0800a0b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b087      	sub	sp, #28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	f003 031f 	and.w	r3, r3, #31
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6a1a      	ldr	r2, [r3, #32]
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	43db      	mvns	r3, r3
 800a0d6:	401a      	ands	r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6a1a      	ldr	r2, [r3, #32]
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f003 031f 	and.w	r3, r3, #31
 800a0e6:	6879      	ldr	r1, [r7, #4]
 800a0e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ec:	431a      	orrs	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	621a      	str	r2, [r3, #32]
}
 800a0f2:	bf00      	nop
 800a0f4:	371c      	adds	r7, #28
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bc80      	pop	{r7}
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d101      	bne.n	800a114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a110:	2302      	movs	r3, #2
 800a112:	e05a      	b.n	800a1ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2201      	movs	r2, #1
 800a118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2202      	movs	r2, #2
 800a120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a13a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	4313      	orrs	r3, r2
 800a144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a20      	ldr	r2, [pc, #128]	; (800a1d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d022      	beq.n	800a19e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a160:	d01d      	beq.n	800a19e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a1c      	ldr	r2, [pc, #112]	; (800a1d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d018      	beq.n	800a19e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a1a      	ldr	r2, [pc, #104]	; (800a1dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d013      	beq.n	800a19e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a19      	ldr	r2, [pc, #100]	; (800a1e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d00e      	beq.n	800a19e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a17      	ldr	r2, [pc, #92]	; (800a1e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d009      	beq.n	800a19e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a16      	ldr	r2, [pc, #88]	; (800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d004      	beq.n	800a19e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a14      	ldr	r2, [pc, #80]	; (800a1ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d10c      	bne.n	800a1b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bc80      	pop	{r7}
 800a1d2:	4770      	bx	lr
 800a1d4:	40010000 	.word	0x40010000
 800a1d8:	40000400 	.word	0x40000400
 800a1dc:	40000800 	.word	0x40000800
 800a1e0:	40000c00 	.word	0x40000c00
 800a1e4:	40010400 	.word	0x40010400
 800a1e8:	40014000 	.word	0x40014000
 800a1ec:	40001800 	.word	0x40001800

0800a1f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	f107 001c 	add.w	r0, r7, #28
 800a1fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a204:	2b01      	cmp	r3, #1
 800a206:	d122      	bne.n	800a24e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a20c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a21c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a232:	2b01      	cmp	r3, #1
 800a234:	d105      	bne.n	800a242 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f001 fafa 	bl	800b83c <USB_CoreReset>
 800a248:	4603      	mov	r3, r0
 800a24a:	73fb      	strb	r3, [r7, #15]
 800a24c:	e010      	b.n	800a270 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f001 faee 	bl	800b83c <USB_CoreReset>
 800a260:	4603      	mov	r3, r0
 800a262:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a268:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a272:	2b01      	cmp	r3, #1
 800a274:	d10b      	bne.n	800a28e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	f043 0206 	orr.w	r2, r3, #6
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	f043 0220 	orr.w	r2, r3, #32
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a29a:	b004      	add	sp, #16
 800a29c:	4770      	bx	lr
	...

0800a2a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b087      	sub	sp, #28
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a2ae:	79fb      	ldrb	r3, [r7, #7]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d165      	bne.n	800a380 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	4a41      	ldr	r2, [pc, #260]	; (800a3bc <USB_SetTurnaroundTime+0x11c>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d906      	bls.n	800a2ca <USB_SetTurnaroundTime+0x2a>
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	4a40      	ldr	r2, [pc, #256]	; (800a3c0 <USB_SetTurnaroundTime+0x120>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d202      	bcs.n	800a2ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a2c4:	230f      	movs	r3, #15
 800a2c6:	617b      	str	r3, [r7, #20]
 800a2c8:	e062      	b.n	800a390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	4a3c      	ldr	r2, [pc, #240]	; (800a3c0 <USB_SetTurnaroundTime+0x120>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d306      	bcc.n	800a2e0 <USB_SetTurnaroundTime+0x40>
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	4a3b      	ldr	r2, [pc, #236]	; (800a3c4 <USB_SetTurnaroundTime+0x124>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d202      	bcs.n	800a2e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a2da:	230e      	movs	r3, #14
 800a2dc:	617b      	str	r3, [r7, #20]
 800a2de:	e057      	b.n	800a390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	4a38      	ldr	r2, [pc, #224]	; (800a3c4 <USB_SetTurnaroundTime+0x124>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d306      	bcc.n	800a2f6 <USB_SetTurnaroundTime+0x56>
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	4a37      	ldr	r2, [pc, #220]	; (800a3c8 <USB_SetTurnaroundTime+0x128>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d202      	bcs.n	800a2f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a2f0:	230d      	movs	r3, #13
 800a2f2:	617b      	str	r3, [r7, #20]
 800a2f4:	e04c      	b.n	800a390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	4a33      	ldr	r2, [pc, #204]	; (800a3c8 <USB_SetTurnaroundTime+0x128>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d306      	bcc.n	800a30c <USB_SetTurnaroundTime+0x6c>
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	4a32      	ldr	r2, [pc, #200]	; (800a3cc <USB_SetTurnaroundTime+0x12c>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d802      	bhi.n	800a30c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a306:	230c      	movs	r3, #12
 800a308:	617b      	str	r3, [r7, #20]
 800a30a:	e041      	b.n	800a390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	4a2f      	ldr	r2, [pc, #188]	; (800a3cc <USB_SetTurnaroundTime+0x12c>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d906      	bls.n	800a322 <USB_SetTurnaroundTime+0x82>
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	4a2e      	ldr	r2, [pc, #184]	; (800a3d0 <USB_SetTurnaroundTime+0x130>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d802      	bhi.n	800a322 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a31c:	230b      	movs	r3, #11
 800a31e:	617b      	str	r3, [r7, #20]
 800a320:	e036      	b.n	800a390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	4a2a      	ldr	r2, [pc, #168]	; (800a3d0 <USB_SetTurnaroundTime+0x130>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d906      	bls.n	800a338 <USB_SetTurnaroundTime+0x98>
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	4a29      	ldr	r2, [pc, #164]	; (800a3d4 <USB_SetTurnaroundTime+0x134>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d802      	bhi.n	800a338 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a332:	230a      	movs	r3, #10
 800a334:	617b      	str	r3, [r7, #20]
 800a336:	e02b      	b.n	800a390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	4a26      	ldr	r2, [pc, #152]	; (800a3d4 <USB_SetTurnaroundTime+0x134>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d906      	bls.n	800a34e <USB_SetTurnaroundTime+0xae>
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	4a25      	ldr	r2, [pc, #148]	; (800a3d8 <USB_SetTurnaroundTime+0x138>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d202      	bcs.n	800a34e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a348:	2309      	movs	r3, #9
 800a34a:	617b      	str	r3, [r7, #20]
 800a34c:	e020      	b.n	800a390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	4a21      	ldr	r2, [pc, #132]	; (800a3d8 <USB_SetTurnaroundTime+0x138>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d306      	bcc.n	800a364 <USB_SetTurnaroundTime+0xc4>
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	4a20      	ldr	r2, [pc, #128]	; (800a3dc <USB_SetTurnaroundTime+0x13c>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d802      	bhi.n	800a364 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a35e:	2308      	movs	r3, #8
 800a360:	617b      	str	r3, [r7, #20]
 800a362:	e015      	b.n	800a390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	4a1d      	ldr	r2, [pc, #116]	; (800a3dc <USB_SetTurnaroundTime+0x13c>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d906      	bls.n	800a37a <USB_SetTurnaroundTime+0xda>
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	4a1c      	ldr	r2, [pc, #112]	; (800a3e0 <USB_SetTurnaroundTime+0x140>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d202      	bcs.n	800a37a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a374:	2307      	movs	r3, #7
 800a376:	617b      	str	r3, [r7, #20]
 800a378:	e00a      	b.n	800a390 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a37a:	2306      	movs	r3, #6
 800a37c:	617b      	str	r3, [r7, #20]
 800a37e:	e007      	b.n	800a390 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a380:	79fb      	ldrb	r3, [r7, #7]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d102      	bne.n	800a38c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a386:	2309      	movs	r3, #9
 800a388:	617b      	str	r3, [r7, #20]
 800a38a:	e001      	b.n	800a390 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a38c:	2309      	movs	r3, #9
 800a38e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	68da      	ldr	r2, [r3, #12]
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	029b      	lsls	r3, r3, #10
 800a3a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a3a8:	431a      	orrs	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	371c      	adds	r7, #28
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bc80      	pop	{r7}
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	00d8acbf 	.word	0x00d8acbf
 800a3c0:	00e4e1c0 	.word	0x00e4e1c0
 800a3c4:	00f42400 	.word	0x00f42400
 800a3c8:	01067380 	.word	0x01067380
 800a3cc:	011a499f 	.word	0x011a499f
 800a3d0:	01312cff 	.word	0x01312cff
 800a3d4:	014ca43f 	.word	0x014ca43f
 800a3d8:	016e3600 	.word	0x016e3600
 800a3dc:	01a6ab1f 	.word	0x01a6ab1f
 800a3e0:	01e84800 	.word	0x01e84800

0800a3e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	f043 0201 	orr.w	r2, r3, #1
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bc80      	pop	{r7}
 800a402:	4770      	bx	lr

0800a404 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f023 0201 	bic.w	r2, r3, #1
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	bc80      	pop	{r7}
 800a422:	4770      	bx	lr

0800a424 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	460b      	mov	r3, r1
 800a42e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a430:	2300      	movs	r3, #0
 800a432:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a440:	78fb      	ldrb	r3, [r7, #3]
 800a442:	2b01      	cmp	r3, #1
 800a444:	d115      	bne.n	800a472 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a452:	2001      	movs	r0, #1
 800a454:	f7fb fcec 	bl	8005e30 <HAL_Delay>
      ms++;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	3301      	adds	r3, #1
 800a45c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f001 f961 	bl	800b726 <USB_GetMode>
 800a464:	4603      	mov	r3, r0
 800a466:	2b01      	cmp	r3, #1
 800a468:	d01e      	beq.n	800a4a8 <USB_SetCurrentMode+0x84>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2b31      	cmp	r3, #49	; 0x31
 800a46e:	d9f0      	bls.n	800a452 <USB_SetCurrentMode+0x2e>
 800a470:	e01a      	b.n	800a4a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a472:	78fb      	ldrb	r3, [r7, #3]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d115      	bne.n	800a4a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a484:	2001      	movs	r0, #1
 800a486:	f7fb fcd3 	bl	8005e30 <HAL_Delay>
      ms++;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	3301      	adds	r3, #1
 800a48e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f001 f948 	bl	800b726 <USB_GetMode>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d005      	beq.n	800a4a8 <USB_SetCurrentMode+0x84>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2b31      	cmp	r3, #49	; 0x31
 800a4a0:	d9f0      	bls.n	800a484 <USB_SetCurrentMode+0x60>
 800a4a2:	e001      	b.n	800a4a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e005      	b.n	800a4b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b32      	cmp	r3, #50	; 0x32
 800a4ac:	d101      	bne.n	800a4b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e000      	b.n	800a4b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4bc:	b084      	sub	sp, #16
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b086      	sub	sp, #24
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a4ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	613b      	str	r3, [r7, #16]
 800a4da:	e009      	b.n	800a4f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	3340      	adds	r3, #64	; 0x40
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4413      	add	r3, r2
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	613b      	str	r3, [r7, #16]
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	2b0e      	cmp	r3, #14
 800a4f4:	d9f2      	bls.n	800a4dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d11c      	bne.n	800a536 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a50a:	f043 0302 	orr.w	r3, r3, #2
 800a50e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a514:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a520:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	639a      	str	r2, [r3, #56]	; 0x38
 800a534:	e00b      	b.n	800a54e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a546:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a554:	461a      	mov	r2, r3
 800a556:	2300      	movs	r3, #0
 800a558:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a560:	4619      	mov	r1, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a568:	461a      	mov	r2, r3
 800a56a:	680b      	ldr	r3, [r1, #0]
 800a56c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a570:	2b01      	cmp	r3, #1
 800a572:	d10c      	bne.n	800a58e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a576:	2b00      	cmp	r3, #0
 800a578:	d104      	bne.n	800a584 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a57a:	2100      	movs	r1, #0
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f945 	bl	800a80c <USB_SetDevSpeed>
 800a582:	e008      	b.n	800a596 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a584:	2101      	movs	r1, #1
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f940 	bl	800a80c <USB_SetDevSpeed>
 800a58c:	e003      	b.n	800a596 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a58e:	2103      	movs	r1, #3
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f93b 	bl	800a80c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a596:	2110      	movs	r1, #16
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f8f3 	bl	800a784 <USB_FlushTxFifo>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f90f 	bl	800a7cc <USB_FlushRxFifo>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d001      	beq.n	800a5b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5be:	461a      	mov	r2, r3
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	2300      	movs	r3, #0
 800a5da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5dc:	2300      	movs	r3, #0
 800a5de:	613b      	str	r3, [r7, #16]
 800a5e0:	e043      	b.n	800a66a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	015a      	lsls	r2, r3, #5
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5f8:	d118      	bne.n	800a62c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10a      	bne.n	800a616 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	015a      	lsls	r2, r3, #5
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	4413      	add	r3, r2
 800a608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a60c:	461a      	mov	r2, r3
 800a60e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a612:	6013      	str	r3, [r2, #0]
 800a614:	e013      	b.n	800a63e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	015a      	lsls	r2, r3, #5
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	4413      	add	r3, r2
 800a61e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a622:	461a      	mov	r2, r3
 800a624:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a628:	6013      	str	r3, [r2, #0]
 800a62a:	e008      	b.n	800a63e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	015a      	lsls	r2, r3, #5
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	4413      	add	r3, r2
 800a634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a638:	461a      	mov	r2, r3
 800a63a:	2300      	movs	r3, #0
 800a63c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	015a      	lsls	r2, r3, #5
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	4413      	add	r3, r2
 800a646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a64a:	461a      	mov	r2, r3
 800a64c:	2300      	movs	r3, #0
 800a64e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	015a      	lsls	r2, r3, #5
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	4413      	add	r3, r2
 800a658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a65c:	461a      	mov	r2, r3
 800a65e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a662:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	3301      	adds	r3, #1
 800a668:	613b      	str	r3, [r7, #16]
 800a66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d3b7      	bcc.n	800a5e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a672:	2300      	movs	r3, #0
 800a674:	613b      	str	r3, [r7, #16]
 800a676:	e043      	b.n	800a700 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	015a      	lsls	r2, r3, #5
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	4413      	add	r3, r2
 800a680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a68a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a68e:	d118      	bne.n	800a6c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10a      	bne.n	800a6ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a6a8:	6013      	str	r3, [r2, #0]
 800a6aa:	e013      	b.n	800a6d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a6be:	6013      	str	r3, [r2, #0]
 800a6c0:	e008      	b.n	800a6d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	015a      	lsls	r2, r3, #5
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	015a      	lsls	r2, r3, #5
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	015a      	lsls	r2, r3, #5
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a6f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	613b      	str	r3, [r7, #16]
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	429a      	cmp	r2, r3
 800a706:	d3b7      	bcc.n	800a678 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a71a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a728:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d105      	bne.n	800a73c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	f043 0210 	orr.w	r2, r3, #16
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	699a      	ldr	r2, [r3, #24]
 800a740:	4b0f      	ldr	r3, [pc, #60]	; (800a780 <USB_DevInit+0x2c4>)
 800a742:	4313      	orrs	r3, r2
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d005      	beq.n	800a75a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	699b      	ldr	r3, [r3, #24]
 800a752:	f043 0208 	orr.w	r2, r3, #8
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a75a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d107      	bne.n	800a770 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a768:	f043 0304 	orr.w	r3, r3, #4
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a770:	7dfb      	ldrb	r3, [r7, #23]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a77c:	b004      	add	sp, #16
 800a77e:	4770      	bx	lr
 800a780:	803c3800 	.word	0x803c3800

0800a784 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a78e:	2300      	movs	r3, #0
 800a790:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	019b      	lsls	r3, r3, #6
 800a796:	f043 0220 	orr.w	r2, r3, #32
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	60fb      	str	r3, [r7, #12]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	4a08      	ldr	r2, [pc, #32]	; (800a7c8 <USB_FlushTxFifo+0x44>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d901      	bls.n	800a7b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	e006      	b.n	800a7be <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	f003 0320 	and.w	r3, r3, #32
 800a7b8:	2b20      	cmp	r3, #32
 800a7ba:	d0f0      	beq.n	800a79e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3714      	adds	r7, #20
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bc80      	pop	{r7}
 800a7c6:	4770      	bx	lr
 800a7c8:	00030d40 	.word	0x00030d40

0800a7cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2210      	movs	r2, #16
 800a7dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	60fb      	str	r3, [r7, #12]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	4a08      	ldr	r2, [pc, #32]	; (800a808 <USB_FlushRxFifo+0x3c>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d901      	bls.n	800a7f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e006      	b.n	800a7fe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	f003 0310 	and.w	r3, r3, #16
 800a7f8:	2b10      	cmp	r3, #16
 800a7fa:	d0f0      	beq.n	800a7de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3714      	adds	r7, #20
 800a802:	46bd      	mov	sp, r7
 800a804:	bc80      	pop	{r7}
 800a806:	4770      	bx	lr
 800a808:	00030d40 	.word	0x00030d40

0800a80c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	78fb      	ldrb	r3, [r7, #3]
 800a826:	68f9      	ldr	r1, [r7, #12]
 800a828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a82c:	4313      	orrs	r3, r2
 800a82e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3714      	adds	r7, #20
 800a836:	46bd      	mov	sp, r7
 800a838:	bc80      	pop	{r7}
 800a83a:	4770      	bx	lr

0800a83c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f003 0306 	and.w	r3, r3, #6
 800a854:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d102      	bne.n	800a862 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a85c:	2300      	movs	r3, #0
 800a85e:	75fb      	strb	r3, [r7, #23]
 800a860:	e00a      	b.n	800a878 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2b02      	cmp	r3, #2
 800a866:	d002      	beq.n	800a86e <USB_GetDevSpeed+0x32>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2b06      	cmp	r3, #6
 800a86c:	d102      	bne.n	800a874 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a86e:	2302      	movs	r3, #2
 800a870:	75fb      	strb	r3, [r7, #23]
 800a872:	e001      	b.n	800a878 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a874:	230f      	movs	r3, #15
 800a876:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a878:	7dfb      	ldrb	r3, [r7, #23]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	371c      	adds	r7, #28
 800a87e:	46bd      	mov	sp, r7
 800a880:	bc80      	pop	{r7}
 800a882:	4770      	bx	lr

0800a884 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	785b      	ldrb	r3, [r3, #1]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d13a      	bne.n	800a916 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8a6:	69da      	ldr	r2, [r3, #28]
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	f003 030f 	and.w	r3, r3, #15
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	68f9      	ldr	r1, [r7, #12]
 800a8ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	015a      	lsls	r2, r3, #5
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d155      	bne.n	800a984 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	78db      	ldrb	r3, [r3, #3]
 800a8f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	059b      	lsls	r3, r3, #22
 800a8fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	0151      	lsls	r1, r2, #5
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	440a      	add	r2, r1
 800a906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a90a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a90e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a912:	6013      	str	r3, [r2, #0]
 800a914:	e036      	b.n	800a984 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a91c:	69da      	ldr	r2, [r3, #28]
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	f003 030f 	and.w	r3, r3, #15
 800a926:	2101      	movs	r1, #1
 800a928:	fa01 f303 	lsl.w	r3, r1, r3
 800a92c:	041b      	lsls	r3, r3, #16
 800a92e:	68f9      	ldr	r1, [r7, #12]
 800a930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a934:	4313      	orrs	r3, r2
 800a936:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	015a      	lsls	r2, r3, #5
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d11a      	bne.n	800a984 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	015a      	lsls	r2, r3, #5
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	4413      	add	r3, r2
 800a956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	78db      	ldrb	r3, [r3, #3]
 800a968:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a96a:	430b      	orrs	r3, r1
 800a96c:	4313      	orrs	r3, r2
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	0151      	lsls	r1, r2, #5
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	440a      	add	r2, r1
 800a976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a97a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a97e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a982:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bc80      	pop	{r7}
 800a98e:	4770      	bx	lr

0800a990 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	785b      	ldrb	r3, [r3, #1]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d161      	bne.n	800aa70 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9c2:	d11f      	bne.n	800aa04 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	015a      	lsls	r2, r3, #5
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	0151      	lsls	r1, r2, #5
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	440a      	add	r2, r1
 800a9da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a9e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68ba      	ldr	r2, [r7, #8]
 800a9f4:	0151      	lsls	r1, r2, #5
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	440a      	add	r2, r1
 800a9fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	f003 030f 	and.w	r3, r3, #15
 800aa14:	2101      	movs	r1, #1
 800aa16:	fa01 f303 	lsl.w	r3, r1, r3
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	43db      	mvns	r3, r3
 800aa1e:	68f9      	ldr	r1, [r7, #12]
 800aa20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa24:	4013      	ands	r3, r2
 800aa26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa2e:	69da      	ldr	r2, [r3, #28]
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	f003 030f 	and.w	r3, r3, #15
 800aa38:	2101      	movs	r1, #1
 800aa3a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	43db      	mvns	r3, r3
 800aa42:	68f9      	ldr	r1, [r7, #12]
 800aa44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa48:	4013      	ands	r3, r2
 800aa4a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	015a      	lsls	r2, r3, #5
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	0159      	lsls	r1, r3, #5
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	440b      	add	r3, r1
 800aa62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa66:	4619      	mov	r1, r3
 800aa68:	4b35      	ldr	r3, [pc, #212]	; (800ab40 <USB_DeactivateEndpoint+0x1b0>)
 800aa6a:	4013      	ands	r3, r2
 800aa6c:	600b      	str	r3, [r1, #0]
 800aa6e:	e060      	b.n	800ab32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	015a      	lsls	r2, r3, #5
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	4413      	add	r3, r2
 800aa78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa86:	d11f      	bne.n	800aac8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	015a      	lsls	r2, r3, #5
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	0151      	lsls	r1, r2, #5
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	440a      	add	r2, r1
 800aa9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aaa6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	015a      	lsls	r2, r3, #5
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	0151      	lsls	r1, r2, #5
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	440a      	add	r2, r1
 800aabe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aac6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	f003 030f 	and.w	r3, r3, #15
 800aad8:	2101      	movs	r1, #1
 800aada:	fa01 f303 	lsl.w	r3, r1, r3
 800aade:	041b      	lsls	r3, r3, #16
 800aae0:	43db      	mvns	r3, r3
 800aae2:	68f9      	ldr	r1, [r7, #12]
 800aae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aae8:	4013      	ands	r3, r2
 800aaea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaf2:	69da      	ldr	r2, [r3, #28]
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	f003 030f 	and.w	r3, r3, #15
 800aafc:	2101      	movs	r1, #1
 800aafe:	fa01 f303 	lsl.w	r3, r1, r3
 800ab02:	041b      	lsls	r3, r3, #16
 800ab04:	43db      	mvns	r3, r3
 800ab06:	68f9      	ldr	r1, [r7, #12]
 800ab08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	0159      	lsls	r1, r3, #5
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	440b      	add	r3, r1
 800ab26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	4b05      	ldr	r3, [pc, #20]	; (800ab44 <USB_DeactivateEndpoint+0x1b4>)
 800ab2e:	4013      	ands	r3, r2
 800ab30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bc80      	pop	{r7}
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	ec337800 	.word	0xec337800
 800ab44:	eff37800 	.word	0xeff37800

0800ab48 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b08a      	sub	sp, #40	; 0x28
 800ab4c:	af02      	add	r7, sp, #8
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	4613      	mov	r3, r2
 800ab54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	785b      	ldrb	r3, [r3, #1]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	f040 815c 	bne.w	800ae22 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	695b      	ldr	r3, [r3, #20]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d132      	bne.n	800abd8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	015a      	lsls	r2, r3, #5
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	4413      	add	r3, r2
 800ab7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	69ba      	ldr	r2, [r7, #24]
 800ab82:	0151      	lsls	r1, r2, #5
 800ab84:	69fa      	ldr	r2, [r7, #28]
 800ab86:	440a      	add	r2, r1
 800ab88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	015a      	lsls	r2, r3, #5
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	69ba      	ldr	r2, [r7, #24]
 800aba6:	0151      	lsls	r1, r2, #5
 800aba8:	69fa      	ldr	r2, [r7, #28]
 800abaa:	440a      	add	r2, r1
 800abac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	015a      	lsls	r2, r3, #5
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	4413      	add	r3, r2
 800abbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	69ba      	ldr	r2, [r7, #24]
 800abc6:	0151      	lsls	r1, r2, #5
 800abc8:	69fa      	ldr	r2, [r7, #28]
 800abca:	440a      	add	r2, r1
 800abcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abd0:	0cdb      	lsrs	r3, r3, #19
 800abd2:	04db      	lsls	r3, r3, #19
 800abd4:	6113      	str	r3, [r2, #16]
 800abd6:	e074      	b.n	800acc2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	015a      	lsls	r2, r3, #5
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	4413      	add	r3, r2
 800abe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	69ba      	ldr	r2, [r7, #24]
 800abe8:	0151      	lsls	r1, r2, #5
 800abea:	69fa      	ldr	r2, [r7, #28]
 800abec:	440a      	add	r2, r1
 800abee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abf2:	0cdb      	lsrs	r3, r3, #19
 800abf4:	04db      	lsls	r3, r3, #19
 800abf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	015a      	lsls	r2, r3, #5
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	4413      	add	r3, r2
 800ac00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	69ba      	ldr	r2, [r7, #24]
 800ac08:	0151      	lsls	r1, r2, #5
 800ac0a:	69fa      	ldr	r2, [r7, #28]
 800ac0c:	440a      	add	r2, r1
 800ac0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	015a      	lsls	r2, r3, #5
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	4413      	add	r3, r2
 800ac24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac28:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	6959      	ldr	r1, [r3, #20]
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	440b      	add	r3, r1
 800ac34:	1e59      	subs	r1, r3, #1
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac3e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ac40:	4b9d      	ldr	r3, [pc, #628]	; (800aeb8 <USB_EPStartXfer+0x370>)
 800ac42:	400b      	ands	r3, r1
 800ac44:	69b9      	ldr	r1, [r7, #24]
 800ac46:	0148      	lsls	r0, r1, #5
 800ac48:	69f9      	ldr	r1, [r7, #28]
 800ac4a:	4401      	add	r1, r0
 800ac4c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ac50:	4313      	orrs	r3, r2
 800ac52:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	015a      	lsls	r2, r3, #5
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac60:	691a      	ldr	r2, [r3, #16]
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	695b      	ldr	r3, [r3, #20]
 800ac66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac6a:	69b9      	ldr	r1, [r7, #24]
 800ac6c:	0148      	lsls	r0, r1, #5
 800ac6e:	69f9      	ldr	r1, [r7, #28]
 800ac70:	4401      	add	r1, r0
 800ac72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ac76:	4313      	orrs	r3, r2
 800ac78:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	78db      	ldrb	r3, [r3, #3]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d11f      	bne.n	800acc2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	015a      	lsls	r2, r3, #5
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	4413      	add	r3, r2
 800ac8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	69ba      	ldr	r2, [r7, #24]
 800ac92:	0151      	lsls	r1, r2, #5
 800ac94:	69fa      	ldr	r2, [r7, #28]
 800ac96:	440a      	add	r2, r1
 800ac98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac9c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800aca0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	015a      	lsls	r2, r3, #5
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	4413      	add	r3, r2
 800acaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	69ba      	ldr	r2, [r7, #24]
 800acb2:	0151      	lsls	r1, r2, #5
 800acb4:	69fa      	ldr	r2, [r7, #28]
 800acb6:	440a      	add	r2, r1
 800acb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800acc0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800acc2:	79fb      	ldrb	r3, [r7, #7]
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d14b      	bne.n	800ad60 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	691b      	ldr	r3, [r3, #16]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d009      	beq.n	800ace4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	015a      	lsls	r2, r3, #5
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	4413      	add	r3, r2
 800acd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acdc:	461a      	mov	r2, r3
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	691b      	ldr	r3, [r3, #16]
 800ace2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	78db      	ldrb	r3, [r3, #3]
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d128      	bne.n	800ad3e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d110      	bne.n	800ad1e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	015a      	lsls	r2, r3, #5
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	4413      	add	r3, r2
 800ad04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	69ba      	ldr	r2, [r7, #24]
 800ad0c:	0151      	lsls	r1, r2, #5
 800ad0e:	69fa      	ldr	r2, [r7, #28]
 800ad10:	440a      	add	r2, r1
 800ad12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad1a:	6013      	str	r3, [r2, #0]
 800ad1c:	e00f      	b.n	800ad3e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	015a      	lsls	r2, r3, #5
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	4413      	add	r3, r2
 800ad26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	69ba      	ldr	r2, [r7, #24]
 800ad2e:	0151      	lsls	r1, r2, #5
 800ad30:	69fa      	ldr	r2, [r7, #28]
 800ad32:	440a      	add	r2, r1
 800ad34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad3c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	015a      	lsls	r2, r3, #5
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	4413      	add	r3, r2
 800ad46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	69ba      	ldr	r2, [r7, #24]
 800ad4e:	0151      	lsls	r1, r2, #5
 800ad50:	69fa      	ldr	r2, [r7, #28]
 800ad52:	440a      	add	r2, r1
 800ad54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad5c:	6013      	str	r3, [r2, #0]
 800ad5e:	e12f      	b.n	800afc0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	015a      	lsls	r2, r3, #5
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	4413      	add	r3, r2
 800ad68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	69ba      	ldr	r2, [r7, #24]
 800ad70:	0151      	lsls	r1, r2, #5
 800ad72:	69fa      	ldr	r2, [r7, #28]
 800ad74:	440a      	add	r2, r1
 800ad76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad7e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	78db      	ldrb	r3, [r3, #3]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d015      	beq.n	800adb4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	695b      	ldr	r3, [r3, #20]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f000 8117 	beq.w	800afc0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	f003 030f 	and.w	r3, r3, #15
 800ada2:	2101      	movs	r1, #1
 800ada4:	fa01 f303 	lsl.w	r3, r1, r3
 800ada8:	69f9      	ldr	r1, [r7, #28]
 800adaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adae:	4313      	orrs	r3, r2
 800adb0:	634b      	str	r3, [r1, #52]	; 0x34
 800adb2:	e105      	b.n	800afc0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d110      	bne.n	800ade6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	015a      	lsls	r2, r3, #5
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	4413      	add	r3, r2
 800adcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	69ba      	ldr	r2, [r7, #24]
 800add4:	0151      	lsls	r1, r2, #5
 800add6:	69fa      	ldr	r2, [r7, #28]
 800add8:	440a      	add	r2, r1
 800adda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ade2:	6013      	str	r3, [r2, #0]
 800ade4:	e00f      	b.n	800ae06 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	015a      	lsls	r2, r3, #5
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	4413      	add	r3, r2
 800adee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	69ba      	ldr	r2, [r7, #24]
 800adf6:	0151      	lsls	r1, r2, #5
 800adf8:	69fa      	ldr	r2, [r7, #28]
 800adfa:	440a      	add	r2, r1
 800adfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae04:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	68d9      	ldr	r1, [r3, #12]
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	781a      	ldrb	r2, [r3, #0]
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	695b      	ldr	r3, [r3, #20]
 800ae12:	b298      	uxth	r0, r3
 800ae14:	79fb      	ldrb	r3, [r7, #7]
 800ae16:	9300      	str	r3, [sp, #0]
 800ae18:	4603      	mov	r3, r0
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f000 fa2a 	bl	800b274 <USB_WritePacket>
 800ae20:	e0ce      	b.n	800afc0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	015a      	lsls	r2, r3, #5
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	4413      	add	r3, r2
 800ae2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	69ba      	ldr	r2, [r7, #24]
 800ae32:	0151      	lsls	r1, r2, #5
 800ae34:	69fa      	ldr	r2, [r7, #28]
 800ae36:	440a      	add	r2, r1
 800ae38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae3c:	0cdb      	lsrs	r3, r3, #19
 800ae3e:	04db      	lsls	r3, r3, #19
 800ae40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	015a      	lsls	r2, r3, #5
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	4413      	add	r3, r2
 800ae4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae4e:	691b      	ldr	r3, [r3, #16]
 800ae50:	69ba      	ldr	r2, [r7, #24]
 800ae52:	0151      	lsls	r1, r2, #5
 800ae54:	69fa      	ldr	r2, [r7, #28]
 800ae56:	440a      	add	r2, r1
 800ae58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	695b      	ldr	r3, [r3, #20]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d126      	bne.n	800aebc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7a:	691a      	ldr	r2, [r3, #16]
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae84:	69b9      	ldr	r1, [r7, #24]
 800ae86:	0148      	lsls	r0, r1, #5
 800ae88:	69f9      	ldr	r1, [r7, #28]
 800ae8a:	4401      	add	r1, r0
 800ae8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae90:	4313      	orrs	r3, r2
 800ae92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	015a      	lsls	r2, r3, #5
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	69ba      	ldr	r2, [r7, #24]
 800aea4:	0151      	lsls	r1, r2, #5
 800aea6:	69fa      	ldr	r2, [r7, #28]
 800aea8:	440a      	add	r2, r1
 800aeaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aeb2:	6113      	str	r3, [r2, #16]
 800aeb4:	e036      	b.n	800af24 <USB_EPStartXfer+0x3dc>
 800aeb6:	bf00      	nop
 800aeb8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	695a      	ldr	r2, [r3, #20]
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	4413      	add	r3, r2
 800aec6:	1e5a      	subs	r2, r3, #1
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	015a      	lsls	r2, r3, #5
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	4413      	add	r3, r2
 800aeda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aede:	691a      	ldr	r2, [r3, #16]
 800aee0:	8afb      	ldrh	r3, [r7, #22]
 800aee2:	04d9      	lsls	r1, r3, #19
 800aee4:	4b39      	ldr	r3, [pc, #228]	; (800afcc <USB_EPStartXfer+0x484>)
 800aee6:	400b      	ands	r3, r1
 800aee8:	69b9      	ldr	r1, [r7, #24]
 800aeea:	0148      	lsls	r0, r1, #5
 800aeec:	69f9      	ldr	r1, [r7, #28]
 800aeee:	4401      	add	r1, r0
 800aef0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aef4:	4313      	orrs	r3, r2
 800aef6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	015a      	lsls	r2, r3, #5
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	4413      	add	r3, r2
 800af00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af04:	691a      	ldr	r2, [r3, #16]
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	8af9      	ldrh	r1, [r7, #22]
 800af0c:	fb01 f303 	mul.w	r3, r1, r3
 800af10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af14:	69b9      	ldr	r1, [r7, #24]
 800af16:	0148      	lsls	r0, r1, #5
 800af18:	69f9      	ldr	r1, [r7, #28]
 800af1a:	4401      	add	r1, r0
 800af1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800af20:	4313      	orrs	r3, r2
 800af22:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800af24:	79fb      	ldrb	r3, [r7, #7]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d10d      	bne.n	800af46 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d009      	beq.n	800af46 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	68d9      	ldr	r1, [r3, #12]
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	015a      	lsls	r2, r3, #5
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	4413      	add	r3, r2
 800af3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af42:	460a      	mov	r2, r1
 800af44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	78db      	ldrb	r3, [r3, #3]
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d128      	bne.n	800afa0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d110      	bne.n	800af80 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	015a      	lsls	r2, r3, #5
 800af62:	69fb      	ldr	r3, [r7, #28]
 800af64:	4413      	add	r3, r2
 800af66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	69ba      	ldr	r2, [r7, #24]
 800af6e:	0151      	lsls	r1, r2, #5
 800af70:	69fa      	ldr	r2, [r7, #28]
 800af72:	440a      	add	r2, r1
 800af74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af7c:	6013      	str	r3, [r2, #0]
 800af7e:	e00f      	b.n	800afa0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	015a      	lsls	r2, r3, #5
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	4413      	add	r3, r2
 800af88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	69ba      	ldr	r2, [r7, #24]
 800af90:	0151      	lsls	r1, r2, #5
 800af92:	69fa      	ldr	r2, [r7, #28]
 800af94:	440a      	add	r2, r1
 800af96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	015a      	lsls	r2, r3, #5
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	4413      	add	r3, r2
 800afa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	69ba      	ldr	r2, [r7, #24]
 800afb0:	0151      	lsls	r1, r2, #5
 800afb2:	69fa      	ldr	r2, [r7, #28]
 800afb4:	440a      	add	r2, r1
 800afb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800afbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3720      	adds	r7, #32
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	1ff80000 	.word	0x1ff80000

0800afd0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b087      	sub	sp, #28
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	4613      	mov	r3, r2
 800afdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	785b      	ldrb	r3, [r3, #1]
 800afec:	2b01      	cmp	r3, #1
 800afee:	f040 80cd 	bne.w	800b18c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	695b      	ldr	r3, [r3, #20]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d132      	bne.n	800b060 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	015a      	lsls	r2, r3, #5
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	4413      	add	r3, r2
 800b002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	693a      	ldr	r2, [r7, #16]
 800b00a:	0151      	lsls	r1, r2, #5
 800b00c:	697a      	ldr	r2, [r7, #20]
 800b00e:	440a      	add	r2, r1
 800b010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b014:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b018:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b01c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	015a      	lsls	r2, r3, #5
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	4413      	add	r3, r2
 800b026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	0151      	lsls	r1, r2, #5
 800b030:	697a      	ldr	r2, [r7, #20]
 800b032:	440a      	add	r2, r1
 800b034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b038:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b03c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	015a      	lsls	r2, r3, #5
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	4413      	add	r3, r2
 800b046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	0151      	lsls	r1, r2, #5
 800b050:	697a      	ldr	r2, [r7, #20]
 800b052:	440a      	add	r2, r1
 800b054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b058:	0cdb      	lsrs	r3, r3, #19
 800b05a:	04db      	lsls	r3, r3, #19
 800b05c:	6113      	str	r3, [r2, #16]
 800b05e:	e04e      	b.n	800b0fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	015a      	lsls	r2, r3, #5
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	4413      	add	r3, r2
 800b068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	0151      	lsls	r1, r2, #5
 800b072:	697a      	ldr	r2, [r7, #20]
 800b074:	440a      	add	r2, r1
 800b076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b07a:	0cdb      	lsrs	r3, r3, #19
 800b07c:	04db      	lsls	r3, r3, #19
 800b07e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	015a      	lsls	r2, r3, #5
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	4413      	add	r3, r2
 800b088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	0151      	lsls	r1, r2, #5
 800b092:	697a      	ldr	r2, [r7, #20]
 800b094:	440a      	add	r2, r1
 800b096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b09a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b09e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b0a2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	695a      	ldr	r2, [r3, #20]
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d903      	bls.n	800b0b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	689a      	ldr	r2, [r3, #8]
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	015a      	lsls	r2, r3, #5
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	4413      	add	r3, r2
 800b0c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	0151      	lsls	r1, r2, #5
 800b0ca:	697a      	ldr	r2, [r7, #20]
 800b0cc:	440a      	add	r2, r1
 800b0ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	015a      	lsls	r2, r3, #5
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	4413      	add	r3, r2
 800b0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e4:	691a      	ldr	r2, [r3, #16]
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	695b      	ldr	r3, [r3, #20]
 800b0ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0ee:	6939      	ldr	r1, [r7, #16]
 800b0f0:	0148      	lsls	r0, r1, #5
 800b0f2:	6979      	ldr	r1, [r7, #20]
 800b0f4:	4401      	add	r1, r0
 800b0f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b0fe:	79fb      	ldrb	r3, [r7, #7]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d11e      	bne.n	800b142 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d009      	beq.n	800b120 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	015a      	lsls	r2, r3, #5
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	4413      	add	r3, r2
 800b114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b118:	461a      	mov	r2, r3
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	691b      	ldr	r3, [r3, #16]
 800b11e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	015a      	lsls	r2, r3, #5
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	4413      	add	r3, r2
 800b128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	693a      	ldr	r2, [r7, #16]
 800b130:	0151      	lsls	r1, r2, #5
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	440a      	add	r2, r1
 800b136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b13a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b13e:	6013      	str	r3, [r2, #0]
 800b140:	e092      	b.n	800b268 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	015a      	lsls	r2, r3, #5
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	4413      	add	r3, r2
 800b14a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	693a      	ldr	r2, [r7, #16]
 800b152:	0151      	lsls	r1, r2, #5
 800b154:	697a      	ldr	r2, [r7, #20]
 800b156:	440a      	add	r2, r1
 800b158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b15c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b160:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d07e      	beq.n	800b268 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	f003 030f 	and.w	r3, r3, #15
 800b17a:	2101      	movs	r1, #1
 800b17c:	fa01 f303 	lsl.w	r3, r1, r3
 800b180:	6979      	ldr	r1, [r7, #20]
 800b182:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b186:	4313      	orrs	r3, r2
 800b188:	634b      	str	r3, [r1, #52]	; 0x34
 800b18a:	e06d      	b.n	800b268 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	015a      	lsls	r2, r3, #5
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	4413      	add	r3, r2
 800b194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	693a      	ldr	r2, [r7, #16]
 800b19c:	0151      	lsls	r1, r2, #5
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	440a      	add	r2, r1
 800b1a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1a6:	0cdb      	lsrs	r3, r3, #19
 800b1a8:	04db      	lsls	r3, r3, #19
 800b1aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	015a      	lsls	r2, r3, #5
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	693a      	ldr	r2, [r7, #16]
 800b1bc:	0151      	lsls	r1, r2, #5
 800b1be:	697a      	ldr	r2, [r7, #20]
 800b1c0:	440a      	add	r2, r1
 800b1c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b1ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b1ce:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	695b      	ldr	r3, [r3, #20]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d003      	beq.n	800b1e0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	689a      	ldr	r2, [r3, #8]
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	015a      	lsls	r2, r3, #5
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ec:	691b      	ldr	r3, [r3, #16]
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	0151      	lsls	r1, r2, #5
 800b1f2:	697a      	ldr	r2, [r7, #20]
 800b1f4:	440a      	add	r2, r1
 800b1f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	015a      	lsls	r2, r3, #5
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	4413      	add	r3, r2
 800b208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b20c:	691a      	ldr	r2, [r3, #16]
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b216:	6939      	ldr	r1, [r7, #16]
 800b218:	0148      	lsls	r0, r1, #5
 800b21a:	6979      	ldr	r1, [r7, #20]
 800b21c:	4401      	add	r1, r0
 800b21e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b222:	4313      	orrs	r3, r2
 800b224:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b226:	79fb      	ldrb	r3, [r7, #7]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d10d      	bne.n	800b248 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d009      	beq.n	800b248 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	68d9      	ldr	r1, [r3, #12]
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	015a      	lsls	r2, r3, #5
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	4413      	add	r3, r2
 800b240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b244:	460a      	mov	r2, r1
 800b246:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	015a      	lsls	r2, r3, #5
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	4413      	add	r3, r2
 800b250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	0151      	lsls	r1, r2, #5
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	440a      	add	r2, r1
 800b25e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b262:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b266:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	371c      	adds	r7, #28
 800b26e:	46bd      	mov	sp, r7
 800b270:	bc80      	pop	{r7}
 800b272:	4770      	bx	lr

0800b274 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b274:	b480      	push	{r7}
 800b276:	b089      	sub	sp, #36	; 0x24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	4611      	mov	r1, r2
 800b280:	461a      	mov	r2, r3
 800b282:	460b      	mov	r3, r1
 800b284:	71fb      	strb	r3, [r7, #7]
 800b286:	4613      	mov	r3, r2
 800b288:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b292:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b296:	2b00      	cmp	r3, #0
 800b298:	d123      	bne.n	800b2e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b29a:	88bb      	ldrh	r3, [r7, #4]
 800b29c:	3303      	adds	r3, #3
 800b29e:	089b      	lsrs	r3, r3, #2
 800b2a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	61bb      	str	r3, [r7, #24]
 800b2a6:	e018      	b.n	800b2da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b2a8:	79fb      	ldrb	r3, [r7, #7]
 800b2aa:	031a      	lsls	r2, r3, #12
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	61bb      	str	r3, [r7, #24]
 800b2da:	69ba      	ldr	r2, [r7, #24]
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d3e2      	bcc.n	800b2a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3724      	adds	r7, #36	; 0x24
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bc80      	pop	{r7}
 800b2ec:	4770      	bx	lr

0800b2ee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b2ee:	b480      	push	{r7}
 800b2f0:	b08b      	sub	sp, #44	; 0x2c
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	60f8      	str	r0, [r7, #12]
 800b2f6:	60b9      	str	r1, [r7, #8]
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b304:	88fb      	ldrh	r3, [r7, #6]
 800b306:	089b      	lsrs	r3, r3, #2
 800b308:	b29b      	uxth	r3, r3
 800b30a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b30c:	88fb      	ldrh	r3, [r7, #6]
 800b30e:	f003 0303 	and.w	r3, r3, #3
 800b312:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b314:	2300      	movs	r3, #0
 800b316:	623b      	str	r3, [r7, #32]
 800b318:	e014      	b.n	800b344 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b324:	601a      	str	r2, [r3, #0]
    pDest++;
 800b326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b328:	3301      	adds	r3, #1
 800b32a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32e:	3301      	adds	r3, #1
 800b330:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b334:	3301      	adds	r3, #1
 800b336:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	3301      	adds	r3, #1
 800b33c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b33e:	6a3b      	ldr	r3, [r7, #32]
 800b340:	3301      	adds	r3, #1
 800b342:	623b      	str	r3, [r7, #32]
 800b344:	6a3a      	ldr	r2, [r7, #32]
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d3e6      	bcc.n	800b31a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b34c:	8bfb      	ldrh	r3, [r7, #30]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d01e      	beq.n	800b390 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b352:	2300      	movs	r3, #0
 800b354:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b35c:	461a      	mov	r2, r3
 800b35e:	f107 0310 	add.w	r3, r7, #16
 800b362:	6812      	ldr	r2, [r2, #0]
 800b364:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	00db      	lsls	r3, r3, #3
 800b36e:	fa22 f303 	lsr.w	r3, r2, r3
 800b372:	b2da      	uxtb	r2, r3
 800b374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b376:	701a      	strb	r2, [r3, #0]
      i++;
 800b378:	6a3b      	ldr	r3, [r7, #32]
 800b37a:	3301      	adds	r3, #1
 800b37c:	623b      	str	r3, [r7, #32]
      pDest++;
 800b37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b380:	3301      	adds	r3, #1
 800b382:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b384:	8bfb      	ldrh	r3, [r7, #30]
 800b386:	3b01      	subs	r3, #1
 800b388:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b38a:	8bfb      	ldrh	r3, [r7, #30]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1ea      	bne.n	800b366 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b392:	4618      	mov	r0, r3
 800b394:	372c      	adds	r7, #44	; 0x2c
 800b396:	46bd      	mov	sp, r7
 800b398:	bc80      	pop	{r7}
 800b39a:	4770      	bx	lr

0800b39c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	785b      	ldrb	r3, [r3, #1]
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d12c      	bne.n	800b412 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	db12      	blt.n	800b3f0 <USB_EPSetStall+0x54>
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d00f      	beq.n	800b3f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	015a      	lsls	r2, r3, #5
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	0151      	lsls	r1, r2, #5
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	440a      	add	r2, r1
 800b3e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b3ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	015a      	lsls	r2, r3, #5
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	0151      	lsls	r1, r2, #5
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	440a      	add	r2, r1
 800b406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b40a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b40e:	6013      	str	r3, [r2, #0]
 800b410:	e02b      	b.n	800b46a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	015a      	lsls	r2, r3, #5
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	4413      	add	r3, r2
 800b41a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	db12      	blt.n	800b44a <USB_EPSetStall+0xae>
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00f      	beq.n	800b44a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	015a      	lsls	r2, r3, #5
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	4413      	add	r3, r2
 800b432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	0151      	lsls	r1, r2, #5
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	440a      	add	r2, r1
 800b440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b444:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b448:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	015a      	lsls	r2, r3, #5
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	4413      	add	r3, r2
 800b452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	0151      	lsls	r1, r2, #5
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	440a      	add	r2, r1
 800b460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b464:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b468:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	bc80      	pop	{r7}
 800b474:	4770      	bx	lr

0800b476 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b476:	b480      	push	{r7}
 800b478:	b085      	sub	sp, #20
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
 800b47e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	785b      	ldrb	r3, [r3, #1]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d128      	bne.n	800b4e4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	015a      	lsls	r2, r3, #5
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	4413      	add	r3, r2
 800b49a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	68ba      	ldr	r2, [r7, #8]
 800b4a2:	0151      	lsls	r1, r2, #5
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	440a      	add	r2, r1
 800b4a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b4b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	78db      	ldrb	r3, [r3, #3]
 800b4b6:	2b03      	cmp	r3, #3
 800b4b8:	d003      	beq.n	800b4c2 <USB_EPClearStall+0x4c>
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	78db      	ldrb	r3, [r3, #3]
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d138      	bne.n	800b534 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	015a      	lsls	r2, r3, #5
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	0151      	lsls	r1, r2, #5
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	440a      	add	r2, r1
 800b4d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4e0:	6013      	str	r3, [r2, #0]
 800b4e2:	e027      	b.n	800b534 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	015a      	lsls	r2, r3, #5
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68ba      	ldr	r2, [r7, #8]
 800b4f4:	0151      	lsls	r1, r2, #5
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	440a      	add	r2, r1
 800b4fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b502:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	78db      	ldrb	r3, [r3, #3]
 800b508:	2b03      	cmp	r3, #3
 800b50a:	d003      	beq.n	800b514 <USB_EPClearStall+0x9e>
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	78db      	ldrb	r3, [r3, #3]
 800b510:	2b02      	cmp	r3, #2
 800b512:	d10f      	bne.n	800b534 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	015a      	lsls	r2, r3, #5
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	4413      	add	r3, r2
 800b51c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68ba      	ldr	r2, [r7, #8]
 800b524:	0151      	lsls	r1, r2, #5
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	440a      	add	r2, r1
 800b52a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b52e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b532:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3714      	adds	r7, #20
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bc80      	pop	{r7}
 800b53e:	4770      	bx	lr

0800b540 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	460b      	mov	r3, r1
 800b54a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b55e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b562:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	78fb      	ldrb	r3, [r7, #3]
 800b56e:	011b      	lsls	r3, r3, #4
 800b570:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b574:	68f9      	ldr	r1, [r7, #12]
 800b576:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b57a:	4313      	orrs	r3, r2
 800b57c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	3714      	adds	r7, #20
 800b584:	46bd      	mov	sp, r7
 800b586:	bc80      	pop	{r7}
 800b588:	4770      	bx	lr

0800b58a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b58a:	b480      	push	{r7}
 800b58c:	b085      	sub	sp, #20
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b5a4:	f023 0303 	bic.w	r3, r3, #3
 800b5a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5b8:	f023 0302 	bic.w	r3, r3, #2
 800b5bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3714      	adds	r7, #20
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bc80      	pop	{r7}
 800b5c8:	4770      	bx	lr

0800b5ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	b085      	sub	sp, #20
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b5e4:	f023 0303 	bic.w	r3, r3, #3
 800b5e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5f8:	f043 0302 	orr.w	r3, r3, #2
 800b5fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	4618      	mov	r0, r3
 800b602:	3714      	adds	r7, #20
 800b604:	46bd      	mov	sp, r7
 800b606:	bc80      	pop	{r7}
 800b608:	4770      	bx	lr

0800b60a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b085      	sub	sp, #20
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	695b      	ldr	r3, [r3, #20]
 800b616:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	699b      	ldr	r3, [r3, #24]
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	4013      	ands	r3, r2
 800b620:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b622:	68fb      	ldr	r3, [r7, #12]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3714      	adds	r7, #20
 800b628:	46bd      	mov	sp, r7
 800b62a:	bc80      	pop	{r7}
 800b62c:	4770      	bx	lr

0800b62e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b62e:	b480      	push	{r7}
 800b630:	b085      	sub	sp, #20
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b640:	699b      	ldr	r3, [r3, #24]
 800b642:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b64a:	69db      	ldr	r3, [r3, #28]
 800b64c:	68ba      	ldr	r2, [r7, #8]
 800b64e:	4013      	ands	r3, r2
 800b650:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	0c1b      	lsrs	r3, r3, #16
}
 800b656:	4618      	mov	r0, r3
 800b658:	3714      	adds	r7, #20
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bc80      	pop	{r7}
 800b65e:	4770      	bx	lr

0800b660 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b672:	699b      	ldr	r3, [r3, #24]
 800b674:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b67c:	69db      	ldr	r3, [r3, #28]
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	4013      	ands	r3, r2
 800b682:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	b29b      	uxth	r3, r3
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3714      	adds	r7, #20
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bc80      	pop	{r7}
 800b690:	4770      	bx	lr

0800b692 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b692:	b480      	push	{r7}
 800b694:	b085      	sub	sp, #20
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	460b      	mov	r3, r1
 800b69c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b6a2:	78fb      	ldrb	r3, [r7, #3]
 800b6a4:	015a      	lsls	r2, r3, #5
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6b8:	695b      	ldr	r3, [r3, #20]
 800b6ba:	68ba      	ldr	r2, [r7, #8]
 800b6bc:	4013      	ands	r3, r2
 800b6be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b6c0:	68bb      	ldr	r3, [r7, #8]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3714      	adds	r7, #20
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bc80      	pop	{r7}
 800b6ca:	4770      	bx	lr

0800b6cc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b087      	sub	sp, #28
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6e2:	691b      	ldr	r3, [r3, #16]
 800b6e4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b6f0:	78fb      	ldrb	r3, [r7, #3]
 800b6f2:	f003 030f 	and.w	r3, r3, #15
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b6fc:	01db      	lsls	r3, r3, #7
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	4313      	orrs	r3, r2
 800b704:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b706:	78fb      	ldrb	r3, [r7, #3]
 800b708:	015a      	lsls	r2, r3, #5
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	4413      	add	r3, r2
 800b70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	4013      	ands	r3, r2
 800b718:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b71a:	68bb      	ldr	r3, [r7, #8]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	371c      	adds	r7, #28
 800b720:	46bd      	mov	sp, r7
 800b722:	bc80      	pop	{r7}
 800b724:	4770      	bx	lr

0800b726 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b726:	b480      	push	{r7}
 800b728:	b083      	sub	sp, #12
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	695b      	ldr	r3, [r3, #20]
 800b732:	f003 0301 	and.w	r3, r3, #1
}
 800b736:	4618      	mov	r0, r3
 800b738:	370c      	adds	r7, #12
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bc80      	pop	{r7}
 800b73e:	4770      	bx	lr

0800b740 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b75a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b75e:	f023 0307 	bic.w	r3, r3, #7
 800b762:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b776:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3714      	adds	r7, #20
 800b77e:	46bd      	mov	sp, r7
 800b780:	bc80      	pop	{r7}
 800b782:	4770      	bx	lr

0800b784 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b784:	b480      	push	{r7}
 800b786:	b087      	sub	sp, #28
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	460b      	mov	r3, r1
 800b78e:	607a      	str	r2, [r7, #4]
 800b790:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	333c      	adds	r3, #60	; 0x3c
 800b79a:	3304      	adds	r3, #4
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	4a25      	ldr	r2, [pc, #148]	; (800b838 <USB_EP0_OutStart+0xb4>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d90a      	bls.n	800b7be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7b8:	d101      	bne.n	800b7be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	e037      	b.n	800b82e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7d0:	691b      	ldr	r3, [r3, #16]
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7ec:	f043 0318 	orr.w	r3, r3, #24
 800b7f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	697a      	ldr	r2, [r7, #20]
 800b7fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b800:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b804:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b806:	7afb      	ldrb	r3, [r7, #11]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d10f      	bne.n	800b82c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b812:	461a      	mov	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	697a      	ldr	r2, [r7, #20]
 800b822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b826:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b82a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	371c      	adds	r7, #28
 800b832:	46bd      	mov	sp, r7
 800b834:	bc80      	pop	{r7}
 800b836:	4770      	bx	lr
 800b838:	4f54300a 	.word	0x4f54300a

0800b83c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b844:	2300      	movs	r3, #0
 800b846:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	3301      	adds	r3, #1
 800b84c:	60fb      	str	r3, [r7, #12]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	4a12      	ldr	r2, [pc, #72]	; (800b89c <USB_CoreReset+0x60>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d901      	bls.n	800b85a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b856:	2303      	movs	r3, #3
 800b858:	e01b      	b.n	800b892 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	daf2      	bge.n	800b848 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b862:	2300      	movs	r3, #0
 800b864:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	691b      	ldr	r3, [r3, #16]
 800b86a:	f043 0201 	orr.w	r2, r3, #1
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	3301      	adds	r3, #1
 800b876:	60fb      	str	r3, [r7, #12]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	4a08      	ldr	r2, [pc, #32]	; (800b89c <USB_CoreReset+0x60>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d901      	bls.n	800b884 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b880:	2303      	movs	r3, #3
 800b882:	e006      	b.n	800b892 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	691b      	ldr	r3, [r3, #16]
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d0f0      	beq.n	800b872 <USB_CoreReset+0x36>

  return HAL_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3714      	adds	r7, #20
 800b896:	46bd      	mov	sp, r7
 800b898:	bc80      	pop	{r7}
 800b89a:	4770      	bx	lr
 800b89c:	00030d40 	.word	0x00030d40

0800b8a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	7c1b      	ldrb	r3, [r3, #16]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d115      	bne.n	800b8e4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b8b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8bc:	2202      	movs	r2, #2
 800b8be:	2181      	movs	r1, #129	; 0x81
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f001 ff48 	bl	800d756 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b8cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8d0:	2202      	movs	r2, #2
 800b8d2:	2101      	movs	r1, #1
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f001 ff3e 	bl	800d756 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b8e2:	e012      	b.n	800b90a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b8e4:	2340      	movs	r3, #64	; 0x40
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	2181      	movs	r1, #129	; 0x81
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f001 ff33 	bl	800d756 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b8f6:	2340      	movs	r3, #64	; 0x40
 800b8f8:	2202      	movs	r2, #2
 800b8fa:	2101      	movs	r1, #1
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f001 ff2a 	bl	800d756 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2201      	movs	r2, #1
 800b906:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b90a:	2308      	movs	r3, #8
 800b90c:	2203      	movs	r2, #3
 800b90e:	2182      	movs	r1, #130	; 0x82
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f001 ff20 	bl	800d756 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b91c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b920:	f004 f9cc 	bl	800fcbc <malloc>
 800b924:	4603      	mov	r3, r0
 800b926:	461a      	mov	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b934:	2b00      	cmp	r3, #0
 800b936:	d102      	bne.n	800b93e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800b938:	2301      	movs	r3, #1
 800b93a:	73fb      	strb	r3, [r7, #15]
 800b93c:	e026      	b.n	800b98c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b944:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	2200      	movs	r2, #0
 800b954:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	7c1b      	ldrb	r3, [r3, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d109      	bne.n	800b97c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b96e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b972:	2101      	movs	r1, #1
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f001 ffde 	bl	800d936 <USBD_LL_PrepareReceive>
 800b97a:	e007      	b.n	800b98c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b982:	2340      	movs	r3, #64	; 0x40
 800b984:	2101      	movs	r1, #1
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f001 ffd5 	bl	800d936 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}

0800b996 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b084      	sub	sp, #16
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
 800b99e:	460b      	mov	r3, r1
 800b9a0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b9a6:	2181      	movs	r1, #129	; 0x81
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f001 fefa 	bl	800d7a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b9b4:	2101      	movs	r1, #1
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f001 fef3 	bl	800d7a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b9c4:	2182      	movs	r1, #130	; 0x82
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f001 feeb 	bl	800d7a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d00e      	beq.n	800b9fa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f004 f96d 	bl	800fccc <free>
    pdev->pClassData = NULL;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800b9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba14:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ba16:	2300      	movs	r3, #0
 800ba18:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d039      	beq.n	800baa2 <USBD_CDC_Setup+0x9e>
 800ba2e:	2b20      	cmp	r3, #32
 800ba30:	d17f      	bne.n	800bb32 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	88db      	ldrh	r3, [r3, #6]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d029      	beq.n	800ba8e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	b25b      	sxtb	r3, r3
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	da11      	bge.n	800ba68 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800ba50:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	88d2      	ldrh	r2, [r2, #6]
 800ba56:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ba58:	6939      	ldr	r1, [r7, #16]
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	88db      	ldrh	r3, [r3, #6]
 800ba5e:	461a      	mov	r2, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f001 fa42 	bl	800ceea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800ba66:	e06b      	b.n	800bb40 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	785a      	ldrb	r2, [r3, #1]
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	88db      	ldrh	r3, [r3, #6]
 800ba76:	b2da      	uxtb	r2, r3
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ba7e:	6939      	ldr	r1, [r7, #16]
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	88db      	ldrh	r3, [r3, #6]
 800ba84:	461a      	mov	r2, r3
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f001 fa5d 	bl	800cf46 <USBD_CtlPrepareRx>
      break;
 800ba8c:	e058      	b.n	800bb40 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	683a      	ldr	r2, [r7, #0]
 800ba98:	7850      	ldrb	r0, [r2, #1]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	6839      	ldr	r1, [r7, #0]
 800ba9e:	4798      	blx	r3
      break;
 800baa0:	e04e      	b.n	800bb40 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	785b      	ldrb	r3, [r3, #1]
 800baa6:	2b0b      	cmp	r3, #11
 800baa8:	d02e      	beq.n	800bb08 <USBD_CDC_Setup+0x104>
 800baaa:	2b0b      	cmp	r3, #11
 800baac:	dc38      	bgt.n	800bb20 <USBD_CDC_Setup+0x11c>
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d002      	beq.n	800bab8 <USBD_CDC_Setup+0xb4>
 800bab2:	2b0a      	cmp	r3, #10
 800bab4:	d014      	beq.n	800bae0 <USBD_CDC_Setup+0xdc>
 800bab6:	e033      	b.n	800bb20 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800babe:	2b03      	cmp	r3, #3
 800bac0:	d107      	bne.n	800bad2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800bac2:	f107 030c 	add.w	r3, r7, #12
 800bac6:	2202      	movs	r2, #2
 800bac8:	4619      	mov	r1, r3
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f001 fa0d 	bl	800ceea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bad0:	e02e      	b.n	800bb30 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f001 f99e 	bl	800ce16 <USBD_CtlError>
            ret = USBD_FAIL;
 800bada:	2302      	movs	r3, #2
 800badc:	75fb      	strb	r3, [r7, #23]
          break;
 800bade:	e027      	b.n	800bb30 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bae6:	2b03      	cmp	r3, #3
 800bae8:	d107      	bne.n	800bafa <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800baea:	f107 030f 	add.w	r3, r7, #15
 800baee:	2201      	movs	r2, #1
 800baf0:	4619      	mov	r1, r3
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f001 f9f9 	bl	800ceea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800baf8:	e01a      	b.n	800bb30 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f001 f98a 	bl	800ce16 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb02:	2302      	movs	r3, #2
 800bb04:	75fb      	strb	r3, [r7, #23]
          break;
 800bb06:	e013      	b.n	800bb30 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb0e:	2b03      	cmp	r3, #3
 800bb10:	d00d      	beq.n	800bb2e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f001 f97e 	bl	800ce16 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb1a:	2302      	movs	r3, #2
 800bb1c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bb1e:	e006      	b.n	800bb2e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f001 f977 	bl	800ce16 <USBD_CtlError>
          ret = USBD_FAIL;
 800bb28:	2302      	movs	r3, #2
 800bb2a:	75fb      	strb	r3, [r7, #23]
          break;
 800bb2c:	e000      	b.n	800bb30 <USBD_CDC_Setup+0x12c>
          break;
 800bb2e:	bf00      	nop
      }
      break;
 800bb30:	e006      	b.n	800bb40 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bb32:	6839      	ldr	r1, [r7, #0]
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f001 f96e 	bl	800ce16 <USBD_CtlError>
      ret = USBD_FAIL;
 800bb3a:	2302      	movs	r3, #2
 800bb3c:	75fb      	strb	r3, [r7, #23]
      break;
 800bb3e:	bf00      	nop
  }

  return ret;
 800bb40:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3718      	adds	r7, #24
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}

0800bb4a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b084      	sub	sp, #16
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
 800bb52:	460b      	mov	r3, r1
 800bb54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb5c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb64:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d03a      	beq.n	800bbe6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bb70:	78fa      	ldrb	r2, [r7, #3]
 800bb72:	6879      	ldr	r1, [r7, #4]
 800bb74:	4613      	mov	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4413      	add	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	440b      	add	r3, r1
 800bb7e:	331c      	adds	r3, #28
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d029      	beq.n	800bbda <USBD_CDC_DataIn+0x90>
 800bb86:	78fa      	ldrb	r2, [r7, #3]
 800bb88:	6879      	ldr	r1, [r7, #4]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	4413      	add	r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	440b      	add	r3, r1
 800bb94:	331c      	adds	r3, #28
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	78f9      	ldrb	r1, [r7, #3]
 800bb9a:	68b8      	ldr	r0, [r7, #8]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	00db      	lsls	r3, r3, #3
 800bba0:	1a5b      	subs	r3, r3, r1
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	4403      	add	r3, r0
 800bba6:	3344      	adds	r3, #68	; 0x44
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	fbb2 f1f3 	udiv	r1, r2, r3
 800bbae:	fb03 f301 	mul.w	r3, r3, r1
 800bbb2:	1ad3      	subs	r3, r2, r3
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d110      	bne.n	800bbda <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800bbb8:	78fa      	ldrb	r2, [r7, #3]
 800bbba:	6879      	ldr	r1, [r7, #4]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	4413      	add	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	440b      	add	r3, r1
 800bbc6:	331c      	adds	r3, #28
 800bbc8:	2200      	movs	r2, #0
 800bbca:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bbcc:	78f9      	ldrb	r1, [r7, #3]
 800bbce:	2300      	movs	r3, #0
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f001 fe8c 	bl	800d8f0 <USBD_LL_Transmit>
 800bbd8:	e003      	b.n	800bbe2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	e000      	b.n	800bbe8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800bbe6:	2302      	movs	r3, #2
  }
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc02:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bc04:	78fb      	ldrb	r3, [r7, #3]
 800bc06:	4619      	mov	r1, r3
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f001 feb7 	bl	800d97c <USBD_LL_GetRxDataSize>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00d      	beq.n	800bc3c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bc2e:	68fa      	ldr	r2, [r7, #12]
 800bc30:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bc34:	4611      	mov	r1, r2
 800bc36:	4798      	blx	r3

    return USBD_OK;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	e000      	b.n	800bc3e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800bc3c:	2302      	movs	r3, #2
  }
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b084      	sub	sp, #16
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc54:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d015      	beq.n	800bc8c <USBD_CDC_EP0_RxReady+0x46>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bc66:	2bff      	cmp	r3, #255	; 0xff
 800bc68:	d010      	beq.n	800bc8c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc70:	689b      	ldr	r3, [r3, #8]
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800bc78:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bc7a:	68fa      	ldr	r2, [r7, #12]
 800bc7c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bc80:	b292      	uxth	r2, r2
 800bc82:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	22ff      	movs	r2, #255	; 0xff
 800bc88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
	...

0800bc98 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2243      	movs	r2, #67	; 0x43
 800bca4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800bca6:	4b03      	ldr	r3, [pc, #12]	; (800bcb4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bc80      	pop	{r7}
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	200000cc 	.word	0x200000cc

0800bcb8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2243      	movs	r2, #67	; 0x43
 800bcc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800bcc6:	4b03      	ldr	r3, [pc, #12]	; (800bcd4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bc80      	pop	{r7}
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	20000088 	.word	0x20000088

0800bcd8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2243      	movs	r2, #67	; 0x43
 800bce4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800bce6:	4b03      	ldr	r3, [pc, #12]	; (800bcf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bc80      	pop	{r7}
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	20000110 	.word	0x20000110

0800bcf8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	220a      	movs	r2, #10
 800bd04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800bd06:	4b03      	ldr	r3, [pc, #12]	; (800bd14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bc80      	pop	{r7}
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	20000044 	.word	0x20000044

0800bd18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800bd22:	2302      	movs	r3, #2
 800bd24:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d005      	beq.n	800bd38 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	683a      	ldr	r2, [r7, #0]
 800bd30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bd38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3714      	adds	r7, #20
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bc80      	pop	{r7}
 800bd42:	4770      	bx	lr

0800bd44 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b087      	sub	sp, #28
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd58:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bd62:	88fa      	ldrh	r2, [r7, #6]
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	371c      	adds	r7, #28
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bc80      	pop	{r7}
 800bd74:	4770      	bx	lr

0800bd76 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800bd76:	b480      	push	{r7}
 800bd78:	b085      	sub	sp, #20
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
 800bd7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd86:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3714      	adds	r7, #20
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bc80      	pop	{r7}
 800bd9a:	4770      	bx	lr

0800bd9c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d01c      	beq.n	800bdf0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d115      	bne.n	800bdec <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	2181      	movs	r1, #129	; 0x81
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f001 fd84 	bl	800d8f0 <USBD_LL_Transmit>

      return USBD_OK;
 800bde8:	2300      	movs	r3, #0
 800bdea:	e002      	b.n	800bdf2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800bdec:	2301      	movs	r3, #1
 800bdee:	e000      	b.n	800bdf2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800bdf0:	2302      	movs	r3, #2
  }
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b084      	sub	sp, #16
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be08:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be10:	2b00      	cmp	r3, #0
 800be12:	d017      	beq.n	800be44 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	7c1b      	ldrb	r3, [r3, #16]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d109      	bne.n	800be30 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be26:	2101      	movs	r1, #1
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f001 fd84 	bl	800d936 <USBD_LL_PrepareReceive>
 800be2e:	e007      	b.n	800be40 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be36:	2340      	movs	r3, #64	; 0x40
 800be38:	2101      	movs	r1, #1
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f001 fd7b 	bl	800d936 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	e000      	b.n	800be46 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800be44:	2302      	movs	r3, #2
  }
}
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b084      	sub	sp, #16
 800be52:	af00      	add	r7, sp, #0
 800be54:	60f8      	str	r0, [r7, #12]
 800be56:	60b9      	str	r1, [r7, #8]
 800be58:	4613      	mov	r3, r2
 800be5a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d101      	bne.n	800be66 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800be62:	2302      	movs	r3, #2
 800be64:	e01a      	b.n	800be9c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d003      	beq.n	800be78 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2200      	movs	r2, #0
 800be74:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d003      	beq.n	800be86 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2201      	movs	r2, #1
 800be8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	79fa      	ldrb	r2, [r7, #7]
 800be92:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	f001 fbf9 	bl	800d68c <USBD_LL_Init>

  return USBD_OK;
 800be9a:	2300      	movs	r3, #0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3710      	adds	r7, #16
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800beae:	2300      	movs	r3, #0
 800beb0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d006      	beq.n	800bec6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	73fb      	strb	r3, [r7, #15]
 800bec4:	e001      	b.n	800beca <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800bec6:	2302      	movs	r3, #2
 800bec8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800beca:	7bfb      	ldrb	r3, [r7, #15]
}
 800becc:	4618      	mov	r0, r3
 800bece:	3714      	adds	r7, #20
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bc80      	pop	{r7}
 800bed4:	4770      	bx	lr

0800bed6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b082      	sub	sp, #8
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f001 fc1e 	bl	800d720 <USBD_LL_Start>

  return USBD_OK;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800beee:	b480      	push	{r7}
 800bef0:	b083      	sub	sp, #12
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	bc80      	pop	{r7}
 800bf00:	4770      	bx	lr

0800bf02 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b084      	sub	sp, #16
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bf0e:	2302      	movs	r3, #2
 800bf10:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00c      	beq.n	800bf36 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	78fa      	ldrb	r2, [r7, #3]
 800bf26:	4611      	mov	r1, r2
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	4798      	blx	r3
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d101      	bne.n	800bf36 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800bf32:	2300      	movs	r3, #0
 800bf34:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800bf36:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	78fa      	ldrb	r2, [r7, #3]
 800bf56:	4611      	mov	r1, r2
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	4798      	blx	r3

  return USBD_OK;
 800bf5c:	2300      	movs	r3, #0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b082      	sub	sp, #8
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
 800bf6e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 ff10 	bl	800cd9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2201      	movs	r2, #1
 800bf82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bf9a:	f003 031f 	and.w	r3, r3, #31
 800bf9e:	2b02      	cmp	r3, #2
 800bfa0:	d016      	beq.n	800bfd0 <USBD_LL_SetupStage+0x6a>
 800bfa2:	2b02      	cmp	r3, #2
 800bfa4:	d81c      	bhi.n	800bfe0 <USBD_LL_SetupStage+0x7a>
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d002      	beq.n	800bfb0 <USBD_LL_SetupStage+0x4a>
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d008      	beq.n	800bfc0 <USBD_LL_SetupStage+0x5a>
 800bfae:	e017      	b.n	800bfe0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fa03 	bl	800c3c4 <USBD_StdDevReq>
      break;
 800bfbe:	e01a      	b.n	800bff6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 fa65 	bl	800c498 <USBD_StdItfReq>
      break;
 800bfce:	e012      	b.n	800bff6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 faa5 	bl	800c528 <USBD_StdEPReq>
      break;
 800bfde:	e00a      	b.n	800bff6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bfe6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	4619      	mov	r1, r3
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f001 fbf6 	bl	800d7e0 <USBD_LL_StallEP>
      break;
 800bff4:	bf00      	nop
  }

  return USBD_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3708      	adds	r7, #8
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	460b      	mov	r3, r1
 800c00a:	607a      	str	r2, [r7, #4]
 800c00c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c00e:	7afb      	ldrb	r3, [r7, #11]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d14b      	bne.n	800c0ac <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c01a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c022:	2b03      	cmp	r3, #3
 800c024:	d134      	bne.n	800c090 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	68da      	ldr	r2, [r3, #12]
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d919      	bls.n	800c066 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	68da      	ldr	r2, [r3, #12]
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	691b      	ldr	r3, [r3, #16]
 800c03a:	1ad2      	subs	r2, r2, r3
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	68da      	ldr	r2, [r3, #12]
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c048:	429a      	cmp	r2, r3
 800c04a:	d203      	bcs.n	800c054 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c050:	b29b      	uxth	r3, r3
 800c052:	e002      	b.n	800c05a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c058:	b29b      	uxth	r3, r3
 800c05a:	461a      	mov	r2, r3
 800c05c:	6879      	ldr	r1, [r7, #4]
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f000 ff8f 	bl	800cf82 <USBD_CtlContinueRx>
 800c064:	e038      	b.n	800c0d8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00a      	beq.n	800c088 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c078:	2b03      	cmp	r3, #3
 800c07a:	d105      	bne.n	800c088 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f000 ff8c 	bl	800cfa6 <USBD_CtlSendStatus>
 800c08e:	e023      	b.n	800c0d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c096:	2b05      	cmp	r3, #5
 800c098:	d11e      	bne.n	800c0d8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2200      	movs	r2, #0
 800c09e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	68f8      	ldr	r0, [r7, #12]
 800c0a6:	f001 fb9b 	bl	800d7e0 <USBD_LL_StallEP>
 800c0aa:	e015      	b.n	800c0d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0b2:	699b      	ldr	r3, [r3, #24]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d00d      	beq.n	800c0d4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c0be:	2b03      	cmp	r3, #3
 800c0c0:	d108      	bne.n	800c0d4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0c8:	699b      	ldr	r3, [r3, #24]
 800c0ca:	7afa      	ldrb	r2, [r7, #11]
 800c0cc:	4611      	mov	r1, r2
 800c0ce:	68f8      	ldr	r0, [r7, #12]
 800c0d0:	4798      	blx	r3
 800c0d2:	e001      	b.n	800c0d8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	e000      	b.n	800c0da <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3718      	adds	r7, #24
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b086      	sub	sp, #24
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	60f8      	str	r0, [r7, #12]
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	607a      	str	r2, [r7, #4]
 800c0ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c0f0:	7afb      	ldrb	r3, [r7, #11]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d17f      	bne.n	800c1f6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	3314      	adds	r3, #20
 800c0fa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c102:	2b02      	cmp	r3, #2
 800c104:	d15c      	bne.n	800c1c0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	68da      	ldr	r2, [r3, #12]
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	691b      	ldr	r3, [r3, #16]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d915      	bls.n	800c13e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	68da      	ldr	r2, [r3, #12]
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	1ad2      	subs	r2, r2, r3
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	b29b      	uxth	r3, r3
 800c126:	461a      	mov	r2, r3
 800c128:	6879      	ldr	r1, [r7, #4]
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f000 fef9 	bl	800cf22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c130:	2300      	movs	r3, #0
 800c132:	2200      	movs	r2, #0
 800c134:	2100      	movs	r1, #0
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	f001 fbfd 	bl	800d936 <USBD_LL_PrepareReceive>
 800c13c:	e04e      	b.n	800c1dc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	697a      	ldr	r2, [r7, #20]
 800c144:	6912      	ldr	r2, [r2, #16]
 800c146:	fbb3 f1f2 	udiv	r1, r3, r2
 800c14a:	fb02 f201 	mul.w	r2, r2, r1
 800c14e:	1a9b      	subs	r3, r3, r2
 800c150:	2b00      	cmp	r3, #0
 800c152:	d11c      	bne.n	800c18e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	689a      	ldr	r2, [r3, #8]
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d316      	bcc.n	800c18e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	689a      	ldr	r2, [r3, #8]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d20f      	bcs.n	800c18e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c16e:	2200      	movs	r2, #0
 800c170:	2100      	movs	r1, #0
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f000 fed5 	bl	800cf22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2200      	movs	r2, #0
 800c17c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c180:	2300      	movs	r3, #0
 800c182:	2200      	movs	r2, #0
 800c184:	2100      	movs	r1, #0
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f001 fbd5 	bl	800d936 <USBD_LL_PrepareReceive>
 800c18c:	e026      	b.n	800c1dc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00a      	beq.n	800c1b0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c1a0:	2b03      	cmp	r3, #3
 800c1a2:	d105      	bne.n	800c1b0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c1b0:	2180      	movs	r1, #128	; 0x80
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f001 fb14 	bl	800d7e0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c1b8:	68f8      	ldr	r0, [r7, #12]
 800c1ba:	f000 ff07 	bl	800cfcc <USBD_CtlReceiveStatus>
 800c1be:	e00d      	b.n	800c1dc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1c6:	2b04      	cmp	r3, #4
 800c1c8:	d004      	beq.n	800c1d4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d103      	bne.n	800c1dc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c1d4:	2180      	movs	r1, #128	; 0x80
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f001 fb02 	bl	800d7e0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d11d      	bne.n	800c222 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f7ff fe81 	bl	800beee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c1f4:	e015      	b.n	800c222 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1fc:	695b      	ldr	r3, [r3, #20]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00d      	beq.n	800c21e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c208:	2b03      	cmp	r3, #3
 800c20a:	d108      	bne.n	800c21e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c212:	695b      	ldr	r3, [r3, #20]
 800c214:	7afa      	ldrb	r2, [r7, #11]
 800c216:	4611      	mov	r1, r2
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	4798      	blx	r3
 800c21c:	e001      	b.n	800c222 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c21e:	2302      	movs	r3, #2
 800c220:	e000      	b.n	800c224 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	3718      	adds	r7, #24
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c234:	2340      	movs	r3, #64	; 0x40
 800c236:	2200      	movs	r2, #0
 800c238:	2100      	movs	r1, #0
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f001 fa8b 	bl	800d756 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2201      	movs	r2, #1
 800c244:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2240      	movs	r2, #64	; 0x40
 800c24c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c250:	2340      	movs	r3, #64	; 0x40
 800c252:	2200      	movs	r2, #0
 800c254:	2180      	movs	r1, #128	; 0x80
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f001 fa7d 	bl	800d756 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2201      	movs	r2, #1
 800c260:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2240      	movs	r2, #64	; 0x40
 800c266:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d009      	beq.n	800c2a4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	6852      	ldr	r2, [r2, #4]
 800c29c:	b2d2      	uxtb	r2, r2
 800c29e:	4611      	mov	r1, r2
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	4798      	blx	r3
  }

  return USBD_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3708      	adds	r7, #8
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c2ae:	b480      	push	{r7}
 800c2b0:	b083      	sub	sp, #12
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	78fa      	ldrb	r2, [r7, #3]
 800c2be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	370c      	adds	r7, #12
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bc80      	pop	{r7}
 800c2ca:	4770      	bx	lr

0800c2cc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2204      	movs	r2, #4
 800c2e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	370c      	adds	r7, #12
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bc80      	pop	{r7}
 800c2f2:	4770      	bx	lr

0800c2f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c302:	2b04      	cmp	r3, #4
 800c304:	d105      	bne.n	800c312 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	bc80      	pop	{r7}
 800c31c:	4770      	bx	lr

0800c31e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b082      	sub	sp, #8
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c32c:	2b03      	cmp	r3, #3
 800c32e:	d10b      	bne.n	800c348 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c336:	69db      	ldr	r3, [r3, #28]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d005      	beq.n	800c348 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c342:	69db      	ldr	r3, [r3, #28]
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c352:	b480      	push	{r7}
 800c354:	b083      	sub	sp, #12
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	460b      	mov	r3, r1
 800c35c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c35e:	2300      	movs	r3, #0
}
 800c360:	4618      	mov	r0, r3
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	bc80      	pop	{r7}
 800c368:	4770      	bx	lr

0800c36a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c36a:	b480      	push	{r7}
 800c36c:	b083      	sub	sp, #12
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
 800c372:	460b      	mov	r3, r1
 800c374:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bc80      	pop	{r7}
 800c380:	4770      	bx	lr

0800c382 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c382:	b480      	push	{r7}
 800c384:	b083      	sub	sp, #12
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	bc80      	pop	{r7}
 800c394:	4770      	bx	lr

0800c396 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c396:	b580      	push	{r7, lr}
 800c398:	b082      	sub	sp, #8
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	6852      	ldr	r2, [r2, #4]
 800c3b2:	b2d2      	uxtb	r2, r2
 800c3b4:	4611      	mov	r1, r2
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	4798      	blx	r3

  return USBD_OK;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c3da:	2b40      	cmp	r3, #64	; 0x40
 800c3dc:	d005      	beq.n	800c3ea <USBD_StdDevReq+0x26>
 800c3de:	2b40      	cmp	r3, #64	; 0x40
 800c3e0:	d84f      	bhi.n	800c482 <USBD_StdDevReq+0xbe>
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d009      	beq.n	800c3fa <USBD_StdDevReq+0x36>
 800c3e6:	2b20      	cmp	r3, #32
 800c3e8:	d14b      	bne.n	800c482 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	6839      	ldr	r1, [r7, #0]
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	4798      	blx	r3
      break;
 800c3f8:	e048      	b.n	800c48c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	785b      	ldrb	r3, [r3, #1]
 800c3fe:	2b09      	cmp	r3, #9
 800c400:	d839      	bhi.n	800c476 <USBD_StdDevReq+0xb2>
 800c402:	a201      	add	r2, pc, #4	; (adr r2, 800c408 <USBD_StdDevReq+0x44>)
 800c404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c408:	0800c459 	.word	0x0800c459
 800c40c:	0800c46d 	.word	0x0800c46d
 800c410:	0800c477 	.word	0x0800c477
 800c414:	0800c463 	.word	0x0800c463
 800c418:	0800c477 	.word	0x0800c477
 800c41c:	0800c43b 	.word	0x0800c43b
 800c420:	0800c431 	.word	0x0800c431
 800c424:	0800c477 	.word	0x0800c477
 800c428:	0800c44f 	.word	0x0800c44f
 800c42c:	0800c445 	.word	0x0800c445
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c430:	6839      	ldr	r1, [r7, #0]
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 f9dc 	bl	800c7f0 <USBD_GetDescriptor>
          break;
 800c438:	e022      	b.n	800c480 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 fb3f 	bl	800cac0 <USBD_SetAddress>
          break;
 800c442:	e01d      	b.n	800c480 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c444:	6839      	ldr	r1, [r7, #0]
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fb7e 	bl	800cb48 <USBD_SetConfig>
          break;
 800c44c:	e018      	b.n	800c480 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c44e:	6839      	ldr	r1, [r7, #0]
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 fc07 	bl	800cc64 <USBD_GetConfig>
          break;
 800c456:	e013      	b.n	800c480 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fc37 	bl	800ccce <USBD_GetStatus>
          break;
 800c460:	e00e      	b.n	800c480 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 fc65 	bl	800cd34 <USBD_SetFeature>
          break;
 800c46a:	e009      	b.n	800c480 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c46c:	6839      	ldr	r1, [r7, #0]
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fc74 	bl	800cd5c <USBD_ClrFeature>
          break;
 800c474:	e004      	b.n	800c480 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c476:	6839      	ldr	r1, [r7, #0]
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 fccc 	bl	800ce16 <USBD_CtlError>
          break;
 800c47e:	bf00      	nop
      }
      break;
 800c480:	e004      	b.n	800c48c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 fcc6 	bl	800ce16 <USBD_CtlError>
      break;
 800c48a:	bf00      	nop
  }

  return ret;
 800c48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop

0800c498 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4ae:	2b40      	cmp	r3, #64	; 0x40
 800c4b0:	d005      	beq.n	800c4be <USBD_StdItfReq+0x26>
 800c4b2:	2b40      	cmp	r3, #64	; 0x40
 800c4b4:	d82e      	bhi.n	800c514 <USBD_StdItfReq+0x7c>
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d001      	beq.n	800c4be <USBD_StdItfReq+0x26>
 800c4ba:	2b20      	cmp	r3, #32
 800c4bc:	d12a      	bne.n	800c514 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4c4:	3b01      	subs	r3, #1
 800c4c6:	2b02      	cmp	r3, #2
 800c4c8:	d81d      	bhi.n	800c506 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	889b      	ldrh	r3, [r3, #4]
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d813      	bhi.n	800c4fc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	4798      	blx	r3
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	88db      	ldrh	r3, [r3, #6]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d110      	bne.n	800c510 <USBD_StdItfReq+0x78>
 800c4ee:	7bfb      	ldrb	r3, [r7, #15]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d10d      	bne.n	800c510 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fd56 	bl	800cfa6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c4fa:	e009      	b.n	800c510 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800c4fc:	6839      	ldr	r1, [r7, #0]
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 fc89 	bl	800ce16 <USBD_CtlError>
          break;
 800c504:	e004      	b.n	800c510 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 fc84 	bl	800ce16 <USBD_CtlError>
          break;
 800c50e:	e000      	b.n	800c512 <USBD_StdItfReq+0x7a>
          break;
 800c510:	bf00      	nop
      }
      break;
 800c512:	e004      	b.n	800c51e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800c514:	6839      	ldr	r1, [r7, #0]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 fc7d 	bl	800ce16 <USBD_CtlError>
      break;
 800c51c:	bf00      	nop
  }

  return USBD_OK;
 800c51e:	2300      	movs	r3, #0
}
 800c520:	4618      	mov	r0, r3
 800c522:	3710      	adds	r7, #16
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c532:	2300      	movs	r3, #0
 800c534:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	889b      	ldrh	r3, [r3, #4]
 800c53a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c544:	2b40      	cmp	r3, #64	; 0x40
 800c546:	d007      	beq.n	800c558 <USBD_StdEPReq+0x30>
 800c548:	2b40      	cmp	r3, #64	; 0x40
 800c54a:	f200 8146 	bhi.w	800c7da <USBD_StdEPReq+0x2b2>
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00a      	beq.n	800c568 <USBD_StdEPReq+0x40>
 800c552:	2b20      	cmp	r3, #32
 800c554:	f040 8141 	bne.w	800c7da <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	6839      	ldr	r1, [r7, #0]
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	4798      	blx	r3
      break;
 800c566:	e13d      	b.n	800c7e4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c570:	2b20      	cmp	r3, #32
 800c572:	d10a      	bne.n	800c58a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	6839      	ldr	r1, [r7, #0]
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	4798      	blx	r3
 800c582:	4603      	mov	r3, r0
 800c584:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c586:	7bfb      	ldrb	r3, [r7, #15]
 800c588:	e12d      	b.n	800c7e6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	785b      	ldrb	r3, [r3, #1]
 800c58e:	2b03      	cmp	r3, #3
 800c590:	d007      	beq.n	800c5a2 <USBD_StdEPReq+0x7a>
 800c592:	2b03      	cmp	r3, #3
 800c594:	f300 811b 	bgt.w	800c7ce <USBD_StdEPReq+0x2a6>
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d072      	beq.n	800c682 <USBD_StdEPReq+0x15a>
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d03a      	beq.n	800c616 <USBD_StdEPReq+0xee>
 800c5a0:	e115      	b.n	800c7ce <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	d002      	beq.n	800c5b2 <USBD_StdEPReq+0x8a>
 800c5ac:	2b03      	cmp	r3, #3
 800c5ae:	d015      	beq.n	800c5dc <USBD_StdEPReq+0xb4>
 800c5b0:	e02b      	b.n	800c60a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5b2:	7bbb      	ldrb	r3, [r7, #14]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00c      	beq.n	800c5d2 <USBD_StdEPReq+0xaa>
 800c5b8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ba:	2b80      	cmp	r3, #128	; 0x80
 800c5bc:	d009      	beq.n	800c5d2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c5be:	7bbb      	ldrb	r3, [r7, #14]
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f001 f90c 	bl	800d7e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c5c8:	2180      	movs	r1, #128	; 0x80
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f001 f908 	bl	800d7e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c5d0:	e020      	b.n	800c614 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c5d2:	6839      	ldr	r1, [r7, #0]
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 fc1e 	bl	800ce16 <USBD_CtlError>
              break;
 800c5da:	e01b      	b.n	800c614 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	885b      	ldrh	r3, [r3, #2]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d10e      	bne.n	800c602 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c5e4:	7bbb      	ldrb	r3, [r7, #14]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00b      	beq.n	800c602 <USBD_StdEPReq+0xda>
 800c5ea:	7bbb      	ldrb	r3, [r7, #14]
 800c5ec:	2b80      	cmp	r3, #128	; 0x80
 800c5ee:	d008      	beq.n	800c602 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	88db      	ldrh	r3, [r3, #6]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d104      	bne.n	800c602 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c5f8:	7bbb      	ldrb	r3, [r7, #14]
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f001 f8ef 	bl	800d7e0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fccf 	bl	800cfa6 <USBD_CtlSendStatus>

              break;
 800c608:	e004      	b.n	800c614 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c60a:	6839      	ldr	r1, [r7, #0]
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 fc02 	bl	800ce16 <USBD_CtlError>
              break;
 800c612:	bf00      	nop
          }
          break;
 800c614:	e0e0      	b.n	800c7d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c61c:	2b02      	cmp	r3, #2
 800c61e:	d002      	beq.n	800c626 <USBD_StdEPReq+0xfe>
 800c620:	2b03      	cmp	r3, #3
 800c622:	d015      	beq.n	800c650 <USBD_StdEPReq+0x128>
 800c624:	e026      	b.n	800c674 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c626:	7bbb      	ldrb	r3, [r7, #14]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00c      	beq.n	800c646 <USBD_StdEPReq+0x11e>
 800c62c:	7bbb      	ldrb	r3, [r7, #14]
 800c62e:	2b80      	cmp	r3, #128	; 0x80
 800c630:	d009      	beq.n	800c646 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c632:	7bbb      	ldrb	r3, [r7, #14]
 800c634:	4619      	mov	r1, r3
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f001 f8d2 	bl	800d7e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c63c:	2180      	movs	r1, #128	; 0x80
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f001 f8ce 	bl	800d7e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c644:	e01c      	b.n	800c680 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c646:	6839      	ldr	r1, [r7, #0]
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 fbe4 	bl	800ce16 <USBD_CtlError>
              break;
 800c64e:	e017      	b.n	800c680 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	885b      	ldrh	r3, [r3, #2]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d112      	bne.n	800c67e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c658:	7bbb      	ldrb	r3, [r7, #14]
 800c65a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d004      	beq.n	800c66c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c662:	7bbb      	ldrb	r3, [r7, #14]
 800c664:	4619      	mov	r1, r3
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f001 f8d9 	bl	800d81e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 fc9a 	bl	800cfa6 <USBD_CtlSendStatus>
              }
              break;
 800c672:	e004      	b.n	800c67e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c674:	6839      	ldr	r1, [r7, #0]
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 fbcd 	bl	800ce16 <USBD_CtlError>
              break;
 800c67c:	e000      	b.n	800c680 <USBD_StdEPReq+0x158>
              break;
 800c67e:	bf00      	nop
          }
          break;
 800c680:	e0aa      	b.n	800c7d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d002      	beq.n	800c692 <USBD_StdEPReq+0x16a>
 800c68c:	2b03      	cmp	r3, #3
 800c68e:	d032      	beq.n	800c6f6 <USBD_StdEPReq+0x1ce>
 800c690:	e097      	b.n	800c7c2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c692:	7bbb      	ldrb	r3, [r7, #14]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d007      	beq.n	800c6a8 <USBD_StdEPReq+0x180>
 800c698:	7bbb      	ldrb	r3, [r7, #14]
 800c69a:	2b80      	cmp	r3, #128	; 0x80
 800c69c:	d004      	beq.n	800c6a8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c69e:	6839      	ldr	r1, [r7, #0]
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 fbb8 	bl	800ce16 <USBD_CtlError>
                break;
 800c6a6:	e091      	b.n	800c7cc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	da0b      	bge.n	800c6c8 <USBD_StdEPReq+0x1a0>
 800c6b0:	7bbb      	ldrb	r3, [r7, #14]
 800c6b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6b6:	4613      	mov	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4413      	add	r3, r2
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	3310      	adds	r3, #16
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	3304      	adds	r3, #4
 800c6c6:	e00b      	b.n	800c6e0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6c8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	4413      	add	r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	4413      	add	r3, r2
 800c6de:	3304      	adds	r3, #4
 800c6e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 fbfb 	bl	800ceea <USBD_CtlSendData>
              break;
 800c6f4:	e06a      	b.n	800c7cc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c6f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	da11      	bge.n	800c722 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c6fe:	7bbb      	ldrb	r3, [r7, #14]
 800c700:	f003 020f 	and.w	r2, r3, #15
 800c704:	6879      	ldr	r1, [r7, #4]
 800c706:	4613      	mov	r3, r2
 800c708:	009b      	lsls	r3, r3, #2
 800c70a:	4413      	add	r3, r2
 800c70c:	009b      	lsls	r3, r3, #2
 800c70e:	440b      	add	r3, r1
 800c710:	3318      	adds	r3, #24
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d117      	bne.n	800c748 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c718:	6839      	ldr	r1, [r7, #0]
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 fb7b 	bl	800ce16 <USBD_CtlError>
                  break;
 800c720:	e054      	b.n	800c7cc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c722:	7bbb      	ldrb	r3, [r7, #14]
 800c724:	f003 020f 	and.w	r2, r3, #15
 800c728:	6879      	ldr	r1, [r7, #4]
 800c72a:	4613      	mov	r3, r2
 800c72c:	009b      	lsls	r3, r3, #2
 800c72e:	4413      	add	r3, r2
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	440b      	add	r3, r1
 800c734:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d104      	bne.n	800c748 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 fb68 	bl	800ce16 <USBD_CtlError>
                  break;
 800c746:	e041      	b.n	800c7cc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c748:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	da0b      	bge.n	800c768 <USBD_StdEPReq+0x240>
 800c750:	7bbb      	ldrb	r3, [r7, #14]
 800c752:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c756:	4613      	mov	r3, r2
 800c758:	009b      	lsls	r3, r3, #2
 800c75a:	4413      	add	r3, r2
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	3310      	adds	r3, #16
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	4413      	add	r3, r2
 800c764:	3304      	adds	r3, #4
 800c766:	e00b      	b.n	800c780 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c768:	7bbb      	ldrb	r3, [r7, #14]
 800c76a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c76e:	4613      	mov	r3, r2
 800c770:	009b      	lsls	r3, r3, #2
 800c772:	4413      	add	r3, r2
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	4413      	add	r3, r2
 800c77e:	3304      	adds	r3, #4
 800c780:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c782:	7bbb      	ldrb	r3, [r7, #14]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d002      	beq.n	800c78e <USBD_StdEPReq+0x266>
 800c788:	7bbb      	ldrb	r3, [r7, #14]
 800c78a:	2b80      	cmp	r3, #128	; 0x80
 800c78c:	d103      	bne.n	800c796 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	2200      	movs	r2, #0
 800c792:	601a      	str	r2, [r3, #0]
 800c794:	e00e      	b.n	800c7b4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c796:	7bbb      	ldrb	r3, [r7, #14]
 800c798:	4619      	mov	r1, r3
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f001 f85e 	bl	800d85c <USBD_LL_IsStallEP>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d003      	beq.n	800c7ae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	601a      	str	r2, [r3, #0]
 800c7ac:	e002      	b.n	800c7b4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	2202      	movs	r2, #2
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 fb95 	bl	800ceea <USBD_CtlSendData>
              break;
 800c7c0:	e004      	b.n	800c7cc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c7c2:	6839      	ldr	r1, [r7, #0]
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 fb26 	bl	800ce16 <USBD_CtlError>
              break;
 800c7ca:	bf00      	nop
          }
          break;
 800c7cc:	e004      	b.n	800c7d8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fb20 	bl	800ce16 <USBD_CtlError>
          break;
 800c7d6:	bf00      	nop
      }
      break;
 800c7d8:	e004      	b.n	800c7e4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c7da:	6839      	ldr	r1, [r7, #0]
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 fb1a 	bl	800ce16 <USBD_CtlError>
      break;
 800c7e2:	bf00      	nop
  }

  return ret;
 800c7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
	...

0800c7f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c7fe:	2300      	movs	r3, #0
 800c800:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c802:	2300      	movs	r3, #0
 800c804:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	885b      	ldrh	r3, [r3, #2]
 800c80a:	0a1b      	lsrs	r3, r3, #8
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	3b01      	subs	r3, #1
 800c810:	2b06      	cmp	r3, #6
 800c812:	f200 8128 	bhi.w	800ca66 <USBD_GetDescriptor+0x276>
 800c816:	a201      	add	r2, pc, #4	; (adr r2, 800c81c <USBD_GetDescriptor+0x2c>)
 800c818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c81c:	0800c839 	.word	0x0800c839
 800c820:	0800c851 	.word	0x0800c851
 800c824:	0800c891 	.word	0x0800c891
 800c828:	0800ca67 	.word	0x0800ca67
 800c82c:	0800ca67 	.word	0x0800ca67
 800c830:	0800ca07 	.word	0x0800ca07
 800c834:	0800ca33 	.word	0x0800ca33
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	7c12      	ldrb	r2, [r2, #16]
 800c844:	f107 0108 	add.w	r1, r7, #8
 800c848:	4610      	mov	r0, r2
 800c84a:	4798      	blx	r3
 800c84c:	60f8      	str	r0, [r7, #12]
      break;
 800c84e:	e112      	b.n	800ca76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	7c1b      	ldrb	r3, [r3, #16]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10d      	bne.n	800c874 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c860:	f107 0208 	add.w	r2, r7, #8
 800c864:	4610      	mov	r0, r2
 800c866:	4798      	blx	r3
 800c868:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	3301      	adds	r3, #1
 800c86e:	2202      	movs	r2, #2
 800c870:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c872:	e100      	b.n	800ca76 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87c:	f107 0208 	add.w	r2, r7, #8
 800c880:	4610      	mov	r0, r2
 800c882:	4798      	blx	r3
 800c884:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	3301      	adds	r3, #1
 800c88a:	2202      	movs	r2, #2
 800c88c:	701a      	strb	r2, [r3, #0]
      break;
 800c88e:	e0f2      	b.n	800ca76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	885b      	ldrh	r3, [r3, #2]
 800c894:	b2db      	uxtb	r3, r3
 800c896:	2b05      	cmp	r3, #5
 800c898:	f200 80ac 	bhi.w	800c9f4 <USBD_GetDescriptor+0x204>
 800c89c:	a201      	add	r2, pc, #4	; (adr r2, 800c8a4 <USBD_GetDescriptor+0xb4>)
 800c89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a2:	bf00      	nop
 800c8a4:	0800c8bd 	.word	0x0800c8bd
 800c8a8:	0800c8f1 	.word	0x0800c8f1
 800c8ac:	0800c925 	.word	0x0800c925
 800c8b0:	0800c959 	.word	0x0800c959
 800c8b4:	0800c98d 	.word	0x0800c98d
 800c8b8:	0800c9c1 	.word	0x0800c9c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d00b      	beq.n	800c8e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	7c12      	ldrb	r2, [r2, #16]
 800c8d4:	f107 0108 	add.w	r1, r7, #8
 800c8d8:	4610      	mov	r0, r2
 800c8da:	4798      	blx	r3
 800c8dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8de:	e091      	b.n	800ca04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8e0:	6839      	ldr	r1, [r7, #0]
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fa97 	bl	800ce16 <USBD_CtlError>
            err++;
 800c8e8:	7afb      	ldrb	r3, [r7, #11]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c8ee:	e089      	b.n	800ca04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c8f6:	689b      	ldr	r3, [r3, #8]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00b      	beq.n	800c914 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	7c12      	ldrb	r2, [r2, #16]
 800c908:	f107 0108 	add.w	r1, r7, #8
 800c90c:	4610      	mov	r0, r2
 800c90e:	4798      	blx	r3
 800c910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c912:	e077      	b.n	800ca04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c914:	6839      	ldr	r1, [r7, #0]
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 fa7d 	bl	800ce16 <USBD_CtlError>
            err++;
 800c91c:	7afb      	ldrb	r3, [r7, #11]
 800c91e:	3301      	adds	r3, #1
 800c920:	72fb      	strb	r3, [r7, #11]
          break;
 800c922:	e06f      	b.n	800ca04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c92a:	68db      	ldr	r3, [r3, #12]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00b      	beq.n	800c948 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	7c12      	ldrb	r2, [r2, #16]
 800c93c:	f107 0108 	add.w	r1, r7, #8
 800c940:	4610      	mov	r0, r2
 800c942:	4798      	blx	r3
 800c944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c946:	e05d      	b.n	800ca04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c948:	6839      	ldr	r1, [r7, #0]
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 fa63 	bl	800ce16 <USBD_CtlError>
            err++;
 800c950:	7afb      	ldrb	r3, [r7, #11]
 800c952:	3301      	adds	r3, #1
 800c954:	72fb      	strb	r3, [r7, #11]
          break;
 800c956:	e055      	b.n	800ca04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c95e:	691b      	ldr	r3, [r3, #16]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00b      	beq.n	800c97c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c96a:	691b      	ldr	r3, [r3, #16]
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	7c12      	ldrb	r2, [r2, #16]
 800c970:	f107 0108 	add.w	r1, r7, #8
 800c974:	4610      	mov	r0, r2
 800c976:	4798      	blx	r3
 800c978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c97a:	e043      	b.n	800ca04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c97c:	6839      	ldr	r1, [r7, #0]
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 fa49 	bl	800ce16 <USBD_CtlError>
            err++;
 800c984:	7afb      	ldrb	r3, [r7, #11]
 800c986:	3301      	adds	r3, #1
 800c988:	72fb      	strb	r3, [r7, #11]
          break;
 800c98a:	e03b      	b.n	800ca04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c992:	695b      	ldr	r3, [r3, #20]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00b      	beq.n	800c9b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c99e:	695b      	ldr	r3, [r3, #20]
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	7c12      	ldrb	r2, [r2, #16]
 800c9a4:	f107 0108 	add.w	r1, r7, #8
 800c9a8:	4610      	mov	r0, r2
 800c9aa:	4798      	blx	r3
 800c9ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9ae:	e029      	b.n	800ca04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 fa2f 	bl	800ce16 <USBD_CtlError>
            err++;
 800c9b8:	7afb      	ldrb	r3, [r7, #11]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	72fb      	strb	r3, [r7, #11]
          break;
 800c9be:	e021      	b.n	800ca04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c9c6:	699b      	ldr	r3, [r3, #24]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d00b      	beq.n	800c9e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c9d2:	699b      	ldr	r3, [r3, #24]
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	7c12      	ldrb	r2, [r2, #16]
 800c9d8:	f107 0108 	add.w	r1, r7, #8
 800c9dc:	4610      	mov	r0, r2
 800c9de:	4798      	blx	r3
 800c9e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9e2:	e00f      	b.n	800ca04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c9e4:	6839      	ldr	r1, [r7, #0]
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 fa15 	bl	800ce16 <USBD_CtlError>
            err++;
 800c9ec:	7afb      	ldrb	r3, [r7, #11]
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	72fb      	strb	r3, [r7, #11]
          break;
 800c9f2:	e007      	b.n	800ca04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c9f4:	6839      	ldr	r1, [r7, #0]
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 fa0d 	bl	800ce16 <USBD_CtlError>
          err++;
 800c9fc:	7afb      	ldrb	r3, [r7, #11]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ca02:	e038      	b.n	800ca76 <USBD_GetDescriptor+0x286>
 800ca04:	e037      	b.n	800ca76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	7c1b      	ldrb	r3, [r3, #16]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d109      	bne.n	800ca22 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca16:	f107 0208 	add.w	r2, r7, #8
 800ca1a:	4610      	mov	r0, r2
 800ca1c:	4798      	blx	r3
 800ca1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca20:	e029      	b.n	800ca76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 f9f6 	bl	800ce16 <USBD_CtlError>
        err++;
 800ca2a:	7afb      	ldrb	r3, [r7, #11]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	72fb      	strb	r3, [r7, #11]
      break;
 800ca30:	e021      	b.n	800ca76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	7c1b      	ldrb	r3, [r3, #16]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10d      	bne.n	800ca56 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca42:	f107 0208 	add.w	r2, r7, #8
 800ca46:	4610      	mov	r0, r2
 800ca48:	4798      	blx	r3
 800ca4a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	2207      	movs	r2, #7
 800ca52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca54:	e00f      	b.n	800ca76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ca56:	6839      	ldr	r1, [r7, #0]
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 f9dc 	bl	800ce16 <USBD_CtlError>
        err++;
 800ca5e:	7afb      	ldrb	r3, [r7, #11]
 800ca60:	3301      	adds	r3, #1
 800ca62:	72fb      	strb	r3, [r7, #11]
      break;
 800ca64:	e007      	b.n	800ca76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ca66:	6839      	ldr	r1, [r7, #0]
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f000 f9d4 	bl	800ce16 <USBD_CtlError>
      err++;
 800ca6e:	7afb      	ldrb	r3, [r7, #11]
 800ca70:	3301      	adds	r3, #1
 800ca72:	72fb      	strb	r3, [r7, #11]
      break;
 800ca74:	bf00      	nop
  }

  if (err != 0U)
 800ca76:	7afb      	ldrb	r3, [r7, #11]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d11c      	bne.n	800cab6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ca7c:	893b      	ldrh	r3, [r7, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d011      	beq.n	800caa6 <USBD_GetDescriptor+0x2b6>
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	88db      	ldrh	r3, [r3, #6]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00d      	beq.n	800caa6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	88da      	ldrh	r2, [r3, #6]
 800ca8e:	893b      	ldrh	r3, [r7, #8]
 800ca90:	4293      	cmp	r3, r2
 800ca92:	bf28      	it	cs
 800ca94:	4613      	movcs	r3, r2
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ca9a:	893b      	ldrh	r3, [r7, #8]
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	68f9      	ldr	r1, [r7, #12]
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fa22 	bl	800ceea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	88db      	ldrh	r3, [r3, #6]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d104      	bne.n	800cab8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 fa79 	bl	800cfa6 <USBD_CtlSendStatus>
 800cab4:	e000      	b.n	800cab8 <USBD_GetDescriptor+0x2c8>
    return;
 800cab6:	bf00      	nop
    }
  }
}
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop

0800cac0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	889b      	ldrh	r3, [r3, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d130      	bne.n	800cb34 <USBD_SetAddress+0x74>
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	88db      	ldrh	r3, [r3, #6]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d12c      	bne.n	800cb34 <USBD_SetAddress+0x74>
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	885b      	ldrh	r3, [r3, #2]
 800cade:	2b7f      	cmp	r3, #127	; 0x7f
 800cae0:	d828      	bhi.n	800cb34 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	885b      	ldrh	r3, [r3, #2]
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caf4:	2b03      	cmp	r3, #3
 800caf6:	d104      	bne.n	800cb02 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800caf8:	6839      	ldr	r1, [r7, #0]
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 f98b 	bl	800ce16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb00:	e01d      	b.n	800cb3e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	7bfa      	ldrb	r2, [r7, #15]
 800cb06:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cb0a:	7bfb      	ldrb	r3, [r7, #15]
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 fecf 	bl	800d8b2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 fa46 	bl	800cfa6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cb1a:	7bfb      	ldrb	r3, [r7, #15]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d004      	beq.n	800cb2a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2202      	movs	r2, #2
 800cb24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb28:	e009      	b.n	800cb3e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb32:	e004      	b.n	800cb3e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cb34:	6839      	ldr	r1, [r7, #0]
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 f96d 	bl	800ce16 <USBD_CtlError>
  }
}
 800cb3c:	bf00      	nop
 800cb3e:	bf00      	nop
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
	...

0800cb48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	885b      	ldrh	r3, [r3, #2]
 800cb56:	b2da      	uxtb	r2, r3
 800cb58:	4b41      	ldr	r3, [pc, #260]	; (800cc60 <USBD_SetConfig+0x118>)
 800cb5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cb5c:	4b40      	ldr	r3, [pc, #256]	; (800cc60 <USBD_SetConfig+0x118>)
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d904      	bls.n	800cb6e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800cb64:	6839      	ldr	r1, [r7, #0]
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 f955 	bl	800ce16 <USBD_CtlError>
 800cb6c:	e075      	b.n	800cc5a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb74:	2b02      	cmp	r3, #2
 800cb76:	d002      	beq.n	800cb7e <USBD_SetConfig+0x36>
 800cb78:	2b03      	cmp	r3, #3
 800cb7a:	d023      	beq.n	800cbc4 <USBD_SetConfig+0x7c>
 800cb7c:	e062      	b.n	800cc44 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800cb7e:	4b38      	ldr	r3, [pc, #224]	; (800cc60 <USBD_SetConfig+0x118>)
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d01a      	beq.n	800cbbc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800cb86:	4b36      	ldr	r3, [pc, #216]	; (800cc60 <USBD_SetConfig+0x118>)
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2203      	movs	r2, #3
 800cb94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cb98:	4b31      	ldr	r3, [pc, #196]	; (800cc60 <USBD_SetConfig+0x118>)
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f7ff f9af 	bl	800bf02 <USBD_SetClassConfig>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d104      	bne.n	800cbb4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800cbaa:	6839      	ldr	r1, [r7, #0]
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 f932 	bl	800ce16 <USBD_CtlError>
            return;
 800cbb2:	e052      	b.n	800cc5a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f9f6 	bl	800cfa6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800cbba:	e04e      	b.n	800cc5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f9f2 	bl	800cfa6 <USBD_CtlSendStatus>
        break;
 800cbc2:	e04a      	b.n	800cc5a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800cbc4:	4b26      	ldr	r3, [pc, #152]	; (800cc60 <USBD_SetConfig+0x118>)
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d112      	bne.n	800cbf2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2202      	movs	r2, #2
 800cbd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800cbd4:	4b22      	ldr	r3, [pc, #136]	; (800cc60 <USBD_SetConfig+0x118>)
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	461a      	mov	r2, r3
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800cbde:	4b20      	ldr	r3, [pc, #128]	; (800cc60 <USBD_SetConfig+0x118>)
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f7ff f9ab 	bl	800bf40 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 f9db 	bl	800cfa6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800cbf0:	e033      	b.n	800cc5a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800cbf2:	4b1b      	ldr	r3, [pc, #108]	; (800cc60 <USBD_SetConfig+0x118>)
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d01d      	beq.n	800cc3c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	4619      	mov	r1, r3
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7ff f999 	bl	800bf40 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800cc0e:	4b14      	ldr	r3, [pc, #80]	; (800cc60 <USBD_SetConfig+0x118>)
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	461a      	mov	r2, r3
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cc18:	4b11      	ldr	r3, [pc, #68]	; (800cc60 <USBD_SetConfig+0x118>)
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f7ff f96f 	bl	800bf02 <USBD_SetClassConfig>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	d104      	bne.n	800cc34 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800cc2a:	6839      	ldr	r1, [r7, #0]
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 f8f2 	bl	800ce16 <USBD_CtlError>
            return;
 800cc32:	e012      	b.n	800cc5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 f9b6 	bl	800cfa6 <USBD_CtlSendStatus>
        break;
 800cc3a:	e00e      	b.n	800cc5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f9b2 	bl	800cfa6 <USBD_CtlSendStatus>
        break;
 800cc42:	e00a      	b.n	800cc5a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800cc44:	6839      	ldr	r1, [r7, #0]
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 f8e5 	bl	800ce16 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800cc4c:	4b04      	ldr	r3, [pc, #16]	; (800cc60 <USBD_SetConfig+0x118>)
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	4619      	mov	r1, r3
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f7ff f974 	bl	800bf40 <USBD_ClrClassConfig>
        break;
 800cc58:	bf00      	nop
    }
  }
}
 800cc5a:	3708      	adds	r7, #8
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	200007f8 	.word	0x200007f8

0800cc64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	88db      	ldrh	r3, [r3, #6]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d004      	beq.n	800cc80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cc76:	6839      	ldr	r1, [r7, #0]
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 f8cc 	bl	800ce16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cc7e:	e022      	b.n	800ccc6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc86:	2b02      	cmp	r3, #2
 800cc88:	dc02      	bgt.n	800cc90 <USBD_GetConfig+0x2c>
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	dc03      	bgt.n	800cc96 <USBD_GetConfig+0x32>
 800cc8e:	e015      	b.n	800ccbc <USBD_GetConfig+0x58>
 800cc90:	2b03      	cmp	r3, #3
 800cc92:	d00b      	beq.n	800ccac <USBD_GetConfig+0x48>
 800cc94:	e012      	b.n	800ccbc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	3308      	adds	r3, #8
 800cca0:	2201      	movs	r2, #1
 800cca2:	4619      	mov	r1, r3
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 f920 	bl	800ceea <USBD_CtlSendData>
        break;
 800ccaa:	e00c      	b.n	800ccc6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	3304      	adds	r3, #4
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 f918 	bl	800ceea <USBD_CtlSendData>
        break;
 800ccba:	e004      	b.n	800ccc6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800ccbc:	6839      	ldr	r1, [r7, #0]
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 f8a9 	bl	800ce16 <USBD_CtlError>
        break;
 800ccc4:	bf00      	nop
}
 800ccc6:	bf00      	nop
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b082      	sub	sp, #8
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
 800ccd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccde:	3b01      	subs	r3, #1
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d81e      	bhi.n	800cd22 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	88db      	ldrh	r3, [r3, #6]
 800cce8:	2b02      	cmp	r3, #2
 800ccea:	d004      	beq.n	800ccf6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ccec:	6839      	ldr	r1, [r7, #0]
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 f891 	bl	800ce16 <USBD_CtlError>
        break;
 800ccf4:	e01a      	b.n	800cd2c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d005      	beq.n	800cd12 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	68db      	ldr	r3, [r3, #12]
 800cd0a:	f043 0202 	orr.w	r2, r3, #2
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	330c      	adds	r3, #12
 800cd16:	2202      	movs	r2, #2
 800cd18:	4619      	mov	r1, r3
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 f8e5 	bl	800ceea <USBD_CtlSendData>
      break;
 800cd20:	e004      	b.n	800cd2c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800cd22:	6839      	ldr	r1, [r7, #0]
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 f876 	bl	800ce16 <USBD_CtlError>
      break;
 800cd2a:	bf00      	nop
  }
}
 800cd2c:	bf00      	nop
 800cd2e:	3708      	adds	r7, #8
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	885b      	ldrh	r3, [r3, #2]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d106      	bne.n	800cd54 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2201      	movs	r2, #1
 800cd4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 f929 	bl	800cfa6 <USBD_CtlSendStatus>
  }
}
 800cd54:	bf00      	nop
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d80b      	bhi.n	800cd8a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	885b      	ldrh	r3, [r3, #2]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d10c      	bne.n	800cd94 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 f90f 	bl	800cfa6 <USBD_CtlSendStatus>
      }
      break;
 800cd88:	e004      	b.n	800cd94 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cd8a:	6839      	ldr	r1, [r7, #0]
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 f842 	bl	800ce16 <USBD_CtlError>
      break;
 800cd92:	e000      	b.n	800cd96 <USBD_ClrFeature+0x3a>
      break;
 800cd94:	bf00      	nop
  }
}
 800cd96:	bf00      	nop
 800cd98:	3708      	adds	r7, #8
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd9e:	b480      	push	{r7}
 800cda0:	b083      	sub	sp, #12
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
 800cda6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	781a      	ldrb	r2, [r3, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	785a      	ldrb	r2, [r3, #1]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	3302      	adds	r3, #2
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	3303      	adds	r3, #3
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	021b      	lsls	r3, r3, #8
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	4413      	add	r3, r2
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	3304      	adds	r3, #4
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	3305      	adds	r3, #5
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	021b      	lsls	r3, r3, #8
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	4413      	add	r3, r2
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	3306      	adds	r3, #6
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	b29a      	uxth	r2, r3
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	3307      	adds	r3, #7
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	021b      	lsls	r3, r3, #8
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	4413      	add	r3, r2
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	80da      	strh	r2, [r3, #6]

}
 800ce0c:	bf00      	nop
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bc80      	pop	{r7}
 800ce14:	4770      	bx	lr

0800ce16 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b082      	sub	sp, #8
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
 800ce1e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ce20:	2180      	movs	r1, #128	; 0x80
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 fcdc 	bl	800d7e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ce28:	2100      	movs	r1, #0
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 fcd8 	bl	800d7e0 <USBD_LL_StallEP>
}
 800ce30:	bf00      	nop
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ce44:	2300      	movs	r3, #0
 800ce46:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d032      	beq.n	800ceb4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ce4e:	68f8      	ldr	r0, [r7, #12]
 800ce50:	f000 f834 	bl	800cebc <USBD_GetLen>
 800ce54:	4603      	mov	r3, r0
 800ce56:	3301      	adds	r3, #1
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	005b      	lsls	r3, r3, #1
 800ce5c:	b29a      	uxth	r2, r3
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ce62:	7dfb      	ldrb	r3, [r7, #23]
 800ce64:	1c5a      	adds	r2, r3, #1
 800ce66:	75fa      	strb	r2, [r7, #23]
 800ce68:	461a      	mov	r2, r3
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	7812      	ldrb	r2, [r2, #0]
 800ce72:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ce74:	7dfb      	ldrb	r3, [r7, #23]
 800ce76:	1c5a      	adds	r2, r3, #1
 800ce78:	75fa      	strb	r2, [r7, #23]
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	4413      	add	r3, r2
 800ce80:	2203      	movs	r2, #3
 800ce82:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ce84:	e012      	b.n	800ceac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	1c5a      	adds	r2, r3, #1
 800ce8a:	60fa      	str	r2, [r7, #12]
 800ce8c:	7dfa      	ldrb	r2, [r7, #23]
 800ce8e:	1c51      	adds	r1, r2, #1
 800ce90:	75f9      	strb	r1, [r7, #23]
 800ce92:	4611      	mov	r1, r2
 800ce94:	68ba      	ldr	r2, [r7, #8]
 800ce96:	440a      	add	r2, r1
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ce9c:	7dfb      	ldrb	r3, [r7, #23]
 800ce9e:	1c5a      	adds	r2, r3, #1
 800cea0:	75fa      	strb	r2, [r7, #23]
 800cea2:	461a      	mov	r2, r3
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	4413      	add	r3, r2
 800cea8:	2200      	movs	r2, #0
 800ceaa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d1e8      	bne.n	800ce86 <USBD_GetString+0x4e>
    }
  }
}
 800ceb4:	bf00      	nop
 800ceb6:	3718      	adds	r7, #24
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cec4:	2300      	movs	r3, #0
 800cec6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800cec8:	e005      	b.n	800ced6 <USBD_GetLen+0x1a>
  {
    len++;
 800ceca:	7bfb      	ldrb	r3, [r7, #15]
 800cecc:	3301      	adds	r3, #1
 800cece:	73fb      	strb	r3, [r7, #15]
    buf++;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	3301      	adds	r3, #1
 800ced4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d1f5      	bne.n	800ceca <USBD_GetLen+0xe>
  }

  return len;
 800cede:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3714      	adds	r7, #20
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bc80      	pop	{r7}
 800cee8:	4770      	bx	lr

0800ceea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b084      	sub	sp, #16
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	60f8      	str	r0, [r7, #12]
 800cef2:	60b9      	str	r1, [r7, #8]
 800cef4:	4613      	mov	r3, r2
 800cef6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	2202      	movs	r2, #2
 800cefc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cf00:	88fa      	ldrh	r2, [r7, #6]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800cf06:	88fa      	ldrh	r2, [r7, #6]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf0c:	88fb      	ldrh	r3, [r7, #6]
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	2100      	movs	r1, #0
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f000 fcec 	bl	800d8f0 <USBD_LL_Transmit>

  return USBD_OK;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}

0800cf22 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b084      	sub	sp, #16
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	60f8      	str	r0, [r7, #12]
 800cf2a:	60b9      	str	r1, [r7, #8]
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf30:	88fb      	ldrh	r3, [r7, #6]
 800cf32:	68ba      	ldr	r2, [r7, #8]
 800cf34:	2100      	movs	r1, #0
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f000 fcda 	bl	800d8f0 <USBD_LL_Transmit>

  return USBD_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b084      	sub	sp, #16
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	60f8      	str	r0, [r7, #12]
 800cf4e:	60b9      	str	r1, [r7, #8]
 800cf50:	4613      	mov	r3, r2
 800cf52:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2203      	movs	r2, #3
 800cf58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cf5c:	88fa      	ldrh	r2, [r7, #6]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800cf64:	88fa      	ldrh	r2, [r7, #6]
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf6c:	88fb      	ldrh	r3, [r7, #6]
 800cf6e:	68ba      	ldr	r2, [r7, #8]
 800cf70:	2100      	movs	r1, #0
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f000 fcdf 	bl	800d936 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b084      	sub	sp, #16
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	60f8      	str	r0, [r7, #12]
 800cf8a:	60b9      	str	r1, [r7, #8]
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf90:	88fb      	ldrh	r3, [r7, #6]
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	2100      	movs	r1, #0
 800cf96:	68f8      	ldr	r0, [r7, #12]
 800cf98:	f000 fccd 	bl	800d936 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b082      	sub	sp, #8
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2204      	movs	r2, #4
 800cfb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	2200      	movs	r2, #0
 800cfba:	2100      	movs	r1, #0
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 fc97 	bl	800d8f0 <USBD_LL_Transmit>

  return USBD_OK;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3708      	adds	r7, #8
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2205      	movs	r2, #5
 800cfd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfdc:	2300      	movs	r3, #0
 800cfde:	2200      	movs	r2, #0
 800cfe0:	2100      	movs	r1, #0
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 fca7 	bl	800d936 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
	...

0800cff4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cff8:	2200      	movs	r2, #0
 800cffa:	4912      	ldr	r1, [pc, #72]	; (800d044 <MX_USB_DEVICE_Init+0x50>)
 800cffc:	4812      	ldr	r0, [pc, #72]	; (800d048 <MX_USB_DEVICE_Init+0x54>)
 800cffe:	f7fe ff26 	bl	800be4e <USBD_Init>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d001      	beq.n	800d00c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d008:	f7f7 fdae 	bl	8004b68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d00c:	490f      	ldr	r1, [pc, #60]	; (800d04c <MX_USB_DEVICE_Init+0x58>)
 800d00e:	480e      	ldr	r0, [pc, #56]	; (800d048 <MX_USB_DEVICE_Init+0x54>)
 800d010:	f7fe ff48 	bl	800bea4 <USBD_RegisterClass>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d001      	beq.n	800d01e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d01a:	f7f7 fda5 	bl	8004b68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d01e:	490c      	ldr	r1, [pc, #48]	; (800d050 <MX_USB_DEVICE_Init+0x5c>)
 800d020:	4809      	ldr	r0, [pc, #36]	; (800d048 <MX_USB_DEVICE_Init+0x54>)
 800d022:	f7fe fe79 	bl	800bd18 <USBD_CDC_RegisterInterface>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d001      	beq.n	800d030 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d02c:	f7f7 fd9c 	bl	8004b68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d030:	4805      	ldr	r0, [pc, #20]	; (800d048 <MX_USB_DEVICE_Init+0x54>)
 800d032:	f7fe ff50 	bl	800bed6 <USBD_Start>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d001      	beq.n	800d040 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d03c:	f7f7 fd94 	bl	8004b68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d040:	bf00      	nop
 800d042:	bd80      	pop	{r7, pc}
 800d044:	2000016c 	.word	0x2000016c
 800d048:	20000808 	.word	0x20000808
 800d04c:	20000050 	.word	0x20000050
 800d050:	20000154 	.word	0x20000154

0800d054 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d058:	2200      	movs	r2, #0
 800d05a:	4905      	ldr	r1, [pc, #20]	; (800d070 <CDC_Init_FS+0x1c>)
 800d05c:	4805      	ldr	r0, [pc, #20]	; (800d074 <CDC_Init_FS+0x20>)
 800d05e:	f7fe fe71 	bl	800bd44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d062:	4905      	ldr	r1, [pc, #20]	; (800d078 <CDC_Init_FS+0x24>)
 800d064:	4803      	ldr	r0, [pc, #12]	; (800d074 <CDC_Init_FS+0x20>)
 800d066:	f7fe fe86 	bl	800bd76 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d06a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	200012cc 	.word	0x200012cc
 800d074:	20000808 	.word	0x20000808
 800d078:	20000acc 	.word	0x20000acc

0800d07c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d07c:	b480      	push	{r7}
 800d07e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d080:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d082:	4618      	mov	r0, r3
 800d084:	46bd      	mov	sp, r7
 800d086:	bc80      	pop	{r7}
 800d088:	4770      	bx	lr
	...

0800d08c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	4603      	mov	r3, r0
 800d094:	6039      	str	r1, [r7, #0]
 800d096:	71fb      	strb	r3, [r7, #7]
 800d098:	4613      	mov	r3, r2
 800d09a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d09c:	79fb      	ldrb	r3, [r7, #7]
 800d09e:	2b23      	cmp	r3, #35	; 0x23
 800d0a0:	d85c      	bhi.n	800d15c <CDC_Control_FS+0xd0>
 800d0a2:	a201      	add	r2, pc, #4	; (adr r2, 800d0a8 <CDC_Control_FS+0x1c>)
 800d0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a8:	0800d15d 	.word	0x0800d15d
 800d0ac:	0800d15d 	.word	0x0800d15d
 800d0b0:	0800d15d 	.word	0x0800d15d
 800d0b4:	0800d15d 	.word	0x0800d15d
 800d0b8:	0800d15d 	.word	0x0800d15d
 800d0bc:	0800d15d 	.word	0x0800d15d
 800d0c0:	0800d15d 	.word	0x0800d15d
 800d0c4:	0800d15d 	.word	0x0800d15d
 800d0c8:	0800d15d 	.word	0x0800d15d
 800d0cc:	0800d15d 	.word	0x0800d15d
 800d0d0:	0800d15d 	.word	0x0800d15d
 800d0d4:	0800d15d 	.word	0x0800d15d
 800d0d8:	0800d15d 	.word	0x0800d15d
 800d0dc:	0800d15d 	.word	0x0800d15d
 800d0e0:	0800d15d 	.word	0x0800d15d
 800d0e4:	0800d15d 	.word	0x0800d15d
 800d0e8:	0800d15d 	.word	0x0800d15d
 800d0ec:	0800d15d 	.word	0x0800d15d
 800d0f0:	0800d15d 	.word	0x0800d15d
 800d0f4:	0800d15d 	.word	0x0800d15d
 800d0f8:	0800d15d 	.word	0x0800d15d
 800d0fc:	0800d15d 	.word	0x0800d15d
 800d100:	0800d15d 	.word	0x0800d15d
 800d104:	0800d15d 	.word	0x0800d15d
 800d108:	0800d15d 	.word	0x0800d15d
 800d10c:	0800d15d 	.word	0x0800d15d
 800d110:	0800d15d 	.word	0x0800d15d
 800d114:	0800d15d 	.word	0x0800d15d
 800d118:	0800d15d 	.word	0x0800d15d
 800d11c:	0800d15d 	.word	0x0800d15d
 800d120:	0800d15d 	.word	0x0800d15d
 800d124:	0800d15d 	.word	0x0800d15d
 800d128:	0800d139 	.word	0x0800d139
 800d12c:	0800d14b 	.word	0x0800d14b
 800d130:	0800d15d 	.word	0x0800d15d
 800d134:	0800d15d 	.word	0x0800d15d
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit

    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };

    case CDC_SET_LINE_CODING:
      memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800d138:	4b0c      	ldr	r3, [pc, #48]	; (800d16c <CDC_Control_FS+0xe0>)
 800d13a:	683a      	ldr	r2, [r7, #0]
 800d13c:	6810      	ldr	r0, [r2, #0]
 800d13e:	6018      	str	r0, [r3, #0]
 800d140:	8891      	ldrh	r1, [r2, #4]
 800d142:	7992      	ldrb	r2, [r2, #6]
 800d144:	8099      	strh	r1, [r3, #4]
 800d146:	719a      	strb	r2, [r3, #6]
    break;
 800d148:	e009      	b.n	800d15e <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
      memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	4a07      	ldr	r2, [pc, #28]	; (800d16c <CDC_Control_FS+0xe0>)
 800d14e:	6810      	ldr	r0, [r2, #0]
 800d150:	6018      	str	r0, [r3, #0]
 800d152:	8891      	ldrh	r1, [r2, #4]
 800d154:	7992      	ldrb	r2, [r2, #6]
 800d156:	8099      	strh	r1, [r3, #4]
 800d158:	719a      	strb	r2, [r3, #6]
    break;
 800d15a:	e000      	b.n	800d15e <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d15c:	bf00      	nop
  }

  return (USBD_OK);
 800d15e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d160:	4618      	mov	r0, r3
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	bc80      	pop	{r7}
 800d168:	4770      	bx	lr
 800d16a:	bf00      	nop
 800d16c:	20000164 	.word	0x20000164

0800d170 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d17a:	6879      	ldr	r1, [r7, #4]
 800d17c:	4805      	ldr	r0, [pc, #20]	; (800d194 <CDC_Receive_FS+0x24>)
 800d17e:	f7fe fdfa 	bl	800bd76 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d182:	4804      	ldr	r0, [pc, #16]	; (800d194 <CDC_Receive_FS+0x24>)
 800d184:	f7fe fe39 	bl	800bdfa <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d188:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3708      	adds	r7, #8
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop
 800d194:	20000808 	.word	0x20000808

0800d198 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d1a8:	4b0d      	ldr	r3, [pc, #52]	; (800d1e0 <CDC_Transmit_FS+0x48>)
 800d1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d001      	beq.n	800d1be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e00b      	b.n	800d1d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d1be:	887b      	ldrh	r3, [r7, #2]
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	6879      	ldr	r1, [r7, #4]
 800d1c4:	4806      	ldr	r0, [pc, #24]	; (800d1e0 <CDC_Transmit_FS+0x48>)
 800d1c6:	f7fe fdbd 	bl	800bd44 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d1ca:	4805      	ldr	r0, [pc, #20]	; (800d1e0 <CDC_Transmit_FS+0x48>)
 800d1cc:	f7fe fde6 	bl	800bd9c <USBD_CDC_TransmitPacket>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3710      	adds	r7, #16
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	20000808 	.word	0x20000808

0800d1e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	6039      	str	r1, [r7, #0]
 800d1ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	2212      	movs	r2, #18
 800d1f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d1f6:	4b03      	ldr	r3, [pc, #12]	; (800d204 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bc80      	pop	{r7}
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	20000188 	.word	0x20000188

0800d208 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	4603      	mov	r3, r0
 800d210:	6039      	str	r1, [r7, #0]
 800d212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	2204      	movs	r2, #4
 800d218:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d21a:	4b03      	ldr	r3, [pc, #12]	; (800d228 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	370c      	adds	r7, #12
 800d220:	46bd      	mov	sp, r7
 800d222:	bc80      	pop	{r7}
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	2000019c 	.word	0x2000019c

0800d22c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	4603      	mov	r3, r0
 800d234:	6039      	str	r1, [r7, #0]
 800d236:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d238:	79fb      	ldrb	r3, [r7, #7]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d105      	bne.n	800d24a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d23e:	683a      	ldr	r2, [r7, #0]
 800d240:	4907      	ldr	r1, [pc, #28]	; (800d260 <USBD_FS_ProductStrDescriptor+0x34>)
 800d242:	4808      	ldr	r0, [pc, #32]	; (800d264 <USBD_FS_ProductStrDescriptor+0x38>)
 800d244:	f7ff fdf8 	bl	800ce38 <USBD_GetString>
 800d248:	e004      	b.n	800d254 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d24a:	683a      	ldr	r2, [r7, #0]
 800d24c:	4904      	ldr	r1, [pc, #16]	; (800d260 <USBD_FS_ProductStrDescriptor+0x34>)
 800d24e:	4805      	ldr	r0, [pc, #20]	; (800d264 <USBD_FS_ProductStrDescriptor+0x38>)
 800d250:	f7ff fdf2 	bl	800ce38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d254:	4b02      	ldr	r3, [pc, #8]	; (800d260 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d256:	4618      	mov	r0, r3
 800d258:	3708      	adds	r7, #8
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	20001acc 	.word	0x20001acc
 800d264:	08012abc 	.word	0x08012abc

0800d268 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	4603      	mov	r3, r0
 800d270:	6039      	str	r1, [r7, #0]
 800d272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d274:	683a      	ldr	r2, [r7, #0]
 800d276:	4904      	ldr	r1, [pc, #16]	; (800d288 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d278:	4804      	ldr	r0, [pc, #16]	; (800d28c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d27a:	f7ff fddd 	bl	800ce38 <USBD_GetString>
  return USBD_StrDesc;
 800d27e:	4b02      	ldr	r3, [pc, #8]	; (800d288 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d280:	4618      	mov	r0, r3
 800d282:	3708      	adds	r7, #8
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	20001acc 	.word	0x20001acc
 800d28c:	08012ad4 	.word	0x08012ad4

0800d290 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	4603      	mov	r3, r0
 800d298:	6039      	str	r1, [r7, #0]
 800d29a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	221a      	movs	r2, #26
 800d2a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d2a2:	f000 f843 	bl	800d32c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d2a6:	4b02      	ldr	r3, [pc, #8]	; (800d2b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3708      	adds	r7, #8
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	200001a0 	.word	0x200001a0

0800d2b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	6039      	str	r1, [r7, #0]
 800d2be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d2c0:	79fb      	ldrb	r3, [r7, #7]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d105      	bne.n	800d2d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d2c6:	683a      	ldr	r2, [r7, #0]
 800d2c8:	4907      	ldr	r1, [pc, #28]	; (800d2e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d2ca:	4808      	ldr	r0, [pc, #32]	; (800d2ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800d2cc:	f7ff fdb4 	bl	800ce38 <USBD_GetString>
 800d2d0:	e004      	b.n	800d2dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d2d2:	683a      	ldr	r2, [r7, #0]
 800d2d4:	4904      	ldr	r1, [pc, #16]	; (800d2e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d2d6:	4805      	ldr	r0, [pc, #20]	; (800d2ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800d2d8:	f7ff fdae 	bl	800ce38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2dc:	4b02      	ldr	r3, [pc, #8]	; (800d2e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3708      	adds	r7, #8
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	20001acc 	.word	0x20001acc
 800d2ec:	08012ae8 	.word	0x08012ae8

0800d2f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	6039      	str	r1, [r7, #0]
 800d2fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d2fc:	79fb      	ldrb	r3, [r7, #7]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d105      	bne.n	800d30e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d302:	683a      	ldr	r2, [r7, #0]
 800d304:	4907      	ldr	r1, [pc, #28]	; (800d324 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d306:	4808      	ldr	r0, [pc, #32]	; (800d328 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d308:	f7ff fd96 	bl	800ce38 <USBD_GetString>
 800d30c:	e004      	b.n	800d318 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d30e:	683a      	ldr	r2, [r7, #0]
 800d310:	4904      	ldr	r1, [pc, #16]	; (800d324 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d312:	4805      	ldr	r0, [pc, #20]	; (800d328 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d314:	f7ff fd90 	bl	800ce38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d318:	4b02      	ldr	r3, [pc, #8]	; (800d324 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3708      	adds	r7, #8
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	20001acc 	.word	0x20001acc
 800d328:	08012af4 	.word	0x08012af4

0800d32c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d332:	4b0f      	ldr	r3, [pc, #60]	; (800d370 <Get_SerialNum+0x44>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d338:	4b0e      	ldr	r3, [pc, #56]	; (800d374 <Get_SerialNum+0x48>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d33e:	4b0e      	ldr	r3, [pc, #56]	; (800d378 <Get_SerialNum+0x4c>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4413      	add	r3, r2
 800d34a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d009      	beq.n	800d366 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d352:	2208      	movs	r2, #8
 800d354:	4909      	ldr	r1, [pc, #36]	; (800d37c <Get_SerialNum+0x50>)
 800d356:	68f8      	ldr	r0, [r7, #12]
 800d358:	f000 f814 	bl	800d384 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d35c:	2204      	movs	r2, #4
 800d35e:	4908      	ldr	r1, [pc, #32]	; (800d380 <Get_SerialNum+0x54>)
 800d360:	68b8      	ldr	r0, [r7, #8]
 800d362:	f000 f80f 	bl	800d384 <IntToUnicode>
  }
}
 800d366:	bf00      	nop
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	1fff7a10 	.word	0x1fff7a10
 800d374:	1fff7a14 	.word	0x1fff7a14
 800d378:	1fff7a18 	.word	0x1fff7a18
 800d37c:	200001a2 	.word	0x200001a2
 800d380:	200001b2 	.word	0x200001b2

0800d384 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d384:	b480      	push	{r7}
 800d386:	b087      	sub	sp, #28
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	4613      	mov	r3, r2
 800d390:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d392:	2300      	movs	r3, #0
 800d394:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d396:	2300      	movs	r3, #0
 800d398:	75fb      	strb	r3, [r7, #23]
 800d39a:	e027      	b.n	800d3ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	0f1b      	lsrs	r3, r3, #28
 800d3a0:	2b09      	cmp	r3, #9
 800d3a2:	d80b      	bhi.n	800d3bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	0f1b      	lsrs	r3, r3, #28
 800d3a8:	b2da      	uxtb	r2, r3
 800d3aa:	7dfb      	ldrb	r3, [r7, #23]
 800d3ac:	005b      	lsls	r3, r3, #1
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	440b      	add	r3, r1
 800d3b4:	3230      	adds	r2, #48	; 0x30
 800d3b6:	b2d2      	uxtb	r2, r2
 800d3b8:	701a      	strb	r2, [r3, #0]
 800d3ba:	e00a      	b.n	800d3d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	0f1b      	lsrs	r3, r3, #28
 800d3c0:	b2da      	uxtb	r2, r3
 800d3c2:	7dfb      	ldrb	r3, [r7, #23]
 800d3c4:	005b      	lsls	r3, r3, #1
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	440b      	add	r3, r1
 800d3cc:	3237      	adds	r2, #55	; 0x37
 800d3ce:	b2d2      	uxtb	r2, r2
 800d3d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	011b      	lsls	r3, r3, #4
 800d3d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d3d8:	7dfb      	ldrb	r3, [r7, #23]
 800d3da:	005b      	lsls	r3, r3, #1
 800d3dc:	3301      	adds	r3, #1
 800d3de:	68ba      	ldr	r2, [r7, #8]
 800d3e0:	4413      	add	r3, r2
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d3e6:	7dfb      	ldrb	r3, [r7, #23]
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	75fb      	strb	r3, [r7, #23]
 800d3ec:	7dfa      	ldrb	r2, [r7, #23]
 800d3ee:	79fb      	ldrb	r3, [r7, #7]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d3d3      	bcc.n	800d39c <IntToUnicode+0x18>
  }
}
 800d3f4:	bf00      	nop
 800d3f6:	bf00      	nop
 800d3f8:	371c      	adds	r7, #28
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bc80      	pop	{r7}
 800d3fe:	4770      	bx	lr

0800d400 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b08a      	sub	sp, #40	; 0x28
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d408:	f107 0314 	add.w	r3, r7, #20
 800d40c:	2200      	movs	r2, #0
 800d40e:	601a      	str	r2, [r3, #0]
 800d410:	605a      	str	r2, [r3, #4]
 800d412:	609a      	str	r2, [r3, #8]
 800d414:	60da      	str	r2, [r3, #12]
 800d416:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d420:	d13a      	bne.n	800d498 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d422:	2300      	movs	r3, #0
 800d424:	613b      	str	r3, [r7, #16]
 800d426:	4b1e      	ldr	r3, [pc, #120]	; (800d4a0 <HAL_PCD_MspInit+0xa0>)
 800d428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d42a:	4a1d      	ldr	r2, [pc, #116]	; (800d4a0 <HAL_PCD_MspInit+0xa0>)
 800d42c:	f043 0301 	orr.w	r3, r3, #1
 800d430:	6313      	str	r3, [r2, #48]	; 0x30
 800d432:	4b1b      	ldr	r3, [pc, #108]	; (800d4a0 <HAL_PCD_MspInit+0xa0>)
 800d434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d436:	f003 0301 	and.w	r3, r3, #1
 800d43a:	613b      	str	r3, [r7, #16]
 800d43c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d43e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d444:	2302      	movs	r3, #2
 800d446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d448:	2300      	movs	r3, #0
 800d44a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d44c:	2303      	movs	r3, #3
 800d44e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d450:	230a      	movs	r3, #10
 800d452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d454:	f107 0314 	add.w	r3, r7, #20
 800d458:	4619      	mov	r1, r3
 800d45a:	4812      	ldr	r0, [pc, #72]	; (800d4a4 <HAL_PCD_MspInit+0xa4>)
 800d45c:	f7f9 f966 	bl	800672c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d460:	4b0f      	ldr	r3, [pc, #60]	; (800d4a0 <HAL_PCD_MspInit+0xa0>)
 800d462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d464:	4a0e      	ldr	r2, [pc, #56]	; (800d4a0 <HAL_PCD_MspInit+0xa0>)
 800d466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d46a:	6353      	str	r3, [r2, #52]	; 0x34
 800d46c:	2300      	movs	r3, #0
 800d46e:	60fb      	str	r3, [r7, #12]
 800d470:	4b0b      	ldr	r3, [pc, #44]	; (800d4a0 <HAL_PCD_MspInit+0xa0>)
 800d472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d474:	4a0a      	ldr	r2, [pc, #40]	; (800d4a0 <HAL_PCD_MspInit+0xa0>)
 800d476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d47a:	6453      	str	r3, [r2, #68]	; 0x44
 800d47c:	4b08      	ldr	r3, [pc, #32]	; (800d4a0 <HAL_PCD_MspInit+0xa0>)
 800d47e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d484:	60fb      	str	r3, [r7, #12]
 800d486:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d488:	2200      	movs	r2, #0
 800d48a:	2100      	movs	r1, #0
 800d48c:	2043      	movs	r0, #67	; 0x43
 800d48e:	f7f9 f908 	bl	80066a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d492:	2043      	movs	r0, #67	; 0x43
 800d494:	f7f9 f921 	bl	80066da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d498:	bf00      	nop
 800d49a:	3728      	adds	r7, #40	; 0x28
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	40023800 	.word	0x40023800
 800d4a4:	40020000 	.word	0x40020000

0800d4a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d4bc:	4619      	mov	r1, r3
 800d4be:	4610      	mov	r0, r2
 800d4c0:	f7fe fd51 	bl	800bf66 <USBD_LL_SetupStage>
}
 800d4c4:	bf00      	nop
 800d4c6:	3708      	adds	r7, #8
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800d4de:	78fa      	ldrb	r2, [r7, #3]
 800d4e0:	6879      	ldr	r1, [r7, #4]
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	00db      	lsls	r3, r3, #3
 800d4e6:	1a9b      	subs	r3, r3, r2
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	440b      	add	r3, r1
 800d4ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	78fb      	ldrb	r3, [r7, #3]
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	f7fe fd83 	bl	800c000 <USBD_LL_DataOutStage>
}
 800d4fa:	bf00      	nop
 800d4fc:	3708      	adds	r7, #8
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d502:	b580      	push	{r7, lr}
 800d504:	b082      	sub	sp, #8
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
 800d50a:	460b      	mov	r3, r1
 800d50c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800d514:	78fa      	ldrb	r2, [r7, #3]
 800d516:	6879      	ldr	r1, [r7, #4]
 800d518:	4613      	mov	r3, r2
 800d51a:	00db      	lsls	r3, r3, #3
 800d51c:	1a9b      	subs	r3, r3, r2
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	440b      	add	r3, r1
 800d522:	3348      	adds	r3, #72	; 0x48
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	78fb      	ldrb	r3, [r7, #3]
 800d528:	4619      	mov	r1, r3
 800d52a:	f7fe fdda 	bl	800c0e2 <USBD_LL_DataInStage>
}
 800d52e:	bf00      	nop
 800d530:	3708      	adds	r7, #8
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}

0800d536 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d536:	b580      	push	{r7, lr}
 800d538:	b082      	sub	sp, #8
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d544:	4618      	mov	r0, r3
 800d546:	f7fe feea 	bl	800c31e <USBD_LL_SOF>
}
 800d54a:	bf00      	nop
 800d54c:	3708      	adds	r7, #8
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}

0800d552 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d552:	b580      	push	{r7, lr}
 800d554:	b084      	sub	sp, #16
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d55a:	2301      	movs	r3, #1
 800d55c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d102      	bne.n	800d56c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d566:	2300      	movs	r3, #0
 800d568:	73fb      	strb	r3, [r7, #15]
 800d56a:	e008      	b.n	800d57e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	2b02      	cmp	r3, #2
 800d572:	d102      	bne.n	800d57a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d574:	2301      	movs	r3, #1
 800d576:	73fb      	strb	r3, [r7, #15]
 800d578:	e001      	b.n	800d57e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d57a:	f7f7 faf5 	bl	8004b68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d584:	7bfa      	ldrb	r2, [r7, #15]
 800d586:	4611      	mov	r1, r2
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fe fe90 	bl	800c2ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d594:	4618      	mov	r0, r3
 800d596:	f7fe fe49 	bl	800c22c <USBD_LL_Reset>
}
 800d59a:	bf00      	nop
 800d59c:	3710      	adds	r7, #16
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
	...

0800d5a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f7fe fe8a 	bl	800c2cc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	6812      	ldr	r2, [r2, #0]
 800d5c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d5ca:	f043 0301 	orr.w	r3, r3, #1
 800d5ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6a1b      	ldr	r3, [r3, #32]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d005      	beq.n	800d5e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d5d8:	4b04      	ldr	r3, [pc, #16]	; (800d5ec <HAL_PCD_SuspendCallback+0x48>)
 800d5da:	691b      	ldr	r3, [r3, #16]
 800d5dc:	4a03      	ldr	r2, [pc, #12]	; (800d5ec <HAL_PCD_SuspendCallback+0x48>)
 800d5de:	f043 0306 	orr.w	r3, r3, #6
 800d5e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d5e4:	bf00      	nop
 800d5e6:	3708      	adds	r7, #8
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	e000ed00 	.word	0xe000ed00

0800d5f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7fe fe78 	bl	800c2f4 <USBD_LL_Resume>
}
 800d604:	bf00      	nop
 800d606:	3708      	adds	r7, #8
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	460b      	mov	r3, r1
 800d616:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d61e:	78fa      	ldrb	r2, [r7, #3]
 800d620:	4611      	mov	r1, r2
 800d622:	4618      	mov	r0, r3
 800d624:	f7fe fea1 	bl	800c36a <USBD_LL_IsoOUTIncomplete>
}
 800d628:	bf00      	nop
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	460b      	mov	r3, r1
 800d63a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d642:	78fa      	ldrb	r2, [r7, #3]
 800d644:	4611      	mov	r1, r2
 800d646:	4618      	mov	r0, r3
 800d648:	f7fe fe83 	bl	800c352 <USBD_LL_IsoINIncomplete>
}
 800d64c:	bf00      	nop
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d662:	4618      	mov	r0, r3
 800d664:	f7fe fe8d 	bl	800c382 <USBD_LL_DevConnected>
}
 800d668:	bf00      	nop
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d67e:	4618      	mov	r0, r3
 800d680:	f7fe fe89 	bl	800c396 <USBD_LL_DevDisconnected>
}
 800d684:	bf00      	nop
 800d686:	3708      	adds	r7, #8
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d139      	bne.n	800d710 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d69c:	4a1f      	ldr	r2, [pc, #124]	; (800d71c <USBD_LL_Init+0x90>)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	4a1d      	ldr	r2, [pc, #116]	; (800d71c <USBD_LL_Init+0x90>)
 800d6a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d6ac:	4b1b      	ldr	r3, [pc, #108]	; (800d71c <USBD_LL_Init+0x90>)
 800d6ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d6b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d6b4:	4b19      	ldr	r3, [pc, #100]	; (800d71c <USBD_LL_Init+0x90>)
 800d6b6:	2204      	movs	r2, #4
 800d6b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d6ba:	4b18      	ldr	r3, [pc, #96]	; (800d71c <USBD_LL_Init+0x90>)
 800d6bc:	2202      	movs	r2, #2
 800d6be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d6c0:	4b16      	ldr	r3, [pc, #88]	; (800d71c <USBD_LL_Init+0x90>)
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d6c6:	4b15      	ldr	r3, [pc, #84]	; (800d71c <USBD_LL_Init+0x90>)
 800d6c8:	2202      	movs	r2, #2
 800d6ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d6cc:	4b13      	ldr	r3, [pc, #76]	; (800d71c <USBD_LL_Init+0x90>)
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d6d2:	4b12      	ldr	r3, [pc, #72]	; (800d71c <USBD_LL_Init+0x90>)
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d6d8:	4b10      	ldr	r3, [pc, #64]	; (800d71c <USBD_LL_Init+0x90>)
 800d6da:	2200      	movs	r2, #0
 800d6dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d6de:	4b0f      	ldr	r3, [pc, #60]	; (800d71c <USBD_LL_Init+0x90>)
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d6e4:	480d      	ldr	r0, [pc, #52]	; (800d71c <USBD_LL_Init+0x90>)
 800d6e6:	f7fa f9dd 	bl	8007aa4 <HAL_PCD_Init>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d001      	beq.n	800d6f4 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800d6f0:	f7f7 fa3a 	bl	8004b68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d6f4:	2180      	movs	r1, #128	; 0x80
 800d6f6:	4809      	ldr	r0, [pc, #36]	; (800d71c <USBD_LL_Init+0x90>)
 800d6f8:	f7fb fb1a 	bl	8008d30 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d6fc:	2240      	movs	r2, #64	; 0x40
 800d6fe:	2100      	movs	r1, #0
 800d700:	4806      	ldr	r0, [pc, #24]	; (800d71c <USBD_LL_Init+0x90>)
 800d702:	f7fb facf 	bl	8008ca4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d706:	2280      	movs	r2, #128	; 0x80
 800d708:	2101      	movs	r1, #1
 800d70a:	4804      	ldr	r0, [pc, #16]	; (800d71c <USBD_LL_Init+0x90>)
 800d70c:	f7fb faca 	bl	8008ca4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d710:	2300      	movs	r3, #0
}
 800d712:	4618      	mov	r0, r3
 800d714:	3708      	adds	r7, #8
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	20001ccc 	.word	0x20001ccc

0800d720 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d728:	2300      	movs	r3, #0
 800d72a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d72c:	2300      	movs	r3, #0
 800d72e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d736:	4618      	mov	r0, r3
 800d738:	f7fa fad1 	bl	8007cde <HAL_PCD_Start>
 800d73c:	4603      	mov	r3, r0
 800d73e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d740:	7bfb      	ldrb	r3, [r7, #15]
 800d742:	4618      	mov	r0, r3
 800d744:	f000 f92e 	bl	800d9a4 <USBD_Get_USB_Status>
 800d748:	4603      	mov	r3, r0
 800d74a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d74c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d756:	b580      	push	{r7, lr}
 800d758:	b084      	sub	sp, #16
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
 800d75e:	4608      	mov	r0, r1
 800d760:	4611      	mov	r1, r2
 800d762:	461a      	mov	r2, r3
 800d764:	4603      	mov	r3, r0
 800d766:	70fb      	strb	r3, [r7, #3]
 800d768:	460b      	mov	r3, r1
 800d76a:	70bb      	strb	r3, [r7, #2]
 800d76c:	4613      	mov	r3, r2
 800d76e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d770:	2300      	movs	r3, #0
 800d772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d774:	2300      	movs	r3, #0
 800d776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d77e:	78bb      	ldrb	r3, [r7, #2]
 800d780:	883a      	ldrh	r2, [r7, #0]
 800d782:	78f9      	ldrb	r1, [r7, #3]
 800d784:	f7fa fe96 	bl	80084b4 <HAL_PCD_EP_Open>
 800d788:	4603      	mov	r3, r0
 800d78a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d78c:	7bfb      	ldrb	r3, [r7, #15]
 800d78e:	4618      	mov	r0, r3
 800d790:	f000 f908 	bl	800d9a4 <USBD_Get_USB_Status>
 800d794:	4603      	mov	r3, r0
 800d796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d798:	7bbb      	ldrb	r3, [r7, #14]
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3710      	adds	r7, #16
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}

0800d7a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b084      	sub	sp, #16
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7bc:	78fa      	ldrb	r2, [r7, #3]
 800d7be:	4611      	mov	r1, r2
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7fa fedf 	bl	8008584 <HAL_PCD_EP_Close>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7ca:	7bfb      	ldrb	r3, [r7, #15]
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f000 f8e9 	bl	800d9a4 <USBD_Get_USB_Status>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7fa:	78fa      	ldrb	r2, [r7, #3]
 800d7fc:	4611      	mov	r1, r2
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7fa ffb6 	bl	8008770 <HAL_PCD_EP_SetStall>
 800d804:	4603      	mov	r3, r0
 800d806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d808:	7bfb      	ldrb	r3, [r7, #15]
 800d80a:	4618      	mov	r0, r3
 800d80c:	f000 f8ca 	bl	800d9a4 <USBD_Get_USB_Status>
 800d810:	4603      	mov	r3, r0
 800d812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d814:	7bbb      	ldrb	r3, [r7, #14]
}
 800d816:	4618      	mov	r0, r3
 800d818:	3710      	adds	r7, #16
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b084      	sub	sp, #16
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	460b      	mov	r3, r1
 800d828:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d82a:	2300      	movs	r3, #0
 800d82c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d82e:	2300      	movs	r3, #0
 800d830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d838:	78fa      	ldrb	r2, [r7, #3]
 800d83a:	4611      	mov	r1, r2
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7fa fffb 	bl	8008838 <HAL_PCD_EP_ClrStall>
 800d842:	4603      	mov	r3, r0
 800d844:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d846:	7bfb      	ldrb	r3, [r7, #15]
 800d848:	4618      	mov	r0, r3
 800d84a:	f000 f8ab 	bl	800d9a4 <USBD_Get_USB_Status>
 800d84e:	4603      	mov	r3, r0
 800d850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d852:	7bbb      	ldrb	r3, [r7, #14]
}
 800d854:	4618      	mov	r0, r3
 800d856:	3710      	adds	r7, #16
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b085      	sub	sp, #20
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	460b      	mov	r3, r1
 800d866:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d86e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d874:	2b00      	cmp	r3, #0
 800d876:	da0b      	bge.n	800d890 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d878:	78fb      	ldrb	r3, [r7, #3]
 800d87a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d87e:	68f9      	ldr	r1, [r7, #12]
 800d880:	4613      	mov	r3, r2
 800d882:	00db      	lsls	r3, r3, #3
 800d884:	1a9b      	subs	r3, r3, r2
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	440b      	add	r3, r1
 800d88a:	333e      	adds	r3, #62	; 0x3e
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	e00b      	b.n	800d8a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d890:	78fb      	ldrb	r3, [r7, #3]
 800d892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d896:	68f9      	ldr	r1, [r7, #12]
 800d898:	4613      	mov	r3, r2
 800d89a:	00db      	lsls	r3, r3, #3
 800d89c:	1a9b      	subs	r3, r3, r2
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	440b      	add	r3, r1
 800d8a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d8a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3714      	adds	r7, #20
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bc80      	pop	{r7}
 800d8b0:	4770      	bx	lr

0800d8b2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	b084      	sub	sp, #16
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d8cc:	78fa      	ldrb	r2, [r7, #3]
 800d8ce:	4611      	mov	r1, r2
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fa fdca 	bl	800846a <HAL_PCD_SetAddress>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8da:	7bfb      	ldrb	r3, [r7, #15]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f000 f861 	bl	800d9a4 <USBD_Get_USB_Status>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3710      	adds	r7, #16
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b086      	sub	sp, #24
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	607a      	str	r2, [r7, #4]
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	72fb      	strb	r3, [r7, #11]
 800d900:	4613      	mov	r3, r2
 800d902:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d904:	2300      	movs	r3, #0
 800d906:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d908:	2300      	movs	r3, #0
 800d90a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d912:	893b      	ldrh	r3, [r7, #8]
 800d914:	7af9      	ldrb	r1, [r7, #11]
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	f7fa fee0 	bl	80086dc <HAL_PCD_EP_Transmit>
 800d91c:	4603      	mov	r3, r0
 800d91e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d920:	7dfb      	ldrb	r3, [r7, #23]
 800d922:	4618      	mov	r0, r3
 800d924:	f000 f83e 	bl	800d9a4 <USBD_Get_USB_Status>
 800d928:	4603      	mov	r3, r0
 800d92a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d92c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3718      	adds	r7, #24
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b086      	sub	sp, #24
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	60f8      	str	r0, [r7, #12]
 800d93e:	607a      	str	r2, [r7, #4]
 800d940:	461a      	mov	r2, r3
 800d942:	460b      	mov	r3, r1
 800d944:	72fb      	strb	r3, [r7, #11]
 800d946:	4613      	mov	r3, r2
 800d948:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d94a:	2300      	movs	r3, #0
 800d94c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d94e:	2300      	movs	r3, #0
 800d950:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d958:	893b      	ldrh	r3, [r7, #8]
 800d95a:	7af9      	ldrb	r1, [r7, #11]
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	f7fa fe5b 	bl	8008618 <HAL_PCD_EP_Receive>
 800d962:	4603      	mov	r3, r0
 800d964:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d966:	7dfb      	ldrb	r3, [r7, #23]
 800d968:	4618      	mov	r0, r3
 800d96a:	f000 f81b 	bl	800d9a4 <USBD_Get_USB_Status>
 800d96e:	4603      	mov	r3, r0
 800d970:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d972:	7dbb      	ldrb	r3, [r7, #22]
}
 800d974:	4618      	mov	r0, r3
 800d976:	3718      	adds	r7, #24
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	460b      	mov	r3, r1
 800d986:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d98e:	78fa      	ldrb	r2, [r7, #3]
 800d990:	4611      	mov	r1, r2
 800d992:	4618      	mov	r0, r3
 800d994:	f7fa fe8b 	bl	80086ae <HAL_PCD_EP_GetRxCount>
 800d998:	4603      	mov	r3, r0
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
	...

0800d9a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d9b2:	79fb      	ldrb	r3, [r7, #7]
 800d9b4:	2b03      	cmp	r3, #3
 800d9b6:	d817      	bhi.n	800d9e8 <USBD_Get_USB_Status+0x44>
 800d9b8:	a201      	add	r2, pc, #4	; (adr r2, 800d9c0 <USBD_Get_USB_Status+0x1c>)
 800d9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9be:	bf00      	nop
 800d9c0:	0800d9d1 	.word	0x0800d9d1
 800d9c4:	0800d9d7 	.word	0x0800d9d7
 800d9c8:	0800d9dd 	.word	0x0800d9dd
 800d9cc:	0800d9e3 	.word	0x0800d9e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800d9d4:	e00b      	b.n	800d9ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d9d6:	2302      	movs	r3, #2
 800d9d8:	73fb      	strb	r3, [r7, #15]
    break;
 800d9da:	e008      	b.n	800d9ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	73fb      	strb	r3, [r7, #15]
    break;
 800d9e0:	e005      	b.n	800d9ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d9e2:	2302      	movs	r3, #2
 800d9e4:	73fb      	strb	r3, [r7, #15]
    break;
 800d9e6:	e002      	b.n	800d9ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d9e8:	2302      	movs	r3, #2
 800d9ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d9ec:	bf00      	nop
  }
  return usb_status;
 800d9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3714      	adds	r7, #20
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bc80      	pop	{r7}
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop

0800d9fc <cos>:
 800d9fc:	b530      	push	{r4, r5, lr}
 800d9fe:	4a1e      	ldr	r2, [pc, #120]	; (800da78 <cos+0x7c>)
 800da00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da04:	4293      	cmp	r3, r2
 800da06:	b087      	sub	sp, #28
 800da08:	dc04      	bgt.n	800da14 <cos+0x18>
 800da0a:	2200      	movs	r2, #0
 800da0c:	2300      	movs	r3, #0
 800da0e:	f000 ff23 	bl	800e858 <__kernel_cos>
 800da12:	e006      	b.n	800da22 <cos+0x26>
 800da14:	4a19      	ldr	r2, [pc, #100]	; (800da7c <cos+0x80>)
 800da16:	4293      	cmp	r3, r2
 800da18:	dd05      	ble.n	800da26 <cos+0x2a>
 800da1a:	4602      	mov	r2, r0
 800da1c:	460b      	mov	r3, r1
 800da1e:	f7f2 fbdf 	bl	80001e0 <__aeabi_dsub>
 800da22:	b007      	add	sp, #28
 800da24:	bd30      	pop	{r4, r5, pc}
 800da26:	aa02      	add	r2, sp, #8
 800da28:	f000 fa32 	bl	800de90 <__ieee754_rem_pio2>
 800da2c:	f000 0003 	and.w	r0, r0, #3
 800da30:	2801      	cmp	r0, #1
 800da32:	d007      	beq.n	800da44 <cos+0x48>
 800da34:	2802      	cmp	r0, #2
 800da36:	d00f      	beq.n	800da58 <cos+0x5c>
 800da38:	b9a8      	cbnz	r0, 800da66 <cos+0x6a>
 800da3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da42:	e7e4      	b.n	800da0e <cos+0x12>
 800da44:	9000      	str	r0, [sp, #0]
 800da46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da4e:	f001 fb0b 	bl	800f068 <__kernel_sin>
 800da52:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800da56:	e7e4      	b.n	800da22 <cos+0x26>
 800da58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da60:	f000 fefa 	bl	800e858 <__kernel_cos>
 800da64:	e7f5      	b.n	800da52 <cos+0x56>
 800da66:	2301      	movs	r3, #1
 800da68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da6c:	9300      	str	r3, [sp, #0]
 800da6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da72:	f001 faf9 	bl	800f068 <__kernel_sin>
 800da76:	e7d4      	b.n	800da22 <cos+0x26>
 800da78:	3fe921fb 	.word	0x3fe921fb
 800da7c:	7fefffff 	.word	0x7fefffff

0800da80 <sin>:
 800da80:	b530      	push	{r4, r5, lr}
 800da82:	4a20      	ldr	r2, [pc, #128]	; (800db04 <sin+0x84>)
 800da84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da88:	4293      	cmp	r3, r2
 800da8a:	b087      	sub	sp, #28
 800da8c:	dc06      	bgt.n	800da9c <sin+0x1c>
 800da8e:	2300      	movs	r3, #0
 800da90:	2200      	movs	r2, #0
 800da92:	9300      	str	r3, [sp, #0]
 800da94:	2300      	movs	r3, #0
 800da96:	f001 fae7 	bl	800f068 <__kernel_sin>
 800da9a:	e006      	b.n	800daaa <sin+0x2a>
 800da9c:	4a1a      	ldr	r2, [pc, #104]	; (800db08 <sin+0x88>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	dd05      	ble.n	800daae <sin+0x2e>
 800daa2:	4602      	mov	r2, r0
 800daa4:	460b      	mov	r3, r1
 800daa6:	f7f2 fb9b 	bl	80001e0 <__aeabi_dsub>
 800daaa:	b007      	add	sp, #28
 800daac:	bd30      	pop	{r4, r5, pc}
 800daae:	aa02      	add	r2, sp, #8
 800dab0:	f000 f9ee 	bl	800de90 <__ieee754_rem_pio2>
 800dab4:	f000 0003 	and.w	r0, r0, #3
 800dab8:	2801      	cmp	r0, #1
 800daba:	d009      	beq.n	800dad0 <sin+0x50>
 800dabc:	2802      	cmp	r0, #2
 800dabe:	d00e      	beq.n	800dade <sin+0x5e>
 800dac0:	b9c0      	cbnz	r0, 800daf4 <sin+0x74>
 800dac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dac6:	2301      	movs	r3, #1
 800dac8:	9300      	str	r3, [sp, #0]
 800daca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dace:	e7e2      	b.n	800da96 <sin+0x16>
 800dad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dad8:	f000 febe 	bl	800e858 <__kernel_cos>
 800dadc:	e7e5      	b.n	800daaa <sin+0x2a>
 800dade:	2301      	movs	r3, #1
 800dae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dae4:	9300      	str	r3, [sp, #0]
 800dae6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800daea:	f001 fabd 	bl	800f068 <__kernel_sin>
 800daee:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800daf2:	e7da      	b.n	800daaa <sin+0x2a>
 800daf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800daf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dafc:	f000 feac 	bl	800e858 <__kernel_cos>
 800db00:	e7f5      	b.n	800daee <sin+0x6e>
 800db02:	bf00      	nop
 800db04:	3fe921fb 	.word	0x3fe921fb
 800db08:	7fefffff 	.word	0x7fefffff

0800db0c <atanf>:
 800db0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db10:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800db14:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800db18:	4604      	mov	r4, r0
 800db1a:	4680      	mov	r8, r0
 800db1c:	db0e      	blt.n	800db3c <atanf+0x30>
 800db1e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800db22:	dd04      	ble.n	800db2e <atanf+0x22>
 800db24:	4601      	mov	r1, r0
 800db26:	f7f3 f861 	bl	8000bec <__addsf3>
 800db2a:	4604      	mov	r4, r0
 800db2c:	e003      	b.n	800db36 <atanf+0x2a>
 800db2e:	2800      	cmp	r0, #0
 800db30:	f300 80ce 	bgt.w	800dcd0 <atanf+0x1c4>
 800db34:	4c67      	ldr	r4, [pc, #412]	; (800dcd4 <atanf+0x1c8>)
 800db36:	4620      	mov	r0, r4
 800db38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db3c:	4b66      	ldr	r3, [pc, #408]	; (800dcd8 <atanf+0x1cc>)
 800db3e:	429d      	cmp	r5, r3
 800db40:	dc0e      	bgt.n	800db60 <atanf+0x54>
 800db42:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800db46:	da08      	bge.n	800db5a <atanf+0x4e>
 800db48:	4964      	ldr	r1, [pc, #400]	; (800dcdc <atanf+0x1d0>)
 800db4a:	f7f3 f84f 	bl	8000bec <__addsf3>
 800db4e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800db52:	f7f3 fb0f 	bl	8001174 <__aeabi_fcmpgt>
 800db56:	2800      	cmp	r0, #0
 800db58:	d1ed      	bne.n	800db36 <atanf+0x2a>
 800db5a:	f04f 36ff 	mov.w	r6, #4294967295
 800db5e:	e01c      	b.n	800db9a <atanf+0x8e>
 800db60:	f000 f914 	bl	800dd8c <fabsf>
 800db64:	4b5e      	ldr	r3, [pc, #376]	; (800dce0 <atanf+0x1d4>)
 800db66:	4604      	mov	r4, r0
 800db68:	429d      	cmp	r5, r3
 800db6a:	dc7c      	bgt.n	800dc66 <atanf+0x15a>
 800db6c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800db70:	429d      	cmp	r5, r3
 800db72:	dc67      	bgt.n	800dc44 <atanf+0x138>
 800db74:	4601      	mov	r1, r0
 800db76:	f7f3 f839 	bl	8000bec <__addsf3>
 800db7a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800db7e:	f7f3 f833 	bl	8000be8 <__aeabi_fsub>
 800db82:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800db86:	4605      	mov	r5, r0
 800db88:	4620      	mov	r0, r4
 800db8a:	f7f3 f82f 	bl	8000bec <__addsf3>
 800db8e:	4601      	mov	r1, r0
 800db90:	4628      	mov	r0, r5
 800db92:	f7f3 f9e7 	bl	8000f64 <__aeabi_fdiv>
 800db96:	2600      	movs	r6, #0
 800db98:	4604      	mov	r4, r0
 800db9a:	4621      	mov	r1, r4
 800db9c:	4620      	mov	r0, r4
 800db9e:	f7f3 f92d 	bl	8000dfc <__aeabi_fmul>
 800dba2:	4601      	mov	r1, r0
 800dba4:	4607      	mov	r7, r0
 800dba6:	f7f3 f929 	bl	8000dfc <__aeabi_fmul>
 800dbaa:	4605      	mov	r5, r0
 800dbac:	494d      	ldr	r1, [pc, #308]	; (800dce4 <atanf+0x1d8>)
 800dbae:	f7f3 f925 	bl	8000dfc <__aeabi_fmul>
 800dbb2:	494d      	ldr	r1, [pc, #308]	; (800dce8 <atanf+0x1dc>)
 800dbb4:	f7f3 f81a 	bl	8000bec <__addsf3>
 800dbb8:	4629      	mov	r1, r5
 800dbba:	f7f3 f91f 	bl	8000dfc <__aeabi_fmul>
 800dbbe:	494b      	ldr	r1, [pc, #300]	; (800dcec <atanf+0x1e0>)
 800dbc0:	f7f3 f814 	bl	8000bec <__addsf3>
 800dbc4:	4629      	mov	r1, r5
 800dbc6:	f7f3 f919 	bl	8000dfc <__aeabi_fmul>
 800dbca:	4949      	ldr	r1, [pc, #292]	; (800dcf0 <atanf+0x1e4>)
 800dbcc:	f7f3 f80e 	bl	8000bec <__addsf3>
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	f7f3 f913 	bl	8000dfc <__aeabi_fmul>
 800dbd6:	4947      	ldr	r1, [pc, #284]	; (800dcf4 <atanf+0x1e8>)
 800dbd8:	f7f3 f808 	bl	8000bec <__addsf3>
 800dbdc:	4629      	mov	r1, r5
 800dbde:	f7f3 f90d 	bl	8000dfc <__aeabi_fmul>
 800dbe2:	4945      	ldr	r1, [pc, #276]	; (800dcf8 <atanf+0x1ec>)
 800dbe4:	f7f3 f802 	bl	8000bec <__addsf3>
 800dbe8:	4639      	mov	r1, r7
 800dbea:	f7f3 f907 	bl	8000dfc <__aeabi_fmul>
 800dbee:	4943      	ldr	r1, [pc, #268]	; (800dcfc <atanf+0x1f0>)
 800dbf0:	4607      	mov	r7, r0
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	f7f3 f902 	bl	8000dfc <__aeabi_fmul>
 800dbf8:	4941      	ldr	r1, [pc, #260]	; (800dd00 <atanf+0x1f4>)
 800dbfa:	f7f2 fff5 	bl	8000be8 <__aeabi_fsub>
 800dbfe:	4629      	mov	r1, r5
 800dc00:	f7f3 f8fc 	bl	8000dfc <__aeabi_fmul>
 800dc04:	493f      	ldr	r1, [pc, #252]	; (800dd04 <atanf+0x1f8>)
 800dc06:	f7f2 ffef 	bl	8000be8 <__aeabi_fsub>
 800dc0a:	4629      	mov	r1, r5
 800dc0c:	f7f3 f8f6 	bl	8000dfc <__aeabi_fmul>
 800dc10:	493d      	ldr	r1, [pc, #244]	; (800dd08 <atanf+0x1fc>)
 800dc12:	f7f2 ffe9 	bl	8000be8 <__aeabi_fsub>
 800dc16:	4629      	mov	r1, r5
 800dc18:	f7f3 f8f0 	bl	8000dfc <__aeabi_fmul>
 800dc1c:	493b      	ldr	r1, [pc, #236]	; (800dd0c <atanf+0x200>)
 800dc1e:	f7f2 ffe3 	bl	8000be8 <__aeabi_fsub>
 800dc22:	4629      	mov	r1, r5
 800dc24:	f7f3 f8ea 	bl	8000dfc <__aeabi_fmul>
 800dc28:	4601      	mov	r1, r0
 800dc2a:	4638      	mov	r0, r7
 800dc2c:	f7f2 ffde 	bl	8000bec <__addsf3>
 800dc30:	4621      	mov	r1, r4
 800dc32:	f7f3 f8e3 	bl	8000dfc <__aeabi_fmul>
 800dc36:	1c73      	adds	r3, r6, #1
 800dc38:	4601      	mov	r1, r0
 800dc3a:	d133      	bne.n	800dca4 <atanf+0x198>
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	f7f2 ffd3 	bl	8000be8 <__aeabi_fsub>
 800dc42:	e772      	b.n	800db2a <atanf+0x1e>
 800dc44:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dc48:	f7f2 ffce 	bl	8000be8 <__aeabi_fsub>
 800dc4c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dc50:	4605      	mov	r5, r0
 800dc52:	4620      	mov	r0, r4
 800dc54:	f7f2 ffca 	bl	8000bec <__addsf3>
 800dc58:	4601      	mov	r1, r0
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	f7f3 f982 	bl	8000f64 <__aeabi_fdiv>
 800dc60:	2601      	movs	r6, #1
 800dc62:	4604      	mov	r4, r0
 800dc64:	e799      	b.n	800db9a <atanf+0x8e>
 800dc66:	4b2a      	ldr	r3, [pc, #168]	; (800dd10 <atanf+0x204>)
 800dc68:	429d      	cmp	r5, r3
 800dc6a:	dc14      	bgt.n	800dc96 <atanf+0x18a>
 800dc6c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800dc70:	f7f2 ffba 	bl	8000be8 <__aeabi_fsub>
 800dc74:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800dc78:	4605      	mov	r5, r0
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	f7f3 f8be 	bl	8000dfc <__aeabi_fmul>
 800dc80:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dc84:	f7f2 ffb2 	bl	8000bec <__addsf3>
 800dc88:	4601      	mov	r1, r0
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	f7f3 f96a 	bl	8000f64 <__aeabi_fdiv>
 800dc90:	2602      	movs	r6, #2
 800dc92:	4604      	mov	r4, r0
 800dc94:	e781      	b.n	800db9a <atanf+0x8e>
 800dc96:	4601      	mov	r1, r0
 800dc98:	481e      	ldr	r0, [pc, #120]	; (800dd14 <atanf+0x208>)
 800dc9a:	f7f3 f963 	bl	8000f64 <__aeabi_fdiv>
 800dc9e:	2603      	movs	r6, #3
 800dca0:	4604      	mov	r4, r0
 800dca2:	e77a      	b.n	800db9a <atanf+0x8e>
 800dca4:	4b1c      	ldr	r3, [pc, #112]	; (800dd18 <atanf+0x20c>)
 800dca6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800dcaa:	f7f2 ff9d 	bl	8000be8 <__aeabi_fsub>
 800dcae:	4621      	mov	r1, r4
 800dcb0:	f7f2 ff9a 	bl	8000be8 <__aeabi_fsub>
 800dcb4:	4b19      	ldr	r3, [pc, #100]	; (800dd1c <atanf+0x210>)
 800dcb6:	4601      	mov	r1, r0
 800dcb8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dcbc:	f7f2 ff94 	bl	8000be8 <__aeabi_fsub>
 800dcc0:	f1b8 0f00 	cmp.w	r8, #0
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	f6bf af36 	bge.w	800db36 <atanf+0x2a>
 800dcca:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800dcce:	e72c      	b.n	800db2a <atanf+0x1e>
 800dcd0:	4c13      	ldr	r4, [pc, #76]	; (800dd20 <atanf+0x214>)
 800dcd2:	e730      	b.n	800db36 <atanf+0x2a>
 800dcd4:	bfc90fdb 	.word	0xbfc90fdb
 800dcd8:	3edfffff 	.word	0x3edfffff
 800dcdc:	7149f2ca 	.word	0x7149f2ca
 800dce0:	3f97ffff 	.word	0x3f97ffff
 800dce4:	3c8569d7 	.word	0x3c8569d7
 800dce8:	3d4bda59 	.word	0x3d4bda59
 800dcec:	3d886b35 	.word	0x3d886b35
 800dcf0:	3dba2e6e 	.word	0x3dba2e6e
 800dcf4:	3e124925 	.word	0x3e124925
 800dcf8:	3eaaaaab 	.word	0x3eaaaaab
 800dcfc:	bd15a221 	.word	0xbd15a221
 800dd00:	3d6ef16b 	.word	0x3d6ef16b
 800dd04:	3d9d8795 	.word	0x3d9d8795
 800dd08:	3de38e38 	.word	0x3de38e38
 800dd0c:	3e4ccccd 	.word	0x3e4ccccd
 800dd10:	401bffff 	.word	0x401bffff
 800dd14:	bf800000 	.word	0xbf800000
 800dd18:	080133a8 	.word	0x080133a8
 800dd1c:	08013398 	.word	0x08013398
 800dd20:	3fc90fdb 	.word	0x3fc90fdb

0800dd24 <cosf>:
 800dd24:	b507      	push	{r0, r1, r2, lr}
 800dd26:	4a18      	ldr	r2, [pc, #96]	; (800dd88 <cosf+0x64>)
 800dd28:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	4601      	mov	r1, r0
 800dd30:	dc03      	bgt.n	800dd3a <cosf+0x16>
 800dd32:	2100      	movs	r1, #0
 800dd34:	f001 fa4e 	bl	800f1d4 <__kernel_cosf>
 800dd38:	e004      	b.n	800dd44 <cosf+0x20>
 800dd3a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dd3e:	db04      	blt.n	800dd4a <cosf+0x26>
 800dd40:	f7f2 ff52 	bl	8000be8 <__aeabi_fsub>
 800dd44:	b003      	add	sp, #12
 800dd46:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd4a:	4669      	mov	r1, sp
 800dd4c:	f000 fbd4 	bl	800e4f8 <__ieee754_rem_pio2f>
 800dd50:	f000 0203 	and.w	r2, r0, #3
 800dd54:	2a01      	cmp	r2, #1
 800dd56:	d005      	beq.n	800dd64 <cosf+0x40>
 800dd58:	2a02      	cmp	r2, #2
 800dd5a:	d00a      	beq.n	800dd72 <cosf+0x4e>
 800dd5c:	b972      	cbnz	r2, 800dd7c <cosf+0x58>
 800dd5e:	9901      	ldr	r1, [sp, #4]
 800dd60:	9800      	ldr	r0, [sp, #0]
 800dd62:	e7e7      	b.n	800dd34 <cosf+0x10>
 800dd64:	9901      	ldr	r1, [sp, #4]
 800dd66:	9800      	ldr	r0, [sp, #0]
 800dd68:	f001 fd6a 	bl	800f840 <__kernel_sinf>
 800dd6c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800dd70:	e7e8      	b.n	800dd44 <cosf+0x20>
 800dd72:	9901      	ldr	r1, [sp, #4]
 800dd74:	9800      	ldr	r0, [sp, #0]
 800dd76:	f001 fa2d 	bl	800f1d4 <__kernel_cosf>
 800dd7a:	e7f7      	b.n	800dd6c <cosf+0x48>
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	9901      	ldr	r1, [sp, #4]
 800dd80:	9800      	ldr	r0, [sp, #0]
 800dd82:	f001 fd5d 	bl	800f840 <__kernel_sinf>
 800dd86:	e7dd      	b.n	800dd44 <cosf+0x20>
 800dd88:	3f490fd8 	.word	0x3f490fd8

0800dd8c <fabsf>:
 800dd8c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800dd90:	4770      	bx	lr
	...

0800dd94 <sinf>:
 800dd94:	b507      	push	{r0, r1, r2, lr}
 800dd96:	4a19      	ldr	r2, [pc, #100]	; (800ddfc <sinf+0x68>)
 800dd98:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	4601      	mov	r1, r0
 800dda0:	dc04      	bgt.n	800ddac <sinf+0x18>
 800dda2:	2200      	movs	r2, #0
 800dda4:	2100      	movs	r1, #0
 800dda6:	f001 fd4b 	bl	800f840 <__kernel_sinf>
 800ddaa:	e004      	b.n	800ddb6 <sinf+0x22>
 800ddac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ddb0:	db04      	blt.n	800ddbc <sinf+0x28>
 800ddb2:	f7f2 ff19 	bl	8000be8 <__aeabi_fsub>
 800ddb6:	b003      	add	sp, #12
 800ddb8:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddbc:	4669      	mov	r1, sp
 800ddbe:	f000 fb9b 	bl	800e4f8 <__ieee754_rem_pio2f>
 800ddc2:	f000 0003 	and.w	r0, r0, #3
 800ddc6:	2801      	cmp	r0, #1
 800ddc8:	d006      	beq.n	800ddd8 <sinf+0x44>
 800ddca:	2802      	cmp	r0, #2
 800ddcc:	d009      	beq.n	800dde2 <sinf+0x4e>
 800ddce:	b980      	cbnz	r0, 800ddf2 <sinf+0x5e>
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	9901      	ldr	r1, [sp, #4]
 800ddd4:	9800      	ldr	r0, [sp, #0]
 800ddd6:	e7e6      	b.n	800dda6 <sinf+0x12>
 800ddd8:	9901      	ldr	r1, [sp, #4]
 800ddda:	9800      	ldr	r0, [sp, #0]
 800dddc:	f001 f9fa 	bl	800f1d4 <__kernel_cosf>
 800dde0:	e7e9      	b.n	800ddb6 <sinf+0x22>
 800dde2:	2201      	movs	r2, #1
 800dde4:	9901      	ldr	r1, [sp, #4]
 800dde6:	9800      	ldr	r0, [sp, #0]
 800dde8:	f001 fd2a 	bl	800f840 <__kernel_sinf>
 800ddec:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ddf0:	e7e1      	b.n	800ddb6 <sinf+0x22>
 800ddf2:	9901      	ldr	r1, [sp, #4]
 800ddf4:	9800      	ldr	r0, [sp, #0]
 800ddf6:	f001 f9ed 	bl	800f1d4 <__kernel_cosf>
 800ddfa:	e7f7      	b.n	800ddec <sinf+0x58>
 800ddfc:	3f490fd8 	.word	0x3f490fd8

0800de00 <asinf>:
 800de00:	b538      	push	{r3, r4, r5, lr}
 800de02:	4604      	mov	r4, r0
 800de04:	f000 fa34 	bl	800e270 <__ieee754_asinf>
 800de08:	4b0e      	ldr	r3, [pc, #56]	; (800de44 <asinf+0x44>)
 800de0a:	4605      	mov	r5, r0
 800de0c:	f993 3000 	ldrsb.w	r3, [r3]
 800de10:	3301      	adds	r3, #1
 800de12:	d015      	beq.n	800de40 <asinf+0x40>
 800de14:	4621      	mov	r1, r4
 800de16:	4620      	mov	r0, r4
 800de18:	f7f3 f9b6 	bl	8001188 <__aeabi_fcmpun>
 800de1c:	b980      	cbnz	r0, 800de40 <asinf+0x40>
 800de1e:	4620      	mov	r0, r4
 800de20:	f7ff ffb4 	bl	800dd8c <fabsf>
 800de24:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800de28:	f7f3 f9a4 	bl	8001174 <__aeabi_fcmpgt>
 800de2c:	b140      	cbz	r0, 800de40 <asinf+0x40>
 800de2e:	f001 ff1b 	bl	800fc68 <__errno>
 800de32:	2321      	movs	r3, #33	; 0x21
 800de34:	6003      	str	r3, [r0, #0]
 800de36:	4804      	ldr	r0, [pc, #16]	; (800de48 <asinf+0x48>)
 800de38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de3c:	f001 bec4 	b.w	800fbc8 <nanf>
 800de40:	4628      	mov	r0, r5
 800de42:	bd38      	pop	{r3, r4, r5, pc}
 800de44:	200001ba 	.word	0x200001ba
 800de48:	08013bd8 	.word	0x08013bd8

0800de4c <sqrtf>:
 800de4c:	b538      	push	{r3, r4, r5, lr}
 800de4e:	4605      	mov	r5, r0
 800de50:	f000 fcb0 	bl	800e7b4 <__ieee754_sqrtf>
 800de54:	4b0d      	ldr	r3, [pc, #52]	; (800de8c <sqrtf+0x40>)
 800de56:	4604      	mov	r4, r0
 800de58:	f993 3000 	ldrsb.w	r3, [r3]
 800de5c:	3301      	adds	r3, #1
 800de5e:	d012      	beq.n	800de86 <sqrtf+0x3a>
 800de60:	4629      	mov	r1, r5
 800de62:	4628      	mov	r0, r5
 800de64:	f7f3 f990 	bl	8001188 <__aeabi_fcmpun>
 800de68:	b968      	cbnz	r0, 800de86 <sqrtf+0x3a>
 800de6a:	2100      	movs	r1, #0
 800de6c:	4628      	mov	r0, r5
 800de6e:	f7f3 f963 	bl	8001138 <__aeabi_fcmplt>
 800de72:	b140      	cbz	r0, 800de86 <sqrtf+0x3a>
 800de74:	f001 fef8 	bl	800fc68 <__errno>
 800de78:	2321      	movs	r3, #33	; 0x21
 800de7a:	2100      	movs	r1, #0
 800de7c:	6003      	str	r3, [r0, #0]
 800de7e:	4608      	mov	r0, r1
 800de80:	f7f3 f870 	bl	8000f64 <__aeabi_fdiv>
 800de84:	4604      	mov	r4, r0
 800de86:	4620      	mov	r0, r4
 800de88:	bd38      	pop	{r3, r4, r5, pc}
 800de8a:	bf00      	nop
 800de8c:	200001ba 	.word	0x200001ba

0800de90 <__ieee754_rem_pio2>:
 800de90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de94:	4614      	mov	r4, r2
 800de96:	4ac4      	ldr	r2, [pc, #784]	; (800e1a8 <__ieee754_rem_pio2+0x318>)
 800de98:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800de9c:	b08d      	sub	sp, #52	; 0x34
 800de9e:	4592      	cmp	sl, r2
 800dea0:	9104      	str	r1, [sp, #16]
 800dea2:	dc07      	bgt.n	800deb4 <__ieee754_rem_pio2+0x24>
 800dea4:	2200      	movs	r2, #0
 800dea6:	2300      	movs	r3, #0
 800dea8:	e9c4 0100 	strd	r0, r1, [r4]
 800deac:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800deb0:	2500      	movs	r5, #0
 800deb2:	e024      	b.n	800defe <__ieee754_rem_pio2+0x6e>
 800deb4:	4abd      	ldr	r2, [pc, #756]	; (800e1ac <__ieee754_rem_pio2+0x31c>)
 800deb6:	4592      	cmp	sl, r2
 800deb8:	dc72      	bgt.n	800dfa0 <__ieee754_rem_pio2+0x110>
 800deba:	9b04      	ldr	r3, [sp, #16]
 800debc:	4dbc      	ldr	r5, [pc, #752]	; (800e1b0 <__ieee754_rem_pio2+0x320>)
 800debe:	2b00      	cmp	r3, #0
 800dec0:	a3ab      	add	r3, pc, #684	; (adr r3, 800e170 <__ieee754_rem_pio2+0x2e0>)
 800dec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec6:	dd36      	ble.n	800df36 <__ieee754_rem_pio2+0xa6>
 800dec8:	f7f2 f98a 	bl	80001e0 <__aeabi_dsub>
 800decc:	45aa      	cmp	sl, r5
 800dece:	4606      	mov	r6, r0
 800ded0:	460f      	mov	r7, r1
 800ded2:	d018      	beq.n	800df06 <__ieee754_rem_pio2+0x76>
 800ded4:	a3a8      	add	r3, pc, #672	; (adr r3, 800e178 <__ieee754_rem_pio2+0x2e8>)
 800ded6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deda:	f7f2 f981 	bl	80001e0 <__aeabi_dsub>
 800dede:	4602      	mov	r2, r0
 800dee0:	460b      	mov	r3, r1
 800dee2:	4630      	mov	r0, r6
 800dee4:	e9c4 2300 	strd	r2, r3, [r4]
 800dee8:	4639      	mov	r1, r7
 800deea:	f7f2 f979 	bl	80001e0 <__aeabi_dsub>
 800deee:	a3a2      	add	r3, pc, #648	; (adr r3, 800e178 <__ieee754_rem_pio2+0x2e8>)
 800def0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def4:	f7f2 f974 	bl	80001e0 <__aeabi_dsub>
 800def8:	2501      	movs	r5, #1
 800defa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800defe:	4628      	mov	r0, r5
 800df00:	b00d      	add	sp, #52	; 0x34
 800df02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df06:	a39e      	add	r3, pc, #632	; (adr r3, 800e180 <__ieee754_rem_pio2+0x2f0>)
 800df08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0c:	f7f2 f968 	bl	80001e0 <__aeabi_dsub>
 800df10:	a39d      	add	r3, pc, #628	; (adr r3, 800e188 <__ieee754_rem_pio2+0x2f8>)
 800df12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df16:	4606      	mov	r6, r0
 800df18:	460f      	mov	r7, r1
 800df1a:	f7f2 f961 	bl	80001e0 <__aeabi_dsub>
 800df1e:	4602      	mov	r2, r0
 800df20:	460b      	mov	r3, r1
 800df22:	4630      	mov	r0, r6
 800df24:	e9c4 2300 	strd	r2, r3, [r4]
 800df28:	4639      	mov	r1, r7
 800df2a:	f7f2 f959 	bl	80001e0 <__aeabi_dsub>
 800df2e:	a396      	add	r3, pc, #600	; (adr r3, 800e188 <__ieee754_rem_pio2+0x2f8>)
 800df30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df34:	e7de      	b.n	800def4 <__ieee754_rem_pio2+0x64>
 800df36:	f7f2 f955 	bl	80001e4 <__adddf3>
 800df3a:	45aa      	cmp	sl, r5
 800df3c:	4606      	mov	r6, r0
 800df3e:	460f      	mov	r7, r1
 800df40:	d016      	beq.n	800df70 <__ieee754_rem_pio2+0xe0>
 800df42:	a38d      	add	r3, pc, #564	; (adr r3, 800e178 <__ieee754_rem_pio2+0x2e8>)
 800df44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df48:	f7f2 f94c 	bl	80001e4 <__adddf3>
 800df4c:	4602      	mov	r2, r0
 800df4e:	460b      	mov	r3, r1
 800df50:	4630      	mov	r0, r6
 800df52:	e9c4 2300 	strd	r2, r3, [r4]
 800df56:	4639      	mov	r1, r7
 800df58:	f7f2 f942 	bl	80001e0 <__aeabi_dsub>
 800df5c:	a386      	add	r3, pc, #536	; (adr r3, 800e178 <__ieee754_rem_pio2+0x2e8>)
 800df5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df62:	f7f2 f93f 	bl	80001e4 <__adddf3>
 800df66:	f04f 35ff 	mov.w	r5, #4294967295
 800df6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800df6e:	e7c6      	b.n	800defe <__ieee754_rem_pio2+0x6e>
 800df70:	a383      	add	r3, pc, #524	; (adr r3, 800e180 <__ieee754_rem_pio2+0x2f0>)
 800df72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df76:	f7f2 f935 	bl	80001e4 <__adddf3>
 800df7a:	a383      	add	r3, pc, #524	; (adr r3, 800e188 <__ieee754_rem_pio2+0x2f8>)
 800df7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df80:	4606      	mov	r6, r0
 800df82:	460f      	mov	r7, r1
 800df84:	f7f2 f92e 	bl	80001e4 <__adddf3>
 800df88:	4602      	mov	r2, r0
 800df8a:	460b      	mov	r3, r1
 800df8c:	4630      	mov	r0, r6
 800df8e:	e9c4 2300 	strd	r2, r3, [r4]
 800df92:	4639      	mov	r1, r7
 800df94:	f7f2 f924 	bl	80001e0 <__aeabi_dsub>
 800df98:	a37b      	add	r3, pc, #492	; (adr r3, 800e188 <__ieee754_rem_pio2+0x2f8>)
 800df9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9e:	e7e0      	b.n	800df62 <__ieee754_rem_pio2+0xd2>
 800dfa0:	4a84      	ldr	r2, [pc, #528]	; (800e1b4 <__ieee754_rem_pio2+0x324>)
 800dfa2:	4592      	cmp	sl, r2
 800dfa4:	f300 80d5 	bgt.w	800e152 <__ieee754_rem_pio2+0x2c2>
 800dfa8:	f001 fcc0 	bl	800f92c <fabs>
 800dfac:	a378      	add	r3, pc, #480	; (adr r3, 800e190 <__ieee754_rem_pio2+0x300>)
 800dfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb2:	4606      	mov	r6, r0
 800dfb4:	460f      	mov	r7, r1
 800dfb6:	f7f2 facb 	bl	8000550 <__aeabi_dmul>
 800dfba:	2200      	movs	r2, #0
 800dfbc:	4b7e      	ldr	r3, [pc, #504]	; (800e1b8 <__ieee754_rem_pio2+0x328>)
 800dfbe:	f7f2 f911 	bl	80001e4 <__adddf3>
 800dfc2:	f7f2 fd75 	bl	8000ab0 <__aeabi_d2iz>
 800dfc6:	4605      	mov	r5, r0
 800dfc8:	f7f2 fa58 	bl	800047c <__aeabi_i2d>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	460b      	mov	r3, r1
 800dfd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dfd4:	a366      	add	r3, pc, #408	; (adr r3, 800e170 <__ieee754_rem_pio2+0x2e0>)
 800dfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfda:	f7f2 fab9 	bl	8000550 <__aeabi_dmul>
 800dfde:	4602      	mov	r2, r0
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	4639      	mov	r1, r7
 800dfe6:	f7f2 f8fb 	bl	80001e0 <__aeabi_dsub>
 800dfea:	a363      	add	r3, pc, #396	; (adr r3, 800e178 <__ieee754_rem_pio2+0x2e8>)
 800dfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff0:	4680      	mov	r8, r0
 800dff2:	4689      	mov	r9, r1
 800dff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dff8:	f7f2 faaa 	bl	8000550 <__aeabi_dmul>
 800dffc:	2d1f      	cmp	r5, #31
 800dffe:	4606      	mov	r6, r0
 800e000:	460f      	mov	r7, r1
 800e002:	dc0e      	bgt.n	800e022 <__ieee754_rem_pio2+0x192>
 800e004:	4b6d      	ldr	r3, [pc, #436]	; (800e1bc <__ieee754_rem_pio2+0x32c>)
 800e006:	1e6a      	subs	r2, r5, #1
 800e008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e00c:	4553      	cmp	r3, sl
 800e00e:	d008      	beq.n	800e022 <__ieee754_rem_pio2+0x192>
 800e010:	4632      	mov	r2, r6
 800e012:	463b      	mov	r3, r7
 800e014:	4640      	mov	r0, r8
 800e016:	4649      	mov	r1, r9
 800e018:	f7f2 f8e2 	bl	80001e0 <__aeabi_dsub>
 800e01c:	e9c4 0100 	strd	r0, r1, [r4]
 800e020:	e013      	b.n	800e04a <__ieee754_rem_pio2+0x1ba>
 800e022:	463b      	mov	r3, r7
 800e024:	4632      	mov	r2, r6
 800e026:	4640      	mov	r0, r8
 800e028:	4649      	mov	r1, r9
 800e02a:	f7f2 f8d9 	bl	80001e0 <__aeabi_dsub>
 800e02e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800e032:	9305      	str	r3, [sp, #20]
 800e034:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e038:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800e03c:	f1ba 0f10 	cmp.w	sl, #16
 800e040:	dc1f      	bgt.n	800e082 <__ieee754_rem_pio2+0x1f2>
 800e042:	4602      	mov	r2, r0
 800e044:	460b      	mov	r3, r1
 800e046:	e9c4 2300 	strd	r2, r3, [r4]
 800e04a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800e04e:	4640      	mov	r0, r8
 800e050:	4653      	mov	r3, sl
 800e052:	4649      	mov	r1, r9
 800e054:	f7f2 f8c4 	bl	80001e0 <__aeabi_dsub>
 800e058:	4632      	mov	r2, r6
 800e05a:	463b      	mov	r3, r7
 800e05c:	f7f2 f8c0 	bl	80001e0 <__aeabi_dsub>
 800e060:	460b      	mov	r3, r1
 800e062:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e066:	9904      	ldr	r1, [sp, #16]
 800e068:	4602      	mov	r2, r0
 800e06a:	2900      	cmp	r1, #0
 800e06c:	f6bf af47 	bge.w	800defe <__ieee754_rem_pio2+0x6e>
 800e070:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800e074:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e078:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e07c:	60e3      	str	r3, [r4, #12]
 800e07e:	426d      	negs	r5, r5
 800e080:	e73d      	b.n	800defe <__ieee754_rem_pio2+0x6e>
 800e082:	a33f      	add	r3, pc, #252	; (adr r3, 800e180 <__ieee754_rem_pio2+0x2f0>)
 800e084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e08c:	f7f2 fa60 	bl	8000550 <__aeabi_dmul>
 800e090:	4606      	mov	r6, r0
 800e092:	460f      	mov	r7, r1
 800e094:	4602      	mov	r2, r0
 800e096:	460b      	mov	r3, r1
 800e098:	4640      	mov	r0, r8
 800e09a:	4649      	mov	r1, r9
 800e09c:	f7f2 f8a0 	bl	80001e0 <__aeabi_dsub>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	4682      	mov	sl, r0
 800e0a6:	468b      	mov	fp, r1
 800e0a8:	4640      	mov	r0, r8
 800e0aa:	4649      	mov	r1, r9
 800e0ac:	f7f2 f898 	bl	80001e0 <__aeabi_dsub>
 800e0b0:	4632      	mov	r2, r6
 800e0b2:	463b      	mov	r3, r7
 800e0b4:	f7f2 f894 	bl	80001e0 <__aeabi_dsub>
 800e0b8:	a333      	add	r3, pc, #204	; (adr r3, 800e188 <__ieee754_rem_pio2+0x2f8>)
 800e0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0be:	4606      	mov	r6, r0
 800e0c0:	460f      	mov	r7, r1
 800e0c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0c6:	f7f2 fa43 	bl	8000550 <__aeabi_dmul>
 800e0ca:	4632      	mov	r2, r6
 800e0cc:	463b      	mov	r3, r7
 800e0ce:	f7f2 f887 	bl	80001e0 <__aeabi_dsub>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	4606      	mov	r6, r0
 800e0d8:	460f      	mov	r7, r1
 800e0da:	4650      	mov	r0, sl
 800e0dc:	4659      	mov	r1, fp
 800e0de:	f7f2 f87f 	bl	80001e0 <__aeabi_dsub>
 800e0e2:	9a05      	ldr	r2, [sp, #20]
 800e0e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e0e8:	1ad3      	subs	r3, r2, r3
 800e0ea:	2b31      	cmp	r3, #49	; 0x31
 800e0ec:	dc06      	bgt.n	800e0fc <__ieee754_rem_pio2+0x26c>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	46d0      	mov	r8, sl
 800e0f4:	46d9      	mov	r9, fp
 800e0f6:	e9c4 2300 	strd	r2, r3, [r4]
 800e0fa:	e7a6      	b.n	800e04a <__ieee754_rem_pio2+0x1ba>
 800e0fc:	a326      	add	r3, pc, #152	; (adr r3, 800e198 <__ieee754_rem_pio2+0x308>)
 800e0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e106:	f7f2 fa23 	bl	8000550 <__aeabi_dmul>
 800e10a:	4606      	mov	r6, r0
 800e10c:	460f      	mov	r7, r1
 800e10e:	4602      	mov	r2, r0
 800e110:	460b      	mov	r3, r1
 800e112:	4650      	mov	r0, sl
 800e114:	4659      	mov	r1, fp
 800e116:	f7f2 f863 	bl	80001e0 <__aeabi_dsub>
 800e11a:	4602      	mov	r2, r0
 800e11c:	460b      	mov	r3, r1
 800e11e:	4680      	mov	r8, r0
 800e120:	4689      	mov	r9, r1
 800e122:	4650      	mov	r0, sl
 800e124:	4659      	mov	r1, fp
 800e126:	f7f2 f85b 	bl	80001e0 <__aeabi_dsub>
 800e12a:	4632      	mov	r2, r6
 800e12c:	463b      	mov	r3, r7
 800e12e:	f7f2 f857 	bl	80001e0 <__aeabi_dsub>
 800e132:	a31b      	add	r3, pc, #108	; (adr r3, 800e1a0 <__ieee754_rem_pio2+0x310>)
 800e134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e138:	4606      	mov	r6, r0
 800e13a:	460f      	mov	r7, r1
 800e13c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e140:	f7f2 fa06 	bl	8000550 <__aeabi_dmul>
 800e144:	4632      	mov	r2, r6
 800e146:	463b      	mov	r3, r7
 800e148:	f7f2 f84a 	bl	80001e0 <__aeabi_dsub>
 800e14c:	4606      	mov	r6, r0
 800e14e:	460f      	mov	r7, r1
 800e150:	e75e      	b.n	800e010 <__ieee754_rem_pio2+0x180>
 800e152:	4a1b      	ldr	r2, [pc, #108]	; (800e1c0 <__ieee754_rem_pio2+0x330>)
 800e154:	4592      	cmp	sl, r2
 800e156:	dd35      	ble.n	800e1c4 <__ieee754_rem_pio2+0x334>
 800e158:	4602      	mov	r2, r0
 800e15a:	460b      	mov	r3, r1
 800e15c:	f7f2 f840 	bl	80001e0 <__aeabi_dsub>
 800e160:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e164:	e9c4 0100 	strd	r0, r1, [r4]
 800e168:	e6a2      	b.n	800deb0 <__ieee754_rem_pio2+0x20>
 800e16a:	bf00      	nop
 800e16c:	f3af 8000 	nop.w
 800e170:	54400000 	.word	0x54400000
 800e174:	3ff921fb 	.word	0x3ff921fb
 800e178:	1a626331 	.word	0x1a626331
 800e17c:	3dd0b461 	.word	0x3dd0b461
 800e180:	1a600000 	.word	0x1a600000
 800e184:	3dd0b461 	.word	0x3dd0b461
 800e188:	2e037073 	.word	0x2e037073
 800e18c:	3ba3198a 	.word	0x3ba3198a
 800e190:	6dc9c883 	.word	0x6dc9c883
 800e194:	3fe45f30 	.word	0x3fe45f30
 800e198:	2e000000 	.word	0x2e000000
 800e19c:	3ba3198a 	.word	0x3ba3198a
 800e1a0:	252049c1 	.word	0x252049c1
 800e1a4:	397b839a 	.word	0x397b839a
 800e1a8:	3fe921fb 	.word	0x3fe921fb
 800e1ac:	4002d97b 	.word	0x4002d97b
 800e1b0:	3ff921fb 	.word	0x3ff921fb
 800e1b4:	413921fb 	.word	0x413921fb
 800e1b8:	3fe00000 	.word	0x3fe00000
 800e1bc:	080133b8 	.word	0x080133b8
 800e1c0:	7fefffff 	.word	0x7fefffff
 800e1c4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800e1c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800e1cc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800e1d0:	460f      	mov	r7, r1
 800e1d2:	4606      	mov	r6, r0
 800e1d4:	f7f2 fc6c 	bl	8000ab0 <__aeabi_d2iz>
 800e1d8:	f7f2 f950 	bl	800047c <__aeabi_i2d>
 800e1dc:	4602      	mov	r2, r0
 800e1de:	460b      	mov	r3, r1
 800e1e0:	4630      	mov	r0, r6
 800e1e2:	4639      	mov	r1, r7
 800e1e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e1e8:	f7f1 fffa 	bl	80001e0 <__aeabi_dsub>
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	4b1e      	ldr	r3, [pc, #120]	; (800e268 <__ieee754_rem_pio2+0x3d8>)
 800e1f0:	f7f2 f9ae 	bl	8000550 <__aeabi_dmul>
 800e1f4:	460f      	mov	r7, r1
 800e1f6:	4606      	mov	r6, r0
 800e1f8:	f7f2 fc5a 	bl	8000ab0 <__aeabi_d2iz>
 800e1fc:	f7f2 f93e 	bl	800047c <__aeabi_i2d>
 800e200:	4602      	mov	r2, r0
 800e202:	460b      	mov	r3, r1
 800e204:	4630      	mov	r0, r6
 800e206:	4639      	mov	r1, r7
 800e208:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e20c:	f7f1 ffe8 	bl	80001e0 <__aeabi_dsub>
 800e210:	2200      	movs	r2, #0
 800e212:	4b15      	ldr	r3, [pc, #84]	; (800e268 <__ieee754_rem_pio2+0x3d8>)
 800e214:	f7f2 f99c 	bl	8000550 <__aeabi_dmul>
 800e218:	f04f 0803 	mov.w	r8, #3
 800e21c:	2600      	movs	r6, #0
 800e21e:	2700      	movs	r7, #0
 800e220:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e224:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800e228:	4632      	mov	r2, r6
 800e22a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800e22e:	463b      	mov	r3, r7
 800e230:	46c2      	mov	sl, r8
 800e232:	f108 38ff 	add.w	r8, r8, #4294967295
 800e236:	f7f2 fbf3 	bl	8000a20 <__aeabi_dcmpeq>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	d1f4      	bne.n	800e228 <__ieee754_rem_pio2+0x398>
 800e23e:	4b0b      	ldr	r3, [pc, #44]	; (800e26c <__ieee754_rem_pio2+0x3dc>)
 800e240:	462a      	mov	r2, r5
 800e242:	9301      	str	r3, [sp, #4]
 800e244:	2302      	movs	r3, #2
 800e246:	4621      	mov	r1, r4
 800e248:	9300      	str	r3, [sp, #0]
 800e24a:	a806      	add	r0, sp, #24
 800e24c:	4653      	mov	r3, sl
 800e24e:	f000 fbc1 	bl	800e9d4 <__kernel_rem_pio2>
 800e252:	9b04      	ldr	r3, [sp, #16]
 800e254:	4605      	mov	r5, r0
 800e256:	2b00      	cmp	r3, #0
 800e258:	f6bf ae51 	bge.w	800defe <__ieee754_rem_pio2+0x6e>
 800e25c:	6863      	ldr	r3, [r4, #4]
 800e25e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e262:	6063      	str	r3, [r4, #4]
 800e264:	68e3      	ldr	r3, [r4, #12]
 800e266:	e707      	b.n	800e078 <__ieee754_rem_pio2+0x1e8>
 800e268:	41700000 	.word	0x41700000
 800e26c:	08013438 	.word	0x08013438

0800e270 <__ieee754_asinf>:
 800e270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e274:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800e278:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800e27c:	4604      	mov	r4, r0
 800e27e:	4605      	mov	r5, r0
 800e280:	d10c      	bne.n	800e29c <__ieee754_asinf+0x2c>
 800e282:	498d      	ldr	r1, [pc, #564]	; (800e4b8 <__ieee754_asinf+0x248>)
 800e284:	f7f2 fdba 	bl	8000dfc <__aeabi_fmul>
 800e288:	498c      	ldr	r1, [pc, #560]	; (800e4bc <__ieee754_asinf+0x24c>)
 800e28a:	4605      	mov	r5, r0
 800e28c:	4620      	mov	r0, r4
 800e28e:	f7f2 fdb5 	bl	8000dfc <__aeabi_fmul>
 800e292:	4601      	mov	r1, r0
 800e294:	4628      	mov	r0, r5
 800e296:	f7f2 fca9 	bl	8000bec <__addsf3>
 800e29a:	e006      	b.n	800e2aa <__ieee754_asinf+0x3a>
 800e29c:	dd07      	ble.n	800e2ae <__ieee754_asinf+0x3e>
 800e29e:	4601      	mov	r1, r0
 800e2a0:	f7f2 fca2 	bl	8000be8 <__aeabi_fsub>
 800e2a4:	4601      	mov	r1, r0
 800e2a6:	f7f2 fe5d 	bl	8000f64 <__aeabi_fdiv>
 800e2aa:	4604      	mov	r4, r0
 800e2ac:	e00e      	b.n	800e2cc <__ieee754_asinf+0x5c>
 800e2ae:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800e2b2:	da58      	bge.n	800e366 <__ieee754_asinf+0xf6>
 800e2b4:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800e2b8:	da0b      	bge.n	800e2d2 <__ieee754_asinf+0x62>
 800e2ba:	4981      	ldr	r1, [pc, #516]	; (800e4c0 <__ieee754_asinf+0x250>)
 800e2bc:	f7f2 fc96 	bl	8000bec <__addsf3>
 800e2c0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e2c4:	f7f2 ff56 	bl	8001174 <__aeabi_fcmpgt>
 800e2c8:	2800      	cmp	r0, #0
 800e2ca:	d04c      	beq.n	800e366 <__ieee754_asinf+0xf6>
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2d2:	4601      	mov	r1, r0
 800e2d4:	f7f2 fd92 	bl	8000dfc <__aeabi_fmul>
 800e2d8:	4605      	mov	r5, r0
 800e2da:	497a      	ldr	r1, [pc, #488]	; (800e4c4 <__ieee754_asinf+0x254>)
 800e2dc:	f7f2 fd8e 	bl	8000dfc <__aeabi_fmul>
 800e2e0:	4979      	ldr	r1, [pc, #484]	; (800e4c8 <__ieee754_asinf+0x258>)
 800e2e2:	f7f2 fc83 	bl	8000bec <__addsf3>
 800e2e6:	4629      	mov	r1, r5
 800e2e8:	f7f2 fd88 	bl	8000dfc <__aeabi_fmul>
 800e2ec:	4977      	ldr	r1, [pc, #476]	; (800e4cc <__ieee754_asinf+0x25c>)
 800e2ee:	f7f2 fc7b 	bl	8000be8 <__aeabi_fsub>
 800e2f2:	4629      	mov	r1, r5
 800e2f4:	f7f2 fd82 	bl	8000dfc <__aeabi_fmul>
 800e2f8:	4975      	ldr	r1, [pc, #468]	; (800e4d0 <__ieee754_asinf+0x260>)
 800e2fa:	f7f2 fc77 	bl	8000bec <__addsf3>
 800e2fe:	4629      	mov	r1, r5
 800e300:	f7f2 fd7c 	bl	8000dfc <__aeabi_fmul>
 800e304:	4973      	ldr	r1, [pc, #460]	; (800e4d4 <__ieee754_asinf+0x264>)
 800e306:	f7f2 fc6f 	bl	8000be8 <__aeabi_fsub>
 800e30a:	4629      	mov	r1, r5
 800e30c:	f7f2 fd76 	bl	8000dfc <__aeabi_fmul>
 800e310:	4971      	ldr	r1, [pc, #452]	; (800e4d8 <__ieee754_asinf+0x268>)
 800e312:	f7f2 fc6b 	bl	8000bec <__addsf3>
 800e316:	4629      	mov	r1, r5
 800e318:	f7f2 fd70 	bl	8000dfc <__aeabi_fmul>
 800e31c:	496f      	ldr	r1, [pc, #444]	; (800e4dc <__ieee754_asinf+0x26c>)
 800e31e:	4606      	mov	r6, r0
 800e320:	4628      	mov	r0, r5
 800e322:	f7f2 fd6b 	bl	8000dfc <__aeabi_fmul>
 800e326:	496e      	ldr	r1, [pc, #440]	; (800e4e0 <__ieee754_asinf+0x270>)
 800e328:	f7f2 fc5e 	bl	8000be8 <__aeabi_fsub>
 800e32c:	4629      	mov	r1, r5
 800e32e:	f7f2 fd65 	bl	8000dfc <__aeabi_fmul>
 800e332:	496c      	ldr	r1, [pc, #432]	; (800e4e4 <__ieee754_asinf+0x274>)
 800e334:	f7f2 fc5a 	bl	8000bec <__addsf3>
 800e338:	4629      	mov	r1, r5
 800e33a:	f7f2 fd5f 	bl	8000dfc <__aeabi_fmul>
 800e33e:	496a      	ldr	r1, [pc, #424]	; (800e4e8 <__ieee754_asinf+0x278>)
 800e340:	f7f2 fc52 	bl	8000be8 <__aeabi_fsub>
 800e344:	4629      	mov	r1, r5
 800e346:	f7f2 fd59 	bl	8000dfc <__aeabi_fmul>
 800e34a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e34e:	f7f2 fc4d 	bl	8000bec <__addsf3>
 800e352:	4601      	mov	r1, r0
 800e354:	4630      	mov	r0, r6
 800e356:	f7f2 fe05 	bl	8000f64 <__aeabi_fdiv>
 800e35a:	4621      	mov	r1, r4
 800e35c:	f7f2 fd4e 	bl	8000dfc <__aeabi_fmul>
 800e360:	4601      	mov	r1, r0
 800e362:	4620      	mov	r0, r4
 800e364:	e797      	b.n	800e296 <__ieee754_asinf+0x26>
 800e366:	4620      	mov	r0, r4
 800e368:	f7ff fd10 	bl	800dd8c <fabsf>
 800e36c:	4601      	mov	r1, r0
 800e36e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e372:	f7f2 fc39 	bl	8000be8 <__aeabi_fsub>
 800e376:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e37a:	f7f2 fd3f 	bl	8000dfc <__aeabi_fmul>
 800e37e:	4606      	mov	r6, r0
 800e380:	4950      	ldr	r1, [pc, #320]	; (800e4c4 <__ieee754_asinf+0x254>)
 800e382:	f7f2 fd3b 	bl	8000dfc <__aeabi_fmul>
 800e386:	4950      	ldr	r1, [pc, #320]	; (800e4c8 <__ieee754_asinf+0x258>)
 800e388:	f7f2 fc30 	bl	8000bec <__addsf3>
 800e38c:	4631      	mov	r1, r6
 800e38e:	f7f2 fd35 	bl	8000dfc <__aeabi_fmul>
 800e392:	494e      	ldr	r1, [pc, #312]	; (800e4cc <__ieee754_asinf+0x25c>)
 800e394:	f7f2 fc28 	bl	8000be8 <__aeabi_fsub>
 800e398:	4631      	mov	r1, r6
 800e39a:	f7f2 fd2f 	bl	8000dfc <__aeabi_fmul>
 800e39e:	494c      	ldr	r1, [pc, #304]	; (800e4d0 <__ieee754_asinf+0x260>)
 800e3a0:	f7f2 fc24 	bl	8000bec <__addsf3>
 800e3a4:	4631      	mov	r1, r6
 800e3a6:	f7f2 fd29 	bl	8000dfc <__aeabi_fmul>
 800e3aa:	494a      	ldr	r1, [pc, #296]	; (800e4d4 <__ieee754_asinf+0x264>)
 800e3ac:	f7f2 fc1c 	bl	8000be8 <__aeabi_fsub>
 800e3b0:	4631      	mov	r1, r6
 800e3b2:	f7f2 fd23 	bl	8000dfc <__aeabi_fmul>
 800e3b6:	4948      	ldr	r1, [pc, #288]	; (800e4d8 <__ieee754_asinf+0x268>)
 800e3b8:	f7f2 fc18 	bl	8000bec <__addsf3>
 800e3bc:	4631      	mov	r1, r6
 800e3be:	f7f2 fd1d 	bl	8000dfc <__aeabi_fmul>
 800e3c2:	4946      	ldr	r1, [pc, #280]	; (800e4dc <__ieee754_asinf+0x26c>)
 800e3c4:	4681      	mov	r9, r0
 800e3c6:	4630      	mov	r0, r6
 800e3c8:	f7f2 fd18 	bl	8000dfc <__aeabi_fmul>
 800e3cc:	4944      	ldr	r1, [pc, #272]	; (800e4e0 <__ieee754_asinf+0x270>)
 800e3ce:	f7f2 fc0b 	bl	8000be8 <__aeabi_fsub>
 800e3d2:	4631      	mov	r1, r6
 800e3d4:	f7f2 fd12 	bl	8000dfc <__aeabi_fmul>
 800e3d8:	4942      	ldr	r1, [pc, #264]	; (800e4e4 <__ieee754_asinf+0x274>)
 800e3da:	f7f2 fc07 	bl	8000bec <__addsf3>
 800e3de:	4631      	mov	r1, r6
 800e3e0:	f7f2 fd0c 	bl	8000dfc <__aeabi_fmul>
 800e3e4:	4940      	ldr	r1, [pc, #256]	; (800e4e8 <__ieee754_asinf+0x278>)
 800e3e6:	f7f2 fbff 	bl	8000be8 <__aeabi_fsub>
 800e3ea:	4631      	mov	r1, r6
 800e3ec:	f7f2 fd06 	bl	8000dfc <__aeabi_fmul>
 800e3f0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e3f4:	f7f2 fbfa 	bl	8000bec <__addsf3>
 800e3f8:	4682      	mov	sl, r0
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f000 f9da 	bl	800e7b4 <__ieee754_sqrtf>
 800e400:	4b3a      	ldr	r3, [pc, #232]	; (800e4ec <__ieee754_asinf+0x27c>)
 800e402:	4607      	mov	r7, r0
 800e404:	4598      	cmp	r8, r3
 800e406:	dd1a      	ble.n	800e43e <__ieee754_asinf+0x1ce>
 800e408:	4651      	mov	r1, sl
 800e40a:	4648      	mov	r0, r9
 800e40c:	f7f2 fdaa 	bl	8000f64 <__aeabi_fdiv>
 800e410:	4639      	mov	r1, r7
 800e412:	f7f2 fcf3 	bl	8000dfc <__aeabi_fmul>
 800e416:	4639      	mov	r1, r7
 800e418:	f7f2 fbe8 	bl	8000bec <__addsf3>
 800e41c:	4601      	mov	r1, r0
 800e41e:	f7f2 fbe5 	bl	8000bec <__addsf3>
 800e422:	4933      	ldr	r1, [pc, #204]	; (800e4f0 <__ieee754_asinf+0x280>)
 800e424:	f7f2 fbe2 	bl	8000bec <__addsf3>
 800e428:	4601      	mov	r1, r0
 800e42a:	4823      	ldr	r0, [pc, #140]	; (800e4b8 <__ieee754_asinf+0x248>)
 800e42c:	f7f2 fbdc 	bl	8000be8 <__aeabi_fsub>
 800e430:	2d00      	cmp	r5, #0
 800e432:	4604      	mov	r4, r0
 800e434:	f73f af4a 	bgt.w	800e2cc <__ieee754_asinf+0x5c>
 800e438:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e43c:	e735      	b.n	800e2aa <__ieee754_asinf+0x3a>
 800e43e:	4601      	mov	r1, r0
 800e440:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800e444:	f7f2 fbd2 	bl	8000bec <__addsf3>
 800e448:	4651      	mov	r1, sl
 800e44a:	4604      	mov	r4, r0
 800e44c:	4648      	mov	r0, r9
 800e44e:	f7f2 fd89 	bl	8000f64 <__aeabi_fdiv>
 800e452:	4601      	mov	r1, r0
 800e454:	4620      	mov	r0, r4
 800e456:	f7f2 fcd1 	bl	8000dfc <__aeabi_fmul>
 800e45a:	f028 080f 	bic.w	r8, r8, #15
 800e45e:	4681      	mov	r9, r0
 800e460:	4641      	mov	r1, r8
 800e462:	4640      	mov	r0, r8
 800e464:	f7f2 fcca 	bl	8000dfc <__aeabi_fmul>
 800e468:	4601      	mov	r1, r0
 800e46a:	4630      	mov	r0, r6
 800e46c:	f7f2 fbbc 	bl	8000be8 <__aeabi_fsub>
 800e470:	4641      	mov	r1, r8
 800e472:	4604      	mov	r4, r0
 800e474:	4638      	mov	r0, r7
 800e476:	f7f2 fbb9 	bl	8000bec <__addsf3>
 800e47a:	4601      	mov	r1, r0
 800e47c:	4620      	mov	r0, r4
 800e47e:	f7f2 fd71 	bl	8000f64 <__aeabi_fdiv>
 800e482:	4601      	mov	r1, r0
 800e484:	f7f2 fbb2 	bl	8000bec <__addsf3>
 800e488:	4601      	mov	r1, r0
 800e48a:	480c      	ldr	r0, [pc, #48]	; (800e4bc <__ieee754_asinf+0x24c>)
 800e48c:	f7f2 fbac 	bl	8000be8 <__aeabi_fsub>
 800e490:	4601      	mov	r1, r0
 800e492:	4648      	mov	r0, r9
 800e494:	f7f2 fba8 	bl	8000be8 <__aeabi_fsub>
 800e498:	4641      	mov	r1, r8
 800e49a:	4604      	mov	r4, r0
 800e49c:	4640      	mov	r0, r8
 800e49e:	f7f2 fba5 	bl	8000bec <__addsf3>
 800e4a2:	4601      	mov	r1, r0
 800e4a4:	4813      	ldr	r0, [pc, #76]	; (800e4f4 <__ieee754_asinf+0x284>)
 800e4a6:	f7f2 fb9f 	bl	8000be8 <__aeabi_fsub>
 800e4aa:	4601      	mov	r1, r0
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	f7f2 fb9b 	bl	8000be8 <__aeabi_fsub>
 800e4b2:	4601      	mov	r1, r0
 800e4b4:	480f      	ldr	r0, [pc, #60]	; (800e4f4 <__ieee754_asinf+0x284>)
 800e4b6:	e7b9      	b.n	800e42c <__ieee754_asinf+0x1bc>
 800e4b8:	3fc90fdb 	.word	0x3fc90fdb
 800e4bc:	b33bbd2e 	.word	0xb33bbd2e
 800e4c0:	7149f2ca 	.word	0x7149f2ca
 800e4c4:	3811ef08 	.word	0x3811ef08
 800e4c8:	3a4f7f04 	.word	0x3a4f7f04
 800e4cc:	3d241146 	.word	0x3d241146
 800e4d0:	3e4e0aa8 	.word	0x3e4e0aa8
 800e4d4:	3ea6b090 	.word	0x3ea6b090
 800e4d8:	3e2aaaab 	.word	0x3e2aaaab
 800e4dc:	3d9dc62e 	.word	0x3d9dc62e
 800e4e0:	3f303361 	.word	0x3f303361
 800e4e4:	4001572d 	.word	0x4001572d
 800e4e8:	4019d139 	.word	0x4019d139
 800e4ec:	3f799999 	.word	0x3f799999
 800e4f0:	333bbd2e 	.word	0x333bbd2e
 800e4f4:	3f490fdb 	.word	0x3f490fdb

0800e4f8 <__ieee754_rem_pio2f>:
 800e4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4fc:	4aa0      	ldr	r2, [pc, #640]	; (800e780 <__ieee754_rem_pio2f+0x288>)
 800e4fe:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800e502:	4296      	cmp	r6, r2
 800e504:	460c      	mov	r4, r1
 800e506:	4682      	mov	sl, r0
 800e508:	b087      	sub	sp, #28
 800e50a:	dc04      	bgt.n	800e516 <__ieee754_rem_pio2f+0x1e>
 800e50c:	2300      	movs	r3, #0
 800e50e:	6008      	str	r0, [r1, #0]
 800e510:	604b      	str	r3, [r1, #4]
 800e512:	2500      	movs	r5, #0
 800e514:	e01a      	b.n	800e54c <__ieee754_rem_pio2f+0x54>
 800e516:	4a9b      	ldr	r2, [pc, #620]	; (800e784 <__ieee754_rem_pio2f+0x28c>)
 800e518:	4296      	cmp	r6, r2
 800e51a:	dc4b      	bgt.n	800e5b4 <__ieee754_rem_pio2f+0xbc>
 800e51c:	2800      	cmp	r0, #0
 800e51e:	499a      	ldr	r1, [pc, #616]	; (800e788 <__ieee754_rem_pio2f+0x290>)
 800e520:	4f9a      	ldr	r7, [pc, #616]	; (800e78c <__ieee754_rem_pio2f+0x294>)
 800e522:	f026 060f 	bic.w	r6, r6, #15
 800e526:	dd23      	ble.n	800e570 <__ieee754_rem_pio2f+0x78>
 800e528:	f7f2 fb5e 	bl	8000be8 <__aeabi_fsub>
 800e52c:	42be      	cmp	r6, r7
 800e52e:	4605      	mov	r5, r0
 800e530:	d010      	beq.n	800e554 <__ieee754_rem_pio2f+0x5c>
 800e532:	4997      	ldr	r1, [pc, #604]	; (800e790 <__ieee754_rem_pio2f+0x298>)
 800e534:	f7f2 fb58 	bl	8000be8 <__aeabi_fsub>
 800e538:	4601      	mov	r1, r0
 800e53a:	6020      	str	r0, [r4, #0]
 800e53c:	4628      	mov	r0, r5
 800e53e:	f7f2 fb53 	bl	8000be8 <__aeabi_fsub>
 800e542:	4993      	ldr	r1, [pc, #588]	; (800e790 <__ieee754_rem_pio2f+0x298>)
 800e544:	f7f2 fb50 	bl	8000be8 <__aeabi_fsub>
 800e548:	2501      	movs	r5, #1
 800e54a:	6060      	str	r0, [r4, #4]
 800e54c:	4628      	mov	r0, r5
 800e54e:	b007      	add	sp, #28
 800e550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e554:	498f      	ldr	r1, [pc, #572]	; (800e794 <__ieee754_rem_pio2f+0x29c>)
 800e556:	f7f2 fb47 	bl	8000be8 <__aeabi_fsub>
 800e55a:	498f      	ldr	r1, [pc, #572]	; (800e798 <__ieee754_rem_pio2f+0x2a0>)
 800e55c:	4605      	mov	r5, r0
 800e55e:	f7f2 fb43 	bl	8000be8 <__aeabi_fsub>
 800e562:	4601      	mov	r1, r0
 800e564:	6020      	str	r0, [r4, #0]
 800e566:	4628      	mov	r0, r5
 800e568:	f7f2 fb3e 	bl	8000be8 <__aeabi_fsub>
 800e56c:	498a      	ldr	r1, [pc, #552]	; (800e798 <__ieee754_rem_pio2f+0x2a0>)
 800e56e:	e7e9      	b.n	800e544 <__ieee754_rem_pio2f+0x4c>
 800e570:	f7f2 fb3c 	bl	8000bec <__addsf3>
 800e574:	42be      	cmp	r6, r7
 800e576:	4605      	mov	r5, r0
 800e578:	d00e      	beq.n	800e598 <__ieee754_rem_pio2f+0xa0>
 800e57a:	4985      	ldr	r1, [pc, #532]	; (800e790 <__ieee754_rem_pio2f+0x298>)
 800e57c:	f7f2 fb36 	bl	8000bec <__addsf3>
 800e580:	4601      	mov	r1, r0
 800e582:	6020      	str	r0, [r4, #0]
 800e584:	4628      	mov	r0, r5
 800e586:	f7f2 fb2f 	bl	8000be8 <__aeabi_fsub>
 800e58a:	4981      	ldr	r1, [pc, #516]	; (800e790 <__ieee754_rem_pio2f+0x298>)
 800e58c:	f7f2 fb2e 	bl	8000bec <__addsf3>
 800e590:	f04f 35ff 	mov.w	r5, #4294967295
 800e594:	6060      	str	r0, [r4, #4]
 800e596:	e7d9      	b.n	800e54c <__ieee754_rem_pio2f+0x54>
 800e598:	497e      	ldr	r1, [pc, #504]	; (800e794 <__ieee754_rem_pio2f+0x29c>)
 800e59a:	f7f2 fb27 	bl	8000bec <__addsf3>
 800e59e:	497e      	ldr	r1, [pc, #504]	; (800e798 <__ieee754_rem_pio2f+0x2a0>)
 800e5a0:	4605      	mov	r5, r0
 800e5a2:	f7f2 fb23 	bl	8000bec <__addsf3>
 800e5a6:	4601      	mov	r1, r0
 800e5a8:	6020      	str	r0, [r4, #0]
 800e5aa:	4628      	mov	r0, r5
 800e5ac:	f7f2 fb1c 	bl	8000be8 <__aeabi_fsub>
 800e5b0:	4979      	ldr	r1, [pc, #484]	; (800e798 <__ieee754_rem_pio2f+0x2a0>)
 800e5b2:	e7eb      	b.n	800e58c <__ieee754_rem_pio2f+0x94>
 800e5b4:	4a79      	ldr	r2, [pc, #484]	; (800e79c <__ieee754_rem_pio2f+0x2a4>)
 800e5b6:	4296      	cmp	r6, r2
 800e5b8:	f300 8091 	bgt.w	800e6de <__ieee754_rem_pio2f+0x1e6>
 800e5bc:	f7ff fbe6 	bl	800dd8c <fabsf>
 800e5c0:	4977      	ldr	r1, [pc, #476]	; (800e7a0 <__ieee754_rem_pio2f+0x2a8>)
 800e5c2:	4607      	mov	r7, r0
 800e5c4:	f7f2 fc1a 	bl	8000dfc <__aeabi_fmul>
 800e5c8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e5cc:	f7f2 fb0e 	bl	8000bec <__addsf3>
 800e5d0:	f7f2 fdf0 	bl	80011b4 <__aeabi_f2iz>
 800e5d4:	4605      	mov	r5, r0
 800e5d6:	f7f2 fbbd 	bl	8000d54 <__aeabi_i2f>
 800e5da:	496b      	ldr	r1, [pc, #428]	; (800e788 <__ieee754_rem_pio2f+0x290>)
 800e5dc:	4681      	mov	r9, r0
 800e5de:	f7f2 fc0d 	bl	8000dfc <__aeabi_fmul>
 800e5e2:	4601      	mov	r1, r0
 800e5e4:	4638      	mov	r0, r7
 800e5e6:	f7f2 faff 	bl	8000be8 <__aeabi_fsub>
 800e5ea:	4969      	ldr	r1, [pc, #420]	; (800e790 <__ieee754_rem_pio2f+0x298>)
 800e5ec:	4680      	mov	r8, r0
 800e5ee:	4648      	mov	r0, r9
 800e5f0:	f7f2 fc04 	bl	8000dfc <__aeabi_fmul>
 800e5f4:	2d1f      	cmp	r5, #31
 800e5f6:	4607      	mov	r7, r0
 800e5f8:	dc0c      	bgt.n	800e614 <__ieee754_rem_pio2f+0x11c>
 800e5fa:	4a6a      	ldr	r2, [pc, #424]	; (800e7a4 <__ieee754_rem_pio2f+0x2ac>)
 800e5fc:	1e69      	subs	r1, r5, #1
 800e5fe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e602:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800e606:	4293      	cmp	r3, r2
 800e608:	d004      	beq.n	800e614 <__ieee754_rem_pio2f+0x11c>
 800e60a:	4639      	mov	r1, r7
 800e60c:	4640      	mov	r0, r8
 800e60e:	f7f2 faeb 	bl	8000be8 <__aeabi_fsub>
 800e612:	e00b      	b.n	800e62c <__ieee754_rem_pio2f+0x134>
 800e614:	4639      	mov	r1, r7
 800e616:	4640      	mov	r0, r8
 800e618:	f7f2 fae6 	bl	8000be8 <__aeabi_fsub>
 800e61c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e620:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800e624:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800e628:	2e08      	cmp	r6, #8
 800e62a:	dc01      	bgt.n	800e630 <__ieee754_rem_pio2f+0x138>
 800e62c:	6020      	str	r0, [r4, #0]
 800e62e:	e026      	b.n	800e67e <__ieee754_rem_pio2f+0x186>
 800e630:	4958      	ldr	r1, [pc, #352]	; (800e794 <__ieee754_rem_pio2f+0x29c>)
 800e632:	4648      	mov	r0, r9
 800e634:	f7f2 fbe2 	bl	8000dfc <__aeabi_fmul>
 800e638:	4607      	mov	r7, r0
 800e63a:	4601      	mov	r1, r0
 800e63c:	4640      	mov	r0, r8
 800e63e:	f7f2 fad3 	bl	8000be8 <__aeabi_fsub>
 800e642:	4601      	mov	r1, r0
 800e644:	4606      	mov	r6, r0
 800e646:	4640      	mov	r0, r8
 800e648:	f7f2 face 	bl	8000be8 <__aeabi_fsub>
 800e64c:	4639      	mov	r1, r7
 800e64e:	f7f2 facb 	bl	8000be8 <__aeabi_fsub>
 800e652:	4607      	mov	r7, r0
 800e654:	4950      	ldr	r1, [pc, #320]	; (800e798 <__ieee754_rem_pio2f+0x2a0>)
 800e656:	4648      	mov	r0, r9
 800e658:	f7f2 fbd0 	bl	8000dfc <__aeabi_fmul>
 800e65c:	4639      	mov	r1, r7
 800e65e:	f7f2 fac3 	bl	8000be8 <__aeabi_fsub>
 800e662:	4601      	mov	r1, r0
 800e664:	4607      	mov	r7, r0
 800e666:	4630      	mov	r0, r6
 800e668:	f7f2 fabe 	bl	8000be8 <__aeabi_fsub>
 800e66c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e670:	ebab 0b03 	sub.w	fp, fp, r3
 800e674:	f1bb 0f19 	cmp.w	fp, #25
 800e678:	dc16      	bgt.n	800e6a8 <__ieee754_rem_pio2f+0x1b0>
 800e67a:	46b0      	mov	r8, r6
 800e67c:	6020      	str	r0, [r4, #0]
 800e67e:	6826      	ldr	r6, [r4, #0]
 800e680:	4640      	mov	r0, r8
 800e682:	4631      	mov	r1, r6
 800e684:	f7f2 fab0 	bl	8000be8 <__aeabi_fsub>
 800e688:	4639      	mov	r1, r7
 800e68a:	f7f2 faad 	bl	8000be8 <__aeabi_fsub>
 800e68e:	f1ba 0f00 	cmp.w	sl, #0
 800e692:	6060      	str	r0, [r4, #4]
 800e694:	f6bf af5a 	bge.w	800e54c <__ieee754_rem_pio2f+0x54>
 800e698:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800e69c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e6a0:	6026      	str	r6, [r4, #0]
 800e6a2:	6060      	str	r0, [r4, #4]
 800e6a4:	426d      	negs	r5, r5
 800e6a6:	e751      	b.n	800e54c <__ieee754_rem_pio2f+0x54>
 800e6a8:	493f      	ldr	r1, [pc, #252]	; (800e7a8 <__ieee754_rem_pio2f+0x2b0>)
 800e6aa:	4648      	mov	r0, r9
 800e6ac:	f7f2 fba6 	bl	8000dfc <__aeabi_fmul>
 800e6b0:	4607      	mov	r7, r0
 800e6b2:	4601      	mov	r1, r0
 800e6b4:	4630      	mov	r0, r6
 800e6b6:	f7f2 fa97 	bl	8000be8 <__aeabi_fsub>
 800e6ba:	4601      	mov	r1, r0
 800e6bc:	4680      	mov	r8, r0
 800e6be:	4630      	mov	r0, r6
 800e6c0:	f7f2 fa92 	bl	8000be8 <__aeabi_fsub>
 800e6c4:	4639      	mov	r1, r7
 800e6c6:	f7f2 fa8f 	bl	8000be8 <__aeabi_fsub>
 800e6ca:	4606      	mov	r6, r0
 800e6cc:	4937      	ldr	r1, [pc, #220]	; (800e7ac <__ieee754_rem_pio2f+0x2b4>)
 800e6ce:	4648      	mov	r0, r9
 800e6d0:	f7f2 fb94 	bl	8000dfc <__aeabi_fmul>
 800e6d4:	4631      	mov	r1, r6
 800e6d6:	f7f2 fa87 	bl	8000be8 <__aeabi_fsub>
 800e6da:	4607      	mov	r7, r0
 800e6dc:	e795      	b.n	800e60a <__ieee754_rem_pio2f+0x112>
 800e6de:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800e6e2:	db05      	blt.n	800e6f0 <__ieee754_rem_pio2f+0x1f8>
 800e6e4:	4601      	mov	r1, r0
 800e6e6:	f7f2 fa7f 	bl	8000be8 <__aeabi_fsub>
 800e6ea:	6060      	str	r0, [r4, #4]
 800e6ec:	6020      	str	r0, [r4, #0]
 800e6ee:	e710      	b.n	800e512 <__ieee754_rem_pio2f+0x1a>
 800e6f0:	15f7      	asrs	r7, r6, #23
 800e6f2:	3f86      	subs	r7, #134	; 0x86
 800e6f4:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	f7f2 fd5b 	bl	80011b4 <__aeabi_f2iz>
 800e6fe:	f7f2 fb29 	bl	8000d54 <__aeabi_i2f>
 800e702:	4601      	mov	r1, r0
 800e704:	9003      	str	r0, [sp, #12]
 800e706:	4630      	mov	r0, r6
 800e708:	f7f2 fa6e 	bl	8000be8 <__aeabi_fsub>
 800e70c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e710:	f7f2 fb74 	bl	8000dfc <__aeabi_fmul>
 800e714:	4606      	mov	r6, r0
 800e716:	f7f2 fd4d 	bl	80011b4 <__aeabi_f2iz>
 800e71a:	f7f2 fb1b 	bl	8000d54 <__aeabi_i2f>
 800e71e:	4601      	mov	r1, r0
 800e720:	9004      	str	r0, [sp, #16]
 800e722:	4605      	mov	r5, r0
 800e724:	4630      	mov	r0, r6
 800e726:	f7f2 fa5f 	bl	8000be8 <__aeabi_fsub>
 800e72a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e72e:	f7f2 fb65 	bl	8000dfc <__aeabi_fmul>
 800e732:	2100      	movs	r1, #0
 800e734:	9005      	str	r0, [sp, #20]
 800e736:	f7f2 fcf5 	bl	8001124 <__aeabi_fcmpeq>
 800e73a:	b1f0      	cbz	r0, 800e77a <__ieee754_rem_pio2f+0x282>
 800e73c:	2100      	movs	r1, #0
 800e73e:	4628      	mov	r0, r5
 800e740:	f7f2 fcf0 	bl	8001124 <__aeabi_fcmpeq>
 800e744:	2800      	cmp	r0, #0
 800e746:	bf14      	ite	ne
 800e748:	2301      	movne	r3, #1
 800e74a:	2302      	moveq	r3, #2
 800e74c:	4a18      	ldr	r2, [pc, #96]	; (800e7b0 <__ieee754_rem_pio2f+0x2b8>)
 800e74e:	4621      	mov	r1, r4
 800e750:	9201      	str	r2, [sp, #4]
 800e752:	2202      	movs	r2, #2
 800e754:	a803      	add	r0, sp, #12
 800e756:	9200      	str	r2, [sp, #0]
 800e758:	463a      	mov	r2, r7
 800e75a:	f000 fdbb 	bl	800f2d4 <__kernel_rem_pio2f>
 800e75e:	f1ba 0f00 	cmp.w	sl, #0
 800e762:	4605      	mov	r5, r0
 800e764:	f6bf aef2 	bge.w	800e54c <__ieee754_rem_pio2f+0x54>
 800e768:	6823      	ldr	r3, [r4, #0]
 800e76a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e76e:	6023      	str	r3, [r4, #0]
 800e770:	6863      	ldr	r3, [r4, #4]
 800e772:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e776:	6063      	str	r3, [r4, #4]
 800e778:	e794      	b.n	800e6a4 <__ieee754_rem_pio2f+0x1ac>
 800e77a:	2303      	movs	r3, #3
 800e77c:	e7e6      	b.n	800e74c <__ieee754_rem_pio2f+0x254>
 800e77e:	bf00      	nop
 800e780:	3f490fd8 	.word	0x3f490fd8
 800e784:	4016cbe3 	.word	0x4016cbe3
 800e788:	3fc90f80 	.word	0x3fc90f80
 800e78c:	3fc90fd0 	.word	0x3fc90fd0
 800e790:	37354443 	.word	0x37354443
 800e794:	37354400 	.word	0x37354400
 800e798:	2e85a308 	.word	0x2e85a308
 800e79c:	43490f80 	.word	0x43490f80
 800e7a0:	3f22f984 	.word	0x3f22f984
 800e7a4:	08013540 	.word	0x08013540
 800e7a8:	2e85a300 	.word	0x2e85a300
 800e7ac:	248d3132 	.word	0x248d3132
 800e7b0:	080135c0 	.word	0x080135c0

0800e7b4 <__ieee754_sqrtf>:
 800e7b4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800e7b8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e7bc:	b570      	push	{r4, r5, r6, lr}
 800e7be:	4603      	mov	r3, r0
 800e7c0:	4604      	mov	r4, r0
 800e7c2:	d309      	bcc.n	800e7d8 <__ieee754_sqrtf+0x24>
 800e7c4:	4601      	mov	r1, r0
 800e7c6:	f7f2 fb19 	bl	8000dfc <__aeabi_fmul>
 800e7ca:	4601      	mov	r1, r0
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	f7f2 fa0d 	bl	8000bec <__addsf3>
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	4620      	mov	r0, r4
 800e7d6:	bd70      	pop	{r4, r5, r6, pc}
 800e7d8:	2a00      	cmp	r2, #0
 800e7da:	d0fb      	beq.n	800e7d4 <__ieee754_sqrtf+0x20>
 800e7dc:	2800      	cmp	r0, #0
 800e7de:	da06      	bge.n	800e7ee <__ieee754_sqrtf+0x3a>
 800e7e0:	4601      	mov	r1, r0
 800e7e2:	f7f2 fa01 	bl	8000be8 <__aeabi_fsub>
 800e7e6:	4601      	mov	r1, r0
 800e7e8:	f7f2 fbbc 	bl	8000f64 <__aeabi_fdiv>
 800e7ec:	e7f1      	b.n	800e7d2 <__ieee754_sqrtf+0x1e>
 800e7ee:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800e7f2:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800e7f6:	d029      	beq.n	800e84c <__ieee754_sqrtf+0x98>
 800e7f8:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800e7fc:	07cb      	lsls	r3, r1, #31
 800e7fe:	f04f 0300 	mov.w	r3, #0
 800e802:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800e806:	f04f 0419 	mov.w	r4, #25
 800e80a:	461e      	mov	r6, r3
 800e80c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800e810:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e814:	bf58      	it	pl
 800e816:	0052      	lslpl	r2, r2, #1
 800e818:	1040      	asrs	r0, r0, #1
 800e81a:	0052      	lsls	r2, r2, #1
 800e81c:	1875      	adds	r5, r6, r1
 800e81e:	4295      	cmp	r5, r2
 800e820:	bfde      	ittt	le
 800e822:	186e      	addle	r6, r5, r1
 800e824:	1b52      	suble	r2, r2, r5
 800e826:	185b      	addle	r3, r3, r1
 800e828:	3c01      	subs	r4, #1
 800e82a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e82e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e832:	d1f3      	bne.n	800e81c <__ieee754_sqrtf+0x68>
 800e834:	b112      	cbz	r2, 800e83c <__ieee754_sqrtf+0x88>
 800e836:	3301      	adds	r3, #1
 800e838:	f023 0301 	bic.w	r3, r3, #1
 800e83c:	105c      	asrs	r4, r3, #1
 800e83e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800e842:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800e846:	e7c5      	b.n	800e7d4 <__ieee754_sqrtf+0x20>
 800e848:	005b      	lsls	r3, r3, #1
 800e84a:	3201      	adds	r2, #1
 800e84c:	0218      	lsls	r0, r3, #8
 800e84e:	d5fb      	bpl.n	800e848 <__ieee754_sqrtf+0x94>
 800e850:	3a01      	subs	r2, #1
 800e852:	1a89      	subs	r1, r1, r2
 800e854:	e7d0      	b.n	800e7f8 <__ieee754_sqrtf+0x44>
	...

0800e858 <__kernel_cos>:
 800e858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e85c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e860:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800e864:	4680      	mov	r8, r0
 800e866:	460f      	mov	r7, r1
 800e868:	e9cd 2300 	strd	r2, r3, [sp]
 800e86c:	da04      	bge.n	800e878 <__kernel_cos+0x20>
 800e86e:	f7f2 f91f 	bl	8000ab0 <__aeabi_d2iz>
 800e872:	2800      	cmp	r0, #0
 800e874:	f000 8086 	beq.w	800e984 <__kernel_cos+0x12c>
 800e878:	4642      	mov	r2, r8
 800e87a:	463b      	mov	r3, r7
 800e87c:	4640      	mov	r0, r8
 800e87e:	4639      	mov	r1, r7
 800e880:	f7f1 fe66 	bl	8000550 <__aeabi_dmul>
 800e884:	2200      	movs	r2, #0
 800e886:	4b4e      	ldr	r3, [pc, #312]	; (800e9c0 <__kernel_cos+0x168>)
 800e888:	4604      	mov	r4, r0
 800e88a:	460d      	mov	r5, r1
 800e88c:	f7f1 fe60 	bl	8000550 <__aeabi_dmul>
 800e890:	a33f      	add	r3, pc, #252	; (adr r3, 800e990 <__kernel_cos+0x138>)
 800e892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e896:	4682      	mov	sl, r0
 800e898:	468b      	mov	fp, r1
 800e89a:	4620      	mov	r0, r4
 800e89c:	4629      	mov	r1, r5
 800e89e:	f7f1 fe57 	bl	8000550 <__aeabi_dmul>
 800e8a2:	a33d      	add	r3, pc, #244	; (adr r3, 800e998 <__kernel_cos+0x140>)
 800e8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a8:	f7f1 fc9c 	bl	80001e4 <__adddf3>
 800e8ac:	4622      	mov	r2, r4
 800e8ae:	462b      	mov	r3, r5
 800e8b0:	f7f1 fe4e 	bl	8000550 <__aeabi_dmul>
 800e8b4:	a33a      	add	r3, pc, #232	; (adr r3, 800e9a0 <__kernel_cos+0x148>)
 800e8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ba:	f7f1 fc91 	bl	80001e0 <__aeabi_dsub>
 800e8be:	4622      	mov	r2, r4
 800e8c0:	462b      	mov	r3, r5
 800e8c2:	f7f1 fe45 	bl	8000550 <__aeabi_dmul>
 800e8c6:	a338      	add	r3, pc, #224	; (adr r3, 800e9a8 <__kernel_cos+0x150>)
 800e8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8cc:	f7f1 fc8a 	bl	80001e4 <__adddf3>
 800e8d0:	4622      	mov	r2, r4
 800e8d2:	462b      	mov	r3, r5
 800e8d4:	f7f1 fe3c 	bl	8000550 <__aeabi_dmul>
 800e8d8:	a335      	add	r3, pc, #212	; (adr r3, 800e9b0 <__kernel_cos+0x158>)
 800e8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8de:	f7f1 fc7f 	bl	80001e0 <__aeabi_dsub>
 800e8e2:	4622      	mov	r2, r4
 800e8e4:	462b      	mov	r3, r5
 800e8e6:	f7f1 fe33 	bl	8000550 <__aeabi_dmul>
 800e8ea:	a333      	add	r3, pc, #204	; (adr r3, 800e9b8 <__kernel_cos+0x160>)
 800e8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f0:	f7f1 fc78 	bl	80001e4 <__adddf3>
 800e8f4:	4622      	mov	r2, r4
 800e8f6:	462b      	mov	r3, r5
 800e8f8:	f7f1 fe2a 	bl	8000550 <__aeabi_dmul>
 800e8fc:	4622      	mov	r2, r4
 800e8fe:	462b      	mov	r3, r5
 800e900:	f7f1 fe26 	bl	8000550 <__aeabi_dmul>
 800e904:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e908:	4604      	mov	r4, r0
 800e90a:	460d      	mov	r5, r1
 800e90c:	4640      	mov	r0, r8
 800e90e:	4639      	mov	r1, r7
 800e910:	f7f1 fe1e 	bl	8000550 <__aeabi_dmul>
 800e914:	460b      	mov	r3, r1
 800e916:	4602      	mov	r2, r0
 800e918:	4629      	mov	r1, r5
 800e91a:	4620      	mov	r0, r4
 800e91c:	f7f1 fc60 	bl	80001e0 <__aeabi_dsub>
 800e920:	4b28      	ldr	r3, [pc, #160]	; (800e9c4 <__kernel_cos+0x16c>)
 800e922:	4680      	mov	r8, r0
 800e924:	429e      	cmp	r6, r3
 800e926:	4689      	mov	r9, r1
 800e928:	dc0e      	bgt.n	800e948 <__kernel_cos+0xf0>
 800e92a:	4602      	mov	r2, r0
 800e92c:	460b      	mov	r3, r1
 800e92e:	4650      	mov	r0, sl
 800e930:	4659      	mov	r1, fp
 800e932:	f7f1 fc55 	bl	80001e0 <__aeabi_dsub>
 800e936:	4602      	mov	r2, r0
 800e938:	2000      	movs	r0, #0
 800e93a:	460b      	mov	r3, r1
 800e93c:	4922      	ldr	r1, [pc, #136]	; (800e9c8 <__kernel_cos+0x170>)
 800e93e:	f7f1 fc4f 	bl	80001e0 <__aeabi_dsub>
 800e942:	b003      	add	sp, #12
 800e944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e948:	2400      	movs	r4, #0
 800e94a:	4b20      	ldr	r3, [pc, #128]	; (800e9cc <__kernel_cos+0x174>)
 800e94c:	4622      	mov	r2, r4
 800e94e:	429e      	cmp	r6, r3
 800e950:	bfcc      	ite	gt
 800e952:	4d1f      	ldrgt	r5, [pc, #124]	; (800e9d0 <__kernel_cos+0x178>)
 800e954:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800e958:	462b      	mov	r3, r5
 800e95a:	2000      	movs	r0, #0
 800e95c:	491a      	ldr	r1, [pc, #104]	; (800e9c8 <__kernel_cos+0x170>)
 800e95e:	f7f1 fc3f 	bl	80001e0 <__aeabi_dsub>
 800e962:	4622      	mov	r2, r4
 800e964:	4606      	mov	r6, r0
 800e966:	460f      	mov	r7, r1
 800e968:	462b      	mov	r3, r5
 800e96a:	4650      	mov	r0, sl
 800e96c:	4659      	mov	r1, fp
 800e96e:	f7f1 fc37 	bl	80001e0 <__aeabi_dsub>
 800e972:	4642      	mov	r2, r8
 800e974:	464b      	mov	r3, r9
 800e976:	f7f1 fc33 	bl	80001e0 <__aeabi_dsub>
 800e97a:	4602      	mov	r2, r0
 800e97c:	460b      	mov	r3, r1
 800e97e:	4630      	mov	r0, r6
 800e980:	4639      	mov	r1, r7
 800e982:	e7dc      	b.n	800e93e <__kernel_cos+0xe6>
 800e984:	2000      	movs	r0, #0
 800e986:	4910      	ldr	r1, [pc, #64]	; (800e9c8 <__kernel_cos+0x170>)
 800e988:	e7db      	b.n	800e942 <__kernel_cos+0xea>
 800e98a:	bf00      	nop
 800e98c:	f3af 8000 	nop.w
 800e990:	be8838d4 	.word	0xbe8838d4
 800e994:	bda8fae9 	.word	0xbda8fae9
 800e998:	bdb4b1c4 	.word	0xbdb4b1c4
 800e99c:	3e21ee9e 	.word	0x3e21ee9e
 800e9a0:	809c52ad 	.word	0x809c52ad
 800e9a4:	3e927e4f 	.word	0x3e927e4f
 800e9a8:	19cb1590 	.word	0x19cb1590
 800e9ac:	3efa01a0 	.word	0x3efa01a0
 800e9b0:	16c15177 	.word	0x16c15177
 800e9b4:	3f56c16c 	.word	0x3f56c16c
 800e9b8:	5555554c 	.word	0x5555554c
 800e9bc:	3fa55555 	.word	0x3fa55555
 800e9c0:	3fe00000 	.word	0x3fe00000
 800e9c4:	3fd33332 	.word	0x3fd33332
 800e9c8:	3ff00000 	.word	0x3ff00000
 800e9cc:	3fe90000 	.word	0x3fe90000
 800e9d0:	3fd20000 	.word	0x3fd20000

0800e9d4 <__kernel_rem_pio2>:
 800e9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e9dc:	9308      	str	r3, [sp, #32]
 800e9de:	9101      	str	r1, [sp, #4]
 800e9e0:	4bc0      	ldr	r3, [pc, #768]	; (800ece4 <__kernel_rem_pio2+0x310>)
 800e9e2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e9e4:	f112 0f14 	cmn.w	r2, #20
 800e9e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e9ec:	bfa8      	it	ge
 800e9ee:	1ed4      	subge	r4, r2, #3
 800e9f0:	9304      	str	r3, [sp, #16]
 800e9f2:	9b08      	ldr	r3, [sp, #32]
 800e9f4:	bfb8      	it	lt
 800e9f6:	2400      	movlt	r4, #0
 800e9f8:	f103 33ff 	add.w	r3, r3, #4294967295
 800e9fc:	9306      	str	r3, [sp, #24]
 800e9fe:	bfa4      	itt	ge
 800ea00:	2318      	movge	r3, #24
 800ea02:	fb94 f4f3 	sdivge	r4, r4, r3
 800ea06:	f06f 0317 	mvn.w	r3, #23
 800ea0a:	fb04 3303 	mla	r3, r4, r3, r3
 800ea0e:	eb03 0a02 	add.w	sl, r3, r2
 800ea12:	9a06      	ldr	r2, [sp, #24]
 800ea14:	9b04      	ldr	r3, [sp, #16]
 800ea16:	1aa7      	subs	r7, r4, r2
 800ea18:	eb03 0802 	add.w	r8, r3, r2
 800ea1c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ea1e:	2500      	movs	r5, #0
 800ea20:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ea24:	2200      	movs	r2, #0
 800ea26:	2300      	movs	r3, #0
 800ea28:	9009      	str	r0, [sp, #36]	; 0x24
 800ea2a:	ae20      	add	r6, sp, #128	; 0x80
 800ea2c:	4545      	cmp	r5, r8
 800ea2e:	dd19      	ble.n	800ea64 <__kernel_rem_pio2+0x90>
 800ea30:	9b08      	ldr	r3, [sp, #32]
 800ea32:	aa20      	add	r2, sp, #128	; 0x80
 800ea34:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ea38:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ea3c:	f1c3 0301 	rsb	r3, r3, #1
 800ea40:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ea44:	9307      	str	r3, [sp, #28]
 800ea46:	9b07      	ldr	r3, [sp, #28]
 800ea48:	9a04      	ldr	r2, [sp, #16]
 800ea4a:	4443      	add	r3, r8
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	db35      	blt.n	800eabc <__kernel_rem_pio2+0xe8>
 800ea50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea52:	2200      	movs	r2, #0
 800ea54:	f1a3 0908 	sub.w	r9, r3, #8
 800ea58:	2300      	movs	r3, #0
 800ea5a:	462f      	mov	r7, r5
 800ea5c:	2600      	movs	r6, #0
 800ea5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ea62:	e01f      	b.n	800eaa4 <__kernel_rem_pio2+0xd0>
 800ea64:	42ef      	cmn	r7, r5
 800ea66:	d40b      	bmi.n	800ea80 <__kernel_rem_pio2+0xac>
 800ea68:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ea6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ea70:	f7f1 fd04 	bl	800047c <__aeabi_i2d>
 800ea74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea78:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ea7c:	3501      	adds	r5, #1
 800ea7e:	e7d5      	b.n	800ea2c <__kernel_rem_pio2+0x58>
 800ea80:	4610      	mov	r0, r2
 800ea82:	4619      	mov	r1, r3
 800ea84:	e7f8      	b.n	800ea78 <__kernel_rem_pio2+0xa4>
 800ea86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea8a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800ea8e:	f7f1 fd5f 	bl	8000550 <__aeabi_dmul>
 800ea92:	4602      	mov	r2, r0
 800ea94:	460b      	mov	r3, r1
 800ea96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea9a:	f7f1 fba3 	bl	80001e4 <__adddf3>
 800ea9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eaa2:	3601      	adds	r6, #1
 800eaa4:	9b06      	ldr	r3, [sp, #24]
 800eaa6:	3f08      	subs	r7, #8
 800eaa8:	429e      	cmp	r6, r3
 800eaaa:	ddec      	ble.n	800ea86 <__kernel_rem_pio2+0xb2>
 800eaac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eab0:	3508      	adds	r5, #8
 800eab2:	e8eb 2302 	strd	r2, r3, [fp], #8
 800eab6:	f108 0801 	add.w	r8, r8, #1
 800eaba:	e7c4      	b.n	800ea46 <__kernel_rem_pio2+0x72>
 800eabc:	9b04      	ldr	r3, [sp, #16]
 800eabe:	aa0c      	add	r2, sp, #48	; 0x30
 800eac0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eac4:	930b      	str	r3, [sp, #44]	; 0x2c
 800eac6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800eac8:	9f04      	ldr	r7, [sp, #16]
 800eaca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800eace:	930a      	str	r3, [sp, #40]	; 0x28
 800ead0:	463e      	mov	r6, r7
 800ead2:	ab98      	add	r3, sp, #608	; 0x260
 800ead4:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ead8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eadc:	f8cd b008 	str.w	fp, [sp, #8]
 800eae0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800eae4:	2e00      	cmp	r6, #0
 800eae6:	dc71      	bgt.n	800ebcc <__kernel_rem_pio2+0x1f8>
 800eae8:	4652      	mov	r2, sl
 800eaea:	4620      	mov	r0, r4
 800eaec:	4629      	mov	r1, r5
 800eaee:	f000 ffa3 	bl	800fa38 <scalbn>
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800eaf8:	4604      	mov	r4, r0
 800eafa:	460d      	mov	r5, r1
 800eafc:	f7f1 fd28 	bl	8000550 <__aeabi_dmul>
 800eb00:	f000 ff1a 	bl	800f938 <floor>
 800eb04:	2200      	movs	r2, #0
 800eb06:	4b78      	ldr	r3, [pc, #480]	; (800ece8 <__kernel_rem_pio2+0x314>)
 800eb08:	f7f1 fd22 	bl	8000550 <__aeabi_dmul>
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	460b      	mov	r3, r1
 800eb10:	4620      	mov	r0, r4
 800eb12:	4629      	mov	r1, r5
 800eb14:	f7f1 fb64 	bl	80001e0 <__aeabi_dsub>
 800eb18:	460d      	mov	r5, r1
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	f7f1 ffc8 	bl	8000ab0 <__aeabi_d2iz>
 800eb20:	9007      	str	r0, [sp, #28]
 800eb22:	f7f1 fcab 	bl	800047c <__aeabi_i2d>
 800eb26:	4602      	mov	r2, r0
 800eb28:	460b      	mov	r3, r1
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	f7f1 fb57 	bl	80001e0 <__aeabi_dsub>
 800eb32:	f1ba 0f00 	cmp.w	sl, #0
 800eb36:	4680      	mov	r8, r0
 800eb38:	4689      	mov	r9, r1
 800eb3a:	dd70      	ble.n	800ec1e <__kernel_rem_pio2+0x24a>
 800eb3c:	1e7a      	subs	r2, r7, #1
 800eb3e:	ab0c      	add	r3, sp, #48	; 0x30
 800eb40:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eb44:	9c07      	ldr	r4, [sp, #28]
 800eb46:	f1ca 0118 	rsb	r1, sl, #24
 800eb4a:	fa40 f301 	asr.w	r3, r0, r1
 800eb4e:	441c      	add	r4, r3
 800eb50:	408b      	lsls	r3, r1
 800eb52:	1ac0      	subs	r0, r0, r3
 800eb54:	ab0c      	add	r3, sp, #48	; 0x30
 800eb56:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800eb5a:	f1ca 0317 	rsb	r3, sl, #23
 800eb5e:	9407      	str	r4, [sp, #28]
 800eb60:	fa40 f303 	asr.w	r3, r0, r3
 800eb64:	9302      	str	r3, [sp, #8]
 800eb66:	9b02      	ldr	r3, [sp, #8]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	dd66      	ble.n	800ec3a <__kernel_rem_pio2+0x266>
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800eb72:	4614      	mov	r4, r2
 800eb74:	9b07      	ldr	r3, [sp, #28]
 800eb76:	3301      	adds	r3, #1
 800eb78:	9307      	str	r3, [sp, #28]
 800eb7a:	4297      	cmp	r7, r2
 800eb7c:	f300 809f 	bgt.w	800ecbe <__kernel_rem_pio2+0x2ea>
 800eb80:	f1ba 0f00 	cmp.w	sl, #0
 800eb84:	dd07      	ble.n	800eb96 <__kernel_rem_pio2+0x1c2>
 800eb86:	f1ba 0f01 	cmp.w	sl, #1
 800eb8a:	f000 80b9 	beq.w	800ed00 <__kernel_rem_pio2+0x32c>
 800eb8e:	f1ba 0f02 	cmp.w	sl, #2
 800eb92:	f000 80bf 	beq.w	800ed14 <__kernel_rem_pio2+0x340>
 800eb96:	9b02      	ldr	r3, [sp, #8]
 800eb98:	2b02      	cmp	r3, #2
 800eb9a:	d14e      	bne.n	800ec3a <__kernel_rem_pio2+0x266>
 800eb9c:	4642      	mov	r2, r8
 800eb9e:	464b      	mov	r3, r9
 800eba0:	2000      	movs	r0, #0
 800eba2:	4952      	ldr	r1, [pc, #328]	; (800ecec <__kernel_rem_pio2+0x318>)
 800eba4:	f7f1 fb1c 	bl	80001e0 <__aeabi_dsub>
 800eba8:	4680      	mov	r8, r0
 800ebaa:	4689      	mov	r9, r1
 800ebac:	2c00      	cmp	r4, #0
 800ebae:	d044      	beq.n	800ec3a <__kernel_rem_pio2+0x266>
 800ebb0:	4652      	mov	r2, sl
 800ebb2:	2000      	movs	r0, #0
 800ebb4:	494d      	ldr	r1, [pc, #308]	; (800ecec <__kernel_rem_pio2+0x318>)
 800ebb6:	f000 ff3f 	bl	800fa38 <scalbn>
 800ebba:	4602      	mov	r2, r0
 800ebbc:	460b      	mov	r3, r1
 800ebbe:	4640      	mov	r0, r8
 800ebc0:	4649      	mov	r1, r9
 800ebc2:	f7f1 fb0d 	bl	80001e0 <__aeabi_dsub>
 800ebc6:	4680      	mov	r8, r0
 800ebc8:	4689      	mov	r9, r1
 800ebca:	e036      	b.n	800ec3a <__kernel_rem_pio2+0x266>
 800ebcc:	2200      	movs	r2, #0
 800ebce:	4b48      	ldr	r3, [pc, #288]	; (800ecf0 <__kernel_rem_pio2+0x31c>)
 800ebd0:	4620      	mov	r0, r4
 800ebd2:	4629      	mov	r1, r5
 800ebd4:	f7f1 fcbc 	bl	8000550 <__aeabi_dmul>
 800ebd8:	f7f1 ff6a 	bl	8000ab0 <__aeabi_d2iz>
 800ebdc:	f7f1 fc4e 	bl	800047c <__aeabi_i2d>
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	4b44      	ldr	r3, [pc, #272]	; (800ecf4 <__kernel_rem_pio2+0x320>)
 800ebe4:	4680      	mov	r8, r0
 800ebe6:	4689      	mov	r9, r1
 800ebe8:	f7f1 fcb2 	bl	8000550 <__aeabi_dmul>
 800ebec:	4602      	mov	r2, r0
 800ebee:	460b      	mov	r3, r1
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	4629      	mov	r1, r5
 800ebf4:	f7f1 faf4 	bl	80001e0 <__aeabi_dsub>
 800ebf8:	f7f1 ff5a 	bl	8000ab0 <__aeabi_d2iz>
 800ebfc:	9b02      	ldr	r3, [sp, #8]
 800ebfe:	3e01      	subs	r6, #1
 800ec00:	f843 0b04 	str.w	r0, [r3], #4
 800ec04:	9302      	str	r3, [sp, #8]
 800ec06:	ab70      	add	r3, sp, #448	; 0x1c0
 800ec08:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ec0c:	4640      	mov	r0, r8
 800ec0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec12:	4649      	mov	r1, r9
 800ec14:	f7f1 fae6 	bl	80001e4 <__adddf3>
 800ec18:	4604      	mov	r4, r0
 800ec1a:	460d      	mov	r5, r1
 800ec1c:	e762      	b.n	800eae4 <__kernel_rem_pio2+0x110>
 800ec1e:	d105      	bne.n	800ec2c <__kernel_rem_pio2+0x258>
 800ec20:	1e7b      	subs	r3, r7, #1
 800ec22:	aa0c      	add	r2, sp, #48	; 0x30
 800ec24:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ec28:	15c3      	asrs	r3, r0, #23
 800ec2a:	e79b      	b.n	800eb64 <__kernel_rem_pio2+0x190>
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	4b32      	ldr	r3, [pc, #200]	; (800ecf8 <__kernel_rem_pio2+0x324>)
 800ec30:	f7f1 ff14 	bl	8000a5c <__aeabi_dcmpge>
 800ec34:	2800      	cmp	r0, #0
 800ec36:	d13f      	bne.n	800ecb8 <__kernel_rem_pio2+0x2e4>
 800ec38:	9002      	str	r0, [sp, #8]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	4640      	mov	r0, r8
 800ec40:	4649      	mov	r1, r9
 800ec42:	f7f1 feed 	bl	8000a20 <__aeabi_dcmpeq>
 800ec46:	2800      	cmp	r0, #0
 800ec48:	f000 80b5 	beq.w	800edb6 <__kernel_rem_pio2+0x3e2>
 800ec4c:	1e7c      	subs	r4, r7, #1
 800ec4e:	4623      	mov	r3, r4
 800ec50:	2200      	movs	r2, #0
 800ec52:	9904      	ldr	r1, [sp, #16]
 800ec54:	428b      	cmp	r3, r1
 800ec56:	da64      	bge.n	800ed22 <__kernel_rem_pio2+0x34e>
 800ec58:	2a00      	cmp	r2, #0
 800ec5a:	d078      	beq.n	800ed4e <__kernel_rem_pio2+0x37a>
 800ec5c:	ab0c      	add	r3, sp, #48	; 0x30
 800ec5e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ec62:	f1aa 0a18 	sub.w	sl, sl, #24
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	f000 80a3 	beq.w	800edb2 <__kernel_rem_pio2+0x3de>
 800ec6c:	4652      	mov	r2, sl
 800ec6e:	2000      	movs	r0, #0
 800ec70:	491e      	ldr	r1, [pc, #120]	; (800ecec <__kernel_rem_pio2+0x318>)
 800ec72:	f000 fee1 	bl	800fa38 <scalbn>
 800ec76:	46a2      	mov	sl, r4
 800ec78:	4606      	mov	r6, r0
 800ec7a:	460f      	mov	r7, r1
 800ec7c:	f04f 0800 	mov.w	r8, #0
 800ec80:	00e3      	lsls	r3, r4, #3
 800ec82:	9306      	str	r3, [sp, #24]
 800ec84:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800ecf0 <__kernel_rem_pio2+0x31c>
 800ec88:	ab70      	add	r3, sp, #448	; 0x1c0
 800ec8a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800ec8e:	f1ba 0f00 	cmp.w	sl, #0
 800ec92:	f280 80c6 	bge.w	800ee22 <__kernel_rem_pio2+0x44e>
 800ec96:	4627      	mov	r7, r4
 800ec98:	f04f 0800 	mov.w	r8, #0
 800ec9c:	2f00      	cmp	r7, #0
 800ec9e:	f2c0 80f3 	blt.w	800ee88 <__kernel_rem_pio2+0x4b4>
 800eca2:	4b16      	ldr	r3, [pc, #88]	; (800ecfc <__kernel_rem_pio2+0x328>)
 800eca4:	f04f 0a00 	mov.w	sl, #0
 800eca8:	461d      	mov	r5, r3
 800ecaa:	ab70      	add	r3, sp, #448	; 0x1c0
 800ecac:	f04f 0b00 	mov.w	fp, #0
 800ecb0:	2600      	movs	r6, #0
 800ecb2:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800ecb6:	e0d9      	b.n	800ee6c <__kernel_rem_pio2+0x498>
 800ecb8:	2302      	movs	r3, #2
 800ecba:	9302      	str	r3, [sp, #8]
 800ecbc:	e756      	b.n	800eb6c <__kernel_rem_pio2+0x198>
 800ecbe:	f8db 3000 	ldr.w	r3, [fp]
 800ecc2:	b954      	cbnz	r4, 800ecda <__kernel_rem_pio2+0x306>
 800ecc4:	b123      	cbz	r3, 800ecd0 <__kernel_rem_pio2+0x2fc>
 800ecc6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ecca:	f8cb 3000 	str.w	r3, [fp]
 800ecce:	2301      	movs	r3, #1
 800ecd0:	461c      	mov	r4, r3
 800ecd2:	3201      	adds	r2, #1
 800ecd4:	f10b 0b04 	add.w	fp, fp, #4
 800ecd8:	e74f      	b.n	800eb7a <__kernel_rem_pio2+0x1a6>
 800ecda:	1acb      	subs	r3, r1, r3
 800ecdc:	f8cb 3000 	str.w	r3, [fp]
 800ece0:	4623      	mov	r3, r4
 800ece2:	e7f5      	b.n	800ecd0 <__kernel_rem_pio2+0x2fc>
 800ece4:	08013918 	.word	0x08013918
 800ece8:	40200000 	.word	0x40200000
 800ecec:	3ff00000 	.word	0x3ff00000
 800ecf0:	3e700000 	.word	0x3e700000
 800ecf4:	41700000 	.word	0x41700000
 800ecf8:	3fe00000 	.word	0x3fe00000
 800ecfc:	080138d8 	.word	0x080138d8
 800ed00:	1e7a      	subs	r2, r7, #1
 800ed02:	ab0c      	add	r3, sp, #48	; 0x30
 800ed04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed08:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ed0c:	a90c      	add	r1, sp, #48	; 0x30
 800ed0e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ed12:	e740      	b.n	800eb96 <__kernel_rem_pio2+0x1c2>
 800ed14:	1e7a      	subs	r2, r7, #1
 800ed16:	ab0c      	add	r3, sp, #48	; 0x30
 800ed18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed1c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ed20:	e7f4      	b.n	800ed0c <__kernel_rem_pio2+0x338>
 800ed22:	a90c      	add	r1, sp, #48	; 0x30
 800ed24:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ed28:	3b01      	subs	r3, #1
 800ed2a:	430a      	orrs	r2, r1
 800ed2c:	e791      	b.n	800ec52 <__kernel_rem_pio2+0x27e>
 800ed2e:	3401      	adds	r4, #1
 800ed30:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ed34:	2a00      	cmp	r2, #0
 800ed36:	d0fa      	beq.n	800ed2e <__kernel_rem_pio2+0x35a>
 800ed38:	9b08      	ldr	r3, [sp, #32]
 800ed3a:	1c7e      	adds	r6, r7, #1
 800ed3c:	18fd      	adds	r5, r7, r3
 800ed3e:	ab20      	add	r3, sp, #128	; 0x80
 800ed40:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ed44:	443c      	add	r4, r7
 800ed46:	42b4      	cmp	r4, r6
 800ed48:	da04      	bge.n	800ed54 <__kernel_rem_pio2+0x380>
 800ed4a:	4627      	mov	r7, r4
 800ed4c:	e6c0      	b.n	800ead0 <__kernel_rem_pio2+0xfc>
 800ed4e:	2401      	movs	r4, #1
 800ed50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed52:	e7ed      	b.n	800ed30 <__kernel_rem_pio2+0x35c>
 800ed54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed56:	462f      	mov	r7, r5
 800ed58:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ed5c:	f7f1 fb8e 	bl	800047c <__aeabi_i2d>
 800ed60:	f04f 0b00 	mov.w	fp, #0
 800ed64:	f04f 0800 	mov.w	r8, #0
 800ed68:	f04f 0900 	mov.w	r9, #0
 800ed6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed6e:	e8e7 0102 	strd	r0, r1, [r7], #8
 800ed72:	3b08      	subs	r3, #8
 800ed74:	9302      	str	r3, [sp, #8]
 800ed76:	9b06      	ldr	r3, [sp, #24]
 800ed78:	459b      	cmp	fp, r3
 800ed7a:	dd07      	ble.n	800ed8c <__kernel_rem_pio2+0x3b8>
 800ed7c:	ab70      	add	r3, sp, #448	; 0x1c0
 800ed7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ed82:	463d      	mov	r5, r7
 800ed84:	e9c3 8900 	strd	r8, r9, [r3]
 800ed88:	3601      	adds	r6, #1
 800ed8a:	e7dc      	b.n	800ed46 <__kernel_rem_pio2+0x372>
 800ed8c:	9902      	ldr	r1, [sp, #8]
 800ed8e:	f10b 0b01 	add.w	fp, fp, #1
 800ed92:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800ed96:	9102      	str	r1, [sp, #8]
 800ed98:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800ed9c:	f7f1 fbd8 	bl	8000550 <__aeabi_dmul>
 800eda0:	4602      	mov	r2, r0
 800eda2:	460b      	mov	r3, r1
 800eda4:	4640      	mov	r0, r8
 800eda6:	4649      	mov	r1, r9
 800eda8:	f7f1 fa1c 	bl	80001e4 <__adddf3>
 800edac:	4680      	mov	r8, r0
 800edae:	4689      	mov	r9, r1
 800edb0:	e7e1      	b.n	800ed76 <__kernel_rem_pio2+0x3a2>
 800edb2:	3c01      	subs	r4, #1
 800edb4:	e752      	b.n	800ec5c <__kernel_rem_pio2+0x288>
 800edb6:	f1ca 0200 	rsb	r2, sl, #0
 800edba:	4640      	mov	r0, r8
 800edbc:	4649      	mov	r1, r9
 800edbe:	f000 fe3b 	bl	800fa38 <scalbn>
 800edc2:	2200      	movs	r2, #0
 800edc4:	4ba5      	ldr	r3, [pc, #660]	; (800f05c <__kernel_rem_pio2+0x688>)
 800edc6:	4604      	mov	r4, r0
 800edc8:	460d      	mov	r5, r1
 800edca:	f7f1 fe47 	bl	8000a5c <__aeabi_dcmpge>
 800edce:	b1f8      	cbz	r0, 800ee10 <__kernel_rem_pio2+0x43c>
 800edd0:	2200      	movs	r2, #0
 800edd2:	4ba3      	ldr	r3, [pc, #652]	; (800f060 <__kernel_rem_pio2+0x68c>)
 800edd4:	4620      	mov	r0, r4
 800edd6:	4629      	mov	r1, r5
 800edd8:	f7f1 fbba 	bl	8000550 <__aeabi_dmul>
 800eddc:	f7f1 fe68 	bl	8000ab0 <__aeabi_d2iz>
 800ede0:	4606      	mov	r6, r0
 800ede2:	f7f1 fb4b 	bl	800047c <__aeabi_i2d>
 800ede6:	2200      	movs	r2, #0
 800ede8:	4b9c      	ldr	r3, [pc, #624]	; (800f05c <__kernel_rem_pio2+0x688>)
 800edea:	f7f1 fbb1 	bl	8000550 <__aeabi_dmul>
 800edee:	460b      	mov	r3, r1
 800edf0:	4602      	mov	r2, r0
 800edf2:	4629      	mov	r1, r5
 800edf4:	4620      	mov	r0, r4
 800edf6:	f7f1 f9f3 	bl	80001e0 <__aeabi_dsub>
 800edfa:	f7f1 fe59 	bl	8000ab0 <__aeabi_d2iz>
 800edfe:	1c7c      	adds	r4, r7, #1
 800ee00:	ab0c      	add	r3, sp, #48	; 0x30
 800ee02:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800ee06:	f10a 0a18 	add.w	sl, sl, #24
 800ee0a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800ee0e:	e72d      	b.n	800ec6c <__kernel_rem_pio2+0x298>
 800ee10:	4620      	mov	r0, r4
 800ee12:	4629      	mov	r1, r5
 800ee14:	f7f1 fe4c 	bl	8000ab0 <__aeabi_d2iz>
 800ee18:	ab0c      	add	r3, sp, #48	; 0x30
 800ee1a:	463c      	mov	r4, r7
 800ee1c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800ee20:	e724      	b.n	800ec6c <__kernel_rem_pio2+0x298>
 800ee22:	ab0c      	add	r3, sp, #48	; 0x30
 800ee24:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ee28:	f7f1 fb28 	bl	800047c <__aeabi_i2d>
 800ee2c:	4632      	mov	r2, r6
 800ee2e:	463b      	mov	r3, r7
 800ee30:	f7f1 fb8e 	bl	8000550 <__aeabi_dmul>
 800ee34:	4642      	mov	r2, r8
 800ee36:	e86b 0102 	strd	r0, r1, [fp], #-8
 800ee3a:	464b      	mov	r3, r9
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	4639      	mov	r1, r7
 800ee40:	f7f1 fb86 	bl	8000550 <__aeabi_dmul>
 800ee44:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee48:	4606      	mov	r6, r0
 800ee4a:	460f      	mov	r7, r1
 800ee4c:	e71f      	b.n	800ec8e <__kernel_rem_pio2+0x2ba>
 800ee4e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ee52:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800ee56:	f7f1 fb7b 	bl	8000550 <__aeabi_dmul>
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	4650      	mov	r0, sl
 800ee60:	4659      	mov	r1, fp
 800ee62:	f7f1 f9bf 	bl	80001e4 <__adddf3>
 800ee66:	4682      	mov	sl, r0
 800ee68:	468b      	mov	fp, r1
 800ee6a:	3601      	adds	r6, #1
 800ee6c:	9b04      	ldr	r3, [sp, #16]
 800ee6e:	429e      	cmp	r6, r3
 800ee70:	dc01      	bgt.n	800ee76 <__kernel_rem_pio2+0x4a2>
 800ee72:	45b0      	cmp	r8, r6
 800ee74:	daeb      	bge.n	800ee4e <__kernel_rem_pio2+0x47a>
 800ee76:	ab48      	add	r3, sp, #288	; 0x120
 800ee78:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ee7c:	e9c3 ab00 	strd	sl, fp, [r3]
 800ee80:	3f01      	subs	r7, #1
 800ee82:	f108 0801 	add.w	r8, r8, #1
 800ee86:	e709      	b.n	800ec9c <__kernel_rem_pio2+0x2c8>
 800ee88:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800ee8a:	2b02      	cmp	r3, #2
 800ee8c:	dc09      	bgt.n	800eea2 <__kernel_rem_pio2+0x4ce>
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	dc34      	bgt.n	800eefc <__kernel_rem_pio2+0x528>
 800ee92:	d05e      	beq.n	800ef52 <__kernel_rem_pio2+0x57e>
 800ee94:	9b07      	ldr	r3, [sp, #28]
 800ee96:	f003 0007 	and.w	r0, r3, #7
 800ee9a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ee9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eea2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800eea4:	2b03      	cmp	r3, #3
 800eea6:	d1f5      	bne.n	800ee94 <__kernel_rem_pio2+0x4c0>
 800eea8:	9a06      	ldr	r2, [sp, #24]
 800eeaa:	ab48      	add	r3, sp, #288	; 0x120
 800eeac:	441a      	add	r2, r3
 800eeae:	4615      	mov	r5, r2
 800eeb0:	4692      	mov	sl, r2
 800eeb2:	46a3      	mov	fp, r4
 800eeb4:	f1bb 0f00 	cmp.w	fp, #0
 800eeb8:	dc7a      	bgt.n	800efb0 <__kernel_rem_pio2+0x5dc>
 800eeba:	46aa      	mov	sl, r5
 800eebc:	46a3      	mov	fp, r4
 800eebe:	f1bb 0f01 	cmp.w	fp, #1
 800eec2:	f300 8094 	bgt.w	800efee <__kernel_rem_pio2+0x61a>
 800eec6:	2700      	movs	r7, #0
 800eec8:	463e      	mov	r6, r7
 800eeca:	2c01      	cmp	r4, #1
 800eecc:	f300 80ae 	bgt.w	800f02c <__kernel_rem_pio2+0x658>
 800eed0:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800eed4:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800eed8:	9b02      	ldr	r3, [sp, #8]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	f040 80b0 	bne.w	800f040 <__kernel_rem_pio2+0x66c>
 800eee0:	4603      	mov	r3, r0
 800eee2:	462a      	mov	r2, r5
 800eee4:	9801      	ldr	r0, [sp, #4]
 800eee6:	e9c0 2300 	strd	r2, r3, [r0]
 800eeea:	4622      	mov	r2, r4
 800eeec:	460b      	mov	r3, r1
 800eeee:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eef2:	463a      	mov	r2, r7
 800eef4:	4633      	mov	r3, r6
 800eef6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800eefa:	e7cb      	b.n	800ee94 <__kernel_rem_pio2+0x4c0>
 800eefc:	2000      	movs	r0, #0
 800eefe:	9a06      	ldr	r2, [sp, #24]
 800ef00:	ab48      	add	r3, sp, #288	; 0x120
 800ef02:	441a      	add	r2, r3
 800ef04:	4615      	mov	r5, r2
 800ef06:	46a0      	mov	r8, r4
 800ef08:	4601      	mov	r1, r0
 800ef0a:	f1b8 0f00 	cmp.w	r8, #0
 800ef0e:	da3c      	bge.n	800ef8a <__kernel_rem_pio2+0x5b6>
 800ef10:	9b02      	ldr	r3, [sp, #8]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d040      	beq.n	800ef98 <__kernel_rem_pio2+0x5c4>
 800ef16:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	462b      	mov	r3, r5
 800ef1e:	9d01      	ldr	r5, [sp, #4]
 800ef20:	2601      	movs	r6, #1
 800ef22:	e9c5 2300 	strd	r2, r3, [r5]
 800ef26:	460b      	mov	r3, r1
 800ef28:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ef2c:	f7f1 f958 	bl	80001e0 <__aeabi_dsub>
 800ef30:	4684      	mov	ip, r0
 800ef32:	460f      	mov	r7, r1
 800ef34:	ad48      	add	r5, sp, #288	; 0x120
 800ef36:	42b4      	cmp	r4, r6
 800ef38:	f105 0508 	add.w	r5, r5, #8
 800ef3c:	da2e      	bge.n	800ef9c <__kernel_rem_pio2+0x5c8>
 800ef3e:	9b02      	ldr	r3, [sp, #8]
 800ef40:	b10b      	cbz	r3, 800ef46 <__kernel_rem_pio2+0x572>
 800ef42:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ef46:	4662      	mov	r2, ip
 800ef48:	463b      	mov	r3, r7
 800ef4a:	9901      	ldr	r1, [sp, #4]
 800ef4c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800ef50:	e7a0      	b.n	800ee94 <__kernel_rem_pio2+0x4c0>
 800ef52:	9a06      	ldr	r2, [sp, #24]
 800ef54:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800ef56:	ab48      	add	r3, sp, #288	; 0x120
 800ef58:	441a      	add	r2, r3
 800ef5a:	4615      	mov	r5, r2
 800ef5c:	4637      	mov	r7, r6
 800ef5e:	2c00      	cmp	r4, #0
 800ef60:	da09      	bge.n	800ef76 <__kernel_rem_pio2+0x5a2>
 800ef62:	9b02      	ldr	r3, [sp, #8]
 800ef64:	b10b      	cbz	r3, 800ef6a <__kernel_rem_pio2+0x596>
 800ef66:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ef6a:	4632      	mov	r2, r6
 800ef6c:	463b      	mov	r3, r7
 800ef6e:	9901      	ldr	r1, [sp, #4]
 800ef70:	e9c1 2300 	strd	r2, r3, [r1]
 800ef74:	e78e      	b.n	800ee94 <__kernel_rem_pio2+0x4c0>
 800ef76:	4630      	mov	r0, r6
 800ef78:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ef7c:	4639      	mov	r1, r7
 800ef7e:	f7f1 f931 	bl	80001e4 <__adddf3>
 800ef82:	3c01      	subs	r4, #1
 800ef84:	4606      	mov	r6, r0
 800ef86:	460f      	mov	r7, r1
 800ef88:	e7e9      	b.n	800ef5e <__kernel_rem_pio2+0x58a>
 800ef8a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ef8e:	f7f1 f929 	bl	80001e4 <__adddf3>
 800ef92:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef96:	e7b8      	b.n	800ef0a <__kernel_rem_pio2+0x536>
 800ef98:	460d      	mov	r5, r1
 800ef9a:	e7be      	b.n	800ef1a <__kernel_rem_pio2+0x546>
 800ef9c:	4660      	mov	r0, ip
 800ef9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800efa2:	4639      	mov	r1, r7
 800efa4:	f7f1 f91e 	bl	80001e4 <__adddf3>
 800efa8:	3601      	adds	r6, #1
 800efaa:	4684      	mov	ip, r0
 800efac:	460f      	mov	r7, r1
 800efae:	e7c2      	b.n	800ef36 <__kernel_rem_pio2+0x562>
 800efb0:	e9da 6700 	ldrd	r6, r7, [sl]
 800efb4:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800efb8:	4632      	mov	r2, r6
 800efba:	463b      	mov	r3, r7
 800efbc:	4640      	mov	r0, r8
 800efbe:	4649      	mov	r1, r9
 800efc0:	f7f1 f910 	bl	80001e4 <__adddf3>
 800efc4:	4602      	mov	r2, r0
 800efc6:	460b      	mov	r3, r1
 800efc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800efcc:	4640      	mov	r0, r8
 800efce:	4649      	mov	r1, r9
 800efd0:	f7f1 f906 	bl	80001e0 <__aeabi_dsub>
 800efd4:	4632      	mov	r2, r6
 800efd6:	463b      	mov	r3, r7
 800efd8:	f7f1 f904 	bl	80001e4 <__adddf3>
 800efdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800efe0:	e86a 0102 	strd	r0, r1, [sl], #-8
 800efe4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800efe8:	e9ca 2300 	strd	r2, r3, [sl]
 800efec:	e762      	b.n	800eeb4 <__kernel_rem_pio2+0x4e0>
 800efee:	e9da 8900 	ldrd	r8, r9, [sl]
 800eff2:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800eff6:	4642      	mov	r2, r8
 800eff8:	464b      	mov	r3, r9
 800effa:	4630      	mov	r0, r6
 800effc:	4639      	mov	r1, r7
 800effe:	f7f1 f8f1 	bl	80001e4 <__adddf3>
 800f002:	4602      	mov	r2, r0
 800f004:	460b      	mov	r3, r1
 800f006:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f00a:	4630      	mov	r0, r6
 800f00c:	4639      	mov	r1, r7
 800f00e:	f7f1 f8e7 	bl	80001e0 <__aeabi_dsub>
 800f012:	4642      	mov	r2, r8
 800f014:	464b      	mov	r3, r9
 800f016:	f7f1 f8e5 	bl	80001e4 <__adddf3>
 800f01a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f01e:	e86a 0102 	strd	r0, r1, [sl], #-8
 800f022:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f026:	e9ca 2300 	strd	r2, r3, [sl]
 800f02a:	e748      	b.n	800eebe <__kernel_rem_pio2+0x4ea>
 800f02c:	4638      	mov	r0, r7
 800f02e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800f032:	4631      	mov	r1, r6
 800f034:	f7f1 f8d6 	bl	80001e4 <__adddf3>
 800f038:	3c01      	subs	r4, #1
 800f03a:	4607      	mov	r7, r0
 800f03c:	460e      	mov	r6, r1
 800f03e:	e744      	b.n	800eeca <__kernel_rem_pio2+0x4f6>
 800f040:	9b01      	ldr	r3, [sp, #4]
 800f042:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f046:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800f04a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800f04e:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800f052:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800f056:	601d      	str	r5, [r3, #0]
 800f058:	615e      	str	r6, [r3, #20]
 800f05a:	e71b      	b.n	800ee94 <__kernel_rem_pio2+0x4c0>
 800f05c:	41700000 	.word	0x41700000
 800f060:	3e700000 	.word	0x3e700000
 800f064:	00000000 	.word	0x00000000

0800f068 <__kernel_sin>:
 800f068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f06c:	b086      	sub	sp, #24
 800f06e:	e9cd 2300 	strd	r2, r3, [sp]
 800f072:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f076:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f07a:	4682      	mov	sl, r0
 800f07c:	460c      	mov	r4, r1
 800f07e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800f080:	da03      	bge.n	800f08a <__kernel_sin+0x22>
 800f082:	f7f1 fd15 	bl	8000ab0 <__aeabi_d2iz>
 800f086:	2800      	cmp	r0, #0
 800f088:	d050      	beq.n	800f12c <__kernel_sin+0xc4>
 800f08a:	4652      	mov	r2, sl
 800f08c:	4623      	mov	r3, r4
 800f08e:	4650      	mov	r0, sl
 800f090:	4621      	mov	r1, r4
 800f092:	f7f1 fa5d 	bl	8000550 <__aeabi_dmul>
 800f096:	4606      	mov	r6, r0
 800f098:	460f      	mov	r7, r1
 800f09a:	4602      	mov	r2, r0
 800f09c:	460b      	mov	r3, r1
 800f09e:	4650      	mov	r0, sl
 800f0a0:	4621      	mov	r1, r4
 800f0a2:	f7f1 fa55 	bl	8000550 <__aeabi_dmul>
 800f0a6:	a33e      	add	r3, pc, #248	; (adr r3, 800f1a0 <__kernel_sin+0x138>)
 800f0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ac:	4680      	mov	r8, r0
 800f0ae:	4689      	mov	r9, r1
 800f0b0:	4630      	mov	r0, r6
 800f0b2:	4639      	mov	r1, r7
 800f0b4:	f7f1 fa4c 	bl	8000550 <__aeabi_dmul>
 800f0b8:	a33b      	add	r3, pc, #236	; (adr r3, 800f1a8 <__kernel_sin+0x140>)
 800f0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0be:	f7f1 f88f 	bl	80001e0 <__aeabi_dsub>
 800f0c2:	4632      	mov	r2, r6
 800f0c4:	463b      	mov	r3, r7
 800f0c6:	f7f1 fa43 	bl	8000550 <__aeabi_dmul>
 800f0ca:	a339      	add	r3, pc, #228	; (adr r3, 800f1b0 <__kernel_sin+0x148>)
 800f0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d0:	f7f1 f888 	bl	80001e4 <__adddf3>
 800f0d4:	4632      	mov	r2, r6
 800f0d6:	463b      	mov	r3, r7
 800f0d8:	f7f1 fa3a 	bl	8000550 <__aeabi_dmul>
 800f0dc:	a336      	add	r3, pc, #216	; (adr r3, 800f1b8 <__kernel_sin+0x150>)
 800f0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e2:	f7f1 f87d 	bl	80001e0 <__aeabi_dsub>
 800f0e6:	4632      	mov	r2, r6
 800f0e8:	463b      	mov	r3, r7
 800f0ea:	f7f1 fa31 	bl	8000550 <__aeabi_dmul>
 800f0ee:	a334      	add	r3, pc, #208	; (adr r3, 800f1c0 <__kernel_sin+0x158>)
 800f0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f4:	f7f1 f876 	bl	80001e4 <__adddf3>
 800f0f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0fc:	b9dd      	cbnz	r5, 800f136 <__kernel_sin+0xce>
 800f0fe:	4602      	mov	r2, r0
 800f100:	460b      	mov	r3, r1
 800f102:	4630      	mov	r0, r6
 800f104:	4639      	mov	r1, r7
 800f106:	f7f1 fa23 	bl	8000550 <__aeabi_dmul>
 800f10a:	a32f      	add	r3, pc, #188	; (adr r3, 800f1c8 <__kernel_sin+0x160>)
 800f10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f110:	f7f1 f866 	bl	80001e0 <__aeabi_dsub>
 800f114:	4642      	mov	r2, r8
 800f116:	464b      	mov	r3, r9
 800f118:	f7f1 fa1a 	bl	8000550 <__aeabi_dmul>
 800f11c:	4602      	mov	r2, r0
 800f11e:	460b      	mov	r3, r1
 800f120:	4650      	mov	r0, sl
 800f122:	4621      	mov	r1, r4
 800f124:	f7f1 f85e 	bl	80001e4 <__adddf3>
 800f128:	4682      	mov	sl, r0
 800f12a:	460c      	mov	r4, r1
 800f12c:	4650      	mov	r0, sl
 800f12e:	4621      	mov	r1, r4
 800f130:	b006      	add	sp, #24
 800f132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f136:	2200      	movs	r2, #0
 800f138:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f13c:	4b24      	ldr	r3, [pc, #144]	; (800f1d0 <__kernel_sin+0x168>)
 800f13e:	f7f1 fa07 	bl	8000550 <__aeabi_dmul>
 800f142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f146:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f14a:	4640      	mov	r0, r8
 800f14c:	4649      	mov	r1, r9
 800f14e:	f7f1 f9ff 	bl	8000550 <__aeabi_dmul>
 800f152:	4602      	mov	r2, r0
 800f154:	460b      	mov	r3, r1
 800f156:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f15a:	f7f1 f841 	bl	80001e0 <__aeabi_dsub>
 800f15e:	4632      	mov	r2, r6
 800f160:	463b      	mov	r3, r7
 800f162:	f7f1 f9f5 	bl	8000550 <__aeabi_dmul>
 800f166:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f16a:	f7f1 f839 	bl	80001e0 <__aeabi_dsub>
 800f16e:	a316      	add	r3, pc, #88	; (adr r3, 800f1c8 <__kernel_sin+0x160>)
 800f170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f174:	4606      	mov	r6, r0
 800f176:	460f      	mov	r7, r1
 800f178:	4640      	mov	r0, r8
 800f17a:	4649      	mov	r1, r9
 800f17c:	f7f1 f9e8 	bl	8000550 <__aeabi_dmul>
 800f180:	4602      	mov	r2, r0
 800f182:	460b      	mov	r3, r1
 800f184:	4630      	mov	r0, r6
 800f186:	4639      	mov	r1, r7
 800f188:	f7f1 f82c 	bl	80001e4 <__adddf3>
 800f18c:	4602      	mov	r2, r0
 800f18e:	460b      	mov	r3, r1
 800f190:	4650      	mov	r0, sl
 800f192:	4621      	mov	r1, r4
 800f194:	f7f1 f824 	bl	80001e0 <__aeabi_dsub>
 800f198:	e7c6      	b.n	800f128 <__kernel_sin+0xc0>
 800f19a:	bf00      	nop
 800f19c:	f3af 8000 	nop.w
 800f1a0:	5acfd57c 	.word	0x5acfd57c
 800f1a4:	3de5d93a 	.word	0x3de5d93a
 800f1a8:	8a2b9ceb 	.word	0x8a2b9ceb
 800f1ac:	3e5ae5e6 	.word	0x3e5ae5e6
 800f1b0:	57b1fe7d 	.word	0x57b1fe7d
 800f1b4:	3ec71de3 	.word	0x3ec71de3
 800f1b8:	19c161d5 	.word	0x19c161d5
 800f1bc:	3f2a01a0 	.word	0x3f2a01a0
 800f1c0:	1110f8a6 	.word	0x1110f8a6
 800f1c4:	3f811111 	.word	0x3f811111
 800f1c8:	55555549 	.word	0x55555549
 800f1cc:	3fc55555 	.word	0x3fc55555
 800f1d0:	3fe00000 	.word	0x3fe00000

0800f1d4 <__kernel_cosf>:
 800f1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d8:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800f1dc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800f1e0:	4606      	mov	r6, r0
 800f1e2:	4688      	mov	r8, r1
 800f1e4:	da03      	bge.n	800f1ee <__kernel_cosf+0x1a>
 800f1e6:	f7f1 ffe5 	bl	80011b4 <__aeabi_f2iz>
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	d05c      	beq.n	800f2a8 <__kernel_cosf+0xd4>
 800f1ee:	4631      	mov	r1, r6
 800f1f0:	4630      	mov	r0, r6
 800f1f2:	f7f1 fe03 	bl	8000dfc <__aeabi_fmul>
 800f1f6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f1fa:	4605      	mov	r5, r0
 800f1fc:	f7f1 fdfe 	bl	8000dfc <__aeabi_fmul>
 800f200:	492b      	ldr	r1, [pc, #172]	; (800f2b0 <__kernel_cosf+0xdc>)
 800f202:	4607      	mov	r7, r0
 800f204:	4628      	mov	r0, r5
 800f206:	f7f1 fdf9 	bl	8000dfc <__aeabi_fmul>
 800f20a:	492a      	ldr	r1, [pc, #168]	; (800f2b4 <__kernel_cosf+0xe0>)
 800f20c:	f7f1 fcee 	bl	8000bec <__addsf3>
 800f210:	4629      	mov	r1, r5
 800f212:	f7f1 fdf3 	bl	8000dfc <__aeabi_fmul>
 800f216:	4928      	ldr	r1, [pc, #160]	; (800f2b8 <__kernel_cosf+0xe4>)
 800f218:	f7f1 fce6 	bl	8000be8 <__aeabi_fsub>
 800f21c:	4629      	mov	r1, r5
 800f21e:	f7f1 fded 	bl	8000dfc <__aeabi_fmul>
 800f222:	4926      	ldr	r1, [pc, #152]	; (800f2bc <__kernel_cosf+0xe8>)
 800f224:	f7f1 fce2 	bl	8000bec <__addsf3>
 800f228:	4629      	mov	r1, r5
 800f22a:	f7f1 fde7 	bl	8000dfc <__aeabi_fmul>
 800f22e:	4924      	ldr	r1, [pc, #144]	; (800f2c0 <__kernel_cosf+0xec>)
 800f230:	f7f1 fcda 	bl	8000be8 <__aeabi_fsub>
 800f234:	4629      	mov	r1, r5
 800f236:	f7f1 fde1 	bl	8000dfc <__aeabi_fmul>
 800f23a:	4922      	ldr	r1, [pc, #136]	; (800f2c4 <__kernel_cosf+0xf0>)
 800f23c:	f7f1 fcd6 	bl	8000bec <__addsf3>
 800f240:	4629      	mov	r1, r5
 800f242:	f7f1 fddb 	bl	8000dfc <__aeabi_fmul>
 800f246:	4629      	mov	r1, r5
 800f248:	f7f1 fdd8 	bl	8000dfc <__aeabi_fmul>
 800f24c:	4641      	mov	r1, r8
 800f24e:	4605      	mov	r5, r0
 800f250:	4630      	mov	r0, r6
 800f252:	f7f1 fdd3 	bl	8000dfc <__aeabi_fmul>
 800f256:	4601      	mov	r1, r0
 800f258:	4628      	mov	r0, r5
 800f25a:	f7f1 fcc5 	bl	8000be8 <__aeabi_fsub>
 800f25e:	4b1a      	ldr	r3, [pc, #104]	; (800f2c8 <__kernel_cosf+0xf4>)
 800f260:	4605      	mov	r5, r0
 800f262:	429c      	cmp	r4, r3
 800f264:	dc0a      	bgt.n	800f27c <__kernel_cosf+0xa8>
 800f266:	4601      	mov	r1, r0
 800f268:	4638      	mov	r0, r7
 800f26a:	f7f1 fcbd 	bl	8000be8 <__aeabi_fsub>
 800f26e:	4601      	mov	r1, r0
 800f270:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f274:	f7f1 fcb8 	bl	8000be8 <__aeabi_fsub>
 800f278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f27c:	4b13      	ldr	r3, [pc, #76]	; (800f2cc <__kernel_cosf+0xf8>)
 800f27e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f282:	429c      	cmp	r4, r3
 800f284:	bfcc      	ite	gt
 800f286:	4c12      	ldrgt	r4, [pc, #72]	; (800f2d0 <__kernel_cosf+0xfc>)
 800f288:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800f28c:	4621      	mov	r1, r4
 800f28e:	f7f1 fcab 	bl	8000be8 <__aeabi_fsub>
 800f292:	4621      	mov	r1, r4
 800f294:	4606      	mov	r6, r0
 800f296:	4638      	mov	r0, r7
 800f298:	f7f1 fca6 	bl	8000be8 <__aeabi_fsub>
 800f29c:	4629      	mov	r1, r5
 800f29e:	f7f1 fca3 	bl	8000be8 <__aeabi_fsub>
 800f2a2:	4601      	mov	r1, r0
 800f2a4:	4630      	mov	r0, r6
 800f2a6:	e7e5      	b.n	800f274 <__kernel_cosf+0xa0>
 800f2a8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f2ac:	e7e4      	b.n	800f278 <__kernel_cosf+0xa4>
 800f2ae:	bf00      	nop
 800f2b0:	ad47d74e 	.word	0xad47d74e
 800f2b4:	310f74f6 	.word	0x310f74f6
 800f2b8:	3493f27c 	.word	0x3493f27c
 800f2bc:	37d00d01 	.word	0x37d00d01
 800f2c0:	3ab60b61 	.word	0x3ab60b61
 800f2c4:	3d2aaaab 	.word	0x3d2aaaab
 800f2c8:	3e999999 	.word	0x3e999999
 800f2cc:	3f480000 	.word	0x3f480000
 800f2d0:	3e900000 	.word	0x3e900000

0800f2d4 <__kernel_rem_pio2f>:
 800f2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2d8:	b0db      	sub	sp, #364	; 0x16c
 800f2da:	9202      	str	r2, [sp, #8]
 800f2dc:	9304      	str	r3, [sp, #16]
 800f2de:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f2e0:	4bc5      	ldr	r3, [pc, #788]	; (800f5f8 <__kernel_rem_pio2f+0x324>)
 800f2e2:	9005      	str	r0, [sp, #20]
 800f2e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2e8:	9100      	str	r1, [sp, #0]
 800f2ea:	9301      	str	r3, [sp, #4]
 800f2ec:	9b04      	ldr	r3, [sp, #16]
 800f2ee:	3b01      	subs	r3, #1
 800f2f0:	9303      	str	r3, [sp, #12]
 800f2f2:	9b02      	ldr	r3, [sp, #8]
 800f2f4:	1d1a      	adds	r2, r3, #4
 800f2f6:	f2c0 809b 	blt.w	800f430 <__kernel_rem_pio2f+0x15c>
 800f2fa:	1edc      	subs	r4, r3, #3
 800f2fc:	bf48      	it	mi
 800f2fe:	1d1c      	addmi	r4, r3, #4
 800f300:	10e4      	asrs	r4, r4, #3
 800f302:	2500      	movs	r5, #0
 800f304:	f04f 0a00 	mov.w	sl, #0
 800f308:	1c67      	adds	r7, r4, #1
 800f30a:	00fb      	lsls	r3, r7, #3
 800f30c:	9306      	str	r3, [sp, #24]
 800f30e:	9b02      	ldr	r3, [sp, #8]
 800f310:	9a03      	ldr	r2, [sp, #12]
 800f312:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800f316:	9b01      	ldr	r3, [sp, #4]
 800f318:	1aa6      	subs	r6, r4, r2
 800f31a:	eb03 0802 	add.w	r8, r3, r2
 800f31e:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800f320:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800f324:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800f328:	4545      	cmp	r5, r8
 800f32a:	f340 8083 	ble.w	800f434 <__kernel_rem_pio2f+0x160>
 800f32e:	f04f 0800 	mov.w	r8, #0
 800f332:	f04f 0b00 	mov.w	fp, #0
 800f336:	9b04      	ldr	r3, [sp, #16]
 800f338:	aa1e      	add	r2, sp, #120	; 0x78
 800f33a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800f33e:	ab46      	add	r3, sp, #280	; 0x118
 800f340:	9a01      	ldr	r2, [sp, #4]
 800f342:	4590      	cmp	r8, r2
 800f344:	f340 809c 	ble.w	800f480 <__kernel_rem_pio2f+0x1ac>
 800f348:	4613      	mov	r3, r2
 800f34a:	aa0a      	add	r2, sp, #40	; 0x28
 800f34c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f350:	9308      	str	r3, [sp, #32]
 800f352:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800f354:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f358:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f35c:	9307      	str	r3, [sp, #28]
 800f35e:	ad0a      	add	r5, sp, #40	; 0x28
 800f360:	462e      	mov	r6, r5
 800f362:	46c3      	mov	fp, r8
 800f364:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800f368:	ab5a      	add	r3, sp, #360	; 0x168
 800f36a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800f36e:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800f372:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800f376:	f1bb 0f00 	cmp.w	fp, #0
 800f37a:	f300 8086 	bgt.w	800f48a <__kernel_rem_pio2f+0x1b6>
 800f37e:	4639      	mov	r1, r7
 800f380:	4620      	mov	r0, r4
 800f382:	f000 fc25 	bl	800fbd0 <scalbnf>
 800f386:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800f38a:	4604      	mov	r4, r0
 800f38c:	f7f1 fd36 	bl	8000dfc <__aeabi_fmul>
 800f390:	f000 fbd8 	bl	800fb44 <floorf>
 800f394:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800f398:	f7f1 fd30 	bl	8000dfc <__aeabi_fmul>
 800f39c:	4601      	mov	r1, r0
 800f39e:	4620      	mov	r0, r4
 800f3a0:	f7f1 fc22 	bl	8000be8 <__aeabi_fsub>
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	f7f1 ff05 	bl	80011b4 <__aeabi_f2iz>
 800f3aa:	4606      	mov	r6, r0
 800f3ac:	f7f1 fcd2 	bl	8000d54 <__aeabi_i2f>
 800f3b0:	4601      	mov	r1, r0
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	f7f1 fc18 	bl	8000be8 <__aeabi_fsub>
 800f3b8:	2f00      	cmp	r7, #0
 800f3ba:	4681      	mov	r9, r0
 800f3bc:	f340 8084 	ble.w	800f4c8 <__kernel_rem_pio2f+0x1f4>
 800f3c0:	f108 32ff 	add.w	r2, r8, #4294967295
 800f3c4:	ab0a      	add	r3, sp, #40	; 0x28
 800f3c6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800f3ca:	f1c7 0108 	rsb	r1, r7, #8
 800f3ce:	fa44 f301 	asr.w	r3, r4, r1
 800f3d2:	441e      	add	r6, r3
 800f3d4:	408b      	lsls	r3, r1
 800f3d6:	1ae4      	subs	r4, r4, r3
 800f3d8:	f1c7 0007 	rsb	r0, r7, #7
 800f3dc:	ab0a      	add	r3, sp, #40	; 0x28
 800f3de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f3e2:	4104      	asrs	r4, r0
 800f3e4:	2c00      	cmp	r4, #0
 800f3e6:	dd7e      	ble.n	800f4e6 <__kernel_rem_pio2f+0x212>
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	4692      	mov	sl, r2
 800f3ec:	3601      	adds	r6, #1
 800f3ee:	4590      	cmp	r8, r2
 800f3f0:	f300 80b0 	bgt.w	800f554 <__kernel_rem_pio2f+0x280>
 800f3f4:	2f00      	cmp	r7, #0
 800f3f6:	dd05      	ble.n	800f404 <__kernel_rem_pio2f+0x130>
 800f3f8:	2f01      	cmp	r7, #1
 800f3fa:	f000 80bd 	beq.w	800f578 <__kernel_rem_pio2f+0x2a4>
 800f3fe:	2f02      	cmp	r7, #2
 800f400:	f000 80c5 	beq.w	800f58e <__kernel_rem_pio2f+0x2ba>
 800f404:	2c02      	cmp	r4, #2
 800f406:	d16e      	bne.n	800f4e6 <__kernel_rem_pio2f+0x212>
 800f408:	4649      	mov	r1, r9
 800f40a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f40e:	f7f1 fbeb 	bl	8000be8 <__aeabi_fsub>
 800f412:	4681      	mov	r9, r0
 800f414:	f1ba 0f00 	cmp.w	sl, #0
 800f418:	d065      	beq.n	800f4e6 <__kernel_rem_pio2f+0x212>
 800f41a:	4639      	mov	r1, r7
 800f41c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f420:	f000 fbd6 	bl	800fbd0 <scalbnf>
 800f424:	4601      	mov	r1, r0
 800f426:	4648      	mov	r0, r9
 800f428:	f7f1 fbde 	bl	8000be8 <__aeabi_fsub>
 800f42c:	4681      	mov	r9, r0
 800f42e:	e05a      	b.n	800f4e6 <__kernel_rem_pio2f+0x212>
 800f430:	2400      	movs	r4, #0
 800f432:	e766      	b.n	800f302 <__kernel_rem_pio2f+0x2e>
 800f434:	42ee      	cmn	r6, r5
 800f436:	d407      	bmi.n	800f448 <__kernel_rem_pio2f+0x174>
 800f438:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f43c:	f7f1 fc8a 	bl	8000d54 <__aeabi_i2f>
 800f440:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800f444:	3501      	adds	r5, #1
 800f446:	e76f      	b.n	800f328 <__kernel_rem_pio2f+0x54>
 800f448:	4650      	mov	r0, sl
 800f44a:	e7f9      	b.n	800f440 <__kernel_rem_pio2f+0x16c>
 800f44c:	9b05      	ldr	r3, [sp, #20]
 800f44e:	f8da 1000 	ldr.w	r1, [sl]
 800f452:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800f456:	f7f1 fcd1 	bl	8000dfc <__aeabi_fmul>
 800f45a:	4601      	mov	r1, r0
 800f45c:	4630      	mov	r0, r6
 800f45e:	f7f1 fbc5 	bl	8000bec <__addsf3>
 800f462:	4606      	mov	r6, r0
 800f464:	f109 0901 	add.w	r9, r9, #1
 800f468:	ab46      	add	r3, sp, #280	; 0x118
 800f46a:	9a03      	ldr	r2, [sp, #12]
 800f46c:	f1aa 0a04 	sub.w	sl, sl, #4
 800f470:	4591      	cmp	r9, r2
 800f472:	ddeb      	ble.n	800f44c <__kernel_rem_pio2f+0x178>
 800f474:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f478:	3504      	adds	r5, #4
 800f47a:	f108 0801 	add.w	r8, r8, #1
 800f47e:	e75f      	b.n	800f340 <__kernel_rem_pio2f+0x6c>
 800f480:	46aa      	mov	sl, r5
 800f482:	465e      	mov	r6, fp
 800f484:	f04f 0900 	mov.w	r9, #0
 800f488:	e7ef      	b.n	800f46a <__kernel_rem_pio2f+0x196>
 800f48a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f48e:	4620      	mov	r0, r4
 800f490:	f7f1 fcb4 	bl	8000dfc <__aeabi_fmul>
 800f494:	f7f1 fe8e 	bl	80011b4 <__aeabi_f2iz>
 800f498:	f7f1 fc5c 	bl	8000d54 <__aeabi_i2f>
 800f49c:	4649      	mov	r1, r9
 800f49e:	9009      	str	r0, [sp, #36]	; 0x24
 800f4a0:	f7f1 fcac 	bl	8000dfc <__aeabi_fmul>
 800f4a4:	4601      	mov	r1, r0
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	f7f1 fb9e 	bl	8000be8 <__aeabi_fsub>
 800f4ac:	f7f1 fe82 	bl	80011b4 <__aeabi_f2iz>
 800f4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f4b6:	f846 0b04 	str.w	r0, [r6], #4
 800f4ba:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7f1 fb94 	bl	8000bec <__addsf3>
 800f4c4:	4604      	mov	r4, r0
 800f4c6:	e756      	b.n	800f376 <__kernel_rem_pio2f+0xa2>
 800f4c8:	d106      	bne.n	800f4d8 <__kernel_rem_pio2f+0x204>
 800f4ca:	f108 33ff 	add.w	r3, r8, #4294967295
 800f4ce:	aa0a      	add	r2, sp, #40	; 0x28
 800f4d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f4d4:	1224      	asrs	r4, r4, #8
 800f4d6:	e785      	b.n	800f3e4 <__kernel_rem_pio2f+0x110>
 800f4d8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f4dc:	f7f1 fe40 	bl	8001160 <__aeabi_fcmpge>
 800f4e0:	4604      	mov	r4, r0
 800f4e2:	2800      	cmp	r0, #0
 800f4e4:	d134      	bne.n	800f550 <__kernel_rem_pio2f+0x27c>
 800f4e6:	2100      	movs	r1, #0
 800f4e8:	4648      	mov	r0, r9
 800f4ea:	f7f1 fe1b 	bl	8001124 <__aeabi_fcmpeq>
 800f4ee:	2800      	cmp	r0, #0
 800f4f0:	f000 809a 	beq.w	800f628 <__kernel_rem_pio2f+0x354>
 800f4f4:	f108 35ff 	add.w	r5, r8, #4294967295
 800f4f8:	462b      	mov	r3, r5
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	9901      	ldr	r1, [sp, #4]
 800f4fe:	428b      	cmp	r3, r1
 800f500:	da4d      	bge.n	800f59e <__kernel_rem_pio2f+0x2ca>
 800f502:	2a00      	cmp	r2, #0
 800f504:	d07c      	beq.n	800f600 <__kernel_rem_pio2f+0x32c>
 800f506:	ab0a      	add	r3, sp, #40	; 0x28
 800f508:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f50c:	3f08      	subs	r7, #8
 800f50e:	2b00      	cmp	r3, #0
 800f510:	f000 8088 	beq.w	800f624 <__kernel_rem_pio2f+0x350>
 800f514:	4639      	mov	r1, r7
 800f516:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f51a:	f000 fb59 	bl	800fbd0 <scalbnf>
 800f51e:	46aa      	mov	sl, r5
 800f520:	4681      	mov	r9, r0
 800f522:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800f526:	af46      	add	r7, sp, #280	; 0x118
 800f528:	f1ba 0f00 	cmp.w	sl, #0
 800f52c:	f280 80b1 	bge.w	800f692 <__kernel_rem_pio2f+0x3be>
 800f530:	46a9      	mov	r9, r5
 800f532:	f04f 0a00 	mov.w	sl, #0
 800f536:	2200      	movs	r2, #0
 800f538:	f1b9 0f00 	cmp.w	r9, #0
 800f53c:	f2c0 80db 	blt.w	800f6f6 <__kernel_rem_pio2f+0x422>
 800f540:	a946      	add	r1, sp, #280	; 0x118
 800f542:	4617      	mov	r7, r2
 800f544:	f04f 0800 	mov.w	r8, #0
 800f548:	4b2c      	ldr	r3, [pc, #176]	; (800f5fc <__kernel_rem_pio2f+0x328>)
 800f54a:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800f54e:	e0c3      	b.n	800f6d8 <__kernel_rem_pio2f+0x404>
 800f550:	2402      	movs	r4, #2
 800f552:	e749      	b.n	800f3e8 <__kernel_rem_pio2f+0x114>
 800f554:	682b      	ldr	r3, [r5, #0]
 800f556:	f1ba 0f00 	cmp.w	sl, #0
 800f55a:	d108      	bne.n	800f56e <__kernel_rem_pio2f+0x29a>
 800f55c:	b11b      	cbz	r3, 800f566 <__kernel_rem_pio2f+0x292>
 800f55e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800f562:	602b      	str	r3, [r5, #0]
 800f564:	2301      	movs	r3, #1
 800f566:	469a      	mov	sl, r3
 800f568:	3201      	adds	r2, #1
 800f56a:	3504      	adds	r5, #4
 800f56c:	e73f      	b.n	800f3ee <__kernel_rem_pio2f+0x11a>
 800f56e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f572:	602b      	str	r3, [r5, #0]
 800f574:	4653      	mov	r3, sl
 800f576:	e7f6      	b.n	800f566 <__kernel_rem_pio2f+0x292>
 800f578:	f108 32ff 	add.w	r2, r8, #4294967295
 800f57c:	ab0a      	add	r3, sp, #40	; 0x28
 800f57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f586:	a90a      	add	r1, sp, #40	; 0x28
 800f588:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f58c:	e73a      	b.n	800f404 <__kernel_rem_pio2f+0x130>
 800f58e:	f108 32ff 	add.w	r2, r8, #4294967295
 800f592:	ab0a      	add	r3, sp, #40	; 0x28
 800f594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f59c:	e7f3      	b.n	800f586 <__kernel_rem_pio2f+0x2b2>
 800f59e:	a90a      	add	r1, sp, #40	; 0x28
 800f5a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f5a4:	3b01      	subs	r3, #1
 800f5a6:	430a      	orrs	r2, r1
 800f5a8:	e7a8      	b.n	800f4fc <__kernel_rem_pio2f+0x228>
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f5b0:	2900      	cmp	r1, #0
 800f5b2:	d0fa      	beq.n	800f5aa <__kernel_rem_pio2f+0x2d6>
 800f5b4:	9a04      	ldr	r2, [sp, #16]
 800f5b6:	f108 0501 	add.w	r5, r8, #1
 800f5ba:	eb08 0402 	add.w	r4, r8, r2
 800f5be:	aa1e      	add	r2, sp, #120	; 0x78
 800f5c0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f5c4:	4498      	add	r8, r3
 800f5c6:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800f5ca:	45a8      	cmp	r8, r5
 800f5cc:	f6ff aec7 	blt.w	800f35e <__kernel_rem_pio2f+0x8a>
 800f5d0:	9b07      	ldr	r3, [sp, #28]
 800f5d2:	46a3      	mov	fp, r4
 800f5d4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f5d8:	f7f1 fbbc 	bl	8000d54 <__aeabi_i2f>
 800f5dc:	f04f 0a00 	mov.w	sl, #0
 800f5e0:	2600      	movs	r6, #0
 800f5e2:	f84b 0b04 	str.w	r0, [fp], #4
 800f5e6:	9b03      	ldr	r3, [sp, #12]
 800f5e8:	459a      	cmp	sl, r3
 800f5ea:	dd0c      	ble.n	800f606 <__kernel_rem_pio2f+0x332>
 800f5ec:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800f5f0:	465c      	mov	r4, fp
 800f5f2:	3501      	adds	r5, #1
 800f5f4:	e7e9      	b.n	800f5ca <__kernel_rem_pio2f+0x2f6>
 800f5f6:	bf00      	nop
 800f5f8:	08013954 	.word	0x08013954
 800f5fc:	08013928 	.word	0x08013928
 800f600:	2301      	movs	r3, #1
 800f602:	9a08      	ldr	r2, [sp, #32]
 800f604:	e7d2      	b.n	800f5ac <__kernel_rem_pio2f+0x2d8>
 800f606:	9b05      	ldr	r3, [sp, #20]
 800f608:	f854 0904 	ldr.w	r0, [r4], #-4
 800f60c:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800f610:	f7f1 fbf4 	bl	8000dfc <__aeabi_fmul>
 800f614:	4601      	mov	r1, r0
 800f616:	4630      	mov	r0, r6
 800f618:	f7f1 fae8 	bl	8000bec <__addsf3>
 800f61c:	f10a 0a01 	add.w	sl, sl, #1
 800f620:	4606      	mov	r6, r0
 800f622:	e7e0      	b.n	800f5e6 <__kernel_rem_pio2f+0x312>
 800f624:	3d01      	subs	r5, #1
 800f626:	e76e      	b.n	800f506 <__kernel_rem_pio2f+0x232>
 800f628:	9b06      	ldr	r3, [sp, #24]
 800f62a:	9a02      	ldr	r2, [sp, #8]
 800f62c:	4648      	mov	r0, r9
 800f62e:	1a99      	subs	r1, r3, r2
 800f630:	f000 face 	bl	800fbd0 <scalbnf>
 800f634:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f638:	4605      	mov	r5, r0
 800f63a:	f7f1 fd91 	bl	8001160 <__aeabi_fcmpge>
 800f63e:	b300      	cbz	r0, 800f682 <__kernel_rem_pio2f+0x3ae>
 800f640:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f644:	4628      	mov	r0, r5
 800f646:	f7f1 fbd9 	bl	8000dfc <__aeabi_fmul>
 800f64a:	f7f1 fdb3 	bl	80011b4 <__aeabi_f2iz>
 800f64e:	f7f1 fb81 	bl	8000d54 <__aeabi_i2f>
 800f652:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f656:	4681      	mov	r9, r0
 800f658:	f7f1 fbd0 	bl	8000dfc <__aeabi_fmul>
 800f65c:	4601      	mov	r1, r0
 800f65e:	4628      	mov	r0, r5
 800f660:	f7f1 fac2 	bl	8000be8 <__aeabi_fsub>
 800f664:	f7f1 fda6 	bl	80011b4 <__aeabi_f2iz>
 800f668:	ab0a      	add	r3, sp, #40	; 0x28
 800f66a:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f66e:	4648      	mov	r0, r9
 800f670:	f7f1 fda0 	bl	80011b4 <__aeabi_f2iz>
 800f674:	f108 0501 	add.w	r5, r8, #1
 800f678:	ab0a      	add	r3, sp, #40	; 0x28
 800f67a:	3708      	adds	r7, #8
 800f67c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800f680:	e748      	b.n	800f514 <__kernel_rem_pio2f+0x240>
 800f682:	4628      	mov	r0, r5
 800f684:	f7f1 fd96 	bl	80011b4 <__aeabi_f2iz>
 800f688:	ab0a      	add	r3, sp, #40	; 0x28
 800f68a:	4645      	mov	r5, r8
 800f68c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f690:	e740      	b.n	800f514 <__kernel_rem_pio2f+0x240>
 800f692:	ab0a      	add	r3, sp, #40	; 0x28
 800f694:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f698:	f7f1 fb5c 	bl	8000d54 <__aeabi_i2f>
 800f69c:	4649      	mov	r1, r9
 800f69e:	f7f1 fbad 	bl	8000dfc <__aeabi_fmul>
 800f6a2:	4641      	mov	r1, r8
 800f6a4:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800f6a8:	4648      	mov	r0, r9
 800f6aa:	f7f1 fba7 	bl	8000dfc <__aeabi_fmul>
 800f6ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6b2:	4681      	mov	r9, r0
 800f6b4:	e738      	b.n	800f528 <__kernel_rem_pio2f+0x254>
 800f6b6:	f853 0b04 	ldr.w	r0, [r3], #4
 800f6ba:	f85b 1b04 	ldr.w	r1, [fp], #4
 800f6be:	9203      	str	r2, [sp, #12]
 800f6c0:	9302      	str	r3, [sp, #8]
 800f6c2:	f7f1 fb9b 	bl	8000dfc <__aeabi_fmul>
 800f6c6:	4601      	mov	r1, r0
 800f6c8:	4638      	mov	r0, r7
 800f6ca:	f7f1 fa8f 	bl	8000bec <__addsf3>
 800f6ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f6d2:	4607      	mov	r7, r0
 800f6d4:	f108 0801 	add.w	r8, r8, #1
 800f6d8:	9901      	ldr	r1, [sp, #4]
 800f6da:	4588      	cmp	r8, r1
 800f6dc:	dc01      	bgt.n	800f6e2 <__kernel_rem_pio2f+0x40e>
 800f6de:	45c2      	cmp	sl, r8
 800f6e0:	dae9      	bge.n	800f6b6 <__kernel_rem_pio2f+0x3e2>
 800f6e2:	ab5a      	add	r3, sp, #360	; 0x168
 800f6e4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800f6e8:	f843 7ca0 	str.w	r7, [r3, #-160]
 800f6ec:	f109 39ff 	add.w	r9, r9, #4294967295
 800f6f0:	f10a 0a01 	add.w	sl, sl, #1
 800f6f4:	e720      	b.n	800f538 <__kernel_rem_pio2f+0x264>
 800f6f6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f6f8:	2b02      	cmp	r3, #2
 800f6fa:	dc07      	bgt.n	800f70c <__kernel_rem_pio2f+0x438>
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	dc4d      	bgt.n	800f79c <__kernel_rem_pio2f+0x4c8>
 800f700:	d02e      	beq.n	800f760 <__kernel_rem_pio2f+0x48c>
 800f702:	f006 0007 	and.w	r0, r6, #7
 800f706:	b05b      	add	sp, #364	; 0x16c
 800f708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f70c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f70e:	2b03      	cmp	r3, #3
 800f710:	d1f7      	bne.n	800f702 <__kernel_rem_pio2f+0x42e>
 800f712:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800f716:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800f71a:	46b8      	mov	r8, r7
 800f71c:	46aa      	mov	sl, r5
 800f71e:	f1ba 0f00 	cmp.w	sl, #0
 800f722:	dc48      	bgt.n	800f7b6 <__kernel_rem_pio2f+0x4e2>
 800f724:	46a9      	mov	r9, r5
 800f726:	f1b9 0f01 	cmp.w	r9, #1
 800f72a:	dc5f      	bgt.n	800f7ec <__kernel_rem_pio2f+0x518>
 800f72c:	2000      	movs	r0, #0
 800f72e:	2d01      	cmp	r5, #1
 800f730:	dc75      	bgt.n	800f81e <__kernel_rem_pio2f+0x54a>
 800f732:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800f734:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800f736:	2c00      	cmp	r4, #0
 800f738:	d177      	bne.n	800f82a <__kernel_rem_pio2f+0x556>
 800f73a:	9900      	ldr	r1, [sp, #0]
 800f73c:	600a      	str	r2, [r1, #0]
 800f73e:	460a      	mov	r2, r1
 800f740:	604b      	str	r3, [r1, #4]
 800f742:	6090      	str	r0, [r2, #8]
 800f744:	e7dd      	b.n	800f702 <__kernel_rem_pio2f+0x42e>
 800f746:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800f74a:	f7f1 fa4f 	bl	8000bec <__addsf3>
 800f74e:	3d01      	subs	r5, #1
 800f750:	2d00      	cmp	r5, #0
 800f752:	daf8      	bge.n	800f746 <__kernel_rem_pio2f+0x472>
 800f754:	b10c      	cbz	r4, 800f75a <__kernel_rem_pio2f+0x486>
 800f756:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f75a:	9b00      	ldr	r3, [sp, #0]
 800f75c:	6018      	str	r0, [r3, #0]
 800f75e:	e7d0      	b.n	800f702 <__kernel_rem_pio2f+0x42e>
 800f760:	2000      	movs	r0, #0
 800f762:	af32      	add	r7, sp, #200	; 0xc8
 800f764:	e7f4      	b.n	800f750 <__kernel_rem_pio2f+0x47c>
 800f766:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800f76a:	f7f1 fa3f 	bl	8000bec <__addsf3>
 800f76e:	3f01      	subs	r7, #1
 800f770:	2f00      	cmp	r7, #0
 800f772:	daf8      	bge.n	800f766 <__kernel_rem_pio2f+0x492>
 800f774:	b1bc      	cbz	r4, 800f7a6 <__kernel_rem_pio2f+0x4d2>
 800f776:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800f77a:	9a00      	ldr	r2, [sp, #0]
 800f77c:	4601      	mov	r1, r0
 800f77e:	6013      	str	r3, [r2, #0]
 800f780:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800f782:	f7f1 fa31 	bl	8000be8 <__aeabi_fsub>
 800f786:	2701      	movs	r7, #1
 800f788:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800f78c:	42bd      	cmp	r5, r7
 800f78e:	da0c      	bge.n	800f7aa <__kernel_rem_pio2f+0x4d6>
 800f790:	b10c      	cbz	r4, 800f796 <__kernel_rem_pio2f+0x4c2>
 800f792:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f796:	9b00      	ldr	r3, [sp, #0]
 800f798:	6058      	str	r0, [r3, #4]
 800f79a:	e7b2      	b.n	800f702 <__kernel_rem_pio2f+0x42e>
 800f79c:	462f      	mov	r7, r5
 800f79e:	2000      	movs	r0, #0
 800f7a0:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800f7a4:	e7e4      	b.n	800f770 <__kernel_rem_pio2f+0x49c>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	e7e7      	b.n	800f77a <__kernel_rem_pio2f+0x4a6>
 800f7aa:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800f7ae:	f7f1 fa1d 	bl	8000bec <__addsf3>
 800f7b2:	3701      	adds	r7, #1
 800f7b4:	e7ea      	b.n	800f78c <__kernel_rem_pio2f+0x4b8>
 800f7b6:	f8d8 3000 	ldr.w	r3, [r8]
 800f7ba:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800f7be:	4619      	mov	r1, r3
 800f7c0:	4610      	mov	r0, r2
 800f7c2:	9302      	str	r3, [sp, #8]
 800f7c4:	9201      	str	r2, [sp, #4]
 800f7c6:	f7f1 fa11 	bl	8000bec <__addsf3>
 800f7ca:	9a01      	ldr	r2, [sp, #4]
 800f7cc:	4601      	mov	r1, r0
 800f7ce:	4681      	mov	r9, r0
 800f7d0:	4610      	mov	r0, r2
 800f7d2:	f7f1 fa09 	bl	8000be8 <__aeabi_fsub>
 800f7d6:	9b02      	ldr	r3, [sp, #8]
 800f7d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7dc:	4619      	mov	r1, r3
 800f7de:	f7f1 fa05 	bl	8000bec <__addsf3>
 800f7e2:	f848 0904 	str.w	r0, [r8], #-4
 800f7e6:	f8c8 9000 	str.w	r9, [r8]
 800f7ea:	e798      	b.n	800f71e <__kernel_rem_pio2f+0x44a>
 800f7ec:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800f7f0:	f8d7 a000 	ldr.w	sl, [r7]
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	4651      	mov	r1, sl
 800f7f8:	9301      	str	r3, [sp, #4]
 800f7fa:	f7f1 f9f7 	bl	8000bec <__addsf3>
 800f7fe:	9b01      	ldr	r3, [sp, #4]
 800f800:	4601      	mov	r1, r0
 800f802:	4680      	mov	r8, r0
 800f804:	4618      	mov	r0, r3
 800f806:	f7f1 f9ef 	bl	8000be8 <__aeabi_fsub>
 800f80a:	4651      	mov	r1, sl
 800f80c:	f7f1 f9ee 	bl	8000bec <__addsf3>
 800f810:	f847 0904 	str.w	r0, [r7], #-4
 800f814:	f109 39ff 	add.w	r9, r9, #4294967295
 800f818:	f8c7 8000 	str.w	r8, [r7]
 800f81c:	e783      	b.n	800f726 <__kernel_rem_pio2f+0x452>
 800f81e:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800f822:	f7f1 f9e3 	bl	8000bec <__addsf3>
 800f826:	3d01      	subs	r5, #1
 800f828:	e781      	b.n	800f72e <__kernel_rem_pio2f+0x45a>
 800f82a:	9900      	ldr	r1, [sp, #0]
 800f82c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800f830:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f834:	600a      	str	r2, [r1, #0]
 800f836:	604b      	str	r3, [r1, #4]
 800f838:	460a      	mov	r2, r1
 800f83a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f83e:	e780      	b.n	800f742 <__kernel_rem_pio2f+0x46e>

0800f840 <__kernel_sinf>:
 800f840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f844:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f848:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f84c:	4604      	mov	r4, r0
 800f84e:	460f      	mov	r7, r1
 800f850:	4691      	mov	r9, r2
 800f852:	da03      	bge.n	800f85c <__kernel_sinf+0x1c>
 800f854:	f7f1 fcae 	bl	80011b4 <__aeabi_f2iz>
 800f858:	2800      	cmp	r0, #0
 800f85a:	d035      	beq.n	800f8c8 <__kernel_sinf+0x88>
 800f85c:	4621      	mov	r1, r4
 800f85e:	4620      	mov	r0, r4
 800f860:	f7f1 facc 	bl	8000dfc <__aeabi_fmul>
 800f864:	4605      	mov	r5, r0
 800f866:	4601      	mov	r1, r0
 800f868:	4620      	mov	r0, r4
 800f86a:	f7f1 fac7 	bl	8000dfc <__aeabi_fmul>
 800f86e:	4929      	ldr	r1, [pc, #164]	; (800f914 <__kernel_sinf+0xd4>)
 800f870:	4606      	mov	r6, r0
 800f872:	4628      	mov	r0, r5
 800f874:	f7f1 fac2 	bl	8000dfc <__aeabi_fmul>
 800f878:	4927      	ldr	r1, [pc, #156]	; (800f918 <__kernel_sinf+0xd8>)
 800f87a:	f7f1 f9b5 	bl	8000be8 <__aeabi_fsub>
 800f87e:	4629      	mov	r1, r5
 800f880:	f7f1 fabc 	bl	8000dfc <__aeabi_fmul>
 800f884:	4925      	ldr	r1, [pc, #148]	; (800f91c <__kernel_sinf+0xdc>)
 800f886:	f7f1 f9b1 	bl	8000bec <__addsf3>
 800f88a:	4629      	mov	r1, r5
 800f88c:	f7f1 fab6 	bl	8000dfc <__aeabi_fmul>
 800f890:	4923      	ldr	r1, [pc, #140]	; (800f920 <__kernel_sinf+0xe0>)
 800f892:	f7f1 f9a9 	bl	8000be8 <__aeabi_fsub>
 800f896:	4629      	mov	r1, r5
 800f898:	f7f1 fab0 	bl	8000dfc <__aeabi_fmul>
 800f89c:	4921      	ldr	r1, [pc, #132]	; (800f924 <__kernel_sinf+0xe4>)
 800f89e:	f7f1 f9a5 	bl	8000bec <__addsf3>
 800f8a2:	4680      	mov	r8, r0
 800f8a4:	f1b9 0f00 	cmp.w	r9, #0
 800f8a8:	d111      	bne.n	800f8ce <__kernel_sinf+0x8e>
 800f8aa:	4601      	mov	r1, r0
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	f7f1 faa5 	bl	8000dfc <__aeabi_fmul>
 800f8b2:	491d      	ldr	r1, [pc, #116]	; (800f928 <__kernel_sinf+0xe8>)
 800f8b4:	f7f1 f998 	bl	8000be8 <__aeabi_fsub>
 800f8b8:	4631      	mov	r1, r6
 800f8ba:	f7f1 fa9f 	bl	8000dfc <__aeabi_fmul>
 800f8be:	4601      	mov	r1, r0
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	f7f1 f993 	bl	8000bec <__addsf3>
 800f8c6:	4604      	mov	r4, r0
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8ce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f8d2:	4638      	mov	r0, r7
 800f8d4:	f7f1 fa92 	bl	8000dfc <__aeabi_fmul>
 800f8d8:	4641      	mov	r1, r8
 800f8da:	4681      	mov	r9, r0
 800f8dc:	4630      	mov	r0, r6
 800f8de:	f7f1 fa8d 	bl	8000dfc <__aeabi_fmul>
 800f8e2:	4601      	mov	r1, r0
 800f8e4:	4648      	mov	r0, r9
 800f8e6:	f7f1 f97f 	bl	8000be8 <__aeabi_fsub>
 800f8ea:	4629      	mov	r1, r5
 800f8ec:	f7f1 fa86 	bl	8000dfc <__aeabi_fmul>
 800f8f0:	4639      	mov	r1, r7
 800f8f2:	f7f1 f979 	bl	8000be8 <__aeabi_fsub>
 800f8f6:	490c      	ldr	r1, [pc, #48]	; (800f928 <__kernel_sinf+0xe8>)
 800f8f8:	4605      	mov	r5, r0
 800f8fa:	4630      	mov	r0, r6
 800f8fc:	f7f1 fa7e 	bl	8000dfc <__aeabi_fmul>
 800f900:	4601      	mov	r1, r0
 800f902:	4628      	mov	r0, r5
 800f904:	f7f1 f972 	bl	8000bec <__addsf3>
 800f908:	4601      	mov	r1, r0
 800f90a:	4620      	mov	r0, r4
 800f90c:	f7f1 f96c 	bl	8000be8 <__aeabi_fsub>
 800f910:	e7d9      	b.n	800f8c6 <__kernel_sinf+0x86>
 800f912:	bf00      	nop
 800f914:	2f2ec9d3 	.word	0x2f2ec9d3
 800f918:	32d72f34 	.word	0x32d72f34
 800f91c:	3638ef1b 	.word	0x3638ef1b
 800f920:	39500d01 	.word	0x39500d01
 800f924:	3c088889 	.word	0x3c088889
 800f928:	3e2aaaab 	.word	0x3e2aaaab

0800f92c <fabs>:
 800f92c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f930:	4770      	bx	lr
 800f932:	0000      	movs	r0, r0
 800f934:	0000      	movs	r0, r0
	...

0800f938 <floor>:
 800f938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f93c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800f940:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800f944:	2e13      	cmp	r6, #19
 800f946:	4602      	mov	r2, r0
 800f948:	460b      	mov	r3, r1
 800f94a:	4607      	mov	r7, r0
 800f94c:	460c      	mov	r4, r1
 800f94e:	4605      	mov	r5, r0
 800f950:	dc34      	bgt.n	800f9bc <floor+0x84>
 800f952:	2e00      	cmp	r6, #0
 800f954:	da15      	bge.n	800f982 <floor+0x4a>
 800f956:	a334      	add	r3, pc, #208	; (adr r3, 800fa28 <floor+0xf0>)
 800f958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95c:	f7f0 fc42 	bl	80001e4 <__adddf3>
 800f960:	2200      	movs	r2, #0
 800f962:	2300      	movs	r3, #0
 800f964:	f7f1 f884 	bl	8000a70 <__aeabi_dcmpgt>
 800f968:	b140      	cbz	r0, 800f97c <floor+0x44>
 800f96a:	2c00      	cmp	r4, #0
 800f96c:	da59      	bge.n	800fa22 <floor+0xea>
 800f96e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f972:	ea57 0503 	orrs.w	r5, r7, r3
 800f976:	d001      	beq.n	800f97c <floor+0x44>
 800f978:	2500      	movs	r5, #0
 800f97a:	4c2d      	ldr	r4, [pc, #180]	; (800fa30 <floor+0xf8>)
 800f97c:	4623      	mov	r3, r4
 800f97e:	462f      	mov	r7, r5
 800f980:	e025      	b.n	800f9ce <floor+0x96>
 800f982:	4a2c      	ldr	r2, [pc, #176]	; (800fa34 <floor+0xfc>)
 800f984:	fa42 f806 	asr.w	r8, r2, r6
 800f988:	ea01 0208 	and.w	r2, r1, r8
 800f98c:	4302      	orrs	r2, r0
 800f98e:	d01e      	beq.n	800f9ce <floor+0x96>
 800f990:	a325      	add	r3, pc, #148	; (adr r3, 800fa28 <floor+0xf0>)
 800f992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f996:	f7f0 fc25 	bl	80001e4 <__adddf3>
 800f99a:	2200      	movs	r2, #0
 800f99c:	2300      	movs	r3, #0
 800f99e:	f7f1 f867 	bl	8000a70 <__aeabi_dcmpgt>
 800f9a2:	2800      	cmp	r0, #0
 800f9a4:	d0ea      	beq.n	800f97c <floor+0x44>
 800f9a6:	2c00      	cmp	r4, #0
 800f9a8:	bfbe      	ittt	lt
 800f9aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f9ae:	fa43 f606 	asrlt.w	r6, r3, r6
 800f9b2:	19a4      	addlt	r4, r4, r6
 800f9b4:	2500      	movs	r5, #0
 800f9b6:	ea24 0408 	bic.w	r4, r4, r8
 800f9ba:	e7df      	b.n	800f97c <floor+0x44>
 800f9bc:	2e33      	cmp	r6, #51	; 0x33
 800f9be:	dd0a      	ble.n	800f9d6 <floor+0x9e>
 800f9c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f9c4:	d103      	bne.n	800f9ce <floor+0x96>
 800f9c6:	f7f0 fc0d 	bl	80001e4 <__adddf3>
 800f9ca:	4607      	mov	r7, r0
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	4638      	mov	r0, r7
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f9da:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800f9de:	fa22 f808 	lsr.w	r8, r2, r8
 800f9e2:	ea18 0f00 	tst.w	r8, r0
 800f9e6:	d0f2      	beq.n	800f9ce <floor+0x96>
 800f9e8:	a30f      	add	r3, pc, #60	; (adr r3, 800fa28 <floor+0xf0>)
 800f9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ee:	f7f0 fbf9 	bl	80001e4 <__adddf3>
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	f7f1 f83b 	bl	8000a70 <__aeabi_dcmpgt>
 800f9fa:	2800      	cmp	r0, #0
 800f9fc:	d0be      	beq.n	800f97c <floor+0x44>
 800f9fe:	2c00      	cmp	r4, #0
 800fa00:	da02      	bge.n	800fa08 <floor+0xd0>
 800fa02:	2e14      	cmp	r6, #20
 800fa04:	d103      	bne.n	800fa0e <floor+0xd6>
 800fa06:	3401      	adds	r4, #1
 800fa08:	ea25 0508 	bic.w	r5, r5, r8
 800fa0c:	e7b6      	b.n	800f97c <floor+0x44>
 800fa0e:	2301      	movs	r3, #1
 800fa10:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fa14:	fa03 f606 	lsl.w	r6, r3, r6
 800fa18:	4435      	add	r5, r6
 800fa1a:	42bd      	cmp	r5, r7
 800fa1c:	bf38      	it	cc
 800fa1e:	18e4      	addcc	r4, r4, r3
 800fa20:	e7f2      	b.n	800fa08 <floor+0xd0>
 800fa22:	2500      	movs	r5, #0
 800fa24:	462c      	mov	r4, r5
 800fa26:	e7a9      	b.n	800f97c <floor+0x44>
 800fa28:	8800759c 	.word	0x8800759c
 800fa2c:	7e37e43c 	.word	0x7e37e43c
 800fa30:	bff00000 	.word	0xbff00000
 800fa34:	000fffff 	.word	0x000fffff

0800fa38 <scalbn>:
 800fa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa3a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800fa3e:	4604      	mov	r4, r0
 800fa40:	460d      	mov	r5, r1
 800fa42:	4617      	mov	r7, r2
 800fa44:	460b      	mov	r3, r1
 800fa46:	b996      	cbnz	r6, 800fa6e <scalbn+0x36>
 800fa48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fa4c:	4303      	orrs	r3, r0
 800fa4e:	d039      	beq.n	800fac4 <scalbn+0x8c>
 800fa50:	4b35      	ldr	r3, [pc, #212]	; (800fb28 <scalbn+0xf0>)
 800fa52:	2200      	movs	r2, #0
 800fa54:	f7f0 fd7c 	bl	8000550 <__aeabi_dmul>
 800fa58:	4b34      	ldr	r3, [pc, #208]	; (800fb2c <scalbn+0xf4>)
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	429f      	cmp	r7, r3
 800fa5e:	460d      	mov	r5, r1
 800fa60:	da0f      	bge.n	800fa82 <scalbn+0x4a>
 800fa62:	a32d      	add	r3, pc, #180	; (adr r3, 800fb18 <scalbn+0xe0>)
 800fa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa68:	f7f0 fd72 	bl	8000550 <__aeabi_dmul>
 800fa6c:	e006      	b.n	800fa7c <scalbn+0x44>
 800fa6e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800fa72:	4296      	cmp	r6, r2
 800fa74:	d10a      	bne.n	800fa8c <scalbn+0x54>
 800fa76:	4602      	mov	r2, r0
 800fa78:	f7f0 fbb4 	bl	80001e4 <__adddf3>
 800fa7c:	4604      	mov	r4, r0
 800fa7e:	460d      	mov	r5, r1
 800fa80:	e020      	b.n	800fac4 <scalbn+0x8c>
 800fa82:	460b      	mov	r3, r1
 800fa84:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fa88:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800fa8c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800fa90:	19b9      	adds	r1, r7, r6
 800fa92:	4291      	cmp	r1, r2
 800fa94:	dd0e      	ble.n	800fab4 <scalbn+0x7c>
 800fa96:	a322      	add	r3, pc, #136	; (adr r3, 800fb20 <scalbn+0xe8>)
 800fa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa9c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800faa0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800faa4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800faa8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800faac:	4820      	ldr	r0, [pc, #128]	; (800fb30 <scalbn+0xf8>)
 800faae:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800fab2:	e7d9      	b.n	800fa68 <scalbn+0x30>
 800fab4:	2900      	cmp	r1, #0
 800fab6:	dd08      	ble.n	800faca <scalbn+0x92>
 800fab8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fabc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fac0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800fac4:	4620      	mov	r0, r4
 800fac6:	4629      	mov	r1, r5
 800fac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faca:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800face:	da16      	bge.n	800fafe <scalbn+0xc6>
 800fad0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fad4:	429f      	cmp	r7, r3
 800fad6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800fada:	dd08      	ble.n	800faee <scalbn+0xb6>
 800fadc:	4c15      	ldr	r4, [pc, #84]	; (800fb34 <scalbn+0xfc>)
 800fade:	4814      	ldr	r0, [pc, #80]	; (800fb30 <scalbn+0xf8>)
 800fae0:	f363 74df 	bfi	r4, r3, #31, #1
 800fae4:	a30e      	add	r3, pc, #56	; (adr r3, 800fb20 <scalbn+0xe8>)
 800fae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faea:	4621      	mov	r1, r4
 800faec:	e7bc      	b.n	800fa68 <scalbn+0x30>
 800faee:	4c12      	ldr	r4, [pc, #72]	; (800fb38 <scalbn+0x100>)
 800faf0:	4812      	ldr	r0, [pc, #72]	; (800fb3c <scalbn+0x104>)
 800faf2:	f363 74df 	bfi	r4, r3, #31, #1
 800faf6:	a308      	add	r3, pc, #32	; (adr r3, 800fb18 <scalbn+0xe0>)
 800faf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafc:	e7f5      	b.n	800faea <scalbn+0xb2>
 800fafe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fb02:	3136      	adds	r1, #54	; 0x36
 800fb04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fb08:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	4629      	mov	r1, r5
 800fb10:	2200      	movs	r2, #0
 800fb12:	4b0b      	ldr	r3, [pc, #44]	; (800fb40 <scalbn+0x108>)
 800fb14:	e7a8      	b.n	800fa68 <scalbn+0x30>
 800fb16:	bf00      	nop
 800fb18:	c2f8f359 	.word	0xc2f8f359
 800fb1c:	01a56e1f 	.word	0x01a56e1f
 800fb20:	8800759c 	.word	0x8800759c
 800fb24:	7e37e43c 	.word	0x7e37e43c
 800fb28:	43500000 	.word	0x43500000
 800fb2c:	ffff3cb0 	.word	0xffff3cb0
 800fb30:	8800759c 	.word	0x8800759c
 800fb34:	7e37e43c 	.word	0x7e37e43c
 800fb38:	01a56e1f 	.word	0x01a56e1f
 800fb3c:	c2f8f359 	.word	0xc2f8f359
 800fb40:	3c900000 	.word	0x3c900000

0800fb44 <floorf>:
 800fb44:	b570      	push	{r4, r5, r6, lr}
 800fb46:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800fb4a:	3d7f      	subs	r5, #127	; 0x7f
 800fb4c:	2d16      	cmp	r5, #22
 800fb4e:	4601      	mov	r1, r0
 800fb50:	4604      	mov	r4, r0
 800fb52:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800fb56:	dc26      	bgt.n	800fba6 <floorf+0x62>
 800fb58:	2d00      	cmp	r5, #0
 800fb5a:	da0e      	bge.n	800fb7a <floorf+0x36>
 800fb5c:	4917      	ldr	r1, [pc, #92]	; (800fbbc <floorf+0x78>)
 800fb5e:	f7f1 f845 	bl	8000bec <__addsf3>
 800fb62:	2100      	movs	r1, #0
 800fb64:	f7f1 fb06 	bl	8001174 <__aeabi_fcmpgt>
 800fb68:	b128      	cbz	r0, 800fb76 <floorf+0x32>
 800fb6a:	2c00      	cmp	r4, #0
 800fb6c:	da23      	bge.n	800fbb6 <floorf+0x72>
 800fb6e:	4b14      	ldr	r3, [pc, #80]	; (800fbc0 <floorf+0x7c>)
 800fb70:	2e00      	cmp	r6, #0
 800fb72:	bf18      	it	ne
 800fb74:	461c      	movne	r4, r3
 800fb76:	4621      	mov	r1, r4
 800fb78:	e01b      	b.n	800fbb2 <floorf+0x6e>
 800fb7a:	4e12      	ldr	r6, [pc, #72]	; (800fbc4 <floorf+0x80>)
 800fb7c:	412e      	asrs	r6, r5
 800fb7e:	4230      	tst	r0, r6
 800fb80:	d017      	beq.n	800fbb2 <floorf+0x6e>
 800fb82:	490e      	ldr	r1, [pc, #56]	; (800fbbc <floorf+0x78>)
 800fb84:	f7f1 f832 	bl	8000bec <__addsf3>
 800fb88:	2100      	movs	r1, #0
 800fb8a:	f7f1 faf3 	bl	8001174 <__aeabi_fcmpgt>
 800fb8e:	2800      	cmp	r0, #0
 800fb90:	d0f1      	beq.n	800fb76 <floorf+0x32>
 800fb92:	2c00      	cmp	r4, #0
 800fb94:	bfbe      	ittt	lt
 800fb96:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800fb9a:	fa43 f505 	asrlt.w	r5, r3, r5
 800fb9e:	1964      	addlt	r4, r4, r5
 800fba0:	ea24 0406 	bic.w	r4, r4, r6
 800fba4:	e7e7      	b.n	800fb76 <floorf+0x32>
 800fba6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800fbaa:	d302      	bcc.n	800fbb2 <floorf+0x6e>
 800fbac:	f7f1 f81e 	bl	8000bec <__addsf3>
 800fbb0:	4601      	mov	r1, r0
 800fbb2:	4608      	mov	r0, r1
 800fbb4:	bd70      	pop	{r4, r5, r6, pc}
 800fbb6:	2400      	movs	r4, #0
 800fbb8:	e7dd      	b.n	800fb76 <floorf+0x32>
 800fbba:	bf00      	nop
 800fbbc:	7149f2ca 	.word	0x7149f2ca
 800fbc0:	bf800000 	.word	0xbf800000
 800fbc4:	007fffff 	.word	0x007fffff

0800fbc8 <nanf>:
 800fbc8:	4800      	ldr	r0, [pc, #0]	; (800fbcc <nanf+0x4>)
 800fbca:	4770      	bx	lr
 800fbcc:	7fc00000 	.word	0x7fc00000

0800fbd0 <scalbnf>:
 800fbd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800fbd4:	b538      	push	{r3, r4, r5, lr}
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	460d      	mov	r5, r1
 800fbda:	4604      	mov	r4, r0
 800fbdc:	d02a      	beq.n	800fc34 <scalbnf+0x64>
 800fbde:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fbe2:	d304      	bcc.n	800fbee <scalbnf+0x1e>
 800fbe4:	4601      	mov	r1, r0
 800fbe6:	f7f1 f801 	bl	8000bec <__addsf3>
 800fbea:	4603      	mov	r3, r0
 800fbec:	e022      	b.n	800fc34 <scalbnf+0x64>
 800fbee:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800fbf2:	d117      	bne.n	800fc24 <scalbnf+0x54>
 800fbf4:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800fbf8:	f7f1 f900 	bl	8000dfc <__aeabi_fmul>
 800fbfc:	4a17      	ldr	r2, [pc, #92]	; (800fc5c <scalbnf+0x8c>)
 800fbfe:	4603      	mov	r3, r0
 800fc00:	4295      	cmp	r5, r2
 800fc02:	db0b      	blt.n	800fc1c <scalbnf+0x4c>
 800fc04:	4604      	mov	r4, r0
 800fc06:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800fc0a:	3a19      	subs	r2, #25
 800fc0c:	442a      	add	r2, r5
 800fc0e:	2afe      	cmp	r2, #254	; 0xfe
 800fc10:	dd0a      	ble.n	800fc28 <scalbnf+0x58>
 800fc12:	4913      	ldr	r1, [pc, #76]	; (800fc60 <scalbnf+0x90>)
 800fc14:	4618      	mov	r0, r3
 800fc16:	f361 001e 	bfi	r0, r1, #0, #31
 800fc1a:	e000      	b.n	800fc1e <scalbnf+0x4e>
 800fc1c:	4911      	ldr	r1, [pc, #68]	; (800fc64 <scalbnf+0x94>)
 800fc1e:	f7f1 f8ed 	bl	8000dfc <__aeabi_fmul>
 800fc22:	e7e2      	b.n	800fbea <scalbnf+0x1a>
 800fc24:	0dd2      	lsrs	r2, r2, #23
 800fc26:	e7f1      	b.n	800fc0c <scalbnf+0x3c>
 800fc28:	2a00      	cmp	r2, #0
 800fc2a:	dd05      	ble.n	800fc38 <scalbnf+0x68>
 800fc2c:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800fc30:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800fc34:	4618      	mov	r0, r3
 800fc36:	bd38      	pop	{r3, r4, r5, pc}
 800fc38:	f112 0f16 	cmn.w	r2, #22
 800fc3c:	da05      	bge.n	800fc4a <scalbnf+0x7a>
 800fc3e:	f24c 3250 	movw	r2, #50000	; 0xc350
 800fc42:	4295      	cmp	r5, r2
 800fc44:	dce5      	bgt.n	800fc12 <scalbnf+0x42>
 800fc46:	4907      	ldr	r1, [pc, #28]	; (800fc64 <scalbnf+0x94>)
 800fc48:	e7e4      	b.n	800fc14 <scalbnf+0x44>
 800fc4a:	3219      	adds	r2, #25
 800fc4c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800fc50:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800fc54:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800fc58:	e7e1      	b.n	800fc1e <scalbnf+0x4e>
 800fc5a:	bf00      	nop
 800fc5c:	ffff3cb0 	.word	0xffff3cb0
 800fc60:	7149f2ca 	.word	0x7149f2ca
 800fc64:	0da24260 	.word	0x0da24260

0800fc68 <__errno>:
 800fc68:	4b01      	ldr	r3, [pc, #4]	; (800fc70 <__errno+0x8>)
 800fc6a:	6818      	ldr	r0, [r3, #0]
 800fc6c:	4770      	bx	lr
 800fc6e:	bf00      	nop
 800fc70:	200001bc 	.word	0x200001bc

0800fc74 <__libc_init_array>:
 800fc74:	b570      	push	{r4, r5, r6, lr}
 800fc76:	2600      	movs	r6, #0
 800fc78:	4d0c      	ldr	r5, [pc, #48]	; (800fcac <__libc_init_array+0x38>)
 800fc7a:	4c0d      	ldr	r4, [pc, #52]	; (800fcb0 <__libc_init_array+0x3c>)
 800fc7c:	1b64      	subs	r4, r4, r5
 800fc7e:	10a4      	asrs	r4, r4, #2
 800fc80:	42a6      	cmp	r6, r4
 800fc82:	d109      	bne.n	800fc98 <__libc_init_array+0x24>
 800fc84:	f002 feda 	bl	8012a3c <_init>
 800fc88:	2600      	movs	r6, #0
 800fc8a:	4d0a      	ldr	r5, [pc, #40]	; (800fcb4 <__libc_init_array+0x40>)
 800fc8c:	4c0a      	ldr	r4, [pc, #40]	; (800fcb8 <__libc_init_array+0x44>)
 800fc8e:	1b64      	subs	r4, r4, r5
 800fc90:	10a4      	asrs	r4, r4, #2
 800fc92:	42a6      	cmp	r6, r4
 800fc94:	d105      	bne.n	800fca2 <__libc_init_array+0x2e>
 800fc96:	bd70      	pop	{r4, r5, r6, pc}
 800fc98:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc9c:	4798      	blx	r3
 800fc9e:	3601      	adds	r6, #1
 800fca0:	e7ee      	b.n	800fc80 <__libc_init_array+0xc>
 800fca2:	f855 3b04 	ldr.w	r3, [r5], #4
 800fca6:	4798      	blx	r3
 800fca8:	3601      	adds	r6, #1
 800fcaa:	e7f2      	b.n	800fc92 <__libc_init_array+0x1e>
 800fcac:	08013d4c 	.word	0x08013d4c
 800fcb0:	08013d4c 	.word	0x08013d4c
 800fcb4:	08013d4c 	.word	0x08013d4c
 800fcb8:	08013d58 	.word	0x08013d58

0800fcbc <malloc>:
 800fcbc:	4b02      	ldr	r3, [pc, #8]	; (800fcc8 <malloc+0xc>)
 800fcbe:	4601      	mov	r1, r0
 800fcc0:	6818      	ldr	r0, [r3, #0]
 800fcc2:	f000 b87b 	b.w	800fdbc <_malloc_r>
 800fcc6:	bf00      	nop
 800fcc8:	200001bc 	.word	0x200001bc

0800fccc <free>:
 800fccc:	4b02      	ldr	r3, [pc, #8]	; (800fcd8 <free+0xc>)
 800fcce:	4601      	mov	r1, r0
 800fcd0:	6818      	ldr	r0, [r3, #0]
 800fcd2:	f000 b827 	b.w	800fd24 <_free_r>
 800fcd6:	bf00      	nop
 800fcd8:	200001bc 	.word	0x200001bc

0800fcdc <memcmp>:
 800fcdc:	b530      	push	{r4, r5, lr}
 800fcde:	2400      	movs	r4, #0
 800fce0:	3901      	subs	r1, #1
 800fce2:	42a2      	cmp	r2, r4
 800fce4:	d101      	bne.n	800fcea <memcmp+0xe>
 800fce6:	2000      	movs	r0, #0
 800fce8:	e005      	b.n	800fcf6 <memcmp+0x1a>
 800fcea:	5d03      	ldrb	r3, [r0, r4]
 800fcec:	3401      	adds	r4, #1
 800fcee:	5d0d      	ldrb	r5, [r1, r4]
 800fcf0:	42ab      	cmp	r3, r5
 800fcf2:	d0f6      	beq.n	800fce2 <memcmp+0x6>
 800fcf4:	1b58      	subs	r0, r3, r5
 800fcf6:	bd30      	pop	{r4, r5, pc}

0800fcf8 <memcpy>:
 800fcf8:	440a      	add	r2, r1
 800fcfa:	4291      	cmp	r1, r2
 800fcfc:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd00:	d100      	bne.n	800fd04 <memcpy+0xc>
 800fd02:	4770      	bx	lr
 800fd04:	b510      	push	{r4, lr}
 800fd06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd0a:	4291      	cmp	r1, r2
 800fd0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd10:	d1f9      	bne.n	800fd06 <memcpy+0xe>
 800fd12:	bd10      	pop	{r4, pc}

0800fd14 <memset>:
 800fd14:	4603      	mov	r3, r0
 800fd16:	4402      	add	r2, r0
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	d100      	bne.n	800fd1e <memset+0xa>
 800fd1c:	4770      	bx	lr
 800fd1e:	f803 1b01 	strb.w	r1, [r3], #1
 800fd22:	e7f9      	b.n	800fd18 <memset+0x4>

0800fd24 <_free_r>:
 800fd24:	b538      	push	{r3, r4, r5, lr}
 800fd26:	4605      	mov	r5, r0
 800fd28:	2900      	cmp	r1, #0
 800fd2a:	d043      	beq.n	800fdb4 <_free_r+0x90>
 800fd2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd30:	1f0c      	subs	r4, r1, #4
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	bfb8      	it	lt
 800fd36:	18e4      	addlt	r4, r4, r3
 800fd38:	f001 fbc2 	bl	80114c0 <__malloc_lock>
 800fd3c:	4a1e      	ldr	r2, [pc, #120]	; (800fdb8 <_free_r+0x94>)
 800fd3e:	6813      	ldr	r3, [r2, #0]
 800fd40:	4610      	mov	r0, r2
 800fd42:	b933      	cbnz	r3, 800fd52 <_free_r+0x2e>
 800fd44:	6063      	str	r3, [r4, #4]
 800fd46:	6014      	str	r4, [r2, #0]
 800fd48:	4628      	mov	r0, r5
 800fd4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd4e:	f001 bbbd 	b.w	80114cc <__malloc_unlock>
 800fd52:	42a3      	cmp	r3, r4
 800fd54:	d90a      	bls.n	800fd6c <_free_r+0x48>
 800fd56:	6821      	ldr	r1, [r4, #0]
 800fd58:	1862      	adds	r2, r4, r1
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	bf01      	itttt	eq
 800fd5e:	681a      	ldreq	r2, [r3, #0]
 800fd60:	685b      	ldreq	r3, [r3, #4]
 800fd62:	1852      	addeq	r2, r2, r1
 800fd64:	6022      	streq	r2, [r4, #0]
 800fd66:	6063      	str	r3, [r4, #4]
 800fd68:	6004      	str	r4, [r0, #0]
 800fd6a:	e7ed      	b.n	800fd48 <_free_r+0x24>
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	b10b      	cbz	r3, 800fd76 <_free_r+0x52>
 800fd72:	42a3      	cmp	r3, r4
 800fd74:	d9fa      	bls.n	800fd6c <_free_r+0x48>
 800fd76:	6811      	ldr	r1, [r2, #0]
 800fd78:	1850      	adds	r0, r2, r1
 800fd7a:	42a0      	cmp	r0, r4
 800fd7c:	d10b      	bne.n	800fd96 <_free_r+0x72>
 800fd7e:	6820      	ldr	r0, [r4, #0]
 800fd80:	4401      	add	r1, r0
 800fd82:	1850      	adds	r0, r2, r1
 800fd84:	4283      	cmp	r3, r0
 800fd86:	6011      	str	r1, [r2, #0]
 800fd88:	d1de      	bne.n	800fd48 <_free_r+0x24>
 800fd8a:	6818      	ldr	r0, [r3, #0]
 800fd8c:	685b      	ldr	r3, [r3, #4]
 800fd8e:	4401      	add	r1, r0
 800fd90:	6011      	str	r1, [r2, #0]
 800fd92:	6053      	str	r3, [r2, #4]
 800fd94:	e7d8      	b.n	800fd48 <_free_r+0x24>
 800fd96:	d902      	bls.n	800fd9e <_free_r+0x7a>
 800fd98:	230c      	movs	r3, #12
 800fd9a:	602b      	str	r3, [r5, #0]
 800fd9c:	e7d4      	b.n	800fd48 <_free_r+0x24>
 800fd9e:	6820      	ldr	r0, [r4, #0]
 800fda0:	1821      	adds	r1, r4, r0
 800fda2:	428b      	cmp	r3, r1
 800fda4:	bf01      	itttt	eq
 800fda6:	6819      	ldreq	r1, [r3, #0]
 800fda8:	685b      	ldreq	r3, [r3, #4]
 800fdaa:	1809      	addeq	r1, r1, r0
 800fdac:	6021      	streq	r1, [r4, #0]
 800fdae:	6063      	str	r3, [r4, #4]
 800fdb0:	6054      	str	r4, [r2, #4]
 800fdb2:	e7c9      	b.n	800fd48 <_free_r+0x24>
 800fdb4:	bd38      	pop	{r3, r4, r5, pc}
 800fdb6:	bf00      	nop
 800fdb8:	200007fc 	.word	0x200007fc

0800fdbc <_malloc_r>:
 800fdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdbe:	1ccd      	adds	r5, r1, #3
 800fdc0:	f025 0503 	bic.w	r5, r5, #3
 800fdc4:	3508      	adds	r5, #8
 800fdc6:	2d0c      	cmp	r5, #12
 800fdc8:	bf38      	it	cc
 800fdca:	250c      	movcc	r5, #12
 800fdcc:	2d00      	cmp	r5, #0
 800fdce:	4606      	mov	r6, r0
 800fdd0:	db01      	blt.n	800fdd6 <_malloc_r+0x1a>
 800fdd2:	42a9      	cmp	r1, r5
 800fdd4:	d903      	bls.n	800fdde <_malloc_r+0x22>
 800fdd6:	230c      	movs	r3, #12
 800fdd8:	6033      	str	r3, [r6, #0]
 800fdda:	2000      	movs	r0, #0
 800fddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdde:	f001 fb6f 	bl	80114c0 <__malloc_lock>
 800fde2:	4921      	ldr	r1, [pc, #132]	; (800fe68 <_malloc_r+0xac>)
 800fde4:	680a      	ldr	r2, [r1, #0]
 800fde6:	4614      	mov	r4, r2
 800fde8:	b99c      	cbnz	r4, 800fe12 <_malloc_r+0x56>
 800fdea:	4f20      	ldr	r7, [pc, #128]	; (800fe6c <_malloc_r+0xb0>)
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	b923      	cbnz	r3, 800fdfa <_malloc_r+0x3e>
 800fdf0:	4621      	mov	r1, r4
 800fdf2:	4630      	mov	r0, r6
 800fdf4:	f000 fca4 	bl	8010740 <_sbrk_r>
 800fdf8:	6038      	str	r0, [r7, #0]
 800fdfa:	4629      	mov	r1, r5
 800fdfc:	4630      	mov	r0, r6
 800fdfe:	f000 fc9f 	bl	8010740 <_sbrk_r>
 800fe02:	1c43      	adds	r3, r0, #1
 800fe04:	d123      	bne.n	800fe4e <_malloc_r+0x92>
 800fe06:	230c      	movs	r3, #12
 800fe08:	4630      	mov	r0, r6
 800fe0a:	6033      	str	r3, [r6, #0]
 800fe0c:	f001 fb5e 	bl	80114cc <__malloc_unlock>
 800fe10:	e7e3      	b.n	800fdda <_malloc_r+0x1e>
 800fe12:	6823      	ldr	r3, [r4, #0]
 800fe14:	1b5b      	subs	r3, r3, r5
 800fe16:	d417      	bmi.n	800fe48 <_malloc_r+0x8c>
 800fe18:	2b0b      	cmp	r3, #11
 800fe1a:	d903      	bls.n	800fe24 <_malloc_r+0x68>
 800fe1c:	6023      	str	r3, [r4, #0]
 800fe1e:	441c      	add	r4, r3
 800fe20:	6025      	str	r5, [r4, #0]
 800fe22:	e004      	b.n	800fe2e <_malloc_r+0x72>
 800fe24:	6863      	ldr	r3, [r4, #4]
 800fe26:	42a2      	cmp	r2, r4
 800fe28:	bf0c      	ite	eq
 800fe2a:	600b      	streq	r3, [r1, #0]
 800fe2c:	6053      	strne	r3, [r2, #4]
 800fe2e:	4630      	mov	r0, r6
 800fe30:	f001 fb4c 	bl	80114cc <__malloc_unlock>
 800fe34:	f104 000b 	add.w	r0, r4, #11
 800fe38:	1d23      	adds	r3, r4, #4
 800fe3a:	f020 0007 	bic.w	r0, r0, #7
 800fe3e:	1ac2      	subs	r2, r0, r3
 800fe40:	d0cc      	beq.n	800fddc <_malloc_r+0x20>
 800fe42:	1a1b      	subs	r3, r3, r0
 800fe44:	50a3      	str	r3, [r4, r2]
 800fe46:	e7c9      	b.n	800fddc <_malloc_r+0x20>
 800fe48:	4622      	mov	r2, r4
 800fe4a:	6864      	ldr	r4, [r4, #4]
 800fe4c:	e7cc      	b.n	800fde8 <_malloc_r+0x2c>
 800fe4e:	1cc4      	adds	r4, r0, #3
 800fe50:	f024 0403 	bic.w	r4, r4, #3
 800fe54:	42a0      	cmp	r0, r4
 800fe56:	d0e3      	beq.n	800fe20 <_malloc_r+0x64>
 800fe58:	1a21      	subs	r1, r4, r0
 800fe5a:	4630      	mov	r0, r6
 800fe5c:	f000 fc70 	bl	8010740 <_sbrk_r>
 800fe60:	3001      	adds	r0, #1
 800fe62:	d1dd      	bne.n	800fe20 <_malloc_r+0x64>
 800fe64:	e7cf      	b.n	800fe06 <_malloc_r+0x4a>
 800fe66:	bf00      	nop
 800fe68:	200007fc 	.word	0x200007fc
 800fe6c:	20000800 	.word	0x20000800

0800fe70 <__cvt>:
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe76:	461f      	mov	r7, r3
 800fe78:	bfbb      	ittet	lt
 800fe7a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800fe7e:	461f      	movlt	r7, r3
 800fe80:	2300      	movge	r3, #0
 800fe82:	232d      	movlt	r3, #45	; 0x2d
 800fe84:	b088      	sub	sp, #32
 800fe86:	4614      	mov	r4, r2
 800fe88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fe8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800fe8c:	7013      	strb	r3, [r2, #0]
 800fe8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe90:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800fe94:	f023 0820 	bic.w	r8, r3, #32
 800fe98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fe9c:	d005      	beq.n	800feaa <__cvt+0x3a>
 800fe9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fea2:	d100      	bne.n	800fea6 <__cvt+0x36>
 800fea4:	3501      	adds	r5, #1
 800fea6:	2302      	movs	r3, #2
 800fea8:	e000      	b.n	800feac <__cvt+0x3c>
 800feaa:	2303      	movs	r3, #3
 800feac:	aa07      	add	r2, sp, #28
 800feae:	9204      	str	r2, [sp, #16]
 800feb0:	aa06      	add	r2, sp, #24
 800feb2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800feb6:	e9cd 3500 	strd	r3, r5, [sp]
 800feba:	4622      	mov	r2, r4
 800febc:	463b      	mov	r3, r7
 800febe:	f000 fcff 	bl	80108c0 <_dtoa_r>
 800fec2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fec6:	4606      	mov	r6, r0
 800fec8:	d102      	bne.n	800fed0 <__cvt+0x60>
 800feca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fecc:	07db      	lsls	r3, r3, #31
 800fece:	d522      	bpl.n	800ff16 <__cvt+0xa6>
 800fed0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fed4:	eb06 0905 	add.w	r9, r6, r5
 800fed8:	d110      	bne.n	800fefc <__cvt+0x8c>
 800feda:	7833      	ldrb	r3, [r6, #0]
 800fedc:	2b30      	cmp	r3, #48	; 0x30
 800fede:	d10a      	bne.n	800fef6 <__cvt+0x86>
 800fee0:	2200      	movs	r2, #0
 800fee2:	2300      	movs	r3, #0
 800fee4:	4620      	mov	r0, r4
 800fee6:	4639      	mov	r1, r7
 800fee8:	f7f0 fd9a 	bl	8000a20 <__aeabi_dcmpeq>
 800feec:	b918      	cbnz	r0, 800fef6 <__cvt+0x86>
 800feee:	f1c5 0501 	rsb	r5, r5, #1
 800fef2:	f8ca 5000 	str.w	r5, [sl]
 800fef6:	f8da 3000 	ldr.w	r3, [sl]
 800fefa:	4499      	add	r9, r3
 800fefc:	2200      	movs	r2, #0
 800fefe:	2300      	movs	r3, #0
 800ff00:	4620      	mov	r0, r4
 800ff02:	4639      	mov	r1, r7
 800ff04:	f7f0 fd8c 	bl	8000a20 <__aeabi_dcmpeq>
 800ff08:	b108      	cbz	r0, 800ff0e <__cvt+0x9e>
 800ff0a:	f8cd 901c 	str.w	r9, [sp, #28]
 800ff0e:	2230      	movs	r2, #48	; 0x30
 800ff10:	9b07      	ldr	r3, [sp, #28]
 800ff12:	454b      	cmp	r3, r9
 800ff14:	d307      	bcc.n	800ff26 <__cvt+0xb6>
 800ff16:	4630      	mov	r0, r6
 800ff18:	9b07      	ldr	r3, [sp, #28]
 800ff1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ff1c:	1b9b      	subs	r3, r3, r6
 800ff1e:	6013      	str	r3, [r2, #0]
 800ff20:	b008      	add	sp, #32
 800ff22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff26:	1c59      	adds	r1, r3, #1
 800ff28:	9107      	str	r1, [sp, #28]
 800ff2a:	701a      	strb	r2, [r3, #0]
 800ff2c:	e7f0      	b.n	800ff10 <__cvt+0xa0>

0800ff2e <__exponent>:
 800ff2e:	4603      	mov	r3, r0
 800ff30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff32:	2900      	cmp	r1, #0
 800ff34:	f803 2b02 	strb.w	r2, [r3], #2
 800ff38:	bfb6      	itet	lt
 800ff3a:	222d      	movlt	r2, #45	; 0x2d
 800ff3c:	222b      	movge	r2, #43	; 0x2b
 800ff3e:	4249      	neglt	r1, r1
 800ff40:	2909      	cmp	r1, #9
 800ff42:	7042      	strb	r2, [r0, #1]
 800ff44:	dd2b      	ble.n	800ff9e <__exponent+0x70>
 800ff46:	f10d 0407 	add.w	r4, sp, #7
 800ff4a:	46a4      	mov	ip, r4
 800ff4c:	270a      	movs	r7, #10
 800ff4e:	fb91 f6f7 	sdiv	r6, r1, r7
 800ff52:	460a      	mov	r2, r1
 800ff54:	46a6      	mov	lr, r4
 800ff56:	fb07 1516 	mls	r5, r7, r6, r1
 800ff5a:	2a63      	cmp	r2, #99	; 0x63
 800ff5c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800ff60:	4631      	mov	r1, r6
 800ff62:	f104 34ff 	add.w	r4, r4, #4294967295
 800ff66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ff6a:	dcf0      	bgt.n	800ff4e <__exponent+0x20>
 800ff6c:	3130      	adds	r1, #48	; 0x30
 800ff6e:	f1ae 0502 	sub.w	r5, lr, #2
 800ff72:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ff76:	4629      	mov	r1, r5
 800ff78:	1c44      	adds	r4, r0, #1
 800ff7a:	4561      	cmp	r1, ip
 800ff7c:	d30a      	bcc.n	800ff94 <__exponent+0x66>
 800ff7e:	f10d 0209 	add.w	r2, sp, #9
 800ff82:	eba2 020e 	sub.w	r2, r2, lr
 800ff86:	4565      	cmp	r5, ip
 800ff88:	bf88      	it	hi
 800ff8a:	2200      	movhi	r2, #0
 800ff8c:	4413      	add	r3, r2
 800ff8e:	1a18      	subs	r0, r3, r0
 800ff90:	b003      	add	sp, #12
 800ff92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff94:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff98:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ff9c:	e7ed      	b.n	800ff7a <__exponent+0x4c>
 800ff9e:	2330      	movs	r3, #48	; 0x30
 800ffa0:	3130      	adds	r1, #48	; 0x30
 800ffa2:	7083      	strb	r3, [r0, #2]
 800ffa4:	70c1      	strb	r1, [r0, #3]
 800ffa6:	1d03      	adds	r3, r0, #4
 800ffa8:	e7f1      	b.n	800ff8e <__exponent+0x60>
	...

0800ffac <_printf_float>:
 800ffac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffb0:	b091      	sub	sp, #68	; 0x44
 800ffb2:	460c      	mov	r4, r1
 800ffb4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800ffb8:	4616      	mov	r6, r2
 800ffba:	461f      	mov	r7, r3
 800ffbc:	4605      	mov	r5, r0
 800ffbe:	f001 fa6d 	bl	801149c <_localeconv_r>
 800ffc2:	6803      	ldr	r3, [r0, #0]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	9309      	str	r3, [sp, #36]	; 0x24
 800ffc8:	f7f0 f8fe 	bl	80001c8 <strlen>
 800ffcc:	2300      	movs	r3, #0
 800ffce:	930e      	str	r3, [sp, #56]	; 0x38
 800ffd0:	f8d8 3000 	ldr.w	r3, [r8]
 800ffd4:	900a      	str	r0, [sp, #40]	; 0x28
 800ffd6:	3307      	adds	r3, #7
 800ffd8:	f023 0307 	bic.w	r3, r3, #7
 800ffdc:	f103 0208 	add.w	r2, r3, #8
 800ffe0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ffe4:	f8d4 b000 	ldr.w	fp, [r4]
 800ffe8:	f8c8 2000 	str.w	r2, [r8]
 800ffec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fff4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800fff8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800fffc:	930b      	str	r3, [sp, #44]	; 0x2c
 800fffe:	f04f 32ff 	mov.w	r2, #4294967295
 8010002:	4640      	mov	r0, r8
 8010004:	4b9c      	ldr	r3, [pc, #624]	; (8010278 <_printf_float+0x2cc>)
 8010006:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010008:	f7f0 fd3c 	bl	8000a84 <__aeabi_dcmpun>
 801000c:	bb70      	cbnz	r0, 801006c <_printf_float+0xc0>
 801000e:	f04f 32ff 	mov.w	r2, #4294967295
 8010012:	4640      	mov	r0, r8
 8010014:	4b98      	ldr	r3, [pc, #608]	; (8010278 <_printf_float+0x2cc>)
 8010016:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010018:	f7f0 fd16 	bl	8000a48 <__aeabi_dcmple>
 801001c:	bb30      	cbnz	r0, 801006c <_printf_float+0xc0>
 801001e:	2200      	movs	r2, #0
 8010020:	2300      	movs	r3, #0
 8010022:	4640      	mov	r0, r8
 8010024:	4651      	mov	r1, sl
 8010026:	f7f0 fd05 	bl	8000a34 <__aeabi_dcmplt>
 801002a:	b110      	cbz	r0, 8010032 <_printf_float+0x86>
 801002c:	232d      	movs	r3, #45	; 0x2d
 801002e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010032:	4b92      	ldr	r3, [pc, #584]	; (801027c <_printf_float+0x2d0>)
 8010034:	4892      	ldr	r0, [pc, #584]	; (8010280 <_printf_float+0x2d4>)
 8010036:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801003a:	bf94      	ite	ls
 801003c:	4698      	movls	r8, r3
 801003e:	4680      	movhi	r8, r0
 8010040:	2303      	movs	r3, #3
 8010042:	f04f 0a00 	mov.w	sl, #0
 8010046:	6123      	str	r3, [r4, #16]
 8010048:	f02b 0304 	bic.w	r3, fp, #4
 801004c:	6023      	str	r3, [r4, #0]
 801004e:	4633      	mov	r3, r6
 8010050:	4621      	mov	r1, r4
 8010052:	4628      	mov	r0, r5
 8010054:	9700      	str	r7, [sp, #0]
 8010056:	aa0f      	add	r2, sp, #60	; 0x3c
 8010058:	f000 f9d4 	bl	8010404 <_printf_common>
 801005c:	3001      	adds	r0, #1
 801005e:	f040 8090 	bne.w	8010182 <_printf_float+0x1d6>
 8010062:	f04f 30ff 	mov.w	r0, #4294967295
 8010066:	b011      	add	sp, #68	; 0x44
 8010068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801006c:	4642      	mov	r2, r8
 801006e:	4653      	mov	r3, sl
 8010070:	4640      	mov	r0, r8
 8010072:	4651      	mov	r1, sl
 8010074:	f7f0 fd06 	bl	8000a84 <__aeabi_dcmpun>
 8010078:	b148      	cbz	r0, 801008e <_printf_float+0xe2>
 801007a:	f1ba 0f00 	cmp.w	sl, #0
 801007e:	bfb8      	it	lt
 8010080:	232d      	movlt	r3, #45	; 0x2d
 8010082:	4880      	ldr	r0, [pc, #512]	; (8010284 <_printf_float+0x2d8>)
 8010084:	bfb8      	it	lt
 8010086:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801008a:	4b7f      	ldr	r3, [pc, #508]	; (8010288 <_printf_float+0x2dc>)
 801008c:	e7d3      	b.n	8010036 <_printf_float+0x8a>
 801008e:	6863      	ldr	r3, [r4, #4]
 8010090:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8010094:	1c5a      	adds	r2, r3, #1
 8010096:	d142      	bne.n	801011e <_printf_float+0x172>
 8010098:	2306      	movs	r3, #6
 801009a:	6063      	str	r3, [r4, #4]
 801009c:	2200      	movs	r2, #0
 801009e:	9206      	str	r2, [sp, #24]
 80100a0:	aa0e      	add	r2, sp, #56	; 0x38
 80100a2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80100a6:	aa0d      	add	r2, sp, #52	; 0x34
 80100a8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80100ac:	9203      	str	r2, [sp, #12]
 80100ae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80100b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80100b6:	6023      	str	r3, [r4, #0]
 80100b8:	6863      	ldr	r3, [r4, #4]
 80100ba:	4642      	mov	r2, r8
 80100bc:	9300      	str	r3, [sp, #0]
 80100be:	4628      	mov	r0, r5
 80100c0:	4653      	mov	r3, sl
 80100c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80100c4:	f7ff fed4 	bl	800fe70 <__cvt>
 80100c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80100ca:	4680      	mov	r8, r0
 80100cc:	2947      	cmp	r1, #71	; 0x47
 80100ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80100d0:	d108      	bne.n	80100e4 <_printf_float+0x138>
 80100d2:	1cc8      	adds	r0, r1, #3
 80100d4:	db02      	blt.n	80100dc <_printf_float+0x130>
 80100d6:	6863      	ldr	r3, [r4, #4]
 80100d8:	4299      	cmp	r1, r3
 80100da:	dd40      	ble.n	801015e <_printf_float+0x1b2>
 80100dc:	f1a9 0902 	sub.w	r9, r9, #2
 80100e0:	fa5f f989 	uxtb.w	r9, r9
 80100e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80100e8:	d81f      	bhi.n	801012a <_printf_float+0x17e>
 80100ea:	464a      	mov	r2, r9
 80100ec:	3901      	subs	r1, #1
 80100ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80100f2:	910d      	str	r1, [sp, #52]	; 0x34
 80100f4:	f7ff ff1b 	bl	800ff2e <__exponent>
 80100f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100fa:	4682      	mov	sl, r0
 80100fc:	1813      	adds	r3, r2, r0
 80100fe:	2a01      	cmp	r2, #1
 8010100:	6123      	str	r3, [r4, #16]
 8010102:	dc02      	bgt.n	801010a <_printf_float+0x15e>
 8010104:	6822      	ldr	r2, [r4, #0]
 8010106:	07d2      	lsls	r2, r2, #31
 8010108:	d501      	bpl.n	801010e <_printf_float+0x162>
 801010a:	3301      	adds	r3, #1
 801010c:	6123      	str	r3, [r4, #16]
 801010e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8010112:	2b00      	cmp	r3, #0
 8010114:	d09b      	beq.n	801004e <_printf_float+0xa2>
 8010116:	232d      	movs	r3, #45	; 0x2d
 8010118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801011c:	e797      	b.n	801004e <_printf_float+0xa2>
 801011e:	2947      	cmp	r1, #71	; 0x47
 8010120:	d1bc      	bne.n	801009c <_printf_float+0xf0>
 8010122:	2b00      	cmp	r3, #0
 8010124:	d1ba      	bne.n	801009c <_printf_float+0xf0>
 8010126:	2301      	movs	r3, #1
 8010128:	e7b7      	b.n	801009a <_printf_float+0xee>
 801012a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801012e:	d118      	bne.n	8010162 <_printf_float+0x1b6>
 8010130:	2900      	cmp	r1, #0
 8010132:	6863      	ldr	r3, [r4, #4]
 8010134:	dd0b      	ble.n	801014e <_printf_float+0x1a2>
 8010136:	6121      	str	r1, [r4, #16]
 8010138:	b913      	cbnz	r3, 8010140 <_printf_float+0x194>
 801013a:	6822      	ldr	r2, [r4, #0]
 801013c:	07d0      	lsls	r0, r2, #31
 801013e:	d502      	bpl.n	8010146 <_printf_float+0x19a>
 8010140:	3301      	adds	r3, #1
 8010142:	440b      	add	r3, r1
 8010144:	6123      	str	r3, [r4, #16]
 8010146:	f04f 0a00 	mov.w	sl, #0
 801014a:	65a1      	str	r1, [r4, #88]	; 0x58
 801014c:	e7df      	b.n	801010e <_printf_float+0x162>
 801014e:	b913      	cbnz	r3, 8010156 <_printf_float+0x1aa>
 8010150:	6822      	ldr	r2, [r4, #0]
 8010152:	07d2      	lsls	r2, r2, #31
 8010154:	d501      	bpl.n	801015a <_printf_float+0x1ae>
 8010156:	3302      	adds	r3, #2
 8010158:	e7f4      	b.n	8010144 <_printf_float+0x198>
 801015a:	2301      	movs	r3, #1
 801015c:	e7f2      	b.n	8010144 <_printf_float+0x198>
 801015e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010164:	4299      	cmp	r1, r3
 8010166:	db05      	blt.n	8010174 <_printf_float+0x1c8>
 8010168:	6823      	ldr	r3, [r4, #0]
 801016a:	6121      	str	r1, [r4, #16]
 801016c:	07d8      	lsls	r0, r3, #31
 801016e:	d5ea      	bpl.n	8010146 <_printf_float+0x19a>
 8010170:	1c4b      	adds	r3, r1, #1
 8010172:	e7e7      	b.n	8010144 <_printf_float+0x198>
 8010174:	2900      	cmp	r1, #0
 8010176:	bfcc      	ite	gt
 8010178:	2201      	movgt	r2, #1
 801017a:	f1c1 0202 	rsble	r2, r1, #2
 801017e:	4413      	add	r3, r2
 8010180:	e7e0      	b.n	8010144 <_printf_float+0x198>
 8010182:	6823      	ldr	r3, [r4, #0]
 8010184:	055a      	lsls	r2, r3, #21
 8010186:	d407      	bmi.n	8010198 <_printf_float+0x1ec>
 8010188:	6923      	ldr	r3, [r4, #16]
 801018a:	4642      	mov	r2, r8
 801018c:	4631      	mov	r1, r6
 801018e:	4628      	mov	r0, r5
 8010190:	47b8      	blx	r7
 8010192:	3001      	adds	r0, #1
 8010194:	d12b      	bne.n	80101ee <_printf_float+0x242>
 8010196:	e764      	b.n	8010062 <_printf_float+0xb6>
 8010198:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801019c:	f240 80dd 	bls.w	801035a <_printf_float+0x3ae>
 80101a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80101a4:	2200      	movs	r2, #0
 80101a6:	2300      	movs	r3, #0
 80101a8:	f7f0 fc3a 	bl	8000a20 <__aeabi_dcmpeq>
 80101ac:	2800      	cmp	r0, #0
 80101ae:	d033      	beq.n	8010218 <_printf_float+0x26c>
 80101b0:	2301      	movs	r3, #1
 80101b2:	4631      	mov	r1, r6
 80101b4:	4628      	mov	r0, r5
 80101b6:	4a35      	ldr	r2, [pc, #212]	; (801028c <_printf_float+0x2e0>)
 80101b8:	47b8      	blx	r7
 80101ba:	3001      	adds	r0, #1
 80101bc:	f43f af51 	beq.w	8010062 <_printf_float+0xb6>
 80101c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80101c4:	429a      	cmp	r2, r3
 80101c6:	db02      	blt.n	80101ce <_printf_float+0x222>
 80101c8:	6823      	ldr	r3, [r4, #0]
 80101ca:	07d8      	lsls	r0, r3, #31
 80101cc:	d50f      	bpl.n	80101ee <_printf_float+0x242>
 80101ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80101d2:	4631      	mov	r1, r6
 80101d4:	4628      	mov	r0, r5
 80101d6:	47b8      	blx	r7
 80101d8:	3001      	adds	r0, #1
 80101da:	f43f af42 	beq.w	8010062 <_printf_float+0xb6>
 80101de:	f04f 0800 	mov.w	r8, #0
 80101e2:	f104 091a 	add.w	r9, r4, #26
 80101e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101e8:	3b01      	subs	r3, #1
 80101ea:	4543      	cmp	r3, r8
 80101ec:	dc09      	bgt.n	8010202 <_printf_float+0x256>
 80101ee:	6823      	ldr	r3, [r4, #0]
 80101f0:	079b      	lsls	r3, r3, #30
 80101f2:	f100 8102 	bmi.w	80103fa <_printf_float+0x44e>
 80101f6:	68e0      	ldr	r0, [r4, #12]
 80101f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80101fa:	4298      	cmp	r0, r3
 80101fc:	bfb8      	it	lt
 80101fe:	4618      	movlt	r0, r3
 8010200:	e731      	b.n	8010066 <_printf_float+0xba>
 8010202:	2301      	movs	r3, #1
 8010204:	464a      	mov	r2, r9
 8010206:	4631      	mov	r1, r6
 8010208:	4628      	mov	r0, r5
 801020a:	47b8      	blx	r7
 801020c:	3001      	adds	r0, #1
 801020e:	f43f af28 	beq.w	8010062 <_printf_float+0xb6>
 8010212:	f108 0801 	add.w	r8, r8, #1
 8010216:	e7e6      	b.n	80101e6 <_printf_float+0x23a>
 8010218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801021a:	2b00      	cmp	r3, #0
 801021c:	dc38      	bgt.n	8010290 <_printf_float+0x2e4>
 801021e:	2301      	movs	r3, #1
 8010220:	4631      	mov	r1, r6
 8010222:	4628      	mov	r0, r5
 8010224:	4a19      	ldr	r2, [pc, #100]	; (801028c <_printf_float+0x2e0>)
 8010226:	47b8      	blx	r7
 8010228:	3001      	adds	r0, #1
 801022a:	f43f af1a 	beq.w	8010062 <_printf_float+0xb6>
 801022e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010232:	4313      	orrs	r3, r2
 8010234:	d102      	bne.n	801023c <_printf_float+0x290>
 8010236:	6823      	ldr	r3, [r4, #0]
 8010238:	07d9      	lsls	r1, r3, #31
 801023a:	d5d8      	bpl.n	80101ee <_printf_float+0x242>
 801023c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010240:	4631      	mov	r1, r6
 8010242:	4628      	mov	r0, r5
 8010244:	47b8      	blx	r7
 8010246:	3001      	adds	r0, #1
 8010248:	f43f af0b 	beq.w	8010062 <_printf_float+0xb6>
 801024c:	f04f 0900 	mov.w	r9, #0
 8010250:	f104 0a1a 	add.w	sl, r4, #26
 8010254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010256:	425b      	negs	r3, r3
 8010258:	454b      	cmp	r3, r9
 801025a:	dc01      	bgt.n	8010260 <_printf_float+0x2b4>
 801025c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801025e:	e794      	b.n	801018a <_printf_float+0x1de>
 8010260:	2301      	movs	r3, #1
 8010262:	4652      	mov	r2, sl
 8010264:	4631      	mov	r1, r6
 8010266:	4628      	mov	r0, r5
 8010268:	47b8      	blx	r7
 801026a:	3001      	adds	r0, #1
 801026c:	f43f aef9 	beq.w	8010062 <_printf_float+0xb6>
 8010270:	f109 0901 	add.w	r9, r9, #1
 8010274:	e7ee      	b.n	8010254 <_printf_float+0x2a8>
 8010276:	bf00      	nop
 8010278:	7fefffff 	.word	0x7fefffff
 801027c:	08013964 	.word	0x08013964
 8010280:	08013968 	.word	0x08013968
 8010284:	08013970 	.word	0x08013970
 8010288:	0801396c 	.word	0x0801396c
 801028c:	08013974 	.word	0x08013974
 8010290:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010292:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010294:	429a      	cmp	r2, r3
 8010296:	bfa8      	it	ge
 8010298:	461a      	movge	r2, r3
 801029a:	2a00      	cmp	r2, #0
 801029c:	4691      	mov	r9, r2
 801029e:	dc37      	bgt.n	8010310 <_printf_float+0x364>
 80102a0:	f04f 0b00 	mov.w	fp, #0
 80102a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80102a8:	f104 021a 	add.w	r2, r4, #26
 80102ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80102b0:	ebaa 0309 	sub.w	r3, sl, r9
 80102b4:	455b      	cmp	r3, fp
 80102b6:	dc33      	bgt.n	8010320 <_printf_float+0x374>
 80102b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80102bc:	429a      	cmp	r2, r3
 80102be:	db3b      	blt.n	8010338 <_printf_float+0x38c>
 80102c0:	6823      	ldr	r3, [r4, #0]
 80102c2:	07da      	lsls	r2, r3, #31
 80102c4:	d438      	bmi.n	8010338 <_printf_float+0x38c>
 80102c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80102c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80102ca:	eba2 030a 	sub.w	r3, r2, sl
 80102ce:	eba2 0901 	sub.w	r9, r2, r1
 80102d2:	4599      	cmp	r9, r3
 80102d4:	bfa8      	it	ge
 80102d6:	4699      	movge	r9, r3
 80102d8:	f1b9 0f00 	cmp.w	r9, #0
 80102dc:	dc34      	bgt.n	8010348 <_printf_float+0x39c>
 80102de:	f04f 0800 	mov.w	r8, #0
 80102e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80102e6:	f104 0a1a 	add.w	sl, r4, #26
 80102ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80102ee:	1a9b      	subs	r3, r3, r2
 80102f0:	eba3 0309 	sub.w	r3, r3, r9
 80102f4:	4543      	cmp	r3, r8
 80102f6:	f77f af7a 	ble.w	80101ee <_printf_float+0x242>
 80102fa:	2301      	movs	r3, #1
 80102fc:	4652      	mov	r2, sl
 80102fe:	4631      	mov	r1, r6
 8010300:	4628      	mov	r0, r5
 8010302:	47b8      	blx	r7
 8010304:	3001      	adds	r0, #1
 8010306:	f43f aeac 	beq.w	8010062 <_printf_float+0xb6>
 801030a:	f108 0801 	add.w	r8, r8, #1
 801030e:	e7ec      	b.n	80102ea <_printf_float+0x33e>
 8010310:	4613      	mov	r3, r2
 8010312:	4631      	mov	r1, r6
 8010314:	4642      	mov	r2, r8
 8010316:	4628      	mov	r0, r5
 8010318:	47b8      	blx	r7
 801031a:	3001      	adds	r0, #1
 801031c:	d1c0      	bne.n	80102a0 <_printf_float+0x2f4>
 801031e:	e6a0      	b.n	8010062 <_printf_float+0xb6>
 8010320:	2301      	movs	r3, #1
 8010322:	4631      	mov	r1, r6
 8010324:	4628      	mov	r0, r5
 8010326:	920b      	str	r2, [sp, #44]	; 0x2c
 8010328:	47b8      	blx	r7
 801032a:	3001      	adds	r0, #1
 801032c:	f43f ae99 	beq.w	8010062 <_printf_float+0xb6>
 8010330:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010332:	f10b 0b01 	add.w	fp, fp, #1
 8010336:	e7b9      	b.n	80102ac <_printf_float+0x300>
 8010338:	4631      	mov	r1, r6
 801033a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801033e:	4628      	mov	r0, r5
 8010340:	47b8      	blx	r7
 8010342:	3001      	adds	r0, #1
 8010344:	d1bf      	bne.n	80102c6 <_printf_float+0x31a>
 8010346:	e68c      	b.n	8010062 <_printf_float+0xb6>
 8010348:	464b      	mov	r3, r9
 801034a:	4631      	mov	r1, r6
 801034c:	4628      	mov	r0, r5
 801034e:	eb08 020a 	add.w	r2, r8, sl
 8010352:	47b8      	blx	r7
 8010354:	3001      	adds	r0, #1
 8010356:	d1c2      	bne.n	80102de <_printf_float+0x332>
 8010358:	e683      	b.n	8010062 <_printf_float+0xb6>
 801035a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801035c:	2a01      	cmp	r2, #1
 801035e:	dc01      	bgt.n	8010364 <_printf_float+0x3b8>
 8010360:	07db      	lsls	r3, r3, #31
 8010362:	d537      	bpl.n	80103d4 <_printf_float+0x428>
 8010364:	2301      	movs	r3, #1
 8010366:	4642      	mov	r2, r8
 8010368:	4631      	mov	r1, r6
 801036a:	4628      	mov	r0, r5
 801036c:	47b8      	blx	r7
 801036e:	3001      	adds	r0, #1
 8010370:	f43f ae77 	beq.w	8010062 <_printf_float+0xb6>
 8010374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010378:	4631      	mov	r1, r6
 801037a:	4628      	mov	r0, r5
 801037c:	47b8      	blx	r7
 801037e:	3001      	adds	r0, #1
 8010380:	f43f ae6f 	beq.w	8010062 <_printf_float+0xb6>
 8010384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010388:	2200      	movs	r2, #0
 801038a:	2300      	movs	r3, #0
 801038c:	f7f0 fb48 	bl	8000a20 <__aeabi_dcmpeq>
 8010390:	b9d8      	cbnz	r0, 80103ca <_printf_float+0x41e>
 8010392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010394:	f108 0201 	add.w	r2, r8, #1
 8010398:	3b01      	subs	r3, #1
 801039a:	4631      	mov	r1, r6
 801039c:	4628      	mov	r0, r5
 801039e:	47b8      	blx	r7
 80103a0:	3001      	adds	r0, #1
 80103a2:	d10e      	bne.n	80103c2 <_printf_float+0x416>
 80103a4:	e65d      	b.n	8010062 <_printf_float+0xb6>
 80103a6:	2301      	movs	r3, #1
 80103a8:	464a      	mov	r2, r9
 80103aa:	4631      	mov	r1, r6
 80103ac:	4628      	mov	r0, r5
 80103ae:	47b8      	blx	r7
 80103b0:	3001      	adds	r0, #1
 80103b2:	f43f ae56 	beq.w	8010062 <_printf_float+0xb6>
 80103b6:	f108 0801 	add.w	r8, r8, #1
 80103ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103bc:	3b01      	subs	r3, #1
 80103be:	4543      	cmp	r3, r8
 80103c0:	dcf1      	bgt.n	80103a6 <_printf_float+0x3fa>
 80103c2:	4653      	mov	r3, sl
 80103c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80103c8:	e6e0      	b.n	801018c <_printf_float+0x1e0>
 80103ca:	f04f 0800 	mov.w	r8, #0
 80103ce:	f104 091a 	add.w	r9, r4, #26
 80103d2:	e7f2      	b.n	80103ba <_printf_float+0x40e>
 80103d4:	2301      	movs	r3, #1
 80103d6:	4642      	mov	r2, r8
 80103d8:	e7df      	b.n	801039a <_printf_float+0x3ee>
 80103da:	2301      	movs	r3, #1
 80103dc:	464a      	mov	r2, r9
 80103de:	4631      	mov	r1, r6
 80103e0:	4628      	mov	r0, r5
 80103e2:	47b8      	blx	r7
 80103e4:	3001      	adds	r0, #1
 80103e6:	f43f ae3c 	beq.w	8010062 <_printf_float+0xb6>
 80103ea:	f108 0801 	add.w	r8, r8, #1
 80103ee:	68e3      	ldr	r3, [r4, #12]
 80103f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80103f2:	1a5b      	subs	r3, r3, r1
 80103f4:	4543      	cmp	r3, r8
 80103f6:	dcf0      	bgt.n	80103da <_printf_float+0x42e>
 80103f8:	e6fd      	b.n	80101f6 <_printf_float+0x24a>
 80103fa:	f04f 0800 	mov.w	r8, #0
 80103fe:	f104 0919 	add.w	r9, r4, #25
 8010402:	e7f4      	b.n	80103ee <_printf_float+0x442>

08010404 <_printf_common>:
 8010404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010408:	4616      	mov	r6, r2
 801040a:	4699      	mov	r9, r3
 801040c:	688a      	ldr	r2, [r1, #8]
 801040e:	690b      	ldr	r3, [r1, #16]
 8010410:	4607      	mov	r7, r0
 8010412:	4293      	cmp	r3, r2
 8010414:	bfb8      	it	lt
 8010416:	4613      	movlt	r3, r2
 8010418:	6033      	str	r3, [r6, #0]
 801041a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801041e:	460c      	mov	r4, r1
 8010420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010424:	b10a      	cbz	r2, 801042a <_printf_common+0x26>
 8010426:	3301      	adds	r3, #1
 8010428:	6033      	str	r3, [r6, #0]
 801042a:	6823      	ldr	r3, [r4, #0]
 801042c:	0699      	lsls	r1, r3, #26
 801042e:	bf42      	ittt	mi
 8010430:	6833      	ldrmi	r3, [r6, #0]
 8010432:	3302      	addmi	r3, #2
 8010434:	6033      	strmi	r3, [r6, #0]
 8010436:	6825      	ldr	r5, [r4, #0]
 8010438:	f015 0506 	ands.w	r5, r5, #6
 801043c:	d106      	bne.n	801044c <_printf_common+0x48>
 801043e:	f104 0a19 	add.w	sl, r4, #25
 8010442:	68e3      	ldr	r3, [r4, #12]
 8010444:	6832      	ldr	r2, [r6, #0]
 8010446:	1a9b      	subs	r3, r3, r2
 8010448:	42ab      	cmp	r3, r5
 801044a:	dc28      	bgt.n	801049e <_printf_common+0x9a>
 801044c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010450:	1e13      	subs	r3, r2, #0
 8010452:	6822      	ldr	r2, [r4, #0]
 8010454:	bf18      	it	ne
 8010456:	2301      	movne	r3, #1
 8010458:	0692      	lsls	r2, r2, #26
 801045a:	d42d      	bmi.n	80104b8 <_printf_common+0xb4>
 801045c:	4649      	mov	r1, r9
 801045e:	4638      	mov	r0, r7
 8010460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010464:	47c0      	blx	r8
 8010466:	3001      	adds	r0, #1
 8010468:	d020      	beq.n	80104ac <_printf_common+0xa8>
 801046a:	6823      	ldr	r3, [r4, #0]
 801046c:	68e5      	ldr	r5, [r4, #12]
 801046e:	f003 0306 	and.w	r3, r3, #6
 8010472:	2b04      	cmp	r3, #4
 8010474:	bf18      	it	ne
 8010476:	2500      	movne	r5, #0
 8010478:	6832      	ldr	r2, [r6, #0]
 801047a:	f04f 0600 	mov.w	r6, #0
 801047e:	68a3      	ldr	r3, [r4, #8]
 8010480:	bf08      	it	eq
 8010482:	1aad      	subeq	r5, r5, r2
 8010484:	6922      	ldr	r2, [r4, #16]
 8010486:	bf08      	it	eq
 8010488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801048c:	4293      	cmp	r3, r2
 801048e:	bfc4      	itt	gt
 8010490:	1a9b      	subgt	r3, r3, r2
 8010492:	18ed      	addgt	r5, r5, r3
 8010494:	341a      	adds	r4, #26
 8010496:	42b5      	cmp	r5, r6
 8010498:	d11a      	bne.n	80104d0 <_printf_common+0xcc>
 801049a:	2000      	movs	r0, #0
 801049c:	e008      	b.n	80104b0 <_printf_common+0xac>
 801049e:	2301      	movs	r3, #1
 80104a0:	4652      	mov	r2, sl
 80104a2:	4649      	mov	r1, r9
 80104a4:	4638      	mov	r0, r7
 80104a6:	47c0      	blx	r8
 80104a8:	3001      	adds	r0, #1
 80104aa:	d103      	bne.n	80104b4 <_printf_common+0xb0>
 80104ac:	f04f 30ff 	mov.w	r0, #4294967295
 80104b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104b4:	3501      	adds	r5, #1
 80104b6:	e7c4      	b.n	8010442 <_printf_common+0x3e>
 80104b8:	2030      	movs	r0, #48	; 0x30
 80104ba:	18e1      	adds	r1, r4, r3
 80104bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80104c0:	1c5a      	adds	r2, r3, #1
 80104c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80104c6:	4422      	add	r2, r4
 80104c8:	3302      	adds	r3, #2
 80104ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80104ce:	e7c5      	b.n	801045c <_printf_common+0x58>
 80104d0:	2301      	movs	r3, #1
 80104d2:	4622      	mov	r2, r4
 80104d4:	4649      	mov	r1, r9
 80104d6:	4638      	mov	r0, r7
 80104d8:	47c0      	blx	r8
 80104da:	3001      	adds	r0, #1
 80104dc:	d0e6      	beq.n	80104ac <_printf_common+0xa8>
 80104de:	3601      	adds	r6, #1
 80104e0:	e7d9      	b.n	8010496 <_printf_common+0x92>
	...

080104e4 <_printf_i>:
 80104e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104e8:	460c      	mov	r4, r1
 80104ea:	7e27      	ldrb	r7, [r4, #24]
 80104ec:	4691      	mov	r9, r2
 80104ee:	2f78      	cmp	r7, #120	; 0x78
 80104f0:	4680      	mov	r8, r0
 80104f2:	469a      	mov	sl, r3
 80104f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80104f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104fa:	d807      	bhi.n	801050c <_printf_i+0x28>
 80104fc:	2f62      	cmp	r7, #98	; 0x62
 80104fe:	d80a      	bhi.n	8010516 <_printf_i+0x32>
 8010500:	2f00      	cmp	r7, #0
 8010502:	f000 80d9 	beq.w	80106b8 <_printf_i+0x1d4>
 8010506:	2f58      	cmp	r7, #88	; 0x58
 8010508:	f000 80a4 	beq.w	8010654 <_printf_i+0x170>
 801050c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010514:	e03a      	b.n	801058c <_printf_i+0xa8>
 8010516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801051a:	2b15      	cmp	r3, #21
 801051c:	d8f6      	bhi.n	801050c <_printf_i+0x28>
 801051e:	a001      	add	r0, pc, #4	; (adr r0, 8010524 <_printf_i+0x40>)
 8010520:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010524:	0801057d 	.word	0x0801057d
 8010528:	08010591 	.word	0x08010591
 801052c:	0801050d 	.word	0x0801050d
 8010530:	0801050d 	.word	0x0801050d
 8010534:	0801050d 	.word	0x0801050d
 8010538:	0801050d 	.word	0x0801050d
 801053c:	08010591 	.word	0x08010591
 8010540:	0801050d 	.word	0x0801050d
 8010544:	0801050d 	.word	0x0801050d
 8010548:	0801050d 	.word	0x0801050d
 801054c:	0801050d 	.word	0x0801050d
 8010550:	0801069f 	.word	0x0801069f
 8010554:	080105c1 	.word	0x080105c1
 8010558:	08010681 	.word	0x08010681
 801055c:	0801050d 	.word	0x0801050d
 8010560:	0801050d 	.word	0x0801050d
 8010564:	080106c1 	.word	0x080106c1
 8010568:	0801050d 	.word	0x0801050d
 801056c:	080105c1 	.word	0x080105c1
 8010570:	0801050d 	.word	0x0801050d
 8010574:	0801050d 	.word	0x0801050d
 8010578:	08010689 	.word	0x08010689
 801057c:	680b      	ldr	r3, [r1, #0]
 801057e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010582:	1d1a      	adds	r2, r3, #4
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	600a      	str	r2, [r1, #0]
 8010588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801058c:	2301      	movs	r3, #1
 801058e:	e0a4      	b.n	80106da <_printf_i+0x1f6>
 8010590:	6825      	ldr	r5, [r4, #0]
 8010592:	6808      	ldr	r0, [r1, #0]
 8010594:	062e      	lsls	r6, r5, #24
 8010596:	f100 0304 	add.w	r3, r0, #4
 801059a:	d50a      	bpl.n	80105b2 <_printf_i+0xce>
 801059c:	6805      	ldr	r5, [r0, #0]
 801059e:	600b      	str	r3, [r1, #0]
 80105a0:	2d00      	cmp	r5, #0
 80105a2:	da03      	bge.n	80105ac <_printf_i+0xc8>
 80105a4:	232d      	movs	r3, #45	; 0x2d
 80105a6:	426d      	negs	r5, r5
 80105a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105ac:	230a      	movs	r3, #10
 80105ae:	485e      	ldr	r0, [pc, #376]	; (8010728 <_printf_i+0x244>)
 80105b0:	e019      	b.n	80105e6 <_printf_i+0x102>
 80105b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80105b6:	6805      	ldr	r5, [r0, #0]
 80105b8:	600b      	str	r3, [r1, #0]
 80105ba:	bf18      	it	ne
 80105bc:	b22d      	sxthne	r5, r5
 80105be:	e7ef      	b.n	80105a0 <_printf_i+0xbc>
 80105c0:	680b      	ldr	r3, [r1, #0]
 80105c2:	6825      	ldr	r5, [r4, #0]
 80105c4:	1d18      	adds	r0, r3, #4
 80105c6:	6008      	str	r0, [r1, #0]
 80105c8:	0628      	lsls	r0, r5, #24
 80105ca:	d501      	bpl.n	80105d0 <_printf_i+0xec>
 80105cc:	681d      	ldr	r5, [r3, #0]
 80105ce:	e002      	b.n	80105d6 <_printf_i+0xf2>
 80105d0:	0669      	lsls	r1, r5, #25
 80105d2:	d5fb      	bpl.n	80105cc <_printf_i+0xe8>
 80105d4:	881d      	ldrh	r5, [r3, #0]
 80105d6:	2f6f      	cmp	r7, #111	; 0x6f
 80105d8:	bf0c      	ite	eq
 80105da:	2308      	moveq	r3, #8
 80105dc:	230a      	movne	r3, #10
 80105de:	4852      	ldr	r0, [pc, #328]	; (8010728 <_printf_i+0x244>)
 80105e0:	2100      	movs	r1, #0
 80105e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80105e6:	6866      	ldr	r6, [r4, #4]
 80105e8:	2e00      	cmp	r6, #0
 80105ea:	bfa8      	it	ge
 80105ec:	6821      	ldrge	r1, [r4, #0]
 80105ee:	60a6      	str	r6, [r4, #8]
 80105f0:	bfa4      	itt	ge
 80105f2:	f021 0104 	bicge.w	r1, r1, #4
 80105f6:	6021      	strge	r1, [r4, #0]
 80105f8:	b90d      	cbnz	r5, 80105fe <_printf_i+0x11a>
 80105fa:	2e00      	cmp	r6, #0
 80105fc:	d04d      	beq.n	801069a <_printf_i+0x1b6>
 80105fe:	4616      	mov	r6, r2
 8010600:	fbb5 f1f3 	udiv	r1, r5, r3
 8010604:	fb03 5711 	mls	r7, r3, r1, r5
 8010608:	5dc7      	ldrb	r7, [r0, r7]
 801060a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801060e:	462f      	mov	r7, r5
 8010610:	42bb      	cmp	r3, r7
 8010612:	460d      	mov	r5, r1
 8010614:	d9f4      	bls.n	8010600 <_printf_i+0x11c>
 8010616:	2b08      	cmp	r3, #8
 8010618:	d10b      	bne.n	8010632 <_printf_i+0x14e>
 801061a:	6823      	ldr	r3, [r4, #0]
 801061c:	07df      	lsls	r7, r3, #31
 801061e:	d508      	bpl.n	8010632 <_printf_i+0x14e>
 8010620:	6923      	ldr	r3, [r4, #16]
 8010622:	6861      	ldr	r1, [r4, #4]
 8010624:	4299      	cmp	r1, r3
 8010626:	bfde      	ittt	le
 8010628:	2330      	movle	r3, #48	; 0x30
 801062a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801062e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010632:	1b92      	subs	r2, r2, r6
 8010634:	6122      	str	r2, [r4, #16]
 8010636:	464b      	mov	r3, r9
 8010638:	4621      	mov	r1, r4
 801063a:	4640      	mov	r0, r8
 801063c:	f8cd a000 	str.w	sl, [sp]
 8010640:	aa03      	add	r2, sp, #12
 8010642:	f7ff fedf 	bl	8010404 <_printf_common>
 8010646:	3001      	adds	r0, #1
 8010648:	d14c      	bne.n	80106e4 <_printf_i+0x200>
 801064a:	f04f 30ff 	mov.w	r0, #4294967295
 801064e:	b004      	add	sp, #16
 8010650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010654:	4834      	ldr	r0, [pc, #208]	; (8010728 <_printf_i+0x244>)
 8010656:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801065a:	680e      	ldr	r6, [r1, #0]
 801065c:	6823      	ldr	r3, [r4, #0]
 801065e:	f856 5b04 	ldr.w	r5, [r6], #4
 8010662:	061f      	lsls	r7, r3, #24
 8010664:	600e      	str	r6, [r1, #0]
 8010666:	d514      	bpl.n	8010692 <_printf_i+0x1ae>
 8010668:	07d9      	lsls	r1, r3, #31
 801066a:	bf44      	itt	mi
 801066c:	f043 0320 	orrmi.w	r3, r3, #32
 8010670:	6023      	strmi	r3, [r4, #0]
 8010672:	b91d      	cbnz	r5, 801067c <_printf_i+0x198>
 8010674:	6823      	ldr	r3, [r4, #0]
 8010676:	f023 0320 	bic.w	r3, r3, #32
 801067a:	6023      	str	r3, [r4, #0]
 801067c:	2310      	movs	r3, #16
 801067e:	e7af      	b.n	80105e0 <_printf_i+0xfc>
 8010680:	6823      	ldr	r3, [r4, #0]
 8010682:	f043 0320 	orr.w	r3, r3, #32
 8010686:	6023      	str	r3, [r4, #0]
 8010688:	2378      	movs	r3, #120	; 0x78
 801068a:	4828      	ldr	r0, [pc, #160]	; (801072c <_printf_i+0x248>)
 801068c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010690:	e7e3      	b.n	801065a <_printf_i+0x176>
 8010692:	065e      	lsls	r6, r3, #25
 8010694:	bf48      	it	mi
 8010696:	b2ad      	uxthmi	r5, r5
 8010698:	e7e6      	b.n	8010668 <_printf_i+0x184>
 801069a:	4616      	mov	r6, r2
 801069c:	e7bb      	b.n	8010616 <_printf_i+0x132>
 801069e:	680b      	ldr	r3, [r1, #0]
 80106a0:	6826      	ldr	r6, [r4, #0]
 80106a2:	1d1d      	adds	r5, r3, #4
 80106a4:	6960      	ldr	r0, [r4, #20]
 80106a6:	600d      	str	r5, [r1, #0]
 80106a8:	0635      	lsls	r5, r6, #24
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	d501      	bpl.n	80106b2 <_printf_i+0x1ce>
 80106ae:	6018      	str	r0, [r3, #0]
 80106b0:	e002      	b.n	80106b8 <_printf_i+0x1d4>
 80106b2:	0671      	lsls	r1, r6, #25
 80106b4:	d5fb      	bpl.n	80106ae <_printf_i+0x1ca>
 80106b6:	8018      	strh	r0, [r3, #0]
 80106b8:	2300      	movs	r3, #0
 80106ba:	4616      	mov	r6, r2
 80106bc:	6123      	str	r3, [r4, #16]
 80106be:	e7ba      	b.n	8010636 <_printf_i+0x152>
 80106c0:	680b      	ldr	r3, [r1, #0]
 80106c2:	1d1a      	adds	r2, r3, #4
 80106c4:	600a      	str	r2, [r1, #0]
 80106c6:	681e      	ldr	r6, [r3, #0]
 80106c8:	2100      	movs	r1, #0
 80106ca:	4630      	mov	r0, r6
 80106cc:	6862      	ldr	r2, [r4, #4]
 80106ce:	f000 fee9 	bl	80114a4 <memchr>
 80106d2:	b108      	cbz	r0, 80106d8 <_printf_i+0x1f4>
 80106d4:	1b80      	subs	r0, r0, r6
 80106d6:	6060      	str	r0, [r4, #4]
 80106d8:	6863      	ldr	r3, [r4, #4]
 80106da:	6123      	str	r3, [r4, #16]
 80106dc:	2300      	movs	r3, #0
 80106de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106e2:	e7a8      	b.n	8010636 <_printf_i+0x152>
 80106e4:	4632      	mov	r2, r6
 80106e6:	4649      	mov	r1, r9
 80106e8:	4640      	mov	r0, r8
 80106ea:	6923      	ldr	r3, [r4, #16]
 80106ec:	47d0      	blx	sl
 80106ee:	3001      	adds	r0, #1
 80106f0:	d0ab      	beq.n	801064a <_printf_i+0x166>
 80106f2:	6823      	ldr	r3, [r4, #0]
 80106f4:	079b      	lsls	r3, r3, #30
 80106f6:	d413      	bmi.n	8010720 <_printf_i+0x23c>
 80106f8:	68e0      	ldr	r0, [r4, #12]
 80106fa:	9b03      	ldr	r3, [sp, #12]
 80106fc:	4298      	cmp	r0, r3
 80106fe:	bfb8      	it	lt
 8010700:	4618      	movlt	r0, r3
 8010702:	e7a4      	b.n	801064e <_printf_i+0x16a>
 8010704:	2301      	movs	r3, #1
 8010706:	4632      	mov	r2, r6
 8010708:	4649      	mov	r1, r9
 801070a:	4640      	mov	r0, r8
 801070c:	47d0      	blx	sl
 801070e:	3001      	adds	r0, #1
 8010710:	d09b      	beq.n	801064a <_printf_i+0x166>
 8010712:	3501      	adds	r5, #1
 8010714:	68e3      	ldr	r3, [r4, #12]
 8010716:	9903      	ldr	r1, [sp, #12]
 8010718:	1a5b      	subs	r3, r3, r1
 801071a:	42ab      	cmp	r3, r5
 801071c:	dcf2      	bgt.n	8010704 <_printf_i+0x220>
 801071e:	e7eb      	b.n	80106f8 <_printf_i+0x214>
 8010720:	2500      	movs	r5, #0
 8010722:	f104 0619 	add.w	r6, r4, #25
 8010726:	e7f5      	b.n	8010714 <_printf_i+0x230>
 8010728:	08013976 	.word	0x08013976
 801072c:	08013987 	.word	0x08013987

08010730 <realloc>:
 8010730:	4b02      	ldr	r3, [pc, #8]	; (801073c <realloc+0xc>)
 8010732:	460a      	mov	r2, r1
 8010734:	4601      	mov	r1, r0
 8010736:	6818      	ldr	r0, [r3, #0]
 8010738:	f001 ba5e 	b.w	8011bf8 <_realloc_r>
 801073c:	200001bc 	.word	0x200001bc

08010740 <_sbrk_r>:
 8010740:	b538      	push	{r3, r4, r5, lr}
 8010742:	2300      	movs	r3, #0
 8010744:	4d05      	ldr	r5, [pc, #20]	; (801075c <_sbrk_r+0x1c>)
 8010746:	4604      	mov	r4, r0
 8010748:	4608      	mov	r0, r1
 801074a:	602b      	str	r3, [r5, #0]
 801074c:	f7f5 fa9c 	bl	8005c88 <_sbrk>
 8010750:	1c43      	adds	r3, r0, #1
 8010752:	d102      	bne.n	801075a <_sbrk_r+0x1a>
 8010754:	682b      	ldr	r3, [r5, #0]
 8010756:	b103      	cbz	r3, 801075a <_sbrk_r+0x1a>
 8010758:	6023      	str	r3, [r4, #0]
 801075a:	bd38      	pop	{r3, r4, r5, pc}
 801075c:	200020cc 	.word	0x200020cc

08010760 <siprintf>:
 8010760:	b40e      	push	{r1, r2, r3}
 8010762:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010766:	b500      	push	{lr}
 8010768:	b09c      	sub	sp, #112	; 0x70
 801076a:	ab1d      	add	r3, sp, #116	; 0x74
 801076c:	9002      	str	r0, [sp, #8]
 801076e:	9006      	str	r0, [sp, #24]
 8010770:	9107      	str	r1, [sp, #28]
 8010772:	9104      	str	r1, [sp, #16]
 8010774:	4808      	ldr	r0, [pc, #32]	; (8010798 <siprintf+0x38>)
 8010776:	4909      	ldr	r1, [pc, #36]	; (801079c <siprintf+0x3c>)
 8010778:	f853 2b04 	ldr.w	r2, [r3], #4
 801077c:	9105      	str	r1, [sp, #20]
 801077e:	6800      	ldr	r0, [r0, #0]
 8010780:	a902      	add	r1, sp, #8
 8010782:	9301      	str	r3, [sp, #4]
 8010784:	f001 faba 	bl	8011cfc <_svfiprintf_r>
 8010788:	2200      	movs	r2, #0
 801078a:	9b02      	ldr	r3, [sp, #8]
 801078c:	701a      	strb	r2, [r3, #0]
 801078e:	b01c      	add	sp, #112	; 0x70
 8010790:	f85d eb04 	ldr.w	lr, [sp], #4
 8010794:	b003      	add	sp, #12
 8010796:	4770      	bx	lr
 8010798:	200001bc 	.word	0x200001bc
 801079c:	ffff0208 	.word	0xffff0208

080107a0 <quorem>:
 80107a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a4:	6903      	ldr	r3, [r0, #16]
 80107a6:	690c      	ldr	r4, [r1, #16]
 80107a8:	4607      	mov	r7, r0
 80107aa:	42a3      	cmp	r3, r4
 80107ac:	f2c0 8083 	blt.w	80108b6 <quorem+0x116>
 80107b0:	3c01      	subs	r4, #1
 80107b2:	f100 0514 	add.w	r5, r0, #20
 80107b6:	f101 0814 	add.w	r8, r1, #20
 80107ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107be:	9301      	str	r3, [sp, #4]
 80107c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80107c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107c8:	3301      	adds	r3, #1
 80107ca:	429a      	cmp	r2, r3
 80107cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80107d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80107d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80107d8:	d332      	bcc.n	8010840 <quorem+0xa0>
 80107da:	f04f 0e00 	mov.w	lr, #0
 80107de:	4640      	mov	r0, r8
 80107e0:	46ac      	mov	ip, r5
 80107e2:	46f2      	mov	sl, lr
 80107e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80107e8:	b293      	uxth	r3, r2
 80107ea:	fb06 e303 	mla	r3, r6, r3, lr
 80107ee:	0c12      	lsrs	r2, r2, #16
 80107f0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80107f4:	fb06 e202 	mla	r2, r6, r2, lr
 80107f8:	b29b      	uxth	r3, r3
 80107fa:	ebaa 0303 	sub.w	r3, sl, r3
 80107fe:	f8dc a000 	ldr.w	sl, [ip]
 8010802:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010806:	fa1f fa8a 	uxth.w	sl, sl
 801080a:	4453      	add	r3, sl
 801080c:	fa1f fa82 	uxth.w	sl, r2
 8010810:	f8dc 2000 	ldr.w	r2, [ip]
 8010814:	4581      	cmp	r9, r0
 8010816:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801081a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801081e:	b29b      	uxth	r3, r3
 8010820:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010824:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010828:	f84c 3b04 	str.w	r3, [ip], #4
 801082c:	d2da      	bcs.n	80107e4 <quorem+0x44>
 801082e:	f855 300b 	ldr.w	r3, [r5, fp]
 8010832:	b92b      	cbnz	r3, 8010840 <quorem+0xa0>
 8010834:	9b01      	ldr	r3, [sp, #4]
 8010836:	3b04      	subs	r3, #4
 8010838:	429d      	cmp	r5, r3
 801083a:	461a      	mov	r2, r3
 801083c:	d32f      	bcc.n	801089e <quorem+0xfe>
 801083e:	613c      	str	r4, [r7, #16]
 8010840:	4638      	mov	r0, r7
 8010842:	f001 f8c3 	bl	80119cc <__mcmp>
 8010846:	2800      	cmp	r0, #0
 8010848:	db25      	blt.n	8010896 <quorem+0xf6>
 801084a:	4628      	mov	r0, r5
 801084c:	f04f 0c00 	mov.w	ip, #0
 8010850:	3601      	adds	r6, #1
 8010852:	f858 1b04 	ldr.w	r1, [r8], #4
 8010856:	f8d0 e000 	ldr.w	lr, [r0]
 801085a:	b28b      	uxth	r3, r1
 801085c:	ebac 0303 	sub.w	r3, ip, r3
 8010860:	fa1f f28e 	uxth.w	r2, lr
 8010864:	4413      	add	r3, r2
 8010866:	0c0a      	lsrs	r2, r1, #16
 8010868:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801086c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010870:	b29b      	uxth	r3, r3
 8010872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010876:	45c1      	cmp	r9, r8
 8010878:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801087c:	f840 3b04 	str.w	r3, [r0], #4
 8010880:	d2e7      	bcs.n	8010852 <quorem+0xb2>
 8010882:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010886:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801088a:	b922      	cbnz	r2, 8010896 <quorem+0xf6>
 801088c:	3b04      	subs	r3, #4
 801088e:	429d      	cmp	r5, r3
 8010890:	461a      	mov	r2, r3
 8010892:	d30a      	bcc.n	80108aa <quorem+0x10a>
 8010894:	613c      	str	r4, [r7, #16]
 8010896:	4630      	mov	r0, r6
 8010898:	b003      	add	sp, #12
 801089a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089e:	6812      	ldr	r2, [r2, #0]
 80108a0:	3b04      	subs	r3, #4
 80108a2:	2a00      	cmp	r2, #0
 80108a4:	d1cb      	bne.n	801083e <quorem+0x9e>
 80108a6:	3c01      	subs	r4, #1
 80108a8:	e7c6      	b.n	8010838 <quorem+0x98>
 80108aa:	6812      	ldr	r2, [r2, #0]
 80108ac:	3b04      	subs	r3, #4
 80108ae:	2a00      	cmp	r2, #0
 80108b0:	d1f0      	bne.n	8010894 <quorem+0xf4>
 80108b2:	3c01      	subs	r4, #1
 80108b4:	e7eb      	b.n	801088e <quorem+0xee>
 80108b6:	2000      	movs	r0, #0
 80108b8:	e7ee      	b.n	8010898 <quorem+0xf8>
 80108ba:	0000      	movs	r0, r0
 80108bc:	0000      	movs	r0, r0
	...

080108c0 <_dtoa_r>:
 80108c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c4:	4616      	mov	r6, r2
 80108c6:	461f      	mov	r7, r3
 80108c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80108ca:	b099      	sub	sp, #100	; 0x64
 80108cc:	4605      	mov	r5, r0
 80108ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80108d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80108d6:	b974      	cbnz	r4, 80108f6 <_dtoa_r+0x36>
 80108d8:	2010      	movs	r0, #16
 80108da:	f7ff f9ef 	bl	800fcbc <malloc>
 80108de:	4602      	mov	r2, r0
 80108e0:	6268      	str	r0, [r5, #36]	; 0x24
 80108e2:	b920      	cbnz	r0, 80108ee <_dtoa_r+0x2e>
 80108e4:	21ea      	movs	r1, #234	; 0xea
 80108e6:	4bae      	ldr	r3, [pc, #696]	; (8010ba0 <_dtoa_r+0x2e0>)
 80108e8:	48ae      	ldr	r0, [pc, #696]	; (8010ba4 <_dtoa_r+0x2e4>)
 80108ea:	f001 fb07 	bl	8011efc <__assert_func>
 80108ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80108f2:	6004      	str	r4, [r0, #0]
 80108f4:	60c4      	str	r4, [r0, #12]
 80108f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80108f8:	6819      	ldr	r1, [r3, #0]
 80108fa:	b151      	cbz	r1, 8010912 <_dtoa_r+0x52>
 80108fc:	685a      	ldr	r2, [r3, #4]
 80108fe:	2301      	movs	r3, #1
 8010900:	4093      	lsls	r3, r2
 8010902:	604a      	str	r2, [r1, #4]
 8010904:	608b      	str	r3, [r1, #8]
 8010906:	4628      	mov	r0, r5
 8010908:	f000 fe26 	bl	8011558 <_Bfree>
 801090c:	2200      	movs	r2, #0
 801090e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010910:	601a      	str	r2, [r3, #0]
 8010912:	1e3b      	subs	r3, r7, #0
 8010914:	bfaf      	iteee	ge
 8010916:	2300      	movge	r3, #0
 8010918:	2201      	movlt	r2, #1
 801091a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801091e:	9305      	strlt	r3, [sp, #20]
 8010920:	bfa8      	it	ge
 8010922:	f8c8 3000 	strge.w	r3, [r8]
 8010926:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801092a:	4b9f      	ldr	r3, [pc, #636]	; (8010ba8 <_dtoa_r+0x2e8>)
 801092c:	bfb8      	it	lt
 801092e:	f8c8 2000 	strlt.w	r2, [r8]
 8010932:	ea33 0309 	bics.w	r3, r3, r9
 8010936:	d119      	bne.n	801096c <_dtoa_r+0xac>
 8010938:	f242 730f 	movw	r3, #9999	; 0x270f
 801093c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801093e:	6013      	str	r3, [r2, #0]
 8010940:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010944:	4333      	orrs	r3, r6
 8010946:	f000 8580 	beq.w	801144a <_dtoa_r+0xb8a>
 801094a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801094c:	b953      	cbnz	r3, 8010964 <_dtoa_r+0xa4>
 801094e:	4b97      	ldr	r3, [pc, #604]	; (8010bac <_dtoa_r+0x2ec>)
 8010950:	e022      	b.n	8010998 <_dtoa_r+0xd8>
 8010952:	4b97      	ldr	r3, [pc, #604]	; (8010bb0 <_dtoa_r+0x2f0>)
 8010954:	9308      	str	r3, [sp, #32]
 8010956:	3308      	adds	r3, #8
 8010958:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801095a:	6013      	str	r3, [r2, #0]
 801095c:	9808      	ldr	r0, [sp, #32]
 801095e:	b019      	add	sp, #100	; 0x64
 8010960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010964:	4b91      	ldr	r3, [pc, #580]	; (8010bac <_dtoa_r+0x2ec>)
 8010966:	9308      	str	r3, [sp, #32]
 8010968:	3303      	adds	r3, #3
 801096a:	e7f5      	b.n	8010958 <_dtoa_r+0x98>
 801096c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010970:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8010974:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010978:	2200      	movs	r2, #0
 801097a:	2300      	movs	r3, #0
 801097c:	f7f0 f850 	bl	8000a20 <__aeabi_dcmpeq>
 8010980:	4680      	mov	r8, r0
 8010982:	b158      	cbz	r0, 801099c <_dtoa_r+0xdc>
 8010984:	2301      	movs	r3, #1
 8010986:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010988:	6013      	str	r3, [r2, #0]
 801098a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801098c:	2b00      	cmp	r3, #0
 801098e:	f000 8559 	beq.w	8011444 <_dtoa_r+0xb84>
 8010992:	4888      	ldr	r0, [pc, #544]	; (8010bb4 <_dtoa_r+0x2f4>)
 8010994:	6018      	str	r0, [r3, #0]
 8010996:	1e43      	subs	r3, r0, #1
 8010998:	9308      	str	r3, [sp, #32]
 801099a:	e7df      	b.n	801095c <_dtoa_r+0x9c>
 801099c:	ab16      	add	r3, sp, #88	; 0x58
 801099e:	9301      	str	r3, [sp, #4]
 80109a0:	ab17      	add	r3, sp, #92	; 0x5c
 80109a2:	9300      	str	r3, [sp, #0]
 80109a4:	4628      	mov	r0, r5
 80109a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80109aa:	f001 f8bb 	bl	8011b24 <__d2b>
 80109ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80109b2:	4682      	mov	sl, r0
 80109b4:	2c00      	cmp	r4, #0
 80109b6:	d07e      	beq.n	8010ab6 <_dtoa_r+0x1f6>
 80109b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80109bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109be:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80109c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80109c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80109ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80109ce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80109d2:	2200      	movs	r2, #0
 80109d4:	4b78      	ldr	r3, [pc, #480]	; (8010bb8 <_dtoa_r+0x2f8>)
 80109d6:	f7ef fc03 	bl	80001e0 <__aeabi_dsub>
 80109da:	a36b      	add	r3, pc, #428	; (adr r3, 8010b88 <_dtoa_r+0x2c8>)
 80109dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e0:	f7ef fdb6 	bl	8000550 <__aeabi_dmul>
 80109e4:	a36a      	add	r3, pc, #424	; (adr r3, 8010b90 <_dtoa_r+0x2d0>)
 80109e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ea:	f7ef fbfb 	bl	80001e4 <__adddf3>
 80109ee:	4606      	mov	r6, r0
 80109f0:	4620      	mov	r0, r4
 80109f2:	460f      	mov	r7, r1
 80109f4:	f7ef fd42 	bl	800047c <__aeabi_i2d>
 80109f8:	a367      	add	r3, pc, #412	; (adr r3, 8010b98 <_dtoa_r+0x2d8>)
 80109fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109fe:	f7ef fda7 	bl	8000550 <__aeabi_dmul>
 8010a02:	4602      	mov	r2, r0
 8010a04:	460b      	mov	r3, r1
 8010a06:	4630      	mov	r0, r6
 8010a08:	4639      	mov	r1, r7
 8010a0a:	f7ef fbeb 	bl	80001e4 <__adddf3>
 8010a0e:	4606      	mov	r6, r0
 8010a10:	460f      	mov	r7, r1
 8010a12:	f7f0 f84d 	bl	8000ab0 <__aeabi_d2iz>
 8010a16:	2200      	movs	r2, #0
 8010a18:	4681      	mov	r9, r0
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	4630      	mov	r0, r6
 8010a1e:	4639      	mov	r1, r7
 8010a20:	f7f0 f808 	bl	8000a34 <__aeabi_dcmplt>
 8010a24:	b148      	cbz	r0, 8010a3a <_dtoa_r+0x17a>
 8010a26:	4648      	mov	r0, r9
 8010a28:	f7ef fd28 	bl	800047c <__aeabi_i2d>
 8010a2c:	4632      	mov	r2, r6
 8010a2e:	463b      	mov	r3, r7
 8010a30:	f7ef fff6 	bl	8000a20 <__aeabi_dcmpeq>
 8010a34:	b908      	cbnz	r0, 8010a3a <_dtoa_r+0x17a>
 8010a36:	f109 39ff 	add.w	r9, r9, #4294967295
 8010a3a:	f1b9 0f16 	cmp.w	r9, #22
 8010a3e:	d857      	bhi.n	8010af0 <_dtoa_r+0x230>
 8010a40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010a44:	4b5d      	ldr	r3, [pc, #372]	; (8010bbc <_dtoa_r+0x2fc>)
 8010a46:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4e:	f7ef fff1 	bl	8000a34 <__aeabi_dcmplt>
 8010a52:	2800      	cmp	r0, #0
 8010a54:	d04e      	beq.n	8010af4 <_dtoa_r+0x234>
 8010a56:	2300      	movs	r3, #0
 8010a58:	f109 39ff 	add.w	r9, r9, #4294967295
 8010a5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010a60:	1b1c      	subs	r4, r3, r4
 8010a62:	1e63      	subs	r3, r4, #1
 8010a64:	9309      	str	r3, [sp, #36]	; 0x24
 8010a66:	bf49      	itett	mi
 8010a68:	f1c4 0301 	rsbmi	r3, r4, #1
 8010a6c:	2300      	movpl	r3, #0
 8010a6e:	9306      	strmi	r3, [sp, #24]
 8010a70:	2300      	movmi	r3, #0
 8010a72:	bf54      	ite	pl
 8010a74:	9306      	strpl	r3, [sp, #24]
 8010a76:	9309      	strmi	r3, [sp, #36]	; 0x24
 8010a78:	f1b9 0f00 	cmp.w	r9, #0
 8010a7c:	db3c      	blt.n	8010af8 <_dtoa_r+0x238>
 8010a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a80:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010a84:	444b      	add	r3, r9
 8010a86:	9309      	str	r3, [sp, #36]	; 0x24
 8010a88:	2300      	movs	r3, #0
 8010a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8010a8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010a8e:	2b09      	cmp	r3, #9
 8010a90:	d86c      	bhi.n	8010b6c <_dtoa_r+0x2ac>
 8010a92:	2b05      	cmp	r3, #5
 8010a94:	bfc4      	itt	gt
 8010a96:	3b04      	subgt	r3, #4
 8010a98:	9322      	strgt	r3, [sp, #136]	; 0x88
 8010a9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010a9c:	bfc8      	it	gt
 8010a9e:	2400      	movgt	r4, #0
 8010aa0:	f1a3 0302 	sub.w	r3, r3, #2
 8010aa4:	bfd8      	it	le
 8010aa6:	2401      	movle	r4, #1
 8010aa8:	2b03      	cmp	r3, #3
 8010aaa:	f200 808b 	bhi.w	8010bc4 <_dtoa_r+0x304>
 8010aae:	e8df f003 	tbb	[pc, r3]
 8010ab2:	4f2d      	.short	0x4f2d
 8010ab4:	5b4d      	.short	0x5b4d
 8010ab6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8010aba:	441c      	add	r4, r3
 8010abc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8010ac0:	2b20      	cmp	r3, #32
 8010ac2:	bfc3      	ittte	gt
 8010ac4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010ac8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8010acc:	fa09 f303 	lslgt.w	r3, r9, r3
 8010ad0:	f1c3 0320 	rsble	r3, r3, #32
 8010ad4:	bfc6      	itte	gt
 8010ad6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010ada:	4318      	orrgt	r0, r3
 8010adc:	fa06 f003 	lslle.w	r0, r6, r3
 8010ae0:	f7ef fcbc 	bl	800045c <__aeabi_ui2d>
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8010aea:	3c01      	subs	r4, #1
 8010aec:	9313      	str	r3, [sp, #76]	; 0x4c
 8010aee:	e770      	b.n	80109d2 <_dtoa_r+0x112>
 8010af0:	2301      	movs	r3, #1
 8010af2:	e7b3      	b.n	8010a5c <_dtoa_r+0x19c>
 8010af4:	900f      	str	r0, [sp, #60]	; 0x3c
 8010af6:	e7b2      	b.n	8010a5e <_dtoa_r+0x19e>
 8010af8:	9b06      	ldr	r3, [sp, #24]
 8010afa:	eba3 0309 	sub.w	r3, r3, r9
 8010afe:	9306      	str	r3, [sp, #24]
 8010b00:	f1c9 0300 	rsb	r3, r9, #0
 8010b04:	930a      	str	r3, [sp, #40]	; 0x28
 8010b06:	2300      	movs	r3, #0
 8010b08:	930e      	str	r3, [sp, #56]	; 0x38
 8010b0a:	e7bf      	b.n	8010a8c <_dtoa_r+0x1cc>
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	dc59      	bgt.n	8010bca <_dtoa_r+0x30a>
 8010b16:	f04f 0b01 	mov.w	fp, #1
 8010b1a:	465b      	mov	r3, fp
 8010b1c:	f8cd b008 	str.w	fp, [sp, #8]
 8010b20:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8010b24:	2200      	movs	r2, #0
 8010b26:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8010b28:	6042      	str	r2, [r0, #4]
 8010b2a:	2204      	movs	r2, #4
 8010b2c:	f102 0614 	add.w	r6, r2, #20
 8010b30:	429e      	cmp	r6, r3
 8010b32:	6841      	ldr	r1, [r0, #4]
 8010b34:	d94f      	bls.n	8010bd6 <_dtoa_r+0x316>
 8010b36:	4628      	mov	r0, r5
 8010b38:	f000 fcce 	bl	80114d8 <_Balloc>
 8010b3c:	9008      	str	r0, [sp, #32]
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	d14d      	bne.n	8010bde <_dtoa_r+0x31e>
 8010b42:	4602      	mov	r2, r0
 8010b44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010b48:	4b1d      	ldr	r3, [pc, #116]	; (8010bc0 <_dtoa_r+0x300>)
 8010b4a:	e6cd      	b.n	80108e8 <_dtoa_r+0x28>
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	e7de      	b.n	8010b0e <_dtoa_r+0x24e>
 8010b50:	2300      	movs	r3, #0
 8010b52:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010b56:	eb09 0b03 	add.w	fp, r9, r3
 8010b5a:	f10b 0301 	add.w	r3, fp, #1
 8010b5e:	2b01      	cmp	r3, #1
 8010b60:	9302      	str	r3, [sp, #8]
 8010b62:	bfb8      	it	lt
 8010b64:	2301      	movlt	r3, #1
 8010b66:	e7dd      	b.n	8010b24 <_dtoa_r+0x264>
 8010b68:	2301      	movs	r3, #1
 8010b6a:	e7f2      	b.n	8010b52 <_dtoa_r+0x292>
 8010b6c:	2401      	movs	r4, #1
 8010b6e:	2300      	movs	r3, #0
 8010b70:	940b      	str	r4, [sp, #44]	; 0x2c
 8010b72:	9322      	str	r3, [sp, #136]	; 0x88
 8010b74:	f04f 3bff 	mov.w	fp, #4294967295
 8010b78:	2200      	movs	r2, #0
 8010b7a:	2312      	movs	r3, #18
 8010b7c:	f8cd b008 	str.w	fp, [sp, #8]
 8010b80:	9223      	str	r2, [sp, #140]	; 0x8c
 8010b82:	e7cf      	b.n	8010b24 <_dtoa_r+0x264>
 8010b84:	f3af 8000 	nop.w
 8010b88:	636f4361 	.word	0x636f4361
 8010b8c:	3fd287a7 	.word	0x3fd287a7
 8010b90:	8b60c8b3 	.word	0x8b60c8b3
 8010b94:	3fc68a28 	.word	0x3fc68a28
 8010b98:	509f79fb 	.word	0x509f79fb
 8010b9c:	3fd34413 	.word	0x3fd34413
 8010ba0:	080139a5 	.word	0x080139a5
 8010ba4:	080139bc 	.word	0x080139bc
 8010ba8:	7ff00000 	.word	0x7ff00000
 8010bac:	080139a1 	.word	0x080139a1
 8010bb0:	08013998 	.word	0x08013998
 8010bb4:	08013975 	.word	0x08013975
 8010bb8:	3ff80000 	.word	0x3ff80000
 8010bbc:	08013ab8 	.word	0x08013ab8
 8010bc0:	08013a1b 	.word	0x08013a1b
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8010bc8:	e7d4      	b.n	8010b74 <_dtoa_r+0x2b4>
 8010bca:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8010bce:	465b      	mov	r3, fp
 8010bd0:	f8cd b008 	str.w	fp, [sp, #8]
 8010bd4:	e7a6      	b.n	8010b24 <_dtoa_r+0x264>
 8010bd6:	3101      	adds	r1, #1
 8010bd8:	6041      	str	r1, [r0, #4]
 8010bda:	0052      	lsls	r2, r2, #1
 8010bdc:	e7a6      	b.n	8010b2c <_dtoa_r+0x26c>
 8010bde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010be0:	9a08      	ldr	r2, [sp, #32]
 8010be2:	601a      	str	r2, [r3, #0]
 8010be4:	9b02      	ldr	r3, [sp, #8]
 8010be6:	2b0e      	cmp	r3, #14
 8010be8:	f200 80a8 	bhi.w	8010d3c <_dtoa_r+0x47c>
 8010bec:	2c00      	cmp	r4, #0
 8010bee:	f000 80a5 	beq.w	8010d3c <_dtoa_r+0x47c>
 8010bf2:	f1b9 0f00 	cmp.w	r9, #0
 8010bf6:	dd34      	ble.n	8010c62 <_dtoa_r+0x3a2>
 8010bf8:	4a9a      	ldr	r2, [pc, #616]	; (8010e64 <_dtoa_r+0x5a4>)
 8010bfa:	f009 030f 	and.w	r3, r9, #15
 8010bfe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010c02:	f419 7f80 	tst.w	r9, #256	; 0x100
 8010c06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010c0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8010c0e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8010c12:	d016      	beq.n	8010c42 <_dtoa_r+0x382>
 8010c14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010c18:	4b93      	ldr	r3, [pc, #588]	; (8010e68 <_dtoa_r+0x5a8>)
 8010c1a:	2703      	movs	r7, #3
 8010c1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010c20:	f7ef fdc0 	bl	80007a4 <__aeabi_ddiv>
 8010c24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c28:	f004 040f 	and.w	r4, r4, #15
 8010c2c:	4e8e      	ldr	r6, [pc, #568]	; (8010e68 <_dtoa_r+0x5a8>)
 8010c2e:	b954      	cbnz	r4, 8010c46 <_dtoa_r+0x386>
 8010c30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010c34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c38:	f7ef fdb4 	bl	80007a4 <__aeabi_ddiv>
 8010c3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c40:	e029      	b.n	8010c96 <_dtoa_r+0x3d6>
 8010c42:	2702      	movs	r7, #2
 8010c44:	e7f2      	b.n	8010c2c <_dtoa_r+0x36c>
 8010c46:	07e1      	lsls	r1, r4, #31
 8010c48:	d508      	bpl.n	8010c5c <_dtoa_r+0x39c>
 8010c4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010c4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010c52:	f7ef fc7d 	bl	8000550 <__aeabi_dmul>
 8010c56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010c5a:	3701      	adds	r7, #1
 8010c5c:	1064      	asrs	r4, r4, #1
 8010c5e:	3608      	adds	r6, #8
 8010c60:	e7e5      	b.n	8010c2e <_dtoa_r+0x36e>
 8010c62:	f000 80a5 	beq.w	8010db0 <_dtoa_r+0x4f0>
 8010c66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010c6a:	f1c9 0400 	rsb	r4, r9, #0
 8010c6e:	4b7d      	ldr	r3, [pc, #500]	; (8010e64 <_dtoa_r+0x5a4>)
 8010c70:	f004 020f 	and.w	r2, r4, #15
 8010c74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7c:	f7ef fc68 	bl	8000550 <__aeabi_dmul>
 8010c80:	2702      	movs	r7, #2
 8010c82:	2300      	movs	r3, #0
 8010c84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c88:	4e77      	ldr	r6, [pc, #476]	; (8010e68 <_dtoa_r+0x5a8>)
 8010c8a:	1124      	asrs	r4, r4, #4
 8010c8c:	2c00      	cmp	r4, #0
 8010c8e:	f040 8084 	bne.w	8010d9a <_dtoa_r+0x4da>
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d1d2      	bne.n	8010c3c <_dtoa_r+0x37c>
 8010c96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	f000 808b 	beq.w	8010db4 <_dtoa_r+0x4f4>
 8010c9e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010ca2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8010ca6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010caa:	2200      	movs	r2, #0
 8010cac:	4b6f      	ldr	r3, [pc, #444]	; (8010e6c <_dtoa_r+0x5ac>)
 8010cae:	f7ef fec1 	bl	8000a34 <__aeabi_dcmplt>
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	d07e      	beq.n	8010db4 <_dtoa_r+0x4f4>
 8010cb6:	9b02      	ldr	r3, [sp, #8]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d07b      	beq.n	8010db4 <_dtoa_r+0x4f4>
 8010cbc:	f1bb 0f00 	cmp.w	fp, #0
 8010cc0:	dd38      	ble.n	8010d34 <_dtoa_r+0x474>
 8010cc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	4b69      	ldr	r3, [pc, #420]	; (8010e70 <_dtoa_r+0x5b0>)
 8010cca:	f7ef fc41 	bl	8000550 <__aeabi_dmul>
 8010cce:	465c      	mov	r4, fp
 8010cd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010cd4:	f109 38ff 	add.w	r8, r9, #4294967295
 8010cd8:	3701      	adds	r7, #1
 8010cda:	4638      	mov	r0, r7
 8010cdc:	f7ef fbce 	bl	800047c <__aeabi_i2d>
 8010ce0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ce4:	f7ef fc34 	bl	8000550 <__aeabi_dmul>
 8010ce8:	2200      	movs	r2, #0
 8010cea:	4b62      	ldr	r3, [pc, #392]	; (8010e74 <_dtoa_r+0x5b4>)
 8010cec:	f7ef fa7a 	bl	80001e4 <__adddf3>
 8010cf0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010cf4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010cf8:	9611      	str	r6, [sp, #68]	; 0x44
 8010cfa:	2c00      	cmp	r4, #0
 8010cfc:	d15d      	bne.n	8010dba <_dtoa_r+0x4fa>
 8010cfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d02:	2200      	movs	r2, #0
 8010d04:	4b5c      	ldr	r3, [pc, #368]	; (8010e78 <_dtoa_r+0x5b8>)
 8010d06:	f7ef fa6b 	bl	80001e0 <__aeabi_dsub>
 8010d0a:	4602      	mov	r2, r0
 8010d0c:	460b      	mov	r3, r1
 8010d0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010d12:	4633      	mov	r3, r6
 8010d14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010d16:	f7ef feab 	bl	8000a70 <__aeabi_dcmpgt>
 8010d1a:	2800      	cmp	r0, #0
 8010d1c:	f040 829e 	bne.w	801125c <_dtoa_r+0x99c>
 8010d20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010d26:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010d2a:	f7ef fe83 	bl	8000a34 <__aeabi_dcmplt>
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	f040 8292 	bne.w	8011258 <_dtoa_r+0x998>
 8010d34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8010d38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010d3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	f2c0 8153 	blt.w	8010fea <_dtoa_r+0x72a>
 8010d44:	f1b9 0f0e 	cmp.w	r9, #14
 8010d48:	f300 814f 	bgt.w	8010fea <_dtoa_r+0x72a>
 8010d4c:	4b45      	ldr	r3, [pc, #276]	; (8010e64 <_dtoa_r+0x5a4>)
 8010d4e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010d52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010d56:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8010d5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	f280 80db 	bge.w	8010f18 <_dtoa_r+0x658>
 8010d62:	9b02      	ldr	r3, [sp, #8]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	f300 80d7 	bgt.w	8010f18 <_dtoa_r+0x658>
 8010d6a:	f040 8274 	bne.w	8011256 <_dtoa_r+0x996>
 8010d6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d72:	2200      	movs	r2, #0
 8010d74:	4b40      	ldr	r3, [pc, #256]	; (8010e78 <_dtoa_r+0x5b8>)
 8010d76:	f7ef fbeb 	bl	8000550 <__aeabi_dmul>
 8010d7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d7e:	f7ef fe6d 	bl	8000a5c <__aeabi_dcmpge>
 8010d82:	9c02      	ldr	r4, [sp, #8]
 8010d84:	4626      	mov	r6, r4
 8010d86:	2800      	cmp	r0, #0
 8010d88:	f040 824a 	bne.w	8011220 <_dtoa_r+0x960>
 8010d8c:	2331      	movs	r3, #49	; 0x31
 8010d8e:	9f08      	ldr	r7, [sp, #32]
 8010d90:	f109 0901 	add.w	r9, r9, #1
 8010d94:	f807 3b01 	strb.w	r3, [r7], #1
 8010d98:	e246      	b.n	8011228 <_dtoa_r+0x968>
 8010d9a:	07e2      	lsls	r2, r4, #31
 8010d9c:	d505      	bpl.n	8010daa <_dtoa_r+0x4ea>
 8010d9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010da2:	f7ef fbd5 	bl	8000550 <__aeabi_dmul>
 8010da6:	2301      	movs	r3, #1
 8010da8:	3701      	adds	r7, #1
 8010daa:	1064      	asrs	r4, r4, #1
 8010dac:	3608      	adds	r6, #8
 8010dae:	e76d      	b.n	8010c8c <_dtoa_r+0x3cc>
 8010db0:	2702      	movs	r7, #2
 8010db2:	e770      	b.n	8010c96 <_dtoa_r+0x3d6>
 8010db4:	46c8      	mov	r8, r9
 8010db6:	9c02      	ldr	r4, [sp, #8]
 8010db8:	e78f      	b.n	8010cda <_dtoa_r+0x41a>
 8010dba:	9908      	ldr	r1, [sp, #32]
 8010dbc:	4b29      	ldr	r3, [pc, #164]	; (8010e64 <_dtoa_r+0x5a4>)
 8010dbe:	4421      	add	r1, r4
 8010dc0:	9112      	str	r1, [sp, #72]	; 0x48
 8010dc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010dc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010dc8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8010dcc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010dd0:	2900      	cmp	r1, #0
 8010dd2:	d055      	beq.n	8010e80 <_dtoa_r+0x5c0>
 8010dd4:	2000      	movs	r0, #0
 8010dd6:	4929      	ldr	r1, [pc, #164]	; (8010e7c <_dtoa_r+0x5bc>)
 8010dd8:	f7ef fce4 	bl	80007a4 <__aeabi_ddiv>
 8010ddc:	463b      	mov	r3, r7
 8010dde:	4632      	mov	r2, r6
 8010de0:	f7ef f9fe 	bl	80001e0 <__aeabi_dsub>
 8010de4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010de8:	9f08      	ldr	r7, [sp, #32]
 8010dea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010dee:	f7ef fe5f 	bl	8000ab0 <__aeabi_d2iz>
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ef fb42 	bl	800047c <__aeabi_i2d>
 8010df8:	4602      	mov	r2, r0
 8010dfa:	460b      	mov	r3, r1
 8010dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e00:	f7ef f9ee 	bl	80001e0 <__aeabi_dsub>
 8010e04:	4602      	mov	r2, r0
 8010e06:	460b      	mov	r3, r1
 8010e08:	3430      	adds	r4, #48	; 0x30
 8010e0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010e12:	f807 4b01 	strb.w	r4, [r7], #1
 8010e16:	f7ef fe0d 	bl	8000a34 <__aeabi_dcmplt>
 8010e1a:	2800      	cmp	r0, #0
 8010e1c:	d174      	bne.n	8010f08 <_dtoa_r+0x648>
 8010e1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e22:	2000      	movs	r0, #0
 8010e24:	4911      	ldr	r1, [pc, #68]	; (8010e6c <_dtoa_r+0x5ac>)
 8010e26:	f7ef f9db 	bl	80001e0 <__aeabi_dsub>
 8010e2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010e2e:	f7ef fe01 	bl	8000a34 <__aeabi_dcmplt>
 8010e32:	2800      	cmp	r0, #0
 8010e34:	f040 80b6 	bne.w	8010fa4 <_dtoa_r+0x6e4>
 8010e38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010e3a:	429f      	cmp	r7, r3
 8010e3c:	f43f af7a 	beq.w	8010d34 <_dtoa_r+0x474>
 8010e40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010e44:	2200      	movs	r2, #0
 8010e46:	4b0a      	ldr	r3, [pc, #40]	; (8010e70 <_dtoa_r+0x5b0>)
 8010e48:	f7ef fb82 	bl	8000550 <__aeabi_dmul>
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010e52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e56:	4b06      	ldr	r3, [pc, #24]	; (8010e70 <_dtoa_r+0x5b0>)
 8010e58:	f7ef fb7a 	bl	8000550 <__aeabi_dmul>
 8010e5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e60:	e7c3      	b.n	8010dea <_dtoa_r+0x52a>
 8010e62:	bf00      	nop
 8010e64:	08013ab8 	.word	0x08013ab8
 8010e68:	08013a90 	.word	0x08013a90
 8010e6c:	3ff00000 	.word	0x3ff00000
 8010e70:	40240000 	.word	0x40240000
 8010e74:	401c0000 	.word	0x401c0000
 8010e78:	40140000 	.word	0x40140000
 8010e7c:	3fe00000 	.word	0x3fe00000
 8010e80:	4630      	mov	r0, r6
 8010e82:	4639      	mov	r1, r7
 8010e84:	f7ef fb64 	bl	8000550 <__aeabi_dmul>
 8010e88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010e8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010e8e:	9c08      	ldr	r4, [sp, #32]
 8010e90:	9314      	str	r3, [sp, #80]	; 0x50
 8010e92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e96:	f7ef fe0b 	bl	8000ab0 <__aeabi_d2iz>
 8010e9a:	9015      	str	r0, [sp, #84]	; 0x54
 8010e9c:	f7ef faee 	bl	800047c <__aeabi_i2d>
 8010ea0:	4602      	mov	r2, r0
 8010ea2:	460b      	mov	r3, r1
 8010ea4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ea8:	f7ef f99a 	bl	80001e0 <__aeabi_dsub>
 8010eac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010eae:	4606      	mov	r6, r0
 8010eb0:	3330      	adds	r3, #48	; 0x30
 8010eb2:	f804 3b01 	strb.w	r3, [r4], #1
 8010eb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010eb8:	460f      	mov	r7, r1
 8010eba:	429c      	cmp	r4, r3
 8010ebc:	f04f 0200 	mov.w	r2, #0
 8010ec0:	d124      	bne.n	8010f0c <_dtoa_r+0x64c>
 8010ec2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010ec6:	4bb3      	ldr	r3, [pc, #716]	; (8011194 <_dtoa_r+0x8d4>)
 8010ec8:	f7ef f98c 	bl	80001e4 <__adddf3>
 8010ecc:	4602      	mov	r2, r0
 8010ece:	460b      	mov	r3, r1
 8010ed0:	4630      	mov	r0, r6
 8010ed2:	4639      	mov	r1, r7
 8010ed4:	f7ef fdcc 	bl	8000a70 <__aeabi_dcmpgt>
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	d162      	bne.n	8010fa2 <_dtoa_r+0x6e2>
 8010edc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010ee0:	2000      	movs	r0, #0
 8010ee2:	49ac      	ldr	r1, [pc, #688]	; (8011194 <_dtoa_r+0x8d4>)
 8010ee4:	f7ef f97c 	bl	80001e0 <__aeabi_dsub>
 8010ee8:	4602      	mov	r2, r0
 8010eea:	460b      	mov	r3, r1
 8010eec:	4630      	mov	r0, r6
 8010eee:	4639      	mov	r1, r7
 8010ef0:	f7ef fda0 	bl	8000a34 <__aeabi_dcmplt>
 8010ef4:	2800      	cmp	r0, #0
 8010ef6:	f43f af1d 	beq.w	8010d34 <_dtoa_r+0x474>
 8010efa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010efc:	1e7b      	subs	r3, r7, #1
 8010efe:	9314      	str	r3, [sp, #80]	; 0x50
 8010f00:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8010f04:	2b30      	cmp	r3, #48	; 0x30
 8010f06:	d0f8      	beq.n	8010efa <_dtoa_r+0x63a>
 8010f08:	46c1      	mov	r9, r8
 8010f0a:	e03a      	b.n	8010f82 <_dtoa_r+0x6c2>
 8010f0c:	4ba2      	ldr	r3, [pc, #648]	; (8011198 <_dtoa_r+0x8d8>)
 8010f0e:	f7ef fb1f 	bl	8000550 <__aeabi_dmul>
 8010f12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010f16:	e7bc      	b.n	8010e92 <_dtoa_r+0x5d2>
 8010f18:	9f08      	ldr	r7, [sp, #32]
 8010f1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f22:	f7ef fc3f 	bl	80007a4 <__aeabi_ddiv>
 8010f26:	f7ef fdc3 	bl	8000ab0 <__aeabi_d2iz>
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	f7ef faa6 	bl	800047c <__aeabi_i2d>
 8010f30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f34:	f7ef fb0c 	bl	8000550 <__aeabi_dmul>
 8010f38:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8010f3c:	460b      	mov	r3, r1
 8010f3e:	4602      	mov	r2, r0
 8010f40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f44:	f7ef f94c 	bl	80001e0 <__aeabi_dsub>
 8010f48:	f807 6b01 	strb.w	r6, [r7], #1
 8010f4c:	9e08      	ldr	r6, [sp, #32]
 8010f4e:	9b02      	ldr	r3, [sp, #8]
 8010f50:	1bbe      	subs	r6, r7, r6
 8010f52:	42b3      	cmp	r3, r6
 8010f54:	d13a      	bne.n	8010fcc <_dtoa_r+0x70c>
 8010f56:	4602      	mov	r2, r0
 8010f58:	460b      	mov	r3, r1
 8010f5a:	f7ef f943 	bl	80001e4 <__adddf3>
 8010f5e:	4602      	mov	r2, r0
 8010f60:	460b      	mov	r3, r1
 8010f62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010f66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f6a:	f7ef fd81 	bl	8000a70 <__aeabi_dcmpgt>
 8010f6e:	bb58      	cbnz	r0, 8010fc8 <_dtoa_r+0x708>
 8010f70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f78:	f7ef fd52 	bl	8000a20 <__aeabi_dcmpeq>
 8010f7c:	b108      	cbz	r0, 8010f82 <_dtoa_r+0x6c2>
 8010f7e:	07e1      	lsls	r1, r4, #31
 8010f80:	d422      	bmi.n	8010fc8 <_dtoa_r+0x708>
 8010f82:	4628      	mov	r0, r5
 8010f84:	4651      	mov	r1, sl
 8010f86:	f000 fae7 	bl	8011558 <_Bfree>
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	703b      	strb	r3, [r7, #0]
 8010f8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010f90:	f109 0001 	add.w	r0, r9, #1
 8010f94:	6018      	str	r0, [r3, #0]
 8010f96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	f43f acdf 	beq.w	801095c <_dtoa_r+0x9c>
 8010f9e:	601f      	str	r7, [r3, #0]
 8010fa0:	e4dc      	b.n	801095c <_dtoa_r+0x9c>
 8010fa2:	4627      	mov	r7, r4
 8010fa4:	463b      	mov	r3, r7
 8010fa6:	461f      	mov	r7, r3
 8010fa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010fac:	2a39      	cmp	r2, #57	; 0x39
 8010fae:	d107      	bne.n	8010fc0 <_dtoa_r+0x700>
 8010fb0:	9a08      	ldr	r2, [sp, #32]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d1f7      	bne.n	8010fa6 <_dtoa_r+0x6e6>
 8010fb6:	2230      	movs	r2, #48	; 0x30
 8010fb8:	9908      	ldr	r1, [sp, #32]
 8010fba:	f108 0801 	add.w	r8, r8, #1
 8010fbe:	700a      	strb	r2, [r1, #0]
 8010fc0:	781a      	ldrb	r2, [r3, #0]
 8010fc2:	3201      	adds	r2, #1
 8010fc4:	701a      	strb	r2, [r3, #0]
 8010fc6:	e79f      	b.n	8010f08 <_dtoa_r+0x648>
 8010fc8:	46c8      	mov	r8, r9
 8010fca:	e7eb      	b.n	8010fa4 <_dtoa_r+0x6e4>
 8010fcc:	2200      	movs	r2, #0
 8010fce:	4b72      	ldr	r3, [pc, #456]	; (8011198 <_dtoa_r+0x8d8>)
 8010fd0:	f7ef fabe 	bl	8000550 <__aeabi_dmul>
 8010fd4:	4602      	mov	r2, r0
 8010fd6:	460b      	mov	r3, r1
 8010fd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	2300      	movs	r3, #0
 8010fe0:	f7ef fd1e 	bl	8000a20 <__aeabi_dcmpeq>
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	d098      	beq.n	8010f1a <_dtoa_r+0x65a>
 8010fe8:	e7cb      	b.n	8010f82 <_dtoa_r+0x6c2>
 8010fea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010fec:	2a00      	cmp	r2, #0
 8010fee:	f000 80cd 	beq.w	801118c <_dtoa_r+0x8cc>
 8010ff2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010ff4:	2a01      	cmp	r2, #1
 8010ff6:	f300 80af 	bgt.w	8011158 <_dtoa_r+0x898>
 8010ffa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010ffc:	2a00      	cmp	r2, #0
 8010ffe:	f000 80a7 	beq.w	8011150 <_dtoa_r+0x890>
 8011002:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011006:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011008:	9f06      	ldr	r7, [sp, #24]
 801100a:	9a06      	ldr	r2, [sp, #24]
 801100c:	2101      	movs	r1, #1
 801100e:	441a      	add	r2, r3
 8011010:	9206      	str	r2, [sp, #24]
 8011012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011014:	4628      	mov	r0, r5
 8011016:	441a      	add	r2, r3
 8011018:	9209      	str	r2, [sp, #36]	; 0x24
 801101a:	f000 fb57 	bl	80116cc <__i2b>
 801101e:	4606      	mov	r6, r0
 8011020:	2f00      	cmp	r7, #0
 8011022:	dd0c      	ble.n	801103e <_dtoa_r+0x77e>
 8011024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011026:	2b00      	cmp	r3, #0
 8011028:	dd09      	ble.n	801103e <_dtoa_r+0x77e>
 801102a:	42bb      	cmp	r3, r7
 801102c:	bfa8      	it	ge
 801102e:	463b      	movge	r3, r7
 8011030:	9a06      	ldr	r2, [sp, #24]
 8011032:	1aff      	subs	r7, r7, r3
 8011034:	1ad2      	subs	r2, r2, r3
 8011036:	9206      	str	r2, [sp, #24]
 8011038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801103a:	1ad3      	subs	r3, r2, r3
 801103c:	9309      	str	r3, [sp, #36]	; 0x24
 801103e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011040:	b1f3      	cbz	r3, 8011080 <_dtoa_r+0x7c0>
 8011042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011044:	2b00      	cmp	r3, #0
 8011046:	f000 80a9 	beq.w	801119c <_dtoa_r+0x8dc>
 801104a:	2c00      	cmp	r4, #0
 801104c:	dd10      	ble.n	8011070 <_dtoa_r+0x7b0>
 801104e:	4631      	mov	r1, r6
 8011050:	4622      	mov	r2, r4
 8011052:	4628      	mov	r0, r5
 8011054:	f000 fbf4 	bl	8011840 <__pow5mult>
 8011058:	4652      	mov	r2, sl
 801105a:	4601      	mov	r1, r0
 801105c:	4606      	mov	r6, r0
 801105e:	4628      	mov	r0, r5
 8011060:	f000 fb4a 	bl	80116f8 <__multiply>
 8011064:	4680      	mov	r8, r0
 8011066:	4651      	mov	r1, sl
 8011068:	4628      	mov	r0, r5
 801106a:	f000 fa75 	bl	8011558 <_Bfree>
 801106e:	46c2      	mov	sl, r8
 8011070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011072:	1b1a      	subs	r2, r3, r4
 8011074:	d004      	beq.n	8011080 <_dtoa_r+0x7c0>
 8011076:	4651      	mov	r1, sl
 8011078:	4628      	mov	r0, r5
 801107a:	f000 fbe1 	bl	8011840 <__pow5mult>
 801107e:	4682      	mov	sl, r0
 8011080:	2101      	movs	r1, #1
 8011082:	4628      	mov	r0, r5
 8011084:	f000 fb22 	bl	80116cc <__i2b>
 8011088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801108a:	4604      	mov	r4, r0
 801108c:	2b00      	cmp	r3, #0
 801108e:	f340 8087 	ble.w	80111a0 <_dtoa_r+0x8e0>
 8011092:	461a      	mov	r2, r3
 8011094:	4601      	mov	r1, r0
 8011096:	4628      	mov	r0, r5
 8011098:	f000 fbd2 	bl	8011840 <__pow5mult>
 801109c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801109e:	4604      	mov	r4, r0
 80110a0:	2b01      	cmp	r3, #1
 80110a2:	f340 8080 	ble.w	80111a6 <_dtoa_r+0x8e6>
 80110a6:	f04f 0800 	mov.w	r8, #0
 80110aa:	6923      	ldr	r3, [r4, #16]
 80110ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80110b0:	6918      	ldr	r0, [r3, #16]
 80110b2:	f000 fabd 	bl	8011630 <__hi0bits>
 80110b6:	f1c0 0020 	rsb	r0, r0, #32
 80110ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110bc:	4418      	add	r0, r3
 80110be:	f010 001f 	ands.w	r0, r0, #31
 80110c2:	f000 8092 	beq.w	80111ea <_dtoa_r+0x92a>
 80110c6:	f1c0 0320 	rsb	r3, r0, #32
 80110ca:	2b04      	cmp	r3, #4
 80110cc:	f340 808a 	ble.w	80111e4 <_dtoa_r+0x924>
 80110d0:	f1c0 001c 	rsb	r0, r0, #28
 80110d4:	9b06      	ldr	r3, [sp, #24]
 80110d6:	4407      	add	r7, r0
 80110d8:	4403      	add	r3, r0
 80110da:	9306      	str	r3, [sp, #24]
 80110dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110de:	4403      	add	r3, r0
 80110e0:	9309      	str	r3, [sp, #36]	; 0x24
 80110e2:	9b06      	ldr	r3, [sp, #24]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	dd05      	ble.n	80110f4 <_dtoa_r+0x834>
 80110e8:	4651      	mov	r1, sl
 80110ea:	461a      	mov	r2, r3
 80110ec:	4628      	mov	r0, r5
 80110ee:	f000 fc01 	bl	80118f4 <__lshift>
 80110f2:	4682      	mov	sl, r0
 80110f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	dd05      	ble.n	8011106 <_dtoa_r+0x846>
 80110fa:	4621      	mov	r1, r4
 80110fc:	461a      	mov	r2, r3
 80110fe:	4628      	mov	r0, r5
 8011100:	f000 fbf8 	bl	80118f4 <__lshift>
 8011104:	4604      	mov	r4, r0
 8011106:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011108:	2b00      	cmp	r3, #0
 801110a:	d070      	beq.n	80111ee <_dtoa_r+0x92e>
 801110c:	4621      	mov	r1, r4
 801110e:	4650      	mov	r0, sl
 8011110:	f000 fc5c 	bl	80119cc <__mcmp>
 8011114:	2800      	cmp	r0, #0
 8011116:	da6a      	bge.n	80111ee <_dtoa_r+0x92e>
 8011118:	2300      	movs	r3, #0
 801111a:	4651      	mov	r1, sl
 801111c:	220a      	movs	r2, #10
 801111e:	4628      	mov	r0, r5
 8011120:	f000 fa3c 	bl	801159c <__multadd>
 8011124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011126:	4682      	mov	sl, r0
 8011128:	f109 39ff 	add.w	r9, r9, #4294967295
 801112c:	2b00      	cmp	r3, #0
 801112e:	f000 8193 	beq.w	8011458 <_dtoa_r+0xb98>
 8011132:	4631      	mov	r1, r6
 8011134:	2300      	movs	r3, #0
 8011136:	220a      	movs	r2, #10
 8011138:	4628      	mov	r0, r5
 801113a:	f000 fa2f 	bl	801159c <__multadd>
 801113e:	f1bb 0f00 	cmp.w	fp, #0
 8011142:	4606      	mov	r6, r0
 8011144:	f300 8093 	bgt.w	801126e <_dtoa_r+0x9ae>
 8011148:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801114a:	2b02      	cmp	r3, #2
 801114c:	dc57      	bgt.n	80111fe <_dtoa_r+0x93e>
 801114e:	e08e      	b.n	801126e <_dtoa_r+0x9ae>
 8011150:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011152:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011156:	e756      	b.n	8011006 <_dtoa_r+0x746>
 8011158:	9b02      	ldr	r3, [sp, #8]
 801115a:	1e5c      	subs	r4, r3, #1
 801115c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801115e:	42a3      	cmp	r3, r4
 8011160:	bfb7      	itett	lt
 8011162:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011164:	1b1c      	subge	r4, r3, r4
 8011166:	1ae2      	sublt	r2, r4, r3
 8011168:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801116a:	bfbe      	ittt	lt
 801116c:	940a      	strlt	r4, [sp, #40]	; 0x28
 801116e:	189b      	addlt	r3, r3, r2
 8011170:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011172:	9b02      	ldr	r3, [sp, #8]
 8011174:	bfb8      	it	lt
 8011176:	2400      	movlt	r4, #0
 8011178:	2b00      	cmp	r3, #0
 801117a:	bfbb      	ittet	lt
 801117c:	9b06      	ldrlt	r3, [sp, #24]
 801117e:	9a02      	ldrlt	r2, [sp, #8]
 8011180:	9f06      	ldrge	r7, [sp, #24]
 8011182:	1a9f      	sublt	r7, r3, r2
 8011184:	bfac      	ite	ge
 8011186:	9b02      	ldrge	r3, [sp, #8]
 8011188:	2300      	movlt	r3, #0
 801118a:	e73e      	b.n	801100a <_dtoa_r+0x74a>
 801118c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801118e:	9f06      	ldr	r7, [sp, #24]
 8011190:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8011192:	e745      	b.n	8011020 <_dtoa_r+0x760>
 8011194:	3fe00000 	.word	0x3fe00000
 8011198:	40240000 	.word	0x40240000
 801119c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801119e:	e76a      	b.n	8011076 <_dtoa_r+0x7b6>
 80111a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80111a2:	2b01      	cmp	r3, #1
 80111a4:	dc19      	bgt.n	80111da <_dtoa_r+0x91a>
 80111a6:	9b04      	ldr	r3, [sp, #16]
 80111a8:	b9bb      	cbnz	r3, 80111da <_dtoa_r+0x91a>
 80111aa:	9b05      	ldr	r3, [sp, #20]
 80111ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80111b0:	b99b      	cbnz	r3, 80111da <_dtoa_r+0x91a>
 80111b2:	9b05      	ldr	r3, [sp, #20]
 80111b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80111b8:	0d1b      	lsrs	r3, r3, #20
 80111ba:	051b      	lsls	r3, r3, #20
 80111bc:	b183      	cbz	r3, 80111e0 <_dtoa_r+0x920>
 80111be:	f04f 0801 	mov.w	r8, #1
 80111c2:	9b06      	ldr	r3, [sp, #24]
 80111c4:	3301      	adds	r3, #1
 80111c6:	9306      	str	r3, [sp, #24]
 80111c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111ca:	3301      	adds	r3, #1
 80111cc:	9309      	str	r3, [sp, #36]	; 0x24
 80111ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	f47f af6a 	bne.w	80110aa <_dtoa_r+0x7ea>
 80111d6:	2001      	movs	r0, #1
 80111d8:	e76f      	b.n	80110ba <_dtoa_r+0x7fa>
 80111da:	f04f 0800 	mov.w	r8, #0
 80111de:	e7f6      	b.n	80111ce <_dtoa_r+0x90e>
 80111e0:	4698      	mov	r8, r3
 80111e2:	e7f4      	b.n	80111ce <_dtoa_r+0x90e>
 80111e4:	f43f af7d 	beq.w	80110e2 <_dtoa_r+0x822>
 80111e8:	4618      	mov	r0, r3
 80111ea:	301c      	adds	r0, #28
 80111ec:	e772      	b.n	80110d4 <_dtoa_r+0x814>
 80111ee:	9b02      	ldr	r3, [sp, #8]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	dc36      	bgt.n	8011262 <_dtoa_r+0x9a2>
 80111f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80111f6:	2b02      	cmp	r3, #2
 80111f8:	dd33      	ble.n	8011262 <_dtoa_r+0x9a2>
 80111fa:	f8dd b008 	ldr.w	fp, [sp, #8]
 80111fe:	f1bb 0f00 	cmp.w	fp, #0
 8011202:	d10d      	bne.n	8011220 <_dtoa_r+0x960>
 8011204:	4621      	mov	r1, r4
 8011206:	465b      	mov	r3, fp
 8011208:	2205      	movs	r2, #5
 801120a:	4628      	mov	r0, r5
 801120c:	f000 f9c6 	bl	801159c <__multadd>
 8011210:	4601      	mov	r1, r0
 8011212:	4604      	mov	r4, r0
 8011214:	4650      	mov	r0, sl
 8011216:	f000 fbd9 	bl	80119cc <__mcmp>
 801121a:	2800      	cmp	r0, #0
 801121c:	f73f adb6 	bgt.w	8010d8c <_dtoa_r+0x4cc>
 8011220:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011222:	9f08      	ldr	r7, [sp, #32]
 8011224:	ea6f 0903 	mvn.w	r9, r3
 8011228:	f04f 0800 	mov.w	r8, #0
 801122c:	4621      	mov	r1, r4
 801122e:	4628      	mov	r0, r5
 8011230:	f000 f992 	bl	8011558 <_Bfree>
 8011234:	2e00      	cmp	r6, #0
 8011236:	f43f aea4 	beq.w	8010f82 <_dtoa_r+0x6c2>
 801123a:	f1b8 0f00 	cmp.w	r8, #0
 801123e:	d005      	beq.n	801124c <_dtoa_r+0x98c>
 8011240:	45b0      	cmp	r8, r6
 8011242:	d003      	beq.n	801124c <_dtoa_r+0x98c>
 8011244:	4641      	mov	r1, r8
 8011246:	4628      	mov	r0, r5
 8011248:	f000 f986 	bl	8011558 <_Bfree>
 801124c:	4631      	mov	r1, r6
 801124e:	4628      	mov	r0, r5
 8011250:	f000 f982 	bl	8011558 <_Bfree>
 8011254:	e695      	b.n	8010f82 <_dtoa_r+0x6c2>
 8011256:	2400      	movs	r4, #0
 8011258:	4626      	mov	r6, r4
 801125a:	e7e1      	b.n	8011220 <_dtoa_r+0x960>
 801125c:	46c1      	mov	r9, r8
 801125e:	4626      	mov	r6, r4
 8011260:	e594      	b.n	8010d8c <_dtoa_r+0x4cc>
 8011262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011264:	f8dd b008 	ldr.w	fp, [sp, #8]
 8011268:	2b00      	cmp	r3, #0
 801126a:	f000 80fc 	beq.w	8011466 <_dtoa_r+0xba6>
 801126e:	2f00      	cmp	r7, #0
 8011270:	dd05      	ble.n	801127e <_dtoa_r+0x9be>
 8011272:	4631      	mov	r1, r6
 8011274:	463a      	mov	r2, r7
 8011276:	4628      	mov	r0, r5
 8011278:	f000 fb3c 	bl	80118f4 <__lshift>
 801127c:	4606      	mov	r6, r0
 801127e:	f1b8 0f00 	cmp.w	r8, #0
 8011282:	d05c      	beq.n	801133e <_dtoa_r+0xa7e>
 8011284:	4628      	mov	r0, r5
 8011286:	6871      	ldr	r1, [r6, #4]
 8011288:	f000 f926 	bl	80114d8 <_Balloc>
 801128c:	4607      	mov	r7, r0
 801128e:	b928      	cbnz	r0, 801129c <_dtoa_r+0x9dc>
 8011290:	4602      	mov	r2, r0
 8011292:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011296:	4b7e      	ldr	r3, [pc, #504]	; (8011490 <_dtoa_r+0xbd0>)
 8011298:	f7ff bb26 	b.w	80108e8 <_dtoa_r+0x28>
 801129c:	6932      	ldr	r2, [r6, #16]
 801129e:	f106 010c 	add.w	r1, r6, #12
 80112a2:	3202      	adds	r2, #2
 80112a4:	0092      	lsls	r2, r2, #2
 80112a6:	300c      	adds	r0, #12
 80112a8:	f7fe fd26 	bl	800fcf8 <memcpy>
 80112ac:	2201      	movs	r2, #1
 80112ae:	4639      	mov	r1, r7
 80112b0:	4628      	mov	r0, r5
 80112b2:	f000 fb1f 	bl	80118f4 <__lshift>
 80112b6:	46b0      	mov	r8, r6
 80112b8:	4606      	mov	r6, r0
 80112ba:	9b08      	ldr	r3, [sp, #32]
 80112bc:	3301      	adds	r3, #1
 80112be:	9302      	str	r3, [sp, #8]
 80112c0:	9b08      	ldr	r3, [sp, #32]
 80112c2:	445b      	add	r3, fp
 80112c4:	930a      	str	r3, [sp, #40]	; 0x28
 80112c6:	9b04      	ldr	r3, [sp, #16]
 80112c8:	f003 0301 	and.w	r3, r3, #1
 80112cc:	9309      	str	r3, [sp, #36]	; 0x24
 80112ce:	9b02      	ldr	r3, [sp, #8]
 80112d0:	4621      	mov	r1, r4
 80112d2:	4650      	mov	r0, sl
 80112d4:	f103 3bff 	add.w	fp, r3, #4294967295
 80112d8:	f7ff fa62 	bl	80107a0 <quorem>
 80112dc:	4603      	mov	r3, r0
 80112de:	4641      	mov	r1, r8
 80112e0:	3330      	adds	r3, #48	; 0x30
 80112e2:	9004      	str	r0, [sp, #16]
 80112e4:	4650      	mov	r0, sl
 80112e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80112e8:	f000 fb70 	bl	80119cc <__mcmp>
 80112ec:	4632      	mov	r2, r6
 80112ee:	9006      	str	r0, [sp, #24]
 80112f0:	4621      	mov	r1, r4
 80112f2:	4628      	mov	r0, r5
 80112f4:	f000 fb86 	bl	8011a04 <__mdiff>
 80112f8:	68c2      	ldr	r2, [r0, #12]
 80112fa:	4607      	mov	r7, r0
 80112fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80112fe:	bb02      	cbnz	r2, 8011342 <_dtoa_r+0xa82>
 8011300:	4601      	mov	r1, r0
 8011302:	4650      	mov	r0, sl
 8011304:	f000 fb62 	bl	80119cc <__mcmp>
 8011308:	4602      	mov	r2, r0
 801130a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801130c:	4639      	mov	r1, r7
 801130e:	4628      	mov	r0, r5
 8011310:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8011314:	f000 f920 	bl	8011558 <_Bfree>
 8011318:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801131a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801131c:	9f02      	ldr	r7, [sp, #8]
 801131e:	ea43 0102 	orr.w	r1, r3, r2
 8011322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011324:	430b      	orrs	r3, r1
 8011326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011328:	d10d      	bne.n	8011346 <_dtoa_r+0xa86>
 801132a:	2b39      	cmp	r3, #57	; 0x39
 801132c:	d027      	beq.n	801137e <_dtoa_r+0xabe>
 801132e:	9a06      	ldr	r2, [sp, #24]
 8011330:	2a00      	cmp	r2, #0
 8011332:	dd01      	ble.n	8011338 <_dtoa_r+0xa78>
 8011334:	9b04      	ldr	r3, [sp, #16]
 8011336:	3331      	adds	r3, #49	; 0x31
 8011338:	f88b 3000 	strb.w	r3, [fp]
 801133c:	e776      	b.n	801122c <_dtoa_r+0x96c>
 801133e:	4630      	mov	r0, r6
 8011340:	e7b9      	b.n	80112b6 <_dtoa_r+0x9f6>
 8011342:	2201      	movs	r2, #1
 8011344:	e7e2      	b.n	801130c <_dtoa_r+0xa4c>
 8011346:	9906      	ldr	r1, [sp, #24]
 8011348:	2900      	cmp	r1, #0
 801134a:	db04      	blt.n	8011356 <_dtoa_r+0xa96>
 801134c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801134e:	4301      	orrs	r1, r0
 8011350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011352:	4301      	orrs	r1, r0
 8011354:	d120      	bne.n	8011398 <_dtoa_r+0xad8>
 8011356:	2a00      	cmp	r2, #0
 8011358:	ddee      	ble.n	8011338 <_dtoa_r+0xa78>
 801135a:	4651      	mov	r1, sl
 801135c:	2201      	movs	r2, #1
 801135e:	4628      	mov	r0, r5
 8011360:	9302      	str	r3, [sp, #8]
 8011362:	f000 fac7 	bl	80118f4 <__lshift>
 8011366:	4621      	mov	r1, r4
 8011368:	4682      	mov	sl, r0
 801136a:	f000 fb2f 	bl	80119cc <__mcmp>
 801136e:	2800      	cmp	r0, #0
 8011370:	9b02      	ldr	r3, [sp, #8]
 8011372:	dc02      	bgt.n	801137a <_dtoa_r+0xaba>
 8011374:	d1e0      	bne.n	8011338 <_dtoa_r+0xa78>
 8011376:	07da      	lsls	r2, r3, #31
 8011378:	d5de      	bpl.n	8011338 <_dtoa_r+0xa78>
 801137a:	2b39      	cmp	r3, #57	; 0x39
 801137c:	d1da      	bne.n	8011334 <_dtoa_r+0xa74>
 801137e:	2339      	movs	r3, #57	; 0x39
 8011380:	f88b 3000 	strb.w	r3, [fp]
 8011384:	463b      	mov	r3, r7
 8011386:	461f      	mov	r7, r3
 8011388:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801138c:	3b01      	subs	r3, #1
 801138e:	2a39      	cmp	r2, #57	; 0x39
 8011390:	d050      	beq.n	8011434 <_dtoa_r+0xb74>
 8011392:	3201      	adds	r2, #1
 8011394:	701a      	strb	r2, [r3, #0]
 8011396:	e749      	b.n	801122c <_dtoa_r+0x96c>
 8011398:	2a00      	cmp	r2, #0
 801139a:	dd03      	ble.n	80113a4 <_dtoa_r+0xae4>
 801139c:	2b39      	cmp	r3, #57	; 0x39
 801139e:	d0ee      	beq.n	801137e <_dtoa_r+0xabe>
 80113a0:	3301      	adds	r3, #1
 80113a2:	e7c9      	b.n	8011338 <_dtoa_r+0xa78>
 80113a4:	9a02      	ldr	r2, [sp, #8]
 80113a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80113a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80113ac:	428a      	cmp	r2, r1
 80113ae:	d02a      	beq.n	8011406 <_dtoa_r+0xb46>
 80113b0:	4651      	mov	r1, sl
 80113b2:	2300      	movs	r3, #0
 80113b4:	220a      	movs	r2, #10
 80113b6:	4628      	mov	r0, r5
 80113b8:	f000 f8f0 	bl	801159c <__multadd>
 80113bc:	45b0      	cmp	r8, r6
 80113be:	4682      	mov	sl, r0
 80113c0:	f04f 0300 	mov.w	r3, #0
 80113c4:	f04f 020a 	mov.w	r2, #10
 80113c8:	4641      	mov	r1, r8
 80113ca:	4628      	mov	r0, r5
 80113cc:	d107      	bne.n	80113de <_dtoa_r+0xb1e>
 80113ce:	f000 f8e5 	bl	801159c <__multadd>
 80113d2:	4680      	mov	r8, r0
 80113d4:	4606      	mov	r6, r0
 80113d6:	9b02      	ldr	r3, [sp, #8]
 80113d8:	3301      	adds	r3, #1
 80113da:	9302      	str	r3, [sp, #8]
 80113dc:	e777      	b.n	80112ce <_dtoa_r+0xa0e>
 80113de:	f000 f8dd 	bl	801159c <__multadd>
 80113e2:	4631      	mov	r1, r6
 80113e4:	4680      	mov	r8, r0
 80113e6:	2300      	movs	r3, #0
 80113e8:	220a      	movs	r2, #10
 80113ea:	4628      	mov	r0, r5
 80113ec:	f000 f8d6 	bl	801159c <__multadd>
 80113f0:	4606      	mov	r6, r0
 80113f2:	e7f0      	b.n	80113d6 <_dtoa_r+0xb16>
 80113f4:	f1bb 0f00 	cmp.w	fp, #0
 80113f8:	bfcc      	ite	gt
 80113fa:	465f      	movgt	r7, fp
 80113fc:	2701      	movle	r7, #1
 80113fe:	f04f 0800 	mov.w	r8, #0
 8011402:	9a08      	ldr	r2, [sp, #32]
 8011404:	4417      	add	r7, r2
 8011406:	4651      	mov	r1, sl
 8011408:	2201      	movs	r2, #1
 801140a:	4628      	mov	r0, r5
 801140c:	9302      	str	r3, [sp, #8]
 801140e:	f000 fa71 	bl	80118f4 <__lshift>
 8011412:	4621      	mov	r1, r4
 8011414:	4682      	mov	sl, r0
 8011416:	f000 fad9 	bl	80119cc <__mcmp>
 801141a:	2800      	cmp	r0, #0
 801141c:	dcb2      	bgt.n	8011384 <_dtoa_r+0xac4>
 801141e:	d102      	bne.n	8011426 <_dtoa_r+0xb66>
 8011420:	9b02      	ldr	r3, [sp, #8]
 8011422:	07db      	lsls	r3, r3, #31
 8011424:	d4ae      	bmi.n	8011384 <_dtoa_r+0xac4>
 8011426:	463b      	mov	r3, r7
 8011428:	461f      	mov	r7, r3
 801142a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801142e:	2a30      	cmp	r2, #48	; 0x30
 8011430:	d0fa      	beq.n	8011428 <_dtoa_r+0xb68>
 8011432:	e6fb      	b.n	801122c <_dtoa_r+0x96c>
 8011434:	9a08      	ldr	r2, [sp, #32]
 8011436:	429a      	cmp	r2, r3
 8011438:	d1a5      	bne.n	8011386 <_dtoa_r+0xac6>
 801143a:	2331      	movs	r3, #49	; 0x31
 801143c:	f109 0901 	add.w	r9, r9, #1
 8011440:	7013      	strb	r3, [r2, #0]
 8011442:	e6f3      	b.n	801122c <_dtoa_r+0x96c>
 8011444:	4b13      	ldr	r3, [pc, #76]	; (8011494 <_dtoa_r+0xbd4>)
 8011446:	f7ff baa7 	b.w	8010998 <_dtoa_r+0xd8>
 801144a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801144c:	2b00      	cmp	r3, #0
 801144e:	f47f aa80 	bne.w	8010952 <_dtoa_r+0x92>
 8011452:	4b11      	ldr	r3, [pc, #68]	; (8011498 <_dtoa_r+0xbd8>)
 8011454:	f7ff baa0 	b.w	8010998 <_dtoa_r+0xd8>
 8011458:	f1bb 0f00 	cmp.w	fp, #0
 801145c:	dc03      	bgt.n	8011466 <_dtoa_r+0xba6>
 801145e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011460:	2b02      	cmp	r3, #2
 8011462:	f73f aecc 	bgt.w	80111fe <_dtoa_r+0x93e>
 8011466:	9f08      	ldr	r7, [sp, #32]
 8011468:	4621      	mov	r1, r4
 801146a:	4650      	mov	r0, sl
 801146c:	f7ff f998 	bl	80107a0 <quorem>
 8011470:	9a08      	ldr	r2, [sp, #32]
 8011472:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011476:	f807 3b01 	strb.w	r3, [r7], #1
 801147a:	1aba      	subs	r2, r7, r2
 801147c:	4593      	cmp	fp, r2
 801147e:	ddb9      	ble.n	80113f4 <_dtoa_r+0xb34>
 8011480:	4651      	mov	r1, sl
 8011482:	2300      	movs	r3, #0
 8011484:	220a      	movs	r2, #10
 8011486:	4628      	mov	r0, r5
 8011488:	f000 f888 	bl	801159c <__multadd>
 801148c:	4682      	mov	sl, r0
 801148e:	e7eb      	b.n	8011468 <_dtoa_r+0xba8>
 8011490:	08013a1b 	.word	0x08013a1b
 8011494:	08013974 	.word	0x08013974
 8011498:	08013998 	.word	0x08013998

0801149c <_localeconv_r>:
 801149c:	4800      	ldr	r0, [pc, #0]	; (80114a0 <_localeconv_r+0x4>)
 801149e:	4770      	bx	lr
 80114a0:	20000310 	.word	0x20000310

080114a4 <memchr>:
 80114a4:	4603      	mov	r3, r0
 80114a6:	b510      	push	{r4, lr}
 80114a8:	b2c9      	uxtb	r1, r1
 80114aa:	4402      	add	r2, r0
 80114ac:	4293      	cmp	r3, r2
 80114ae:	4618      	mov	r0, r3
 80114b0:	d101      	bne.n	80114b6 <memchr+0x12>
 80114b2:	2000      	movs	r0, #0
 80114b4:	e003      	b.n	80114be <memchr+0x1a>
 80114b6:	7804      	ldrb	r4, [r0, #0]
 80114b8:	3301      	adds	r3, #1
 80114ba:	428c      	cmp	r4, r1
 80114bc:	d1f6      	bne.n	80114ac <memchr+0x8>
 80114be:	bd10      	pop	{r4, pc}

080114c0 <__malloc_lock>:
 80114c0:	4801      	ldr	r0, [pc, #4]	; (80114c8 <__malloc_lock+0x8>)
 80114c2:	f000 bd4c 	b.w	8011f5e <__retarget_lock_acquire_recursive>
 80114c6:	bf00      	nop
 80114c8:	200020d4 	.word	0x200020d4

080114cc <__malloc_unlock>:
 80114cc:	4801      	ldr	r0, [pc, #4]	; (80114d4 <__malloc_unlock+0x8>)
 80114ce:	f000 bd47 	b.w	8011f60 <__retarget_lock_release_recursive>
 80114d2:	bf00      	nop
 80114d4:	200020d4 	.word	0x200020d4

080114d8 <_Balloc>:
 80114d8:	b570      	push	{r4, r5, r6, lr}
 80114da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80114dc:	4604      	mov	r4, r0
 80114de:	460d      	mov	r5, r1
 80114e0:	b976      	cbnz	r6, 8011500 <_Balloc+0x28>
 80114e2:	2010      	movs	r0, #16
 80114e4:	f7fe fbea 	bl	800fcbc <malloc>
 80114e8:	4602      	mov	r2, r0
 80114ea:	6260      	str	r0, [r4, #36]	; 0x24
 80114ec:	b920      	cbnz	r0, 80114f8 <_Balloc+0x20>
 80114ee:	2166      	movs	r1, #102	; 0x66
 80114f0:	4b17      	ldr	r3, [pc, #92]	; (8011550 <_Balloc+0x78>)
 80114f2:	4818      	ldr	r0, [pc, #96]	; (8011554 <_Balloc+0x7c>)
 80114f4:	f000 fd02 	bl	8011efc <__assert_func>
 80114f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114fc:	6006      	str	r6, [r0, #0]
 80114fe:	60c6      	str	r6, [r0, #12]
 8011500:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011502:	68f3      	ldr	r3, [r6, #12]
 8011504:	b183      	cbz	r3, 8011528 <_Balloc+0x50>
 8011506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801150e:	b9b8      	cbnz	r0, 8011540 <_Balloc+0x68>
 8011510:	2101      	movs	r1, #1
 8011512:	fa01 f605 	lsl.w	r6, r1, r5
 8011516:	1d72      	adds	r2, r6, #5
 8011518:	4620      	mov	r0, r4
 801151a:	0092      	lsls	r2, r2, #2
 801151c:	f000 fb5e 	bl	8011bdc <_calloc_r>
 8011520:	b160      	cbz	r0, 801153c <_Balloc+0x64>
 8011522:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011526:	e00e      	b.n	8011546 <_Balloc+0x6e>
 8011528:	2221      	movs	r2, #33	; 0x21
 801152a:	2104      	movs	r1, #4
 801152c:	4620      	mov	r0, r4
 801152e:	f000 fb55 	bl	8011bdc <_calloc_r>
 8011532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011534:	60f0      	str	r0, [r6, #12]
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d1e4      	bne.n	8011506 <_Balloc+0x2e>
 801153c:	2000      	movs	r0, #0
 801153e:	bd70      	pop	{r4, r5, r6, pc}
 8011540:	6802      	ldr	r2, [r0, #0]
 8011542:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011546:	2300      	movs	r3, #0
 8011548:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801154c:	e7f7      	b.n	801153e <_Balloc+0x66>
 801154e:	bf00      	nop
 8011550:	080139a5 	.word	0x080139a5
 8011554:	08013a2c 	.word	0x08013a2c

08011558 <_Bfree>:
 8011558:	b570      	push	{r4, r5, r6, lr}
 801155a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801155c:	4605      	mov	r5, r0
 801155e:	460c      	mov	r4, r1
 8011560:	b976      	cbnz	r6, 8011580 <_Bfree+0x28>
 8011562:	2010      	movs	r0, #16
 8011564:	f7fe fbaa 	bl	800fcbc <malloc>
 8011568:	4602      	mov	r2, r0
 801156a:	6268      	str	r0, [r5, #36]	; 0x24
 801156c:	b920      	cbnz	r0, 8011578 <_Bfree+0x20>
 801156e:	218a      	movs	r1, #138	; 0x8a
 8011570:	4b08      	ldr	r3, [pc, #32]	; (8011594 <_Bfree+0x3c>)
 8011572:	4809      	ldr	r0, [pc, #36]	; (8011598 <_Bfree+0x40>)
 8011574:	f000 fcc2 	bl	8011efc <__assert_func>
 8011578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801157c:	6006      	str	r6, [r0, #0]
 801157e:	60c6      	str	r6, [r0, #12]
 8011580:	b13c      	cbz	r4, 8011592 <_Bfree+0x3a>
 8011582:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011584:	6862      	ldr	r2, [r4, #4]
 8011586:	68db      	ldr	r3, [r3, #12]
 8011588:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801158c:	6021      	str	r1, [r4, #0]
 801158e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011592:	bd70      	pop	{r4, r5, r6, pc}
 8011594:	080139a5 	.word	0x080139a5
 8011598:	08013a2c 	.word	0x08013a2c

0801159c <__multadd>:
 801159c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115a0:	4698      	mov	r8, r3
 80115a2:	460c      	mov	r4, r1
 80115a4:	2300      	movs	r3, #0
 80115a6:	690e      	ldr	r6, [r1, #16]
 80115a8:	4607      	mov	r7, r0
 80115aa:	f101 0014 	add.w	r0, r1, #20
 80115ae:	6805      	ldr	r5, [r0, #0]
 80115b0:	3301      	adds	r3, #1
 80115b2:	b2a9      	uxth	r1, r5
 80115b4:	fb02 8101 	mla	r1, r2, r1, r8
 80115b8:	0c2d      	lsrs	r5, r5, #16
 80115ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80115be:	fb02 c505 	mla	r5, r2, r5, ip
 80115c2:	b289      	uxth	r1, r1
 80115c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80115c8:	429e      	cmp	r6, r3
 80115ca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80115ce:	f840 1b04 	str.w	r1, [r0], #4
 80115d2:	dcec      	bgt.n	80115ae <__multadd+0x12>
 80115d4:	f1b8 0f00 	cmp.w	r8, #0
 80115d8:	d022      	beq.n	8011620 <__multadd+0x84>
 80115da:	68a3      	ldr	r3, [r4, #8]
 80115dc:	42b3      	cmp	r3, r6
 80115de:	dc19      	bgt.n	8011614 <__multadd+0x78>
 80115e0:	6861      	ldr	r1, [r4, #4]
 80115e2:	4638      	mov	r0, r7
 80115e4:	3101      	adds	r1, #1
 80115e6:	f7ff ff77 	bl	80114d8 <_Balloc>
 80115ea:	4605      	mov	r5, r0
 80115ec:	b928      	cbnz	r0, 80115fa <__multadd+0x5e>
 80115ee:	4602      	mov	r2, r0
 80115f0:	21b5      	movs	r1, #181	; 0xb5
 80115f2:	4b0d      	ldr	r3, [pc, #52]	; (8011628 <__multadd+0x8c>)
 80115f4:	480d      	ldr	r0, [pc, #52]	; (801162c <__multadd+0x90>)
 80115f6:	f000 fc81 	bl	8011efc <__assert_func>
 80115fa:	6922      	ldr	r2, [r4, #16]
 80115fc:	f104 010c 	add.w	r1, r4, #12
 8011600:	3202      	adds	r2, #2
 8011602:	0092      	lsls	r2, r2, #2
 8011604:	300c      	adds	r0, #12
 8011606:	f7fe fb77 	bl	800fcf8 <memcpy>
 801160a:	4621      	mov	r1, r4
 801160c:	4638      	mov	r0, r7
 801160e:	f7ff ffa3 	bl	8011558 <_Bfree>
 8011612:	462c      	mov	r4, r5
 8011614:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011618:	3601      	adds	r6, #1
 801161a:	f8c3 8014 	str.w	r8, [r3, #20]
 801161e:	6126      	str	r6, [r4, #16]
 8011620:	4620      	mov	r0, r4
 8011622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011626:	bf00      	nop
 8011628:	08013a1b 	.word	0x08013a1b
 801162c:	08013a2c 	.word	0x08013a2c

08011630 <__hi0bits>:
 8011630:	0c02      	lsrs	r2, r0, #16
 8011632:	0412      	lsls	r2, r2, #16
 8011634:	4603      	mov	r3, r0
 8011636:	b9ca      	cbnz	r2, 801166c <__hi0bits+0x3c>
 8011638:	0403      	lsls	r3, r0, #16
 801163a:	2010      	movs	r0, #16
 801163c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011640:	bf04      	itt	eq
 8011642:	021b      	lsleq	r3, r3, #8
 8011644:	3008      	addeq	r0, #8
 8011646:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801164a:	bf04      	itt	eq
 801164c:	011b      	lsleq	r3, r3, #4
 801164e:	3004      	addeq	r0, #4
 8011650:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011654:	bf04      	itt	eq
 8011656:	009b      	lsleq	r3, r3, #2
 8011658:	3002      	addeq	r0, #2
 801165a:	2b00      	cmp	r3, #0
 801165c:	db05      	blt.n	801166a <__hi0bits+0x3a>
 801165e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8011662:	f100 0001 	add.w	r0, r0, #1
 8011666:	bf08      	it	eq
 8011668:	2020      	moveq	r0, #32
 801166a:	4770      	bx	lr
 801166c:	2000      	movs	r0, #0
 801166e:	e7e5      	b.n	801163c <__hi0bits+0xc>

08011670 <__lo0bits>:
 8011670:	6803      	ldr	r3, [r0, #0]
 8011672:	4602      	mov	r2, r0
 8011674:	f013 0007 	ands.w	r0, r3, #7
 8011678:	d00b      	beq.n	8011692 <__lo0bits+0x22>
 801167a:	07d9      	lsls	r1, r3, #31
 801167c:	d422      	bmi.n	80116c4 <__lo0bits+0x54>
 801167e:	0798      	lsls	r0, r3, #30
 8011680:	bf49      	itett	mi
 8011682:	085b      	lsrmi	r3, r3, #1
 8011684:	089b      	lsrpl	r3, r3, #2
 8011686:	2001      	movmi	r0, #1
 8011688:	6013      	strmi	r3, [r2, #0]
 801168a:	bf5c      	itt	pl
 801168c:	2002      	movpl	r0, #2
 801168e:	6013      	strpl	r3, [r2, #0]
 8011690:	4770      	bx	lr
 8011692:	b299      	uxth	r1, r3
 8011694:	b909      	cbnz	r1, 801169a <__lo0bits+0x2a>
 8011696:	2010      	movs	r0, #16
 8011698:	0c1b      	lsrs	r3, r3, #16
 801169a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801169e:	bf04      	itt	eq
 80116a0:	0a1b      	lsreq	r3, r3, #8
 80116a2:	3008      	addeq	r0, #8
 80116a4:	0719      	lsls	r1, r3, #28
 80116a6:	bf04      	itt	eq
 80116a8:	091b      	lsreq	r3, r3, #4
 80116aa:	3004      	addeq	r0, #4
 80116ac:	0799      	lsls	r1, r3, #30
 80116ae:	bf04      	itt	eq
 80116b0:	089b      	lsreq	r3, r3, #2
 80116b2:	3002      	addeq	r0, #2
 80116b4:	07d9      	lsls	r1, r3, #31
 80116b6:	d403      	bmi.n	80116c0 <__lo0bits+0x50>
 80116b8:	085b      	lsrs	r3, r3, #1
 80116ba:	f100 0001 	add.w	r0, r0, #1
 80116be:	d003      	beq.n	80116c8 <__lo0bits+0x58>
 80116c0:	6013      	str	r3, [r2, #0]
 80116c2:	4770      	bx	lr
 80116c4:	2000      	movs	r0, #0
 80116c6:	4770      	bx	lr
 80116c8:	2020      	movs	r0, #32
 80116ca:	4770      	bx	lr

080116cc <__i2b>:
 80116cc:	b510      	push	{r4, lr}
 80116ce:	460c      	mov	r4, r1
 80116d0:	2101      	movs	r1, #1
 80116d2:	f7ff ff01 	bl	80114d8 <_Balloc>
 80116d6:	4602      	mov	r2, r0
 80116d8:	b928      	cbnz	r0, 80116e6 <__i2b+0x1a>
 80116da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80116de:	4b04      	ldr	r3, [pc, #16]	; (80116f0 <__i2b+0x24>)
 80116e0:	4804      	ldr	r0, [pc, #16]	; (80116f4 <__i2b+0x28>)
 80116e2:	f000 fc0b 	bl	8011efc <__assert_func>
 80116e6:	2301      	movs	r3, #1
 80116e8:	6144      	str	r4, [r0, #20]
 80116ea:	6103      	str	r3, [r0, #16]
 80116ec:	bd10      	pop	{r4, pc}
 80116ee:	bf00      	nop
 80116f0:	08013a1b 	.word	0x08013a1b
 80116f4:	08013a2c 	.word	0x08013a2c

080116f8 <__multiply>:
 80116f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116fc:	4614      	mov	r4, r2
 80116fe:	690a      	ldr	r2, [r1, #16]
 8011700:	6923      	ldr	r3, [r4, #16]
 8011702:	460d      	mov	r5, r1
 8011704:	429a      	cmp	r2, r3
 8011706:	bfbe      	ittt	lt
 8011708:	460b      	movlt	r3, r1
 801170a:	4625      	movlt	r5, r4
 801170c:	461c      	movlt	r4, r3
 801170e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011712:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011716:	68ab      	ldr	r3, [r5, #8]
 8011718:	6869      	ldr	r1, [r5, #4]
 801171a:	eb0a 0709 	add.w	r7, sl, r9
 801171e:	42bb      	cmp	r3, r7
 8011720:	b085      	sub	sp, #20
 8011722:	bfb8      	it	lt
 8011724:	3101      	addlt	r1, #1
 8011726:	f7ff fed7 	bl	80114d8 <_Balloc>
 801172a:	b930      	cbnz	r0, 801173a <__multiply+0x42>
 801172c:	4602      	mov	r2, r0
 801172e:	f240 115d 	movw	r1, #349	; 0x15d
 8011732:	4b41      	ldr	r3, [pc, #260]	; (8011838 <__multiply+0x140>)
 8011734:	4841      	ldr	r0, [pc, #260]	; (801183c <__multiply+0x144>)
 8011736:	f000 fbe1 	bl	8011efc <__assert_func>
 801173a:	f100 0614 	add.w	r6, r0, #20
 801173e:	4633      	mov	r3, r6
 8011740:	2200      	movs	r2, #0
 8011742:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011746:	4543      	cmp	r3, r8
 8011748:	d31e      	bcc.n	8011788 <__multiply+0x90>
 801174a:	f105 0c14 	add.w	ip, r5, #20
 801174e:	f104 0314 	add.w	r3, r4, #20
 8011752:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011756:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801175a:	9202      	str	r2, [sp, #8]
 801175c:	ebac 0205 	sub.w	r2, ip, r5
 8011760:	3a15      	subs	r2, #21
 8011762:	f022 0203 	bic.w	r2, r2, #3
 8011766:	3204      	adds	r2, #4
 8011768:	f105 0115 	add.w	r1, r5, #21
 801176c:	458c      	cmp	ip, r1
 801176e:	bf38      	it	cc
 8011770:	2204      	movcc	r2, #4
 8011772:	9201      	str	r2, [sp, #4]
 8011774:	9a02      	ldr	r2, [sp, #8]
 8011776:	9303      	str	r3, [sp, #12]
 8011778:	429a      	cmp	r2, r3
 801177a:	d808      	bhi.n	801178e <__multiply+0x96>
 801177c:	2f00      	cmp	r7, #0
 801177e:	dc55      	bgt.n	801182c <__multiply+0x134>
 8011780:	6107      	str	r7, [r0, #16]
 8011782:	b005      	add	sp, #20
 8011784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011788:	f843 2b04 	str.w	r2, [r3], #4
 801178c:	e7db      	b.n	8011746 <__multiply+0x4e>
 801178e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011792:	f1ba 0f00 	cmp.w	sl, #0
 8011796:	d020      	beq.n	80117da <__multiply+0xe2>
 8011798:	46b1      	mov	r9, r6
 801179a:	2200      	movs	r2, #0
 801179c:	f105 0e14 	add.w	lr, r5, #20
 80117a0:	f85e 4b04 	ldr.w	r4, [lr], #4
 80117a4:	f8d9 b000 	ldr.w	fp, [r9]
 80117a8:	b2a1      	uxth	r1, r4
 80117aa:	fa1f fb8b 	uxth.w	fp, fp
 80117ae:	fb0a b101 	mla	r1, sl, r1, fp
 80117b2:	4411      	add	r1, r2
 80117b4:	f8d9 2000 	ldr.w	r2, [r9]
 80117b8:	0c24      	lsrs	r4, r4, #16
 80117ba:	0c12      	lsrs	r2, r2, #16
 80117bc:	fb0a 2404 	mla	r4, sl, r4, r2
 80117c0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80117c4:	b289      	uxth	r1, r1
 80117c6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80117ca:	45f4      	cmp	ip, lr
 80117cc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80117d0:	f849 1b04 	str.w	r1, [r9], #4
 80117d4:	d8e4      	bhi.n	80117a0 <__multiply+0xa8>
 80117d6:	9901      	ldr	r1, [sp, #4]
 80117d8:	5072      	str	r2, [r6, r1]
 80117da:	9a03      	ldr	r2, [sp, #12]
 80117dc:	3304      	adds	r3, #4
 80117de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80117e2:	f1b9 0f00 	cmp.w	r9, #0
 80117e6:	d01f      	beq.n	8011828 <__multiply+0x130>
 80117e8:	46b6      	mov	lr, r6
 80117ea:	f04f 0a00 	mov.w	sl, #0
 80117ee:	6834      	ldr	r4, [r6, #0]
 80117f0:	f105 0114 	add.w	r1, r5, #20
 80117f4:	880a      	ldrh	r2, [r1, #0]
 80117f6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80117fa:	b2a4      	uxth	r4, r4
 80117fc:	fb09 b202 	mla	r2, r9, r2, fp
 8011800:	4492      	add	sl, r2
 8011802:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011806:	f84e 4b04 	str.w	r4, [lr], #4
 801180a:	f851 4b04 	ldr.w	r4, [r1], #4
 801180e:	f8be 2000 	ldrh.w	r2, [lr]
 8011812:	0c24      	lsrs	r4, r4, #16
 8011814:	fb09 2404 	mla	r4, r9, r4, r2
 8011818:	458c      	cmp	ip, r1
 801181a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801181e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011822:	d8e7      	bhi.n	80117f4 <__multiply+0xfc>
 8011824:	9a01      	ldr	r2, [sp, #4]
 8011826:	50b4      	str	r4, [r6, r2]
 8011828:	3604      	adds	r6, #4
 801182a:	e7a3      	b.n	8011774 <__multiply+0x7c>
 801182c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011830:	2b00      	cmp	r3, #0
 8011832:	d1a5      	bne.n	8011780 <__multiply+0x88>
 8011834:	3f01      	subs	r7, #1
 8011836:	e7a1      	b.n	801177c <__multiply+0x84>
 8011838:	08013a1b 	.word	0x08013a1b
 801183c:	08013a2c 	.word	0x08013a2c

08011840 <__pow5mult>:
 8011840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011844:	4615      	mov	r5, r2
 8011846:	f012 0203 	ands.w	r2, r2, #3
 801184a:	4606      	mov	r6, r0
 801184c:	460f      	mov	r7, r1
 801184e:	d007      	beq.n	8011860 <__pow5mult+0x20>
 8011850:	4c25      	ldr	r4, [pc, #148]	; (80118e8 <__pow5mult+0xa8>)
 8011852:	3a01      	subs	r2, #1
 8011854:	2300      	movs	r3, #0
 8011856:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801185a:	f7ff fe9f 	bl	801159c <__multadd>
 801185e:	4607      	mov	r7, r0
 8011860:	10ad      	asrs	r5, r5, #2
 8011862:	d03d      	beq.n	80118e0 <__pow5mult+0xa0>
 8011864:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011866:	b97c      	cbnz	r4, 8011888 <__pow5mult+0x48>
 8011868:	2010      	movs	r0, #16
 801186a:	f7fe fa27 	bl	800fcbc <malloc>
 801186e:	4602      	mov	r2, r0
 8011870:	6270      	str	r0, [r6, #36]	; 0x24
 8011872:	b928      	cbnz	r0, 8011880 <__pow5mult+0x40>
 8011874:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011878:	4b1c      	ldr	r3, [pc, #112]	; (80118ec <__pow5mult+0xac>)
 801187a:	481d      	ldr	r0, [pc, #116]	; (80118f0 <__pow5mult+0xb0>)
 801187c:	f000 fb3e 	bl	8011efc <__assert_func>
 8011880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011884:	6004      	str	r4, [r0, #0]
 8011886:	60c4      	str	r4, [r0, #12]
 8011888:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801188c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011890:	b94c      	cbnz	r4, 80118a6 <__pow5mult+0x66>
 8011892:	f240 2171 	movw	r1, #625	; 0x271
 8011896:	4630      	mov	r0, r6
 8011898:	f7ff ff18 	bl	80116cc <__i2b>
 801189c:	2300      	movs	r3, #0
 801189e:	4604      	mov	r4, r0
 80118a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80118a4:	6003      	str	r3, [r0, #0]
 80118a6:	f04f 0900 	mov.w	r9, #0
 80118aa:	07eb      	lsls	r3, r5, #31
 80118ac:	d50a      	bpl.n	80118c4 <__pow5mult+0x84>
 80118ae:	4639      	mov	r1, r7
 80118b0:	4622      	mov	r2, r4
 80118b2:	4630      	mov	r0, r6
 80118b4:	f7ff ff20 	bl	80116f8 <__multiply>
 80118b8:	4680      	mov	r8, r0
 80118ba:	4639      	mov	r1, r7
 80118bc:	4630      	mov	r0, r6
 80118be:	f7ff fe4b 	bl	8011558 <_Bfree>
 80118c2:	4647      	mov	r7, r8
 80118c4:	106d      	asrs	r5, r5, #1
 80118c6:	d00b      	beq.n	80118e0 <__pow5mult+0xa0>
 80118c8:	6820      	ldr	r0, [r4, #0]
 80118ca:	b938      	cbnz	r0, 80118dc <__pow5mult+0x9c>
 80118cc:	4622      	mov	r2, r4
 80118ce:	4621      	mov	r1, r4
 80118d0:	4630      	mov	r0, r6
 80118d2:	f7ff ff11 	bl	80116f8 <__multiply>
 80118d6:	6020      	str	r0, [r4, #0]
 80118d8:	f8c0 9000 	str.w	r9, [r0]
 80118dc:	4604      	mov	r4, r0
 80118de:	e7e4      	b.n	80118aa <__pow5mult+0x6a>
 80118e0:	4638      	mov	r0, r7
 80118e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118e6:	bf00      	nop
 80118e8:	08013b80 	.word	0x08013b80
 80118ec:	080139a5 	.word	0x080139a5
 80118f0:	08013a2c 	.word	0x08013a2c

080118f4 <__lshift>:
 80118f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118f8:	460c      	mov	r4, r1
 80118fa:	4607      	mov	r7, r0
 80118fc:	4691      	mov	r9, r2
 80118fe:	6923      	ldr	r3, [r4, #16]
 8011900:	6849      	ldr	r1, [r1, #4]
 8011902:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011906:	68a3      	ldr	r3, [r4, #8]
 8011908:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801190c:	f108 0601 	add.w	r6, r8, #1
 8011910:	42b3      	cmp	r3, r6
 8011912:	db0b      	blt.n	801192c <__lshift+0x38>
 8011914:	4638      	mov	r0, r7
 8011916:	f7ff fddf 	bl	80114d8 <_Balloc>
 801191a:	4605      	mov	r5, r0
 801191c:	b948      	cbnz	r0, 8011932 <__lshift+0x3e>
 801191e:	4602      	mov	r2, r0
 8011920:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011924:	4b27      	ldr	r3, [pc, #156]	; (80119c4 <__lshift+0xd0>)
 8011926:	4828      	ldr	r0, [pc, #160]	; (80119c8 <__lshift+0xd4>)
 8011928:	f000 fae8 	bl	8011efc <__assert_func>
 801192c:	3101      	adds	r1, #1
 801192e:	005b      	lsls	r3, r3, #1
 8011930:	e7ee      	b.n	8011910 <__lshift+0x1c>
 8011932:	2300      	movs	r3, #0
 8011934:	f100 0114 	add.w	r1, r0, #20
 8011938:	f100 0210 	add.w	r2, r0, #16
 801193c:	4618      	mov	r0, r3
 801193e:	4553      	cmp	r3, sl
 8011940:	db33      	blt.n	80119aa <__lshift+0xb6>
 8011942:	6920      	ldr	r0, [r4, #16]
 8011944:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011948:	f104 0314 	add.w	r3, r4, #20
 801194c:	f019 091f 	ands.w	r9, r9, #31
 8011950:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011954:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011958:	d02b      	beq.n	80119b2 <__lshift+0xbe>
 801195a:	468a      	mov	sl, r1
 801195c:	2200      	movs	r2, #0
 801195e:	f1c9 0e20 	rsb	lr, r9, #32
 8011962:	6818      	ldr	r0, [r3, #0]
 8011964:	fa00 f009 	lsl.w	r0, r0, r9
 8011968:	4302      	orrs	r2, r0
 801196a:	f84a 2b04 	str.w	r2, [sl], #4
 801196e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011972:	459c      	cmp	ip, r3
 8011974:	fa22 f20e 	lsr.w	r2, r2, lr
 8011978:	d8f3      	bhi.n	8011962 <__lshift+0x6e>
 801197a:	ebac 0304 	sub.w	r3, ip, r4
 801197e:	3b15      	subs	r3, #21
 8011980:	f023 0303 	bic.w	r3, r3, #3
 8011984:	3304      	adds	r3, #4
 8011986:	f104 0015 	add.w	r0, r4, #21
 801198a:	4584      	cmp	ip, r0
 801198c:	bf38      	it	cc
 801198e:	2304      	movcc	r3, #4
 8011990:	50ca      	str	r2, [r1, r3]
 8011992:	b10a      	cbz	r2, 8011998 <__lshift+0xa4>
 8011994:	f108 0602 	add.w	r6, r8, #2
 8011998:	3e01      	subs	r6, #1
 801199a:	4638      	mov	r0, r7
 801199c:	4621      	mov	r1, r4
 801199e:	612e      	str	r6, [r5, #16]
 80119a0:	f7ff fdda 	bl	8011558 <_Bfree>
 80119a4:	4628      	mov	r0, r5
 80119a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80119ae:	3301      	adds	r3, #1
 80119b0:	e7c5      	b.n	801193e <__lshift+0x4a>
 80119b2:	3904      	subs	r1, #4
 80119b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80119b8:	459c      	cmp	ip, r3
 80119ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80119be:	d8f9      	bhi.n	80119b4 <__lshift+0xc0>
 80119c0:	e7ea      	b.n	8011998 <__lshift+0xa4>
 80119c2:	bf00      	nop
 80119c4:	08013a1b 	.word	0x08013a1b
 80119c8:	08013a2c 	.word	0x08013a2c

080119cc <__mcmp>:
 80119cc:	4603      	mov	r3, r0
 80119ce:	690a      	ldr	r2, [r1, #16]
 80119d0:	6900      	ldr	r0, [r0, #16]
 80119d2:	b530      	push	{r4, r5, lr}
 80119d4:	1a80      	subs	r0, r0, r2
 80119d6:	d10d      	bne.n	80119f4 <__mcmp+0x28>
 80119d8:	3314      	adds	r3, #20
 80119da:	3114      	adds	r1, #20
 80119dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80119e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80119e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80119e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80119ec:	4295      	cmp	r5, r2
 80119ee:	d002      	beq.n	80119f6 <__mcmp+0x2a>
 80119f0:	d304      	bcc.n	80119fc <__mcmp+0x30>
 80119f2:	2001      	movs	r0, #1
 80119f4:	bd30      	pop	{r4, r5, pc}
 80119f6:	42a3      	cmp	r3, r4
 80119f8:	d3f4      	bcc.n	80119e4 <__mcmp+0x18>
 80119fa:	e7fb      	b.n	80119f4 <__mcmp+0x28>
 80119fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011a00:	e7f8      	b.n	80119f4 <__mcmp+0x28>
	...

08011a04 <__mdiff>:
 8011a04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a08:	460c      	mov	r4, r1
 8011a0a:	4606      	mov	r6, r0
 8011a0c:	4611      	mov	r1, r2
 8011a0e:	4620      	mov	r0, r4
 8011a10:	4692      	mov	sl, r2
 8011a12:	f7ff ffdb 	bl	80119cc <__mcmp>
 8011a16:	1e05      	subs	r5, r0, #0
 8011a18:	d111      	bne.n	8011a3e <__mdiff+0x3a>
 8011a1a:	4629      	mov	r1, r5
 8011a1c:	4630      	mov	r0, r6
 8011a1e:	f7ff fd5b 	bl	80114d8 <_Balloc>
 8011a22:	4602      	mov	r2, r0
 8011a24:	b928      	cbnz	r0, 8011a32 <__mdiff+0x2e>
 8011a26:	f240 2132 	movw	r1, #562	; 0x232
 8011a2a:	4b3c      	ldr	r3, [pc, #240]	; (8011b1c <__mdiff+0x118>)
 8011a2c:	483c      	ldr	r0, [pc, #240]	; (8011b20 <__mdiff+0x11c>)
 8011a2e:	f000 fa65 	bl	8011efc <__assert_func>
 8011a32:	2301      	movs	r3, #1
 8011a34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a38:	4610      	mov	r0, r2
 8011a3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a3e:	bfa4      	itt	ge
 8011a40:	4653      	movge	r3, sl
 8011a42:	46a2      	movge	sl, r4
 8011a44:	4630      	mov	r0, r6
 8011a46:	f8da 1004 	ldr.w	r1, [sl, #4]
 8011a4a:	bfa6      	itte	ge
 8011a4c:	461c      	movge	r4, r3
 8011a4e:	2500      	movge	r5, #0
 8011a50:	2501      	movlt	r5, #1
 8011a52:	f7ff fd41 	bl	80114d8 <_Balloc>
 8011a56:	4602      	mov	r2, r0
 8011a58:	b918      	cbnz	r0, 8011a62 <__mdiff+0x5e>
 8011a5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011a5e:	4b2f      	ldr	r3, [pc, #188]	; (8011b1c <__mdiff+0x118>)
 8011a60:	e7e4      	b.n	8011a2c <__mdiff+0x28>
 8011a62:	f100 0814 	add.w	r8, r0, #20
 8011a66:	f8da 7010 	ldr.w	r7, [sl, #16]
 8011a6a:	60c5      	str	r5, [r0, #12]
 8011a6c:	f04f 0c00 	mov.w	ip, #0
 8011a70:	f10a 0514 	add.w	r5, sl, #20
 8011a74:	f10a 0010 	add.w	r0, sl, #16
 8011a78:	46c2      	mov	sl, r8
 8011a7a:	6926      	ldr	r6, [r4, #16]
 8011a7c:	f104 0914 	add.w	r9, r4, #20
 8011a80:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8011a84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011a88:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8011a8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011a90:	fa1f f18b 	uxth.w	r1, fp
 8011a94:	4461      	add	r1, ip
 8011a96:	fa1f fc83 	uxth.w	ip, r3
 8011a9a:	0c1b      	lsrs	r3, r3, #16
 8011a9c:	eba1 010c 	sub.w	r1, r1, ip
 8011aa0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011aa4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011aa8:	b289      	uxth	r1, r1
 8011aaa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8011aae:	454e      	cmp	r6, r9
 8011ab0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011ab4:	f84a 3b04 	str.w	r3, [sl], #4
 8011ab8:	d8e6      	bhi.n	8011a88 <__mdiff+0x84>
 8011aba:	1b33      	subs	r3, r6, r4
 8011abc:	3b15      	subs	r3, #21
 8011abe:	f023 0303 	bic.w	r3, r3, #3
 8011ac2:	3415      	adds	r4, #21
 8011ac4:	3304      	adds	r3, #4
 8011ac6:	42a6      	cmp	r6, r4
 8011ac8:	bf38      	it	cc
 8011aca:	2304      	movcc	r3, #4
 8011acc:	441d      	add	r5, r3
 8011ace:	4443      	add	r3, r8
 8011ad0:	461e      	mov	r6, r3
 8011ad2:	462c      	mov	r4, r5
 8011ad4:	4574      	cmp	r4, lr
 8011ad6:	d30e      	bcc.n	8011af6 <__mdiff+0xf2>
 8011ad8:	f10e 0103 	add.w	r1, lr, #3
 8011adc:	1b49      	subs	r1, r1, r5
 8011ade:	f021 0103 	bic.w	r1, r1, #3
 8011ae2:	3d03      	subs	r5, #3
 8011ae4:	45ae      	cmp	lr, r5
 8011ae6:	bf38      	it	cc
 8011ae8:	2100      	movcc	r1, #0
 8011aea:	4419      	add	r1, r3
 8011aec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8011af0:	b18b      	cbz	r3, 8011b16 <__mdiff+0x112>
 8011af2:	6117      	str	r7, [r2, #16]
 8011af4:	e7a0      	b.n	8011a38 <__mdiff+0x34>
 8011af6:	f854 8b04 	ldr.w	r8, [r4], #4
 8011afa:	fa1f f188 	uxth.w	r1, r8
 8011afe:	4461      	add	r1, ip
 8011b00:	1408      	asrs	r0, r1, #16
 8011b02:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8011b06:	b289      	uxth	r1, r1
 8011b08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011b0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b10:	f846 1b04 	str.w	r1, [r6], #4
 8011b14:	e7de      	b.n	8011ad4 <__mdiff+0xd0>
 8011b16:	3f01      	subs	r7, #1
 8011b18:	e7e8      	b.n	8011aec <__mdiff+0xe8>
 8011b1a:	bf00      	nop
 8011b1c:	08013a1b 	.word	0x08013a1b
 8011b20:	08013a2c 	.word	0x08013a2c

08011b24 <__d2b>:
 8011b24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011b28:	2101      	movs	r1, #1
 8011b2a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8011b2e:	4690      	mov	r8, r2
 8011b30:	461d      	mov	r5, r3
 8011b32:	f7ff fcd1 	bl	80114d8 <_Balloc>
 8011b36:	4604      	mov	r4, r0
 8011b38:	b930      	cbnz	r0, 8011b48 <__d2b+0x24>
 8011b3a:	4602      	mov	r2, r0
 8011b3c:	f240 310a 	movw	r1, #778	; 0x30a
 8011b40:	4b24      	ldr	r3, [pc, #144]	; (8011bd4 <__d2b+0xb0>)
 8011b42:	4825      	ldr	r0, [pc, #148]	; (8011bd8 <__d2b+0xb4>)
 8011b44:	f000 f9da 	bl	8011efc <__assert_func>
 8011b48:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8011b4c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8011b50:	bb2d      	cbnz	r5, 8011b9e <__d2b+0x7a>
 8011b52:	9301      	str	r3, [sp, #4]
 8011b54:	f1b8 0300 	subs.w	r3, r8, #0
 8011b58:	d026      	beq.n	8011ba8 <__d2b+0x84>
 8011b5a:	4668      	mov	r0, sp
 8011b5c:	9300      	str	r3, [sp, #0]
 8011b5e:	f7ff fd87 	bl	8011670 <__lo0bits>
 8011b62:	9900      	ldr	r1, [sp, #0]
 8011b64:	b1f0      	cbz	r0, 8011ba4 <__d2b+0x80>
 8011b66:	9a01      	ldr	r2, [sp, #4]
 8011b68:	f1c0 0320 	rsb	r3, r0, #32
 8011b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8011b70:	430b      	orrs	r3, r1
 8011b72:	40c2      	lsrs	r2, r0
 8011b74:	6163      	str	r3, [r4, #20]
 8011b76:	9201      	str	r2, [sp, #4]
 8011b78:	9b01      	ldr	r3, [sp, #4]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	bf14      	ite	ne
 8011b7e:	2102      	movne	r1, #2
 8011b80:	2101      	moveq	r1, #1
 8011b82:	61a3      	str	r3, [r4, #24]
 8011b84:	6121      	str	r1, [r4, #16]
 8011b86:	b1c5      	cbz	r5, 8011bba <__d2b+0x96>
 8011b88:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011b8c:	4405      	add	r5, r0
 8011b8e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011b92:	603d      	str	r5, [r7, #0]
 8011b94:	6030      	str	r0, [r6, #0]
 8011b96:	4620      	mov	r0, r4
 8011b98:	b002      	add	sp, #8
 8011b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011ba2:	e7d6      	b.n	8011b52 <__d2b+0x2e>
 8011ba4:	6161      	str	r1, [r4, #20]
 8011ba6:	e7e7      	b.n	8011b78 <__d2b+0x54>
 8011ba8:	a801      	add	r0, sp, #4
 8011baa:	f7ff fd61 	bl	8011670 <__lo0bits>
 8011bae:	2101      	movs	r1, #1
 8011bb0:	9b01      	ldr	r3, [sp, #4]
 8011bb2:	6121      	str	r1, [r4, #16]
 8011bb4:	6163      	str	r3, [r4, #20]
 8011bb6:	3020      	adds	r0, #32
 8011bb8:	e7e5      	b.n	8011b86 <__d2b+0x62>
 8011bba:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8011bbe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011bc2:	6038      	str	r0, [r7, #0]
 8011bc4:	6918      	ldr	r0, [r3, #16]
 8011bc6:	f7ff fd33 	bl	8011630 <__hi0bits>
 8011bca:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8011bce:	6031      	str	r1, [r6, #0]
 8011bd0:	e7e1      	b.n	8011b96 <__d2b+0x72>
 8011bd2:	bf00      	nop
 8011bd4:	08013a1b 	.word	0x08013a1b
 8011bd8:	08013a2c 	.word	0x08013a2c

08011bdc <_calloc_r>:
 8011bdc:	b538      	push	{r3, r4, r5, lr}
 8011bde:	fb02 f501 	mul.w	r5, r2, r1
 8011be2:	4629      	mov	r1, r5
 8011be4:	f7fe f8ea 	bl	800fdbc <_malloc_r>
 8011be8:	4604      	mov	r4, r0
 8011bea:	b118      	cbz	r0, 8011bf4 <_calloc_r+0x18>
 8011bec:	462a      	mov	r2, r5
 8011bee:	2100      	movs	r1, #0
 8011bf0:	f7fe f890 	bl	800fd14 <memset>
 8011bf4:	4620      	mov	r0, r4
 8011bf6:	bd38      	pop	{r3, r4, r5, pc}

08011bf8 <_realloc_r>:
 8011bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bfa:	4607      	mov	r7, r0
 8011bfc:	4614      	mov	r4, r2
 8011bfe:	460e      	mov	r6, r1
 8011c00:	b921      	cbnz	r1, 8011c0c <_realloc_r+0x14>
 8011c02:	4611      	mov	r1, r2
 8011c04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011c08:	f7fe b8d8 	b.w	800fdbc <_malloc_r>
 8011c0c:	b922      	cbnz	r2, 8011c18 <_realloc_r+0x20>
 8011c0e:	f7fe f889 	bl	800fd24 <_free_r>
 8011c12:	4625      	mov	r5, r4
 8011c14:	4628      	mov	r0, r5
 8011c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c18:	f000 f9cf 	bl	8011fba <_malloc_usable_size_r>
 8011c1c:	42a0      	cmp	r0, r4
 8011c1e:	d20f      	bcs.n	8011c40 <_realloc_r+0x48>
 8011c20:	4621      	mov	r1, r4
 8011c22:	4638      	mov	r0, r7
 8011c24:	f7fe f8ca 	bl	800fdbc <_malloc_r>
 8011c28:	4605      	mov	r5, r0
 8011c2a:	2800      	cmp	r0, #0
 8011c2c:	d0f2      	beq.n	8011c14 <_realloc_r+0x1c>
 8011c2e:	4631      	mov	r1, r6
 8011c30:	4622      	mov	r2, r4
 8011c32:	f7fe f861 	bl	800fcf8 <memcpy>
 8011c36:	4631      	mov	r1, r6
 8011c38:	4638      	mov	r0, r7
 8011c3a:	f7fe f873 	bl	800fd24 <_free_r>
 8011c3e:	e7e9      	b.n	8011c14 <_realloc_r+0x1c>
 8011c40:	4635      	mov	r5, r6
 8011c42:	e7e7      	b.n	8011c14 <_realloc_r+0x1c>

08011c44 <__ssputs_r>:
 8011c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c48:	688e      	ldr	r6, [r1, #8]
 8011c4a:	4682      	mov	sl, r0
 8011c4c:	429e      	cmp	r6, r3
 8011c4e:	460c      	mov	r4, r1
 8011c50:	4690      	mov	r8, r2
 8011c52:	461f      	mov	r7, r3
 8011c54:	d838      	bhi.n	8011cc8 <__ssputs_r+0x84>
 8011c56:	898a      	ldrh	r2, [r1, #12]
 8011c58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011c5c:	d032      	beq.n	8011cc4 <__ssputs_r+0x80>
 8011c5e:	6825      	ldr	r5, [r4, #0]
 8011c60:	6909      	ldr	r1, [r1, #16]
 8011c62:	3301      	adds	r3, #1
 8011c64:	eba5 0901 	sub.w	r9, r5, r1
 8011c68:	6965      	ldr	r5, [r4, #20]
 8011c6a:	444b      	add	r3, r9
 8011c6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011c74:	106d      	asrs	r5, r5, #1
 8011c76:	429d      	cmp	r5, r3
 8011c78:	bf38      	it	cc
 8011c7a:	461d      	movcc	r5, r3
 8011c7c:	0553      	lsls	r3, r2, #21
 8011c7e:	d531      	bpl.n	8011ce4 <__ssputs_r+0xa0>
 8011c80:	4629      	mov	r1, r5
 8011c82:	f7fe f89b 	bl	800fdbc <_malloc_r>
 8011c86:	4606      	mov	r6, r0
 8011c88:	b950      	cbnz	r0, 8011ca0 <__ssputs_r+0x5c>
 8011c8a:	230c      	movs	r3, #12
 8011c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c90:	f8ca 3000 	str.w	r3, [sl]
 8011c94:	89a3      	ldrh	r3, [r4, #12]
 8011c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c9a:	81a3      	strh	r3, [r4, #12]
 8011c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ca0:	464a      	mov	r2, r9
 8011ca2:	6921      	ldr	r1, [r4, #16]
 8011ca4:	f7fe f828 	bl	800fcf8 <memcpy>
 8011ca8:	89a3      	ldrh	r3, [r4, #12]
 8011caa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cb2:	81a3      	strh	r3, [r4, #12]
 8011cb4:	6126      	str	r6, [r4, #16]
 8011cb6:	444e      	add	r6, r9
 8011cb8:	6026      	str	r6, [r4, #0]
 8011cba:	463e      	mov	r6, r7
 8011cbc:	6165      	str	r5, [r4, #20]
 8011cbe:	eba5 0509 	sub.w	r5, r5, r9
 8011cc2:	60a5      	str	r5, [r4, #8]
 8011cc4:	42be      	cmp	r6, r7
 8011cc6:	d900      	bls.n	8011cca <__ssputs_r+0x86>
 8011cc8:	463e      	mov	r6, r7
 8011cca:	4632      	mov	r2, r6
 8011ccc:	4641      	mov	r1, r8
 8011cce:	6820      	ldr	r0, [r4, #0]
 8011cd0:	f000 f959 	bl	8011f86 <memmove>
 8011cd4:	68a3      	ldr	r3, [r4, #8]
 8011cd6:	6822      	ldr	r2, [r4, #0]
 8011cd8:	1b9b      	subs	r3, r3, r6
 8011cda:	4432      	add	r2, r6
 8011cdc:	2000      	movs	r0, #0
 8011cde:	60a3      	str	r3, [r4, #8]
 8011ce0:	6022      	str	r2, [r4, #0]
 8011ce2:	e7db      	b.n	8011c9c <__ssputs_r+0x58>
 8011ce4:	462a      	mov	r2, r5
 8011ce6:	f7ff ff87 	bl	8011bf8 <_realloc_r>
 8011cea:	4606      	mov	r6, r0
 8011cec:	2800      	cmp	r0, #0
 8011cee:	d1e1      	bne.n	8011cb4 <__ssputs_r+0x70>
 8011cf0:	4650      	mov	r0, sl
 8011cf2:	6921      	ldr	r1, [r4, #16]
 8011cf4:	f7fe f816 	bl	800fd24 <_free_r>
 8011cf8:	e7c7      	b.n	8011c8a <__ssputs_r+0x46>
	...

08011cfc <_svfiprintf_r>:
 8011cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d00:	4698      	mov	r8, r3
 8011d02:	898b      	ldrh	r3, [r1, #12]
 8011d04:	4607      	mov	r7, r0
 8011d06:	061b      	lsls	r3, r3, #24
 8011d08:	460d      	mov	r5, r1
 8011d0a:	4614      	mov	r4, r2
 8011d0c:	b09d      	sub	sp, #116	; 0x74
 8011d0e:	d50e      	bpl.n	8011d2e <_svfiprintf_r+0x32>
 8011d10:	690b      	ldr	r3, [r1, #16]
 8011d12:	b963      	cbnz	r3, 8011d2e <_svfiprintf_r+0x32>
 8011d14:	2140      	movs	r1, #64	; 0x40
 8011d16:	f7fe f851 	bl	800fdbc <_malloc_r>
 8011d1a:	6028      	str	r0, [r5, #0]
 8011d1c:	6128      	str	r0, [r5, #16]
 8011d1e:	b920      	cbnz	r0, 8011d2a <_svfiprintf_r+0x2e>
 8011d20:	230c      	movs	r3, #12
 8011d22:	603b      	str	r3, [r7, #0]
 8011d24:	f04f 30ff 	mov.w	r0, #4294967295
 8011d28:	e0d1      	b.n	8011ece <_svfiprintf_r+0x1d2>
 8011d2a:	2340      	movs	r3, #64	; 0x40
 8011d2c:	616b      	str	r3, [r5, #20]
 8011d2e:	2300      	movs	r3, #0
 8011d30:	9309      	str	r3, [sp, #36]	; 0x24
 8011d32:	2320      	movs	r3, #32
 8011d34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d38:	2330      	movs	r3, #48	; 0x30
 8011d3a:	f04f 0901 	mov.w	r9, #1
 8011d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011ee8 <_svfiprintf_r+0x1ec>
 8011d46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d4a:	4623      	mov	r3, r4
 8011d4c:	469a      	mov	sl, r3
 8011d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d52:	b10a      	cbz	r2, 8011d58 <_svfiprintf_r+0x5c>
 8011d54:	2a25      	cmp	r2, #37	; 0x25
 8011d56:	d1f9      	bne.n	8011d4c <_svfiprintf_r+0x50>
 8011d58:	ebba 0b04 	subs.w	fp, sl, r4
 8011d5c:	d00b      	beq.n	8011d76 <_svfiprintf_r+0x7a>
 8011d5e:	465b      	mov	r3, fp
 8011d60:	4622      	mov	r2, r4
 8011d62:	4629      	mov	r1, r5
 8011d64:	4638      	mov	r0, r7
 8011d66:	f7ff ff6d 	bl	8011c44 <__ssputs_r>
 8011d6a:	3001      	adds	r0, #1
 8011d6c:	f000 80aa 	beq.w	8011ec4 <_svfiprintf_r+0x1c8>
 8011d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d72:	445a      	add	r2, fp
 8011d74:	9209      	str	r2, [sp, #36]	; 0x24
 8011d76:	f89a 3000 	ldrb.w	r3, [sl]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	f000 80a2 	beq.w	8011ec4 <_svfiprintf_r+0x1c8>
 8011d80:	2300      	movs	r3, #0
 8011d82:	f04f 32ff 	mov.w	r2, #4294967295
 8011d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d8a:	f10a 0a01 	add.w	sl, sl, #1
 8011d8e:	9304      	str	r3, [sp, #16]
 8011d90:	9307      	str	r3, [sp, #28]
 8011d92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d96:	931a      	str	r3, [sp, #104]	; 0x68
 8011d98:	4654      	mov	r4, sl
 8011d9a:	2205      	movs	r2, #5
 8011d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011da0:	4851      	ldr	r0, [pc, #324]	; (8011ee8 <_svfiprintf_r+0x1ec>)
 8011da2:	f7ff fb7f 	bl	80114a4 <memchr>
 8011da6:	9a04      	ldr	r2, [sp, #16]
 8011da8:	b9d8      	cbnz	r0, 8011de2 <_svfiprintf_r+0xe6>
 8011daa:	06d0      	lsls	r0, r2, #27
 8011dac:	bf44      	itt	mi
 8011dae:	2320      	movmi	r3, #32
 8011db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011db4:	0711      	lsls	r1, r2, #28
 8011db6:	bf44      	itt	mi
 8011db8:	232b      	movmi	r3, #43	; 0x2b
 8011dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8011dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8011dc4:	d015      	beq.n	8011df2 <_svfiprintf_r+0xf6>
 8011dc6:	4654      	mov	r4, sl
 8011dc8:	2000      	movs	r0, #0
 8011dca:	f04f 0c0a 	mov.w	ip, #10
 8011dce:	9a07      	ldr	r2, [sp, #28]
 8011dd0:	4621      	mov	r1, r4
 8011dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011dd6:	3b30      	subs	r3, #48	; 0x30
 8011dd8:	2b09      	cmp	r3, #9
 8011dda:	d94e      	bls.n	8011e7a <_svfiprintf_r+0x17e>
 8011ddc:	b1b0      	cbz	r0, 8011e0c <_svfiprintf_r+0x110>
 8011dde:	9207      	str	r2, [sp, #28]
 8011de0:	e014      	b.n	8011e0c <_svfiprintf_r+0x110>
 8011de2:	eba0 0308 	sub.w	r3, r0, r8
 8011de6:	fa09 f303 	lsl.w	r3, r9, r3
 8011dea:	4313      	orrs	r3, r2
 8011dec:	46a2      	mov	sl, r4
 8011dee:	9304      	str	r3, [sp, #16]
 8011df0:	e7d2      	b.n	8011d98 <_svfiprintf_r+0x9c>
 8011df2:	9b03      	ldr	r3, [sp, #12]
 8011df4:	1d19      	adds	r1, r3, #4
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	9103      	str	r1, [sp, #12]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	bfbb      	ittet	lt
 8011dfe:	425b      	neglt	r3, r3
 8011e00:	f042 0202 	orrlt.w	r2, r2, #2
 8011e04:	9307      	strge	r3, [sp, #28]
 8011e06:	9307      	strlt	r3, [sp, #28]
 8011e08:	bfb8      	it	lt
 8011e0a:	9204      	strlt	r2, [sp, #16]
 8011e0c:	7823      	ldrb	r3, [r4, #0]
 8011e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8011e10:	d10c      	bne.n	8011e2c <_svfiprintf_r+0x130>
 8011e12:	7863      	ldrb	r3, [r4, #1]
 8011e14:	2b2a      	cmp	r3, #42	; 0x2a
 8011e16:	d135      	bne.n	8011e84 <_svfiprintf_r+0x188>
 8011e18:	9b03      	ldr	r3, [sp, #12]
 8011e1a:	3402      	adds	r4, #2
 8011e1c:	1d1a      	adds	r2, r3, #4
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	9203      	str	r2, [sp, #12]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	bfb8      	it	lt
 8011e26:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e2a:	9305      	str	r3, [sp, #20]
 8011e2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011ef8 <_svfiprintf_r+0x1fc>
 8011e30:	2203      	movs	r2, #3
 8011e32:	4650      	mov	r0, sl
 8011e34:	7821      	ldrb	r1, [r4, #0]
 8011e36:	f7ff fb35 	bl	80114a4 <memchr>
 8011e3a:	b140      	cbz	r0, 8011e4e <_svfiprintf_r+0x152>
 8011e3c:	2340      	movs	r3, #64	; 0x40
 8011e3e:	eba0 000a 	sub.w	r0, r0, sl
 8011e42:	fa03 f000 	lsl.w	r0, r3, r0
 8011e46:	9b04      	ldr	r3, [sp, #16]
 8011e48:	3401      	adds	r4, #1
 8011e4a:	4303      	orrs	r3, r0
 8011e4c:	9304      	str	r3, [sp, #16]
 8011e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e52:	2206      	movs	r2, #6
 8011e54:	4825      	ldr	r0, [pc, #148]	; (8011eec <_svfiprintf_r+0x1f0>)
 8011e56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e5a:	f7ff fb23 	bl	80114a4 <memchr>
 8011e5e:	2800      	cmp	r0, #0
 8011e60:	d038      	beq.n	8011ed4 <_svfiprintf_r+0x1d8>
 8011e62:	4b23      	ldr	r3, [pc, #140]	; (8011ef0 <_svfiprintf_r+0x1f4>)
 8011e64:	bb1b      	cbnz	r3, 8011eae <_svfiprintf_r+0x1b2>
 8011e66:	9b03      	ldr	r3, [sp, #12]
 8011e68:	3307      	adds	r3, #7
 8011e6a:	f023 0307 	bic.w	r3, r3, #7
 8011e6e:	3308      	adds	r3, #8
 8011e70:	9303      	str	r3, [sp, #12]
 8011e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e74:	4433      	add	r3, r6
 8011e76:	9309      	str	r3, [sp, #36]	; 0x24
 8011e78:	e767      	b.n	8011d4a <_svfiprintf_r+0x4e>
 8011e7a:	460c      	mov	r4, r1
 8011e7c:	2001      	movs	r0, #1
 8011e7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e82:	e7a5      	b.n	8011dd0 <_svfiprintf_r+0xd4>
 8011e84:	2300      	movs	r3, #0
 8011e86:	f04f 0c0a 	mov.w	ip, #10
 8011e8a:	4619      	mov	r1, r3
 8011e8c:	3401      	adds	r4, #1
 8011e8e:	9305      	str	r3, [sp, #20]
 8011e90:	4620      	mov	r0, r4
 8011e92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e96:	3a30      	subs	r2, #48	; 0x30
 8011e98:	2a09      	cmp	r2, #9
 8011e9a:	d903      	bls.n	8011ea4 <_svfiprintf_r+0x1a8>
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d0c5      	beq.n	8011e2c <_svfiprintf_r+0x130>
 8011ea0:	9105      	str	r1, [sp, #20]
 8011ea2:	e7c3      	b.n	8011e2c <_svfiprintf_r+0x130>
 8011ea4:	4604      	mov	r4, r0
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	fb0c 2101 	mla	r1, ip, r1, r2
 8011eac:	e7f0      	b.n	8011e90 <_svfiprintf_r+0x194>
 8011eae:	ab03      	add	r3, sp, #12
 8011eb0:	9300      	str	r3, [sp, #0]
 8011eb2:	462a      	mov	r2, r5
 8011eb4:	4638      	mov	r0, r7
 8011eb6:	4b0f      	ldr	r3, [pc, #60]	; (8011ef4 <_svfiprintf_r+0x1f8>)
 8011eb8:	a904      	add	r1, sp, #16
 8011eba:	f7fe f877 	bl	800ffac <_printf_float>
 8011ebe:	1c42      	adds	r2, r0, #1
 8011ec0:	4606      	mov	r6, r0
 8011ec2:	d1d6      	bne.n	8011e72 <_svfiprintf_r+0x176>
 8011ec4:	89ab      	ldrh	r3, [r5, #12]
 8011ec6:	065b      	lsls	r3, r3, #25
 8011ec8:	f53f af2c 	bmi.w	8011d24 <_svfiprintf_r+0x28>
 8011ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ece:	b01d      	add	sp, #116	; 0x74
 8011ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ed4:	ab03      	add	r3, sp, #12
 8011ed6:	9300      	str	r3, [sp, #0]
 8011ed8:	462a      	mov	r2, r5
 8011eda:	4638      	mov	r0, r7
 8011edc:	4b05      	ldr	r3, [pc, #20]	; (8011ef4 <_svfiprintf_r+0x1f8>)
 8011ede:	a904      	add	r1, sp, #16
 8011ee0:	f7fe fb00 	bl	80104e4 <_printf_i>
 8011ee4:	e7eb      	b.n	8011ebe <_svfiprintf_r+0x1c2>
 8011ee6:	bf00      	nop
 8011ee8:	08013b8c 	.word	0x08013b8c
 8011eec:	08013b96 	.word	0x08013b96
 8011ef0:	0800ffad 	.word	0x0800ffad
 8011ef4:	08011c45 	.word	0x08011c45
 8011ef8:	08013b92 	.word	0x08013b92

08011efc <__assert_func>:
 8011efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011efe:	4614      	mov	r4, r2
 8011f00:	461a      	mov	r2, r3
 8011f02:	4b09      	ldr	r3, [pc, #36]	; (8011f28 <__assert_func+0x2c>)
 8011f04:	4605      	mov	r5, r0
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	68d8      	ldr	r0, [r3, #12]
 8011f0a:	b14c      	cbz	r4, 8011f20 <__assert_func+0x24>
 8011f0c:	4b07      	ldr	r3, [pc, #28]	; (8011f2c <__assert_func+0x30>)
 8011f0e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011f12:	9100      	str	r1, [sp, #0]
 8011f14:	462b      	mov	r3, r5
 8011f16:	4906      	ldr	r1, [pc, #24]	; (8011f30 <__assert_func+0x34>)
 8011f18:	f000 f80e 	bl	8011f38 <fiprintf>
 8011f1c:	f000 fa7a 	bl	8012414 <abort>
 8011f20:	4b04      	ldr	r3, [pc, #16]	; (8011f34 <__assert_func+0x38>)
 8011f22:	461c      	mov	r4, r3
 8011f24:	e7f3      	b.n	8011f0e <__assert_func+0x12>
 8011f26:	bf00      	nop
 8011f28:	200001bc 	.word	0x200001bc
 8011f2c:	08013b9d 	.word	0x08013b9d
 8011f30:	08013baa 	.word	0x08013baa
 8011f34:	08013bd8 	.word	0x08013bd8

08011f38 <fiprintf>:
 8011f38:	b40e      	push	{r1, r2, r3}
 8011f3a:	b503      	push	{r0, r1, lr}
 8011f3c:	4601      	mov	r1, r0
 8011f3e:	ab03      	add	r3, sp, #12
 8011f40:	4805      	ldr	r0, [pc, #20]	; (8011f58 <fiprintf+0x20>)
 8011f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f46:	6800      	ldr	r0, [r0, #0]
 8011f48:	9301      	str	r3, [sp, #4]
 8011f4a:	f000 f865 	bl	8012018 <_vfiprintf_r>
 8011f4e:	b002      	add	sp, #8
 8011f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f54:	b003      	add	sp, #12
 8011f56:	4770      	bx	lr
 8011f58:	200001bc 	.word	0x200001bc

08011f5c <__retarget_lock_init_recursive>:
 8011f5c:	4770      	bx	lr

08011f5e <__retarget_lock_acquire_recursive>:
 8011f5e:	4770      	bx	lr

08011f60 <__retarget_lock_release_recursive>:
 8011f60:	4770      	bx	lr

08011f62 <__ascii_mbtowc>:
 8011f62:	b082      	sub	sp, #8
 8011f64:	b901      	cbnz	r1, 8011f68 <__ascii_mbtowc+0x6>
 8011f66:	a901      	add	r1, sp, #4
 8011f68:	b142      	cbz	r2, 8011f7c <__ascii_mbtowc+0x1a>
 8011f6a:	b14b      	cbz	r3, 8011f80 <__ascii_mbtowc+0x1e>
 8011f6c:	7813      	ldrb	r3, [r2, #0]
 8011f6e:	600b      	str	r3, [r1, #0]
 8011f70:	7812      	ldrb	r2, [r2, #0]
 8011f72:	1e10      	subs	r0, r2, #0
 8011f74:	bf18      	it	ne
 8011f76:	2001      	movne	r0, #1
 8011f78:	b002      	add	sp, #8
 8011f7a:	4770      	bx	lr
 8011f7c:	4610      	mov	r0, r2
 8011f7e:	e7fb      	b.n	8011f78 <__ascii_mbtowc+0x16>
 8011f80:	f06f 0001 	mvn.w	r0, #1
 8011f84:	e7f8      	b.n	8011f78 <__ascii_mbtowc+0x16>

08011f86 <memmove>:
 8011f86:	4288      	cmp	r0, r1
 8011f88:	b510      	push	{r4, lr}
 8011f8a:	eb01 0402 	add.w	r4, r1, r2
 8011f8e:	d902      	bls.n	8011f96 <memmove+0x10>
 8011f90:	4284      	cmp	r4, r0
 8011f92:	4623      	mov	r3, r4
 8011f94:	d807      	bhi.n	8011fa6 <memmove+0x20>
 8011f96:	1e43      	subs	r3, r0, #1
 8011f98:	42a1      	cmp	r1, r4
 8011f9a:	d008      	beq.n	8011fae <memmove+0x28>
 8011f9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011fa0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011fa4:	e7f8      	b.n	8011f98 <memmove+0x12>
 8011fa6:	4601      	mov	r1, r0
 8011fa8:	4402      	add	r2, r0
 8011faa:	428a      	cmp	r2, r1
 8011fac:	d100      	bne.n	8011fb0 <memmove+0x2a>
 8011fae:	bd10      	pop	{r4, pc}
 8011fb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011fb4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011fb8:	e7f7      	b.n	8011faa <memmove+0x24>

08011fba <_malloc_usable_size_r>:
 8011fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fbe:	1f18      	subs	r0, r3, #4
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	bfbc      	itt	lt
 8011fc4:	580b      	ldrlt	r3, [r1, r0]
 8011fc6:	18c0      	addlt	r0, r0, r3
 8011fc8:	4770      	bx	lr

08011fca <__sfputc_r>:
 8011fca:	6893      	ldr	r3, [r2, #8]
 8011fcc:	b410      	push	{r4}
 8011fce:	3b01      	subs	r3, #1
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	6093      	str	r3, [r2, #8]
 8011fd4:	da07      	bge.n	8011fe6 <__sfputc_r+0x1c>
 8011fd6:	6994      	ldr	r4, [r2, #24]
 8011fd8:	42a3      	cmp	r3, r4
 8011fda:	db01      	blt.n	8011fe0 <__sfputc_r+0x16>
 8011fdc:	290a      	cmp	r1, #10
 8011fde:	d102      	bne.n	8011fe6 <__sfputc_r+0x1c>
 8011fe0:	bc10      	pop	{r4}
 8011fe2:	f000 b949 	b.w	8012278 <__swbuf_r>
 8011fe6:	6813      	ldr	r3, [r2, #0]
 8011fe8:	1c58      	adds	r0, r3, #1
 8011fea:	6010      	str	r0, [r2, #0]
 8011fec:	7019      	strb	r1, [r3, #0]
 8011fee:	4608      	mov	r0, r1
 8011ff0:	bc10      	pop	{r4}
 8011ff2:	4770      	bx	lr

08011ff4 <__sfputs_r>:
 8011ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ff6:	4606      	mov	r6, r0
 8011ff8:	460f      	mov	r7, r1
 8011ffa:	4614      	mov	r4, r2
 8011ffc:	18d5      	adds	r5, r2, r3
 8011ffe:	42ac      	cmp	r4, r5
 8012000:	d101      	bne.n	8012006 <__sfputs_r+0x12>
 8012002:	2000      	movs	r0, #0
 8012004:	e007      	b.n	8012016 <__sfputs_r+0x22>
 8012006:	463a      	mov	r2, r7
 8012008:	4630      	mov	r0, r6
 801200a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801200e:	f7ff ffdc 	bl	8011fca <__sfputc_r>
 8012012:	1c43      	adds	r3, r0, #1
 8012014:	d1f3      	bne.n	8011ffe <__sfputs_r+0xa>
 8012016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012018 <_vfiprintf_r>:
 8012018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801201c:	460d      	mov	r5, r1
 801201e:	4614      	mov	r4, r2
 8012020:	4698      	mov	r8, r3
 8012022:	4606      	mov	r6, r0
 8012024:	b09d      	sub	sp, #116	; 0x74
 8012026:	b118      	cbz	r0, 8012030 <_vfiprintf_r+0x18>
 8012028:	6983      	ldr	r3, [r0, #24]
 801202a:	b90b      	cbnz	r3, 8012030 <_vfiprintf_r+0x18>
 801202c:	f000 fb14 	bl	8012658 <__sinit>
 8012030:	4b89      	ldr	r3, [pc, #548]	; (8012258 <_vfiprintf_r+0x240>)
 8012032:	429d      	cmp	r5, r3
 8012034:	d11b      	bne.n	801206e <_vfiprintf_r+0x56>
 8012036:	6875      	ldr	r5, [r6, #4]
 8012038:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801203a:	07d9      	lsls	r1, r3, #31
 801203c:	d405      	bmi.n	801204a <_vfiprintf_r+0x32>
 801203e:	89ab      	ldrh	r3, [r5, #12]
 8012040:	059a      	lsls	r2, r3, #22
 8012042:	d402      	bmi.n	801204a <_vfiprintf_r+0x32>
 8012044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012046:	f7ff ff8a 	bl	8011f5e <__retarget_lock_acquire_recursive>
 801204a:	89ab      	ldrh	r3, [r5, #12]
 801204c:	071b      	lsls	r3, r3, #28
 801204e:	d501      	bpl.n	8012054 <_vfiprintf_r+0x3c>
 8012050:	692b      	ldr	r3, [r5, #16]
 8012052:	b9eb      	cbnz	r3, 8012090 <_vfiprintf_r+0x78>
 8012054:	4629      	mov	r1, r5
 8012056:	4630      	mov	r0, r6
 8012058:	f000 f96e 	bl	8012338 <__swsetup_r>
 801205c:	b1c0      	cbz	r0, 8012090 <_vfiprintf_r+0x78>
 801205e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012060:	07dc      	lsls	r4, r3, #31
 8012062:	d50e      	bpl.n	8012082 <_vfiprintf_r+0x6a>
 8012064:	f04f 30ff 	mov.w	r0, #4294967295
 8012068:	b01d      	add	sp, #116	; 0x74
 801206a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206e:	4b7b      	ldr	r3, [pc, #492]	; (801225c <_vfiprintf_r+0x244>)
 8012070:	429d      	cmp	r5, r3
 8012072:	d101      	bne.n	8012078 <_vfiprintf_r+0x60>
 8012074:	68b5      	ldr	r5, [r6, #8]
 8012076:	e7df      	b.n	8012038 <_vfiprintf_r+0x20>
 8012078:	4b79      	ldr	r3, [pc, #484]	; (8012260 <_vfiprintf_r+0x248>)
 801207a:	429d      	cmp	r5, r3
 801207c:	bf08      	it	eq
 801207e:	68f5      	ldreq	r5, [r6, #12]
 8012080:	e7da      	b.n	8012038 <_vfiprintf_r+0x20>
 8012082:	89ab      	ldrh	r3, [r5, #12]
 8012084:	0598      	lsls	r0, r3, #22
 8012086:	d4ed      	bmi.n	8012064 <_vfiprintf_r+0x4c>
 8012088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801208a:	f7ff ff69 	bl	8011f60 <__retarget_lock_release_recursive>
 801208e:	e7e9      	b.n	8012064 <_vfiprintf_r+0x4c>
 8012090:	2300      	movs	r3, #0
 8012092:	9309      	str	r3, [sp, #36]	; 0x24
 8012094:	2320      	movs	r3, #32
 8012096:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801209a:	2330      	movs	r3, #48	; 0x30
 801209c:	f04f 0901 	mov.w	r9, #1
 80120a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80120a4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8012264 <_vfiprintf_r+0x24c>
 80120a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120ac:	4623      	mov	r3, r4
 80120ae:	469a      	mov	sl, r3
 80120b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120b4:	b10a      	cbz	r2, 80120ba <_vfiprintf_r+0xa2>
 80120b6:	2a25      	cmp	r2, #37	; 0x25
 80120b8:	d1f9      	bne.n	80120ae <_vfiprintf_r+0x96>
 80120ba:	ebba 0b04 	subs.w	fp, sl, r4
 80120be:	d00b      	beq.n	80120d8 <_vfiprintf_r+0xc0>
 80120c0:	465b      	mov	r3, fp
 80120c2:	4622      	mov	r2, r4
 80120c4:	4629      	mov	r1, r5
 80120c6:	4630      	mov	r0, r6
 80120c8:	f7ff ff94 	bl	8011ff4 <__sfputs_r>
 80120cc:	3001      	adds	r0, #1
 80120ce:	f000 80aa 	beq.w	8012226 <_vfiprintf_r+0x20e>
 80120d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120d4:	445a      	add	r2, fp
 80120d6:	9209      	str	r2, [sp, #36]	; 0x24
 80120d8:	f89a 3000 	ldrb.w	r3, [sl]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	f000 80a2 	beq.w	8012226 <_vfiprintf_r+0x20e>
 80120e2:	2300      	movs	r3, #0
 80120e4:	f04f 32ff 	mov.w	r2, #4294967295
 80120e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120ec:	f10a 0a01 	add.w	sl, sl, #1
 80120f0:	9304      	str	r3, [sp, #16]
 80120f2:	9307      	str	r3, [sp, #28]
 80120f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120f8:	931a      	str	r3, [sp, #104]	; 0x68
 80120fa:	4654      	mov	r4, sl
 80120fc:	2205      	movs	r2, #5
 80120fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012102:	4858      	ldr	r0, [pc, #352]	; (8012264 <_vfiprintf_r+0x24c>)
 8012104:	f7ff f9ce 	bl	80114a4 <memchr>
 8012108:	9a04      	ldr	r2, [sp, #16]
 801210a:	b9d8      	cbnz	r0, 8012144 <_vfiprintf_r+0x12c>
 801210c:	06d1      	lsls	r1, r2, #27
 801210e:	bf44      	itt	mi
 8012110:	2320      	movmi	r3, #32
 8012112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012116:	0713      	lsls	r3, r2, #28
 8012118:	bf44      	itt	mi
 801211a:	232b      	movmi	r3, #43	; 0x2b
 801211c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012120:	f89a 3000 	ldrb.w	r3, [sl]
 8012124:	2b2a      	cmp	r3, #42	; 0x2a
 8012126:	d015      	beq.n	8012154 <_vfiprintf_r+0x13c>
 8012128:	4654      	mov	r4, sl
 801212a:	2000      	movs	r0, #0
 801212c:	f04f 0c0a 	mov.w	ip, #10
 8012130:	9a07      	ldr	r2, [sp, #28]
 8012132:	4621      	mov	r1, r4
 8012134:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012138:	3b30      	subs	r3, #48	; 0x30
 801213a:	2b09      	cmp	r3, #9
 801213c:	d94e      	bls.n	80121dc <_vfiprintf_r+0x1c4>
 801213e:	b1b0      	cbz	r0, 801216e <_vfiprintf_r+0x156>
 8012140:	9207      	str	r2, [sp, #28]
 8012142:	e014      	b.n	801216e <_vfiprintf_r+0x156>
 8012144:	eba0 0308 	sub.w	r3, r0, r8
 8012148:	fa09 f303 	lsl.w	r3, r9, r3
 801214c:	4313      	orrs	r3, r2
 801214e:	46a2      	mov	sl, r4
 8012150:	9304      	str	r3, [sp, #16]
 8012152:	e7d2      	b.n	80120fa <_vfiprintf_r+0xe2>
 8012154:	9b03      	ldr	r3, [sp, #12]
 8012156:	1d19      	adds	r1, r3, #4
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	9103      	str	r1, [sp, #12]
 801215c:	2b00      	cmp	r3, #0
 801215e:	bfbb      	ittet	lt
 8012160:	425b      	neglt	r3, r3
 8012162:	f042 0202 	orrlt.w	r2, r2, #2
 8012166:	9307      	strge	r3, [sp, #28]
 8012168:	9307      	strlt	r3, [sp, #28]
 801216a:	bfb8      	it	lt
 801216c:	9204      	strlt	r2, [sp, #16]
 801216e:	7823      	ldrb	r3, [r4, #0]
 8012170:	2b2e      	cmp	r3, #46	; 0x2e
 8012172:	d10c      	bne.n	801218e <_vfiprintf_r+0x176>
 8012174:	7863      	ldrb	r3, [r4, #1]
 8012176:	2b2a      	cmp	r3, #42	; 0x2a
 8012178:	d135      	bne.n	80121e6 <_vfiprintf_r+0x1ce>
 801217a:	9b03      	ldr	r3, [sp, #12]
 801217c:	3402      	adds	r4, #2
 801217e:	1d1a      	adds	r2, r3, #4
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	9203      	str	r2, [sp, #12]
 8012184:	2b00      	cmp	r3, #0
 8012186:	bfb8      	it	lt
 8012188:	f04f 33ff 	movlt.w	r3, #4294967295
 801218c:	9305      	str	r3, [sp, #20]
 801218e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012274 <_vfiprintf_r+0x25c>
 8012192:	2203      	movs	r2, #3
 8012194:	4650      	mov	r0, sl
 8012196:	7821      	ldrb	r1, [r4, #0]
 8012198:	f7ff f984 	bl	80114a4 <memchr>
 801219c:	b140      	cbz	r0, 80121b0 <_vfiprintf_r+0x198>
 801219e:	2340      	movs	r3, #64	; 0x40
 80121a0:	eba0 000a 	sub.w	r0, r0, sl
 80121a4:	fa03 f000 	lsl.w	r0, r3, r0
 80121a8:	9b04      	ldr	r3, [sp, #16]
 80121aa:	3401      	adds	r4, #1
 80121ac:	4303      	orrs	r3, r0
 80121ae:	9304      	str	r3, [sp, #16]
 80121b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121b4:	2206      	movs	r2, #6
 80121b6:	482c      	ldr	r0, [pc, #176]	; (8012268 <_vfiprintf_r+0x250>)
 80121b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121bc:	f7ff f972 	bl	80114a4 <memchr>
 80121c0:	2800      	cmp	r0, #0
 80121c2:	d03f      	beq.n	8012244 <_vfiprintf_r+0x22c>
 80121c4:	4b29      	ldr	r3, [pc, #164]	; (801226c <_vfiprintf_r+0x254>)
 80121c6:	bb1b      	cbnz	r3, 8012210 <_vfiprintf_r+0x1f8>
 80121c8:	9b03      	ldr	r3, [sp, #12]
 80121ca:	3307      	adds	r3, #7
 80121cc:	f023 0307 	bic.w	r3, r3, #7
 80121d0:	3308      	adds	r3, #8
 80121d2:	9303      	str	r3, [sp, #12]
 80121d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121d6:	443b      	add	r3, r7
 80121d8:	9309      	str	r3, [sp, #36]	; 0x24
 80121da:	e767      	b.n	80120ac <_vfiprintf_r+0x94>
 80121dc:	460c      	mov	r4, r1
 80121de:	2001      	movs	r0, #1
 80121e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80121e4:	e7a5      	b.n	8012132 <_vfiprintf_r+0x11a>
 80121e6:	2300      	movs	r3, #0
 80121e8:	f04f 0c0a 	mov.w	ip, #10
 80121ec:	4619      	mov	r1, r3
 80121ee:	3401      	adds	r4, #1
 80121f0:	9305      	str	r3, [sp, #20]
 80121f2:	4620      	mov	r0, r4
 80121f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121f8:	3a30      	subs	r2, #48	; 0x30
 80121fa:	2a09      	cmp	r2, #9
 80121fc:	d903      	bls.n	8012206 <_vfiprintf_r+0x1ee>
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d0c5      	beq.n	801218e <_vfiprintf_r+0x176>
 8012202:	9105      	str	r1, [sp, #20]
 8012204:	e7c3      	b.n	801218e <_vfiprintf_r+0x176>
 8012206:	4604      	mov	r4, r0
 8012208:	2301      	movs	r3, #1
 801220a:	fb0c 2101 	mla	r1, ip, r1, r2
 801220e:	e7f0      	b.n	80121f2 <_vfiprintf_r+0x1da>
 8012210:	ab03      	add	r3, sp, #12
 8012212:	9300      	str	r3, [sp, #0]
 8012214:	462a      	mov	r2, r5
 8012216:	4630      	mov	r0, r6
 8012218:	4b15      	ldr	r3, [pc, #84]	; (8012270 <_vfiprintf_r+0x258>)
 801221a:	a904      	add	r1, sp, #16
 801221c:	f7fd fec6 	bl	800ffac <_printf_float>
 8012220:	4607      	mov	r7, r0
 8012222:	1c78      	adds	r0, r7, #1
 8012224:	d1d6      	bne.n	80121d4 <_vfiprintf_r+0x1bc>
 8012226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012228:	07d9      	lsls	r1, r3, #31
 801222a:	d405      	bmi.n	8012238 <_vfiprintf_r+0x220>
 801222c:	89ab      	ldrh	r3, [r5, #12]
 801222e:	059a      	lsls	r2, r3, #22
 8012230:	d402      	bmi.n	8012238 <_vfiprintf_r+0x220>
 8012232:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012234:	f7ff fe94 	bl	8011f60 <__retarget_lock_release_recursive>
 8012238:	89ab      	ldrh	r3, [r5, #12]
 801223a:	065b      	lsls	r3, r3, #25
 801223c:	f53f af12 	bmi.w	8012064 <_vfiprintf_r+0x4c>
 8012240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012242:	e711      	b.n	8012068 <_vfiprintf_r+0x50>
 8012244:	ab03      	add	r3, sp, #12
 8012246:	9300      	str	r3, [sp, #0]
 8012248:	462a      	mov	r2, r5
 801224a:	4630      	mov	r0, r6
 801224c:	4b08      	ldr	r3, [pc, #32]	; (8012270 <_vfiprintf_r+0x258>)
 801224e:	a904      	add	r1, sp, #16
 8012250:	f7fe f948 	bl	80104e4 <_printf_i>
 8012254:	e7e4      	b.n	8012220 <_vfiprintf_r+0x208>
 8012256:	bf00      	nop
 8012258:	08013d04 	.word	0x08013d04
 801225c:	08013d24 	.word	0x08013d24
 8012260:	08013ce4 	.word	0x08013ce4
 8012264:	08013b8c 	.word	0x08013b8c
 8012268:	08013b96 	.word	0x08013b96
 801226c:	0800ffad 	.word	0x0800ffad
 8012270:	08011ff5 	.word	0x08011ff5
 8012274:	08013b92 	.word	0x08013b92

08012278 <__swbuf_r>:
 8012278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801227a:	460e      	mov	r6, r1
 801227c:	4614      	mov	r4, r2
 801227e:	4605      	mov	r5, r0
 8012280:	b118      	cbz	r0, 801228a <__swbuf_r+0x12>
 8012282:	6983      	ldr	r3, [r0, #24]
 8012284:	b90b      	cbnz	r3, 801228a <__swbuf_r+0x12>
 8012286:	f000 f9e7 	bl	8012658 <__sinit>
 801228a:	4b21      	ldr	r3, [pc, #132]	; (8012310 <__swbuf_r+0x98>)
 801228c:	429c      	cmp	r4, r3
 801228e:	d12b      	bne.n	80122e8 <__swbuf_r+0x70>
 8012290:	686c      	ldr	r4, [r5, #4]
 8012292:	69a3      	ldr	r3, [r4, #24]
 8012294:	60a3      	str	r3, [r4, #8]
 8012296:	89a3      	ldrh	r3, [r4, #12]
 8012298:	071a      	lsls	r2, r3, #28
 801229a:	d52f      	bpl.n	80122fc <__swbuf_r+0x84>
 801229c:	6923      	ldr	r3, [r4, #16]
 801229e:	b36b      	cbz	r3, 80122fc <__swbuf_r+0x84>
 80122a0:	6923      	ldr	r3, [r4, #16]
 80122a2:	6820      	ldr	r0, [r4, #0]
 80122a4:	b2f6      	uxtb	r6, r6
 80122a6:	1ac0      	subs	r0, r0, r3
 80122a8:	6963      	ldr	r3, [r4, #20]
 80122aa:	4637      	mov	r7, r6
 80122ac:	4283      	cmp	r3, r0
 80122ae:	dc04      	bgt.n	80122ba <__swbuf_r+0x42>
 80122b0:	4621      	mov	r1, r4
 80122b2:	4628      	mov	r0, r5
 80122b4:	f000 f93c 	bl	8012530 <_fflush_r>
 80122b8:	bb30      	cbnz	r0, 8012308 <__swbuf_r+0x90>
 80122ba:	68a3      	ldr	r3, [r4, #8]
 80122bc:	3001      	adds	r0, #1
 80122be:	3b01      	subs	r3, #1
 80122c0:	60a3      	str	r3, [r4, #8]
 80122c2:	6823      	ldr	r3, [r4, #0]
 80122c4:	1c5a      	adds	r2, r3, #1
 80122c6:	6022      	str	r2, [r4, #0]
 80122c8:	701e      	strb	r6, [r3, #0]
 80122ca:	6963      	ldr	r3, [r4, #20]
 80122cc:	4283      	cmp	r3, r0
 80122ce:	d004      	beq.n	80122da <__swbuf_r+0x62>
 80122d0:	89a3      	ldrh	r3, [r4, #12]
 80122d2:	07db      	lsls	r3, r3, #31
 80122d4:	d506      	bpl.n	80122e4 <__swbuf_r+0x6c>
 80122d6:	2e0a      	cmp	r6, #10
 80122d8:	d104      	bne.n	80122e4 <__swbuf_r+0x6c>
 80122da:	4621      	mov	r1, r4
 80122dc:	4628      	mov	r0, r5
 80122de:	f000 f927 	bl	8012530 <_fflush_r>
 80122e2:	b988      	cbnz	r0, 8012308 <__swbuf_r+0x90>
 80122e4:	4638      	mov	r0, r7
 80122e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122e8:	4b0a      	ldr	r3, [pc, #40]	; (8012314 <__swbuf_r+0x9c>)
 80122ea:	429c      	cmp	r4, r3
 80122ec:	d101      	bne.n	80122f2 <__swbuf_r+0x7a>
 80122ee:	68ac      	ldr	r4, [r5, #8]
 80122f0:	e7cf      	b.n	8012292 <__swbuf_r+0x1a>
 80122f2:	4b09      	ldr	r3, [pc, #36]	; (8012318 <__swbuf_r+0xa0>)
 80122f4:	429c      	cmp	r4, r3
 80122f6:	bf08      	it	eq
 80122f8:	68ec      	ldreq	r4, [r5, #12]
 80122fa:	e7ca      	b.n	8012292 <__swbuf_r+0x1a>
 80122fc:	4621      	mov	r1, r4
 80122fe:	4628      	mov	r0, r5
 8012300:	f000 f81a 	bl	8012338 <__swsetup_r>
 8012304:	2800      	cmp	r0, #0
 8012306:	d0cb      	beq.n	80122a0 <__swbuf_r+0x28>
 8012308:	f04f 37ff 	mov.w	r7, #4294967295
 801230c:	e7ea      	b.n	80122e4 <__swbuf_r+0x6c>
 801230e:	bf00      	nop
 8012310:	08013d04 	.word	0x08013d04
 8012314:	08013d24 	.word	0x08013d24
 8012318:	08013ce4 	.word	0x08013ce4

0801231c <__ascii_wctomb>:
 801231c:	4603      	mov	r3, r0
 801231e:	4608      	mov	r0, r1
 8012320:	b141      	cbz	r1, 8012334 <__ascii_wctomb+0x18>
 8012322:	2aff      	cmp	r2, #255	; 0xff
 8012324:	d904      	bls.n	8012330 <__ascii_wctomb+0x14>
 8012326:	228a      	movs	r2, #138	; 0x8a
 8012328:	f04f 30ff 	mov.w	r0, #4294967295
 801232c:	601a      	str	r2, [r3, #0]
 801232e:	4770      	bx	lr
 8012330:	2001      	movs	r0, #1
 8012332:	700a      	strb	r2, [r1, #0]
 8012334:	4770      	bx	lr
	...

08012338 <__swsetup_r>:
 8012338:	4b32      	ldr	r3, [pc, #200]	; (8012404 <__swsetup_r+0xcc>)
 801233a:	b570      	push	{r4, r5, r6, lr}
 801233c:	681d      	ldr	r5, [r3, #0]
 801233e:	4606      	mov	r6, r0
 8012340:	460c      	mov	r4, r1
 8012342:	b125      	cbz	r5, 801234e <__swsetup_r+0x16>
 8012344:	69ab      	ldr	r3, [r5, #24]
 8012346:	b913      	cbnz	r3, 801234e <__swsetup_r+0x16>
 8012348:	4628      	mov	r0, r5
 801234a:	f000 f985 	bl	8012658 <__sinit>
 801234e:	4b2e      	ldr	r3, [pc, #184]	; (8012408 <__swsetup_r+0xd0>)
 8012350:	429c      	cmp	r4, r3
 8012352:	d10f      	bne.n	8012374 <__swsetup_r+0x3c>
 8012354:	686c      	ldr	r4, [r5, #4]
 8012356:	89a3      	ldrh	r3, [r4, #12]
 8012358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801235c:	0719      	lsls	r1, r3, #28
 801235e:	d42c      	bmi.n	80123ba <__swsetup_r+0x82>
 8012360:	06dd      	lsls	r5, r3, #27
 8012362:	d411      	bmi.n	8012388 <__swsetup_r+0x50>
 8012364:	2309      	movs	r3, #9
 8012366:	6033      	str	r3, [r6, #0]
 8012368:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801236c:	f04f 30ff 	mov.w	r0, #4294967295
 8012370:	81a3      	strh	r3, [r4, #12]
 8012372:	e03e      	b.n	80123f2 <__swsetup_r+0xba>
 8012374:	4b25      	ldr	r3, [pc, #148]	; (801240c <__swsetup_r+0xd4>)
 8012376:	429c      	cmp	r4, r3
 8012378:	d101      	bne.n	801237e <__swsetup_r+0x46>
 801237a:	68ac      	ldr	r4, [r5, #8]
 801237c:	e7eb      	b.n	8012356 <__swsetup_r+0x1e>
 801237e:	4b24      	ldr	r3, [pc, #144]	; (8012410 <__swsetup_r+0xd8>)
 8012380:	429c      	cmp	r4, r3
 8012382:	bf08      	it	eq
 8012384:	68ec      	ldreq	r4, [r5, #12]
 8012386:	e7e6      	b.n	8012356 <__swsetup_r+0x1e>
 8012388:	0758      	lsls	r0, r3, #29
 801238a:	d512      	bpl.n	80123b2 <__swsetup_r+0x7a>
 801238c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801238e:	b141      	cbz	r1, 80123a2 <__swsetup_r+0x6a>
 8012390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012394:	4299      	cmp	r1, r3
 8012396:	d002      	beq.n	801239e <__swsetup_r+0x66>
 8012398:	4630      	mov	r0, r6
 801239a:	f7fd fcc3 	bl	800fd24 <_free_r>
 801239e:	2300      	movs	r3, #0
 80123a0:	6363      	str	r3, [r4, #52]	; 0x34
 80123a2:	89a3      	ldrh	r3, [r4, #12]
 80123a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80123a8:	81a3      	strh	r3, [r4, #12]
 80123aa:	2300      	movs	r3, #0
 80123ac:	6063      	str	r3, [r4, #4]
 80123ae:	6923      	ldr	r3, [r4, #16]
 80123b0:	6023      	str	r3, [r4, #0]
 80123b2:	89a3      	ldrh	r3, [r4, #12]
 80123b4:	f043 0308 	orr.w	r3, r3, #8
 80123b8:	81a3      	strh	r3, [r4, #12]
 80123ba:	6923      	ldr	r3, [r4, #16]
 80123bc:	b94b      	cbnz	r3, 80123d2 <__swsetup_r+0x9a>
 80123be:	89a3      	ldrh	r3, [r4, #12]
 80123c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80123c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123c8:	d003      	beq.n	80123d2 <__swsetup_r+0x9a>
 80123ca:	4621      	mov	r1, r4
 80123cc:	4630      	mov	r0, r6
 80123ce:	f000 fa05 	bl	80127dc <__smakebuf_r>
 80123d2:	89a0      	ldrh	r0, [r4, #12]
 80123d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80123d8:	f010 0301 	ands.w	r3, r0, #1
 80123dc:	d00a      	beq.n	80123f4 <__swsetup_r+0xbc>
 80123de:	2300      	movs	r3, #0
 80123e0:	60a3      	str	r3, [r4, #8]
 80123e2:	6963      	ldr	r3, [r4, #20]
 80123e4:	425b      	negs	r3, r3
 80123e6:	61a3      	str	r3, [r4, #24]
 80123e8:	6923      	ldr	r3, [r4, #16]
 80123ea:	b943      	cbnz	r3, 80123fe <__swsetup_r+0xc6>
 80123ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80123f0:	d1ba      	bne.n	8012368 <__swsetup_r+0x30>
 80123f2:	bd70      	pop	{r4, r5, r6, pc}
 80123f4:	0781      	lsls	r1, r0, #30
 80123f6:	bf58      	it	pl
 80123f8:	6963      	ldrpl	r3, [r4, #20]
 80123fa:	60a3      	str	r3, [r4, #8]
 80123fc:	e7f4      	b.n	80123e8 <__swsetup_r+0xb0>
 80123fe:	2000      	movs	r0, #0
 8012400:	e7f7      	b.n	80123f2 <__swsetup_r+0xba>
 8012402:	bf00      	nop
 8012404:	200001bc 	.word	0x200001bc
 8012408:	08013d04 	.word	0x08013d04
 801240c:	08013d24 	.word	0x08013d24
 8012410:	08013ce4 	.word	0x08013ce4

08012414 <abort>:
 8012414:	2006      	movs	r0, #6
 8012416:	b508      	push	{r3, lr}
 8012418:	f000 fa48 	bl	80128ac <raise>
 801241c:	2001      	movs	r0, #1
 801241e:	f7f3 fbc0 	bl	8005ba2 <_exit>
	...

08012424 <__sflush_r>:
 8012424:	898a      	ldrh	r2, [r1, #12]
 8012426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801242a:	4605      	mov	r5, r0
 801242c:	0710      	lsls	r0, r2, #28
 801242e:	460c      	mov	r4, r1
 8012430:	d458      	bmi.n	80124e4 <__sflush_r+0xc0>
 8012432:	684b      	ldr	r3, [r1, #4]
 8012434:	2b00      	cmp	r3, #0
 8012436:	dc05      	bgt.n	8012444 <__sflush_r+0x20>
 8012438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801243a:	2b00      	cmp	r3, #0
 801243c:	dc02      	bgt.n	8012444 <__sflush_r+0x20>
 801243e:	2000      	movs	r0, #0
 8012440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012446:	2e00      	cmp	r6, #0
 8012448:	d0f9      	beq.n	801243e <__sflush_r+0x1a>
 801244a:	2300      	movs	r3, #0
 801244c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012450:	682f      	ldr	r7, [r5, #0]
 8012452:	602b      	str	r3, [r5, #0]
 8012454:	d032      	beq.n	80124bc <__sflush_r+0x98>
 8012456:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012458:	89a3      	ldrh	r3, [r4, #12]
 801245a:	075a      	lsls	r2, r3, #29
 801245c:	d505      	bpl.n	801246a <__sflush_r+0x46>
 801245e:	6863      	ldr	r3, [r4, #4]
 8012460:	1ac0      	subs	r0, r0, r3
 8012462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012464:	b10b      	cbz	r3, 801246a <__sflush_r+0x46>
 8012466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012468:	1ac0      	subs	r0, r0, r3
 801246a:	2300      	movs	r3, #0
 801246c:	4602      	mov	r2, r0
 801246e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012470:	4628      	mov	r0, r5
 8012472:	6a21      	ldr	r1, [r4, #32]
 8012474:	47b0      	blx	r6
 8012476:	1c43      	adds	r3, r0, #1
 8012478:	89a3      	ldrh	r3, [r4, #12]
 801247a:	d106      	bne.n	801248a <__sflush_r+0x66>
 801247c:	6829      	ldr	r1, [r5, #0]
 801247e:	291d      	cmp	r1, #29
 8012480:	d82c      	bhi.n	80124dc <__sflush_r+0xb8>
 8012482:	4a2a      	ldr	r2, [pc, #168]	; (801252c <__sflush_r+0x108>)
 8012484:	40ca      	lsrs	r2, r1
 8012486:	07d6      	lsls	r6, r2, #31
 8012488:	d528      	bpl.n	80124dc <__sflush_r+0xb8>
 801248a:	2200      	movs	r2, #0
 801248c:	6062      	str	r2, [r4, #4]
 801248e:	6922      	ldr	r2, [r4, #16]
 8012490:	04d9      	lsls	r1, r3, #19
 8012492:	6022      	str	r2, [r4, #0]
 8012494:	d504      	bpl.n	80124a0 <__sflush_r+0x7c>
 8012496:	1c42      	adds	r2, r0, #1
 8012498:	d101      	bne.n	801249e <__sflush_r+0x7a>
 801249a:	682b      	ldr	r3, [r5, #0]
 801249c:	b903      	cbnz	r3, 80124a0 <__sflush_r+0x7c>
 801249e:	6560      	str	r0, [r4, #84]	; 0x54
 80124a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80124a2:	602f      	str	r7, [r5, #0]
 80124a4:	2900      	cmp	r1, #0
 80124a6:	d0ca      	beq.n	801243e <__sflush_r+0x1a>
 80124a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80124ac:	4299      	cmp	r1, r3
 80124ae:	d002      	beq.n	80124b6 <__sflush_r+0x92>
 80124b0:	4628      	mov	r0, r5
 80124b2:	f7fd fc37 	bl	800fd24 <_free_r>
 80124b6:	2000      	movs	r0, #0
 80124b8:	6360      	str	r0, [r4, #52]	; 0x34
 80124ba:	e7c1      	b.n	8012440 <__sflush_r+0x1c>
 80124bc:	6a21      	ldr	r1, [r4, #32]
 80124be:	2301      	movs	r3, #1
 80124c0:	4628      	mov	r0, r5
 80124c2:	47b0      	blx	r6
 80124c4:	1c41      	adds	r1, r0, #1
 80124c6:	d1c7      	bne.n	8012458 <__sflush_r+0x34>
 80124c8:	682b      	ldr	r3, [r5, #0]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d0c4      	beq.n	8012458 <__sflush_r+0x34>
 80124ce:	2b1d      	cmp	r3, #29
 80124d0:	d001      	beq.n	80124d6 <__sflush_r+0xb2>
 80124d2:	2b16      	cmp	r3, #22
 80124d4:	d101      	bne.n	80124da <__sflush_r+0xb6>
 80124d6:	602f      	str	r7, [r5, #0]
 80124d8:	e7b1      	b.n	801243e <__sflush_r+0x1a>
 80124da:	89a3      	ldrh	r3, [r4, #12]
 80124dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124e0:	81a3      	strh	r3, [r4, #12]
 80124e2:	e7ad      	b.n	8012440 <__sflush_r+0x1c>
 80124e4:	690f      	ldr	r7, [r1, #16]
 80124e6:	2f00      	cmp	r7, #0
 80124e8:	d0a9      	beq.n	801243e <__sflush_r+0x1a>
 80124ea:	0793      	lsls	r3, r2, #30
 80124ec:	bf18      	it	ne
 80124ee:	2300      	movne	r3, #0
 80124f0:	680e      	ldr	r6, [r1, #0]
 80124f2:	bf08      	it	eq
 80124f4:	694b      	ldreq	r3, [r1, #20]
 80124f6:	eba6 0807 	sub.w	r8, r6, r7
 80124fa:	600f      	str	r7, [r1, #0]
 80124fc:	608b      	str	r3, [r1, #8]
 80124fe:	f1b8 0f00 	cmp.w	r8, #0
 8012502:	dd9c      	ble.n	801243e <__sflush_r+0x1a>
 8012504:	4643      	mov	r3, r8
 8012506:	463a      	mov	r2, r7
 8012508:	4628      	mov	r0, r5
 801250a:	6a21      	ldr	r1, [r4, #32]
 801250c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801250e:	47b0      	blx	r6
 8012510:	2800      	cmp	r0, #0
 8012512:	dc06      	bgt.n	8012522 <__sflush_r+0xfe>
 8012514:	89a3      	ldrh	r3, [r4, #12]
 8012516:	f04f 30ff 	mov.w	r0, #4294967295
 801251a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801251e:	81a3      	strh	r3, [r4, #12]
 8012520:	e78e      	b.n	8012440 <__sflush_r+0x1c>
 8012522:	4407      	add	r7, r0
 8012524:	eba8 0800 	sub.w	r8, r8, r0
 8012528:	e7e9      	b.n	80124fe <__sflush_r+0xda>
 801252a:	bf00      	nop
 801252c:	20400001 	.word	0x20400001

08012530 <_fflush_r>:
 8012530:	b538      	push	{r3, r4, r5, lr}
 8012532:	690b      	ldr	r3, [r1, #16]
 8012534:	4605      	mov	r5, r0
 8012536:	460c      	mov	r4, r1
 8012538:	b913      	cbnz	r3, 8012540 <_fflush_r+0x10>
 801253a:	2500      	movs	r5, #0
 801253c:	4628      	mov	r0, r5
 801253e:	bd38      	pop	{r3, r4, r5, pc}
 8012540:	b118      	cbz	r0, 801254a <_fflush_r+0x1a>
 8012542:	6983      	ldr	r3, [r0, #24]
 8012544:	b90b      	cbnz	r3, 801254a <_fflush_r+0x1a>
 8012546:	f000 f887 	bl	8012658 <__sinit>
 801254a:	4b14      	ldr	r3, [pc, #80]	; (801259c <_fflush_r+0x6c>)
 801254c:	429c      	cmp	r4, r3
 801254e:	d11b      	bne.n	8012588 <_fflush_r+0x58>
 8012550:	686c      	ldr	r4, [r5, #4]
 8012552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d0ef      	beq.n	801253a <_fflush_r+0xa>
 801255a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801255c:	07d0      	lsls	r0, r2, #31
 801255e:	d404      	bmi.n	801256a <_fflush_r+0x3a>
 8012560:	0599      	lsls	r1, r3, #22
 8012562:	d402      	bmi.n	801256a <_fflush_r+0x3a>
 8012564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012566:	f7ff fcfa 	bl	8011f5e <__retarget_lock_acquire_recursive>
 801256a:	4628      	mov	r0, r5
 801256c:	4621      	mov	r1, r4
 801256e:	f7ff ff59 	bl	8012424 <__sflush_r>
 8012572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012574:	4605      	mov	r5, r0
 8012576:	07da      	lsls	r2, r3, #31
 8012578:	d4e0      	bmi.n	801253c <_fflush_r+0xc>
 801257a:	89a3      	ldrh	r3, [r4, #12]
 801257c:	059b      	lsls	r3, r3, #22
 801257e:	d4dd      	bmi.n	801253c <_fflush_r+0xc>
 8012580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012582:	f7ff fced 	bl	8011f60 <__retarget_lock_release_recursive>
 8012586:	e7d9      	b.n	801253c <_fflush_r+0xc>
 8012588:	4b05      	ldr	r3, [pc, #20]	; (80125a0 <_fflush_r+0x70>)
 801258a:	429c      	cmp	r4, r3
 801258c:	d101      	bne.n	8012592 <_fflush_r+0x62>
 801258e:	68ac      	ldr	r4, [r5, #8]
 8012590:	e7df      	b.n	8012552 <_fflush_r+0x22>
 8012592:	4b04      	ldr	r3, [pc, #16]	; (80125a4 <_fflush_r+0x74>)
 8012594:	429c      	cmp	r4, r3
 8012596:	bf08      	it	eq
 8012598:	68ec      	ldreq	r4, [r5, #12]
 801259a:	e7da      	b.n	8012552 <_fflush_r+0x22>
 801259c:	08013d04 	.word	0x08013d04
 80125a0:	08013d24 	.word	0x08013d24
 80125a4:	08013ce4 	.word	0x08013ce4

080125a8 <std>:
 80125a8:	2300      	movs	r3, #0
 80125aa:	b510      	push	{r4, lr}
 80125ac:	4604      	mov	r4, r0
 80125ae:	e9c0 3300 	strd	r3, r3, [r0]
 80125b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80125b6:	6083      	str	r3, [r0, #8]
 80125b8:	8181      	strh	r1, [r0, #12]
 80125ba:	6643      	str	r3, [r0, #100]	; 0x64
 80125bc:	81c2      	strh	r2, [r0, #14]
 80125be:	6183      	str	r3, [r0, #24]
 80125c0:	4619      	mov	r1, r3
 80125c2:	2208      	movs	r2, #8
 80125c4:	305c      	adds	r0, #92	; 0x5c
 80125c6:	f7fd fba5 	bl	800fd14 <memset>
 80125ca:	4b05      	ldr	r3, [pc, #20]	; (80125e0 <std+0x38>)
 80125cc:	6224      	str	r4, [r4, #32]
 80125ce:	6263      	str	r3, [r4, #36]	; 0x24
 80125d0:	4b04      	ldr	r3, [pc, #16]	; (80125e4 <std+0x3c>)
 80125d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80125d4:	4b04      	ldr	r3, [pc, #16]	; (80125e8 <std+0x40>)
 80125d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80125d8:	4b04      	ldr	r3, [pc, #16]	; (80125ec <std+0x44>)
 80125da:	6323      	str	r3, [r4, #48]	; 0x30
 80125dc:	bd10      	pop	{r4, pc}
 80125de:	bf00      	nop
 80125e0:	080128e5 	.word	0x080128e5
 80125e4:	08012907 	.word	0x08012907
 80125e8:	0801293f 	.word	0x0801293f
 80125ec:	08012963 	.word	0x08012963

080125f0 <_cleanup_r>:
 80125f0:	4901      	ldr	r1, [pc, #4]	; (80125f8 <_cleanup_r+0x8>)
 80125f2:	f000 b8af 	b.w	8012754 <_fwalk_reent>
 80125f6:	bf00      	nop
 80125f8:	08012531 	.word	0x08012531

080125fc <__sfmoreglue>:
 80125fc:	b570      	push	{r4, r5, r6, lr}
 80125fe:	2568      	movs	r5, #104	; 0x68
 8012600:	1e4a      	subs	r2, r1, #1
 8012602:	4355      	muls	r5, r2
 8012604:	460e      	mov	r6, r1
 8012606:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801260a:	f7fd fbd7 	bl	800fdbc <_malloc_r>
 801260e:	4604      	mov	r4, r0
 8012610:	b140      	cbz	r0, 8012624 <__sfmoreglue+0x28>
 8012612:	2100      	movs	r1, #0
 8012614:	e9c0 1600 	strd	r1, r6, [r0]
 8012618:	300c      	adds	r0, #12
 801261a:	60a0      	str	r0, [r4, #8]
 801261c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012620:	f7fd fb78 	bl	800fd14 <memset>
 8012624:	4620      	mov	r0, r4
 8012626:	bd70      	pop	{r4, r5, r6, pc}

08012628 <__sfp_lock_acquire>:
 8012628:	4801      	ldr	r0, [pc, #4]	; (8012630 <__sfp_lock_acquire+0x8>)
 801262a:	f7ff bc98 	b.w	8011f5e <__retarget_lock_acquire_recursive>
 801262e:	bf00      	nop
 8012630:	200020d8 	.word	0x200020d8

08012634 <__sfp_lock_release>:
 8012634:	4801      	ldr	r0, [pc, #4]	; (801263c <__sfp_lock_release+0x8>)
 8012636:	f7ff bc93 	b.w	8011f60 <__retarget_lock_release_recursive>
 801263a:	bf00      	nop
 801263c:	200020d8 	.word	0x200020d8

08012640 <__sinit_lock_acquire>:
 8012640:	4801      	ldr	r0, [pc, #4]	; (8012648 <__sinit_lock_acquire+0x8>)
 8012642:	f7ff bc8c 	b.w	8011f5e <__retarget_lock_acquire_recursive>
 8012646:	bf00      	nop
 8012648:	200020d3 	.word	0x200020d3

0801264c <__sinit_lock_release>:
 801264c:	4801      	ldr	r0, [pc, #4]	; (8012654 <__sinit_lock_release+0x8>)
 801264e:	f7ff bc87 	b.w	8011f60 <__retarget_lock_release_recursive>
 8012652:	bf00      	nop
 8012654:	200020d3 	.word	0x200020d3

08012658 <__sinit>:
 8012658:	b510      	push	{r4, lr}
 801265a:	4604      	mov	r4, r0
 801265c:	f7ff fff0 	bl	8012640 <__sinit_lock_acquire>
 8012660:	69a3      	ldr	r3, [r4, #24]
 8012662:	b11b      	cbz	r3, 801266c <__sinit+0x14>
 8012664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012668:	f7ff bff0 	b.w	801264c <__sinit_lock_release>
 801266c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012670:	6523      	str	r3, [r4, #80]	; 0x50
 8012672:	4b13      	ldr	r3, [pc, #76]	; (80126c0 <__sinit+0x68>)
 8012674:	4a13      	ldr	r2, [pc, #76]	; (80126c4 <__sinit+0x6c>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	62a2      	str	r2, [r4, #40]	; 0x28
 801267a:	42a3      	cmp	r3, r4
 801267c:	bf08      	it	eq
 801267e:	2301      	moveq	r3, #1
 8012680:	4620      	mov	r0, r4
 8012682:	bf08      	it	eq
 8012684:	61a3      	streq	r3, [r4, #24]
 8012686:	f000 f81f 	bl	80126c8 <__sfp>
 801268a:	6060      	str	r0, [r4, #4]
 801268c:	4620      	mov	r0, r4
 801268e:	f000 f81b 	bl	80126c8 <__sfp>
 8012692:	60a0      	str	r0, [r4, #8]
 8012694:	4620      	mov	r0, r4
 8012696:	f000 f817 	bl	80126c8 <__sfp>
 801269a:	2200      	movs	r2, #0
 801269c:	2104      	movs	r1, #4
 801269e:	60e0      	str	r0, [r4, #12]
 80126a0:	6860      	ldr	r0, [r4, #4]
 80126a2:	f7ff ff81 	bl	80125a8 <std>
 80126a6:	2201      	movs	r2, #1
 80126a8:	2109      	movs	r1, #9
 80126aa:	68a0      	ldr	r0, [r4, #8]
 80126ac:	f7ff ff7c 	bl	80125a8 <std>
 80126b0:	2202      	movs	r2, #2
 80126b2:	2112      	movs	r1, #18
 80126b4:	68e0      	ldr	r0, [r4, #12]
 80126b6:	f7ff ff77 	bl	80125a8 <std>
 80126ba:	2301      	movs	r3, #1
 80126bc:	61a3      	str	r3, [r4, #24]
 80126be:	e7d1      	b.n	8012664 <__sinit+0xc>
 80126c0:	08013960 	.word	0x08013960
 80126c4:	080125f1 	.word	0x080125f1

080126c8 <__sfp>:
 80126c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ca:	4607      	mov	r7, r0
 80126cc:	f7ff ffac 	bl	8012628 <__sfp_lock_acquire>
 80126d0:	4b1e      	ldr	r3, [pc, #120]	; (801274c <__sfp+0x84>)
 80126d2:	681e      	ldr	r6, [r3, #0]
 80126d4:	69b3      	ldr	r3, [r6, #24]
 80126d6:	b913      	cbnz	r3, 80126de <__sfp+0x16>
 80126d8:	4630      	mov	r0, r6
 80126da:	f7ff ffbd 	bl	8012658 <__sinit>
 80126de:	3648      	adds	r6, #72	; 0x48
 80126e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80126e4:	3b01      	subs	r3, #1
 80126e6:	d503      	bpl.n	80126f0 <__sfp+0x28>
 80126e8:	6833      	ldr	r3, [r6, #0]
 80126ea:	b30b      	cbz	r3, 8012730 <__sfp+0x68>
 80126ec:	6836      	ldr	r6, [r6, #0]
 80126ee:	e7f7      	b.n	80126e0 <__sfp+0x18>
 80126f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80126f4:	b9d5      	cbnz	r5, 801272c <__sfp+0x64>
 80126f6:	4b16      	ldr	r3, [pc, #88]	; (8012750 <__sfp+0x88>)
 80126f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80126fc:	60e3      	str	r3, [r4, #12]
 80126fe:	6665      	str	r5, [r4, #100]	; 0x64
 8012700:	f7ff fc2c 	bl	8011f5c <__retarget_lock_init_recursive>
 8012704:	f7ff ff96 	bl	8012634 <__sfp_lock_release>
 8012708:	2208      	movs	r2, #8
 801270a:	4629      	mov	r1, r5
 801270c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012714:	6025      	str	r5, [r4, #0]
 8012716:	61a5      	str	r5, [r4, #24]
 8012718:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801271c:	f7fd fafa 	bl	800fd14 <memset>
 8012720:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012724:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012728:	4620      	mov	r0, r4
 801272a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801272c:	3468      	adds	r4, #104	; 0x68
 801272e:	e7d9      	b.n	80126e4 <__sfp+0x1c>
 8012730:	2104      	movs	r1, #4
 8012732:	4638      	mov	r0, r7
 8012734:	f7ff ff62 	bl	80125fc <__sfmoreglue>
 8012738:	4604      	mov	r4, r0
 801273a:	6030      	str	r0, [r6, #0]
 801273c:	2800      	cmp	r0, #0
 801273e:	d1d5      	bne.n	80126ec <__sfp+0x24>
 8012740:	f7ff ff78 	bl	8012634 <__sfp_lock_release>
 8012744:	230c      	movs	r3, #12
 8012746:	603b      	str	r3, [r7, #0]
 8012748:	e7ee      	b.n	8012728 <__sfp+0x60>
 801274a:	bf00      	nop
 801274c:	08013960 	.word	0x08013960
 8012750:	ffff0001 	.word	0xffff0001

08012754 <_fwalk_reent>:
 8012754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012758:	4606      	mov	r6, r0
 801275a:	4688      	mov	r8, r1
 801275c:	2700      	movs	r7, #0
 801275e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012762:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012766:	f1b9 0901 	subs.w	r9, r9, #1
 801276a:	d505      	bpl.n	8012778 <_fwalk_reent+0x24>
 801276c:	6824      	ldr	r4, [r4, #0]
 801276e:	2c00      	cmp	r4, #0
 8012770:	d1f7      	bne.n	8012762 <_fwalk_reent+0xe>
 8012772:	4638      	mov	r0, r7
 8012774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012778:	89ab      	ldrh	r3, [r5, #12]
 801277a:	2b01      	cmp	r3, #1
 801277c:	d907      	bls.n	801278e <_fwalk_reent+0x3a>
 801277e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012782:	3301      	adds	r3, #1
 8012784:	d003      	beq.n	801278e <_fwalk_reent+0x3a>
 8012786:	4629      	mov	r1, r5
 8012788:	4630      	mov	r0, r6
 801278a:	47c0      	blx	r8
 801278c:	4307      	orrs	r7, r0
 801278e:	3568      	adds	r5, #104	; 0x68
 8012790:	e7e9      	b.n	8012766 <_fwalk_reent+0x12>

08012792 <__swhatbuf_r>:
 8012792:	b570      	push	{r4, r5, r6, lr}
 8012794:	460e      	mov	r6, r1
 8012796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801279a:	4614      	mov	r4, r2
 801279c:	2900      	cmp	r1, #0
 801279e:	461d      	mov	r5, r3
 80127a0:	b096      	sub	sp, #88	; 0x58
 80127a2:	da07      	bge.n	80127b4 <__swhatbuf_r+0x22>
 80127a4:	2300      	movs	r3, #0
 80127a6:	602b      	str	r3, [r5, #0]
 80127a8:	89b3      	ldrh	r3, [r6, #12]
 80127aa:	061a      	lsls	r2, r3, #24
 80127ac:	d410      	bmi.n	80127d0 <__swhatbuf_r+0x3e>
 80127ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127b2:	e00e      	b.n	80127d2 <__swhatbuf_r+0x40>
 80127b4:	466a      	mov	r2, sp
 80127b6:	f000 f8fb 	bl	80129b0 <_fstat_r>
 80127ba:	2800      	cmp	r0, #0
 80127bc:	dbf2      	blt.n	80127a4 <__swhatbuf_r+0x12>
 80127be:	9a01      	ldr	r2, [sp, #4]
 80127c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80127c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80127c8:	425a      	negs	r2, r3
 80127ca:	415a      	adcs	r2, r3
 80127cc:	602a      	str	r2, [r5, #0]
 80127ce:	e7ee      	b.n	80127ae <__swhatbuf_r+0x1c>
 80127d0:	2340      	movs	r3, #64	; 0x40
 80127d2:	2000      	movs	r0, #0
 80127d4:	6023      	str	r3, [r4, #0]
 80127d6:	b016      	add	sp, #88	; 0x58
 80127d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080127dc <__smakebuf_r>:
 80127dc:	898b      	ldrh	r3, [r1, #12]
 80127de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80127e0:	079d      	lsls	r5, r3, #30
 80127e2:	4606      	mov	r6, r0
 80127e4:	460c      	mov	r4, r1
 80127e6:	d507      	bpl.n	80127f8 <__smakebuf_r+0x1c>
 80127e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80127ec:	6023      	str	r3, [r4, #0]
 80127ee:	6123      	str	r3, [r4, #16]
 80127f0:	2301      	movs	r3, #1
 80127f2:	6163      	str	r3, [r4, #20]
 80127f4:	b002      	add	sp, #8
 80127f6:	bd70      	pop	{r4, r5, r6, pc}
 80127f8:	466a      	mov	r2, sp
 80127fa:	ab01      	add	r3, sp, #4
 80127fc:	f7ff ffc9 	bl	8012792 <__swhatbuf_r>
 8012800:	9900      	ldr	r1, [sp, #0]
 8012802:	4605      	mov	r5, r0
 8012804:	4630      	mov	r0, r6
 8012806:	f7fd fad9 	bl	800fdbc <_malloc_r>
 801280a:	b948      	cbnz	r0, 8012820 <__smakebuf_r+0x44>
 801280c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012810:	059a      	lsls	r2, r3, #22
 8012812:	d4ef      	bmi.n	80127f4 <__smakebuf_r+0x18>
 8012814:	f023 0303 	bic.w	r3, r3, #3
 8012818:	f043 0302 	orr.w	r3, r3, #2
 801281c:	81a3      	strh	r3, [r4, #12]
 801281e:	e7e3      	b.n	80127e8 <__smakebuf_r+0xc>
 8012820:	4b0d      	ldr	r3, [pc, #52]	; (8012858 <__smakebuf_r+0x7c>)
 8012822:	62b3      	str	r3, [r6, #40]	; 0x28
 8012824:	89a3      	ldrh	r3, [r4, #12]
 8012826:	6020      	str	r0, [r4, #0]
 8012828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801282c:	81a3      	strh	r3, [r4, #12]
 801282e:	9b00      	ldr	r3, [sp, #0]
 8012830:	6120      	str	r0, [r4, #16]
 8012832:	6163      	str	r3, [r4, #20]
 8012834:	9b01      	ldr	r3, [sp, #4]
 8012836:	b15b      	cbz	r3, 8012850 <__smakebuf_r+0x74>
 8012838:	4630      	mov	r0, r6
 801283a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801283e:	f000 f8c9 	bl	80129d4 <_isatty_r>
 8012842:	b128      	cbz	r0, 8012850 <__smakebuf_r+0x74>
 8012844:	89a3      	ldrh	r3, [r4, #12]
 8012846:	f023 0303 	bic.w	r3, r3, #3
 801284a:	f043 0301 	orr.w	r3, r3, #1
 801284e:	81a3      	strh	r3, [r4, #12]
 8012850:	89a0      	ldrh	r0, [r4, #12]
 8012852:	4305      	orrs	r5, r0
 8012854:	81a5      	strh	r5, [r4, #12]
 8012856:	e7cd      	b.n	80127f4 <__smakebuf_r+0x18>
 8012858:	080125f1 	.word	0x080125f1

0801285c <_raise_r>:
 801285c:	291f      	cmp	r1, #31
 801285e:	b538      	push	{r3, r4, r5, lr}
 8012860:	4604      	mov	r4, r0
 8012862:	460d      	mov	r5, r1
 8012864:	d904      	bls.n	8012870 <_raise_r+0x14>
 8012866:	2316      	movs	r3, #22
 8012868:	6003      	str	r3, [r0, #0]
 801286a:	f04f 30ff 	mov.w	r0, #4294967295
 801286e:	bd38      	pop	{r3, r4, r5, pc}
 8012870:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012872:	b112      	cbz	r2, 801287a <_raise_r+0x1e>
 8012874:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012878:	b94b      	cbnz	r3, 801288e <_raise_r+0x32>
 801287a:	4620      	mov	r0, r4
 801287c:	f000 f830 	bl	80128e0 <_getpid_r>
 8012880:	462a      	mov	r2, r5
 8012882:	4601      	mov	r1, r0
 8012884:	4620      	mov	r0, r4
 8012886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801288a:	f000 b817 	b.w	80128bc <_kill_r>
 801288e:	2b01      	cmp	r3, #1
 8012890:	d00a      	beq.n	80128a8 <_raise_r+0x4c>
 8012892:	1c59      	adds	r1, r3, #1
 8012894:	d103      	bne.n	801289e <_raise_r+0x42>
 8012896:	2316      	movs	r3, #22
 8012898:	6003      	str	r3, [r0, #0]
 801289a:	2001      	movs	r0, #1
 801289c:	e7e7      	b.n	801286e <_raise_r+0x12>
 801289e:	2400      	movs	r4, #0
 80128a0:	4628      	mov	r0, r5
 80128a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80128a6:	4798      	blx	r3
 80128a8:	2000      	movs	r0, #0
 80128aa:	e7e0      	b.n	801286e <_raise_r+0x12>

080128ac <raise>:
 80128ac:	4b02      	ldr	r3, [pc, #8]	; (80128b8 <raise+0xc>)
 80128ae:	4601      	mov	r1, r0
 80128b0:	6818      	ldr	r0, [r3, #0]
 80128b2:	f7ff bfd3 	b.w	801285c <_raise_r>
 80128b6:	bf00      	nop
 80128b8:	200001bc 	.word	0x200001bc

080128bc <_kill_r>:
 80128bc:	b538      	push	{r3, r4, r5, lr}
 80128be:	2300      	movs	r3, #0
 80128c0:	4d06      	ldr	r5, [pc, #24]	; (80128dc <_kill_r+0x20>)
 80128c2:	4604      	mov	r4, r0
 80128c4:	4608      	mov	r0, r1
 80128c6:	4611      	mov	r1, r2
 80128c8:	602b      	str	r3, [r5, #0]
 80128ca:	f7f3 f95a 	bl	8005b82 <_kill>
 80128ce:	1c43      	adds	r3, r0, #1
 80128d0:	d102      	bne.n	80128d8 <_kill_r+0x1c>
 80128d2:	682b      	ldr	r3, [r5, #0]
 80128d4:	b103      	cbz	r3, 80128d8 <_kill_r+0x1c>
 80128d6:	6023      	str	r3, [r4, #0]
 80128d8:	bd38      	pop	{r3, r4, r5, pc}
 80128da:	bf00      	nop
 80128dc:	200020cc 	.word	0x200020cc

080128e0 <_getpid_r>:
 80128e0:	f7f3 b948 	b.w	8005b74 <_getpid>

080128e4 <__sread>:
 80128e4:	b510      	push	{r4, lr}
 80128e6:	460c      	mov	r4, r1
 80128e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128ec:	f000 f894 	bl	8012a18 <_read_r>
 80128f0:	2800      	cmp	r0, #0
 80128f2:	bfab      	itete	ge
 80128f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80128f6:	89a3      	ldrhlt	r3, [r4, #12]
 80128f8:	181b      	addge	r3, r3, r0
 80128fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80128fe:	bfac      	ite	ge
 8012900:	6563      	strge	r3, [r4, #84]	; 0x54
 8012902:	81a3      	strhlt	r3, [r4, #12]
 8012904:	bd10      	pop	{r4, pc}

08012906 <__swrite>:
 8012906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801290a:	461f      	mov	r7, r3
 801290c:	898b      	ldrh	r3, [r1, #12]
 801290e:	4605      	mov	r5, r0
 8012910:	05db      	lsls	r3, r3, #23
 8012912:	460c      	mov	r4, r1
 8012914:	4616      	mov	r6, r2
 8012916:	d505      	bpl.n	8012924 <__swrite+0x1e>
 8012918:	2302      	movs	r3, #2
 801291a:	2200      	movs	r2, #0
 801291c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012920:	f000 f868 	bl	80129f4 <_lseek_r>
 8012924:	89a3      	ldrh	r3, [r4, #12]
 8012926:	4632      	mov	r2, r6
 8012928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801292c:	81a3      	strh	r3, [r4, #12]
 801292e:	4628      	mov	r0, r5
 8012930:	463b      	mov	r3, r7
 8012932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801293a:	f000 b817 	b.w	801296c <_write_r>

0801293e <__sseek>:
 801293e:	b510      	push	{r4, lr}
 8012940:	460c      	mov	r4, r1
 8012942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012946:	f000 f855 	bl	80129f4 <_lseek_r>
 801294a:	1c43      	adds	r3, r0, #1
 801294c:	89a3      	ldrh	r3, [r4, #12]
 801294e:	bf15      	itete	ne
 8012950:	6560      	strne	r0, [r4, #84]	; 0x54
 8012952:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012956:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801295a:	81a3      	strheq	r3, [r4, #12]
 801295c:	bf18      	it	ne
 801295e:	81a3      	strhne	r3, [r4, #12]
 8012960:	bd10      	pop	{r4, pc}

08012962 <__sclose>:
 8012962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012966:	f000 b813 	b.w	8012990 <_close_r>
	...

0801296c <_write_r>:
 801296c:	b538      	push	{r3, r4, r5, lr}
 801296e:	4604      	mov	r4, r0
 8012970:	4608      	mov	r0, r1
 8012972:	4611      	mov	r1, r2
 8012974:	2200      	movs	r2, #0
 8012976:	4d05      	ldr	r5, [pc, #20]	; (801298c <_write_r+0x20>)
 8012978:	602a      	str	r2, [r5, #0]
 801297a:	461a      	mov	r2, r3
 801297c:	f7f3 f938 	bl	8005bf0 <_write>
 8012980:	1c43      	adds	r3, r0, #1
 8012982:	d102      	bne.n	801298a <_write_r+0x1e>
 8012984:	682b      	ldr	r3, [r5, #0]
 8012986:	b103      	cbz	r3, 801298a <_write_r+0x1e>
 8012988:	6023      	str	r3, [r4, #0]
 801298a:	bd38      	pop	{r3, r4, r5, pc}
 801298c:	200020cc 	.word	0x200020cc

08012990 <_close_r>:
 8012990:	b538      	push	{r3, r4, r5, lr}
 8012992:	2300      	movs	r3, #0
 8012994:	4d05      	ldr	r5, [pc, #20]	; (80129ac <_close_r+0x1c>)
 8012996:	4604      	mov	r4, r0
 8012998:	4608      	mov	r0, r1
 801299a:	602b      	str	r3, [r5, #0]
 801299c:	f7f3 f944 	bl	8005c28 <_close>
 80129a0:	1c43      	adds	r3, r0, #1
 80129a2:	d102      	bne.n	80129aa <_close_r+0x1a>
 80129a4:	682b      	ldr	r3, [r5, #0]
 80129a6:	b103      	cbz	r3, 80129aa <_close_r+0x1a>
 80129a8:	6023      	str	r3, [r4, #0]
 80129aa:	bd38      	pop	{r3, r4, r5, pc}
 80129ac:	200020cc 	.word	0x200020cc

080129b0 <_fstat_r>:
 80129b0:	b538      	push	{r3, r4, r5, lr}
 80129b2:	2300      	movs	r3, #0
 80129b4:	4d06      	ldr	r5, [pc, #24]	; (80129d0 <_fstat_r+0x20>)
 80129b6:	4604      	mov	r4, r0
 80129b8:	4608      	mov	r0, r1
 80129ba:	4611      	mov	r1, r2
 80129bc:	602b      	str	r3, [r5, #0]
 80129be:	f7f3 f93e 	bl	8005c3e <_fstat>
 80129c2:	1c43      	adds	r3, r0, #1
 80129c4:	d102      	bne.n	80129cc <_fstat_r+0x1c>
 80129c6:	682b      	ldr	r3, [r5, #0]
 80129c8:	b103      	cbz	r3, 80129cc <_fstat_r+0x1c>
 80129ca:	6023      	str	r3, [r4, #0]
 80129cc:	bd38      	pop	{r3, r4, r5, pc}
 80129ce:	bf00      	nop
 80129d0:	200020cc 	.word	0x200020cc

080129d4 <_isatty_r>:
 80129d4:	b538      	push	{r3, r4, r5, lr}
 80129d6:	2300      	movs	r3, #0
 80129d8:	4d05      	ldr	r5, [pc, #20]	; (80129f0 <_isatty_r+0x1c>)
 80129da:	4604      	mov	r4, r0
 80129dc:	4608      	mov	r0, r1
 80129de:	602b      	str	r3, [r5, #0]
 80129e0:	f7f3 f93c 	bl	8005c5c <_isatty>
 80129e4:	1c43      	adds	r3, r0, #1
 80129e6:	d102      	bne.n	80129ee <_isatty_r+0x1a>
 80129e8:	682b      	ldr	r3, [r5, #0]
 80129ea:	b103      	cbz	r3, 80129ee <_isatty_r+0x1a>
 80129ec:	6023      	str	r3, [r4, #0]
 80129ee:	bd38      	pop	{r3, r4, r5, pc}
 80129f0:	200020cc 	.word	0x200020cc

080129f4 <_lseek_r>:
 80129f4:	b538      	push	{r3, r4, r5, lr}
 80129f6:	4604      	mov	r4, r0
 80129f8:	4608      	mov	r0, r1
 80129fa:	4611      	mov	r1, r2
 80129fc:	2200      	movs	r2, #0
 80129fe:	4d05      	ldr	r5, [pc, #20]	; (8012a14 <_lseek_r+0x20>)
 8012a00:	602a      	str	r2, [r5, #0]
 8012a02:	461a      	mov	r2, r3
 8012a04:	f7f3 f934 	bl	8005c70 <_lseek>
 8012a08:	1c43      	adds	r3, r0, #1
 8012a0a:	d102      	bne.n	8012a12 <_lseek_r+0x1e>
 8012a0c:	682b      	ldr	r3, [r5, #0]
 8012a0e:	b103      	cbz	r3, 8012a12 <_lseek_r+0x1e>
 8012a10:	6023      	str	r3, [r4, #0]
 8012a12:	bd38      	pop	{r3, r4, r5, pc}
 8012a14:	200020cc 	.word	0x200020cc

08012a18 <_read_r>:
 8012a18:	b538      	push	{r3, r4, r5, lr}
 8012a1a:	4604      	mov	r4, r0
 8012a1c:	4608      	mov	r0, r1
 8012a1e:	4611      	mov	r1, r2
 8012a20:	2200      	movs	r2, #0
 8012a22:	4d05      	ldr	r5, [pc, #20]	; (8012a38 <_read_r+0x20>)
 8012a24:	602a      	str	r2, [r5, #0]
 8012a26:	461a      	mov	r2, r3
 8012a28:	f7f3 f8c5 	bl	8005bb6 <_read>
 8012a2c:	1c43      	adds	r3, r0, #1
 8012a2e:	d102      	bne.n	8012a36 <_read_r+0x1e>
 8012a30:	682b      	ldr	r3, [r5, #0]
 8012a32:	b103      	cbz	r3, 8012a36 <_read_r+0x1e>
 8012a34:	6023      	str	r3, [r4, #0]
 8012a36:	bd38      	pop	{r3, r4, r5, pc}
 8012a38:	200020cc 	.word	0x200020cc

08012a3c <_init>:
 8012a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a3e:	bf00      	nop
 8012a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a42:	bc08      	pop	{r3}
 8012a44:	469e      	mov	lr, r3
 8012a46:	4770      	bx	lr

08012a48 <_fini>:
 8012a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a4a:	bf00      	nop
 8012a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a4e:	bc08      	pop	{r3}
 8012a50:	469e      	mov	lr, r3
 8012a52:	4770      	bx	lr
