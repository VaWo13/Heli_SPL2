
Heli_SPL2_Firmware_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125d0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012dc  08012758  08012758  00022758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a34  08013a34  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  08013a34  08013a34  00023a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a3c  08013a3c  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08013a3c  08013a3c  00023a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013a48  08013a48  00023a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  08013a4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d48  20000378  08013dc4  00030378  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020c0  08013dc4  000320c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 12 .debug_info   00041d1b  00000000  00000000  000303a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000582e  00000000  00000000  000720bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f60  00000000  00000000  000778f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d90  00000000  00000000  00079850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002901d  00000000  00000000  0007b5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023a31  00000000  00000000  000a45fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd893  00000000  00000000  000c802e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001958c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e08  00000000  00000000  00195914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000378 	.word	0x20000378
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08012740 	.word	0x08012740

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000037c 	.word	0x2000037c
 80001c4:	08012740 	.word	0x08012740

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_frsub>:
 8000be0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	e002      	b.n	8000bec <__addsf3>
 8000be6:	bf00      	nop

08000be8 <__aeabi_fsub>:
 8000be8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bec <__addsf3>:
 8000bec:	0042      	lsls	r2, r0, #1
 8000bee:	bf1f      	itttt	ne
 8000bf0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bf4:	ea92 0f03 	teqne	r2, r3
 8000bf8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c00:	d06a      	beq.n	8000cd8 <__addsf3+0xec>
 8000c02:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c0a:	bfc1      	itttt	gt
 8000c0c:	18d2      	addgt	r2, r2, r3
 8000c0e:	4041      	eorgt	r1, r0
 8000c10:	4048      	eorgt	r0, r1
 8000c12:	4041      	eorgt	r1, r0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	2b19      	cmp	r3, #25
 8000c1a:	bf88      	it	hi
 8000c1c:	4770      	bxhi	lr
 8000c1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4240      	negne	r0, r0
 8000c2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4249      	negne	r1, r1
 8000c3e:	ea92 0f03 	teq	r2, r3
 8000c42:	d03f      	beq.n	8000cc4 <__addsf3+0xd8>
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	fa41 fc03 	asr.w	ip, r1, r3
 8000c4c:	eb10 000c 	adds.w	r0, r0, ip
 8000c50:	f1c3 0320 	rsb	r3, r3, #32
 8000c54:	fa01 f103 	lsl.w	r1, r1, r3
 8000c58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5c:	d502      	bpl.n	8000c64 <__addsf3+0x78>
 8000c5e:	4249      	negs	r1, r1
 8000c60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c68:	d313      	bcc.n	8000c92 <__addsf3+0xa6>
 8000c6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c6e:	d306      	bcc.n	8000c7e <__addsf3+0x92>
 8000c70:	0840      	lsrs	r0, r0, #1
 8000c72:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c76:	f102 0201 	add.w	r2, r2, #1
 8000c7a:	2afe      	cmp	r2, #254	; 0xfe
 8000c7c:	d251      	bcs.n	8000d22 <__addsf3+0x136>
 8000c7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c86:	bf08      	it	eq
 8000c88:	f020 0001 	biceq.w	r0, r0, #1
 8000c8c:	ea40 0003 	orr.w	r0, r0, r3
 8000c90:	4770      	bx	lr
 8000c92:	0049      	lsls	r1, r1, #1
 8000c94:	eb40 0000 	adc.w	r0, r0, r0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	bf28      	it	cs
 8000c9c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ca0:	d2ed      	bcs.n	8000c7e <__addsf3+0x92>
 8000ca2:	fab0 fc80 	clz	ip, r0
 8000ca6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000caa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cae:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cb2:	bfaa      	itet	ge
 8000cb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb8:	4252      	neglt	r2, r2
 8000cba:	4318      	orrge	r0, r3
 8000cbc:	bfbc      	itt	lt
 8000cbe:	40d0      	lsrlt	r0, r2
 8000cc0:	4318      	orrlt	r0, r3
 8000cc2:	4770      	bx	lr
 8000cc4:	f092 0f00 	teq	r2, #0
 8000cc8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ccc:	bf06      	itte	eq
 8000cce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cd2:	3201      	addeq	r2, #1
 8000cd4:	3b01      	subne	r3, #1
 8000cd6:	e7b5      	b.n	8000c44 <__addsf3+0x58>
 8000cd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce0:	bf18      	it	ne
 8000ce2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce6:	d021      	beq.n	8000d2c <__addsf3+0x140>
 8000ce8:	ea92 0f03 	teq	r2, r3
 8000cec:	d004      	beq.n	8000cf8 <__addsf3+0x10c>
 8000cee:	f092 0f00 	teq	r2, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	4608      	moveq	r0, r1
 8000cf6:	4770      	bx	lr
 8000cf8:	ea90 0f01 	teq	r0, r1
 8000cfc:	bf1c      	itt	ne
 8000cfe:	2000      	movne	r0, #0
 8000d00:	4770      	bxne	lr
 8000d02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d06:	d104      	bne.n	8000d12 <__addsf3+0x126>
 8000d08:	0040      	lsls	r0, r0, #1
 8000d0a:	bf28      	it	cs
 8000d0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d16:	bf3c      	itt	cc
 8000d18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d1c:	4770      	bxcc	lr
 8000d1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2a:	4770      	bx	lr
 8000d2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d30:	bf16      	itet	ne
 8000d32:	4608      	movne	r0, r1
 8000d34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d38:	4601      	movne	r1, r0
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	bf06      	itte	eq
 8000d3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d42:	ea90 0f01 	teqeq	r0, r1
 8000d46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_ui2f>:
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e004      	b.n	8000d5c <__aeabi_i2f+0x8>
 8000d52:	bf00      	nop

08000d54 <__aeabi_i2f>:
 8000d54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d58:	bf48      	it	mi
 8000d5a:	4240      	negmi	r0, r0
 8000d5c:	ea5f 0c00 	movs.w	ip, r0
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d68:	4601      	mov	r1, r0
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	e01c      	b.n	8000daa <__aeabi_l2f+0x2a>

08000d70 <__aeabi_ul2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e00a      	b.n	8000d94 <__aeabi_l2f+0x14>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_l2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d8c:	d502      	bpl.n	8000d94 <__aeabi_l2f+0x14>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	ea5f 0c01 	movs.w	ip, r1
 8000d98:	bf02      	ittt	eq
 8000d9a:	4684      	moveq	ip, r0
 8000d9c:	4601      	moveq	r1, r0
 8000d9e:	2000      	moveq	r0, #0
 8000da0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000da4:	bf08      	it	eq
 8000da6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000daa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dae:	fabc f28c 	clz	r2, ip
 8000db2:	3a08      	subs	r2, #8
 8000db4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db8:	db10      	blt.n	8000ddc <__aeabi_l2f+0x5c>
 8000dba:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dc4:	f1c2 0220 	rsb	r2, r2, #32
 8000dc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dcc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd0:	eb43 0002 	adc.w	r0, r3, r2
 8000dd4:	bf08      	it	eq
 8000dd6:	f020 0001 	biceq.w	r0, r0, #1
 8000dda:	4770      	bx	lr
 8000ddc:	f102 0220 	add.w	r2, r2, #32
 8000de0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dec:	fa21 f202 	lsr.w	r2, r1, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fmul>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d06f      	beq.n	8000ef4 <__aeabi_fmul+0xf8>
 8000e14:	441a      	add	r2, r3
 8000e16:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1a:	0240      	lsls	r0, r0, #9
 8000e1c:	bf18      	it	ne
 8000e1e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e22:	d01e      	beq.n	8000e62 <__aeabi_fmul+0x66>
 8000e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e28:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e2c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e30:	fba0 3101 	umull	r3, r1, r0, r1
 8000e34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e3c:	bf3e      	ittt	cc
 8000e3e:	0049      	lslcc	r1, r1, #1
 8000e40:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e44:	005b      	lslcc	r3, r3, #1
 8000e46:	ea40 0001 	orr.w	r0, r0, r1
 8000e4a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e4e:	2afd      	cmp	r2, #253	; 0xfd
 8000e50:	d81d      	bhi.n	8000e8e <__aeabi_fmul+0x92>
 8000e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e5a:	bf08      	it	eq
 8000e5c:	f020 0001 	biceq.w	r0, r0, #1
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e6a:	bf08      	it	eq
 8000e6c:	0249      	lsleq	r1, r1, #9
 8000e6e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e72:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e76:	3a7f      	subs	r2, #127	; 0x7f
 8000e78:	bfc2      	ittt	gt
 8000e7a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e7e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e82:	4770      	bxgt	lr
 8000e84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	3a01      	subs	r2, #1
 8000e8e:	dc5d      	bgt.n	8000f4c <__aeabi_fmul+0x150>
 8000e90:	f112 0f19 	cmn.w	r2, #25
 8000e94:	bfdc      	itt	le
 8000e96:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e9a:	4770      	bxle	lr
 8000e9c:	f1c2 0200 	rsb	r2, r2, #0
 8000ea0:	0041      	lsls	r1, r0, #1
 8000ea2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ea6:	f1c2 0220 	rsb	r2, r2, #32
 8000eaa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eae:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eb2:	f140 0000 	adc.w	r0, r0, #0
 8000eb6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eba:	bf08      	it	eq
 8000ebc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec0:	4770      	bx	lr
 8000ec2:	f092 0f00 	teq	r2, #0
 8000ec6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0040      	lsleq	r0, r0, #1
 8000ece:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed2:	3a01      	subeq	r2, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fmul+0xce>
 8000ed6:	ea40 000c 	orr.w	r0, r0, ip
 8000eda:	f093 0f00 	teq	r3, #0
 8000ede:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0049      	lsleq	r1, r1, #1
 8000ee6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eea:	3b01      	subeq	r3, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xe6>
 8000eee:	ea41 010c 	orr.w	r1, r1, ip
 8000ef2:	e78f      	b.n	8000e14 <__aeabi_fmul+0x18>
 8000ef4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	bf18      	it	ne
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d00a      	beq.n	8000f1a <__aeabi_fmul+0x11e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	d1d8      	bne.n	8000ec2 <__aeabi_fmul+0xc6>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f18:	4770      	bx	lr
 8000f1a:	f090 0f00 	teq	r0, #0
 8000f1e:	bf17      	itett	ne
 8000f20:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f24:	4608      	moveq	r0, r1
 8000f26:	f091 0f00 	teqne	r1, #0
 8000f2a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f2e:	d014      	beq.n	8000f5a <__aeabi_fmul+0x15e>
 8000f30:	ea92 0f0c 	teq	r2, ip
 8000f34:	d101      	bne.n	8000f3a <__aeabi_fmul+0x13e>
 8000f36:	0242      	lsls	r2, r0, #9
 8000f38:	d10f      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f3a:	ea93 0f0c 	teq	r3, ip
 8000f3e:	d103      	bne.n	8000f48 <__aeabi_fmul+0x14c>
 8000f40:	024b      	lsls	r3, r1, #9
 8000f42:	bf18      	it	ne
 8000f44:	4608      	movne	r0, r1
 8000f46:	d108      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f48:	ea80 0001 	eor.w	r0, r0, r1
 8000f4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f58:	4770      	bx	lr
 8000f5a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f5e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f62:	4770      	bx	lr

08000f64 <__aeabi_fdiv>:
 8000f64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f6c:	bf1e      	ittt	ne
 8000f6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f72:	ea92 0f0c 	teqne	r2, ip
 8000f76:	ea93 0f0c 	teqne	r3, ip
 8000f7a:	d069      	beq.n	8001050 <__aeabi_fdiv+0xec>
 8000f7c:	eba2 0203 	sub.w	r2, r2, r3
 8000f80:	ea80 0c01 	eor.w	ip, r0, r1
 8000f84:	0249      	lsls	r1, r1, #9
 8000f86:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f8a:	d037      	beq.n	8000ffc <__aeabi_fdiv+0x98>
 8000f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f90:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f94:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	bf38      	it	cc
 8000fa0:	005b      	lslcc	r3, r3, #1
 8000fa2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fa6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000faa:	428b      	cmp	r3, r1
 8000fac:	bf24      	itt	cs
 8000fae:	1a5b      	subcs	r3, r3, r1
 8000fb0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fb4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fbe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fc2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fc6:	bf24      	itt	cs
 8000fc8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fcc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fd0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fd4:	bf24      	itt	cs
 8000fd6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fda:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	bf18      	it	ne
 8000fe2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fe6:	d1e0      	bne.n	8000faa <__aeabi_fdiv+0x46>
 8000fe8:	2afd      	cmp	r2, #253	; 0xfd
 8000fea:	f63f af50 	bhi.w	8000e8e <__aeabi_fmul+0x92>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ff4:	bf08      	it	eq
 8000ff6:	f020 0001 	biceq.w	r0, r0, #1
 8000ffa:	4770      	bx	lr
 8000ffc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001000:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001004:	327f      	adds	r2, #127	; 0x7f
 8001006:	bfc2      	ittt	gt
 8001008:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800100c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001010:	4770      	bxgt	lr
 8001012:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	3a01      	subs	r2, #1
 800101c:	e737      	b.n	8000e8e <__aeabi_fmul+0x92>
 800101e:	f092 0f00 	teq	r2, #0
 8001022:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001026:	bf02      	ittt	eq
 8001028:	0040      	lsleq	r0, r0, #1
 800102a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800102e:	3a01      	subeq	r2, #1
 8001030:	d0f9      	beq.n	8001026 <__aeabi_fdiv+0xc2>
 8001032:	ea40 000c 	orr.w	r0, r0, ip
 8001036:	f093 0f00 	teq	r3, #0
 800103a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0049      	lsleq	r1, r1, #1
 8001042:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001046:	3b01      	subeq	r3, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xda>
 800104a:	ea41 010c 	orr.w	r1, r1, ip
 800104e:	e795      	b.n	8000f7c <__aeabi_fdiv+0x18>
 8001050:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001054:	ea92 0f0c 	teq	r2, ip
 8001058:	d108      	bne.n	800106c <__aeabi_fdiv+0x108>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	f47f af7d 	bne.w	8000f5a <__aeabi_fmul+0x15e>
 8001060:	ea93 0f0c 	teq	r3, ip
 8001064:	f47f af70 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001068:	4608      	mov	r0, r1
 800106a:	e776      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800106c:	ea93 0f0c 	teq	r3, ip
 8001070:	d104      	bne.n	800107c <__aeabi_fdiv+0x118>
 8001072:	024b      	lsls	r3, r1, #9
 8001074:	f43f af4c 	beq.w	8000f10 <__aeabi_fmul+0x114>
 8001078:	4608      	mov	r0, r1
 800107a:	e76e      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800107c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001080:	bf18      	it	ne
 8001082:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001086:	d1ca      	bne.n	800101e <__aeabi_fdiv+0xba>
 8001088:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800108c:	f47f af5c 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001090:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001094:	f47f af3c 	bne.w	8000f10 <__aeabi_fmul+0x114>
 8001098:	e75f      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800109a:	bf00      	nop

0800109c <__gesf2>:
 800109c:	f04f 3cff 	mov.w	ip, #4294967295
 80010a0:	e006      	b.n	80010b0 <__cmpsf2+0x4>
 80010a2:	bf00      	nop

080010a4 <__lesf2>:
 80010a4:	f04f 0c01 	mov.w	ip, #1
 80010a8:	e002      	b.n	80010b0 <__cmpsf2+0x4>
 80010aa:	bf00      	nop

080010ac <__cmpsf2>:
 80010ac:	f04f 0c01 	mov.w	ip, #1
 80010b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c0:	bf18      	it	ne
 80010c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010c6:	d011      	beq.n	80010ec <__cmpsf2+0x40>
 80010c8:	b001      	add	sp, #4
 80010ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ce:	bf18      	it	ne
 80010d0:	ea90 0f01 	teqne	r0, r1
 80010d4:	bf58      	it	pl
 80010d6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010da:	bf88      	it	hi
 80010dc:	17c8      	asrhi	r0, r1, #31
 80010de:	bf38      	it	cc
 80010e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010e4:	bf18      	it	ne
 80010e6:	f040 0001 	orrne.w	r0, r0, #1
 80010ea:	4770      	bx	lr
 80010ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f0:	d102      	bne.n	80010f8 <__cmpsf2+0x4c>
 80010f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010f6:	d105      	bne.n	8001104 <__cmpsf2+0x58>
 80010f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010fc:	d1e4      	bne.n	80010c8 <__cmpsf2+0x1c>
 80010fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001102:	d0e1      	beq.n	80010c8 <__cmpsf2+0x1c>
 8001104:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <__aeabi_cfrcmple>:
 800110c:	4684      	mov	ip, r0
 800110e:	4608      	mov	r0, r1
 8001110:	4661      	mov	r1, ip
 8001112:	e7ff      	b.n	8001114 <__aeabi_cfcmpeq>

08001114 <__aeabi_cfcmpeq>:
 8001114:	b50f      	push	{r0, r1, r2, r3, lr}
 8001116:	f7ff ffc9 	bl	80010ac <__cmpsf2>
 800111a:	2800      	cmp	r0, #0
 800111c:	bf48      	it	mi
 800111e:	f110 0f00 	cmnmi.w	r0, #0
 8001122:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001124 <__aeabi_fcmpeq>:
 8001124:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001128:	f7ff fff4 	bl	8001114 <__aeabi_cfcmpeq>
 800112c:	bf0c      	ite	eq
 800112e:	2001      	moveq	r0, #1
 8001130:	2000      	movne	r0, #0
 8001132:	f85d fb08 	ldr.w	pc, [sp], #8
 8001136:	bf00      	nop

08001138 <__aeabi_fcmplt>:
 8001138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800113c:	f7ff ffea 	bl	8001114 <__aeabi_cfcmpeq>
 8001140:	bf34      	ite	cc
 8001142:	2001      	movcc	r0, #1
 8001144:	2000      	movcs	r0, #0
 8001146:	f85d fb08 	ldr.w	pc, [sp], #8
 800114a:	bf00      	nop

0800114c <__aeabi_fcmple>:
 800114c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001150:	f7ff ffe0 	bl	8001114 <__aeabi_cfcmpeq>
 8001154:	bf94      	ite	ls
 8001156:	2001      	movls	r0, #1
 8001158:	2000      	movhi	r0, #0
 800115a:	f85d fb08 	ldr.w	pc, [sp], #8
 800115e:	bf00      	nop

08001160 <__aeabi_fcmpge>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff ffd2 	bl	800110c <__aeabi_cfrcmple>
 8001168:	bf94      	ite	ls
 800116a:	2001      	movls	r0, #1
 800116c:	2000      	movhi	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmpgt>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffc8 	bl	800110c <__aeabi_cfrcmple>
 800117c:	bf34      	ite	cc
 800117e:	2001      	movcc	r0, #1
 8001180:	2000      	movcs	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmpun>:
 8001188:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800118c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001190:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001194:	d102      	bne.n	800119c <__aeabi_fcmpun+0x14>
 8001196:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800119a:	d108      	bne.n	80011ae <__aeabi_fcmpun+0x26>
 800119c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011a0:	d102      	bne.n	80011a8 <__aeabi_fcmpun+0x20>
 80011a2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011a6:	d102      	bne.n	80011ae <__aeabi_fcmpun+0x26>
 80011a8:	f04f 0000 	mov.w	r0, #0
 80011ac:	4770      	bx	lr
 80011ae:	f04f 0001 	mov.w	r0, #1
 80011b2:	4770      	bx	lr

080011b4 <__aeabi_f2iz>:
 80011b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011bc:	d30f      	bcc.n	80011de <__aeabi_f2iz+0x2a>
 80011be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011c6:	d90d      	bls.n	80011e4 <__aeabi_f2iz+0x30>
 80011c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	bf18      	it	ne
 80011da:	4240      	negne	r0, r0
 80011dc:	4770      	bx	lr
 80011de:	f04f 0000 	mov.w	r0, #0
 80011e2:	4770      	bx	lr
 80011e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e8:	d101      	bne.n	80011ee <__aeabi_f2iz+0x3a>
 80011ea:	0242      	lsls	r2, r0, #9
 80011ec:	d105      	bne.n	80011fa <__aeabi_f2iz+0x46>
 80011ee:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011f2:	bf08      	it	eq
 80011f4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011f8:	4770      	bx	lr
 80011fa:	f04f 0000 	mov.w	r0, #0
 80011fe:	4770      	bx	lr

08001200 <__aeabi_f2uiz>:
 8001200:	0042      	lsls	r2, r0, #1
 8001202:	d20e      	bcs.n	8001222 <__aeabi_f2uiz+0x22>
 8001204:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001208:	d30b      	bcc.n	8001222 <__aeabi_f2uiz+0x22>
 800120a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800120e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001212:	d409      	bmi.n	8001228 <__aeabi_f2uiz+0x28>
 8001214:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800121c:	fa23 f002 	lsr.w	r0, r3, r2
 8001220:	4770      	bx	lr
 8001222:	f04f 0000 	mov.w	r0, #0
 8001226:	4770      	bx	lr
 8001228:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800122c:	d101      	bne.n	8001232 <__aeabi_f2uiz+0x32>
 800122e:	0242      	lsls	r2, r0, #9
 8001230:	d102      	bne.n	8001238 <__aeabi_f2uiz+0x38>
 8001232:	f04f 30ff 	mov.w	r0, #4294967295
 8001236:	4770      	bx	lr
 8001238:	f04f 0000 	mov.w	r0, #0
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <__aeabi_uldivmod>:
 8001240:	b953      	cbnz	r3, 8001258 <__aeabi_uldivmod+0x18>
 8001242:	b94a      	cbnz	r2, 8001258 <__aeabi_uldivmod+0x18>
 8001244:	2900      	cmp	r1, #0
 8001246:	bf08      	it	eq
 8001248:	2800      	cmpeq	r0, #0
 800124a:	bf1c      	itt	ne
 800124c:	f04f 31ff 	movne.w	r1, #4294967295
 8001250:	f04f 30ff 	movne.w	r0, #4294967295
 8001254:	f000 b96e 	b.w	8001534 <__aeabi_idiv0>
 8001258:	f1ad 0c08 	sub.w	ip, sp, #8
 800125c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001260:	f000 f806 	bl	8001270 <__udivmoddi4>
 8001264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800126c:	b004      	add	sp, #16
 800126e:	4770      	bx	lr

08001270 <__udivmoddi4>:
 8001270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001274:	9e08      	ldr	r6, [sp, #32]
 8001276:	460d      	mov	r5, r1
 8001278:	4604      	mov	r4, r0
 800127a:	468e      	mov	lr, r1
 800127c:	2b00      	cmp	r3, #0
 800127e:	f040 8083 	bne.w	8001388 <__udivmoddi4+0x118>
 8001282:	428a      	cmp	r2, r1
 8001284:	4617      	mov	r7, r2
 8001286:	d947      	bls.n	8001318 <__udivmoddi4+0xa8>
 8001288:	fab2 f382 	clz	r3, r2
 800128c:	b14b      	cbz	r3, 80012a2 <__udivmoddi4+0x32>
 800128e:	f1c3 0120 	rsb	r1, r3, #32
 8001292:	fa05 fe03 	lsl.w	lr, r5, r3
 8001296:	fa20 f101 	lsr.w	r1, r0, r1
 800129a:	409f      	lsls	r7, r3
 800129c:	ea41 0e0e 	orr.w	lr, r1, lr
 80012a0:	409c      	lsls	r4, r3
 80012a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80012a6:	fbbe fcf8 	udiv	ip, lr, r8
 80012aa:	fa1f f987 	uxth.w	r9, r7
 80012ae:	fb08 e21c 	mls	r2, r8, ip, lr
 80012b2:	fb0c f009 	mul.w	r0, ip, r9
 80012b6:	0c21      	lsrs	r1, r4, #16
 80012b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80012bc:	4290      	cmp	r0, r2
 80012be:	d90a      	bls.n	80012d6 <__udivmoddi4+0x66>
 80012c0:	18ba      	adds	r2, r7, r2
 80012c2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80012c6:	f080 8118 	bcs.w	80014fa <__udivmoddi4+0x28a>
 80012ca:	4290      	cmp	r0, r2
 80012cc:	f240 8115 	bls.w	80014fa <__udivmoddi4+0x28a>
 80012d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80012d4:	443a      	add	r2, r7
 80012d6:	1a12      	subs	r2, r2, r0
 80012d8:	fbb2 f0f8 	udiv	r0, r2, r8
 80012dc:	fb08 2210 	mls	r2, r8, r0, r2
 80012e0:	fb00 f109 	mul.w	r1, r0, r9
 80012e4:	b2a4      	uxth	r4, r4
 80012e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012ea:	42a1      	cmp	r1, r4
 80012ec:	d909      	bls.n	8001302 <__udivmoddi4+0x92>
 80012ee:	193c      	adds	r4, r7, r4
 80012f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80012f4:	f080 8103 	bcs.w	80014fe <__udivmoddi4+0x28e>
 80012f8:	42a1      	cmp	r1, r4
 80012fa:	f240 8100 	bls.w	80014fe <__udivmoddi4+0x28e>
 80012fe:	3802      	subs	r0, #2
 8001300:	443c      	add	r4, r7
 8001302:	1a64      	subs	r4, r4, r1
 8001304:	2100      	movs	r1, #0
 8001306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800130a:	b11e      	cbz	r6, 8001314 <__udivmoddi4+0xa4>
 800130c:	2200      	movs	r2, #0
 800130e:	40dc      	lsrs	r4, r3
 8001310:	e9c6 4200 	strd	r4, r2, [r6]
 8001314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001318:	b902      	cbnz	r2, 800131c <__udivmoddi4+0xac>
 800131a:	deff      	udf	#255	; 0xff
 800131c:	fab2 f382 	clz	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d14f      	bne.n	80013c4 <__udivmoddi4+0x154>
 8001324:	1a8d      	subs	r5, r1, r2
 8001326:	2101      	movs	r1, #1
 8001328:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800132c:	fa1f f882 	uxth.w	r8, r2
 8001330:	fbb5 fcfe 	udiv	ip, r5, lr
 8001334:	fb0e 551c 	mls	r5, lr, ip, r5
 8001338:	fb08 f00c 	mul.w	r0, r8, ip
 800133c:	0c22      	lsrs	r2, r4, #16
 800133e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001342:	42a8      	cmp	r0, r5
 8001344:	d907      	bls.n	8001356 <__udivmoddi4+0xe6>
 8001346:	197d      	adds	r5, r7, r5
 8001348:	f10c 32ff 	add.w	r2, ip, #4294967295
 800134c:	d202      	bcs.n	8001354 <__udivmoddi4+0xe4>
 800134e:	42a8      	cmp	r0, r5
 8001350:	f200 80e9 	bhi.w	8001526 <__udivmoddi4+0x2b6>
 8001354:	4694      	mov	ip, r2
 8001356:	1a2d      	subs	r5, r5, r0
 8001358:	fbb5 f0fe 	udiv	r0, r5, lr
 800135c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001360:	fb08 f800 	mul.w	r8, r8, r0
 8001364:	b2a4      	uxth	r4, r4
 8001366:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800136a:	45a0      	cmp	r8, r4
 800136c:	d907      	bls.n	800137e <__udivmoddi4+0x10e>
 800136e:	193c      	adds	r4, r7, r4
 8001370:	f100 32ff 	add.w	r2, r0, #4294967295
 8001374:	d202      	bcs.n	800137c <__udivmoddi4+0x10c>
 8001376:	45a0      	cmp	r8, r4
 8001378:	f200 80d9 	bhi.w	800152e <__udivmoddi4+0x2be>
 800137c:	4610      	mov	r0, r2
 800137e:	eba4 0408 	sub.w	r4, r4, r8
 8001382:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001386:	e7c0      	b.n	800130a <__udivmoddi4+0x9a>
 8001388:	428b      	cmp	r3, r1
 800138a:	d908      	bls.n	800139e <__udivmoddi4+0x12e>
 800138c:	2e00      	cmp	r6, #0
 800138e:	f000 80b1 	beq.w	80014f4 <__udivmoddi4+0x284>
 8001392:	2100      	movs	r1, #0
 8001394:	e9c6 0500 	strd	r0, r5, [r6]
 8001398:	4608      	mov	r0, r1
 800139a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800139e:	fab3 f183 	clz	r1, r3
 80013a2:	2900      	cmp	r1, #0
 80013a4:	d14b      	bne.n	800143e <__udivmoddi4+0x1ce>
 80013a6:	42ab      	cmp	r3, r5
 80013a8:	d302      	bcc.n	80013b0 <__udivmoddi4+0x140>
 80013aa:	4282      	cmp	r2, r0
 80013ac:	f200 80b9 	bhi.w	8001522 <__udivmoddi4+0x2b2>
 80013b0:	1a84      	subs	r4, r0, r2
 80013b2:	eb65 0303 	sbc.w	r3, r5, r3
 80013b6:	2001      	movs	r0, #1
 80013b8:	469e      	mov	lr, r3
 80013ba:	2e00      	cmp	r6, #0
 80013bc:	d0aa      	beq.n	8001314 <__udivmoddi4+0xa4>
 80013be:	e9c6 4e00 	strd	r4, lr, [r6]
 80013c2:	e7a7      	b.n	8001314 <__udivmoddi4+0xa4>
 80013c4:	409f      	lsls	r7, r3
 80013c6:	f1c3 0220 	rsb	r2, r3, #32
 80013ca:	40d1      	lsrs	r1, r2
 80013cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80013d4:	fa1f f887 	uxth.w	r8, r7
 80013d8:	fb0e 1110 	mls	r1, lr, r0, r1
 80013dc:	fa24 f202 	lsr.w	r2, r4, r2
 80013e0:	409d      	lsls	r5, r3
 80013e2:	fb00 fc08 	mul.w	ip, r0, r8
 80013e6:	432a      	orrs	r2, r5
 80013e8:	0c15      	lsrs	r5, r2, #16
 80013ea:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013ee:	45ac      	cmp	ip, r5
 80013f0:	fa04 f403 	lsl.w	r4, r4, r3
 80013f4:	d909      	bls.n	800140a <__udivmoddi4+0x19a>
 80013f6:	197d      	adds	r5, r7, r5
 80013f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80013fc:	f080 808f 	bcs.w	800151e <__udivmoddi4+0x2ae>
 8001400:	45ac      	cmp	ip, r5
 8001402:	f240 808c 	bls.w	800151e <__udivmoddi4+0x2ae>
 8001406:	3802      	subs	r0, #2
 8001408:	443d      	add	r5, r7
 800140a:	eba5 050c 	sub.w	r5, r5, ip
 800140e:	fbb5 f1fe 	udiv	r1, r5, lr
 8001412:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001416:	fb01 f908 	mul.w	r9, r1, r8
 800141a:	b295      	uxth	r5, r2
 800141c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001420:	45a9      	cmp	r9, r5
 8001422:	d907      	bls.n	8001434 <__udivmoddi4+0x1c4>
 8001424:	197d      	adds	r5, r7, r5
 8001426:	f101 32ff 	add.w	r2, r1, #4294967295
 800142a:	d274      	bcs.n	8001516 <__udivmoddi4+0x2a6>
 800142c:	45a9      	cmp	r9, r5
 800142e:	d972      	bls.n	8001516 <__udivmoddi4+0x2a6>
 8001430:	3902      	subs	r1, #2
 8001432:	443d      	add	r5, r7
 8001434:	eba5 0509 	sub.w	r5, r5, r9
 8001438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800143c:	e778      	b.n	8001330 <__udivmoddi4+0xc0>
 800143e:	f1c1 0720 	rsb	r7, r1, #32
 8001442:	408b      	lsls	r3, r1
 8001444:	fa22 fc07 	lsr.w	ip, r2, r7
 8001448:	ea4c 0c03 	orr.w	ip, ip, r3
 800144c:	fa25 f407 	lsr.w	r4, r5, r7
 8001450:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001454:	fbb4 f9fe 	udiv	r9, r4, lr
 8001458:	fa1f f88c 	uxth.w	r8, ip
 800145c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001460:	fa20 f307 	lsr.w	r3, r0, r7
 8001464:	fb09 fa08 	mul.w	sl, r9, r8
 8001468:	408d      	lsls	r5, r1
 800146a:	431d      	orrs	r5, r3
 800146c:	0c2b      	lsrs	r3, r5, #16
 800146e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001472:	45a2      	cmp	sl, r4
 8001474:	fa02 f201 	lsl.w	r2, r2, r1
 8001478:	fa00 f301 	lsl.w	r3, r0, r1
 800147c:	d909      	bls.n	8001492 <__udivmoddi4+0x222>
 800147e:	eb1c 0404 	adds.w	r4, ip, r4
 8001482:	f109 30ff 	add.w	r0, r9, #4294967295
 8001486:	d248      	bcs.n	800151a <__udivmoddi4+0x2aa>
 8001488:	45a2      	cmp	sl, r4
 800148a:	d946      	bls.n	800151a <__udivmoddi4+0x2aa>
 800148c:	f1a9 0902 	sub.w	r9, r9, #2
 8001490:	4464      	add	r4, ip
 8001492:	eba4 040a 	sub.w	r4, r4, sl
 8001496:	fbb4 f0fe 	udiv	r0, r4, lr
 800149a:	fb0e 4410 	mls	r4, lr, r0, r4
 800149e:	fb00 fa08 	mul.w	sl, r0, r8
 80014a2:	b2ad      	uxth	r5, r5
 80014a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80014a8:	45a2      	cmp	sl, r4
 80014aa:	d908      	bls.n	80014be <__udivmoddi4+0x24e>
 80014ac:	eb1c 0404 	adds.w	r4, ip, r4
 80014b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80014b4:	d22d      	bcs.n	8001512 <__udivmoddi4+0x2a2>
 80014b6:	45a2      	cmp	sl, r4
 80014b8:	d92b      	bls.n	8001512 <__udivmoddi4+0x2a2>
 80014ba:	3802      	subs	r0, #2
 80014bc:	4464      	add	r4, ip
 80014be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80014c2:	fba0 8902 	umull	r8, r9, r0, r2
 80014c6:	eba4 040a 	sub.w	r4, r4, sl
 80014ca:	454c      	cmp	r4, r9
 80014cc:	46c6      	mov	lr, r8
 80014ce:	464d      	mov	r5, r9
 80014d0:	d319      	bcc.n	8001506 <__udivmoddi4+0x296>
 80014d2:	d016      	beq.n	8001502 <__udivmoddi4+0x292>
 80014d4:	b15e      	cbz	r6, 80014ee <__udivmoddi4+0x27e>
 80014d6:	ebb3 020e 	subs.w	r2, r3, lr
 80014da:	eb64 0405 	sbc.w	r4, r4, r5
 80014de:	fa04 f707 	lsl.w	r7, r4, r7
 80014e2:	fa22 f301 	lsr.w	r3, r2, r1
 80014e6:	431f      	orrs	r7, r3
 80014e8:	40cc      	lsrs	r4, r1
 80014ea:	e9c6 7400 	strd	r7, r4, [r6]
 80014ee:	2100      	movs	r1, #0
 80014f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014f4:	4631      	mov	r1, r6
 80014f6:	4630      	mov	r0, r6
 80014f8:	e70c      	b.n	8001314 <__udivmoddi4+0xa4>
 80014fa:	468c      	mov	ip, r1
 80014fc:	e6eb      	b.n	80012d6 <__udivmoddi4+0x66>
 80014fe:	4610      	mov	r0, r2
 8001500:	e6ff      	b.n	8001302 <__udivmoddi4+0x92>
 8001502:	4543      	cmp	r3, r8
 8001504:	d2e6      	bcs.n	80014d4 <__udivmoddi4+0x264>
 8001506:	ebb8 0e02 	subs.w	lr, r8, r2
 800150a:	eb69 050c 	sbc.w	r5, r9, ip
 800150e:	3801      	subs	r0, #1
 8001510:	e7e0      	b.n	80014d4 <__udivmoddi4+0x264>
 8001512:	4628      	mov	r0, r5
 8001514:	e7d3      	b.n	80014be <__udivmoddi4+0x24e>
 8001516:	4611      	mov	r1, r2
 8001518:	e78c      	b.n	8001434 <__udivmoddi4+0x1c4>
 800151a:	4681      	mov	r9, r0
 800151c:	e7b9      	b.n	8001492 <__udivmoddi4+0x222>
 800151e:	4608      	mov	r0, r1
 8001520:	e773      	b.n	800140a <__udivmoddi4+0x19a>
 8001522:	4608      	mov	r0, r1
 8001524:	e749      	b.n	80013ba <__udivmoddi4+0x14a>
 8001526:	f1ac 0c02 	sub.w	ip, ip, #2
 800152a:	443d      	add	r5, r7
 800152c:	e713      	b.n	8001356 <__udivmoddi4+0xe6>
 800152e:	3802      	subs	r0, #2
 8001530:	443c      	add	r4, r7
 8001532:	e724      	b.n	800137e <__udivmoddi4+0x10e>

08001534 <__aeabi_idiv0>:
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop

08001538 <_Z8readBitshhhhPh>:
 * @param bitStart First bit position to read (0-7)
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @return Status of read operation (true = success)
 */
int8_t readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data) {
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af04      	add	r7, sp, #16
 800153e:	4604      	mov	r4, r0
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4623      	mov	r3, r4
 8001548:	71fb      	strb	r3, [r7, #7]
 800154a:	4603      	mov	r3, r0
 800154c:	71bb      	strb	r3, [r7, #6]
 800154e:	460b      	mov	r3, r1
 8001550:	717b      	strb	r3, [r7, #5]
 8001552:	4613      	mov	r3, r2
 8001554:	713b      	strb	r3, [r7, #4]
  // 01101001 read byte
  // 76543210 bit numbers
  //    xxx   args: bitStart=4, length=3
  //    010   masked
  //   -> 010 shifted
  sendBuf[0] = regAddr;
 8001556:	4a25      	ldr	r2, [pc, #148]	; (80015ec <_Z8readBitshhhhPh+0xb4>)
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	b299      	uxth	r1, r3
 8001560:	79bb      	ldrb	r3, [r7, #6]
 8001562:	b29a      	uxth	r2, r3
 8001564:	2301      	movs	r3, #1
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	2301      	movs	r3, #1
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2301      	movs	r3, #1
 8001574:	481e      	ldr	r0, [pc, #120]	; (80015f0 <_Z8readBitshhhhPh+0xb8>)
 8001576:	f005 fb99 	bl	8006cac <HAL_I2C_Mem_Read>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf14      	ite	ne
 8001580:	2301      	movne	r3, #1
 8001582:	2300      	moveq	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <_Z8readBitshhhhPh+0x58>
  	  MX_I2C1_Init();
 800158a:	f002 ffc1 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800158e:	e7e5      	b.n	800155c <_Z8readBitshhhhPh+0x24>
    }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
  uint8_t b = buffer;
 8001594:	7b3b      	ldrb	r3, [r7, #12]
 8001596:	73bb      	strb	r3, [r7, #14]
  if (response == BCM2835_I2C_REASON_OK) {
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d11a      	bne.n	80015d4 <_Z8readBitshhhhPh+0x9c>
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800159e:	793b      	ldrb	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	1e5a      	subs	r2, r3, #1
 80015a8:	7979      	ldrb	r1, [r7, #5]
 80015aa:	793b      	ldrb	r3, [r7, #4]
 80015ac:	1acb      	subs	r3, r1, r3
 80015ae:	3301      	adds	r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	737b      	strb	r3, [r7, #13]
    b &= mask;
 80015b6:	7bba      	ldrb	r2, [r7, #14]
 80015b8:	7b7b      	ldrb	r3, [r7, #13]
 80015ba:	4013      	ands	r3, r2
 80015bc:	73bb      	strb	r3, [r7, #14]
    b >>= (bitStart - length + 1);
 80015be:	7bba      	ldrb	r2, [r7, #14]
 80015c0:	7979      	ldrb	r1, [r7, #5]
 80015c2:	793b      	ldrb	r3, [r7, #4]
 80015c4:	1acb      	subs	r3, r1, r3
 80015c6:	3301      	adds	r3, #1
 80015c8:	fa42 f303 	asr.w	r3, r2, r3
 80015cc:	73bb      	strb	r3, [r7, #14]
    *data = b;
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	7bba      	ldrb	r2, [r7, #14]
 80015d2:	701a      	strb	r2, [r3, #0]
  }
  return response == BCM2835_I2C_REASON_OK;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	bf0c      	ite	eq
 80015da:	2301      	moveq	r3, #1
 80015dc:	2300      	movne	r3, #0
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	b25b      	sxtb	r3, r3
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000394 	.word	0x20000394
 80015f0:	20000698 	.word	0x20000698

080015f4 <_Z8readBytehhPh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @return Status of read operation (true = success)
 */
int8_t readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af04      	add	r7, sp, #16
 80015fa:	4603      	mov	r3, r0
 80015fc:	603a      	str	r2, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
 8001600:	460b      	mov	r3, r1
 8001602:	71bb      	strb	r3, [r7, #6]
  sendBuf[0] = regAddr;
 8001604:	4a16      	ldr	r2, [pc, #88]	; (8001660 <_Z8readBytehhPh+0x6c>)
 8001606:	79bb      	ldrb	r3, [r7, #6]
 8001608:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	b299      	uxth	r1, r3
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	b29a      	uxth	r2, r3
 8001612:	2301      	movs	r3, #1
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	2301      	movs	r3, #1
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	f107 030e 	add.w	r3, r7, #14
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2301      	movs	r3, #1
 8001622:	4810      	ldr	r0, [pc, #64]	; (8001664 <_Z8readBytehhPh+0x70>)
 8001624:	f005 fb42 	bl	8006cac <HAL_I2C_Mem_Read>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	bf14      	ite	ne
 800162e:	2301      	movne	r3, #1
 8001630:	2300      	moveq	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <_Z8readBytehhPh+0x4a>
    MX_I2C1_Init();
 8001638:	f002 ff6a 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800163c:	e7e5      	b.n	800160a <_Z8readBytehhPh+0x16>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 800163e:	2301      	movs	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
  data[0] = buffer;
 8001642:	7bba      	ldrb	r2, [r7, #14]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	701a      	strb	r2, [r3, #0]
  return response == BCM2835_I2C_REASON_OK;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b01      	cmp	r3, #1
 800164c:	bf0c      	ite	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	2300      	movne	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	b25b      	sxtb	r3, r3
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000394 	.word	0x20000394
 8001664:	20000698 	.word	0x20000698

08001668 <_Z9readByteshhhPh>:
 * @param regAddr First register regAddr to read from
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @return I2C_TransferReturn_TypeDef http://downloads.energymicro.com/documentation/doxygen/group__I2C.html
 */
int8_t readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data) {
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af04      	add	r7, sp, #16
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	460b      	mov	r3, r1
 8001676:	71bb      	strb	r3, [r7, #6]
 8001678:	4613      	mov	r3, r2
 800167a:	717b      	strb	r3, [r7, #5]
  uint8_t response = BCM2835_I2C_REASON_OK;
  int i ;
  for (i = 0; i < length ; i++) {
    data[i] = (uint8_t) buffer[i];
  }
  return response == BCM2835_I2C_REASON_OK;
 800167c:	466b      	mov	r3, sp
 800167e:	461d      	mov	r5, r3
  sendBuf[0] = regAddr;
 8001680:	4a32      	ldr	r2, [pc, #200]	; (800174c <_Z9readByteshhhPh+0xe4>)
 8001682:	79bb      	ldrb	r3, [r7, #6]
 8001684:	7013      	strb	r3, [r2, #0]
  uint8_t buffer[length];
 8001686:	797b      	ldrb	r3, [r7, #5]
 8001688:	1e5c      	subs	r4, r3, #1
 800168a:	613c      	str	r4, [r7, #16]
 800168c:	4623      	mov	r3, r4
 800168e:	3301      	adds	r3, #1
 8001690:	4618      	mov	r0, r3
 8001692:	f04f 0100 	mov.w	r1, #0
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	00cb      	lsls	r3, r1, #3
 80016a0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016a4:	00c2      	lsls	r2, r0, #3
 80016a6:	4623      	mov	r3, r4
 80016a8:	3301      	adds	r3, #1
 80016aa:	4618      	mov	r0, r3
 80016ac:	f04f 0100 	mov.w	r1, #0
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	00cb      	lsls	r3, r1, #3
 80016ba:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80016be:	00c2      	lsls	r2, r0, #3
 80016c0:	4623      	mov	r3, r4
 80016c2:	3301      	adds	r3, #1
 80016c4:	3307      	adds	r3, #7
 80016c6:	08db      	lsrs	r3, r3, #3
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	ebad 0d03 	sub.w	sp, sp, r3
 80016ce:	ab04      	add	r3, sp, #16
 80016d0:	3300      	adds	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	b299      	uxth	r1, r3
 80016d8:	79bb      	ldrb	r3, [r7, #6]
 80016da:	b298      	uxth	r0, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	797a      	ldrb	r2, [r7, #5]
 80016e0:	b292      	uxth	r2, r2
 80016e2:	2401      	movs	r4, #1
 80016e4:	9402      	str	r4, [sp, #8]
 80016e6:	9201      	str	r2, [sp, #4]
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2301      	movs	r3, #1
 80016ec:	4602      	mov	r2, r0
 80016ee:	4818      	ldr	r0, [pc, #96]	; (8001750 <_Z9readByteshhhPh+0xe8>)
 80016f0:	f005 fadc 	bl	8006cac <HAL_I2C_Mem_Read>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	bf14      	ite	ne
 80016fa:	2301      	movne	r3, #1
 80016fc:	2300      	moveq	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <_Z9readByteshhhPh+0xa2>
    MX_I2C1_Init();
 8001704:	f002 ff04 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 8001708:	e7e4      	b.n	80016d4 <_Z9readByteshhhPh+0x6c>
  uint8_t response = BCM2835_I2C_REASON_OK;
 800170a:	2301      	movs	r3, #1
 800170c:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < length ; i++) {
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	797b      	ldrb	r3, [r7, #5]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	429a      	cmp	r2, r3
 8001718:	da0b      	bge.n	8001732 <_Z9readByteshhhPh+0xca>
    data[i] = (uint8_t) buffer[i];
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	4413      	add	r3, r2
 8001720:	68f9      	ldr	r1, [r7, #12]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	440a      	add	r2, r1
 8001726:	7812      	ldrb	r2, [r2, #0]
 8001728:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < length ; i++) {
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	3301      	adds	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e7ef      	b.n	8001712 <_Z9readByteshhhPh+0xaa>
  return response == BCM2835_I2C_REASON_OK;
 8001732:	7afb      	ldrb	r3, [r7, #11]
 8001734:	2b01      	cmp	r3, #1
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	b25b      	sxtb	r3, r3
 8001740:	46ad      	mov	sp, r5
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bdb0      	pop	{r4, r5, r7, pc}
 800174a:	bf00      	nop
 800174c:	20000394 	.word	0x20000394
 8001750:	20000698 	.word	0x20000698

08001754 <_Z8writeBithhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af04      	add	r7, sp, #16
 800175a:	4604      	mov	r4, r0
 800175c:	4608      	mov	r0, r1
 800175e:	4611      	mov	r1, r2
 8001760:	461a      	mov	r2, r3
 8001762:	4623      	mov	r3, r4
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	4603      	mov	r3, r0
 8001768:	71bb      	strb	r3, [r7, #6]
 800176a:	460b      	mov	r3, r1
 800176c:	717b      	strb	r3, [r7, #5]
 800176e:	4613      	mov	r3, r2
 8001770:	713b      	strb	r3, [r7, #4]

  //first reading registery value
  sendBuf[0] = regAddr;
 8001772:	4a34      	ldr	r2, [pc, #208]	; (8001844 <_Z8writeBithhhh+0xf0>)
 8001774:	79bb      	ldrb	r3, [r7, #6]
 8001776:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	b299      	uxth	r1, r3
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	b29a      	uxth	r2, r3
 8001780:	2301      	movs	r3, #1
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2301      	movs	r3, #1
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	f107 030e 	add.w	r3, r7, #14
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2301      	movs	r3, #1
 8001790:	482d      	ldr	r0, [pc, #180]	; (8001848 <_Z8writeBithhhh+0xf4>)
 8001792:	f005 fa8b 	bl	8006cac <HAL_I2C_Mem_Read>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf14      	ite	ne
 800179c:	2301      	movne	r3, #1
 800179e:	2300      	moveq	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <_Z8writeBithhhh+0x58>
    MX_I2C1_Init();
 80017a6:	f002 feb3 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80017aa:	e7e5      	b.n	8001778 <_Z8writeBithhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d13b      	bne.n	800182e <_Z8writeBithhhh+0xda>
    uint8_t b = buffer ;
 80017b6:	7bbb      	ldrb	r3, [r7, #14]
 80017b8:	737b      	strb	r3, [r7, #13]
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80017ba:	793b      	ldrb	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00a      	beq.n	80017d6 <_Z8writeBithhhh+0x82>
 80017c0:	797b      	ldrb	r3, [r7, #5]
 80017c2:	2201      	movs	r2, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	b25a      	sxtb	r2, r3
 80017ca:	7b7b      	ldrb	r3, [r7, #13]
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	e00b      	b.n	80017ee <_Z8writeBithhhh+0x9a>
 80017d6:	797b      	ldrb	r3, [r7, #5]
 80017d8:	2201      	movs	r2, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	7b7b      	ldrb	r3, [r7, #13]
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	4013      	ands	r3, r2
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	737b      	strb	r3, [r7, #13]
    sendBuf[1] = b ;
 80017f0:	7b7a      	ldrb	r2, [r7, #13]
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <_Z8writeBithhhh+0xf0>)
 80017f4:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	b299      	uxth	r1, r3
 80017fa:	79bb      	ldrb	r3, [r7, #6]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	2301      	movs	r3, #1
 8001800:	9302      	str	r3, [sp, #8]
 8001802:	2301      	movs	r3, #1
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	f107 030d 	add.w	r3, r7, #13
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2301      	movs	r3, #1
 800180e:	480e      	ldr	r0, [pc, #56]	; (8001848 <_Z8writeBithhhh+0xf4>)
 8001810:	f005 f952 	bl	8006ab8 <HAL_I2C_Mem_Write>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf14      	ite	ne
 800181a:	2301      	movne	r3, #1
 800181c:	2300      	moveq	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <_Z8writeBithhhh+0xd6>
    	MX_I2C1_Init();
 8001824:	f002 fe74 	bl	8004510 <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001828:	e7e5      	b.n	80017f6 <_Z8writeBithhhh+0xa2>
    }
    response = BCM2835_I2C_REASON_OK;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
  }
  return response == BCM2835_I2C_REASON_OK;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	2b01      	cmp	r3, #1
 8001832:	bf0c      	ite	eq
 8001834:	2301      	moveq	r3, #1
 8001836:	2300      	movne	r3, #0
 8001838:	b2db      	uxtb	r3, r3
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	bd90      	pop	{r4, r7, pc}
 8001842:	bf00      	nop
 8001844:	20000394 	.word	0x20000394
 8001848:	20000698 	.word	0x20000698

0800184c <_Z9writeBitshhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af04      	add	r7, sp, #16
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4623      	mov	r3, r4
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	4603      	mov	r3, r0
 8001860:	71bb      	strb	r3, [r7, #6]
 8001862:	460b      	mov	r3, r1
 8001864:	717b      	strb	r3, [r7, #5]
 8001866:	4613      	mov	r3, r2
 8001868:	713b      	strb	r3, [r7, #4]
  // 10101111 original value (sample)
  // 10100011 original & ~mask
  // 10101011 masked | value

  //first reading registery value
  sendBuf[0] = regAddr;
 800186a:	4a3c      	ldr	r2, [pc, #240]	; (800195c <_Z9writeBitshhhhh+0x110>)
 800186c:	79bb      	ldrb	r3, [r7, #6]
 800186e:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	b299      	uxth	r1, r3
 8001874:	79bb      	ldrb	r3, [r7, #6]
 8001876:	b29a      	uxth	r2, r3
 8001878:	2301      	movs	r3, #1
 800187a:	9302      	str	r3, [sp, #8]
 800187c:	2301      	movs	r3, #1
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	f107 030d 	add.w	r3, r7, #13
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2301      	movs	r3, #1
 8001888:	4835      	ldr	r0, [pc, #212]	; (8001960 <_Z9writeBitshhhhh+0x114>)
 800188a:	f005 fa0f 	bl	8006cac <HAL_I2C_Mem_Read>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <_Z9writeBitshhhhh+0x58>
    MX_I2C1_Init();
 800189e:	f002 fe37 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80018a2:	e7e5      	b.n	8001870 <_Z9writeBitshhhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d14c      	bne.n	8001948 <_Z9writeBitshhhhh+0xfc>
    uint8_t b = buffer;
 80018ae:	7b7b      	ldrb	r3, [r7, #13]
 80018b0:	733b      	strb	r3, [r7, #12]
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80018b2:	793b      	ldrb	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	1e5a      	subs	r2, r3, #1
 80018bc:	7979      	ldrb	r1, [r7, #5]
 80018be:	793b      	ldrb	r3, [r7, #4]
 80018c0:	1acb      	subs	r3, r1, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	73bb      	strb	r3, [r7, #14]
    data <<= (bitStart - length + 1); // shift data into correct position
 80018ca:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018ce:	7979      	ldrb	r1, [r7, #5]
 80018d0:	793b      	ldrb	r3, [r7, #4]
 80018d2:	1acb      	subs	r3, r1, r3
 80018d4:	3301      	adds	r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	f887 3020 	strb.w	r3, [r7, #32]
    data &= mask; // zero all non-important bits in data
 80018de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018e2:	7bbb      	ldrb	r3, [r7, #14]
 80018e4:	4013      	ands	r3, r2
 80018e6:	f887 3020 	strb.w	r3, [r7, #32]
    b &= ~(mask); // zero all important bits in existing byte
 80018ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	b25a      	sxtb	r2, r3
 80018f2:	7b3b      	ldrb	r3, [r7, #12]
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	4013      	ands	r3, r2
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	733b      	strb	r3, [r7, #12]
    b |= data; // combine data with existing byte
 80018fe:	7b3a      	ldrb	r2, [r7, #12]
 8001900:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001904:	4313      	orrs	r3, r2
 8001906:	b2db      	uxtb	r3, r3
 8001908:	733b      	strb	r3, [r7, #12]
    sendBuf[1] = b ;
 800190a:	7b3a      	ldrb	r2, [r7, #12]
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <_Z9writeBitshhhhh+0x110>)
 800190e:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	b299      	uxth	r1, r3
 8001914:	79bb      	ldrb	r3, [r7, #6]
 8001916:	b29a      	uxth	r2, r3
 8001918:	2301      	movs	r3, #1
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2301      	movs	r3, #1
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2301      	movs	r3, #1
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <_Z9writeBitshhhhh+0x114>)
 800192a:	f005 f8c5 	bl	8006ab8 <HAL_I2C_Mem_Write>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf14      	ite	ne
 8001934:	2301      	movne	r3, #1
 8001936:	2300      	moveq	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <_Z9writeBitshhhhh+0xf8>
       MX_I2C1_Init();
 800193e:	f002 fde7 	bl	8004510 <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001942:	e7e5      	b.n	8001910 <_Z9writeBitshhhhh+0xc4>
    }
    response = BCM2835_I2C_REASON_OK;
 8001944:	2301      	movs	r3, #1
 8001946:	73fb      	strb	r3, [r7, #15]
    }
  return response == BCM2835_I2C_REASON_OK;
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b01      	cmp	r3, #1
 800194c:	bf0c      	ite	eq
 800194e:	2301      	moveq	r3, #1
 8001950:	2300      	movne	r3, #0
 8001952:	b2db      	uxtb	r3, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bd90      	pop	{r4, r7, pc}
 800195c:	20000394 	.word	0x20000394
 8001960:	20000698 	.word	0x20000698

08001964 <_Z9writeBytehhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af04      	add	r7, sp, #16
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	460b      	mov	r3, r1
 8001970:	71bb      	strb	r3, [r7, #6]
 8001972:	4613      	mov	r3, r2
 8001974:	717b      	strb	r3, [r7, #5]

  sendBuf[0] = regAddr;
 8001976:	4a15      	ldr	r2, [pc, #84]	; (80019cc <_Z9writeBytehhh+0x68>)
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	7013      	strb	r3, [r2, #0]
  sendBuf[1] = data;
 800197c:	797a      	ldrb	r2, [r7, #5]
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <_Z9writeBytehhh+0x68>)
 8001980:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	b299      	uxth	r1, r3
 8001986:	79bb      	ldrb	r3, [r7, #6]
 8001988:	b29a      	uxth	r2, r3
 800198a:	2301      	movs	r3, #1
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	2301      	movs	r3, #1
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	1d7b      	adds	r3, r7, #5
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	480d      	ldr	r0, [pc, #52]	; (80019d0 <_Z9writeBytehhh+0x6c>)
 800199a:	f005 f88d 	bl	8006ab8 <HAL_I2C_Mem_Write>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf14      	ite	ne
 80019a4:	2301      	movne	r3, #1
 80019a6:	2300      	moveq	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <_Z9writeBytehhh+0x50>
     MX_I2C1_Init();
 80019ae:	f002 fdaf 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 80019b2:	e7e6      	b.n	8001982 <_Z9writeBytehhh+0x1e>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	bf0c      	ite	eq
 80019be:	2301      	moveq	r3, #1
 80019c0:	2300      	movne	r3, #0
 80019c2:	b2db      	uxtb	r3, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000394 	.word	0x20000394
 80019d0:	20000698 	.word	0x20000698

080019d4 <_Z9writeWordhht>:
    data[i] = (buffer[i*2] << 8) | buffer[i*2+1] ;
  }
  return  response == BCM2835_I2C_REASON_OK ;
}

bool writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af04      	add	r7, sp, #16
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
 80019de:	460b      	mov	r3, r1
 80019e0:	71bb      	strb	r3, [r7, #6]
 80019e2:	4613      	mov	r3, r2
 80019e4:	80bb      	strh	r3, [r7, #4]

  sendBuf[0] = (uint8_t) (data >> 8); //MSByte
 80019e6:	88bb      	ldrh	r3, [r7, #4]
 80019e8:	121b      	asrs	r3, r3, #8
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <_Z9writeWordhht+0x70>)
 80019ee:	701a      	strb	r2, [r3, #0]
  sendBuf[1] = (uint8_t) (data >> 0); //LSByte
 80019f0:	88bb      	ldrh	r3, [r7, #4]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <_Z9writeWordhht+0x70>)
 80019f6:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	b299      	uxth	r1, r3
 80019fc:	79bb      	ldrb	r3, [r7, #6]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	2301      	movs	r3, #1
 8001a02:	9302      	str	r3, [sp, #8]
 8001a04:	2302      	movs	r3, #2
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <_Z9writeWordhht+0x70>)
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	480e      	ldr	r0, [pc, #56]	; (8001a48 <_Z9writeWordhht+0x74>)
 8001a10:	f005 f852 	bl	8006ab8 <HAL_I2C_Mem_Write>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bf14      	ite	ne
 8001a1a:	2301      	movne	r3, #1
 8001a1c:	2300      	moveq	r3, #0
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <_Z9writeWordhht+0x56>
     MX_I2C1_Init();
 8001a24:	f002 fd74 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 8001a28:	e7e6      	b.n	80019f8 <_Z9writeWordhht+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	bf0c      	ite	eq
 8001a34:	2301      	moveq	r3, #1
 8001a36:	2300      	movne	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000394 	.word	0x20000394
 8001a48:	20000698 	.word	0x20000698

08001a4c <_Z10writeByteshhhPh>:

bool writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af04      	add	r7, sp, #16
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	71bb      	strb	r3, [r7, #6]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  for (i = 0; i < length; i++) {
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	797b      	ldrb	r3, [r7, #5]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d20a      	bcs.n	8001a82 <_Z10writeByteshhhPh+0x36>
    sendBuf[i] = data[i] ;
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	441a      	add	r2, r3
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	7811      	ldrb	r1, [r2, #0]
 8001a76:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <_Z10writeByteshhhPh+0x84>)
 8001a78:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < length; i++) {
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e7f0      	b.n	8001a64 <_Z10writeByteshhhPh+0x18>
  }
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	b299      	uxth	r1, r3
 8001a86:	79bb      	ldrb	r3, [r7, #6]
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	797b      	ldrb	r3, [r7, #5]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	2001      	movs	r0, #1
 8001a90:	9002      	str	r0, [sp, #8]
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <_Z10writeByteshhhPh+0x84>)
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2301      	movs	r3, #1
 8001a9a:	480e      	ldr	r0, [pc, #56]	; (8001ad4 <_Z10writeByteshhhPh+0x88>)
 8001a9c:	f005 f80c 	bl	8006ab8 <HAL_I2C_Mem_Write>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <_Z10writeByteshhhPh+0x6a>
     MX_I2C1_Init();
 8001ab0:	f002 fd2e 	bl	8004510 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001ab4:	e7e5      	b.n	8001a82 <_Z10writeByteshhhPh+0x36>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73bb      	strb	r3, [r7, #14]
  return response == BCM2835_I2C_REASON_OK ;
 8001aba:	7bbb      	ldrb	r3, [r7, #14]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000394 	.word	0x20000394
 8001ad4:	20000698 	.word	0x20000698

08001ad8 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f00b ffa3 	bl	800da2c <cosf>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f00b ffcf 	bl	800da9c <sinf>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f00c f81f 	bl	800db54 <sqrtf>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_Z17MPU6050_resetFIFOv>:
 * @brief Clears the FIFO (First In First Out) of the MPU6050
 * 
 * --Custom Method!
 */
void MPU6050_resetFIFO()
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  writeBit(MPU6050_Adresse, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8001b24:	2301      	movs	r3, #1
 8001b26:	2202      	movs	r2, #2
 8001b28:	216a      	movs	r1, #106	; 0x6a
 8001b2a:	20d0      	movs	r0, #208	; 0xd0
 8001b2c:	f7ff fe12 	bl	8001754 <_Z8writeBithhhh>
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_Z17clearFIFO_OF_Flagv>:
 * @brief //NOTDONE
 * 
 * 
 */
void clearFIFO_OF_Flag()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  readByte(MPU6050_Adresse, MPU6050_RA_INT_STATUS, MPU6050_RX_buf);
 8001b38:	4a03      	ldr	r2, [pc, #12]	; (8001b48 <_Z17clearFIFO_OF_Flagv+0x14>)
 8001b3a:	213a      	movs	r1, #58	; 0x3a
 8001b3c:	20d0      	movs	r0, #208	; 0xd0
 8001b3e:	f7ff fd59 	bl	80015f4 <_Z8readBytehhPh>
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200004d4 	.word	0x200004d4

08001b4c <_Z28MPU6050_WaitForQuaternionSetv>:
 * @brief Waits until a new Quaternion-set is available in the FIFO
 * 
 * --Custom Method!
 */
void MPU6050_WaitForQuaternionSet()
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_COUNTH, 2, MPU6050_RX_buf);  //get FIFO count
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <_Z28MPU6050_WaitForQuaternionSetv+0x68>)
 8001b52:	2202      	movs	r2, #2
 8001b54:	2172      	movs	r1, #114	; 0x72
 8001b56:	20d0      	movs	r0, #208	; 0xd0
 8001b58:	f7ff fd86 	bl	8001668 <_Z9readByteshhhPh>
  FIFOCounter = (((uint16_t)MPU6050_RX_buf[0]) << 8) | MPU6050_RX_buf[1]; //assemble FIFO count
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <_Z28MPU6050_WaitForQuaternionSetv+0x68>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	b21a      	sxth	r2, r3
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <_Z28MPU6050_WaitForQuaternionSetv+0x68>)
 8001b66:	785b      	ldrb	r3, [r3, #1]
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b21b      	sxth	r3, r3
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <_Z28MPU6050_WaitForQuaternionSetv+0x6c>)
 8001b72:	801a      	strh	r2, [r3, #0]
  if (FIFOCounter > 200)
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <_Z28MPU6050_WaitForQuaternionSetv+0x6c>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	2bc8      	cmp	r3, #200	; 0xc8
 8001b7a:	d901      	bls.n	8001b80 <_Z28MPU6050_WaitForQuaternionSetv+0x34>
  {
    MPU6050_resetFIFO();
 8001b7c:	f7ff ffd0 	bl	8001b20 <_Z17MPU6050_resetFIFOv>
  }
  
  while (FIFOCounter < 42)                                                //wait until there are more than 42 bytes in the FIFO
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <_Z28MPU6050_WaitForQuaternionSetv+0x6c>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	2b29      	cmp	r3, #41	; 0x29
 8001b86:	d812      	bhi.n	8001bae <_Z28MPU6050_WaitForQuaternionSetv+0x62>
  {
    readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_COUNTH, 2, MPU6050_RX_buf);  //get FIFO count
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <_Z28MPU6050_WaitForQuaternionSetv+0x68>)
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	2172      	movs	r1, #114	; 0x72
 8001b8e:	20d0      	movs	r0, #208	; 0xd0
 8001b90:	f7ff fd6a 	bl	8001668 <_Z9readByteshhhPh>
    FIFOCounter = (((uint16_t)MPU6050_RX_buf[0]) << 8) | MPU6050_RX_buf[1]; //assemble FIFO count
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <_Z28MPU6050_WaitForQuaternionSetv+0x68>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	b21a      	sxth	r2, r3
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <_Z28MPU6050_WaitForQuaternionSetv+0x68>)
 8001b9e:	785b      	ldrb	r3, [r3, #1]
 8001ba0:	b21b      	sxth	r3, r3
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <_Z28MPU6050_WaitForQuaternionSetv+0x6c>)
 8001baa:	801a      	strh	r2, [r3, #0]
  while (FIFOCounter < 42)                                                //wait until there are more than 42 bytes in the FIFO
 8001bac:	e7e8      	b.n	8001b80 <_Z28MPU6050_WaitForQuaternionSetv+0x34>
  }
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200004d4 	.word	0x200004d4
 8001bb8:	200004e4 	.word	0x200004e4

08001bbc <_Z28MPU6050_ConvertToQuaternionsv>:
 * @brief Reads a Quaternion-set from the FIFO and assembles the data to W,X,Y,Z
 * 
 * --Custom Method!
 */
void MPU6050_ConvertToQuaternions()
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  if ((FIFOCounter == 42) | (FIFOCounter == 84))
 8001bc0:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4b3f      	ldr	r3, [pc, #252]	; (8001ccc <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	2b54      	cmp	r3, #84	; 0x54
 8001bd4:	bf0c      	ite	eq
 8001bd6:	2301      	moveq	r3, #1
 8001bd8:	2300      	movne	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d071      	beq.n	8001cc8 <_Z28MPU6050_ConvertToQuaternionsv+0x10c>
  {
    readBytes(MPU6050_Adresse, MPU6050_RA_FIFO_R_W, 16, MPU6050_RX_buf);      //get FIFO data
 8001be4:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001be6:	2210      	movs	r2, #16
 8001be8:	2174      	movs	r1, #116	; 0x74
 8001bea:	20d0      	movs	r0, #208	; 0xd0
 8001bec:	f7ff fd3c 	bl	8001668 <_Z9readByteshhhPh>
    MPUoutputQuaternion[0] = (float)(((int32_t)MPU6050_RX_buf[0] << 24)  | ((int32_t)MPU6050_RX_buf[1] << 16)  | ((int32_t)MPU6050_RX_buf[2] << 8)  | MPU6050_RX_buf[3 ]) / 1073741824;
 8001bf0:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	061a      	lsls	r2, r3, #24
 8001bf6:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001bf8:	785b      	ldrb	r3, [r3, #1]
 8001bfa:	041b      	lsls	r3, r3, #16
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c00:	789b      	ldrb	r3, [r3, #2]
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	4313      	orrs	r3, r2
 8001c06:	4a32      	ldr	r2, [pc, #200]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c08:	78d2      	ldrb	r2, [r2, #3]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff f8a1 	bl	8000d54 <__aeabi_i2f>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff f9a3 	bl	8000f64 <__aeabi_fdiv>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b2c      	ldr	r3, [pc, #176]	; (8001cd4 <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001c24:	601a      	str	r2, [r3, #0]
    MPUoutputQuaternion[1] = (float)(((int32_t)MPU6050_RX_buf[4] << 24)  | ((int32_t)MPU6050_RX_buf[5] << 16)  | ((int32_t)MPU6050_RX_buf[6] << 8)  | MPU6050_RX_buf[7 ]) / 1073741824;
 8001c26:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c28:	791b      	ldrb	r3, [r3, #4]
 8001c2a:	061a      	lsls	r2, r3, #24
 8001c2c:	4b28      	ldr	r3, [pc, #160]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c2e:	795b      	ldrb	r3, [r3, #5]
 8001c30:	041b      	lsls	r3, r3, #16
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c36:	799b      	ldrb	r3, [r3, #6]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	4a24      	ldr	r2, [pc, #144]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c3e:	79d2      	ldrb	r2, [r2, #7]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f886 	bl	8000d54 <__aeabi_i2f>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f988 	bl	8000f64 <__aeabi_fdiv>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001c5a:	605a      	str	r2, [r3, #4]
    MPUoutputQuaternion[2] = (float)(((int32_t)MPU6050_RX_buf[8] << 24)  | ((int32_t)MPU6050_RX_buf[9] << 16)  | ((int32_t)MPU6050_RX_buf[10] << 8) | MPU6050_RX_buf[11]) / 1073741824;
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c5e:	7a1b      	ldrb	r3, [r3, #8]
 8001c60:	061a      	lsls	r2, r3, #24
 8001c62:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c64:	7a5b      	ldrb	r3, [r3, #9]
 8001c66:	041b      	lsls	r3, r3, #16
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c6c:	7a9b      	ldrb	r3, [r3, #10]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	4313      	orrs	r3, r2
 8001c72:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c74:	7ad2      	ldrb	r2, [r2, #11]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff f86b 	bl	8000d54 <__aeabi_i2f>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff f96d 	bl	8000f64 <__aeabi_fdiv>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001c90:	609a      	str	r2, [r3, #8]
    MPUoutputQuaternion[3] = (float)(((int32_t)MPU6050_RX_buf[12] << 24) | ((int32_t)MPU6050_RX_buf[13] << 16) | ((int32_t)MPU6050_RX_buf[14] << 8) | MPU6050_RX_buf[15]) / 1073741824;
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c94:	7b1b      	ldrb	r3, [r3, #12]
 8001c96:	061a      	lsls	r2, r3, #24
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c9a:	7b5b      	ldrb	r3, [r3, #13]
 8001c9c:	041b      	lsls	r3, r3, #16
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001ca2:	7b9b      	ldrb	r3, [r3, #14]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001caa:	7bd2      	ldrb	r2, [r2, #15]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff f850 	bl	8000d54 <__aeabi_i2f>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff f952 	bl	8000f64 <__aeabi_fdiv>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001cc6:	60da      	str	r2, [r3, #12]
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200004e4 	.word	0x200004e4
 8001cd0:	200004d4 	.word	0x200004d4
 8001cd4:	20000494 	.word	0x20000494

08001cd8 <_Z27MPU6050_GetOriginQuaternionv>:
 * @brief Saves the current MPU6050 raw Quaternion as the Origin Quaternion
 * 
 * --Custom Method!
 */
void MPU6050_GetOriginQuaternion()
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  OriginQuaternion[0] = MPUoutputQuaternion[0];
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001ce2:	6013      	str	r3, [r2, #0]
  OriginQuaternion[1] = MPUoutputQuaternion[1];
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001cea:	6053      	str	r3, [r2, #4]
  OriginQuaternion[2] = MPUoutputQuaternion[2];
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001cf2:	6093      	str	r3, [r2, #8]
  OriginQuaternion[3] = MPUoutputQuaternion[3];
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4a03      	ldr	r2, [pc, #12]	; (8001d08 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001cfa:	60d3      	str	r3, [r2, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	20000494 	.word	0x20000494
 8001d08:	200004a4 	.word	0x200004a4

08001d0c <_Z28update_FrameOriginQuaternionv>:
 * It does this to then be able to apply that Quaternion rotation to the W-Quaternion
 * 
 * --Custom Method!
 */
void update_FrameOriginQuaternion()
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
  updateQuaternion[0] = cos((float)SBUS_Channels[3] / 10000);                   //create rotation Quaternion
 8001d12:	4b44      	ldr	r3, [pc, #272]	; (8001e24 <_Z28update_FrameOriginQuaternionv+0x118>)
 8001d14:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff f81b 	bl	8000d54 <__aeabi_i2f>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4941      	ldr	r1, [pc, #260]	; (8001e28 <_Z28update_FrameOriginQuaternionv+0x11c>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f91e 	bl	8000f64 <__aeabi_fdiv>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fed4 	bl	8001ad8 <_ZSt3cosf>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4a3e      	ldr	r2, [pc, #248]	; (8001e2c <_Z28update_FrameOriginQuaternionv+0x120>)
 8001d34:	6013      	str	r3, [r2, #0]
  updateQuaternion[1] = (float)sin((float)SBUS_Channels[1] / (float)10000);
 8001d36:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <_Z28update_FrameOriginQuaternionv+0x118>)
 8001d38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff f809 	bl	8000d54 <__aeabi_i2f>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4938      	ldr	r1, [pc, #224]	; (8001e28 <_Z28update_FrameOriginQuaternionv+0x11c>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff f90c 	bl	8000f64 <__aeabi_fdiv>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fece 	bl	8001af0 <_ZSt3sinf>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4a35      	ldr	r2, [pc, #212]	; (8001e2c <_Z28update_FrameOriginQuaternionv+0x120>)
 8001d58:	6053      	str	r3, [r2, #4]
  updateQuaternion[2] = (float)sin((float)SBUS_Channels[0] / (float)10000);
 8001d5a:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <_Z28update_FrameOriginQuaternionv+0x118>)
 8001d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fff7 	bl	8000d54 <__aeabi_i2f>
 8001d66:	4603      	mov	r3, r0
 8001d68:	492f      	ldr	r1, [pc, #188]	; (8001e28 <_Z28update_FrameOriginQuaternionv+0x11c>)
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff f8fa 	bl	8000f64 <__aeabi_fdiv>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff febc 	bl	8001af0 <_ZSt3sinf>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4a2c      	ldr	r2, [pc, #176]	; (8001e2c <_Z28update_FrameOriginQuaternionv+0x120>)
 8001d7c:	6093      	str	r3, [r2, #8]
  updateQuaternion[3] = sin((float)SBUS_Channels[3] / 10000);
 8001d7e:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <_Z28update_FrameOriginQuaternionv+0x118>)
 8001d80:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe ffe5 	bl	8000d54 <__aeabi_i2f>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4926      	ldr	r1, [pc, #152]	; (8001e28 <_Z28update_FrameOriginQuaternionv+0x11c>)
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff f8e8 	bl	8000f64 <__aeabi_fdiv>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff feaa 	bl	8001af0 <_ZSt3sinf>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4a23      	ldr	r2, [pc, #140]	; (8001e2c <_Z28update_FrameOriginQuaternionv+0x120>)
 8001da0:	60d3      	str	r3, [r2, #12]

  float *p1 = QuaternionNormalize(&updateQuaternion[0]);                        //normalize
 8001da2:	4822      	ldr	r0, [pc, #136]	; (8001e2c <_Z28update_FrameOriginQuaternionv+0x120>)
 8001da4:	f000 fb68 	bl	8002478 <_Z19QuaternionNormalizePf>
 8001da8:	60f8      	str	r0, [r7, #12]
  updateQuaternion[0] = *p1;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1f      	ldr	r2, [pc, #124]	; (8001e2c <_Z28update_FrameOriginQuaternionv+0x120>)
 8001db0:	6013      	str	r3, [r2, #0]
  updateQuaternion[1] = *(p1 + 1);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <_Z28update_FrameOriginQuaternionv+0x120>)
 8001db8:	6053      	str	r3, [r2, #4]
  updateQuaternion[2] = *(p1 + 2);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <_Z28update_FrameOriginQuaternionv+0x120>)
 8001dc0:	6093      	str	r3, [r2, #8]
  updateQuaternion[3] = *(p1 + 3);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <_Z28update_FrameOriginQuaternionv+0x120>)
 8001dc8:	60d3      	str	r3, [r2, #12]

  float *p2 = QuaternionProduct(&updateQuaternion[0], &LoopWQuaternion[0]);     //apply the Rotation
 8001dca:	4919      	ldr	r1, [pc, #100]	; (8001e30 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001dcc:	4817      	ldr	r0, [pc, #92]	; (8001e2c <_Z28update_FrameOriginQuaternionv+0x120>)
 8001dce:	f000 fa13 	bl	80021f8 <_Z17QuaternionProductPfS_>
 8001dd2:	60b8      	str	r0, [r7, #8]
  LoopWQuaternion[0] = *p2;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001dda:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p2 + 1);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001de2:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p2 + 2);
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001dea:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p2 + 3);
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4a0f      	ldr	r2, [pc, #60]	; (8001e30 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001df2:	60d3      	str	r3, [r2, #12]

    float *p3 = QuaternionNormalize(&LoopWQuaternion[0]);                       //normalize
 8001df4:	480e      	ldr	r0, [pc, #56]	; (8001e30 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001df6:	f000 fb3f 	bl	8002478 <_Z19QuaternionNormalizePf>
 8001dfa:	6078      	str	r0, [r7, #4]
  LoopWQuaternion[0] = *p3;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001e02:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p3 + 1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001e0a:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p3 + 2);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001e12:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p3 + 3);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <_Z28update_FrameOriginQuaternionv+0x124>)
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000638 	.word	0x20000638
 8001e28:	461c4000 	.word	0x461c4000
 8001e2c:	200004c4 	.word	0x200004c4
 8001e30:	20000010 	.word	0x20000010

08001e34 <_Z12MPU6050_initv>:
 * @brief Initializes the MPU6050 and initializes and starts the DMP functionality
 * 
 * --Custom Method!
 */
void MPU6050_init()
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);  //disable SBUS pin interrupt
 8001e38:	2006      	movs	r0, #6
 8001e3a:	f004 fae0 	bl	80063fe <HAL_NVIC_DisableIRQ>
  HAL_Delay(5);
 8001e3e:	2005      	movs	r0, #5
 8001e40:	f003 fe7a 	bl	8005b38 <HAL_Delay>
  mpu.initialize();                 //initialize that object
 8001e44:	481b      	ldr	r0, [pc, #108]	; (8001eb4 <_Z12MPU6050_initv+0x80>)
 8001e46:	f000 fb9a 	bl	800257e <_ZN7MPU605010initializeEv>
  HAL_Delay(10);
 8001e4a:	200a      	movs	r0, #10
 8001e4c:	f003 fe74 	bl	8005b38 <HAL_Delay>
  mpu.dmpInitialize();              //initialize DMP (Digital Motion Processing)
 8001e50:	4818      	ldr	r0, [pc, #96]	; (8001eb4 <_Z12MPU6050_initv+0x80>)
 8001e52:	f001 f8c1 	bl	8002fd8 <_ZN7MPU605013dmpInitializeEv>
  HAL_Delay(5);
 8001e56:	2005      	movs	r0, #5
 8001e58:	f003 fe6e 	bl	8005b38 <HAL_Delay>
  mpu.setXGyroOffset(-169);         //apply custom offset values
 8001e5c:	f06f 01a8 	mvn.w	r1, #168	; 0xa8
 8001e60:	4814      	ldr	r0, [pc, #80]	; (8001eb4 <_Z12MPU6050_initv+0x80>)
 8001e62:	f000 fdd6 	bl	8002a12 <_ZN7MPU605014setXGyroOffsetEs>
  mpu.setYGyroOffset(165);
 8001e66:	21a5      	movs	r1, #165	; 0xa5
 8001e68:	4812      	ldr	r0, [pc, #72]	; (8001eb4 <_Z12MPU6050_initv+0x80>)
 8001e6a:	f000 fde3 	bl	8002a34 <_ZN7MPU605014setYGyroOffsetEs>
  mpu.setZGyroOffset(110);
 8001e6e:	216e      	movs	r1, #110	; 0x6e
 8001e70:	4810      	ldr	r0, [pc, #64]	; (8001eb4 <_Z12MPU6050_initv+0x80>)
 8001e72:	f000 fdf0 	bl	8002a56 <_ZN7MPU605014setZGyroOffsetEs>
  mpu.setXAccelOffset(4599);
 8001e76:	f241 11f7 	movw	r1, #4599	; 0x11f7
 8001e7a:	480e      	ldr	r0, [pc, #56]	; (8001eb4 <_Z12MPU6050_initv+0x80>)
 8001e7c:	f000 fd96 	bl	80029ac <_ZN7MPU605015setXAccelOffsetEs>
  mpu.setYAccelOffset(-951);
 8001e80:	490d      	ldr	r1, [pc, #52]	; (8001eb8 <_Z12MPU6050_initv+0x84>)
 8001e82:	480c      	ldr	r0, [pc, #48]	; (8001eb4 <_Z12MPU6050_initv+0x80>)
 8001e84:	f000 fda3 	bl	80029ce <_ZN7MPU605015setYAccelOffsetEs>
  mpu.setZAccelOffset(1930);
 8001e88:	f240 718a 	movw	r1, #1930	; 0x78a
 8001e8c:	4809      	ldr	r0, [pc, #36]	; (8001eb4 <_Z12MPU6050_initv+0x80>)
 8001e8e:	f000 fdaf 	bl	80029f0 <_ZN7MPU605015setZAccelOffsetEs>

    mpu.setDMPEnabled(true);        //enable DMP
 8001e92:	2101      	movs	r1, #1
 8001e94:	4807      	ldr	r0, [pc, #28]	; (8001eb4 <_Z12MPU6050_initv+0x80>)
 8001e96:	f000 fdef 	bl	8002a78 <_ZN7MPU605013setDMPEnabledEb>

  MPU6050_resetFIFO();              //reset FIFO
 8001e9a:	f7ff fe41 	bl	8001b20 <_Z17MPU6050_resetFIFOv>
  clearFIFO_OF_Flag();
 8001e9e:	f7ff fe49 	bl	8001b34 <_Z17clearFIFO_OF_Flagv>
  MPU6050_WaitForQuaternionSet();
 8001ea2:	f7ff fe53 	bl	8001b4c <_Z28MPU6050_WaitForQuaternionSetv>
  MPU6050_ConvertToQuaternions();
 8001ea6:	f7ff fe89 	bl	8001bbc <_Z28MPU6050_ConvertToQuaternionsv>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   //enable SBUS pin interrupt
 8001eaa:	2006      	movs	r0, #6
 8001eac:	f004 fa99 	bl	80063e2 <HAL_NVIC_EnableIRQ>
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	200004e8 	.word	0x200004e8
 8001eb8:	fffffc49 	.word	0xfffffc49

08001ebc <_Z19MPU6050_calibrationv>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void MPU6050_calibration()//NOTDONE comment
{
 8001ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ec0:	b0db      	sub	sp, #364	; 0x16c
 8001ec2:	af06      	add	r7, sp, #24
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);  //disable SBUS pin interrupt
 8001ec4:	2006      	movs	r0, #6
 8001ec6:	f004 fa9a 	bl	80063fe <HAL_NVIC_DisableIRQ>
  uint8_t MPU_calibrated = false;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
  while (MPU_calibrated == false)
 8001ed0:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f040 8173 	bne.w	80021c0 <_Z19MPU6050_calibrationv+0x304>
  {
    uint16_t counter = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8a7 3148 	strh.w	r3, [r7, #328]	; 0x148
    MPU6050_resetFIFO();              //reset FIFO
 8001ee0:	f7ff fe1e 	bl	8001b20 <_Z17MPU6050_resetFIFOv>
    clearFIFO_OF_Flag();
 8001ee4:	f7ff fe26 	bl	8001b34 <_Z17clearFIFO_OF_Flagv>
    MPU6050_WaitForQuaternionSet();
 8001ee8:	f7ff fe30 	bl	8001b4c <_Z28MPU6050_WaitForQuaternionSetv>
    MPU6050_ConvertToQuaternions();
 8001eec:	f7ff fe66 	bl	8001bbc <_Z28MPU6050_ConvertToQuaternionsv>
    MPU6050_GetOriginQuaternion();
 8001ef0:	f7ff fef2 	bl	8001cd8 <_Z27MPU6050_GetOriginQuaternionv>
    get_XW_diffAngles();
 8001ef4:	f001 fb34 	bl	8003560 <_Z17get_XW_diffAnglesv>

    uint16_t oldTime = TIM11->CNT;
 8001ef8:	4bb7      	ldr	r3, [pc, #732]	; (80021d8 <_Z19MPU6050_calibrationv+0x31c>)
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a

    float startAngles[3] = {
    PID_Pitch_xw_diff,
    PID_Roll_xw_diff ,
    PID_Yaw_xw_diff  };
 8001f00:	4bb6      	ldr	r3, [pc, #728]	; (80021dc <_Z19MPU6050_calibrationv+0x320>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001f08:	4bb5      	ldr	r3, [pc, #724]	; (80021e0 <_Z19MPU6050_calibrationv+0x324>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001f10:	4bb4      	ldr	r3, [pc, #720]	; (80021e4 <_Z19MPU6050_calibrationv+0x328>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    while 
    (                                                                                                                                     \
    (startAngles[0] - PID_Pitch_xw_diff < MPU6050_cal_Pitch_MaxDev) & (startAngles[0] - PID_Pitch_xw_diff > -MPU6050_cal_Pitch_MaxDev) &  \
 8001f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f1c:	4aaf      	ldr	r2, [pc, #700]	; (80021dc <_Z19MPU6050_calibrationv+0x320>)
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fe60 	bl	8000be8 <__aeabi_fsub>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4614      	mov	r4, r2
 8001f2e:	49ae      	ldr	r1, [pc, #696]	; (80021e8 <_Z19MPU6050_calibrationv+0x32c>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f901 	bl	8001138 <__aeabi_fcmplt>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <_Z19MPU6050_calibrationv+0x84>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	461c      	mov	r4, r3
 8001f40:	b2e4      	uxtb	r4, r4
 8001f42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f46:	4aa5      	ldr	r2, [pc, #660]	; (80021dc <_Z19MPU6050_calibrationv+0x320>)
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fe4b 	bl	8000be8 <__aeabi_fsub>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2201      	movs	r2, #1
 8001f56:	4615      	mov	r5, r2
 8001f58:	49a4      	ldr	r1, [pc, #656]	; (80021ec <_Z19MPU6050_calibrationv+0x330>)
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f90a 	bl	8001174 <__aeabi_fcmpgt>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <_Z19MPU6050_calibrationv+0xae>
 8001f66:	2300      	movs	r3, #0
 8001f68:	461d      	mov	r5, r3
 8001f6a:	b2eb      	uxtb	r3, r5
 8001f6c:	4023      	ands	r3, r4
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461c      	mov	r4, r3
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 8001f72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f76:	4a9a      	ldr	r2, [pc, #616]	; (80021e0 <_Z19MPU6050_calibrationv+0x324>)
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fe33 	bl	8000be8 <__aeabi_fsub>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2201      	movs	r2, #1
 8001f86:	4615      	mov	r5, r2
 8001f88:	4997      	ldr	r1, [pc, #604]	; (80021e8 <_Z19MPU6050_calibrationv+0x32c>)
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff f8d4 	bl	8001138 <__aeabi_fcmplt>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <_Z19MPU6050_calibrationv+0xde>
 8001f96:	2300      	movs	r3, #0
 8001f98:	461d      	mov	r5, r3
 8001f9a:	b2eb      	uxtb	r3, r5
    (startAngles[0] - PID_Pitch_xw_diff < MPU6050_cal_Pitch_MaxDev) & (startAngles[0] - PID_Pitch_xw_diff > -MPU6050_cal_Pitch_MaxDev) &  \
 8001f9c:	401c      	ands	r4, r3
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 8001f9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001fa2:	4a8f      	ldr	r2, [pc, #572]	; (80021e0 <_Z19MPU6050_calibrationv+0x324>)
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fe1d 	bl	8000be8 <__aeabi_fsub>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4615      	mov	r5, r2
 8001fb4:	498d      	ldr	r1, [pc, #564]	; (80021ec <_Z19MPU6050_calibrationv+0x330>)
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff f8dc 	bl	8001174 <__aeabi_fcmpgt>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <_Z19MPU6050_calibrationv+0x10a>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	461d      	mov	r5, r3
 8001fc6:	b2eb      	uxtb	r3, r5
 8001fc8:	401c      	ands	r4, r3
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 8001fca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001fce:	4a85      	ldr	r2, [pc, #532]	; (80021e4 <_Z19MPU6050_calibrationv+0x328>)
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fe07 	bl	8000be8 <__aeabi_fsub>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4615      	mov	r5, r2
 8001fe0:	4981      	ldr	r1, [pc, #516]	; (80021e8 <_Z19MPU6050_calibrationv+0x32c>)
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff f8a8 	bl	8001138 <__aeabi_fcmplt>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <_Z19MPU6050_calibrationv+0x136>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	461d      	mov	r5, r3
 8001ff2:	b2eb      	uxtb	r3, r5
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 8001ff4:	401c      	ands	r4, r3
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 8001ff6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001ffa:	4a7a      	ldr	r2, [pc, #488]	; (80021e4 <_Z19MPU6050_calibrationv+0x328>)
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fdf1 	bl	8000be8 <__aeabi_fsub>
 8002006:	4603      	mov	r3, r0
 8002008:	2201      	movs	r2, #1
 800200a:	4615      	mov	r5, r2
 800200c:	4977      	ldr	r1, [pc, #476]	; (80021ec <_Z19MPU6050_calibrationv+0x330>)
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff f8b0 	bl	8001174 <__aeabi_fcmpgt>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <_Z19MPU6050_calibrationv+0x162>
 800201a:	2300      	movs	r3, #0
 800201c:	461d      	mov	r5, r3
 800201e:	b2eb      	uxtb	r3, r5
 8002020:	4023      	ands	r3, r4
    (counter < MPU6050_cal_Time)                                                                                                          \
 8002022:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 8002026:	f240 31e7 	movw	r1, #999	; 0x3e7
 800202a:	428a      	cmp	r2, r1
 800202c:	bf94      	ite	ls
 800202e:	2201      	movls	r2, #1
 8002030:	2200      	movhi	r2, #0
 8002032:	b2d2      	uxtb	r2, r2
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 8002034:	4013      	ands	r3, r2
    (counter < MPU6050_cal_Time)                                                                                                          \
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80b3 	beq.w	80021a2 <_Z19MPU6050_calibrationv+0x2e6>
    )                                                                                                                                     \
    {
      MPU6050_resetFIFO();              //reset FIFO
 800203c:	f7ff fd70 	bl	8001b20 <_Z17MPU6050_resetFIFOv>
      clearFIFO_OF_Flag();
 8002040:	f7ff fd78 	bl	8001b34 <_Z17clearFIFO_OF_Flagv>
      MPU6050_WaitForQuaternionSet();
 8002044:	f7ff fd82 	bl	8001b4c <_Z28MPU6050_WaitForQuaternionSetv>
      MPU6050_ConvertToQuaternions();
 8002048:	f7ff fdb8 	bl	8001bbc <_Z28MPU6050_ConvertToQuaternionsv>
      get_XW_diffAngles();
 800204c:	f001 fa88 	bl	8003560 <_Z17get_XW_diffAnglesv>

      for (size_t i = 0; i < 1; i++)
 8002050:	2300      	movs	r3, #0
 8002052:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002056:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 8088 	bne.w	8002170 <_Z19MPU6050_calibrationv+0x2b4>
	      for (size_t i = 0; i < x; i++)
	      {
	      	msgTransmit[i] = msg[i];
	      }
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
      }
 8002060:	466b      	mov	r3, sp
 8002062:	461e      	mov	r6, r3
	      sprintf((char*)msg,"%f %f %f %hu \r\n" \
 8002064:	4b5d      	ldr	r3, [pc, #372]	; (80021dc <_Z19MPU6050_calibrationv+0x320>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fa19 	bl	80004a0 <__aeabi_f2d>
 800206e:	4680      	mov	r8, r0
 8002070:	4689      	mov	r9, r1
 8002072:	4b5b      	ldr	r3, [pc, #364]	; (80021e0 <_Z19MPU6050_calibrationv+0x324>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa12 	bl	80004a0 <__aeabi_f2d>
 800207c:	4604      	mov	r4, r0
 800207e:	460d      	mov	r5, r1
 8002080:	4b58      	ldr	r3, [pc, #352]	; (80021e4 <_Z19MPU6050_calibrationv+0x328>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fa0b 	bl	80004a0 <__aeabi_f2d>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	f8b7 1148 	ldrh.w	r1, [r7, #328]	; 0x148
 8002092:	4638      	mov	r0, r7
 8002094:	9104      	str	r1, [sp, #16]
 8002096:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800209a:	e9cd 4500 	strd	r4, r5, [sp]
 800209e:	4642      	mov	r2, r8
 80020a0:	464b      	mov	r3, r9
 80020a2:	4953      	ldr	r1, [pc, #332]	; (80021f0 <_Z19MPU6050_calibrationv+0x334>)
 80020a4:	f00e f9d2 	bl	801044c <siprintf>
	      uint8_t x = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
	      while (msg[x] != NULL)
 80020ae:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 80020b2:	463a      	mov	r2, r7
 80020b4:	5cd3      	ldrb	r3, [r2, r3]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <_Z19MPU6050_calibrationv+0x20a>
	      	x++;
 80020ba:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 80020be:	3301      	adds	r3, #1
 80020c0:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
	      while (msg[x] != NULL)
 80020c4:	e7f3      	b.n	80020ae <_Z19MPU6050_calibrationv+0x1f2>
	      unsigned char msgTransmit[x];
 80020c6:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 80020ca:	1e5c      	subs	r4, r3, #1
 80020cc:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 80020d0:	4623      	mov	r3, r4
 80020d2:	3301      	adds	r3, #1
 80020d4:	4618      	mov	r0, r3
 80020d6:	f04f 0100 	mov.w	r1, #0
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	00cb      	lsls	r3, r1, #3
 80020e4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80020e8:	00c2      	lsls	r2, r0, #3
 80020ea:	4623      	mov	r3, r4
 80020ec:	3301      	adds	r3, #1
 80020ee:	4618      	mov	r0, r3
 80020f0:	f04f 0100 	mov.w	r1, #0
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	00cb      	lsls	r3, r1, #3
 80020fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002102:	00c2      	lsls	r2, r0, #3
 8002104:	4623      	mov	r3, r4
 8002106:	3301      	adds	r3, #1
 8002108:	3307      	adds	r3, #7
 800210a:	08db      	lsrs	r3, r3, #3
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	ebad 0d03 	sub.w	sp, sp, r3
 8002112:	ab06      	add	r3, sp, #24
 8002114:	3300      	adds	r3, #0
 8002116:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	      for (size_t i = 0; i < x; i++)
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002120:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8002124:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002128:	429a      	cmp	r2, r3
 800212a:	d211      	bcs.n	8002150 <_Z19MPU6050_calibrationv+0x294>
	      	msgTransmit[i] = msg[i];
 800212c:	463a      	mov	r2, r7
 800212e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002132:	4413      	add	r3, r2
 8002134:	7819      	ldrb	r1, [r3, #0]
 8002136:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800213a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800213e:	4413      	add	r3, r2
 8002140:	460a      	mov	r2, r1
 8002142:	701a      	strb	r2, [r3, #0]
	      for (size_t i = 0; i < x; i++)
 8002144:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002148:	3301      	adds	r3, #1
 800214a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800214e:	e7e7      	b.n	8002120 <_Z19MPU6050_calibrationv+0x264>
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 8002150:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8002154:	b2a3      	uxth	r3, r4
 8002156:	3301      	adds	r3, #1
 8002158:	b29b      	uxth	r3, r3
 800215a:	4619      	mov	r1, r3
 800215c:	4610      	mov	r0, r2
 800215e:	f00a fe9f 	bl	800cea0 <CDC_Transmit_FS>
 8002162:	46b5      	mov	sp, r6
      for (size_t i = 0; i < 1; i++)
 8002164:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002168:	3301      	adds	r3, #1
 800216a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800216e:	e772      	b.n	8002056 <_Z19MPU6050_calibrationv+0x19a>

      while ((TIM11->CNT - oldTime) < 10000) ;
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <_Z19MPU6050_calibrationv+0x31c>)
 8002172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002174:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f242 720f 	movw	r2, #9999	; 0x270f
 800217e:	4293      	cmp	r3, r2
 8002180:	bf94      	ite	ls
 8002182:	2301      	movls	r3, #1
 8002184:	2300      	movhi	r3, #0
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d000      	beq.n	800218e <_Z19MPU6050_calibrationv+0x2d2>
 800218c:	e7f0      	b.n	8002170 <_Z19MPU6050_calibrationv+0x2b4>
      oldTime = TIM11->CNT;
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <_Z19MPU6050_calibrationv+0x31c>)
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
      counter += 10;
 8002196:	f8b7 3148 	ldrh.w	r3, [r7, #328]	; 0x148
 800219a:	330a      	adds	r3, #10
 800219c:	f8a7 3148 	strh.w	r3, [r7, #328]	; 0x148
    while 
 80021a0:	e6ba      	b.n	8001f18 <_Z19MPU6050_calibrationv+0x5c>
    }
    if (counter >= MPU6050_cal_Time)
 80021a2:	f8b7 3148 	ldrh.w	r3, [r7, #328]	; 0x148
 80021a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021aa:	d304      	bcc.n	80021b6 <_Z19MPU6050_calibrationv+0x2fa>
    {
      MPU6050_GetOriginQuaternion();
 80021ac:	f7ff fd94 	bl	8001cd8 <_Z27MPU6050_GetOriginQuaternionv>
      MPU_calibrated = true;
 80021b0:	2301      	movs	r3, #1
 80021b2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
    }
    HAL_GPIO_TogglePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin);
 80021b6:	2180      	movs	r1, #128	; 0x80
 80021b8:	480e      	ldr	r0, [pc, #56]	; (80021f4 <_Z19MPU6050_calibrationv+0x338>)
 80021ba:	f004 fb08 	bl	80067ce <HAL_GPIO_TogglePin>
  while (MPU_calibrated == false)
 80021be:	e687      	b.n	8001ed0 <_Z19MPU6050_calibrationv+0x14>
  }
  MPU6050_GetOriginQuaternion();
 80021c0:	f7ff fd8a 	bl	8001cd8 <_Z27MPU6050_GetOriginQuaternionv>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   //enable SBUS pin interrupt
 80021c4:	2006      	movs	r0, #6
 80021c6:	f004 f90c 	bl	80063e2 <HAL_NVIC_EnableIRQ>
}
 80021ca:	bf00      	nop
 80021cc:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 80021d0:	46bd      	mov	sp, r7
 80021d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021d6:	bf00      	nop
 80021d8:	40014800 	.word	0x40014800
 80021dc:	20000534 	.word	0x20000534
 80021e0:	20000538 	.word	0x20000538
 80021e4:	2000053c 	.word	0x2000053c
 80021e8:	40a00000 	.word	0x40a00000
 80021ec:	c0a00000 	.word	0xc0a00000
 80021f0:	08012758 	.word	0x08012758
 80021f4:	40020000 	.word	0x40020000

080021f8 <_Z17QuaternionProductPfS_>:
 * @return float product-Quaternion
 * 
 * --Custom Method!
 */
float *QuaternionProduct(float *q1, float *q2)
{
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  static float q3[4];
  q3[0] = (q1[0] * q2[0]) - (q1[1] * q2[1]) - (q1[2] * q2[2]) - (q1[3] * q2[3]);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f7fe fdf5 	bl	8000dfc <__aeabi_fmul>
 8002212:	4603      	mov	r3, r0
 8002214:	461c      	mov	r4, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3304      	adds	r3, #4
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	3304      	adds	r3, #4
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4619      	mov	r1, r3
 8002224:	4610      	mov	r0, r2
 8002226:	f7fe fde9 	bl	8000dfc <__aeabi_fmul>
 800222a:	4603      	mov	r3, r0
 800222c:	4619      	mov	r1, r3
 800222e:	4620      	mov	r0, r4
 8002230:	f7fe fcda 	bl	8000be8 <__aeabi_fsub>
 8002234:	4603      	mov	r3, r0
 8002236:	461c      	mov	r4, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3308      	adds	r3, #8
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	3308      	adds	r3, #8
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f7fe fdd8 	bl	8000dfc <__aeabi_fmul>
 800224c:	4603      	mov	r3, r0
 800224e:	4619      	mov	r1, r3
 8002250:	4620      	mov	r0, r4
 8002252:	f7fe fcc9 	bl	8000be8 <__aeabi_fsub>
 8002256:	4603      	mov	r3, r0
 8002258:	461c      	mov	r4, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	330c      	adds	r3, #12
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	330c      	adds	r3, #12
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4619      	mov	r1, r3
 8002268:	4610      	mov	r0, r2
 800226a:	f7fe fdc7 	bl	8000dfc <__aeabi_fmul>
 800226e:	4603      	mov	r3, r0
 8002270:	4619      	mov	r1, r3
 8002272:	4620      	mov	r0, r4
 8002274:	f7fe fcb8 	bl	8000be8 <__aeabi_fsub>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	4b61      	ldr	r3, [pc, #388]	; (8002404 <_Z17QuaternionProductPfS_+0x20c>)
 800227e:	601a      	str	r2, [r3, #0]
  q3[1] = (q1[0] * q2[1]) + (q1[1] * q2[0]) + (q1[2] * q2[3]) - (q1[3] * q2[2]);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	3304      	adds	r3, #4
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4619      	mov	r1, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f7fe fdb5 	bl	8000dfc <__aeabi_fmul>
 8002292:	4603      	mov	r3, r0
 8002294:	461c      	mov	r4, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3304      	adds	r3, #4
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f7fe fdaa 	bl	8000dfc <__aeabi_fmul>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4619      	mov	r1, r3
 80022ac:	4620      	mov	r0, r4
 80022ae:	f7fe fc9d 	bl	8000bec <__addsf3>
 80022b2:	4603      	mov	r3, r0
 80022b4:	461c      	mov	r4, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3308      	adds	r3, #8
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	330c      	adds	r3, #12
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4619      	mov	r1, r3
 80022c4:	4610      	mov	r0, r2
 80022c6:	f7fe fd99 	bl	8000dfc <__aeabi_fmul>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4619      	mov	r1, r3
 80022ce:	4620      	mov	r0, r4
 80022d0:	f7fe fc8c 	bl	8000bec <__addsf3>
 80022d4:	4603      	mov	r3, r0
 80022d6:	461c      	mov	r4, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	330c      	adds	r3, #12
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	3308      	adds	r3, #8
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	4610      	mov	r0, r2
 80022e8:	f7fe fd88 	bl	8000dfc <__aeabi_fmul>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4619      	mov	r1, r3
 80022f0:	4620      	mov	r0, r4
 80022f2:	f7fe fc79 	bl	8000be8 <__aeabi_fsub>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b42      	ldr	r3, [pc, #264]	; (8002404 <_Z17QuaternionProductPfS_+0x20c>)
 80022fc:	605a      	str	r2, [r3, #4]
  q3[2] = (q1[0] * q2[2]) - (q1[1] * q2[3]) + (q1[2] * q2[0]) + (q1[3] * q2[1]);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	3308      	adds	r3, #8
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4619      	mov	r1, r3
 800230a:	4610      	mov	r0, r2
 800230c:	f7fe fd76 	bl	8000dfc <__aeabi_fmul>
 8002310:	4603      	mov	r3, r0
 8002312:	461c      	mov	r4, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3304      	adds	r3, #4
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	330c      	adds	r3, #12
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	4610      	mov	r0, r2
 8002324:	f7fe fd6a 	bl	8000dfc <__aeabi_fmul>
 8002328:	4603      	mov	r3, r0
 800232a:	4619      	mov	r1, r3
 800232c:	4620      	mov	r0, r4
 800232e:	f7fe fc5b 	bl	8000be8 <__aeabi_fsub>
 8002332:	4603      	mov	r3, r0
 8002334:	461c      	mov	r4, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3308      	adds	r3, #8
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4619      	mov	r1, r3
 8002342:	4610      	mov	r0, r2
 8002344:	f7fe fd5a 	bl	8000dfc <__aeabi_fmul>
 8002348:	4603      	mov	r3, r0
 800234a:	4619      	mov	r1, r3
 800234c:	4620      	mov	r0, r4
 800234e:	f7fe fc4d 	bl	8000bec <__addsf3>
 8002352:	4603      	mov	r3, r0
 8002354:	461c      	mov	r4, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	330c      	adds	r3, #12
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	3304      	adds	r3, #4
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f7fe fd49 	bl	8000dfc <__aeabi_fmul>
 800236a:	4603      	mov	r3, r0
 800236c:	4619      	mov	r1, r3
 800236e:	4620      	mov	r0, r4
 8002370:	f7fe fc3c 	bl	8000bec <__addsf3>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	4b22      	ldr	r3, [pc, #136]	; (8002404 <_Z17QuaternionProductPfS_+0x20c>)
 800237a:	609a      	str	r2, [r3, #8]
  q3[3] = (q1[0] * q2[3]) + (q1[1] * q2[2]) - (q1[2] * q2[1]) + (q1[3] * q2[0]);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	330c      	adds	r3, #12
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4619      	mov	r1, r3
 8002388:	4610      	mov	r0, r2
 800238a:	f7fe fd37 	bl	8000dfc <__aeabi_fmul>
 800238e:	4603      	mov	r3, r0
 8002390:	461c      	mov	r4, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3304      	adds	r3, #4
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	3308      	adds	r3, #8
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4619      	mov	r1, r3
 80023a0:	4610      	mov	r0, r2
 80023a2:	f7fe fd2b 	bl	8000dfc <__aeabi_fmul>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4619      	mov	r1, r3
 80023aa:	4620      	mov	r0, r4
 80023ac:	f7fe fc1e 	bl	8000bec <__addsf3>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461c      	mov	r4, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3308      	adds	r3, #8
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	3304      	adds	r3, #4
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4619      	mov	r1, r3
 80023c2:	4610      	mov	r0, r2
 80023c4:	f7fe fd1a 	bl	8000dfc <__aeabi_fmul>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4619      	mov	r1, r3
 80023cc:	4620      	mov	r0, r4
 80023ce:	f7fe fc0b 	bl	8000be8 <__aeabi_fsub>
 80023d2:	4603      	mov	r3, r0
 80023d4:	461c      	mov	r4, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	330c      	adds	r3, #12
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4619      	mov	r1, r3
 80023e2:	4610      	mov	r0, r2
 80023e4:	f7fe fd0a 	bl	8000dfc <__aeabi_fmul>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4619      	mov	r1, r3
 80023ec:	4620      	mov	r0, r4
 80023ee:	f7fe fbfd 	bl	8000bec <__addsf3>
 80023f2:	4603      	mov	r3, r0
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b03      	ldr	r3, [pc, #12]	; (8002404 <_Z17QuaternionProductPfS_+0x20c>)
 80023f8:	60da      	str	r2, [r3, #12]
  return q3;
 80023fa:	4b02      	ldr	r3, [pc, #8]	; (8002404 <_Z17QuaternionProductPfS_+0x20c>)
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bd90      	pop	{r4, r7, pc}
 8002404:	20000500 	.word	0x20000500

08002408 <_Z17QuaternionInversePf>:
 * @return float inverse Quaternion
 * 
 * --Custom Method!
 */
float *QuaternionInverse(float *q1)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  static float qi[4];
  qi[0] = q1[0];
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <_Z17QuaternionInversePf+0x48>)
 8002416:	6013      	str	r3, [r2, #0]
  qi[1] = q1[1] * -1;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3304      	adds	r3, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002422:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <_Z17QuaternionInversePf+0x48>)
 8002424:	6053      	str	r3, [r2, #4]
  qi[2] = q1[2] * -1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3308      	adds	r3, #8
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <_Z17QuaternionInversePf+0x48>)
 8002432:	6093      	str	r3, [r2, #8]
  qi[3] = q1[3] * -1;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	330c      	adds	r3, #12
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800243e:	4a04      	ldr	r2, [pc, #16]	; (8002450 <_Z17QuaternionInversePf+0x48>)
 8002440:	60d3      	str	r3, [r2, #12]
  return qi;
 8002442:	4b03      	ldr	r3, [pc, #12]	; (8002450 <_Z17QuaternionInversePf+0x48>)
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000510 	.word	0x20000510

08002454 <_Z15QuaternionSLERPPfS_>:
 * @return float interpolation quaternion
 * 
 * --Custom Method!
 */
float * QuaternionSLERP(float *q1, float *q2)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  return QuaternionProduct(&q2[0], QuaternionInverse(&q1[0]));
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ffd2 	bl	8002408 <_Z17QuaternionInversePf>
 8002464:	4603      	mov	r3, r0
 8002466:	4619      	mov	r1, r3
 8002468:	6838      	ldr	r0, [r7, #0]
 800246a:	f7ff fec5 	bl	80021f8 <_Z17QuaternionProductPfS_>
 800246e:	4603      	mov	r3, r0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <_Z19QuaternionNormalizePf>:
 * @return float* pointer to normalized quaternion
 * 
 * --Custom Method!
 */
float *QuaternionNormalize(float *q1)
{
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  float vectorlength = sqrt((q1[0] * q1[0]) + (q1[1] * q1[1]) + (q1[2] * q1[2]) + (q1[3] * q1[3]));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	4610      	mov	r0, r2
 800248c:	f7fe fcb6 	bl	8000dfc <__aeabi_fmul>
 8002490:	4603      	mov	r3, r0
 8002492:	461c      	mov	r4, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3304      	adds	r3, #4
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3304      	adds	r3, #4
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	4610      	mov	r0, r2
 80024a4:	f7fe fcaa 	bl	8000dfc <__aeabi_fmul>
 80024a8:	4603      	mov	r3, r0
 80024aa:	4619      	mov	r1, r3
 80024ac:	4620      	mov	r0, r4
 80024ae:	f7fe fb9d 	bl	8000bec <__addsf3>
 80024b2:	4603      	mov	r3, r0
 80024b4:	461c      	mov	r4, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3308      	adds	r3, #8
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3308      	adds	r3, #8
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4619      	mov	r1, r3
 80024c4:	4610      	mov	r0, r2
 80024c6:	f7fe fc99 	bl	8000dfc <__aeabi_fmul>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4619      	mov	r1, r3
 80024ce:	4620      	mov	r0, r4
 80024d0:	f7fe fb8c 	bl	8000bec <__addsf3>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461c      	mov	r4, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	330c      	adds	r3, #12
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	330c      	adds	r3, #12
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	4610      	mov	r0, r2
 80024e8:	f7fe fc88 	bl	8000dfc <__aeabi_fmul>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4619      	mov	r1, r3
 80024f0:	4620      	mov	r0, r4
 80024f2:	f7fe fb7b 	bl	8000bec <__addsf3>
 80024f6:	4603      	mov	r3, r0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fb05 	bl	8001b08 <_ZSt4sqrtf>
 80024fe:	60f8      	str	r0, [r7, #12]
  static float qn[4];
  qn[0] = q1[0] / vectorlength;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fd2c 	bl	8000f64 <__aeabi_fdiv>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <_Z19QuaternionNormalizePf+0xe8>)
 8002512:	601a      	str	r2, [r3, #0]
  qn[1] = q1[1] / vectorlength;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3304      	adds	r3, #4
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68f9      	ldr	r1, [r7, #12]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe fd21 	bl	8000f64 <__aeabi_fdiv>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <_Z19QuaternionNormalizePf+0xe8>)
 8002528:	605a      	str	r2, [r3, #4]
  qn[2] = q1[2] / vectorlength;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3308      	adds	r3, #8
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68f9      	ldr	r1, [r7, #12]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fd16 	bl	8000f64 <__aeabi_fdiv>
 8002538:	4603      	mov	r3, r0
 800253a:	461a      	mov	r2, r3
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <_Z19QuaternionNormalizePf+0xe8>)
 800253e:	609a      	str	r2, [r3, #8]
  qn[3] = q1[3] / vectorlength;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	330c      	adds	r3, #12
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68f9      	ldr	r1, [r7, #12]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fd0b 	bl	8000f64 <__aeabi_fdiv>
 800254e:	4603      	mov	r3, r0
 8002550:	461a      	mov	r2, r3
 8002552:	4b03      	ldr	r3, [pc, #12]	; (8002560 <_Z19QuaternionNormalizePf+0xe8>)
 8002554:	60da      	str	r2, [r3, #12]
  return qn;
 8002556:	4b02      	ldr	r3, [pc, #8]	; (8002560 <_Z19QuaternionNormalizePf+0xe8>)
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bd90      	pop	{r4, r7, pc}
 8002560:	20000520 	.word	0x20000520

08002564 <_ZN7MPU6050C1Ev>:


/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
    devAddr = MPU6050_DEFAULT_ADDRESS;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	22d0      	movs	r2, #208	; 0xd0
 8002570:	719a      	strb	r2, [r3, #6]
}
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 8002586:	2101      	movs	r1, #1
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f940 	bl	800280e <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 800258e:	2100      	movs	r1, #0
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f843 	bl	800261c <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8002596:	2100      	movs	r1, #0
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f852 	bl	8002642 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 800259e:	2100      	movs	r1, #0
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f923 	bl	80027ec <_ZN7MPU605015setSleepEnabledEb>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_ZN7MPU60507setRateEh>:
/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050::setRate(uint8_t rate) {
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	460b      	mov	r3, r1
 80025b8:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	799b      	ldrb	r3, [r3, #6]
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	2119      	movs	r1, #25
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff f9ce 	bl	8001964 <_Z9writeBytehhh>
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_ZN7MPU605020setExternalFrameSyncEh>:
/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG
 * @param sync New FSYNC configuration value
 */
void MPU6050::setExternalFrameSync(uint8_t sync) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	7998      	ldrb	r0, [r3, #6]
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	2303      	movs	r3, #3
 80025e6:	2205      	movs	r2, #5
 80025e8:	211a      	movs	r1, #26
 80025ea:	f7ff f92f 	bl	800184c <_Z9writeBitshhhhh>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <_ZN7MPU605011setDLPFModeEh>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode) {
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af02      	add	r7, sp, #8
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7998      	ldrb	r0, [r3, #6]
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	2303      	movs	r3, #3
 800260c:	2202      	movs	r2, #2
 800260e:	211a      	movs	r1, #26
 8002610:	f7ff f91c 	bl	800184c <_Z9writeBitshhhhh>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af02      	add	r7, sp, #8
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	7998      	ldrb	r0, [r3, #6]
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2302      	movs	r3, #2
 8002632:	2204      	movs	r2, #4
 8002634:	211b      	movs	r1, #27
 8002636:	f7ff f909 	bl	800184c <_Z9writeBitshhhhh>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af02      	add	r7, sp, #8
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	460b      	mov	r3, r1
 800264c:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	7998      	ldrb	r0, [r3, #6]
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2302      	movs	r3, #2
 8002658:	2204      	movs	r2, #4
 800265a:	211c      	movs	r1, #28
 800265c:	f7ff f8f6 	bl	800184c <_Z9writeBitshhhhh>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_ZN7MPU605027setMotionDetectionThresholdEh>:
/** Set motion detection event acceleration threshold.
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050::setMotionDetectionThreshold(uint8_t threshold) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MOT_THR, threshold);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	799b      	ldrb	r3, [r3, #6]
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	211f      	movs	r1, #31
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff f971 	bl	8001964 <_Z9writeBytehhh>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <_ZN7MPU605026setMotionDetectionDurationEh>:
/** Set motion detection event duration threshold.
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050::setMotionDetectionDuration(uint8_t duration) {
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MOT_DUR, duration);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	799b      	ldrb	r3, [r3, #6]
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	2120      	movs	r1, #32
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff f960 	bl	8001964 <_Z9writeBytehhh>
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
/** Set zero motion detection event acceleration threshold.
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	799b      	ldrb	r3, [r3, #6]
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	2121      	movs	r1, #33	; 0x21
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff f94f 	bl	8001964 <_Z9writeBytehhh>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
/** Set zero motion detection event duration threshold.
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	799b      	ldrb	r3, [r3, #6]
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	2122      	movs	r1, #34	; 0x22
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff f93e 	bl	8001964 <_Z9writeBytehhh>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_ZN7MPU605015setSlaveAddressEhh>:
 * @param num Slave number (0-3)
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
 80026fc:	4613      	mov	r3, r2
 80026fe:	70bb      	strb	r3, [r7, #2]
    if (num > 3) return;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	2b03      	cmp	r3, #3
 8002704:	d80d      	bhi.n	8002722 <_ZN7MPU605015setSlaveAddressEhh+0x32>
    writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	7998      	ldrb	r0, [r3, #6]
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	461a      	mov	r2, r3
 800270e:	0052      	lsls	r2, r2, #1
 8002710:	4413      	add	r3, r2
 8002712:	b2db      	uxtb	r3, r3
 8002714:	3325      	adds	r3, #37	; 0x25
 8002716:	b2db      	uxtb	r3, r3
 8002718:	78ba      	ldrb	r2, [r7, #2]
 800271a:	4619      	mov	r1, r3
 800271c:	f7ff f922 	bl	8001964 <_Z9writeBytehhh>
 8002720:	e000      	b.n	8002724 <_ZN7MPU605015setSlaveAddressEhh+0x34>
    if (num > 3) return;
 8002722:	bf00      	nop
}
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
    readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7998      	ldrb	r0, [r3, #6]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3307      	adds	r3, #7
 800273a:	461a      	mov	r2, r3
 800273c:	213a      	movs	r1, #58	; 0x3a
 800273e:	f7fe ff59 	bl	80015f4 <_Z8readBytehhPh>
    return buffer[0];
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	79db      	ldrb	r3, [r3, #7]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <_ZN7MPU605014setFIFOEnabledEb>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050::setFIFOEnabled(bool enabled) {
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	460b      	mov	r3, r1
 8002758:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	7998      	ldrb	r0, [r3, #6]
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	2206      	movs	r2, #6
 8002762:	216a      	movs	r1, #106	; 0x6a
 8002764:	f7fe fff6 	bl	8001754 <_Z8writeBithhhh>
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <_ZN7MPU605023setI2CMasterModeEnabledEb>:
 * @param enabled New I2C Master Mode enabled status
 * @see getI2CMasterModeEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
 */
void MPU6050::setI2CMasterModeEnabled(bool enabled) {
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	7998      	ldrb	r0, [r3, #6]
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	2205      	movs	r2, #5
 8002784:	216a      	movs	r1, #106	; 0x6a
 8002786:	f7fe ffe5 	bl	8001754 <_Z8writeBithhhh>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <_ZN7MPU60509resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	7998      	ldrb	r0, [r3, #6]
 800279e:	2301      	movs	r3, #1
 80027a0:	2202      	movs	r2, #2
 80027a2:	216a      	movs	r1, #106	; 0x6a
 80027a4:	f7fe ffd6 	bl	8001754 <_Z8writeBithhhh>
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <_ZN7MPU605014resetI2CMasterEv>:
 * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050::resetI2CMaster() {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	7998      	ldrb	r0, [r3, #6]
 80027bc:	2301      	movs	r3, #1
 80027be:	2201      	movs	r2, #1
 80027c0:	216a      	movs	r1, #106	; 0x6a
 80027c2:	f7fe ffc7 	bl	8001754 <_Z8writeBithhhh>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <_ZN7MPU60505resetEv>:
/** Trigger a full device reset.
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050::reset() {
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	7998      	ldrb	r0, [r3, #6]
 80027da:	2301      	movs	r3, #1
 80027dc:	2207      	movs	r2, #7
 80027de:	216b      	movs	r1, #107	; 0x6b
 80027e0:	f7fe ffb8 	bl	8001754 <_Z8writeBithhhh>
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7998      	ldrb	r0, [r3, #6]
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	2206      	movs	r2, #6
 8002800:	216b      	movs	r1, #107	; 0x6b
 8002802:	f7fe ffa7 	bl	8001754 <_Z8writeBithhhh>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af02      	add	r7, sp, #8
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7998      	ldrb	r0, [r3, #6]
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	2303      	movs	r3, #3
 8002824:	2202      	movs	r2, #2
 8002826:	216b      	movs	r1, #107	; 0x6b
 8002828:	f7ff f810 	bl	800184c <_Z9writeBitshhhhh>
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
    readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7998      	ldrb	r0, [r3, #6]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3307      	adds	r3, #7
 8002844:	2202      	movs	r2, #2
 8002846:	2172      	movs	r1, #114	; 0x72
 8002848:	f7fe ff0e 	bl	8001668 <_Z9readByteshhhPh>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	79db      	ldrb	r3, [r3, #7]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	b21a      	sxth	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7a1b      	ldrb	r3, [r3, #8]
 8002858:	b21b      	sxth	r3, r3
 800285a:	4313      	orrs	r3, r2
 800285c:	b21b      	sxth	r3, r3
 800285e:	b29b      	uxth	r3, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	4613      	mov	r3, r2
 8002874:	71fb      	strb	r3, [r7, #7]
    if(length > 0){
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d007      	beq.n	800288c <_ZN7MPU605012getFIFOBytesEPhh+0x24>
        readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	7998      	ldrb	r0, [r3, #6]
 8002880:	79fa      	ldrb	r2, [r7, #7]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2174      	movs	r1, #116	; 0x74
 8002886:	f7fe feef 	bl	8001668 <_Z9readByteshhhPh>
    } else {
    	*data = 0;
    }
}
 800288a:	e002      	b.n	8002892 <_ZN7MPU605012getFIFOBytesEPhh+0x2a>
    	*data = 0;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <_ZN7MPU605015setOTPBankValidEb>:

uint8_t MPU6050::getOTPBankValid() {
    readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);
    return buffer[0];
}
void MPU6050::setOTPBankValid(bool enabled) {
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	460b      	mov	r3, r1
 80028a4:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7998      	ldrb	r0, [r3, #6]
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	2200      	movs	r2, #0
 80028ae:	2100      	movs	r1, #0
 80028b0:	f7fe ff50 	bl	8001754 <_Z8writeBithhhh>
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <_ZN7MPU605016getXGyroOffsetTCEv>:
int8_t MPU6050::getXGyroOffsetTC() {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	7998      	ldrb	r0, [r3, #6]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3307      	adds	r3, #7
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	2306      	movs	r3, #6
 80028d0:	2206      	movs	r2, #6
 80028d2:	2100      	movs	r1, #0
 80028d4:	f7fe fe30 	bl	8001538 <_Z8readBitshhhhPh>
    return buffer[0];
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	79db      	ldrb	r3, [r3, #7]
 80028dc:	b25b      	sxtb	r3, r3
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <_ZN7MPU605016setXGyroOffsetTCEa>:
void MPU6050::setXGyroOffsetTC(int8_t offset) {
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af02      	add	r7, sp, #8
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	7998      	ldrb	r0, [r3, #6]
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2306      	movs	r3, #6
 80028fc:	2206      	movs	r2, #6
 80028fe:	2100      	movs	r1, #0
 8002900:	f7fe ffa4 	bl	800184c <_Z9writeBitshhhhh>
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <_ZN7MPU605016getYGyroOffsetTCEv>:

// YG_OFFS_TC register

int8_t MPU6050::getYGyroOffsetTC() {
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af02      	add	r7, sp, #8
 8002912:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7998      	ldrb	r0, [r3, #6]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3307      	adds	r3, #7
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	2306      	movs	r3, #6
 8002920:	2206      	movs	r2, #6
 8002922:	2101      	movs	r1, #1
 8002924:	f7fe fe08 	bl	8001538 <_Z8readBitshhhhPh>
    return buffer[0];
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	79db      	ldrb	r3, [r3, #7]
 800292c:	b25b      	sxtb	r3, r3
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <_ZN7MPU605016setYGyroOffsetTCEa>:
void MPU6050::setYGyroOffsetTC(int8_t offset) {
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af02      	add	r7, sp, #8
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7998      	ldrb	r0, [r3, #6]
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	2306      	movs	r3, #6
 800294c:	2206      	movs	r2, #6
 800294e:	2101      	movs	r1, #1
 8002950:	f7fe ff7c 	bl	800184c <_Z9writeBitshhhhh>
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <_ZN7MPU605016getZGyroOffsetTCEv>:

// ZG_OFFS_TC register

int8_t MPU6050::getZGyroOffsetTC() {
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af02      	add	r7, sp, #8
 8002962:	6078      	str	r0, [r7, #4]
    readBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7998      	ldrb	r0, [r3, #6]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3307      	adds	r3, #7
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2306      	movs	r3, #6
 8002970:	2206      	movs	r2, #6
 8002972:	2102      	movs	r1, #2
 8002974:	f7fe fde0 	bl	8001538 <_Z8readBitshhhhPh>
    return buffer[0];
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	79db      	ldrb	r3, [r3, #7]
 800297c:	b25b      	sxtb	r3, r3
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <_ZN7MPU605016setZGyroOffsetTCEa>:
void MPU6050::setZGyroOffsetTC(int8_t offset) {
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af02      	add	r7, sp, #8
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	70fb      	strb	r3, [r7, #3]
    writeBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7998      	ldrb	r0, [r3, #6]
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	2306      	movs	r3, #6
 800299c:	2206      	movs	r2, #6
 800299e:	2102      	movs	r1, #2
 80029a0:	f7fe ff54 	bl	800184c <_Z9writeBitshhhhh>
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <_ZN7MPU605015setXAccelOffsetEs>:

int16_t MPU6050::getXAccelOffset() {
    readBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	799b      	ldrb	r3, [r3, #6]
 80029bc:	887a      	ldrh	r2, [r7, #2]
 80029be:	2106      	movs	r1, #6
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff f807 	bl	80019d4 <_Z9writeWordhht>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <_ZN7MPU605015setYAccelOffsetEs>:

int16_t MPU6050::getYAccelOffset() {
    readBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	460b      	mov	r3, r1
 80029d8:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	799b      	ldrb	r3, [r3, #6]
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	2108      	movs	r1, #8
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe fff6 	bl	80019d4 <_Z9writeWordhht>
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <_ZN7MPU605015setZAccelOffsetEs>:

int16_t MPU6050::getZAccelOffset() {
    readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	799b      	ldrb	r3, [r3, #6]
 8002a00:	887a      	ldrh	r2, [r7, #2]
 8002a02:	210a      	movs	r1, #10
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe ffe5 	bl	80019d4 <_Z9writeWordhht>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <_ZN7MPU605014setXGyroOffsetEs>:

int16_t MPU6050::getXGyroOffset() {
    readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	799b      	ldrb	r3, [r3, #6]
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	2113      	movs	r1, #19
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe ffd4 	bl	80019d4 <_Z9writeWordhht>
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_ZN7MPU605014setYGyroOffsetEs>:

int16_t MPU6050::getYGyroOffset() {
    readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	799b      	ldrb	r3, [r3, #6]
 8002a44:	887a      	ldrh	r2, [r7, #2]
 8002a46:	2115      	movs	r1, #21
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe ffc3 	bl	80019d4 <_Z9writeWordhht>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <_ZN7MPU605014setZGyroOffsetEs>:

int16_t MPU6050::getZGyroOffset() {
    readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	807b      	strh	r3, [r7, #2]
    writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	799b      	ldrb	r3, [r3, #6]
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	2117      	movs	r1, #23
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe ffb2 	bl	80019d4 <_Z9writeWordhht>
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	70fb      	strb	r3, [r7, #3]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	7998      	ldrb	r0, [r3, #6]
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	2207      	movs	r2, #7
 8002a8c:	216a      	movs	r1, #106	; 0x6a
 8002a8e:	f7fe fe61 	bl	8001754 <_Z8writeBithhhh>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <_ZN7MPU60508resetDMPEv>:
void MPU6050::resetDMP() {
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
    writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	7998      	ldrb	r0, [r3, #6]
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	216a      	movs	r1, #106	; 0x6a
 8002aac:	f7fe fe52 	bl	8001754 <_Z8writeBithhhh>
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <_ZN7MPU605013setMemoryBankEhbb>:

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	4608      	mov	r0, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	70fb      	strb	r3, [r7, #3]
 8002aca:	460b      	mov	r3, r1
 8002acc:	70bb      	strb	r3, [r7, #2]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	707b      	strb	r3, [r7, #1]
    bank &= 0x1F;
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	70fb      	strb	r3, [r7, #3]
    if (userBank) bank |= 0x20;
 8002ada:	787b      	ldrb	r3, [r7, #1]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <_ZN7MPU605013setMemoryBankEhbb+0x30>
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	f043 0320 	orr.w	r3, r3, #32
 8002ae6:	70fb      	strb	r3, [r7, #3]
    if (prefetchEnabled) bank |= 0x40;
 8002ae8:	78bb      	ldrb	r3, [r7, #2]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <_ZN7MPU605013setMemoryBankEhbb+0x3e>
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002af4:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	799b      	ldrb	r3, [r3, #6]
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	216d      	movs	r1, #109	; 0x6d
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe ff30 	bl	8001964 <_Z9writeBytehhh>
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_ZN7MPU605021setMemoryStartAddressEh>:

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	799b      	ldrb	r3, [r3, #6]
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	216e      	movs	r1, #110	; 0x6e
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe ff1f 	bl	8001964 <_Z9writeBytehhh>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <_ZN7MPU605015readMemoryBlockEPhthh>:
    return buffer[0];
}
void MPU6050::writeMemoryByte(uint8_t data) {
    writeByte(devAddr, MPU6050_RA_MEM_R_W, data);
}
void MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	4611      	mov	r1, r2
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	80fb      	strh	r3, [r7, #6]
 8002b40:	4613      	mov	r3, r2
 8002b42:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002b44:	7979      	ldrb	r1, [r7, #5]
 8002b46:	2300      	movs	r3, #0
 8002b48:	2200      	movs	r2, #0
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f7ff ffb4 	bl	8002ab8 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002b50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b54:	4619      	mov	r1, r3
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f7ff ffd8 	bl	8002b0c <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	82bb      	strh	r3, [r7, #20]
 8002b60:	8aba      	ldrh	r2, [r7, #20]
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d244      	bcs.n	8002bf2 <_ZN7MPU605015readMemoryBlockEPhthh+0xc4>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002b68:	2310      	movs	r3, #16
 8002b6a:	75fb      	strb	r3, [r7, #23]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002b6c:	8aba      	ldrh	r2, [r7, #20]
 8002b6e:	7dfb      	ldrb	r3, [r7, #23]
 8002b70:	441a      	add	r2, r3
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	dd05      	ble.n	8002b84 <_ZN7MPU605015readMemoryBlockEPhthh+0x56>
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	8abb      	ldrh	r3, [r7, #20]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	75fb      	strb	r3, [r7, #23]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002b84:	7dfa      	ldrb	r2, [r7, #23]
 8002b86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b8a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	dd03      	ble.n	8002b9a <_ZN7MPU605015readMemoryBlockEPhthh+0x6c>
 8002b92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b96:	425b      	negs	r3, r3
 8002b98:	75fb      	strb	r3, [r7, #23]

        // read the chunk of data as specified
        readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	7998      	ldrb	r0, [r3, #6]
 8002b9e:	8abb      	ldrh	r3, [r7, #20]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	7dfa      	ldrb	r2, [r7, #23]
 8002ba6:	216f      	movs	r1, #111	; 0x6f
 8002ba8:	f7fe fd5e 	bl	8001668 <_Z9readByteshhhPh>
        
        // increase byte index by [chunkSize]
        i += chunkSize;
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	8abb      	ldrh	r3, [r7, #20]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	82bb      	strh	r3, [r7, #20]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002bb6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002bba:	7dfb      	ldrb	r3, [r7, #23]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f887 3020 	strb.w	r3, [r7, #32]

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002bc2:	8aba      	ldrh	r2, [r7, #20]
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d2ca      	bcs.n	8002b60 <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
            if (address == 0) bank++;
 8002bca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d102      	bne.n	8002bd8 <_ZN7MPU605015readMemoryBlockEPhthh+0xaa>
 8002bd2:	797b      	ldrb	r3, [r7, #5]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002bd8:	7979      	ldrb	r1, [r7, #5]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2200      	movs	r2, #0
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff ff6a 	bl	8002ab8 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002be4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002be8:	4619      	mov	r1, r3
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f7ff ff8e 	bl	8002b0c <_ZN7MPU605021setMemoryStartAddressEh>
    for (uint16_t i = 0; i < dataSize;) {
 8002bf0:	e7b6      	b.n	8002b60 <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
        }
    }
}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <_ZN7MPU605016writeMemoryBlockEPKhthhbb>:
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b088      	sub	sp, #32
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	4611      	mov	r1, r2
 8002c06:	461a      	mov	r2, r3
 8002c08:	460b      	mov	r3, r1
 8002c0a:	80fb      	strh	r3, [r7, #6]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002c10:	7979      	ldrb	r1, [r7, #5]
 8002c12:	2300      	movs	r3, #0
 8002c14:	2200      	movs	r2, #0
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f7ff ff4e 	bl	8002ab8 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002c1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c20:	4619      	mov	r1, r3
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f7ff ff72 	bl	8002b0c <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61bb      	str	r3, [r7, #24]
    uint8_t *progBuffer=0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002c30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d004      	beq.n	8002c42 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x48>
 8002c38:	2010      	movs	r0, #16
 8002c3a:	f00c fec3 	bl	800f9c4 <malloc>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002c42:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d004      	beq.n	8002c54 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5a>
 8002c4a:	2010      	movs	r0, #16
 8002c4c:	f00c feba 	bl	800f9c4 <malloc>
 8002c50:	4603      	mov	r3, r0
 8002c52:	617b      	str	r3, [r7, #20]
    for (i = 0; i < dataSize;) {
 8002c54:	2300      	movs	r3, #0
 8002c56:	827b      	strh	r3, [r7, #18]
 8002c58:	8a7a      	ldrh	r2, [r7, #18]
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	f080 808e 	bcs.w	8002d7e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x184>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002c62:	2310      	movs	r3, #16
 8002c64:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002c66:	8a7a      	ldrh	r2, [r7, #18]
 8002c68:	7ffb      	ldrb	r3, [r7, #31]
 8002c6a:	441a      	add	r2, r3
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	dd05      	ble.n	8002c7e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x84>
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	8a7b      	ldrh	r3, [r7, #18]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002c7e:	7ffa      	ldrb	r2, [r7, #31]
 8002c80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c84:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	dd03      	ble.n	8002c94 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x9a>
 8002c8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c90:	425b      	negs	r3, r3
 8002c92:	77fb      	strb	r3, [r7, #31]
        
        if (useProgMem) {
 8002c94:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xca>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	747b      	strb	r3, [r7, #17]
 8002ca0:	7c7a      	ldrb	r2, [r7, #17]
 8002ca2:	7ffb      	ldrb	r3, [r7, #31]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d211      	bcs.n	8002ccc <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xd2>
 8002ca8:	8a7a      	ldrh	r2, [r7, #18]
 8002caa:	7c7b      	ldrb	r3, [r7, #17]
 8002cac:	4413      	add	r3, r2
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	441a      	add	r2, r3
 8002cb2:	7c7b      	ldrb	r3, [r7, #17]
 8002cb4:	6979      	ldr	r1, [r7, #20]
 8002cb6:	440b      	add	r3, r1
 8002cb8:	7812      	ldrb	r2, [r2, #0]
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	7c7b      	ldrb	r3, [r7, #17]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	747b      	strb	r3, [r7, #17]
 8002cc2:	e7ed      	b.n	8002ca0 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xa6>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 8002cc4:	8a7b      	ldrh	r3, [r7, #18]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	4413      	add	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
        }

        writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	7998      	ldrb	r0, [r3, #6]
 8002cd0:	7ffa      	ldrb	r2, [r7, #31]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	216f      	movs	r1, #111	; 0x6f
 8002cd6:	f7fe feb9 	bl	8001a4c <_Z10writeByteshhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 8002cda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d02a      	beq.n	8002d38 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d027      	beq.n	8002d38 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
            setMemoryBank(bank);
 8002ce8:	7979      	ldrb	r1, [r7, #5]
 8002cea:	2300      	movs	r3, #0
 8002cec:	2200      	movs	r2, #0
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f7ff fee2 	bl	8002ab8 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002cf4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f7ff ff06 	bl	8002b0c <_ZN7MPU605021setMemoryStartAddressEh>
            readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	7998      	ldrb	r0, [r3, #6]
 8002d04:	7ffa      	ldrb	r2, [r7, #31]
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	216f      	movs	r1, #111	; 0x6f
 8002d0a:	f7fe fcad 	bl	8001668 <_Z9readByteshhhPh>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 8002d0e:	7ffb      	ldrb	r3, [r7, #31]
 8002d10:	461a      	mov	r2, r3
 8002d12:	69b9      	ldr	r1, [r7, #24]
 8002d14:	6978      	ldr	r0, [r7, #20]
 8002d16:	f00c fe65 	bl	800f9e4 <memcmp>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00b      	beq.n	8002d38 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
 8002d20:	69b8      	ldr	r0, [r7, #24]
 8002d22:	f00c fe57 	bl	800f9d4 <free>
                if (useProgMem) free(progBuffer);
 8002d26:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
 8002d2e:	6978      	ldr	r0, [r7, #20]
 8002d30:	f00c fe50 	bl	800f9d4 <free>
                return false; // uh oh.
 8002d34:	2300      	movs	r3, #0
 8002d36:	e031      	b.n	8002d9c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a2>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 8002d38:	7ffb      	ldrb	r3, [r7, #31]
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	8a7b      	ldrh	r3, [r7, #18]
 8002d3e:	4413      	add	r3, r2
 8002d40:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002d42:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002d46:	7ffb      	ldrb	r3, [r7, #31]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002d4e:	8a7a      	ldrh	r2, [r7, #18]
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d280      	bcs.n	8002c58 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
            if (address == 0) bank++;
 8002d56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d102      	bne.n	8002d64 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x16a>
 8002d5e:	797b      	ldrb	r3, [r7, #5]
 8002d60:	3301      	adds	r3, #1
 8002d62:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002d64:	7979      	ldrb	r1, [r7, #5]
 8002d66:	2300      	movs	r3, #0
 8002d68:	2200      	movs	r2, #0
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff fea4 	bl	8002ab8 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002d70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d74:	4619      	mov	r1, r3
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f7ff fec8 	bl	8002b0c <_ZN7MPU605021setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 8002d7c:	e76c      	b.n	8002c58 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
        }
    }
    if (verify) free(verifyBuffer);
 8002d7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x192>
 8002d86:	69b8      	ldr	r0, [r7, #24]
 8002d88:	f00c fe24 	bl	800f9d4 <free>
    if (useProgMem) free(progBuffer);
 8002d8c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a0>
 8002d94:	6978      	ldr	r0, [r7, #20]
 8002d96:	f00c fe1d 	bl	800f9d4 <free>
    return true;
 8002d9a:	2301      	movs	r3, #1
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3720      	adds	r7, #32
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af04      	add	r7, sp, #16
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	4611      	mov	r1, r2
 8002db0:	461a      	mov	r2, r3
 8002db2:	460b      	mov	r3, r1
 8002db4:	80fb      	strh	r3, [r7, #6]
 8002db6:	4613      	mov	r3, r2
 8002db8:	717b      	strb	r3, [r7, #5]
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 8002dba:	7979      	ldrb	r1, [r7, #5]
 8002dbc:	88fa      	ldrh	r2, [r7, #6]
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	9302      	str	r3, [sp, #8]
 8002dc2:	7f3b      	ldrb	r3, [r7, #28]
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	7e3b      	ldrb	r3, [r7, #24]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7ff ff13 	bl	8002bfa <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 8002dd4:	4603      	mov	r3, r0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>:
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b08c      	sub	sp, #48	; 0x30
 8002de2:	af04      	add	r7, sp, #16
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	4611      	mov	r1, r2
 8002dea:	461a      	mov	r2, r3
 8002dec:	460b      	mov	r3, r1
 8002dee:	80fb      	strh	r3, [r7, #6]
 8002df0:	4613      	mov	r3, r2
 8002df2:	717b      	strb	r3, [r7, #5]
    uint8_t *progBuffer = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61fb      	str	r3, [r7, #28]
	uint8_t success, special;
    uint16_t i, j;
    if (useProgMem) {
 8002df8:	797b      	ldrb	r3, [r7, #5]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2a>
        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
 8002dfe:	2008      	movs	r0, #8
 8002e00:	f00c fde0 	bl	800f9c4 <malloc>
 8002e04:	4603      	mov	r3, r0
 8002e06:	61fb      	str	r3, [r7, #28]
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
 8002e08:	2300      	movs	r3, #0
 8002e0a:	833b      	strh	r3, [r7, #24]
 8002e0c:	8b3a      	ldrh	r2, [r7, #24]
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	f080 80a1 	bcs.w	8002f58 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x17a>
        if (useProgMem) {
 8002e16:	797b      	ldrb	r3, [r7, #5]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d018      	beq.n	8002e4e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x70>
            bank = pgm_read_byte(data + i++);
 8002e1c:	8b3b      	ldrh	r3, [r7, #24]
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	833a      	strh	r2, [r7, #24]
 8002e22:	461a      	mov	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4413      	add	r3, r2
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	757b      	strb	r3, [r7, #21]
            offset = pgm_read_byte(data + i++);
 8002e2c:	8b3b      	ldrh	r3, [r7, #24]
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	833a      	strh	r2, [r7, #24]
 8002e32:	461a      	mov	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4413      	add	r3, r2
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	753b      	strb	r3, [r7, #20]
            length = pgm_read_byte(data + i++);
 8002e3c:	8b3b      	ldrh	r3, [r7, #24]
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	833a      	strh	r2, [r7, #24]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4413      	add	r3, r2
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	74fb      	strb	r3, [r7, #19]
 8002e4c:	e017      	b.n	8002e7e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xa0>
        } else {
            bank = data[i++];
 8002e4e:	8b3b      	ldrh	r3, [r7, #24]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	833a      	strh	r2, [r7, #24]
 8002e54:	461a      	mov	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4413      	add	r3, r2
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	757b      	strb	r3, [r7, #21]
            offset = data[i++];
 8002e5e:	8b3b      	ldrh	r3, [r7, #24]
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	833a      	strh	r2, [r7, #24]
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4413      	add	r3, r2
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	753b      	strb	r3, [r7, #20]
            length = data[i++];
 8002e6e:	8b3b      	ldrh	r3, [r7, #24]
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	833a      	strh	r2, [r7, #24]
 8002e74:	461a      	mov	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4413      	add	r3, r2
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	74fb      	strb	r3, [r7, #19]
        }

        // write data or perform special action
        if (length > 0) {
 8002e7e:	7cfb      	ldrb	r3, [r7, #19]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d03a      	beq.n	8002efa <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x11c>
            Serial.print(bank);
            Serial.print(", offset ");
            Serial.print(offset);
            Serial.print(", length=");
            Serial.println(length);*/
            if (useProgMem) {
 8002e84:	797b      	ldrb	r3, [r7, #5]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d01d      	beq.n	8002ec6 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xe8>
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
 8002e8a:	7cfb      	ldrb	r3, [r7, #19]
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d905      	bls.n	8002e9c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xbe>
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	4619      	mov	r1, r3
 8002e94:	69f8      	ldr	r0, [r7, #28]
 8002e96:	f00d fac1 	bl	801041c <realloc>
 8002e9a:	61f8      	str	r0, [r7, #28]
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	82fb      	strh	r3, [r7, #22]
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	8afa      	ldrh	r2, [r7, #22]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d211      	bcs.n	8002ece <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xf0>
 8002eaa:	8b3a      	ldrh	r2, [r7, #24]
 8002eac:	8afb      	ldrh	r3, [r7, #22]
 8002eae:	4413      	add	r3, r2
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	441a      	add	r2, r3
 8002eb4:	8afb      	ldrh	r3, [r7, #22]
 8002eb6:	69f9      	ldr	r1, [r7, #28]
 8002eb8:	440b      	add	r3, r1
 8002eba:	7812      	ldrb	r2, [r2, #0]
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	8afb      	ldrh	r3, [r7, #22]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	82fb      	strh	r3, [r7, #22]
 8002ec4:	e7ec      	b.n	8002ea0 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xc2>
            } else {
                progBuffer = (uint8_t *)data + i;
 8002ec6:	8b3b      	ldrh	r3, [r7, #24]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	4413      	add	r3, r2
 8002ecc:	61fb      	str	r3, [r7, #28]
            }
            success = writeMemoryBlock(progBuffer, length, bank, offset, true);
 8002ece:	7cfb      	ldrb	r3, [r7, #19]
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	7d79      	ldrb	r1, [r7, #21]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	9302      	str	r3, [sp, #8]
 8002ed8:	2301      	movs	r3, #1
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	7d3b      	ldrb	r3, [r7, #20]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	69f9      	ldr	r1, [r7, #28]
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f7ff fe88 	bl	8002bfa <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 8002eea:	4603      	mov	r3, r0
 8002eec:	76fb      	strb	r3, [r7, #27]
            i += length;
 8002eee:	7cfb      	ldrb	r3, [r7, #19]
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	8b3b      	ldrh	r3, [r7, #24]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	833b      	strh	r3, [r7, #24]
 8002ef8:	e022      	b.n	8002f40 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            // special instruction
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
            if (useProgMem) {
 8002efa:	797b      	ldrb	r3, [r7, #5]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x134>
                special = pgm_read_byte(data + i++);
 8002f00:	8b3b      	ldrh	r3, [r7, #24]
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	833a      	strh	r2, [r7, #24]
 8002f06:	461a      	mov	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	76bb      	strb	r3, [r7, #26]
 8002f10:	e007      	b.n	8002f22 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x144>
            } else {
                special = data[i++];
 8002f12:	8b3b      	ldrh	r3, [r7, #24]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	833a      	strh	r2, [r7, #24]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	76bb      	strb	r3, [r7, #26]
            }
            /*Serial.print("Special command code ");
            Serial.print(special, HEX);
            Serial.println(" found...");*/
            if (special == 0x01) {
 8002f22:	7ebb      	ldrb	r3, [r7, #26]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d109      	bne.n	8002f3c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15e>
                // enable DMP-related interrupts
                
                //setIntZeroMotionEnabled(true);
                //setIntFIFOBufferOverflowEnabled(true);
                //setIntDMPEnabled(true);
                writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	799b      	ldrb	r3, [r3, #6]
 8002f2c:	2232      	movs	r2, #50	; 0x32
 8002f2e:	2138      	movs	r1, #56	; 0x38
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fe fd17 	bl	8001964 <_Z9writeBytehhh>

                success = true;
 8002f36:	2301      	movs	r3, #1
 8002f38:	76fb      	strb	r3, [r7, #27]
 8002f3a:	e001      	b.n	8002f40 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            } else {
                // unknown special command
                success = false;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	76fb      	strb	r3, [r7, #27]
            }
        }
        
        if (!success) {
 8002f40:	7efb      	ldrb	r3, [r7, #27]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f47f af62 	bne.w	8002e0c <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2e>
            if (useProgMem) free(progBuffer);
 8002f48:	797b      	ldrb	r3, [r7, #5]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x176>
 8002f4e:	69f8      	ldr	r0, [r7, #28]
 8002f50:	f00c fd40 	bl	800f9d4 <free>
            return false; // uh oh
 8002f54:	2300      	movs	r3, #0
 8002f56:	e006      	b.n	8002f66 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x188>
        }
    }
    if (useProgMem) free(progBuffer);
 8002f58:	797b      	ldrb	r3, [r7, #5]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x186>
 8002f5e:	69f8      	ldr	r0, [r7, #28]
 8002f60:	f00c fd38 	bl	800f9d4 <free>
    return true;
 8002f64:	2301      	movs	r3, #1
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>:
bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	80fb      	strh	r3, [r7, #6]
    return writeDMPConfigurationSet(data, dataSize, true);
 8002f7c:	88fa      	ldrh	r2, [r7, #6]
 8002f7e:	2301      	movs	r3, #1
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f7ff ff2b 	bl	8002dde <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>
 8002f88:	4603      	mov	r3, r0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <_ZN7MPU605013setDMPConfig1Eh>:

uint8_t MPU6050::getDMPConfig1() {
    readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig1(uint8_t config) {
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	799b      	ldrb	r3, [r3, #6]
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	2170      	movs	r1, #112	; 0x70
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe fcdc 	bl	8001964 <_Z9writeBytehhh>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_ZN7MPU605013setDMPConfig2Eh>:

uint8_t MPU6050::getDMPConfig2() {
    readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig2(uint8_t config) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	70fb      	strb	r3, [r7, #3]
    writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	799b      	ldrb	r3, [r3, #6]
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	2171      	movs	r1, #113	; 0x71
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe fccb 	bl	8001964 <_Z9writeBytehhh>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <_ZN7MPU605013dmpInitializeEv>:


// 6_AXIS_MOTIONAPPS20
uint8_t MPU6050::dmpInitialize() {
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b0af      	sub	sp, #188	; 0xbc
 8002fdc:	af04      	add	r7, sp, #16
 8002fde:	6078      	str	r0, [r7, #4]
    // reset device
    //DEBUG_PRINTLN(F("\n\nResetting MPU6050..."));
    reset();
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff fbf4 	bl	80027ce <_ZN7MPU60505resetEv>
    HAL_Delay(50); // wait after reset
 8002fe6:	2032      	movs	r0, #50	; 0x32
 8002fe8:	f002 fda6 	bl	8005b38 <HAL_Delay>
    Serial.println(F("Enabling wake cycle..."));
    setWakeCycleEnabled(true);*/

    // disable sleep mode
    //DEBUG_PRINTLN(F("Disabling sleep mode..."));
    setSleepEnabled(false);
 8002fec:	2100      	movs	r1, #0
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff fbfc 	bl	80027ec <_ZN7MPU605015setSleepEnabledEb>

    // get MPU hardware revision
    //DEBUG_PRINTLN(F("Selecting user bank 16..."));
    setMemoryBank(0x10, true, true);
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	2110      	movs	r1, #16
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff fd5c 	bl	8002ab8 <_ZN7MPU605013setMemoryBankEhbb>
    //DEBUG_PRINTLN(F("Selecting memory byte 6..."));
    setMemoryStartAddress(0x06);
 8003000:	2106      	movs	r1, #6
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff fd82 	bl	8002b0c <_ZN7MPU605021setMemoryStartAddressEh>
    //DEBUG_PRINTLN(F("Checking hardware revision..."));
    //DEBUG_PRINT(F("Revision @ user[16][6] = "));
    //DEBUG_PRINTLNF(readMemoryByte(), HEX);
    //DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
    setMemoryBank(0, false, false);
 8003008:	2300      	movs	r3, #0
 800300a:	2200      	movs	r2, #0
 800300c:	2100      	movs	r1, #0
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff fd52 	bl	8002ab8 <_ZN7MPU605013setMemoryBankEhbb>
    //DEBUG_PRINT(F("OTP bank is "));
    //DEBUG_PRINTLN(getOTPBankValid() ? F("valid!") : F("invalid!"));

    // get X/Y/Z gyro offsets
    //DEBUG_PRINTLN(F("Reading gyro offset TC values..."));
    int8_t xgOffsetTC = getXGyroOffsetTC();
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff fc51 	bl	80028bc <_ZN7MPU605016getXGyroOffsetTCEv>
 800301a:	4603      	mov	r3, r0
 800301c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    int8_t ygOffsetTC = getYGyroOffsetTC();
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff fc73 	bl	800290c <_ZN7MPU605016getYGyroOffsetTCEv>
 8003026:	4603      	mov	r3, r0
 8003028:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    int8_t zgOffsetTC = getZGyroOffsetTC();
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff fc95 	bl	800295c <_ZN7MPU605016getZGyroOffsetTCEv>
 8003032:	4603      	mov	r3, r0
 8003034:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    //DEBUG_PRINT(F("Z gyro offset = "));
    //DEBUG_PRINTLN(zgOffsetTC);

    // setup weird slave stuff (?)
    //DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
    setSlaveAddress(0, 0x7F);
 8003038:	227f      	movs	r2, #127	; 0x7f
 800303a:	2100      	movs	r1, #0
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff fb57 	bl	80026f0 <_ZN7MPU605015setSlaveAddressEhh>
    //DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
    setI2CMasterModeEnabled(false);
 8003042:	2100      	movs	r1, #0
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fb93 	bl	8002770 <_ZN7MPU605023setI2CMasterModeEnabledEb>
    //DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
    setSlaveAddress(0, 0x68);
 800304a:	2268      	movs	r2, #104	; 0x68
 800304c:	2100      	movs	r1, #0
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff fb4e 	bl	80026f0 <_ZN7MPU605015setSlaveAddressEhh>
    //DEBUG_PRINTLN(F("Resetting I2C Master control..."));
    resetI2CMaster();
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff fbab 	bl	80027b0 <_ZN7MPU605014resetI2CMasterEv>
    HAL_Delay(20);
 800305a:	2014      	movs	r0, #20
 800305c:	f002 fd6c 	bl	8005b38 <HAL_Delay>

    // load DMP code into memory banks
    //DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
    //DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
    //DEBUG_PRINTLN(F(" bytes)"));
    if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) {
 8003060:	2301      	movs	r3, #1
 8003062:	9301      	str	r3, [sp, #4]
 8003064:	2300      	movs	r3, #0
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	2300      	movs	r3, #0
 800306a:	f240 7289 	movw	r2, #1929	; 0x789
 800306e:	49cc      	ldr	r1, [pc, #816]	; (80033a0 <_ZN7MPU605013dmpInitializeEv+0x3c8>)
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff fe97 	bl	8002da4 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8234 	beq.w	80034e6 <_ZN7MPU605013dmpInitializeEv+0x50e>

        // write DMP configuration
        //DEBUG_PRINT(F("Writing DMP configuration to MPU memory banks ("));
        //DEBUG_PRINT(MPU6050_DMP_CONFIG_SIZE);
        //DEBUG_PRINTLN(F(" bytes in config def)"));
        if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
 800307e:	22c0      	movs	r2, #192	; 0xc0
 8003080:	49c8      	ldr	r1, [pc, #800]	; (80033a4 <_ZN7MPU605013dmpInitializeEv+0x3cc>)
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ff73 	bl	8002f6e <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 8229 	beq.w	80034e2 <_ZN7MPU605013dmpInitializeEv+0x50a>
            //DEBUG_PRINTLN(F("Success! DMP configuration written and verified."));

            //DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
            setClockSource(MPU6050_CLOCK_PLL_ZGYRO);
 8003090:	2103      	movs	r1, #3
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff fbbb 	bl	800280e <_ZN7MPU605014setClockSourceEh>

            //DEBUG_PRINTLN(F("Setting DMP and FIFO_OFLOW interrupts enabled..."));
            //setIntEnabled(0x12);

            //DEBUG_PRINTLN(F("Setting sample rate to 200Hz..."));
            setRate(4); // 1khz / (1 + 4) = 200 Hz
 8003098:	2104      	movs	r1, #4
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff fa87 	bl	80025ae <_ZN7MPU60507setRateEh>

            //DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
            setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
 80030a0:	2101      	movs	r1, #1
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff fa94 	bl	80025d0 <_ZN7MPU605020setExternalFrameSyncEh>

            //DEBUG_PRINTLN(F("Setting DLPF bandwidth to 42Hz..."));
            setDLPFMode(MPU6050_DLPF_BW_42);
 80030a8:	2103      	movs	r1, #3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff faa3 	bl	80025f6 <_ZN7MPU605011setDLPFModeEh>

            //DEBUG_PRINTLN(F("Setting gyro sensitivity to +/- 2000 deg/sec..."));
            setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
 80030b0:	2103      	movs	r1, #3
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff fab2 	bl	800261c <_ZN7MPU605021setFullScaleGyroRangeEh>

            //DEBUG_PRINTLN(F("Setting DMP programm start address"));
            //write start address MSB into register
            setDMPConfig1(0x03);
 80030b8:	2103      	movs	r1, #3
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ff69 	bl	8002f92 <_ZN7MPU605013setDMPConfig1Eh>
            //write start address LSB into register
            setDMPConfig2(0x00);
 80030c0:	2100      	movs	r1, #0
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff ff76 	bl	8002fb4 <_ZN7MPU605013setDMPConfig2Eh>

            //DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
            setOTPBankValid(false);
 80030c8:	2100      	movs	r1, #0
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff fbe5 	bl	800289a <_ZN7MPU605015setOTPBankValidEb>

            //DEBUG_PRINTLN(F("Setting X/Y/Z gyro offset TCs to previous values..."));
            setXGyroOffsetTC(xgOffsetTC);
 80030d0:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 80030d4:	4619      	mov	r1, r3
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff fc05 	bl	80028e6 <_ZN7MPU605016setXGyroOffsetTCEa>
            setYGyroOffsetTC(ygOffsetTC);
 80030dc:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 80030e0:	4619      	mov	r1, r3
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff fc27 	bl	8002936 <_ZN7MPU605016setYGyroOffsetTCEa>
            setZGyroOffsetTC(zgOffsetTC);
 80030e8:	f997 30a1 	ldrsb.w	r3, [r7, #161]	; 0xa1
 80030ec:	4619      	mov	r1, r3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff fc49 	bl	8002986 <_ZN7MPU605016setZGyroOffsetTCEa>
            //setYGyroOffset(0);
            //setZGyroOffset(0);

            //DEBUG_PRINTLN(F("Writing final memory update 1/7 (function unknown)..."));
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80030fa:	2300      	movs	r3, #0
 80030fc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003100:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003104:	2b03      	cmp	r3, #3
 8003106:	d906      	bls.n	8003116 <_ZN7MPU605013dmpInitializeEv+0x13e>
 8003108:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800310c:	1c9a      	adds	r2, r3, #2
 800310e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003112:	429a      	cmp	r2, r3
 8003114:	db15      	blt.n	8003142 <_ZN7MPU605013dmpInitializeEv+0x16a>
 8003116:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800311a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800311e:	49a2      	ldr	r1, [pc, #648]	; (80033a8 <_ZN7MPU605013dmpInitializeEv+0x3d0>)
 8003120:	5c8a      	ldrb	r2, [r1, r2]
 8003122:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003126:	440b      	add	r3, r1
 8003128:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800312c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003130:	3301      	adds	r3, #1
 8003132:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003136:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800313a:	3301      	adds	r3, #1
 800313c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003140:	e7de      	b.n	8003100 <_ZN7MPU605013dmpInitializeEv+0x128>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003142:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003146:	3103      	adds	r1, #3
 8003148:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800314c:	b29a      	uxth	r2, r3
 800314e:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8003152:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003156:	2400      	movs	r4, #0
 8003158:	9402      	str	r4, [sp, #8]
 800315a:	2401      	movs	r4, #1
 800315c:	9401      	str	r4, [sp, #4]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	4603      	mov	r3, r0
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff fd49 	bl	8002bfa <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 2/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003168:	2300      	movs	r3, #0
 800316a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800316e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003172:	2b03      	cmp	r3, #3
 8003174:	d906      	bls.n	8003184 <_ZN7MPU605013dmpInitializeEv+0x1ac>
 8003176:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800317a:	1c9a      	adds	r2, r3, #2
 800317c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003180:	429a      	cmp	r2, r3
 8003182:	db15      	blt.n	80031b0 <_ZN7MPU605013dmpInitializeEv+0x1d8>
 8003184:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003188:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800318c:	4986      	ldr	r1, [pc, #536]	; (80033a8 <_ZN7MPU605013dmpInitializeEv+0x3d0>)
 800318e:	5c8a      	ldrb	r2, [r1, r2]
 8003190:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003194:	440b      	add	r3, r1
 8003196:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800319a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800319e:	3301      	adds	r3, #1
 80031a0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80031a4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80031a8:	3301      	adds	r3, #1
 80031aa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80031ae:	e7de      	b.n	800316e <_ZN7MPU605013dmpInitializeEv+0x196>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80031b0:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80031b4:	3103      	adds	r1, #3
 80031b6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 80031c0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80031c4:	2400      	movs	r4, #0
 80031c6:	9402      	str	r4, [sp, #8]
 80031c8:	2401      	movs	r4, #1
 80031ca:	9401      	str	r4, [sp, #4]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	4603      	mov	r3, r0
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff fd12 	bl	8002bfa <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff fadb 	bl	8002792 <_ZN7MPU60509resetFIFOEv>

            //DEBUG_PRINTLN(F("Reading FIFO count..."));
            uint16_t fifoCount = getFIFOCount();
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff fb29 	bl	8002834 <_ZN7MPU605012getFIFOCountEv>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            uint8_t fifoBuffer[128];

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);
            getFIFOBytes(fifoBuffer, fifoCount);
 80031e8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	f107 030c 	add.w	r3, r7, #12
 80031f2:	4619      	mov	r1, r3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff fb37 	bl	8002868 <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
            setMotionDetectionThreshold(2);
 80031fa:	2102      	movs	r1, #2
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff fa33 	bl	8002668 <_ZN7MPU605027setMotionDetectionThresholdEh>

            //DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
            setZeroMotionDetectionThreshold(156);
 8003202:	219c      	movs	r1, #156	; 0x9c
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff fa51 	bl	80026ac <_ZN7MPU605031setZeroMotionDetectionThresholdEh>

            //DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
            setMotionDetectionDuration(80);
 800320a:	2150      	movs	r1, #80	; 0x50
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff fa3c 	bl	800268a <_ZN7MPU605026setMotionDetectionDurationEh>

            //DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
            setZeroMotionDetectionDuration(0);
 8003212:	2100      	movs	r1, #0
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fa5a 	bl	80026ce <_ZN7MPU605030setZeroMotionDetectionDurationEh>

            //DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff fab9 	bl	8002792 <_ZN7MPU60509resetFIFOEv>

            //DEBUG_PRINTLN(F("Enabling FIFO..."));
            setFIFOEnabled(true);
 8003220:	2101      	movs	r1, #1
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff fa93 	bl	800274e <_ZN7MPU605014setFIFOEnabledEb>

            //DEBUG_PRINTLN(F("Enabling DMP..."));
            setDMPEnabled(true);
 8003228:	2101      	movs	r1, #1
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fc24 	bl	8002a78 <_ZN7MPU605013setDMPEnabledEb>

            //DEBUG_PRINTLN(F("Resetting DMP..."));
            resetDMP();
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff fc32 	bl	8002a9a <_ZN7MPU60508resetDMPEv>

            //DEBUG_PRINTLN(F("Writing final memory update 3/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003236:	2300      	movs	r3, #0
 8003238:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800323c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003240:	2b03      	cmp	r3, #3
 8003242:	d906      	bls.n	8003252 <_ZN7MPU605013dmpInitializeEv+0x27a>
 8003244:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003248:	1c9a      	adds	r2, r3, #2
 800324a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800324e:	429a      	cmp	r2, r3
 8003250:	db15      	blt.n	800327e <_ZN7MPU605013dmpInitializeEv+0x2a6>
 8003252:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003256:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800325a:	4953      	ldr	r1, [pc, #332]	; (80033a8 <_ZN7MPU605013dmpInitializeEv+0x3d0>)
 800325c:	5c8a      	ldrb	r2, [r1, r2]
 800325e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003262:	440b      	add	r3, r1
 8003264:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003268:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800326c:	3301      	adds	r3, #1
 800326e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003272:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003276:	3301      	adds	r3, #1
 8003278:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800327c:	e7de      	b.n	800323c <_ZN7MPU605013dmpInitializeEv+0x264>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 800327e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003282:	3103      	adds	r1, #3
 8003284:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003288:	b29a      	uxth	r2, r3
 800328a:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 800328e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003292:	2400      	movs	r4, #0
 8003294:	9402      	str	r4, [sp, #8]
 8003296:	2401      	movs	r4, #1
 8003298:	9401      	str	r4, [sp, #4]
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	4603      	mov	r3, r0
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff fcab 	bl	8002bfa <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 4/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80032aa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d906      	bls.n	80032c0 <_ZN7MPU605013dmpInitializeEv+0x2e8>
 80032b2:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80032b6:	1c9a      	adds	r2, r3, #2
 80032b8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80032bc:	429a      	cmp	r2, r3
 80032be:	db15      	blt.n	80032ec <_ZN7MPU605013dmpInitializeEv+0x314>
 80032c0:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80032c4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80032c8:	4937      	ldr	r1, [pc, #220]	; (80033a8 <_ZN7MPU605013dmpInitializeEv+0x3d0>)
 80032ca:	5c8a      	ldrb	r2, [r1, r2]
 80032cc:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80032d0:	440b      	add	r3, r1
 80032d2:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80032d6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80032da:	3301      	adds	r3, #1
 80032dc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80032e0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80032e4:	3301      	adds	r3, #1
 80032e6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80032ea:	e7de      	b.n	80032aa <_ZN7MPU605013dmpInitializeEv+0x2d2>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80032ec:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80032f0:	3103      	adds	r1, #3
 80032f2:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 80032fc:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003300:	2400      	movs	r4, #0
 8003302:	9402      	str	r4, [sp, #8]
 8003304:	2401      	movs	r4, #1
 8003306:	9401      	str	r4, [sp, #4]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	4603      	mov	r3, r0
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff fc74 	bl	8002bfa <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Writing final memory update 5/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003312:	2300      	movs	r3, #0
 8003314:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003318:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800331c:	2b03      	cmp	r3, #3
 800331e:	d906      	bls.n	800332e <_ZN7MPU605013dmpInitializeEv+0x356>
 8003320:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003324:	1c9a      	adds	r2, r3, #2
 8003326:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800332a:	429a      	cmp	r2, r3
 800332c:	db15      	blt.n	800335a <_ZN7MPU605013dmpInitializeEv+0x382>
 800332e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003332:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003336:	491c      	ldr	r1, [pc, #112]	; (80033a8 <_ZN7MPU605013dmpInitializeEv+0x3d0>)
 8003338:	5c8a      	ldrb	r2, [r1, r2]
 800333a:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800333e:	440b      	add	r3, r1
 8003340:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003344:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003348:	3301      	adds	r3, #1
 800334a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800334e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003352:	3301      	adds	r3, #1
 8003354:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003358:	e7de      	b.n	8003318 <_ZN7MPU605013dmpInitializeEv+0x340>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 800335a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800335e:	3103      	adds	r1, #3
 8003360:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003364:	b29a      	uxth	r2, r3
 8003366:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 800336a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800336e:	2400      	movs	r4, #0
 8003370:	9402      	str	r4, [sp, #8]
 8003372:	2401      	movs	r4, #1
 8003374:	9401      	str	r4, [sp, #4]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	4603      	mov	r3, r0
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff fc3d 	bl	8002bfa <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fa57 	bl	8002834 <_ZN7MPU605012getFIFOCountEv>
 8003386:	4603      	mov	r3, r0
 8003388:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800338c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003390:	2b02      	cmp	r3, #2
 8003392:	bf94      	ite	ls
 8003394:	2301      	movls	r3, #1
 8003396:	2300      	movhi	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d006      	beq.n	80033ac <_ZN7MPU605013dmpInitializeEv+0x3d4>
 800339e:	e7ef      	b.n	8003380 <_ZN7MPU605013dmpInitializeEv+0x3a8>
 80033a0:	080127f0 	.word	0x080127f0
 80033a4:	08012f7c 	.word	0x08012f7c
 80033a8:	0801303c 	.word	0x0801303c

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);
            //DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 80033ac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	f107 030c 	add.w	r3, r7, #12
 80033b6:	4619      	mov	r1, r3
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff fa55 	bl	8002868 <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINT(F("Current interrupt status="));
            //DEBUG_PRINTLNF(getIntStatus(), HEX);

            //DEBUG_PRINTLN(F("Reading final memory update 6/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80033be:	2300      	movs	r3, #0
 80033c0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80033c4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d906      	bls.n	80033da <_ZN7MPU605013dmpInitializeEv+0x402>
 80033cc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80033d0:	1c9a      	adds	r2, r3, #2
 80033d2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033d6:	429a      	cmp	r2, r3
 80033d8:	db15      	blt.n	8003406 <_ZN7MPU605013dmpInitializeEv+0x42e>
 80033da:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80033de:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033e2:	4943      	ldr	r1, [pc, #268]	; (80034f0 <_ZN7MPU605013dmpInitializeEv+0x518>)
 80033e4:	5c8a      	ldrb	r2, [r1, r2]
 80033e6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80033ea:	440b      	add	r3, r1
 80033ec:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80033f0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033f4:	3301      	adds	r3, #1
 80033f6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80033fa:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80033fe:	3301      	adds	r3, #1
 8003400:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003404:	e7de      	b.n	80033c4 <_ZN7MPU605013dmpInitializeEv+0x3ec>
            readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003406:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800340a:	3103      	adds	r1, #3
 800340c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003410:	b29a      	uxth	r2, r3
 8003412:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 8003416:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	4603      	mov	r3, r0
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff fb85 	bl	8002b2e <_ZN7MPU605015readMemoryBlockEPhthh>

            //DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff fa05 	bl	8002834 <_ZN7MPU605012getFIFOCountEv>
 800342a:	4603      	mov	r3, r0
 800342c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8003430:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003434:	2b02      	cmp	r3, #2
 8003436:	bf94      	ite	ls
 8003438:	2301      	movls	r3, #1
 800343a:	2300      	movhi	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d000      	beq.n	8003444 <_ZN7MPU605013dmpInitializeEv+0x46c>
 8003442:	e7ef      	b.n	8003424 <_ZN7MPU605013dmpInitializeEv+0x44c>

            //DEBUG_PRINT(F("Current FIFO count="));
            //DEBUG_PRINTLN(fifoCount);

            //DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 8003444:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003448:	b2da      	uxtb	r2, r3
 800344a:	f107 030c 	add.w	r3, r7, #12
 800344e:	4619      	mov	r1, r3
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff fa09 	bl	8002868 <_ZN7MPU605012getFIFOBytesEPhh>

            //DEBUG_PRINT(F("Current interrupt status="));
            //DEBUG_PRINTLNF(getIntStatus(), HEX);

            //DEBUG_PRINTLN(F("Writing final memory update 7/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003456:	2300      	movs	r3, #0
 8003458:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800345c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003460:	2b03      	cmp	r3, #3
 8003462:	d906      	bls.n	8003472 <_ZN7MPU605013dmpInitializeEv+0x49a>
 8003464:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003468:	1c9a      	adds	r2, r3, #2
 800346a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800346e:	429a      	cmp	r2, r3
 8003470:	db15      	blt.n	800349e <_ZN7MPU605013dmpInitializeEv+0x4c6>
 8003472:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003476:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800347a:	491d      	ldr	r1, [pc, #116]	; (80034f0 <_ZN7MPU605013dmpInitializeEv+0x518>)
 800347c:	5c8a      	ldrb	r2, [r1, r2]
 800347e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003482:	440b      	add	r3, r1
 8003484:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003488:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800348c:	3301      	adds	r3, #1
 800348e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003492:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003496:	3301      	adds	r3, #1
 8003498:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800349c:	e7de      	b.n	800345c <_ZN7MPU605013dmpInitializeEv+0x484>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 800349e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80034a2:	3103      	adds	r1, #3
 80034a4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
 80034ae:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80034b2:	2400      	movs	r4, #0
 80034b4:	9402      	str	r4, [sp, #8]
 80034b6:	2401      	movs	r4, #1
 80034b8:	9401      	str	r4, [sp, #4]
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	4603      	mov	r3, r0
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff fb9b 	bl	8002bfa <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            //DEBUG_PRINTLN(F("DMP is good to go! Finally."));

            //DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
            setDMPEnabled(false);
 80034c4:	2100      	movs	r1, #0
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff fad6 	bl	8002a78 <_ZN7MPU605013setDMPEnabledEb>

            //DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
            dmpPacketSize = 42;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	222a      	movs	r2, #42	; 0x2a
 80034d0:	809a      	strh	r2, [r3, #4]
            /*if ((dmpPacketBuffer = (uint8_t *)malloc(42)) == 0) {
                return 3; // TODO: proper error code for no memory
            }*/

            //DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
            resetFIFO();
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff f95d 	bl	8002792 <_ZN7MPU60509resetFIFOEv>
            getIntStatus();
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff f926 	bl	800272a <_ZN7MPU605012getIntStatusEv>
        }
    } else {
        //DEBUG_PRINTLN(F("ERROR! DMP code verification failed."));
        return 1; // main binary block loading failed
    }
    return 0; // success
 80034de:	2300      	movs	r3, #0
 80034e0:	e002      	b.n	80034e8 <_ZN7MPU605013dmpInitializeEv+0x510>
            return 2; // configuration block loading failed
 80034e2:	2302      	movs	r3, #2
 80034e4:	e000      	b.n	80034e8 <_ZN7MPU605013dmpInitializeEv+0x510>
        return 1; // main binary block loading failed
 80034e6:	2301      	movs	r3, #1
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	37ac      	adds	r7, #172	; 0xac
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd90      	pop	{r4, r7, pc}
 80034f0:	0801303c 	.word	0x0801303c

080034f4 <_Z41__static_initialization_and_destruction_0ii>:
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d107      	bne.n	8003514 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800350a:	4293      	cmp	r3, r2
 800350c:	d102      	bne.n	8003514 <_Z41__static_initialization_and_destruction_0ii+0x20>
MPU6050 mpu;                      //create new object
 800350e:	4803      	ldr	r0, [pc, #12]	; (800351c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003510:	f7ff f828 	bl	8002564 <_ZN7MPU6050C1Ev>
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	200004e8 	.word	0x200004e8

08003520 <_GLOBAL__sub_I_MPUoutputQuaternion>:
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
 8003524:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003528:	2001      	movs	r0, #1
 800352a:	f7ff ffe3 	bl	80034f4 <_Z41__static_initialization_and_destruction_0ii>
 800352e:	bd80      	pop	{r7, pc}

08003530 <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f00a fae5 	bl	800db08 <asinf>
 800353e:	4603      	mov	r3, r0
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <_ZSt4atanf>:
  { return __builtin_atanf(__x); }
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f00a f95f 	bl	800d814 <atanf>
 8003556:	4603      	mov	r3, r0
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <_Z17get_XW_diffAnglesv>:
 * form of a Quaternion and then converts it to usable PITCH,ROLL,YAW angles
 * 
 * --Custom Method!
 */
void get_XW_diffAngles()
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
  float *p = QuaternionSLERP(QuaternionProduct(&FrameOriginQuaternion[0] , QuaternionSLERP(&OriginQuaternion[0], &MPUoutputQuaternion[0])), &LoopWQuaternion[0]);
 8003566:	494e      	ldr	r1, [pc, #312]	; (80036a0 <_Z17get_XW_diffAnglesv+0x140>)
 8003568:	484e      	ldr	r0, [pc, #312]	; (80036a4 <_Z17get_XW_diffAnglesv+0x144>)
 800356a:	f7fe ff73 	bl	8002454 <_Z15QuaternionSLERPPfS_>
 800356e:	4603      	mov	r3, r0
 8003570:	4619      	mov	r1, r3
 8003572:	484d      	ldr	r0, [pc, #308]	; (80036a8 <_Z17get_XW_diffAnglesv+0x148>)
 8003574:	f7fe fe40 	bl	80021f8 <_Z17QuaternionProductPfS_>
 8003578:	4603      	mov	r3, r0
 800357a:	494c      	ldr	r1, [pc, #304]	; (80036ac <_Z17get_XW_diffAnglesv+0x14c>)
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe ff69 	bl	8002454 <_Z15QuaternionSLERPPfS_>
 8003582:	6078      	str	r0, [r7, #4]
  LoopXWQuaternion[0] = *p;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a49      	ldr	r2, [pc, #292]	; (80036b0 <_Z17get_XW_diffAnglesv+0x150>)
 800358a:	6013      	str	r3, [r2, #0]
  LoopXWQuaternion[1] = *(p + 1);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a47      	ldr	r2, [pc, #284]	; (80036b0 <_Z17get_XW_diffAnglesv+0x150>)
 8003592:	6053      	str	r3, [r2, #4]
  LoopXWQuaternion[2] = *(p + 2);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a45      	ldr	r2, [pc, #276]	; (80036b0 <_Z17get_XW_diffAnglesv+0x150>)
 800359a:	6093      	str	r3, [r2, #8]
  LoopXWQuaternion[3] = *(p + 3);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a43      	ldr	r2, [pc, #268]	; (80036b0 <_Z17get_XW_diffAnglesv+0x150>)
 80035a2:	60d3      	str	r3, [r2, #12]

  //difference x-w in degrees
  PID_Pitch_xw_diff = 2 * (((float)asin(LoopXWQuaternion[1]) * 180) / M_PI);
 80035a4:	4b42      	ldr	r3, [pc, #264]	; (80036b0 <_Z17get_XW_diffAnglesv+0x150>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff ffc1 	bl	8003530 <_ZSt4asinf>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4940      	ldr	r1, [pc, #256]	; (80036b4 <_Z17get_XW_diffAnglesv+0x154>)
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fd fc22 	bl	8000dfc <__aeabi_fmul>
 80035b8:	4603      	mov	r3, r0
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fc ff70 	bl	80004a0 <__aeabi_f2d>
 80035c0:	a335      	add	r3, pc, #212	; (adr r3, 8003698 <_Z17get_XW_diffAnglesv+0x138>)
 80035c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c6:	f7fd f8ed 	bl	80007a4 <__aeabi_ddiv>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4610      	mov	r0, r2
 80035d0:	4619      	mov	r1, r3
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	f7fc fe05 	bl	80001e4 <__adddf3>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	f7fd faad 	bl	8000b40 <__aeabi_d2f>
 80035e6:	4603      	mov	r3, r0
 80035e8:	4a33      	ldr	r2, [pc, #204]	; (80036b8 <_Z17get_XW_diffAnglesv+0x158>)
 80035ea:	6013      	str	r3, [r2, #0]
  PID_Roll_xw_diff  = 2 * (((float)asin(LoopXWQuaternion[2]) * 180) / M_PI);
 80035ec:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <_Z17get_XW_diffAnglesv+0x150>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff9d 	bl	8003530 <_ZSt4asinf>
 80035f6:	4603      	mov	r3, r0
 80035f8:	492e      	ldr	r1, [pc, #184]	; (80036b4 <_Z17get_XW_diffAnglesv+0x154>)
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fd fbfe 	bl	8000dfc <__aeabi_fmul>
 8003600:	4603      	mov	r3, r0
 8003602:	4618      	mov	r0, r3
 8003604:	f7fc ff4c 	bl	80004a0 <__aeabi_f2d>
 8003608:	a323      	add	r3, pc, #140	; (adr r3, 8003698 <_Z17get_XW_diffAnglesv+0x138>)
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	f7fd f8c9 	bl	80007a4 <__aeabi_ddiv>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4610      	mov	r0, r2
 8003618:	4619      	mov	r1, r3
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	f7fc fde1 	bl	80001e4 <__adddf3>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	f7fd fa89 	bl	8000b40 <__aeabi_d2f>
 800362e:	4603      	mov	r3, r0
 8003630:	4a22      	ldr	r2, [pc, #136]	; (80036bc <_Z17get_XW_diffAnglesv+0x15c>)
 8003632:	6013      	str	r3, [r2, #0]
  PID_Yaw_xw_diff   = 2 * (((float)atan(LoopXWQuaternion[3] / LoopXWQuaternion[0]) * 180) / M_PI);
 8003634:	4b1e      	ldr	r3, [pc, #120]	; (80036b0 <_Z17get_XW_diffAnglesv+0x150>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <_Z17get_XW_diffAnglesv+0x150>)
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f7fd fc90 	bl	8000f64 <__aeabi_fdiv>
 8003644:	4603      	mov	r3, r0
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff ff7e 	bl	8003548 <_ZSt4atanf>
 800364c:	4603      	mov	r3, r0
 800364e:	4919      	ldr	r1, [pc, #100]	; (80036b4 <_Z17get_XW_diffAnglesv+0x154>)
 8003650:	4618      	mov	r0, r3
 8003652:	f7fd fbd3 	bl	8000dfc <__aeabi_fmul>
 8003656:	4603      	mov	r3, r0
 8003658:	4618      	mov	r0, r3
 800365a:	f7fc ff21 	bl	80004a0 <__aeabi_f2d>
 800365e:	a30e      	add	r3, pc, #56	; (adr r3, 8003698 <_Z17get_XW_diffAnglesv+0x138>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f7fd f89e 	bl	80007a4 <__aeabi_ddiv>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	f7fc fdb6 	bl	80001e4 <__adddf3>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	f7fd fa5e 	bl	8000b40 <__aeabi_d2f>
 8003684:	4603      	mov	r3, r0
 8003686:	4a0e      	ldr	r2, [pc, #56]	; (80036c0 <_Z17get_XW_diffAnglesv+0x160>)
 8003688:	6013      	str	r3, [r2, #0]
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	f3af 8000 	nop.w
 8003698:	54442d18 	.word	0x54442d18
 800369c:	400921fb 	.word	0x400921fb
 80036a0:	20000494 	.word	0x20000494
 80036a4:	200004a4 	.word	0x200004a4
 80036a8:	20000000 	.word	0x20000000
 80036ac:	20000010 	.word	0x20000010
 80036b0:	200004b4 	.word	0x200004b4
 80036b4:	43340000 	.word	0x43340000
 80036b8:	20000534 	.word	0x20000534
 80036bc:	20000538 	.word	0x20000538
 80036c0:	2000053c 	.word	0x2000053c

080036c4 <_Z17reset_WQuaternionv>:
 * @brief 
 * 
 * //NOTDONE
 */
void reset_WQuaternion()
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
  float *p = QuaternionProduct(&FrameOriginQuaternion[0] , QuaternionSLERP(&OriginQuaternion[0], &MPUoutputQuaternion[0]));
 80036ca:	490f      	ldr	r1, [pc, #60]	; (8003708 <_Z17reset_WQuaternionv+0x44>)
 80036cc:	480f      	ldr	r0, [pc, #60]	; (800370c <_Z17reset_WQuaternionv+0x48>)
 80036ce:	f7fe fec1 	bl	8002454 <_Z15QuaternionSLERPPfS_>
 80036d2:	4603      	mov	r3, r0
 80036d4:	4619      	mov	r1, r3
 80036d6:	480e      	ldr	r0, [pc, #56]	; (8003710 <_Z17reset_WQuaternionv+0x4c>)
 80036d8:	f7fe fd8e 	bl	80021f8 <_Z17QuaternionProductPfS_>
 80036dc:	6078      	str	r0, [r7, #4]
  LoopWQuaternion[0] = *p;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <_Z17reset_WQuaternionv+0x50>)
 80036e4:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p + 1);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <_Z17reset_WQuaternionv+0x50>)
 80036ec:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p + 2);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	4a08      	ldr	r2, [pc, #32]	; (8003714 <_Z17reset_WQuaternionv+0x50>)
 80036f4:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p + 3); 
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	4a06      	ldr	r2, [pc, #24]	; (8003714 <_Z17reset_WQuaternionv+0x50>)
 80036fc:	60d3      	str	r3, [r2, #12]
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000494 	.word	0x20000494
 800370c:	200004a4 	.word	0x200004a4
 8003710:	20000000 	.word	0x20000000
 8003714:	20000010 	.word	0x20000010

08003718 <_Z10update_PIDv>:
 * @brief Gets PITCH,ROLL,YAW Y values and integrates/differentiates
 * 
 * --Custom Method!
 */
void update_PID()
{
 8003718:	b598      	push	{r3, r4, r7, lr}
 800371a:	af00      	add	r7, sp, #0
  PID_Yaw_xw_diff = -PID_Yaw_xw_diff;
 800371c:	4b94      	ldr	r3, [pc, #592]	; (8003970 <_Z10update_PIDv+0x258>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003724:	4a92      	ldr	r2, [pc, #584]	; (8003970 <_Z10update_PIDv+0x258>)
 8003726:	6013      	str	r3, [r2, #0]
  Pitch_I_Sum += (PID_Pitch_xw_diff * Pitch_PID_k[1]);                                                                                  // integrate
 8003728:	4b92      	ldr	r3, [pc, #584]	; (8003974 <_Z10update_PIDv+0x25c>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4a92      	ldr	r2, [pc, #584]	; (8003978 <_Z10update_PIDv+0x260>)
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	4611      	mov	r1, r2
 8003732:	4618      	mov	r0, r3
 8003734:	f7fd fb62 	bl	8000dfc <__aeabi_fmul>
 8003738:	4603      	mov	r3, r0
 800373a:	461a      	mov	r2, r3
 800373c:	4b8f      	ldr	r3, [pc, #572]	; (800397c <_Z10update_PIDv+0x264>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4619      	mov	r1, r3
 8003742:	4610      	mov	r0, r2
 8003744:	f7fd fa52 	bl	8000bec <__addsf3>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	4b8b      	ldr	r3, [pc, #556]	; (800397c <_Z10update_PIDv+0x264>)
 800374e:	601a      	str	r2, [r3, #0]
  Roll_I_Sum  += (PID_Roll_xw_diff  * Roll_PID_k[1] );
 8003750:	4b8b      	ldr	r3, [pc, #556]	; (8003980 <_Z10update_PIDv+0x268>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4a8b      	ldr	r2, [pc, #556]	; (8003984 <_Z10update_PIDv+0x26c>)
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f7fd fb4e 	bl	8000dfc <__aeabi_fmul>
 8003760:	4603      	mov	r3, r0
 8003762:	461a      	mov	r2, r3
 8003764:	4b88      	ldr	r3, [pc, #544]	; (8003988 <_Z10update_PIDv+0x270>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f7fd fa3e 	bl	8000bec <__addsf3>
 8003770:	4603      	mov	r3, r0
 8003772:	461a      	mov	r2, r3
 8003774:	4b84      	ldr	r3, [pc, #528]	; (8003988 <_Z10update_PIDv+0x270>)
 8003776:	601a      	str	r2, [r3, #0]
  Yaw_I_Sum   += (PID_Yaw_xw_diff   * Yaw_PID_k[1]  );
 8003778:	4b84      	ldr	r3, [pc, #528]	; (800398c <_Z10update_PIDv+0x274>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4a7c      	ldr	r2, [pc, #496]	; (8003970 <_Z10update_PIDv+0x258>)
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f7fd fb3a 	bl	8000dfc <__aeabi_fmul>
 8003788:	4603      	mov	r3, r0
 800378a:	461a      	mov	r2, r3
 800378c:	4b80      	ldr	r3, [pc, #512]	; (8003990 <_Z10update_PIDv+0x278>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f7fd fa2a 	bl	8000bec <__addsf3>
 8003798:	4603      	mov	r3, r0
 800379a:	461a      	mov	r2, r3
 800379c:	4b7c      	ldr	r3, [pc, #496]	; (8003990 <_Z10update_PIDv+0x278>)
 800379e:	601a      	str	r2, [r3, #0]

  if (Pitch_I_Sum >  500) Pitch_I_Sum =  500;                         //constrain integration (-500 500)
 80037a0:	4b76      	ldr	r3, [pc, #472]	; (800397c <_Z10update_PIDv+0x264>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	497b      	ldr	r1, [pc, #492]	; (8003994 <_Z10update_PIDv+0x27c>)
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fd fce4 	bl	8001174 <__aeabi_fcmpgt>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <_Z10update_PIDv+0xa0>
 80037b2:	4b72      	ldr	r3, [pc, #456]	; (800397c <_Z10update_PIDv+0x264>)
 80037b4:	4a77      	ldr	r2, [pc, #476]	; (8003994 <_Z10update_PIDv+0x27c>)
 80037b6:	601a      	str	r2, [r3, #0]
  if (Roll_I_Sum  >  500) Roll_I_Sum  =  500;
 80037b8:	4b73      	ldr	r3, [pc, #460]	; (8003988 <_Z10update_PIDv+0x270>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4975      	ldr	r1, [pc, #468]	; (8003994 <_Z10update_PIDv+0x27c>)
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd fcd8 	bl	8001174 <__aeabi_fcmpgt>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <_Z10update_PIDv+0xb8>
 80037ca:	4b6f      	ldr	r3, [pc, #444]	; (8003988 <_Z10update_PIDv+0x270>)
 80037cc:	4a71      	ldr	r2, [pc, #452]	; (8003994 <_Z10update_PIDv+0x27c>)
 80037ce:	601a      	str	r2, [r3, #0]
  if (Yaw_I_Sum   >  500) Yaw_I_Sum   =  500;
 80037d0:	4b6f      	ldr	r3, [pc, #444]	; (8003990 <_Z10update_PIDv+0x278>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	496f      	ldr	r1, [pc, #444]	; (8003994 <_Z10update_PIDv+0x27c>)
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd fccc 	bl	8001174 <__aeabi_fcmpgt>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <_Z10update_PIDv+0xd0>
 80037e2:	4b6b      	ldr	r3, [pc, #428]	; (8003990 <_Z10update_PIDv+0x278>)
 80037e4:	4a6b      	ldr	r2, [pc, #428]	; (8003994 <_Z10update_PIDv+0x27c>)
 80037e6:	601a      	str	r2, [r3, #0]
  if (Pitch_I_Sum < -500) Pitch_I_Sum = -500;       //NOTDONE use defines for values
 80037e8:	4b64      	ldr	r3, [pc, #400]	; (800397c <_Z10update_PIDv+0x264>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	496a      	ldr	r1, [pc, #424]	; (8003998 <_Z10update_PIDv+0x280>)
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd fca2 	bl	8001138 <__aeabi_fcmplt>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <_Z10update_PIDv+0xe8>
 80037fa:	4b60      	ldr	r3, [pc, #384]	; (800397c <_Z10update_PIDv+0x264>)
 80037fc:	4a66      	ldr	r2, [pc, #408]	; (8003998 <_Z10update_PIDv+0x280>)
 80037fe:	601a      	str	r2, [r3, #0]
  if (Roll_I_Sum  < -500) Roll_I_Sum  = -500;
 8003800:	4b61      	ldr	r3, [pc, #388]	; (8003988 <_Z10update_PIDv+0x270>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4964      	ldr	r1, [pc, #400]	; (8003998 <_Z10update_PIDv+0x280>)
 8003806:	4618      	mov	r0, r3
 8003808:	f7fd fc96 	bl	8001138 <__aeabi_fcmplt>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <_Z10update_PIDv+0x100>
 8003812:	4b5d      	ldr	r3, [pc, #372]	; (8003988 <_Z10update_PIDv+0x270>)
 8003814:	4a60      	ldr	r2, [pc, #384]	; (8003998 <_Z10update_PIDv+0x280>)
 8003816:	601a      	str	r2, [r3, #0]
  if (Yaw_I_Sum   <    0) Yaw_I_Sum   =    0;
 8003818:	4b5d      	ldr	r3, [pc, #372]	; (8003990 <_Z10update_PIDv+0x278>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f04f 0100 	mov.w	r1, #0
 8003820:	4618      	mov	r0, r3
 8003822:	f7fd fc89 	bl	8001138 <__aeabi_fcmplt>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <_Z10update_PIDv+0x11c>
 800382c:	4b58      	ldr	r3, [pc, #352]	; (8003990 <_Z10update_PIDv+0x278>)
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

  PID_Pitch_y = (PID_Pitch_xw_diff * Pitch_PID_k[0] * 10) + Pitch_I_Sum + ((PID_Pitch_xw_diff - Pitch_D_old) * Pitch_PID_k[2] * 100);   //combine P,I,D values
 8003834:	4b4f      	ldr	r3, [pc, #316]	; (8003974 <_Z10update_PIDv+0x25c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a4f      	ldr	r2, [pc, #316]	; (8003978 <_Z10update_PIDv+0x260>)
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	4611      	mov	r1, r2
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd fadc 	bl	8000dfc <__aeabi_fmul>
 8003844:	4603      	mov	r3, r0
 8003846:	4955      	ldr	r1, [pc, #340]	; (800399c <_Z10update_PIDv+0x284>)
 8003848:	4618      	mov	r0, r3
 800384a:	f7fd fad7 	bl	8000dfc <__aeabi_fmul>
 800384e:	4603      	mov	r3, r0
 8003850:	461a      	mov	r2, r3
 8003852:	4b4a      	ldr	r3, [pc, #296]	; (800397c <_Z10update_PIDv+0x264>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4619      	mov	r1, r3
 8003858:	4610      	mov	r0, r2
 800385a:	f7fd f9c7 	bl	8000bec <__addsf3>
 800385e:	4603      	mov	r3, r0
 8003860:	461c      	mov	r4, r3
 8003862:	4b45      	ldr	r3, [pc, #276]	; (8003978 <_Z10update_PIDv+0x260>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a4e      	ldr	r2, [pc, #312]	; (80039a0 <_Z10update_PIDv+0x288>)
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f7fd f9bb 	bl	8000be8 <__aeabi_fsub>
 8003872:	4603      	mov	r3, r0
 8003874:	461a      	mov	r2, r3
 8003876:	4b3f      	ldr	r3, [pc, #252]	; (8003974 <_Z10update_PIDv+0x25c>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f7fd fabd 	bl	8000dfc <__aeabi_fmul>
 8003882:	4603      	mov	r3, r0
 8003884:	4947      	ldr	r1, [pc, #284]	; (80039a4 <_Z10update_PIDv+0x28c>)
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd fab8 	bl	8000dfc <__aeabi_fmul>
 800388c:	4603      	mov	r3, r0
 800388e:	4619      	mov	r1, r3
 8003890:	4620      	mov	r0, r4
 8003892:	f7fd f9ab 	bl	8000bec <__addsf3>
 8003896:	4603      	mov	r3, r0
 8003898:	461a      	mov	r2, r3
 800389a:	4b43      	ldr	r3, [pc, #268]	; (80039a8 <_Z10update_PIDv+0x290>)
 800389c:	601a      	str	r2, [r3, #0]
  PID_Roll_y  = (PID_Roll_xw_diff  * Roll_PID_k[0]  * 10) + Roll_I_Sum  + ((PID_Roll_xw_diff  - Roll_D_old ) * Roll_PID_k[2]  * 100);
 800389e:	4b38      	ldr	r3, [pc, #224]	; (8003980 <_Z10update_PIDv+0x268>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a38      	ldr	r2, [pc, #224]	; (8003984 <_Z10update_PIDv+0x26c>)
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	4611      	mov	r1, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fd faa7 	bl	8000dfc <__aeabi_fmul>
 80038ae:	4603      	mov	r3, r0
 80038b0:	493a      	ldr	r1, [pc, #232]	; (800399c <_Z10update_PIDv+0x284>)
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd faa2 	bl	8000dfc <__aeabi_fmul>
 80038b8:	4603      	mov	r3, r0
 80038ba:	461a      	mov	r2, r3
 80038bc:	4b32      	ldr	r3, [pc, #200]	; (8003988 <_Z10update_PIDv+0x270>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4619      	mov	r1, r3
 80038c2:	4610      	mov	r0, r2
 80038c4:	f7fd f992 	bl	8000bec <__addsf3>
 80038c8:	4603      	mov	r3, r0
 80038ca:	461c      	mov	r4, r3
 80038cc:	4b2d      	ldr	r3, [pc, #180]	; (8003984 <_Z10update_PIDv+0x26c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a36      	ldr	r2, [pc, #216]	; (80039ac <_Z10update_PIDv+0x294>)
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	4611      	mov	r1, r2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd f986 	bl	8000be8 <__aeabi_fsub>
 80038dc:	4603      	mov	r3, r0
 80038de:	461a      	mov	r2, r3
 80038e0:	4b27      	ldr	r3, [pc, #156]	; (8003980 <_Z10update_PIDv+0x268>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f7fd fa88 	bl	8000dfc <__aeabi_fmul>
 80038ec:	4603      	mov	r3, r0
 80038ee:	492d      	ldr	r1, [pc, #180]	; (80039a4 <_Z10update_PIDv+0x28c>)
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fd fa83 	bl	8000dfc <__aeabi_fmul>
 80038f6:	4603      	mov	r3, r0
 80038f8:	4619      	mov	r1, r3
 80038fa:	4620      	mov	r0, r4
 80038fc:	f7fd f976 	bl	8000bec <__addsf3>
 8003900:	4603      	mov	r3, r0
 8003902:	461a      	mov	r2, r3
 8003904:	4b2a      	ldr	r3, [pc, #168]	; (80039b0 <_Z10update_PIDv+0x298>)
 8003906:	601a      	str	r2, [r3, #0]
  PID_Yaw_y   = (PID_Yaw_xw_diff   * Yaw_PID_k[0]   * 10) + Yaw_I_Sum   + ((PID_Yaw_xw_diff   - Yaw_D_old  ) * Yaw_PID_k[2]   * 100);          //NOTDONE use defines for values
 8003908:	4b20      	ldr	r3, [pc, #128]	; (800398c <_Z10update_PIDv+0x274>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a18      	ldr	r2, [pc, #96]	; (8003970 <_Z10update_PIDv+0x258>)
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	4611      	mov	r1, r2
 8003912:	4618      	mov	r0, r3
 8003914:	f7fd fa72 	bl	8000dfc <__aeabi_fmul>
 8003918:	4603      	mov	r3, r0
 800391a:	4920      	ldr	r1, [pc, #128]	; (800399c <_Z10update_PIDv+0x284>)
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd fa6d 	bl	8000dfc <__aeabi_fmul>
 8003922:	4603      	mov	r3, r0
 8003924:	461a      	mov	r2, r3
 8003926:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <_Z10update_PIDv+0x278>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f7fd f95d 	bl	8000bec <__addsf3>
 8003932:	4603      	mov	r3, r0
 8003934:	461c      	mov	r4, r3
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <_Z10update_PIDv+0x258>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1e      	ldr	r2, [pc, #120]	; (80039b4 <_Z10update_PIDv+0x29c>)
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f7fd f951 	bl	8000be8 <__aeabi_fsub>
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	4b10      	ldr	r3, [pc, #64]	; (800398c <_Z10update_PIDv+0x274>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f7fd fa53 	bl	8000dfc <__aeabi_fmul>
 8003956:	4603      	mov	r3, r0
 8003958:	4912      	ldr	r1, [pc, #72]	; (80039a4 <_Z10update_PIDv+0x28c>)
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd fa4e 	bl	8000dfc <__aeabi_fmul>
 8003960:	4603      	mov	r3, r0
 8003962:	4619      	mov	r1, r3
 8003964:	4620      	mov	r0, r4
 8003966:	f7fd f941 	bl	8000bec <__addsf3>
 800396a:	4603      	mov	r3, r0
 800396c:	e024      	b.n	80039b8 <_Z10update_PIDv+0x2a0>
 800396e:	bf00      	nop
 8003970:	2000053c 	.word	0x2000053c
 8003974:	2000054c 	.word	0x2000054c
 8003978:	20000534 	.word	0x20000534
 800397c:	20000570 	.word	0x20000570
 8003980:	20000558 	.word	0x20000558
 8003984:	20000538 	.word	0x20000538
 8003988:	20000574 	.word	0x20000574
 800398c:	20000564 	.word	0x20000564
 8003990:	20000578 	.word	0x20000578
 8003994:	43fa0000 	.word	0x43fa0000
 8003998:	c3fa0000 	.word	0xc3fa0000
 800399c:	41200000 	.word	0x41200000
 80039a0:	2000057c 	.word	0x2000057c
 80039a4:	42c80000 	.word	0x42c80000
 80039a8:	20000540 	.word	0x20000540
 80039ac:	20000580 	.word	0x20000580
 80039b0:	20000544 	.word	0x20000544
 80039b4:	20000584 	.word	0x20000584
 80039b8:	461a      	mov	r2, r3
 80039ba:	4b2d      	ldr	r3, [pc, #180]	; (8003a70 <_Z10update_PIDv+0x358>)
 80039bc:	601a      	str	r2, [r3, #0]

  Pitch_D_old = PID_Pitch_xw_diff;                                                                                                      // differentiate
 80039be:	4b2d      	ldr	r3, [pc, #180]	; (8003a74 <_Z10update_PIDv+0x35c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a2d      	ldr	r2, [pc, #180]	; (8003a78 <_Z10update_PIDv+0x360>)
 80039c4:	6013      	str	r3, [r2, #0]
  Roll_D_old  = PID_Roll_xw_diff ;
 80039c6:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <_Z10update_PIDv+0x364>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a2d      	ldr	r2, [pc, #180]	; (8003a80 <_Z10update_PIDv+0x368>)
 80039cc:	6013      	str	r3, [r2, #0]
  Yaw_D_old   = PID_Yaw_xw_diff  ;
 80039ce:	4b2d      	ldr	r3, [pc, #180]	; (8003a84 <_Z10update_PIDv+0x36c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2d      	ldr	r2, [pc, #180]	; (8003a88 <_Z10update_PIDv+0x370>)
 80039d4:	6013      	str	r3, [r2, #0]

  if (PID_Pitch_y > 500 ) PID_Pitch_y = 500 ;
 80039d6:	4b2d      	ldr	r3, [pc, #180]	; (8003a8c <_Z10update_PIDv+0x374>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	492d      	ldr	r1, [pc, #180]	; (8003a90 <_Z10update_PIDv+0x378>)
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fd fbc9 	bl	8001174 <__aeabi_fcmpgt>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <_Z10update_PIDv+0x2d6>
 80039e8:	4b28      	ldr	r3, [pc, #160]	; (8003a8c <_Z10update_PIDv+0x374>)
 80039ea:	4a29      	ldr	r2, [pc, #164]	; (8003a90 <_Z10update_PIDv+0x378>)
 80039ec:	601a      	str	r2, [r3, #0]
  if (PID_Roll_y  > 500 ) PID_Roll_y  = 500 ;                            //NOTDONE use defines for values
 80039ee:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <_Z10update_PIDv+0x37c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4927      	ldr	r1, [pc, #156]	; (8003a90 <_Z10update_PIDv+0x378>)
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fd fbbd 	bl	8001174 <__aeabi_fcmpgt>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <_Z10update_PIDv+0x2ee>
 8003a00:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <_Z10update_PIDv+0x37c>)
 8003a02:	4a23      	ldr	r2, [pc, #140]	; (8003a90 <_Z10update_PIDv+0x378>)
 8003a04:	601a      	str	r2, [r3, #0]
  if (PID_Yaw_y   > 1000) PID_Yaw_y   = 1000;
 8003a06:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <_Z10update_PIDv+0x358>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4923      	ldr	r1, [pc, #140]	; (8003a98 <_Z10update_PIDv+0x380>)
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd fbb1 	bl	8001174 <__aeabi_fcmpgt>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <_Z10update_PIDv+0x306>
 8003a18:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <_Z10update_PIDv+0x358>)
 8003a1a:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <_Z10update_PIDv+0x380>)
 8003a1c:	601a      	str	r2, [r3, #0]
  if (PID_Pitch_y < -500) PID_Pitch_y = -500;
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <_Z10update_PIDv+0x374>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	491e      	ldr	r1, [pc, #120]	; (8003a9c <_Z10update_PIDv+0x384>)
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fd fb87 	bl	8001138 <__aeabi_fcmplt>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <_Z10update_PIDv+0x31e>
 8003a30:	4b16      	ldr	r3, [pc, #88]	; (8003a8c <_Z10update_PIDv+0x374>)
 8003a32:	4a1a      	ldr	r2, [pc, #104]	; (8003a9c <_Z10update_PIDv+0x384>)
 8003a34:	601a      	str	r2, [r3, #0]
  if (PID_Roll_y  < -500) PID_Roll_y  = -500;
 8003a36:	4b17      	ldr	r3, [pc, #92]	; (8003a94 <_Z10update_PIDv+0x37c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4918      	ldr	r1, [pc, #96]	; (8003a9c <_Z10update_PIDv+0x384>)
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fd fb7b 	bl	8001138 <__aeabi_fcmplt>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <_Z10update_PIDv+0x336>
 8003a48:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <_Z10update_PIDv+0x37c>)
 8003a4a:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <_Z10update_PIDv+0x384>)
 8003a4c:	601a      	str	r2, [r3, #0]
  if (PID_Yaw_y   <    0) PID_Yaw_y   =    0;
 8003a4e:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <_Z10update_PIDv+0x358>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f04f 0100 	mov.w	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd fb6e 	bl	8001138 <__aeabi_fcmplt>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d100      	bne.n	8003a64 <_Z10update_PIDv+0x34c>
}
 8003a62:	e003      	b.n	8003a6c <_Z10update_PIDv+0x354>
  if (PID_Yaw_y   <    0) PID_Yaw_y   =    0;
 8003a64:	4b02      	ldr	r3, [pc, #8]	; (8003a70 <_Z10update_PIDv+0x358>)
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
}
 8003a6c:	bf00      	nop
 8003a6e:	bd98      	pop	{r3, r4, r7, pc}
 8003a70:	20000548 	.word	0x20000548
 8003a74:	20000534 	.word	0x20000534
 8003a78:	2000057c 	.word	0x2000057c
 8003a7c:	20000538 	.word	0x20000538
 8003a80:	20000580 	.word	0x20000580
 8003a84:	2000053c 	.word	0x2000053c
 8003a88:	20000584 	.word	0x20000584
 8003a8c:	20000540 	.word	0x20000540
 8003a90:	43fa0000 	.word	0x43fa0000
 8003a94:	20000544 	.word	0x20000544
 8003a98:	447a0000 	.word	0x447a0000
 8003a9c:	c3fa0000 	.word	0xc3fa0000

08003aa0 <_Z12getPIDValuesv>:
 * @brief This method extracts the PID values for PITCH,ROLL,YAW that can be live tuned on the remote
 * 
 * --Custom Method!
 */
void getPIDValues()
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  if (tuningMode == 1)
 8003aa4:	4baa      	ldr	r3, [pc, #680]	; (8003d50 <_Z12getPIDValuesv+0x2b0>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	f040 81d8 	bne.w	8003e5e <_Z12getPIDValuesv+0x3be>
  {
    if ((SBUS_Channels[5] <= 1000) & (SBUS_Channels[5] >= 990))
 8003aae:	4ba9      	ldr	r3, [pc, #676]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003ab0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ab8:	bfd4      	ite	le
 8003aba:	2301      	movle	r3, #1
 8003abc:	2300      	movgt	r3, #0
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	4ba4      	ldr	r3, [pc, #656]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003ac2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003ac6:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003aca:	428b      	cmp	r3, r1
 8003acc:	bfcc      	ite	gt
 8003ace:	2301      	movgt	r3, #1
 8003ad0:	2300      	movle	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8082 	beq.w	8003be2 <_Z12getPIDValuesv+0x142>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Pitch_PID_k[0] = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003ade:	4b9d      	ldr	r3, [pc, #628]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003ae0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ae4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ae8:	bfd4      	ite	le
 8003aea:	2301      	movle	r3, #1
 8003aec:	2300      	movgt	r3, #0
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	4b98      	ldr	r3, [pc, #608]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003af2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003af6:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003afa:	428b      	cmp	r3, r1
 8003afc:	bfcc      	ite	gt
 8003afe:	2301      	movgt	r3, #1
 8003b00:	2300      	movle	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	4013      	ands	r3, r2
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d014      	beq.n	8003b36 <_Z12getPIDValuesv+0x96>
 8003b0c:	4b91      	ldr	r3, [pc, #580]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003b0e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fd f91e 	bl	8000d54 <__aeabi_i2f>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	498f      	ldr	r1, [pc, #572]	; (8003d58 <_Z12getPIDValuesv+0x2b8>)
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fd fa21 	bl	8000f64 <__aeabi_fdiv>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fd f85f 	bl	8000bec <__addsf3>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	461a      	mov	r2, r3
 8003b32:	4b8a      	ldr	r3, [pc, #552]	; (8003d5c <_Z12getPIDValuesv+0x2bc>)
 8003b34:	601a      	str	r2, [r3, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Pitch_PID_k[1] = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003b36:	4b87      	ldr	r3, [pc, #540]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003b38:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003b3c:	2b0a      	cmp	r3, #10
 8003b3e:	bfd4      	ite	le
 8003b40:	2301      	movle	r3, #1
 8003b42:	2300      	movgt	r3, #0
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	4b83      	ldr	r3, [pc, #524]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003b48:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003b4c:	f113 0f0a 	cmn.w	r3, #10
 8003b50:	bfac      	ite	ge
 8003b52:	2301      	movge	r3, #1
 8003b54:	2300      	movlt	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	4013      	ands	r3, r2
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d014      	beq.n	8003b8a <_Z12getPIDValuesv+0xea>
 8003b60:	4b7c      	ldr	r3, [pc, #496]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003b62:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fd f8f4 	bl	8000d54 <__aeabi_i2f>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	497a      	ldr	r1, [pc, #488]	; (8003d58 <_Z12getPIDValuesv+0x2b8>)
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fd f9f7 	bl	8000f64 <__aeabi_fdiv>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fd f835 	bl	8000bec <__addsf3>
 8003b82:	4603      	mov	r3, r0
 8003b84:	461a      	mov	r2, r3
 8003b86:	4b75      	ldr	r3, [pc, #468]	; (8003d5c <_Z12getPIDValuesv+0x2bc>)
 8003b88:	605a      	str	r2, [r3, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Pitch_PID_k[2] = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values       
 8003b8a:	4b72      	ldr	r3, [pc, #456]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003b8c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003b90:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8003b94:	4293      	cmp	r3, r2
 8003b96:	bfb4      	ite	lt
 8003b98:	2301      	movlt	r3, #1
 8003b9a:	2300      	movge	r3, #0
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	4b6d      	ldr	r3, [pc, #436]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003ba0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ba4:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003ba8:	bfac      	ite	ge
 8003baa:	2301      	movge	r3, #1
 8003bac:	2300      	movlt	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d014      	beq.n	8003be2 <_Z12getPIDValuesv+0x142>
 8003bb8:	4b66      	ldr	r3, [pc, #408]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003bba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fd f8c8 	bl	8000d54 <__aeabi_i2f>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	4964      	ldr	r1, [pc, #400]	; (8003d58 <_Z12getPIDValuesv+0x2b8>)
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fd f9cb 	bl	8000f64 <__aeabi_fdiv>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fd f809 	bl	8000bec <__addsf3>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b5f      	ldr	r3, [pc, #380]	; (8003d5c <_Z12getPIDValuesv+0x2bc>)
 8003be0:	609a      	str	r2, [r3, #8]
    }
    if ((SBUS_Channels[5] <= 10) & (SBUS_Channels[5] >= -10))
 8003be2:	4b5c      	ldr	r3, [pc, #368]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003be4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003be8:	2b0a      	cmp	r3, #10
 8003bea:	bfd4      	ite	le
 8003bec:	2301      	movle	r3, #1
 8003bee:	2300      	movgt	r3, #0
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4b58      	ldr	r3, [pc, #352]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003bf4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003bf8:	f113 0f0a 	cmn.w	r3, #10
 8003bfc:	bfac      	ite	ge
 8003bfe:	2301      	movge	r3, #1
 8003c00:	2300      	movlt	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	4013      	ands	r3, r2
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8082 	beq.w	8003d12 <_Z12getPIDValuesv+0x272>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Roll_PID_k[0]  = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003c0e:	4b51      	ldr	r3, [pc, #324]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003c10:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c18:	bfd4      	ite	le
 8003c1a:	2301      	movle	r3, #1
 8003c1c:	2300      	movgt	r3, #0
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	4b4c      	ldr	r3, [pc, #304]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003c22:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003c26:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003c2a:	428b      	cmp	r3, r1
 8003c2c:	bfcc      	ite	gt
 8003c2e:	2301      	movgt	r3, #1
 8003c30:	2300      	movle	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	4013      	ands	r3, r2
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d014      	beq.n	8003c66 <_Z12getPIDValuesv+0x1c6>
 8003c3c:	4b45      	ldr	r3, [pc, #276]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003c3e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fd f886 	bl	8000d54 <__aeabi_i2f>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4943      	ldr	r1, [pc, #268]	; (8003d58 <_Z12getPIDValuesv+0x2b8>)
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fd f989 	bl	8000f64 <__aeabi_fdiv>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fc ffc7 	bl	8000bec <__addsf3>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b3f      	ldr	r3, [pc, #252]	; (8003d60 <_Z12getPIDValuesv+0x2c0>)
 8003c64:	601a      	str	r2, [r3, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Roll_PID_k[1]  = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003c66:	4b3b      	ldr	r3, [pc, #236]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003c68:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003c6c:	2b0a      	cmp	r3, #10
 8003c6e:	bfd4      	ite	le
 8003c70:	2301      	movle	r3, #1
 8003c72:	2300      	movgt	r3, #0
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003c78:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003c7c:	f113 0f0a 	cmn.w	r3, #10
 8003c80:	bfac      	ite	ge
 8003c82:	2301      	movge	r3, #1
 8003c84:	2300      	movlt	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	4013      	ands	r3, r2
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d014      	beq.n	8003cba <_Z12getPIDValuesv+0x21a>
 8003c90:	4b30      	ldr	r3, [pc, #192]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003c92:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fd f85c 	bl	8000d54 <__aeabi_i2f>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	492e      	ldr	r1, [pc, #184]	; (8003d58 <_Z12getPIDValuesv+0x2b8>)
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fd f95f 	bl	8000f64 <__aeabi_fdiv>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fc ff9d 	bl	8000bec <__addsf3>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <_Z12getPIDValuesv+0x2c0>)
 8003cb8:	605a      	str	r2, [r3, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Roll_PID_k[2]  = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values       
 8003cba:	4b26      	ldr	r3, [pc, #152]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003cbc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003cc0:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	bfb4      	ite	lt
 8003cc8:	2301      	movlt	r3, #1
 8003cca:	2300      	movge	r3, #0
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003cd0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003cd4:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003cd8:	bfac      	ite	ge
 8003cda:	2301      	movge	r3, #1
 8003cdc:	2300      	movlt	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d014      	beq.n	8003d12 <_Z12getPIDValuesv+0x272>
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003cea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fd f830 	bl	8000d54 <__aeabi_i2f>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	4918      	ldr	r1, [pc, #96]	; (8003d58 <_Z12getPIDValuesv+0x2b8>)
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fd f933 	bl	8000f64 <__aeabi_fdiv>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fc ff71 	bl	8000bec <__addsf3>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <_Z12getPIDValuesv+0x2c0>)
 8003d10:	609a      	str	r2, [r3, #8]
    }
    if ((SBUS_Channels[5] <= -990) & (SBUS_Channels[5] >= -1000))
 8003d12:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003d14:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003d18:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	bfb4      	ite	lt
 8003d20:	2301      	movlt	r3, #1
 8003d22:	2300      	movge	r3, #0
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003d28:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003d2c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003d30:	bfac      	ite	ge
 8003d32:	2301      	movge	r3, #1
 8003d34:	2300      	movlt	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	4013      	ands	r3, r2
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 808e 	beq.w	8003e5e <_Z12getPIDValuesv+0x3be>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Yaw_PID_k[0]   = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003d42:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <_Z12getPIDValuesv+0x2b4>)
 8003d44:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003d48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d4c:	e00a      	b.n	8003d64 <_Z12getPIDValuesv+0x2c4>
 8003d4e:	bf00      	nop
 8003d50:	20000020 	.word	0x20000020
 8003d54:	20000638 	.word	0x20000638
 8003d58:	44fa0000 	.word	0x44fa0000
 8003d5c:	2000054c 	.word	0x2000054c
 8003d60:	20000558 	.word	0x20000558
 8003d64:	bfd4      	ite	le
 8003d66:	2301      	movle	r3, #1
 8003d68:	2300      	movgt	r3, #0
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	4b3d      	ldr	r3, [pc, #244]	; (8003e64 <_Z12getPIDValuesv+0x3c4>)
 8003d6e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003d72:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003d76:	428b      	cmp	r3, r1
 8003d78:	bfcc      	ite	gt
 8003d7a:	2301      	movgt	r3, #1
 8003d7c:	2300      	movle	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	4013      	ands	r3, r2
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d014      	beq.n	8003db2 <_Z12getPIDValuesv+0x312>
 8003d88:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <_Z12getPIDValuesv+0x3c4>)
 8003d8a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fc ffe0 	bl	8000d54 <__aeabi_i2f>
 8003d94:	4603      	mov	r3, r0
 8003d96:	4934      	ldr	r1, [pc, #208]	; (8003e68 <_Z12getPIDValuesv+0x3c8>)
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fd f8e3 	bl	8000f64 <__aeabi_fdiv>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fc ff21 	bl	8000bec <__addsf3>
 8003daa:	4603      	mov	r3, r0
 8003dac:	461a      	mov	r2, r3
 8003dae:	4b2f      	ldr	r3, [pc, #188]	; (8003e6c <_Z12getPIDValuesv+0x3cc>)
 8003db0:	601a      	str	r2, [r3, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Yaw_PID_k[1]   = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003db2:	4b2c      	ldr	r3, [pc, #176]	; (8003e64 <_Z12getPIDValuesv+0x3c4>)
 8003db4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003db8:	2b0a      	cmp	r3, #10
 8003dba:	bfd4      	ite	le
 8003dbc:	2301      	movle	r3, #1
 8003dbe:	2300      	movgt	r3, #0
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	4b28      	ldr	r3, [pc, #160]	; (8003e64 <_Z12getPIDValuesv+0x3c4>)
 8003dc4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003dc8:	f113 0f0a 	cmn.w	r3, #10
 8003dcc:	bfac      	ite	ge
 8003dce:	2301      	movge	r3, #1
 8003dd0:	2300      	movlt	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d014      	beq.n	8003e06 <_Z12getPIDValuesv+0x366>
 8003ddc:	4b21      	ldr	r3, [pc, #132]	; (8003e64 <_Z12getPIDValuesv+0x3c4>)
 8003dde:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fc ffb6 	bl	8000d54 <__aeabi_i2f>
 8003de8:	4603      	mov	r3, r0
 8003dea:	491f      	ldr	r1, [pc, #124]	; (8003e68 <_Z12getPIDValuesv+0x3c8>)
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fd f8b9 	bl	8000f64 <__aeabi_fdiv>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fc fef7 	bl	8000bec <__addsf3>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	461a      	mov	r2, r3
 8003e02:	4b1a      	ldr	r3, [pc, #104]	; (8003e6c <_Z12getPIDValuesv+0x3cc>)
 8003e04:	605a      	str	r2, [r3, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Yaw_PID_k[2]   = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values       
 8003e06:	4b17      	ldr	r3, [pc, #92]	; (8003e64 <_Z12getPIDValuesv+0x3c4>)
 8003e08:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e0c:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8003e10:	4293      	cmp	r3, r2
 8003e12:	bfb4      	ite	lt
 8003e14:	2301      	movlt	r3, #1
 8003e16:	2300      	movge	r3, #0
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <_Z12getPIDValuesv+0x3c4>)
 8003e1c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e20:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003e24:	bfac      	ite	ge
 8003e26:	2301      	movge	r3, #1
 8003e28:	2300      	movlt	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d014      	beq.n	8003e5e <_Z12getPIDValuesv+0x3be>
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <_Z12getPIDValuesv+0x3c4>)
 8003e36:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc ff8a 	bl	8000d54 <__aeabi_i2f>
 8003e40:	4603      	mov	r3, r0
 8003e42:	4909      	ldr	r1, [pc, #36]	; (8003e68 <_Z12getPIDValuesv+0x3c8>)
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fd f88d 	bl	8000f64 <__aeabi_fdiv>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fc fecb 	bl	8000bec <__addsf3>
 8003e56:	4603      	mov	r3, r0
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <_Z12getPIDValuesv+0x3cc>)
 8003e5c:	609a      	str	r2, [r3, #8]
    }
  }
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000638 	.word	0x20000638
 8003e68:	44fa0000 	.word	0x44fa0000
 8003e6c:	20000564 	.word	0x20000564

08003e70 <_Z14getAngleOffsetv>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void getAngleOffset()
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  if (tuningMode == 2)
 8003e74:	4b32      	ldr	r3, [pc, #200]	; (8003f40 <_Z14getAngleOffsetv+0xd0>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d158      	bne.n	8003f2e <_Z14getAngleOffsetv+0xbe>
  {
    mainMotorAngleOffset = (float)SBUS_Channels[7] / 10;
 8003e7c:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <_Z14getAngleOffsetv+0xd4>)
 8003e7e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fc ff66 	bl	8000d54 <__aeabi_i2f>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	492f      	ldr	r1, [pc, #188]	; (8003f48 <_Z14getAngleOffsetv+0xd8>)
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fd f869 	bl	8000f64 <__aeabi_fdiv>
 8003e92:	4603      	mov	r3, r0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fd f98d 	bl	80011b4 <__aeabi_f2iz>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	b25a      	sxtb	r2, r3
 8003e9e:	4b2b      	ldr	r3, [pc, #172]	; (8003f4c <_Z14getAngleOffsetv+0xdc>)
 8003ea0:	701a      	strb	r2, [r3, #0]
    sin_OffsetAngle = sin(((float)mainMotorAngleOffset * 180) / M_PI);
 8003ea2:	4b2a      	ldr	r3, [pc, #168]	; (8003f4c <_Z14getAngleOffsetv+0xdc>)
 8003ea4:	f993 3000 	ldrsb.w	r3, [r3]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fc ff53 	bl	8000d54 <__aeabi_i2f>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4927      	ldr	r1, [pc, #156]	; (8003f50 <_Z14getAngleOffsetv+0xe0>)
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fc ffa2 	bl	8000dfc <__aeabi_fmul>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fc faf0 	bl	80004a0 <__aeabi_f2d>
 8003ec0:	a31d      	add	r3, pc, #116	; (adr r3, 8003f38 <_Z14getAngleOffsetv+0xc8>)
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f7fc fc6d 	bl	80007a4 <__aeabi_ddiv>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4610      	mov	r0, r2
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f009 fc59 	bl	800d788 <sin>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	f7fc fe2f 	bl	8000b40 <__aeabi_d2f>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	4a1b      	ldr	r2, [pc, #108]	; (8003f54 <_Z14getAngleOffsetv+0xe4>)
 8003ee6:	6013      	str	r3, [r2, #0]
    cos_OffsetAngle = cos(((float)mainMotorAngleOffset * 180) / M_PI);
 8003ee8:	4b18      	ldr	r3, [pc, #96]	; (8003f4c <_Z14getAngleOffsetv+0xdc>)
 8003eea:	f993 3000 	ldrsb.w	r3, [r3]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fc ff30 	bl	8000d54 <__aeabi_i2f>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	4916      	ldr	r1, [pc, #88]	; (8003f50 <_Z14getAngleOffsetv+0xe0>)
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fc ff7f 	bl	8000dfc <__aeabi_fmul>
 8003efe:	4603      	mov	r3, r0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc facd 	bl	80004a0 <__aeabi_f2d>
 8003f06:	a30c      	add	r3, pc, #48	; (adr r3, 8003f38 <_Z14getAngleOffsetv+0xc8>)
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f7fc fc4a 	bl	80007a4 <__aeabi_ddiv>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4610      	mov	r0, r2
 8003f16:	4619      	mov	r1, r3
 8003f18:	f009 fbf4 	bl	800d704 <cos>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4610      	mov	r0, r2
 8003f22:	4619      	mov	r1, r3
 8003f24:	f7fc fe0c 	bl	8000b40 <__aeabi_d2f>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	4a0b      	ldr	r2, [pc, #44]	; (8003f58 <_Z14getAngleOffsetv+0xe8>)
 8003f2c:	6013      	str	r3, [r2, #0]
  }
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	f3af 8000 	nop.w
 8003f38:	54442d18 	.word	0x54442d18
 8003f3c:	400921fb 	.word	0x400921fb
 8003f40:	20000020 	.word	0x20000020
 8003f44:	20000638 	.word	0x20000638
 8003f48:	41200000 	.word	0x41200000
 8003f4c:	200007c8 	.word	0x200007c8
 8003f50:	43340000 	.word	0x43340000
 8003f54:	200007cc 	.word	0x200007cc
 8003f58:	200007d0 	.word	0x200007d0

08003f5c <_Z16switchTuningModev>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void switchTuningMode()
{
 8003f5c:	b598      	push	{r3, r4, r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  if ((buttonPressed == false) & (HAL_GPIO_ReadPin(ONBOARD_BUTTON_2_GPIO_Port, ONBOARD_BUTTON_2_Pin) == true))
 8003f60:	4b25      	ldr	r3, [pc, #148]	; (8003ff8 <_Z16switchTuningModev+0x9c>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2dc      	uxtb	r4, r3
 8003f6e:	2102      	movs	r1, #2
 8003f70:	4822      	ldr	r0, [pc, #136]	; (8003ffc <_Z16switchTuningModev+0xa0>)
 8003f72:	f002 fbfd 	bl	8006770 <HAL_GPIO_ReadPin>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	bf0c      	ite	eq
 8003f7c:	2301      	moveq	r3, #1
 8003f7e:	2300      	movne	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	4023      	ands	r3, r4
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf14      	ite	ne
 8003f8a:	2301      	movne	r3, #1
 8003f8c:	2300      	moveq	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d011      	beq.n	8003fb8 <_Z16switchTuningModev+0x5c>
  {
    if (tuningMode == 1) tuningMode = 2;
 8003f94:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <_Z16switchTuningModev+0xa4>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d103      	bne.n	8003fa4 <_Z16switchTuningModev+0x48>
 8003f9c:	4b18      	ldr	r3, [pc, #96]	; (8004000 <_Z16switchTuningModev+0xa4>)
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	e002      	b.n	8003faa <_Z16switchTuningModev+0x4e>
    else tuningMode = 1;
 8003fa4:	4b16      	ldr	r3, [pc, #88]	; (8004000 <_Z16switchTuningModev+0xa4>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);
 8003faa:	2120      	movs	r1, #32
 8003fac:	4813      	ldr	r0, [pc, #76]	; (8003ffc <_Z16switchTuningModev+0xa0>)
 8003fae:	f002 fc0e 	bl	80067ce <HAL_GPIO_TogglePin>
    buttonPressed = true;
 8003fb2:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <_Z16switchTuningModev+0x9c>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	701a      	strb	r2, [r3, #0]
  }
  if ((buttonPressed == true) & (HAL_GPIO_ReadPin(ONBOARD_BUTTON_2_GPIO_Port, ONBOARD_BUTTON_2_Pin) == false))
 8003fb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <_Z16switchTuningModev+0x9c>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2dc      	uxtb	r4, r3
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	480c      	ldr	r0, [pc, #48]	; (8003ffc <_Z16switchTuningModev+0xa0>)
 8003fca:	f002 fbd1 	bl	8006770 <HAL_GPIO_ReadPin>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf0c      	ite	eq
 8003fd4:	2301      	moveq	r3, #1
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	4023      	ands	r3, r4
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	bf14      	ite	ne
 8003fe2:	2301      	movne	r3, #1
 8003fe4:	2300      	moveq	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <_Z16switchTuningModev+0x96>
  {
    buttonPressed = false;
 8003fec:	4b02      	ldr	r3, [pc, #8]	; (8003ff8 <_Z16switchTuningModev+0x9c>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
  }
 8003ff2:	bf00      	nop
 8003ff4:	bd98      	pop	{r3, r4, r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000530 	.word	0x20000530
 8003ffc:	40020000 	.word	0x40020000
 8004000:	20000020 	.word	0x20000020

08004004 <_Z16SBUS_RecieveBitsv>:
 * for later processing.
 * 
 * --Custom Method!
 */
void SBUS_RecieveBits()
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
  TIM4->CCR1 = (uint16_t)(fastPPM_CenterTime + ((float)SBUS_Channels[2] * PPMmainMotorScaler));
 800400a:	4b35      	ldr	r3, [pc, #212]	; (80040e0 <_Z16SBUS_RecieveBitsv+0xdc>)
 800400c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004010:	4618      	mov	r0, r3
 8004012:	f7fc fe9f 	bl	8000d54 <__aeabi_i2f>
 8004016:	4603      	mov	r3, r0
 8004018:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800401c:	4618      	mov	r0, r3
 800401e:	f7fc feed 	bl	8000dfc <__aeabi_fmul>
 8004022:	4603      	mov	r3, r0
 8004024:	492f      	ldr	r1, [pc, #188]	; (80040e4 <_Z16SBUS_RecieveBitsv+0xe0>)
 8004026:	4618      	mov	r0, r3
 8004028:	f7fc fde0 	bl	8000bec <__addsf3>
 800402c:	4603      	mov	r3, r0
 800402e:	4618      	mov	r0, r3
 8004030:	f7fd f8e6 	bl	8001200 <__aeabi_f2uiz>
 8004034:	4603      	mov	r3, r0
 8004036:	b29a      	uxth	r2, r3
 8004038:	4b2b      	ldr	r3, [pc, #172]	; (80040e8 <_Z16SBUS_RecieveBitsv+0xe4>)
 800403a:	635a      	str	r2, [r3, #52]	; 0x34
  SBUS_timerCount = TIM11->CNT + SBUS_StartTimeOffset;                                                      //get current clock count from TIM11 + time offset
 800403c:	4b2b      	ldr	r3, [pc, #172]	; (80040ec <_Z16SBUS_RecieveBitsv+0xe8>)
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b06      	subs	r3, #6
 8004044:	b29a      	uxth	r2, r3
 8004046:	4b2a      	ldr	r3, [pc, #168]	; (80040f0 <_Z16SBUS_RecieveBitsv+0xec>)
 8004048:	801a      	strh	r2, [r3, #0]
  SBUS_RxBitString[0] = true;                                                                               //sets the first value in the array to 1 as the interrupt is not fast
 800404a:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <_Z16SBUS_RecieveBitsv+0xf0>)
 800404c:	2201      	movs	r2, #1
 800404e:	701a      	strb	r2, [r3, #0]
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)                                                            //\->enough to be able to measure the pin for the first bit
 8004050:	2301      	movs	r3, #1
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b8f      	cmp	r3, #143	; 0x8f
 8004058:	d83a      	bhi.n	80040d0 <_Z16SBUS_RecieveBitsv+0xcc>
  {
    ONBOARD_WRITE_3_GPIO_Port->BSRR = (uint32_t)ONBOARD_WRITE_3_Pin << 16U;                                 //NOTDONE debug
 800405a:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <_Z16SBUS_RecieveBitsv+0xf4>)
 800405c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004060:	619a      	str	r2, [r3, #24]
    SBUS_RxBitString[i] = ((ONBOARD_READ_IT_3_GPIO_Port->IDR & ONBOARD_READ_IT_3_Pin) != 0 ? true : false); //if the SBUS pin is HIGH then the value is 1 else 0
 8004062:	4b26      	ldr	r3, [pc, #152]	; (80040fc <_Z16SBUS_RecieveBitsv+0xf8>)
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	bf14      	ite	ne
 800406e:	2301      	movne	r3, #1
 8004070:	2300      	moveq	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	4619      	mov	r1, r3
 8004076:	4a1f      	ldr	r2, [pc, #124]	; (80040f4 <_Z16SBUS_RecieveBitsv+0xf0>)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4413      	add	r3, r2
 800407c:	460a      	mov	r2, r1
 800407e:	701a      	strb	r2, [r3, #0]
    ONBOARD_WRITE_3_GPIO_Port->BSRR = ONBOARD_WRITE_3_Pin;                                                  //NOTDONE debug
 8004080:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <_Z16SBUS_RecieveBitsv+0xf4>)
 8004082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004086:	619a      	str	r2, [r3, #24]
    while ((TIM11->CNT - SBUS_timerCount) < SBUS_ClockCyclesPerBit)                                         //wait until x clock pulses passed
 8004088:	4b18      	ldr	r3, [pc, #96]	; (80040ec <_Z16SBUS_RecieveBitsv+0xe8>)
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <_Z16SBUS_RecieveBitsv+0xec>)
 800408e:	8812      	ldrh	r2, [r2, #0]
 8004090:	1a9a      	subs	r2, r3, r2
 8004092:	4b16      	ldr	r3, [pc, #88]	; (80040ec <_Z16SBUS_RecieveBitsv+0xe8>)
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	3301      	adds	r3, #1
 8004098:	21a0      	movs	r1, #160	; 0xa0
 800409a:	fbb1 f3f3 	udiv	r3, r1, r3
 800409e:	429a      	cmp	r2, r3
 80040a0:	bf34      	ite	cc
 80040a2:	2301      	movcc	r3, #1
 80040a4:	2300      	movcs	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d000      	beq.n	80040ae <_Z16SBUS_RecieveBitsv+0xaa>
 80040ac:	e7ec      	b.n	8004088 <_Z16SBUS_RecieveBitsv+0x84>
    {
    }
    SBUS_timerCount += SBUS_ClockCyclesPerBit;
 80040ae:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <_Z16SBUS_RecieveBitsv+0xe8>)
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	3301      	adds	r3, #1
 80040b4:	22a0      	movs	r2, #160	; 0xa0
 80040b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <_Z16SBUS_RecieveBitsv+0xec>)
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	4413      	add	r3, r2
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <_Z16SBUS_RecieveBitsv+0xec>)
 80040c6:	801a      	strh	r2, [r3, #0]
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)                                                            //\->enough to be able to measure the pin for the first bit
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3301      	adds	r3, #1
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	e7c1      	b.n	8004054 <_Z16SBUS_RecieveBitsv+0x50>
  }
  SBUSNewPackage = true;
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <_Z16SBUS_RecieveBitsv+0xfc>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
}
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000638 	.word	0x20000638
 80040e4:	44bb8000 	.word	0x44bb8000
 80040e8:	40000800 	.word	0x40000800
 80040ec:	40014800 	.word	0x40014800
 80040f0:	20000588 	.word	0x20000588
 80040f4:	2000058c 	.word	0x2000058c
 80040f8:	40020000 	.word	0x40020000
 80040fc:	40020800 	.word	0x40020800
 8004100:	20000648 	.word	0x20000648

08004104 <_Z19SBUS_postProcessingv>:
 * channels.
 * 
 * --Custom Method!
 */
void SBUS_postProcessing()
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af00      	add	r7, sp, #0
  //verify:

  SBUS_CorruptedPackage = false;                                                                                          //reset corrupted package flag
 800410a:	4b85      	ldr	r3, [pc, #532]	; (8004320 <_Z19SBUS_postProcessingv+0x21c>)
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)                                                                         //repeat for each byte
 8004110:	2300      	movs	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b0b      	cmp	r3, #11
 8004118:	d85b      	bhi.n	80041d2 <_Z19SBUS_postProcessingv+0xce>
  {
    if ((SBUS_RxBitString[0 + (i * SBUS_BitsPerByte)] == true) & (SBUS_RxBitString[10 + (i * SBUS_BitsPerByte)] == false) & (SBUS_RxBitString[11 + (i * SBUS_BitsPerByte)] == false))
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	4613      	mov	r3, r2
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	461a      	mov	r2, r3
 8004126:	4b7f      	ldr	r3, [pc, #508]	; (8004324 <_Z19SBUS_postProcessingv+0x220>)
 8004128:	5c9b      	ldrb	r3, [r3, r2]
 800412a:	2b01      	cmp	r3, #1
 800412c:	bf0c      	ite	eq
 800412e:	2301      	moveq	r3, #1
 8004130:	2300      	movne	r3, #0
 8004132:	b2d9      	uxtb	r1, r3
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	4613      	mov	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	330a      	adds	r3, #10
 8004140:	4a78      	ldr	r2, [pc, #480]	; (8004324 <_Z19SBUS_postProcessingv+0x220>)
 8004142:	5cd3      	ldrb	r3, [r2, r3]
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	400b      	ands	r3, r1
 8004150:	b2db      	uxtb	r3, r3
 8004152:	4619      	mov	r1, r3
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	4613      	mov	r3, r2
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	330b      	adds	r3, #11
 8004160:	4a70      	ldr	r2, [pc, #448]	; (8004324 <_Z19SBUS_postProcessingv+0x220>)
 8004162:	5cd3      	ldrb	r3, [r2, r3]
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	400b      	ands	r3, r1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d027      	beq.n	80041c4 <_Z19SBUS_postProcessingv+0xc0>
    {                                                                                                                     //^->check start bit, 2 stop bit
      uint8_t parityCheck = false;
 8004174:	2300      	movs	r3, #0
 8004176:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                                                                      //generate parity from 8 bits
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2b07      	cmp	r3, #7
 8004180:	d811      	bhi.n	80041a6 <_Z19SBUS_postProcessingv+0xa2>
      {
        parityCheck ^= SBUS_RxBitString[1 + x + (i * SBUS_BitsPerByte)];
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	4613      	mov	r3, r2
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	461a      	mov	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	4413      	add	r3, r2
 8004192:	3301      	adds	r3, #1
 8004194:	4a63      	ldr	r2, [pc, #396]	; (8004324 <_Z19SBUS_postProcessingv+0x220>)
 8004196:	5cd2      	ldrb	r2, [r2, r3]
 8004198:	7efb      	ldrb	r3, [r7, #27]
 800419a:	4053      	eors	r3, r2
 800419c:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                                                                      //generate parity from 8 bits
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	3301      	adds	r3, #1
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	e7ea      	b.n	800417c <_Z19SBUS_postProcessingv+0x78>
      }
      if (parityCheck == SBUS_RxBitString[9 + (i * SBUS_BitsPerByte)]) SBUS_CorruptedPackage = true;                      //if parity fails set corrupted flag
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	4613      	mov	r3, r2
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	3309      	adds	r3, #9
 80041b2:	4a5c      	ldr	r2, [pc, #368]	; (8004324 <_Z19SBUS_postProcessingv+0x220>)
 80041b4:	5cd3      	ldrb	r3, [r2, r3]
 80041b6:	7efa      	ldrb	r2, [r7, #27]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d106      	bne.n	80041ca <_Z19SBUS_postProcessingv+0xc6>
 80041bc:	4b58      	ldr	r3, [pc, #352]	; (8004320 <_Z19SBUS_postProcessingv+0x21c>)
 80041be:	2201      	movs	r2, #1
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	e002      	b.n	80041ca <_Z19SBUS_postProcessingv+0xc6>
    }
    else SBUS_CorruptedPackage = true;                                                                                    //if start or stop bits fail set corrupted flag
 80041c4:	4b56      	ldr	r3, [pc, #344]	; (8004320 <_Z19SBUS_postProcessingv+0x21c>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)                                                                         //repeat for each byte
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	3301      	adds	r3, #1
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	e7a0      	b.n	8004114 <_Z19SBUS_postProcessingv+0x10>
  }

  SBUS_Bytes[0] = 0;                                                                                                      //Reset the first byte (header byte)
 80041d2:	4b55      	ldr	r3, [pc, #340]	; (8004328 <_Z19SBUS_postProcessingv+0x224>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 80041d8:	2300      	movs	r3, #0
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b07      	cmp	r3, #7
 80041e0:	d816      	bhi.n	8004210 <_Z19SBUS_postProcessingv+0x10c>
  {
    SBUS_Bytes[0] |= SBUS_RxBitString[1 + i] << (7 - i);                                                                  //assemble new header byte
 80041e2:	4b51      	ldr	r3, [pc, #324]	; (8004328 <_Z19SBUS_postProcessingv+0x224>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	b25a      	sxtb	r2, r3
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	3301      	adds	r3, #1
 80041ec:	494d      	ldr	r1, [pc, #308]	; (8004324 <_Z19SBUS_postProcessingv+0x220>)
 80041ee:	5ccb      	ldrb	r3, [r1, r3]
 80041f0:	4619      	mov	r1, r3
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f1c3 0307 	rsb	r3, r3, #7
 80041f8:	fa01 f303 	lsl.w	r3, r1, r3
 80041fc:	b25b      	sxtb	r3, r3
 80041fe:	4313      	orrs	r3, r2
 8004200:	b25b      	sxtb	r3, r3
 8004202:	b2da      	uxtb	r2, r3
 8004204:	4b48      	ldr	r3, [pc, #288]	; (8004328 <_Z19SBUS_postProcessingv+0x224>)
 8004206:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	3301      	adds	r3, #1
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	e7e5      	b.n	80041dc <_Z19SBUS_postProcessingv+0xd8>
  }
  if (SBUS_Bytes[0] != 0x0FU) SBUS_CorruptedPackage = true;                                                               //check if header byte is 0x0F
 8004210:	4b45      	ldr	r3, [pc, #276]	; (8004328 <_Z19SBUS_postProcessingv+0x224>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2b0f      	cmp	r3, #15
 8004216:	d002      	beq.n	800421e <_Z19SBUS_postProcessingv+0x11a>
 8004218:	4b41      	ldr	r3, [pc, #260]	; (8004320 <_Z19SBUS_postProcessingv+0x21c>)
 800421a:	2201      	movs	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]

  //assemble channels:

  if (SBUS_CorruptedPackage == false)
 800421e:	4b40      	ldr	r3, [pc, #256]	; (8004320 <_Z19SBUS_postProcessingv+0x21c>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d175      	bne.n	8004312 <_Z19SBUS_postProcessingv+0x20e>
  {
    uint8_t byteNumber = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
    uint8_t bitNumber = 0;                                                                                                //0(LSB) to 7/(MSB)
 800422a:	2300      	movs	r3, #0
 800422c:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b07      	cmp	r3, #7
 8004236:	d86c      	bhi.n	8004312 <_Z19SBUS_postProcessingv+0x20e>
    {
      uint8_t bitInChannel = 0;                                                                                           //0(LSB) to 10(MSB)
 8004238:	2300      	movs	r3, #0
 800423a:	71fb      	strb	r3, [r7, #7]
      SBUS_TempChannels[i] = 0;
 800423c:	4a3b      	ldr	r2, [pc, #236]	; (800432c <_Z19SBUS_postProcessingv+0x228>)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2100      	movs	r1, #0
 8004242:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      while (bitInChannel <= 10)
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	2b0a      	cmp	r3, #10
 800424a:	d843      	bhi.n	80042d4 <_Z19SBUS_postProcessingv+0x1d0>
      {
        if (bitNumber <= 7)
 800424c:	7bbb      	ldrb	r3, [r7, #14]
 800424e:	2b07      	cmp	r3, #7
 8004250:	d81a      	bhi.n	8004288 <_Z19SBUS_postProcessingv+0x184>
        {
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;   //transfer bit
 8004252:	4a36      	ldr	r2, [pc, #216]	; (800432c <_Z19SBUS_postProcessingv+0x228>)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800425a:	7bbb      	ldrb	r3, [r7, #14]
 800425c:	f103 000d 	add.w	r0, r3, #13
 8004260:	7bfa      	ldrb	r2, [r7, #15]
 8004262:	4613      	mov	r3, r2
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4403      	add	r3, r0
 800426c:	4a2d      	ldr	r2, [pc, #180]	; (8004324 <_Z19SBUS_postProcessingv+0x220>)
 800426e:	5cd3      	ldrb	r3, [r2, r3]
 8004270:	461a      	mov	r2, r3
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	b21b      	sxth	r3, r3
 800427a:	430b      	orrs	r3, r1
 800427c:	b219      	sxth	r1, r3
 800427e:	4a2b      	ldr	r2, [pc, #172]	; (800432c <_Z19SBUS_postProcessingv+0x228>)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004286:	e01e      	b.n	80042c6 <_Z19SBUS_postProcessingv+0x1c2>
        }
        else
        {
          byteNumber ++;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	3301      	adds	r3, #1
 800428c:	73fb      	strb	r3, [r7, #15]
          bitNumber = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	73bb      	strb	r3, [r7, #14]
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;   //transfer bit
 8004292:	4a26      	ldr	r2, [pc, #152]	; (800432c <_Z19SBUS_postProcessingv+0x228>)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800429a:	7bbb      	ldrb	r3, [r7, #14]
 800429c:	f103 000d 	add.w	r0, r3, #13
 80042a0:	7bfa      	ldrb	r2, [r7, #15]
 80042a2:	4613      	mov	r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4403      	add	r3, r0
 80042ac:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <_Z19SBUS_postProcessingv+0x220>)
 80042ae:	5cd3      	ldrb	r3, [r2, r3]
 80042b0:	461a      	mov	r2, r3
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	b21b      	sxth	r3, r3
 80042ba:	430b      	orrs	r3, r1
 80042bc:	b219      	sxth	r1, r3
 80042be:	4a1b      	ldr	r2, [pc, #108]	; (800432c <_Z19SBUS_postProcessingv+0x228>)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        bitNumber ++;
 80042c6:	7bbb      	ldrb	r3, [r7, #14]
 80042c8:	3301      	adds	r3, #1
 80042ca:	73bb      	strb	r3, [r7, #14]
        bitInChannel ++;
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	3301      	adds	r3, #1
 80042d0:	71fb      	strb	r3, [r7, #7]
      while (bitInChannel <= 10)
 80042d2:	e7b8      	b.n	8004246 <_Z19SBUS_postProcessingv+0x142>
      }
      
      SBUS_Channels[i] = ((SBUS_rawValueCenter - (float)SBUS_TempChannels[i]) * SBUS_ConversionRation);            //map from 233, 1875 to -1000, 1000 and transfer channel value
 80042d4:	4a15      	ldr	r2, [pc, #84]	; (800432c <_Z19SBUS_postProcessingv+0x228>)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fc fd39 	bl	8000d54 <__aeabi_i2f>
 80042e2:	4603      	mov	r3, r0
 80042e4:	4619      	mov	r1, r3
 80042e6:	4812      	ldr	r0, [pc, #72]	; (8004330 <_Z19SBUS_postProcessingv+0x22c>)
 80042e8:	f7fc fc7e 	bl	8000be8 <__aeabi_fsub>
 80042ec:	4603      	mov	r3, r0
 80042ee:	4911      	ldr	r1, [pc, #68]	; (8004334 <_Z19SBUS_postProcessingv+0x230>)
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fc fd83 	bl	8000dfc <__aeabi_fmul>
 80042f6:	4603      	mov	r3, r0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fc ff5b 	bl	80011b4 <__aeabi_f2iz>
 80042fe:	4603      	mov	r3, r0
 8004300:	b219      	sxth	r1, r3
 8004302:	4a0d      	ldr	r2, [pc, #52]	; (8004338 <_Z19SBUS_postProcessingv+0x234>)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	3301      	adds	r3, #1
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	e78f      	b.n	8004232 <_Z19SBUS_postProcessingv+0x12e>
    }
  }
  SBUSNewPackage = false;                                                                                                 //reset flag
 8004312:	4b0a      	ldr	r3, [pc, #40]	; (800433c <_Z19SBUS_postProcessingv+0x238>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	bf00      	nop
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20000021 	.word	0x20000021
 8004324:	2000058c 	.word	0x2000058c
 8004328:	2000061c 	.word	0x2000061c
 800432c:	20000628 	.word	0x20000628
 8004330:	4483c000 	.word	0x4483c000
 8004334:	3f9be84d 	.word	0x3f9be84d
 8004338:	20000638 	.word	0x20000638
 800433c:	20000648 	.word	0x20000648

08004340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004344:	f001 fb8a 	bl	8005a5c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(100);
 8004348:	2064      	movs	r0, #100	; 0x64
 800434a:	f001 fbf5 	bl	8005b38 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800434e:	f000 f833 	bl	80043b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004352:	f000 fa09 	bl	8004768 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8004356:	f000 f87f 	bl	8004458 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 800435a:	f000 f8d9 	bl	8004510 <MX_I2C1_Init>
  MX_TIM3_Init();
 800435e:	f000 f90b 	bl	8004578 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8004362:	f000 f971 	bl	8004648 <_ZL12MX_TIM4_Initv>
  MX_TIM11_Init();
 8004366:	f000 f9d7 	bl	8004718 <_ZL13MX_TIM11_Initv>
  MX_USB_DEVICE_Init();
 800436a:	f008 fcc7 	bl	800ccfc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim11);    //start TIM11
 800436e:	480e      	ldr	r0, [pc, #56]	; (80043a8 <main+0x68>)
 8004370:	f005 f830 	bl	80093d4 <HAL_TIM_Base_Start>
  MPU6050_init();
 8004374:	f7fd fd5e 	bl	8001e34 <_Z12MPU6050_initv>
  PPM_init();
 8004378:	f000 fc68 	bl	8004c4c <_Z8PPM_initv>
  while (SBUS_CorruptedPackage == true)     //only continue if the heli is connected to the remote
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <main+0x6c>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d106      	bne.n	8004392 <main+0x52>
  {
    if (SBUSNewPackage == true) SBUS_postProcessing();
 8004384:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <main+0x70>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d1f7      	bne.n	800437c <main+0x3c>
 800438c:	f7ff feba 	bl	8004104 <_Z19SBUS_postProcessingv>
  while (SBUS_CorruptedPackage == true)     //only continue if the heli is connected to the remote
 8004390:	e7f4      	b.n	800437c <main+0x3c>
  }
  ESCCalibration();
 8004392:	f000 fc69 	bl	8004c68 <_Z14ESCCalibrationv>
  MPU6050_calibration();
 8004396:	f7fd fd91 	bl	8001ebc <_Z19MPU6050_calibrationv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin);   //NOTDONE debug
 800439a:	2110      	movs	r1, #16
 800439c:	4805      	ldr	r0, [pc, #20]	; (80043b4 <main+0x74>)
 800439e:	f002 fa16 	bl	80067ce <HAL_GPIO_TogglePin>
    loop();
 80043a2:	f000 fdc1 	bl	8004f28 <_Z4loopv>
    HAL_GPIO_TogglePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin);   //NOTDONE debug
 80043a6:	e7f8      	b.n	800439a <main+0x5a>
 80043a8:	2000077c 	.word	0x2000077c
 80043ac:	20000021 	.word	0x20000021
 80043b0:	20000648 	.word	0x20000648
 80043b4:	40020000 	.word	0x40020000

080043b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b092      	sub	sp, #72	; 0x48
 80043bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043be:	f107 0318 	add.w	r3, r7, #24
 80043c2:	2230      	movs	r2, #48	; 0x30
 80043c4:	2100      	movs	r1, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f00b fb1a 	bl	800fa00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043cc:	1d3b      	adds	r3, r7, #4
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	609a      	str	r2, [r3, #8]
 80043d6:	60da      	str	r2, [r3, #12]
 80043d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80043da:	2301      	movs	r3, #1
 80043dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043de:	2301      	movs	r3, #1
 80043e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043e2:	2302      	movs	r3, #2
 80043e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80043e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 80043ec:	2308      	movs	r3, #8
 80043ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80043f0:	23c0      	movs	r3, #192	; 0xc0
 80043f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80043f4:	2306      	movs	r3, #6
 80043f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80043f8:	2308      	movs	r3, #8
 80043fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043fc:	f107 0318 	add.w	r3, r7, #24
 8004400:	4618      	mov	r0, r3
 8004402:	f004 fb29 	bl	8008a58 <HAL_RCC_OscConfig>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf14      	ite	ne
 800440c:	2301      	movne	r3, #1
 800440e:	2300      	moveq	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8004416:	f000 fa6f 	bl	80048f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800441a:	230f      	movs	r3, #15
 800441c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800441e:	2302      	movs	r3, #2
 8004420:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8004422:	2390      	movs	r3, #144	; 0x90
 8004424:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004426:	2300      	movs	r3, #0
 8004428:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f004 fd60 	bl	8008ef8 <HAL_RCC_ClockConfig>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	bf14      	ite	ne
 800443e:	2301      	movne	r3, #1
 8004440:	2300      	moveq	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 8004448:	f000 fa56 	bl	80048f8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800444c:	f004 fe40 	bl	80090d0 <HAL_RCC_EnableCSS>
}
 8004450:	bf00      	nop
 8004452:	3748      	adds	r7, #72	; 0x48
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800445e:	463b      	mov	r3, r7
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800446a:	4b26      	ldr	r3, [pc, #152]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 800446c:	4a26      	ldr	r2, [pc, #152]	; (8004508 <_ZL12MX_ADC1_Initv+0xb0>)
 800446e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004470:	4b24      	ldr	r3, [pc, #144]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 8004472:	2200      	movs	r2, #0
 8004474:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004476:	4b23      	ldr	r3, [pc, #140]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 8004478:	2200      	movs	r2, #0
 800447a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800447c:	4b21      	ldr	r3, [pc, #132]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 800447e:	2200      	movs	r2, #0
 8004480:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004482:	4b20      	ldr	r3, [pc, #128]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 8004484:	2201      	movs	r2, #1
 8004486:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004488:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004490:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 8004492:	2200      	movs	r2, #0
 8004494:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004496:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 8004498:	4a1c      	ldr	r2, [pc, #112]	; (800450c <_ZL12MX_ADC1_Initv+0xb4>)
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800449c:	4b19      	ldr	r3, [pc, #100]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 800449e:	2200      	movs	r2, #0
 80044a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80044a2:	4b18      	ldr	r3, [pc, #96]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80044a8:	4b16      	ldr	r3, [pc, #88]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80044b0:	4b14      	ldr	r3, [pc, #80]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80044b6:	4813      	ldr	r0, [pc, #76]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 80044b8:	f001 fb62 	bl	8005b80 <HAL_ADC_Init>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bf14      	ite	ne
 80044c2:	2301      	movne	r3, #1
 80044c4:	2300      	moveq	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 80044cc:	f000 fa14 	bl	80048f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80044d0:	230b      	movs	r3, #11
 80044d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80044d4:	2301      	movs	r3, #1
 80044d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80044d8:	2301      	movs	r3, #1
 80044da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044dc:	463b      	mov	r3, r7
 80044de:	4619      	mov	r1, r3
 80044e0:	4808      	ldr	r0, [pc, #32]	; (8004504 <_ZL12MX_ADC1_Initv+0xac>)
 80044e2:	f001 fc41 	bl	8005d68 <HAL_ADC_ConfigChannel>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	bf14      	ite	ne
 80044ec:	2301      	movne	r3, #1
 80044ee:	2300      	moveq	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80044f6:	f000 f9ff 	bl	80048f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80044fa:	bf00      	nop
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000650 	.word	0x20000650
 8004508:	40012000 	.word	0x40012000
 800450c:	0f000001 	.word	0x0f000001

08004510 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004514:	4b15      	ldr	r3, [pc, #84]	; (800456c <MX_I2C1_Init+0x5c>)
 8004516:	4a16      	ldr	r2, [pc, #88]	; (8004570 <MX_I2C1_Init+0x60>)
 8004518:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800451a:	4b14      	ldr	r3, [pc, #80]	; (800456c <MX_I2C1_Init+0x5c>)
 800451c:	4a15      	ldr	r2, [pc, #84]	; (8004574 <MX_I2C1_Init+0x64>)
 800451e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004520:	4b12      	ldr	r3, [pc, #72]	; (800456c <MX_I2C1_Init+0x5c>)
 8004522:	2200      	movs	r2, #0
 8004524:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004526:	4b11      	ldr	r3, [pc, #68]	; (800456c <MX_I2C1_Init+0x5c>)
 8004528:	2200      	movs	r2, #0
 800452a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <MX_I2C1_Init+0x5c>)
 800452e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004532:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004534:	4b0d      	ldr	r3, [pc, #52]	; (800456c <MX_I2C1_Init+0x5c>)
 8004536:	2200      	movs	r2, #0
 8004538:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800453a:	4b0c      	ldr	r3, [pc, #48]	; (800456c <MX_I2C1_Init+0x5c>)
 800453c:	2200      	movs	r2, #0
 800453e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <MX_I2C1_Init+0x5c>)
 8004542:	2200      	movs	r2, #0
 8004544:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <MX_I2C1_Init+0x5c>)
 8004548:	2200      	movs	r2, #0
 800454a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800454c:	4807      	ldr	r0, [pc, #28]	; (800456c <MX_I2C1_Init+0x5c>)
 800454e:	f002 f96f 	bl	8006830 <HAL_I2C_Init>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	bf14      	ite	ne
 8004558:	2301      	movne	r3, #1
 800455a:	2300      	moveq	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <MX_I2C1_Init+0x56>
  {
    Error_Handler();
 8004562:	f000 f9c9 	bl	80048f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000698 	.word	0x20000698
 8004570:	40005400 	.word	0x40005400
 8004574:	00061a80 	.word	0x00061a80

08004578 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800457e:	f107 0320 	add.w	r3, r7, #32
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004588:	1d3b      	adds	r3, r7, #4
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	605a      	str	r2, [r3, #4]
 8004590:	609a      	str	r2, [r3, #8]
 8004592:	60da      	str	r2, [r3, #12]
 8004594:	611a      	str	r2, [r3, #16]
 8004596:	615a      	str	r2, [r3, #20]
 8004598:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800459a:	4b29      	ldr	r3, [pc, #164]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 800459c:	4a29      	ldr	r2, [pc, #164]	; (8004644 <_ZL12MX_TIM3_Initv+0xcc>)
 800459e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 80045a0:	4b27      	ldr	r3, [pc, #156]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 80045a2:	220f      	movs	r2, #15
 80045a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045a6:	4b26      	ldr	r3, [pc, #152]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000 - 1;
 80045ac:	4b24      	ldr	r3, [pc, #144]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 80045ae:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80045b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045b4:	4b22      	ldr	r3, [pc, #136]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045ba:	4b21      	ldr	r3, [pc, #132]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 80045bc:	2200      	movs	r2, #0
 80045be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80045c0:	481f      	ldr	r0, [pc, #124]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 80045c2:	f004 ffdb 	bl	800957c <HAL_TIM_PWM_Init>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 80045d6:	f000 f98f 	bl	80048f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045da:	2300      	movs	r3, #0
 80045dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045de:	2300      	movs	r3, #0
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80045e2:	f107 0320 	add.w	r3, r7, #32
 80045e6:	4619      	mov	r1, r3
 80045e8:	4815      	ldr	r0, [pc, #84]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 80045ea:	f005 fc0b 	bl	8009e04 <HAL_TIMEx_MasterConfigSynchronization>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bf14      	ite	ne
 80045f4:	2301      	movne	r3, #1
 80045f6:	2300      	moveq	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80045fe:	f000 f97b 	bl	80048f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004602:	2360      	movs	r3, #96	; 0x60
 8004604:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004612:	1d3b      	adds	r3, r7, #4
 8004614:	2200      	movs	r2, #0
 8004616:	4619      	mov	r1, r3
 8004618:	4809      	ldr	r0, [pc, #36]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 800461a:	f005 f8c7 	bl	80097ac <HAL_TIM_PWM_ConfigChannel>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	bf14      	ite	ne
 8004624:	2301      	movne	r3, #1
 8004626:	2300      	moveq	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 800462e:	f000 f963 	bl	80048f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004632:	4803      	ldr	r0, [pc, #12]	; (8004640 <_ZL12MX_TIM3_Initv+0xc8>)
 8004634:	f001 f886 	bl	8005744 <HAL_TIM_MspPostInit>

}
 8004638:	bf00      	nop
 800463a:	3728      	adds	r7, #40	; 0x28
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	200006ec 	.word	0x200006ec
 8004644:	40000400 	.word	0x40000400

08004648 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08a      	sub	sp, #40	; 0x28
 800464c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800464e:	f107 0320 	add.w	r3, r7, #32
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004658:	1d3b      	adds	r3, r7, #4
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	605a      	str	r2, [r3, #4]
 8004660:	609a      	str	r2, [r3, #8]
 8004662:	60da      	str	r2, [r3, #12]
 8004664:	611a      	str	r2, [r3, #16]
 8004666:	615a      	str	r2, [r3, #20]
 8004668:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800466a:	4b29      	ldr	r3, [pc, #164]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 800466c:	4a29      	ldr	r2, [pc, #164]	; (8004714 <_ZL12MX_TIM4_Initv+0xcc>)
 800466e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16 - 1;
 8004670:	4b27      	ldr	r3, [pc, #156]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 8004672:	220f      	movs	r2, #15
 8004674:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004676:	4b26      	ldr	r3, [pc, #152]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 8004678:	2200      	movs	r2, #0
 800467a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2500 -1;
 800467c:	4b24      	ldr	r3, [pc, #144]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 800467e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8004682:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004684:	4b22      	ldr	r3, [pc, #136]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 8004686:	2200      	movs	r2, #0
 8004688:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800468a:	4b21      	ldr	r3, [pc, #132]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 800468c:	2200      	movs	r2, #0
 800468e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004690:	481f      	ldr	r0, [pc, #124]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 8004692:	f004 ff73 	bl	800957c <HAL_TIM_PWM_Init>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf14      	ite	ne
 800469c:	2301      	movne	r3, #1
 800469e:	2300      	moveq	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 80046a6:	f000 f927 	bl	80048f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046aa:	2300      	movs	r3, #0
 80046ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80046b2:	f107 0320 	add.w	r3, r7, #32
 80046b6:	4619      	mov	r1, r3
 80046b8:	4815      	ldr	r0, [pc, #84]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 80046ba:	f005 fba3 	bl	8009e04 <HAL_TIMEx_MasterConfigSynchronization>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bf14      	ite	ne
 80046c4:	2301      	movne	r3, #1
 80046c6:	2300      	moveq	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 80046ce:	f000 f913 	bl	80048f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046d2:	2360      	movs	r3, #96	; 0x60
 80046d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046e2:	1d3b      	adds	r3, r7, #4
 80046e4:	2200      	movs	r2, #0
 80046e6:	4619      	mov	r1, r3
 80046e8:	4809      	ldr	r0, [pc, #36]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 80046ea:	f005 f85f 	bl	80097ac <HAL_TIM_PWM_ConfigChannel>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 80046fe:	f000 f8fb 	bl	80048f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004702:	4803      	ldr	r0, [pc, #12]	; (8004710 <_ZL12MX_TIM4_Initv+0xc8>)
 8004704:	f001 f81e 	bl	8005744 <HAL_TIM_MspPostInit>

}
 8004708:	bf00      	nop
 800470a:	3728      	adds	r7, #40	; 0x28
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000734 	.word	0x20000734
 8004714:	40000800 	.word	0x40000800

08004718 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800471c:	4b10      	ldr	r3, [pc, #64]	; (8004760 <_ZL13MX_TIM11_Initv+0x48>)
 800471e:	4a11      	ldr	r2, [pc, #68]	; (8004764 <_ZL13MX_TIM11_Initv+0x4c>)
 8004720:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16 - 1;
 8004722:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <_ZL13MX_TIM11_Initv+0x48>)
 8004724:	220f      	movs	r2, #15
 8004726:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004728:	4b0d      	ldr	r3, [pc, #52]	; (8004760 <_ZL13MX_TIM11_Initv+0x48>)
 800472a:	2200      	movs	r2, #0
 800472c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800472e:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <_ZL13MX_TIM11_Initv+0x48>)
 8004730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004734:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004736:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <_ZL13MX_TIM11_Initv+0x48>)
 8004738:	2200      	movs	r2, #0
 800473a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800473c:	4b08      	ldr	r3, [pc, #32]	; (8004760 <_ZL13MX_TIM11_Initv+0x48>)
 800473e:	2200      	movs	r2, #0
 8004740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004742:	4807      	ldr	r0, [pc, #28]	; (8004760 <_ZL13MX_TIM11_Initv+0x48>)
 8004744:	f004 fdf6 	bl	8009334 <HAL_TIM_Base_Init>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	bf14      	ite	ne
 800474e:	2301      	movne	r3, #1
 8004750:	2300      	moveq	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8004758:	f000 f8ce 	bl	80048f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800475c:	bf00      	nop
 800475e:	bd80      	pop	{r7, pc}
 8004760:	2000077c 	.word	0x2000077c
 8004764:	40014800 	.word	0x40014800

08004768 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476e:	f107 0314 	add.w	r3, r7, #20
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	605a      	str	r2, [r3, #4]
 8004778:	609a      	str	r2, [r3, #8]
 800477a:	60da      	str	r2, [r3, #12]
 800477c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800477e:	2300      	movs	r3, #0
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	4b48      	ldr	r3, [pc, #288]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	4a47      	ldr	r2, [pc, #284]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 8004788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478c:	6313      	str	r3, [r2, #48]	; 0x30
 800478e:	4b45      	ldr	r3, [pc, #276]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	4b41      	ldr	r3, [pc, #260]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	4a40      	ldr	r2, [pc, #256]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047a4:	f043 0304 	orr.w	r3, r3, #4
 80047a8:	6313      	str	r3, [r2, #48]	; 0x30
 80047aa:	4b3e      	ldr	r3, [pc, #248]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	4b3a      	ldr	r3, [pc, #232]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	4a39      	ldr	r2, [pc, #228]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	6313      	str	r3, [r2, #48]	; 0x30
 80047c6:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	4b33      	ldr	r3, [pc, #204]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	4a32      	ldr	r2, [pc, #200]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047dc:	f043 0302 	orr.w	r3, r3, #2
 80047e0:	6313      	str	r3, [r2, #48]	; 0x30
 80047e2:	4b30      	ldr	r3, [pc, #192]	; (80048a4 <_ZL12MX_GPIO_Initv+0x13c>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 80047ee:	2200      	movs	r2, #0
 80047f0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80047f4:	482c      	ldr	r0, [pc, #176]	; (80048a8 <_ZL12MX_GPIO_Initv+0x140>)
 80047f6:	f001 ffd2 	bl	800679e <HAL_GPIO_WritePin>
                          |ONBOARD_WRITE_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_RESET);
 80047fa:	2200      	movs	r2, #0
 80047fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004800:	482a      	ldr	r0, [pc, #168]	; (80048ac <_ZL12MX_GPIO_Initv+0x144>)
 8004802:	f001 ffcc 	bl	800679e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_READ_IT_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_IT_3_Pin;
 8004806:	2301      	movs	r3, #1
 8004808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800480a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800480e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_IT_3_GPIO_Port, &GPIO_InitStruct);
 8004814:	f107 0314 	add.w	r3, r7, #20
 8004818:	4619      	mov	r1, r3
 800481a:	4824      	ldr	r0, [pc, #144]	; (80048ac <_ZL12MX_GPIO_Initv+0x144>)
 800481c:	f001 fe0a 	bl	8006434 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_BUTTON_1_Pin ONBOARD_BUTTON_2_Pin ONBOARD_BUTTON_3_Pin ONBOARD_BUTTON_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_BUTTON_1_Pin|ONBOARD_BUTTON_2_Pin|ONBOARD_BUTTON_3_Pin|ONBOARD_BUTTON_4_Pin;
 8004820:	230f      	movs	r3, #15
 8004822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004824:	2300      	movs	r3, #0
 8004826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004828:	2300      	movs	r3, #0
 800482a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800482c:	f107 0314 	add.w	r3, r7, #20
 8004830:	4619      	mov	r1, r3
 8004832:	481d      	ldr	r0, [pc, #116]	; (80048a8 <_ZL12MX_GPIO_Initv+0x140>)
 8004834:	f001 fdfe 	bl	8006434 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_LED_1_Pin ONBOARD_LED_2_Pin ONBOARD_LED_3_Pin ONBOARD_LED_4_Pin
                           ONBOARD_WRITE_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 8004838:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800483c:	617b      	str	r3, [r7, #20]
                          |ONBOARD_WRITE_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800483e:	2301      	movs	r3, #1
 8004840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004846:	2300      	movs	r3, #0
 8004848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800484a:	f107 0314 	add.w	r3, r7, #20
 800484e:	4619      	mov	r1, r3
 8004850:	4815      	ldr	r0, [pc, #84]	; (80048a8 <_ZL12MX_GPIO_Initv+0x140>)
 8004852:	f001 fdef 	bl	8006434 <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_WRITE_2_Pin */
  GPIO_InitStruct.Pin = ONBOARD_WRITE_2_Pin;
 8004856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800485a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800485c:	2301      	movs	r3, #1
 800485e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004860:	2300      	movs	r3, #0
 8004862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004864:	2300      	movs	r3, #0
 8004866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ONBOARD_WRITE_2_GPIO_Port, &GPIO_InitStruct);
 8004868:	f107 0314 	add.w	r3, r7, #20
 800486c:	4619      	mov	r1, r3
 800486e:	480f      	ldr	r0, [pc, #60]	; (80048ac <_ZL12MX_GPIO_Initv+0x144>)
 8004870:	f001 fde0 	bl	8006434 <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_READ_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_4_Pin;
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004878:	2300      	movs	r3, #0
 800487a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487c:	2300      	movs	r3, #0
 800487e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_4_GPIO_Port, &GPIO_InitStruct);
 8004880:	f107 0314 	add.w	r3, r7, #20
 8004884:	4619      	mov	r1, r3
 8004886:	480a      	ldr	r0, [pc, #40]	; (80048b0 <_ZL12MX_GPIO_Initv+0x148>)
 8004888:	f001 fdd4 	bl	8006434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800488c:	2200      	movs	r2, #0
 800488e:	2100      	movs	r1, #0
 8004890:	2006      	movs	r0, #6
 8004892:	f001 fd8a 	bl	80063aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004896:	2006      	movs	r0, #6
 8004898:	f001 fda3 	bl	80063e2 <HAL_NVIC_EnableIRQ>

}
 800489c:	bf00      	nop
 800489e:	3728      	adds	r7, #40	; 0x28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40023800 	.word	0x40023800
 80048a8:	40020000 	.word	0x40020000
 80048ac:	40020800 	.word	0x40020800
 80048b0:	40020400 	.word	0x40020400

080048b4 <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin SBUS pin
 * 
 * --Custom Method!
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	80fb      	strh	r3, [r7, #6]
  if (TIM11->CNT - PinInterruptLastTime > SBUS_interruptDeactivationTime)
 80048be:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80048c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048c2:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <HAL_GPIO_EXTI_Callback+0x40>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	f640 0298 	movw	r2, #2200	; 0x898
 80048cc:	4293      	cmp	r3, r2
 80048ce:	bf8c      	ite	hi
 80048d0:	2301      	movhi	r3, #1
 80048d2:	2300      	movls	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d005      	beq.n	80048e6 <HAL_GPIO_EXTI_Callback+0x32>
  {
    SBUS_RecieveBits();
 80048da:	f7ff fb93 	bl	8004004 <_Z16SBUS_RecieveBitsv>
    PinInterruptLastTime = TIM11->CNT;
 80048de:	4b04      	ldr	r3, [pc, #16]	; (80048f0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	4a04      	ldr	r2, [pc, #16]	; (80048f4 <HAL_GPIO_EXTI_Callback+0x40>)
 80048e4:	6013      	str	r3, [r2, #0]
  }
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40014800 	.word	0x40014800
 80048f4:	2000064c 	.word	0x2000064c

080048f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048fc:	b672      	cpsid	i
}
 80048fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004900:	e7fe      	b.n	8004900 <Error_Handler+0x8>
 8004902:	0000      	movs	r0, r0
 8004904:	0000      	movs	r0, r0
	...

08004908 <_Z20updateMainMotorSpeedv>:
 * Then it combines the throttle input and the PITCH,ROLL Y values together with the angle to get the new motorspeed
 * 
 * --Custom Method!
 */
void updateMainMotorSpeed()
{
 8004908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800490c:	af00      	add	r7, sp, #0
  ADC1->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, ADC_CHANNEL_11);               //reset sample rate
 800490e:	4ba6      	ldr	r3, [pc, #664]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	4aa5      	ldr	r2, [pc, #660]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 8004914:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004918:	60d3      	str	r3, [r2, #12]
  ADC1->SMPR1 |= ADC_SMPR1(ADC_SAMPLETIME_15CYCLES, ADC_CHANNEL_11);        //set new sample rate Channel 11
 800491a:	4ba3      	ldr	r3, [pc, #652]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	4aa2      	ldr	r2, [pc, #648]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 8004920:	f043 0308 	orr.w	r3, r3, #8
 8004924:	60d3      	str	r3, [r2, #12]
  ADC1->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, 1);                              //reset Rank
 8004926:	4ba0      	ldr	r3, [pc, #640]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 8004928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492a:	4a9f      	ldr	r2, [pc, #636]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 800492c:	f023 031f 	bic.w	r3, r3, #31
 8004930:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= ADC_SQR3_RK(ADC_CHANNEL_11, 1);                             //set new Rank Channel 11
 8004932:	4b9d      	ldr	r3, [pc, #628]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 8004934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004936:	4a9c      	ldr	r2, [pc, #624]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 8004938:	f043 030b 	orr.w	r3, r3, #11
 800493c:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_ADC_Start(&hadc1);                                                    //start ADC
 800493e:	489b      	ldr	r0, [pc, #620]	; (8004bac <_Z20updateMainMotorSpeedv+0x2a4>)
 8004940:	f001 f962 	bl	8005c08 <HAL_ADC_Start>
	adcValueChannel11 = (uint16_t)ADC1->DR;                                   //read ADC value
 8004944:	4b98      	ldr	r3, [pc, #608]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 8004946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004948:	b29a      	uxth	r2, r3
 800494a:	4b99      	ldr	r3, [pc, #612]	; (8004bb0 <_Z20updateMainMotorSpeedv+0x2a8>)
 800494c:	801a      	strh	r2, [r3, #0]

	ADC1->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, ADC_CHANNEL_12);               //reset sample rate
 800494e:	4b96      	ldr	r3, [pc, #600]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	4a95      	ldr	r2, [pc, #596]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 8004954:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8004958:	60d3      	str	r3, [r2, #12]
  ADC1->SMPR1 |= ADC_SMPR1(ADC_SAMPLETIME_15CYCLES, ADC_CHANNEL_12);        //set new sample rate Channel 12
 800495a:	4b93      	ldr	r3, [pc, #588]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	4a92      	ldr	r2, [pc, #584]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 8004960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004964:	60d3      	str	r3, [r2, #12]
  ADC1->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, 1);                              //reset Rank
 8004966:	4b90      	ldr	r3, [pc, #576]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 8004968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496a:	4a8f      	ldr	r2, [pc, #572]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 800496c:	f023 031f 	bic.w	r3, r3, #31
 8004970:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= ADC_SQR3_RK(ADC_CHANNEL_12, 1);                             //set new Rank Channel 12
 8004972:	4b8d      	ldr	r3, [pc, #564]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 8004974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004976:	4a8c      	ldr	r2, [pc, #560]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 8004978:	f043 030c 	orr.w	r3, r3, #12
 800497c:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_ADC_Start(&hadc1);                                                    //start ADC
 800497e:	488b      	ldr	r0, [pc, #556]	; (8004bac <_Z20updateMainMotorSpeedv+0x2a4>)
 8004980:	f001 f942 	bl	8005c08 <HAL_ADC_Start>
	adcValueChannel12 = (uint16_t)ADC1->DR;                                   //read ADC value
 8004984:	4b88      	ldr	r3, [pc, #544]	; (8004ba8 <_Z20updateMainMotorSpeedv+0x2a0>)
 8004986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004988:	b29a      	uxth	r2, r3
 800498a:	4b8a      	ldr	r3, [pc, #552]	; (8004bb4 <_Z20updateMainMotorSpeedv+0x2ac>)
 800498c:	801a      	strh	r2, [r3, #0]
  //NOTDONE maybe apply offset rotation without converting to mainMotorAngle and then back but rather use complex numbers
  //NOTDONE disable PITCH,ROLL when throttle is 0
  //mainMotorAngle = motorAngle(adcValueChannel12 - 1250, adcValueChannel11 - 1250);
  TIM4->CCR1 = (uint16_t)(                                                                                                                                                      \
    fastPPM_CenterTime                                                                                                                                                          \
  + ((float)SBUS_Channels[2] * PPMmainMotorScaler)                                                                                                                              \
 800498e:	4b8a      	ldr	r3, [pc, #552]	; (8004bb8 <_Z20updateMainMotorSpeedv+0x2b0>)
 8004990:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004994:	4618      	mov	r0, r3
 8004996:	f7fc f9dd 	bl	8000d54 <__aeabi_i2f>
 800499a:	4603      	mov	r3, r0
 800499c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fc fa2b 	bl	8000dfc <__aeabi_fmul>
 80049a6:	4603      	mov	r3, r0
 80049a8:	4984      	ldr	r1, [pc, #528]	; (8004bbc <_Z20updateMainMotorSpeedv+0x2b4>)
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fc f91e 	bl	8000bec <__addsf3>
 80049b0:	4603      	mov	r3, r0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fb fd74 	bl	80004a0 <__aeabi_f2d>
 80049b8:	4604      	mov	r4, r0
 80049ba:	460d      	mov	r5, r1
  + ((((((float)adcValueChannel12 - hall2_center) * hall2_scaler) * cos_OffsetAngle) - ((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * sin_OffsetAngle)) * (PID_Pitch_y * 1))   \
 80049bc:	4b7d      	ldr	r3, [pc, #500]	; (8004bb4 <_Z20updateMainMotorSpeedv+0x2ac>)
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fc f9c3 	bl	8000d4c <__aeabi_ui2f>
 80049c6:	4603      	mov	r3, r0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fb fd69 	bl	80004a0 <__aeabi_f2d>
 80049ce:	a370      	add	r3, pc, #448	; (adr r3, 8004b90 <_Z20updateMainMotorSpeedv+0x288>)
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f7fb fc04 	bl	80001e0 <__aeabi_dsub>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4610      	mov	r0, r2
 80049de:	4619      	mov	r1, r3
 80049e0:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 80049e4:	4b76      	ldr	r3, [pc, #472]	; (8004bc0 <_Z20updateMainMotorSpeedv+0x2b8>)
 80049e6:	f7fb fdb3 	bl	8000550 <__aeabi_dmul>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4690      	mov	r8, r2
 80049f0:	4699      	mov	r9, r3
 80049f2:	4b74      	ldr	r3, [pc, #464]	; (8004bc4 <_Z20updateMainMotorSpeedv+0x2bc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fb fd52 	bl	80004a0 <__aeabi_f2d>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4640      	mov	r0, r8
 8004a02:	4649      	mov	r1, r9
 8004a04:	f7fb fda4 	bl	8000550 <__aeabi_dmul>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4690      	mov	r8, r2
 8004a0e:	4699      	mov	r9, r3
 8004a10:	4b67      	ldr	r3, [pc, #412]	; (8004bb0 <_Z20updateMainMotorSpeedv+0x2a8>)
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fc f999 	bl	8000d4c <__aeabi_ui2f>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fb fd3f 	bl	80004a0 <__aeabi_f2d>
 8004a22:	a35d      	add	r3, pc, #372	; (adr r3, 8004b98 <_Z20updateMainMotorSpeedv+0x290>)
 8004a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a28:	f7fb fbda 	bl	80001e0 <__aeabi_dsub>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4610      	mov	r0, r2
 8004a32:	4619      	mov	r1, r3
 8004a34:	a35a      	add	r3, pc, #360	; (adr r3, 8004ba0 <_Z20updateMainMotorSpeedv+0x298>)
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	f7fb fd89 	bl	8000550 <__aeabi_dmul>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4692      	mov	sl, r2
 8004a44:	469b      	mov	fp, r3
 8004a46:	4b60      	ldr	r3, [pc, #384]	; (8004bc8 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fb fd28 	bl	80004a0 <__aeabi_f2d>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4650      	mov	r0, sl
 8004a56:	4659      	mov	r1, fp
 8004a58:	f7fb fd7a 	bl	8000550 <__aeabi_dmul>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4640      	mov	r0, r8
 8004a62:	4649      	mov	r1, r9
 8004a64:	f7fb fbbc 	bl	80001e0 <__aeabi_dsub>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4690      	mov	r8, r2
 8004a6e:	4699      	mov	r9, r3
 8004a70:	4b56      	ldr	r3, [pc, #344]	; (8004bcc <_Z20updateMainMotorSpeedv+0x2c4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fb fd13 	bl	80004a0 <__aeabi_f2d>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4640      	mov	r0, r8
 8004a80:	4649      	mov	r1, r9
 8004a82:	f7fb fd65 	bl	8000550 <__aeabi_dmul>
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	f7fb fba9 	bl	80001e4 <__adddf3>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4614      	mov	r4, r2
 8004a98:	461d      	mov	r5, r3
  + ((((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * cos_OffsetAngle) + ((((float)adcValueChannel12 - hall2_center) * hall2_scaler) * sin_OffsetAngle)) * (PID_Roll_y  * 1))   \
 8004a9a:	4b45      	ldr	r3, [pc, #276]	; (8004bb0 <_Z20updateMainMotorSpeedv+0x2a8>)
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fc f954 	bl	8000d4c <__aeabi_ui2f>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fb fcfa 	bl	80004a0 <__aeabi_f2d>
 8004aac:	a33a      	add	r3, pc, #232	; (adr r3, 8004b98 <_Z20updateMainMotorSpeedv+0x290>)
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	f7fb fb95 	bl	80001e0 <__aeabi_dsub>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4610      	mov	r0, r2
 8004abc:	4619      	mov	r1, r3
 8004abe:	a338      	add	r3, pc, #224	; (adr r3, 8004ba0 <_Z20updateMainMotorSpeedv+0x298>)
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f7fb fd44 	bl	8000550 <__aeabi_dmul>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4690      	mov	r8, r2
 8004ace:	4699      	mov	r9, r3
 8004ad0:	4b3c      	ldr	r3, [pc, #240]	; (8004bc4 <_Z20updateMainMotorSpeedv+0x2bc>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fb fce3 	bl	80004a0 <__aeabi_f2d>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4640      	mov	r0, r8
 8004ae0:	4649      	mov	r1, r9
 8004ae2:	f7fb fd35 	bl	8000550 <__aeabi_dmul>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4690      	mov	r8, r2
 8004aec:	4699      	mov	r9, r3
 8004aee:	4b31      	ldr	r3, [pc, #196]	; (8004bb4 <_Z20updateMainMotorSpeedv+0x2ac>)
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fc f92a 	bl	8000d4c <__aeabi_ui2f>
 8004af8:	4603      	mov	r3, r0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fb fcd0 	bl	80004a0 <__aeabi_f2d>
 8004b00:	a323      	add	r3, pc, #140	; (adr r3, 8004b90 <_Z20updateMainMotorSpeedv+0x288>)
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	f7fb fb6b 	bl	80001e0 <__aeabi_dsub>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8004b16:	4b2a      	ldr	r3, [pc, #168]	; (8004bc0 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004b18:	f7fb fd1a 	bl	8000550 <__aeabi_dmul>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4692      	mov	sl, r2
 8004b22:	469b      	mov	fp, r3
 8004b24:	4b28      	ldr	r3, [pc, #160]	; (8004bc8 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fb fcb9 	bl	80004a0 <__aeabi_f2d>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4650      	mov	r0, sl
 8004b34:	4659      	mov	r1, fp
 8004b36:	f7fb fd0b 	bl	8000550 <__aeabi_dmul>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4640      	mov	r0, r8
 8004b40:	4649      	mov	r1, r9
 8004b42:	f7fb fb4f 	bl	80001e4 <__adddf3>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4690      	mov	r8, r2
 8004b4c:	4699      	mov	r9, r3
 8004b4e:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <_Z20updateMainMotorSpeedv+0x2c8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fb fca4 	bl	80004a0 <__aeabi_f2d>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	4649      	mov	r1, r9
 8004b60:	f7fb fcf6 	bl	8000550 <__aeabi_dmul>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4620      	mov	r0, r4
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	f7fb fb3a 	bl	80001e4 <__adddf3>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
  TIM4->CCR1 = (uint16_t)(                                                                                                                                                      \
 8004b74:	4610      	mov	r0, r2
 8004b76:	4619      	mov	r1, r3
 8004b78:	f7fb ffc2 	bl	8000b00 <__aeabi_d2uiz>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <_Z20updateMainMotorSpeedv+0x2cc>)
 8004b82:	635a      	str	r2, [r3, #52]	; 0x34
  );
  // mainMotorAngle = ((atan2((float)adcValueChannel12 - 1250, (float)adcValueChannel11 - 1250) * 180) / M_PI) + 180;       //NOTDONE use define for value fastPPM_CenterTime
  // TIM4->CCR1 = (uint16_t)(fastPPM_MinTime + 500 + ((float)SBUS_Channels[2] / 2) + ((float)sin((mainMotorAngle + mainMotorAngleOffset) * (M_PI / 180)) * (PID_Pitch_y / 10)) + ((float)cos((mainMotorAngle + mainMotorAngleOffset) * (M_PI / 180)) * ((float)PID_Roll_y / 10))); //NOTDONE use define for value, try to simplify
}
 8004b84:	bf00      	nop
 8004b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b8a:	bf00      	nop
 8004b8c:	f3af 8000 	nop.w
 8004b90:	00000000 	.word	0x00000000
 8004b94:	4093b000 	.word	0x4093b000
 8004b98:	00000000 	.word	0x00000000
 8004b9c:	4093c400 	.word	0x4093c400
 8004ba0:	6d92aca5 	.word	0x6d92aca5
 8004ba4:	3f4fa8ef 	.word	0x3f4fa8ef
 8004ba8:	40012000 	.word	0x40012000
 8004bac:	20000650 	.word	0x20000650
 8004bb0:	200007c4 	.word	0x200007c4
 8004bb4:	200007c6 	.word	0x200007c6
 8004bb8:	20000638 	.word	0x20000638
 8004bbc:	44bb8000 	.word	0x44bb8000
 8004bc0:	3f501010 	.word	0x3f501010
 8004bc4:	200007d0 	.word	0x200007d0
 8004bc8:	200007cc 	.word	0x200007cc
 8004bcc:	20000540 	.word	0x20000540
 8004bd0:	20000544 	.word	0x20000544
 8004bd4:	40000800 	.word	0x40000800

08004bd8 <_Z20updateTailMotorSpeedv>:
 * If the throttle is above a given deadzone the motor speed is YAW Y value
 * 
 * --Custom Method!
 */
void updateTailMotorSpeed()
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  if (SBUS_Channels[2] > tailmotorDeadzone)
 8004bdc:	4b14      	ldr	r3, [pc, #80]	; (8004c30 <_Z20updateTailMotorSpeedv+0x58>)
 8004bde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004be2:	f513 7f75 	cmn.w	r3, #980	; 0x3d4
 8004be6:	dd0e      	ble.n	8004c06 <_Z20updateTailMotorSpeedv+0x2e>
  {
    TIM3->CCR1 = (uint16_t)(slowPPM1_MinTime + PID_Yaw_y);
 8004be8:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <_Z20updateTailMotorSpeedv+0x5c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4912      	ldr	r1, [pc, #72]	; (8004c38 <_Z20updateTailMotorSpeedv+0x60>)
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fb fffc 	bl	8000bec <__addsf3>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fc fb02 	bl	8001200 <__aeabi_f2uiz>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <_Z20updateTailMotorSpeedv+0x64>)
 8004c02:	635a      	str	r2, [r3, #52]	; 0x34
    Pitch_I_Sum = 0;
    Roll_I_Sum  = 0;
    Yaw_I_Sum   = 0;
    reset_WQuaternion();
  }
}
 8004c04:	e011      	b.n	8004c2a <_Z20updateTailMotorSpeedv+0x52>
    TIM3->CCR1 = slowPPM1_MinTime;
 8004c06:	4b0d      	ldr	r3, [pc, #52]	; (8004c3c <_Z20updateTailMotorSpeedv+0x64>)
 8004c08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c0c:	635a      	str	r2, [r3, #52]	; 0x34
    Pitch_I_Sum = 0;
 8004c0e:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <_Z20updateTailMotorSpeedv+0x68>)
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
    Roll_I_Sum  = 0;
 8004c16:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <_Z20updateTailMotorSpeedv+0x6c>)
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
    Yaw_I_Sum   = 0;
 8004c1e:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <_Z20updateTailMotorSpeedv+0x70>)
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
    reset_WQuaternion();
 8004c26:	f7fe fd4d 	bl	80036c4 <_Z17reset_WQuaternionv>
}
 8004c2a:	bf00      	nop
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000638 	.word	0x20000638
 8004c34:	20000548 	.word	0x20000548
 8004c38:	447a0000 	.word	0x447a0000
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	20000570 	.word	0x20000570
 8004c44:	20000574 	.word	0x20000574
 8004c48:	20000578 	.word	0x20000578

08004c4c <_Z8PPM_initv>:
 * @brief Initializes TIM 3 and 4 used for generating the PPM signals
 * 
 * --Custom Method!
 */
void PPM_init()
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim3);
 8004c50:	4803      	ldr	r0, [pc, #12]	; (8004c60 <_Z8PPM_initv+0x14>)
 8004c52:	f004 fc25 	bl	80094a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8004c56:	4803      	ldr	r0, [pc, #12]	; (8004c64 <_Z8PPM_initv+0x18>)
 8004c58:	f004 fc22 	bl	80094a0 <HAL_TIM_Base_Start_IT>
}
 8004c5c:	bf00      	nop
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	200006ec 	.word	0x200006ec
 8004c64:	20000734 	.word	0x20000734

08004c68 <_Z14ESCCalibrationv>:
 * If BT1 is not pressed, it gives the ESCs x time to initialize
 * 
 * --Custom Method!
 */
void ESCCalibration()
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == true)
 8004c6e:	2101      	movs	r1, #1
 8004c70:	486d      	ldr	r0, [pc, #436]	; (8004e28 <_Z14ESCCalibrationv+0x1c0>)
 8004c72:	f001 fd7d 	bl	8006770 <HAL_GPIO_ReadPin>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 80b8 	beq.w	8004df8 <_Z14ESCCalibrationv+0x190>
  {
    uint16_t counter = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);   //NOTDONE debug
 8004c8c:	2120      	movs	r1, #32
 8004c8e:	4866      	ldr	r0, [pc, #408]	; (8004e28 <_Z14ESCCalibrationv+0x1c0>)
 8004c90:	f001 fd9d 	bl	80067ce <HAL_GPIO_TogglePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);                                                                             //start PPM for tail motor
 8004c94:	2100      	movs	r1, #0
 8004c96:	4865      	ldr	r0, [pc, #404]	; (8004e2c <_Z14ESCCalibrationv+0x1c4>)
 8004c98:	f004 fcc0 	bl	800961c <HAL_TIM_PWM_Start>
    uint16_t oldTime = TIM11->CNT;
 8004c9c:	4b64      	ldr	r3, [pc, #400]	; (8004e30 <_Z14ESCCalibrationv+0x1c8>)
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	80bb      	strh	r3, [r7, #4]

    //main-motor
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	4860      	ldr	r0, [pc, #384]	; (8004e28 <_Z14ESCCalibrationv+0x1c0>)
 8004ca6:	f001 fd63 	bl	8006770 <HAL_GPIO_ReadPin>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bf0c      	ite	eq
 8004cb0:	2301      	moveq	r3, #1
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004cbc:	428b      	cmp	r3, r1
 8004cbe:	bf94      	ite	ls
 8004cc0:	2301      	movls	r3, #1
 8004cc2:	2300      	movhi	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf14      	ite	ne
 8004cce:	2301      	movne	r3, #1
 8004cd0:	2300      	moveq	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d033      	beq.n	8004d40 <_Z14ESCCalibrationv+0xd8>
    {
      if (SBUSNewPackage == true) SBUS_postProcessing();                                                                  //process new packets
 8004cd8:	4b56      	ldr	r3, [pc, #344]	; (8004e34 <_Z14ESCCalibrationv+0x1cc>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <_Z14ESCCalibrationv+0x7c>
 8004ce0:	f7ff fa10 	bl	8004104 <_Z19SBUS_postProcessingv>
      TIM3->CCR1 = (uint16_t)(slowPPM1_CenterTime + (SBUS_Channels[2] * PPMtailMotorScaler));                             //update motor speed
 8004ce4:	4b54      	ldr	r3, [pc, #336]	; (8004e38 <_Z14ESCCalibrationv+0x1d0>)
 8004ce6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fc f832 	bl	8000d54 <__aeabi_i2f>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fc f880 	bl	8000dfc <__aeabi_fmul>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	494f      	ldr	r1, [pc, #316]	; (8004e3c <_Z14ESCCalibrationv+0x1d4>)
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fb ff73 	bl	8000bec <__addsf3>
 8004d06:	4603      	mov	r3, r0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fc fa79 	bl	8001200 <__aeabi_f2uiz>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	4b4b      	ldr	r3, [pc, #300]	; (8004e40 <_Z14ESCCalibrationv+0x1d8>)
 8004d14:	635a      	str	r2, [r3, #52]	; 0x34
      while ((TIM11->CNT - oldTime) < 10000);                                                                             //wait for 10 milliseconds to pass
 8004d16:	4b46      	ldr	r3, [pc, #280]	; (8004e30 <_Z14ESCCalibrationv+0x1c8>)
 8004d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d1a:	88bb      	ldrh	r3, [r7, #4]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004d22:	4293      	cmp	r3, r2
 8004d24:	bf94      	ite	ls
 8004d26:	2301      	movls	r3, #1
 8004d28:	2300      	movhi	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d000      	beq.n	8004d32 <_Z14ESCCalibrationv+0xca>
 8004d30:	e7f1      	b.n	8004d16 <_Z14ESCCalibrationv+0xae>
      oldTime = TIM11->CNT;
 8004d32:	4b3f      	ldr	r3, [pc, #252]	; (8004e30 <_Z14ESCCalibrationv+0x1c8>)
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	80bb      	strh	r3, [r7, #4]
      counter += 10;
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	330a      	adds	r3, #10
 8004d3c:	80fb      	strh	r3, [r7, #6]
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 8004d3e:	e7b0      	b.n	8004ca2 <_Z14ESCCalibrationv+0x3a>
    }

    counter = 0;                                                                                                          //reset counter
 8004d40:	2300      	movs	r3, #0
 8004d42:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_TogglePin(ONBOARD_LED_3_GPIO_Port, ONBOARD_LED_3_Pin);   //NOTDONE debug
 8004d44:	2140      	movs	r1, #64	; 0x40
 8004d46:	4838      	ldr	r0, [pc, #224]	; (8004e28 <_Z14ESCCalibrationv+0x1c0>)
 8004d48:	f001 fd41 	bl	80067ce <HAL_GPIO_TogglePin>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);                                                                             //start PPM for main motor
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	483d      	ldr	r0, [pc, #244]	; (8004e44 <_Z14ESCCalibrationv+0x1dc>)
 8004d50:	f004 fc64 	bl	800961c <HAL_TIM_PWM_Start>
    oldTime = TIM11->CNT;
 8004d54:	4b36      	ldr	r3, [pc, #216]	; (8004e30 <_Z14ESCCalibrationv+0x1c8>)
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	80bb      	strh	r3, [r7, #4]

    //tail-motor
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	4832      	ldr	r0, [pc, #200]	; (8004e28 <_Z14ESCCalibrationv+0x1c0>)
 8004d5e:	f001 fd07 	bl	8006770 <HAL_GPIO_ReadPin>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	bf0c      	ite	eq
 8004d68:	2301      	moveq	r3, #1
 8004d6a:	2300      	movne	r3, #0
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	88fb      	ldrh	r3, [r7, #6]
 8004d70:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004d74:	428b      	cmp	r3, r1
 8004d76:	bf94      	ite	ls
 8004d78:	2301      	movls	r3, #1
 8004d7a:	2300      	movhi	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bf14      	ite	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	2300      	moveq	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d047      	beq.n	8004e20 <_Z14ESCCalibrationv+0x1b8>
    {
      if (SBUSNewPackage == true) SBUS_postProcessing();                                                                  //process new packets
 8004d90:	4b28      	ldr	r3, [pc, #160]	; (8004e34 <_Z14ESCCalibrationv+0x1cc>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <_Z14ESCCalibrationv+0x134>
 8004d98:	f7ff f9b4 	bl	8004104 <_Z19SBUS_postProcessingv>
      TIM4->CCR1 = (uint16_t)(fastPPM_CenterTime + (SBUS_Channels[2] * PPMmainMotorScaler));                              //update motor speed
 8004d9c:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <_Z14ESCCalibrationv+0x1d0>)
 8004d9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fb ffd6 	bl	8000d54 <__aeabi_i2f>
 8004da8:	4603      	mov	r3, r0
 8004daa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fc f824 	bl	8000dfc <__aeabi_fmul>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4921      	ldr	r1, [pc, #132]	; (8004e3c <_Z14ESCCalibrationv+0x1d4>)
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fb ff17 	bl	8000bec <__addsf3>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fc fa1d 	bl	8001200 <__aeabi_f2uiz>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	4b1f      	ldr	r3, [pc, #124]	; (8004e48 <_Z14ESCCalibrationv+0x1e0>)
 8004dcc:	635a      	str	r2, [r3, #52]	; 0x34
      while ((TIM11->CNT - oldTime) < 10000);                                                                             //wait for 10 milliseconds to pass
 8004dce:	4b18      	ldr	r3, [pc, #96]	; (8004e30 <_Z14ESCCalibrationv+0x1c8>)
 8004dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dd2:	88bb      	ldrh	r3, [r7, #4]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	f242 720f 	movw	r2, #9999	; 0x270f
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	bf94      	ite	ls
 8004dde:	2301      	movls	r3, #1
 8004de0:	2300      	movhi	r3, #0
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d000      	beq.n	8004dea <_Z14ESCCalibrationv+0x182>
 8004de8:	e7f1      	b.n	8004dce <_Z14ESCCalibrationv+0x166>
      oldTime = TIM11->CNT;
 8004dea:	4b11      	ldr	r3, [pc, #68]	; (8004e30 <_Z14ESCCalibrationv+0x1c8>)
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	80bb      	strh	r3, [r7, #4]
      counter += 10;
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	330a      	adds	r3, #10
 8004df4:	80fb      	strh	r3, [r7, #6]
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 8004df6:	e7b0      	b.n	8004d5a <_Z14ESCCalibrationv+0xf2>
    }
  }
  else
  {
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);                                                                             //start PPM for tail motor
 8004df8:	2100      	movs	r1, #0
 8004dfa:	480c      	ldr	r0, [pc, #48]	; (8004e2c <_Z14ESCCalibrationv+0x1c4>)
 8004dfc:	f004 fc0e 	bl	800961c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);                                                                             //start PPM for main motor
 8004e00:	2100      	movs	r1, #0
 8004e02:	4810      	ldr	r0, [pc, #64]	; (8004e44 <_Z14ESCCalibrationv+0x1dc>)
 8004e04:	f004 fc0a 	bl	800961c <HAL_TIM_PWM_Start>

    TIM3->CCR1 = slowPPM1_MinTime;                                                                                        //set to 0%
 8004e08:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <_Z14ESCCalibrationv+0x1d8>)
 8004e0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e0e:	635a      	str	r2, [r3, #52]	; 0x34
    TIM4->CCR1 = fastPPM_MinTime;                                                                                         //set to 0%
 8004e10:	4b0d      	ldr	r3, [pc, #52]	; (8004e48 <_Z14ESCCalibrationv+0x1e0>)
 8004e12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e16:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(ESC_StartupDelay);
 8004e18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e1c:	f000 fe8c 	bl	8005b38 <HAL_Delay>
  }
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40020000 	.word	0x40020000
 8004e2c:	200006ec 	.word	0x200006ec
 8004e30:	40014800 	.word	0x40014800
 8004e34:	20000648 	.word	0x20000648
 8004e38:	20000638 	.word	0x20000638
 8004e3c:	44bb8000 	.word	0x44bb8000
 8004e40:	40000400 	.word	0x40000400
 8004e44:	20000734 	.word	0x20000734
 8004e48:	40000800 	.word	0x40000800
 8004e4c:	00000000 	.word	0x00000000

08004e50 <_Z41__static_initialization_and_destruction_0ii>:
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d14a      	bne.n	8004ef6 <_Z41__static_initialization_and_destruction_0ii+0xa6>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d145      	bne.n	8004ef6 <_Z41__static_initialization_and_destruction_0ii+0xa6>
float sin_OffsetAngle = sin(((float)mainMotorAngleOffset * 180) / M_PI);
 8004e6a:	4b27      	ldr	r3, [pc, #156]	; (8004f08 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004e6c:	f993 3000 	ldrsb.w	r3, [r3]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fb ff6f 	bl	8000d54 <__aeabi_i2f>
 8004e76:	4603      	mov	r3, r0
 8004e78:	4924      	ldr	r1, [pc, #144]	; (8004f0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fb ffbe 	bl	8000dfc <__aeabi_fmul>
 8004e80:	4603      	mov	r3, r0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fb fb0c 	bl	80004a0 <__aeabi_f2d>
 8004e88:	a31d      	add	r3, pc, #116	; (adr r3, 8004f00 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8e:	f7fb fc89 	bl	80007a4 <__aeabi_ddiv>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4610      	mov	r0, r2
 8004e98:	4619      	mov	r1, r3
 8004e9a:	f008 fc75 	bl	800d788 <sin>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	f7fb fe4b 	bl	8000b40 <__aeabi_d2f>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	4a18      	ldr	r2, [pc, #96]	; (8004f10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8004eae:	6013      	str	r3, [r2, #0]
float cos_OffsetAngle = cos(((float)mainMotorAngleOffset * 180) / M_PI);
 8004eb0:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004eb2:	f993 3000 	ldrsb.w	r3, [r3]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fb ff4c 	bl	8000d54 <__aeabi_i2f>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	4913      	ldr	r1, [pc, #76]	; (8004f0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fb ff9b 	bl	8000dfc <__aeabi_fmul>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fb fae9 	bl	80004a0 <__aeabi_f2d>
 8004ece:	a30c      	add	r3, pc, #48	; (adr r3, 8004f00 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f7fb fc66 	bl	80007a4 <__aeabi_ddiv>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4610      	mov	r0, r2
 8004ede:	4619      	mov	r1, r3
 8004ee0:	f008 fc10 	bl	800d704 <cos>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4619      	mov	r1, r3
 8004eec:	f7fb fe28 	bl	8000b40 <__aeabi_d2f>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	4a08      	ldr	r2, [pc, #32]	; (8004f14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	54442d18 	.word	0x54442d18
 8004f04:	400921fb 	.word	0x400921fb
 8004f08:	200007c8 	.word	0x200007c8
 8004f0c:	43340000 	.word	0x43340000
 8004f10:	200007cc 	.word	0x200007cc
 8004f14:	200007d0 	.word	0x200007d0

08004f18 <_GLOBAL__sub_I_adcValueChannel11>:
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f20:	2001      	movs	r0, #1
 8004f22:	f7ff ff95 	bl	8004e50 <_Z41__static_initialization_and_destruction_0ii>
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <_Z4loopv>:
#include "PID.h"

uint8_t task;

void loop()
{
 8004f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2c:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 8004f30:	af24      	add	r7, sp, #144	; 0x90
  if (TIM4->CNT < fastPPM_MinTime)
 8004f32:	4b28      	ldr	r3, [pc, #160]	; (8004fd4 <_Z4loopv+0xac>)
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	bf94      	ite	ls
 8004f3e:	2301      	movls	r3, #1
 8004f40:	2300      	movhi	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 82e5 	beq.w	8005514 <_Z4loopv+0x5ec>
  {
    switch (task)                       //disable the SBUS pin interrupt for the selected tasks
 8004f4a:	4b23      	ldr	r3, [pc, #140]	; (8004fd8 <_Z4loopv+0xb0>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b06      	cmp	r3, #6
 8004f50:	d00e      	beq.n	8004f70 <_Z4loopv+0x48>
 8004f52:	2b06      	cmp	r3, #6
 8004f54:	dc10      	bgt.n	8004f78 <_Z4loopv+0x50>
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d002      	beq.n	8004f60 <_Z4loopv+0x38>
 8004f5a:	2b05      	cmp	r3, #5
 8004f5c:	d004      	beq.n	8004f68 <_Z4loopv+0x40>
      break;
    case 6:
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
      break;
    default:
      break;
 8004f5e:	e00b      	b.n	8004f78 <_Z4loopv+0x50>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8004f60:	2006      	movs	r0, #6
 8004f62:	f001 fa4c 	bl	80063fe <HAL_NVIC_DisableIRQ>
      break;
 8004f66:	e008      	b.n	8004f7a <_Z4loopv+0x52>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8004f68:	2006      	movs	r0, #6
 8004f6a:	f001 fa48 	bl	80063fe <HAL_NVIC_DisableIRQ>
      break;
 8004f6e:	e004      	b.n	8004f7a <_Z4loopv+0x52>
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8004f70:	2006      	movs	r0, #6
 8004f72:	f001 fa44 	bl	80063fe <HAL_NVIC_DisableIRQ>
      break;
 8004f76:	e000      	b.n	8004f7a <_Z4loopv+0x52>
      break;
 8004f78:	bf00      	nop
    }

    updateMainMotorSpeed();     //NOTDONE check is PPM value can be changed mid cycle or if it waits for the next one on oscilloscope
 8004f7a:	f7ff fcc5 	bl	8004908 <_Z20updateMainMotorSpeedv>

    switch (task)                       //execute the selected task
 8004f7e:	4b16      	ldr	r3, [pc, #88]	; (8004fd8 <_Z4loopv+0xb0>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	2b09      	cmp	r3, #9
 8004f86:	f200 82ad 	bhi.w	80054e4 <_Z4loopv+0x5bc>
 8004f8a:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <_Z4loopv+0x68>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	08004fb9 	.word	0x08004fb9
 8004f94:	08004fc5 	.word	0x08004fc5
 8004f98:	08004fe1 	.word	0x08004fe1
 8004f9c:	08005497 	.word	0x08005497
 8004fa0:	080054a1 	.word	0x080054a1
 8004fa4:	080054ad 	.word	0x080054ad
 8004fa8:	080054c1 	.word	0x080054c1
 8004fac:	080054e5 	.word	0x080054e5
 8004fb0:	080054e5 	.word	0x080054e5
 8004fb4:	080054dd 	.word	0x080054dd
    {
    case 1:   //get quaternions
      MPU6050_resetFIFO();
 8004fb8:	f7fc fdb2 	bl	8001b20 <_Z17MPU6050_resetFIFOv>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004fbc:	2006      	movs	r0, #6
 8004fbe:	f001 fa10 	bl	80063e2 <HAL_NVIC_EnableIRQ>
      break;
 8004fc2:	e296      	b.n	80054f2 <_Z4loopv+0x5ca>
    case 2:
      if (SBUSNewPackage == true) SBUS_postProcessing();
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <_Z4loopv+0xb4>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	f040 828d 	bne.w	80054e8 <_Z4loopv+0x5c0>
 8004fce:	f7ff f899 	bl	8004104 <_Z19SBUS_postProcessingv>
      break;
 8004fd2:	e289      	b.n	80054e8 <_Z4loopv+0x5c0>
 8004fd4:	40000800 	.word	0x40000800
 8004fd8:	200007d4 	.word	0x200007d4
 8004fdc:	20000648 	.word	0x20000648
    case 3:
       for (size_t i = 0; i < 1; i++)
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8004fe6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f040 827e 	bne.w	80054ec <_Z4loopv+0x5c4>
	       for (size_t i = 0; i < x; i++)
	       {
	       	msgTransmit[i] = msg[i];
	       }
	       CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
       }
 8004ff0:	466b      	mov	r3, sp
 8004ff2:	607b      	str	r3, [r7, #4]
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 8004ff4:	4bb6      	ldr	r3, [pc, #728]	; (80052d0 <_Z4loopv+0x3a8>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fb fa51 	bl	80004a0 <__aeabi_f2d>
 8004ffe:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
 8005002:	4bb4      	ldr	r3, [pc, #720]	; (80052d4 <_Z4loopv+0x3ac>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f7fb fa4a 	bl	80004a0 <__aeabi_f2d>
 800500c:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
 8005010:	4bb1      	ldr	r3, [pc, #708]	; (80052d8 <_Z4loopv+0x3b0>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4618      	mov	r0, r3
 8005016:	f7fb fa43 	bl	80004a0 <__aeabi_f2d>
 800501a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
 800501e:	4baf      	ldr	r3, [pc, #700]	; (80052dc <_Z4loopv+0x3b4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4618      	mov	r0, r3
 8005024:	f7fb fa3c 	bl	80004a0 <__aeabi_f2d>
 8005028:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 800502c:	4bac      	ldr	r3, [pc, #688]	; (80052e0 <_Z4loopv+0x3b8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	f7fb fa35 	bl	80004a0 <__aeabi_f2d>
 8005036:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 800503a:	4baa      	ldr	r3, [pc, #680]	; (80052e4 <_Z4loopv+0x3bc>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f7fb fa2e 	bl	80004a0 <__aeabi_f2d>
 8005044:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
         , Pitch_PID_k[0] * 100                                                                                                                                                                     \
 8005048:	4ba7      	ldr	r3, [pc, #668]	; (80052e8 <_Z4loopv+0x3c0>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	49a7      	ldr	r1, [pc, #668]	; (80052ec <_Z4loopv+0x3c4>)
 800504e:	4618      	mov	r0, r3
 8005050:	f7fb fed4 	bl	8000dfc <__aeabi_fmul>
 8005054:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 8005056:	4618      	mov	r0, r3
 8005058:	f7fb fa22 	bl	80004a0 <__aeabi_f2d>
 800505c:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
         , Pitch_PID_k[1] * 100                                                                                                                                                                     \
 8005060:	4ba1      	ldr	r3, [pc, #644]	; (80052e8 <_Z4loopv+0x3c0>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	49a1      	ldr	r1, [pc, #644]	; (80052ec <_Z4loopv+0x3c4>)
 8005066:	4618      	mov	r0, r3
 8005068:	f7fb fec8 	bl	8000dfc <__aeabi_fmul>
 800506c:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 800506e:	4618      	mov	r0, r3
 8005070:	f7fb fa16 	bl	80004a0 <__aeabi_f2d>
 8005074:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
         , Pitch_PID_k[2] * 100                                                                                                                                                                     \
 8005078:	4b9b      	ldr	r3, [pc, #620]	; (80052e8 <_Z4loopv+0x3c0>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	499b      	ldr	r1, [pc, #620]	; (80052ec <_Z4loopv+0x3c4>)
 800507e:	4618      	mov	r0, r3
 8005080:	f7fb febc 	bl	8000dfc <__aeabi_fmul>
 8005084:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 8005086:	4618      	mov	r0, r3
 8005088:	f7fb fa0a 	bl	80004a0 <__aeabi_f2d>
 800508c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
         , Roll_PID_k[0] * 100                                                                                                                                                                      \
 8005090:	4b97      	ldr	r3, [pc, #604]	; (80052f0 <_Z4loopv+0x3c8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4995      	ldr	r1, [pc, #596]	; (80052ec <_Z4loopv+0x3c4>)
 8005096:	4618      	mov	r0, r3
 8005098:	f7fb feb0 	bl	8000dfc <__aeabi_fmul>
 800509c:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fb f9fe 	bl	80004a0 <__aeabi_f2d>
 80050a4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
         , Roll_PID_k[1] * 100                                                                                                                                                                      \
 80050a8:	4b91      	ldr	r3, [pc, #580]	; (80052f0 <_Z4loopv+0x3c8>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	498f      	ldr	r1, [pc, #572]	; (80052ec <_Z4loopv+0x3c4>)
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fb fea4 	bl	8000dfc <__aeabi_fmul>
 80050b4:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fb f9f2 	bl	80004a0 <__aeabi_f2d>
 80050bc:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
         , Roll_PID_k[2] * 100                                                                                                                                                                      \
 80050c0:	4b8b      	ldr	r3, [pc, #556]	; (80052f0 <_Z4loopv+0x3c8>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	4989      	ldr	r1, [pc, #548]	; (80052ec <_Z4loopv+0x3c4>)
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fb fe98 	bl	8000dfc <__aeabi_fmul>
 80050cc:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fb f9e6 	bl	80004a0 <__aeabi_f2d>
 80050d4:	e9c7 0108 	strd	r0, r1, [r7, #32]
         , Yaw_PID_k[0] * 100                                                                                                                                                                       \
 80050d8:	4b86      	ldr	r3, [pc, #536]	; (80052f4 <_Z4loopv+0x3cc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4983      	ldr	r1, [pc, #524]	; (80052ec <_Z4loopv+0x3c4>)
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fb fe8c 	bl	8000dfc <__aeabi_fmul>
 80050e4:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fb f9da 	bl	80004a0 <__aeabi_f2d>
 80050ec:	e9c7 0106 	strd	r0, r1, [r7, #24]
         , Yaw_PID_k[1] * 100                                                                                                                                                                       \
 80050f0:	4b80      	ldr	r3, [pc, #512]	; (80052f4 <_Z4loopv+0x3cc>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	497d      	ldr	r1, [pc, #500]	; (80052ec <_Z4loopv+0x3c4>)
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fb fe80 	bl	8000dfc <__aeabi_fmul>
 80050fc:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fb f9ce 	bl	80004a0 <__aeabi_f2d>
 8005104:	e9c7 0104 	strd	r0, r1, [r7, #16]
         , Yaw_PID_k[2] * 100                                                                                                                                                                       \
 8005108:	4b7a      	ldr	r3, [pc, #488]	; (80052f4 <_Z4loopv+0x3cc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	4977      	ldr	r1, [pc, #476]	; (80052ec <_Z4loopv+0x3c4>)
 800510e:	4618      	mov	r0, r3
 8005110:	f7fb fe74 	bl	8000dfc <__aeabi_fmul>
 8005114:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 8005116:	4618      	mov	r0, r3
 8005118:	f7fb f9c2 	bl	80004a0 <__aeabi_f2d>
 800511c:	e9c7 0102 	strd	r0, r1, [r7, #8]
         , ((((((float)adcValueChannel12 - hall2_center) * hall2_scaler) * cos_OffsetAngle) - ((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * sin_OffsetAngle)) * (PID_Pitch_y * 1))  \
 8005120:	4b75      	ldr	r3, [pc, #468]	; (80052f8 <_Z4loopv+0x3d0>)
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	4618      	mov	r0, r3
 8005126:	f7fb fe11 	bl	8000d4c <__aeabi_ui2f>
 800512a:	4603      	mov	r3, r0
 800512c:	4618      	mov	r0, r3
 800512e:	f7fb f9b7 	bl	80004a0 <__aeabi_f2d>
 8005132:	a361      	add	r3, pc, #388	; (adr r3, 80052b8 <_Z4loopv+0x390>)
 8005134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005138:	f7fb f852 	bl	80001e0 <__aeabi_dsub>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4610      	mov	r0, r2
 8005142:	4619      	mov	r1, r3
 8005144:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8005148:	4b6c      	ldr	r3, [pc, #432]	; (80052fc <_Z4loopv+0x3d4>)
 800514a:	f7fb fa01 	bl	8000550 <__aeabi_dmul>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	4614      	mov	r4, r2
 8005154:	461d      	mov	r5, r3
 8005156:	4b6a      	ldr	r3, [pc, #424]	; (8005300 <_Z4loopv+0x3d8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f7fb f9a0 	bl	80004a0 <__aeabi_f2d>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4620      	mov	r0, r4
 8005166:	4629      	mov	r1, r5
 8005168:	f7fb f9f2 	bl	8000550 <__aeabi_dmul>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4690      	mov	r8, r2
 8005172:	4699      	mov	r9, r3
 8005174:	4b63      	ldr	r3, [pc, #396]	; (8005304 <_Z4loopv+0x3dc>)
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	4618      	mov	r0, r3
 800517a:	f7fb fde7 	bl	8000d4c <__aeabi_ui2f>
 800517e:	4603      	mov	r3, r0
 8005180:	4618      	mov	r0, r3
 8005182:	f7fb f98d 	bl	80004a0 <__aeabi_f2d>
 8005186:	a34e      	add	r3, pc, #312	; (adr r3, 80052c0 <_Z4loopv+0x398>)
 8005188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518c:	f7fb f828 	bl	80001e0 <__aeabi_dsub>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4610      	mov	r0, r2
 8005196:	4619      	mov	r1, r3
 8005198:	a34b      	add	r3, pc, #300	; (adr r3, 80052c8 <_Z4loopv+0x3a0>)
 800519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519e:	f7fb f9d7 	bl	8000550 <__aeabi_dmul>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4614      	mov	r4, r2
 80051a8:	461d      	mov	r5, r3
 80051aa:	4b57      	ldr	r3, [pc, #348]	; (8005308 <_Z4loopv+0x3e0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fb f976 	bl	80004a0 <__aeabi_f2d>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4620      	mov	r0, r4
 80051ba:	4629      	mov	r1, r5
 80051bc:	f7fb f9c8 	bl	8000550 <__aeabi_dmul>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4640      	mov	r0, r8
 80051c6:	4649      	mov	r1, r9
 80051c8:	f7fb f80a 	bl	80001e0 <__aeabi_dsub>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4614      	mov	r4, r2
 80051d2:	461d      	mov	r5, r3
 80051d4:	4b41      	ldr	r3, [pc, #260]	; (80052dc <_Z4loopv+0x3b4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fb f961 	bl	80004a0 <__aeabi_f2d>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 80051e2:	4620      	mov	r0, r4
 80051e4:	4629      	mov	r1, r5
 80051e6:	f7fb f9b3 	bl	8000550 <__aeabi_dmul>
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	4692      	mov	sl, r2
 80051f0:	469b      	mov	fp, r3
         , ((((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * cos_OffsetAngle) + ((((float)adcValueChannel12 - hall2_center) * hall2_scaler) * sin_OffsetAngle)) * (PID_Roll_y  * 1))  \
 80051f2:	4b44      	ldr	r3, [pc, #272]	; (8005304 <_Z4loopv+0x3dc>)
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fb fda8 	bl	8000d4c <__aeabi_ui2f>
 80051fc:	4603      	mov	r3, r0
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fb f94e 	bl	80004a0 <__aeabi_f2d>
 8005204:	a32e      	add	r3, pc, #184	; (adr r3, 80052c0 <_Z4loopv+0x398>)
 8005206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520a:	f7fa ffe9 	bl	80001e0 <__aeabi_dsub>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4610      	mov	r0, r2
 8005214:	4619      	mov	r1, r3
 8005216:	a32c      	add	r3, pc, #176	; (adr r3, 80052c8 <_Z4loopv+0x3a0>)
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	f7fb f998 	bl	8000550 <__aeabi_dmul>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4614      	mov	r4, r2
 8005226:	461d      	mov	r5, r3
 8005228:	4b35      	ldr	r3, [pc, #212]	; (8005300 <_Z4loopv+0x3d8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f7fb f937 	bl	80004a0 <__aeabi_f2d>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	4620      	mov	r0, r4
 8005238:	4629      	mov	r1, r5
 800523a:	f7fb f989 	bl	8000550 <__aeabi_dmul>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4690      	mov	r8, r2
 8005244:	4699      	mov	r9, r3
 8005246:	4b2c      	ldr	r3, [pc, #176]	; (80052f8 <_Z4loopv+0x3d0>)
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f7fb fd7e 	bl	8000d4c <__aeabi_ui2f>
 8005250:	4603      	mov	r3, r0
 8005252:	4618      	mov	r0, r3
 8005254:	f7fb f924 	bl	80004a0 <__aeabi_f2d>
 8005258:	a317      	add	r3, pc, #92	; (adr r3, 80052b8 <_Z4loopv+0x390>)
 800525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525e:	f7fa ffbf 	bl	80001e0 <__aeabi_dsub>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4610      	mov	r0, r2
 8005268:	4619      	mov	r1, r3
 800526a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800526e:	4b23      	ldr	r3, [pc, #140]	; (80052fc <_Z4loopv+0x3d4>)
 8005270:	f7fb f96e 	bl	8000550 <__aeabi_dmul>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4614      	mov	r4, r2
 800527a:	461d      	mov	r5, r3
 800527c:	4b22      	ldr	r3, [pc, #136]	; (8005308 <_Z4loopv+0x3e0>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f7fb f90d 	bl	80004a0 <__aeabi_f2d>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4620      	mov	r0, r4
 800528c:	4629      	mov	r1, r5
 800528e:	f7fb f95f 	bl	8000550 <__aeabi_dmul>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4640      	mov	r0, r8
 8005298:	4649      	mov	r1, r9
 800529a:	f7fa ffa3 	bl	80001e4 <__adddf3>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4614      	mov	r4, r2
 80052a4:	461d      	mov	r5, r3
 80052a6:	4b0e      	ldr	r3, [pc, #56]	; (80052e0 <_Z4loopv+0x3b8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fb f8f8 	bl	80004a0 <__aeabi_f2d>
 80052b0:	e02c      	b.n	800530c <_Z4loopv+0x3e4>
 80052b2:	bf00      	nop
 80052b4:	f3af 8000 	nop.w
 80052b8:	00000000 	.word	0x00000000
 80052bc:	4093b000 	.word	0x4093b000
 80052c0:	00000000 	.word	0x00000000
 80052c4:	4093c400 	.word	0x4093c400
 80052c8:	6d92aca5 	.word	0x6d92aca5
 80052cc:	3f4fa8ef 	.word	0x3f4fa8ef
 80052d0:	20000534 	.word	0x20000534
 80052d4:	20000538 	.word	0x20000538
 80052d8:	2000053c 	.word	0x2000053c
 80052dc:	20000540 	.word	0x20000540
 80052e0:	20000544 	.word	0x20000544
 80052e4:	20000548 	.word	0x20000548
 80052e8:	2000054c 	.word	0x2000054c
 80052ec:	42c80000 	.word	0x42c80000
 80052f0:	20000558 	.word	0x20000558
 80052f4:	20000564 	.word	0x20000564
 80052f8:	200007c6 	.word	0x200007c6
 80052fc:	3f501010 	.word	0x3f501010
 8005300:	200007d0 	.word	0x200007d0
 8005304:	200007c4 	.word	0x200007c4
 8005308:	200007cc 	.word	0x200007cc
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 8005310:	4620      	mov	r0, r4
 8005312:	4629      	mov	r1, r5
 8005314:	f7fb f91c 	bl	8000550 <__aeabi_dmul>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4614      	mov	r4, r2
 800531e:	461d      	mov	r5, r3
         , (float)SBUS_Channels[5]                                                                                                                                                                  \
 8005320:	4b7f      	ldr	r3, [pc, #508]	; (8005520 <_Z4loopv+0x5f8>)
 8005322:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005326:	4618      	mov	r0, r3
 8005328:	f7fb fd14 	bl	8000d54 <__aeabi_i2f>
 800532c:	4603      	mov	r3, r0
	       sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %hd \r\n"                                                                                                        \
 800532e:	4618      	mov	r0, r3
 8005330:	f7fb f8b6 	bl	80004a0 <__aeabi_f2d>
 8005334:	4b7b      	ldr	r3, [pc, #492]	; (8005524 <_Z4loopv+0x5fc>)
 8005336:	f993 3000 	ldrsb.w	r3, [r3]
 800533a:	f107 0680 	add.w	r6, r7, #128	; 0x80
 800533e:	9322      	str	r3, [sp, #136]	; 0x88
 8005340:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 8005344:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8005348:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
 800534c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005350:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
 8005354:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005358:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
 800535c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005360:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 8005364:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005368:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 800536c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005370:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 8005374:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005378:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800537c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8005380:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 8005384:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005388:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800538c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005390:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005394:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8005398:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800539c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80053a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80053a4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80053a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80053ac:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80053b0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80053b4:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80053b8:	e9cd 3400 	strd	r3, r4, [sp]
 80053bc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80053c0:	4959      	ldr	r1, [pc, #356]	; (8005528 <_Z4loopv+0x600>)
 80053c2:	4630      	mov	r0, r6
 80053c4:	f00b f842 	bl	801044c <siprintf>
	       uint8_t x = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb
	       while (msg[x] != NULL)
 80053ce:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 80053d2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80053d6:	5cd3      	ldrb	r3, [r2, r3]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <_Z4loopv+0x4c0>
	       	x++;
 80053dc:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 80053e0:	3301      	adds	r3, #1
 80053e2:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb
	       while (msg[x] != NULL)
 80053e6:	e7f2      	b.n	80053ce <_Z4loopv+0x4a6>
	       unsigned char msgTransmit[x];
 80053e8:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 80053ec:	1e5c      	subs	r4, r3, #1
 80053ee:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 80053f2:	4623      	mov	r3, r4
 80053f4:	3301      	adds	r3, #1
 80053f6:	4618      	mov	r0, r3
 80053f8:	f04f 0100 	mov.w	r1, #0
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	00cb      	lsls	r3, r1, #3
 8005406:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800540a:	00c2      	lsls	r2, r0, #3
 800540c:	4623      	mov	r3, r4
 800540e:	3301      	adds	r3, #1
 8005410:	4618      	mov	r0, r3
 8005412:	f04f 0100 	mov.w	r1, #0
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	00cb      	lsls	r3, r1, #3
 8005420:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005424:	00c2      	lsls	r2, r0, #3
 8005426:	4623      	mov	r3, r4
 8005428:	3301      	adds	r3, #1
 800542a:	3307      	adds	r3, #7
 800542c:	08db      	lsrs	r3, r3, #3
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	ebad 0d03 	sub.w	sp, sp, r3
 8005434:	ab24      	add	r3, sp, #144	; 0x90
 8005436:	3300      	adds	r3, #0
 8005438:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	       for (size_t i = 0; i < x; i++)
 800543c:	2300      	movs	r3, #0
 800543e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005442:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 8005446:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800544a:	429a      	cmp	r2, r3
 800544c:	d212      	bcs.n	8005474 <_Z4loopv+0x54c>
	       	msgTransmit[i] = msg[i];
 800544e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8005452:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8005456:	4413      	add	r3, r2
 8005458:	7819      	ldrb	r1, [r3, #0]
 800545a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800545e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8005462:	4413      	add	r3, r2
 8005464:	460a      	mov	r2, r1
 8005466:	701a      	strb	r2, [r3, #0]
	       for (size_t i = 0; i < x; i++)
 8005468:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800546c:	3301      	adds	r3, #1
 800546e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005472:	e7e6      	b.n	8005442 <_Z4loopv+0x51a>
	       CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 8005474:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8005478:	b2a3      	uxth	r3, r4
 800547a:	3301      	adds	r3, #1
 800547c:	b29b      	uxth	r3, r3
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f007 fd0d 	bl	800cea0 <CDC_Transmit_FS>
 8005486:	f8d7 d004 	ldr.w	sp, [r7, #4]
       for (size_t i = 0; i < 1; i++)
 800548a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800548e:	3301      	adds	r3, #1
 8005490:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8005494:	e5a7      	b.n	8004fe6 <_Z4loopv+0xbe>
      break;
    case 4:
      get_XW_diffAngles();
 8005496:	f7fe f863 	bl	8003560 <_Z17get_XW_diffAnglesv>
      update_FrameOriginQuaternion();
 800549a:	f7fc fc37 	bl	8001d0c <_Z28update_FrameOriginQuaternionv>
      break;
 800549e:	e028      	b.n	80054f2 <_Z4loopv+0x5ca>
    case 5:
      MPU6050_WaitForQuaternionSet();
 80054a0:	f7fc fb54 	bl	8001b4c <_Z28MPU6050_WaitForQuaternionSetv>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80054a4:	2006      	movs	r0, #6
 80054a6:	f000 ff9c 	bl	80063e2 <HAL_NVIC_EnableIRQ>
      break;
 80054aa:	e022      	b.n	80054f2 <_Z4loopv+0x5ca>
    case 6:
      MPU6050_ConvertToQuaternions();
 80054ac:	f7fc fb86 	bl	8001bbc <_Z28MPU6050_ConvertToQuaternionsv>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80054b0:	2006      	movs	r0, #6
 80054b2:	f000 ff96 	bl	80063e2 <HAL_NVIC_EnableIRQ>
      update_PID();
 80054b6:	f7fe f92f 	bl	8003718 <_Z10update_PIDv>
      updateTailMotorSpeed();
 80054ba:	f7ff fb8d 	bl	8004bd8 <_Z20updateTailMotorSpeedv>
      break;
 80054be:	e018      	b.n	80054f2 <_Z4loopv+0x5ca>
    case 7:
      switchTuningMode();
 80054c0:	f7fe fd4c 	bl	8003f5c <_Z16switchTuningModev>
      if (SBUS_Channels[4] >= 990)  //if the set-PID-switch on the remote is on read the values
 80054c4:	4b16      	ldr	r3, [pc, #88]	; (8005520 <_Z4loopv+0x5f8>)
 80054c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80054ca:	f240 32dd 	movw	r2, #989	; 0x3dd
 80054ce:	4293      	cmp	r3, r2
 80054d0:	dd0e      	ble.n	80054f0 <_Z4loopv+0x5c8>
      {
        getPIDValues();
 80054d2:	f7fe fae5 	bl	8003aa0 <_Z12getPIDValuesv>
        getAngleOffset();
 80054d6:	f7fe fccb 	bl	8003e70 <_Z14getAngleOffsetv>
      }
      break;
 80054da:	e009      	b.n	80054f0 <_Z4loopv+0x5c8>
    case 10:
      task = 0;                 //reset to task 1  (keep in mind task ++; below)
 80054dc:	4b13      	ldr	r3, [pc, #76]	; (800552c <_Z4loopv+0x604>)
 80054de:	2200      	movs	r2, #0
 80054e0:	701a      	strb	r2, [r3, #0]
      break;
 80054e2:	e006      	b.n	80054f2 <_Z4loopv+0x5ca>
    default:
      break;
 80054e4:	bf00      	nop
 80054e6:	e004      	b.n	80054f2 <_Z4loopv+0x5ca>
      break;
 80054e8:	bf00      	nop
 80054ea:	e002      	b.n	80054f2 <_Z4loopv+0x5ca>
      break;
 80054ec:	bf00      	nop
 80054ee:	e000      	b.n	80054f2 <_Z4loopv+0x5ca>
      break;
 80054f0:	bf00      	nop
    }
    task ++;
 80054f2:	4b0e      	ldr	r3, [pc, #56]	; (800552c <_Z4loopv+0x604>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	3301      	adds	r3, #1
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	4b0c      	ldr	r3, [pc, #48]	; (800552c <_Z4loopv+0x604>)
 80054fc:	701a      	strb	r2, [r3, #0]

    while (TIM4->CNT <= fastPPM_MinTime);     //wait until fastPPM_MinTime has passed
 80054fe:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <_Z4loopv+0x608>)
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005506:	bf94      	ite	ls
 8005508:	2301      	movls	r3, #1
 800550a:	2300      	movhi	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d000      	beq.n	8005514 <_Z4loopv+0x5ec>
 8005512:	e7f4      	b.n	80054fe <_Z4loopv+0x5d6>
  }
 8005514:	bf00      	nop
 8005516:	f507 77e2 	add.w	r7, r7, #452	; 0x1c4
 800551a:	46bd      	mov	sp, r7
 800551c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005520:	20000638 	.word	0x20000638
 8005524:	200007c8 	.word	0x200007c8
 8005528:	08012768 	.word	0x08012768
 800552c:	200007d4 	.word	0x200007d4
 8005530:	40000800 	.word	0x40000800

08005534 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800553a:	2300      	movs	r3, #0
 800553c:	607b      	str	r3, [r7, #4]
 800553e:	4b0f      	ldr	r3, [pc, #60]	; (800557c <HAL_MspInit+0x48>)
 8005540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005542:	4a0e      	ldr	r2, [pc, #56]	; (800557c <HAL_MspInit+0x48>)
 8005544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005548:	6453      	str	r3, [r2, #68]	; 0x44
 800554a:	4b0c      	ldr	r3, [pc, #48]	; (800557c <HAL_MspInit+0x48>)
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005552:	607b      	str	r3, [r7, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005556:	2300      	movs	r3, #0
 8005558:	603b      	str	r3, [r7, #0]
 800555a:	4b08      	ldr	r3, [pc, #32]	; (800557c <HAL_MspInit+0x48>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	4a07      	ldr	r2, [pc, #28]	; (800557c <HAL_MspInit+0x48>)
 8005560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005564:	6413      	str	r3, [r2, #64]	; 0x40
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <HAL_MspInit+0x48>)
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr
 800557c:	40023800 	.word	0x40023800

08005580 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	; 0x28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005588:	f107 0314 	add.w	r3, r7, #20
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	605a      	str	r2, [r3, #4]
 8005592:	609a      	str	r2, [r3, #8]
 8005594:	60da      	str	r2, [r3, #12]
 8005596:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a17      	ldr	r2, [pc, #92]	; (80055fc <HAL_ADC_MspInit+0x7c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d127      	bne.n	80055f2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80055a2:	2300      	movs	r3, #0
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	4b16      	ldr	r3, [pc, #88]	; (8005600 <HAL_ADC_MspInit+0x80>)
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	4a15      	ldr	r2, [pc, #84]	; (8005600 <HAL_ADC_MspInit+0x80>)
 80055ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b0:	6453      	str	r3, [r2, #68]	; 0x44
 80055b2:	4b13      	ldr	r3, [pc, #76]	; (8005600 <HAL_ADC_MspInit+0x80>)
 80055b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <HAL_ADC_MspInit+0x80>)
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	4a0e      	ldr	r2, [pc, #56]	; (8005600 <HAL_ADC_MspInit+0x80>)
 80055c8:	f043 0304 	orr.w	r3, r3, #4
 80055cc:	6313      	str	r3, [r2, #48]	; 0x30
 80055ce:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <HAL_ADC_MspInit+0x80>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ONBOARD_ADC_2_Pin|ONBOARD_ADC_1_Pin;
 80055da:	2306      	movs	r3, #6
 80055dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055de:	2303      	movs	r3, #3
 80055e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055e6:	f107 0314 	add.w	r3, r7, #20
 80055ea:	4619      	mov	r1, r3
 80055ec:	4805      	ldr	r0, [pc, #20]	; (8005604 <HAL_ADC_MspInit+0x84>)
 80055ee:	f000 ff21 	bl	8006434 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80055f2:	bf00      	nop
 80055f4:	3728      	adds	r7, #40	; 0x28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40012000 	.word	0x40012000
 8005600:	40023800 	.word	0x40023800
 8005604:	40020800 	.word	0x40020800

08005608 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	; 0x28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005610:	f107 0314 	add.w	r3, r7, #20
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	609a      	str	r2, [r3, #8]
 800561c:	60da      	str	r2, [r3, #12]
 800561e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a19      	ldr	r2, [pc, #100]	; (800568c <HAL_I2C_MspInit+0x84>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d12c      	bne.n	8005684 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800562a:	2300      	movs	r3, #0
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	4b18      	ldr	r3, [pc, #96]	; (8005690 <HAL_I2C_MspInit+0x88>)
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005632:	4a17      	ldr	r2, [pc, #92]	; (8005690 <HAL_I2C_MspInit+0x88>)
 8005634:	f043 0302 	orr.w	r3, r3, #2
 8005638:	6313      	str	r3, [r2, #48]	; 0x30
 800563a:	4b15      	ldr	r3, [pc, #84]	; (8005690 <HAL_I2C_MspInit+0x88>)
 800563c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	613b      	str	r3, [r7, #16]
 8005644:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005646:	f44f 7340 	mov.w	r3, #768	; 0x300
 800564a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800564c:	2312      	movs	r3, #18
 800564e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005650:	2300      	movs	r3, #0
 8005652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005654:	2303      	movs	r3, #3
 8005656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005658:	2304      	movs	r3, #4
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800565c:	f107 0314 	add.w	r3, r7, #20
 8005660:	4619      	mov	r1, r3
 8005662:	480c      	ldr	r0, [pc, #48]	; (8005694 <HAL_I2C_MspInit+0x8c>)
 8005664:	f000 fee6 	bl	8006434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	4b08      	ldr	r3, [pc, #32]	; (8005690 <HAL_I2C_MspInit+0x88>)
 800566e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005670:	4a07      	ldr	r2, [pc, #28]	; (8005690 <HAL_I2C_MspInit+0x88>)
 8005672:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005676:	6413      	str	r3, [r2, #64]	; 0x40
 8005678:	4b05      	ldr	r3, [pc, #20]	; (8005690 <HAL_I2C_MspInit+0x88>)
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005684:	bf00      	nop
 8005686:	3728      	adds	r7, #40	; 0x28
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40005400 	.word	0x40005400
 8005690:	40023800 	.word	0x40023800
 8005694:	40020400 	.word	0x40020400

08005698 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a14      	ldr	r2, [pc, #80]	; (80056f8 <HAL_TIM_PWM_MspInit+0x60>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d10e      	bne.n	80056c8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	4b13      	ldr	r3, [pc, #76]	; (80056fc <HAL_TIM_PWM_MspInit+0x64>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	4a12      	ldr	r2, [pc, #72]	; (80056fc <HAL_TIM_PWM_MspInit+0x64>)
 80056b4:	f043 0302 	orr.w	r3, r3, #2
 80056b8:	6413      	str	r3, [r2, #64]	; 0x40
 80056ba:	4b10      	ldr	r3, [pc, #64]	; (80056fc <HAL_TIM_PWM_MspInit+0x64>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80056c6:	e012      	b.n	80056ee <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a0c      	ldr	r2, [pc, #48]	; (8005700 <HAL_TIM_PWM_MspInit+0x68>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d10d      	bne.n	80056ee <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80056d2:	2300      	movs	r3, #0
 80056d4:	60bb      	str	r3, [r7, #8]
 80056d6:	4b09      	ldr	r3, [pc, #36]	; (80056fc <HAL_TIM_PWM_MspInit+0x64>)
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	4a08      	ldr	r2, [pc, #32]	; (80056fc <HAL_TIM_PWM_MspInit+0x64>)
 80056dc:	f043 0304 	orr.w	r3, r3, #4
 80056e0:	6413      	str	r3, [r2, #64]	; 0x40
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <HAL_TIM_PWM_MspInit+0x64>)
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	60bb      	str	r3, [r7, #8]
 80056ec:	68bb      	ldr	r3, [r7, #8]
}
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40023800 	.word	0x40023800
 8005700:	40000800 	.word	0x40000800

08005704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a0a      	ldr	r2, [pc, #40]	; (800573c <HAL_TIM_Base_MspInit+0x38>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d10d      	bne.n	8005732 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	4b09      	ldr	r3, [pc, #36]	; (8005740 <HAL_TIM_Base_MspInit+0x3c>)
 800571c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571e:	4a08      	ldr	r2, [pc, #32]	; (8005740 <HAL_TIM_Base_MspInit+0x3c>)
 8005720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005724:	6453      	str	r3, [r2, #68]	; 0x44
 8005726:	4b06      	ldr	r3, [pc, #24]	; (8005740 <HAL_TIM_Base_MspInit+0x3c>)
 8005728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	bc80      	pop	{r7}
 800573a:	4770      	bx	lr
 800573c:	40014800 	.word	0x40014800
 8005740:	40023800 	.word	0x40023800

08005744 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08a      	sub	sp, #40	; 0x28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800574c:	f107 0314 	add.w	r3, r7, #20
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	605a      	str	r2, [r3, #4]
 8005756:	609a      	str	r2, [r3, #8]
 8005758:	60da      	str	r2, [r3, #12]
 800575a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a24      	ldr	r2, [pc, #144]	; (80057f4 <HAL_TIM_MspPostInit+0xb0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d11e      	bne.n	80057a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005766:	2300      	movs	r3, #0
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	4b23      	ldr	r3, [pc, #140]	; (80057f8 <HAL_TIM_MspPostInit+0xb4>)
 800576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576e:	4a22      	ldr	r2, [pc, #136]	; (80057f8 <HAL_TIM_MspPostInit+0xb4>)
 8005770:	f043 0304 	orr.w	r3, r3, #4
 8005774:	6313      	str	r3, [r2, #48]	; 0x30
 8005776:	4b20      	ldr	r3, [pc, #128]	; (80057f8 <HAL_TIM_MspPostInit+0xb4>)
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	613b      	str	r3, [r7, #16]
 8005780:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ONBOARD_WRITE_4_Pin;
 8005782:	2340      	movs	r3, #64	; 0x40
 8005784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005786:	2302      	movs	r3, #2
 8005788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800578a:	2300      	movs	r3, #0
 800578c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800578e:	2300      	movs	r3, #0
 8005790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005792:	2302      	movs	r3, #2
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_4_GPIO_Port, &GPIO_InitStruct);
 8005796:	f107 0314 	add.w	r3, r7, #20
 800579a:	4619      	mov	r1, r3
 800579c:	4817      	ldr	r0, [pc, #92]	; (80057fc <HAL_TIM_MspPostInit+0xb8>)
 800579e:	f000 fe49 	bl	8006434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80057a2:	e022      	b.n	80057ea <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a15      	ldr	r2, [pc, #84]	; (8005800 <HAL_TIM_MspPostInit+0xbc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d11d      	bne.n	80057ea <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	4b11      	ldr	r3, [pc, #68]	; (80057f8 <HAL_TIM_MspPostInit+0xb4>)
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	4a10      	ldr	r2, [pc, #64]	; (80057f8 <HAL_TIM_MspPostInit+0xb4>)
 80057b8:	f043 0302 	orr.w	r3, r3, #2
 80057bc:	6313      	str	r3, [r2, #48]	; 0x30
 80057be:	4b0e      	ldr	r3, [pc, #56]	; (80057f8 <HAL_TIM_MspPostInit+0xb4>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ONBOARD_WRITE_1_Pin;
 80057ca:	2340      	movs	r3, #64	; 0x40
 80057cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ce:	2302      	movs	r3, #2
 80057d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057d6:	2300      	movs	r3, #0
 80057d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80057da:	2302      	movs	r3, #2
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_1_GPIO_Port, &GPIO_InitStruct);
 80057de:	f107 0314 	add.w	r3, r7, #20
 80057e2:	4619      	mov	r1, r3
 80057e4:	4807      	ldr	r0, [pc, #28]	; (8005804 <HAL_TIM_MspPostInit+0xc0>)
 80057e6:	f000 fe25 	bl	8006434 <HAL_GPIO_Init>
}
 80057ea:	bf00      	nop
 80057ec:	3728      	adds	r7, #40	; 0x28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40000400 	.word	0x40000400
 80057f8:	40023800 	.word	0x40023800
 80057fc:	40020800 	.word	0x40020800
 8005800:	40000800 	.word	0x40000800
 8005804:	40020400 	.word	0x40020400

08005808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800580c:	f003 fd78 	bl	8009300 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005810:	e7fe      	b.n	8005810 <NMI_Handler+0x8>

08005812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005812:	b480      	push	{r7}
 8005814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005816:	e7fe      	b.n	8005816 <HardFault_Handler+0x4>

08005818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800581c:	e7fe      	b.n	800581c <MemManage_Handler+0x4>

0800581e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800581e:	b480      	push	{r7}
 8005820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005822:	e7fe      	b.n	8005822 <BusFault_Handler+0x4>

08005824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005828:	e7fe      	b.n	8005828 <UsageFault_Handler+0x4>

0800582a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800582a:	b480      	push	{r7}
 800582c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800582e:	bf00      	nop
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr

08005836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005836:	b480      	push	{r7}
 8005838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800583a:	bf00      	nop
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr

08005842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005842:	b480      	push	{r7}
 8005844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005846:	bf00      	nop
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr

0800584e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005852:	f000 f955 	bl	8005b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005856:	bf00      	nop
 8005858:	bd80      	pop	{r7, pc}

0800585a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ONBOARD_READ_IT_3_Pin);
 800585e:	2001      	movs	r0, #1
 8005860:	f000 ffce 	bl	8006800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005864:	bf00      	nop
 8005866:	bd80      	pop	{r7, pc}

08005868 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800586c:	4802      	ldr	r0, [pc, #8]	; (8005878 <OTG_FS_IRQHandler+0x10>)
 800586e:	f002 f8dc 	bl	8007a2a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005872:	bf00      	nop
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20001cb0 	.word	0x20001cb0

0800587c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
	return 1;
 8005880:	2301      	movs	r3, #1
}
 8005882:	4618      	mov	r0, r3
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr

0800588a <_kill>:

int _kill(int pid, int sig)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005894:	f00a f86c 	bl	800f970 <__errno>
 8005898:	4603      	mov	r3, r0
 800589a:	2216      	movs	r2, #22
 800589c:	601a      	str	r2, [r3, #0]
	return -1;
 800589e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <_exit>:

void _exit (int status)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80058b2:	f04f 31ff 	mov.w	r1, #4294967295
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff ffe7 	bl	800588a <_kill>
	while (1) {}		/* Make sure we hang here */
 80058bc:	e7fe      	b.n	80058bc <_exit+0x12>

080058be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b086      	sub	sp, #24
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058ca:	2300      	movs	r3, #0
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	e00a      	b.n	80058e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80058d0:	f3af 8000 	nop.w
 80058d4:	4601      	mov	r1, r0
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	60ba      	str	r2, [r7, #8]
 80058dc:	b2ca      	uxtb	r2, r1
 80058de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	3301      	adds	r3, #1
 80058e4:	617b      	str	r3, [r7, #20]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	dbf0      	blt.n	80058d0 <_read+0x12>
	}

return len;
 80058ee:	687b      	ldr	r3, [r7, #4]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]
 8005908:	e009      	b.n	800591e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	60ba      	str	r2, [r7, #8]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	4618      	mov	r0, r3
 8005914:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	3301      	adds	r3, #1
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	429a      	cmp	r2, r3
 8005924:	dbf1      	blt.n	800590a <_write+0x12>
	}
	return len;
 8005926:	687b      	ldr	r3, [r7, #4]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <_close>:

int _close(int file)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
	return -1;
 8005938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr

08005946 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005956:	605a      	str	r2, [r3, #4]
	return 0;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr

08005964 <_isatty>:

int _isatty(int file)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
	return 1;
 800596c:	2301      	movs	r3, #1
}
 800596e:	4618      	mov	r0, r3
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr

08005978 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
	return 0;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005998:	4a14      	ldr	r2, [pc, #80]	; (80059ec <_sbrk+0x5c>)
 800599a:	4b15      	ldr	r3, [pc, #84]	; (80059f0 <_sbrk+0x60>)
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80059a4:	4b13      	ldr	r3, [pc, #76]	; (80059f4 <_sbrk+0x64>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d102      	bne.n	80059b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80059ac:	4b11      	ldr	r3, [pc, #68]	; (80059f4 <_sbrk+0x64>)
 80059ae:	4a12      	ldr	r2, [pc, #72]	; (80059f8 <_sbrk+0x68>)
 80059b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059b2:	4b10      	ldr	r3, [pc, #64]	; (80059f4 <_sbrk+0x64>)
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4413      	add	r3, r2
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d207      	bcs.n	80059d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80059c0:	f009 ffd6 	bl	800f970 <__errno>
 80059c4:	4603      	mov	r3, r0
 80059c6:	220c      	movs	r2, #12
 80059c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80059ca:	f04f 33ff 	mov.w	r3, #4294967295
 80059ce:	e009      	b.n	80059e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80059d0:	4b08      	ldr	r3, [pc, #32]	; (80059f4 <_sbrk+0x64>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80059d6:	4b07      	ldr	r3, [pc, #28]	; (80059f4 <_sbrk+0x64>)
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4413      	add	r3, r2
 80059de:	4a05      	ldr	r2, [pc, #20]	; (80059f4 <_sbrk+0x64>)
 80059e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80059e2:	68fb      	ldr	r3, [r7, #12]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	20020000 	.word	0x20020000
 80059f0:	00000400 	.word	0x00000400
 80059f4:	200007d8 	.word	0x200007d8
 80059f8:	200020c0 	.word	0x200020c0

080059fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a00:	bf00      	nop
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr

08005a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a0c:	480d      	ldr	r0, [pc, #52]	; (8005a44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005a0e:	490e      	ldr	r1, [pc, #56]	; (8005a48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005a10:	4a0e      	ldr	r2, [pc, #56]	; (8005a4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a14:	e002      	b.n	8005a1c <LoopCopyDataInit>

08005a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a1a:	3304      	adds	r3, #4

08005a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a20:	d3f9      	bcc.n	8005a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a22:	4a0b      	ldr	r2, [pc, #44]	; (8005a50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005a24:	4c0b      	ldr	r4, [pc, #44]	; (8005a54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a28:	e001      	b.n	8005a2e <LoopFillZerobss>

08005a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a2c:	3204      	adds	r2, #4

08005a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a30:	d3fb      	bcc.n	8005a2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005a32:	f7ff ffe3 	bl	80059fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a36:	f009 ffa1 	bl	800f97c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a3a:	f7fe fc81 	bl	8004340 <main>
  bx  lr    
 8005a3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005a40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a48:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 8005a4c:	08013a4c 	.word	0x08013a4c
  ldr r2, =_sbss
 8005a50:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 8005a54:	200020c0 	.word	0x200020c0

08005a58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a58:	e7fe      	b.n	8005a58 <ADC_IRQHandler>
	...

08005a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005a60:	4b0e      	ldr	r3, [pc, #56]	; (8005a9c <HAL_Init+0x40>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a0d      	ldr	r2, [pc, #52]	; (8005a9c <HAL_Init+0x40>)
 8005a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8005a6c:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <HAL_Init+0x40>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <HAL_Init+0x40>)
 8005a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a78:	4b08      	ldr	r3, [pc, #32]	; (8005a9c <HAL_Init+0x40>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a07      	ldr	r2, [pc, #28]	; (8005a9c <HAL_Init+0x40>)
 8005a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a84:	2003      	movs	r0, #3
 8005a86:	f000 fc85 	bl	8006394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a8a:	200f      	movs	r0, #15
 8005a8c:	f000 f808 	bl	8005aa0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005a90:	f7ff fd50 	bl	8005534 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40023c00 	.word	0x40023c00

08005aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005aa8:	4b12      	ldr	r3, [pc, #72]	; (8005af4 <HAL_InitTick+0x54>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	4b12      	ldr	r3, [pc, #72]	; (8005af8 <HAL_InitTick+0x58>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fcab 	bl	800641a <HAL_SYSTICK_Config>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e00e      	b.n	8005aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b0f      	cmp	r3, #15
 8005ad2:	d80a      	bhi.n	8005aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	6879      	ldr	r1, [r7, #4]
 8005ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8005adc:	f000 fc65 	bl	80063aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ae0:	4a06      	ldr	r2, [pc, #24]	; (8005afc <HAL_InitTick+0x5c>)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e000      	b.n	8005aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20000024 	.word	0x20000024
 8005af8:	2000002c 	.word	0x2000002c
 8005afc:	20000028 	.word	0x20000028

08005b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <HAL_IncTick+0x1c>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <HAL_IncTick+0x20>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4413      	add	r3, r2
 8005b10:	4a03      	ldr	r2, [pc, #12]	; (8005b20 <HAL_IncTick+0x20>)
 8005b12:	6013      	str	r3, [r2, #0]
}
 8005b14:	bf00      	nop
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr
 8005b1c:	2000002c 	.word	0x2000002c
 8005b20:	200007e8 	.word	0x200007e8

08005b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  return uwTick;
 8005b28:	4b02      	ldr	r3, [pc, #8]	; (8005b34 <HAL_GetTick+0x10>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr
 8005b34:	200007e8 	.word	0x200007e8

08005b38 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b40:	f7ff fff0 	bl	8005b24 <HAL_GetTick>
 8005b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d005      	beq.n	8005b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b52:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <HAL_Delay+0x44>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b5e:	bf00      	nop
 8005b60:	f7ff ffe0 	bl	8005b24 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d8f7      	bhi.n	8005b60 <HAL_Delay+0x28>
  {
  }
}
 8005b70:	bf00      	nop
 8005b72:	bf00      	nop
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	2000002c 	.word	0x2000002c

08005b80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e033      	b.n	8005bfe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d109      	bne.n	8005bb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7ff fcee 	bl	8005580 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f003 0310 	and.w	r3, r3, #16
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d118      	bne.n	8005bf0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005bc6:	f023 0302 	bic.w	r3, r3, #2
 8005bca:	f043 0202 	orr.w	r2, r3, #2
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f9e8 	bl	8005fa8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	f023 0303 	bic.w	r3, r3, #3
 8005be6:	f043 0201 	orr.w	r2, r3, #1
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40
 8005bee:	e001      	b.n	8005bf4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_ADC_Start+0x1a>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e095      	b.n	8005d4e <HAL_ADC_Start+0x146>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d018      	beq.n	8005c6a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0201 	orr.w	r2, r2, #1
 8005c46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005c48:	4b43      	ldr	r3, [pc, #268]	; (8005d58 <HAL_ADC_Start+0x150>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a43      	ldr	r2, [pc, #268]	; (8005d5c <HAL_ADC_Start+0x154>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	0c9a      	lsrs	r2, r3, #18
 8005c54:	4613      	mov	r3, r2
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	4413      	add	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8005c5c:	e002      	b.n	8005c64 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f9      	bne.n	8005c5e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d15d      	bne.n	8005d34 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005c80:	f023 0301 	bic.w	r3, r3, #1
 8005c84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ca2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb6:	d106      	bne.n	8005cc6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbc:	f023 0206 	bic.w	r2, r3, #6
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	645a      	str	r2, [r3, #68]	; 0x44
 8005cc4:	e002      	b.n	8005ccc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005cdc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005cde:	4b20      	ldr	r3, [pc, #128]	; (8005d60 <HAL_ADC_Start+0x158>)
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10f      	bne.n	8005d0a <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d129      	bne.n	8005d4c <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005d06:	609a      	str	r2, [r3, #8]
 8005d08:	e020      	b.n	8005d4c <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a15      	ldr	r2, [pc, #84]	; (8005d64 <HAL_ADC_Start+0x15c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d11b      	bne.n	8005d4c <HAL_ADC_Start+0x144>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d114      	bne.n	8005d4c <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005d30:	609a      	str	r2, [r3, #8]
 8005d32:	e00b      	b.n	8005d4c <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d38:	f043 0210 	orr.w	r2, r3, #16
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d44:	f043 0201 	orr.w	r2, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bc80      	pop	{r7}
 8005d56:	4770      	bx	lr
 8005d58:	20000024 	.word	0x20000024
 8005d5c:	431bde83 	.word	0x431bde83
 8005d60:	40012300 	.word	0x40012300
 8005d64:	40012000 	.word	0x40012000

08005d68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_ADC_ConfigChannel+0x1c>
 8005d80:	2302      	movs	r3, #2
 8005d82:	e103      	b.n	8005f8c <HAL_ADC_ConfigChannel+0x224>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b09      	cmp	r3, #9
 8005d92:	d925      	bls.n	8005de0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68d9      	ldr	r1, [r3, #12]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	4613      	mov	r3, r2
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	4413      	add	r3, r2
 8005da8:	3b1e      	subs	r3, #30
 8005daa:	2207      	movs	r2, #7
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	43da      	mvns	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	400a      	ands	r2, r1
 8005db8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68d9      	ldr	r1, [r3, #12]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	4618      	mov	r0, r3
 8005dcc:	4603      	mov	r3, r0
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	4403      	add	r3, r0
 8005dd2:	3b1e      	subs	r3, #30
 8005dd4:	409a      	lsls	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	60da      	str	r2, [r3, #12]
 8005dde:	e022      	b.n	8005e26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6919      	ldr	r1, [r3, #16]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	461a      	mov	r2, r3
 8005dee:	4613      	mov	r3, r2
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	4413      	add	r3, r2
 8005df4:	2207      	movs	r2, #7
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	43da      	mvns	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	400a      	ands	r2, r1
 8005e02:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6919      	ldr	r1, [r3, #16]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	4618      	mov	r0, r3
 8005e16:	4603      	mov	r3, r0
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	4403      	add	r3, r0
 8005e1c:	409a      	lsls	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b06      	cmp	r3, #6
 8005e2c:	d824      	bhi.n	8005e78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	3b05      	subs	r3, #5
 8005e40:	221f      	movs	r2, #31
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	43da      	mvns	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	400a      	ands	r2, r1
 8005e4e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	3b05      	subs	r3, #5
 8005e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	635a      	str	r2, [r3, #52]	; 0x34
 8005e76:	e04c      	b.n	8005f12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2b0c      	cmp	r3, #12
 8005e7e:	d824      	bhi.n	8005eca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	3b23      	subs	r3, #35	; 0x23
 8005e92:	221f      	movs	r2, #31
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	43da      	mvns	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	400a      	ands	r2, r1
 8005ea0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	4618      	mov	r0, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	3b23      	subs	r3, #35	; 0x23
 8005ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30
 8005ec8:	e023      	b.n	8005f12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	3b41      	subs	r3, #65	; 0x41
 8005edc:	221f      	movs	r2, #31
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	43da      	mvns	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	400a      	ands	r2, r1
 8005eea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	4618      	mov	r0, r3
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	3b41      	subs	r3, #65	; 0x41
 8005f06:	fa00 f203 	lsl.w	r2, r0, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a20      	ldr	r2, [pc, #128]	; (8005f98 <HAL_ADC_ConfigChannel+0x230>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d109      	bne.n	8005f30 <HAL_ADC_ConfigChannel+0x1c8>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b12      	cmp	r3, #18
 8005f22:	d105      	bne.n	8005f30 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005f24:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <HAL_ADC_ConfigChannel+0x234>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	4a1c      	ldr	r2, [pc, #112]	; (8005f9c <HAL_ADC_ConfigChannel+0x234>)
 8005f2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f2e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a18      	ldr	r2, [pc, #96]	; (8005f98 <HAL_ADC_ConfigChannel+0x230>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d123      	bne.n	8005f82 <HAL_ADC_ConfigChannel+0x21a>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b10      	cmp	r3, #16
 8005f40:	d003      	beq.n	8005f4a <HAL_ADC_ConfigChannel+0x1e2>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b11      	cmp	r3, #17
 8005f48:	d11b      	bne.n	8005f82 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005f4a:	4b14      	ldr	r3, [pc, #80]	; (8005f9c <HAL_ADC_ConfigChannel+0x234>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	4a13      	ldr	r2, [pc, #76]	; (8005f9c <HAL_ADC_ConfigChannel+0x234>)
 8005f50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f54:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b10      	cmp	r3, #16
 8005f5c:	d111      	bne.n	8005f82 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005f5e:	4b10      	ldr	r3, [pc, #64]	; (8005fa0 <HAL_ADC_ConfigChannel+0x238>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a10      	ldr	r2, [pc, #64]	; (8005fa4 <HAL_ADC_ConfigChannel+0x23c>)
 8005f64:	fba2 2303 	umull	r2, r3, r2, r3
 8005f68:	0c9a      	lsrs	r2, r3, #18
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8005f74:	e002      	b.n	8005f7c <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1f9      	bne.n	8005f76 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bc80      	pop	{r7}
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40012000 	.word	0x40012000
 8005f9c:	40012300 	.word	0x40012300
 8005fa0:	20000024 	.word	0x20000024
 8005fa4:	431bde83 	.word	0x431bde83

08005fa8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005fb0:	4b7e      	ldr	r3, [pc, #504]	; (80061ac <ADC_Init+0x204>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	4a7d      	ldr	r2, [pc, #500]	; (80061ac <ADC_Init+0x204>)
 8005fb6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005fba:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005fbc:	4b7b      	ldr	r3, [pc, #492]	; (80061ac <ADC_Init+0x204>)
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	4979      	ldr	r1, [pc, #484]	; (80061ac <ADC_Init+0x204>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6859      	ldr	r1, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	021a      	lsls	r2, r3, #8
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005ffc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6859      	ldr	r1, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800601e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6899      	ldr	r1, [r3, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	4a5e      	ldr	r2, [pc, #376]	; (80061b0 <ADC_Init+0x208>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d022      	beq.n	8006082 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800604a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6899      	ldr	r1, [r3, #8]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800606c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6899      	ldr	r1, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	609a      	str	r2, [r3, #8]
 8006080:	e00f      	b.n	80060a2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006090:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80060a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0202 	bic.w	r2, r2, #2
 80060b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6899      	ldr	r1, [r3, #8]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	7e1b      	ldrb	r3, [r3, #24]
 80060bc:	005a      	lsls	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d027      	beq.n	8006120 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80060ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	3b01      	subs	r3, #1
 80060f6:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80060fa:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	fa92 f2a2 	rbit	r2, r2
 8006102:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	fab2 f282 	clz	r2, r2
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	fa03 f102 	lsl.w	r1, r3, r2
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	605a      	str	r2, [r3, #4]
 800611e:	e007      	b.n	8006130 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800612e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800613e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	3b01      	subs	r3, #1
 800614c:	051a      	lsls	r2, r3, #20
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006164:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6899      	ldr	r1, [r3, #8]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006172:	025a      	lsls	r2, r3, #9
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800618a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6899      	ldr	r1, [r3, #8]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	029a      	lsls	r2, r3, #10
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	609a      	str	r2, [r3, #8]
}
 80061a0:	bf00      	nop
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	40012300 	.word	0x40012300
 80061b0:	0f000001 	.word	0x0f000001

080061b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061c4:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <__NVIC_SetPriorityGrouping+0x44>)
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061d0:	4013      	ands	r3, r2
 80061d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061e6:	4a04      	ldr	r2, [pc, #16]	; (80061f8 <__NVIC_SetPriorityGrouping+0x44>)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	60d3      	str	r3, [r2, #12]
}
 80061ec:	bf00      	nop
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bc80      	pop	{r7}
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	e000ed00 	.word	0xe000ed00

080061fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006200:	4b04      	ldr	r3, [pc, #16]	; (8006214 <__NVIC_GetPriorityGrouping+0x18>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	0a1b      	lsrs	r3, r3, #8
 8006206:	f003 0307 	and.w	r3, r3, #7
}
 800620a:	4618      	mov	r0, r3
 800620c:	46bd      	mov	sp, r7
 800620e:	bc80      	pop	{r7}
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	e000ed00 	.word	0xe000ed00

08006218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006226:	2b00      	cmp	r3, #0
 8006228:	db0b      	blt.n	8006242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	f003 021f 	and.w	r2, r3, #31
 8006230:	4906      	ldr	r1, [pc, #24]	; (800624c <__NVIC_EnableIRQ+0x34>)
 8006232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006236:	095b      	lsrs	r3, r3, #5
 8006238:	2001      	movs	r0, #1
 800623a:	fa00 f202 	lsl.w	r2, r0, r2
 800623e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr
 800624c:	e000e100 	.word	0xe000e100

08006250 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	4603      	mov	r3, r0
 8006258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800625a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800625e:	2b00      	cmp	r3, #0
 8006260:	db12      	blt.n	8006288 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	f003 021f 	and.w	r2, r3, #31
 8006268:	490a      	ldr	r1, [pc, #40]	; (8006294 <__NVIC_DisableIRQ+0x44>)
 800626a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	2001      	movs	r0, #1
 8006272:	fa00 f202 	lsl.w	r2, r0, r2
 8006276:	3320      	adds	r3, #32
 8006278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800627c:	f3bf 8f4f 	dsb	sy
}
 8006280:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006282:	f3bf 8f6f 	isb	sy
}
 8006286:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	bc80      	pop	{r7}
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	e000e100 	.word	0xe000e100

08006298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	4603      	mov	r3, r0
 80062a0:	6039      	str	r1, [r7, #0]
 80062a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	db0a      	blt.n	80062c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	490c      	ldr	r1, [pc, #48]	; (80062e4 <__NVIC_SetPriority+0x4c>)
 80062b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062b6:	0112      	lsls	r2, r2, #4
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	440b      	add	r3, r1
 80062bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062c0:	e00a      	b.n	80062d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	4908      	ldr	r1, [pc, #32]	; (80062e8 <__NVIC_SetPriority+0x50>)
 80062c8:	79fb      	ldrb	r3, [r7, #7]
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	3b04      	subs	r3, #4
 80062d0:	0112      	lsls	r2, r2, #4
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	440b      	add	r3, r1
 80062d6:	761a      	strb	r2, [r3, #24]
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	bc80      	pop	{r7}
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	e000e100 	.word	0xe000e100
 80062e8:	e000ed00 	.word	0xe000ed00

080062ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b089      	sub	sp, #36	; 0x24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	f1c3 0307 	rsb	r3, r3, #7
 8006306:	2b04      	cmp	r3, #4
 8006308:	bf28      	it	cs
 800630a:	2304      	movcs	r3, #4
 800630c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	3304      	adds	r3, #4
 8006312:	2b06      	cmp	r3, #6
 8006314:	d902      	bls.n	800631c <NVIC_EncodePriority+0x30>
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	3b03      	subs	r3, #3
 800631a:	e000      	b.n	800631e <NVIC_EncodePriority+0x32>
 800631c:	2300      	movs	r3, #0
 800631e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006320:	f04f 32ff 	mov.w	r2, #4294967295
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	43da      	mvns	r2, r3
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	401a      	ands	r2, r3
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006334:	f04f 31ff 	mov.w	r1, #4294967295
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	fa01 f303 	lsl.w	r3, r1, r3
 800633e:	43d9      	mvns	r1, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006344:	4313      	orrs	r3, r2
         );
}
 8006346:	4618      	mov	r0, r3
 8006348:	3724      	adds	r7, #36	; 0x24
 800634a:	46bd      	mov	sp, r7
 800634c:	bc80      	pop	{r7}
 800634e:	4770      	bx	lr

08006350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3b01      	subs	r3, #1
 800635c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006360:	d301      	bcc.n	8006366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006362:	2301      	movs	r3, #1
 8006364:	e00f      	b.n	8006386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006366:	4a0a      	ldr	r2, [pc, #40]	; (8006390 <SysTick_Config+0x40>)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3b01      	subs	r3, #1
 800636c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800636e:	210f      	movs	r1, #15
 8006370:	f04f 30ff 	mov.w	r0, #4294967295
 8006374:	f7ff ff90 	bl	8006298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006378:	4b05      	ldr	r3, [pc, #20]	; (8006390 <SysTick_Config+0x40>)
 800637a:	2200      	movs	r2, #0
 800637c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800637e:	4b04      	ldr	r3, [pc, #16]	; (8006390 <SysTick_Config+0x40>)
 8006380:	2207      	movs	r2, #7
 8006382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	e000e010 	.word	0xe000e010

08006394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff ff09 	bl	80061b4 <__NVIC_SetPriorityGrouping>
}
 80063a2:	bf00      	nop
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b086      	sub	sp, #24
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	4603      	mov	r3, r0
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]
 80063b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80063bc:	f7ff ff1e 	bl	80061fc <__NVIC_GetPriorityGrouping>
 80063c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	6978      	ldr	r0, [r7, #20]
 80063c8:	f7ff ff90 	bl	80062ec <NVIC_EncodePriority>
 80063cc:	4602      	mov	r2, r0
 80063ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063d2:	4611      	mov	r1, r2
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff ff5f 	bl	8006298 <__NVIC_SetPriority>
}
 80063da:	bf00      	nop
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	4603      	mov	r3, r0
 80063ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff ff11 	bl	8006218 <__NVIC_EnableIRQ>
}
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b082      	sub	sp, #8
 8006402:	af00      	add	r7, sp, #0
 8006404:	4603      	mov	r3, r0
 8006406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff ff1f 	bl	8006250 <__NVIC_DisableIRQ>
}
 8006412:	bf00      	nop
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7ff ff94 	bl	8006350 <SysTick_Config>
 8006428:	4603      	mov	r3, r0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800643e:	2300      	movs	r3, #0
 8006440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006442:	e16f      	b.n	8006724 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	2101      	movs	r1, #1
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	fa01 f303 	lsl.w	r3, r1, r3
 8006450:	4013      	ands	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8161 	beq.w	800671e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	2b01      	cmp	r3, #1
 8006466:	d005      	beq.n	8006474 <HAL_GPIO_Init+0x40>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f003 0303 	and.w	r3, r3, #3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d130      	bne.n	80064d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	2203      	movs	r2, #3
 8006480:	fa02 f303 	lsl.w	r3, r2, r3
 8006484:	43db      	mvns	r3, r3
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	4013      	ands	r3, r2
 800648a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	68da      	ldr	r2, [r3, #12]
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	fa02 f303 	lsl.w	r3, r2, r3
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064aa:	2201      	movs	r2, #1
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	fa02 f303 	lsl.w	r3, r2, r3
 80064b2:	43db      	mvns	r3, r3
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	4013      	ands	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	091b      	lsrs	r3, r3, #4
 80064c0:	f003 0201 	and.w	r2, r3, #1
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d017      	beq.n	8006512 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	2203      	movs	r2, #3
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	43db      	mvns	r3, r3
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4013      	ands	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	fa02 f303 	lsl.w	r3, r2, r3
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4313      	orrs	r3, r2
 800650a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d123      	bne.n	8006566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	08da      	lsrs	r2, r3, #3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3208      	adds	r2, #8
 8006526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	220f      	movs	r2, #15
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	43db      	mvns	r3, r3
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4013      	ands	r3, r2
 8006540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	691a      	ldr	r2, [r3, #16]
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	fa02 f303 	lsl.w	r3, r2, r3
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	4313      	orrs	r3, r2
 8006556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	08da      	lsrs	r2, r3, #3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3208      	adds	r2, #8
 8006560:	6939      	ldr	r1, [r7, #16]
 8006562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	2203      	movs	r2, #3
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	43db      	mvns	r3, r3
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f003 0203 	and.w	r2, r3, #3
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 80bb 	beq.w	800671e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065a8:	2300      	movs	r3, #0
 80065aa:	60bb      	str	r3, [r7, #8]
 80065ac:	4b64      	ldr	r3, [pc, #400]	; (8006740 <HAL_GPIO_Init+0x30c>)
 80065ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b0:	4a63      	ldr	r2, [pc, #396]	; (8006740 <HAL_GPIO_Init+0x30c>)
 80065b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065b6:	6453      	str	r3, [r2, #68]	; 0x44
 80065b8:	4b61      	ldr	r3, [pc, #388]	; (8006740 <HAL_GPIO_Init+0x30c>)
 80065ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065c0:	60bb      	str	r3, [r7, #8]
 80065c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80065c4:	4a5f      	ldr	r2, [pc, #380]	; (8006744 <HAL_GPIO_Init+0x310>)
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	089b      	lsrs	r3, r3, #2
 80065ca:	3302      	adds	r3, #2
 80065cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f003 0303 	and.w	r3, r3, #3
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	220f      	movs	r2, #15
 80065dc:	fa02 f303 	lsl.w	r3, r2, r3
 80065e0:	43db      	mvns	r3, r3
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	4013      	ands	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a57      	ldr	r2, [pc, #348]	; (8006748 <HAL_GPIO_Init+0x314>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d031      	beq.n	8006654 <HAL_GPIO_Init+0x220>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a56      	ldr	r2, [pc, #344]	; (800674c <HAL_GPIO_Init+0x318>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d02b      	beq.n	8006650 <HAL_GPIO_Init+0x21c>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a55      	ldr	r2, [pc, #340]	; (8006750 <HAL_GPIO_Init+0x31c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d025      	beq.n	800664c <HAL_GPIO_Init+0x218>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a54      	ldr	r2, [pc, #336]	; (8006754 <HAL_GPIO_Init+0x320>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d01f      	beq.n	8006648 <HAL_GPIO_Init+0x214>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a53      	ldr	r2, [pc, #332]	; (8006758 <HAL_GPIO_Init+0x324>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d019      	beq.n	8006644 <HAL_GPIO_Init+0x210>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a52      	ldr	r2, [pc, #328]	; (800675c <HAL_GPIO_Init+0x328>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d013      	beq.n	8006640 <HAL_GPIO_Init+0x20c>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a51      	ldr	r2, [pc, #324]	; (8006760 <HAL_GPIO_Init+0x32c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d00d      	beq.n	800663c <HAL_GPIO_Init+0x208>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a50      	ldr	r2, [pc, #320]	; (8006764 <HAL_GPIO_Init+0x330>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d007      	beq.n	8006638 <HAL_GPIO_Init+0x204>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a4f      	ldr	r2, [pc, #316]	; (8006768 <HAL_GPIO_Init+0x334>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d101      	bne.n	8006634 <HAL_GPIO_Init+0x200>
 8006630:	2308      	movs	r3, #8
 8006632:	e010      	b.n	8006656 <HAL_GPIO_Init+0x222>
 8006634:	2309      	movs	r3, #9
 8006636:	e00e      	b.n	8006656 <HAL_GPIO_Init+0x222>
 8006638:	2307      	movs	r3, #7
 800663a:	e00c      	b.n	8006656 <HAL_GPIO_Init+0x222>
 800663c:	2306      	movs	r3, #6
 800663e:	e00a      	b.n	8006656 <HAL_GPIO_Init+0x222>
 8006640:	2305      	movs	r3, #5
 8006642:	e008      	b.n	8006656 <HAL_GPIO_Init+0x222>
 8006644:	2304      	movs	r3, #4
 8006646:	e006      	b.n	8006656 <HAL_GPIO_Init+0x222>
 8006648:	2303      	movs	r3, #3
 800664a:	e004      	b.n	8006656 <HAL_GPIO_Init+0x222>
 800664c:	2302      	movs	r3, #2
 800664e:	e002      	b.n	8006656 <HAL_GPIO_Init+0x222>
 8006650:	2301      	movs	r3, #1
 8006652:	e000      	b.n	8006656 <HAL_GPIO_Init+0x222>
 8006654:	2300      	movs	r3, #0
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	f002 0203 	and.w	r2, r2, #3
 800665c:	0092      	lsls	r2, r2, #2
 800665e:	4093      	lsls	r3, r2
 8006660:	461a      	mov	r2, r3
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	4313      	orrs	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006668:	4936      	ldr	r1, [pc, #216]	; (8006744 <HAL_GPIO_Init+0x310>)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	089b      	lsrs	r3, r3, #2
 800666e:	3302      	adds	r3, #2
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006676:	4b3d      	ldr	r3, [pc, #244]	; (800676c <HAL_GPIO_Init+0x338>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	43db      	mvns	r3, r3
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4013      	ands	r3, r2
 8006684:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800669a:	4a34      	ldr	r2, [pc, #208]	; (800676c <HAL_GPIO_Init+0x338>)
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80066a0:	4b32      	ldr	r3, [pc, #200]	; (800676c <HAL_GPIO_Init+0x338>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	43db      	mvns	r3, r3
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4013      	ands	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80066c4:	4a29      	ldr	r2, [pc, #164]	; (800676c <HAL_GPIO_Init+0x338>)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066ca:	4b28      	ldr	r3, [pc, #160]	; (800676c <HAL_GPIO_Init+0x338>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	43db      	mvns	r3, r3
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4013      	ands	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80066ee:	4a1f      	ldr	r2, [pc, #124]	; (800676c <HAL_GPIO_Init+0x338>)
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066f4:	4b1d      	ldr	r3, [pc, #116]	; (800676c <HAL_GPIO_Init+0x338>)
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	43db      	mvns	r3, r3
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	4013      	ands	r3, r2
 8006702:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4313      	orrs	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006718:	4a14      	ldr	r2, [pc, #80]	; (800676c <HAL_GPIO_Init+0x338>)
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	3301      	adds	r3, #1
 8006722:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	fa22 f303 	lsr.w	r3, r2, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	f47f ae88 	bne.w	8006444 <HAL_GPIO_Init+0x10>
  }
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	bc80      	pop	{r7}
 800673e:	4770      	bx	lr
 8006740:	40023800 	.word	0x40023800
 8006744:	40013800 	.word	0x40013800
 8006748:	40020000 	.word	0x40020000
 800674c:	40020400 	.word	0x40020400
 8006750:	40020800 	.word	0x40020800
 8006754:	40020c00 	.word	0x40020c00
 8006758:	40021000 	.word	0x40021000
 800675c:	40021400 	.word	0x40021400
 8006760:	40021800 	.word	0x40021800
 8006764:	40021c00 	.word	0x40021c00
 8006768:	40022000 	.word	0x40022000
 800676c:	40013c00 	.word	0x40013c00

08006770 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	887b      	ldrh	r3, [r7, #2]
 8006782:	4013      	ands	r3, r2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006788:	2301      	movs	r3, #1
 800678a:	73fb      	strb	r3, [r7, #15]
 800678c:	e001      	b.n	8006792 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006792:	7bfb      	ldrb	r3, [r7, #15]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr

0800679e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	460b      	mov	r3, r1
 80067a8:	807b      	strh	r3, [r7, #2]
 80067aa:	4613      	mov	r3, r2
 80067ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067ae:	787b      	ldrb	r3, [r7, #1]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067b4:	887a      	ldrh	r2, [r7, #2]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067ba:	e003      	b.n	80067c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067bc:	887b      	ldrh	r3, [r7, #2]
 80067be:	041a      	lsls	r2, r3, #16
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	619a      	str	r2, [r3, #24]
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr

080067ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	460b      	mov	r3, r1
 80067d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80067e0:	887a      	ldrh	r2, [r7, #2]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4013      	ands	r3, r2
 80067e6:	041a      	lsls	r2, r3, #16
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	43d9      	mvns	r1, r3
 80067ec:	887b      	ldrh	r3, [r7, #2]
 80067ee:	400b      	ands	r3, r1
 80067f0:	431a      	orrs	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	619a      	str	r2, [r3, #24]
}
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr

08006800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	4603      	mov	r3, r0
 8006808:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800680a:	4b08      	ldr	r3, [pc, #32]	; (800682c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800680c:	695a      	ldr	r2, [r3, #20]
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	4013      	ands	r3, r2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d006      	beq.n	8006824 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006816:	4a05      	ldr	r2, [pc, #20]	; (800682c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006818:	88fb      	ldrh	r3, [r7, #6]
 800681a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800681c:	88fb      	ldrh	r3, [r7, #6]
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe f848 	bl	80048b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006824:	bf00      	nop
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40013c00 	.word	0x40013c00

08006830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e12b      	b.n	8006a9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fe fed6 	bl	8005608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2224      	movs	r2, #36	; 0x24
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0201 	bic.w	r2, r2, #1
 8006872:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006882:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006892:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006894:	f002 fd12 	bl	80092bc <HAL_RCC_GetPCLK1Freq>
 8006898:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	4a81      	ldr	r2, [pc, #516]	; (8006aa4 <HAL_I2C_Init+0x274>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d807      	bhi.n	80068b4 <HAL_I2C_Init+0x84>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4a80      	ldr	r2, [pc, #512]	; (8006aa8 <HAL_I2C_Init+0x278>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	bf94      	ite	ls
 80068ac:	2301      	movls	r3, #1
 80068ae:	2300      	movhi	r3, #0
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	e006      	b.n	80068c2 <HAL_I2C_Init+0x92>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4a7d      	ldr	r2, [pc, #500]	; (8006aac <HAL_I2C_Init+0x27c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	bf94      	ite	ls
 80068bc:	2301      	movls	r3, #1
 80068be:	2300      	movhi	r3, #0
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e0e7      	b.n	8006a9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4a78      	ldr	r2, [pc, #480]	; (8006ab0 <HAL_I2C_Init+0x280>)
 80068ce:	fba2 2303 	umull	r2, r3, r2, r3
 80068d2:	0c9b      	lsrs	r3, r3, #18
 80068d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	4a6a      	ldr	r2, [pc, #424]	; (8006aa4 <HAL_I2C_Init+0x274>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d802      	bhi.n	8006904 <HAL_I2C_Init+0xd4>
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	3301      	adds	r3, #1
 8006902:	e009      	b.n	8006918 <HAL_I2C_Init+0xe8>
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800690a:	fb02 f303 	mul.w	r3, r2, r3
 800690e:	4a69      	ldr	r2, [pc, #420]	; (8006ab4 <HAL_I2C_Init+0x284>)
 8006910:	fba2 2303 	umull	r2, r3, r2, r3
 8006914:	099b      	lsrs	r3, r3, #6
 8006916:	3301      	adds	r3, #1
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6812      	ldr	r2, [r2, #0]
 800691c:	430b      	orrs	r3, r1
 800691e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800692a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	495c      	ldr	r1, [pc, #368]	; (8006aa4 <HAL_I2C_Init+0x274>)
 8006934:	428b      	cmp	r3, r1
 8006936:	d819      	bhi.n	800696c <HAL_I2C_Init+0x13c>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	1e59      	subs	r1, r3, #1
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	fbb1 f3f3 	udiv	r3, r1, r3
 8006946:	1c59      	adds	r1, r3, #1
 8006948:	f640 73fc 	movw	r3, #4092	; 0xffc
 800694c:	400b      	ands	r3, r1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <HAL_I2C_Init+0x138>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1e59      	subs	r1, r3, #1
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006960:	3301      	adds	r3, #1
 8006962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006966:	e051      	b.n	8006a0c <HAL_I2C_Init+0x1dc>
 8006968:	2304      	movs	r3, #4
 800696a:	e04f      	b.n	8006a0c <HAL_I2C_Init+0x1dc>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d111      	bne.n	8006998 <HAL_I2C_Init+0x168>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	1e58      	subs	r0, r3, #1
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6859      	ldr	r1, [r3, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	440b      	add	r3, r1
 8006982:	fbb0 f3f3 	udiv	r3, r0, r3
 8006986:	3301      	adds	r3, #1
 8006988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800698c:	2b00      	cmp	r3, #0
 800698e:	bf0c      	ite	eq
 8006990:	2301      	moveq	r3, #1
 8006992:	2300      	movne	r3, #0
 8006994:	b2db      	uxtb	r3, r3
 8006996:	e012      	b.n	80069be <HAL_I2C_Init+0x18e>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	1e58      	subs	r0, r3, #1
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6859      	ldr	r1, [r3, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	440b      	add	r3, r1
 80069a6:	0099      	lsls	r1, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80069ae:	3301      	adds	r3, #1
 80069b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bf0c      	ite	eq
 80069b8:	2301      	moveq	r3, #1
 80069ba:	2300      	movne	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <HAL_I2C_Init+0x196>
 80069c2:	2301      	movs	r3, #1
 80069c4:	e022      	b.n	8006a0c <HAL_I2C_Init+0x1dc>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10e      	bne.n	80069ec <HAL_I2C_Init+0x1bc>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	1e58      	subs	r0, r3, #1
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6859      	ldr	r1, [r3, #4]
 80069d6:	460b      	mov	r3, r1
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	440b      	add	r3, r1
 80069dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80069e0:	3301      	adds	r3, #1
 80069e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ea:	e00f      	b.n	8006a0c <HAL_I2C_Init+0x1dc>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	1e58      	subs	r0, r3, #1
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6859      	ldr	r1, [r3, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	440b      	add	r3, r1
 80069fa:	0099      	lsls	r1, r3, #2
 80069fc:	440b      	add	r3, r1
 80069fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a02:	3301      	adds	r3, #1
 8006a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	6809      	ldr	r1, [r1, #0]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	69da      	ldr	r2, [r3, #28]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	6911      	ldr	r1, [r2, #16]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	68d2      	ldr	r2, [r2, #12]
 8006a46:	4311      	orrs	r1, r2
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6812      	ldr	r2, [r2, #0]
 8006a4c:	430b      	orrs	r3, r1
 8006a4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	695a      	ldr	r2, [r3, #20]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0201 	orr.w	r2, r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	000186a0 	.word	0x000186a0
 8006aa8:	001e847f 	.word	0x001e847f
 8006aac:	003d08ff 	.word	0x003d08ff
 8006ab0:	431bde83 	.word	0x431bde83
 8006ab4:	10624dd3 	.word	0x10624dd3

08006ab8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	817b      	strh	r3, [r7, #10]
 8006aca:	460b      	mov	r3, r1
 8006acc:	813b      	strh	r3, [r7, #8]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ad2:	f7ff f827 	bl	8005b24 <HAL_GetTick>
 8006ad6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b20      	cmp	r3, #32
 8006ae2:	f040 80d9 	bne.w	8006c98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	2319      	movs	r3, #25
 8006aec:	2201      	movs	r2, #1
 8006aee:	496d      	ldr	r1, [pc, #436]	; (8006ca4 <HAL_I2C_Mem_Write+0x1ec>)
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 fc7f 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006afc:	2302      	movs	r3, #2
 8006afe:	e0cc      	b.n	8006c9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_I2C_Mem_Write+0x56>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e0c5      	b.n	8006c9a <HAL_I2C_Mem_Write+0x1e2>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d007      	beq.n	8006b34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0201 	orr.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2221      	movs	r2, #33	; 0x21
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2240      	movs	r2, #64	; 0x40
 8006b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a3a      	ldr	r2, [r7, #32]
 8006b5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4a4d      	ldr	r2, [pc, #308]	; (8006ca8 <HAL_I2C_Mem_Write+0x1f0>)
 8006b74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b76:	88f8      	ldrh	r0, [r7, #6]
 8006b78:	893a      	ldrh	r2, [r7, #8]
 8006b7a:	8979      	ldrh	r1, [r7, #10]
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	9301      	str	r3, [sp, #4]
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	4603      	mov	r3, r0
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 fab6 	bl	80070f8 <I2C_RequestMemoryWrite>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d052      	beq.n	8006c38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e081      	b.n	8006c9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 fd00 	bl	80075a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00d      	beq.n	8006bc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	d107      	bne.n	8006bbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e06b      	b.n	8006c9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	781a      	ldrb	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	3b01      	subs	r3, #1
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b04      	cmp	r3, #4
 8006bfe:	d11b      	bne.n	8006c38 <HAL_I2C_Mem_Write+0x180>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d017      	beq.n	8006c38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	781a      	ldrb	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c22:	3b01      	subs	r3, #1
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1aa      	bne.n	8006b96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 fcec 	bl	8007622 <I2C_WaitOnBTFFlagUntilTimeout>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00d      	beq.n	8006c6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c54:	2b04      	cmp	r3, #4
 8006c56:	d107      	bne.n	8006c68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e016      	b.n	8006c9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	e000      	b.n	8006c9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c98:	2302      	movs	r3, #2
  }
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	00100002 	.word	0x00100002
 8006ca8:	ffff0000 	.word	0xffff0000

08006cac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08c      	sub	sp, #48	; 0x30
 8006cb0:	af02      	add	r7, sp, #8
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	461a      	mov	r2, r3
 8006cba:	4603      	mov	r3, r0
 8006cbc:	817b      	strh	r3, [r7, #10]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	813b      	strh	r3, [r7, #8]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006cc6:	f7fe ff2d 	bl	8005b24 <HAL_GetTick>
 8006cca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b20      	cmp	r3, #32
 8006cd6:	f040 8208 	bne.w	80070ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	2319      	movs	r3, #25
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	497b      	ldr	r1, [pc, #492]	; (8006ed0 <HAL_I2C_Mem_Read+0x224>)
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 fb85 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e1fb      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_I2C_Mem_Read+0x56>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e1f4      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d007      	beq.n	8006d28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0201 	orr.w	r2, r2, #1
 8006d26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2222      	movs	r2, #34	; 0x22
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2240      	movs	r2, #64	; 0x40
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006d58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4a5b      	ldr	r2, [pc, #364]	; (8006ed4 <HAL_I2C_Mem_Read+0x228>)
 8006d68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d6a:	88f8      	ldrh	r0, [r7, #6]
 8006d6c:	893a      	ldrh	r2, [r7, #8]
 8006d6e:	8979      	ldrh	r1, [r7, #10]
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	4603      	mov	r3, r0
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 fa52 	bl	8007224 <I2C_RequestMemoryRead>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e1b0      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d113      	bne.n	8006dba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d92:	2300      	movs	r3, #0
 8006d94:	623b      	str	r3, [r7, #32]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	623b      	str	r3, [r7, #32]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	623b      	str	r3, [r7, #32]
 8006da6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	e184      	b.n	80070c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d11b      	bne.n	8006dfa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	61fb      	str	r3, [r7, #28]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	61fb      	str	r3, [r7, #28]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	e164      	b.n	80070c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d11b      	bne.n	8006e3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e22:	2300      	movs	r3, #0
 8006e24:	61bb      	str	r3, [r7, #24]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	61bb      	str	r3, [r7, #24]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	61bb      	str	r3, [r7, #24]
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	e144      	b.n	80070c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006e50:	e138      	b.n	80070c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	f200 80f1 	bhi.w	800703e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d123      	bne.n	8006eac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 fc1b 	bl	80076a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e139      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691a      	ldr	r2, [r3, #16]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e94:	3b01      	subs	r3, #1
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006eaa:	e10b      	b.n	80070c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d14e      	bne.n	8006f52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	2200      	movs	r2, #0
 8006ebc:	4906      	ldr	r1, [pc, #24]	; (8006ed8 <HAL_I2C_Mem_Read+0x22c>)
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 fa98 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d008      	beq.n	8006edc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e10e      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
 8006ece:	bf00      	nop
 8006ed0:	00100002 	.word	0x00100002
 8006ed4:	ffff0000 	.word	0xffff0000
 8006ed8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691a      	ldr	r2, [r3, #16]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	3b01      	subs	r3, #1
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f50:	e0b8      	b.n	80070c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f58:	2200      	movs	r2, #0
 8006f5a:	4966      	ldr	r1, [pc, #408]	; (80070f4 <HAL_I2C_Mem_Read+0x448>)
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f000 fa49 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e0bf      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	691a      	ldr	r2, [r3, #16]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	494f      	ldr	r1, [pc, #316]	; (80070f4 <HAL_I2C_Mem_Read+0x448>)
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 fa1b 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e091      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	691a      	ldr	r2, [r3, #16]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007000:	b29b      	uxth	r3, r3
 8007002:	3b01      	subs	r3, #1
 8007004:	b29a      	uxth	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	691a      	ldr	r2, [r3, #16]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007026:	3b01      	subs	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007032:	b29b      	uxth	r3, r3
 8007034:	3b01      	subs	r3, #1
 8007036:	b29a      	uxth	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800703c:	e042      	b.n	80070c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800703e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007040:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fb2e 	bl	80076a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e04c      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	b2d2      	uxtb	r2, r2
 800705e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706e:	3b01      	subs	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800707a:	b29b      	uxth	r3, r3
 800707c:	3b01      	subs	r3, #1
 800707e:	b29a      	uxth	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	f003 0304 	and.w	r3, r3, #4
 800708e:	2b04      	cmp	r3, #4
 8007090:	d118      	bne.n	80070c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	691a      	ldr	r2, [r3, #16]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	b2d2      	uxtb	r2, r2
 800709e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ae:	3b01      	subs	r3, #1
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f47f aec2 	bne.w	8006e52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	e000      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80070ea:	2302      	movs	r3, #2
  }
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3728      	adds	r7, #40	; 0x28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	00010004 	.word	0x00010004

080070f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	4608      	mov	r0, r1
 8007102:	4611      	mov	r1, r2
 8007104:	461a      	mov	r2, r3
 8007106:	4603      	mov	r3, r0
 8007108:	817b      	strh	r3, [r7, #10]
 800710a:	460b      	mov	r3, r1
 800710c:	813b      	strh	r3, [r7, #8]
 800710e:	4613      	mov	r3, r2
 8007110:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007120:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	2200      	movs	r2, #0
 800712a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 f960 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00d      	beq.n	8007156 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007148:	d103      	bne.n	8007152 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007150:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e05f      	b.n	8007216 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007156:	897b      	ldrh	r3, [r7, #10]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	461a      	mov	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007164:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	6a3a      	ldr	r2, [r7, #32]
 800716a:	492d      	ldr	r1, [pc, #180]	; (8007220 <I2C_RequestMemoryWrite+0x128>)
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f998 	bl	80074a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e04c      	b.n	8007216 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800717c:	2300      	movs	r3, #0
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007194:	6a39      	ldr	r1, [r7, #32]
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 fa02 	bl	80075a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00d      	beq.n	80071be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d107      	bne.n	80071ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e02b      	b.n	8007216 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071be:	88fb      	ldrh	r3, [r7, #6]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d105      	bne.n	80071d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071c4:	893b      	ldrh	r3, [r7, #8]
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	611a      	str	r2, [r3, #16]
 80071ce:	e021      	b.n	8007214 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071d0:	893b      	ldrh	r3, [r7, #8]
 80071d2:	0a1b      	lsrs	r3, r3, #8
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e0:	6a39      	ldr	r1, [r7, #32]
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 f9dc 	bl	80075a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00d      	beq.n	800720a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d107      	bne.n	8007206 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007204:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e005      	b.n	8007216 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800720a:	893b      	ldrh	r3, [r7, #8]
 800720c:	b2da      	uxtb	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	00010002 	.word	0x00010002

08007224 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b088      	sub	sp, #32
 8007228:	af02      	add	r7, sp, #8
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	4608      	mov	r0, r1
 800722e:	4611      	mov	r1, r2
 8007230:	461a      	mov	r2, r3
 8007232:	4603      	mov	r3, r0
 8007234:	817b      	strh	r3, [r7, #10]
 8007236:	460b      	mov	r3, r1
 8007238:	813b      	strh	r3, [r7, #8]
 800723a:	4613      	mov	r3, r2
 800723c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800724c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800725c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	2200      	movs	r2, #0
 8007266:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 f8c2 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00d      	beq.n	8007292 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007284:	d103      	bne.n	800728e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800728c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e0aa      	b.n	80073e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007292:	897b      	ldrh	r3, [r7, #10]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	461a      	mov	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	6a3a      	ldr	r2, [r7, #32]
 80072a6:	4952      	ldr	r1, [pc, #328]	; (80073f0 <I2C_RequestMemoryRead+0x1cc>)
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 f8fa 	bl	80074a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e097      	b.n	80073e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072b8:	2300      	movs	r3, #0
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d0:	6a39      	ldr	r1, [r7, #32]
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 f964 	bl	80075a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00d      	beq.n	80072fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	d107      	bne.n	80072f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e076      	b.n	80073e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072fa:	88fb      	ldrh	r3, [r7, #6]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d105      	bne.n	800730c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007300:	893b      	ldrh	r3, [r7, #8]
 8007302:	b2da      	uxtb	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	611a      	str	r2, [r3, #16]
 800730a:	e021      	b.n	8007350 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800730c:	893b      	ldrh	r3, [r7, #8]
 800730e:	0a1b      	lsrs	r3, r3, #8
 8007310:	b29b      	uxth	r3, r3
 8007312:	b2da      	uxtb	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800731a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800731c:	6a39      	ldr	r1, [r7, #32]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 f93e 	bl	80075a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00d      	beq.n	8007346 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	2b04      	cmp	r3, #4
 8007330:	d107      	bne.n	8007342 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007340:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e050      	b.n	80073e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007346:	893b      	ldrh	r3, [r7, #8]
 8007348:	b2da      	uxtb	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007352:	6a39      	ldr	r1, [r7, #32]
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 f923 	bl	80075a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00d      	beq.n	800737c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	2b04      	cmp	r3, #4
 8007366:	d107      	bne.n	8007378 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007376:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e035      	b.n	80073e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800738a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	2200      	movs	r2, #0
 8007394:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f82b 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00d      	beq.n	80073c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073b2:	d103      	bne.n	80073bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e013      	b.n	80073e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80073c0:	897b      	ldrh	r3, [r7, #10]
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	f043 0301 	orr.w	r3, r3, #1
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	6a3a      	ldr	r2, [r7, #32]
 80073d4:	4906      	ldr	r1, [pc, #24]	; (80073f0 <I2C_RequestMemoryRead+0x1cc>)
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 f863 	bl	80074a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e000      	b.n	80073e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	00010002 	.word	0x00010002

080073f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	4613      	mov	r3, r2
 8007402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007404:	e025      	b.n	8007452 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740c:	d021      	beq.n	8007452 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800740e:	f7fe fb89 	bl	8005b24 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	429a      	cmp	r2, r3
 800741c:	d302      	bcc.n	8007424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d116      	bne.n	8007452 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2220      	movs	r2, #32
 800742e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	f043 0220 	orr.w	r2, r3, #32
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e023      	b.n	800749a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	0c1b      	lsrs	r3, r3, #16
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b01      	cmp	r3, #1
 800745a:	d10d      	bne.n	8007478 <I2C_WaitOnFlagUntilTimeout+0x84>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	43da      	mvns	r2, r3
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4013      	ands	r3, r2
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	bf0c      	ite	eq
 800746e:	2301      	moveq	r3, #1
 8007470:	2300      	movne	r3, #0
 8007472:	b2db      	uxtb	r3, r3
 8007474:	461a      	mov	r2, r3
 8007476:	e00c      	b.n	8007492 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	43da      	mvns	r2, r3
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	4013      	ands	r3, r2
 8007484:	b29b      	uxth	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	bf0c      	ite	eq
 800748a:	2301      	moveq	r3, #1
 800748c:	2300      	movne	r3, #0
 800748e:	b2db      	uxtb	r3, r3
 8007490:	461a      	mov	r2, r3
 8007492:	79fb      	ldrb	r3, [r7, #7]
 8007494:	429a      	cmp	r2, r3
 8007496:	d0b6      	beq.n	8007406 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	607a      	str	r2, [r7, #4]
 80074ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074b0:	e051      	b.n	8007556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c0:	d123      	bne.n	800750a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	f043 0204 	orr.w	r2, r3, #4
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e046      	b.n	8007598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007510:	d021      	beq.n	8007556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007512:	f7fe fb07 	bl	8005b24 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	429a      	cmp	r2, r3
 8007520:	d302      	bcc.n	8007528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d116      	bne.n	8007556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2220      	movs	r2, #32
 8007532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	f043 0220 	orr.w	r2, r3, #32
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e020      	b.n	8007598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	0c1b      	lsrs	r3, r3, #16
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b01      	cmp	r3, #1
 800755e:	d10c      	bne.n	800757a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	43da      	mvns	r2, r3
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	4013      	ands	r3, r2
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	bf14      	ite	ne
 8007572:	2301      	movne	r3, #1
 8007574:	2300      	moveq	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	e00b      	b.n	8007592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	43da      	mvns	r2, r3
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	4013      	ands	r3, r2
 8007586:	b29b      	uxth	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	bf14      	ite	ne
 800758c:	2301      	movne	r3, #1
 800758e:	2300      	moveq	r3, #0
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d18d      	bne.n	80074b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075ac:	e02d      	b.n	800760a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 f8ce 	bl	8007750 <I2C_IsAcknowledgeFailed>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e02d      	b.n	800761a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c4:	d021      	beq.n	800760a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075c6:	f7fe faad 	bl	8005b24 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d302      	bcc.n	80075dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d116      	bne.n	800760a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2220      	movs	r2, #32
 80075e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	f043 0220 	orr.w	r2, r3, #32
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e007      	b.n	800761a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007614:	2b80      	cmp	r3, #128	; 0x80
 8007616:	d1ca      	bne.n	80075ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800762e:	e02d      	b.n	800768c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 f88d 	bl	8007750 <I2C_IsAcknowledgeFailed>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e02d      	b.n	800769c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007646:	d021      	beq.n	800768c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007648:	f7fe fa6c 	bl	8005b24 <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	429a      	cmp	r2, r3
 8007656:	d302      	bcc.n	800765e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d116      	bne.n	800768c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2220      	movs	r2, #32
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	f043 0220 	orr.w	r2, r3, #32
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e007      	b.n	800769c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	f003 0304 	and.w	r3, r3, #4
 8007696:	2b04      	cmp	r3, #4
 8007698:	d1ca      	bne.n	8007630 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076b0:	e042      	b.n	8007738 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	f003 0310 	and.w	r3, r3, #16
 80076bc:	2b10      	cmp	r3, #16
 80076be:	d119      	bne.n	80076f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f06f 0210 	mvn.w	r2, #16
 80076c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e029      	b.n	8007748 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076f4:	f7fe fa16 	bl	8005b24 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	429a      	cmp	r2, r3
 8007702:	d302      	bcc.n	800770a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d116      	bne.n	8007738 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2220      	movs	r2, #32
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007724:	f043 0220 	orr.w	r2, r3, #32
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e007      	b.n	8007748 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007742:	2b40      	cmp	r3, #64	; 0x40
 8007744:	d1b5      	bne.n	80076b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007766:	d11b      	bne.n	80077a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007770:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2220      	movs	r2, #32
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778c:	f043 0204 	orr.w	r2, r3, #4
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e000      	b.n	80077a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bc80      	pop	{r7}
 80077aa:	4770      	bx	lr

080077ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80077ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ae:	b08f      	sub	sp, #60	; 0x3c
 80077b0:	af0a      	add	r7, sp, #40	; 0x28
 80077b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e10f      	b.n	80079de <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d106      	bne.n	80077de <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f005 fc95 	bl	800d108 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2203      	movs	r2, #3
 80077e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d102      	bne.n	80077f8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f002 fc85 	bl	800a10c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	603b      	str	r3, [r7, #0]
 8007808:	687e      	ldr	r6, [r7, #4]
 800780a:	466d      	mov	r5, sp
 800780c:	f106 0410 	add.w	r4, r6, #16
 8007810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007818:	e894 0003 	ldmia.w	r4, {r0, r1}
 800781c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007820:	1d33      	adds	r3, r6, #4
 8007822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007824:	6838      	ldr	r0, [r7, #0]
 8007826:	f002 fb67 	bl	8009ef8 <USB_CoreInit>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e0d0      	b.n	80079de <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2100      	movs	r1, #0
 8007842:	4618      	mov	r0, r3
 8007844:	f002 fc72 	bl	800a12c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007848:	2300      	movs	r3, #0
 800784a:	73fb      	strb	r3, [r7, #15]
 800784c:	e04a      	b.n	80078e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800784e:	7bfa      	ldrb	r2, [r7, #15]
 8007850:	6879      	ldr	r1, [r7, #4]
 8007852:	4613      	mov	r3, r2
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	1a9b      	subs	r3, r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	440b      	add	r3, r1
 800785c:	333d      	adds	r3, #61	; 0x3d
 800785e:	2201      	movs	r2, #1
 8007860:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007862:	7bfa      	ldrb	r2, [r7, #15]
 8007864:	6879      	ldr	r1, [r7, #4]
 8007866:	4613      	mov	r3, r2
 8007868:	00db      	lsls	r3, r3, #3
 800786a:	1a9b      	subs	r3, r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	440b      	add	r3, r1
 8007870:	333c      	adds	r3, #60	; 0x3c
 8007872:	7bfa      	ldrb	r2, [r7, #15]
 8007874:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007876:	7bfa      	ldrb	r2, [r7, #15]
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	b298      	uxth	r0, r3
 800787c:	6879      	ldr	r1, [r7, #4]
 800787e:	4613      	mov	r3, r2
 8007880:	00db      	lsls	r3, r3, #3
 8007882:	1a9b      	subs	r3, r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	440b      	add	r3, r1
 8007888:	3342      	adds	r3, #66	; 0x42
 800788a:	4602      	mov	r2, r0
 800788c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800788e:	7bfa      	ldrb	r2, [r7, #15]
 8007890:	6879      	ldr	r1, [r7, #4]
 8007892:	4613      	mov	r3, r2
 8007894:	00db      	lsls	r3, r3, #3
 8007896:	1a9b      	subs	r3, r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	440b      	add	r3, r1
 800789c:	333f      	adds	r3, #63	; 0x3f
 800789e:	2200      	movs	r2, #0
 80078a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80078a2:	7bfa      	ldrb	r2, [r7, #15]
 80078a4:	6879      	ldr	r1, [r7, #4]
 80078a6:	4613      	mov	r3, r2
 80078a8:	00db      	lsls	r3, r3, #3
 80078aa:	1a9b      	subs	r3, r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	440b      	add	r3, r1
 80078b0:	3344      	adds	r3, #68	; 0x44
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80078b6:	7bfa      	ldrb	r2, [r7, #15]
 80078b8:	6879      	ldr	r1, [r7, #4]
 80078ba:	4613      	mov	r3, r2
 80078bc:	00db      	lsls	r3, r3, #3
 80078be:	1a9b      	subs	r3, r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	440b      	add	r3, r1
 80078c4:	3348      	adds	r3, #72	; 0x48
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80078ca:	7bfa      	ldrb	r2, [r7, #15]
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	4613      	mov	r3, r2
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	1a9b      	subs	r3, r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	440b      	add	r3, r1
 80078d8:	3350      	adds	r3, #80	; 0x50
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	3301      	adds	r3, #1
 80078e2:	73fb      	strb	r3, [r7, #15]
 80078e4:	7bfa      	ldrb	r2, [r7, #15]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d3af      	bcc.n	800784e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078ee:	2300      	movs	r3, #0
 80078f0:	73fb      	strb	r3, [r7, #15]
 80078f2:	e044      	b.n	800797e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80078f4:	7bfa      	ldrb	r2, [r7, #15]
 80078f6:	6879      	ldr	r1, [r7, #4]
 80078f8:	4613      	mov	r3, r2
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	1a9b      	subs	r3, r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	440b      	add	r3, r1
 8007902:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007906:	2200      	movs	r2, #0
 8007908:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800790a:	7bfa      	ldrb	r2, [r7, #15]
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	4613      	mov	r3, r2
 8007910:	00db      	lsls	r3, r3, #3
 8007912:	1a9b      	subs	r3, r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	440b      	add	r3, r1
 8007918:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800791c:	7bfa      	ldrb	r2, [r7, #15]
 800791e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007920:	7bfa      	ldrb	r2, [r7, #15]
 8007922:	6879      	ldr	r1, [r7, #4]
 8007924:	4613      	mov	r3, r2
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	1a9b      	subs	r3, r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	440b      	add	r3, r1
 800792e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007932:	2200      	movs	r2, #0
 8007934:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007936:	7bfa      	ldrb	r2, [r7, #15]
 8007938:	6879      	ldr	r1, [r7, #4]
 800793a:	4613      	mov	r3, r2
 800793c:	00db      	lsls	r3, r3, #3
 800793e:	1a9b      	subs	r3, r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	440b      	add	r3, r1
 8007944:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800794c:	7bfa      	ldrb	r2, [r7, #15]
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	4613      	mov	r3, r2
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	1a9b      	subs	r3, r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	440b      	add	r3, r1
 800795a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007962:	7bfa      	ldrb	r2, [r7, #15]
 8007964:	6879      	ldr	r1, [r7, #4]
 8007966:	4613      	mov	r3, r2
 8007968:	00db      	lsls	r3, r3, #3
 800796a:	1a9b      	subs	r3, r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	440b      	add	r3, r1
 8007970:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	3301      	adds	r3, #1
 800797c:	73fb      	strb	r3, [r7, #15]
 800797e:	7bfa      	ldrb	r2, [r7, #15]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	429a      	cmp	r2, r3
 8007986:	d3b5      	bcc.n	80078f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	603b      	str	r3, [r7, #0]
 800798e:	687e      	ldr	r6, [r7, #4]
 8007990:	466d      	mov	r5, sp
 8007992:	f106 0410 	add.w	r4, r6, #16
 8007996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800799a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800799c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800799e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80079a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80079a6:	1d33      	adds	r3, r6, #4
 80079a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079aa:	6838      	ldr	r0, [r7, #0]
 80079ac:	f002 fc0a 	bl	800a1c4 <USB_DevInit>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d005      	beq.n	80079c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2202      	movs	r2, #2
 80079ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e00d      	b.n	80079de <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f003 fc7b 	bl	800b2d2 <USB_DevDisconnect>

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3714      	adds	r7, #20
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d101      	bne.n	80079fc <HAL_PCD_Start+0x16>
 80079f8:	2302      	movs	r3, #2
 80079fa:	e012      	b.n	8007a22 <HAL_PCD_Start+0x3c>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f002 fb6f 	bl	800a0ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f003 fc3d 	bl	800b292 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007a2a:	b590      	push	{r4, r7, lr}
 8007a2c:	b08d      	sub	sp, #52	; 0x34
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f003 fcf4 	bl	800b42e <USB_GetMode>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f040 838f 	bne.w	800816c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f003 fc5d 	bl	800b312 <USB_ReadInterrupts>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 8385 	beq.w	800816a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f003 fc54 	bl	800b312 <USB_ReadInterrupts>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d107      	bne.n	8007a84 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	695a      	ldr	r2, [r3, #20]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f002 0202 	and.w	r2, r2, #2
 8007a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f003 fc42 	bl	800b312 <USB_ReadInterrupts>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b10      	cmp	r3, #16
 8007a96:	d161      	bne.n	8007b5c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	699a      	ldr	r2, [r3, #24]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f022 0210 	bic.w	r2, r2, #16
 8007aa6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	6a1b      	ldr	r3, [r3, #32]
 8007aac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	f003 020f 	and.w	r2, r3, #15
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	1a9b      	subs	r3, r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	0c5b      	lsrs	r3, r3, #17
 8007acc:	f003 030f 	and.w	r3, r3, #15
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d124      	bne.n	8007b1e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007ada:	4013      	ands	r3, r2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d035      	beq.n	8007b4c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	091b      	lsrs	r3, r3, #4
 8007ae8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	461a      	mov	r2, r3
 8007af2:	6a38      	ldr	r0, [r7, #32]
 8007af4:	f003 fa7f 	bl	800aff6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	091b      	lsrs	r3, r3, #4
 8007b00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b04:	441a      	add	r2, r3
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	699a      	ldr	r2, [r3, #24]
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	091b      	lsrs	r3, r3, #4
 8007b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b16:	441a      	add	r2, r3
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	619a      	str	r2, [r3, #24]
 8007b1c:	e016      	b.n	8007b4c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	0c5b      	lsrs	r3, r3, #17
 8007b22:	f003 030f 	and.w	r3, r3, #15
 8007b26:	2b06      	cmp	r3, #6
 8007b28:	d110      	bne.n	8007b4c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b30:	2208      	movs	r2, #8
 8007b32:	4619      	mov	r1, r3
 8007b34:	6a38      	ldr	r0, [r7, #32]
 8007b36:	f003 fa5e 	bl	800aff6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	091b      	lsrs	r3, r3, #4
 8007b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b46:	441a      	add	r2, r3
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699a      	ldr	r2, [r3, #24]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0210 	orr.w	r2, r2, #16
 8007b5a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f003 fbd6 	bl	800b312 <USB_ReadInterrupts>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b70:	d16e      	bne.n	8007c50 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f003 fbdb 	bl	800b336 <USB_ReadDevAllOutEpInterrupt>
 8007b80:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007b82:	e062      	b.n	8007c4a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d057      	beq.n	8007c3e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b94:	b2d2      	uxtb	r2, r2
 8007b96:	4611      	mov	r1, r2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f003 fbfe 	bl	800b39a <USB_ReadDevOutEPInterrupt>
 8007b9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00c      	beq.n	8007bc4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	015a      	lsls	r2, r3, #5
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	2301      	movs	r3, #1
 8007bba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fda2 	bl	8008708 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	f003 0308 	and.w	r3, r3, #8
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00c      	beq.n	8007be8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	015a      	lsls	r2, r3, #5
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bda:	461a      	mov	r2, r3
 8007bdc:	2308      	movs	r3, #8
 8007bde:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007be0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fe9c 	bl	8008920 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f003 0310 	and.w	r3, r3, #16
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d008      	beq.n	8007c04 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	015a      	lsls	r2, r3, #5
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfe:	461a      	mov	r2, r3
 8007c00:	2310      	movs	r3, #16
 8007c02:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f003 0320 	and.w	r3, r3, #32
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d008      	beq.n	8007c20 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	2320      	movs	r3, #32
 8007c1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d009      	beq.n	8007c3e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c36:	461a      	mov	r2, r3
 8007c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c3c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	3301      	adds	r3, #1
 8007c42:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	085b      	lsrs	r3, r3, #1
 8007c48:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d199      	bne.n	8007b84 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f003 fb5c 	bl	800b312 <USB_ReadInterrupts>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c64:	f040 80c0 	bne.w	8007de8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f003 fb7b 	bl	800b368 <USB_ReadDevAllInEpInterrupt>
 8007c72:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007c74:	2300      	movs	r3, #0
 8007c76:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007c78:	e0b2      	b.n	8007de0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80a7 	beq.w	8007dd4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8c:	b2d2      	uxtb	r2, r2
 8007c8e:	4611      	mov	r1, r2
 8007c90:	4618      	mov	r0, r3
 8007c92:	f003 fb9f 	bl	800b3d4 <USB_ReadDevInEPInterrupt>
 8007c96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d057      	beq.n	8007d52 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca4:	f003 030f 	and.w	r3, r3, #15
 8007ca8:	2201      	movs	r2, #1
 8007caa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	43db      	mvns	r3, r3
 8007cbc:	69f9      	ldr	r1, [r7, #28]
 8007cbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	015a      	lsls	r2, r3, #5
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d132      	bne.n	8007d46 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	1a9b      	subs	r3, r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	440b      	add	r3, r1
 8007cee:	3348      	adds	r3, #72	; 0x48
 8007cf0:	6819      	ldr	r1, [r3, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	00db      	lsls	r3, r3, #3
 8007cfa:	1a9b      	subs	r3, r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4403      	add	r3, r0
 8007d00:	3344      	adds	r3, #68	; 0x44
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4419      	add	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4403      	add	r3, r0
 8007d14:	3348      	adds	r3, #72	; 0x48
 8007d16:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d113      	bne.n	8007d46 <HAL_PCD_IRQHandler+0x31c>
 8007d1e:	6879      	ldr	r1, [r7, #4]
 8007d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d22:	4613      	mov	r3, r2
 8007d24:	00db      	lsls	r3, r3, #3
 8007d26:	1a9b      	subs	r3, r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	440b      	add	r3, r1
 8007d2c:	3350      	adds	r3, #80	; 0x50
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d108      	bne.n	8007d46 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6818      	ldr	r0, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d3e:	461a      	mov	r2, r3
 8007d40:	2101      	movs	r1, #1
 8007d42:	f003 fba3 	bl	800b48c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f005 fa5c 	bl	800d20a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f003 0308 	and.w	r3, r3, #8
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d008      	beq.n	8007d6e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d68:	461a      	mov	r2, r3
 8007d6a:	2308      	movs	r3, #8
 8007d6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f003 0310 	and.w	r3, r3, #16
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d008      	beq.n	8007d8a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d84:	461a      	mov	r2, r3
 8007d86:	2310      	movs	r3, #16
 8007d88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d008      	beq.n	8007da6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da0:	461a      	mov	r2, r3
 8007da2:	2340      	movs	r3, #64	; 0x40
 8007da4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	f003 0302 	and.w	r3, r3, #2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d008      	beq.n	8007dc2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fc0c 	bl	80085ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ddc:	085b      	lsrs	r3, r3, #1
 8007dde:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f47f af49 	bne.w	8007c7a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f003 fa90 	bl	800b312 <USB_ReadInterrupts>
 8007df2:	4603      	mov	r3, r0
 8007df4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007df8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dfc:	d114      	bne.n	8007e28 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	69fa      	ldr	r2, [r7, #28]
 8007e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e0c:	f023 0301 	bic.w	r3, r3, #1
 8007e10:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f005 fa70 	bl	800d2f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	695a      	ldr	r2, [r3, #20]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007e26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f003 fa70 	bl	800b312 <USB_ReadInterrupts>
 8007e32:	4603      	mov	r3, r0
 8007e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e3c:	d112      	bne.n	8007e64 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d102      	bne.n	8007e54 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f005 fa2c 	bl	800d2ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	695a      	ldr	r2, [r3, #20]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007e62:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f003 fa52 	bl	800b312 <USB_ReadInterrupts>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e78:	f040 80c7 	bne.w	800800a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	69fa      	ldr	r2, [r7, #28]
 8007e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e8a:	f023 0301 	bic.w	r3, r3, #1
 8007e8e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2110      	movs	r1, #16
 8007e96:	4618      	mov	r0, r3
 8007e98:	f002 faf8 	bl	800a48c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ea0:	e056      	b.n	8007f50 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eae:	461a      	mov	r2, r3
 8007eb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007eb4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ec6:	0151      	lsls	r1, r2, #5
 8007ec8:	69fa      	ldr	r2, [r7, #28]
 8007eca:	440a      	add	r2, r1
 8007ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ed0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ed4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	015a      	lsls	r2, r3, #5
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	4413      	add	r3, r2
 8007ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ee6:	0151      	lsls	r1, r2, #5
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	440a      	add	r2, r1
 8007eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ef0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ef4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f02:	461a      	mov	r2, r3
 8007f04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f08:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0c:	015a      	lsls	r2, r3, #5
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	4413      	add	r3, r2
 8007f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f1a:	0151      	lsls	r1, r2, #5
 8007f1c:	69fa      	ldr	r2, [r7, #28]
 8007f1e:	440a      	add	r2, r1
 8007f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f3a:	0151      	lsls	r1, r2, #5
 8007f3c:	69fa      	ldr	r2, [r7, #28]
 8007f3e:	440a      	add	r2, r1
 8007f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f48:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d3a3      	bcc.n	8007ea2 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f68:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007f6c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d016      	beq.n	8007fa4 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f80:	69fa      	ldr	r2, [r7, #28]
 8007f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f86:	f043 030b 	orr.w	r3, r3, #11
 8007f8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f96:	69fa      	ldr	r2, [r7, #28]
 8007f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f9c:	f043 030b 	orr.w	r3, r3, #11
 8007fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8007fa2:	e015      	b.n	8007fd0 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	69fa      	ldr	r2, [r7, #28]
 8007fae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007fb6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007fba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	69fa      	ldr	r2, [r7, #28]
 8007fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fca:	f043 030b 	orr.w	r3, r3, #11
 8007fce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	69fa      	ldr	r2, [r7, #28]
 8007fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fde:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007fe2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6818      	ldr	r0, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	f003 fa49 	bl	800b48c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	695a      	ldr	r2, [r3, #20]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008008:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4618      	mov	r0, r3
 8008010:	f003 f97f 	bl	800b312 <USB_ReadInterrupts>
 8008014:	4603      	mov	r3, r0
 8008016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800801a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800801e:	d124      	bne.n	800806a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4618      	mov	r0, r3
 8008026:	f003 fa0f 	bl	800b448 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f002 fa88 	bl	800a544 <USB_GetDevSpeed>
 8008034:	4603      	mov	r3, r0
 8008036:	461a      	mov	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681c      	ldr	r4, [r3, #0]
 8008040:	f001 f932 	bl	80092a8 <HAL_RCC_GetHCLKFreq>
 8008044:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800804a:	b2db      	uxtb	r3, r3
 800804c:	461a      	mov	r2, r3
 800804e:	4620      	mov	r0, r4
 8008050:	f001 ffaa 	bl	8009fa8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f005 f900 	bl	800d25a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	695a      	ldr	r2, [r3, #20]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008068:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4618      	mov	r0, r3
 8008070:	f003 f94f 	bl	800b312 <USB_ReadInterrupts>
 8008074:	4603      	mov	r3, r0
 8008076:	f003 0308 	and.w	r3, r3, #8
 800807a:	2b08      	cmp	r3, #8
 800807c:	d10a      	bne.n	8008094 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f005 f8dd 	bl	800d23e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	695a      	ldr	r2, [r3, #20]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f002 0208 	and.w	r2, r2, #8
 8008092:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4618      	mov	r0, r3
 800809a:	f003 f93a 	bl	800b312 <USB_ReadInterrupts>
 800809e:	4603      	mov	r3, r0
 80080a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080a8:	d10f      	bne.n	80080ca <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80080ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f005 f93f 	bl	800d338 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	695a      	ldr	r2, [r3, #20]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80080c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f003 f91f 	bl	800b312 <USB_ReadInterrupts>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080de:	d10f      	bne.n	8008100 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f005 f912 	bl	800d314 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	695a      	ldr	r2, [r3, #20]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80080fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4618      	mov	r0, r3
 8008106:	f003 f904 	bl	800b312 <USB_ReadInterrupts>
 800810a:	4603      	mov	r3, r0
 800810c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008114:	d10a      	bne.n	800812c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f005 f920 	bl	800d35c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	695a      	ldr	r2, [r3, #20]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800812a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4618      	mov	r0, r3
 8008132:	f003 f8ee 	bl	800b312 <USB_ReadInterrupts>
 8008136:	4603      	mov	r3, r0
 8008138:	f003 0304 	and.w	r3, r3, #4
 800813c:	2b04      	cmp	r3, #4
 800813e:	d115      	bne.n	800816c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	f003 0304 	and.w	r3, r3, #4
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f005 f910 	bl	800d378 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6859      	ldr	r1, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	430a      	orrs	r2, r1
 8008166:	605a      	str	r2, [r3, #4]
 8008168:	e000      	b.n	800816c <HAL_PCD_IRQHandler+0x742>
      return;
 800816a:	bf00      	nop
    }
  }
}
 800816c:	3734      	adds	r7, #52	; 0x34
 800816e:	46bd      	mov	sp, r7
 8008170:	bd90      	pop	{r4, r7, pc}

08008172 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b082      	sub	sp, #8
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	460b      	mov	r3, r1
 800817c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008184:	2b01      	cmp	r3, #1
 8008186:	d101      	bne.n	800818c <HAL_PCD_SetAddress+0x1a>
 8008188:	2302      	movs	r3, #2
 800818a:	e013      	b.n	80081b4 <HAL_PCD_SetAddress+0x42>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	78fa      	ldrb	r2, [r7, #3]
 8008198:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	78fa      	ldrb	r2, [r7, #3]
 80081a2:	4611      	mov	r1, r2
 80081a4:	4618      	mov	r0, r3
 80081a6:	f003 f84f 	bl	800b248 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	4608      	mov	r0, r1
 80081c6:	4611      	mov	r1, r2
 80081c8:	461a      	mov	r2, r3
 80081ca:	4603      	mov	r3, r0
 80081cc:	70fb      	strb	r3, [r7, #3]
 80081ce:	460b      	mov	r3, r1
 80081d0:	803b      	strh	r3, [r7, #0]
 80081d2:	4613      	mov	r3, r2
 80081d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80081da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	da0f      	bge.n	8008202 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081e2:	78fb      	ldrb	r3, [r7, #3]
 80081e4:	f003 020f 	and.w	r2, r3, #15
 80081e8:	4613      	mov	r3, r2
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	1a9b      	subs	r3, r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	3338      	adds	r3, #56	; 0x38
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	4413      	add	r3, r2
 80081f6:	3304      	adds	r3, #4
 80081f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2201      	movs	r2, #1
 80081fe:	705a      	strb	r2, [r3, #1]
 8008200:	e00f      	b.n	8008222 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008202:	78fb      	ldrb	r3, [r7, #3]
 8008204:	f003 020f 	and.w	r2, r3, #15
 8008208:	4613      	mov	r3, r2
 800820a:	00db      	lsls	r3, r3, #3
 800820c:	1a9b      	subs	r3, r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	4413      	add	r3, r2
 8008218:	3304      	adds	r3, #4
 800821a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008222:	78fb      	ldrb	r3, [r7, #3]
 8008224:	f003 030f 	and.w	r3, r3, #15
 8008228:	b2da      	uxtb	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800822e:	883a      	ldrh	r2, [r7, #0]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	78ba      	ldrb	r2, [r7, #2]
 8008238:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	785b      	ldrb	r3, [r3, #1]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d004      	beq.n	800824c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	b29a      	uxth	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800824c:	78bb      	ldrb	r3, [r7, #2]
 800824e:	2b02      	cmp	r3, #2
 8008250:	d102      	bne.n	8008258 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800825e:	2b01      	cmp	r3, #1
 8008260:	d101      	bne.n	8008266 <HAL_PCD_EP_Open+0xaa>
 8008262:	2302      	movs	r3, #2
 8008264:	e00e      	b.n	8008284 <HAL_PCD_EP_Open+0xc8>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68f9      	ldr	r1, [r7, #12]
 8008274:	4618      	mov	r0, r3
 8008276:	f002 f989 	bl	800a58c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008282:	7afb      	ldrb	r3, [r7, #11]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800829c:	2b00      	cmp	r3, #0
 800829e:	da0f      	bge.n	80082c0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082a0:	78fb      	ldrb	r3, [r7, #3]
 80082a2:	f003 020f 	and.w	r2, r3, #15
 80082a6:	4613      	mov	r3, r2
 80082a8:	00db      	lsls	r3, r3, #3
 80082aa:	1a9b      	subs	r3, r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	3338      	adds	r3, #56	; 0x38
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	4413      	add	r3, r2
 80082b4:	3304      	adds	r3, #4
 80082b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2201      	movs	r2, #1
 80082bc:	705a      	strb	r2, [r3, #1]
 80082be:	e00f      	b.n	80082e0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	f003 020f 	and.w	r2, r3, #15
 80082c6:	4613      	mov	r3, r2
 80082c8:	00db      	lsls	r3, r3, #3
 80082ca:	1a9b      	subs	r3, r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	4413      	add	r3, r2
 80082d6:	3304      	adds	r3, #4
 80082d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	f003 030f 	and.w	r3, r3, #15
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d101      	bne.n	80082fa <HAL_PCD_EP_Close+0x6e>
 80082f6:	2302      	movs	r3, #2
 80082f8:	e00e      	b.n	8008318 <HAL_PCD_EP_Close+0x8c>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68f9      	ldr	r1, [r7, #12]
 8008308:	4618      	mov	r0, r3
 800830a:	f002 f9c5 	bl	800a698 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	607a      	str	r2, [r7, #4]
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	460b      	mov	r3, r1
 800832e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008330:	7afb      	ldrb	r3, [r7, #11]
 8008332:	f003 020f 	and.w	r2, r3, #15
 8008336:	4613      	mov	r3, r2
 8008338:	00db      	lsls	r3, r3, #3
 800833a:	1a9b      	subs	r3, r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	4413      	add	r3, r2
 8008346:	3304      	adds	r3, #4
 8008348:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2200      	movs	r2, #0
 800835a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2200      	movs	r2, #0
 8008360:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008362:	7afb      	ldrb	r3, [r7, #11]
 8008364:	f003 030f 	and.w	r3, r3, #15
 8008368:	b2da      	uxtb	r2, r3
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d102      	bne.n	800837c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800837c:	7afb      	ldrb	r3, [r7, #11]
 800837e:	f003 030f 	and.w	r3, r3, #15
 8008382:	2b00      	cmp	r3, #0
 8008384:	d109      	bne.n	800839a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6818      	ldr	r0, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	b2db      	uxtb	r3, r3
 8008390:	461a      	mov	r2, r3
 8008392:	6979      	ldr	r1, [r7, #20]
 8008394:	f002 fca0 	bl	800acd8 <USB_EP0StartXfer>
 8008398:	e008      	b.n	80083ac <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6818      	ldr	r0, [r3, #0]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	461a      	mov	r2, r3
 80083a6:	6979      	ldr	r1, [r7, #20]
 80083a8:	f002 fa52 	bl	800a850 <USB_EPStartXfer>
  }

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b083      	sub	sp, #12
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	460b      	mov	r3, r1
 80083c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80083c2:	78fb      	ldrb	r3, [r7, #3]
 80083c4:	f003 020f 	and.w	r2, r3, #15
 80083c8:	6879      	ldr	r1, [r7, #4]
 80083ca:	4613      	mov	r3, r2
 80083cc:	00db      	lsls	r3, r3, #3
 80083ce:	1a9b      	subs	r3, r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	440b      	add	r3, r1
 80083d4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80083d8:	681b      	ldr	r3, [r3, #0]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	bc80      	pop	{r7}
 80083e2:	4770      	bx	lr

080083e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	607a      	str	r2, [r7, #4]
 80083ee:	603b      	str	r3, [r7, #0]
 80083f0:	460b      	mov	r3, r1
 80083f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083f4:	7afb      	ldrb	r3, [r7, #11]
 80083f6:	f003 020f 	and.w	r2, r3, #15
 80083fa:	4613      	mov	r3, r2
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	1a9b      	subs	r3, r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	3338      	adds	r3, #56	; 0x38
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	4413      	add	r3, r2
 8008408:	3304      	adds	r3, #4
 800840a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	2200      	movs	r2, #0
 800841c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2201      	movs	r2, #1
 8008422:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008424:	7afb      	ldrb	r3, [r7, #11]
 8008426:	f003 030f 	and.w	r3, r3, #15
 800842a:	b2da      	uxtb	r2, r3
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d102      	bne.n	800843e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800843e:	7afb      	ldrb	r3, [r7, #11]
 8008440:	f003 030f 	and.w	r3, r3, #15
 8008444:	2b00      	cmp	r3, #0
 8008446:	d109      	bne.n	800845c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6818      	ldr	r0, [r3, #0]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	b2db      	uxtb	r3, r3
 8008452:	461a      	mov	r2, r3
 8008454:	6979      	ldr	r1, [r7, #20]
 8008456:	f002 fc3f 	bl	800acd8 <USB_EP0StartXfer>
 800845a:	e008      	b.n	800846e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	461a      	mov	r2, r3
 8008468:	6979      	ldr	r1, [r7, #20]
 800846a:	f002 f9f1 	bl	800a850 <USB_EPStartXfer>
  }

  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008484:	78fb      	ldrb	r3, [r7, #3]
 8008486:	f003 020f 	and.w	r2, r3, #15
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	429a      	cmp	r2, r3
 8008490:	d901      	bls.n	8008496 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e050      	b.n	8008538 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800849a:	2b00      	cmp	r3, #0
 800849c:	da0f      	bge.n	80084be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800849e:	78fb      	ldrb	r3, [r7, #3]
 80084a0:	f003 020f 	and.w	r2, r3, #15
 80084a4:	4613      	mov	r3, r2
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	1a9b      	subs	r3, r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	3338      	adds	r3, #56	; 0x38
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	4413      	add	r3, r2
 80084b2:	3304      	adds	r3, #4
 80084b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2201      	movs	r2, #1
 80084ba:	705a      	strb	r2, [r3, #1]
 80084bc:	e00d      	b.n	80084da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80084be:	78fa      	ldrb	r2, [r7, #3]
 80084c0:	4613      	mov	r3, r2
 80084c2:	00db      	lsls	r3, r3, #3
 80084c4:	1a9b      	subs	r3, r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	4413      	add	r3, r2
 80084d0:	3304      	adds	r3, #4
 80084d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2201      	movs	r2, #1
 80084de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	f003 030f 	and.w	r3, r3, #15
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d101      	bne.n	80084fa <HAL_PCD_EP_SetStall+0x82>
 80084f6:	2302      	movs	r3, #2
 80084f8:	e01e      	b.n	8008538 <HAL_PCD_EP_SetStall+0xc0>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68f9      	ldr	r1, [r7, #12]
 8008508:	4618      	mov	r0, r3
 800850a:	f002 fdcb 	bl	800b0a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	f003 030f 	and.w	r3, r3, #15
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10a      	bne.n	800852e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6818      	ldr	r0, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	b2d9      	uxtb	r1, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008528:	461a      	mov	r2, r3
 800852a:	f002 ffaf 	bl	800b48c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	460b      	mov	r3, r1
 800854a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800854c:	78fb      	ldrb	r3, [r7, #3]
 800854e:	f003 020f 	and.w	r2, r3, #15
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	429a      	cmp	r2, r3
 8008558:	d901      	bls.n	800855e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e042      	b.n	80085e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800855e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008562:	2b00      	cmp	r3, #0
 8008564:	da0f      	bge.n	8008586 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008566:	78fb      	ldrb	r3, [r7, #3]
 8008568:	f003 020f 	and.w	r2, r3, #15
 800856c:	4613      	mov	r3, r2
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	1a9b      	subs	r3, r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	3338      	adds	r3, #56	; 0x38
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	4413      	add	r3, r2
 800857a:	3304      	adds	r3, #4
 800857c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2201      	movs	r2, #1
 8008582:	705a      	strb	r2, [r3, #1]
 8008584:	e00f      	b.n	80085a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008586:	78fb      	ldrb	r3, [r7, #3]
 8008588:	f003 020f 	and.w	r2, r3, #15
 800858c:	4613      	mov	r3, r2
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	1a9b      	subs	r3, r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	4413      	add	r3, r2
 800859c:	3304      	adds	r3, #4
 800859e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80085ac:	78fb      	ldrb	r3, [r7, #3]
 80085ae:	f003 030f 	and.w	r3, r3, #15
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d101      	bne.n	80085c6 <HAL_PCD_EP_ClrStall+0x86>
 80085c2:	2302      	movs	r3, #2
 80085c4:	e00e      	b.n	80085e4 <HAL_PCD_EP_ClrStall+0xa4>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68f9      	ldr	r1, [r7, #12]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f002 fdd2 	bl	800b17e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b08a      	sub	sp, #40	; 0x28
 80085f0:	af02      	add	r7, sp, #8
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	4613      	mov	r3, r2
 8008604:	00db      	lsls	r3, r3, #3
 8008606:	1a9b      	subs	r3, r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	3338      	adds	r3, #56	; 0x38
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	4413      	add	r3, r2
 8008610:	3304      	adds	r3, #4
 8008612:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	699a      	ldr	r2, [r3, #24]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	429a      	cmp	r2, r3
 800861e:	d901      	bls.n	8008624 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e06c      	b.n	80086fe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	695a      	ldr	r2, [r3, #20]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	69fa      	ldr	r2, [r7, #28]
 8008636:	429a      	cmp	r2, r3
 8008638:	d902      	bls.n	8008640 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	3303      	adds	r3, #3
 8008644:	089b      	lsrs	r3, r3, #2
 8008646:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008648:	e02b      	b.n	80086a2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	695a      	ldr	r2, [r3, #20]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	69fa      	ldr	r2, [r7, #28]
 800865c:	429a      	cmp	r2, r3
 800865e:	d902      	bls.n	8008666 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	3303      	adds	r3, #3
 800866a:	089b      	lsrs	r3, r3, #2
 800866c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	68d9      	ldr	r1, [r3, #12]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	b2da      	uxtb	r2, r3
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800867e:	b2db      	uxtb	r3, r3
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	4603      	mov	r3, r0
 8008684:	6978      	ldr	r0, [r7, #20]
 8008686:	f002 fc79 	bl	800af7c <USB_WritePacket>

    ep->xfer_buff  += len;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	68da      	ldr	r2, [r3, #12]
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	441a      	add	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	699a      	ldr	r2, [r3, #24]
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	441a      	add	r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d809      	bhi.n	80086cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	699a      	ldr	r2, [r3, #24]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d203      	bcs.n	80086cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1be      	bne.n	800864a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	695a      	ldr	r2, [r3, #20]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d811      	bhi.n	80086fc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	f003 030f 	and.w	r3, r3, #15
 80086de:	2201      	movs	r2, #1
 80086e0:	fa02 f303 	lsl.w	r3, r2, r3
 80086e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	43db      	mvns	r3, r3
 80086f2:	6939      	ldr	r1, [r7, #16]
 80086f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086f8:	4013      	ands	r3, r2
 80086fa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3720      	adds	r7, #32
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	333c      	adds	r3, #60	; 0x3c
 8008720:	3304      	adds	r3, #4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	4413      	add	r3, r2
 800872e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	2b01      	cmp	r3, #1
 800873c:	f040 80a0 	bne.w	8008880 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f003 0308 	and.w	r3, r3, #8
 8008746:	2b00      	cmp	r3, #0
 8008748:	d015      	beq.n	8008776 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	4a72      	ldr	r2, [pc, #456]	; (8008918 <PCD_EP_OutXfrComplete_int+0x210>)
 800874e:	4293      	cmp	r3, r2
 8008750:	f240 80dd 	bls.w	800890e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 80d7 	beq.w	800890e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	4413      	add	r3, r2
 8008768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876c:	461a      	mov	r2, r3
 800876e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008772:	6093      	str	r3, [r2, #8]
 8008774:	e0cb      	b.n	800890e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	f003 0320 	and.w	r3, r3, #32
 800877c:	2b00      	cmp	r3, #0
 800877e:	d009      	beq.n	8008794 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	4413      	add	r3, r2
 8008788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800878c:	461a      	mov	r2, r3
 800878e:	2320      	movs	r3, #32
 8008790:	6093      	str	r3, [r2, #8]
 8008792:	e0bc      	b.n	800890e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800879a:	2b00      	cmp	r3, #0
 800879c:	f040 80b7 	bne.w	800890e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4a5d      	ldr	r2, [pc, #372]	; (8008918 <PCD_EP_OutXfrComplete_int+0x210>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d90f      	bls.n	80087c8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00a      	beq.n	80087c8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087be:	461a      	mov	r2, r3
 80087c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087c4:	6093      	str	r3, [r2, #8]
 80087c6:	e0a2      	b.n	800890e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80087c8:	6879      	ldr	r1, [r7, #4]
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	4613      	mov	r3, r2
 80087ce:	00db      	lsls	r3, r3, #3
 80087d0:	1a9b      	subs	r3, r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	440b      	add	r3, r1
 80087d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80087da:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	0159      	lsls	r1, r3, #5
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	440b      	add	r3, r1
 80087e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80087ee:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	4613      	mov	r3, r2
 80087f6:	00db      	lsls	r3, r3, #3
 80087f8:	1a9b      	subs	r3, r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4403      	add	r3, r0
 80087fe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008802:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	4613      	mov	r3, r2
 800880a:	00db      	lsls	r3, r3, #3
 800880c:	1a9b      	subs	r3, r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	440b      	add	r3, r1
 8008812:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008816:	6819      	ldr	r1, [r3, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	4613      	mov	r3, r2
 800881e:	00db      	lsls	r3, r3, #3
 8008820:	1a9b      	subs	r3, r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4403      	add	r3, r0
 8008826:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4419      	add	r1, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	4613      	mov	r3, r2
 8008834:	00db      	lsls	r3, r3, #3
 8008836:	1a9b      	subs	r3, r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4403      	add	r3, r0
 800883c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008840:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d114      	bne.n	8008872 <PCD_EP_OutXfrComplete_int+0x16a>
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	4613      	mov	r3, r2
 800884e:	00db      	lsls	r3, r3, #3
 8008850:	1a9b      	subs	r3, r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d108      	bne.n	8008872 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6818      	ldr	r0, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800886a:	461a      	mov	r2, r3
 800886c:	2101      	movs	r1, #1
 800886e:	f002 fe0d 	bl	800b48c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	b2db      	uxtb	r3, r3
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f004 fcab 	bl	800d1d4 <HAL_PCD_DataOutStageCallback>
 800887e:	e046      	b.n	800890e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4a26      	ldr	r2, [pc, #152]	; (800891c <PCD_EP_OutXfrComplete_int+0x214>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d124      	bne.n	80088d2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00a      	beq.n	80088a8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	4413      	add	r3, r2
 800889a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800889e:	461a      	mov	r2, r3
 80088a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088a4:	6093      	str	r3, [r2, #8]
 80088a6:	e032      	b.n	800890e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f003 0320 	and.w	r3, r3, #32
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d008      	beq.n	80088c4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088be:	461a      	mov	r2, r3
 80088c0:	2320      	movs	r3, #32
 80088c2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f004 fc82 	bl	800d1d4 <HAL_PCD_DataOutStageCallback>
 80088d0:	e01d      	b.n	800890e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d114      	bne.n	8008902 <PCD_EP_OutXfrComplete_int+0x1fa>
 80088d8:	6879      	ldr	r1, [r7, #4]
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	4613      	mov	r3, r2
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	1a9b      	subs	r3, r3, r2
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	440b      	add	r3, r1
 80088e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d108      	bne.n	8008902 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6818      	ldr	r0, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80088fa:	461a      	mov	r2, r3
 80088fc:	2100      	movs	r1, #0
 80088fe:	f002 fdc5 	bl	800b48c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	b2db      	uxtb	r3, r3
 8008906:	4619      	mov	r1, r3
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f004 fc63 	bl	800d1d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	4f54300a 	.word	0x4f54300a
 800891c:	4f54310a 	.word	0x4f54310a

08008920 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	333c      	adds	r3, #60	; 0x3c
 8008938:	3304      	adds	r3, #4
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	4413      	add	r3, r2
 8008946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4a15      	ldr	r2, [pc, #84]	; (80089a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d90e      	bls.n	8008974 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800895c:	2b00      	cmp	r3, #0
 800895e:	d009      	beq.n	8008974 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	4413      	add	r3, r2
 8008968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896c:	461a      	mov	r2, r3
 800896e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008972:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f004 fc1b 	bl	800d1b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	4a0a      	ldr	r2, [pc, #40]	; (80089a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d90c      	bls.n	800899c <PCD_EP_OutSetupPacket_int+0x7c>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d108      	bne.n	800899c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6818      	ldr	r0, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008994:	461a      	mov	r2, r3
 8008996:	2101      	movs	r1, #1
 8008998:	f002 fd78 	bl	800b48c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	4f54300a 	.word	0x4f54300a

080089ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
 80089b8:	4613      	mov	r3, r2
 80089ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80089c4:	78fb      	ldrb	r3, [r7, #3]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d107      	bne.n	80089da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80089ca:	883b      	ldrh	r3, [r7, #0]
 80089cc:	0419      	lsls	r1, r3, #16
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	430a      	orrs	r2, r1
 80089d6:	629a      	str	r2, [r3, #40]	; 0x28
 80089d8:	e028      	b.n	8008a2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e0:	0c1b      	lsrs	r3, r3, #16
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	4413      	add	r3, r2
 80089e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80089e8:	2300      	movs	r3, #0
 80089ea:	73fb      	strb	r3, [r7, #15]
 80089ec:	e00d      	b.n	8008a0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
 80089f4:	3340      	adds	r3, #64	; 0x40
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	0c1b      	lsrs	r3, r3, #16
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	4413      	add	r3, r2
 8008a02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	3301      	adds	r3, #1
 8008a08:	73fb      	strb	r3, [r7, #15]
 8008a0a:	7bfa      	ldrb	r2, [r7, #15]
 8008a0c:	78fb      	ldrb	r3, [r7, #3]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d3ec      	bcc.n	80089ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008a14:	883b      	ldrh	r3, [r7, #0]
 8008a16:	0418      	lsls	r0, r3, #16
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6819      	ldr	r1, [r3, #0]
 8008a1c:	78fb      	ldrb	r3, [r7, #3]
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	4302      	orrs	r2, r0
 8008a24:	3340      	adds	r3, #64	; 0x40
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	440b      	add	r3, r1
 8008a2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3714      	adds	r7, #20
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bc80      	pop	{r7}
 8008a36:	4770      	bx	lr

08008a38 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	460b      	mov	r3, r1
 8008a42:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	887a      	ldrh	r2, [r7, #2]
 8008a4a:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bc80      	pop	{r7}
 8008a56:	4770      	bx	lr

08008a58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b08a      	sub	sp, #40	; 0x28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e237      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d050      	beq.n	8008b18 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008a76:	4ba3      	ldr	r3, [pc, #652]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f003 030c 	and.w	r3, r3, #12
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d00c      	beq.n	8008a9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a82:	4ba0      	ldr	r3, [pc, #640]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008a8a:	2b08      	cmp	r3, #8
 8008a8c:	d112      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a8e:	4b9d      	ldr	r3, [pc, #628]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a9a:	d10b      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a9c:	4b99      	ldr	r3, [pc, #612]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d036      	beq.n	8008b16 <HAL_RCC_OscConfig+0xbe>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d132      	bne.n	8008b16 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e212      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	4b93      	ldr	r3, [pc, #588]	; (8008d08 <HAL_RCC_OscConfig+0x2b0>)
 8008aba:	b2d2      	uxtb	r2, r2
 8008abc:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d013      	beq.n	8008aee <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ac6:	f7fd f82d 	bl	8005b24 <HAL_GetTick>
 8008aca:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008acc:	e008      	b.n	8008ae0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ace:	f7fd f829 	bl	8005b24 <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	2b64      	cmp	r3, #100	; 0x64
 8008ada:	d901      	bls.n	8008ae0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e1fc      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ae0:	4b88      	ldr	r3, [pc, #544]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d0f0      	beq.n	8008ace <HAL_RCC_OscConfig+0x76>
 8008aec:	e014      	b.n	8008b18 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aee:	f7fd f819 	bl	8005b24 <HAL_GetTick>
 8008af2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008af4:	e008      	b.n	8008b08 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008af6:	f7fd f815 	bl	8005b24 <HAL_GetTick>
 8008afa:	4602      	mov	r2, r0
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	2b64      	cmp	r3, #100	; 0x64
 8008b02:	d901      	bls.n	8008b08 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e1e8      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b08:	4b7e      	ldr	r3, [pc, #504]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1f0      	bne.n	8008af6 <HAL_RCC_OscConfig+0x9e>
 8008b14:	e000      	b.n	8008b18 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b16:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d077      	beq.n	8008c14 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b24:	4b77      	ldr	r3, [pc, #476]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f003 030c 	and.w	r3, r3, #12
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b30:	4b74      	ldr	r3, [pc, #464]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d126      	bne.n	8008b8a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b3c:	4b71      	ldr	r3, [pc, #452]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d120      	bne.n	8008b8a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b48:	4b6e      	ldr	r3, [pc, #440]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0302 	and.w	r3, r3, #2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d005      	beq.n	8008b60 <HAL_RCC_OscConfig+0x108>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d001      	beq.n	8008b60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e1bc      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b60:	4b68      	ldr	r3, [pc, #416]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	21f8      	movs	r1, #248	; 0xf8
 8008b6e:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b70:	69b9      	ldr	r1, [r7, #24]
 8008b72:	fa91 f1a1 	rbit	r1, r1
 8008b76:	6179      	str	r1, [r7, #20]
  return result;
 8008b78:	6979      	ldr	r1, [r7, #20]
 8008b7a:	fab1 f181 	clz	r1, r1
 8008b7e:	b2c9      	uxtb	r1, r1
 8008b80:	408b      	lsls	r3, r1
 8008b82:	4960      	ldr	r1, [pc, #384]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008b84:	4313      	orrs	r3, r2
 8008b86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b88:	e044      	b.n	8008c14 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d02a      	beq.n	8008be8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b92:	4b5e      	ldr	r3, [pc, #376]	; (8008d0c <HAL_RCC_OscConfig+0x2b4>)
 8008b94:	2201      	movs	r2, #1
 8008b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b98:	f7fc ffc4 	bl	8005b24 <HAL_GetTick>
 8008b9c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b9e:	e008      	b.n	8008bb2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ba0:	f7fc ffc0 	bl	8005b24 <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	6a3b      	ldr	r3, [r7, #32]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d901      	bls.n	8008bb2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e193      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bb2:	4b54      	ldr	r3, [pc, #336]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d0f0      	beq.n	8008ba0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bbe:	4b51      	ldr	r3, [pc, #324]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	21f8      	movs	r1, #248	; 0xf8
 8008bcc:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bce:	6939      	ldr	r1, [r7, #16]
 8008bd0:	fa91 f1a1 	rbit	r1, r1
 8008bd4:	60f9      	str	r1, [r7, #12]
  return result;
 8008bd6:	68f9      	ldr	r1, [r7, #12]
 8008bd8:	fab1 f181 	clz	r1, r1
 8008bdc:	b2c9      	uxtb	r1, r1
 8008bde:	408b      	lsls	r3, r1
 8008be0:	4948      	ldr	r1, [pc, #288]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008be2:	4313      	orrs	r3, r2
 8008be4:	600b      	str	r3, [r1, #0]
 8008be6:	e015      	b.n	8008c14 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008be8:	4b48      	ldr	r3, [pc, #288]	; (8008d0c <HAL_RCC_OscConfig+0x2b4>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bee:	f7fc ff99 	bl	8005b24 <HAL_GetTick>
 8008bf2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bf4:	e008      	b.n	8008c08 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bf6:	f7fc ff95 	bl	8005b24 <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d901      	bls.n	8008c08 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e168      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c08:	4b3e      	ldr	r3, [pc, #248]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0302 	and.w	r3, r3, #2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1f0      	bne.n	8008bf6 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0308 	and.w	r3, r3, #8
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d030      	beq.n	8008c82 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d016      	beq.n	8008c56 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c28:	4b39      	ldr	r3, [pc, #228]	; (8008d10 <HAL_RCC_OscConfig+0x2b8>)
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c2e:	f7fc ff79 	bl	8005b24 <HAL_GetTick>
 8008c32:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c34:	e008      	b.n	8008c48 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c36:	f7fc ff75 	bl	8005b24 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	6a3b      	ldr	r3, [r7, #32]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d901      	bls.n	8008c48 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e148      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c48:	4b2e      	ldr	r3, [pc, #184]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0f0      	beq.n	8008c36 <HAL_RCC_OscConfig+0x1de>
 8008c54:	e015      	b.n	8008c82 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c56:	4b2e      	ldr	r3, [pc, #184]	; (8008d10 <HAL_RCC_OscConfig+0x2b8>)
 8008c58:	2200      	movs	r2, #0
 8008c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c5c:	f7fc ff62 	bl	8005b24 <HAL_GetTick>
 8008c60:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c62:	e008      	b.n	8008c76 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c64:	f7fc ff5e 	bl	8005b24 <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d901      	bls.n	8008c76 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e131      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c76:	4b23      	ldr	r3, [pc, #140]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1f0      	bne.n	8008c64 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 0304 	and.w	r3, r3, #4
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 8088 	beq.w	8008da0 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c90:	2300      	movs	r3, #0
 8008c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c96:	4b1b      	ldr	r3, [pc, #108]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d110      	bne.n	8008cc4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60bb      	str	r3, [r7, #8]
 8008ca6:	4b17      	ldr	r3, [pc, #92]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008caa:	4a16      	ldr	r2, [pc, #88]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8008cb2:	4b14      	ldr	r3, [pc, #80]	; (8008d04 <HAL_RCC_OscConfig+0x2ac>)
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cba:	60bb      	str	r3, [r7, #8]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008cc4:	4b13      	ldr	r3, [pc, #76]	; (8008d14 <HAL_RCC_OscConfig+0x2bc>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a12      	ldr	r2, [pc, #72]	; (8008d14 <HAL_RCC_OscConfig+0x2bc>)
 8008cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cce:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cd0:	4b10      	ldr	r3, [pc, #64]	; (8008d14 <HAL_RCC_OscConfig+0x2bc>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d123      	bne.n	8008d24 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008cdc:	4b0d      	ldr	r3, [pc, #52]	; (8008d14 <HAL_RCC_OscConfig+0x2bc>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a0c      	ldr	r2, [pc, #48]	; (8008d14 <HAL_RCC_OscConfig+0x2bc>)
 8008ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ce6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ce8:	f7fc ff1c 	bl	8005b24 <HAL_GetTick>
 8008cec:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cee:	e013      	b.n	8008d18 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cf0:	f7fc ff18 	bl	8005b24 <HAL_GetTick>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d90c      	bls.n	8008d18 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e0eb      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
 8008d02:	bf00      	nop
 8008d04:	40023800 	.word	0x40023800
 8008d08:	40023802 	.word	0x40023802
 8008d0c:	42470000 	.word	0x42470000
 8008d10:	42470e80 	.word	0x42470e80
 8008d14:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d18:	4b72      	ldr	r3, [pc, #456]	; (8008ee4 <HAL_RCC_OscConfig+0x48c>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0e5      	beq.n	8008cf0 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689a      	ldr	r2, [r3, #8]
 8008d28:	4b6f      	ldr	r3, [pc, #444]	; (8008ee8 <HAL_RCC_OscConfig+0x490>)
 8008d2a:	b2d2      	uxtb	r2, r2
 8008d2c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d015      	beq.n	8008d62 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d36:	f7fc fef5 	bl	8005b24 <HAL_GetTick>
 8008d3a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d3c:	e00a      	b.n	8008d54 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d3e:	f7fc fef1 	bl	8005b24 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	6a3b      	ldr	r3, [r7, #32]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d901      	bls.n	8008d54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e0c2      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d54:	4b65      	ldr	r3, [pc, #404]	; (8008eec <HAL_RCC_OscConfig+0x494>)
 8008d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0ee      	beq.n	8008d3e <HAL_RCC_OscConfig+0x2e6>
 8008d60:	e014      	b.n	8008d8c <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d62:	f7fc fedf 	bl	8005b24 <HAL_GetTick>
 8008d66:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d68:	e00a      	b.n	8008d80 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d6a:	f7fc fedb 	bl	8005b24 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d901      	bls.n	8008d80 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e0ac      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d80:	4b5a      	ldr	r3, [pc, #360]	; (8008eec <HAL_RCC_OscConfig+0x494>)
 8008d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1ee      	bne.n	8008d6a <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d105      	bne.n	8008da0 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d94:	4b55      	ldr	r3, [pc, #340]	; (8008eec <HAL_RCC_OscConfig+0x494>)
 8008d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d98:	4a54      	ldr	r2, [pc, #336]	; (8008eec <HAL_RCC_OscConfig+0x494>)
 8008d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 8097 	beq.w	8008ed8 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008daa:	4b50      	ldr	r3, [pc, #320]	; (8008eec <HAL_RCC_OscConfig+0x494>)
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	f003 030c 	and.w	r3, r3, #12
 8008db2:	2b08      	cmp	r3, #8
 8008db4:	d061      	beq.n	8008e7a <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d146      	bne.n	8008e4c <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dbe:	4b4c      	ldr	r3, [pc, #304]	; (8008ef0 <HAL_RCC_OscConfig+0x498>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dc4:	f7fc feae 	bl	8005b24 <HAL_GetTick>
 8008dc8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dca:	e008      	b.n	8008dde <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008dcc:	f7fc feaa 	bl	8005b24 <HAL_GetTick>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	2b64      	cmp	r3, #100	; 0x64
 8008dd8:	d901      	bls.n	8008dde <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e07d      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dde:	4b43      	ldr	r3, [pc, #268]	; (8008eec <HAL_RCC_OscConfig+0x494>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1f0      	bne.n	8008dcc <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008dea:	4b40      	ldr	r3, [pc, #256]	; (8008eec <HAL_RCC_OscConfig+0x494>)
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	4b41      	ldr	r3, [pc, #260]	; (8008ef4 <HAL_RCC_OscConfig+0x49c>)
 8008df0:	4013      	ands	r3, r2
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	69d1      	ldr	r1, [r2, #28]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	6a12      	ldr	r2, [r2, #32]
 8008dfa:	4311      	orrs	r1, r2
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e00:	0192      	lsls	r2, r2, #6
 8008e02:	4311      	orrs	r1, r2
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008e08:	0612      	lsls	r2, r2, #24
 8008e0a:	4311      	orrs	r1, r2
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008e10:	0852      	lsrs	r2, r2, #1
 8008e12:	3a01      	subs	r2, #1
 8008e14:	0412      	lsls	r2, r2, #16
 8008e16:	430a      	orrs	r2, r1
 8008e18:	4934      	ldr	r1, [pc, #208]	; (8008eec <HAL_RCC_OscConfig+0x494>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e1e:	4b34      	ldr	r3, [pc, #208]	; (8008ef0 <HAL_RCC_OscConfig+0x498>)
 8008e20:	2201      	movs	r2, #1
 8008e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e24:	f7fc fe7e 	bl	8005b24 <HAL_GetTick>
 8008e28:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e2a:	e008      	b.n	8008e3e <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e2c:	f7fc fe7a 	bl	8005b24 <HAL_GetTick>
 8008e30:	4602      	mov	r2, r0
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	2b64      	cmp	r3, #100	; 0x64
 8008e38:	d901      	bls.n	8008e3e <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e04d      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e3e:	4b2b      	ldr	r3, [pc, #172]	; (8008eec <HAL_RCC_OscConfig+0x494>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d0f0      	beq.n	8008e2c <HAL_RCC_OscConfig+0x3d4>
 8008e4a:	e045      	b.n	8008ed8 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e4c:	4b28      	ldr	r3, [pc, #160]	; (8008ef0 <HAL_RCC_OscConfig+0x498>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e52:	f7fc fe67 	bl	8005b24 <HAL_GetTick>
 8008e56:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e58:	e008      	b.n	8008e6c <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e5a:	f7fc fe63 	bl	8005b24 <HAL_GetTick>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	6a3b      	ldr	r3, [r7, #32]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	2b64      	cmp	r3, #100	; 0x64
 8008e66:	d901      	bls.n	8008e6c <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e036      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e6c:	4b1f      	ldr	r3, [pc, #124]	; (8008eec <HAL_RCC_OscConfig+0x494>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1f0      	bne.n	8008e5a <HAL_RCC_OscConfig+0x402>
 8008e78:	e02e      	b.n	8008ed8 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d101      	bne.n	8008e86 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e029      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8008e86:	4b19      	ldr	r3, [pc, #100]	; (8008eec <HAL_RCC_OscConfig+0x494>)
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d11c      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d115      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	099b      	lsrs	r3, r3, #6
 8008eac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d10d      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d106      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d001      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e000      	b.n	8008eda <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3728      	adds	r7, #40	; 0x28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	40007000 	.word	0x40007000
 8008ee8:	40023870 	.word	0x40023870
 8008eec:	40023800 	.word	0x40023800
 8008ef0:	42470060 	.word	0x42470060
 8008ef4:	f0bc8000 	.word	0xf0bc8000

08008ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e0d2      	b.n	80090b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f0c:	4b6b      	ldr	r3, [pc, #428]	; (80090bc <HAL_RCC_ClockConfig+0x1c4>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 030f 	and.w	r3, r3, #15
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d90c      	bls.n	8008f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f1a:	4b68      	ldr	r3, [pc, #416]	; (80090bc <HAL_RCC_ClockConfig+0x1c4>)
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	b2d2      	uxtb	r2, r2
 8008f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f22:	4b66      	ldr	r3, [pc, #408]	; (80090bc <HAL_RCC_ClockConfig+0x1c4>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 030f 	and.w	r3, r3, #15
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d001      	beq.n	8008f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e0be      	b.n	80090b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0302 	and.w	r3, r3, #2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d020      	beq.n	8008f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0304 	and.w	r3, r3, #4
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d005      	beq.n	8008f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f4c:	4b5c      	ldr	r3, [pc, #368]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	4a5b      	ldr	r2, [pc, #364]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008f52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008f56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 0308 	and.w	r3, r3, #8
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d005      	beq.n	8008f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8008f64:	4b56      	ldr	r3, [pc, #344]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	4a55      	ldr	r2, [pc, #340]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008f6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f70:	4b53      	ldr	r3, [pc, #332]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	4950      	ldr	r1, [pc, #320]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0301 	and.w	r3, r3, #1
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d040      	beq.n	8009010 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d107      	bne.n	8008fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f96:	4b4a      	ldr	r3, [pc, #296]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d115      	bne.n	8008fce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e085      	b.n	80090b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d107      	bne.n	8008fbe <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fae:	4b44      	ldr	r3, [pc, #272]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d109      	bne.n	8008fce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e079      	b.n	80090b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fbe:	4b40      	ldr	r3, [pc, #256]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 0302 	and.w	r3, r3, #2
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e071      	b.n	80090b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008fce:	4b3c      	ldr	r3, [pc, #240]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f023 0203 	bic.w	r2, r3, #3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	4939      	ldr	r1, [pc, #228]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008fe0:	f7fc fda0 	bl	8005b24 <HAL_GetTick>
 8008fe4:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fe6:	e00a      	b.n	8008ffe <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fe8:	f7fc fd9c 	bl	8005b24 <HAL_GetTick>
 8008fec:	4602      	mov	r2, r0
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d901      	bls.n	8008ffe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	e059      	b.n	80090b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ffe:	4b30      	ldr	r3, [pc, #192]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f003 020c 	and.w	r2, r3, #12
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	429a      	cmp	r2, r3
 800900e:	d1eb      	bne.n	8008fe8 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009010:	4b2a      	ldr	r3, [pc, #168]	; (80090bc <HAL_RCC_ClockConfig+0x1c4>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 030f 	and.w	r3, r3, #15
 8009018:	683a      	ldr	r2, [r7, #0]
 800901a:	429a      	cmp	r2, r3
 800901c:	d20c      	bcs.n	8009038 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800901e:	4b27      	ldr	r3, [pc, #156]	; (80090bc <HAL_RCC_ClockConfig+0x1c4>)
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	b2d2      	uxtb	r2, r2
 8009024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009026:	4b25      	ldr	r3, [pc, #148]	; (80090bc <HAL_RCC_ClockConfig+0x1c4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 030f 	and.w	r3, r3, #15
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	429a      	cmp	r2, r3
 8009032:	d001      	beq.n	8009038 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e03c      	b.n	80090b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0304 	and.w	r3, r3, #4
 8009040:	2b00      	cmp	r3, #0
 8009042:	d008      	beq.n	8009056 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009044:	4b1e      	ldr	r3, [pc, #120]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	491b      	ldr	r1, [pc, #108]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009052:	4313      	orrs	r3, r2
 8009054:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0308 	and.w	r3, r3, #8
 800905e:	2b00      	cmp	r3, #0
 8009060:	d009      	beq.n	8009076 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009062:	4b17      	ldr	r3, [pc, #92]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	00db      	lsls	r3, r3, #3
 8009070:	4913      	ldr	r1, [pc, #76]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 8009072:	4313      	orrs	r3, r2
 8009074:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8009076:	f000 f837 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800907a:	4601      	mov	r1, r0
 800907c:	4b10      	ldr	r3, [pc, #64]	; (80090c0 <HAL_RCC_ClockConfig+0x1c8>)
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009084:	22f0      	movs	r2, #240	; 0xf0
 8009086:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	fa92 f2a2 	rbit	r2, r2
 800908e:	60fa      	str	r2, [r7, #12]
  return result;
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	fab2 f282 	clz	r2, r2
 8009096:	b2d2      	uxtb	r2, r2
 8009098:	40d3      	lsrs	r3, r2
 800909a:	4a0a      	ldr	r2, [pc, #40]	; (80090c4 <HAL_RCC_ClockConfig+0x1cc>)
 800909c:	5cd3      	ldrb	r3, [r2, r3]
 800909e:	fa21 f303 	lsr.w	r3, r1, r3
 80090a2:	4a09      	ldr	r2, [pc, #36]	; (80090c8 <HAL_RCC_ClockConfig+0x1d0>)
 80090a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80090a6:	4b09      	ldr	r3, [pc, #36]	; (80090cc <HAL_RCC_ClockConfig+0x1d4>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fc fcf8 	bl	8005aa0 <HAL_InitTick>

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3718      	adds	r7, #24
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	40023c00 	.word	0x40023c00
 80090c0:	40023800 	.word	0x40023800
 80090c4:	0801306c 	.word	0x0801306c
 80090c8:	20000024 	.word	0x20000024
 80090cc:	20000028 	.word	0x20000028

080090d0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80090d0:	b480      	push	{r7}
 80090d2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80090d4:	4b03      	ldr	r3, [pc, #12]	; (80090e4 <HAL_RCC_EnableCSS+0x14>)
 80090d6:	2201      	movs	r2, #1
 80090d8:	601a      	str	r2, [r3, #0]
}
 80090da:	bf00      	nop
 80090dc:	46bd      	mov	sp, r7
 80090de:	bc80      	pop	{r7}
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	4247004c 	.word	0x4247004c

080090e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80090f0:	2300      	movs	r3, #0
 80090f2:	607b      	str	r3, [r7, #4]
 80090f4:	2300      	movs	r3, #0
 80090f6:	60fb      	str	r3, [r7, #12]
 80090f8:	2300      	movs	r3, #0
 80090fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80090fc:	2300      	movs	r3, #0
 80090fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009100:	4b67      	ldr	r3, [pc, #412]	; (80092a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f003 030c 	and.w	r3, r3, #12
 8009108:	2b08      	cmp	r3, #8
 800910a:	d00d      	beq.n	8009128 <HAL_RCC_GetSysClockFreq+0x40>
 800910c:	2b08      	cmp	r3, #8
 800910e:	f200 80bd 	bhi.w	800928c <HAL_RCC_GetSysClockFreq+0x1a4>
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <HAL_RCC_GetSysClockFreq+0x34>
 8009116:	2b04      	cmp	r3, #4
 8009118:	d003      	beq.n	8009122 <HAL_RCC_GetSysClockFreq+0x3a>
 800911a:	e0b7      	b.n	800928c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800911c:	4b61      	ldr	r3, [pc, #388]	; (80092a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800911e:	60bb      	str	r3, [r7, #8]
       break;
 8009120:	e0b7      	b.n	8009292 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009122:	4b60      	ldr	r3, [pc, #384]	; (80092a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009124:	60bb      	str	r3, [r7, #8]
      break;
 8009126:	e0b4      	b.n	8009292 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009128:	4b5d      	ldr	r3, [pc, #372]	; (80092a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009130:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009132:	4b5b      	ldr	r3, [pc, #364]	; (80092a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d04d      	beq.n	80091da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800913e:	4b58      	ldr	r3, [pc, #352]	; (80092a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	099b      	lsrs	r3, r3, #6
 8009144:	461a      	mov	r2, r3
 8009146:	f04f 0300 	mov.w	r3, #0
 800914a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800914e:	f04f 0100 	mov.w	r1, #0
 8009152:	ea02 0800 	and.w	r8, r2, r0
 8009156:	ea03 0901 	and.w	r9, r3, r1
 800915a:	4640      	mov	r0, r8
 800915c:	4649      	mov	r1, r9
 800915e:	f04f 0200 	mov.w	r2, #0
 8009162:	f04f 0300 	mov.w	r3, #0
 8009166:	014b      	lsls	r3, r1, #5
 8009168:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800916c:	0142      	lsls	r2, r0, #5
 800916e:	4610      	mov	r0, r2
 8009170:	4619      	mov	r1, r3
 8009172:	ebb0 0008 	subs.w	r0, r0, r8
 8009176:	eb61 0109 	sbc.w	r1, r1, r9
 800917a:	f04f 0200 	mov.w	r2, #0
 800917e:	f04f 0300 	mov.w	r3, #0
 8009182:	018b      	lsls	r3, r1, #6
 8009184:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009188:	0182      	lsls	r2, r0, #6
 800918a:	1a12      	subs	r2, r2, r0
 800918c:	eb63 0301 	sbc.w	r3, r3, r1
 8009190:	f04f 0000 	mov.w	r0, #0
 8009194:	f04f 0100 	mov.w	r1, #0
 8009198:	00d9      	lsls	r1, r3, #3
 800919a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800919e:	00d0      	lsls	r0, r2, #3
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	eb12 0208 	adds.w	r2, r2, r8
 80091a8:	eb43 0309 	adc.w	r3, r3, r9
 80091ac:	f04f 0000 	mov.w	r0, #0
 80091b0:	f04f 0100 	mov.w	r1, #0
 80091b4:	0299      	lsls	r1, r3, #10
 80091b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80091ba:	0290      	lsls	r0, r2, #10
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4610      	mov	r0, r2
 80091c2:	4619      	mov	r1, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	461a      	mov	r2, r3
 80091c8:	f04f 0300 	mov.w	r3, #0
 80091cc:	f7f8 f838 	bl	8001240 <__aeabi_uldivmod>
 80091d0:	4602      	mov	r2, r0
 80091d2:	460b      	mov	r3, r1
 80091d4:	4613      	mov	r3, r2
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	e04a      	b.n	8009270 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091da:	4b31      	ldr	r3, [pc, #196]	; (80092a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	099b      	lsrs	r3, r3, #6
 80091e0:	461a      	mov	r2, r3
 80091e2:	f04f 0300 	mov.w	r3, #0
 80091e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80091ea:	f04f 0100 	mov.w	r1, #0
 80091ee:	ea02 0400 	and.w	r4, r2, r0
 80091f2:	ea03 0501 	and.w	r5, r3, r1
 80091f6:	4620      	mov	r0, r4
 80091f8:	4629      	mov	r1, r5
 80091fa:	f04f 0200 	mov.w	r2, #0
 80091fe:	f04f 0300 	mov.w	r3, #0
 8009202:	014b      	lsls	r3, r1, #5
 8009204:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009208:	0142      	lsls	r2, r0, #5
 800920a:	4610      	mov	r0, r2
 800920c:	4619      	mov	r1, r3
 800920e:	1b00      	subs	r0, r0, r4
 8009210:	eb61 0105 	sbc.w	r1, r1, r5
 8009214:	f04f 0200 	mov.w	r2, #0
 8009218:	f04f 0300 	mov.w	r3, #0
 800921c:	018b      	lsls	r3, r1, #6
 800921e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009222:	0182      	lsls	r2, r0, #6
 8009224:	1a12      	subs	r2, r2, r0
 8009226:	eb63 0301 	sbc.w	r3, r3, r1
 800922a:	f04f 0000 	mov.w	r0, #0
 800922e:	f04f 0100 	mov.w	r1, #0
 8009232:	00d9      	lsls	r1, r3, #3
 8009234:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009238:	00d0      	lsls	r0, r2, #3
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	1912      	adds	r2, r2, r4
 8009240:	eb45 0303 	adc.w	r3, r5, r3
 8009244:	f04f 0000 	mov.w	r0, #0
 8009248:	f04f 0100 	mov.w	r1, #0
 800924c:	0299      	lsls	r1, r3, #10
 800924e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009252:	0290      	lsls	r0, r2, #10
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	4610      	mov	r0, r2
 800925a:	4619      	mov	r1, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	461a      	mov	r2, r3
 8009260:	f04f 0300 	mov.w	r3, #0
 8009264:	f7f7 ffec 	bl	8001240 <__aeabi_uldivmod>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	4613      	mov	r3, r2
 800926e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009270:	4b0b      	ldr	r3, [pc, #44]	; (80092a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	0c1b      	lsrs	r3, r3, #16
 8009276:	f003 0303 	and.w	r3, r3, #3
 800927a:	3301      	adds	r3, #1
 800927c:	005b      	lsls	r3, r3, #1
 800927e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	fbb2 f3f3 	udiv	r3, r2, r3
 8009288:	60bb      	str	r3, [r7, #8]
      break;
 800928a:	e002      	b.n	8009292 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800928c:	4b05      	ldr	r3, [pc, #20]	; (80092a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800928e:	60bb      	str	r3, [r7, #8]
      break;
 8009290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009292:	68bb      	ldr	r3, [r7, #8]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800929e:	bf00      	nop
 80092a0:	40023800 	.word	0x40023800
 80092a4:	00f42400 	.word	0x00f42400

080092a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092a8:	b480      	push	{r7}
 80092aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80092ac:	4b02      	ldr	r3, [pc, #8]	; (80092b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80092ae:	681b      	ldr	r3, [r3, #0]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bc80      	pop	{r7}
 80092b6:	4770      	bx	lr
 80092b8:	20000024 	.word	0x20000024

080092bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80092c2:	f7ff fff1 	bl	80092a8 <HAL_RCC_GetHCLKFreq>
 80092c6:	4601      	mov	r1, r0
 80092c8:	4b0b      	ldr	r3, [pc, #44]	; (80092f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80092d0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80092d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	fa92 f2a2 	rbit	r2, r2
 80092dc:	603a      	str	r2, [r7, #0]
  return result;
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	fab2 f282 	clz	r2, r2
 80092e4:	b2d2      	uxtb	r2, r2
 80092e6:	40d3      	lsrs	r3, r2
 80092e8:	4a04      	ldr	r2, [pc, #16]	; (80092fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80092ea:	5cd3      	ldrb	r3, [r2, r3]
 80092ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	40023800 	.word	0x40023800
 80092fc:	0801307c 	.word	0x0801307c

08009300 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009304:	4b06      	ldr	r3, [pc, #24]	; (8009320 <HAL_RCC_NMI_IRQHandler+0x20>)
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800930c:	2b80      	cmp	r3, #128	; 0x80
 800930e:	d104      	bne.n	800931a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009310:	f000 f80a 	bl	8009328 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009314:	4b03      	ldr	r3, [pc, #12]	; (8009324 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009316:	2280      	movs	r2, #128	; 0x80
 8009318:	701a      	strb	r2, [r3, #0]
  }
}
 800931a:	bf00      	nop
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	40023800 	.word	0x40023800
 8009324:	4002380e 	.word	0x4002380e

08009328 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009328:	b480      	push	{r7}
 800932a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800932c:	bf00      	nop
 800932e:	46bd      	mov	sp, r7
 8009330:	bc80      	pop	{r7}
 8009332:	4770      	bx	lr

08009334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e041      	b.n	80093ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d106      	bne.n	8009360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7fc f9d2 	bl	8005704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2202      	movs	r2, #2
 8009364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3304      	adds	r3, #4
 8009370:	4619      	mov	r1, r3
 8009372:	4610      	mov	r0, r2
 8009374:	f000 fad8 	bl	8009928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d001      	beq.n	80093ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e046      	b.n	800947a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a22      	ldr	r2, [pc, #136]	; (8009484 <HAL_TIM_Base_Start+0xb0>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d022      	beq.n	8009444 <HAL_TIM_Base_Start+0x70>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009406:	d01d      	beq.n	8009444 <HAL_TIM_Base_Start+0x70>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a1e      	ldr	r2, [pc, #120]	; (8009488 <HAL_TIM_Base_Start+0xb4>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d018      	beq.n	8009444 <HAL_TIM_Base_Start+0x70>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a1d      	ldr	r2, [pc, #116]	; (800948c <HAL_TIM_Base_Start+0xb8>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d013      	beq.n	8009444 <HAL_TIM_Base_Start+0x70>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a1b      	ldr	r2, [pc, #108]	; (8009490 <HAL_TIM_Base_Start+0xbc>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d00e      	beq.n	8009444 <HAL_TIM_Base_Start+0x70>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a1a      	ldr	r2, [pc, #104]	; (8009494 <HAL_TIM_Base_Start+0xc0>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d009      	beq.n	8009444 <HAL_TIM_Base_Start+0x70>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a18      	ldr	r2, [pc, #96]	; (8009498 <HAL_TIM_Base_Start+0xc4>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d004      	beq.n	8009444 <HAL_TIM_Base_Start+0x70>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a17      	ldr	r2, [pc, #92]	; (800949c <HAL_TIM_Base_Start+0xc8>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d111      	bne.n	8009468 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f003 0307 	and.w	r3, r3, #7
 800944e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2b06      	cmp	r3, #6
 8009454:	d010      	beq.n	8009478 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f042 0201 	orr.w	r2, r2, #1
 8009464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009466:	e007      	b.n	8009478 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f042 0201 	orr.w	r2, r2, #1
 8009476:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3714      	adds	r7, #20
 800947e:	46bd      	mov	sp, r7
 8009480:	bc80      	pop	{r7}
 8009482:	4770      	bx	lr
 8009484:	40010000 	.word	0x40010000
 8009488:	40000400 	.word	0x40000400
 800948c:	40000800 	.word	0x40000800
 8009490:	40000c00 	.word	0x40000c00
 8009494:	40010400 	.word	0x40010400
 8009498:	40014000 	.word	0x40014000
 800949c:	40001800 	.word	0x40001800

080094a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d001      	beq.n	80094b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	e04e      	b.n	8009556 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68da      	ldr	r2, [r3, #12]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 0201 	orr.w	r2, r2, #1
 80094ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a22      	ldr	r2, [pc, #136]	; (8009560 <HAL_TIM_Base_Start_IT+0xc0>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d022      	beq.n	8009520 <HAL_TIM_Base_Start_IT+0x80>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094e2:	d01d      	beq.n	8009520 <HAL_TIM_Base_Start_IT+0x80>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a1e      	ldr	r2, [pc, #120]	; (8009564 <HAL_TIM_Base_Start_IT+0xc4>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d018      	beq.n	8009520 <HAL_TIM_Base_Start_IT+0x80>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a1d      	ldr	r2, [pc, #116]	; (8009568 <HAL_TIM_Base_Start_IT+0xc8>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d013      	beq.n	8009520 <HAL_TIM_Base_Start_IT+0x80>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a1b      	ldr	r2, [pc, #108]	; (800956c <HAL_TIM_Base_Start_IT+0xcc>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d00e      	beq.n	8009520 <HAL_TIM_Base_Start_IT+0x80>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a1a      	ldr	r2, [pc, #104]	; (8009570 <HAL_TIM_Base_Start_IT+0xd0>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d009      	beq.n	8009520 <HAL_TIM_Base_Start_IT+0x80>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a18      	ldr	r2, [pc, #96]	; (8009574 <HAL_TIM_Base_Start_IT+0xd4>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d004      	beq.n	8009520 <HAL_TIM_Base_Start_IT+0x80>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a17      	ldr	r2, [pc, #92]	; (8009578 <HAL_TIM_Base_Start_IT+0xd8>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d111      	bne.n	8009544 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2b06      	cmp	r3, #6
 8009530:	d010      	beq.n	8009554 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f042 0201 	orr.w	r2, r2, #1
 8009540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009542:	e007      	b.n	8009554 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f042 0201 	orr.w	r2, r2, #1
 8009552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	bc80      	pop	{r7}
 800955e:	4770      	bx	lr
 8009560:	40010000 	.word	0x40010000
 8009564:	40000400 	.word	0x40000400
 8009568:	40000800 	.word	0x40000800
 800956c:	40000c00 	.word	0x40000c00
 8009570:	40010400 	.word	0x40010400
 8009574:	40014000 	.word	0x40014000
 8009578:	40001800 	.word	0x40001800

0800957c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e041      	b.n	8009612 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7fc f878 	bl	8005698 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2202      	movs	r2, #2
 80095ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3304      	adds	r3, #4
 80095b8:	4619      	mov	r1, r3
 80095ba:	4610      	mov	r0, r2
 80095bc:	f000 f9b4 	bl	8009928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
	...

0800961c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d109      	bne.n	8009640 <HAL_TIM_PWM_Start+0x24>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b01      	cmp	r3, #1
 8009636:	bf14      	ite	ne
 8009638:	2301      	movne	r3, #1
 800963a:	2300      	moveq	r3, #0
 800963c:	b2db      	uxtb	r3, r3
 800963e:	e022      	b.n	8009686 <HAL_TIM_PWM_Start+0x6a>
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	2b04      	cmp	r3, #4
 8009644:	d109      	bne.n	800965a <HAL_TIM_PWM_Start+0x3e>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b01      	cmp	r3, #1
 8009650:	bf14      	ite	ne
 8009652:	2301      	movne	r3, #1
 8009654:	2300      	moveq	r3, #0
 8009656:	b2db      	uxtb	r3, r3
 8009658:	e015      	b.n	8009686 <HAL_TIM_PWM_Start+0x6a>
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b08      	cmp	r3, #8
 800965e:	d109      	bne.n	8009674 <HAL_TIM_PWM_Start+0x58>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b01      	cmp	r3, #1
 800966a:	bf14      	ite	ne
 800966c:	2301      	movne	r3, #1
 800966e:	2300      	moveq	r3, #0
 8009670:	b2db      	uxtb	r3, r3
 8009672:	e008      	b.n	8009686 <HAL_TIM_PWM_Start+0x6a>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b01      	cmp	r3, #1
 800967e:	bf14      	ite	ne
 8009680:	2301      	movne	r3, #1
 8009682:	2300      	moveq	r3, #0
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b00      	cmp	r3, #0
 8009688:	d001      	beq.n	800968e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	e07c      	b.n	8009788 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d104      	bne.n	800969e <HAL_TIM_PWM_Start+0x82>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2202      	movs	r2, #2
 8009698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800969c:	e013      	b.n	80096c6 <HAL_TIM_PWM_Start+0xaa>
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	2b04      	cmp	r3, #4
 80096a2:	d104      	bne.n	80096ae <HAL_TIM_PWM_Start+0x92>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2202      	movs	r2, #2
 80096a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096ac:	e00b      	b.n	80096c6 <HAL_TIM_PWM_Start+0xaa>
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	2b08      	cmp	r3, #8
 80096b2:	d104      	bne.n	80096be <HAL_TIM_PWM_Start+0xa2>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2202      	movs	r2, #2
 80096b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096bc:	e003      	b.n	80096c6 <HAL_TIM_PWM_Start+0xaa>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2202      	movs	r2, #2
 80096c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2201      	movs	r2, #1
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 fb74 	bl	8009dbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a2d      	ldr	r2, [pc, #180]	; (8009790 <HAL_TIM_PWM_Start+0x174>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d004      	beq.n	80096e8 <HAL_TIM_PWM_Start+0xcc>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a2c      	ldr	r2, [pc, #176]	; (8009794 <HAL_TIM_PWM_Start+0x178>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d101      	bne.n	80096ec <HAL_TIM_PWM_Start+0xd0>
 80096e8:	2301      	movs	r3, #1
 80096ea:	e000      	b.n	80096ee <HAL_TIM_PWM_Start+0xd2>
 80096ec:	2300      	movs	r3, #0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d007      	beq.n	8009702 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009700:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a22      	ldr	r2, [pc, #136]	; (8009790 <HAL_TIM_PWM_Start+0x174>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d022      	beq.n	8009752 <HAL_TIM_PWM_Start+0x136>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009714:	d01d      	beq.n	8009752 <HAL_TIM_PWM_Start+0x136>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a1f      	ldr	r2, [pc, #124]	; (8009798 <HAL_TIM_PWM_Start+0x17c>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d018      	beq.n	8009752 <HAL_TIM_PWM_Start+0x136>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a1d      	ldr	r2, [pc, #116]	; (800979c <HAL_TIM_PWM_Start+0x180>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d013      	beq.n	8009752 <HAL_TIM_PWM_Start+0x136>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a1c      	ldr	r2, [pc, #112]	; (80097a0 <HAL_TIM_PWM_Start+0x184>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d00e      	beq.n	8009752 <HAL_TIM_PWM_Start+0x136>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a16      	ldr	r2, [pc, #88]	; (8009794 <HAL_TIM_PWM_Start+0x178>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d009      	beq.n	8009752 <HAL_TIM_PWM_Start+0x136>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a18      	ldr	r2, [pc, #96]	; (80097a4 <HAL_TIM_PWM_Start+0x188>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d004      	beq.n	8009752 <HAL_TIM_PWM_Start+0x136>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a16      	ldr	r2, [pc, #88]	; (80097a8 <HAL_TIM_PWM_Start+0x18c>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d111      	bne.n	8009776 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	f003 0307 	and.w	r3, r3, #7
 800975c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2b06      	cmp	r3, #6
 8009762:	d010      	beq.n	8009786 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0201 	orr.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009774:	e007      	b.n	8009786 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f042 0201 	orr.w	r2, r2, #1
 8009784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	40010000 	.word	0x40010000
 8009794:	40010400 	.word	0x40010400
 8009798:	40000400 	.word	0x40000400
 800979c:	40000800 	.word	0x40000800
 80097a0:	40000c00 	.word	0x40000c00
 80097a4:	40014000 	.word	0x40014000
 80097a8:	40001800 	.word	0x40001800

080097ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d101      	bne.n	80097c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80097c2:	2302      	movs	r3, #2
 80097c4:	e0ac      	b.n	8009920 <HAL_TIM_PWM_ConfigChannel+0x174>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b0c      	cmp	r3, #12
 80097d2:	f200 809f 	bhi.w	8009914 <HAL_TIM_PWM_ConfigChannel+0x168>
 80097d6:	a201      	add	r2, pc, #4	; (adr r2, 80097dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80097d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097dc:	08009811 	.word	0x08009811
 80097e0:	08009915 	.word	0x08009915
 80097e4:	08009915 	.word	0x08009915
 80097e8:	08009915 	.word	0x08009915
 80097ec:	08009851 	.word	0x08009851
 80097f0:	08009915 	.word	0x08009915
 80097f4:	08009915 	.word	0x08009915
 80097f8:	08009915 	.word	0x08009915
 80097fc:	08009893 	.word	0x08009893
 8009800:	08009915 	.word	0x08009915
 8009804:	08009915 	.word	0x08009915
 8009808:	08009915 	.word	0x08009915
 800980c:	080098d3 	.word	0x080098d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68b9      	ldr	r1, [r7, #8]
 8009816:	4618      	mov	r0, r3
 8009818:	f000 f924 	bl	8009a64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	699a      	ldr	r2, [r3, #24]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f042 0208 	orr.w	r2, r2, #8
 800982a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	699a      	ldr	r2, [r3, #24]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f022 0204 	bic.w	r2, r2, #4
 800983a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6999      	ldr	r1, [r3, #24]
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	691a      	ldr	r2, [r3, #16]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	430a      	orrs	r2, r1
 800984c:	619a      	str	r2, [r3, #24]
      break;
 800984e:	e062      	b.n	8009916 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 f974 	bl	8009b44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	699a      	ldr	r2, [r3, #24]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800986a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	699a      	ldr	r2, [r3, #24]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800987a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6999      	ldr	r1, [r3, #24]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	021a      	lsls	r2, r3, #8
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	430a      	orrs	r2, r1
 800988e:	619a      	str	r2, [r3, #24]
      break;
 8009890:	e041      	b.n	8009916 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68b9      	ldr	r1, [r7, #8]
 8009898:	4618      	mov	r0, r3
 800989a:	f000 f9c7 	bl	8009c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	69da      	ldr	r2, [r3, #28]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f042 0208 	orr.w	r2, r2, #8
 80098ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	69da      	ldr	r2, [r3, #28]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f022 0204 	bic.w	r2, r2, #4
 80098bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	69d9      	ldr	r1, [r3, #28]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	691a      	ldr	r2, [r3, #16]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	61da      	str	r2, [r3, #28]
      break;
 80098d0:	e021      	b.n	8009916 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68b9      	ldr	r1, [r7, #8]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 fa1b 	bl	8009d14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	69da      	ldr	r2, [r3, #28]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	69da      	ldr	r2, [r3, #28]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	69d9      	ldr	r1, [r3, #28]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	021a      	lsls	r2, r3, #8
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	430a      	orrs	r2, r1
 8009910:	61da      	str	r2, [r3, #28]
      break;
 8009912:	e000      	b.n	8009916 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009914:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a3f      	ldr	r2, [pc, #252]	; (8009a38 <TIM_Base_SetConfig+0x110>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d013      	beq.n	8009968 <TIM_Base_SetConfig+0x40>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009946:	d00f      	beq.n	8009968 <TIM_Base_SetConfig+0x40>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a3c      	ldr	r2, [pc, #240]	; (8009a3c <TIM_Base_SetConfig+0x114>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d00b      	beq.n	8009968 <TIM_Base_SetConfig+0x40>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a3b      	ldr	r2, [pc, #236]	; (8009a40 <TIM_Base_SetConfig+0x118>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d007      	beq.n	8009968 <TIM_Base_SetConfig+0x40>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a3a      	ldr	r2, [pc, #232]	; (8009a44 <TIM_Base_SetConfig+0x11c>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d003      	beq.n	8009968 <TIM_Base_SetConfig+0x40>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a39      	ldr	r2, [pc, #228]	; (8009a48 <TIM_Base_SetConfig+0x120>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d108      	bne.n	800997a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800996e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	4313      	orrs	r3, r2
 8009978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a2e      	ldr	r2, [pc, #184]	; (8009a38 <TIM_Base_SetConfig+0x110>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d02b      	beq.n	80099da <TIM_Base_SetConfig+0xb2>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009988:	d027      	beq.n	80099da <TIM_Base_SetConfig+0xb2>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a2b      	ldr	r2, [pc, #172]	; (8009a3c <TIM_Base_SetConfig+0x114>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d023      	beq.n	80099da <TIM_Base_SetConfig+0xb2>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a2a      	ldr	r2, [pc, #168]	; (8009a40 <TIM_Base_SetConfig+0x118>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d01f      	beq.n	80099da <TIM_Base_SetConfig+0xb2>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a29      	ldr	r2, [pc, #164]	; (8009a44 <TIM_Base_SetConfig+0x11c>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d01b      	beq.n	80099da <TIM_Base_SetConfig+0xb2>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a28      	ldr	r2, [pc, #160]	; (8009a48 <TIM_Base_SetConfig+0x120>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d017      	beq.n	80099da <TIM_Base_SetConfig+0xb2>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a27      	ldr	r2, [pc, #156]	; (8009a4c <TIM_Base_SetConfig+0x124>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d013      	beq.n	80099da <TIM_Base_SetConfig+0xb2>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a26      	ldr	r2, [pc, #152]	; (8009a50 <TIM_Base_SetConfig+0x128>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d00f      	beq.n	80099da <TIM_Base_SetConfig+0xb2>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a25      	ldr	r2, [pc, #148]	; (8009a54 <TIM_Base_SetConfig+0x12c>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d00b      	beq.n	80099da <TIM_Base_SetConfig+0xb2>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a24      	ldr	r2, [pc, #144]	; (8009a58 <TIM_Base_SetConfig+0x130>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d007      	beq.n	80099da <TIM_Base_SetConfig+0xb2>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a23      	ldr	r2, [pc, #140]	; (8009a5c <TIM_Base_SetConfig+0x134>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d003      	beq.n	80099da <TIM_Base_SetConfig+0xb2>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a22      	ldr	r2, [pc, #136]	; (8009a60 <TIM_Base_SetConfig+0x138>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d108      	bne.n	80099ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	695b      	ldr	r3, [r3, #20]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	689a      	ldr	r2, [r3, #8]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a09      	ldr	r2, [pc, #36]	; (8009a38 <TIM_Base_SetConfig+0x110>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d003      	beq.n	8009a20 <TIM_Base_SetConfig+0xf8>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a0b      	ldr	r2, [pc, #44]	; (8009a48 <TIM_Base_SetConfig+0x120>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d103      	bne.n	8009a28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	691a      	ldr	r2, [r3, #16]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	615a      	str	r2, [r3, #20]
}
 8009a2e:	bf00      	nop
 8009a30:	3714      	adds	r7, #20
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bc80      	pop	{r7}
 8009a36:	4770      	bx	lr
 8009a38:	40010000 	.word	0x40010000
 8009a3c:	40000400 	.word	0x40000400
 8009a40:	40000800 	.word	0x40000800
 8009a44:	40000c00 	.word	0x40000c00
 8009a48:	40010400 	.word	0x40010400
 8009a4c:	40014000 	.word	0x40014000
 8009a50:	40014400 	.word	0x40014400
 8009a54:	40014800 	.word	0x40014800
 8009a58:	40001800 	.word	0x40001800
 8009a5c:	40001c00 	.word	0x40001c00
 8009a60:	40002000 	.word	0x40002000

08009a64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b087      	sub	sp, #28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	f023 0201 	bic.w	r2, r3, #1
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f023 0303 	bic.w	r3, r3, #3
 8009a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	f023 0302 	bic.w	r3, r3, #2
 8009aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	697a      	ldr	r2, [r7, #20]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a20      	ldr	r2, [pc, #128]	; (8009b3c <TIM_OC1_SetConfig+0xd8>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d003      	beq.n	8009ac8 <TIM_OC1_SetConfig+0x64>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a1f      	ldr	r2, [pc, #124]	; (8009b40 <TIM_OC1_SetConfig+0xdc>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d10c      	bne.n	8009ae2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f023 0308 	bic.w	r3, r3, #8
 8009ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f023 0304 	bic.w	r3, r3, #4
 8009ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a15      	ldr	r2, [pc, #84]	; (8009b3c <TIM_OC1_SetConfig+0xd8>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d003      	beq.n	8009af2 <TIM_OC1_SetConfig+0x8e>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a14      	ldr	r2, [pc, #80]	; (8009b40 <TIM_OC1_SetConfig+0xdc>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d111      	bne.n	8009b16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	697a      	ldr	r2, [r7, #20]
 8009b2e:	621a      	str	r2, [r3, #32]
}
 8009b30:	bf00      	nop
 8009b32:	371c      	adds	r7, #28
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bc80      	pop	{r7}
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	40010000 	.word	0x40010000
 8009b40:	40010400 	.word	0x40010400

08009b44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b087      	sub	sp, #28
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	f023 0210 	bic.w	r2, r3, #16
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	021b      	lsls	r3, r3, #8
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	f023 0320 	bic.w	r3, r3, #32
 8009b8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	011b      	lsls	r3, r3, #4
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a21      	ldr	r2, [pc, #132]	; (8009c24 <TIM_OC2_SetConfig+0xe0>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d003      	beq.n	8009bac <TIM_OC2_SetConfig+0x68>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a20      	ldr	r2, [pc, #128]	; (8009c28 <TIM_OC2_SetConfig+0xe4>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d10d      	bne.n	8009bc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	011b      	lsls	r3, r3, #4
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a16      	ldr	r2, [pc, #88]	; (8009c24 <TIM_OC2_SetConfig+0xe0>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d003      	beq.n	8009bd8 <TIM_OC2_SetConfig+0x94>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a15      	ldr	r2, [pc, #84]	; (8009c28 <TIM_OC2_SetConfig+0xe4>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d113      	bne.n	8009c00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	695b      	ldr	r3, [r3, #20]
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	693a      	ldr	r2, [r7, #16]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	685a      	ldr	r2, [r3, #4]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	697a      	ldr	r2, [r7, #20]
 8009c18:	621a      	str	r2, [r3, #32]
}
 8009c1a:	bf00      	nop
 8009c1c:	371c      	adds	r7, #28
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bc80      	pop	{r7}
 8009c22:	4770      	bx	lr
 8009c24:	40010000 	.word	0x40010000
 8009c28:	40010400 	.word	0x40010400

08009c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b087      	sub	sp, #28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	69db      	ldr	r3, [r3, #28]
 8009c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f023 0303 	bic.w	r3, r3, #3
 8009c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	021b      	lsls	r3, r3, #8
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a21      	ldr	r2, [pc, #132]	; (8009d0c <TIM_OC3_SetConfig+0xe0>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d003      	beq.n	8009c92 <TIM_OC3_SetConfig+0x66>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a20      	ldr	r2, [pc, #128]	; (8009d10 <TIM_OC3_SetConfig+0xe4>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d10d      	bne.n	8009cae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	021b      	lsls	r3, r3, #8
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a16      	ldr	r2, [pc, #88]	; (8009d0c <TIM_OC3_SetConfig+0xe0>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d003      	beq.n	8009cbe <TIM_OC3_SetConfig+0x92>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a15      	ldr	r2, [pc, #84]	; (8009d10 <TIM_OC3_SetConfig+0xe4>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d113      	bne.n	8009ce6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	011b      	lsls	r3, r3, #4
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	011b      	lsls	r3, r3, #4
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	693a      	ldr	r2, [r7, #16]
 8009cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	621a      	str	r2, [r3, #32]
}
 8009d00:	bf00      	nop
 8009d02:	371c      	adds	r7, #28
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bc80      	pop	{r7}
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	40010000 	.word	0x40010000
 8009d10:	40010400 	.word	0x40010400

08009d14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a1b      	ldr	r3, [r3, #32]
 8009d22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	69db      	ldr	r3, [r3, #28]
 8009d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	021b      	lsls	r3, r3, #8
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	031b      	lsls	r3, r3, #12
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a11      	ldr	r2, [pc, #68]	; (8009db4 <TIM_OC4_SetConfig+0xa0>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d003      	beq.n	8009d7c <TIM_OC4_SetConfig+0x68>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a10      	ldr	r2, [pc, #64]	; (8009db8 <TIM_OC4_SetConfig+0xa4>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d109      	bne.n	8009d90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	695b      	ldr	r3, [r3, #20]
 8009d88:	019b      	lsls	r3, r3, #6
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	621a      	str	r2, [r3, #32]
}
 8009daa:	bf00      	nop
 8009dac:	371c      	adds	r7, #28
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bc80      	pop	{r7}
 8009db2:	4770      	bx	lr
 8009db4:	40010000 	.word	0x40010000
 8009db8:	40010400 	.word	0x40010400

08009dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f003 031f 	and.w	r3, r3, #31
 8009dce:	2201      	movs	r2, #1
 8009dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6a1a      	ldr	r2, [r3, #32]
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	43db      	mvns	r3, r3
 8009dde:	401a      	ands	r2, r3
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6a1a      	ldr	r2, [r3, #32]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	f003 031f 	and.w	r3, r3, #31
 8009dee:	6879      	ldr	r1, [r7, #4]
 8009df0:	fa01 f303 	lsl.w	r3, r1, r3
 8009df4:	431a      	orrs	r2, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	621a      	str	r2, [r3, #32]
}
 8009dfa:	bf00      	nop
 8009dfc:	371c      	adds	r7, #28
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bc80      	pop	{r7}
 8009e02:	4770      	bx	lr

08009e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d101      	bne.n	8009e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e18:	2302      	movs	r3, #2
 8009e1a:	e05a      	b.n	8009ed2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a20      	ldr	r2, [pc, #128]	; (8009edc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d022      	beq.n	8009ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e68:	d01d      	beq.n	8009ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a1c      	ldr	r2, [pc, #112]	; (8009ee0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d018      	beq.n	8009ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a1a      	ldr	r2, [pc, #104]	; (8009ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d013      	beq.n	8009ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a19      	ldr	r2, [pc, #100]	; (8009ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d00e      	beq.n	8009ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a17      	ldr	r2, [pc, #92]	; (8009eec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d009      	beq.n	8009ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a16      	ldr	r2, [pc, #88]	; (8009ef0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d004      	beq.n	8009ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a14      	ldr	r2, [pc, #80]	; (8009ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d10c      	bne.n	8009ec0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bc80      	pop	{r7}
 8009eda:	4770      	bx	lr
 8009edc:	40010000 	.word	0x40010000
 8009ee0:	40000400 	.word	0x40000400
 8009ee4:	40000800 	.word	0x40000800
 8009ee8:	40000c00 	.word	0x40000c00
 8009eec:	40010400 	.word	0x40010400
 8009ef0:	40014000 	.word	0x40014000
 8009ef4:	40001800 	.word	0x40001800

08009ef8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ef8:	b084      	sub	sp, #16
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	f107 001c 	add.w	r0, r7, #28
 8009f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d122      	bne.n	8009f56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d105      	bne.n	8009f4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f001 fafa 	bl	800b544 <USB_CoreReset>
 8009f50:	4603      	mov	r3, r0
 8009f52:	73fb      	strb	r3, [r7, #15]
 8009f54:	e010      	b.n	8009f78 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f001 faee 	bl	800b544 <USB_CoreReset>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d10b      	bne.n	8009f96 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	f043 0206 	orr.w	r2, r3, #6
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	f043 0220 	orr.w	r2, r3, #32
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009fa2:	b004      	add	sp, #16
 8009fa4:	4770      	bx	lr
	...

08009fa8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b087      	sub	sp, #28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d165      	bne.n	800a088 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	4a41      	ldr	r2, [pc, #260]	; (800a0c4 <USB_SetTurnaroundTime+0x11c>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d906      	bls.n	8009fd2 <USB_SetTurnaroundTime+0x2a>
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	4a40      	ldr	r2, [pc, #256]	; (800a0c8 <USB_SetTurnaroundTime+0x120>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d202      	bcs.n	8009fd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009fcc:	230f      	movs	r3, #15
 8009fce:	617b      	str	r3, [r7, #20]
 8009fd0:	e062      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	4a3c      	ldr	r2, [pc, #240]	; (800a0c8 <USB_SetTurnaroundTime+0x120>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d306      	bcc.n	8009fe8 <USB_SetTurnaroundTime+0x40>
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	4a3b      	ldr	r2, [pc, #236]	; (800a0cc <USB_SetTurnaroundTime+0x124>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d202      	bcs.n	8009fe8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009fe2:	230e      	movs	r3, #14
 8009fe4:	617b      	str	r3, [r7, #20]
 8009fe6:	e057      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	4a38      	ldr	r2, [pc, #224]	; (800a0cc <USB_SetTurnaroundTime+0x124>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d306      	bcc.n	8009ffe <USB_SetTurnaroundTime+0x56>
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	4a37      	ldr	r2, [pc, #220]	; (800a0d0 <USB_SetTurnaroundTime+0x128>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d202      	bcs.n	8009ffe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009ff8:	230d      	movs	r3, #13
 8009ffa:	617b      	str	r3, [r7, #20]
 8009ffc:	e04c      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	4a33      	ldr	r2, [pc, #204]	; (800a0d0 <USB_SetTurnaroundTime+0x128>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d306      	bcc.n	800a014 <USB_SetTurnaroundTime+0x6c>
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	4a32      	ldr	r2, [pc, #200]	; (800a0d4 <USB_SetTurnaroundTime+0x12c>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d802      	bhi.n	800a014 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a00e:	230c      	movs	r3, #12
 800a010:	617b      	str	r3, [r7, #20]
 800a012:	e041      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	4a2f      	ldr	r2, [pc, #188]	; (800a0d4 <USB_SetTurnaroundTime+0x12c>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d906      	bls.n	800a02a <USB_SetTurnaroundTime+0x82>
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	4a2e      	ldr	r2, [pc, #184]	; (800a0d8 <USB_SetTurnaroundTime+0x130>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d802      	bhi.n	800a02a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a024:	230b      	movs	r3, #11
 800a026:	617b      	str	r3, [r7, #20]
 800a028:	e036      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	4a2a      	ldr	r2, [pc, #168]	; (800a0d8 <USB_SetTurnaroundTime+0x130>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d906      	bls.n	800a040 <USB_SetTurnaroundTime+0x98>
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	4a29      	ldr	r2, [pc, #164]	; (800a0dc <USB_SetTurnaroundTime+0x134>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d802      	bhi.n	800a040 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a03a:	230a      	movs	r3, #10
 800a03c:	617b      	str	r3, [r7, #20]
 800a03e:	e02b      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	4a26      	ldr	r2, [pc, #152]	; (800a0dc <USB_SetTurnaroundTime+0x134>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d906      	bls.n	800a056 <USB_SetTurnaroundTime+0xae>
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	4a25      	ldr	r2, [pc, #148]	; (800a0e0 <USB_SetTurnaroundTime+0x138>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d202      	bcs.n	800a056 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a050:	2309      	movs	r3, #9
 800a052:	617b      	str	r3, [r7, #20]
 800a054:	e020      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	4a21      	ldr	r2, [pc, #132]	; (800a0e0 <USB_SetTurnaroundTime+0x138>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d306      	bcc.n	800a06c <USB_SetTurnaroundTime+0xc4>
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	4a20      	ldr	r2, [pc, #128]	; (800a0e4 <USB_SetTurnaroundTime+0x13c>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d802      	bhi.n	800a06c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a066:	2308      	movs	r3, #8
 800a068:	617b      	str	r3, [r7, #20]
 800a06a:	e015      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	4a1d      	ldr	r2, [pc, #116]	; (800a0e4 <USB_SetTurnaroundTime+0x13c>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d906      	bls.n	800a082 <USB_SetTurnaroundTime+0xda>
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	4a1c      	ldr	r2, [pc, #112]	; (800a0e8 <USB_SetTurnaroundTime+0x140>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d202      	bcs.n	800a082 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a07c:	2307      	movs	r3, #7
 800a07e:	617b      	str	r3, [r7, #20]
 800a080:	e00a      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a082:	2306      	movs	r3, #6
 800a084:	617b      	str	r3, [r7, #20]
 800a086:	e007      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a088:	79fb      	ldrb	r3, [r7, #7]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d102      	bne.n	800a094 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a08e:	2309      	movs	r3, #9
 800a090:	617b      	str	r3, [r7, #20]
 800a092:	e001      	b.n	800a098 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a094:	2309      	movs	r3, #9
 800a096:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	68da      	ldr	r2, [r3, #12]
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	029b      	lsls	r3, r3, #10
 800a0ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	371c      	adds	r7, #28
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bc80      	pop	{r7}
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	00d8acbf 	.word	0x00d8acbf
 800a0c8:	00e4e1c0 	.word	0x00e4e1c0
 800a0cc:	00f42400 	.word	0x00f42400
 800a0d0:	01067380 	.word	0x01067380
 800a0d4:	011a499f 	.word	0x011a499f
 800a0d8:	01312cff 	.word	0x01312cff
 800a0dc:	014ca43f 	.word	0x014ca43f
 800a0e0:	016e3600 	.word	0x016e3600
 800a0e4:	01a6ab1f 	.word	0x01a6ab1f
 800a0e8:	01e84800 	.word	0x01e84800

0800a0ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	f043 0201 	orr.w	r2, r3, #1
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	370c      	adds	r7, #12
 800a106:	46bd      	mov	sp, r7
 800a108:	bc80      	pop	{r7}
 800a10a:	4770      	bx	lr

0800a10c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	f023 0201 	bic.w	r2, r3, #1
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	bc80      	pop	{r7}
 800a12a:	4770      	bx	lr

0800a12c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	460b      	mov	r3, r1
 800a136:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a138:	2300      	movs	r3, #0
 800a13a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a148:	78fb      	ldrb	r3, [r7, #3]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d115      	bne.n	800a17a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a15a:	2001      	movs	r0, #1
 800a15c:	f7fb fcec 	bl	8005b38 <HAL_Delay>
      ms++;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	3301      	adds	r3, #1
 800a164:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f001 f961 	bl	800b42e <USB_GetMode>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d01e      	beq.n	800a1b0 <USB_SetCurrentMode+0x84>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2b31      	cmp	r3, #49	; 0x31
 800a176:	d9f0      	bls.n	800a15a <USB_SetCurrentMode+0x2e>
 800a178:	e01a      	b.n	800a1b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a17a:	78fb      	ldrb	r3, [r7, #3]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d115      	bne.n	800a1ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a18c:	2001      	movs	r0, #1
 800a18e:	f7fb fcd3 	bl	8005b38 <HAL_Delay>
      ms++;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	3301      	adds	r3, #1
 800a196:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f001 f948 	bl	800b42e <USB_GetMode>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d005      	beq.n	800a1b0 <USB_SetCurrentMode+0x84>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2b31      	cmp	r3, #49	; 0x31
 800a1a8:	d9f0      	bls.n	800a18c <USB_SetCurrentMode+0x60>
 800a1aa:	e001      	b.n	800a1b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e005      	b.n	800a1bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2b32      	cmp	r3, #50	; 0x32
 800a1b4:	d101      	bne.n	800a1ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e000      	b.n	800a1bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a1c4:	b084      	sub	sp, #16
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b086      	sub	sp, #24
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a1d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a1de:	2300      	movs	r3, #0
 800a1e0:	613b      	str	r3, [r7, #16]
 800a1e2:	e009      	b.n	800a1f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	3340      	adds	r3, #64	; 0x40
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	613b      	str	r3, [r7, #16]
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	2b0e      	cmp	r3, #14
 800a1fc:	d9f2      	bls.n	800a1e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a1fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a200:	2b00      	cmp	r3, #0
 800a202:	d11c      	bne.n	800a23e <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a212:	f043 0302 	orr.w	r3, r3, #2
 800a216:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a228:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a234:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	639a      	str	r2, [r3, #56]	; 0x38
 800a23c:	e00b      	b.n	800a256 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a242:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a25c:	461a      	mov	r2, r3
 800a25e:	2300      	movs	r3, #0
 800a260:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a268:	4619      	mov	r1, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a270:	461a      	mov	r2, r3
 800a272:	680b      	ldr	r3, [r1, #0]
 800a274:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d10c      	bne.n	800a296 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d104      	bne.n	800a28c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a282:	2100      	movs	r1, #0
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f945 	bl	800a514 <USB_SetDevSpeed>
 800a28a:	e008      	b.n	800a29e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a28c:	2101      	movs	r1, #1
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f940 	bl	800a514 <USB_SetDevSpeed>
 800a294:	e003      	b.n	800a29e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a296:	2103      	movs	r1, #3
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 f93b 	bl	800a514 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a29e:	2110      	movs	r1, #16
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 f8f3 	bl	800a48c <USB_FlushTxFifo>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f90f 	bl	800a4d4 <USB_FlushRxFifo>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d001      	beq.n	800a2c0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2de:	461a      	mov	r2, r3
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	613b      	str	r3, [r7, #16]
 800a2e8:	e043      	b.n	800a372 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	015a      	lsls	r2, r3, #5
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a300:	d118      	bne.n	800a334 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10a      	bne.n	800a31e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a314:	461a      	mov	r2, r3
 800a316:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a31a:	6013      	str	r3, [r2, #0]
 800a31c:	e013      	b.n	800a346 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	015a      	lsls	r2, r3, #5
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	4413      	add	r3, r2
 800a326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a32a:	461a      	mov	r2, r3
 800a32c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a330:	6013      	str	r3, [r2, #0]
 800a332:	e008      	b.n	800a346 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	015a      	lsls	r2, r3, #5
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	4413      	add	r3, r2
 800a33c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a340:	461a      	mov	r2, r3
 800a342:	2300      	movs	r3, #0
 800a344:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	015a      	lsls	r2, r3, #5
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	4413      	add	r3, r2
 800a34e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a352:	461a      	mov	r2, r3
 800a354:	2300      	movs	r3, #0
 800a356:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	015a      	lsls	r2, r3, #5
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4413      	add	r3, r2
 800a360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a364:	461a      	mov	r2, r3
 800a366:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a36a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	3301      	adds	r3, #1
 800a370:	613b      	str	r3, [r7, #16]
 800a372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	429a      	cmp	r2, r3
 800a378:	d3b7      	bcc.n	800a2ea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a37a:	2300      	movs	r3, #0
 800a37c:	613b      	str	r3, [r7, #16]
 800a37e:	e043      	b.n	800a408 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a392:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a396:	d118      	bne.n	800a3ca <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d10a      	bne.n	800a3b4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	015a      	lsls	r2, r3, #5
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a3b0:	6013      	str	r3, [r2, #0]
 800a3b2:	e013      	b.n	800a3dc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	015a      	lsls	r2, r3, #5
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a3c6:	6013      	str	r3, [r2, #0]
 800a3c8:	e008      	b.n	800a3dc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	015a      	lsls	r2, r3, #5
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	2300      	movs	r3, #0
 800a3da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	015a      	lsls	r2, r3, #5
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	015a      	lsls	r2, r3, #5
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a400:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	3301      	adds	r3, #1
 800a406:	613b      	str	r3, [r7, #16]
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d3b7      	bcc.n	800a380 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a41e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a422:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a430:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	2b00      	cmp	r3, #0
 800a436:	d105      	bne.n	800a444 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	699b      	ldr	r3, [r3, #24]
 800a43c:	f043 0210 	orr.w	r2, r3, #16
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	699a      	ldr	r2, [r3, #24]
 800a448:	4b0f      	ldr	r3, [pc, #60]	; (800a488 <USB_DevInit+0x2c4>)
 800a44a:	4313      	orrs	r3, r2
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a452:	2b00      	cmp	r3, #0
 800a454:	d005      	beq.n	800a462 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	f043 0208 	orr.w	r2, r3, #8
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a464:	2b01      	cmp	r3, #1
 800a466:	d107      	bne.n	800a478 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a470:	f043 0304 	orr.w	r3, r3, #4
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a478:	7dfb      	ldrb	r3, [r7, #23]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3718      	adds	r7, #24
 800a47e:	46bd      	mov	sp, r7
 800a480:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a484:	b004      	add	sp, #16
 800a486:	4770      	bx	lr
 800a488:	803c3800 	.word	0x803c3800

0800a48c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a496:	2300      	movs	r3, #0
 800a498:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	019b      	lsls	r3, r3, #6
 800a49e:	f043 0220 	orr.w	r2, r3, #32
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	4a08      	ldr	r2, [pc, #32]	; (800a4d0 <USB_FlushTxFifo+0x44>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d901      	bls.n	800a4b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	e006      	b.n	800a4c6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	f003 0320 	and.w	r3, r3, #32
 800a4c0:	2b20      	cmp	r3, #32
 800a4c2:	d0f0      	beq.n	800a4a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bc80      	pop	{r7}
 800a4ce:	4770      	bx	lr
 800a4d0:	00030d40 	.word	0x00030d40

0800a4d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2210      	movs	r2, #16
 800a4e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	60fb      	str	r3, [r7, #12]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4a08      	ldr	r2, [pc, #32]	; (800a510 <USB_FlushRxFifo+0x3c>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d901      	bls.n	800a4f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e006      	b.n	800a506 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	f003 0310 	and.w	r3, r3, #16
 800a500:	2b10      	cmp	r3, #16
 800a502:	d0f0      	beq.n	800a4e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bc80      	pop	{r7}
 800a50e:	4770      	bx	lr
 800a510:	00030d40 	.word	0x00030d40

0800a514 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	460b      	mov	r3, r1
 800a51e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	78fb      	ldrb	r3, [r7, #3]
 800a52e:	68f9      	ldr	r1, [r7, #12]
 800a530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a534:	4313      	orrs	r3, r2
 800a536:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	bc80      	pop	{r7}
 800a542:	4770      	bx	lr

0800a544 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a544:	b480      	push	{r7}
 800a546:	b087      	sub	sp, #28
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	f003 0306 	and.w	r3, r3, #6
 800a55c:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d102      	bne.n	800a56a <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a564:	2300      	movs	r3, #0
 800a566:	75fb      	strb	r3, [r7, #23]
 800a568:	e00a      	b.n	800a580 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d002      	beq.n	800a576 <USB_GetDevSpeed+0x32>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2b06      	cmp	r3, #6
 800a574:	d102      	bne.n	800a57c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a576:	2302      	movs	r3, #2
 800a578:	75fb      	strb	r3, [r7, #23]
 800a57a:	e001      	b.n	800a580 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a57c:	230f      	movs	r3, #15
 800a57e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a580:	7dfb      	ldrb	r3, [r7, #23]
}
 800a582:	4618      	mov	r0, r3
 800a584:	371c      	adds	r7, #28
 800a586:	46bd      	mov	sp, r7
 800a588:	bc80      	pop	{r7}
 800a58a:	4770      	bx	lr

0800a58c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	785b      	ldrb	r3, [r3, #1]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d13a      	bne.n	800a61e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ae:	69da      	ldr	r2, [r3, #28]
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	f003 030f 	and.w	r3, r3, #15
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	fa01 f303 	lsl.w	r3, r1, r3
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	68f9      	ldr	r1, [r7, #12]
 800a5c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	015a      	lsls	r2, r3, #5
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d155      	bne.n	800a68c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	015a      	lsls	r2, r3, #5
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	78db      	ldrb	r3, [r3, #3]
 800a5fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a5fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	059b      	lsls	r3, r3, #22
 800a602:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a604:	4313      	orrs	r3, r2
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	0151      	lsls	r1, r2, #5
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	440a      	add	r2, r1
 800a60e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a61a:	6013      	str	r3, [r2, #0]
 800a61c:	e036      	b.n	800a68c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a624:	69da      	ldr	r2, [r3, #28]
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	f003 030f 	and.w	r3, r3, #15
 800a62e:	2101      	movs	r1, #1
 800a630:	fa01 f303 	lsl.w	r3, r1, r3
 800a634:	041b      	lsls	r3, r3, #16
 800a636:	68f9      	ldr	r1, [r7, #12]
 800a638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a63c:	4313      	orrs	r3, r2
 800a63e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	015a      	lsls	r2, r3, #5
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	4413      	add	r3, r2
 800a648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a652:	2b00      	cmp	r3, #0
 800a654:	d11a      	bne.n	800a68c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	015a      	lsls	r2, r3, #5
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	4413      	add	r3, r2
 800a65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	78db      	ldrb	r3, [r3, #3]
 800a670:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a672:	430b      	orrs	r3, r1
 800a674:	4313      	orrs	r3, r2
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	0151      	lsls	r1, r2, #5
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	440a      	add	r2, r1
 800a67e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a68a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	bc80      	pop	{r7}
 800a696:	4770      	bx	lr

0800a698 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	785b      	ldrb	r3, [r3, #1]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d161      	bne.n	800a778 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	015a      	lsls	r2, r3, #5
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6ca:	d11f      	bne.n	800a70c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	015a      	lsls	r2, r3, #5
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	0151      	lsls	r1, r2, #5
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	440a      	add	r2, r1
 800a6e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a6ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	015a      	lsls	r2, r3, #5
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	0151      	lsls	r1, r2, #5
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	440a      	add	r2, r1
 800a702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a706:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a70a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	f003 030f 	and.w	r3, r3, #15
 800a71c:	2101      	movs	r1, #1
 800a71e:	fa01 f303 	lsl.w	r3, r1, r3
 800a722:	b29b      	uxth	r3, r3
 800a724:	43db      	mvns	r3, r3
 800a726:	68f9      	ldr	r1, [r7, #12]
 800a728:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a72c:	4013      	ands	r3, r2
 800a72e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a736:	69da      	ldr	r2, [r3, #28]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	f003 030f 	and.w	r3, r3, #15
 800a740:	2101      	movs	r1, #1
 800a742:	fa01 f303 	lsl.w	r3, r1, r3
 800a746:	b29b      	uxth	r3, r3
 800a748:	43db      	mvns	r3, r3
 800a74a:	68f9      	ldr	r1, [r7, #12]
 800a74c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a750:	4013      	ands	r3, r2
 800a752:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	015a      	lsls	r2, r3, #5
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	4413      	add	r3, r2
 800a75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	0159      	lsls	r1, r3, #5
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	440b      	add	r3, r1
 800a76a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a76e:	4619      	mov	r1, r3
 800a770:	4b35      	ldr	r3, [pc, #212]	; (800a848 <USB_DeactivateEndpoint+0x1b0>)
 800a772:	4013      	ands	r3, r2
 800a774:	600b      	str	r3, [r1, #0]
 800a776:	e060      	b.n	800a83a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	015a      	lsls	r2, r3, #5
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	4413      	add	r3, r2
 800a780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a78a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a78e:	d11f      	bne.n	800a7d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	0151      	lsls	r1, r2, #5
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	440a      	add	r2, r1
 800a7a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a7ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	0151      	lsls	r1, r2, #5
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	440a      	add	r2, r1
 800a7c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	f003 030f 	and.w	r3, r3, #15
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a7e6:	041b      	lsls	r3, r3, #16
 800a7e8:	43db      	mvns	r3, r3
 800a7ea:	68f9      	ldr	r1, [r7, #12]
 800a7ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7fa:	69da      	ldr	r2, [r3, #28]
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	f003 030f 	and.w	r3, r3, #15
 800a804:	2101      	movs	r1, #1
 800a806:	fa01 f303 	lsl.w	r3, r1, r3
 800a80a:	041b      	lsls	r3, r3, #16
 800a80c:	43db      	mvns	r3, r3
 800a80e:	68f9      	ldr	r1, [r7, #12]
 800a810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a814:	4013      	ands	r3, r2
 800a816:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	015a      	lsls	r2, r3, #5
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	4413      	add	r3, r2
 800a820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	0159      	lsls	r1, r3, #5
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	440b      	add	r3, r1
 800a82e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a832:	4619      	mov	r1, r3
 800a834:	4b05      	ldr	r3, [pc, #20]	; (800a84c <USB_DeactivateEndpoint+0x1b4>)
 800a836:	4013      	ands	r3, r2
 800a838:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	bc80      	pop	{r7}
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	ec337800 	.word	0xec337800
 800a84c:	eff37800 	.word	0xeff37800

0800a850 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b08a      	sub	sp, #40	; 0x28
 800a854:	af02      	add	r7, sp, #8
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	4613      	mov	r3, r2
 800a85c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	785b      	ldrb	r3, [r3, #1]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	f040 815c 	bne.w	800ab2a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d132      	bne.n	800a8e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	015a      	lsls	r2, r3, #5
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	4413      	add	r3, r2
 800a882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	69ba      	ldr	r2, [r7, #24]
 800a88a:	0151      	lsls	r1, r2, #5
 800a88c:	69fa      	ldr	r2, [r7, #28]
 800a88e:	440a      	add	r2, r1
 800a890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a894:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a898:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a89c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	015a      	lsls	r2, r3, #5
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	69ba      	ldr	r2, [r7, #24]
 800a8ae:	0151      	lsls	r1, r2, #5
 800a8b0:	69fa      	ldr	r2, [r7, #28]
 800a8b2:	440a      	add	r2, r1
 800a8b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	015a      	lsls	r2, r3, #5
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	69ba      	ldr	r2, [r7, #24]
 800a8ce:	0151      	lsls	r1, r2, #5
 800a8d0:	69fa      	ldr	r2, [r7, #28]
 800a8d2:	440a      	add	r2, r1
 800a8d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8d8:	0cdb      	lsrs	r3, r3, #19
 800a8da:	04db      	lsls	r3, r3, #19
 800a8dc:	6113      	str	r3, [r2, #16]
 800a8de:	e074      	b.n	800a9ca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	015a      	lsls	r2, r3, #5
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	69ba      	ldr	r2, [r7, #24]
 800a8f0:	0151      	lsls	r1, r2, #5
 800a8f2:	69fa      	ldr	r2, [r7, #28]
 800a8f4:	440a      	add	r2, r1
 800a8f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8fa:	0cdb      	lsrs	r3, r3, #19
 800a8fc:	04db      	lsls	r3, r3, #19
 800a8fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	015a      	lsls	r2, r3, #5
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	4413      	add	r3, r2
 800a908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a90c:	691b      	ldr	r3, [r3, #16]
 800a90e:	69ba      	ldr	r2, [r7, #24]
 800a910:	0151      	lsls	r1, r2, #5
 800a912:	69fa      	ldr	r2, [r7, #28]
 800a914:	440a      	add	r2, r1
 800a916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a91a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a91e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a922:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	015a      	lsls	r2, r3, #5
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	4413      	add	r3, r2
 800a92c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a930:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	6959      	ldr	r1, [r3, #20]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	440b      	add	r3, r1
 800a93c:	1e59      	subs	r1, r3, #1
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	fbb1 f3f3 	udiv	r3, r1, r3
 800a946:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a948:	4b9d      	ldr	r3, [pc, #628]	; (800abc0 <USB_EPStartXfer+0x370>)
 800a94a:	400b      	ands	r3, r1
 800a94c:	69b9      	ldr	r1, [r7, #24]
 800a94e:	0148      	lsls	r0, r1, #5
 800a950:	69f9      	ldr	r1, [r7, #28]
 800a952:	4401      	add	r1, r0
 800a954:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a958:	4313      	orrs	r3, r2
 800a95a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	015a      	lsls	r2, r3, #5
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	4413      	add	r3, r2
 800a964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a968:	691a      	ldr	r2, [r3, #16]
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a972:	69b9      	ldr	r1, [r7, #24]
 800a974:	0148      	lsls	r0, r1, #5
 800a976:	69f9      	ldr	r1, [r7, #28]
 800a978:	4401      	add	r1, r0
 800a97a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a97e:	4313      	orrs	r3, r2
 800a980:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	78db      	ldrb	r3, [r3, #3]
 800a986:	2b01      	cmp	r3, #1
 800a988:	d11f      	bne.n	800a9ca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	015a      	lsls	r2, r3, #5
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	4413      	add	r3, r2
 800a992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	69ba      	ldr	r2, [r7, #24]
 800a99a:	0151      	lsls	r1, r2, #5
 800a99c:	69fa      	ldr	r2, [r7, #28]
 800a99e:	440a      	add	r2, r1
 800a9a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a9a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	015a      	lsls	r2, r3, #5
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	69ba      	ldr	r2, [r7, #24]
 800a9ba:	0151      	lsls	r1, r2, #5
 800a9bc:	69fa      	ldr	r2, [r7, #28]
 800a9be:	440a      	add	r2, r1
 800a9c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a9c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a9ca:	79fb      	ldrb	r3, [r7, #7]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d14b      	bne.n	800aa68 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d009      	beq.n	800a9ec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	015a      	lsls	r2, r3, #5
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	4413      	add	r3, r2
 800a9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	78db      	ldrb	r3, [r3, #3]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d128      	bne.n	800aa46 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d110      	bne.n	800aa26 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	015a      	lsls	r2, r3, #5
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	69ba      	ldr	r2, [r7, #24]
 800aa14:	0151      	lsls	r1, r2, #5
 800aa16:	69fa      	ldr	r2, [r7, #28]
 800aa18:	440a      	add	r2, r1
 800aa1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa22:	6013      	str	r3, [r2, #0]
 800aa24:	e00f      	b.n	800aa46 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	015a      	lsls	r2, r3, #5
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	69ba      	ldr	r2, [r7, #24]
 800aa36:	0151      	lsls	r1, r2, #5
 800aa38:	69fa      	ldr	r2, [r7, #28]
 800aa3a:	440a      	add	r2, r1
 800aa3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa44:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	015a      	lsls	r2, r3, #5
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	69ba      	ldr	r2, [r7, #24]
 800aa56:	0151      	lsls	r1, r2, #5
 800aa58:	69fa      	ldr	r2, [r7, #28]
 800aa5a:	440a      	add	r2, r1
 800aa5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa64:	6013      	str	r3, [r2, #0]
 800aa66:	e12f      	b.n	800acc8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	015a      	lsls	r2, r3, #5
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	4413      	add	r3, r2
 800aa70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	69ba      	ldr	r2, [r7, #24]
 800aa78:	0151      	lsls	r1, r2, #5
 800aa7a:	69fa      	ldr	r2, [r7, #28]
 800aa7c:	440a      	add	r2, r1
 800aa7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa86:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	78db      	ldrb	r3, [r3, #3]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d015      	beq.n	800aabc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 8117 	beq.w	800acc8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	f003 030f 	and.w	r3, r3, #15
 800aaaa:	2101      	movs	r1, #1
 800aaac:	fa01 f303 	lsl.w	r3, r1, r3
 800aab0:	69f9      	ldr	r1, [r7, #28]
 800aab2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aab6:	4313      	orrs	r3, r2
 800aab8:	634b      	str	r3, [r1, #52]	; 0x34
 800aaba:	e105      	b.n	800acc8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d110      	bne.n	800aaee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	015a      	lsls	r2, r3, #5
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	4413      	add	r3, r2
 800aad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	69ba      	ldr	r2, [r7, #24]
 800aadc:	0151      	lsls	r1, r2, #5
 800aade:	69fa      	ldr	r2, [r7, #28]
 800aae0:	440a      	add	r2, r1
 800aae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aae6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	e00f      	b.n	800ab0e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	015a      	lsls	r2, r3, #5
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	69ba      	ldr	r2, [r7, #24]
 800aafe:	0151      	lsls	r1, r2, #5
 800ab00:	69fa      	ldr	r2, [r7, #28]
 800ab02:	440a      	add	r2, r1
 800ab04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab0c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	68d9      	ldr	r1, [r3, #12]
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	781a      	ldrb	r2, [r3, #0]
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	695b      	ldr	r3, [r3, #20]
 800ab1a:	b298      	uxth	r0, r3
 800ab1c:	79fb      	ldrb	r3, [r7, #7]
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	4603      	mov	r3, r0
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f000 fa2a 	bl	800af7c <USB_WritePacket>
 800ab28:	e0ce      	b.n	800acc8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	69ba      	ldr	r2, [r7, #24]
 800ab3a:	0151      	lsls	r1, r2, #5
 800ab3c:	69fa      	ldr	r2, [r7, #28]
 800ab3e:	440a      	add	r2, r1
 800ab40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab44:	0cdb      	lsrs	r3, r3, #19
 800ab46:	04db      	lsls	r3, r3, #19
 800ab48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	015a      	lsls	r2, r3, #5
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	4413      	add	r3, r2
 800ab52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab56:	691b      	ldr	r3, [r3, #16]
 800ab58:	69ba      	ldr	r2, [r7, #24]
 800ab5a:	0151      	lsls	r1, r2, #5
 800ab5c:	69fa      	ldr	r2, [r7, #28]
 800ab5e:	440a      	add	r2, r1
 800ab60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab6c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	695b      	ldr	r3, [r3, #20]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d126      	bne.n	800abc4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	015a      	lsls	r2, r3, #5
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab82:	691a      	ldr	r2, [r3, #16]
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab8c:	69b9      	ldr	r1, [r7, #24]
 800ab8e:	0148      	lsls	r0, r1, #5
 800ab90:	69f9      	ldr	r1, [r7, #28]
 800ab92:	4401      	add	r1, r0
 800ab94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	015a      	lsls	r2, r3, #5
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	69ba      	ldr	r2, [r7, #24]
 800abac:	0151      	lsls	r1, r2, #5
 800abae:	69fa      	ldr	r2, [r7, #28]
 800abb0:	440a      	add	r2, r1
 800abb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abba:	6113      	str	r3, [r2, #16]
 800abbc:	e036      	b.n	800ac2c <USB_EPStartXfer+0x3dc>
 800abbe:	bf00      	nop
 800abc0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	695a      	ldr	r2, [r3, #20]
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	4413      	add	r3, r2
 800abce:	1e5a      	subs	r2, r3, #1
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800abd8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	015a      	lsls	r2, r3, #5
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	4413      	add	r3, r2
 800abe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe6:	691a      	ldr	r2, [r3, #16]
 800abe8:	8afb      	ldrh	r3, [r7, #22]
 800abea:	04d9      	lsls	r1, r3, #19
 800abec:	4b39      	ldr	r3, [pc, #228]	; (800acd4 <USB_EPStartXfer+0x484>)
 800abee:	400b      	ands	r3, r1
 800abf0:	69b9      	ldr	r1, [r7, #24]
 800abf2:	0148      	lsls	r0, r1, #5
 800abf4:	69f9      	ldr	r1, [r7, #28]
 800abf6:	4401      	add	r1, r0
 800abf8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800abfc:	4313      	orrs	r3, r2
 800abfe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	015a      	lsls	r2, r3, #5
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	4413      	add	r3, r2
 800ac08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac0c:	691a      	ldr	r2, [r3, #16]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	8af9      	ldrh	r1, [r7, #22]
 800ac14:	fb01 f303 	mul.w	r3, r1, r3
 800ac18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac1c:	69b9      	ldr	r1, [r7, #24]
 800ac1e:	0148      	lsls	r0, r1, #5
 800ac20:	69f9      	ldr	r1, [r7, #28]
 800ac22:	4401      	add	r1, r0
 800ac24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ac2c:	79fb      	ldrb	r3, [r7, #7]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d10d      	bne.n	800ac4e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d009      	beq.n	800ac4e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	68d9      	ldr	r1, [r3, #12]
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	015a      	lsls	r2, r3, #5
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	4413      	add	r3, r2
 800ac46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac4a:	460a      	mov	r2, r1
 800ac4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	78db      	ldrb	r3, [r3, #3]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d128      	bne.n	800aca8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d110      	bne.n	800ac88 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	015a      	lsls	r2, r3, #5
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	69ba      	ldr	r2, [r7, #24]
 800ac76:	0151      	lsls	r1, r2, #5
 800ac78:	69fa      	ldr	r2, [r7, #28]
 800ac7a:	440a      	add	r2, r1
 800ac7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac84:	6013      	str	r3, [r2, #0]
 800ac86:	e00f      	b.n	800aca8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	015a      	lsls	r2, r3, #5
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	4413      	add	r3, r2
 800ac90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	69ba      	ldr	r2, [r7, #24]
 800ac98:	0151      	lsls	r1, r2, #5
 800ac9a:	69fa      	ldr	r2, [r7, #28]
 800ac9c:	440a      	add	r2, r1
 800ac9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aca6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	015a      	lsls	r2, r3, #5
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	4413      	add	r3, r2
 800acb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	69ba      	ldr	r2, [r7, #24]
 800acb8:	0151      	lsls	r1, r2, #5
 800acba:	69fa      	ldr	r2, [r7, #28]
 800acbc:	440a      	add	r2, r1
 800acbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	3720      	adds	r7, #32
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	1ff80000 	.word	0x1ff80000

0800acd8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800acd8:	b480      	push	{r7}
 800acda:	b087      	sub	sp, #28
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	4613      	mov	r3, r2
 800ace4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	785b      	ldrb	r3, [r3, #1]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	f040 80cd 	bne.w	800ae94 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	695b      	ldr	r3, [r3, #20]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d132      	bne.n	800ad68 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	015a      	lsls	r2, r3, #5
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	4413      	add	r3, r2
 800ad0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	693a      	ldr	r2, [r7, #16]
 800ad12:	0151      	lsls	r1, r2, #5
 800ad14:	697a      	ldr	r2, [r7, #20]
 800ad16:	440a      	add	r2, r1
 800ad18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	015a      	lsls	r2, r3, #5
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	693a      	ldr	r2, [r7, #16]
 800ad36:	0151      	lsls	r1, r2, #5
 800ad38:	697a      	ldr	r2, [r7, #20]
 800ad3a:	440a      	add	r2, r1
 800ad3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	015a      	lsls	r2, r3, #5
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	0151      	lsls	r1, r2, #5
 800ad58:	697a      	ldr	r2, [r7, #20]
 800ad5a:	440a      	add	r2, r1
 800ad5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad60:	0cdb      	lsrs	r3, r3, #19
 800ad62:	04db      	lsls	r3, r3, #19
 800ad64:	6113      	str	r3, [r2, #16]
 800ad66:	e04e      	b.n	800ae06 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	015a      	lsls	r2, r3, #5
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	4413      	add	r3, r2
 800ad70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	693a      	ldr	r2, [r7, #16]
 800ad78:	0151      	lsls	r1, r2, #5
 800ad7a:	697a      	ldr	r2, [r7, #20]
 800ad7c:	440a      	add	r2, r1
 800ad7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad82:	0cdb      	lsrs	r3, r3, #19
 800ad84:	04db      	lsls	r3, r3, #19
 800ad86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	015a      	lsls	r2, r3, #5
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	0151      	lsls	r1, r2, #5
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	440a      	add	r2, r1
 800ad9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ada2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ada6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800adaa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	695a      	ldr	r2, [r3, #20]
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d903      	bls.n	800adc0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	689a      	ldr	r2, [r3, #8]
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	015a      	lsls	r2, r3, #5
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	4413      	add	r3, r2
 800adc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	693a      	ldr	r2, [r7, #16]
 800add0:	0151      	lsls	r1, r2, #5
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	440a      	add	r2, r1
 800add6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adec:	691a      	ldr	r2, [r3, #16]
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	695b      	ldr	r3, [r3, #20]
 800adf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adf6:	6939      	ldr	r1, [r7, #16]
 800adf8:	0148      	lsls	r0, r1, #5
 800adfa:	6979      	ldr	r1, [r7, #20]
 800adfc:	4401      	add	r1, r0
 800adfe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ae02:	4313      	orrs	r3, r2
 800ae04:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ae06:	79fb      	ldrb	r3, [r7, #7]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d11e      	bne.n	800ae4a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d009      	beq.n	800ae28 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	015a      	lsls	r2, r3, #5
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae20:	461a      	mov	r2, r3
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	015a      	lsls	r2, r3, #5
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	4413      	add	r3, r2
 800ae30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	0151      	lsls	r1, r2, #5
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	440a      	add	r2, r1
 800ae3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae46:	6013      	str	r3, [r2, #0]
 800ae48:	e092      	b.n	800af70 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	015a      	lsls	r2, r3, #5
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	4413      	add	r3, r2
 800ae52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	693a      	ldr	r2, [r7, #16]
 800ae5a:	0151      	lsls	r1, r2, #5
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	440a      	add	r2, r1
 800ae60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae68:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	695b      	ldr	r3, [r3, #20]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d07e      	beq.n	800af70 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	f003 030f 	and.w	r3, r3, #15
 800ae82:	2101      	movs	r1, #1
 800ae84:	fa01 f303 	lsl.w	r3, r1, r3
 800ae88:	6979      	ldr	r1, [r7, #20]
 800ae8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	634b      	str	r3, [r1, #52]	; 0x34
 800ae92:	e06d      	b.n	800af70 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	015a      	lsls	r2, r3, #5
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	693a      	ldr	r2, [r7, #16]
 800aea4:	0151      	lsls	r1, r2, #5
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	440a      	add	r2, r1
 800aeaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeae:	0cdb      	lsrs	r3, r3, #19
 800aeb0:	04db      	lsls	r3, r3, #19
 800aeb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	015a      	lsls	r2, r3, #5
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	4413      	add	r3, r2
 800aebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	693a      	ldr	r2, [r7, #16]
 800aec4:	0151      	lsls	r1, r2, #5
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	440a      	add	r2, r1
 800aeca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aece:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aed2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aed6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	695b      	ldr	r3, [r3, #20]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d003      	beq.n	800aee8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	689a      	ldr	r2, [r3, #8]
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	015a      	lsls	r2, r3, #5
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	4413      	add	r3, r2
 800aef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	0151      	lsls	r1, r2, #5
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	440a      	add	r2, r1
 800aefe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	015a      	lsls	r2, r3, #5
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	4413      	add	r3, r2
 800af10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af14:	691a      	ldr	r2, [r3, #16]
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af1e:	6939      	ldr	r1, [r7, #16]
 800af20:	0148      	lsls	r0, r1, #5
 800af22:	6979      	ldr	r1, [r7, #20]
 800af24:	4401      	add	r1, r0
 800af26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800af2a:	4313      	orrs	r3, r2
 800af2c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800af2e:	79fb      	ldrb	r3, [r7, #7]
 800af30:	2b01      	cmp	r3, #1
 800af32:	d10d      	bne.n	800af50 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d009      	beq.n	800af50 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	68d9      	ldr	r1, [r3, #12]
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	015a      	lsls	r2, r3, #5
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	4413      	add	r3, r2
 800af48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af4c:	460a      	mov	r2, r1
 800af4e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	015a      	lsls	r2, r3, #5
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	4413      	add	r3, r2
 800af58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	0151      	lsls	r1, r2, #5
 800af62:	697a      	ldr	r2, [r7, #20]
 800af64:	440a      	add	r2, r1
 800af66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	371c      	adds	r7, #28
 800af76:	46bd      	mov	sp, r7
 800af78:	bc80      	pop	{r7}
 800af7a:	4770      	bx	lr

0800af7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b089      	sub	sp, #36	; 0x24
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	4611      	mov	r1, r2
 800af88:	461a      	mov	r2, r3
 800af8a:	460b      	mov	r3, r1
 800af8c:	71fb      	strb	r3, [r7, #7]
 800af8e:	4613      	mov	r3, r2
 800af90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800af9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d123      	bne.n	800afea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800afa2:	88bb      	ldrh	r3, [r7, #4]
 800afa4:	3303      	adds	r3, #3
 800afa6:	089b      	lsrs	r3, r3, #2
 800afa8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800afaa:	2300      	movs	r3, #0
 800afac:	61bb      	str	r3, [r7, #24]
 800afae:	e018      	b.n	800afe2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800afb0:	79fb      	ldrb	r3, [r7, #7]
 800afb2:	031a      	lsls	r2, r3, #12
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	4413      	add	r3, r2
 800afb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afbc:	461a      	mov	r2, r3
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	3301      	adds	r3, #1
 800afc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	3301      	adds	r3, #1
 800afce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	3301      	adds	r3, #1
 800afd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	3301      	adds	r3, #1
 800afda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	3301      	adds	r3, #1
 800afe0:	61bb      	str	r3, [r7, #24]
 800afe2:	69ba      	ldr	r2, [r7, #24]
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d3e2      	bcc.n	800afb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3724      	adds	r7, #36	; 0x24
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bc80      	pop	{r7}
 800aff4:	4770      	bx	lr

0800aff6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aff6:	b480      	push	{r7}
 800aff8:	b08b      	sub	sp, #44	; 0x2c
 800affa:	af00      	add	r7, sp, #0
 800affc:	60f8      	str	r0, [r7, #12]
 800affe:	60b9      	str	r1, [r7, #8]
 800b000:	4613      	mov	r3, r2
 800b002:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b00c:	88fb      	ldrh	r3, [r7, #6]
 800b00e:	089b      	lsrs	r3, r3, #2
 800b010:	b29b      	uxth	r3, r3
 800b012:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b014:	88fb      	ldrh	r3, [r7, #6]
 800b016:	f003 0303 	and.w	r3, r3, #3
 800b01a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b01c:	2300      	movs	r3, #0
 800b01e:	623b      	str	r3, [r7, #32]
 800b020:	e014      	b.n	800b04c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02c:	601a      	str	r2, [r3, #0]
    pDest++;
 800b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b030:	3301      	adds	r3, #1
 800b032:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b036:	3301      	adds	r3, #1
 800b038:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	3301      	adds	r3, #1
 800b03e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	3301      	adds	r3, #1
 800b044:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	3301      	adds	r3, #1
 800b04a:	623b      	str	r3, [r7, #32]
 800b04c:	6a3a      	ldr	r2, [r7, #32]
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	429a      	cmp	r2, r3
 800b052:	d3e6      	bcc.n	800b022 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b054:	8bfb      	ldrh	r3, [r7, #30]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d01e      	beq.n	800b098 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b05a:	2300      	movs	r3, #0
 800b05c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b064:	461a      	mov	r2, r3
 800b066:	f107 0310 	add.w	r3, r7, #16
 800b06a:	6812      	ldr	r2, [r2, #0]
 800b06c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	6a3b      	ldr	r3, [r7, #32]
 800b072:	b2db      	uxtb	r3, r3
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	fa22 f303 	lsr.w	r3, r2, r3
 800b07a:	b2da      	uxtb	r2, r3
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	701a      	strb	r2, [r3, #0]
      i++;
 800b080:	6a3b      	ldr	r3, [r7, #32]
 800b082:	3301      	adds	r3, #1
 800b084:	623b      	str	r3, [r7, #32]
      pDest++;
 800b086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b088:	3301      	adds	r3, #1
 800b08a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b08c:	8bfb      	ldrh	r3, [r7, #30]
 800b08e:	3b01      	subs	r3, #1
 800b090:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b092:	8bfb      	ldrh	r3, [r7, #30]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1ea      	bne.n	800b06e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	372c      	adds	r7, #44	; 0x2c
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bc80      	pop	{r7}
 800b0a2:	4770      	bx	lr

0800b0a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	785b      	ldrb	r3, [r3, #1]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d12c      	bne.n	800b11a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	015a      	lsls	r2, r3, #5
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	db12      	blt.n	800b0f8 <USB_EPSetStall+0x54>
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d00f      	beq.n	800b0f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	015a      	lsls	r2, r3, #5
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	4413      	add	r3, r2
 800b0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68ba      	ldr	r2, [r7, #8]
 800b0e8:	0151      	lsls	r1, r2, #5
 800b0ea:	68fa      	ldr	r2, [r7, #12]
 800b0ec:	440a      	add	r2, r1
 800b0ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b0f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	015a      	lsls	r2, r3, #5
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	4413      	add	r3, r2
 800b100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68ba      	ldr	r2, [r7, #8]
 800b108:	0151      	lsls	r1, r2, #5
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	440a      	add	r2, r1
 800b10e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b112:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b116:	6013      	str	r3, [r2, #0]
 800b118:	e02b      	b.n	800b172 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	015a      	lsls	r2, r3, #5
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	4413      	add	r3, r2
 800b122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	db12      	blt.n	800b152 <USB_EPSetStall+0xae>
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00f      	beq.n	800b152 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	015a      	lsls	r2, r3, #5
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	4413      	add	r3, r2
 800b13a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	0151      	lsls	r1, r2, #5
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	440a      	add	r2, r1
 800b148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b14c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b150:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	015a      	lsls	r2, r3, #5
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	4413      	add	r3, r2
 800b15a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	0151      	lsls	r1, r2, #5
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	440a      	add	r2, r1
 800b168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b16c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b170:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	bc80      	pop	{r7}
 800b17c:	4770      	bx	lr

0800b17e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b17e:	b480      	push	{r7}
 800b180:	b085      	sub	sp, #20
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	785b      	ldrb	r3, [r3, #1]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d128      	bne.n	800b1ec <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	015a      	lsls	r2, r3, #5
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	68ba      	ldr	r2, [r7, #8]
 800b1aa:	0151      	lsls	r1, r2, #5
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	440a      	add	r2, r1
 800b1b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b1b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	78db      	ldrb	r3, [r3, #3]
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d003      	beq.n	800b1ca <USB_EPClearStall+0x4c>
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	78db      	ldrb	r3, [r3, #3]
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	d138      	bne.n	800b23c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	015a      	lsls	r2, r3, #5
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	0151      	lsls	r1, r2, #5
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	440a      	add	r2, r1
 800b1e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1e8:	6013      	str	r3, [r2, #0]
 800b1ea:	e027      	b.n	800b23c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	015a      	lsls	r2, r3, #5
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	0151      	lsls	r1, r2, #5
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	440a      	add	r2, r1
 800b202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b206:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b20a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	78db      	ldrb	r3, [r3, #3]
 800b210:	2b03      	cmp	r3, #3
 800b212:	d003      	beq.n	800b21c <USB_EPClearStall+0x9e>
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	78db      	ldrb	r3, [r3, #3]
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d10f      	bne.n	800b23c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	015a      	lsls	r2, r3, #5
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4413      	add	r3, r2
 800b224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	0151      	lsls	r1, r2, #5
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	440a      	add	r2, r1
 800b232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b23a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3714      	adds	r7, #20
 800b242:	46bd      	mov	sp, r7
 800b244:	bc80      	pop	{r7}
 800b246:	4770      	bx	lr

0800b248 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	460b      	mov	r3, r1
 800b252:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b266:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b26a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	78fb      	ldrb	r3, [r7, #3]
 800b276:	011b      	lsls	r3, r3, #4
 800b278:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b27c:	68f9      	ldr	r1, [r7, #12]
 800b27e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b282:	4313      	orrs	r3, r2
 800b284:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3714      	adds	r7, #20
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bc80      	pop	{r7}
 800b290:	4770      	bx	lr

0800b292 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b292:	b480      	push	{r7}
 800b294:	b085      	sub	sp, #20
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b2ac:	f023 0303 	bic.w	r3, r3, #3
 800b2b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2c0:	f023 0302 	bic.w	r3, r3, #2
 800b2c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bc80      	pop	{r7}
 800b2d0:	4770      	bx	lr

0800b2d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b2d2:	b480      	push	{r7}
 800b2d4:	b085      	sub	sp, #20
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b2ec:	f023 0303 	bic.w	r3, r3, #3
 800b2f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b300:	f043 0302 	orr.w	r3, r3, #2
 800b304:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bc80      	pop	{r7}
 800b310:	4770      	bx	lr

0800b312 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b312:	b480      	push	{r7}
 800b314:	b085      	sub	sp, #20
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	695b      	ldr	r3, [r3, #20]
 800b31e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	699b      	ldr	r3, [r3, #24]
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	4013      	ands	r3, r2
 800b328:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b32a:	68fb      	ldr	r3, [r7, #12]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3714      	adds	r7, #20
 800b330:	46bd      	mov	sp, r7
 800b332:	bc80      	pop	{r7}
 800b334:	4770      	bx	lr

0800b336 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b336:	b480      	push	{r7}
 800b338:	b085      	sub	sp, #20
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b352:	69db      	ldr	r3, [r3, #28]
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	4013      	ands	r3, r2
 800b358:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	0c1b      	lsrs	r3, r3, #16
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3714      	adds	r7, #20
 800b362:	46bd      	mov	sp, r7
 800b364:	bc80      	pop	{r7}
 800b366:	4770      	bx	lr

0800b368 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b37a:	699b      	ldr	r3, [r3, #24]
 800b37c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b384:	69db      	ldr	r3, [r3, #28]
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	4013      	ands	r3, r2
 800b38a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	b29b      	uxth	r3, r3
}
 800b390:	4618      	mov	r0, r3
 800b392:	3714      	adds	r7, #20
 800b394:	46bd      	mov	sp, r7
 800b396:	bc80      	pop	{r7}
 800b398:	4770      	bx	lr

0800b39a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b39a:	b480      	push	{r7}
 800b39c:	b085      	sub	sp, #20
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b3aa:	78fb      	ldrb	r3, [r7, #3]
 800b3ac:	015a      	lsls	r2, r3, #5
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	68ba      	ldr	r2, [r7, #8]
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b3c8:	68bb      	ldr	r3, [r7, #8]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bc80      	pop	{r7}
 800b3d2:	4770      	bx	lr

0800b3d4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b087      	sub	sp, #28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	460b      	mov	r3, r1
 800b3de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b3f8:	78fb      	ldrb	r3, [r7, #3]
 800b3fa:	f003 030f 	and.w	r3, r3, #15
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	fa22 f303 	lsr.w	r3, r2, r3
 800b404:	01db      	lsls	r3, r3, #7
 800b406:	b2db      	uxtb	r3, r3
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b40e:	78fb      	ldrb	r3, [r7, #3]
 800b410:	015a      	lsls	r2, r3, #5
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	4413      	add	r3, r2
 800b416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	693a      	ldr	r2, [r7, #16]
 800b41e:	4013      	ands	r3, r2
 800b420:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b422:	68bb      	ldr	r3, [r7, #8]
}
 800b424:	4618      	mov	r0, r3
 800b426:	371c      	adds	r7, #28
 800b428:	46bd      	mov	sp, r7
 800b42a:	bc80      	pop	{r7}
 800b42c:	4770      	bx	lr

0800b42e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b42e:	b480      	push	{r7}
 800b430:	b083      	sub	sp, #12
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	695b      	ldr	r3, [r3, #20]
 800b43a:	f003 0301 	and.w	r3, r3, #1
}
 800b43e:	4618      	mov	r0, r3
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	bc80      	pop	{r7}
 800b446:	4770      	bx	lr

0800b448 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b462:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b466:	f023 0307 	bic.w	r3, r3, #7
 800b46a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b47a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b47e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3714      	adds	r7, #20
 800b486:	46bd      	mov	sp, r7
 800b488:	bc80      	pop	{r7}
 800b48a:	4770      	bx	lr

0800b48c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b087      	sub	sp, #28
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	460b      	mov	r3, r1
 800b496:	607a      	str	r2, [r7, #4]
 800b498:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	333c      	adds	r3, #60	; 0x3c
 800b4a2:	3304      	adds	r3, #4
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	4a25      	ldr	r2, [pc, #148]	; (800b540 <USB_EP0_OutStart+0xb4>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d90a      	bls.n	800b4c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4c0:	d101      	bne.n	800b4c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	e037      	b.n	800b536 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	697a      	ldr	r2, [r7, #20]
 800b4f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4f4:	f043 0318 	orr.w	r3, r3, #24
 800b4f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b500:	691b      	ldr	r3, [r3, #16]
 800b502:	697a      	ldr	r2, [r7, #20]
 800b504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b508:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b50c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b50e:	7afb      	ldrb	r3, [r7, #11]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d10f      	bne.n	800b534 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b51a:	461a      	mov	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	697a      	ldr	r2, [r7, #20]
 800b52a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b52e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b532:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	371c      	adds	r7, #28
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bc80      	pop	{r7}
 800b53e:	4770      	bx	lr
 800b540:	4f54300a 	.word	0x4f54300a

0800b544 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b54c:	2300      	movs	r3, #0
 800b54e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	3301      	adds	r3, #1
 800b554:	60fb      	str	r3, [r7, #12]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	4a12      	ldr	r2, [pc, #72]	; (800b5a4 <USB_CoreReset+0x60>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d901      	bls.n	800b562 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b55e:	2303      	movs	r3, #3
 800b560:	e01b      	b.n	800b59a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	691b      	ldr	r3, [r3, #16]
 800b566:	2b00      	cmp	r3, #0
 800b568:	daf2      	bge.n	800b550 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b56a:	2300      	movs	r3, #0
 800b56c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	f043 0201 	orr.w	r2, r3, #1
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	3301      	adds	r3, #1
 800b57e:	60fb      	str	r3, [r7, #12]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	4a08      	ldr	r2, [pc, #32]	; (800b5a4 <USB_CoreReset+0x60>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d901      	bls.n	800b58c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b588:	2303      	movs	r3, #3
 800b58a:	e006      	b.n	800b59a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	f003 0301 	and.w	r3, r3, #1
 800b594:	2b01      	cmp	r3, #1
 800b596:	d0f0      	beq.n	800b57a <USB_CoreReset+0x36>

  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3714      	adds	r7, #20
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bc80      	pop	{r7}
 800b5a2:	4770      	bx	lr
 800b5a4:	00030d40 	.word	0x00030d40

0800b5a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	7c1b      	ldrb	r3, [r3, #16]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d115      	bne.n	800b5ec <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b5c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5c4:	2202      	movs	r2, #2
 800b5c6:	2181      	movs	r1, #129	; 0x81
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f001 ff48 	bl	800d45e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b5d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5d8:	2202      	movs	r2, #2
 800b5da:	2101      	movs	r1, #1
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f001 ff3e 	bl	800d45e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b5ea:	e012      	b.n	800b612 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b5ec:	2340      	movs	r3, #64	; 0x40
 800b5ee:	2202      	movs	r2, #2
 800b5f0:	2181      	movs	r1, #129	; 0x81
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f001 ff33 	bl	800d45e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b5fe:	2340      	movs	r3, #64	; 0x40
 800b600:	2202      	movs	r2, #2
 800b602:	2101      	movs	r1, #1
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f001 ff2a 	bl	800d45e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2201      	movs	r2, #1
 800b60e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b612:	2308      	movs	r3, #8
 800b614:	2203      	movs	r2, #3
 800b616:	2182      	movs	r1, #130	; 0x82
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f001 ff20 	bl	800d45e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b624:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b628:	f004 f9cc 	bl	800f9c4 <malloc>
 800b62c:	4603      	mov	r3, r0
 800b62e:	461a      	mov	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d102      	bne.n	800b646 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800b640:	2301      	movs	r3, #1
 800b642:	73fb      	strb	r3, [r7, #15]
 800b644:	e026      	b.n	800b694 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b64c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	2200      	movs	r2, #0
 800b664:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	7c1b      	ldrb	r3, [r3, #16]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d109      	bne.n	800b684 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b67a:	2101      	movs	r1, #1
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f001 ffde 	bl	800d63e <USBD_LL_PrepareReceive>
 800b682:	e007      	b.n	800b694 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b68a:	2340      	movs	r3, #64	; 0x40
 800b68c:	2101      	movs	r1, #1
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f001 ffd5 	bl	800d63e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b694:	7bfb      	ldrb	r3, [r7, #15]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b084      	sub	sp, #16
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b6ae:	2181      	movs	r1, #129	; 0x81
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f001 fefa 	bl	800d4aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b6bc:	2101      	movs	r1, #1
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f001 fef3 	bl	800d4aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b6cc:	2182      	movs	r1, #130	; 0x82
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f001 feeb 	bl	800d4aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00e      	beq.n	800b702 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f004 f96d 	bl	800f9d4 <free>
    pdev->pClassData = NULL;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800b702:	7bfb      	ldrb	r3, [r7, #15]
}
 800b704:	4618      	mov	r0, r3
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b086      	sub	sp, #24
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b71c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b71e:	2300      	movs	r3, #0
 800b720:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b722:	2300      	movs	r3, #0
 800b724:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b726:	2300      	movs	r3, #0
 800b728:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b732:	2b00      	cmp	r3, #0
 800b734:	d039      	beq.n	800b7aa <USBD_CDC_Setup+0x9e>
 800b736:	2b20      	cmp	r3, #32
 800b738:	d17f      	bne.n	800b83a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	88db      	ldrh	r3, [r3, #6]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d029      	beq.n	800b796 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	b25b      	sxtb	r3, r3
 800b748:	2b00      	cmp	r3, #0
 800b74a:	da11      	bge.n	800b770 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	683a      	ldr	r2, [r7, #0]
 800b756:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b758:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	88d2      	ldrh	r2, [r2, #6]
 800b75e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b760:	6939      	ldr	r1, [r7, #16]
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	88db      	ldrh	r3, [r3, #6]
 800b766:	461a      	mov	r2, r3
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f001 fa42 	bl	800cbf2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b76e:	e06b      	b.n	800b848 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	785a      	ldrb	r2, [r3, #1]
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	88db      	ldrh	r3, [r3, #6]
 800b77e:	b2da      	uxtb	r2, r3
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b786:	6939      	ldr	r1, [r7, #16]
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	88db      	ldrh	r3, [r3, #6]
 800b78c:	461a      	mov	r2, r3
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f001 fa5d 	bl	800cc4e <USBD_CtlPrepareRx>
      break;
 800b794:	e058      	b.n	800b848 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	683a      	ldr	r2, [r7, #0]
 800b7a0:	7850      	ldrb	r0, [r2, #1]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	6839      	ldr	r1, [r7, #0]
 800b7a6:	4798      	blx	r3
      break;
 800b7a8:	e04e      	b.n	800b848 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	785b      	ldrb	r3, [r3, #1]
 800b7ae:	2b0b      	cmp	r3, #11
 800b7b0:	d02e      	beq.n	800b810 <USBD_CDC_Setup+0x104>
 800b7b2:	2b0b      	cmp	r3, #11
 800b7b4:	dc38      	bgt.n	800b828 <USBD_CDC_Setup+0x11c>
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d002      	beq.n	800b7c0 <USBD_CDC_Setup+0xb4>
 800b7ba:	2b0a      	cmp	r3, #10
 800b7bc:	d014      	beq.n	800b7e8 <USBD_CDC_Setup+0xdc>
 800b7be:	e033      	b.n	800b828 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7c6:	2b03      	cmp	r3, #3
 800b7c8:	d107      	bne.n	800b7da <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b7ca:	f107 030c 	add.w	r3, r7, #12
 800b7ce:	2202      	movs	r2, #2
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f001 fa0d 	bl	800cbf2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b7d8:	e02e      	b.n	800b838 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b7da:	6839      	ldr	r1, [r7, #0]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f001 f99e 	bl	800cb1e <USBD_CtlError>
            ret = USBD_FAIL;
 800b7e2:	2302      	movs	r3, #2
 800b7e4:	75fb      	strb	r3, [r7, #23]
          break;
 800b7e6:	e027      	b.n	800b838 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7ee:	2b03      	cmp	r3, #3
 800b7f0:	d107      	bne.n	800b802 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b7f2:	f107 030f 	add.w	r3, r7, #15
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f001 f9f9 	bl	800cbf2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b800:	e01a      	b.n	800b838 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b802:	6839      	ldr	r1, [r7, #0]
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f001 f98a 	bl	800cb1e <USBD_CtlError>
            ret = USBD_FAIL;
 800b80a:	2302      	movs	r3, #2
 800b80c:	75fb      	strb	r3, [r7, #23]
          break;
 800b80e:	e013      	b.n	800b838 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b816:	2b03      	cmp	r3, #3
 800b818:	d00d      	beq.n	800b836 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b81a:	6839      	ldr	r1, [r7, #0]
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f001 f97e 	bl	800cb1e <USBD_CtlError>
            ret = USBD_FAIL;
 800b822:	2302      	movs	r3, #2
 800b824:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b826:	e006      	b.n	800b836 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f001 f977 	bl	800cb1e <USBD_CtlError>
          ret = USBD_FAIL;
 800b830:	2302      	movs	r3, #2
 800b832:	75fb      	strb	r3, [r7, #23]
          break;
 800b834:	e000      	b.n	800b838 <USBD_CDC_Setup+0x12c>
          break;
 800b836:	bf00      	nop
      }
      break;
 800b838:	e006      	b.n	800b848 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b83a:	6839      	ldr	r1, [r7, #0]
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f001 f96e 	bl	800cb1e <USBD_CtlError>
      ret = USBD_FAIL;
 800b842:	2302      	movs	r3, #2
 800b844:	75fb      	strb	r3, [r7, #23]
      break;
 800b846:	bf00      	nop
  }

  return ret;
 800b848:	7dfb      	ldrb	r3, [r7, #23]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3718      	adds	r7, #24
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b084      	sub	sp, #16
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	460b      	mov	r3, r1
 800b85c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b864:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b86c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b874:	2b00      	cmp	r3, #0
 800b876:	d03a      	beq.n	800b8ee <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b878:	78fa      	ldrb	r2, [r7, #3]
 800b87a:	6879      	ldr	r1, [r7, #4]
 800b87c:	4613      	mov	r3, r2
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4413      	add	r3, r2
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	440b      	add	r3, r1
 800b886:	331c      	adds	r3, #28
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d029      	beq.n	800b8e2 <USBD_CDC_DataIn+0x90>
 800b88e:	78fa      	ldrb	r2, [r7, #3]
 800b890:	6879      	ldr	r1, [r7, #4]
 800b892:	4613      	mov	r3, r2
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	4413      	add	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	440b      	add	r3, r1
 800b89c:	331c      	adds	r3, #28
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	78f9      	ldrb	r1, [r7, #3]
 800b8a2:	68b8      	ldr	r0, [r7, #8]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	00db      	lsls	r3, r3, #3
 800b8a8:	1a5b      	subs	r3, r3, r1
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	4403      	add	r3, r0
 800b8ae:	3344      	adds	r3, #68	; 0x44
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	fbb2 f1f3 	udiv	r1, r2, r3
 800b8b6:	fb03 f301 	mul.w	r3, r3, r1
 800b8ba:	1ad3      	subs	r3, r2, r3
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d110      	bne.n	800b8e2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b8c0:	78fa      	ldrb	r2, [r7, #3]
 800b8c2:	6879      	ldr	r1, [r7, #4]
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	4413      	add	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	440b      	add	r3, r1
 800b8ce:	331c      	adds	r3, #28
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b8d4:	78f9      	ldrb	r1, [r7, #3]
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	2200      	movs	r2, #0
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f001 fe8c 	bl	800d5f8 <USBD_LL_Transmit>
 800b8e0:	e003      	b.n	800b8ea <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	e000      	b.n	800b8f0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b8ee:	2302      	movs	r3, #2
  }
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3710      	adds	r7, #16
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	460b      	mov	r3, r1
 800b902:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b90a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b90c:	78fb      	ldrb	r3, [r7, #3]
 800b90e:	4619      	mov	r1, r3
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f001 feb7 	bl	800d684 <USBD_LL_GetRxDataSize>
 800b916:	4602      	mov	r2, r0
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00d      	beq.n	800b944 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b93c:	4611      	mov	r1, r2
 800b93e:	4798      	blx	r3

    return USBD_OK;
 800b940:	2300      	movs	r3, #0
 800b942:	e000      	b.n	800b946 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b944:	2302      	movs	r3, #2
  }
}
 800b946:	4618      	mov	r0, r3
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b084      	sub	sp, #16
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b95c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b964:	2b00      	cmp	r3, #0
 800b966:	d015      	beq.n	800b994 <USBD_CDC_EP0_RxReady+0x46>
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b96e:	2bff      	cmp	r3, #255	; 0xff
 800b970:	d010      	beq.n	800b994 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b978:	689b      	ldr	r3, [r3, #8]
 800b97a:	68fa      	ldr	r2, [r7, #12]
 800b97c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b980:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b988:	b292      	uxth	r2, r2
 800b98a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	22ff      	movs	r2, #255	; 0xff
 800b990:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b994:	2300      	movs	r3, #0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
	...

0800b9a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2243      	movs	r2, #67	; 0x43
 800b9ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b9ae:	4b03      	ldr	r3, [pc, #12]	; (800b9bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	370c      	adds	r7, #12
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bc80      	pop	{r7}
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	200000b8 	.word	0x200000b8

0800b9c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2243      	movs	r2, #67	; 0x43
 800b9cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b9ce:	4b03      	ldr	r3, [pc, #12]	; (800b9dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bc80      	pop	{r7}
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	20000074 	.word	0x20000074

0800b9e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2243      	movs	r2, #67	; 0x43
 800b9ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b9ee:	4b03      	ldr	r3, [pc, #12]	; (800b9fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bc80      	pop	{r7}
 800b9f8:	4770      	bx	lr
 800b9fa:	bf00      	nop
 800b9fc:	200000fc 	.word	0x200000fc

0800ba00 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	220a      	movs	r2, #10
 800ba0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ba0e:	4b03      	ldr	r3, [pc, #12]	; (800ba1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bc80      	pop	{r7}
 800ba18:	4770      	bx	lr
 800ba1a:	bf00      	nop
 800ba1c:	20000030 	.word	0x20000030

0800ba20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d005      	beq.n	800ba40 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	683a      	ldr	r2, [r7, #0]
 800ba38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ba40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3714      	adds	r7, #20
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bc80      	pop	{r7}
 800ba4a:	4770      	bx	lr

0800ba4c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b087      	sub	sp, #28
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	4613      	mov	r3, r2
 800ba58:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba60:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	68ba      	ldr	r2, [r7, #8]
 800ba66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ba6a:	88fa      	ldrh	r2, [r7, #6]
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	371c      	adds	r7, #28
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bc80      	pop	{r7}
 800ba7c:	4770      	bx	lr

0800ba7e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b085      	sub	sp, #20
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
 800ba86:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba8e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3714      	adds	r7, #20
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bc80      	pop	{r7}
 800baa2:	4770      	bx	lr

0800baa4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bab2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baba:	2b00      	cmp	r3, #0
 800babc:	d01c      	beq.n	800baf8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d115      	bne.n	800baf4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2201      	movs	r2, #1
 800bacc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	2181      	movs	r1, #129	; 0x81
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f001 fd84 	bl	800d5f8 <USBD_LL_Transmit>

      return USBD_OK;
 800baf0:	2300      	movs	r3, #0
 800baf2:	e002      	b.n	800bafa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800baf4:	2301      	movs	r3, #1
 800baf6:	e000      	b.n	800bafa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800baf8:	2302      	movs	r3, #2
  }
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b084      	sub	sp, #16
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb10:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d017      	beq.n	800bb4c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	7c1b      	ldrb	r3, [r3, #16]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d109      	bne.n	800bb38 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb2e:	2101      	movs	r1, #1
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f001 fd84 	bl	800d63e <USBD_LL_PrepareReceive>
 800bb36:	e007      	b.n	800bb48 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb3e:	2340      	movs	r3, #64	; 0x40
 800bb40:	2101      	movs	r1, #1
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f001 fd7b 	bl	800d63e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	e000      	b.n	800bb4e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800bb4c:	2302      	movs	r3, #2
  }
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b084      	sub	sp, #16
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	60f8      	str	r0, [r7, #12]
 800bb5e:	60b9      	str	r1, [r7, #8]
 800bb60:	4613      	mov	r3, r2
 800bb62:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d101      	bne.n	800bb6e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bb6a:	2302      	movs	r3, #2
 800bb6c:	e01a      	b.n	800bba4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d003      	beq.n	800bb80 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d003      	beq.n	800bb8e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	68ba      	ldr	r2, [r7, #8]
 800bb8a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2201      	movs	r2, #1
 800bb92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	79fa      	ldrb	r2, [r7, #7]
 800bb9a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f001 fbf9 	bl	800d394 <USBD_LL_Init>

  return USBD_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d006      	beq.n	800bbce <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	73fb      	strb	r3, [r7, #15]
 800bbcc:	e001      	b.n	800bbd2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800bbce:	2302      	movs	r3, #2
 800bbd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bbd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3714      	adds	r7, #20
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bc80      	pop	{r7}
 800bbdc:	4770      	bx	lr

0800bbde <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b082      	sub	sp, #8
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f001 fc1e 	bl	800d428 <USBD_LL_Start>

  return USBD_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b083      	sub	sp, #12
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bbfe:	2300      	movs	r3, #0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bc80      	pop	{r7}
 800bc08:	4770      	bx	lr

0800bc0a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b084      	sub	sp, #16
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
 800bc12:	460b      	mov	r3, r1
 800bc14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bc16:	2302      	movs	r3, #2
 800bc18:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00c      	beq.n	800bc3e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	78fa      	ldrb	r2, [r7, #3]
 800bc2e:	4611      	mov	r1, r2
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	4798      	blx	r3
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d101      	bne.n	800bc3e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800bc3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	78fa      	ldrb	r2, [r7, #3]
 800bc5e:	4611      	mov	r1, r2
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	4798      	blx	r3

  return USBD_OK;
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3708      	adds	r7, #8
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b082      	sub	sp, #8
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bc7e:	6839      	ldr	r1, [r7, #0]
 800bc80:	4618      	mov	r0, r3
 800bc82:	f000 ff10 	bl	800caa6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bc94:	461a      	mov	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bca2:	f003 031f 	and.w	r3, r3, #31
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d016      	beq.n	800bcd8 <USBD_LL_SetupStage+0x6a>
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d81c      	bhi.n	800bce8 <USBD_LL_SetupStage+0x7a>
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d002      	beq.n	800bcb8 <USBD_LL_SetupStage+0x4a>
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d008      	beq.n	800bcc8 <USBD_LL_SetupStage+0x5a>
 800bcb6:	e017      	b.n	800bce8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 fa03 	bl	800c0cc <USBD_StdDevReq>
      break;
 800bcc6:	e01a      	b.n	800bcfe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 fa65 	bl	800c1a0 <USBD_StdItfReq>
      break;
 800bcd6:	e012      	b.n	800bcfe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bcde:	4619      	mov	r1, r3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 faa5 	bl	800c230 <USBD_StdEPReq>
      break;
 800bce6:	e00a      	b.n	800bcfe <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bcee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f001 fbf6 	bl	800d4e8 <USBD_LL_StallEP>
      break;
 800bcfc:	bf00      	nop
  }

  return USBD_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	460b      	mov	r3, r1
 800bd12:	607a      	str	r2, [r7, #4]
 800bd14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bd16:	7afb      	ldrb	r3, [r7, #11]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d14b      	bne.n	800bdb4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bd22:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd2a:	2b03      	cmp	r3, #3
 800bd2c:	d134      	bne.n	800bd98 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	68da      	ldr	r2, [r3, #12]
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d919      	bls.n	800bd6e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	68da      	ldr	r2, [r3, #12]
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	691b      	ldr	r3, [r3, #16]
 800bd42:	1ad2      	subs	r2, r2, r3
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	68da      	ldr	r2, [r3, #12]
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d203      	bcs.n	800bd5c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	e002      	b.n	800bd62 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	461a      	mov	r2, r3
 800bd64:	6879      	ldr	r1, [r7, #4]
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f000 ff8f 	bl	800cc8a <USBD_CtlContinueRx>
 800bd6c:	e038      	b.n	800bde0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd74:	691b      	ldr	r3, [r3, #16]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00a      	beq.n	800bd90 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bd80:	2b03      	cmp	r3, #3
 800bd82:	d105      	bne.n	800bd90 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f000 ff8c 	bl	800ccae <USBD_CtlSendStatus>
 800bd96:	e023      	b.n	800bde0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd9e:	2b05      	cmp	r3, #5
 800bda0:	d11e      	bne.n	800bde0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800bdaa:	2100      	movs	r1, #0
 800bdac:	68f8      	ldr	r0, [r7, #12]
 800bdae:	f001 fb9b 	bl	800d4e8 <USBD_LL_StallEP>
 800bdb2:	e015      	b.n	800bde0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdba:	699b      	ldr	r3, [r3, #24]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00d      	beq.n	800bddc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bdc6:	2b03      	cmp	r3, #3
 800bdc8:	d108      	bne.n	800bddc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdd0:	699b      	ldr	r3, [r3, #24]
 800bdd2:	7afa      	ldrb	r2, [r7, #11]
 800bdd4:	4611      	mov	r1, r2
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	4798      	blx	r3
 800bdda:	e001      	b.n	800bde0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bddc:	2302      	movs	r3, #2
 800bdde:	e000      	b.n	800bde2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b086      	sub	sp, #24
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	60f8      	str	r0, [r7, #12]
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	607a      	str	r2, [r7, #4]
 800bdf6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bdf8:	7afb      	ldrb	r3, [r7, #11]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d17f      	bne.n	800befe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	3314      	adds	r3, #20
 800be02:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	d15c      	bne.n	800bec8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	68da      	ldr	r2, [r3, #12]
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	429a      	cmp	r2, r3
 800be18:	d915      	bls.n	800be46 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	68da      	ldr	r2, [r3, #12]
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	691b      	ldr	r3, [r3, #16]
 800be22:	1ad2      	subs	r2, r2, r3
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	461a      	mov	r2, r3
 800be30:	6879      	ldr	r1, [r7, #4]
 800be32:	68f8      	ldr	r0, [r7, #12]
 800be34:	f000 fef9 	bl	800cc2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be38:	2300      	movs	r3, #0
 800be3a:	2200      	movs	r2, #0
 800be3c:	2100      	movs	r1, #0
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f001 fbfd 	bl	800d63e <USBD_LL_PrepareReceive>
 800be44:	e04e      	b.n	800bee4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	697a      	ldr	r2, [r7, #20]
 800be4c:	6912      	ldr	r2, [r2, #16]
 800be4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800be52:	fb02 f201 	mul.w	r2, r2, r1
 800be56:	1a9b      	subs	r3, r3, r2
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d11c      	bne.n	800be96 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	689a      	ldr	r2, [r3, #8]
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800be64:	429a      	cmp	r2, r3
 800be66:	d316      	bcc.n	800be96 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	689a      	ldr	r2, [r3, #8]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800be72:	429a      	cmp	r2, r3
 800be74:	d20f      	bcs.n	800be96 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800be76:	2200      	movs	r2, #0
 800be78:	2100      	movs	r1, #0
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f000 fed5 	bl	800cc2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2200      	movs	r2, #0
 800be84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be88:	2300      	movs	r3, #0
 800be8a:	2200      	movs	r2, #0
 800be8c:	2100      	movs	r1, #0
 800be8e:	68f8      	ldr	r0, [r7, #12]
 800be90:	f001 fbd5 	bl	800d63e <USBD_LL_PrepareReceive>
 800be94:	e026      	b.n	800bee4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00a      	beq.n	800beb8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bea8:	2b03      	cmp	r3, #3
 800beaa:	d105      	bne.n	800beb8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800beb8:	2180      	movs	r1, #128	; 0x80
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f001 fb14 	bl	800d4e8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f000 ff07 	bl	800ccd4 <USBD_CtlReceiveStatus>
 800bec6:	e00d      	b.n	800bee4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bece:	2b04      	cmp	r3, #4
 800bed0:	d004      	beq.n	800bedc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d103      	bne.n	800bee4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bedc:	2180      	movs	r1, #128	; 0x80
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f001 fb02 	bl	800d4e8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800beea:	2b01      	cmp	r3, #1
 800beec:	d11d      	bne.n	800bf2a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f7ff fe81 	bl	800bbf6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2200      	movs	r2, #0
 800bef8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800befc:	e015      	b.n	800bf2a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf04:	695b      	ldr	r3, [r3, #20]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00d      	beq.n	800bf26 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bf10:	2b03      	cmp	r3, #3
 800bf12:	d108      	bne.n	800bf26 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf1a:	695b      	ldr	r3, [r3, #20]
 800bf1c:	7afa      	ldrb	r2, [r7, #11]
 800bf1e:	4611      	mov	r1, r2
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	4798      	blx	r3
 800bf24:	e001      	b.n	800bf2a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bf26:	2302      	movs	r3, #2
 800bf28:	e000      	b.n	800bf2c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3718      	adds	r7, #24
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf3c:	2340      	movs	r3, #64	; 0x40
 800bf3e:	2200      	movs	r2, #0
 800bf40:	2100      	movs	r1, #0
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f001 fa8b 	bl	800d45e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2240      	movs	r2, #64	; 0x40
 800bf54:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf58:	2340      	movs	r3, #64	; 0x40
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	2180      	movs	r1, #128	; 0x80
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f001 fa7d 	bl	800d45e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2240      	movs	r2, #64	; 0x40
 800bf6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2201      	movs	r2, #1
 800bf74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d009      	beq.n	800bfac <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	6852      	ldr	r2, [r2, #4]
 800bfa4:	b2d2      	uxtb	r2, r2
 800bfa6:	4611      	mov	r1, r2
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	4798      	blx	r3
  }

  return USBD_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bfb6:	b480      	push	{r7}
 800bfb8:	b083      	sub	sp, #12
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	78fa      	ldrb	r2, [r7, #3]
 800bfc6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	370c      	adds	r7, #12
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bc80      	pop	{r7}
 800bfd2:	4770      	bx	lr

0800bfd4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2204      	movs	r2, #4
 800bfec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bff0:	2300      	movs	r3, #0
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	370c      	adds	r7, #12
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bc80      	pop	{r7}
 800bffa:	4770      	bx	lr

0800bffc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c00a:	2b04      	cmp	r3, #4
 800c00c:	d105      	bne.n	800c01a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	bc80      	pop	{r7}
 800c024:	4770      	bx	lr

0800c026 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b082      	sub	sp, #8
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c034:	2b03      	cmp	r3, #3
 800c036:	d10b      	bne.n	800c050 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c03e:	69db      	ldr	r3, [r3, #28]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d005      	beq.n	800c050 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c04a:	69db      	ldr	r3, [r3, #28]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c050:	2300      	movs	r3, #0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3708      	adds	r7, #8
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c05a:	b480      	push	{r7}
 800c05c:	b083      	sub	sp, #12
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
 800c062:	460b      	mov	r3, r1
 800c064:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c066:	2300      	movs	r3, #0
}
 800c068:	4618      	mov	r0, r3
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bc80      	pop	{r7}
 800c070:	4770      	bx	lr

0800c072 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c072:	b480      	push	{r7}
 800c074:	b083      	sub	sp, #12
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	460b      	mov	r3, r1
 800c07c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c07e:	2300      	movs	r3, #0
}
 800c080:	4618      	mov	r0, r3
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	bc80      	pop	{r7}
 800c088:	4770      	bx	lr

0800c08a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c08a:	b480      	push	{r7}
 800c08c:	b083      	sub	sp, #12
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c092:	2300      	movs	r3, #0
}
 800c094:	4618      	mov	r0, r3
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	bc80      	pop	{r7}
 800c09c:	4770      	bx	lr

0800c09e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b082      	sub	sp, #8
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	6852      	ldr	r2, [r2, #4]
 800c0ba:	b2d2      	uxtb	r2, r2
 800c0bc:	4611      	mov	r1, r2
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	4798      	blx	r3

  return USBD_OK;
 800c0c2:	2300      	movs	r3, #0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0e2:	2b40      	cmp	r3, #64	; 0x40
 800c0e4:	d005      	beq.n	800c0f2 <USBD_StdDevReq+0x26>
 800c0e6:	2b40      	cmp	r3, #64	; 0x40
 800c0e8:	d84f      	bhi.n	800c18a <USBD_StdDevReq+0xbe>
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d009      	beq.n	800c102 <USBD_StdDevReq+0x36>
 800c0ee:	2b20      	cmp	r3, #32
 800c0f0:	d14b      	bne.n	800c18a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	4798      	blx	r3
      break;
 800c100:	e048      	b.n	800c194 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	785b      	ldrb	r3, [r3, #1]
 800c106:	2b09      	cmp	r3, #9
 800c108:	d839      	bhi.n	800c17e <USBD_StdDevReq+0xb2>
 800c10a:	a201      	add	r2, pc, #4	; (adr r2, 800c110 <USBD_StdDevReq+0x44>)
 800c10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c110:	0800c161 	.word	0x0800c161
 800c114:	0800c175 	.word	0x0800c175
 800c118:	0800c17f 	.word	0x0800c17f
 800c11c:	0800c16b 	.word	0x0800c16b
 800c120:	0800c17f 	.word	0x0800c17f
 800c124:	0800c143 	.word	0x0800c143
 800c128:	0800c139 	.word	0x0800c139
 800c12c:	0800c17f 	.word	0x0800c17f
 800c130:	0800c157 	.word	0x0800c157
 800c134:	0800c14d 	.word	0x0800c14d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c138:	6839      	ldr	r1, [r7, #0]
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 f9dc 	bl	800c4f8 <USBD_GetDescriptor>
          break;
 800c140:	e022      	b.n	800c188 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c142:	6839      	ldr	r1, [r7, #0]
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 fb3f 	bl	800c7c8 <USBD_SetAddress>
          break;
 800c14a:	e01d      	b.n	800c188 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c14c:	6839      	ldr	r1, [r7, #0]
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fb7e 	bl	800c850 <USBD_SetConfig>
          break;
 800c154:	e018      	b.n	800c188 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 fc07 	bl	800c96c <USBD_GetConfig>
          break;
 800c15e:	e013      	b.n	800c188 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c160:	6839      	ldr	r1, [r7, #0]
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 fc37 	bl	800c9d6 <USBD_GetStatus>
          break;
 800c168:	e00e      	b.n	800c188 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c16a:	6839      	ldr	r1, [r7, #0]
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fc65 	bl	800ca3c <USBD_SetFeature>
          break;
 800c172:	e009      	b.n	800c188 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c174:	6839      	ldr	r1, [r7, #0]
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 fc74 	bl	800ca64 <USBD_ClrFeature>
          break;
 800c17c:	e004      	b.n	800c188 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fccc 	bl	800cb1e <USBD_CtlError>
          break;
 800c186:	bf00      	nop
      }
      break;
 800c188:	e004      	b.n	800c194 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c18a:	6839      	ldr	r1, [r7, #0]
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 fcc6 	bl	800cb1e <USBD_CtlError>
      break;
 800c192:	bf00      	nop
  }

  return ret;
 800c194:	7bfb      	ldrb	r3, [r7, #15]
}
 800c196:	4618      	mov	r0, r3
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop

0800c1a0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c1b6:	2b40      	cmp	r3, #64	; 0x40
 800c1b8:	d005      	beq.n	800c1c6 <USBD_StdItfReq+0x26>
 800c1ba:	2b40      	cmp	r3, #64	; 0x40
 800c1bc:	d82e      	bhi.n	800c21c <USBD_StdItfReq+0x7c>
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d001      	beq.n	800c1c6 <USBD_StdItfReq+0x26>
 800c1c2:	2b20      	cmp	r3, #32
 800c1c4:	d12a      	bne.n	800c21c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	d81d      	bhi.n	800c20e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	889b      	ldrh	r3, [r3, #4]
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d813      	bhi.n	800c204 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	6839      	ldr	r1, [r7, #0]
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	4798      	blx	r3
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	88db      	ldrh	r3, [r3, #6]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d110      	bne.n	800c218 <USBD_StdItfReq+0x78>
 800c1f6:	7bfb      	ldrb	r3, [r7, #15]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10d      	bne.n	800c218 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 fd56 	bl	800ccae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c202:	e009      	b.n	800c218 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fc89 	bl	800cb1e <USBD_CtlError>
          break;
 800c20c:	e004      	b.n	800c218 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800c20e:	6839      	ldr	r1, [r7, #0]
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 fc84 	bl	800cb1e <USBD_CtlError>
          break;
 800c216:	e000      	b.n	800c21a <USBD_StdItfReq+0x7a>
          break;
 800c218:	bf00      	nop
      }
      break;
 800c21a:	e004      	b.n	800c226 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800c21c:	6839      	ldr	r1, [r7, #0]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fc7d 	bl	800cb1e <USBD_CtlError>
      break;
 800c224:	bf00      	nop
  }

  return USBD_OK;
 800c226:	2300      	movs	r3, #0
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c23a:	2300      	movs	r3, #0
 800c23c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	889b      	ldrh	r3, [r3, #4]
 800c242:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c24c:	2b40      	cmp	r3, #64	; 0x40
 800c24e:	d007      	beq.n	800c260 <USBD_StdEPReq+0x30>
 800c250:	2b40      	cmp	r3, #64	; 0x40
 800c252:	f200 8146 	bhi.w	800c4e2 <USBD_StdEPReq+0x2b2>
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00a      	beq.n	800c270 <USBD_StdEPReq+0x40>
 800c25a:	2b20      	cmp	r3, #32
 800c25c:	f040 8141 	bne.w	800c4e2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	6839      	ldr	r1, [r7, #0]
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	4798      	blx	r3
      break;
 800c26e:	e13d      	b.n	800c4ec <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c278:	2b20      	cmp	r3, #32
 800c27a:	d10a      	bne.n	800c292 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	6839      	ldr	r1, [r7, #0]
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	4798      	blx	r3
 800c28a:	4603      	mov	r3, r0
 800c28c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c28e:	7bfb      	ldrb	r3, [r7, #15]
 800c290:	e12d      	b.n	800c4ee <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	785b      	ldrb	r3, [r3, #1]
 800c296:	2b03      	cmp	r3, #3
 800c298:	d007      	beq.n	800c2aa <USBD_StdEPReq+0x7a>
 800c29a:	2b03      	cmp	r3, #3
 800c29c:	f300 811b 	bgt.w	800c4d6 <USBD_StdEPReq+0x2a6>
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d072      	beq.n	800c38a <USBD_StdEPReq+0x15a>
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d03a      	beq.n	800c31e <USBD_StdEPReq+0xee>
 800c2a8:	e115      	b.n	800c4d6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2b0:	2b02      	cmp	r3, #2
 800c2b2:	d002      	beq.n	800c2ba <USBD_StdEPReq+0x8a>
 800c2b4:	2b03      	cmp	r3, #3
 800c2b6:	d015      	beq.n	800c2e4 <USBD_StdEPReq+0xb4>
 800c2b8:	e02b      	b.n	800c312 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2ba:	7bbb      	ldrb	r3, [r7, #14]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00c      	beq.n	800c2da <USBD_StdEPReq+0xaa>
 800c2c0:	7bbb      	ldrb	r3, [r7, #14]
 800c2c2:	2b80      	cmp	r3, #128	; 0x80
 800c2c4:	d009      	beq.n	800c2da <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c2c6:	7bbb      	ldrb	r3, [r7, #14]
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f001 f90c 	bl	800d4e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c2d0:	2180      	movs	r1, #128	; 0x80
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f001 f908 	bl	800d4e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c2d8:	e020      	b.n	800c31c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c2da:	6839      	ldr	r1, [r7, #0]
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fc1e 	bl	800cb1e <USBD_CtlError>
              break;
 800c2e2:	e01b      	b.n	800c31c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	885b      	ldrh	r3, [r3, #2]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d10e      	bne.n	800c30a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c2ec:	7bbb      	ldrb	r3, [r7, #14]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00b      	beq.n	800c30a <USBD_StdEPReq+0xda>
 800c2f2:	7bbb      	ldrb	r3, [r7, #14]
 800c2f4:	2b80      	cmp	r3, #128	; 0x80
 800c2f6:	d008      	beq.n	800c30a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	88db      	ldrh	r3, [r3, #6]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d104      	bne.n	800c30a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c300:	7bbb      	ldrb	r3, [r7, #14]
 800c302:	4619      	mov	r1, r3
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f001 f8ef 	bl	800d4e8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 fccf 	bl	800ccae <USBD_CtlSendStatus>

              break;
 800c310:	e004      	b.n	800c31c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c312:	6839      	ldr	r1, [r7, #0]
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fc02 	bl	800cb1e <USBD_CtlError>
              break;
 800c31a:	bf00      	nop
          }
          break;
 800c31c:	e0e0      	b.n	800c4e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c324:	2b02      	cmp	r3, #2
 800c326:	d002      	beq.n	800c32e <USBD_StdEPReq+0xfe>
 800c328:	2b03      	cmp	r3, #3
 800c32a:	d015      	beq.n	800c358 <USBD_StdEPReq+0x128>
 800c32c:	e026      	b.n	800c37c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c32e:	7bbb      	ldrb	r3, [r7, #14]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00c      	beq.n	800c34e <USBD_StdEPReq+0x11e>
 800c334:	7bbb      	ldrb	r3, [r7, #14]
 800c336:	2b80      	cmp	r3, #128	; 0x80
 800c338:	d009      	beq.n	800c34e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c33a:	7bbb      	ldrb	r3, [r7, #14]
 800c33c:	4619      	mov	r1, r3
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f001 f8d2 	bl	800d4e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c344:	2180      	movs	r1, #128	; 0x80
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f001 f8ce 	bl	800d4e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c34c:	e01c      	b.n	800c388 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c34e:	6839      	ldr	r1, [r7, #0]
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 fbe4 	bl	800cb1e <USBD_CtlError>
              break;
 800c356:	e017      	b.n	800c388 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	885b      	ldrh	r3, [r3, #2]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d112      	bne.n	800c386 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c360:	7bbb      	ldrb	r3, [r7, #14]
 800c362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c366:	2b00      	cmp	r3, #0
 800c368:	d004      	beq.n	800c374 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c36a:	7bbb      	ldrb	r3, [r7, #14]
 800c36c:	4619      	mov	r1, r3
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f001 f8d9 	bl	800d526 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 fc9a 	bl	800ccae <USBD_CtlSendStatus>
              }
              break;
 800c37a:	e004      	b.n	800c386 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c37c:	6839      	ldr	r1, [r7, #0]
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 fbcd 	bl	800cb1e <USBD_CtlError>
              break;
 800c384:	e000      	b.n	800c388 <USBD_StdEPReq+0x158>
              break;
 800c386:	bf00      	nop
          }
          break;
 800c388:	e0aa      	b.n	800c4e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c390:	2b02      	cmp	r3, #2
 800c392:	d002      	beq.n	800c39a <USBD_StdEPReq+0x16a>
 800c394:	2b03      	cmp	r3, #3
 800c396:	d032      	beq.n	800c3fe <USBD_StdEPReq+0x1ce>
 800c398:	e097      	b.n	800c4ca <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c39a:	7bbb      	ldrb	r3, [r7, #14]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d007      	beq.n	800c3b0 <USBD_StdEPReq+0x180>
 800c3a0:	7bbb      	ldrb	r3, [r7, #14]
 800c3a2:	2b80      	cmp	r3, #128	; 0x80
 800c3a4:	d004      	beq.n	800c3b0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c3a6:	6839      	ldr	r1, [r7, #0]
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 fbb8 	bl	800cb1e <USBD_CtlError>
                break;
 800c3ae:	e091      	b.n	800c4d4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	da0b      	bge.n	800c3d0 <USBD_StdEPReq+0x1a0>
 800c3b8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3be:	4613      	mov	r3, r2
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	4413      	add	r3, r2
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	3310      	adds	r3, #16
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	4413      	add	r3, r2
 800c3cc:	3304      	adds	r3, #4
 800c3ce:	e00b      	b.n	800c3e8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c3d0:	7bbb      	ldrb	r3, [r7, #14]
 800c3d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	4413      	add	r3, r2
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 fbfb 	bl	800cbf2 <USBD_CtlSendData>
              break;
 800c3fc:	e06a      	b.n	800c4d4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c3fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c402:	2b00      	cmp	r3, #0
 800c404:	da11      	bge.n	800c42a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c406:	7bbb      	ldrb	r3, [r7, #14]
 800c408:	f003 020f 	and.w	r2, r3, #15
 800c40c:	6879      	ldr	r1, [r7, #4]
 800c40e:	4613      	mov	r3, r2
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	4413      	add	r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	440b      	add	r3, r1
 800c418:	3318      	adds	r3, #24
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d117      	bne.n	800c450 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c420:	6839      	ldr	r1, [r7, #0]
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fb7b 	bl	800cb1e <USBD_CtlError>
                  break;
 800c428:	e054      	b.n	800c4d4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c42a:	7bbb      	ldrb	r3, [r7, #14]
 800c42c:	f003 020f 	and.w	r2, r3, #15
 800c430:	6879      	ldr	r1, [r7, #4]
 800c432:	4613      	mov	r3, r2
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	4413      	add	r3, r2
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	440b      	add	r3, r1
 800c43c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d104      	bne.n	800c450 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c446:	6839      	ldr	r1, [r7, #0]
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 fb68 	bl	800cb1e <USBD_CtlError>
                  break;
 800c44e:	e041      	b.n	800c4d4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c454:	2b00      	cmp	r3, #0
 800c456:	da0b      	bge.n	800c470 <USBD_StdEPReq+0x240>
 800c458:	7bbb      	ldrb	r3, [r7, #14]
 800c45a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c45e:	4613      	mov	r3, r2
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	4413      	add	r3, r2
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	3310      	adds	r3, #16
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	4413      	add	r3, r2
 800c46c:	3304      	adds	r3, #4
 800c46e:	e00b      	b.n	800c488 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c470:	7bbb      	ldrb	r3, [r7, #14]
 800c472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c476:	4613      	mov	r3, r2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4413      	add	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	4413      	add	r3, r2
 800c486:	3304      	adds	r3, #4
 800c488:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c48a:	7bbb      	ldrb	r3, [r7, #14]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d002      	beq.n	800c496 <USBD_StdEPReq+0x266>
 800c490:	7bbb      	ldrb	r3, [r7, #14]
 800c492:	2b80      	cmp	r3, #128	; 0x80
 800c494:	d103      	bne.n	800c49e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	2200      	movs	r2, #0
 800c49a:	601a      	str	r2, [r3, #0]
 800c49c:	e00e      	b.n	800c4bc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c49e:	7bbb      	ldrb	r3, [r7, #14]
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f001 f85e 	bl	800d564 <USBD_LL_IsStallEP>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d003      	beq.n	800c4b6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	601a      	str	r2, [r3, #0]
 800c4b4:	e002      	b.n	800c4bc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	2202      	movs	r2, #2
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fb95 	bl	800cbf2 <USBD_CtlSendData>
              break;
 800c4c8:	e004      	b.n	800c4d4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c4ca:	6839      	ldr	r1, [r7, #0]
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 fb26 	bl	800cb1e <USBD_CtlError>
              break;
 800c4d2:	bf00      	nop
          }
          break;
 800c4d4:	e004      	b.n	800c4e0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c4d6:	6839      	ldr	r1, [r7, #0]
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 fb20 	bl	800cb1e <USBD_CtlError>
          break;
 800c4de:	bf00      	nop
      }
      break;
 800c4e0:	e004      	b.n	800c4ec <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c4e2:	6839      	ldr	r1, [r7, #0]
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 fb1a 	bl	800cb1e <USBD_CtlError>
      break;
 800c4ea:	bf00      	nop
  }

  return ret;
 800c4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
	...

0800c4f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c502:	2300      	movs	r3, #0
 800c504:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c506:	2300      	movs	r3, #0
 800c508:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c50a:	2300      	movs	r3, #0
 800c50c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	885b      	ldrh	r3, [r3, #2]
 800c512:	0a1b      	lsrs	r3, r3, #8
 800c514:	b29b      	uxth	r3, r3
 800c516:	3b01      	subs	r3, #1
 800c518:	2b06      	cmp	r3, #6
 800c51a:	f200 8128 	bhi.w	800c76e <USBD_GetDescriptor+0x276>
 800c51e:	a201      	add	r2, pc, #4	; (adr r2, 800c524 <USBD_GetDescriptor+0x2c>)
 800c520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c524:	0800c541 	.word	0x0800c541
 800c528:	0800c559 	.word	0x0800c559
 800c52c:	0800c599 	.word	0x0800c599
 800c530:	0800c76f 	.word	0x0800c76f
 800c534:	0800c76f 	.word	0x0800c76f
 800c538:	0800c70f 	.word	0x0800c70f
 800c53c:	0800c73b 	.word	0x0800c73b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	7c12      	ldrb	r2, [r2, #16]
 800c54c:	f107 0108 	add.w	r1, r7, #8
 800c550:	4610      	mov	r0, r2
 800c552:	4798      	blx	r3
 800c554:	60f8      	str	r0, [r7, #12]
      break;
 800c556:	e112      	b.n	800c77e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	7c1b      	ldrb	r3, [r3, #16]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10d      	bne.n	800c57c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c568:	f107 0208 	add.w	r2, r7, #8
 800c56c:	4610      	mov	r0, r2
 800c56e:	4798      	blx	r3
 800c570:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	3301      	adds	r3, #1
 800c576:	2202      	movs	r2, #2
 800c578:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c57a:	e100      	b.n	800c77e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c584:	f107 0208 	add.w	r2, r7, #8
 800c588:	4610      	mov	r0, r2
 800c58a:	4798      	blx	r3
 800c58c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	3301      	adds	r3, #1
 800c592:	2202      	movs	r2, #2
 800c594:	701a      	strb	r2, [r3, #0]
      break;
 800c596:	e0f2      	b.n	800c77e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	885b      	ldrh	r3, [r3, #2]
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	2b05      	cmp	r3, #5
 800c5a0:	f200 80ac 	bhi.w	800c6fc <USBD_GetDescriptor+0x204>
 800c5a4:	a201      	add	r2, pc, #4	; (adr r2, 800c5ac <USBD_GetDescriptor+0xb4>)
 800c5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5aa:	bf00      	nop
 800c5ac:	0800c5c5 	.word	0x0800c5c5
 800c5b0:	0800c5f9 	.word	0x0800c5f9
 800c5b4:	0800c62d 	.word	0x0800c62d
 800c5b8:	0800c661 	.word	0x0800c661
 800c5bc:	0800c695 	.word	0x0800c695
 800c5c0:	0800c6c9 	.word	0x0800c6c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00b      	beq.n	800c5e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	7c12      	ldrb	r2, [r2, #16]
 800c5dc:	f107 0108 	add.w	r1, r7, #8
 800c5e0:	4610      	mov	r0, r2
 800c5e2:	4798      	blx	r3
 800c5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5e6:	e091      	b.n	800c70c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c5e8:	6839      	ldr	r1, [r7, #0]
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 fa97 	bl	800cb1e <USBD_CtlError>
            err++;
 800c5f0:	7afb      	ldrb	r3, [r7, #11]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c5f6:	e089      	b.n	800c70c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d00b      	beq.n	800c61c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	7c12      	ldrb	r2, [r2, #16]
 800c610:	f107 0108 	add.w	r1, r7, #8
 800c614:	4610      	mov	r0, r2
 800c616:	4798      	blx	r3
 800c618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c61a:	e077      	b.n	800c70c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c61c:	6839      	ldr	r1, [r7, #0]
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 fa7d 	bl	800cb1e <USBD_CtlError>
            err++;
 800c624:	7afb      	ldrb	r3, [r7, #11]
 800c626:	3301      	adds	r3, #1
 800c628:	72fb      	strb	r3, [r7, #11]
          break;
 800c62a:	e06f      	b.n	800c70c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d00b      	beq.n	800c650 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	7c12      	ldrb	r2, [r2, #16]
 800c644:	f107 0108 	add.w	r1, r7, #8
 800c648:	4610      	mov	r0, r2
 800c64a:	4798      	blx	r3
 800c64c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c64e:	e05d      	b.n	800c70c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c650:	6839      	ldr	r1, [r7, #0]
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 fa63 	bl	800cb1e <USBD_CtlError>
            err++;
 800c658:	7afb      	ldrb	r3, [r7, #11]
 800c65a:	3301      	adds	r3, #1
 800c65c:	72fb      	strb	r3, [r7, #11]
          break;
 800c65e:	e055      	b.n	800c70c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c666:	691b      	ldr	r3, [r3, #16]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d00b      	beq.n	800c684 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c672:	691b      	ldr	r3, [r3, #16]
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	7c12      	ldrb	r2, [r2, #16]
 800c678:	f107 0108 	add.w	r1, r7, #8
 800c67c:	4610      	mov	r0, r2
 800c67e:	4798      	blx	r3
 800c680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c682:	e043      	b.n	800c70c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 fa49 	bl	800cb1e <USBD_CtlError>
            err++;
 800c68c:	7afb      	ldrb	r3, [r7, #11]
 800c68e:	3301      	adds	r3, #1
 800c690:	72fb      	strb	r3, [r7, #11]
          break;
 800c692:	e03b      	b.n	800c70c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c69a:	695b      	ldr	r3, [r3, #20]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d00b      	beq.n	800c6b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c6a6:	695b      	ldr	r3, [r3, #20]
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	7c12      	ldrb	r2, [r2, #16]
 800c6ac:	f107 0108 	add.w	r1, r7, #8
 800c6b0:	4610      	mov	r0, r2
 800c6b2:	4798      	blx	r3
 800c6b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6b6:	e029      	b.n	800c70c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6b8:	6839      	ldr	r1, [r7, #0]
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 fa2f 	bl	800cb1e <USBD_CtlError>
            err++;
 800c6c0:	7afb      	ldrb	r3, [r7, #11]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c6c6:	e021      	b.n	800c70c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c6ce:	699b      	ldr	r3, [r3, #24]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00b      	beq.n	800c6ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c6da:	699b      	ldr	r3, [r3, #24]
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	7c12      	ldrb	r2, [r2, #16]
 800c6e0:	f107 0108 	add.w	r1, r7, #8
 800c6e4:	4610      	mov	r0, r2
 800c6e6:	4798      	blx	r3
 800c6e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6ea:	e00f      	b.n	800c70c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6ec:	6839      	ldr	r1, [r7, #0]
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 fa15 	bl	800cb1e <USBD_CtlError>
            err++;
 800c6f4:	7afb      	ldrb	r3, [r7, #11]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c6fa:	e007      	b.n	800c70c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c6fc:	6839      	ldr	r1, [r7, #0]
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 fa0d 	bl	800cb1e <USBD_CtlError>
          err++;
 800c704:	7afb      	ldrb	r3, [r7, #11]
 800c706:	3301      	adds	r3, #1
 800c708:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c70a:	e038      	b.n	800c77e <USBD_GetDescriptor+0x286>
 800c70c:	e037      	b.n	800c77e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	7c1b      	ldrb	r3, [r3, #16]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d109      	bne.n	800c72a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c71c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c71e:	f107 0208 	add.w	r2, r7, #8
 800c722:	4610      	mov	r0, r2
 800c724:	4798      	blx	r3
 800c726:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c728:	e029      	b.n	800c77e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c72a:	6839      	ldr	r1, [r7, #0]
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 f9f6 	bl	800cb1e <USBD_CtlError>
        err++;
 800c732:	7afb      	ldrb	r3, [r7, #11]
 800c734:	3301      	adds	r3, #1
 800c736:	72fb      	strb	r3, [r7, #11]
      break;
 800c738:	e021      	b.n	800c77e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	7c1b      	ldrb	r3, [r3, #16]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d10d      	bne.n	800c75e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c74a:	f107 0208 	add.w	r2, r7, #8
 800c74e:	4610      	mov	r0, r2
 800c750:	4798      	blx	r3
 800c752:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	3301      	adds	r3, #1
 800c758:	2207      	movs	r2, #7
 800c75a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c75c:	e00f      	b.n	800c77e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c75e:	6839      	ldr	r1, [r7, #0]
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 f9dc 	bl	800cb1e <USBD_CtlError>
        err++;
 800c766:	7afb      	ldrb	r3, [r7, #11]
 800c768:	3301      	adds	r3, #1
 800c76a:	72fb      	strb	r3, [r7, #11]
      break;
 800c76c:	e007      	b.n	800c77e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c76e:	6839      	ldr	r1, [r7, #0]
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 f9d4 	bl	800cb1e <USBD_CtlError>
      err++;
 800c776:	7afb      	ldrb	r3, [r7, #11]
 800c778:	3301      	adds	r3, #1
 800c77a:	72fb      	strb	r3, [r7, #11]
      break;
 800c77c:	bf00      	nop
  }

  if (err != 0U)
 800c77e:	7afb      	ldrb	r3, [r7, #11]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d11c      	bne.n	800c7be <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c784:	893b      	ldrh	r3, [r7, #8]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d011      	beq.n	800c7ae <USBD_GetDescriptor+0x2b6>
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	88db      	ldrh	r3, [r3, #6]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00d      	beq.n	800c7ae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	88da      	ldrh	r2, [r3, #6]
 800c796:	893b      	ldrh	r3, [r7, #8]
 800c798:	4293      	cmp	r3, r2
 800c79a:	bf28      	it	cs
 800c79c:	4613      	movcs	r3, r2
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c7a2:	893b      	ldrh	r3, [r7, #8]
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	68f9      	ldr	r1, [r7, #12]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 fa22 	bl	800cbf2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	88db      	ldrh	r3, [r3, #6]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d104      	bne.n	800c7c0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 fa79 	bl	800ccae <USBD_CtlSendStatus>
 800c7bc:	e000      	b.n	800c7c0 <USBD_GetDescriptor+0x2c8>
    return;
 800c7be:	bf00      	nop
    }
  }
}
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop

0800c7c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	889b      	ldrh	r3, [r3, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d130      	bne.n	800c83c <USBD_SetAddress+0x74>
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	88db      	ldrh	r3, [r3, #6]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d12c      	bne.n	800c83c <USBD_SetAddress+0x74>
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	885b      	ldrh	r3, [r3, #2]
 800c7e6:	2b7f      	cmp	r3, #127	; 0x7f
 800c7e8:	d828      	bhi.n	800c83c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	885b      	ldrh	r3, [r3, #2]
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7fc:	2b03      	cmp	r3, #3
 800c7fe:	d104      	bne.n	800c80a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c800:	6839      	ldr	r1, [r7, #0]
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 f98b 	bl	800cb1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c808:	e01d      	b.n	800c846 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	7bfa      	ldrb	r2, [r7, #15]
 800c80e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c812:	7bfb      	ldrb	r3, [r7, #15]
 800c814:	4619      	mov	r1, r3
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 fecf 	bl	800d5ba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fa46 	bl	800ccae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c822:	7bfb      	ldrb	r3, [r7, #15]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d004      	beq.n	800c832 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2202      	movs	r2, #2
 800c82c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c830:	e009      	b.n	800c846 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2201      	movs	r2, #1
 800c836:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c83a:	e004      	b.n	800c846 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c83c:	6839      	ldr	r1, [r7, #0]
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 f96d 	bl	800cb1e <USBD_CtlError>
  }
}
 800c844:	bf00      	nop
 800c846:	bf00      	nop
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
	...

0800c850 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	885b      	ldrh	r3, [r3, #2]
 800c85e:	b2da      	uxtb	r2, r3
 800c860:	4b41      	ldr	r3, [pc, #260]	; (800c968 <USBD_SetConfig+0x118>)
 800c862:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c864:	4b40      	ldr	r3, [pc, #256]	; (800c968 <USBD_SetConfig+0x118>)
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	2b01      	cmp	r3, #1
 800c86a:	d904      	bls.n	800c876 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c86c:	6839      	ldr	r1, [r7, #0]
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 f955 	bl	800cb1e <USBD_CtlError>
 800c874:	e075      	b.n	800c962 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d002      	beq.n	800c886 <USBD_SetConfig+0x36>
 800c880:	2b03      	cmp	r3, #3
 800c882:	d023      	beq.n	800c8cc <USBD_SetConfig+0x7c>
 800c884:	e062      	b.n	800c94c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c886:	4b38      	ldr	r3, [pc, #224]	; (800c968 <USBD_SetConfig+0x118>)
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d01a      	beq.n	800c8c4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c88e:	4b36      	ldr	r3, [pc, #216]	; (800c968 <USBD_SetConfig+0x118>)
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	461a      	mov	r2, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2203      	movs	r2, #3
 800c89c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c8a0:	4b31      	ldr	r3, [pc, #196]	; (800c968 <USBD_SetConfig+0x118>)
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7ff f9af 	bl	800bc0a <USBD_SetClassConfig>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	d104      	bne.n	800c8bc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c8b2:	6839      	ldr	r1, [r7, #0]
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 f932 	bl	800cb1e <USBD_CtlError>
            return;
 800c8ba:	e052      	b.n	800c962 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 f9f6 	bl	800ccae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c8c2:	e04e      	b.n	800c962 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 f9f2 	bl	800ccae <USBD_CtlSendStatus>
        break;
 800c8ca:	e04a      	b.n	800c962 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c8cc:	4b26      	ldr	r3, [pc, #152]	; (800c968 <USBD_SetConfig+0x118>)
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d112      	bne.n	800c8fa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2202      	movs	r2, #2
 800c8d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c8dc:	4b22      	ldr	r3, [pc, #136]	; (800c968 <USBD_SetConfig+0x118>)
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c8e6:	4b20      	ldr	r3, [pc, #128]	; (800c968 <USBD_SetConfig+0x118>)
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7ff f9ab 	bl	800bc48 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 f9db 	bl	800ccae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c8f8:	e033      	b.n	800c962 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c8fa:	4b1b      	ldr	r3, [pc, #108]	; (800c968 <USBD_SetConfig+0x118>)
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	461a      	mov	r2, r3
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	429a      	cmp	r2, r3
 800c906:	d01d      	beq.n	800c944 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	4619      	mov	r1, r3
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f7ff f999 	bl	800bc48 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c916:	4b14      	ldr	r3, [pc, #80]	; (800c968 <USBD_SetConfig+0x118>)
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	461a      	mov	r2, r3
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c920:	4b11      	ldr	r3, [pc, #68]	; (800c968 <USBD_SetConfig+0x118>)
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	4619      	mov	r1, r3
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7ff f96f 	bl	800bc0a <USBD_SetClassConfig>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b02      	cmp	r3, #2
 800c930:	d104      	bne.n	800c93c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c932:	6839      	ldr	r1, [r7, #0]
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f000 f8f2 	bl	800cb1e <USBD_CtlError>
            return;
 800c93a:	e012      	b.n	800c962 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 f9b6 	bl	800ccae <USBD_CtlSendStatus>
        break;
 800c942:	e00e      	b.n	800c962 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 f9b2 	bl	800ccae <USBD_CtlSendStatus>
        break;
 800c94a:	e00a      	b.n	800c962 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 f8e5 	bl	800cb1e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c954:	4b04      	ldr	r3, [pc, #16]	; (800c968 <USBD_SetConfig+0x118>)
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	4619      	mov	r1, r3
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f7ff f974 	bl	800bc48 <USBD_ClrClassConfig>
        break;
 800c960:	bf00      	nop
    }
  }
}
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	200007dc 	.word	0x200007dc

0800c96c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	88db      	ldrh	r3, [r3, #6]
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d004      	beq.n	800c988 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c97e:	6839      	ldr	r1, [r7, #0]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 f8cc 	bl	800cb1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c986:	e022      	b.n	800c9ce <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c98e:	2b02      	cmp	r3, #2
 800c990:	dc02      	bgt.n	800c998 <USBD_GetConfig+0x2c>
 800c992:	2b00      	cmp	r3, #0
 800c994:	dc03      	bgt.n	800c99e <USBD_GetConfig+0x32>
 800c996:	e015      	b.n	800c9c4 <USBD_GetConfig+0x58>
 800c998:	2b03      	cmp	r3, #3
 800c99a:	d00b      	beq.n	800c9b4 <USBD_GetConfig+0x48>
 800c99c:	e012      	b.n	800c9c4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	3308      	adds	r3, #8
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 f920 	bl	800cbf2 <USBD_CtlSendData>
        break;
 800c9b2:	e00c      	b.n	800c9ce <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	3304      	adds	r3, #4
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 f918 	bl	800cbf2 <USBD_CtlSendData>
        break;
 800c9c2:	e004      	b.n	800c9ce <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c9c4:	6839      	ldr	r1, [r7, #0]
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 f8a9 	bl	800cb1e <USBD_CtlError>
        break;
 800c9cc:	bf00      	nop
}
 800c9ce:	bf00      	nop
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b082      	sub	sp, #8
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
 800c9de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d81e      	bhi.n	800ca2a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	88db      	ldrh	r3, [r3, #6]
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	d004      	beq.n	800c9fe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c9f4:	6839      	ldr	r1, [r7, #0]
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 f891 	bl	800cb1e <USBD_CtlError>
        break;
 800c9fc:	e01a      	b.n	800ca34 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2201      	movs	r2, #1
 800ca02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d005      	beq.n	800ca1a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	68db      	ldr	r3, [r3, #12]
 800ca12:	f043 0202 	orr.w	r2, r3, #2
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	330c      	adds	r3, #12
 800ca1e:	2202      	movs	r2, #2
 800ca20:	4619      	mov	r1, r3
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 f8e5 	bl	800cbf2 <USBD_CtlSendData>
      break;
 800ca28:	e004      	b.n	800ca34 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ca2a:	6839      	ldr	r1, [r7, #0]
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 f876 	bl	800cb1e <USBD_CtlError>
      break;
 800ca32:	bf00      	nop
  }
}
 800ca34:	bf00      	nop
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	885b      	ldrh	r3, [r3, #2]
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d106      	bne.n	800ca5c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2201      	movs	r2, #1
 800ca52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 f929 	bl	800ccae <USBD_CtlSendStatus>
  }
}
 800ca5c:	bf00      	nop
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca74:	3b01      	subs	r3, #1
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	d80b      	bhi.n	800ca92 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	885b      	ldrh	r3, [r3, #2]
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d10c      	bne.n	800ca9c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 f90f 	bl	800ccae <USBD_CtlSendStatus>
      }
      break;
 800ca90:	e004      	b.n	800ca9c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ca92:	6839      	ldr	r1, [r7, #0]
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f842 	bl	800cb1e <USBD_CtlError>
      break;
 800ca9a:	e000      	b.n	800ca9e <USBD_ClrFeature+0x3a>
      break;
 800ca9c:	bf00      	nop
  }
}
 800ca9e:	bf00      	nop
 800caa0:	3708      	adds	r7, #8
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800caa6:	b480      	push	{r7}
 800caa8:	b083      	sub	sp, #12
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
 800caae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	781a      	ldrb	r2, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	785a      	ldrb	r2, [r3, #1]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	3302      	adds	r3, #2
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	b29a      	uxth	r2, r3
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	3303      	adds	r3, #3
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	b29b      	uxth	r3, r3
 800cad0:	021b      	lsls	r3, r3, #8
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	4413      	add	r3, r2
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	3304      	adds	r3, #4
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	3305      	adds	r3, #5
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	b29b      	uxth	r3, r3
 800caec:	021b      	lsls	r3, r3, #8
 800caee:	b29b      	uxth	r3, r3
 800caf0:	4413      	add	r3, r2
 800caf2:	b29a      	uxth	r2, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	3306      	adds	r3, #6
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	b29a      	uxth	r2, r3
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	3307      	adds	r3, #7
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	021b      	lsls	r3, r3, #8
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	4413      	add	r3, r2
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	80da      	strh	r2, [r3, #6]

}
 800cb14:	bf00      	nop
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bc80      	pop	{r7}
 800cb1c:	4770      	bx	lr

0800cb1e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b082      	sub	sp, #8
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
 800cb26:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800cb28:	2180      	movs	r1, #128	; 0x80
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 fcdc 	bl	800d4e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800cb30:	2100      	movs	r1, #0
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 fcd8 	bl	800d4e8 <USBD_LL_StallEP>
}
 800cb38:	bf00      	nop
 800cb3a:	3708      	adds	r7, #8
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b086      	sub	sp, #24
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d032      	beq.n	800cbbc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	f000 f834 	bl	800cbc4 <USBD_GetLen>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	3301      	adds	r3, #1
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	005b      	lsls	r3, r3, #1
 800cb64:	b29a      	uxth	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800cb6a:	7dfb      	ldrb	r3, [r7, #23]
 800cb6c:	1c5a      	adds	r2, r3, #1
 800cb6e:	75fa      	strb	r2, [r7, #23]
 800cb70:	461a      	mov	r2, r3
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	4413      	add	r3, r2
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	7812      	ldrb	r2, [r2, #0]
 800cb7a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cb7c:	7dfb      	ldrb	r3, [r7, #23]
 800cb7e:	1c5a      	adds	r2, r3, #1
 800cb80:	75fa      	strb	r2, [r7, #23]
 800cb82:	461a      	mov	r2, r3
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	4413      	add	r3, r2
 800cb88:	2203      	movs	r2, #3
 800cb8a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800cb8c:	e012      	b.n	800cbb4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	1c5a      	adds	r2, r3, #1
 800cb92:	60fa      	str	r2, [r7, #12]
 800cb94:	7dfa      	ldrb	r2, [r7, #23]
 800cb96:	1c51      	adds	r1, r2, #1
 800cb98:	75f9      	strb	r1, [r7, #23]
 800cb9a:	4611      	mov	r1, r2
 800cb9c:	68ba      	ldr	r2, [r7, #8]
 800cb9e:	440a      	add	r2, r1
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
 800cba6:	1c5a      	adds	r2, r3, #1
 800cba8:	75fa      	strb	r2, [r7, #23]
 800cbaa:	461a      	mov	r2, r3
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	4413      	add	r3, r2
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d1e8      	bne.n	800cb8e <USBD_GetString+0x4e>
    }
  }
}
 800cbbc:	bf00      	nop
 800cbbe:	3718      	adds	r7, #24
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b085      	sub	sp, #20
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800cbd0:	e005      	b.n	800cbde <USBD_GetLen+0x1a>
  {
    len++;
 800cbd2:	7bfb      	ldrb	r3, [r7, #15]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d1f5      	bne.n	800cbd2 <USBD_GetLen+0xe>
  }

  return len;
 800cbe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3714      	adds	r7, #20
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bc80      	pop	{r7}
 800cbf0:	4770      	bx	lr

0800cbf2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b084      	sub	sp, #16
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	60f8      	str	r0, [r7, #12]
 800cbfa:	60b9      	str	r1, [r7, #8]
 800cbfc:	4613      	mov	r3, r2
 800cbfe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2202      	movs	r2, #2
 800cc04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cc08:	88fa      	ldrh	r2, [r7, #6]
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800cc0e:	88fa      	ldrh	r2, [r7, #6]
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc14:	88fb      	ldrh	r3, [r7, #6]
 800cc16:	68ba      	ldr	r2, [r7, #8]
 800cc18:	2100      	movs	r1, #0
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	f000 fcec 	bl	800d5f8 <USBD_LL_Transmit>

  return USBD_OK;
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b084      	sub	sp, #16
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	60f8      	str	r0, [r7, #12]
 800cc32:	60b9      	str	r1, [r7, #8]
 800cc34:	4613      	mov	r3, r2
 800cc36:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc38:	88fb      	ldrh	r3, [r7, #6]
 800cc3a:	68ba      	ldr	r2, [r7, #8]
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	68f8      	ldr	r0, [r7, #12]
 800cc40:	f000 fcda 	bl	800d5f8 <USBD_LL_Transmit>

  return USBD_OK;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800cc4e:	b580      	push	{r7, lr}
 800cc50:	b084      	sub	sp, #16
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	60f8      	str	r0, [r7, #12]
 800cc56:	60b9      	str	r1, [r7, #8]
 800cc58:	4613      	mov	r3, r2
 800cc5a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2203      	movs	r2, #3
 800cc60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cc64:	88fa      	ldrh	r2, [r7, #6]
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800cc6c:	88fa      	ldrh	r2, [r7, #6]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc74:	88fb      	ldrh	r3, [r7, #6]
 800cc76:	68ba      	ldr	r2, [r7, #8]
 800cc78:	2100      	movs	r1, #0
 800cc7a:	68f8      	ldr	r0, [r7, #12]
 800cc7c:	f000 fcdf 	bl	800d63e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc80:	2300      	movs	r3, #0
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3710      	adds	r7, #16
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}

0800cc8a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b084      	sub	sp, #16
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	60f8      	str	r0, [r7, #12]
 800cc92:	60b9      	str	r1, [r7, #8]
 800cc94:	4613      	mov	r3, r2
 800cc96:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc98:	88fb      	ldrh	r3, [r7, #6]
 800cc9a:	68ba      	ldr	r2, [r7, #8]
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f000 fccd 	bl	800d63e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cca4:	2300      	movs	r3, #0
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}

0800ccae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ccae:	b580      	push	{r7, lr}
 800ccb0:	b082      	sub	sp, #8
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2204      	movs	r2, #4
 800ccba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 fc97 	bl	800d5f8 <USBD_LL_Transmit>

  return USBD_OK;
 800ccca:	2300      	movs	r3, #0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2205      	movs	r2, #5
 800cce0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cce4:	2300      	movs	r3, #0
 800cce6:	2200      	movs	r2, #0
 800cce8:	2100      	movs	r1, #0
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 fca7 	bl	800d63e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ccf0:	2300      	movs	r3, #0
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
	...

0800ccfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cd00:	2200      	movs	r2, #0
 800cd02:	4912      	ldr	r1, [pc, #72]	; (800cd4c <MX_USB_DEVICE_Init+0x50>)
 800cd04:	4812      	ldr	r0, [pc, #72]	; (800cd50 <MX_USB_DEVICE_Init+0x54>)
 800cd06:	f7fe ff26 	bl	800bb56 <USBD_Init>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d001      	beq.n	800cd14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cd10:	f7f7 fdf2 	bl	80048f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cd14:	490f      	ldr	r1, [pc, #60]	; (800cd54 <MX_USB_DEVICE_Init+0x58>)
 800cd16:	480e      	ldr	r0, [pc, #56]	; (800cd50 <MX_USB_DEVICE_Init+0x54>)
 800cd18:	f7fe ff48 	bl	800bbac <USBD_RegisterClass>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d001      	beq.n	800cd26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cd22:	f7f7 fde9 	bl	80048f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cd26:	490c      	ldr	r1, [pc, #48]	; (800cd58 <MX_USB_DEVICE_Init+0x5c>)
 800cd28:	4809      	ldr	r0, [pc, #36]	; (800cd50 <MX_USB_DEVICE_Init+0x54>)
 800cd2a:	f7fe fe79 	bl	800ba20 <USBD_CDC_RegisterInterface>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d001      	beq.n	800cd38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cd34:	f7f7 fde0 	bl	80048f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cd38:	4805      	ldr	r0, [pc, #20]	; (800cd50 <MX_USB_DEVICE_Init+0x54>)
 800cd3a:	f7fe ff50 	bl	800bbde <USBD_Start>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cd44:	f7f7 fdd8 	bl	80048f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cd48:	bf00      	nop
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	20000158 	.word	0x20000158
 800cd50:	200007ec 	.word	0x200007ec
 800cd54:	2000003c 	.word	0x2000003c
 800cd58:	20000140 	.word	0x20000140

0800cd5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cd60:	2200      	movs	r2, #0
 800cd62:	4905      	ldr	r1, [pc, #20]	; (800cd78 <CDC_Init_FS+0x1c>)
 800cd64:	4805      	ldr	r0, [pc, #20]	; (800cd7c <CDC_Init_FS+0x20>)
 800cd66:	f7fe fe71 	bl	800ba4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cd6a:	4905      	ldr	r1, [pc, #20]	; (800cd80 <CDC_Init_FS+0x24>)
 800cd6c:	4803      	ldr	r0, [pc, #12]	; (800cd7c <CDC_Init_FS+0x20>)
 800cd6e:	f7fe fe86 	bl	800ba7e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cd72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	200012b0 	.word	0x200012b0
 800cd7c:	200007ec 	.word	0x200007ec
 800cd80:	20000ab0 	.word	0x20000ab0

0800cd84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cd84:	b480      	push	{r7}
 800cd86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cd88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bc80      	pop	{r7}
 800cd90:	4770      	bx	lr
	...

0800cd94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	6039      	str	r1, [r7, #0]
 800cd9e:	71fb      	strb	r3, [r7, #7]
 800cda0:	4613      	mov	r3, r2
 800cda2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cda4:	79fb      	ldrb	r3, [r7, #7]
 800cda6:	2b23      	cmp	r3, #35	; 0x23
 800cda8:	d85c      	bhi.n	800ce64 <CDC_Control_FS+0xd0>
 800cdaa:	a201      	add	r2, pc, #4	; (adr r2, 800cdb0 <CDC_Control_FS+0x1c>)
 800cdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb0:	0800ce65 	.word	0x0800ce65
 800cdb4:	0800ce65 	.word	0x0800ce65
 800cdb8:	0800ce65 	.word	0x0800ce65
 800cdbc:	0800ce65 	.word	0x0800ce65
 800cdc0:	0800ce65 	.word	0x0800ce65
 800cdc4:	0800ce65 	.word	0x0800ce65
 800cdc8:	0800ce65 	.word	0x0800ce65
 800cdcc:	0800ce65 	.word	0x0800ce65
 800cdd0:	0800ce65 	.word	0x0800ce65
 800cdd4:	0800ce65 	.word	0x0800ce65
 800cdd8:	0800ce65 	.word	0x0800ce65
 800cddc:	0800ce65 	.word	0x0800ce65
 800cde0:	0800ce65 	.word	0x0800ce65
 800cde4:	0800ce65 	.word	0x0800ce65
 800cde8:	0800ce65 	.word	0x0800ce65
 800cdec:	0800ce65 	.word	0x0800ce65
 800cdf0:	0800ce65 	.word	0x0800ce65
 800cdf4:	0800ce65 	.word	0x0800ce65
 800cdf8:	0800ce65 	.word	0x0800ce65
 800cdfc:	0800ce65 	.word	0x0800ce65
 800ce00:	0800ce65 	.word	0x0800ce65
 800ce04:	0800ce65 	.word	0x0800ce65
 800ce08:	0800ce65 	.word	0x0800ce65
 800ce0c:	0800ce65 	.word	0x0800ce65
 800ce10:	0800ce65 	.word	0x0800ce65
 800ce14:	0800ce65 	.word	0x0800ce65
 800ce18:	0800ce65 	.word	0x0800ce65
 800ce1c:	0800ce65 	.word	0x0800ce65
 800ce20:	0800ce65 	.word	0x0800ce65
 800ce24:	0800ce65 	.word	0x0800ce65
 800ce28:	0800ce65 	.word	0x0800ce65
 800ce2c:	0800ce65 	.word	0x0800ce65
 800ce30:	0800ce41 	.word	0x0800ce41
 800ce34:	0800ce53 	.word	0x0800ce53
 800ce38:	0800ce65 	.word	0x0800ce65
 800ce3c:	0800ce65 	.word	0x0800ce65
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit

    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };

    case CDC_SET_LINE_CODING:
      memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800ce40:	4b0c      	ldr	r3, [pc, #48]	; (800ce74 <CDC_Control_FS+0xe0>)
 800ce42:	683a      	ldr	r2, [r7, #0]
 800ce44:	6810      	ldr	r0, [r2, #0]
 800ce46:	6018      	str	r0, [r3, #0]
 800ce48:	8891      	ldrh	r1, [r2, #4]
 800ce4a:	7992      	ldrb	r2, [r2, #6]
 800ce4c:	8099      	strh	r1, [r3, #4]
 800ce4e:	719a      	strb	r2, [r3, #6]
    break;
 800ce50:	e009      	b.n	800ce66 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
      memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	4a07      	ldr	r2, [pc, #28]	; (800ce74 <CDC_Control_FS+0xe0>)
 800ce56:	6810      	ldr	r0, [r2, #0]
 800ce58:	6018      	str	r0, [r3, #0]
 800ce5a:	8891      	ldrh	r1, [r2, #4]
 800ce5c:	7992      	ldrb	r2, [r2, #6]
 800ce5e:	8099      	strh	r1, [r3, #4]
 800ce60:	719a      	strb	r2, [r3, #6]
    break;
 800ce62:	e000      	b.n	800ce66 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ce64:	bf00      	nop
  }

  return (USBD_OK);
 800ce66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	370c      	adds	r7, #12
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bc80      	pop	{r7}
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	20000150 	.word	0x20000150

0800ce78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ce82:	6879      	ldr	r1, [r7, #4]
 800ce84:	4805      	ldr	r0, [pc, #20]	; (800ce9c <CDC_Receive_FS+0x24>)
 800ce86:	f7fe fdfa 	bl	800ba7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ce8a:	4804      	ldr	r0, [pc, #16]	; (800ce9c <CDC_Receive_FS+0x24>)
 800ce8c:	f7fe fe39 	bl	800bb02 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ce90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	200007ec 	.word	0x200007ec

0800cea0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	460b      	mov	r3, r1
 800ceaa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ceb0:	4b0d      	ldr	r3, [pc, #52]	; (800cee8 <CDC_Transmit_FS+0x48>)
 800ceb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ceb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d001      	beq.n	800cec6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cec2:	2301      	movs	r3, #1
 800cec4:	e00b      	b.n	800cede <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cec6:	887b      	ldrh	r3, [r7, #2]
 800cec8:	461a      	mov	r2, r3
 800ceca:	6879      	ldr	r1, [r7, #4]
 800cecc:	4806      	ldr	r0, [pc, #24]	; (800cee8 <CDC_Transmit_FS+0x48>)
 800cece:	f7fe fdbd 	bl	800ba4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ced2:	4805      	ldr	r0, [pc, #20]	; (800cee8 <CDC_Transmit_FS+0x48>)
 800ced4:	f7fe fde6 	bl	800baa4 <USBD_CDC_TransmitPacket>
 800ced8:	4603      	mov	r3, r0
 800ceda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	200007ec 	.word	0x200007ec

0800ceec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	4603      	mov	r3, r0
 800cef4:	6039      	str	r1, [r7, #0]
 800cef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	2212      	movs	r2, #18
 800cefc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cefe:	4b03      	ldr	r3, [pc, #12]	; (800cf0c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bc80      	pop	{r7}
 800cf08:	4770      	bx	lr
 800cf0a:	bf00      	nop
 800cf0c:	20000174 	.word	0x20000174

0800cf10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	4603      	mov	r3, r0
 800cf18:	6039      	str	r1, [r7, #0]
 800cf1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	2204      	movs	r2, #4
 800cf20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cf22:	4b03      	ldr	r3, [pc, #12]	; (800cf30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	370c      	adds	r7, #12
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bc80      	pop	{r7}
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	20000188 	.word	0x20000188

0800cf34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	6039      	str	r1, [r7, #0]
 800cf3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf40:	79fb      	ldrb	r3, [r7, #7]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d105      	bne.n	800cf52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf46:	683a      	ldr	r2, [r7, #0]
 800cf48:	4907      	ldr	r1, [pc, #28]	; (800cf68 <USBD_FS_ProductStrDescriptor+0x34>)
 800cf4a:	4808      	ldr	r0, [pc, #32]	; (800cf6c <USBD_FS_ProductStrDescriptor+0x38>)
 800cf4c:	f7ff fdf8 	bl	800cb40 <USBD_GetString>
 800cf50:	e004      	b.n	800cf5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf52:	683a      	ldr	r2, [r7, #0]
 800cf54:	4904      	ldr	r1, [pc, #16]	; (800cf68 <USBD_FS_ProductStrDescriptor+0x34>)
 800cf56:	4805      	ldr	r0, [pc, #20]	; (800cf6c <USBD_FS_ProductStrDescriptor+0x38>)
 800cf58:	f7ff fdf2 	bl	800cb40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf5c:	4b02      	ldr	r3, [pc, #8]	; (800cf68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3708      	adds	r7, #8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	20001ab0 	.word	0x20001ab0
 800cf6c:	080127a8 	.word	0x080127a8

0800cf70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	4603      	mov	r3, r0
 800cf78:	6039      	str	r1, [r7, #0]
 800cf7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf7c:	683a      	ldr	r2, [r7, #0]
 800cf7e:	4904      	ldr	r1, [pc, #16]	; (800cf90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cf80:	4804      	ldr	r0, [pc, #16]	; (800cf94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cf82:	f7ff fddd 	bl	800cb40 <USBD_GetString>
  return USBD_StrDesc;
 800cf86:	4b02      	ldr	r3, [pc, #8]	; (800cf90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	20001ab0 	.word	0x20001ab0
 800cf94:	080127c0 	.word	0x080127c0

0800cf98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	6039      	str	r1, [r7, #0]
 800cfa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	221a      	movs	r2, #26
 800cfa8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cfaa:	f000 f843 	bl	800d034 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cfae:	4b02      	ldr	r3, [pc, #8]	; (800cfb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	2000018c 	.word	0x2000018c

0800cfbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	6039      	str	r1, [r7, #0]
 800cfc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cfc8:	79fb      	ldrb	r3, [r7, #7]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d105      	bne.n	800cfda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cfce:	683a      	ldr	r2, [r7, #0]
 800cfd0:	4907      	ldr	r1, [pc, #28]	; (800cff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cfd2:	4808      	ldr	r0, [pc, #32]	; (800cff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cfd4:	f7ff fdb4 	bl	800cb40 <USBD_GetString>
 800cfd8:	e004      	b.n	800cfe4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cfda:	683a      	ldr	r2, [r7, #0]
 800cfdc:	4904      	ldr	r1, [pc, #16]	; (800cff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cfde:	4805      	ldr	r0, [pc, #20]	; (800cff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cfe0:	f7ff fdae 	bl	800cb40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cfe4:	4b02      	ldr	r3, [pc, #8]	; (800cff0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3708      	adds	r7, #8
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	20001ab0 	.word	0x20001ab0
 800cff4:	080127d4 	.word	0x080127d4

0800cff8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	4603      	mov	r3, r0
 800d000:	6039      	str	r1, [r7, #0]
 800d002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d004:	79fb      	ldrb	r3, [r7, #7]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d105      	bne.n	800d016 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d00a:	683a      	ldr	r2, [r7, #0]
 800d00c:	4907      	ldr	r1, [pc, #28]	; (800d02c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d00e:	4808      	ldr	r0, [pc, #32]	; (800d030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d010:	f7ff fd96 	bl	800cb40 <USBD_GetString>
 800d014:	e004      	b.n	800d020 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d016:	683a      	ldr	r2, [r7, #0]
 800d018:	4904      	ldr	r1, [pc, #16]	; (800d02c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d01a:	4805      	ldr	r0, [pc, #20]	; (800d030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d01c:	f7ff fd90 	bl	800cb40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d020:	4b02      	ldr	r3, [pc, #8]	; (800d02c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d022:	4618      	mov	r0, r3
 800d024:	3708      	adds	r7, #8
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	20001ab0 	.word	0x20001ab0
 800d030:	080127e0 	.word	0x080127e0

0800d034 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d03a:	4b0f      	ldr	r3, [pc, #60]	; (800d078 <Get_SerialNum+0x44>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d040:	4b0e      	ldr	r3, [pc, #56]	; (800d07c <Get_SerialNum+0x48>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d046:	4b0e      	ldr	r3, [pc, #56]	; (800d080 <Get_SerialNum+0x4c>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4413      	add	r3, r2
 800d052:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d009      	beq.n	800d06e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d05a:	2208      	movs	r2, #8
 800d05c:	4909      	ldr	r1, [pc, #36]	; (800d084 <Get_SerialNum+0x50>)
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	f000 f814 	bl	800d08c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d064:	2204      	movs	r2, #4
 800d066:	4908      	ldr	r1, [pc, #32]	; (800d088 <Get_SerialNum+0x54>)
 800d068:	68b8      	ldr	r0, [r7, #8]
 800d06a:	f000 f80f 	bl	800d08c <IntToUnicode>
  }
}
 800d06e:	bf00      	nop
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	1fff7a10 	.word	0x1fff7a10
 800d07c:	1fff7a14 	.word	0x1fff7a14
 800d080:	1fff7a18 	.word	0x1fff7a18
 800d084:	2000018e 	.word	0x2000018e
 800d088:	2000019e 	.word	0x2000019e

0800d08c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b087      	sub	sp, #28
 800d090:	af00      	add	r7, sp, #0
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	4613      	mov	r3, r2
 800d098:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d09a:	2300      	movs	r3, #0
 800d09c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d09e:	2300      	movs	r3, #0
 800d0a0:	75fb      	strb	r3, [r7, #23]
 800d0a2:	e027      	b.n	800d0f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	0f1b      	lsrs	r3, r3, #28
 800d0a8:	2b09      	cmp	r3, #9
 800d0aa:	d80b      	bhi.n	800d0c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	0f1b      	lsrs	r3, r3, #28
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	7dfb      	ldrb	r3, [r7, #23]
 800d0b4:	005b      	lsls	r3, r3, #1
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	440b      	add	r3, r1
 800d0bc:	3230      	adds	r2, #48	; 0x30
 800d0be:	b2d2      	uxtb	r2, r2
 800d0c0:	701a      	strb	r2, [r3, #0]
 800d0c2:	e00a      	b.n	800d0da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	0f1b      	lsrs	r3, r3, #28
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	7dfb      	ldrb	r3, [r7, #23]
 800d0cc:	005b      	lsls	r3, r3, #1
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	440b      	add	r3, r1
 800d0d4:	3237      	adds	r2, #55	; 0x37
 800d0d6:	b2d2      	uxtb	r2, r2
 800d0d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	011b      	lsls	r3, r3, #4
 800d0de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d0e0:	7dfb      	ldrb	r3, [r7, #23]
 800d0e2:	005b      	lsls	r3, r3, #1
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	68ba      	ldr	r2, [r7, #8]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d0ee:	7dfb      	ldrb	r3, [r7, #23]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	75fb      	strb	r3, [r7, #23]
 800d0f4:	7dfa      	ldrb	r2, [r7, #23]
 800d0f6:	79fb      	ldrb	r3, [r7, #7]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d3d3      	bcc.n	800d0a4 <IntToUnicode+0x18>
  }
}
 800d0fc:	bf00      	nop
 800d0fe:	bf00      	nop
 800d100:	371c      	adds	r7, #28
 800d102:	46bd      	mov	sp, r7
 800d104:	bc80      	pop	{r7}
 800d106:	4770      	bx	lr

0800d108 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b08a      	sub	sp, #40	; 0x28
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d110:	f107 0314 	add.w	r3, r7, #20
 800d114:	2200      	movs	r2, #0
 800d116:	601a      	str	r2, [r3, #0]
 800d118:	605a      	str	r2, [r3, #4]
 800d11a:	609a      	str	r2, [r3, #8]
 800d11c:	60da      	str	r2, [r3, #12]
 800d11e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d128:	d13a      	bne.n	800d1a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d12a:	2300      	movs	r3, #0
 800d12c:	613b      	str	r3, [r7, #16]
 800d12e:	4b1e      	ldr	r3, [pc, #120]	; (800d1a8 <HAL_PCD_MspInit+0xa0>)
 800d130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d132:	4a1d      	ldr	r2, [pc, #116]	; (800d1a8 <HAL_PCD_MspInit+0xa0>)
 800d134:	f043 0301 	orr.w	r3, r3, #1
 800d138:	6313      	str	r3, [r2, #48]	; 0x30
 800d13a:	4b1b      	ldr	r3, [pc, #108]	; (800d1a8 <HAL_PCD_MspInit+0xa0>)
 800d13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d13e:	f003 0301 	and.w	r3, r3, #1
 800d142:	613b      	str	r3, [r7, #16]
 800d144:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d146:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d14a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d14c:	2302      	movs	r3, #2
 800d14e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d150:	2300      	movs	r3, #0
 800d152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d154:	2303      	movs	r3, #3
 800d156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d158:	230a      	movs	r3, #10
 800d15a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d15c:	f107 0314 	add.w	r3, r7, #20
 800d160:	4619      	mov	r1, r3
 800d162:	4812      	ldr	r0, [pc, #72]	; (800d1ac <HAL_PCD_MspInit+0xa4>)
 800d164:	f7f9 f966 	bl	8006434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d168:	4b0f      	ldr	r3, [pc, #60]	; (800d1a8 <HAL_PCD_MspInit+0xa0>)
 800d16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d16c:	4a0e      	ldr	r2, [pc, #56]	; (800d1a8 <HAL_PCD_MspInit+0xa0>)
 800d16e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d172:	6353      	str	r3, [r2, #52]	; 0x34
 800d174:	2300      	movs	r3, #0
 800d176:	60fb      	str	r3, [r7, #12]
 800d178:	4b0b      	ldr	r3, [pc, #44]	; (800d1a8 <HAL_PCD_MspInit+0xa0>)
 800d17a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d17c:	4a0a      	ldr	r2, [pc, #40]	; (800d1a8 <HAL_PCD_MspInit+0xa0>)
 800d17e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d182:	6453      	str	r3, [r2, #68]	; 0x44
 800d184:	4b08      	ldr	r3, [pc, #32]	; (800d1a8 <HAL_PCD_MspInit+0xa0>)
 800d186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d18c:	60fb      	str	r3, [r7, #12]
 800d18e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d190:	2200      	movs	r2, #0
 800d192:	2100      	movs	r1, #0
 800d194:	2043      	movs	r0, #67	; 0x43
 800d196:	f7f9 f908 	bl	80063aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d19a:	2043      	movs	r0, #67	; 0x43
 800d19c:	f7f9 f921 	bl	80063e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d1a0:	bf00      	nop
 800d1a2:	3728      	adds	r7, #40	; 0x28
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	40023800 	.word	0x40023800
 800d1ac:	40020000 	.word	0x40020000

0800d1b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	4610      	mov	r0, r2
 800d1c8:	f7fe fd51 	bl	800bc6e <USBD_LL_SetupStage>
}
 800d1cc:	bf00      	nop
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	460b      	mov	r3, r1
 800d1de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800d1e6:	78fa      	ldrb	r2, [r7, #3]
 800d1e8:	6879      	ldr	r1, [r7, #4]
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	00db      	lsls	r3, r3, #3
 800d1ee:	1a9b      	subs	r3, r3, r2
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	440b      	add	r3, r1
 800d1f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	78fb      	ldrb	r3, [r7, #3]
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	f7fe fd83 	bl	800bd08 <USBD_LL_DataOutStage>
}
 800d202:	bf00      	nop
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b082      	sub	sp, #8
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
 800d212:	460b      	mov	r3, r1
 800d214:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800d21c:	78fa      	ldrb	r2, [r7, #3]
 800d21e:	6879      	ldr	r1, [r7, #4]
 800d220:	4613      	mov	r3, r2
 800d222:	00db      	lsls	r3, r3, #3
 800d224:	1a9b      	subs	r3, r3, r2
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	440b      	add	r3, r1
 800d22a:	3348      	adds	r3, #72	; 0x48
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	78fb      	ldrb	r3, [r7, #3]
 800d230:	4619      	mov	r1, r3
 800d232:	f7fe fdda 	bl	800bdea <USBD_LL_DataInStage>
}
 800d236:	bf00      	nop
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d23e:	b580      	push	{r7, lr}
 800d240:	b082      	sub	sp, #8
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7fe feea 	bl	800c026 <USBD_LL_SOF>
}
 800d252:	bf00      	nop
 800d254:	3708      	adds	r7, #8
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b084      	sub	sp, #16
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d262:	2301      	movs	r3, #1
 800d264:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d102      	bne.n	800d274 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d26e:	2300      	movs	r3, #0
 800d270:	73fb      	strb	r3, [r7, #15]
 800d272:	e008      	b.n	800d286 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	2b02      	cmp	r3, #2
 800d27a:	d102      	bne.n	800d282 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d27c:	2301      	movs	r3, #1
 800d27e:	73fb      	strb	r3, [r7, #15]
 800d280:	e001      	b.n	800d286 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d282:	f7f7 fb39 	bl	80048f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d28c:	7bfa      	ldrb	r2, [r7, #15]
 800d28e:	4611      	mov	r1, r2
 800d290:	4618      	mov	r0, r3
 800d292:	f7fe fe90 	bl	800bfb6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7fe fe49 	bl	800bf34 <USBD_LL_Reset>
}
 800d2a2:	bf00      	nop
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
	...

0800d2ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7fe fe8a 	bl	800bfd4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	6812      	ldr	r2, [r2, #0]
 800d2ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d2d2:	f043 0301 	orr.w	r3, r3, #1
 800d2d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6a1b      	ldr	r3, [r3, #32]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d005      	beq.n	800d2ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d2e0:	4b04      	ldr	r3, [pc, #16]	; (800d2f4 <HAL_PCD_SuspendCallback+0x48>)
 800d2e2:	691b      	ldr	r3, [r3, #16]
 800d2e4:	4a03      	ldr	r2, [pc, #12]	; (800d2f4 <HAL_PCD_SuspendCallback+0x48>)
 800d2e6:	f043 0306 	orr.w	r3, r3, #6
 800d2ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	e000ed00 	.word	0xe000ed00

0800d2f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d306:	4618      	mov	r0, r3
 800d308:	f7fe fe78 	bl	800bffc <USBD_LL_Resume>
}
 800d30c:	bf00      	nop
 800d30e:	3708      	adds	r7, #8
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	460b      	mov	r3, r1
 800d31e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d326:	78fa      	ldrb	r2, [r7, #3]
 800d328:	4611      	mov	r1, r2
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7fe fea1 	bl	800c072 <USBD_LL_IsoOUTIncomplete>
}
 800d330:	bf00      	nop
 800d332:	3708      	adds	r7, #8
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	460b      	mov	r3, r1
 800d342:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d34a:	78fa      	ldrb	r2, [r7, #3]
 800d34c:	4611      	mov	r1, r2
 800d34e:	4618      	mov	r0, r3
 800d350:	f7fe fe83 	bl	800c05a <USBD_LL_IsoINIncomplete>
}
 800d354:	bf00      	nop
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7fe fe8d 	bl	800c08a <USBD_LL_DevConnected>
}
 800d370:	bf00      	nop
 800d372:	3708      	adds	r7, #8
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d386:	4618      	mov	r0, r3
 800d388:	f7fe fe89 	bl	800c09e <USBD_LL_DevDisconnected>
}
 800d38c:	bf00      	nop
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d139      	bne.n	800d418 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d3a4:	4a1f      	ldr	r2, [pc, #124]	; (800d424 <USBD_LL_Init+0x90>)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	4a1d      	ldr	r2, [pc, #116]	; (800d424 <USBD_LL_Init+0x90>)
 800d3b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d3b4:	4b1b      	ldr	r3, [pc, #108]	; (800d424 <USBD_LL_Init+0x90>)
 800d3b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d3ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d3bc:	4b19      	ldr	r3, [pc, #100]	; (800d424 <USBD_LL_Init+0x90>)
 800d3be:	2204      	movs	r2, #4
 800d3c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d3c2:	4b18      	ldr	r3, [pc, #96]	; (800d424 <USBD_LL_Init+0x90>)
 800d3c4:	2202      	movs	r2, #2
 800d3c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d3c8:	4b16      	ldr	r3, [pc, #88]	; (800d424 <USBD_LL_Init+0x90>)
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d3ce:	4b15      	ldr	r3, [pc, #84]	; (800d424 <USBD_LL_Init+0x90>)
 800d3d0:	2202      	movs	r2, #2
 800d3d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d3d4:	4b13      	ldr	r3, [pc, #76]	; (800d424 <USBD_LL_Init+0x90>)
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d3da:	4b12      	ldr	r3, [pc, #72]	; (800d424 <USBD_LL_Init+0x90>)
 800d3dc:	2200      	movs	r2, #0
 800d3de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d3e0:	4b10      	ldr	r3, [pc, #64]	; (800d424 <USBD_LL_Init+0x90>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d3e6:	4b0f      	ldr	r3, [pc, #60]	; (800d424 <USBD_LL_Init+0x90>)
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d3ec:	480d      	ldr	r0, [pc, #52]	; (800d424 <USBD_LL_Init+0x90>)
 800d3ee:	f7fa f9dd 	bl	80077ac <HAL_PCD_Init>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d001      	beq.n	800d3fc <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800d3f8:	f7f7 fa7e 	bl	80048f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d3fc:	2180      	movs	r1, #128	; 0x80
 800d3fe:	4809      	ldr	r0, [pc, #36]	; (800d424 <USBD_LL_Init+0x90>)
 800d400:	f7fb fb1a 	bl	8008a38 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d404:	2240      	movs	r2, #64	; 0x40
 800d406:	2100      	movs	r1, #0
 800d408:	4806      	ldr	r0, [pc, #24]	; (800d424 <USBD_LL_Init+0x90>)
 800d40a:	f7fb facf 	bl	80089ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d40e:	2280      	movs	r2, #128	; 0x80
 800d410:	2101      	movs	r1, #1
 800d412:	4804      	ldr	r0, [pc, #16]	; (800d424 <USBD_LL_Init+0x90>)
 800d414:	f7fb faca 	bl	80089ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d418:	2300      	movs	r3, #0
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3708      	adds	r7, #8
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	20001cb0 	.word	0x20001cb0

0800d428 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d430:	2300      	movs	r3, #0
 800d432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d434:	2300      	movs	r3, #0
 800d436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d43e:	4618      	mov	r0, r3
 800d440:	f7fa fad1 	bl	80079e6 <HAL_PCD_Start>
 800d444:	4603      	mov	r3, r0
 800d446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d448:	7bfb      	ldrb	r3, [r7, #15]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f000 f92e 	bl	800d6ac <USBD_Get_USB_Status>
 800d450:	4603      	mov	r3, r0
 800d452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d454:	7bbb      	ldrb	r3, [r7, #14]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3710      	adds	r7, #16
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}

0800d45e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d45e:	b580      	push	{r7, lr}
 800d460:	b084      	sub	sp, #16
 800d462:	af00      	add	r7, sp, #0
 800d464:	6078      	str	r0, [r7, #4]
 800d466:	4608      	mov	r0, r1
 800d468:	4611      	mov	r1, r2
 800d46a:	461a      	mov	r2, r3
 800d46c:	4603      	mov	r3, r0
 800d46e:	70fb      	strb	r3, [r7, #3]
 800d470:	460b      	mov	r3, r1
 800d472:	70bb      	strb	r3, [r7, #2]
 800d474:	4613      	mov	r3, r2
 800d476:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d478:	2300      	movs	r3, #0
 800d47a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d47c:	2300      	movs	r3, #0
 800d47e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d486:	78bb      	ldrb	r3, [r7, #2]
 800d488:	883a      	ldrh	r2, [r7, #0]
 800d48a:	78f9      	ldrb	r1, [r7, #3]
 800d48c:	f7fa fe96 	bl	80081bc <HAL_PCD_EP_Open>
 800d490:	4603      	mov	r3, r0
 800d492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d494:	7bfb      	ldrb	r3, [r7, #15]
 800d496:	4618      	mov	r0, r3
 800d498:	f000 f908 	bl	800d6ac <USBD_Get_USB_Status>
 800d49c:	4603      	mov	r3, r0
 800d49e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b084      	sub	sp, #16
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
 800d4b2:	460b      	mov	r3, r1
 800d4b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d4c4:	78fa      	ldrb	r2, [r7, #3]
 800d4c6:	4611      	mov	r1, r2
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7fa fedf 	bl	800828c <HAL_PCD_EP_Close>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4d2:	7bfb      	ldrb	r3, [r7, #15]
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f000 f8e9 	bl	800d6ac <USBD_Get_USB_Status>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4de:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3710      	adds	r7, #16
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d502:	78fa      	ldrb	r2, [r7, #3]
 800d504:	4611      	mov	r1, r2
 800d506:	4618      	mov	r0, r3
 800d508:	f7fa ffb6 	bl	8008478 <HAL_PCD_EP_SetStall>
 800d50c:	4603      	mov	r3, r0
 800d50e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d510:	7bfb      	ldrb	r3, [r7, #15]
 800d512:	4618      	mov	r0, r3
 800d514:	f000 f8ca 	bl	800d6ac <USBD_Get_USB_Status>
 800d518:	4603      	mov	r3, r0
 800d51a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d51c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b084      	sub	sp, #16
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
 800d52e:	460b      	mov	r3, r1
 800d530:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d532:	2300      	movs	r3, #0
 800d534:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d536:	2300      	movs	r3, #0
 800d538:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d540:	78fa      	ldrb	r2, [r7, #3]
 800d542:	4611      	mov	r1, r2
 800d544:	4618      	mov	r0, r3
 800d546:	f7fa fffb 	bl	8008540 <HAL_PCD_EP_ClrStall>
 800d54a:	4603      	mov	r3, r0
 800d54c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d54e:	7bfb      	ldrb	r3, [r7, #15]
 800d550:	4618      	mov	r0, r3
 800d552:	f000 f8ab 	bl	800d6ac <USBD_Get_USB_Status>
 800d556:	4603      	mov	r3, r0
 800d558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d55a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3710      	adds	r7, #16
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d564:	b480      	push	{r7}
 800d566:	b085      	sub	sp, #20
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	460b      	mov	r3, r1
 800d56e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d576:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	da0b      	bge.n	800d598 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d580:	78fb      	ldrb	r3, [r7, #3]
 800d582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d586:	68f9      	ldr	r1, [r7, #12]
 800d588:	4613      	mov	r3, r2
 800d58a:	00db      	lsls	r3, r3, #3
 800d58c:	1a9b      	subs	r3, r3, r2
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	440b      	add	r3, r1
 800d592:	333e      	adds	r3, #62	; 0x3e
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	e00b      	b.n	800d5b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d598:	78fb      	ldrb	r3, [r7, #3]
 800d59a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d59e:	68f9      	ldr	r1, [r7, #12]
 800d5a0:	4613      	mov	r3, r2
 800d5a2:	00db      	lsls	r3, r3, #3
 800d5a4:	1a9b      	subs	r3, r3, r2
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	440b      	add	r3, r1
 800d5aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d5ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3714      	adds	r7, #20
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bc80      	pop	{r7}
 800d5b8:	4770      	bx	lr

0800d5ba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b084      	sub	sp, #16
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
 800d5c2:	460b      	mov	r3, r1
 800d5c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5d4:	78fa      	ldrb	r2, [r7, #3]
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7fa fdca 	bl	8008172 <HAL_PCD_SetAddress>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5e2:	7bfb      	ldrb	r3, [r7, #15]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f000 f861 	bl	800d6ac <USBD_Get_USB_Status>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b086      	sub	sp, #24
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	607a      	str	r2, [r7, #4]
 800d602:	461a      	mov	r2, r3
 800d604:	460b      	mov	r3, r1
 800d606:	72fb      	strb	r3, [r7, #11]
 800d608:	4613      	mov	r3, r2
 800d60a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d60c:	2300      	movs	r3, #0
 800d60e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d610:	2300      	movs	r3, #0
 800d612:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d61a:	893b      	ldrh	r3, [r7, #8]
 800d61c:	7af9      	ldrb	r1, [r7, #11]
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	f7fa fee0 	bl	80083e4 <HAL_PCD_EP_Transmit>
 800d624:	4603      	mov	r3, r0
 800d626:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d628:	7dfb      	ldrb	r3, [r7, #23]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f000 f83e 	bl	800d6ac <USBD_Get_USB_Status>
 800d630:	4603      	mov	r3, r0
 800d632:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d634:	7dbb      	ldrb	r3, [r7, #22]
}
 800d636:	4618      	mov	r0, r3
 800d638:	3718      	adds	r7, #24
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d63e:	b580      	push	{r7, lr}
 800d640:	b086      	sub	sp, #24
 800d642:	af00      	add	r7, sp, #0
 800d644:	60f8      	str	r0, [r7, #12]
 800d646:	607a      	str	r2, [r7, #4]
 800d648:	461a      	mov	r2, r3
 800d64a:	460b      	mov	r3, r1
 800d64c:	72fb      	strb	r3, [r7, #11]
 800d64e:	4613      	mov	r3, r2
 800d650:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d652:	2300      	movs	r3, #0
 800d654:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d656:	2300      	movs	r3, #0
 800d658:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d660:	893b      	ldrh	r3, [r7, #8]
 800d662:	7af9      	ldrb	r1, [r7, #11]
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	f7fa fe5b 	bl	8008320 <HAL_PCD_EP_Receive>
 800d66a:	4603      	mov	r3, r0
 800d66c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d66e:	7dfb      	ldrb	r3, [r7, #23]
 800d670:	4618      	mov	r0, r3
 800d672:	f000 f81b 	bl	800d6ac <USBD_Get_USB_Status>
 800d676:	4603      	mov	r3, r0
 800d678:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d67a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3718      	adds	r7, #24
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	460b      	mov	r3, r1
 800d68e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d696:	78fa      	ldrb	r2, [r7, #3]
 800d698:	4611      	mov	r1, r2
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7fa fe8b 	bl	80083b6 <HAL_PCD_EP_GetRxCount>
 800d6a0:	4603      	mov	r3, r0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3708      	adds	r7, #8
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
	...

0800d6ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b085      	sub	sp, #20
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d6ba:	79fb      	ldrb	r3, [r7, #7]
 800d6bc:	2b03      	cmp	r3, #3
 800d6be:	d817      	bhi.n	800d6f0 <USBD_Get_USB_Status+0x44>
 800d6c0:	a201      	add	r2, pc, #4	; (adr r2, 800d6c8 <USBD_Get_USB_Status+0x1c>)
 800d6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6c6:	bf00      	nop
 800d6c8:	0800d6d9 	.word	0x0800d6d9
 800d6cc:	0800d6df 	.word	0x0800d6df
 800d6d0:	0800d6e5 	.word	0x0800d6e5
 800d6d4:	0800d6eb 	.word	0x0800d6eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	73fb      	strb	r3, [r7, #15]
    break;
 800d6dc:	e00b      	b.n	800d6f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6de:	2302      	movs	r3, #2
 800d6e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d6e2:	e008      	b.n	800d6f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d6e8:	e005      	b.n	800d6f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6ea:	2302      	movs	r3, #2
 800d6ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d6ee:	e002      	b.n	800d6f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d6f0:	2302      	movs	r3, #2
 800d6f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d6f4:	bf00      	nop
  }
  return usb_status;
 800d6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3714      	adds	r7, #20
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bc80      	pop	{r7}
 800d700:	4770      	bx	lr
 800d702:	bf00      	nop

0800d704 <cos>:
 800d704:	b530      	push	{r4, r5, lr}
 800d706:	4a1e      	ldr	r2, [pc, #120]	; (800d780 <cos+0x7c>)
 800d708:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d70c:	4293      	cmp	r3, r2
 800d70e:	b087      	sub	sp, #28
 800d710:	dc04      	bgt.n	800d71c <cos+0x18>
 800d712:	2200      	movs	r2, #0
 800d714:	2300      	movs	r3, #0
 800d716:	f000 ff23 	bl	800e560 <__kernel_cos>
 800d71a:	e006      	b.n	800d72a <cos+0x26>
 800d71c:	4a19      	ldr	r2, [pc, #100]	; (800d784 <cos+0x80>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	dd05      	ble.n	800d72e <cos+0x2a>
 800d722:	4602      	mov	r2, r0
 800d724:	460b      	mov	r3, r1
 800d726:	f7f2 fd5b 	bl	80001e0 <__aeabi_dsub>
 800d72a:	b007      	add	sp, #28
 800d72c:	bd30      	pop	{r4, r5, pc}
 800d72e:	aa02      	add	r2, sp, #8
 800d730:	f000 fa32 	bl	800db98 <__ieee754_rem_pio2>
 800d734:	f000 0003 	and.w	r0, r0, #3
 800d738:	2801      	cmp	r0, #1
 800d73a:	d007      	beq.n	800d74c <cos+0x48>
 800d73c:	2802      	cmp	r0, #2
 800d73e:	d00f      	beq.n	800d760 <cos+0x5c>
 800d740:	b9a8      	cbnz	r0, 800d76e <cos+0x6a>
 800d742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d74a:	e7e4      	b.n	800d716 <cos+0x12>
 800d74c:	9000      	str	r0, [sp, #0]
 800d74e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d756:	f001 fb0b 	bl	800ed70 <__kernel_sin>
 800d75a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d75e:	e7e4      	b.n	800d72a <cos+0x26>
 800d760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d768:	f000 fefa 	bl	800e560 <__kernel_cos>
 800d76c:	e7f5      	b.n	800d75a <cos+0x56>
 800d76e:	2301      	movs	r3, #1
 800d770:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d774:	9300      	str	r3, [sp, #0]
 800d776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d77a:	f001 faf9 	bl	800ed70 <__kernel_sin>
 800d77e:	e7d4      	b.n	800d72a <cos+0x26>
 800d780:	3fe921fb 	.word	0x3fe921fb
 800d784:	7fefffff 	.word	0x7fefffff

0800d788 <sin>:
 800d788:	b530      	push	{r4, r5, lr}
 800d78a:	4a20      	ldr	r2, [pc, #128]	; (800d80c <sin+0x84>)
 800d78c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d790:	4293      	cmp	r3, r2
 800d792:	b087      	sub	sp, #28
 800d794:	dc06      	bgt.n	800d7a4 <sin+0x1c>
 800d796:	2300      	movs	r3, #0
 800d798:	2200      	movs	r2, #0
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	2300      	movs	r3, #0
 800d79e:	f001 fae7 	bl	800ed70 <__kernel_sin>
 800d7a2:	e006      	b.n	800d7b2 <sin+0x2a>
 800d7a4:	4a1a      	ldr	r2, [pc, #104]	; (800d810 <sin+0x88>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	dd05      	ble.n	800d7b6 <sin+0x2e>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	f7f2 fd17 	bl	80001e0 <__aeabi_dsub>
 800d7b2:	b007      	add	sp, #28
 800d7b4:	bd30      	pop	{r4, r5, pc}
 800d7b6:	aa02      	add	r2, sp, #8
 800d7b8:	f000 f9ee 	bl	800db98 <__ieee754_rem_pio2>
 800d7bc:	f000 0003 	and.w	r0, r0, #3
 800d7c0:	2801      	cmp	r0, #1
 800d7c2:	d009      	beq.n	800d7d8 <sin+0x50>
 800d7c4:	2802      	cmp	r0, #2
 800d7c6:	d00e      	beq.n	800d7e6 <sin+0x5e>
 800d7c8:	b9c0      	cbnz	r0, 800d7fc <sin+0x74>
 800d7ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	9300      	str	r3, [sp, #0]
 800d7d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7d6:	e7e2      	b.n	800d79e <sin+0x16>
 800d7d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7e0:	f000 febe 	bl	800e560 <__kernel_cos>
 800d7e4:	e7e5      	b.n	800d7b2 <sin+0x2a>
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7ec:	9300      	str	r3, [sp, #0]
 800d7ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7f2:	f001 fabd 	bl	800ed70 <__kernel_sin>
 800d7f6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d7fa:	e7da      	b.n	800d7b2 <sin+0x2a>
 800d7fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d804:	f000 feac 	bl	800e560 <__kernel_cos>
 800d808:	e7f5      	b.n	800d7f6 <sin+0x6e>
 800d80a:	bf00      	nop
 800d80c:	3fe921fb 	.word	0x3fe921fb
 800d810:	7fefffff 	.word	0x7fefffff

0800d814 <atanf>:
 800d814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d818:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800d81c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800d820:	4604      	mov	r4, r0
 800d822:	4680      	mov	r8, r0
 800d824:	db0e      	blt.n	800d844 <atanf+0x30>
 800d826:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d82a:	dd04      	ble.n	800d836 <atanf+0x22>
 800d82c:	4601      	mov	r1, r0
 800d82e:	f7f3 f9dd 	bl	8000bec <__addsf3>
 800d832:	4604      	mov	r4, r0
 800d834:	e003      	b.n	800d83e <atanf+0x2a>
 800d836:	2800      	cmp	r0, #0
 800d838:	f300 80ce 	bgt.w	800d9d8 <atanf+0x1c4>
 800d83c:	4c67      	ldr	r4, [pc, #412]	; (800d9dc <atanf+0x1c8>)
 800d83e:	4620      	mov	r0, r4
 800d840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d844:	4b66      	ldr	r3, [pc, #408]	; (800d9e0 <atanf+0x1cc>)
 800d846:	429d      	cmp	r5, r3
 800d848:	dc0e      	bgt.n	800d868 <atanf+0x54>
 800d84a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800d84e:	da08      	bge.n	800d862 <atanf+0x4e>
 800d850:	4964      	ldr	r1, [pc, #400]	; (800d9e4 <atanf+0x1d0>)
 800d852:	f7f3 f9cb 	bl	8000bec <__addsf3>
 800d856:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d85a:	f7f3 fc8b 	bl	8001174 <__aeabi_fcmpgt>
 800d85e:	2800      	cmp	r0, #0
 800d860:	d1ed      	bne.n	800d83e <atanf+0x2a>
 800d862:	f04f 36ff 	mov.w	r6, #4294967295
 800d866:	e01c      	b.n	800d8a2 <atanf+0x8e>
 800d868:	f000 f914 	bl	800da94 <fabsf>
 800d86c:	4b5e      	ldr	r3, [pc, #376]	; (800d9e8 <atanf+0x1d4>)
 800d86e:	4604      	mov	r4, r0
 800d870:	429d      	cmp	r5, r3
 800d872:	dc7c      	bgt.n	800d96e <atanf+0x15a>
 800d874:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800d878:	429d      	cmp	r5, r3
 800d87a:	dc67      	bgt.n	800d94c <atanf+0x138>
 800d87c:	4601      	mov	r1, r0
 800d87e:	f7f3 f9b5 	bl	8000bec <__addsf3>
 800d882:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d886:	f7f3 f9af 	bl	8000be8 <__aeabi_fsub>
 800d88a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d88e:	4605      	mov	r5, r0
 800d890:	4620      	mov	r0, r4
 800d892:	f7f3 f9ab 	bl	8000bec <__addsf3>
 800d896:	4601      	mov	r1, r0
 800d898:	4628      	mov	r0, r5
 800d89a:	f7f3 fb63 	bl	8000f64 <__aeabi_fdiv>
 800d89e:	2600      	movs	r6, #0
 800d8a0:	4604      	mov	r4, r0
 800d8a2:	4621      	mov	r1, r4
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f7f3 faa9 	bl	8000dfc <__aeabi_fmul>
 800d8aa:	4601      	mov	r1, r0
 800d8ac:	4607      	mov	r7, r0
 800d8ae:	f7f3 faa5 	bl	8000dfc <__aeabi_fmul>
 800d8b2:	4605      	mov	r5, r0
 800d8b4:	494d      	ldr	r1, [pc, #308]	; (800d9ec <atanf+0x1d8>)
 800d8b6:	f7f3 faa1 	bl	8000dfc <__aeabi_fmul>
 800d8ba:	494d      	ldr	r1, [pc, #308]	; (800d9f0 <atanf+0x1dc>)
 800d8bc:	f7f3 f996 	bl	8000bec <__addsf3>
 800d8c0:	4629      	mov	r1, r5
 800d8c2:	f7f3 fa9b 	bl	8000dfc <__aeabi_fmul>
 800d8c6:	494b      	ldr	r1, [pc, #300]	; (800d9f4 <atanf+0x1e0>)
 800d8c8:	f7f3 f990 	bl	8000bec <__addsf3>
 800d8cc:	4629      	mov	r1, r5
 800d8ce:	f7f3 fa95 	bl	8000dfc <__aeabi_fmul>
 800d8d2:	4949      	ldr	r1, [pc, #292]	; (800d9f8 <atanf+0x1e4>)
 800d8d4:	f7f3 f98a 	bl	8000bec <__addsf3>
 800d8d8:	4629      	mov	r1, r5
 800d8da:	f7f3 fa8f 	bl	8000dfc <__aeabi_fmul>
 800d8de:	4947      	ldr	r1, [pc, #284]	; (800d9fc <atanf+0x1e8>)
 800d8e0:	f7f3 f984 	bl	8000bec <__addsf3>
 800d8e4:	4629      	mov	r1, r5
 800d8e6:	f7f3 fa89 	bl	8000dfc <__aeabi_fmul>
 800d8ea:	4945      	ldr	r1, [pc, #276]	; (800da00 <atanf+0x1ec>)
 800d8ec:	f7f3 f97e 	bl	8000bec <__addsf3>
 800d8f0:	4639      	mov	r1, r7
 800d8f2:	f7f3 fa83 	bl	8000dfc <__aeabi_fmul>
 800d8f6:	4943      	ldr	r1, [pc, #268]	; (800da04 <atanf+0x1f0>)
 800d8f8:	4607      	mov	r7, r0
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	f7f3 fa7e 	bl	8000dfc <__aeabi_fmul>
 800d900:	4941      	ldr	r1, [pc, #260]	; (800da08 <atanf+0x1f4>)
 800d902:	f7f3 f971 	bl	8000be8 <__aeabi_fsub>
 800d906:	4629      	mov	r1, r5
 800d908:	f7f3 fa78 	bl	8000dfc <__aeabi_fmul>
 800d90c:	493f      	ldr	r1, [pc, #252]	; (800da0c <atanf+0x1f8>)
 800d90e:	f7f3 f96b 	bl	8000be8 <__aeabi_fsub>
 800d912:	4629      	mov	r1, r5
 800d914:	f7f3 fa72 	bl	8000dfc <__aeabi_fmul>
 800d918:	493d      	ldr	r1, [pc, #244]	; (800da10 <atanf+0x1fc>)
 800d91a:	f7f3 f965 	bl	8000be8 <__aeabi_fsub>
 800d91e:	4629      	mov	r1, r5
 800d920:	f7f3 fa6c 	bl	8000dfc <__aeabi_fmul>
 800d924:	493b      	ldr	r1, [pc, #236]	; (800da14 <atanf+0x200>)
 800d926:	f7f3 f95f 	bl	8000be8 <__aeabi_fsub>
 800d92a:	4629      	mov	r1, r5
 800d92c:	f7f3 fa66 	bl	8000dfc <__aeabi_fmul>
 800d930:	4601      	mov	r1, r0
 800d932:	4638      	mov	r0, r7
 800d934:	f7f3 f95a 	bl	8000bec <__addsf3>
 800d938:	4621      	mov	r1, r4
 800d93a:	f7f3 fa5f 	bl	8000dfc <__aeabi_fmul>
 800d93e:	1c73      	adds	r3, r6, #1
 800d940:	4601      	mov	r1, r0
 800d942:	d133      	bne.n	800d9ac <atanf+0x198>
 800d944:	4620      	mov	r0, r4
 800d946:	f7f3 f94f 	bl	8000be8 <__aeabi_fsub>
 800d94a:	e772      	b.n	800d832 <atanf+0x1e>
 800d94c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d950:	f7f3 f94a 	bl	8000be8 <__aeabi_fsub>
 800d954:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d958:	4605      	mov	r5, r0
 800d95a:	4620      	mov	r0, r4
 800d95c:	f7f3 f946 	bl	8000bec <__addsf3>
 800d960:	4601      	mov	r1, r0
 800d962:	4628      	mov	r0, r5
 800d964:	f7f3 fafe 	bl	8000f64 <__aeabi_fdiv>
 800d968:	2601      	movs	r6, #1
 800d96a:	4604      	mov	r4, r0
 800d96c:	e799      	b.n	800d8a2 <atanf+0x8e>
 800d96e:	4b2a      	ldr	r3, [pc, #168]	; (800da18 <atanf+0x204>)
 800d970:	429d      	cmp	r5, r3
 800d972:	dc14      	bgt.n	800d99e <atanf+0x18a>
 800d974:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800d978:	f7f3 f936 	bl	8000be8 <__aeabi_fsub>
 800d97c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800d980:	4605      	mov	r5, r0
 800d982:	4620      	mov	r0, r4
 800d984:	f7f3 fa3a 	bl	8000dfc <__aeabi_fmul>
 800d988:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d98c:	f7f3 f92e 	bl	8000bec <__addsf3>
 800d990:	4601      	mov	r1, r0
 800d992:	4628      	mov	r0, r5
 800d994:	f7f3 fae6 	bl	8000f64 <__aeabi_fdiv>
 800d998:	2602      	movs	r6, #2
 800d99a:	4604      	mov	r4, r0
 800d99c:	e781      	b.n	800d8a2 <atanf+0x8e>
 800d99e:	4601      	mov	r1, r0
 800d9a0:	481e      	ldr	r0, [pc, #120]	; (800da1c <atanf+0x208>)
 800d9a2:	f7f3 fadf 	bl	8000f64 <__aeabi_fdiv>
 800d9a6:	2603      	movs	r6, #3
 800d9a8:	4604      	mov	r4, r0
 800d9aa:	e77a      	b.n	800d8a2 <atanf+0x8e>
 800d9ac:	4b1c      	ldr	r3, [pc, #112]	; (800da20 <atanf+0x20c>)
 800d9ae:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800d9b2:	f7f3 f919 	bl	8000be8 <__aeabi_fsub>
 800d9b6:	4621      	mov	r1, r4
 800d9b8:	f7f3 f916 	bl	8000be8 <__aeabi_fsub>
 800d9bc:	4b19      	ldr	r3, [pc, #100]	; (800da24 <atanf+0x210>)
 800d9be:	4601      	mov	r1, r0
 800d9c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d9c4:	f7f3 f910 	bl	8000be8 <__aeabi_fsub>
 800d9c8:	f1b8 0f00 	cmp.w	r8, #0
 800d9cc:	4604      	mov	r4, r0
 800d9ce:	f6bf af36 	bge.w	800d83e <atanf+0x2a>
 800d9d2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d9d6:	e72c      	b.n	800d832 <atanf+0x1e>
 800d9d8:	4c13      	ldr	r4, [pc, #76]	; (800da28 <atanf+0x214>)
 800d9da:	e730      	b.n	800d83e <atanf+0x2a>
 800d9dc:	bfc90fdb 	.word	0xbfc90fdb
 800d9e0:	3edfffff 	.word	0x3edfffff
 800d9e4:	7149f2ca 	.word	0x7149f2ca
 800d9e8:	3f97ffff 	.word	0x3f97ffff
 800d9ec:	3c8569d7 	.word	0x3c8569d7
 800d9f0:	3d4bda59 	.word	0x3d4bda59
 800d9f4:	3d886b35 	.word	0x3d886b35
 800d9f8:	3dba2e6e 	.word	0x3dba2e6e
 800d9fc:	3e124925 	.word	0x3e124925
 800da00:	3eaaaaab 	.word	0x3eaaaaab
 800da04:	bd15a221 	.word	0xbd15a221
 800da08:	3d6ef16b 	.word	0x3d6ef16b
 800da0c:	3d9d8795 	.word	0x3d9d8795
 800da10:	3de38e38 	.word	0x3de38e38
 800da14:	3e4ccccd 	.word	0x3e4ccccd
 800da18:	401bffff 	.word	0x401bffff
 800da1c:	bf800000 	.word	0xbf800000
 800da20:	08013094 	.word	0x08013094
 800da24:	08013084 	.word	0x08013084
 800da28:	3fc90fdb 	.word	0x3fc90fdb

0800da2c <cosf>:
 800da2c:	b507      	push	{r0, r1, r2, lr}
 800da2e:	4a18      	ldr	r2, [pc, #96]	; (800da90 <cosf+0x64>)
 800da30:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800da34:	4293      	cmp	r3, r2
 800da36:	4601      	mov	r1, r0
 800da38:	dc03      	bgt.n	800da42 <cosf+0x16>
 800da3a:	2100      	movs	r1, #0
 800da3c:	f001 fa4e 	bl	800eedc <__kernel_cosf>
 800da40:	e004      	b.n	800da4c <cosf+0x20>
 800da42:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800da46:	db04      	blt.n	800da52 <cosf+0x26>
 800da48:	f7f3 f8ce 	bl	8000be8 <__aeabi_fsub>
 800da4c:	b003      	add	sp, #12
 800da4e:	f85d fb04 	ldr.w	pc, [sp], #4
 800da52:	4669      	mov	r1, sp
 800da54:	f000 fbd4 	bl	800e200 <__ieee754_rem_pio2f>
 800da58:	f000 0203 	and.w	r2, r0, #3
 800da5c:	2a01      	cmp	r2, #1
 800da5e:	d005      	beq.n	800da6c <cosf+0x40>
 800da60:	2a02      	cmp	r2, #2
 800da62:	d00a      	beq.n	800da7a <cosf+0x4e>
 800da64:	b972      	cbnz	r2, 800da84 <cosf+0x58>
 800da66:	9901      	ldr	r1, [sp, #4]
 800da68:	9800      	ldr	r0, [sp, #0]
 800da6a:	e7e7      	b.n	800da3c <cosf+0x10>
 800da6c:	9901      	ldr	r1, [sp, #4]
 800da6e:	9800      	ldr	r0, [sp, #0]
 800da70:	f001 fd6a 	bl	800f548 <__kernel_sinf>
 800da74:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800da78:	e7e8      	b.n	800da4c <cosf+0x20>
 800da7a:	9901      	ldr	r1, [sp, #4]
 800da7c:	9800      	ldr	r0, [sp, #0]
 800da7e:	f001 fa2d 	bl	800eedc <__kernel_cosf>
 800da82:	e7f7      	b.n	800da74 <cosf+0x48>
 800da84:	2201      	movs	r2, #1
 800da86:	9901      	ldr	r1, [sp, #4]
 800da88:	9800      	ldr	r0, [sp, #0]
 800da8a:	f001 fd5d 	bl	800f548 <__kernel_sinf>
 800da8e:	e7dd      	b.n	800da4c <cosf+0x20>
 800da90:	3f490fd8 	.word	0x3f490fd8

0800da94 <fabsf>:
 800da94:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800da98:	4770      	bx	lr
	...

0800da9c <sinf>:
 800da9c:	b507      	push	{r0, r1, r2, lr}
 800da9e:	4a19      	ldr	r2, [pc, #100]	; (800db04 <sinf+0x68>)
 800daa0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800daa4:	4293      	cmp	r3, r2
 800daa6:	4601      	mov	r1, r0
 800daa8:	dc04      	bgt.n	800dab4 <sinf+0x18>
 800daaa:	2200      	movs	r2, #0
 800daac:	2100      	movs	r1, #0
 800daae:	f001 fd4b 	bl	800f548 <__kernel_sinf>
 800dab2:	e004      	b.n	800dabe <sinf+0x22>
 800dab4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dab8:	db04      	blt.n	800dac4 <sinf+0x28>
 800daba:	f7f3 f895 	bl	8000be8 <__aeabi_fsub>
 800dabe:	b003      	add	sp, #12
 800dac0:	f85d fb04 	ldr.w	pc, [sp], #4
 800dac4:	4669      	mov	r1, sp
 800dac6:	f000 fb9b 	bl	800e200 <__ieee754_rem_pio2f>
 800daca:	f000 0003 	and.w	r0, r0, #3
 800dace:	2801      	cmp	r0, #1
 800dad0:	d006      	beq.n	800dae0 <sinf+0x44>
 800dad2:	2802      	cmp	r0, #2
 800dad4:	d009      	beq.n	800daea <sinf+0x4e>
 800dad6:	b980      	cbnz	r0, 800dafa <sinf+0x5e>
 800dad8:	2201      	movs	r2, #1
 800dada:	9901      	ldr	r1, [sp, #4]
 800dadc:	9800      	ldr	r0, [sp, #0]
 800dade:	e7e6      	b.n	800daae <sinf+0x12>
 800dae0:	9901      	ldr	r1, [sp, #4]
 800dae2:	9800      	ldr	r0, [sp, #0]
 800dae4:	f001 f9fa 	bl	800eedc <__kernel_cosf>
 800dae8:	e7e9      	b.n	800dabe <sinf+0x22>
 800daea:	2201      	movs	r2, #1
 800daec:	9901      	ldr	r1, [sp, #4]
 800daee:	9800      	ldr	r0, [sp, #0]
 800daf0:	f001 fd2a 	bl	800f548 <__kernel_sinf>
 800daf4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800daf8:	e7e1      	b.n	800dabe <sinf+0x22>
 800dafa:	9901      	ldr	r1, [sp, #4]
 800dafc:	9800      	ldr	r0, [sp, #0]
 800dafe:	f001 f9ed 	bl	800eedc <__kernel_cosf>
 800db02:	e7f7      	b.n	800daf4 <sinf+0x58>
 800db04:	3f490fd8 	.word	0x3f490fd8

0800db08 <asinf>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	4604      	mov	r4, r0
 800db0c:	f000 fa34 	bl	800df78 <__ieee754_asinf>
 800db10:	4b0e      	ldr	r3, [pc, #56]	; (800db4c <asinf+0x44>)
 800db12:	4605      	mov	r5, r0
 800db14:	f993 3000 	ldrsb.w	r3, [r3]
 800db18:	3301      	adds	r3, #1
 800db1a:	d015      	beq.n	800db48 <asinf+0x40>
 800db1c:	4621      	mov	r1, r4
 800db1e:	4620      	mov	r0, r4
 800db20:	f7f3 fb32 	bl	8001188 <__aeabi_fcmpun>
 800db24:	b980      	cbnz	r0, 800db48 <asinf+0x40>
 800db26:	4620      	mov	r0, r4
 800db28:	f7ff ffb4 	bl	800da94 <fabsf>
 800db2c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800db30:	f7f3 fb20 	bl	8001174 <__aeabi_fcmpgt>
 800db34:	b140      	cbz	r0, 800db48 <asinf+0x40>
 800db36:	f001 ff1b 	bl	800f970 <__errno>
 800db3a:	2321      	movs	r3, #33	; 0x21
 800db3c:	6003      	str	r3, [r0, #0]
 800db3e:	4804      	ldr	r0, [pc, #16]	; (800db50 <asinf+0x48>)
 800db40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db44:	f001 bec4 	b.w	800f8d0 <nanf>
 800db48:	4628      	mov	r0, r5
 800db4a:	bd38      	pop	{r3, r4, r5, pc}
 800db4c:	200001a6 	.word	0x200001a6
 800db50:	080138c8 	.word	0x080138c8

0800db54 <sqrtf>:
 800db54:	b538      	push	{r3, r4, r5, lr}
 800db56:	4605      	mov	r5, r0
 800db58:	f000 fcb0 	bl	800e4bc <__ieee754_sqrtf>
 800db5c:	4b0d      	ldr	r3, [pc, #52]	; (800db94 <sqrtf+0x40>)
 800db5e:	4604      	mov	r4, r0
 800db60:	f993 3000 	ldrsb.w	r3, [r3]
 800db64:	3301      	adds	r3, #1
 800db66:	d012      	beq.n	800db8e <sqrtf+0x3a>
 800db68:	4629      	mov	r1, r5
 800db6a:	4628      	mov	r0, r5
 800db6c:	f7f3 fb0c 	bl	8001188 <__aeabi_fcmpun>
 800db70:	b968      	cbnz	r0, 800db8e <sqrtf+0x3a>
 800db72:	2100      	movs	r1, #0
 800db74:	4628      	mov	r0, r5
 800db76:	f7f3 fadf 	bl	8001138 <__aeabi_fcmplt>
 800db7a:	b140      	cbz	r0, 800db8e <sqrtf+0x3a>
 800db7c:	f001 fef8 	bl	800f970 <__errno>
 800db80:	2321      	movs	r3, #33	; 0x21
 800db82:	2100      	movs	r1, #0
 800db84:	6003      	str	r3, [r0, #0]
 800db86:	4608      	mov	r0, r1
 800db88:	f7f3 f9ec 	bl	8000f64 <__aeabi_fdiv>
 800db8c:	4604      	mov	r4, r0
 800db8e:	4620      	mov	r0, r4
 800db90:	bd38      	pop	{r3, r4, r5, pc}
 800db92:	bf00      	nop
 800db94:	200001a6 	.word	0x200001a6

0800db98 <__ieee754_rem_pio2>:
 800db98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db9c:	4614      	mov	r4, r2
 800db9e:	4ac4      	ldr	r2, [pc, #784]	; (800deb0 <__ieee754_rem_pio2+0x318>)
 800dba0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800dba4:	b08d      	sub	sp, #52	; 0x34
 800dba6:	4592      	cmp	sl, r2
 800dba8:	9104      	str	r1, [sp, #16]
 800dbaa:	dc07      	bgt.n	800dbbc <__ieee754_rem_pio2+0x24>
 800dbac:	2200      	movs	r2, #0
 800dbae:	2300      	movs	r3, #0
 800dbb0:	e9c4 0100 	strd	r0, r1, [r4]
 800dbb4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800dbb8:	2500      	movs	r5, #0
 800dbba:	e024      	b.n	800dc06 <__ieee754_rem_pio2+0x6e>
 800dbbc:	4abd      	ldr	r2, [pc, #756]	; (800deb4 <__ieee754_rem_pio2+0x31c>)
 800dbbe:	4592      	cmp	sl, r2
 800dbc0:	dc72      	bgt.n	800dca8 <__ieee754_rem_pio2+0x110>
 800dbc2:	9b04      	ldr	r3, [sp, #16]
 800dbc4:	4dbc      	ldr	r5, [pc, #752]	; (800deb8 <__ieee754_rem_pio2+0x320>)
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	a3ab      	add	r3, pc, #684	; (adr r3, 800de78 <__ieee754_rem_pio2+0x2e0>)
 800dbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbce:	dd36      	ble.n	800dc3e <__ieee754_rem_pio2+0xa6>
 800dbd0:	f7f2 fb06 	bl	80001e0 <__aeabi_dsub>
 800dbd4:	45aa      	cmp	sl, r5
 800dbd6:	4606      	mov	r6, r0
 800dbd8:	460f      	mov	r7, r1
 800dbda:	d018      	beq.n	800dc0e <__ieee754_rem_pio2+0x76>
 800dbdc:	a3a8      	add	r3, pc, #672	; (adr r3, 800de80 <__ieee754_rem_pio2+0x2e8>)
 800dbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe2:	f7f2 fafd 	bl	80001e0 <__aeabi_dsub>
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	460b      	mov	r3, r1
 800dbea:	4630      	mov	r0, r6
 800dbec:	e9c4 2300 	strd	r2, r3, [r4]
 800dbf0:	4639      	mov	r1, r7
 800dbf2:	f7f2 faf5 	bl	80001e0 <__aeabi_dsub>
 800dbf6:	a3a2      	add	r3, pc, #648	; (adr r3, 800de80 <__ieee754_rem_pio2+0x2e8>)
 800dbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfc:	f7f2 faf0 	bl	80001e0 <__aeabi_dsub>
 800dc00:	2501      	movs	r5, #1
 800dc02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dc06:	4628      	mov	r0, r5
 800dc08:	b00d      	add	sp, #52	; 0x34
 800dc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0e:	a39e      	add	r3, pc, #632	; (adr r3, 800de88 <__ieee754_rem_pio2+0x2f0>)
 800dc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc14:	f7f2 fae4 	bl	80001e0 <__aeabi_dsub>
 800dc18:	a39d      	add	r3, pc, #628	; (adr r3, 800de90 <__ieee754_rem_pio2+0x2f8>)
 800dc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1e:	4606      	mov	r6, r0
 800dc20:	460f      	mov	r7, r1
 800dc22:	f7f2 fadd 	bl	80001e0 <__aeabi_dsub>
 800dc26:	4602      	mov	r2, r0
 800dc28:	460b      	mov	r3, r1
 800dc2a:	4630      	mov	r0, r6
 800dc2c:	e9c4 2300 	strd	r2, r3, [r4]
 800dc30:	4639      	mov	r1, r7
 800dc32:	f7f2 fad5 	bl	80001e0 <__aeabi_dsub>
 800dc36:	a396      	add	r3, pc, #600	; (adr r3, 800de90 <__ieee754_rem_pio2+0x2f8>)
 800dc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3c:	e7de      	b.n	800dbfc <__ieee754_rem_pio2+0x64>
 800dc3e:	f7f2 fad1 	bl	80001e4 <__adddf3>
 800dc42:	45aa      	cmp	sl, r5
 800dc44:	4606      	mov	r6, r0
 800dc46:	460f      	mov	r7, r1
 800dc48:	d016      	beq.n	800dc78 <__ieee754_rem_pio2+0xe0>
 800dc4a:	a38d      	add	r3, pc, #564	; (adr r3, 800de80 <__ieee754_rem_pio2+0x2e8>)
 800dc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc50:	f7f2 fac8 	bl	80001e4 <__adddf3>
 800dc54:	4602      	mov	r2, r0
 800dc56:	460b      	mov	r3, r1
 800dc58:	4630      	mov	r0, r6
 800dc5a:	e9c4 2300 	strd	r2, r3, [r4]
 800dc5e:	4639      	mov	r1, r7
 800dc60:	f7f2 fabe 	bl	80001e0 <__aeabi_dsub>
 800dc64:	a386      	add	r3, pc, #536	; (adr r3, 800de80 <__ieee754_rem_pio2+0x2e8>)
 800dc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6a:	f7f2 fabb 	bl	80001e4 <__adddf3>
 800dc6e:	f04f 35ff 	mov.w	r5, #4294967295
 800dc72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dc76:	e7c6      	b.n	800dc06 <__ieee754_rem_pio2+0x6e>
 800dc78:	a383      	add	r3, pc, #524	; (adr r3, 800de88 <__ieee754_rem_pio2+0x2f0>)
 800dc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7e:	f7f2 fab1 	bl	80001e4 <__adddf3>
 800dc82:	a383      	add	r3, pc, #524	; (adr r3, 800de90 <__ieee754_rem_pio2+0x2f8>)
 800dc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc88:	4606      	mov	r6, r0
 800dc8a:	460f      	mov	r7, r1
 800dc8c:	f7f2 faaa 	bl	80001e4 <__adddf3>
 800dc90:	4602      	mov	r2, r0
 800dc92:	460b      	mov	r3, r1
 800dc94:	4630      	mov	r0, r6
 800dc96:	e9c4 2300 	strd	r2, r3, [r4]
 800dc9a:	4639      	mov	r1, r7
 800dc9c:	f7f2 faa0 	bl	80001e0 <__aeabi_dsub>
 800dca0:	a37b      	add	r3, pc, #492	; (adr r3, 800de90 <__ieee754_rem_pio2+0x2f8>)
 800dca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca6:	e7e0      	b.n	800dc6a <__ieee754_rem_pio2+0xd2>
 800dca8:	4a84      	ldr	r2, [pc, #528]	; (800debc <__ieee754_rem_pio2+0x324>)
 800dcaa:	4592      	cmp	sl, r2
 800dcac:	f300 80d5 	bgt.w	800de5a <__ieee754_rem_pio2+0x2c2>
 800dcb0:	f001 fcc0 	bl	800f634 <fabs>
 800dcb4:	a378      	add	r3, pc, #480	; (adr r3, 800de98 <__ieee754_rem_pio2+0x300>)
 800dcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcba:	4606      	mov	r6, r0
 800dcbc:	460f      	mov	r7, r1
 800dcbe:	f7f2 fc47 	bl	8000550 <__aeabi_dmul>
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	4b7e      	ldr	r3, [pc, #504]	; (800dec0 <__ieee754_rem_pio2+0x328>)
 800dcc6:	f7f2 fa8d 	bl	80001e4 <__adddf3>
 800dcca:	f7f2 fef1 	bl	8000ab0 <__aeabi_d2iz>
 800dcce:	4605      	mov	r5, r0
 800dcd0:	f7f2 fbd4 	bl	800047c <__aeabi_i2d>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dcdc:	a366      	add	r3, pc, #408	; (adr r3, 800de78 <__ieee754_rem_pio2+0x2e0>)
 800dcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce2:	f7f2 fc35 	bl	8000550 <__aeabi_dmul>
 800dce6:	4602      	mov	r2, r0
 800dce8:	460b      	mov	r3, r1
 800dcea:	4630      	mov	r0, r6
 800dcec:	4639      	mov	r1, r7
 800dcee:	f7f2 fa77 	bl	80001e0 <__aeabi_dsub>
 800dcf2:	a363      	add	r3, pc, #396	; (adr r3, 800de80 <__ieee754_rem_pio2+0x2e8>)
 800dcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf8:	4680      	mov	r8, r0
 800dcfa:	4689      	mov	r9, r1
 800dcfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd00:	f7f2 fc26 	bl	8000550 <__aeabi_dmul>
 800dd04:	2d1f      	cmp	r5, #31
 800dd06:	4606      	mov	r6, r0
 800dd08:	460f      	mov	r7, r1
 800dd0a:	dc0e      	bgt.n	800dd2a <__ieee754_rem_pio2+0x192>
 800dd0c:	4b6d      	ldr	r3, [pc, #436]	; (800dec4 <__ieee754_rem_pio2+0x32c>)
 800dd0e:	1e6a      	subs	r2, r5, #1
 800dd10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd14:	4553      	cmp	r3, sl
 800dd16:	d008      	beq.n	800dd2a <__ieee754_rem_pio2+0x192>
 800dd18:	4632      	mov	r2, r6
 800dd1a:	463b      	mov	r3, r7
 800dd1c:	4640      	mov	r0, r8
 800dd1e:	4649      	mov	r1, r9
 800dd20:	f7f2 fa5e 	bl	80001e0 <__aeabi_dsub>
 800dd24:	e9c4 0100 	strd	r0, r1, [r4]
 800dd28:	e013      	b.n	800dd52 <__ieee754_rem_pio2+0x1ba>
 800dd2a:	463b      	mov	r3, r7
 800dd2c:	4632      	mov	r2, r6
 800dd2e:	4640      	mov	r0, r8
 800dd30:	4649      	mov	r1, r9
 800dd32:	f7f2 fa55 	bl	80001e0 <__aeabi_dsub>
 800dd36:	ea4f 532a 	mov.w	r3, sl, asr #20
 800dd3a:	9305      	str	r3, [sp, #20]
 800dd3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dd40:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800dd44:	f1ba 0f10 	cmp.w	sl, #16
 800dd48:	dc1f      	bgt.n	800dd8a <__ieee754_rem_pio2+0x1f2>
 800dd4a:	4602      	mov	r2, r0
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	e9c4 2300 	strd	r2, r3, [r4]
 800dd52:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800dd56:	4640      	mov	r0, r8
 800dd58:	4653      	mov	r3, sl
 800dd5a:	4649      	mov	r1, r9
 800dd5c:	f7f2 fa40 	bl	80001e0 <__aeabi_dsub>
 800dd60:	4632      	mov	r2, r6
 800dd62:	463b      	mov	r3, r7
 800dd64:	f7f2 fa3c 	bl	80001e0 <__aeabi_dsub>
 800dd68:	460b      	mov	r3, r1
 800dd6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dd6e:	9904      	ldr	r1, [sp, #16]
 800dd70:	4602      	mov	r2, r0
 800dd72:	2900      	cmp	r1, #0
 800dd74:	f6bf af47 	bge.w	800dc06 <__ieee754_rem_pio2+0x6e>
 800dd78:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800dd7c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800dd80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dd84:	60e3      	str	r3, [r4, #12]
 800dd86:	426d      	negs	r5, r5
 800dd88:	e73d      	b.n	800dc06 <__ieee754_rem_pio2+0x6e>
 800dd8a:	a33f      	add	r3, pc, #252	; (adr r3, 800de88 <__ieee754_rem_pio2+0x2f0>)
 800dd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd94:	f7f2 fbdc 	bl	8000550 <__aeabi_dmul>
 800dd98:	4606      	mov	r6, r0
 800dd9a:	460f      	mov	r7, r1
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	460b      	mov	r3, r1
 800dda0:	4640      	mov	r0, r8
 800dda2:	4649      	mov	r1, r9
 800dda4:	f7f2 fa1c 	bl	80001e0 <__aeabi_dsub>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	460b      	mov	r3, r1
 800ddac:	4682      	mov	sl, r0
 800ddae:	468b      	mov	fp, r1
 800ddb0:	4640      	mov	r0, r8
 800ddb2:	4649      	mov	r1, r9
 800ddb4:	f7f2 fa14 	bl	80001e0 <__aeabi_dsub>
 800ddb8:	4632      	mov	r2, r6
 800ddba:	463b      	mov	r3, r7
 800ddbc:	f7f2 fa10 	bl	80001e0 <__aeabi_dsub>
 800ddc0:	a333      	add	r3, pc, #204	; (adr r3, 800de90 <__ieee754_rem_pio2+0x2f8>)
 800ddc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc6:	4606      	mov	r6, r0
 800ddc8:	460f      	mov	r7, r1
 800ddca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddce:	f7f2 fbbf 	bl	8000550 <__aeabi_dmul>
 800ddd2:	4632      	mov	r2, r6
 800ddd4:	463b      	mov	r3, r7
 800ddd6:	f7f2 fa03 	bl	80001e0 <__aeabi_dsub>
 800ddda:	4602      	mov	r2, r0
 800dddc:	460b      	mov	r3, r1
 800ddde:	4606      	mov	r6, r0
 800dde0:	460f      	mov	r7, r1
 800dde2:	4650      	mov	r0, sl
 800dde4:	4659      	mov	r1, fp
 800dde6:	f7f2 f9fb 	bl	80001e0 <__aeabi_dsub>
 800ddea:	9a05      	ldr	r2, [sp, #20]
 800ddec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ddf0:	1ad3      	subs	r3, r2, r3
 800ddf2:	2b31      	cmp	r3, #49	; 0x31
 800ddf4:	dc06      	bgt.n	800de04 <__ieee754_rem_pio2+0x26c>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	46d0      	mov	r8, sl
 800ddfc:	46d9      	mov	r9, fp
 800ddfe:	e9c4 2300 	strd	r2, r3, [r4]
 800de02:	e7a6      	b.n	800dd52 <__ieee754_rem_pio2+0x1ba>
 800de04:	a326      	add	r3, pc, #152	; (adr r3, 800dea0 <__ieee754_rem_pio2+0x308>)
 800de06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de0e:	f7f2 fb9f 	bl	8000550 <__aeabi_dmul>
 800de12:	4606      	mov	r6, r0
 800de14:	460f      	mov	r7, r1
 800de16:	4602      	mov	r2, r0
 800de18:	460b      	mov	r3, r1
 800de1a:	4650      	mov	r0, sl
 800de1c:	4659      	mov	r1, fp
 800de1e:	f7f2 f9df 	bl	80001e0 <__aeabi_dsub>
 800de22:	4602      	mov	r2, r0
 800de24:	460b      	mov	r3, r1
 800de26:	4680      	mov	r8, r0
 800de28:	4689      	mov	r9, r1
 800de2a:	4650      	mov	r0, sl
 800de2c:	4659      	mov	r1, fp
 800de2e:	f7f2 f9d7 	bl	80001e0 <__aeabi_dsub>
 800de32:	4632      	mov	r2, r6
 800de34:	463b      	mov	r3, r7
 800de36:	f7f2 f9d3 	bl	80001e0 <__aeabi_dsub>
 800de3a:	a31b      	add	r3, pc, #108	; (adr r3, 800dea8 <__ieee754_rem_pio2+0x310>)
 800de3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de40:	4606      	mov	r6, r0
 800de42:	460f      	mov	r7, r1
 800de44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de48:	f7f2 fb82 	bl	8000550 <__aeabi_dmul>
 800de4c:	4632      	mov	r2, r6
 800de4e:	463b      	mov	r3, r7
 800de50:	f7f2 f9c6 	bl	80001e0 <__aeabi_dsub>
 800de54:	4606      	mov	r6, r0
 800de56:	460f      	mov	r7, r1
 800de58:	e75e      	b.n	800dd18 <__ieee754_rem_pio2+0x180>
 800de5a:	4a1b      	ldr	r2, [pc, #108]	; (800dec8 <__ieee754_rem_pio2+0x330>)
 800de5c:	4592      	cmp	sl, r2
 800de5e:	dd35      	ble.n	800decc <__ieee754_rem_pio2+0x334>
 800de60:	4602      	mov	r2, r0
 800de62:	460b      	mov	r3, r1
 800de64:	f7f2 f9bc 	bl	80001e0 <__aeabi_dsub>
 800de68:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800de6c:	e9c4 0100 	strd	r0, r1, [r4]
 800de70:	e6a2      	b.n	800dbb8 <__ieee754_rem_pio2+0x20>
 800de72:	bf00      	nop
 800de74:	f3af 8000 	nop.w
 800de78:	54400000 	.word	0x54400000
 800de7c:	3ff921fb 	.word	0x3ff921fb
 800de80:	1a626331 	.word	0x1a626331
 800de84:	3dd0b461 	.word	0x3dd0b461
 800de88:	1a600000 	.word	0x1a600000
 800de8c:	3dd0b461 	.word	0x3dd0b461
 800de90:	2e037073 	.word	0x2e037073
 800de94:	3ba3198a 	.word	0x3ba3198a
 800de98:	6dc9c883 	.word	0x6dc9c883
 800de9c:	3fe45f30 	.word	0x3fe45f30
 800dea0:	2e000000 	.word	0x2e000000
 800dea4:	3ba3198a 	.word	0x3ba3198a
 800dea8:	252049c1 	.word	0x252049c1
 800deac:	397b839a 	.word	0x397b839a
 800deb0:	3fe921fb 	.word	0x3fe921fb
 800deb4:	4002d97b 	.word	0x4002d97b
 800deb8:	3ff921fb 	.word	0x3ff921fb
 800debc:	413921fb 	.word	0x413921fb
 800dec0:	3fe00000 	.word	0x3fe00000
 800dec4:	080130a4 	.word	0x080130a4
 800dec8:	7fefffff 	.word	0x7fefffff
 800decc:	ea4f 552a 	mov.w	r5, sl, asr #20
 800ded0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800ded4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800ded8:	460f      	mov	r7, r1
 800deda:	4606      	mov	r6, r0
 800dedc:	f7f2 fde8 	bl	8000ab0 <__aeabi_d2iz>
 800dee0:	f7f2 facc 	bl	800047c <__aeabi_i2d>
 800dee4:	4602      	mov	r2, r0
 800dee6:	460b      	mov	r3, r1
 800dee8:	4630      	mov	r0, r6
 800deea:	4639      	mov	r1, r7
 800deec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800def0:	f7f2 f976 	bl	80001e0 <__aeabi_dsub>
 800def4:	2200      	movs	r2, #0
 800def6:	4b1e      	ldr	r3, [pc, #120]	; (800df70 <__ieee754_rem_pio2+0x3d8>)
 800def8:	f7f2 fb2a 	bl	8000550 <__aeabi_dmul>
 800defc:	460f      	mov	r7, r1
 800defe:	4606      	mov	r6, r0
 800df00:	f7f2 fdd6 	bl	8000ab0 <__aeabi_d2iz>
 800df04:	f7f2 faba 	bl	800047c <__aeabi_i2d>
 800df08:	4602      	mov	r2, r0
 800df0a:	460b      	mov	r3, r1
 800df0c:	4630      	mov	r0, r6
 800df0e:	4639      	mov	r1, r7
 800df10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800df14:	f7f2 f964 	bl	80001e0 <__aeabi_dsub>
 800df18:	2200      	movs	r2, #0
 800df1a:	4b15      	ldr	r3, [pc, #84]	; (800df70 <__ieee754_rem_pio2+0x3d8>)
 800df1c:	f7f2 fb18 	bl	8000550 <__aeabi_dmul>
 800df20:	f04f 0803 	mov.w	r8, #3
 800df24:	2600      	movs	r6, #0
 800df26:	2700      	movs	r7, #0
 800df28:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800df2c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800df30:	4632      	mov	r2, r6
 800df32:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800df36:	463b      	mov	r3, r7
 800df38:	46c2      	mov	sl, r8
 800df3a:	f108 38ff 	add.w	r8, r8, #4294967295
 800df3e:	f7f2 fd6f 	bl	8000a20 <__aeabi_dcmpeq>
 800df42:	2800      	cmp	r0, #0
 800df44:	d1f4      	bne.n	800df30 <__ieee754_rem_pio2+0x398>
 800df46:	4b0b      	ldr	r3, [pc, #44]	; (800df74 <__ieee754_rem_pio2+0x3dc>)
 800df48:	462a      	mov	r2, r5
 800df4a:	9301      	str	r3, [sp, #4]
 800df4c:	2302      	movs	r3, #2
 800df4e:	4621      	mov	r1, r4
 800df50:	9300      	str	r3, [sp, #0]
 800df52:	a806      	add	r0, sp, #24
 800df54:	4653      	mov	r3, sl
 800df56:	f000 fbc1 	bl	800e6dc <__kernel_rem_pio2>
 800df5a:	9b04      	ldr	r3, [sp, #16]
 800df5c:	4605      	mov	r5, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f6bf ae51 	bge.w	800dc06 <__ieee754_rem_pio2+0x6e>
 800df64:	6863      	ldr	r3, [r4, #4]
 800df66:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800df6a:	6063      	str	r3, [r4, #4]
 800df6c:	68e3      	ldr	r3, [r4, #12]
 800df6e:	e707      	b.n	800dd80 <__ieee754_rem_pio2+0x1e8>
 800df70:	41700000 	.word	0x41700000
 800df74:	08013124 	.word	0x08013124

0800df78 <__ieee754_asinf>:
 800df78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df7c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800df80:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800df84:	4604      	mov	r4, r0
 800df86:	4605      	mov	r5, r0
 800df88:	d10c      	bne.n	800dfa4 <__ieee754_asinf+0x2c>
 800df8a:	498d      	ldr	r1, [pc, #564]	; (800e1c0 <__ieee754_asinf+0x248>)
 800df8c:	f7f2 ff36 	bl	8000dfc <__aeabi_fmul>
 800df90:	498c      	ldr	r1, [pc, #560]	; (800e1c4 <__ieee754_asinf+0x24c>)
 800df92:	4605      	mov	r5, r0
 800df94:	4620      	mov	r0, r4
 800df96:	f7f2 ff31 	bl	8000dfc <__aeabi_fmul>
 800df9a:	4601      	mov	r1, r0
 800df9c:	4628      	mov	r0, r5
 800df9e:	f7f2 fe25 	bl	8000bec <__addsf3>
 800dfa2:	e006      	b.n	800dfb2 <__ieee754_asinf+0x3a>
 800dfa4:	dd07      	ble.n	800dfb6 <__ieee754_asinf+0x3e>
 800dfa6:	4601      	mov	r1, r0
 800dfa8:	f7f2 fe1e 	bl	8000be8 <__aeabi_fsub>
 800dfac:	4601      	mov	r1, r0
 800dfae:	f7f2 ffd9 	bl	8000f64 <__aeabi_fdiv>
 800dfb2:	4604      	mov	r4, r0
 800dfb4:	e00e      	b.n	800dfd4 <__ieee754_asinf+0x5c>
 800dfb6:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800dfba:	da58      	bge.n	800e06e <__ieee754_asinf+0xf6>
 800dfbc:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800dfc0:	da0b      	bge.n	800dfda <__ieee754_asinf+0x62>
 800dfc2:	4981      	ldr	r1, [pc, #516]	; (800e1c8 <__ieee754_asinf+0x250>)
 800dfc4:	f7f2 fe12 	bl	8000bec <__addsf3>
 800dfc8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dfcc:	f7f3 f8d2 	bl	8001174 <__aeabi_fcmpgt>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d04c      	beq.n	800e06e <__ieee754_asinf+0xf6>
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfda:	4601      	mov	r1, r0
 800dfdc:	f7f2 ff0e 	bl	8000dfc <__aeabi_fmul>
 800dfe0:	4605      	mov	r5, r0
 800dfe2:	497a      	ldr	r1, [pc, #488]	; (800e1cc <__ieee754_asinf+0x254>)
 800dfe4:	f7f2 ff0a 	bl	8000dfc <__aeabi_fmul>
 800dfe8:	4979      	ldr	r1, [pc, #484]	; (800e1d0 <__ieee754_asinf+0x258>)
 800dfea:	f7f2 fdff 	bl	8000bec <__addsf3>
 800dfee:	4629      	mov	r1, r5
 800dff0:	f7f2 ff04 	bl	8000dfc <__aeabi_fmul>
 800dff4:	4977      	ldr	r1, [pc, #476]	; (800e1d4 <__ieee754_asinf+0x25c>)
 800dff6:	f7f2 fdf7 	bl	8000be8 <__aeabi_fsub>
 800dffa:	4629      	mov	r1, r5
 800dffc:	f7f2 fefe 	bl	8000dfc <__aeabi_fmul>
 800e000:	4975      	ldr	r1, [pc, #468]	; (800e1d8 <__ieee754_asinf+0x260>)
 800e002:	f7f2 fdf3 	bl	8000bec <__addsf3>
 800e006:	4629      	mov	r1, r5
 800e008:	f7f2 fef8 	bl	8000dfc <__aeabi_fmul>
 800e00c:	4973      	ldr	r1, [pc, #460]	; (800e1dc <__ieee754_asinf+0x264>)
 800e00e:	f7f2 fdeb 	bl	8000be8 <__aeabi_fsub>
 800e012:	4629      	mov	r1, r5
 800e014:	f7f2 fef2 	bl	8000dfc <__aeabi_fmul>
 800e018:	4971      	ldr	r1, [pc, #452]	; (800e1e0 <__ieee754_asinf+0x268>)
 800e01a:	f7f2 fde7 	bl	8000bec <__addsf3>
 800e01e:	4629      	mov	r1, r5
 800e020:	f7f2 feec 	bl	8000dfc <__aeabi_fmul>
 800e024:	496f      	ldr	r1, [pc, #444]	; (800e1e4 <__ieee754_asinf+0x26c>)
 800e026:	4606      	mov	r6, r0
 800e028:	4628      	mov	r0, r5
 800e02a:	f7f2 fee7 	bl	8000dfc <__aeabi_fmul>
 800e02e:	496e      	ldr	r1, [pc, #440]	; (800e1e8 <__ieee754_asinf+0x270>)
 800e030:	f7f2 fdda 	bl	8000be8 <__aeabi_fsub>
 800e034:	4629      	mov	r1, r5
 800e036:	f7f2 fee1 	bl	8000dfc <__aeabi_fmul>
 800e03a:	496c      	ldr	r1, [pc, #432]	; (800e1ec <__ieee754_asinf+0x274>)
 800e03c:	f7f2 fdd6 	bl	8000bec <__addsf3>
 800e040:	4629      	mov	r1, r5
 800e042:	f7f2 fedb 	bl	8000dfc <__aeabi_fmul>
 800e046:	496a      	ldr	r1, [pc, #424]	; (800e1f0 <__ieee754_asinf+0x278>)
 800e048:	f7f2 fdce 	bl	8000be8 <__aeabi_fsub>
 800e04c:	4629      	mov	r1, r5
 800e04e:	f7f2 fed5 	bl	8000dfc <__aeabi_fmul>
 800e052:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e056:	f7f2 fdc9 	bl	8000bec <__addsf3>
 800e05a:	4601      	mov	r1, r0
 800e05c:	4630      	mov	r0, r6
 800e05e:	f7f2 ff81 	bl	8000f64 <__aeabi_fdiv>
 800e062:	4621      	mov	r1, r4
 800e064:	f7f2 feca 	bl	8000dfc <__aeabi_fmul>
 800e068:	4601      	mov	r1, r0
 800e06a:	4620      	mov	r0, r4
 800e06c:	e797      	b.n	800df9e <__ieee754_asinf+0x26>
 800e06e:	4620      	mov	r0, r4
 800e070:	f7ff fd10 	bl	800da94 <fabsf>
 800e074:	4601      	mov	r1, r0
 800e076:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e07a:	f7f2 fdb5 	bl	8000be8 <__aeabi_fsub>
 800e07e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e082:	f7f2 febb 	bl	8000dfc <__aeabi_fmul>
 800e086:	4606      	mov	r6, r0
 800e088:	4950      	ldr	r1, [pc, #320]	; (800e1cc <__ieee754_asinf+0x254>)
 800e08a:	f7f2 feb7 	bl	8000dfc <__aeabi_fmul>
 800e08e:	4950      	ldr	r1, [pc, #320]	; (800e1d0 <__ieee754_asinf+0x258>)
 800e090:	f7f2 fdac 	bl	8000bec <__addsf3>
 800e094:	4631      	mov	r1, r6
 800e096:	f7f2 feb1 	bl	8000dfc <__aeabi_fmul>
 800e09a:	494e      	ldr	r1, [pc, #312]	; (800e1d4 <__ieee754_asinf+0x25c>)
 800e09c:	f7f2 fda4 	bl	8000be8 <__aeabi_fsub>
 800e0a0:	4631      	mov	r1, r6
 800e0a2:	f7f2 feab 	bl	8000dfc <__aeabi_fmul>
 800e0a6:	494c      	ldr	r1, [pc, #304]	; (800e1d8 <__ieee754_asinf+0x260>)
 800e0a8:	f7f2 fda0 	bl	8000bec <__addsf3>
 800e0ac:	4631      	mov	r1, r6
 800e0ae:	f7f2 fea5 	bl	8000dfc <__aeabi_fmul>
 800e0b2:	494a      	ldr	r1, [pc, #296]	; (800e1dc <__ieee754_asinf+0x264>)
 800e0b4:	f7f2 fd98 	bl	8000be8 <__aeabi_fsub>
 800e0b8:	4631      	mov	r1, r6
 800e0ba:	f7f2 fe9f 	bl	8000dfc <__aeabi_fmul>
 800e0be:	4948      	ldr	r1, [pc, #288]	; (800e1e0 <__ieee754_asinf+0x268>)
 800e0c0:	f7f2 fd94 	bl	8000bec <__addsf3>
 800e0c4:	4631      	mov	r1, r6
 800e0c6:	f7f2 fe99 	bl	8000dfc <__aeabi_fmul>
 800e0ca:	4946      	ldr	r1, [pc, #280]	; (800e1e4 <__ieee754_asinf+0x26c>)
 800e0cc:	4681      	mov	r9, r0
 800e0ce:	4630      	mov	r0, r6
 800e0d0:	f7f2 fe94 	bl	8000dfc <__aeabi_fmul>
 800e0d4:	4944      	ldr	r1, [pc, #272]	; (800e1e8 <__ieee754_asinf+0x270>)
 800e0d6:	f7f2 fd87 	bl	8000be8 <__aeabi_fsub>
 800e0da:	4631      	mov	r1, r6
 800e0dc:	f7f2 fe8e 	bl	8000dfc <__aeabi_fmul>
 800e0e0:	4942      	ldr	r1, [pc, #264]	; (800e1ec <__ieee754_asinf+0x274>)
 800e0e2:	f7f2 fd83 	bl	8000bec <__addsf3>
 800e0e6:	4631      	mov	r1, r6
 800e0e8:	f7f2 fe88 	bl	8000dfc <__aeabi_fmul>
 800e0ec:	4940      	ldr	r1, [pc, #256]	; (800e1f0 <__ieee754_asinf+0x278>)
 800e0ee:	f7f2 fd7b 	bl	8000be8 <__aeabi_fsub>
 800e0f2:	4631      	mov	r1, r6
 800e0f4:	f7f2 fe82 	bl	8000dfc <__aeabi_fmul>
 800e0f8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e0fc:	f7f2 fd76 	bl	8000bec <__addsf3>
 800e100:	4682      	mov	sl, r0
 800e102:	4630      	mov	r0, r6
 800e104:	f000 f9da 	bl	800e4bc <__ieee754_sqrtf>
 800e108:	4b3a      	ldr	r3, [pc, #232]	; (800e1f4 <__ieee754_asinf+0x27c>)
 800e10a:	4607      	mov	r7, r0
 800e10c:	4598      	cmp	r8, r3
 800e10e:	dd1a      	ble.n	800e146 <__ieee754_asinf+0x1ce>
 800e110:	4651      	mov	r1, sl
 800e112:	4648      	mov	r0, r9
 800e114:	f7f2 ff26 	bl	8000f64 <__aeabi_fdiv>
 800e118:	4639      	mov	r1, r7
 800e11a:	f7f2 fe6f 	bl	8000dfc <__aeabi_fmul>
 800e11e:	4639      	mov	r1, r7
 800e120:	f7f2 fd64 	bl	8000bec <__addsf3>
 800e124:	4601      	mov	r1, r0
 800e126:	f7f2 fd61 	bl	8000bec <__addsf3>
 800e12a:	4933      	ldr	r1, [pc, #204]	; (800e1f8 <__ieee754_asinf+0x280>)
 800e12c:	f7f2 fd5e 	bl	8000bec <__addsf3>
 800e130:	4601      	mov	r1, r0
 800e132:	4823      	ldr	r0, [pc, #140]	; (800e1c0 <__ieee754_asinf+0x248>)
 800e134:	f7f2 fd58 	bl	8000be8 <__aeabi_fsub>
 800e138:	2d00      	cmp	r5, #0
 800e13a:	4604      	mov	r4, r0
 800e13c:	f73f af4a 	bgt.w	800dfd4 <__ieee754_asinf+0x5c>
 800e140:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e144:	e735      	b.n	800dfb2 <__ieee754_asinf+0x3a>
 800e146:	4601      	mov	r1, r0
 800e148:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800e14c:	f7f2 fd4e 	bl	8000bec <__addsf3>
 800e150:	4651      	mov	r1, sl
 800e152:	4604      	mov	r4, r0
 800e154:	4648      	mov	r0, r9
 800e156:	f7f2 ff05 	bl	8000f64 <__aeabi_fdiv>
 800e15a:	4601      	mov	r1, r0
 800e15c:	4620      	mov	r0, r4
 800e15e:	f7f2 fe4d 	bl	8000dfc <__aeabi_fmul>
 800e162:	f028 080f 	bic.w	r8, r8, #15
 800e166:	4681      	mov	r9, r0
 800e168:	4641      	mov	r1, r8
 800e16a:	4640      	mov	r0, r8
 800e16c:	f7f2 fe46 	bl	8000dfc <__aeabi_fmul>
 800e170:	4601      	mov	r1, r0
 800e172:	4630      	mov	r0, r6
 800e174:	f7f2 fd38 	bl	8000be8 <__aeabi_fsub>
 800e178:	4641      	mov	r1, r8
 800e17a:	4604      	mov	r4, r0
 800e17c:	4638      	mov	r0, r7
 800e17e:	f7f2 fd35 	bl	8000bec <__addsf3>
 800e182:	4601      	mov	r1, r0
 800e184:	4620      	mov	r0, r4
 800e186:	f7f2 feed 	bl	8000f64 <__aeabi_fdiv>
 800e18a:	4601      	mov	r1, r0
 800e18c:	f7f2 fd2e 	bl	8000bec <__addsf3>
 800e190:	4601      	mov	r1, r0
 800e192:	480c      	ldr	r0, [pc, #48]	; (800e1c4 <__ieee754_asinf+0x24c>)
 800e194:	f7f2 fd28 	bl	8000be8 <__aeabi_fsub>
 800e198:	4601      	mov	r1, r0
 800e19a:	4648      	mov	r0, r9
 800e19c:	f7f2 fd24 	bl	8000be8 <__aeabi_fsub>
 800e1a0:	4641      	mov	r1, r8
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	4640      	mov	r0, r8
 800e1a6:	f7f2 fd21 	bl	8000bec <__addsf3>
 800e1aa:	4601      	mov	r1, r0
 800e1ac:	4813      	ldr	r0, [pc, #76]	; (800e1fc <__ieee754_asinf+0x284>)
 800e1ae:	f7f2 fd1b 	bl	8000be8 <__aeabi_fsub>
 800e1b2:	4601      	mov	r1, r0
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	f7f2 fd17 	bl	8000be8 <__aeabi_fsub>
 800e1ba:	4601      	mov	r1, r0
 800e1bc:	480f      	ldr	r0, [pc, #60]	; (800e1fc <__ieee754_asinf+0x284>)
 800e1be:	e7b9      	b.n	800e134 <__ieee754_asinf+0x1bc>
 800e1c0:	3fc90fdb 	.word	0x3fc90fdb
 800e1c4:	b33bbd2e 	.word	0xb33bbd2e
 800e1c8:	7149f2ca 	.word	0x7149f2ca
 800e1cc:	3811ef08 	.word	0x3811ef08
 800e1d0:	3a4f7f04 	.word	0x3a4f7f04
 800e1d4:	3d241146 	.word	0x3d241146
 800e1d8:	3e4e0aa8 	.word	0x3e4e0aa8
 800e1dc:	3ea6b090 	.word	0x3ea6b090
 800e1e0:	3e2aaaab 	.word	0x3e2aaaab
 800e1e4:	3d9dc62e 	.word	0x3d9dc62e
 800e1e8:	3f303361 	.word	0x3f303361
 800e1ec:	4001572d 	.word	0x4001572d
 800e1f0:	4019d139 	.word	0x4019d139
 800e1f4:	3f799999 	.word	0x3f799999
 800e1f8:	333bbd2e 	.word	0x333bbd2e
 800e1fc:	3f490fdb 	.word	0x3f490fdb

0800e200 <__ieee754_rem_pio2f>:
 800e200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e204:	4aa0      	ldr	r2, [pc, #640]	; (800e488 <__ieee754_rem_pio2f+0x288>)
 800e206:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800e20a:	4296      	cmp	r6, r2
 800e20c:	460c      	mov	r4, r1
 800e20e:	4682      	mov	sl, r0
 800e210:	b087      	sub	sp, #28
 800e212:	dc04      	bgt.n	800e21e <__ieee754_rem_pio2f+0x1e>
 800e214:	2300      	movs	r3, #0
 800e216:	6008      	str	r0, [r1, #0]
 800e218:	604b      	str	r3, [r1, #4]
 800e21a:	2500      	movs	r5, #0
 800e21c:	e01a      	b.n	800e254 <__ieee754_rem_pio2f+0x54>
 800e21e:	4a9b      	ldr	r2, [pc, #620]	; (800e48c <__ieee754_rem_pio2f+0x28c>)
 800e220:	4296      	cmp	r6, r2
 800e222:	dc4b      	bgt.n	800e2bc <__ieee754_rem_pio2f+0xbc>
 800e224:	2800      	cmp	r0, #0
 800e226:	499a      	ldr	r1, [pc, #616]	; (800e490 <__ieee754_rem_pio2f+0x290>)
 800e228:	4f9a      	ldr	r7, [pc, #616]	; (800e494 <__ieee754_rem_pio2f+0x294>)
 800e22a:	f026 060f 	bic.w	r6, r6, #15
 800e22e:	dd23      	ble.n	800e278 <__ieee754_rem_pio2f+0x78>
 800e230:	f7f2 fcda 	bl	8000be8 <__aeabi_fsub>
 800e234:	42be      	cmp	r6, r7
 800e236:	4605      	mov	r5, r0
 800e238:	d010      	beq.n	800e25c <__ieee754_rem_pio2f+0x5c>
 800e23a:	4997      	ldr	r1, [pc, #604]	; (800e498 <__ieee754_rem_pio2f+0x298>)
 800e23c:	f7f2 fcd4 	bl	8000be8 <__aeabi_fsub>
 800e240:	4601      	mov	r1, r0
 800e242:	6020      	str	r0, [r4, #0]
 800e244:	4628      	mov	r0, r5
 800e246:	f7f2 fccf 	bl	8000be8 <__aeabi_fsub>
 800e24a:	4993      	ldr	r1, [pc, #588]	; (800e498 <__ieee754_rem_pio2f+0x298>)
 800e24c:	f7f2 fccc 	bl	8000be8 <__aeabi_fsub>
 800e250:	2501      	movs	r5, #1
 800e252:	6060      	str	r0, [r4, #4]
 800e254:	4628      	mov	r0, r5
 800e256:	b007      	add	sp, #28
 800e258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e25c:	498f      	ldr	r1, [pc, #572]	; (800e49c <__ieee754_rem_pio2f+0x29c>)
 800e25e:	f7f2 fcc3 	bl	8000be8 <__aeabi_fsub>
 800e262:	498f      	ldr	r1, [pc, #572]	; (800e4a0 <__ieee754_rem_pio2f+0x2a0>)
 800e264:	4605      	mov	r5, r0
 800e266:	f7f2 fcbf 	bl	8000be8 <__aeabi_fsub>
 800e26a:	4601      	mov	r1, r0
 800e26c:	6020      	str	r0, [r4, #0]
 800e26e:	4628      	mov	r0, r5
 800e270:	f7f2 fcba 	bl	8000be8 <__aeabi_fsub>
 800e274:	498a      	ldr	r1, [pc, #552]	; (800e4a0 <__ieee754_rem_pio2f+0x2a0>)
 800e276:	e7e9      	b.n	800e24c <__ieee754_rem_pio2f+0x4c>
 800e278:	f7f2 fcb8 	bl	8000bec <__addsf3>
 800e27c:	42be      	cmp	r6, r7
 800e27e:	4605      	mov	r5, r0
 800e280:	d00e      	beq.n	800e2a0 <__ieee754_rem_pio2f+0xa0>
 800e282:	4985      	ldr	r1, [pc, #532]	; (800e498 <__ieee754_rem_pio2f+0x298>)
 800e284:	f7f2 fcb2 	bl	8000bec <__addsf3>
 800e288:	4601      	mov	r1, r0
 800e28a:	6020      	str	r0, [r4, #0]
 800e28c:	4628      	mov	r0, r5
 800e28e:	f7f2 fcab 	bl	8000be8 <__aeabi_fsub>
 800e292:	4981      	ldr	r1, [pc, #516]	; (800e498 <__ieee754_rem_pio2f+0x298>)
 800e294:	f7f2 fcaa 	bl	8000bec <__addsf3>
 800e298:	f04f 35ff 	mov.w	r5, #4294967295
 800e29c:	6060      	str	r0, [r4, #4]
 800e29e:	e7d9      	b.n	800e254 <__ieee754_rem_pio2f+0x54>
 800e2a0:	497e      	ldr	r1, [pc, #504]	; (800e49c <__ieee754_rem_pio2f+0x29c>)
 800e2a2:	f7f2 fca3 	bl	8000bec <__addsf3>
 800e2a6:	497e      	ldr	r1, [pc, #504]	; (800e4a0 <__ieee754_rem_pio2f+0x2a0>)
 800e2a8:	4605      	mov	r5, r0
 800e2aa:	f7f2 fc9f 	bl	8000bec <__addsf3>
 800e2ae:	4601      	mov	r1, r0
 800e2b0:	6020      	str	r0, [r4, #0]
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	f7f2 fc98 	bl	8000be8 <__aeabi_fsub>
 800e2b8:	4979      	ldr	r1, [pc, #484]	; (800e4a0 <__ieee754_rem_pio2f+0x2a0>)
 800e2ba:	e7eb      	b.n	800e294 <__ieee754_rem_pio2f+0x94>
 800e2bc:	4a79      	ldr	r2, [pc, #484]	; (800e4a4 <__ieee754_rem_pio2f+0x2a4>)
 800e2be:	4296      	cmp	r6, r2
 800e2c0:	f300 8091 	bgt.w	800e3e6 <__ieee754_rem_pio2f+0x1e6>
 800e2c4:	f7ff fbe6 	bl	800da94 <fabsf>
 800e2c8:	4977      	ldr	r1, [pc, #476]	; (800e4a8 <__ieee754_rem_pio2f+0x2a8>)
 800e2ca:	4607      	mov	r7, r0
 800e2cc:	f7f2 fd96 	bl	8000dfc <__aeabi_fmul>
 800e2d0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e2d4:	f7f2 fc8a 	bl	8000bec <__addsf3>
 800e2d8:	f7f2 ff6c 	bl	80011b4 <__aeabi_f2iz>
 800e2dc:	4605      	mov	r5, r0
 800e2de:	f7f2 fd39 	bl	8000d54 <__aeabi_i2f>
 800e2e2:	496b      	ldr	r1, [pc, #428]	; (800e490 <__ieee754_rem_pio2f+0x290>)
 800e2e4:	4681      	mov	r9, r0
 800e2e6:	f7f2 fd89 	bl	8000dfc <__aeabi_fmul>
 800e2ea:	4601      	mov	r1, r0
 800e2ec:	4638      	mov	r0, r7
 800e2ee:	f7f2 fc7b 	bl	8000be8 <__aeabi_fsub>
 800e2f2:	4969      	ldr	r1, [pc, #420]	; (800e498 <__ieee754_rem_pio2f+0x298>)
 800e2f4:	4680      	mov	r8, r0
 800e2f6:	4648      	mov	r0, r9
 800e2f8:	f7f2 fd80 	bl	8000dfc <__aeabi_fmul>
 800e2fc:	2d1f      	cmp	r5, #31
 800e2fe:	4607      	mov	r7, r0
 800e300:	dc0c      	bgt.n	800e31c <__ieee754_rem_pio2f+0x11c>
 800e302:	4a6a      	ldr	r2, [pc, #424]	; (800e4ac <__ieee754_rem_pio2f+0x2ac>)
 800e304:	1e69      	subs	r1, r5, #1
 800e306:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e30a:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800e30e:	4293      	cmp	r3, r2
 800e310:	d004      	beq.n	800e31c <__ieee754_rem_pio2f+0x11c>
 800e312:	4639      	mov	r1, r7
 800e314:	4640      	mov	r0, r8
 800e316:	f7f2 fc67 	bl	8000be8 <__aeabi_fsub>
 800e31a:	e00b      	b.n	800e334 <__ieee754_rem_pio2f+0x134>
 800e31c:	4639      	mov	r1, r7
 800e31e:	4640      	mov	r0, r8
 800e320:	f7f2 fc62 	bl	8000be8 <__aeabi_fsub>
 800e324:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e328:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800e32c:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800e330:	2e08      	cmp	r6, #8
 800e332:	dc01      	bgt.n	800e338 <__ieee754_rem_pio2f+0x138>
 800e334:	6020      	str	r0, [r4, #0]
 800e336:	e026      	b.n	800e386 <__ieee754_rem_pio2f+0x186>
 800e338:	4958      	ldr	r1, [pc, #352]	; (800e49c <__ieee754_rem_pio2f+0x29c>)
 800e33a:	4648      	mov	r0, r9
 800e33c:	f7f2 fd5e 	bl	8000dfc <__aeabi_fmul>
 800e340:	4607      	mov	r7, r0
 800e342:	4601      	mov	r1, r0
 800e344:	4640      	mov	r0, r8
 800e346:	f7f2 fc4f 	bl	8000be8 <__aeabi_fsub>
 800e34a:	4601      	mov	r1, r0
 800e34c:	4606      	mov	r6, r0
 800e34e:	4640      	mov	r0, r8
 800e350:	f7f2 fc4a 	bl	8000be8 <__aeabi_fsub>
 800e354:	4639      	mov	r1, r7
 800e356:	f7f2 fc47 	bl	8000be8 <__aeabi_fsub>
 800e35a:	4607      	mov	r7, r0
 800e35c:	4950      	ldr	r1, [pc, #320]	; (800e4a0 <__ieee754_rem_pio2f+0x2a0>)
 800e35e:	4648      	mov	r0, r9
 800e360:	f7f2 fd4c 	bl	8000dfc <__aeabi_fmul>
 800e364:	4639      	mov	r1, r7
 800e366:	f7f2 fc3f 	bl	8000be8 <__aeabi_fsub>
 800e36a:	4601      	mov	r1, r0
 800e36c:	4607      	mov	r7, r0
 800e36e:	4630      	mov	r0, r6
 800e370:	f7f2 fc3a 	bl	8000be8 <__aeabi_fsub>
 800e374:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e378:	ebab 0b03 	sub.w	fp, fp, r3
 800e37c:	f1bb 0f19 	cmp.w	fp, #25
 800e380:	dc16      	bgt.n	800e3b0 <__ieee754_rem_pio2f+0x1b0>
 800e382:	46b0      	mov	r8, r6
 800e384:	6020      	str	r0, [r4, #0]
 800e386:	6826      	ldr	r6, [r4, #0]
 800e388:	4640      	mov	r0, r8
 800e38a:	4631      	mov	r1, r6
 800e38c:	f7f2 fc2c 	bl	8000be8 <__aeabi_fsub>
 800e390:	4639      	mov	r1, r7
 800e392:	f7f2 fc29 	bl	8000be8 <__aeabi_fsub>
 800e396:	f1ba 0f00 	cmp.w	sl, #0
 800e39a:	6060      	str	r0, [r4, #4]
 800e39c:	f6bf af5a 	bge.w	800e254 <__ieee754_rem_pio2f+0x54>
 800e3a0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800e3a4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e3a8:	6026      	str	r6, [r4, #0]
 800e3aa:	6060      	str	r0, [r4, #4]
 800e3ac:	426d      	negs	r5, r5
 800e3ae:	e751      	b.n	800e254 <__ieee754_rem_pio2f+0x54>
 800e3b0:	493f      	ldr	r1, [pc, #252]	; (800e4b0 <__ieee754_rem_pio2f+0x2b0>)
 800e3b2:	4648      	mov	r0, r9
 800e3b4:	f7f2 fd22 	bl	8000dfc <__aeabi_fmul>
 800e3b8:	4607      	mov	r7, r0
 800e3ba:	4601      	mov	r1, r0
 800e3bc:	4630      	mov	r0, r6
 800e3be:	f7f2 fc13 	bl	8000be8 <__aeabi_fsub>
 800e3c2:	4601      	mov	r1, r0
 800e3c4:	4680      	mov	r8, r0
 800e3c6:	4630      	mov	r0, r6
 800e3c8:	f7f2 fc0e 	bl	8000be8 <__aeabi_fsub>
 800e3cc:	4639      	mov	r1, r7
 800e3ce:	f7f2 fc0b 	bl	8000be8 <__aeabi_fsub>
 800e3d2:	4606      	mov	r6, r0
 800e3d4:	4937      	ldr	r1, [pc, #220]	; (800e4b4 <__ieee754_rem_pio2f+0x2b4>)
 800e3d6:	4648      	mov	r0, r9
 800e3d8:	f7f2 fd10 	bl	8000dfc <__aeabi_fmul>
 800e3dc:	4631      	mov	r1, r6
 800e3de:	f7f2 fc03 	bl	8000be8 <__aeabi_fsub>
 800e3e2:	4607      	mov	r7, r0
 800e3e4:	e795      	b.n	800e312 <__ieee754_rem_pio2f+0x112>
 800e3e6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800e3ea:	db05      	blt.n	800e3f8 <__ieee754_rem_pio2f+0x1f8>
 800e3ec:	4601      	mov	r1, r0
 800e3ee:	f7f2 fbfb 	bl	8000be8 <__aeabi_fsub>
 800e3f2:	6060      	str	r0, [r4, #4]
 800e3f4:	6020      	str	r0, [r4, #0]
 800e3f6:	e710      	b.n	800e21a <__ieee754_rem_pio2f+0x1a>
 800e3f8:	15f7      	asrs	r7, r6, #23
 800e3fa:	3f86      	subs	r7, #134	; 0x86
 800e3fc:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800e400:	4630      	mov	r0, r6
 800e402:	f7f2 fed7 	bl	80011b4 <__aeabi_f2iz>
 800e406:	f7f2 fca5 	bl	8000d54 <__aeabi_i2f>
 800e40a:	4601      	mov	r1, r0
 800e40c:	9003      	str	r0, [sp, #12]
 800e40e:	4630      	mov	r0, r6
 800e410:	f7f2 fbea 	bl	8000be8 <__aeabi_fsub>
 800e414:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e418:	f7f2 fcf0 	bl	8000dfc <__aeabi_fmul>
 800e41c:	4606      	mov	r6, r0
 800e41e:	f7f2 fec9 	bl	80011b4 <__aeabi_f2iz>
 800e422:	f7f2 fc97 	bl	8000d54 <__aeabi_i2f>
 800e426:	4601      	mov	r1, r0
 800e428:	9004      	str	r0, [sp, #16]
 800e42a:	4605      	mov	r5, r0
 800e42c:	4630      	mov	r0, r6
 800e42e:	f7f2 fbdb 	bl	8000be8 <__aeabi_fsub>
 800e432:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e436:	f7f2 fce1 	bl	8000dfc <__aeabi_fmul>
 800e43a:	2100      	movs	r1, #0
 800e43c:	9005      	str	r0, [sp, #20]
 800e43e:	f7f2 fe71 	bl	8001124 <__aeabi_fcmpeq>
 800e442:	b1f0      	cbz	r0, 800e482 <__ieee754_rem_pio2f+0x282>
 800e444:	2100      	movs	r1, #0
 800e446:	4628      	mov	r0, r5
 800e448:	f7f2 fe6c 	bl	8001124 <__aeabi_fcmpeq>
 800e44c:	2800      	cmp	r0, #0
 800e44e:	bf14      	ite	ne
 800e450:	2301      	movne	r3, #1
 800e452:	2302      	moveq	r3, #2
 800e454:	4a18      	ldr	r2, [pc, #96]	; (800e4b8 <__ieee754_rem_pio2f+0x2b8>)
 800e456:	4621      	mov	r1, r4
 800e458:	9201      	str	r2, [sp, #4]
 800e45a:	2202      	movs	r2, #2
 800e45c:	a803      	add	r0, sp, #12
 800e45e:	9200      	str	r2, [sp, #0]
 800e460:	463a      	mov	r2, r7
 800e462:	f000 fdbb 	bl	800efdc <__kernel_rem_pio2f>
 800e466:	f1ba 0f00 	cmp.w	sl, #0
 800e46a:	4605      	mov	r5, r0
 800e46c:	f6bf aef2 	bge.w	800e254 <__ieee754_rem_pio2f+0x54>
 800e470:	6823      	ldr	r3, [r4, #0]
 800e472:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e476:	6023      	str	r3, [r4, #0]
 800e478:	6863      	ldr	r3, [r4, #4]
 800e47a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e47e:	6063      	str	r3, [r4, #4]
 800e480:	e794      	b.n	800e3ac <__ieee754_rem_pio2f+0x1ac>
 800e482:	2303      	movs	r3, #3
 800e484:	e7e6      	b.n	800e454 <__ieee754_rem_pio2f+0x254>
 800e486:	bf00      	nop
 800e488:	3f490fd8 	.word	0x3f490fd8
 800e48c:	4016cbe3 	.word	0x4016cbe3
 800e490:	3fc90f80 	.word	0x3fc90f80
 800e494:	3fc90fd0 	.word	0x3fc90fd0
 800e498:	37354443 	.word	0x37354443
 800e49c:	37354400 	.word	0x37354400
 800e4a0:	2e85a308 	.word	0x2e85a308
 800e4a4:	43490f80 	.word	0x43490f80
 800e4a8:	3f22f984 	.word	0x3f22f984
 800e4ac:	0801322c 	.word	0x0801322c
 800e4b0:	2e85a300 	.word	0x2e85a300
 800e4b4:	248d3132 	.word	0x248d3132
 800e4b8:	080132ac 	.word	0x080132ac

0800e4bc <__ieee754_sqrtf>:
 800e4bc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800e4c0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e4c4:	b570      	push	{r4, r5, r6, lr}
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	4604      	mov	r4, r0
 800e4ca:	d309      	bcc.n	800e4e0 <__ieee754_sqrtf+0x24>
 800e4cc:	4601      	mov	r1, r0
 800e4ce:	f7f2 fc95 	bl	8000dfc <__aeabi_fmul>
 800e4d2:	4601      	mov	r1, r0
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	f7f2 fb89 	bl	8000bec <__addsf3>
 800e4da:	4604      	mov	r4, r0
 800e4dc:	4620      	mov	r0, r4
 800e4de:	bd70      	pop	{r4, r5, r6, pc}
 800e4e0:	2a00      	cmp	r2, #0
 800e4e2:	d0fb      	beq.n	800e4dc <__ieee754_sqrtf+0x20>
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	da06      	bge.n	800e4f6 <__ieee754_sqrtf+0x3a>
 800e4e8:	4601      	mov	r1, r0
 800e4ea:	f7f2 fb7d 	bl	8000be8 <__aeabi_fsub>
 800e4ee:	4601      	mov	r1, r0
 800e4f0:	f7f2 fd38 	bl	8000f64 <__aeabi_fdiv>
 800e4f4:	e7f1      	b.n	800e4da <__ieee754_sqrtf+0x1e>
 800e4f6:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800e4fa:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800e4fe:	d029      	beq.n	800e554 <__ieee754_sqrtf+0x98>
 800e500:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800e504:	07cb      	lsls	r3, r1, #31
 800e506:	f04f 0300 	mov.w	r3, #0
 800e50a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800e50e:	f04f 0419 	mov.w	r4, #25
 800e512:	461e      	mov	r6, r3
 800e514:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800e518:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e51c:	bf58      	it	pl
 800e51e:	0052      	lslpl	r2, r2, #1
 800e520:	1040      	asrs	r0, r0, #1
 800e522:	0052      	lsls	r2, r2, #1
 800e524:	1875      	adds	r5, r6, r1
 800e526:	4295      	cmp	r5, r2
 800e528:	bfde      	ittt	le
 800e52a:	186e      	addle	r6, r5, r1
 800e52c:	1b52      	suble	r2, r2, r5
 800e52e:	185b      	addle	r3, r3, r1
 800e530:	3c01      	subs	r4, #1
 800e532:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e536:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e53a:	d1f3      	bne.n	800e524 <__ieee754_sqrtf+0x68>
 800e53c:	b112      	cbz	r2, 800e544 <__ieee754_sqrtf+0x88>
 800e53e:	3301      	adds	r3, #1
 800e540:	f023 0301 	bic.w	r3, r3, #1
 800e544:	105c      	asrs	r4, r3, #1
 800e546:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800e54a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800e54e:	e7c5      	b.n	800e4dc <__ieee754_sqrtf+0x20>
 800e550:	005b      	lsls	r3, r3, #1
 800e552:	3201      	adds	r2, #1
 800e554:	0218      	lsls	r0, r3, #8
 800e556:	d5fb      	bpl.n	800e550 <__ieee754_sqrtf+0x94>
 800e558:	3a01      	subs	r2, #1
 800e55a:	1a89      	subs	r1, r1, r2
 800e55c:	e7d0      	b.n	800e500 <__ieee754_sqrtf+0x44>
	...

0800e560 <__kernel_cos>:
 800e560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e564:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e568:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800e56c:	4680      	mov	r8, r0
 800e56e:	460f      	mov	r7, r1
 800e570:	e9cd 2300 	strd	r2, r3, [sp]
 800e574:	da04      	bge.n	800e580 <__kernel_cos+0x20>
 800e576:	f7f2 fa9b 	bl	8000ab0 <__aeabi_d2iz>
 800e57a:	2800      	cmp	r0, #0
 800e57c:	f000 8086 	beq.w	800e68c <__kernel_cos+0x12c>
 800e580:	4642      	mov	r2, r8
 800e582:	463b      	mov	r3, r7
 800e584:	4640      	mov	r0, r8
 800e586:	4639      	mov	r1, r7
 800e588:	f7f1 ffe2 	bl	8000550 <__aeabi_dmul>
 800e58c:	2200      	movs	r2, #0
 800e58e:	4b4e      	ldr	r3, [pc, #312]	; (800e6c8 <__kernel_cos+0x168>)
 800e590:	4604      	mov	r4, r0
 800e592:	460d      	mov	r5, r1
 800e594:	f7f1 ffdc 	bl	8000550 <__aeabi_dmul>
 800e598:	a33f      	add	r3, pc, #252	; (adr r3, 800e698 <__kernel_cos+0x138>)
 800e59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59e:	4682      	mov	sl, r0
 800e5a0:	468b      	mov	fp, r1
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	4629      	mov	r1, r5
 800e5a6:	f7f1 ffd3 	bl	8000550 <__aeabi_dmul>
 800e5aa:	a33d      	add	r3, pc, #244	; (adr r3, 800e6a0 <__kernel_cos+0x140>)
 800e5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b0:	f7f1 fe18 	bl	80001e4 <__adddf3>
 800e5b4:	4622      	mov	r2, r4
 800e5b6:	462b      	mov	r3, r5
 800e5b8:	f7f1 ffca 	bl	8000550 <__aeabi_dmul>
 800e5bc:	a33a      	add	r3, pc, #232	; (adr r3, 800e6a8 <__kernel_cos+0x148>)
 800e5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c2:	f7f1 fe0d 	bl	80001e0 <__aeabi_dsub>
 800e5c6:	4622      	mov	r2, r4
 800e5c8:	462b      	mov	r3, r5
 800e5ca:	f7f1 ffc1 	bl	8000550 <__aeabi_dmul>
 800e5ce:	a338      	add	r3, pc, #224	; (adr r3, 800e6b0 <__kernel_cos+0x150>)
 800e5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d4:	f7f1 fe06 	bl	80001e4 <__adddf3>
 800e5d8:	4622      	mov	r2, r4
 800e5da:	462b      	mov	r3, r5
 800e5dc:	f7f1 ffb8 	bl	8000550 <__aeabi_dmul>
 800e5e0:	a335      	add	r3, pc, #212	; (adr r3, 800e6b8 <__kernel_cos+0x158>)
 800e5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e6:	f7f1 fdfb 	bl	80001e0 <__aeabi_dsub>
 800e5ea:	4622      	mov	r2, r4
 800e5ec:	462b      	mov	r3, r5
 800e5ee:	f7f1 ffaf 	bl	8000550 <__aeabi_dmul>
 800e5f2:	a333      	add	r3, pc, #204	; (adr r3, 800e6c0 <__kernel_cos+0x160>)
 800e5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f8:	f7f1 fdf4 	bl	80001e4 <__adddf3>
 800e5fc:	4622      	mov	r2, r4
 800e5fe:	462b      	mov	r3, r5
 800e600:	f7f1 ffa6 	bl	8000550 <__aeabi_dmul>
 800e604:	4622      	mov	r2, r4
 800e606:	462b      	mov	r3, r5
 800e608:	f7f1 ffa2 	bl	8000550 <__aeabi_dmul>
 800e60c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e610:	4604      	mov	r4, r0
 800e612:	460d      	mov	r5, r1
 800e614:	4640      	mov	r0, r8
 800e616:	4639      	mov	r1, r7
 800e618:	f7f1 ff9a 	bl	8000550 <__aeabi_dmul>
 800e61c:	460b      	mov	r3, r1
 800e61e:	4602      	mov	r2, r0
 800e620:	4629      	mov	r1, r5
 800e622:	4620      	mov	r0, r4
 800e624:	f7f1 fddc 	bl	80001e0 <__aeabi_dsub>
 800e628:	4b28      	ldr	r3, [pc, #160]	; (800e6cc <__kernel_cos+0x16c>)
 800e62a:	4680      	mov	r8, r0
 800e62c:	429e      	cmp	r6, r3
 800e62e:	4689      	mov	r9, r1
 800e630:	dc0e      	bgt.n	800e650 <__kernel_cos+0xf0>
 800e632:	4602      	mov	r2, r0
 800e634:	460b      	mov	r3, r1
 800e636:	4650      	mov	r0, sl
 800e638:	4659      	mov	r1, fp
 800e63a:	f7f1 fdd1 	bl	80001e0 <__aeabi_dsub>
 800e63e:	4602      	mov	r2, r0
 800e640:	2000      	movs	r0, #0
 800e642:	460b      	mov	r3, r1
 800e644:	4922      	ldr	r1, [pc, #136]	; (800e6d0 <__kernel_cos+0x170>)
 800e646:	f7f1 fdcb 	bl	80001e0 <__aeabi_dsub>
 800e64a:	b003      	add	sp, #12
 800e64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e650:	2400      	movs	r4, #0
 800e652:	4b20      	ldr	r3, [pc, #128]	; (800e6d4 <__kernel_cos+0x174>)
 800e654:	4622      	mov	r2, r4
 800e656:	429e      	cmp	r6, r3
 800e658:	bfcc      	ite	gt
 800e65a:	4d1f      	ldrgt	r5, [pc, #124]	; (800e6d8 <__kernel_cos+0x178>)
 800e65c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800e660:	462b      	mov	r3, r5
 800e662:	2000      	movs	r0, #0
 800e664:	491a      	ldr	r1, [pc, #104]	; (800e6d0 <__kernel_cos+0x170>)
 800e666:	f7f1 fdbb 	bl	80001e0 <__aeabi_dsub>
 800e66a:	4622      	mov	r2, r4
 800e66c:	4606      	mov	r6, r0
 800e66e:	460f      	mov	r7, r1
 800e670:	462b      	mov	r3, r5
 800e672:	4650      	mov	r0, sl
 800e674:	4659      	mov	r1, fp
 800e676:	f7f1 fdb3 	bl	80001e0 <__aeabi_dsub>
 800e67a:	4642      	mov	r2, r8
 800e67c:	464b      	mov	r3, r9
 800e67e:	f7f1 fdaf 	bl	80001e0 <__aeabi_dsub>
 800e682:	4602      	mov	r2, r0
 800e684:	460b      	mov	r3, r1
 800e686:	4630      	mov	r0, r6
 800e688:	4639      	mov	r1, r7
 800e68a:	e7dc      	b.n	800e646 <__kernel_cos+0xe6>
 800e68c:	2000      	movs	r0, #0
 800e68e:	4910      	ldr	r1, [pc, #64]	; (800e6d0 <__kernel_cos+0x170>)
 800e690:	e7db      	b.n	800e64a <__kernel_cos+0xea>
 800e692:	bf00      	nop
 800e694:	f3af 8000 	nop.w
 800e698:	be8838d4 	.word	0xbe8838d4
 800e69c:	bda8fae9 	.word	0xbda8fae9
 800e6a0:	bdb4b1c4 	.word	0xbdb4b1c4
 800e6a4:	3e21ee9e 	.word	0x3e21ee9e
 800e6a8:	809c52ad 	.word	0x809c52ad
 800e6ac:	3e927e4f 	.word	0x3e927e4f
 800e6b0:	19cb1590 	.word	0x19cb1590
 800e6b4:	3efa01a0 	.word	0x3efa01a0
 800e6b8:	16c15177 	.word	0x16c15177
 800e6bc:	3f56c16c 	.word	0x3f56c16c
 800e6c0:	5555554c 	.word	0x5555554c
 800e6c4:	3fa55555 	.word	0x3fa55555
 800e6c8:	3fe00000 	.word	0x3fe00000
 800e6cc:	3fd33332 	.word	0x3fd33332
 800e6d0:	3ff00000 	.word	0x3ff00000
 800e6d4:	3fe90000 	.word	0x3fe90000
 800e6d8:	3fd20000 	.word	0x3fd20000

0800e6dc <__kernel_rem_pio2>:
 800e6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e6e4:	9308      	str	r3, [sp, #32]
 800e6e6:	9101      	str	r1, [sp, #4]
 800e6e8:	4bc0      	ldr	r3, [pc, #768]	; (800e9ec <__kernel_rem_pio2+0x310>)
 800e6ea:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e6ec:	f112 0f14 	cmn.w	r2, #20
 800e6f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e6f4:	bfa8      	it	ge
 800e6f6:	1ed4      	subge	r4, r2, #3
 800e6f8:	9304      	str	r3, [sp, #16]
 800e6fa:	9b08      	ldr	r3, [sp, #32]
 800e6fc:	bfb8      	it	lt
 800e6fe:	2400      	movlt	r4, #0
 800e700:	f103 33ff 	add.w	r3, r3, #4294967295
 800e704:	9306      	str	r3, [sp, #24]
 800e706:	bfa4      	itt	ge
 800e708:	2318      	movge	r3, #24
 800e70a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e70e:	f06f 0317 	mvn.w	r3, #23
 800e712:	fb04 3303 	mla	r3, r4, r3, r3
 800e716:	eb03 0a02 	add.w	sl, r3, r2
 800e71a:	9a06      	ldr	r2, [sp, #24]
 800e71c:	9b04      	ldr	r3, [sp, #16]
 800e71e:	1aa7      	subs	r7, r4, r2
 800e720:	eb03 0802 	add.w	r8, r3, r2
 800e724:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e726:	2500      	movs	r5, #0
 800e728:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e72c:	2200      	movs	r2, #0
 800e72e:	2300      	movs	r3, #0
 800e730:	9009      	str	r0, [sp, #36]	; 0x24
 800e732:	ae20      	add	r6, sp, #128	; 0x80
 800e734:	4545      	cmp	r5, r8
 800e736:	dd19      	ble.n	800e76c <__kernel_rem_pio2+0x90>
 800e738:	9b08      	ldr	r3, [sp, #32]
 800e73a:	aa20      	add	r2, sp, #128	; 0x80
 800e73c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e740:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e744:	f1c3 0301 	rsb	r3, r3, #1
 800e748:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e74c:	9307      	str	r3, [sp, #28]
 800e74e:	9b07      	ldr	r3, [sp, #28]
 800e750:	9a04      	ldr	r2, [sp, #16]
 800e752:	4443      	add	r3, r8
 800e754:	429a      	cmp	r2, r3
 800e756:	db35      	blt.n	800e7c4 <__kernel_rem_pio2+0xe8>
 800e758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e75a:	2200      	movs	r2, #0
 800e75c:	f1a3 0908 	sub.w	r9, r3, #8
 800e760:	2300      	movs	r3, #0
 800e762:	462f      	mov	r7, r5
 800e764:	2600      	movs	r6, #0
 800e766:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e76a:	e01f      	b.n	800e7ac <__kernel_rem_pio2+0xd0>
 800e76c:	42ef      	cmn	r7, r5
 800e76e:	d40b      	bmi.n	800e788 <__kernel_rem_pio2+0xac>
 800e770:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e774:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e778:	f7f1 fe80 	bl	800047c <__aeabi_i2d>
 800e77c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e780:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e784:	3501      	adds	r5, #1
 800e786:	e7d5      	b.n	800e734 <__kernel_rem_pio2+0x58>
 800e788:	4610      	mov	r0, r2
 800e78a:	4619      	mov	r1, r3
 800e78c:	e7f8      	b.n	800e780 <__kernel_rem_pio2+0xa4>
 800e78e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e792:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800e796:	f7f1 fedb 	bl	8000550 <__aeabi_dmul>
 800e79a:	4602      	mov	r2, r0
 800e79c:	460b      	mov	r3, r1
 800e79e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7a2:	f7f1 fd1f 	bl	80001e4 <__adddf3>
 800e7a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7aa:	3601      	adds	r6, #1
 800e7ac:	9b06      	ldr	r3, [sp, #24]
 800e7ae:	3f08      	subs	r7, #8
 800e7b0:	429e      	cmp	r6, r3
 800e7b2:	ddec      	ble.n	800e78e <__kernel_rem_pio2+0xb2>
 800e7b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7b8:	3508      	adds	r5, #8
 800e7ba:	e8eb 2302 	strd	r2, r3, [fp], #8
 800e7be:	f108 0801 	add.w	r8, r8, #1
 800e7c2:	e7c4      	b.n	800e74e <__kernel_rem_pio2+0x72>
 800e7c4:	9b04      	ldr	r3, [sp, #16]
 800e7c6:	aa0c      	add	r2, sp, #48	; 0x30
 800e7c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e7cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7ce:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e7d0:	9f04      	ldr	r7, [sp, #16]
 800e7d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e7d6:	930a      	str	r3, [sp, #40]	; 0x28
 800e7d8:	463e      	mov	r6, r7
 800e7da:	ab98      	add	r3, sp, #608	; 0x260
 800e7dc:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800e7e0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e7e4:	f8cd b008 	str.w	fp, [sp, #8]
 800e7e8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800e7ec:	2e00      	cmp	r6, #0
 800e7ee:	dc71      	bgt.n	800e8d4 <__kernel_rem_pio2+0x1f8>
 800e7f0:	4652      	mov	r2, sl
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	4629      	mov	r1, r5
 800e7f6:	f000 ffa3 	bl	800f740 <scalbn>
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e800:	4604      	mov	r4, r0
 800e802:	460d      	mov	r5, r1
 800e804:	f7f1 fea4 	bl	8000550 <__aeabi_dmul>
 800e808:	f000 ff1a 	bl	800f640 <floor>
 800e80c:	2200      	movs	r2, #0
 800e80e:	4b78      	ldr	r3, [pc, #480]	; (800e9f0 <__kernel_rem_pio2+0x314>)
 800e810:	f7f1 fe9e 	bl	8000550 <__aeabi_dmul>
 800e814:	4602      	mov	r2, r0
 800e816:	460b      	mov	r3, r1
 800e818:	4620      	mov	r0, r4
 800e81a:	4629      	mov	r1, r5
 800e81c:	f7f1 fce0 	bl	80001e0 <__aeabi_dsub>
 800e820:	460d      	mov	r5, r1
 800e822:	4604      	mov	r4, r0
 800e824:	f7f2 f944 	bl	8000ab0 <__aeabi_d2iz>
 800e828:	9007      	str	r0, [sp, #28]
 800e82a:	f7f1 fe27 	bl	800047c <__aeabi_i2d>
 800e82e:	4602      	mov	r2, r0
 800e830:	460b      	mov	r3, r1
 800e832:	4620      	mov	r0, r4
 800e834:	4629      	mov	r1, r5
 800e836:	f7f1 fcd3 	bl	80001e0 <__aeabi_dsub>
 800e83a:	f1ba 0f00 	cmp.w	sl, #0
 800e83e:	4680      	mov	r8, r0
 800e840:	4689      	mov	r9, r1
 800e842:	dd70      	ble.n	800e926 <__kernel_rem_pio2+0x24a>
 800e844:	1e7a      	subs	r2, r7, #1
 800e846:	ab0c      	add	r3, sp, #48	; 0x30
 800e848:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e84c:	9c07      	ldr	r4, [sp, #28]
 800e84e:	f1ca 0118 	rsb	r1, sl, #24
 800e852:	fa40 f301 	asr.w	r3, r0, r1
 800e856:	441c      	add	r4, r3
 800e858:	408b      	lsls	r3, r1
 800e85a:	1ac0      	subs	r0, r0, r3
 800e85c:	ab0c      	add	r3, sp, #48	; 0x30
 800e85e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e862:	f1ca 0317 	rsb	r3, sl, #23
 800e866:	9407      	str	r4, [sp, #28]
 800e868:	fa40 f303 	asr.w	r3, r0, r3
 800e86c:	9302      	str	r3, [sp, #8]
 800e86e:	9b02      	ldr	r3, [sp, #8]
 800e870:	2b00      	cmp	r3, #0
 800e872:	dd66      	ble.n	800e942 <__kernel_rem_pio2+0x266>
 800e874:	2200      	movs	r2, #0
 800e876:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e87a:	4614      	mov	r4, r2
 800e87c:	9b07      	ldr	r3, [sp, #28]
 800e87e:	3301      	adds	r3, #1
 800e880:	9307      	str	r3, [sp, #28]
 800e882:	4297      	cmp	r7, r2
 800e884:	f300 809f 	bgt.w	800e9c6 <__kernel_rem_pio2+0x2ea>
 800e888:	f1ba 0f00 	cmp.w	sl, #0
 800e88c:	dd07      	ble.n	800e89e <__kernel_rem_pio2+0x1c2>
 800e88e:	f1ba 0f01 	cmp.w	sl, #1
 800e892:	f000 80b9 	beq.w	800ea08 <__kernel_rem_pio2+0x32c>
 800e896:	f1ba 0f02 	cmp.w	sl, #2
 800e89a:	f000 80bf 	beq.w	800ea1c <__kernel_rem_pio2+0x340>
 800e89e:	9b02      	ldr	r3, [sp, #8]
 800e8a0:	2b02      	cmp	r3, #2
 800e8a2:	d14e      	bne.n	800e942 <__kernel_rem_pio2+0x266>
 800e8a4:	4642      	mov	r2, r8
 800e8a6:	464b      	mov	r3, r9
 800e8a8:	2000      	movs	r0, #0
 800e8aa:	4952      	ldr	r1, [pc, #328]	; (800e9f4 <__kernel_rem_pio2+0x318>)
 800e8ac:	f7f1 fc98 	bl	80001e0 <__aeabi_dsub>
 800e8b0:	4680      	mov	r8, r0
 800e8b2:	4689      	mov	r9, r1
 800e8b4:	2c00      	cmp	r4, #0
 800e8b6:	d044      	beq.n	800e942 <__kernel_rem_pio2+0x266>
 800e8b8:	4652      	mov	r2, sl
 800e8ba:	2000      	movs	r0, #0
 800e8bc:	494d      	ldr	r1, [pc, #308]	; (800e9f4 <__kernel_rem_pio2+0x318>)
 800e8be:	f000 ff3f 	bl	800f740 <scalbn>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	4640      	mov	r0, r8
 800e8c8:	4649      	mov	r1, r9
 800e8ca:	f7f1 fc89 	bl	80001e0 <__aeabi_dsub>
 800e8ce:	4680      	mov	r8, r0
 800e8d0:	4689      	mov	r9, r1
 800e8d2:	e036      	b.n	800e942 <__kernel_rem_pio2+0x266>
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	4b48      	ldr	r3, [pc, #288]	; (800e9f8 <__kernel_rem_pio2+0x31c>)
 800e8d8:	4620      	mov	r0, r4
 800e8da:	4629      	mov	r1, r5
 800e8dc:	f7f1 fe38 	bl	8000550 <__aeabi_dmul>
 800e8e0:	f7f2 f8e6 	bl	8000ab0 <__aeabi_d2iz>
 800e8e4:	f7f1 fdca 	bl	800047c <__aeabi_i2d>
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	4b44      	ldr	r3, [pc, #272]	; (800e9fc <__kernel_rem_pio2+0x320>)
 800e8ec:	4680      	mov	r8, r0
 800e8ee:	4689      	mov	r9, r1
 800e8f0:	f7f1 fe2e 	bl	8000550 <__aeabi_dmul>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	4629      	mov	r1, r5
 800e8fc:	f7f1 fc70 	bl	80001e0 <__aeabi_dsub>
 800e900:	f7f2 f8d6 	bl	8000ab0 <__aeabi_d2iz>
 800e904:	9b02      	ldr	r3, [sp, #8]
 800e906:	3e01      	subs	r6, #1
 800e908:	f843 0b04 	str.w	r0, [r3], #4
 800e90c:	9302      	str	r3, [sp, #8]
 800e90e:	ab70      	add	r3, sp, #448	; 0x1c0
 800e910:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e914:	4640      	mov	r0, r8
 800e916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91a:	4649      	mov	r1, r9
 800e91c:	f7f1 fc62 	bl	80001e4 <__adddf3>
 800e920:	4604      	mov	r4, r0
 800e922:	460d      	mov	r5, r1
 800e924:	e762      	b.n	800e7ec <__kernel_rem_pio2+0x110>
 800e926:	d105      	bne.n	800e934 <__kernel_rem_pio2+0x258>
 800e928:	1e7b      	subs	r3, r7, #1
 800e92a:	aa0c      	add	r2, sp, #48	; 0x30
 800e92c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e930:	15c3      	asrs	r3, r0, #23
 800e932:	e79b      	b.n	800e86c <__kernel_rem_pio2+0x190>
 800e934:	2200      	movs	r2, #0
 800e936:	4b32      	ldr	r3, [pc, #200]	; (800ea00 <__kernel_rem_pio2+0x324>)
 800e938:	f7f2 f890 	bl	8000a5c <__aeabi_dcmpge>
 800e93c:	2800      	cmp	r0, #0
 800e93e:	d13f      	bne.n	800e9c0 <__kernel_rem_pio2+0x2e4>
 800e940:	9002      	str	r0, [sp, #8]
 800e942:	2200      	movs	r2, #0
 800e944:	2300      	movs	r3, #0
 800e946:	4640      	mov	r0, r8
 800e948:	4649      	mov	r1, r9
 800e94a:	f7f2 f869 	bl	8000a20 <__aeabi_dcmpeq>
 800e94e:	2800      	cmp	r0, #0
 800e950:	f000 80b5 	beq.w	800eabe <__kernel_rem_pio2+0x3e2>
 800e954:	1e7c      	subs	r4, r7, #1
 800e956:	4623      	mov	r3, r4
 800e958:	2200      	movs	r2, #0
 800e95a:	9904      	ldr	r1, [sp, #16]
 800e95c:	428b      	cmp	r3, r1
 800e95e:	da64      	bge.n	800ea2a <__kernel_rem_pio2+0x34e>
 800e960:	2a00      	cmp	r2, #0
 800e962:	d078      	beq.n	800ea56 <__kernel_rem_pio2+0x37a>
 800e964:	ab0c      	add	r3, sp, #48	; 0x30
 800e966:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e96a:	f1aa 0a18 	sub.w	sl, sl, #24
 800e96e:	2b00      	cmp	r3, #0
 800e970:	f000 80a3 	beq.w	800eaba <__kernel_rem_pio2+0x3de>
 800e974:	4652      	mov	r2, sl
 800e976:	2000      	movs	r0, #0
 800e978:	491e      	ldr	r1, [pc, #120]	; (800e9f4 <__kernel_rem_pio2+0x318>)
 800e97a:	f000 fee1 	bl	800f740 <scalbn>
 800e97e:	46a2      	mov	sl, r4
 800e980:	4606      	mov	r6, r0
 800e982:	460f      	mov	r7, r1
 800e984:	f04f 0800 	mov.w	r8, #0
 800e988:	00e3      	lsls	r3, r4, #3
 800e98a:	9306      	str	r3, [sp, #24]
 800e98c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800e9f8 <__kernel_rem_pio2+0x31c>
 800e990:	ab70      	add	r3, sp, #448	; 0x1c0
 800e992:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800e996:	f1ba 0f00 	cmp.w	sl, #0
 800e99a:	f280 80c6 	bge.w	800eb2a <__kernel_rem_pio2+0x44e>
 800e99e:	4627      	mov	r7, r4
 800e9a0:	f04f 0800 	mov.w	r8, #0
 800e9a4:	2f00      	cmp	r7, #0
 800e9a6:	f2c0 80f3 	blt.w	800eb90 <__kernel_rem_pio2+0x4b4>
 800e9aa:	4b16      	ldr	r3, [pc, #88]	; (800ea04 <__kernel_rem_pio2+0x328>)
 800e9ac:	f04f 0a00 	mov.w	sl, #0
 800e9b0:	461d      	mov	r5, r3
 800e9b2:	ab70      	add	r3, sp, #448	; 0x1c0
 800e9b4:	f04f 0b00 	mov.w	fp, #0
 800e9b8:	2600      	movs	r6, #0
 800e9ba:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800e9be:	e0d9      	b.n	800eb74 <__kernel_rem_pio2+0x498>
 800e9c0:	2302      	movs	r3, #2
 800e9c2:	9302      	str	r3, [sp, #8]
 800e9c4:	e756      	b.n	800e874 <__kernel_rem_pio2+0x198>
 800e9c6:	f8db 3000 	ldr.w	r3, [fp]
 800e9ca:	b954      	cbnz	r4, 800e9e2 <__kernel_rem_pio2+0x306>
 800e9cc:	b123      	cbz	r3, 800e9d8 <__kernel_rem_pio2+0x2fc>
 800e9ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e9d2:	f8cb 3000 	str.w	r3, [fp]
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	461c      	mov	r4, r3
 800e9da:	3201      	adds	r2, #1
 800e9dc:	f10b 0b04 	add.w	fp, fp, #4
 800e9e0:	e74f      	b.n	800e882 <__kernel_rem_pio2+0x1a6>
 800e9e2:	1acb      	subs	r3, r1, r3
 800e9e4:	f8cb 3000 	str.w	r3, [fp]
 800e9e8:	4623      	mov	r3, r4
 800e9ea:	e7f5      	b.n	800e9d8 <__kernel_rem_pio2+0x2fc>
 800e9ec:	08013608 	.word	0x08013608
 800e9f0:	40200000 	.word	0x40200000
 800e9f4:	3ff00000 	.word	0x3ff00000
 800e9f8:	3e700000 	.word	0x3e700000
 800e9fc:	41700000 	.word	0x41700000
 800ea00:	3fe00000 	.word	0x3fe00000
 800ea04:	080135c8 	.word	0x080135c8
 800ea08:	1e7a      	subs	r2, r7, #1
 800ea0a:	ab0c      	add	r3, sp, #48	; 0x30
 800ea0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea10:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ea14:	a90c      	add	r1, sp, #48	; 0x30
 800ea16:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ea1a:	e740      	b.n	800e89e <__kernel_rem_pio2+0x1c2>
 800ea1c:	1e7a      	subs	r2, r7, #1
 800ea1e:	ab0c      	add	r3, sp, #48	; 0x30
 800ea20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea24:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ea28:	e7f4      	b.n	800ea14 <__kernel_rem_pio2+0x338>
 800ea2a:	a90c      	add	r1, sp, #48	; 0x30
 800ea2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ea30:	3b01      	subs	r3, #1
 800ea32:	430a      	orrs	r2, r1
 800ea34:	e791      	b.n	800e95a <__kernel_rem_pio2+0x27e>
 800ea36:	3401      	adds	r4, #1
 800ea38:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ea3c:	2a00      	cmp	r2, #0
 800ea3e:	d0fa      	beq.n	800ea36 <__kernel_rem_pio2+0x35a>
 800ea40:	9b08      	ldr	r3, [sp, #32]
 800ea42:	1c7e      	adds	r6, r7, #1
 800ea44:	18fd      	adds	r5, r7, r3
 800ea46:	ab20      	add	r3, sp, #128	; 0x80
 800ea48:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ea4c:	443c      	add	r4, r7
 800ea4e:	42b4      	cmp	r4, r6
 800ea50:	da04      	bge.n	800ea5c <__kernel_rem_pio2+0x380>
 800ea52:	4627      	mov	r7, r4
 800ea54:	e6c0      	b.n	800e7d8 <__kernel_rem_pio2+0xfc>
 800ea56:	2401      	movs	r4, #1
 800ea58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea5a:	e7ed      	b.n	800ea38 <__kernel_rem_pio2+0x35c>
 800ea5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea5e:	462f      	mov	r7, r5
 800ea60:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ea64:	f7f1 fd0a 	bl	800047c <__aeabi_i2d>
 800ea68:	f04f 0b00 	mov.w	fp, #0
 800ea6c:	f04f 0800 	mov.w	r8, #0
 800ea70:	f04f 0900 	mov.w	r9, #0
 800ea74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea76:	e8e7 0102 	strd	r0, r1, [r7], #8
 800ea7a:	3b08      	subs	r3, #8
 800ea7c:	9302      	str	r3, [sp, #8]
 800ea7e:	9b06      	ldr	r3, [sp, #24]
 800ea80:	459b      	cmp	fp, r3
 800ea82:	dd07      	ble.n	800ea94 <__kernel_rem_pio2+0x3b8>
 800ea84:	ab70      	add	r3, sp, #448	; 0x1c0
 800ea86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ea8a:	463d      	mov	r5, r7
 800ea8c:	e9c3 8900 	strd	r8, r9, [r3]
 800ea90:	3601      	adds	r6, #1
 800ea92:	e7dc      	b.n	800ea4e <__kernel_rem_pio2+0x372>
 800ea94:	9902      	ldr	r1, [sp, #8]
 800ea96:	f10b 0b01 	add.w	fp, fp, #1
 800ea9a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800ea9e:	9102      	str	r1, [sp, #8]
 800eaa0:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800eaa4:	f7f1 fd54 	bl	8000550 <__aeabi_dmul>
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	460b      	mov	r3, r1
 800eaac:	4640      	mov	r0, r8
 800eaae:	4649      	mov	r1, r9
 800eab0:	f7f1 fb98 	bl	80001e4 <__adddf3>
 800eab4:	4680      	mov	r8, r0
 800eab6:	4689      	mov	r9, r1
 800eab8:	e7e1      	b.n	800ea7e <__kernel_rem_pio2+0x3a2>
 800eaba:	3c01      	subs	r4, #1
 800eabc:	e752      	b.n	800e964 <__kernel_rem_pio2+0x288>
 800eabe:	f1ca 0200 	rsb	r2, sl, #0
 800eac2:	4640      	mov	r0, r8
 800eac4:	4649      	mov	r1, r9
 800eac6:	f000 fe3b 	bl	800f740 <scalbn>
 800eaca:	2200      	movs	r2, #0
 800eacc:	4ba5      	ldr	r3, [pc, #660]	; (800ed64 <__kernel_rem_pio2+0x688>)
 800eace:	4604      	mov	r4, r0
 800ead0:	460d      	mov	r5, r1
 800ead2:	f7f1 ffc3 	bl	8000a5c <__aeabi_dcmpge>
 800ead6:	b1f8      	cbz	r0, 800eb18 <__kernel_rem_pio2+0x43c>
 800ead8:	2200      	movs	r2, #0
 800eada:	4ba3      	ldr	r3, [pc, #652]	; (800ed68 <__kernel_rem_pio2+0x68c>)
 800eadc:	4620      	mov	r0, r4
 800eade:	4629      	mov	r1, r5
 800eae0:	f7f1 fd36 	bl	8000550 <__aeabi_dmul>
 800eae4:	f7f1 ffe4 	bl	8000ab0 <__aeabi_d2iz>
 800eae8:	4606      	mov	r6, r0
 800eaea:	f7f1 fcc7 	bl	800047c <__aeabi_i2d>
 800eaee:	2200      	movs	r2, #0
 800eaf0:	4b9c      	ldr	r3, [pc, #624]	; (800ed64 <__kernel_rem_pio2+0x688>)
 800eaf2:	f7f1 fd2d 	bl	8000550 <__aeabi_dmul>
 800eaf6:	460b      	mov	r3, r1
 800eaf8:	4602      	mov	r2, r0
 800eafa:	4629      	mov	r1, r5
 800eafc:	4620      	mov	r0, r4
 800eafe:	f7f1 fb6f 	bl	80001e0 <__aeabi_dsub>
 800eb02:	f7f1 ffd5 	bl	8000ab0 <__aeabi_d2iz>
 800eb06:	1c7c      	adds	r4, r7, #1
 800eb08:	ab0c      	add	r3, sp, #48	; 0x30
 800eb0a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800eb0e:	f10a 0a18 	add.w	sl, sl, #24
 800eb12:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800eb16:	e72d      	b.n	800e974 <__kernel_rem_pio2+0x298>
 800eb18:	4620      	mov	r0, r4
 800eb1a:	4629      	mov	r1, r5
 800eb1c:	f7f1 ffc8 	bl	8000ab0 <__aeabi_d2iz>
 800eb20:	ab0c      	add	r3, sp, #48	; 0x30
 800eb22:	463c      	mov	r4, r7
 800eb24:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800eb28:	e724      	b.n	800e974 <__kernel_rem_pio2+0x298>
 800eb2a:	ab0c      	add	r3, sp, #48	; 0x30
 800eb2c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800eb30:	f7f1 fca4 	bl	800047c <__aeabi_i2d>
 800eb34:	4632      	mov	r2, r6
 800eb36:	463b      	mov	r3, r7
 800eb38:	f7f1 fd0a 	bl	8000550 <__aeabi_dmul>
 800eb3c:	4642      	mov	r2, r8
 800eb3e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800eb42:	464b      	mov	r3, r9
 800eb44:	4630      	mov	r0, r6
 800eb46:	4639      	mov	r1, r7
 800eb48:	f7f1 fd02 	bl	8000550 <__aeabi_dmul>
 800eb4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb50:	4606      	mov	r6, r0
 800eb52:	460f      	mov	r7, r1
 800eb54:	e71f      	b.n	800e996 <__kernel_rem_pio2+0x2ba>
 800eb56:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800eb5a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800eb5e:	f7f1 fcf7 	bl	8000550 <__aeabi_dmul>
 800eb62:	4602      	mov	r2, r0
 800eb64:	460b      	mov	r3, r1
 800eb66:	4650      	mov	r0, sl
 800eb68:	4659      	mov	r1, fp
 800eb6a:	f7f1 fb3b 	bl	80001e4 <__adddf3>
 800eb6e:	4682      	mov	sl, r0
 800eb70:	468b      	mov	fp, r1
 800eb72:	3601      	adds	r6, #1
 800eb74:	9b04      	ldr	r3, [sp, #16]
 800eb76:	429e      	cmp	r6, r3
 800eb78:	dc01      	bgt.n	800eb7e <__kernel_rem_pio2+0x4a2>
 800eb7a:	45b0      	cmp	r8, r6
 800eb7c:	daeb      	bge.n	800eb56 <__kernel_rem_pio2+0x47a>
 800eb7e:	ab48      	add	r3, sp, #288	; 0x120
 800eb80:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800eb84:	e9c3 ab00 	strd	sl, fp, [r3]
 800eb88:	3f01      	subs	r7, #1
 800eb8a:	f108 0801 	add.w	r8, r8, #1
 800eb8e:	e709      	b.n	800e9a4 <__kernel_rem_pio2+0x2c8>
 800eb90:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800eb92:	2b02      	cmp	r3, #2
 800eb94:	dc09      	bgt.n	800ebaa <__kernel_rem_pio2+0x4ce>
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	dc34      	bgt.n	800ec04 <__kernel_rem_pio2+0x528>
 800eb9a:	d05e      	beq.n	800ec5a <__kernel_rem_pio2+0x57e>
 800eb9c:	9b07      	ldr	r3, [sp, #28]
 800eb9e:	f003 0007 	and.w	r0, r3, #7
 800eba2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800eba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebaa:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800ebac:	2b03      	cmp	r3, #3
 800ebae:	d1f5      	bne.n	800eb9c <__kernel_rem_pio2+0x4c0>
 800ebb0:	9a06      	ldr	r2, [sp, #24]
 800ebb2:	ab48      	add	r3, sp, #288	; 0x120
 800ebb4:	441a      	add	r2, r3
 800ebb6:	4615      	mov	r5, r2
 800ebb8:	4692      	mov	sl, r2
 800ebba:	46a3      	mov	fp, r4
 800ebbc:	f1bb 0f00 	cmp.w	fp, #0
 800ebc0:	dc7a      	bgt.n	800ecb8 <__kernel_rem_pio2+0x5dc>
 800ebc2:	46aa      	mov	sl, r5
 800ebc4:	46a3      	mov	fp, r4
 800ebc6:	f1bb 0f01 	cmp.w	fp, #1
 800ebca:	f300 8094 	bgt.w	800ecf6 <__kernel_rem_pio2+0x61a>
 800ebce:	2700      	movs	r7, #0
 800ebd0:	463e      	mov	r6, r7
 800ebd2:	2c01      	cmp	r4, #1
 800ebd4:	f300 80ae 	bgt.w	800ed34 <__kernel_rem_pio2+0x658>
 800ebd8:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800ebdc:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800ebe0:	9b02      	ldr	r3, [sp, #8]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	f040 80b0 	bne.w	800ed48 <__kernel_rem_pio2+0x66c>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	462a      	mov	r2, r5
 800ebec:	9801      	ldr	r0, [sp, #4]
 800ebee:	e9c0 2300 	strd	r2, r3, [r0]
 800ebf2:	4622      	mov	r2, r4
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ebfa:	463a      	mov	r2, r7
 800ebfc:	4633      	mov	r3, r6
 800ebfe:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ec02:	e7cb      	b.n	800eb9c <__kernel_rem_pio2+0x4c0>
 800ec04:	2000      	movs	r0, #0
 800ec06:	9a06      	ldr	r2, [sp, #24]
 800ec08:	ab48      	add	r3, sp, #288	; 0x120
 800ec0a:	441a      	add	r2, r3
 800ec0c:	4615      	mov	r5, r2
 800ec0e:	46a0      	mov	r8, r4
 800ec10:	4601      	mov	r1, r0
 800ec12:	f1b8 0f00 	cmp.w	r8, #0
 800ec16:	da3c      	bge.n	800ec92 <__kernel_rem_pio2+0x5b6>
 800ec18:	9b02      	ldr	r3, [sp, #8]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d040      	beq.n	800eca0 <__kernel_rem_pio2+0x5c4>
 800ec1e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800ec22:	4602      	mov	r2, r0
 800ec24:	462b      	mov	r3, r5
 800ec26:	9d01      	ldr	r5, [sp, #4]
 800ec28:	2601      	movs	r6, #1
 800ec2a:	e9c5 2300 	strd	r2, r3, [r5]
 800ec2e:	460b      	mov	r3, r1
 800ec30:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ec34:	f7f1 fad4 	bl	80001e0 <__aeabi_dsub>
 800ec38:	4684      	mov	ip, r0
 800ec3a:	460f      	mov	r7, r1
 800ec3c:	ad48      	add	r5, sp, #288	; 0x120
 800ec3e:	42b4      	cmp	r4, r6
 800ec40:	f105 0508 	add.w	r5, r5, #8
 800ec44:	da2e      	bge.n	800eca4 <__kernel_rem_pio2+0x5c8>
 800ec46:	9b02      	ldr	r3, [sp, #8]
 800ec48:	b10b      	cbz	r3, 800ec4e <__kernel_rem_pio2+0x572>
 800ec4a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ec4e:	4662      	mov	r2, ip
 800ec50:	463b      	mov	r3, r7
 800ec52:	9901      	ldr	r1, [sp, #4]
 800ec54:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800ec58:	e7a0      	b.n	800eb9c <__kernel_rem_pio2+0x4c0>
 800ec5a:	9a06      	ldr	r2, [sp, #24]
 800ec5c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800ec5e:	ab48      	add	r3, sp, #288	; 0x120
 800ec60:	441a      	add	r2, r3
 800ec62:	4615      	mov	r5, r2
 800ec64:	4637      	mov	r7, r6
 800ec66:	2c00      	cmp	r4, #0
 800ec68:	da09      	bge.n	800ec7e <__kernel_rem_pio2+0x5a2>
 800ec6a:	9b02      	ldr	r3, [sp, #8]
 800ec6c:	b10b      	cbz	r3, 800ec72 <__kernel_rem_pio2+0x596>
 800ec6e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ec72:	4632      	mov	r2, r6
 800ec74:	463b      	mov	r3, r7
 800ec76:	9901      	ldr	r1, [sp, #4]
 800ec78:	e9c1 2300 	strd	r2, r3, [r1]
 800ec7c:	e78e      	b.n	800eb9c <__kernel_rem_pio2+0x4c0>
 800ec7e:	4630      	mov	r0, r6
 800ec80:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ec84:	4639      	mov	r1, r7
 800ec86:	f7f1 faad 	bl	80001e4 <__adddf3>
 800ec8a:	3c01      	subs	r4, #1
 800ec8c:	4606      	mov	r6, r0
 800ec8e:	460f      	mov	r7, r1
 800ec90:	e7e9      	b.n	800ec66 <__kernel_rem_pio2+0x58a>
 800ec92:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ec96:	f7f1 faa5 	bl	80001e4 <__adddf3>
 800ec9a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec9e:	e7b8      	b.n	800ec12 <__kernel_rem_pio2+0x536>
 800eca0:	460d      	mov	r5, r1
 800eca2:	e7be      	b.n	800ec22 <__kernel_rem_pio2+0x546>
 800eca4:	4660      	mov	r0, ip
 800eca6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ecaa:	4639      	mov	r1, r7
 800ecac:	f7f1 fa9a 	bl	80001e4 <__adddf3>
 800ecb0:	3601      	adds	r6, #1
 800ecb2:	4684      	mov	ip, r0
 800ecb4:	460f      	mov	r7, r1
 800ecb6:	e7c2      	b.n	800ec3e <__kernel_rem_pio2+0x562>
 800ecb8:	e9da 6700 	ldrd	r6, r7, [sl]
 800ecbc:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800ecc0:	4632      	mov	r2, r6
 800ecc2:	463b      	mov	r3, r7
 800ecc4:	4640      	mov	r0, r8
 800ecc6:	4649      	mov	r1, r9
 800ecc8:	f7f1 fa8c 	bl	80001e4 <__adddf3>
 800eccc:	4602      	mov	r2, r0
 800ecce:	460b      	mov	r3, r1
 800ecd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ecd4:	4640      	mov	r0, r8
 800ecd6:	4649      	mov	r1, r9
 800ecd8:	f7f1 fa82 	bl	80001e0 <__aeabi_dsub>
 800ecdc:	4632      	mov	r2, r6
 800ecde:	463b      	mov	r3, r7
 800ece0:	f7f1 fa80 	bl	80001e4 <__adddf3>
 800ece4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ece8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ecec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ecf0:	e9ca 2300 	strd	r2, r3, [sl]
 800ecf4:	e762      	b.n	800ebbc <__kernel_rem_pio2+0x4e0>
 800ecf6:	e9da 8900 	ldrd	r8, r9, [sl]
 800ecfa:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800ecfe:	4642      	mov	r2, r8
 800ed00:	464b      	mov	r3, r9
 800ed02:	4630      	mov	r0, r6
 800ed04:	4639      	mov	r1, r7
 800ed06:	f7f1 fa6d 	bl	80001e4 <__adddf3>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed12:	4630      	mov	r0, r6
 800ed14:	4639      	mov	r1, r7
 800ed16:	f7f1 fa63 	bl	80001e0 <__aeabi_dsub>
 800ed1a:	4642      	mov	r2, r8
 800ed1c:	464b      	mov	r3, r9
 800ed1e:	f7f1 fa61 	bl	80001e4 <__adddf3>
 800ed22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed26:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ed2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ed2e:	e9ca 2300 	strd	r2, r3, [sl]
 800ed32:	e748      	b.n	800ebc6 <__kernel_rem_pio2+0x4ea>
 800ed34:	4638      	mov	r0, r7
 800ed36:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ed3a:	4631      	mov	r1, r6
 800ed3c:	f7f1 fa52 	bl	80001e4 <__adddf3>
 800ed40:	3c01      	subs	r4, #1
 800ed42:	4607      	mov	r7, r0
 800ed44:	460e      	mov	r6, r1
 800ed46:	e744      	b.n	800ebd2 <__kernel_rem_pio2+0x4f6>
 800ed48:	9b01      	ldr	r3, [sp, #4]
 800ed4a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ed4e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ed52:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800ed56:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800ed5a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800ed5e:	601d      	str	r5, [r3, #0]
 800ed60:	615e      	str	r6, [r3, #20]
 800ed62:	e71b      	b.n	800eb9c <__kernel_rem_pio2+0x4c0>
 800ed64:	41700000 	.word	0x41700000
 800ed68:	3e700000 	.word	0x3e700000
 800ed6c:	00000000 	.word	0x00000000

0800ed70 <__kernel_sin>:
 800ed70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed74:	b086      	sub	sp, #24
 800ed76:	e9cd 2300 	strd	r2, r3, [sp]
 800ed7a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ed7e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ed82:	4682      	mov	sl, r0
 800ed84:	460c      	mov	r4, r1
 800ed86:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ed88:	da03      	bge.n	800ed92 <__kernel_sin+0x22>
 800ed8a:	f7f1 fe91 	bl	8000ab0 <__aeabi_d2iz>
 800ed8e:	2800      	cmp	r0, #0
 800ed90:	d050      	beq.n	800ee34 <__kernel_sin+0xc4>
 800ed92:	4652      	mov	r2, sl
 800ed94:	4623      	mov	r3, r4
 800ed96:	4650      	mov	r0, sl
 800ed98:	4621      	mov	r1, r4
 800ed9a:	f7f1 fbd9 	bl	8000550 <__aeabi_dmul>
 800ed9e:	4606      	mov	r6, r0
 800eda0:	460f      	mov	r7, r1
 800eda2:	4602      	mov	r2, r0
 800eda4:	460b      	mov	r3, r1
 800eda6:	4650      	mov	r0, sl
 800eda8:	4621      	mov	r1, r4
 800edaa:	f7f1 fbd1 	bl	8000550 <__aeabi_dmul>
 800edae:	a33e      	add	r3, pc, #248	; (adr r3, 800eea8 <__kernel_sin+0x138>)
 800edb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb4:	4680      	mov	r8, r0
 800edb6:	4689      	mov	r9, r1
 800edb8:	4630      	mov	r0, r6
 800edba:	4639      	mov	r1, r7
 800edbc:	f7f1 fbc8 	bl	8000550 <__aeabi_dmul>
 800edc0:	a33b      	add	r3, pc, #236	; (adr r3, 800eeb0 <__kernel_sin+0x140>)
 800edc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc6:	f7f1 fa0b 	bl	80001e0 <__aeabi_dsub>
 800edca:	4632      	mov	r2, r6
 800edcc:	463b      	mov	r3, r7
 800edce:	f7f1 fbbf 	bl	8000550 <__aeabi_dmul>
 800edd2:	a339      	add	r3, pc, #228	; (adr r3, 800eeb8 <__kernel_sin+0x148>)
 800edd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd8:	f7f1 fa04 	bl	80001e4 <__adddf3>
 800eddc:	4632      	mov	r2, r6
 800edde:	463b      	mov	r3, r7
 800ede0:	f7f1 fbb6 	bl	8000550 <__aeabi_dmul>
 800ede4:	a336      	add	r3, pc, #216	; (adr r3, 800eec0 <__kernel_sin+0x150>)
 800ede6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edea:	f7f1 f9f9 	bl	80001e0 <__aeabi_dsub>
 800edee:	4632      	mov	r2, r6
 800edf0:	463b      	mov	r3, r7
 800edf2:	f7f1 fbad 	bl	8000550 <__aeabi_dmul>
 800edf6:	a334      	add	r3, pc, #208	; (adr r3, 800eec8 <__kernel_sin+0x158>)
 800edf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfc:	f7f1 f9f2 	bl	80001e4 <__adddf3>
 800ee00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee04:	b9dd      	cbnz	r5, 800ee3e <__kernel_sin+0xce>
 800ee06:	4602      	mov	r2, r0
 800ee08:	460b      	mov	r3, r1
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	4639      	mov	r1, r7
 800ee0e:	f7f1 fb9f 	bl	8000550 <__aeabi_dmul>
 800ee12:	a32f      	add	r3, pc, #188	; (adr r3, 800eed0 <__kernel_sin+0x160>)
 800ee14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee18:	f7f1 f9e2 	bl	80001e0 <__aeabi_dsub>
 800ee1c:	4642      	mov	r2, r8
 800ee1e:	464b      	mov	r3, r9
 800ee20:	f7f1 fb96 	bl	8000550 <__aeabi_dmul>
 800ee24:	4602      	mov	r2, r0
 800ee26:	460b      	mov	r3, r1
 800ee28:	4650      	mov	r0, sl
 800ee2a:	4621      	mov	r1, r4
 800ee2c:	f7f1 f9da 	bl	80001e4 <__adddf3>
 800ee30:	4682      	mov	sl, r0
 800ee32:	460c      	mov	r4, r1
 800ee34:	4650      	mov	r0, sl
 800ee36:	4621      	mov	r1, r4
 800ee38:	b006      	add	sp, #24
 800ee3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee3e:	2200      	movs	r2, #0
 800ee40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee44:	4b24      	ldr	r3, [pc, #144]	; (800eed8 <__kernel_sin+0x168>)
 800ee46:	f7f1 fb83 	bl	8000550 <__aeabi_dmul>
 800ee4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee52:	4640      	mov	r0, r8
 800ee54:	4649      	mov	r1, r9
 800ee56:	f7f1 fb7b 	bl	8000550 <__aeabi_dmul>
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee62:	f7f1 f9bd 	bl	80001e0 <__aeabi_dsub>
 800ee66:	4632      	mov	r2, r6
 800ee68:	463b      	mov	r3, r7
 800ee6a:	f7f1 fb71 	bl	8000550 <__aeabi_dmul>
 800ee6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee72:	f7f1 f9b5 	bl	80001e0 <__aeabi_dsub>
 800ee76:	a316      	add	r3, pc, #88	; (adr r3, 800eed0 <__kernel_sin+0x160>)
 800ee78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee7c:	4606      	mov	r6, r0
 800ee7e:	460f      	mov	r7, r1
 800ee80:	4640      	mov	r0, r8
 800ee82:	4649      	mov	r1, r9
 800ee84:	f7f1 fb64 	bl	8000550 <__aeabi_dmul>
 800ee88:	4602      	mov	r2, r0
 800ee8a:	460b      	mov	r3, r1
 800ee8c:	4630      	mov	r0, r6
 800ee8e:	4639      	mov	r1, r7
 800ee90:	f7f1 f9a8 	bl	80001e4 <__adddf3>
 800ee94:	4602      	mov	r2, r0
 800ee96:	460b      	mov	r3, r1
 800ee98:	4650      	mov	r0, sl
 800ee9a:	4621      	mov	r1, r4
 800ee9c:	f7f1 f9a0 	bl	80001e0 <__aeabi_dsub>
 800eea0:	e7c6      	b.n	800ee30 <__kernel_sin+0xc0>
 800eea2:	bf00      	nop
 800eea4:	f3af 8000 	nop.w
 800eea8:	5acfd57c 	.word	0x5acfd57c
 800eeac:	3de5d93a 	.word	0x3de5d93a
 800eeb0:	8a2b9ceb 	.word	0x8a2b9ceb
 800eeb4:	3e5ae5e6 	.word	0x3e5ae5e6
 800eeb8:	57b1fe7d 	.word	0x57b1fe7d
 800eebc:	3ec71de3 	.word	0x3ec71de3
 800eec0:	19c161d5 	.word	0x19c161d5
 800eec4:	3f2a01a0 	.word	0x3f2a01a0
 800eec8:	1110f8a6 	.word	0x1110f8a6
 800eecc:	3f811111 	.word	0x3f811111
 800eed0:	55555549 	.word	0x55555549
 800eed4:	3fc55555 	.word	0x3fc55555
 800eed8:	3fe00000 	.word	0x3fe00000

0800eedc <__kernel_cosf>:
 800eedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eee0:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800eee4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800eee8:	4606      	mov	r6, r0
 800eeea:	4688      	mov	r8, r1
 800eeec:	da03      	bge.n	800eef6 <__kernel_cosf+0x1a>
 800eeee:	f7f2 f961 	bl	80011b4 <__aeabi_f2iz>
 800eef2:	2800      	cmp	r0, #0
 800eef4:	d05c      	beq.n	800efb0 <__kernel_cosf+0xd4>
 800eef6:	4631      	mov	r1, r6
 800eef8:	4630      	mov	r0, r6
 800eefa:	f7f1 ff7f 	bl	8000dfc <__aeabi_fmul>
 800eefe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ef02:	4605      	mov	r5, r0
 800ef04:	f7f1 ff7a 	bl	8000dfc <__aeabi_fmul>
 800ef08:	492b      	ldr	r1, [pc, #172]	; (800efb8 <__kernel_cosf+0xdc>)
 800ef0a:	4607      	mov	r7, r0
 800ef0c:	4628      	mov	r0, r5
 800ef0e:	f7f1 ff75 	bl	8000dfc <__aeabi_fmul>
 800ef12:	492a      	ldr	r1, [pc, #168]	; (800efbc <__kernel_cosf+0xe0>)
 800ef14:	f7f1 fe6a 	bl	8000bec <__addsf3>
 800ef18:	4629      	mov	r1, r5
 800ef1a:	f7f1 ff6f 	bl	8000dfc <__aeabi_fmul>
 800ef1e:	4928      	ldr	r1, [pc, #160]	; (800efc0 <__kernel_cosf+0xe4>)
 800ef20:	f7f1 fe62 	bl	8000be8 <__aeabi_fsub>
 800ef24:	4629      	mov	r1, r5
 800ef26:	f7f1 ff69 	bl	8000dfc <__aeabi_fmul>
 800ef2a:	4926      	ldr	r1, [pc, #152]	; (800efc4 <__kernel_cosf+0xe8>)
 800ef2c:	f7f1 fe5e 	bl	8000bec <__addsf3>
 800ef30:	4629      	mov	r1, r5
 800ef32:	f7f1 ff63 	bl	8000dfc <__aeabi_fmul>
 800ef36:	4924      	ldr	r1, [pc, #144]	; (800efc8 <__kernel_cosf+0xec>)
 800ef38:	f7f1 fe56 	bl	8000be8 <__aeabi_fsub>
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	f7f1 ff5d 	bl	8000dfc <__aeabi_fmul>
 800ef42:	4922      	ldr	r1, [pc, #136]	; (800efcc <__kernel_cosf+0xf0>)
 800ef44:	f7f1 fe52 	bl	8000bec <__addsf3>
 800ef48:	4629      	mov	r1, r5
 800ef4a:	f7f1 ff57 	bl	8000dfc <__aeabi_fmul>
 800ef4e:	4629      	mov	r1, r5
 800ef50:	f7f1 ff54 	bl	8000dfc <__aeabi_fmul>
 800ef54:	4641      	mov	r1, r8
 800ef56:	4605      	mov	r5, r0
 800ef58:	4630      	mov	r0, r6
 800ef5a:	f7f1 ff4f 	bl	8000dfc <__aeabi_fmul>
 800ef5e:	4601      	mov	r1, r0
 800ef60:	4628      	mov	r0, r5
 800ef62:	f7f1 fe41 	bl	8000be8 <__aeabi_fsub>
 800ef66:	4b1a      	ldr	r3, [pc, #104]	; (800efd0 <__kernel_cosf+0xf4>)
 800ef68:	4605      	mov	r5, r0
 800ef6a:	429c      	cmp	r4, r3
 800ef6c:	dc0a      	bgt.n	800ef84 <__kernel_cosf+0xa8>
 800ef6e:	4601      	mov	r1, r0
 800ef70:	4638      	mov	r0, r7
 800ef72:	f7f1 fe39 	bl	8000be8 <__aeabi_fsub>
 800ef76:	4601      	mov	r1, r0
 800ef78:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ef7c:	f7f1 fe34 	bl	8000be8 <__aeabi_fsub>
 800ef80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef84:	4b13      	ldr	r3, [pc, #76]	; (800efd4 <__kernel_cosf+0xf8>)
 800ef86:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ef8a:	429c      	cmp	r4, r3
 800ef8c:	bfcc      	ite	gt
 800ef8e:	4c12      	ldrgt	r4, [pc, #72]	; (800efd8 <__kernel_cosf+0xfc>)
 800ef90:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800ef94:	4621      	mov	r1, r4
 800ef96:	f7f1 fe27 	bl	8000be8 <__aeabi_fsub>
 800ef9a:	4621      	mov	r1, r4
 800ef9c:	4606      	mov	r6, r0
 800ef9e:	4638      	mov	r0, r7
 800efa0:	f7f1 fe22 	bl	8000be8 <__aeabi_fsub>
 800efa4:	4629      	mov	r1, r5
 800efa6:	f7f1 fe1f 	bl	8000be8 <__aeabi_fsub>
 800efaa:	4601      	mov	r1, r0
 800efac:	4630      	mov	r0, r6
 800efae:	e7e5      	b.n	800ef7c <__kernel_cosf+0xa0>
 800efb0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800efb4:	e7e4      	b.n	800ef80 <__kernel_cosf+0xa4>
 800efb6:	bf00      	nop
 800efb8:	ad47d74e 	.word	0xad47d74e
 800efbc:	310f74f6 	.word	0x310f74f6
 800efc0:	3493f27c 	.word	0x3493f27c
 800efc4:	37d00d01 	.word	0x37d00d01
 800efc8:	3ab60b61 	.word	0x3ab60b61
 800efcc:	3d2aaaab 	.word	0x3d2aaaab
 800efd0:	3e999999 	.word	0x3e999999
 800efd4:	3f480000 	.word	0x3f480000
 800efd8:	3e900000 	.word	0x3e900000

0800efdc <__kernel_rem_pio2f>:
 800efdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe0:	b0db      	sub	sp, #364	; 0x16c
 800efe2:	9202      	str	r2, [sp, #8]
 800efe4:	9304      	str	r3, [sp, #16]
 800efe6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800efe8:	4bc5      	ldr	r3, [pc, #788]	; (800f300 <__kernel_rem_pio2f+0x324>)
 800efea:	9005      	str	r0, [sp, #20]
 800efec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eff0:	9100      	str	r1, [sp, #0]
 800eff2:	9301      	str	r3, [sp, #4]
 800eff4:	9b04      	ldr	r3, [sp, #16]
 800eff6:	3b01      	subs	r3, #1
 800eff8:	9303      	str	r3, [sp, #12]
 800effa:	9b02      	ldr	r3, [sp, #8]
 800effc:	1d1a      	adds	r2, r3, #4
 800effe:	f2c0 809b 	blt.w	800f138 <__kernel_rem_pio2f+0x15c>
 800f002:	1edc      	subs	r4, r3, #3
 800f004:	bf48      	it	mi
 800f006:	1d1c      	addmi	r4, r3, #4
 800f008:	10e4      	asrs	r4, r4, #3
 800f00a:	2500      	movs	r5, #0
 800f00c:	f04f 0a00 	mov.w	sl, #0
 800f010:	1c67      	adds	r7, r4, #1
 800f012:	00fb      	lsls	r3, r7, #3
 800f014:	9306      	str	r3, [sp, #24]
 800f016:	9b02      	ldr	r3, [sp, #8]
 800f018:	9a03      	ldr	r2, [sp, #12]
 800f01a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800f01e:	9b01      	ldr	r3, [sp, #4]
 800f020:	1aa6      	subs	r6, r4, r2
 800f022:	eb03 0802 	add.w	r8, r3, r2
 800f026:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800f028:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800f02c:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800f030:	4545      	cmp	r5, r8
 800f032:	f340 8083 	ble.w	800f13c <__kernel_rem_pio2f+0x160>
 800f036:	f04f 0800 	mov.w	r8, #0
 800f03a:	f04f 0b00 	mov.w	fp, #0
 800f03e:	9b04      	ldr	r3, [sp, #16]
 800f040:	aa1e      	add	r2, sp, #120	; 0x78
 800f042:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800f046:	ab46      	add	r3, sp, #280	; 0x118
 800f048:	9a01      	ldr	r2, [sp, #4]
 800f04a:	4590      	cmp	r8, r2
 800f04c:	f340 809c 	ble.w	800f188 <__kernel_rem_pio2f+0x1ac>
 800f050:	4613      	mov	r3, r2
 800f052:	aa0a      	add	r2, sp, #40	; 0x28
 800f054:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f058:	9308      	str	r3, [sp, #32]
 800f05a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800f05c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f060:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f064:	9307      	str	r3, [sp, #28]
 800f066:	ad0a      	add	r5, sp, #40	; 0x28
 800f068:	462e      	mov	r6, r5
 800f06a:	46c3      	mov	fp, r8
 800f06c:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800f070:	ab5a      	add	r3, sp, #360	; 0x168
 800f072:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800f076:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800f07a:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800f07e:	f1bb 0f00 	cmp.w	fp, #0
 800f082:	f300 8086 	bgt.w	800f192 <__kernel_rem_pio2f+0x1b6>
 800f086:	4639      	mov	r1, r7
 800f088:	4620      	mov	r0, r4
 800f08a:	f000 fc25 	bl	800f8d8 <scalbnf>
 800f08e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800f092:	4604      	mov	r4, r0
 800f094:	f7f1 feb2 	bl	8000dfc <__aeabi_fmul>
 800f098:	f000 fbd8 	bl	800f84c <floorf>
 800f09c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800f0a0:	f7f1 feac 	bl	8000dfc <__aeabi_fmul>
 800f0a4:	4601      	mov	r1, r0
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	f7f1 fd9e 	bl	8000be8 <__aeabi_fsub>
 800f0ac:	4604      	mov	r4, r0
 800f0ae:	f7f2 f881 	bl	80011b4 <__aeabi_f2iz>
 800f0b2:	4606      	mov	r6, r0
 800f0b4:	f7f1 fe4e 	bl	8000d54 <__aeabi_i2f>
 800f0b8:	4601      	mov	r1, r0
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	f7f1 fd94 	bl	8000be8 <__aeabi_fsub>
 800f0c0:	2f00      	cmp	r7, #0
 800f0c2:	4681      	mov	r9, r0
 800f0c4:	f340 8084 	ble.w	800f1d0 <__kernel_rem_pio2f+0x1f4>
 800f0c8:	f108 32ff 	add.w	r2, r8, #4294967295
 800f0cc:	ab0a      	add	r3, sp, #40	; 0x28
 800f0ce:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800f0d2:	f1c7 0108 	rsb	r1, r7, #8
 800f0d6:	fa44 f301 	asr.w	r3, r4, r1
 800f0da:	441e      	add	r6, r3
 800f0dc:	408b      	lsls	r3, r1
 800f0de:	1ae4      	subs	r4, r4, r3
 800f0e0:	f1c7 0007 	rsb	r0, r7, #7
 800f0e4:	ab0a      	add	r3, sp, #40	; 0x28
 800f0e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f0ea:	4104      	asrs	r4, r0
 800f0ec:	2c00      	cmp	r4, #0
 800f0ee:	dd7e      	ble.n	800f1ee <__kernel_rem_pio2f+0x212>
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	4692      	mov	sl, r2
 800f0f4:	3601      	adds	r6, #1
 800f0f6:	4590      	cmp	r8, r2
 800f0f8:	f300 80b0 	bgt.w	800f25c <__kernel_rem_pio2f+0x280>
 800f0fc:	2f00      	cmp	r7, #0
 800f0fe:	dd05      	ble.n	800f10c <__kernel_rem_pio2f+0x130>
 800f100:	2f01      	cmp	r7, #1
 800f102:	f000 80bd 	beq.w	800f280 <__kernel_rem_pio2f+0x2a4>
 800f106:	2f02      	cmp	r7, #2
 800f108:	f000 80c5 	beq.w	800f296 <__kernel_rem_pio2f+0x2ba>
 800f10c:	2c02      	cmp	r4, #2
 800f10e:	d16e      	bne.n	800f1ee <__kernel_rem_pio2f+0x212>
 800f110:	4649      	mov	r1, r9
 800f112:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f116:	f7f1 fd67 	bl	8000be8 <__aeabi_fsub>
 800f11a:	4681      	mov	r9, r0
 800f11c:	f1ba 0f00 	cmp.w	sl, #0
 800f120:	d065      	beq.n	800f1ee <__kernel_rem_pio2f+0x212>
 800f122:	4639      	mov	r1, r7
 800f124:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f128:	f000 fbd6 	bl	800f8d8 <scalbnf>
 800f12c:	4601      	mov	r1, r0
 800f12e:	4648      	mov	r0, r9
 800f130:	f7f1 fd5a 	bl	8000be8 <__aeabi_fsub>
 800f134:	4681      	mov	r9, r0
 800f136:	e05a      	b.n	800f1ee <__kernel_rem_pio2f+0x212>
 800f138:	2400      	movs	r4, #0
 800f13a:	e766      	b.n	800f00a <__kernel_rem_pio2f+0x2e>
 800f13c:	42ee      	cmn	r6, r5
 800f13e:	d407      	bmi.n	800f150 <__kernel_rem_pio2f+0x174>
 800f140:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f144:	f7f1 fe06 	bl	8000d54 <__aeabi_i2f>
 800f148:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800f14c:	3501      	adds	r5, #1
 800f14e:	e76f      	b.n	800f030 <__kernel_rem_pio2f+0x54>
 800f150:	4650      	mov	r0, sl
 800f152:	e7f9      	b.n	800f148 <__kernel_rem_pio2f+0x16c>
 800f154:	9b05      	ldr	r3, [sp, #20]
 800f156:	f8da 1000 	ldr.w	r1, [sl]
 800f15a:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800f15e:	f7f1 fe4d 	bl	8000dfc <__aeabi_fmul>
 800f162:	4601      	mov	r1, r0
 800f164:	4630      	mov	r0, r6
 800f166:	f7f1 fd41 	bl	8000bec <__addsf3>
 800f16a:	4606      	mov	r6, r0
 800f16c:	f109 0901 	add.w	r9, r9, #1
 800f170:	ab46      	add	r3, sp, #280	; 0x118
 800f172:	9a03      	ldr	r2, [sp, #12]
 800f174:	f1aa 0a04 	sub.w	sl, sl, #4
 800f178:	4591      	cmp	r9, r2
 800f17a:	ddeb      	ble.n	800f154 <__kernel_rem_pio2f+0x178>
 800f17c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f180:	3504      	adds	r5, #4
 800f182:	f108 0801 	add.w	r8, r8, #1
 800f186:	e75f      	b.n	800f048 <__kernel_rem_pio2f+0x6c>
 800f188:	46aa      	mov	sl, r5
 800f18a:	465e      	mov	r6, fp
 800f18c:	f04f 0900 	mov.w	r9, #0
 800f190:	e7ef      	b.n	800f172 <__kernel_rem_pio2f+0x196>
 800f192:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f196:	4620      	mov	r0, r4
 800f198:	f7f1 fe30 	bl	8000dfc <__aeabi_fmul>
 800f19c:	f7f2 f80a 	bl	80011b4 <__aeabi_f2iz>
 800f1a0:	f7f1 fdd8 	bl	8000d54 <__aeabi_i2f>
 800f1a4:	4649      	mov	r1, r9
 800f1a6:	9009      	str	r0, [sp, #36]	; 0x24
 800f1a8:	f7f1 fe28 	bl	8000dfc <__aeabi_fmul>
 800f1ac:	4601      	mov	r1, r0
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f7f1 fd1a 	bl	8000be8 <__aeabi_fsub>
 800f1b4:	f7f1 fffe 	bl	80011b4 <__aeabi_f2iz>
 800f1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f1be:	f846 0b04 	str.w	r0, [r6], #4
 800f1c2:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7f1 fd10 	bl	8000bec <__addsf3>
 800f1cc:	4604      	mov	r4, r0
 800f1ce:	e756      	b.n	800f07e <__kernel_rem_pio2f+0xa2>
 800f1d0:	d106      	bne.n	800f1e0 <__kernel_rem_pio2f+0x204>
 800f1d2:	f108 33ff 	add.w	r3, r8, #4294967295
 800f1d6:	aa0a      	add	r2, sp, #40	; 0x28
 800f1d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f1dc:	1224      	asrs	r4, r4, #8
 800f1de:	e785      	b.n	800f0ec <__kernel_rem_pio2f+0x110>
 800f1e0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f1e4:	f7f1 ffbc 	bl	8001160 <__aeabi_fcmpge>
 800f1e8:	4604      	mov	r4, r0
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	d134      	bne.n	800f258 <__kernel_rem_pio2f+0x27c>
 800f1ee:	2100      	movs	r1, #0
 800f1f0:	4648      	mov	r0, r9
 800f1f2:	f7f1 ff97 	bl	8001124 <__aeabi_fcmpeq>
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	f000 809a 	beq.w	800f330 <__kernel_rem_pio2f+0x354>
 800f1fc:	f108 35ff 	add.w	r5, r8, #4294967295
 800f200:	462b      	mov	r3, r5
 800f202:	2200      	movs	r2, #0
 800f204:	9901      	ldr	r1, [sp, #4]
 800f206:	428b      	cmp	r3, r1
 800f208:	da4d      	bge.n	800f2a6 <__kernel_rem_pio2f+0x2ca>
 800f20a:	2a00      	cmp	r2, #0
 800f20c:	d07c      	beq.n	800f308 <__kernel_rem_pio2f+0x32c>
 800f20e:	ab0a      	add	r3, sp, #40	; 0x28
 800f210:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f214:	3f08      	subs	r7, #8
 800f216:	2b00      	cmp	r3, #0
 800f218:	f000 8088 	beq.w	800f32c <__kernel_rem_pio2f+0x350>
 800f21c:	4639      	mov	r1, r7
 800f21e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f222:	f000 fb59 	bl	800f8d8 <scalbnf>
 800f226:	46aa      	mov	sl, r5
 800f228:	4681      	mov	r9, r0
 800f22a:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800f22e:	af46      	add	r7, sp, #280	; 0x118
 800f230:	f1ba 0f00 	cmp.w	sl, #0
 800f234:	f280 80b1 	bge.w	800f39a <__kernel_rem_pio2f+0x3be>
 800f238:	46a9      	mov	r9, r5
 800f23a:	f04f 0a00 	mov.w	sl, #0
 800f23e:	2200      	movs	r2, #0
 800f240:	f1b9 0f00 	cmp.w	r9, #0
 800f244:	f2c0 80db 	blt.w	800f3fe <__kernel_rem_pio2f+0x422>
 800f248:	a946      	add	r1, sp, #280	; 0x118
 800f24a:	4617      	mov	r7, r2
 800f24c:	f04f 0800 	mov.w	r8, #0
 800f250:	4b2c      	ldr	r3, [pc, #176]	; (800f304 <__kernel_rem_pio2f+0x328>)
 800f252:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800f256:	e0c3      	b.n	800f3e0 <__kernel_rem_pio2f+0x404>
 800f258:	2402      	movs	r4, #2
 800f25a:	e749      	b.n	800f0f0 <__kernel_rem_pio2f+0x114>
 800f25c:	682b      	ldr	r3, [r5, #0]
 800f25e:	f1ba 0f00 	cmp.w	sl, #0
 800f262:	d108      	bne.n	800f276 <__kernel_rem_pio2f+0x29a>
 800f264:	b11b      	cbz	r3, 800f26e <__kernel_rem_pio2f+0x292>
 800f266:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800f26a:	602b      	str	r3, [r5, #0]
 800f26c:	2301      	movs	r3, #1
 800f26e:	469a      	mov	sl, r3
 800f270:	3201      	adds	r2, #1
 800f272:	3504      	adds	r5, #4
 800f274:	e73f      	b.n	800f0f6 <__kernel_rem_pio2f+0x11a>
 800f276:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f27a:	602b      	str	r3, [r5, #0]
 800f27c:	4653      	mov	r3, sl
 800f27e:	e7f6      	b.n	800f26e <__kernel_rem_pio2f+0x292>
 800f280:	f108 32ff 	add.w	r2, r8, #4294967295
 800f284:	ab0a      	add	r3, sp, #40	; 0x28
 800f286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f28a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f28e:	a90a      	add	r1, sp, #40	; 0x28
 800f290:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f294:	e73a      	b.n	800f10c <__kernel_rem_pio2f+0x130>
 800f296:	f108 32ff 	add.w	r2, r8, #4294967295
 800f29a:	ab0a      	add	r3, sp, #40	; 0x28
 800f29c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f2a4:	e7f3      	b.n	800f28e <__kernel_rem_pio2f+0x2b2>
 800f2a6:	a90a      	add	r1, sp, #40	; 0x28
 800f2a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f2ac:	3b01      	subs	r3, #1
 800f2ae:	430a      	orrs	r2, r1
 800f2b0:	e7a8      	b.n	800f204 <__kernel_rem_pio2f+0x228>
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f2b8:	2900      	cmp	r1, #0
 800f2ba:	d0fa      	beq.n	800f2b2 <__kernel_rem_pio2f+0x2d6>
 800f2bc:	9a04      	ldr	r2, [sp, #16]
 800f2be:	f108 0501 	add.w	r5, r8, #1
 800f2c2:	eb08 0402 	add.w	r4, r8, r2
 800f2c6:	aa1e      	add	r2, sp, #120	; 0x78
 800f2c8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f2cc:	4498      	add	r8, r3
 800f2ce:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800f2d2:	45a8      	cmp	r8, r5
 800f2d4:	f6ff aec7 	blt.w	800f066 <__kernel_rem_pio2f+0x8a>
 800f2d8:	9b07      	ldr	r3, [sp, #28]
 800f2da:	46a3      	mov	fp, r4
 800f2dc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f2e0:	f7f1 fd38 	bl	8000d54 <__aeabi_i2f>
 800f2e4:	f04f 0a00 	mov.w	sl, #0
 800f2e8:	2600      	movs	r6, #0
 800f2ea:	f84b 0b04 	str.w	r0, [fp], #4
 800f2ee:	9b03      	ldr	r3, [sp, #12]
 800f2f0:	459a      	cmp	sl, r3
 800f2f2:	dd0c      	ble.n	800f30e <__kernel_rem_pio2f+0x332>
 800f2f4:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800f2f8:	465c      	mov	r4, fp
 800f2fa:	3501      	adds	r5, #1
 800f2fc:	e7e9      	b.n	800f2d2 <__kernel_rem_pio2f+0x2f6>
 800f2fe:	bf00      	nop
 800f300:	08013644 	.word	0x08013644
 800f304:	08013618 	.word	0x08013618
 800f308:	2301      	movs	r3, #1
 800f30a:	9a08      	ldr	r2, [sp, #32]
 800f30c:	e7d2      	b.n	800f2b4 <__kernel_rem_pio2f+0x2d8>
 800f30e:	9b05      	ldr	r3, [sp, #20]
 800f310:	f854 0904 	ldr.w	r0, [r4], #-4
 800f314:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800f318:	f7f1 fd70 	bl	8000dfc <__aeabi_fmul>
 800f31c:	4601      	mov	r1, r0
 800f31e:	4630      	mov	r0, r6
 800f320:	f7f1 fc64 	bl	8000bec <__addsf3>
 800f324:	f10a 0a01 	add.w	sl, sl, #1
 800f328:	4606      	mov	r6, r0
 800f32a:	e7e0      	b.n	800f2ee <__kernel_rem_pio2f+0x312>
 800f32c:	3d01      	subs	r5, #1
 800f32e:	e76e      	b.n	800f20e <__kernel_rem_pio2f+0x232>
 800f330:	9b06      	ldr	r3, [sp, #24]
 800f332:	9a02      	ldr	r2, [sp, #8]
 800f334:	4648      	mov	r0, r9
 800f336:	1a99      	subs	r1, r3, r2
 800f338:	f000 face 	bl	800f8d8 <scalbnf>
 800f33c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f340:	4605      	mov	r5, r0
 800f342:	f7f1 ff0d 	bl	8001160 <__aeabi_fcmpge>
 800f346:	b300      	cbz	r0, 800f38a <__kernel_rem_pio2f+0x3ae>
 800f348:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f34c:	4628      	mov	r0, r5
 800f34e:	f7f1 fd55 	bl	8000dfc <__aeabi_fmul>
 800f352:	f7f1 ff2f 	bl	80011b4 <__aeabi_f2iz>
 800f356:	f7f1 fcfd 	bl	8000d54 <__aeabi_i2f>
 800f35a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f35e:	4681      	mov	r9, r0
 800f360:	f7f1 fd4c 	bl	8000dfc <__aeabi_fmul>
 800f364:	4601      	mov	r1, r0
 800f366:	4628      	mov	r0, r5
 800f368:	f7f1 fc3e 	bl	8000be8 <__aeabi_fsub>
 800f36c:	f7f1 ff22 	bl	80011b4 <__aeabi_f2iz>
 800f370:	ab0a      	add	r3, sp, #40	; 0x28
 800f372:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f376:	4648      	mov	r0, r9
 800f378:	f7f1 ff1c 	bl	80011b4 <__aeabi_f2iz>
 800f37c:	f108 0501 	add.w	r5, r8, #1
 800f380:	ab0a      	add	r3, sp, #40	; 0x28
 800f382:	3708      	adds	r7, #8
 800f384:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800f388:	e748      	b.n	800f21c <__kernel_rem_pio2f+0x240>
 800f38a:	4628      	mov	r0, r5
 800f38c:	f7f1 ff12 	bl	80011b4 <__aeabi_f2iz>
 800f390:	ab0a      	add	r3, sp, #40	; 0x28
 800f392:	4645      	mov	r5, r8
 800f394:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f398:	e740      	b.n	800f21c <__kernel_rem_pio2f+0x240>
 800f39a:	ab0a      	add	r3, sp, #40	; 0x28
 800f39c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f3a0:	f7f1 fcd8 	bl	8000d54 <__aeabi_i2f>
 800f3a4:	4649      	mov	r1, r9
 800f3a6:	f7f1 fd29 	bl	8000dfc <__aeabi_fmul>
 800f3aa:	4641      	mov	r1, r8
 800f3ac:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800f3b0:	4648      	mov	r0, r9
 800f3b2:	f7f1 fd23 	bl	8000dfc <__aeabi_fmul>
 800f3b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3ba:	4681      	mov	r9, r0
 800f3bc:	e738      	b.n	800f230 <__kernel_rem_pio2f+0x254>
 800f3be:	f853 0b04 	ldr.w	r0, [r3], #4
 800f3c2:	f85b 1b04 	ldr.w	r1, [fp], #4
 800f3c6:	9203      	str	r2, [sp, #12]
 800f3c8:	9302      	str	r3, [sp, #8]
 800f3ca:	f7f1 fd17 	bl	8000dfc <__aeabi_fmul>
 800f3ce:	4601      	mov	r1, r0
 800f3d0:	4638      	mov	r0, r7
 800f3d2:	f7f1 fc0b 	bl	8000bec <__addsf3>
 800f3d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f3da:	4607      	mov	r7, r0
 800f3dc:	f108 0801 	add.w	r8, r8, #1
 800f3e0:	9901      	ldr	r1, [sp, #4]
 800f3e2:	4588      	cmp	r8, r1
 800f3e4:	dc01      	bgt.n	800f3ea <__kernel_rem_pio2f+0x40e>
 800f3e6:	45c2      	cmp	sl, r8
 800f3e8:	dae9      	bge.n	800f3be <__kernel_rem_pio2f+0x3e2>
 800f3ea:	ab5a      	add	r3, sp, #360	; 0x168
 800f3ec:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800f3f0:	f843 7ca0 	str.w	r7, [r3, #-160]
 800f3f4:	f109 39ff 	add.w	r9, r9, #4294967295
 800f3f8:	f10a 0a01 	add.w	sl, sl, #1
 800f3fc:	e720      	b.n	800f240 <__kernel_rem_pio2f+0x264>
 800f3fe:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f400:	2b02      	cmp	r3, #2
 800f402:	dc07      	bgt.n	800f414 <__kernel_rem_pio2f+0x438>
 800f404:	2b00      	cmp	r3, #0
 800f406:	dc4d      	bgt.n	800f4a4 <__kernel_rem_pio2f+0x4c8>
 800f408:	d02e      	beq.n	800f468 <__kernel_rem_pio2f+0x48c>
 800f40a:	f006 0007 	and.w	r0, r6, #7
 800f40e:	b05b      	add	sp, #364	; 0x16c
 800f410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f414:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f416:	2b03      	cmp	r3, #3
 800f418:	d1f7      	bne.n	800f40a <__kernel_rem_pio2f+0x42e>
 800f41a:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800f41e:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800f422:	46b8      	mov	r8, r7
 800f424:	46aa      	mov	sl, r5
 800f426:	f1ba 0f00 	cmp.w	sl, #0
 800f42a:	dc48      	bgt.n	800f4be <__kernel_rem_pio2f+0x4e2>
 800f42c:	46a9      	mov	r9, r5
 800f42e:	f1b9 0f01 	cmp.w	r9, #1
 800f432:	dc5f      	bgt.n	800f4f4 <__kernel_rem_pio2f+0x518>
 800f434:	2000      	movs	r0, #0
 800f436:	2d01      	cmp	r5, #1
 800f438:	dc75      	bgt.n	800f526 <__kernel_rem_pio2f+0x54a>
 800f43a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800f43c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800f43e:	2c00      	cmp	r4, #0
 800f440:	d177      	bne.n	800f532 <__kernel_rem_pio2f+0x556>
 800f442:	9900      	ldr	r1, [sp, #0]
 800f444:	600a      	str	r2, [r1, #0]
 800f446:	460a      	mov	r2, r1
 800f448:	604b      	str	r3, [r1, #4]
 800f44a:	6090      	str	r0, [r2, #8]
 800f44c:	e7dd      	b.n	800f40a <__kernel_rem_pio2f+0x42e>
 800f44e:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800f452:	f7f1 fbcb 	bl	8000bec <__addsf3>
 800f456:	3d01      	subs	r5, #1
 800f458:	2d00      	cmp	r5, #0
 800f45a:	daf8      	bge.n	800f44e <__kernel_rem_pio2f+0x472>
 800f45c:	b10c      	cbz	r4, 800f462 <__kernel_rem_pio2f+0x486>
 800f45e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f462:	9b00      	ldr	r3, [sp, #0]
 800f464:	6018      	str	r0, [r3, #0]
 800f466:	e7d0      	b.n	800f40a <__kernel_rem_pio2f+0x42e>
 800f468:	2000      	movs	r0, #0
 800f46a:	af32      	add	r7, sp, #200	; 0xc8
 800f46c:	e7f4      	b.n	800f458 <__kernel_rem_pio2f+0x47c>
 800f46e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800f472:	f7f1 fbbb 	bl	8000bec <__addsf3>
 800f476:	3f01      	subs	r7, #1
 800f478:	2f00      	cmp	r7, #0
 800f47a:	daf8      	bge.n	800f46e <__kernel_rem_pio2f+0x492>
 800f47c:	b1bc      	cbz	r4, 800f4ae <__kernel_rem_pio2f+0x4d2>
 800f47e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800f482:	9a00      	ldr	r2, [sp, #0]
 800f484:	4601      	mov	r1, r0
 800f486:	6013      	str	r3, [r2, #0]
 800f488:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800f48a:	f7f1 fbad 	bl	8000be8 <__aeabi_fsub>
 800f48e:	2701      	movs	r7, #1
 800f490:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800f494:	42bd      	cmp	r5, r7
 800f496:	da0c      	bge.n	800f4b2 <__kernel_rem_pio2f+0x4d6>
 800f498:	b10c      	cbz	r4, 800f49e <__kernel_rem_pio2f+0x4c2>
 800f49a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f49e:	9b00      	ldr	r3, [sp, #0]
 800f4a0:	6058      	str	r0, [r3, #4]
 800f4a2:	e7b2      	b.n	800f40a <__kernel_rem_pio2f+0x42e>
 800f4a4:	462f      	mov	r7, r5
 800f4a6:	2000      	movs	r0, #0
 800f4a8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800f4ac:	e7e4      	b.n	800f478 <__kernel_rem_pio2f+0x49c>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	e7e7      	b.n	800f482 <__kernel_rem_pio2f+0x4a6>
 800f4b2:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800f4b6:	f7f1 fb99 	bl	8000bec <__addsf3>
 800f4ba:	3701      	adds	r7, #1
 800f4bc:	e7ea      	b.n	800f494 <__kernel_rem_pio2f+0x4b8>
 800f4be:	f8d8 3000 	ldr.w	r3, [r8]
 800f4c2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	4610      	mov	r0, r2
 800f4ca:	9302      	str	r3, [sp, #8]
 800f4cc:	9201      	str	r2, [sp, #4]
 800f4ce:	f7f1 fb8d 	bl	8000bec <__addsf3>
 800f4d2:	9a01      	ldr	r2, [sp, #4]
 800f4d4:	4601      	mov	r1, r0
 800f4d6:	4681      	mov	r9, r0
 800f4d8:	4610      	mov	r0, r2
 800f4da:	f7f1 fb85 	bl	8000be8 <__aeabi_fsub>
 800f4de:	9b02      	ldr	r3, [sp, #8]
 800f4e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	f7f1 fb81 	bl	8000bec <__addsf3>
 800f4ea:	f848 0904 	str.w	r0, [r8], #-4
 800f4ee:	f8c8 9000 	str.w	r9, [r8]
 800f4f2:	e798      	b.n	800f426 <__kernel_rem_pio2f+0x44a>
 800f4f4:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800f4f8:	f8d7 a000 	ldr.w	sl, [r7]
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	4651      	mov	r1, sl
 800f500:	9301      	str	r3, [sp, #4]
 800f502:	f7f1 fb73 	bl	8000bec <__addsf3>
 800f506:	9b01      	ldr	r3, [sp, #4]
 800f508:	4601      	mov	r1, r0
 800f50a:	4680      	mov	r8, r0
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7f1 fb6b 	bl	8000be8 <__aeabi_fsub>
 800f512:	4651      	mov	r1, sl
 800f514:	f7f1 fb6a 	bl	8000bec <__addsf3>
 800f518:	f847 0904 	str.w	r0, [r7], #-4
 800f51c:	f109 39ff 	add.w	r9, r9, #4294967295
 800f520:	f8c7 8000 	str.w	r8, [r7]
 800f524:	e783      	b.n	800f42e <__kernel_rem_pio2f+0x452>
 800f526:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800f52a:	f7f1 fb5f 	bl	8000bec <__addsf3>
 800f52e:	3d01      	subs	r5, #1
 800f530:	e781      	b.n	800f436 <__kernel_rem_pio2f+0x45a>
 800f532:	9900      	ldr	r1, [sp, #0]
 800f534:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800f538:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f53c:	600a      	str	r2, [r1, #0]
 800f53e:	604b      	str	r3, [r1, #4]
 800f540:	460a      	mov	r2, r1
 800f542:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f546:	e780      	b.n	800f44a <__kernel_rem_pio2f+0x46e>

0800f548 <__kernel_sinf>:
 800f548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f54c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f550:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f554:	4604      	mov	r4, r0
 800f556:	460f      	mov	r7, r1
 800f558:	4691      	mov	r9, r2
 800f55a:	da03      	bge.n	800f564 <__kernel_sinf+0x1c>
 800f55c:	f7f1 fe2a 	bl	80011b4 <__aeabi_f2iz>
 800f560:	2800      	cmp	r0, #0
 800f562:	d035      	beq.n	800f5d0 <__kernel_sinf+0x88>
 800f564:	4621      	mov	r1, r4
 800f566:	4620      	mov	r0, r4
 800f568:	f7f1 fc48 	bl	8000dfc <__aeabi_fmul>
 800f56c:	4605      	mov	r5, r0
 800f56e:	4601      	mov	r1, r0
 800f570:	4620      	mov	r0, r4
 800f572:	f7f1 fc43 	bl	8000dfc <__aeabi_fmul>
 800f576:	4929      	ldr	r1, [pc, #164]	; (800f61c <__kernel_sinf+0xd4>)
 800f578:	4606      	mov	r6, r0
 800f57a:	4628      	mov	r0, r5
 800f57c:	f7f1 fc3e 	bl	8000dfc <__aeabi_fmul>
 800f580:	4927      	ldr	r1, [pc, #156]	; (800f620 <__kernel_sinf+0xd8>)
 800f582:	f7f1 fb31 	bl	8000be8 <__aeabi_fsub>
 800f586:	4629      	mov	r1, r5
 800f588:	f7f1 fc38 	bl	8000dfc <__aeabi_fmul>
 800f58c:	4925      	ldr	r1, [pc, #148]	; (800f624 <__kernel_sinf+0xdc>)
 800f58e:	f7f1 fb2d 	bl	8000bec <__addsf3>
 800f592:	4629      	mov	r1, r5
 800f594:	f7f1 fc32 	bl	8000dfc <__aeabi_fmul>
 800f598:	4923      	ldr	r1, [pc, #140]	; (800f628 <__kernel_sinf+0xe0>)
 800f59a:	f7f1 fb25 	bl	8000be8 <__aeabi_fsub>
 800f59e:	4629      	mov	r1, r5
 800f5a0:	f7f1 fc2c 	bl	8000dfc <__aeabi_fmul>
 800f5a4:	4921      	ldr	r1, [pc, #132]	; (800f62c <__kernel_sinf+0xe4>)
 800f5a6:	f7f1 fb21 	bl	8000bec <__addsf3>
 800f5aa:	4680      	mov	r8, r0
 800f5ac:	f1b9 0f00 	cmp.w	r9, #0
 800f5b0:	d111      	bne.n	800f5d6 <__kernel_sinf+0x8e>
 800f5b2:	4601      	mov	r1, r0
 800f5b4:	4628      	mov	r0, r5
 800f5b6:	f7f1 fc21 	bl	8000dfc <__aeabi_fmul>
 800f5ba:	491d      	ldr	r1, [pc, #116]	; (800f630 <__kernel_sinf+0xe8>)
 800f5bc:	f7f1 fb14 	bl	8000be8 <__aeabi_fsub>
 800f5c0:	4631      	mov	r1, r6
 800f5c2:	f7f1 fc1b 	bl	8000dfc <__aeabi_fmul>
 800f5c6:	4601      	mov	r1, r0
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	f7f1 fb0f 	bl	8000bec <__addsf3>
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f5da:	4638      	mov	r0, r7
 800f5dc:	f7f1 fc0e 	bl	8000dfc <__aeabi_fmul>
 800f5e0:	4641      	mov	r1, r8
 800f5e2:	4681      	mov	r9, r0
 800f5e4:	4630      	mov	r0, r6
 800f5e6:	f7f1 fc09 	bl	8000dfc <__aeabi_fmul>
 800f5ea:	4601      	mov	r1, r0
 800f5ec:	4648      	mov	r0, r9
 800f5ee:	f7f1 fafb 	bl	8000be8 <__aeabi_fsub>
 800f5f2:	4629      	mov	r1, r5
 800f5f4:	f7f1 fc02 	bl	8000dfc <__aeabi_fmul>
 800f5f8:	4639      	mov	r1, r7
 800f5fa:	f7f1 faf5 	bl	8000be8 <__aeabi_fsub>
 800f5fe:	490c      	ldr	r1, [pc, #48]	; (800f630 <__kernel_sinf+0xe8>)
 800f600:	4605      	mov	r5, r0
 800f602:	4630      	mov	r0, r6
 800f604:	f7f1 fbfa 	bl	8000dfc <__aeabi_fmul>
 800f608:	4601      	mov	r1, r0
 800f60a:	4628      	mov	r0, r5
 800f60c:	f7f1 faee 	bl	8000bec <__addsf3>
 800f610:	4601      	mov	r1, r0
 800f612:	4620      	mov	r0, r4
 800f614:	f7f1 fae8 	bl	8000be8 <__aeabi_fsub>
 800f618:	e7d9      	b.n	800f5ce <__kernel_sinf+0x86>
 800f61a:	bf00      	nop
 800f61c:	2f2ec9d3 	.word	0x2f2ec9d3
 800f620:	32d72f34 	.word	0x32d72f34
 800f624:	3638ef1b 	.word	0x3638ef1b
 800f628:	39500d01 	.word	0x39500d01
 800f62c:	3c088889 	.word	0x3c088889
 800f630:	3e2aaaab 	.word	0x3e2aaaab

0800f634 <fabs>:
 800f634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f638:	4770      	bx	lr
 800f63a:	0000      	movs	r0, r0
 800f63c:	0000      	movs	r0, r0
	...

0800f640 <floor>:
 800f640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f644:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800f648:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800f64c:	2e13      	cmp	r6, #19
 800f64e:	4602      	mov	r2, r0
 800f650:	460b      	mov	r3, r1
 800f652:	4607      	mov	r7, r0
 800f654:	460c      	mov	r4, r1
 800f656:	4605      	mov	r5, r0
 800f658:	dc34      	bgt.n	800f6c4 <floor+0x84>
 800f65a:	2e00      	cmp	r6, #0
 800f65c:	da15      	bge.n	800f68a <floor+0x4a>
 800f65e:	a334      	add	r3, pc, #208	; (adr r3, 800f730 <floor+0xf0>)
 800f660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f664:	f7f0 fdbe 	bl	80001e4 <__adddf3>
 800f668:	2200      	movs	r2, #0
 800f66a:	2300      	movs	r3, #0
 800f66c:	f7f1 fa00 	bl	8000a70 <__aeabi_dcmpgt>
 800f670:	b140      	cbz	r0, 800f684 <floor+0x44>
 800f672:	2c00      	cmp	r4, #0
 800f674:	da59      	bge.n	800f72a <floor+0xea>
 800f676:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f67a:	ea57 0503 	orrs.w	r5, r7, r3
 800f67e:	d001      	beq.n	800f684 <floor+0x44>
 800f680:	2500      	movs	r5, #0
 800f682:	4c2d      	ldr	r4, [pc, #180]	; (800f738 <floor+0xf8>)
 800f684:	4623      	mov	r3, r4
 800f686:	462f      	mov	r7, r5
 800f688:	e025      	b.n	800f6d6 <floor+0x96>
 800f68a:	4a2c      	ldr	r2, [pc, #176]	; (800f73c <floor+0xfc>)
 800f68c:	fa42 f806 	asr.w	r8, r2, r6
 800f690:	ea01 0208 	and.w	r2, r1, r8
 800f694:	4302      	orrs	r2, r0
 800f696:	d01e      	beq.n	800f6d6 <floor+0x96>
 800f698:	a325      	add	r3, pc, #148	; (adr r3, 800f730 <floor+0xf0>)
 800f69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69e:	f7f0 fda1 	bl	80001e4 <__adddf3>
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	f7f1 f9e3 	bl	8000a70 <__aeabi_dcmpgt>
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	d0ea      	beq.n	800f684 <floor+0x44>
 800f6ae:	2c00      	cmp	r4, #0
 800f6b0:	bfbe      	ittt	lt
 800f6b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f6b6:	fa43 f606 	asrlt.w	r6, r3, r6
 800f6ba:	19a4      	addlt	r4, r4, r6
 800f6bc:	2500      	movs	r5, #0
 800f6be:	ea24 0408 	bic.w	r4, r4, r8
 800f6c2:	e7df      	b.n	800f684 <floor+0x44>
 800f6c4:	2e33      	cmp	r6, #51	; 0x33
 800f6c6:	dd0a      	ble.n	800f6de <floor+0x9e>
 800f6c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f6cc:	d103      	bne.n	800f6d6 <floor+0x96>
 800f6ce:	f7f0 fd89 	bl	80001e4 <__adddf3>
 800f6d2:	4607      	mov	r7, r0
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	4638      	mov	r0, r7
 800f6d8:	4619      	mov	r1, r3
 800f6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6de:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e2:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800f6e6:	fa22 f808 	lsr.w	r8, r2, r8
 800f6ea:	ea18 0f00 	tst.w	r8, r0
 800f6ee:	d0f2      	beq.n	800f6d6 <floor+0x96>
 800f6f0:	a30f      	add	r3, pc, #60	; (adr r3, 800f730 <floor+0xf0>)
 800f6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f6:	f7f0 fd75 	bl	80001e4 <__adddf3>
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	f7f1 f9b7 	bl	8000a70 <__aeabi_dcmpgt>
 800f702:	2800      	cmp	r0, #0
 800f704:	d0be      	beq.n	800f684 <floor+0x44>
 800f706:	2c00      	cmp	r4, #0
 800f708:	da02      	bge.n	800f710 <floor+0xd0>
 800f70a:	2e14      	cmp	r6, #20
 800f70c:	d103      	bne.n	800f716 <floor+0xd6>
 800f70e:	3401      	adds	r4, #1
 800f710:	ea25 0508 	bic.w	r5, r5, r8
 800f714:	e7b6      	b.n	800f684 <floor+0x44>
 800f716:	2301      	movs	r3, #1
 800f718:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f71c:	fa03 f606 	lsl.w	r6, r3, r6
 800f720:	4435      	add	r5, r6
 800f722:	42bd      	cmp	r5, r7
 800f724:	bf38      	it	cc
 800f726:	18e4      	addcc	r4, r4, r3
 800f728:	e7f2      	b.n	800f710 <floor+0xd0>
 800f72a:	2500      	movs	r5, #0
 800f72c:	462c      	mov	r4, r5
 800f72e:	e7a9      	b.n	800f684 <floor+0x44>
 800f730:	8800759c 	.word	0x8800759c
 800f734:	7e37e43c 	.word	0x7e37e43c
 800f738:	bff00000 	.word	0xbff00000
 800f73c:	000fffff 	.word	0x000fffff

0800f740 <scalbn>:
 800f740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f742:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800f746:	4604      	mov	r4, r0
 800f748:	460d      	mov	r5, r1
 800f74a:	4617      	mov	r7, r2
 800f74c:	460b      	mov	r3, r1
 800f74e:	b996      	cbnz	r6, 800f776 <scalbn+0x36>
 800f750:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f754:	4303      	orrs	r3, r0
 800f756:	d039      	beq.n	800f7cc <scalbn+0x8c>
 800f758:	4b35      	ldr	r3, [pc, #212]	; (800f830 <scalbn+0xf0>)
 800f75a:	2200      	movs	r2, #0
 800f75c:	f7f0 fef8 	bl	8000550 <__aeabi_dmul>
 800f760:	4b34      	ldr	r3, [pc, #208]	; (800f834 <scalbn+0xf4>)
 800f762:	4604      	mov	r4, r0
 800f764:	429f      	cmp	r7, r3
 800f766:	460d      	mov	r5, r1
 800f768:	da0f      	bge.n	800f78a <scalbn+0x4a>
 800f76a:	a32d      	add	r3, pc, #180	; (adr r3, 800f820 <scalbn+0xe0>)
 800f76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f770:	f7f0 feee 	bl	8000550 <__aeabi_dmul>
 800f774:	e006      	b.n	800f784 <scalbn+0x44>
 800f776:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f77a:	4296      	cmp	r6, r2
 800f77c:	d10a      	bne.n	800f794 <scalbn+0x54>
 800f77e:	4602      	mov	r2, r0
 800f780:	f7f0 fd30 	bl	80001e4 <__adddf3>
 800f784:	4604      	mov	r4, r0
 800f786:	460d      	mov	r5, r1
 800f788:	e020      	b.n	800f7cc <scalbn+0x8c>
 800f78a:	460b      	mov	r3, r1
 800f78c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f790:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800f794:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800f798:	19b9      	adds	r1, r7, r6
 800f79a:	4291      	cmp	r1, r2
 800f79c:	dd0e      	ble.n	800f7bc <scalbn+0x7c>
 800f79e:	a322      	add	r3, pc, #136	; (adr r3, 800f828 <scalbn+0xe8>)
 800f7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800f7a8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800f7ac:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800f7b0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800f7b4:	4820      	ldr	r0, [pc, #128]	; (800f838 <scalbn+0xf8>)
 800f7b6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800f7ba:	e7d9      	b.n	800f770 <scalbn+0x30>
 800f7bc:	2900      	cmp	r1, #0
 800f7be:	dd08      	ble.n	800f7d2 <scalbn+0x92>
 800f7c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f7c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f7c8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	4629      	mov	r1, r5
 800f7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7d2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800f7d6:	da16      	bge.n	800f806 <scalbn+0xc6>
 800f7d8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f7dc:	429f      	cmp	r7, r3
 800f7de:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800f7e2:	dd08      	ble.n	800f7f6 <scalbn+0xb6>
 800f7e4:	4c15      	ldr	r4, [pc, #84]	; (800f83c <scalbn+0xfc>)
 800f7e6:	4814      	ldr	r0, [pc, #80]	; (800f838 <scalbn+0xf8>)
 800f7e8:	f363 74df 	bfi	r4, r3, #31, #1
 800f7ec:	a30e      	add	r3, pc, #56	; (adr r3, 800f828 <scalbn+0xe8>)
 800f7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f2:	4621      	mov	r1, r4
 800f7f4:	e7bc      	b.n	800f770 <scalbn+0x30>
 800f7f6:	4c12      	ldr	r4, [pc, #72]	; (800f840 <scalbn+0x100>)
 800f7f8:	4812      	ldr	r0, [pc, #72]	; (800f844 <scalbn+0x104>)
 800f7fa:	f363 74df 	bfi	r4, r3, #31, #1
 800f7fe:	a308      	add	r3, pc, #32	; (adr r3, 800f820 <scalbn+0xe0>)
 800f800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f804:	e7f5      	b.n	800f7f2 <scalbn+0xb2>
 800f806:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f80a:	3136      	adds	r1, #54	; 0x36
 800f80c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f810:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800f814:	4620      	mov	r0, r4
 800f816:	4629      	mov	r1, r5
 800f818:	2200      	movs	r2, #0
 800f81a:	4b0b      	ldr	r3, [pc, #44]	; (800f848 <scalbn+0x108>)
 800f81c:	e7a8      	b.n	800f770 <scalbn+0x30>
 800f81e:	bf00      	nop
 800f820:	c2f8f359 	.word	0xc2f8f359
 800f824:	01a56e1f 	.word	0x01a56e1f
 800f828:	8800759c 	.word	0x8800759c
 800f82c:	7e37e43c 	.word	0x7e37e43c
 800f830:	43500000 	.word	0x43500000
 800f834:	ffff3cb0 	.word	0xffff3cb0
 800f838:	8800759c 	.word	0x8800759c
 800f83c:	7e37e43c 	.word	0x7e37e43c
 800f840:	01a56e1f 	.word	0x01a56e1f
 800f844:	c2f8f359 	.word	0xc2f8f359
 800f848:	3c900000 	.word	0x3c900000

0800f84c <floorf>:
 800f84c:	b570      	push	{r4, r5, r6, lr}
 800f84e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800f852:	3d7f      	subs	r5, #127	; 0x7f
 800f854:	2d16      	cmp	r5, #22
 800f856:	4601      	mov	r1, r0
 800f858:	4604      	mov	r4, r0
 800f85a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800f85e:	dc26      	bgt.n	800f8ae <floorf+0x62>
 800f860:	2d00      	cmp	r5, #0
 800f862:	da0e      	bge.n	800f882 <floorf+0x36>
 800f864:	4917      	ldr	r1, [pc, #92]	; (800f8c4 <floorf+0x78>)
 800f866:	f7f1 f9c1 	bl	8000bec <__addsf3>
 800f86a:	2100      	movs	r1, #0
 800f86c:	f7f1 fc82 	bl	8001174 <__aeabi_fcmpgt>
 800f870:	b128      	cbz	r0, 800f87e <floorf+0x32>
 800f872:	2c00      	cmp	r4, #0
 800f874:	da23      	bge.n	800f8be <floorf+0x72>
 800f876:	4b14      	ldr	r3, [pc, #80]	; (800f8c8 <floorf+0x7c>)
 800f878:	2e00      	cmp	r6, #0
 800f87a:	bf18      	it	ne
 800f87c:	461c      	movne	r4, r3
 800f87e:	4621      	mov	r1, r4
 800f880:	e01b      	b.n	800f8ba <floorf+0x6e>
 800f882:	4e12      	ldr	r6, [pc, #72]	; (800f8cc <floorf+0x80>)
 800f884:	412e      	asrs	r6, r5
 800f886:	4230      	tst	r0, r6
 800f888:	d017      	beq.n	800f8ba <floorf+0x6e>
 800f88a:	490e      	ldr	r1, [pc, #56]	; (800f8c4 <floorf+0x78>)
 800f88c:	f7f1 f9ae 	bl	8000bec <__addsf3>
 800f890:	2100      	movs	r1, #0
 800f892:	f7f1 fc6f 	bl	8001174 <__aeabi_fcmpgt>
 800f896:	2800      	cmp	r0, #0
 800f898:	d0f1      	beq.n	800f87e <floorf+0x32>
 800f89a:	2c00      	cmp	r4, #0
 800f89c:	bfbe      	ittt	lt
 800f89e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800f8a2:	fa43 f505 	asrlt.w	r5, r3, r5
 800f8a6:	1964      	addlt	r4, r4, r5
 800f8a8:	ea24 0406 	bic.w	r4, r4, r6
 800f8ac:	e7e7      	b.n	800f87e <floorf+0x32>
 800f8ae:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800f8b2:	d302      	bcc.n	800f8ba <floorf+0x6e>
 800f8b4:	f7f1 f99a 	bl	8000bec <__addsf3>
 800f8b8:	4601      	mov	r1, r0
 800f8ba:	4608      	mov	r0, r1
 800f8bc:	bd70      	pop	{r4, r5, r6, pc}
 800f8be:	2400      	movs	r4, #0
 800f8c0:	e7dd      	b.n	800f87e <floorf+0x32>
 800f8c2:	bf00      	nop
 800f8c4:	7149f2ca 	.word	0x7149f2ca
 800f8c8:	bf800000 	.word	0xbf800000
 800f8cc:	007fffff 	.word	0x007fffff

0800f8d0 <nanf>:
 800f8d0:	4800      	ldr	r0, [pc, #0]	; (800f8d4 <nanf+0x4>)
 800f8d2:	4770      	bx	lr
 800f8d4:	7fc00000 	.word	0x7fc00000

0800f8d8 <scalbnf>:
 800f8d8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800f8dc:	b538      	push	{r3, r4, r5, lr}
 800f8de:	4603      	mov	r3, r0
 800f8e0:	460d      	mov	r5, r1
 800f8e2:	4604      	mov	r4, r0
 800f8e4:	d02a      	beq.n	800f93c <scalbnf+0x64>
 800f8e6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f8ea:	d304      	bcc.n	800f8f6 <scalbnf+0x1e>
 800f8ec:	4601      	mov	r1, r0
 800f8ee:	f7f1 f97d 	bl	8000bec <__addsf3>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	e022      	b.n	800f93c <scalbnf+0x64>
 800f8f6:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800f8fa:	d117      	bne.n	800f92c <scalbnf+0x54>
 800f8fc:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800f900:	f7f1 fa7c 	bl	8000dfc <__aeabi_fmul>
 800f904:	4a17      	ldr	r2, [pc, #92]	; (800f964 <scalbnf+0x8c>)
 800f906:	4603      	mov	r3, r0
 800f908:	4295      	cmp	r5, r2
 800f90a:	db0b      	blt.n	800f924 <scalbnf+0x4c>
 800f90c:	4604      	mov	r4, r0
 800f90e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800f912:	3a19      	subs	r2, #25
 800f914:	442a      	add	r2, r5
 800f916:	2afe      	cmp	r2, #254	; 0xfe
 800f918:	dd0a      	ble.n	800f930 <scalbnf+0x58>
 800f91a:	4913      	ldr	r1, [pc, #76]	; (800f968 <scalbnf+0x90>)
 800f91c:	4618      	mov	r0, r3
 800f91e:	f361 001e 	bfi	r0, r1, #0, #31
 800f922:	e000      	b.n	800f926 <scalbnf+0x4e>
 800f924:	4911      	ldr	r1, [pc, #68]	; (800f96c <scalbnf+0x94>)
 800f926:	f7f1 fa69 	bl	8000dfc <__aeabi_fmul>
 800f92a:	e7e2      	b.n	800f8f2 <scalbnf+0x1a>
 800f92c:	0dd2      	lsrs	r2, r2, #23
 800f92e:	e7f1      	b.n	800f914 <scalbnf+0x3c>
 800f930:	2a00      	cmp	r2, #0
 800f932:	dd05      	ble.n	800f940 <scalbnf+0x68>
 800f934:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800f938:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800f93c:	4618      	mov	r0, r3
 800f93e:	bd38      	pop	{r3, r4, r5, pc}
 800f940:	f112 0f16 	cmn.w	r2, #22
 800f944:	da05      	bge.n	800f952 <scalbnf+0x7a>
 800f946:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f94a:	4295      	cmp	r5, r2
 800f94c:	dce5      	bgt.n	800f91a <scalbnf+0x42>
 800f94e:	4907      	ldr	r1, [pc, #28]	; (800f96c <scalbnf+0x94>)
 800f950:	e7e4      	b.n	800f91c <scalbnf+0x44>
 800f952:	3219      	adds	r2, #25
 800f954:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800f958:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800f95c:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800f960:	e7e1      	b.n	800f926 <scalbnf+0x4e>
 800f962:	bf00      	nop
 800f964:	ffff3cb0 	.word	0xffff3cb0
 800f968:	7149f2ca 	.word	0x7149f2ca
 800f96c:	0da24260 	.word	0x0da24260

0800f970 <__errno>:
 800f970:	4b01      	ldr	r3, [pc, #4]	; (800f978 <__errno+0x8>)
 800f972:	6818      	ldr	r0, [r3, #0]
 800f974:	4770      	bx	lr
 800f976:	bf00      	nop
 800f978:	200001a8 	.word	0x200001a8

0800f97c <__libc_init_array>:
 800f97c:	b570      	push	{r4, r5, r6, lr}
 800f97e:	2600      	movs	r6, #0
 800f980:	4d0c      	ldr	r5, [pc, #48]	; (800f9b4 <__libc_init_array+0x38>)
 800f982:	4c0d      	ldr	r4, [pc, #52]	; (800f9b8 <__libc_init_array+0x3c>)
 800f984:	1b64      	subs	r4, r4, r5
 800f986:	10a4      	asrs	r4, r4, #2
 800f988:	42a6      	cmp	r6, r4
 800f98a:	d109      	bne.n	800f9a0 <__libc_init_array+0x24>
 800f98c:	f002 fed8 	bl	8012740 <_init>
 800f990:	2600      	movs	r6, #0
 800f992:	4d0a      	ldr	r5, [pc, #40]	; (800f9bc <__libc_init_array+0x40>)
 800f994:	4c0a      	ldr	r4, [pc, #40]	; (800f9c0 <__libc_init_array+0x44>)
 800f996:	1b64      	subs	r4, r4, r5
 800f998:	10a4      	asrs	r4, r4, #2
 800f99a:	42a6      	cmp	r6, r4
 800f99c:	d105      	bne.n	800f9aa <__libc_init_array+0x2e>
 800f99e:	bd70      	pop	{r4, r5, r6, pc}
 800f9a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9a4:	4798      	blx	r3
 800f9a6:	3601      	adds	r6, #1
 800f9a8:	e7ee      	b.n	800f988 <__libc_init_array+0xc>
 800f9aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9ae:	4798      	blx	r3
 800f9b0:	3601      	adds	r6, #1
 800f9b2:	e7f2      	b.n	800f99a <__libc_init_array+0x1e>
 800f9b4:	08013a3c 	.word	0x08013a3c
 800f9b8:	08013a3c 	.word	0x08013a3c
 800f9bc:	08013a3c 	.word	0x08013a3c
 800f9c0:	08013a48 	.word	0x08013a48

0800f9c4 <malloc>:
 800f9c4:	4b02      	ldr	r3, [pc, #8]	; (800f9d0 <malloc+0xc>)
 800f9c6:	4601      	mov	r1, r0
 800f9c8:	6818      	ldr	r0, [r3, #0]
 800f9ca:	f000 b86d 	b.w	800faa8 <_malloc_r>
 800f9ce:	bf00      	nop
 800f9d0:	200001a8 	.word	0x200001a8

0800f9d4 <free>:
 800f9d4:	4b02      	ldr	r3, [pc, #8]	; (800f9e0 <free+0xc>)
 800f9d6:	4601      	mov	r1, r0
 800f9d8:	6818      	ldr	r0, [r3, #0]
 800f9da:	f000 b819 	b.w	800fa10 <_free_r>
 800f9de:	bf00      	nop
 800f9e0:	200001a8 	.word	0x200001a8

0800f9e4 <memcmp>:
 800f9e4:	b530      	push	{r4, r5, lr}
 800f9e6:	2400      	movs	r4, #0
 800f9e8:	3901      	subs	r1, #1
 800f9ea:	42a2      	cmp	r2, r4
 800f9ec:	d101      	bne.n	800f9f2 <memcmp+0xe>
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	e005      	b.n	800f9fe <memcmp+0x1a>
 800f9f2:	5d03      	ldrb	r3, [r0, r4]
 800f9f4:	3401      	adds	r4, #1
 800f9f6:	5d0d      	ldrb	r5, [r1, r4]
 800f9f8:	42ab      	cmp	r3, r5
 800f9fa:	d0f6      	beq.n	800f9ea <memcmp+0x6>
 800f9fc:	1b58      	subs	r0, r3, r5
 800f9fe:	bd30      	pop	{r4, r5, pc}

0800fa00 <memset>:
 800fa00:	4603      	mov	r3, r0
 800fa02:	4402      	add	r2, r0
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d100      	bne.n	800fa0a <memset+0xa>
 800fa08:	4770      	bx	lr
 800fa0a:	f803 1b01 	strb.w	r1, [r3], #1
 800fa0e:	e7f9      	b.n	800fa04 <memset+0x4>

0800fa10 <_free_r>:
 800fa10:	b538      	push	{r3, r4, r5, lr}
 800fa12:	4605      	mov	r5, r0
 800fa14:	2900      	cmp	r1, #0
 800fa16:	d043      	beq.n	800faa0 <_free_r+0x90>
 800fa18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa1c:	1f0c      	subs	r4, r1, #4
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	bfb8      	it	lt
 800fa22:	18e4      	addlt	r4, r4, r3
 800fa24:	f001 fbce 	bl	80111c4 <__malloc_lock>
 800fa28:	4a1e      	ldr	r2, [pc, #120]	; (800faa4 <_free_r+0x94>)
 800fa2a:	6813      	ldr	r3, [r2, #0]
 800fa2c:	4610      	mov	r0, r2
 800fa2e:	b933      	cbnz	r3, 800fa3e <_free_r+0x2e>
 800fa30:	6063      	str	r3, [r4, #4]
 800fa32:	6014      	str	r4, [r2, #0]
 800fa34:	4628      	mov	r0, r5
 800fa36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa3a:	f001 bbc9 	b.w	80111d0 <__malloc_unlock>
 800fa3e:	42a3      	cmp	r3, r4
 800fa40:	d90a      	bls.n	800fa58 <_free_r+0x48>
 800fa42:	6821      	ldr	r1, [r4, #0]
 800fa44:	1862      	adds	r2, r4, r1
 800fa46:	4293      	cmp	r3, r2
 800fa48:	bf01      	itttt	eq
 800fa4a:	681a      	ldreq	r2, [r3, #0]
 800fa4c:	685b      	ldreq	r3, [r3, #4]
 800fa4e:	1852      	addeq	r2, r2, r1
 800fa50:	6022      	streq	r2, [r4, #0]
 800fa52:	6063      	str	r3, [r4, #4]
 800fa54:	6004      	str	r4, [r0, #0]
 800fa56:	e7ed      	b.n	800fa34 <_free_r+0x24>
 800fa58:	461a      	mov	r2, r3
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	b10b      	cbz	r3, 800fa62 <_free_r+0x52>
 800fa5e:	42a3      	cmp	r3, r4
 800fa60:	d9fa      	bls.n	800fa58 <_free_r+0x48>
 800fa62:	6811      	ldr	r1, [r2, #0]
 800fa64:	1850      	adds	r0, r2, r1
 800fa66:	42a0      	cmp	r0, r4
 800fa68:	d10b      	bne.n	800fa82 <_free_r+0x72>
 800fa6a:	6820      	ldr	r0, [r4, #0]
 800fa6c:	4401      	add	r1, r0
 800fa6e:	1850      	adds	r0, r2, r1
 800fa70:	4283      	cmp	r3, r0
 800fa72:	6011      	str	r1, [r2, #0]
 800fa74:	d1de      	bne.n	800fa34 <_free_r+0x24>
 800fa76:	6818      	ldr	r0, [r3, #0]
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	4401      	add	r1, r0
 800fa7c:	6011      	str	r1, [r2, #0]
 800fa7e:	6053      	str	r3, [r2, #4]
 800fa80:	e7d8      	b.n	800fa34 <_free_r+0x24>
 800fa82:	d902      	bls.n	800fa8a <_free_r+0x7a>
 800fa84:	230c      	movs	r3, #12
 800fa86:	602b      	str	r3, [r5, #0]
 800fa88:	e7d4      	b.n	800fa34 <_free_r+0x24>
 800fa8a:	6820      	ldr	r0, [r4, #0]
 800fa8c:	1821      	adds	r1, r4, r0
 800fa8e:	428b      	cmp	r3, r1
 800fa90:	bf01      	itttt	eq
 800fa92:	6819      	ldreq	r1, [r3, #0]
 800fa94:	685b      	ldreq	r3, [r3, #4]
 800fa96:	1809      	addeq	r1, r1, r0
 800fa98:	6021      	streq	r1, [r4, #0]
 800fa9a:	6063      	str	r3, [r4, #4]
 800fa9c:	6054      	str	r4, [r2, #4]
 800fa9e:	e7c9      	b.n	800fa34 <_free_r+0x24>
 800faa0:	bd38      	pop	{r3, r4, r5, pc}
 800faa2:	bf00      	nop
 800faa4:	200007e0 	.word	0x200007e0

0800faa8 <_malloc_r>:
 800faa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faaa:	1ccd      	adds	r5, r1, #3
 800faac:	f025 0503 	bic.w	r5, r5, #3
 800fab0:	3508      	adds	r5, #8
 800fab2:	2d0c      	cmp	r5, #12
 800fab4:	bf38      	it	cc
 800fab6:	250c      	movcc	r5, #12
 800fab8:	2d00      	cmp	r5, #0
 800faba:	4606      	mov	r6, r0
 800fabc:	db01      	blt.n	800fac2 <_malloc_r+0x1a>
 800fabe:	42a9      	cmp	r1, r5
 800fac0:	d903      	bls.n	800faca <_malloc_r+0x22>
 800fac2:	230c      	movs	r3, #12
 800fac4:	6033      	str	r3, [r6, #0]
 800fac6:	2000      	movs	r0, #0
 800fac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faca:	f001 fb7b 	bl	80111c4 <__malloc_lock>
 800face:	4921      	ldr	r1, [pc, #132]	; (800fb54 <_malloc_r+0xac>)
 800fad0:	680a      	ldr	r2, [r1, #0]
 800fad2:	4614      	mov	r4, r2
 800fad4:	b99c      	cbnz	r4, 800fafe <_malloc_r+0x56>
 800fad6:	4f20      	ldr	r7, [pc, #128]	; (800fb58 <_malloc_r+0xb0>)
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	b923      	cbnz	r3, 800fae6 <_malloc_r+0x3e>
 800fadc:	4621      	mov	r1, r4
 800fade:	4630      	mov	r0, r6
 800fae0:	f000 fca4 	bl	801042c <_sbrk_r>
 800fae4:	6038      	str	r0, [r7, #0]
 800fae6:	4629      	mov	r1, r5
 800fae8:	4630      	mov	r0, r6
 800faea:	f000 fc9f 	bl	801042c <_sbrk_r>
 800faee:	1c43      	adds	r3, r0, #1
 800faf0:	d123      	bne.n	800fb3a <_malloc_r+0x92>
 800faf2:	230c      	movs	r3, #12
 800faf4:	4630      	mov	r0, r6
 800faf6:	6033      	str	r3, [r6, #0]
 800faf8:	f001 fb6a 	bl	80111d0 <__malloc_unlock>
 800fafc:	e7e3      	b.n	800fac6 <_malloc_r+0x1e>
 800fafe:	6823      	ldr	r3, [r4, #0]
 800fb00:	1b5b      	subs	r3, r3, r5
 800fb02:	d417      	bmi.n	800fb34 <_malloc_r+0x8c>
 800fb04:	2b0b      	cmp	r3, #11
 800fb06:	d903      	bls.n	800fb10 <_malloc_r+0x68>
 800fb08:	6023      	str	r3, [r4, #0]
 800fb0a:	441c      	add	r4, r3
 800fb0c:	6025      	str	r5, [r4, #0]
 800fb0e:	e004      	b.n	800fb1a <_malloc_r+0x72>
 800fb10:	6863      	ldr	r3, [r4, #4]
 800fb12:	42a2      	cmp	r2, r4
 800fb14:	bf0c      	ite	eq
 800fb16:	600b      	streq	r3, [r1, #0]
 800fb18:	6053      	strne	r3, [r2, #4]
 800fb1a:	4630      	mov	r0, r6
 800fb1c:	f001 fb58 	bl	80111d0 <__malloc_unlock>
 800fb20:	f104 000b 	add.w	r0, r4, #11
 800fb24:	1d23      	adds	r3, r4, #4
 800fb26:	f020 0007 	bic.w	r0, r0, #7
 800fb2a:	1ac2      	subs	r2, r0, r3
 800fb2c:	d0cc      	beq.n	800fac8 <_malloc_r+0x20>
 800fb2e:	1a1b      	subs	r3, r3, r0
 800fb30:	50a3      	str	r3, [r4, r2]
 800fb32:	e7c9      	b.n	800fac8 <_malloc_r+0x20>
 800fb34:	4622      	mov	r2, r4
 800fb36:	6864      	ldr	r4, [r4, #4]
 800fb38:	e7cc      	b.n	800fad4 <_malloc_r+0x2c>
 800fb3a:	1cc4      	adds	r4, r0, #3
 800fb3c:	f024 0403 	bic.w	r4, r4, #3
 800fb40:	42a0      	cmp	r0, r4
 800fb42:	d0e3      	beq.n	800fb0c <_malloc_r+0x64>
 800fb44:	1a21      	subs	r1, r4, r0
 800fb46:	4630      	mov	r0, r6
 800fb48:	f000 fc70 	bl	801042c <_sbrk_r>
 800fb4c:	3001      	adds	r0, #1
 800fb4e:	d1dd      	bne.n	800fb0c <_malloc_r+0x64>
 800fb50:	e7cf      	b.n	800faf2 <_malloc_r+0x4a>
 800fb52:	bf00      	nop
 800fb54:	200007e0 	.word	0x200007e0
 800fb58:	200007e4 	.word	0x200007e4

0800fb5c <__cvt>:
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb62:	461f      	mov	r7, r3
 800fb64:	bfbb      	ittet	lt
 800fb66:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800fb6a:	461f      	movlt	r7, r3
 800fb6c:	2300      	movge	r3, #0
 800fb6e:	232d      	movlt	r3, #45	; 0x2d
 800fb70:	b088      	sub	sp, #32
 800fb72:	4614      	mov	r4, r2
 800fb74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb76:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800fb78:	7013      	strb	r3, [r2, #0]
 800fb7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fb7c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800fb80:	f023 0820 	bic.w	r8, r3, #32
 800fb84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fb88:	d005      	beq.n	800fb96 <__cvt+0x3a>
 800fb8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fb8e:	d100      	bne.n	800fb92 <__cvt+0x36>
 800fb90:	3501      	adds	r5, #1
 800fb92:	2302      	movs	r3, #2
 800fb94:	e000      	b.n	800fb98 <__cvt+0x3c>
 800fb96:	2303      	movs	r3, #3
 800fb98:	aa07      	add	r2, sp, #28
 800fb9a:	9204      	str	r2, [sp, #16]
 800fb9c:	aa06      	add	r2, sp, #24
 800fb9e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800fba2:	e9cd 3500 	strd	r3, r5, [sp]
 800fba6:	4622      	mov	r2, r4
 800fba8:	463b      	mov	r3, r7
 800fbaa:	f000 fcfd 	bl	80105a8 <_dtoa_r>
 800fbae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fbb2:	4606      	mov	r6, r0
 800fbb4:	d102      	bne.n	800fbbc <__cvt+0x60>
 800fbb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fbb8:	07db      	lsls	r3, r3, #31
 800fbba:	d522      	bpl.n	800fc02 <__cvt+0xa6>
 800fbbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fbc0:	eb06 0905 	add.w	r9, r6, r5
 800fbc4:	d110      	bne.n	800fbe8 <__cvt+0x8c>
 800fbc6:	7833      	ldrb	r3, [r6, #0]
 800fbc8:	2b30      	cmp	r3, #48	; 0x30
 800fbca:	d10a      	bne.n	800fbe2 <__cvt+0x86>
 800fbcc:	2200      	movs	r2, #0
 800fbce:	2300      	movs	r3, #0
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	4639      	mov	r1, r7
 800fbd4:	f7f0 ff24 	bl	8000a20 <__aeabi_dcmpeq>
 800fbd8:	b918      	cbnz	r0, 800fbe2 <__cvt+0x86>
 800fbda:	f1c5 0501 	rsb	r5, r5, #1
 800fbde:	f8ca 5000 	str.w	r5, [sl]
 800fbe2:	f8da 3000 	ldr.w	r3, [sl]
 800fbe6:	4499      	add	r9, r3
 800fbe8:	2200      	movs	r2, #0
 800fbea:	2300      	movs	r3, #0
 800fbec:	4620      	mov	r0, r4
 800fbee:	4639      	mov	r1, r7
 800fbf0:	f7f0 ff16 	bl	8000a20 <__aeabi_dcmpeq>
 800fbf4:	b108      	cbz	r0, 800fbfa <__cvt+0x9e>
 800fbf6:	f8cd 901c 	str.w	r9, [sp, #28]
 800fbfa:	2230      	movs	r2, #48	; 0x30
 800fbfc:	9b07      	ldr	r3, [sp, #28]
 800fbfe:	454b      	cmp	r3, r9
 800fc00:	d307      	bcc.n	800fc12 <__cvt+0xb6>
 800fc02:	4630      	mov	r0, r6
 800fc04:	9b07      	ldr	r3, [sp, #28]
 800fc06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fc08:	1b9b      	subs	r3, r3, r6
 800fc0a:	6013      	str	r3, [r2, #0]
 800fc0c:	b008      	add	sp, #32
 800fc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc12:	1c59      	adds	r1, r3, #1
 800fc14:	9107      	str	r1, [sp, #28]
 800fc16:	701a      	strb	r2, [r3, #0]
 800fc18:	e7f0      	b.n	800fbfc <__cvt+0xa0>

0800fc1a <__exponent>:
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc1e:	2900      	cmp	r1, #0
 800fc20:	f803 2b02 	strb.w	r2, [r3], #2
 800fc24:	bfb6      	itet	lt
 800fc26:	222d      	movlt	r2, #45	; 0x2d
 800fc28:	222b      	movge	r2, #43	; 0x2b
 800fc2a:	4249      	neglt	r1, r1
 800fc2c:	2909      	cmp	r1, #9
 800fc2e:	7042      	strb	r2, [r0, #1]
 800fc30:	dd2b      	ble.n	800fc8a <__exponent+0x70>
 800fc32:	f10d 0407 	add.w	r4, sp, #7
 800fc36:	46a4      	mov	ip, r4
 800fc38:	270a      	movs	r7, #10
 800fc3a:	fb91 f6f7 	sdiv	r6, r1, r7
 800fc3e:	460a      	mov	r2, r1
 800fc40:	46a6      	mov	lr, r4
 800fc42:	fb07 1516 	mls	r5, r7, r6, r1
 800fc46:	2a63      	cmp	r2, #99	; 0x63
 800fc48:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800fc4c:	4631      	mov	r1, r6
 800fc4e:	f104 34ff 	add.w	r4, r4, #4294967295
 800fc52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fc56:	dcf0      	bgt.n	800fc3a <__exponent+0x20>
 800fc58:	3130      	adds	r1, #48	; 0x30
 800fc5a:	f1ae 0502 	sub.w	r5, lr, #2
 800fc5e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fc62:	4629      	mov	r1, r5
 800fc64:	1c44      	adds	r4, r0, #1
 800fc66:	4561      	cmp	r1, ip
 800fc68:	d30a      	bcc.n	800fc80 <__exponent+0x66>
 800fc6a:	f10d 0209 	add.w	r2, sp, #9
 800fc6e:	eba2 020e 	sub.w	r2, r2, lr
 800fc72:	4565      	cmp	r5, ip
 800fc74:	bf88      	it	hi
 800fc76:	2200      	movhi	r2, #0
 800fc78:	4413      	add	r3, r2
 800fc7a:	1a18      	subs	r0, r3, r0
 800fc7c:	b003      	add	sp, #12
 800fc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc80:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc84:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fc88:	e7ed      	b.n	800fc66 <__exponent+0x4c>
 800fc8a:	2330      	movs	r3, #48	; 0x30
 800fc8c:	3130      	adds	r1, #48	; 0x30
 800fc8e:	7083      	strb	r3, [r0, #2]
 800fc90:	70c1      	strb	r1, [r0, #3]
 800fc92:	1d03      	adds	r3, r0, #4
 800fc94:	e7f1      	b.n	800fc7a <__exponent+0x60>
	...

0800fc98 <_printf_float>:
 800fc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc9c:	b091      	sub	sp, #68	; 0x44
 800fc9e:	460c      	mov	r4, r1
 800fca0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800fca4:	4616      	mov	r6, r2
 800fca6:	461f      	mov	r7, r3
 800fca8:	4605      	mov	r5, r0
 800fcaa:	f001 fa6b 	bl	8011184 <_localeconv_r>
 800fcae:	6803      	ldr	r3, [r0, #0]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	9309      	str	r3, [sp, #36]	; 0x24
 800fcb4:	f7f0 fa88 	bl	80001c8 <strlen>
 800fcb8:	2300      	movs	r3, #0
 800fcba:	930e      	str	r3, [sp, #56]	; 0x38
 800fcbc:	f8d8 3000 	ldr.w	r3, [r8]
 800fcc0:	900a      	str	r0, [sp, #40]	; 0x28
 800fcc2:	3307      	adds	r3, #7
 800fcc4:	f023 0307 	bic.w	r3, r3, #7
 800fcc8:	f103 0208 	add.w	r2, r3, #8
 800fccc:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fcd0:	f8d4 b000 	ldr.w	fp, [r4]
 800fcd4:	f8c8 2000 	str.w	r2, [r8]
 800fcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcdc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fce0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800fce4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800fce8:	930b      	str	r3, [sp, #44]	; 0x2c
 800fcea:	f04f 32ff 	mov.w	r2, #4294967295
 800fcee:	4640      	mov	r0, r8
 800fcf0:	4b9c      	ldr	r3, [pc, #624]	; (800ff64 <_printf_float+0x2cc>)
 800fcf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fcf4:	f7f0 fec6 	bl	8000a84 <__aeabi_dcmpun>
 800fcf8:	bb70      	cbnz	r0, 800fd58 <_printf_float+0xc0>
 800fcfa:	f04f 32ff 	mov.w	r2, #4294967295
 800fcfe:	4640      	mov	r0, r8
 800fd00:	4b98      	ldr	r3, [pc, #608]	; (800ff64 <_printf_float+0x2cc>)
 800fd02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fd04:	f7f0 fea0 	bl	8000a48 <__aeabi_dcmple>
 800fd08:	bb30      	cbnz	r0, 800fd58 <_printf_float+0xc0>
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	4640      	mov	r0, r8
 800fd10:	4651      	mov	r1, sl
 800fd12:	f7f0 fe8f 	bl	8000a34 <__aeabi_dcmplt>
 800fd16:	b110      	cbz	r0, 800fd1e <_printf_float+0x86>
 800fd18:	232d      	movs	r3, #45	; 0x2d
 800fd1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd1e:	4b92      	ldr	r3, [pc, #584]	; (800ff68 <_printf_float+0x2d0>)
 800fd20:	4892      	ldr	r0, [pc, #584]	; (800ff6c <_printf_float+0x2d4>)
 800fd22:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fd26:	bf94      	ite	ls
 800fd28:	4698      	movls	r8, r3
 800fd2a:	4680      	movhi	r8, r0
 800fd2c:	2303      	movs	r3, #3
 800fd2e:	f04f 0a00 	mov.w	sl, #0
 800fd32:	6123      	str	r3, [r4, #16]
 800fd34:	f02b 0304 	bic.w	r3, fp, #4
 800fd38:	6023      	str	r3, [r4, #0]
 800fd3a:	4633      	mov	r3, r6
 800fd3c:	4621      	mov	r1, r4
 800fd3e:	4628      	mov	r0, r5
 800fd40:	9700      	str	r7, [sp, #0]
 800fd42:	aa0f      	add	r2, sp, #60	; 0x3c
 800fd44:	f000 f9d4 	bl	80100f0 <_printf_common>
 800fd48:	3001      	adds	r0, #1
 800fd4a:	f040 8090 	bne.w	800fe6e <_printf_float+0x1d6>
 800fd4e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd52:	b011      	add	sp, #68	; 0x44
 800fd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd58:	4642      	mov	r2, r8
 800fd5a:	4653      	mov	r3, sl
 800fd5c:	4640      	mov	r0, r8
 800fd5e:	4651      	mov	r1, sl
 800fd60:	f7f0 fe90 	bl	8000a84 <__aeabi_dcmpun>
 800fd64:	b148      	cbz	r0, 800fd7a <_printf_float+0xe2>
 800fd66:	f1ba 0f00 	cmp.w	sl, #0
 800fd6a:	bfb8      	it	lt
 800fd6c:	232d      	movlt	r3, #45	; 0x2d
 800fd6e:	4880      	ldr	r0, [pc, #512]	; (800ff70 <_printf_float+0x2d8>)
 800fd70:	bfb8      	it	lt
 800fd72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fd76:	4b7f      	ldr	r3, [pc, #508]	; (800ff74 <_printf_float+0x2dc>)
 800fd78:	e7d3      	b.n	800fd22 <_printf_float+0x8a>
 800fd7a:	6863      	ldr	r3, [r4, #4]
 800fd7c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800fd80:	1c5a      	adds	r2, r3, #1
 800fd82:	d142      	bne.n	800fe0a <_printf_float+0x172>
 800fd84:	2306      	movs	r3, #6
 800fd86:	6063      	str	r3, [r4, #4]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	9206      	str	r2, [sp, #24]
 800fd8c:	aa0e      	add	r2, sp, #56	; 0x38
 800fd8e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800fd92:	aa0d      	add	r2, sp, #52	; 0x34
 800fd94:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800fd98:	9203      	str	r2, [sp, #12]
 800fd9a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800fd9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fda2:	6023      	str	r3, [r4, #0]
 800fda4:	6863      	ldr	r3, [r4, #4]
 800fda6:	4642      	mov	r2, r8
 800fda8:	9300      	str	r3, [sp, #0]
 800fdaa:	4628      	mov	r0, r5
 800fdac:	4653      	mov	r3, sl
 800fdae:	910b      	str	r1, [sp, #44]	; 0x2c
 800fdb0:	f7ff fed4 	bl	800fb5c <__cvt>
 800fdb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fdb6:	4680      	mov	r8, r0
 800fdb8:	2947      	cmp	r1, #71	; 0x47
 800fdba:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fdbc:	d108      	bne.n	800fdd0 <_printf_float+0x138>
 800fdbe:	1cc8      	adds	r0, r1, #3
 800fdc0:	db02      	blt.n	800fdc8 <_printf_float+0x130>
 800fdc2:	6863      	ldr	r3, [r4, #4]
 800fdc4:	4299      	cmp	r1, r3
 800fdc6:	dd40      	ble.n	800fe4a <_printf_float+0x1b2>
 800fdc8:	f1a9 0902 	sub.w	r9, r9, #2
 800fdcc:	fa5f f989 	uxtb.w	r9, r9
 800fdd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fdd4:	d81f      	bhi.n	800fe16 <_printf_float+0x17e>
 800fdd6:	464a      	mov	r2, r9
 800fdd8:	3901      	subs	r1, #1
 800fdda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fdde:	910d      	str	r1, [sp, #52]	; 0x34
 800fde0:	f7ff ff1b 	bl	800fc1a <__exponent>
 800fde4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fde6:	4682      	mov	sl, r0
 800fde8:	1813      	adds	r3, r2, r0
 800fdea:	2a01      	cmp	r2, #1
 800fdec:	6123      	str	r3, [r4, #16]
 800fdee:	dc02      	bgt.n	800fdf6 <_printf_float+0x15e>
 800fdf0:	6822      	ldr	r2, [r4, #0]
 800fdf2:	07d2      	lsls	r2, r2, #31
 800fdf4:	d501      	bpl.n	800fdfa <_printf_float+0x162>
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	6123      	str	r3, [r4, #16]
 800fdfa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d09b      	beq.n	800fd3a <_printf_float+0xa2>
 800fe02:	232d      	movs	r3, #45	; 0x2d
 800fe04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe08:	e797      	b.n	800fd3a <_printf_float+0xa2>
 800fe0a:	2947      	cmp	r1, #71	; 0x47
 800fe0c:	d1bc      	bne.n	800fd88 <_printf_float+0xf0>
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d1ba      	bne.n	800fd88 <_printf_float+0xf0>
 800fe12:	2301      	movs	r3, #1
 800fe14:	e7b7      	b.n	800fd86 <_printf_float+0xee>
 800fe16:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800fe1a:	d118      	bne.n	800fe4e <_printf_float+0x1b6>
 800fe1c:	2900      	cmp	r1, #0
 800fe1e:	6863      	ldr	r3, [r4, #4]
 800fe20:	dd0b      	ble.n	800fe3a <_printf_float+0x1a2>
 800fe22:	6121      	str	r1, [r4, #16]
 800fe24:	b913      	cbnz	r3, 800fe2c <_printf_float+0x194>
 800fe26:	6822      	ldr	r2, [r4, #0]
 800fe28:	07d0      	lsls	r0, r2, #31
 800fe2a:	d502      	bpl.n	800fe32 <_printf_float+0x19a>
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	440b      	add	r3, r1
 800fe30:	6123      	str	r3, [r4, #16]
 800fe32:	f04f 0a00 	mov.w	sl, #0
 800fe36:	65a1      	str	r1, [r4, #88]	; 0x58
 800fe38:	e7df      	b.n	800fdfa <_printf_float+0x162>
 800fe3a:	b913      	cbnz	r3, 800fe42 <_printf_float+0x1aa>
 800fe3c:	6822      	ldr	r2, [r4, #0]
 800fe3e:	07d2      	lsls	r2, r2, #31
 800fe40:	d501      	bpl.n	800fe46 <_printf_float+0x1ae>
 800fe42:	3302      	adds	r3, #2
 800fe44:	e7f4      	b.n	800fe30 <_printf_float+0x198>
 800fe46:	2301      	movs	r3, #1
 800fe48:	e7f2      	b.n	800fe30 <_printf_float+0x198>
 800fe4a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800fe4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe50:	4299      	cmp	r1, r3
 800fe52:	db05      	blt.n	800fe60 <_printf_float+0x1c8>
 800fe54:	6823      	ldr	r3, [r4, #0]
 800fe56:	6121      	str	r1, [r4, #16]
 800fe58:	07d8      	lsls	r0, r3, #31
 800fe5a:	d5ea      	bpl.n	800fe32 <_printf_float+0x19a>
 800fe5c:	1c4b      	adds	r3, r1, #1
 800fe5e:	e7e7      	b.n	800fe30 <_printf_float+0x198>
 800fe60:	2900      	cmp	r1, #0
 800fe62:	bfcc      	ite	gt
 800fe64:	2201      	movgt	r2, #1
 800fe66:	f1c1 0202 	rsble	r2, r1, #2
 800fe6a:	4413      	add	r3, r2
 800fe6c:	e7e0      	b.n	800fe30 <_printf_float+0x198>
 800fe6e:	6823      	ldr	r3, [r4, #0]
 800fe70:	055a      	lsls	r2, r3, #21
 800fe72:	d407      	bmi.n	800fe84 <_printf_float+0x1ec>
 800fe74:	6923      	ldr	r3, [r4, #16]
 800fe76:	4642      	mov	r2, r8
 800fe78:	4631      	mov	r1, r6
 800fe7a:	4628      	mov	r0, r5
 800fe7c:	47b8      	blx	r7
 800fe7e:	3001      	adds	r0, #1
 800fe80:	d12b      	bne.n	800feda <_printf_float+0x242>
 800fe82:	e764      	b.n	800fd4e <_printf_float+0xb6>
 800fe84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fe88:	f240 80dd 	bls.w	8010046 <_printf_float+0x3ae>
 800fe8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fe90:	2200      	movs	r2, #0
 800fe92:	2300      	movs	r3, #0
 800fe94:	f7f0 fdc4 	bl	8000a20 <__aeabi_dcmpeq>
 800fe98:	2800      	cmp	r0, #0
 800fe9a:	d033      	beq.n	800ff04 <_printf_float+0x26c>
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	4631      	mov	r1, r6
 800fea0:	4628      	mov	r0, r5
 800fea2:	4a35      	ldr	r2, [pc, #212]	; (800ff78 <_printf_float+0x2e0>)
 800fea4:	47b8      	blx	r7
 800fea6:	3001      	adds	r0, #1
 800fea8:	f43f af51 	beq.w	800fd4e <_printf_float+0xb6>
 800feac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800feb0:	429a      	cmp	r2, r3
 800feb2:	db02      	blt.n	800feba <_printf_float+0x222>
 800feb4:	6823      	ldr	r3, [r4, #0]
 800feb6:	07d8      	lsls	r0, r3, #31
 800feb8:	d50f      	bpl.n	800feda <_printf_float+0x242>
 800feba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800febe:	4631      	mov	r1, r6
 800fec0:	4628      	mov	r0, r5
 800fec2:	47b8      	blx	r7
 800fec4:	3001      	adds	r0, #1
 800fec6:	f43f af42 	beq.w	800fd4e <_printf_float+0xb6>
 800feca:	f04f 0800 	mov.w	r8, #0
 800fece:	f104 091a 	add.w	r9, r4, #26
 800fed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fed4:	3b01      	subs	r3, #1
 800fed6:	4543      	cmp	r3, r8
 800fed8:	dc09      	bgt.n	800feee <_printf_float+0x256>
 800feda:	6823      	ldr	r3, [r4, #0]
 800fedc:	079b      	lsls	r3, r3, #30
 800fede:	f100 8102 	bmi.w	80100e6 <_printf_float+0x44e>
 800fee2:	68e0      	ldr	r0, [r4, #12]
 800fee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fee6:	4298      	cmp	r0, r3
 800fee8:	bfb8      	it	lt
 800feea:	4618      	movlt	r0, r3
 800feec:	e731      	b.n	800fd52 <_printf_float+0xba>
 800feee:	2301      	movs	r3, #1
 800fef0:	464a      	mov	r2, r9
 800fef2:	4631      	mov	r1, r6
 800fef4:	4628      	mov	r0, r5
 800fef6:	47b8      	blx	r7
 800fef8:	3001      	adds	r0, #1
 800fefa:	f43f af28 	beq.w	800fd4e <_printf_float+0xb6>
 800fefe:	f108 0801 	add.w	r8, r8, #1
 800ff02:	e7e6      	b.n	800fed2 <_printf_float+0x23a>
 800ff04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	dc38      	bgt.n	800ff7c <_printf_float+0x2e4>
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	4631      	mov	r1, r6
 800ff0e:	4628      	mov	r0, r5
 800ff10:	4a19      	ldr	r2, [pc, #100]	; (800ff78 <_printf_float+0x2e0>)
 800ff12:	47b8      	blx	r7
 800ff14:	3001      	adds	r0, #1
 800ff16:	f43f af1a 	beq.w	800fd4e <_printf_float+0xb6>
 800ff1a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ff1e:	4313      	orrs	r3, r2
 800ff20:	d102      	bne.n	800ff28 <_printf_float+0x290>
 800ff22:	6823      	ldr	r3, [r4, #0]
 800ff24:	07d9      	lsls	r1, r3, #31
 800ff26:	d5d8      	bpl.n	800feda <_printf_float+0x242>
 800ff28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff2c:	4631      	mov	r1, r6
 800ff2e:	4628      	mov	r0, r5
 800ff30:	47b8      	blx	r7
 800ff32:	3001      	adds	r0, #1
 800ff34:	f43f af0b 	beq.w	800fd4e <_printf_float+0xb6>
 800ff38:	f04f 0900 	mov.w	r9, #0
 800ff3c:	f104 0a1a 	add.w	sl, r4, #26
 800ff40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff42:	425b      	negs	r3, r3
 800ff44:	454b      	cmp	r3, r9
 800ff46:	dc01      	bgt.n	800ff4c <_printf_float+0x2b4>
 800ff48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff4a:	e794      	b.n	800fe76 <_printf_float+0x1de>
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	4652      	mov	r2, sl
 800ff50:	4631      	mov	r1, r6
 800ff52:	4628      	mov	r0, r5
 800ff54:	47b8      	blx	r7
 800ff56:	3001      	adds	r0, #1
 800ff58:	f43f aef9 	beq.w	800fd4e <_printf_float+0xb6>
 800ff5c:	f109 0901 	add.w	r9, r9, #1
 800ff60:	e7ee      	b.n	800ff40 <_printf_float+0x2a8>
 800ff62:	bf00      	nop
 800ff64:	7fefffff 	.word	0x7fefffff
 800ff68:	08013654 	.word	0x08013654
 800ff6c:	08013658 	.word	0x08013658
 800ff70:	08013660 	.word	0x08013660
 800ff74:	0801365c 	.word	0x0801365c
 800ff78:	08013664 	.word	0x08013664
 800ff7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ff80:	429a      	cmp	r2, r3
 800ff82:	bfa8      	it	ge
 800ff84:	461a      	movge	r2, r3
 800ff86:	2a00      	cmp	r2, #0
 800ff88:	4691      	mov	r9, r2
 800ff8a:	dc37      	bgt.n	800fffc <_printf_float+0x364>
 800ff8c:	f04f 0b00 	mov.w	fp, #0
 800ff90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff94:	f104 021a 	add.w	r2, r4, #26
 800ff98:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ff9c:	ebaa 0309 	sub.w	r3, sl, r9
 800ffa0:	455b      	cmp	r3, fp
 800ffa2:	dc33      	bgt.n	801000c <_printf_float+0x374>
 800ffa4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	db3b      	blt.n	8010024 <_printf_float+0x38c>
 800ffac:	6823      	ldr	r3, [r4, #0]
 800ffae:	07da      	lsls	r2, r3, #31
 800ffb0:	d438      	bmi.n	8010024 <_printf_float+0x38c>
 800ffb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffb4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ffb6:	eba2 030a 	sub.w	r3, r2, sl
 800ffba:	eba2 0901 	sub.w	r9, r2, r1
 800ffbe:	4599      	cmp	r9, r3
 800ffc0:	bfa8      	it	ge
 800ffc2:	4699      	movge	r9, r3
 800ffc4:	f1b9 0f00 	cmp.w	r9, #0
 800ffc8:	dc34      	bgt.n	8010034 <_printf_float+0x39c>
 800ffca:	f04f 0800 	mov.w	r8, #0
 800ffce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ffd2:	f104 0a1a 	add.w	sl, r4, #26
 800ffd6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ffda:	1a9b      	subs	r3, r3, r2
 800ffdc:	eba3 0309 	sub.w	r3, r3, r9
 800ffe0:	4543      	cmp	r3, r8
 800ffe2:	f77f af7a 	ble.w	800feda <_printf_float+0x242>
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	4652      	mov	r2, sl
 800ffea:	4631      	mov	r1, r6
 800ffec:	4628      	mov	r0, r5
 800ffee:	47b8      	blx	r7
 800fff0:	3001      	adds	r0, #1
 800fff2:	f43f aeac 	beq.w	800fd4e <_printf_float+0xb6>
 800fff6:	f108 0801 	add.w	r8, r8, #1
 800fffa:	e7ec      	b.n	800ffd6 <_printf_float+0x33e>
 800fffc:	4613      	mov	r3, r2
 800fffe:	4631      	mov	r1, r6
 8010000:	4642      	mov	r2, r8
 8010002:	4628      	mov	r0, r5
 8010004:	47b8      	blx	r7
 8010006:	3001      	adds	r0, #1
 8010008:	d1c0      	bne.n	800ff8c <_printf_float+0x2f4>
 801000a:	e6a0      	b.n	800fd4e <_printf_float+0xb6>
 801000c:	2301      	movs	r3, #1
 801000e:	4631      	mov	r1, r6
 8010010:	4628      	mov	r0, r5
 8010012:	920b      	str	r2, [sp, #44]	; 0x2c
 8010014:	47b8      	blx	r7
 8010016:	3001      	adds	r0, #1
 8010018:	f43f ae99 	beq.w	800fd4e <_printf_float+0xb6>
 801001c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801001e:	f10b 0b01 	add.w	fp, fp, #1
 8010022:	e7b9      	b.n	800ff98 <_printf_float+0x300>
 8010024:	4631      	mov	r1, r6
 8010026:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801002a:	4628      	mov	r0, r5
 801002c:	47b8      	blx	r7
 801002e:	3001      	adds	r0, #1
 8010030:	d1bf      	bne.n	800ffb2 <_printf_float+0x31a>
 8010032:	e68c      	b.n	800fd4e <_printf_float+0xb6>
 8010034:	464b      	mov	r3, r9
 8010036:	4631      	mov	r1, r6
 8010038:	4628      	mov	r0, r5
 801003a:	eb08 020a 	add.w	r2, r8, sl
 801003e:	47b8      	blx	r7
 8010040:	3001      	adds	r0, #1
 8010042:	d1c2      	bne.n	800ffca <_printf_float+0x332>
 8010044:	e683      	b.n	800fd4e <_printf_float+0xb6>
 8010046:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010048:	2a01      	cmp	r2, #1
 801004a:	dc01      	bgt.n	8010050 <_printf_float+0x3b8>
 801004c:	07db      	lsls	r3, r3, #31
 801004e:	d537      	bpl.n	80100c0 <_printf_float+0x428>
 8010050:	2301      	movs	r3, #1
 8010052:	4642      	mov	r2, r8
 8010054:	4631      	mov	r1, r6
 8010056:	4628      	mov	r0, r5
 8010058:	47b8      	blx	r7
 801005a:	3001      	adds	r0, #1
 801005c:	f43f ae77 	beq.w	800fd4e <_printf_float+0xb6>
 8010060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010064:	4631      	mov	r1, r6
 8010066:	4628      	mov	r0, r5
 8010068:	47b8      	blx	r7
 801006a:	3001      	adds	r0, #1
 801006c:	f43f ae6f 	beq.w	800fd4e <_printf_float+0xb6>
 8010070:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010074:	2200      	movs	r2, #0
 8010076:	2300      	movs	r3, #0
 8010078:	f7f0 fcd2 	bl	8000a20 <__aeabi_dcmpeq>
 801007c:	b9d8      	cbnz	r0, 80100b6 <_printf_float+0x41e>
 801007e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010080:	f108 0201 	add.w	r2, r8, #1
 8010084:	3b01      	subs	r3, #1
 8010086:	4631      	mov	r1, r6
 8010088:	4628      	mov	r0, r5
 801008a:	47b8      	blx	r7
 801008c:	3001      	adds	r0, #1
 801008e:	d10e      	bne.n	80100ae <_printf_float+0x416>
 8010090:	e65d      	b.n	800fd4e <_printf_float+0xb6>
 8010092:	2301      	movs	r3, #1
 8010094:	464a      	mov	r2, r9
 8010096:	4631      	mov	r1, r6
 8010098:	4628      	mov	r0, r5
 801009a:	47b8      	blx	r7
 801009c:	3001      	adds	r0, #1
 801009e:	f43f ae56 	beq.w	800fd4e <_printf_float+0xb6>
 80100a2:	f108 0801 	add.w	r8, r8, #1
 80100a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100a8:	3b01      	subs	r3, #1
 80100aa:	4543      	cmp	r3, r8
 80100ac:	dcf1      	bgt.n	8010092 <_printf_float+0x3fa>
 80100ae:	4653      	mov	r3, sl
 80100b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80100b4:	e6e0      	b.n	800fe78 <_printf_float+0x1e0>
 80100b6:	f04f 0800 	mov.w	r8, #0
 80100ba:	f104 091a 	add.w	r9, r4, #26
 80100be:	e7f2      	b.n	80100a6 <_printf_float+0x40e>
 80100c0:	2301      	movs	r3, #1
 80100c2:	4642      	mov	r2, r8
 80100c4:	e7df      	b.n	8010086 <_printf_float+0x3ee>
 80100c6:	2301      	movs	r3, #1
 80100c8:	464a      	mov	r2, r9
 80100ca:	4631      	mov	r1, r6
 80100cc:	4628      	mov	r0, r5
 80100ce:	47b8      	blx	r7
 80100d0:	3001      	adds	r0, #1
 80100d2:	f43f ae3c 	beq.w	800fd4e <_printf_float+0xb6>
 80100d6:	f108 0801 	add.w	r8, r8, #1
 80100da:	68e3      	ldr	r3, [r4, #12]
 80100dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80100de:	1a5b      	subs	r3, r3, r1
 80100e0:	4543      	cmp	r3, r8
 80100e2:	dcf0      	bgt.n	80100c6 <_printf_float+0x42e>
 80100e4:	e6fd      	b.n	800fee2 <_printf_float+0x24a>
 80100e6:	f04f 0800 	mov.w	r8, #0
 80100ea:	f104 0919 	add.w	r9, r4, #25
 80100ee:	e7f4      	b.n	80100da <_printf_float+0x442>

080100f0 <_printf_common>:
 80100f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100f4:	4616      	mov	r6, r2
 80100f6:	4699      	mov	r9, r3
 80100f8:	688a      	ldr	r2, [r1, #8]
 80100fa:	690b      	ldr	r3, [r1, #16]
 80100fc:	4607      	mov	r7, r0
 80100fe:	4293      	cmp	r3, r2
 8010100:	bfb8      	it	lt
 8010102:	4613      	movlt	r3, r2
 8010104:	6033      	str	r3, [r6, #0]
 8010106:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801010a:	460c      	mov	r4, r1
 801010c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010110:	b10a      	cbz	r2, 8010116 <_printf_common+0x26>
 8010112:	3301      	adds	r3, #1
 8010114:	6033      	str	r3, [r6, #0]
 8010116:	6823      	ldr	r3, [r4, #0]
 8010118:	0699      	lsls	r1, r3, #26
 801011a:	bf42      	ittt	mi
 801011c:	6833      	ldrmi	r3, [r6, #0]
 801011e:	3302      	addmi	r3, #2
 8010120:	6033      	strmi	r3, [r6, #0]
 8010122:	6825      	ldr	r5, [r4, #0]
 8010124:	f015 0506 	ands.w	r5, r5, #6
 8010128:	d106      	bne.n	8010138 <_printf_common+0x48>
 801012a:	f104 0a19 	add.w	sl, r4, #25
 801012e:	68e3      	ldr	r3, [r4, #12]
 8010130:	6832      	ldr	r2, [r6, #0]
 8010132:	1a9b      	subs	r3, r3, r2
 8010134:	42ab      	cmp	r3, r5
 8010136:	dc28      	bgt.n	801018a <_printf_common+0x9a>
 8010138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801013c:	1e13      	subs	r3, r2, #0
 801013e:	6822      	ldr	r2, [r4, #0]
 8010140:	bf18      	it	ne
 8010142:	2301      	movne	r3, #1
 8010144:	0692      	lsls	r2, r2, #26
 8010146:	d42d      	bmi.n	80101a4 <_printf_common+0xb4>
 8010148:	4649      	mov	r1, r9
 801014a:	4638      	mov	r0, r7
 801014c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010150:	47c0      	blx	r8
 8010152:	3001      	adds	r0, #1
 8010154:	d020      	beq.n	8010198 <_printf_common+0xa8>
 8010156:	6823      	ldr	r3, [r4, #0]
 8010158:	68e5      	ldr	r5, [r4, #12]
 801015a:	f003 0306 	and.w	r3, r3, #6
 801015e:	2b04      	cmp	r3, #4
 8010160:	bf18      	it	ne
 8010162:	2500      	movne	r5, #0
 8010164:	6832      	ldr	r2, [r6, #0]
 8010166:	f04f 0600 	mov.w	r6, #0
 801016a:	68a3      	ldr	r3, [r4, #8]
 801016c:	bf08      	it	eq
 801016e:	1aad      	subeq	r5, r5, r2
 8010170:	6922      	ldr	r2, [r4, #16]
 8010172:	bf08      	it	eq
 8010174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010178:	4293      	cmp	r3, r2
 801017a:	bfc4      	itt	gt
 801017c:	1a9b      	subgt	r3, r3, r2
 801017e:	18ed      	addgt	r5, r5, r3
 8010180:	341a      	adds	r4, #26
 8010182:	42b5      	cmp	r5, r6
 8010184:	d11a      	bne.n	80101bc <_printf_common+0xcc>
 8010186:	2000      	movs	r0, #0
 8010188:	e008      	b.n	801019c <_printf_common+0xac>
 801018a:	2301      	movs	r3, #1
 801018c:	4652      	mov	r2, sl
 801018e:	4649      	mov	r1, r9
 8010190:	4638      	mov	r0, r7
 8010192:	47c0      	blx	r8
 8010194:	3001      	adds	r0, #1
 8010196:	d103      	bne.n	80101a0 <_printf_common+0xb0>
 8010198:	f04f 30ff 	mov.w	r0, #4294967295
 801019c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101a0:	3501      	adds	r5, #1
 80101a2:	e7c4      	b.n	801012e <_printf_common+0x3e>
 80101a4:	2030      	movs	r0, #48	; 0x30
 80101a6:	18e1      	adds	r1, r4, r3
 80101a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80101ac:	1c5a      	adds	r2, r3, #1
 80101ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80101b2:	4422      	add	r2, r4
 80101b4:	3302      	adds	r3, #2
 80101b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80101ba:	e7c5      	b.n	8010148 <_printf_common+0x58>
 80101bc:	2301      	movs	r3, #1
 80101be:	4622      	mov	r2, r4
 80101c0:	4649      	mov	r1, r9
 80101c2:	4638      	mov	r0, r7
 80101c4:	47c0      	blx	r8
 80101c6:	3001      	adds	r0, #1
 80101c8:	d0e6      	beq.n	8010198 <_printf_common+0xa8>
 80101ca:	3601      	adds	r6, #1
 80101cc:	e7d9      	b.n	8010182 <_printf_common+0x92>
	...

080101d0 <_printf_i>:
 80101d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101d4:	460c      	mov	r4, r1
 80101d6:	7e27      	ldrb	r7, [r4, #24]
 80101d8:	4691      	mov	r9, r2
 80101da:	2f78      	cmp	r7, #120	; 0x78
 80101dc:	4680      	mov	r8, r0
 80101de:	469a      	mov	sl, r3
 80101e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80101e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80101e6:	d807      	bhi.n	80101f8 <_printf_i+0x28>
 80101e8:	2f62      	cmp	r7, #98	; 0x62
 80101ea:	d80a      	bhi.n	8010202 <_printf_i+0x32>
 80101ec:	2f00      	cmp	r7, #0
 80101ee:	f000 80d9 	beq.w	80103a4 <_printf_i+0x1d4>
 80101f2:	2f58      	cmp	r7, #88	; 0x58
 80101f4:	f000 80a4 	beq.w	8010340 <_printf_i+0x170>
 80101f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80101fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010200:	e03a      	b.n	8010278 <_printf_i+0xa8>
 8010202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010206:	2b15      	cmp	r3, #21
 8010208:	d8f6      	bhi.n	80101f8 <_printf_i+0x28>
 801020a:	a001      	add	r0, pc, #4	; (adr r0, 8010210 <_printf_i+0x40>)
 801020c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010210:	08010269 	.word	0x08010269
 8010214:	0801027d 	.word	0x0801027d
 8010218:	080101f9 	.word	0x080101f9
 801021c:	080101f9 	.word	0x080101f9
 8010220:	080101f9 	.word	0x080101f9
 8010224:	080101f9 	.word	0x080101f9
 8010228:	0801027d 	.word	0x0801027d
 801022c:	080101f9 	.word	0x080101f9
 8010230:	080101f9 	.word	0x080101f9
 8010234:	080101f9 	.word	0x080101f9
 8010238:	080101f9 	.word	0x080101f9
 801023c:	0801038b 	.word	0x0801038b
 8010240:	080102ad 	.word	0x080102ad
 8010244:	0801036d 	.word	0x0801036d
 8010248:	080101f9 	.word	0x080101f9
 801024c:	080101f9 	.word	0x080101f9
 8010250:	080103ad 	.word	0x080103ad
 8010254:	080101f9 	.word	0x080101f9
 8010258:	080102ad 	.word	0x080102ad
 801025c:	080101f9 	.word	0x080101f9
 8010260:	080101f9 	.word	0x080101f9
 8010264:	08010375 	.word	0x08010375
 8010268:	680b      	ldr	r3, [r1, #0]
 801026a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801026e:	1d1a      	adds	r2, r3, #4
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	600a      	str	r2, [r1, #0]
 8010274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010278:	2301      	movs	r3, #1
 801027a:	e0a4      	b.n	80103c6 <_printf_i+0x1f6>
 801027c:	6825      	ldr	r5, [r4, #0]
 801027e:	6808      	ldr	r0, [r1, #0]
 8010280:	062e      	lsls	r6, r5, #24
 8010282:	f100 0304 	add.w	r3, r0, #4
 8010286:	d50a      	bpl.n	801029e <_printf_i+0xce>
 8010288:	6805      	ldr	r5, [r0, #0]
 801028a:	600b      	str	r3, [r1, #0]
 801028c:	2d00      	cmp	r5, #0
 801028e:	da03      	bge.n	8010298 <_printf_i+0xc8>
 8010290:	232d      	movs	r3, #45	; 0x2d
 8010292:	426d      	negs	r5, r5
 8010294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010298:	230a      	movs	r3, #10
 801029a:	485e      	ldr	r0, [pc, #376]	; (8010414 <_printf_i+0x244>)
 801029c:	e019      	b.n	80102d2 <_printf_i+0x102>
 801029e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80102a2:	6805      	ldr	r5, [r0, #0]
 80102a4:	600b      	str	r3, [r1, #0]
 80102a6:	bf18      	it	ne
 80102a8:	b22d      	sxthne	r5, r5
 80102aa:	e7ef      	b.n	801028c <_printf_i+0xbc>
 80102ac:	680b      	ldr	r3, [r1, #0]
 80102ae:	6825      	ldr	r5, [r4, #0]
 80102b0:	1d18      	adds	r0, r3, #4
 80102b2:	6008      	str	r0, [r1, #0]
 80102b4:	0628      	lsls	r0, r5, #24
 80102b6:	d501      	bpl.n	80102bc <_printf_i+0xec>
 80102b8:	681d      	ldr	r5, [r3, #0]
 80102ba:	e002      	b.n	80102c2 <_printf_i+0xf2>
 80102bc:	0669      	lsls	r1, r5, #25
 80102be:	d5fb      	bpl.n	80102b8 <_printf_i+0xe8>
 80102c0:	881d      	ldrh	r5, [r3, #0]
 80102c2:	2f6f      	cmp	r7, #111	; 0x6f
 80102c4:	bf0c      	ite	eq
 80102c6:	2308      	moveq	r3, #8
 80102c8:	230a      	movne	r3, #10
 80102ca:	4852      	ldr	r0, [pc, #328]	; (8010414 <_printf_i+0x244>)
 80102cc:	2100      	movs	r1, #0
 80102ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80102d2:	6866      	ldr	r6, [r4, #4]
 80102d4:	2e00      	cmp	r6, #0
 80102d6:	bfa8      	it	ge
 80102d8:	6821      	ldrge	r1, [r4, #0]
 80102da:	60a6      	str	r6, [r4, #8]
 80102dc:	bfa4      	itt	ge
 80102de:	f021 0104 	bicge.w	r1, r1, #4
 80102e2:	6021      	strge	r1, [r4, #0]
 80102e4:	b90d      	cbnz	r5, 80102ea <_printf_i+0x11a>
 80102e6:	2e00      	cmp	r6, #0
 80102e8:	d04d      	beq.n	8010386 <_printf_i+0x1b6>
 80102ea:	4616      	mov	r6, r2
 80102ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80102f0:	fb03 5711 	mls	r7, r3, r1, r5
 80102f4:	5dc7      	ldrb	r7, [r0, r7]
 80102f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80102fa:	462f      	mov	r7, r5
 80102fc:	42bb      	cmp	r3, r7
 80102fe:	460d      	mov	r5, r1
 8010300:	d9f4      	bls.n	80102ec <_printf_i+0x11c>
 8010302:	2b08      	cmp	r3, #8
 8010304:	d10b      	bne.n	801031e <_printf_i+0x14e>
 8010306:	6823      	ldr	r3, [r4, #0]
 8010308:	07df      	lsls	r7, r3, #31
 801030a:	d508      	bpl.n	801031e <_printf_i+0x14e>
 801030c:	6923      	ldr	r3, [r4, #16]
 801030e:	6861      	ldr	r1, [r4, #4]
 8010310:	4299      	cmp	r1, r3
 8010312:	bfde      	ittt	le
 8010314:	2330      	movle	r3, #48	; 0x30
 8010316:	f806 3c01 	strble.w	r3, [r6, #-1]
 801031a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801031e:	1b92      	subs	r2, r2, r6
 8010320:	6122      	str	r2, [r4, #16]
 8010322:	464b      	mov	r3, r9
 8010324:	4621      	mov	r1, r4
 8010326:	4640      	mov	r0, r8
 8010328:	f8cd a000 	str.w	sl, [sp]
 801032c:	aa03      	add	r2, sp, #12
 801032e:	f7ff fedf 	bl	80100f0 <_printf_common>
 8010332:	3001      	adds	r0, #1
 8010334:	d14c      	bne.n	80103d0 <_printf_i+0x200>
 8010336:	f04f 30ff 	mov.w	r0, #4294967295
 801033a:	b004      	add	sp, #16
 801033c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010340:	4834      	ldr	r0, [pc, #208]	; (8010414 <_printf_i+0x244>)
 8010342:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010346:	680e      	ldr	r6, [r1, #0]
 8010348:	6823      	ldr	r3, [r4, #0]
 801034a:	f856 5b04 	ldr.w	r5, [r6], #4
 801034e:	061f      	lsls	r7, r3, #24
 8010350:	600e      	str	r6, [r1, #0]
 8010352:	d514      	bpl.n	801037e <_printf_i+0x1ae>
 8010354:	07d9      	lsls	r1, r3, #31
 8010356:	bf44      	itt	mi
 8010358:	f043 0320 	orrmi.w	r3, r3, #32
 801035c:	6023      	strmi	r3, [r4, #0]
 801035e:	b91d      	cbnz	r5, 8010368 <_printf_i+0x198>
 8010360:	6823      	ldr	r3, [r4, #0]
 8010362:	f023 0320 	bic.w	r3, r3, #32
 8010366:	6023      	str	r3, [r4, #0]
 8010368:	2310      	movs	r3, #16
 801036a:	e7af      	b.n	80102cc <_printf_i+0xfc>
 801036c:	6823      	ldr	r3, [r4, #0]
 801036e:	f043 0320 	orr.w	r3, r3, #32
 8010372:	6023      	str	r3, [r4, #0]
 8010374:	2378      	movs	r3, #120	; 0x78
 8010376:	4828      	ldr	r0, [pc, #160]	; (8010418 <_printf_i+0x248>)
 8010378:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801037c:	e7e3      	b.n	8010346 <_printf_i+0x176>
 801037e:	065e      	lsls	r6, r3, #25
 8010380:	bf48      	it	mi
 8010382:	b2ad      	uxthmi	r5, r5
 8010384:	e7e6      	b.n	8010354 <_printf_i+0x184>
 8010386:	4616      	mov	r6, r2
 8010388:	e7bb      	b.n	8010302 <_printf_i+0x132>
 801038a:	680b      	ldr	r3, [r1, #0]
 801038c:	6826      	ldr	r6, [r4, #0]
 801038e:	1d1d      	adds	r5, r3, #4
 8010390:	6960      	ldr	r0, [r4, #20]
 8010392:	600d      	str	r5, [r1, #0]
 8010394:	0635      	lsls	r5, r6, #24
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	d501      	bpl.n	801039e <_printf_i+0x1ce>
 801039a:	6018      	str	r0, [r3, #0]
 801039c:	e002      	b.n	80103a4 <_printf_i+0x1d4>
 801039e:	0671      	lsls	r1, r6, #25
 80103a0:	d5fb      	bpl.n	801039a <_printf_i+0x1ca>
 80103a2:	8018      	strh	r0, [r3, #0]
 80103a4:	2300      	movs	r3, #0
 80103a6:	4616      	mov	r6, r2
 80103a8:	6123      	str	r3, [r4, #16]
 80103aa:	e7ba      	b.n	8010322 <_printf_i+0x152>
 80103ac:	680b      	ldr	r3, [r1, #0]
 80103ae:	1d1a      	adds	r2, r3, #4
 80103b0:	600a      	str	r2, [r1, #0]
 80103b2:	681e      	ldr	r6, [r3, #0]
 80103b4:	2100      	movs	r1, #0
 80103b6:	4630      	mov	r0, r6
 80103b8:	6862      	ldr	r2, [r4, #4]
 80103ba:	f000 fee7 	bl	801118c <memchr>
 80103be:	b108      	cbz	r0, 80103c4 <_printf_i+0x1f4>
 80103c0:	1b80      	subs	r0, r0, r6
 80103c2:	6060      	str	r0, [r4, #4]
 80103c4:	6863      	ldr	r3, [r4, #4]
 80103c6:	6123      	str	r3, [r4, #16]
 80103c8:	2300      	movs	r3, #0
 80103ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103ce:	e7a8      	b.n	8010322 <_printf_i+0x152>
 80103d0:	4632      	mov	r2, r6
 80103d2:	4649      	mov	r1, r9
 80103d4:	4640      	mov	r0, r8
 80103d6:	6923      	ldr	r3, [r4, #16]
 80103d8:	47d0      	blx	sl
 80103da:	3001      	adds	r0, #1
 80103dc:	d0ab      	beq.n	8010336 <_printf_i+0x166>
 80103de:	6823      	ldr	r3, [r4, #0]
 80103e0:	079b      	lsls	r3, r3, #30
 80103e2:	d413      	bmi.n	801040c <_printf_i+0x23c>
 80103e4:	68e0      	ldr	r0, [r4, #12]
 80103e6:	9b03      	ldr	r3, [sp, #12]
 80103e8:	4298      	cmp	r0, r3
 80103ea:	bfb8      	it	lt
 80103ec:	4618      	movlt	r0, r3
 80103ee:	e7a4      	b.n	801033a <_printf_i+0x16a>
 80103f0:	2301      	movs	r3, #1
 80103f2:	4632      	mov	r2, r6
 80103f4:	4649      	mov	r1, r9
 80103f6:	4640      	mov	r0, r8
 80103f8:	47d0      	blx	sl
 80103fa:	3001      	adds	r0, #1
 80103fc:	d09b      	beq.n	8010336 <_printf_i+0x166>
 80103fe:	3501      	adds	r5, #1
 8010400:	68e3      	ldr	r3, [r4, #12]
 8010402:	9903      	ldr	r1, [sp, #12]
 8010404:	1a5b      	subs	r3, r3, r1
 8010406:	42ab      	cmp	r3, r5
 8010408:	dcf2      	bgt.n	80103f0 <_printf_i+0x220>
 801040a:	e7eb      	b.n	80103e4 <_printf_i+0x214>
 801040c:	2500      	movs	r5, #0
 801040e:	f104 0619 	add.w	r6, r4, #25
 8010412:	e7f5      	b.n	8010400 <_printf_i+0x230>
 8010414:	08013666 	.word	0x08013666
 8010418:	08013677 	.word	0x08013677

0801041c <realloc>:
 801041c:	4b02      	ldr	r3, [pc, #8]	; (8010428 <realloc+0xc>)
 801041e:	460a      	mov	r2, r1
 8010420:	4601      	mov	r1, r0
 8010422:	6818      	ldr	r0, [r3, #0]
 8010424:	f001 ba6a 	b.w	80118fc <_realloc_r>
 8010428:	200001a8 	.word	0x200001a8

0801042c <_sbrk_r>:
 801042c:	b538      	push	{r3, r4, r5, lr}
 801042e:	2300      	movs	r3, #0
 8010430:	4d05      	ldr	r5, [pc, #20]	; (8010448 <_sbrk_r+0x1c>)
 8010432:	4604      	mov	r4, r0
 8010434:	4608      	mov	r0, r1
 8010436:	602b      	str	r3, [r5, #0]
 8010438:	f7f5 faaa 	bl	8005990 <_sbrk>
 801043c:	1c43      	adds	r3, r0, #1
 801043e:	d102      	bne.n	8010446 <_sbrk_r+0x1a>
 8010440:	682b      	ldr	r3, [r5, #0]
 8010442:	b103      	cbz	r3, 8010446 <_sbrk_r+0x1a>
 8010444:	6023      	str	r3, [r4, #0]
 8010446:	bd38      	pop	{r3, r4, r5, pc}
 8010448:	200020b0 	.word	0x200020b0

0801044c <siprintf>:
 801044c:	b40e      	push	{r1, r2, r3}
 801044e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010452:	b500      	push	{lr}
 8010454:	b09c      	sub	sp, #112	; 0x70
 8010456:	ab1d      	add	r3, sp, #116	; 0x74
 8010458:	9002      	str	r0, [sp, #8]
 801045a:	9006      	str	r0, [sp, #24]
 801045c:	9107      	str	r1, [sp, #28]
 801045e:	9104      	str	r1, [sp, #16]
 8010460:	4808      	ldr	r0, [pc, #32]	; (8010484 <siprintf+0x38>)
 8010462:	4909      	ldr	r1, [pc, #36]	; (8010488 <siprintf+0x3c>)
 8010464:	f853 2b04 	ldr.w	r2, [r3], #4
 8010468:	9105      	str	r1, [sp, #20]
 801046a:	6800      	ldr	r0, [r0, #0]
 801046c:	a902      	add	r1, sp, #8
 801046e:	9301      	str	r3, [sp, #4]
 8010470:	f001 fac6 	bl	8011a00 <_svfiprintf_r>
 8010474:	2200      	movs	r2, #0
 8010476:	9b02      	ldr	r3, [sp, #8]
 8010478:	701a      	strb	r2, [r3, #0]
 801047a:	b01c      	add	sp, #112	; 0x70
 801047c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010480:	b003      	add	sp, #12
 8010482:	4770      	bx	lr
 8010484:	200001a8 	.word	0x200001a8
 8010488:	ffff0208 	.word	0xffff0208

0801048c <quorem>:
 801048c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010490:	6903      	ldr	r3, [r0, #16]
 8010492:	690c      	ldr	r4, [r1, #16]
 8010494:	4607      	mov	r7, r0
 8010496:	42a3      	cmp	r3, r4
 8010498:	f2c0 8083 	blt.w	80105a2 <quorem+0x116>
 801049c:	3c01      	subs	r4, #1
 801049e:	f100 0514 	add.w	r5, r0, #20
 80104a2:	f101 0814 	add.w	r8, r1, #20
 80104a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80104aa:	9301      	str	r3, [sp, #4]
 80104ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80104b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80104b4:	3301      	adds	r3, #1
 80104b6:	429a      	cmp	r2, r3
 80104b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80104bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80104c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80104c4:	d332      	bcc.n	801052c <quorem+0xa0>
 80104c6:	f04f 0e00 	mov.w	lr, #0
 80104ca:	4640      	mov	r0, r8
 80104cc:	46ac      	mov	ip, r5
 80104ce:	46f2      	mov	sl, lr
 80104d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80104d4:	b293      	uxth	r3, r2
 80104d6:	fb06 e303 	mla	r3, r6, r3, lr
 80104da:	0c12      	lsrs	r2, r2, #16
 80104dc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80104e0:	fb06 e202 	mla	r2, r6, r2, lr
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	ebaa 0303 	sub.w	r3, sl, r3
 80104ea:	f8dc a000 	ldr.w	sl, [ip]
 80104ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80104f2:	fa1f fa8a 	uxth.w	sl, sl
 80104f6:	4453      	add	r3, sl
 80104f8:	fa1f fa82 	uxth.w	sl, r2
 80104fc:	f8dc 2000 	ldr.w	r2, [ip]
 8010500:	4581      	cmp	r9, r0
 8010502:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010506:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801050a:	b29b      	uxth	r3, r3
 801050c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010510:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010514:	f84c 3b04 	str.w	r3, [ip], #4
 8010518:	d2da      	bcs.n	80104d0 <quorem+0x44>
 801051a:	f855 300b 	ldr.w	r3, [r5, fp]
 801051e:	b92b      	cbnz	r3, 801052c <quorem+0xa0>
 8010520:	9b01      	ldr	r3, [sp, #4]
 8010522:	3b04      	subs	r3, #4
 8010524:	429d      	cmp	r5, r3
 8010526:	461a      	mov	r2, r3
 8010528:	d32f      	bcc.n	801058a <quorem+0xfe>
 801052a:	613c      	str	r4, [r7, #16]
 801052c:	4638      	mov	r0, r7
 801052e:	f001 f8cf 	bl	80116d0 <__mcmp>
 8010532:	2800      	cmp	r0, #0
 8010534:	db25      	blt.n	8010582 <quorem+0xf6>
 8010536:	4628      	mov	r0, r5
 8010538:	f04f 0c00 	mov.w	ip, #0
 801053c:	3601      	adds	r6, #1
 801053e:	f858 1b04 	ldr.w	r1, [r8], #4
 8010542:	f8d0 e000 	ldr.w	lr, [r0]
 8010546:	b28b      	uxth	r3, r1
 8010548:	ebac 0303 	sub.w	r3, ip, r3
 801054c:	fa1f f28e 	uxth.w	r2, lr
 8010550:	4413      	add	r3, r2
 8010552:	0c0a      	lsrs	r2, r1, #16
 8010554:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010558:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801055c:	b29b      	uxth	r3, r3
 801055e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010562:	45c1      	cmp	r9, r8
 8010564:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010568:	f840 3b04 	str.w	r3, [r0], #4
 801056c:	d2e7      	bcs.n	801053e <quorem+0xb2>
 801056e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010572:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010576:	b922      	cbnz	r2, 8010582 <quorem+0xf6>
 8010578:	3b04      	subs	r3, #4
 801057a:	429d      	cmp	r5, r3
 801057c:	461a      	mov	r2, r3
 801057e:	d30a      	bcc.n	8010596 <quorem+0x10a>
 8010580:	613c      	str	r4, [r7, #16]
 8010582:	4630      	mov	r0, r6
 8010584:	b003      	add	sp, #12
 8010586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801058a:	6812      	ldr	r2, [r2, #0]
 801058c:	3b04      	subs	r3, #4
 801058e:	2a00      	cmp	r2, #0
 8010590:	d1cb      	bne.n	801052a <quorem+0x9e>
 8010592:	3c01      	subs	r4, #1
 8010594:	e7c6      	b.n	8010524 <quorem+0x98>
 8010596:	6812      	ldr	r2, [r2, #0]
 8010598:	3b04      	subs	r3, #4
 801059a:	2a00      	cmp	r2, #0
 801059c:	d1f0      	bne.n	8010580 <quorem+0xf4>
 801059e:	3c01      	subs	r4, #1
 80105a0:	e7eb      	b.n	801057a <quorem+0xee>
 80105a2:	2000      	movs	r0, #0
 80105a4:	e7ee      	b.n	8010584 <quorem+0xf8>
	...

080105a8 <_dtoa_r>:
 80105a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105ac:	4616      	mov	r6, r2
 80105ae:	461f      	mov	r7, r3
 80105b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80105b2:	b099      	sub	sp, #100	; 0x64
 80105b4:	4605      	mov	r5, r0
 80105b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80105ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80105be:	b974      	cbnz	r4, 80105de <_dtoa_r+0x36>
 80105c0:	2010      	movs	r0, #16
 80105c2:	f7ff f9ff 	bl	800f9c4 <malloc>
 80105c6:	4602      	mov	r2, r0
 80105c8:	6268      	str	r0, [r5, #36]	; 0x24
 80105ca:	b920      	cbnz	r0, 80105d6 <_dtoa_r+0x2e>
 80105cc:	21ea      	movs	r1, #234	; 0xea
 80105ce:	4bae      	ldr	r3, [pc, #696]	; (8010888 <_dtoa_r+0x2e0>)
 80105d0:	48ae      	ldr	r0, [pc, #696]	; (801088c <_dtoa_r+0x2e4>)
 80105d2:	f001 fb15 	bl	8011c00 <__assert_func>
 80105d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80105da:	6004      	str	r4, [r0, #0]
 80105dc:	60c4      	str	r4, [r0, #12]
 80105de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80105e0:	6819      	ldr	r1, [r3, #0]
 80105e2:	b151      	cbz	r1, 80105fa <_dtoa_r+0x52>
 80105e4:	685a      	ldr	r2, [r3, #4]
 80105e6:	2301      	movs	r3, #1
 80105e8:	4093      	lsls	r3, r2
 80105ea:	604a      	str	r2, [r1, #4]
 80105ec:	608b      	str	r3, [r1, #8]
 80105ee:	4628      	mov	r0, r5
 80105f0:	f000 fe34 	bl	801125c <_Bfree>
 80105f4:	2200      	movs	r2, #0
 80105f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80105f8:	601a      	str	r2, [r3, #0]
 80105fa:	1e3b      	subs	r3, r7, #0
 80105fc:	bfaf      	iteee	ge
 80105fe:	2300      	movge	r3, #0
 8010600:	2201      	movlt	r2, #1
 8010602:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010606:	9305      	strlt	r3, [sp, #20]
 8010608:	bfa8      	it	ge
 801060a:	f8c8 3000 	strge.w	r3, [r8]
 801060e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8010612:	4b9f      	ldr	r3, [pc, #636]	; (8010890 <_dtoa_r+0x2e8>)
 8010614:	bfb8      	it	lt
 8010616:	f8c8 2000 	strlt.w	r2, [r8]
 801061a:	ea33 0309 	bics.w	r3, r3, r9
 801061e:	d119      	bne.n	8010654 <_dtoa_r+0xac>
 8010620:	f242 730f 	movw	r3, #9999	; 0x270f
 8010624:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010626:	6013      	str	r3, [r2, #0]
 8010628:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801062c:	4333      	orrs	r3, r6
 801062e:	f000 8580 	beq.w	8011132 <_dtoa_r+0xb8a>
 8010632:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010634:	b953      	cbnz	r3, 801064c <_dtoa_r+0xa4>
 8010636:	4b97      	ldr	r3, [pc, #604]	; (8010894 <_dtoa_r+0x2ec>)
 8010638:	e022      	b.n	8010680 <_dtoa_r+0xd8>
 801063a:	4b97      	ldr	r3, [pc, #604]	; (8010898 <_dtoa_r+0x2f0>)
 801063c:	9308      	str	r3, [sp, #32]
 801063e:	3308      	adds	r3, #8
 8010640:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010642:	6013      	str	r3, [r2, #0]
 8010644:	9808      	ldr	r0, [sp, #32]
 8010646:	b019      	add	sp, #100	; 0x64
 8010648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801064c:	4b91      	ldr	r3, [pc, #580]	; (8010894 <_dtoa_r+0x2ec>)
 801064e:	9308      	str	r3, [sp, #32]
 8010650:	3303      	adds	r3, #3
 8010652:	e7f5      	b.n	8010640 <_dtoa_r+0x98>
 8010654:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010658:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801065c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010660:	2200      	movs	r2, #0
 8010662:	2300      	movs	r3, #0
 8010664:	f7f0 f9dc 	bl	8000a20 <__aeabi_dcmpeq>
 8010668:	4680      	mov	r8, r0
 801066a:	b158      	cbz	r0, 8010684 <_dtoa_r+0xdc>
 801066c:	2301      	movs	r3, #1
 801066e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010670:	6013      	str	r3, [r2, #0]
 8010672:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010674:	2b00      	cmp	r3, #0
 8010676:	f000 8559 	beq.w	801112c <_dtoa_r+0xb84>
 801067a:	4888      	ldr	r0, [pc, #544]	; (801089c <_dtoa_r+0x2f4>)
 801067c:	6018      	str	r0, [r3, #0]
 801067e:	1e43      	subs	r3, r0, #1
 8010680:	9308      	str	r3, [sp, #32]
 8010682:	e7df      	b.n	8010644 <_dtoa_r+0x9c>
 8010684:	ab16      	add	r3, sp, #88	; 0x58
 8010686:	9301      	str	r3, [sp, #4]
 8010688:	ab17      	add	r3, sp, #92	; 0x5c
 801068a:	9300      	str	r3, [sp, #0]
 801068c:	4628      	mov	r0, r5
 801068e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010692:	f001 f8c9 	bl	8011828 <__d2b>
 8010696:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801069a:	4682      	mov	sl, r0
 801069c:	2c00      	cmp	r4, #0
 801069e:	d07e      	beq.n	801079e <_dtoa_r+0x1f6>
 80106a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80106a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80106aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80106ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80106b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80106b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80106ba:	2200      	movs	r2, #0
 80106bc:	4b78      	ldr	r3, [pc, #480]	; (80108a0 <_dtoa_r+0x2f8>)
 80106be:	f7ef fd8f 	bl	80001e0 <__aeabi_dsub>
 80106c2:	a36b      	add	r3, pc, #428	; (adr r3, 8010870 <_dtoa_r+0x2c8>)
 80106c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c8:	f7ef ff42 	bl	8000550 <__aeabi_dmul>
 80106cc:	a36a      	add	r3, pc, #424	; (adr r3, 8010878 <_dtoa_r+0x2d0>)
 80106ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d2:	f7ef fd87 	bl	80001e4 <__adddf3>
 80106d6:	4606      	mov	r6, r0
 80106d8:	4620      	mov	r0, r4
 80106da:	460f      	mov	r7, r1
 80106dc:	f7ef fece 	bl	800047c <__aeabi_i2d>
 80106e0:	a367      	add	r3, pc, #412	; (adr r3, 8010880 <_dtoa_r+0x2d8>)
 80106e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e6:	f7ef ff33 	bl	8000550 <__aeabi_dmul>
 80106ea:	4602      	mov	r2, r0
 80106ec:	460b      	mov	r3, r1
 80106ee:	4630      	mov	r0, r6
 80106f0:	4639      	mov	r1, r7
 80106f2:	f7ef fd77 	bl	80001e4 <__adddf3>
 80106f6:	4606      	mov	r6, r0
 80106f8:	460f      	mov	r7, r1
 80106fa:	f7f0 f9d9 	bl	8000ab0 <__aeabi_d2iz>
 80106fe:	2200      	movs	r2, #0
 8010700:	4681      	mov	r9, r0
 8010702:	2300      	movs	r3, #0
 8010704:	4630      	mov	r0, r6
 8010706:	4639      	mov	r1, r7
 8010708:	f7f0 f994 	bl	8000a34 <__aeabi_dcmplt>
 801070c:	b148      	cbz	r0, 8010722 <_dtoa_r+0x17a>
 801070e:	4648      	mov	r0, r9
 8010710:	f7ef feb4 	bl	800047c <__aeabi_i2d>
 8010714:	4632      	mov	r2, r6
 8010716:	463b      	mov	r3, r7
 8010718:	f7f0 f982 	bl	8000a20 <__aeabi_dcmpeq>
 801071c:	b908      	cbnz	r0, 8010722 <_dtoa_r+0x17a>
 801071e:	f109 39ff 	add.w	r9, r9, #4294967295
 8010722:	f1b9 0f16 	cmp.w	r9, #22
 8010726:	d857      	bhi.n	80107d8 <_dtoa_r+0x230>
 8010728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801072c:	4b5d      	ldr	r3, [pc, #372]	; (80108a4 <_dtoa_r+0x2fc>)
 801072e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010736:	f7f0 f97d 	bl	8000a34 <__aeabi_dcmplt>
 801073a:	2800      	cmp	r0, #0
 801073c:	d04e      	beq.n	80107dc <_dtoa_r+0x234>
 801073e:	2300      	movs	r3, #0
 8010740:	f109 39ff 	add.w	r9, r9, #4294967295
 8010744:	930f      	str	r3, [sp, #60]	; 0x3c
 8010746:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010748:	1b1c      	subs	r4, r3, r4
 801074a:	1e63      	subs	r3, r4, #1
 801074c:	9309      	str	r3, [sp, #36]	; 0x24
 801074e:	bf49      	itett	mi
 8010750:	f1c4 0301 	rsbmi	r3, r4, #1
 8010754:	2300      	movpl	r3, #0
 8010756:	9306      	strmi	r3, [sp, #24]
 8010758:	2300      	movmi	r3, #0
 801075a:	bf54      	ite	pl
 801075c:	9306      	strpl	r3, [sp, #24]
 801075e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8010760:	f1b9 0f00 	cmp.w	r9, #0
 8010764:	db3c      	blt.n	80107e0 <_dtoa_r+0x238>
 8010766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010768:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801076c:	444b      	add	r3, r9
 801076e:	9309      	str	r3, [sp, #36]	; 0x24
 8010770:	2300      	movs	r3, #0
 8010772:	930a      	str	r3, [sp, #40]	; 0x28
 8010774:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010776:	2b09      	cmp	r3, #9
 8010778:	d86c      	bhi.n	8010854 <_dtoa_r+0x2ac>
 801077a:	2b05      	cmp	r3, #5
 801077c:	bfc4      	itt	gt
 801077e:	3b04      	subgt	r3, #4
 8010780:	9322      	strgt	r3, [sp, #136]	; 0x88
 8010782:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010784:	bfc8      	it	gt
 8010786:	2400      	movgt	r4, #0
 8010788:	f1a3 0302 	sub.w	r3, r3, #2
 801078c:	bfd8      	it	le
 801078e:	2401      	movle	r4, #1
 8010790:	2b03      	cmp	r3, #3
 8010792:	f200 808b 	bhi.w	80108ac <_dtoa_r+0x304>
 8010796:	e8df f003 	tbb	[pc, r3]
 801079a:	4f2d      	.short	0x4f2d
 801079c:	5b4d      	.short	0x5b4d
 801079e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80107a2:	441c      	add	r4, r3
 80107a4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80107a8:	2b20      	cmp	r3, #32
 80107aa:	bfc3      	ittte	gt
 80107ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80107b0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80107b4:	fa09 f303 	lslgt.w	r3, r9, r3
 80107b8:	f1c3 0320 	rsble	r3, r3, #32
 80107bc:	bfc6      	itte	gt
 80107be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80107c2:	4318      	orrgt	r0, r3
 80107c4:	fa06 f003 	lslle.w	r0, r6, r3
 80107c8:	f7ef fe48 	bl	800045c <__aeabi_ui2d>
 80107cc:	2301      	movs	r3, #1
 80107ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80107d2:	3c01      	subs	r4, #1
 80107d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80107d6:	e770      	b.n	80106ba <_dtoa_r+0x112>
 80107d8:	2301      	movs	r3, #1
 80107da:	e7b3      	b.n	8010744 <_dtoa_r+0x19c>
 80107dc:	900f      	str	r0, [sp, #60]	; 0x3c
 80107de:	e7b2      	b.n	8010746 <_dtoa_r+0x19e>
 80107e0:	9b06      	ldr	r3, [sp, #24]
 80107e2:	eba3 0309 	sub.w	r3, r3, r9
 80107e6:	9306      	str	r3, [sp, #24]
 80107e8:	f1c9 0300 	rsb	r3, r9, #0
 80107ec:	930a      	str	r3, [sp, #40]	; 0x28
 80107ee:	2300      	movs	r3, #0
 80107f0:	930e      	str	r3, [sp, #56]	; 0x38
 80107f2:	e7bf      	b.n	8010774 <_dtoa_r+0x1cc>
 80107f4:	2300      	movs	r3, #0
 80107f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80107f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	dc59      	bgt.n	80108b2 <_dtoa_r+0x30a>
 80107fe:	f04f 0b01 	mov.w	fp, #1
 8010802:	465b      	mov	r3, fp
 8010804:	f8cd b008 	str.w	fp, [sp, #8]
 8010808:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801080c:	2200      	movs	r2, #0
 801080e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8010810:	6042      	str	r2, [r0, #4]
 8010812:	2204      	movs	r2, #4
 8010814:	f102 0614 	add.w	r6, r2, #20
 8010818:	429e      	cmp	r6, r3
 801081a:	6841      	ldr	r1, [r0, #4]
 801081c:	d94f      	bls.n	80108be <_dtoa_r+0x316>
 801081e:	4628      	mov	r0, r5
 8010820:	f000 fcdc 	bl	80111dc <_Balloc>
 8010824:	9008      	str	r0, [sp, #32]
 8010826:	2800      	cmp	r0, #0
 8010828:	d14d      	bne.n	80108c6 <_dtoa_r+0x31e>
 801082a:	4602      	mov	r2, r0
 801082c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010830:	4b1d      	ldr	r3, [pc, #116]	; (80108a8 <_dtoa_r+0x300>)
 8010832:	e6cd      	b.n	80105d0 <_dtoa_r+0x28>
 8010834:	2301      	movs	r3, #1
 8010836:	e7de      	b.n	80107f6 <_dtoa_r+0x24e>
 8010838:	2300      	movs	r3, #0
 801083a:	930b      	str	r3, [sp, #44]	; 0x2c
 801083c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801083e:	eb09 0b03 	add.w	fp, r9, r3
 8010842:	f10b 0301 	add.w	r3, fp, #1
 8010846:	2b01      	cmp	r3, #1
 8010848:	9302      	str	r3, [sp, #8]
 801084a:	bfb8      	it	lt
 801084c:	2301      	movlt	r3, #1
 801084e:	e7dd      	b.n	801080c <_dtoa_r+0x264>
 8010850:	2301      	movs	r3, #1
 8010852:	e7f2      	b.n	801083a <_dtoa_r+0x292>
 8010854:	2401      	movs	r4, #1
 8010856:	2300      	movs	r3, #0
 8010858:	940b      	str	r4, [sp, #44]	; 0x2c
 801085a:	9322      	str	r3, [sp, #136]	; 0x88
 801085c:	f04f 3bff 	mov.w	fp, #4294967295
 8010860:	2200      	movs	r2, #0
 8010862:	2312      	movs	r3, #18
 8010864:	f8cd b008 	str.w	fp, [sp, #8]
 8010868:	9223      	str	r2, [sp, #140]	; 0x8c
 801086a:	e7cf      	b.n	801080c <_dtoa_r+0x264>
 801086c:	f3af 8000 	nop.w
 8010870:	636f4361 	.word	0x636f4361
 8010874:	3fd287a7 	.word	0x3fd287a7
 8010878:	8b60c8b3 	.word	0x8b60c8b3
 801087c:	3fc68a28 	.word	0x3fc68a28
 8010880:	509f79fb 	.word	0x509f79fb
 8010884:	3fd34413 	.word	0x3fd34413
 8010888:	08013695 	.word	0x08013695
 801088c:	080136ac 	.word	0x080136ac
 8010890:	7ff00000 	.word	0x7ff00000
 8010894:	08013691 	.word	0x08013691
 8010898:	08013688 	.word	0x08013688
 801089c:	08013665 	.word	0x08013665
 80108a0:	3ff80000 	.word	0x3ff80000
 80108a4:	080137a8 	.word	0x080137a8
 80108a8:	0801370b 	.word	0x0801370b
 80108ac:	2301      	movs	r3, #1
 80108ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80108b0:	e7d4      	b.n	801085c <_dtoa_r+0x2b4>
 80108b2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80108b6:	465b      	mov	r3, fp
 80108b8:	f8cd b008 	str.w	fp, [sp, #8]
 80108bc:	e7a6      	b.n	801080c <_dtoa_r+0x264>
 80108be:	3101      	adds	r1, #1
 80108c0:	6041      	str	r1, [r0, #4]
 80108c2:	0052      	lsls	r2, r2, #1
 80108c4:	e7a6      	b.n	8010814 <_dtoa_r+0x26c>
 80108c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80108c8:	9a08      	ldr	r2, [sp, #32]
 80108ca:	601a      	str	r2, [r3, #0]
 80108cc:	9b02      	ldr	r3, [sp, #8]
 80108ce:	2b0e      	cmp	r3, #14
 80108d0:	f200 80a8 	bhi.w	8010a24 <_dtoa_r+0x47c>
 80108d4:	2c00      	cmp	r4, #0
 80108d6:	f000 80a5 	beq.w	8010a24 <_dtoa_r+0x47c>
 80108da:	f1b9 0f00 	cmp.w	r9, #0
 80108de:	dd34      	ble.n	801094a <_dtoa_r+0x3a2>
 80108e0:	4a9a      	ldr	r2, [pc, #616]	; (8010b4c <_dtoa_r+0x5a4>)
 80108e2:	f009 030f 	and.w	r3, r9, #15
 80108e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80108ea:	f419 7f80 	tst.w	r9, #256	; 0x100
 80108ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80108f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80108f6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80108fa:	d016      	beq.n	801092a <_dtoa_r+0x382>
 80108fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010900:	4b93      	ldr	r3, [pc, #588]	; (8010b50 <_dtoa_r+0x5a8>)
 8010902:	2703      	movs	r7, #3
 8010904:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010908:	f7ef ff4c 	bl	80007a4 <__aeabi_ddiv>
 801090c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010910:	f004 040f 	and.w	r4, r4, #15
 8010914:	4e8e      	ldr	r6, [pc, #568]	; (8010b50 <_dtoa_r+0x5a8>)
 8010916:	b954      	cbnz	r4, 801092e <_dtoa_r+0x386>
 8010918:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801091c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010920:	f7ef ff40 	bl	80007a4 <__aeabi_ddiv>
 8010924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010928:	e029      	b.n	801097e <_dtoa_r+0x3d6>
 801092a:	2702      	movs	r7, #2
 801092c:	e7f2      	b.n	8010914 <_dtoa_r+0x36c>
 801092e:	07e1      	lsls	r1, r4, #31
 8010930:	d508      	bpl.n	8010944 <_dtoa_r+0x39c>
 8010932:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010936:	e9d6 2300 	ldrd	r2, r3, [r6]
 801093a:	f7ef fe09 	bl	8000550 <__aeabi_dmul>
 801093e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010942:	3701      	adds	r7, #1
 8010944:	1064      	asrs	r4, r4, #1
 8010946:	3608      	adds	r6, #8
 8010948:	e7e5      	b.n	8010916 <_dtoa_r+0x36e>
 801094a:	f000 80a5 	beq.w	8010a98 <_dtoa_r+0x4f0>
 801094e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010952:	f1c9 0400 	rsb	r4, r9, #0
 8010956:	4b7d      	ldr	r3, [pc, #500]	; (8010b4c <_dtoa_r+0x5a4>)
 8010958:	f004 020f 	and.w	r2, r4, #15
 801095c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010964:	f7ef fdf4 	bl	8000550 <__aeabi_dmul>
 8010968:	2702      	movs	r7, #2
 801096a:	2300      	movs	r3, #0
 801096c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010970:	4e77      	ldr	r6, [pc, #476]	; (8010b50 <_dtoa_r+0x5a8>)
 8010972:	1124      	asrs	r4, r4, #4
 8010974:	2c00      	cmp	r4, #0
 8010976:	f040 8084 	bne.w	8010a82 <_dtoa_r+0x4da>
 801097a:	2b00      	cmp	r3, #0
 801097c:	d1d2      	bne.n	8010924 <_dtoa_r+0x37c>
 801097e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010980:	2b00      	cmp	r3, #0
 8010982:	f000 808b 	beq.w	8010a9c <_dtoa_r+0x4f4>
 8010986:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801098a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801098e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010992:	2200      	movs	r2, #0
 8010994:	4b6f      	ldr	r3, [pc, #444]	; (8010b54 <_dtoa_r+0x5ac>)
 8010996:	f7f0 f84d 	bl	8000a34 <__aeabi_dcmplt>
 801099a:	2800      	cmp	r0, #0
 801099c:	d07e      	beq.n	8010a9c <_dtoa_r+0x4f4>
 801099e:	9b02      	ldr	r3, [sp, #8]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d07b      	beq.n	8010a9c <_dtoa_r+0x4f4>
 80109a4:	f1bb 0f00 	cmp.w	fp, #0
 80109a8:	dd38      	ble.n	8010a1c <_dtoa_r+0x474>
 80109aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80109ae:	2200      	movs	r2, #0
 80109b0:	4b69      	ldr	r3, [pc, #420]	; (8010b58 <_dtoa_r+0x5b0>)
 80109b2:	f7ef fdcd 	bl	8000550 <__aeabi_dmul>
 80109b6:	465c      	mov	r4, fp
 80109b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80109bc:	f109 38ff 	add.w	r8, r9, #4294967295
 80109c0:	3701      	adds	r7, #1
 80109c2:	4638      	mov	r0, r7
 80109c4:	f7ef fd5a 	bl	800047c <__aeabi_i2d>
 80109c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109cc:	f7ef fdc0 	bl	8000550 <__aeabi_dmul>
 80109d0:	2200      	movs	r2, #0
 80109d2:	4b62      	ldr	r3, [pc, #392]	; (8010b5c <_dtoa_r+0x5b4>)
 80109d4:	f7ef fc06 	bl	80001e4 <__adddf3>
 80109d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80109dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80109e0:	9611      	str	r6, [sp, #68]	; 0x44
 80109e2:	2c00      	cmp	r4, #0
 80109e4:	d15d      	bne.n	8010aa2 <_dtoa_r+0x4fa>
 80109e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80109ea:	2200      	movs	r2, #0
 80109ec:	4b5c      	ldr	r3, [pc, #368]	; (8010b60 <_dtoa_r+0x5b8>)
 80109ee:	f7ef fbf7 	bl	80001e0 <__aeabi_dsub>
 80109f2:	4602      	mov	r2, r0
 80109f4:	460b      	mov	r3, r1
 80109f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80109fa:	4633      	mov	r3, r6
 80109fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80109fe:	f7f0 f837 	bl	8000a70 <__aeabi_dcmpgt>
 8010a02:	2800      	cmp	r0, #0
 8010a04:	f040 829e 	bne.w	8010f44 <_dtoa_r+0x99c>
 8010a08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010a0e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010a12:	f7f0 f80f 	bl	8000a34 <__aeabi_dcmplt>
 8010a16:	2800      	cmp	r0, #0
 8010a18:	f040 8292 	bne.w	8010f40 <_dtoa_r+0x998>
 8010a1c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8010a20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010a24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	f2c0 8153 	blt.w	8010cd2 <_dtoa_r+0x72a>
 8010a2c:	f1b9 0f0e 	cmp.w	r9, #14
 8010a30:	f300 814f 	bgt.w	8010cd2 <_dtoa_r+0x72a>
 8010a34:	4b45      	ldr	r3, [pc, #276]	; (8010b4c <_dtoa_r+0x5a4>)
 8010a36:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010a3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010a3e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8010a42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	f280 80db 	bge.w	8010c00 <_dtoa_r+0x658>
 8010a4a:	9b02      	ldr	r3, [sp, #8]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	f300 80d7 	bgt.w	8010c00 <_dtoa_r+0x658>
 8010a52:	f040 8274 	bne.w	8010f3e <_dtoa_r+0x996>
 8010a56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	4b40      	ldr	r3, [pc, #256]	; (8010b60 <_dtoa_r+0x5b8>)
 8010a5e:	f7ef fd77 	bl	8000550 <__aeabi_dmul>
 8010a62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a66:	f7ef fff9 	bl	8000a5c <__aeabi_dcmpge>
 8010a6a:	9c02      	ldr	r4, [sp, #8]
 8010a6c:	4626      	mov	r6, r4
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	f040 824a 	bne.w	8010f08 <_dtoa_r+0x960>
 8010a74:	2331      	movs	r3, #49	; 0x31
 8010a76:	9f08      	ldr	r7, [sp, #32]
 8010a78:	f109 0901 	add.w	r9, r9, #1
 8010a7c:	f807 3b01 	strb.w	r3, [r7], #1
 8010a80:	e246      	b.n	8010f10 <_dtoa_r+0x968>
 8010a82:	07e2      	lsls	r2, r4, #31
 8010a84:	d505      	bpl.n	8010a92 <_dtoa_r+0x4ea>
 8010a86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010a8a:	f7ef fd61 	bl	8000550 <__aeabi_dmul>
 8010a8e:	2301      	movs	r3, #1
 8010a90:	3701      	adds	r7, #1
 8010a92:	1064      	asrs	r4, r4, #1
 8010a94:	3608      	adds	r6, #8
 8010a96:	e76d      	b.n	8010974 <_dtoa_r+0x3cc>
 8010a98:	2702      	movs	r7, #2
 8010a9a:	e770      	b.n	801097e <_dtoa_r+0x3d6>
 8010a9c:	46c8      	mov	r8, r9
 8010a9e:	9c02      	ldr	r4, [sp, #8]
 8010aa0:	e78f      	b.n	80109c2 <_dtoa_r+0x41a>
 8010aa2:	9908      	ldr	r1, [sp, #32]
 8010aa4:	4b29      	ldr	r3, [pc, #164]	; (8010b4c <_dtoa_r+0x5a4>)
 8010aa6:	4421      	add	r1, r4
 8010aa8:	9112      	str	r1, [sp, #72]	; 0x48
 8010aaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010aac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ab0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8010ab4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010ab8:	2900      	cmp	r1, #0
 8010aba:	d055      	beq.n	8010b68 <_dtoa_r+0x5c0>
 8010abc:	2000      	movs	r0, #0
 8010abe:	4929      	ldr	r1, [pc, #164]	; (8010b64 <_dtoa_r+0x5bc>)
 8010ac0:	f7ef fe70 	bl	80007a4 <__aeabi_ddiv>
 8010ac4:	463b      	mov	r3, r7
 8010ac6:	4632      	mov	r2, r6
 8010ac8:	f7ef fb8a 	bl	80001e0 <__aeabi_dsub>
 8010acc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010ad0:	9f08      	ldr	r7, [sp, #32]
 8010ad2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ad6:	f7ef ffeb 	bl	8000ab0 <__aeabi_d2iz>
 8010ada:	4604      	mov	r4, r0
 8010adc:	f7ef fcce 	bl	800047c <__aeabi_i2d>
 8010ae0:	4602      	mov	r2, r0
 8010ae2:	460b      	mov	r3, r1
 8010ae4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ae8:	f7ef fb7a 	bl	80001e0 <__aeabi_dsub>
 8010aec:	4602      	mov	r2, r0
 8010aee:	460b      	mov	r3, r1
 8010af0:	3430      	adds	r4, #48	; 0x30
 8010af2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010af6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010afa:	f807 4b01 	strb.w	r4, [r7], #1
 8010afe:	f7ef ff99 	bl	8000a34 <__aeabi_dcmplt>
 8010b02:	2800      	cmp	r0, #0
 8010b04:	d174      	bne.n	8010bf0 <_dtoa_r+0x648>
 8010b06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b0a:	2000      	movs	r0, #0
 8010b0c:	4911      	ldr	r1, [pc, #68]	; (8010b54 <_dtoa_r+0x5ac>)
 8010b0e:	f7ef fb67 	bl	80001e0 <__aeabi_dsub>
 8010b12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010b16:	f7ef ff8d 	bl	8000a34 <__aeabi_dcmplt>
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	f040 80b6 	bne.w	8010c8c <_dtoa_r+0x6e4>
 8010b20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b22:	429f      	cmp	r7, r3
 8010b24:	f43f af7a 	beq.w	8010a1c <_dtoa_r+0x474>
 8010b28:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	4b0a      	ldr	r3, [pc, #40]	; (8010b58 <_dtoa_r+0x5b0>)
 8010b30:	f7ef fd0e 	bl	8000550 <__aeabi_dmul>
 8010b34:	2200      	movs	r2, #0
 8010b36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010b3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b3e:	4b06      	ldr	r3, [pc, #24]	; (8010b58 <_dtoa_r+0x5b0>)
 8010b40:	f7ef fd06 	bl	8000550 <__aeabi_dmul>
 8010b44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b48:	e7c3      	b.n	8010ad2 <_dtoa_r+0x52a>
 8010b4a:	bf00      	nop
 8010b4c:	080137a8 	.word	0x080137a8
 8010b50:	08013780 	.word	0x08013780
 8010b54:	3ff00000 	.word	0x3ff00000
 8010b58:	40240000 	.word	0x40240000
 8010b5c:	401c0000 	.word	0x401c0000
 8010b60:	40140000 	.word	0x40140000
 8010b64:	3fe00000 	.word	0x3fe00000
 8010b68:	4630      	mov	r0, r6
 8010b6a:	4639      	mov	r1, r7
 8010b6c:	f7ef fcf0 	bl	8000550 <__aeabi_dmul>
 8010b70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b72:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010b76:	9c08      	ldr	r4, [sp, #32]
 8010b78:	9314      	str	r3, [sp, #80]	; 0x50
 8010b7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b7e:	f7ef ff97 	bl	8000ab0 <__aeabi_d2iz>
 8010b82:	9015      	str	r0, [sp, #84]	; 0x54
 8010b84:	f7ef fc7a 	bl	800047c <__aeabi_i2d>
 8010b88:	4602      	mov	r2, r0
 8010b8a:	460b      	mov	r3, r1
 8010b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b90:	f7ef fb26 	bl	80001e0 <__aeabi_dsub>
 8010b94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b96:	4606      	mov	r6, r0
 8010b98:	3330      	adds	r3, #48	; 0x30
 8010b9a:	f804 3b01 	strb.w	r3, [r4], #1
 8010b9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010ba0:	460f      	mov	r7, r1
 8010ba2:	429c      	cmp	r4, r3
 8010ba4:	f04f 0200 	mov.w	r2, #0
 8010ba8:	d124      	bne.n	8010bf4 <_dtoa_r+0x64c>
 8010baa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010bae:	4bb3      	ldr	r3, [pc, #716]	; (8010e7c <_dtoa_r+0x8d4>)
 8010bb0:	f7ef fb18 	bl	80001e4 <__adddf3>
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	460b      	mov	r3, r1
 8010bb8:	4630      	mov	r0, r6
 8010bba:	4639      	mov	r1, r7
 8010bbc:	f7ef ff58 	bl	8000a70 <__aeabi_dcmpgt>
 8010bc0:	2800      	cmp	r0, #0
 8010bc2:	d162      	bne.n	8010c8a <_dtoa_r+0x6e2>
 8010bc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010bc8:	2000      	movs	r0, #0
 8010bca:	49ac      	ldr	r1, [pc, #688]	; (8010e7c <_dtoa_r+0x8d4>)
 8010bcc:	f7ef fb08 	bl	80001e0 <__aeabi_dsub>
 8010bd0:	4602      	mov	r2, r0
 8010bd2:	460b      	mov	r3, r1
 8010bd4:	4630      	mov	r0, r6
 8010bd6:	4639      	mov	r1, r7
 8010bd8:	f7ef ff2c 	bl	8000a34 <__aeabi_dcmplt>
 8010bdc:	2800      	cmp	r0, #0
 8010bde:	f43f af1d 	beq.w	8010a1c <_dtoa_r+0x474>
 8010be2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010be4:	1e7b      	subs	r3, r7, #1
 8010be6:	9314      	str	r3, [sp, #80]	; 0x50
 8010be8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8010bec:	2b30      	cmp	r3, #48	; 0x30
 8010bee:	d0f8      	beq.n	8010be2 <_dtoa_r+0x63a>
 8010bf0:	46c1      	mov	r9, r8
 8010bf2:	e03a      	b.n	8010c6a <_dtoa_r+0x6c2>
 8010bf4:	4ba2      	ldr	r3, [pc, #648]	; (8010e80 <_dtoa_r+0x8d8>)
 8010bf6:	f7ef fcab 	bl	8000550 <__aeabi_dmul>
 8010bfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010bfe:	e7bc      	b.n	8010b7a <_dtoa_r+0x5d2>
 8010c00:	9f08      	ldr	r7, [sp, #32]
 8010c02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c0a:	f7ef fdcb 	bl	80007a4 <__aeabi_ddiv>
 8010c0e:	f7ef ff4f 	bl	8000ab0 <__aeabi_d2iz>
 8010c12:	4604      	mov	r4, r0
 8010c14:	f7ef fc32 	bl	800047c <__aeabi_i2d>
 8010c18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c1c:	f7ef fc98 	bl	8000550 <__aeabi_dmul>
 8010c20:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8010c24:	460b      	mov	r3, r1
 8010c26:	4602      	mov	r2, r0
 8010c28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c2c:	f7ef fad8 	bl	80001e0 <__aeabi_dsub>
 8010c30:	f807 6b01 	strb.w	r6, [r7], #1
 8010c34:	9e08      	ldr	r6, [sp, #32]
 8010c36:	9b02      	ldr	r3, [sp, #8]
 8010c38:	1bbe      	subs	r6, r7, r6
 8010c3a:	42b3      	cmp	r3, r6
 8010c3c:	d13a      	bne.n	8010cb4 <_dtoa_r+0x70c>
 8010c3e:	4602      	mov	r2, r0
 8010c40:	460b      	mov	r3, r1
 8010c42:	f7ef facf 	bl	80001e4 <__adddf3>
 8010c46:	4602      	mov	r2, r0
 8010c48:	460b      	mov	r3, r1
 8010c4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010c4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c52:	f7ef ff0d 	bl	8000a70 <__aeabi_dcmpgt>
 8010c56:	bb58      	cbnz	r0, 8010cb0 <_dtoa_r+0x708>
 8010c58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c60:	f7ef fede 	bl	8000a20 <__aeabi_dcmpeq>
 8010c64:	b108      	cbz	r0, 8010c6a <_dtoa_r+0x6c2>
 8010c66:	07e1      	lsls	r1, r4, #31
 8010c68:	d422      	bmi.n	8010cb0 <_dtoa_r+0x708>
 8010c6a:	4628      	mov	r0, r5
 8010c6c:	4651      	mov	r1, sl
 8010c6e:	f000 faf5 	bl	801125c <_Bfree>
 8010c72:	2300      	movs	r3, #0
 8010c74:	703b      	strb	r3, [r7, #0]
 8010c76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010c78:	f109 0001 	add.w	r0, r9, #1
 8010c7c:	6018      	str	r0, [r3, #0]
 8010c7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	f43f acdf 	beq.w	8010644 <_dtoa_r+0x9c>
 8010c86:	601f      	str	r7, [r3, #0]
 8010c88:	e4dc      	b.n	8010644 <_dtoa_r+0x9c>
 8010c8a:	4627      	mov	r7, r4
 8010c8c:	463b      	mov	r3, r7
 8010c8e:	461f      	mov	r7, r3
 8010c90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c94:	2a39      	cmp	r2, #57	; 0x39
 8010c96:	d107      	bne.n	8010ca8 <_dtoa_r+0x700>
 8010c98:	9a08      	ldr	r2, [sp, #32]
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d1f7      	bne.n	8010c8e <_dtoa_r+0x6e6>
 8010c9e:	2230      	movs	r2, #48	; 0x30
 8010ca0:	9908      	ldr	r1, [sp, #32]
 8010ca2:	f108 0801 	add.w	r8, r8, #1
 8010ca6:	700a      	strb	r2, [r1, #0]
 8010ca8:	781a      	ldrb	r2, [r3, #0]
 8010caa:	3201      	adds	r2, #1
 8010cac:	701a      	strb	r2, [r3, #0]
 8010cae:	e79f      	b.n	8010bf0 <_dtoa_r+0x648>
 8010cb0:	46c8      	mov	r8, r9
 8010cb2:	e7eb      	b.n	8010c8c <_dtoa_r+0x6e4>
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	4b72      	ldr	r3, [pc, #456]	; (8010e80 <_dtoa_r+0x8d8>)
 8010cb8:	f7ef fc4a 	bl	8000550 <__aeabi_dmul>
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	460b      	mov	r3, r1
 8010cc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	f7ef feaa 	bl	8000a20 <__aeabi_dcmpeq>
 8010ccc:	2800      	cmp	r0, #0
 8010cce:	d098      	beq.n	8010c02 <_dtoa_r+0x65a>
 8010cd0:	e7cb      	b.n	8010c6a <_dtoa_r+0x6c2>
 8010cd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010cd4:	2a00      	cmp	r2, #0
 8010cd6:	f000 80cd 	beq.w	8010e74 <_dtoa_r+0x8cc>
 8010cda:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010cdc:	2a01      	cmp	r2, #1
 8010cde:	f300 80af 	bgt.w	8010e40 <_dtoa_r+0x898>
 8010ce2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010ce4:	2a00      	cmp	r2, #0
 8010ce6:	f000 80a7 	beq.w	8010e38 <_dtoa_r+0x890>
 8010cea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010cee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010cf0:	9f06      	ldr	r7, [sp, #24]
 8010cf2:	9a06      	ldr	r2, [sp, #24]
 8010cf4:	2101      	movs	r1, #1
 8010cf6:	441a      	add	r2, r3
 8010cf8:	9206      	str	r2, [sp, #24]
 8010cfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	441a      	add	r2, r3
 8010d00:	9209      	str	r2, [sp, #36]	; 0x24
 8010d02:	f000 fb65 	bl	80113d0 <__i2b>
 8010d06:	4606      	mov	r6, r0
 8010d08:	2f00      	cmp	r7, #0
 8010d0a:	dd0c      	ble.n	8010d26 <_dtoa_r+0x77e>
 8010d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	dd09      	ble.n	8010d26 <_dtoa_r+0x77e>
 8010d12:	42bb      	cmp	r3, r7
 8010d14:	bfa8      	it	ge
 8010d16:	463b      	movge	r3, r7
 8010d18:	9a06      	ldr	r2, [sp, #24]
 8010d1a:	1aff      	subs	r7, r7, r3
 8010d1c:	1ad2      	subs	r2, r2, r3
 8010d1e:	9206      	str	r2, [sp, #24]
 8010d20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d22:	1ad3      	subs	r3, r2, r3
 8010d24:	9309      	str	r3, [sp, #36]	; 0x24
 8010d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d28:	b1f3      	cbz	r3, 8010d68 <_dtoa_r+0x7c0>
 8010d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f000 80a9 	beq.w	8010e84 <_dtoa_r+0x8dc>
 8010d32:	2c00      	cmp	r4, #0
 8010d34:	dd10      	ble.n	8010d58 <_dtoa_r+0x7b0>
 8010d36:	4631      	mov	r1, r6
 8010d38:	4622      	mov	r2, r4
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	f000 fc02 	bl	8011544 <__pow5mult>
 8010d40:	4652      	mov	r2, sl
 8010d42:	4601      	mov	r1, r0
 8010d44:	4606      	mov	r6, r0
 8010d46:	4628      	mov	r0, r5
 8010d48:	f000 fb58 	bl	80113fc <__multiply>
 8010d4c:	4680      	mov	r8, r0
 8010d4e:	4651      	mov	r1, sl
 8010d50:	4628      	mov	r0, r5
 8010d52:	f000 fa83 	bl	801125c <_Bfree>
 8010d56:	46c2      	mov	sl, r8
 8010d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d5a:	1b1a      	subs	r2, r3, r4
 8010d5c:	d004      	beq.n	8010d68 <_dtoa_r+0x7c0>
 8010d5e:	4651      	mov	r1, sl
 8010d60:	4628      	mov	r0, r5
 8010d62:	f000 fbef 	bl	8011544 <__pow5mult>
 8010d66:	4682      	mov	sl, r0
 8010d68:	2101      	movs	r1, #1
 8010d6a:	4628      	mov	r0, r5
 8010d6c:	f000 fb30 	bl	80113d0 <__i2b>
 8010d70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d72:	4604      	mov	r4, r0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	f340 8087 	ble.w	8010e88 <_dtoa_r+0x8e0>
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	4601      	mov	r1, r0
 8010d7e:	4628      	mov	r0, r5
 8010d80:	f000 fbe0 	bl	8011544 <__pow5mult>
 8010d84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010d86:	4604      	mov	r4, r0
 8010d88:	2b01      	cmp	r3, #1
 8010d8a:	f340 8080 	ble.w	8010e8e <_dtoa_r+0x8e6>
 8010d8e:	f04f 0800 	mov.w	r8, #0
 8010d92:	6923      	ldr	r3, [r4, #16]
 8010d94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010d98:	6918      	ldr	r0, [r3, #16]
 8010d9a:	f000 facb 	bl	8011334 <__hi0bits>
 8010d9e:	f1c0 0020 	rsb	r0, r0, #32
 8010da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010da4:	4418      	add	r0, r3
 8010da6:	f010 001f 	ands.w	r0, r0, #31
 8010daa:	f000 8092 	beq.w	8010ed2 <_dtoa_r+0x92a>
 8010dae:	f1c0 0320 	rsb	r3, r0, #32
 8010db2:	2b04      	cmp	r3, #4
 8010db4:	f340 808a 	ble.w	8010ecc <_dtoa_r+0x924>
 8010db8:	f1c0 001c 	rsb	r0, r0, #28
 8010dbc:	9b06      	ldr	r3, [sp, #24]
 8010dbe:	4407      	add	r7, r0
 8010dc0:	4403      	add	r3, r0
 8010dc2:	9306      	str	r3, [sp, #24]
 8010dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dc6:	4403      	add	r3, r0
 8010dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8010dca:	9b06      	ldr	r3, [sp, #24]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	dd05      	ble.n	8010ddc <_dtoa_r+0x834>
 8010dd0:	4651      	mov	r1, sl
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	4628      	mov	r0, r5
 8010dd6:	f000 fc0f 	bl	80115f8 <__lshift>
 8010dda:	4682      	mov	sl, r0
 8010ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	dd05      	ble.n	8010dee <_dtoa_r+0x846>
 8010de2:	4621      	mov	r1, r4
 8010de4:	461a      	mov	r2, r3
 8010de6:	4628      	mov	r0, r5
 8010de8:	f000 fc06 	bl	80115f8 <__lshift>
 8010dec:	4604      	mov	r4, r0
 8010dee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d070      	beq.n	8010ed6 <_dtoa_r+0x92e>
 8010df4:	4621      	mov	r1, r4
 8010df6:	4650      	mov	r0, sl
 8010df8:	f000 fc6a 	bl	80116d0 <__mcmp>
 8010dfc:	2800      	cmp	r0, #0
 8010dfe:	da6a      	bge.n	8010ed6 <_dtoa_r+0x92e>
 8010e00:	2300      	movs	r3, #0
 8010e02:	4651      	mov	r1, sl
 8010e04:	220a      	movs	r2, #10
 8010e06:	4628      	mov	r0, r5
 8010e08:	f000 fa4a 	bl	80112a0 <__multadd>
 8010e0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e0e:	4682      	mov	sl, r0
 8010e10:	f109 39ff 	add.w	r9, r9, #4294967295
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	f000 8193 	beq.w	8011140 <_dtoa_r+0xb98>
 8010e1a:	4631      	mov	r1, r6
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	220a      	movs	r2, #10
 8010e20:	4628      	mov	r0, r5
 8010e22:	f000 fa3d 	bl	80112a0 <__multadd>
 8010e26:	f1bb 0f00 	cmp.w	fp, #0
 8010e2a:	4606      	mov	r6, r0
 8010e2c:	f300 8093 	bgt.w	8010f56 <_dtoa_r+0x9ae>
 8010e30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e32:	2b02      	cmp	r3, #2
 8010e34:	dc57      	bgt.n	8010ee6 <_dtoa_r+0x93e>
 8010e36:	e08e      	b.n	8010f56 <_dtoa_r+0x9ae>
 8010e38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010e3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010e3e:	e756      	b.n	8010cee <_dtoa_r+0x746>
 8010e40:	9b02      	ldr	r3, [sp, #8]
 8010e42:	1e5c      	subs	r4, r3, #1
 8010e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e46:	42a3      	cmp	r3, r4
 8010e48:	bfb7      	itett	lt
 8010e4a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010e4c:	1b1c      	subge	r4, r3, r4
 8010e4e:	1ae2      	sublt	r2, r4, r3
 8010e50:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010e52:	bfbe      	ittt	lt
 8010e54:	940a      	strlt	r4, [sp, #40]	; 0x28
 8010e56:	189b      	addlt	r3, r3, r2
 8010e58:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010e5a:	9b02      	ldr	r3, [sp, #8]
 8010e5c:	bfb8      	it	lt
 8010e5e:	2400      	movlt	r4, #0
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	bfbb      	ittet	lt
 8010e64:	9b06      	ldrlt	r3, [sp, #24]
 8010e66:	9a02      	ldrlt	r2, [sp, #8]
 8010e68:	9f06      	ldrge	r7, [sp, #24]
 8010e6a:	1a9f      	sublt	r7, r3, r2
 8010e6c:	bfac      	ite	ge
 8010e6e:	9b02      	ldrge	r3, [sp, #8]
 8010e70:	2300      	movlt	r3, #0
 8010e72:	e73e      	b.n	8010cf2 <_dtoa_r+0x74a>
 8010e74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010e76:	9f06      	ldr	r7, [sp, #24]
 8010e78:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8010e7a:	e745      	b.n	8010d08 <_dtoa_r+0x760>
 8010e7c:	3fe00000 	.word	0x3fe00000
 8010e80:	40240000 	.word	0x40240000
 8010e84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e86:	e76a      	b.n	8010d5e <_dtoa_r+0x7b6>
 8010e88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e8a:	2b01      	cmp	r3, #1
 8010e8c:	dc19      	bgt.n	8010ec2 <_dtoa_r+0x91a>
 8010e8e:	9b04      	ldr	r3, [sp, #16]
 8010e90:	b9bb      	cbnz	r3, 8010ec2 <_dtoa_r+0x91a>
 8010e92:	9b05      	ldr	r3, [sp, #20]
 8010e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e98:	b99b      	cbnz	r3, 8010ec2 <_dtoa_r+0x91a>
 8010e9a:	9b05      	ldr	r3, [sp, #20]
 8010e9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010ea0:	0d1b      	lsrs	r3, r3, #20
 8010ea2:	051b      	lsls	r3, r3, #20
 8010ea4:	b183      	cbz	r3, 8010ec8 <_dtoa_r+0x920>
 8010ea6:	f04f 0801 	mov.w	r8, #1
 8010eaa:	9b06      	ldr	r3, [sp, #24]
 8010eac:	3301      	adds	r3, #1
 8010eae:	9306      	str	r3, [sp, #24]
 8010eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8010eb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	f47f af6a 	bne.w	8010d92 <_dtoa_r+0x7ea>
 8010ebe:	2001      	movs	r0, #1
 8010ec0:	e76f      	b.n	8010da2 <_dtoa_r+0x7fa>
 8010ec2:	f04f 0800 	mov.w	r8, #0
 8010ec6:	e7f6      	b.n	8010eb6 <_dtoa_r+0x90e>
 8010ec8:	4698      	mov	r8, r3
 8010eca:	e7f4      	b.n	8010eb6 <_dtoa_r+0x90e>
 8010ecc:	f43f af7d 	beq.w	8010dca <_dtoa_r+0x822>
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	301c      	adds	r0, #28
 8010ed4:	e772      	b.n	8010dbc <_dtoa_r+0x814>
 8010ed6:	9b02      	ldr	r3, [sp, #8]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	dc36      	bgt.n	8010f4a <_dtoa_r+0x9a2>
 8010edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010ede:	2b02      	cmp	r3, #2
 8010ee0:	dd33      	ble.n	8010f4a <_dtoa_r+0x9a2>
 8010ee2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010ee6:	f1bb 0f00 	cmp.w	fp, #0
 8010eea:	d10d      	bne.n	8010f08 <_dtoa_r+0x960>
 8010eec:	4621      	mov	r1, r4
 8010eee:	465b      	mov	r3, fp
 8010ef0:	2205      	movs	r2, #5
 8010ef2:	4628      	mov	r0, r5
 8010ef4:	f000 f9d4 	bl	80112a0 <__multadd>
 8010ef8:	4601      	mov	r1, r0
 8010efa:	4604      	mov	r4, r0
 8010efc:	4650      	mov	r0, sl
 8010efe:	f000 fbe7 	bl	80116d0 <__mcmp>
 8010f02:	2800      	cmp	r0, #0
 8010f04:	f73f adb6 	bgt.w	8010a74 <_dtoa_r+0x4cc>
 8010f08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010f0a:	9f08      	ldr	r7, [sp, #32]
 8010f0c:	ea6f 0903 	mvn.w	r9, r3
 8010f10:	f04f 0800 	mov.w	r8, #0
 8010f14:	4621      	mov	r1, r4
 8010f16:	4628      	mov	r0, r5
 8010f18:	f000 f9a0 	bl	801125c <_Bfree>
 8010f1c:	2e00      	cmp	r6, #0
 8010f1e:	f43f aea4 	beq.w	8010c6a <_dtoa_r+0x6c2>
 8010f22:	f1b8 0f00 	cmp.w	r8, #0
 8010f26:	d005      	beq.n	8010f34 <_dtoa_r+0x98c>
 8010f28:	45b0      	cmp	r8, r6
 8010f2a:	d003      	beq.n	8010f34 <_dtoa_r+0x98c>
 8010f2c:	4641      	mov	r1, r8
 8010f2e:	4628      	mov	r0, r5
 8010f30:	f000 f994 	bl	801125c <_Bfree>
 8010f34:	4631      	mov	r1, r6
 8010f36:	4628      	mov	r0, r5
 8010f38:	f000 f990 	bl	801125c <_Bfree>
 8010f3c:	e695      	b.n	8010c6a <_dtoa_r+0x6c2>
 8010f3e:	2400      	movs	r4, #0
 8010f40:	4626      	mov	r6, r4
 8010f42:	e7e1      	b.n	8010f08 <_dtoa_r+0x960>
 8010f44:	46c1      	mov	r9, r8
 8010f46:	4626      	mov	r6, r4
 8010f48:	e594      	b.n	8010a74 <_dtoa_r+0x4cc>
 8010f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f4c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	f000 80fc 	beq.w	801114e <_dtoa_r+0xba6>
 8010f56:	2f00      	cmp	r7, #0
 8010f58:	dd05      	ble.n	8010f66 <_dtoa_r+0x9be>
 8010f5a:	4631      	mov	r1, r6
 8010f5c:	463a      	mov	r2, r7
 8010f5e:	4628      	mov	r0, r5
 8010f60:	f000 fb4a 	bl	80115f8 <__lshift>
 8010f64:	4606      	mov	r6, r0
 8010f66:	f1b8 0f00 	cmp.w	r8, #0
 8010f6a:	d05c      	beq.n	8011026 <_dtoa_r+0xa7e>
 8010f6c:	4628      	mov	r0, r5
 8010f6e:	6871      	ldr	r1, [r6, #4]
 8010f70:	f000 f934 	bl	80111dc <_Balloc>
 8010f74:	4607      	mov	r7, r0
 8010f76:	b928      	cbnz	r0, 8010f84 <_dtoa_r+0x9dc>
 8010f78:	4602      	mov	r2, r0
 8010f7a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010f7e:	4b7e      	ldr	r3, [pc, #504]	; (8011178 <_dtoa_r+0xbd0>)
 8010f80:	f7ff bb26 	b.w	80105d0 <_dtoa_r+0x28>
 8010f84:	6932      	ldr	r2, [r6, #16]
 8010f86:	f106 010c 	add.w	r1, r6, #12
 8010f8a:	3202      	adds	r2, #2
 8010f8c:	0092      	lsls	r2, r2, #2
 8010f8e:	300c      	adds	r0, #12
 8010f90:	f000 f90a 	bl	80111a8 <memcpy>
 8010f94:	2201      	movs	r2, #1
 8010f96:	4639      	mov	r1, r7
 8010f98:	4628      	mov	r0, r5
 8010f9a:	f000 fb2d 	bl	80115f8 <__lshift>
 8010f9e:	46b0      	mov	r8, r6
 8010fa0:	4606      	mov	r6, r0
 8010fa2:	9b08      	ldr	r3, [sp, #32]
 8010fa4:	3301      	adds	r3, #1
 8010fa6:	9302      	str	r3, [sp, #8]
 8010fa8:	9b08      	ldr	r3, [sp, #32]
 8010faa:	445b      	add	r3, fp
 8010fac:	930a      	str	r3, [sp, #40]	; 0x28
 8010fae:	9b04      	ldr	r3, [sp, #16]
 8010fb0:	f003 0301 	and.w	r3, r3, #1
 8010fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8010fb6:	9b02      	ldr	r3, [sp, #8]
 8010fb8:	4621      	mov	r1, r4
 8010fba:	4650      	mov	r0, sl
 8010fbc:	f103 3bff 	add.w	fp, r3, #4294967295
 8010fc0:	f7ff fa64 	bl	801048c <quorem>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	4641      	mov	r1, r8
 8010fc8:	3330      	adds	r3, #48	; 0x30
 8010fca:	9004      	str	r0, [sp, #16]
 8010fcc:	4650      	mov	r0, sl
 8010fce:	930b      	str	r3, [sp, #44]	; 0x2c
 8010fd0:	f000 fb7e 	bl	80116d0 <__mcmp>
 8010fd4:	4632      	mov	r2, r6
 8010fd6:	9006      	str	r0, [sp, #24]
 8010fd8:	4621      	mov	r1, r4
 8010fda:	4628      	mov	r0, r5
 8010fdc:	f000 fb94 	bl	8011708 <__mdiff>
 8010fe0:	68c2      	ldr	r2, [r0, #12]
 8010fe2:	4607      	mov	r7, r0
 8010fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fe6:	bb02      	cbnz	r2, 801102a <_dtoa_r+0xa82>
 8010fe8:	4601      	mov	r1, r0
 8010fea:	4650      	mov	r0, sl
 8010fec:	f000 fb70 	bl	80116d0 <__mcmp>
 8010ff0:	4602      	mov	r2, r0
 8010ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ff4:	4639      	mov	r1, r7
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8010ffc:	f000 f92e 	bl	801125c <_Bfree>
 8011000:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011002:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011004:	9f02      	ldr	r7, [sp, #8]
 8011006:	ea43 0102 	orr.w	r1, r3, r2
 801100a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801100c:	430b      	orrs	r3, r1
 801100e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011010:	d10d      	bne.n	801102e <_dtoa_r+0xa86>
 8011012:	2b39      	cmp	r3, #57	; 0x39
 8011014:	d027      	beq.n	8011066 <_dtoa_r+0xabe>
 8011016:	9a06      	ldr	r2, [sp, #24]
 8011018:	2a00      	cmp	r2, #0
 801101a:	dd01      	ble.n	8011020 <_dtoa_r+0xa78>
 801101c:	9b04      	ldr	r3, [sp, #16]
 801101e:	3331      	adds	r3, #49	; 0x31
 8011020:	f88b 3000 	strb.w	r3, [fp]
 8011024:	e776      	b.n	8010f14 <_dtoa_r+0x96c>
 8011026:	4630      	mov	r0, r6
 8011028:	e7b9      	b.n	8010f9e <_dtoa_r+0x9f6>
 801102a:	2201      	movs	r2, #1
 801102c:	e7e2      	b.n	8010ff4 <_dtoa_r+0xa4c>
 801102e:	9906      	ldr	r1, [sp, #24]
 8011030:	2900      	cmp	r1, #0
 8011032:	db04      	blt.n	801103e <_dtoa_r+0xa96>
 8011034:	9822      	ldr	r0, [sp, #136]	; 0x88
 8011036:	4301      	orrs	r1, r0
 8011038:	9809      	ldr	r0, [sp, #36]	; 0x24
 801103a:	4301      	orrs	r1, r0
 801103c:	d120      	bne.n	8011080 <_dtoa_r+0xad8>
 801103e:	2a00      	cmp	r2, #0
 8011040:	ddee      	ble.n	8011020 <_dtoa_r+0xa78>
 8011042:	4651      	mov	r1, sl
 8011044:	2201      	movs	r2, #1
 8011046:	4628      	mov	r0, r5
 8011048:	9302      	str	r3, [sp, #8]
 801104a:	f000 fad5 	bl	80115f8 <__lshift>
 801104e:	4621      	mov	r1, r4
 8011050:	4682      	mov	sl, r0
 8011052:	f000 fb3d 	bl	80116d0 <__mcmp>
 8011056:	2800      	cmp	r0, #0
 8011058:	9b02      	ldr	r3, [sp, #8]
 801105a:	dc02      	bgt.n	8011062 <_dtoa_r+0xaba>
 801105c:	d1e0      	bne.n	8011020 <_dtoa_r+0xa78>
 801105e:	07da      	lsls	r2, r3, #31
 8011060:	d5de      	bpl.n	8011020 <_dtoa_r+0xa78>
 8011062:	2b39      	cmp	r3, #57	; 0x39
 8011064:	d1da      	bne.n	801101c <_dtoa_r+0xa74>
 8011066:	2339      	movs	r3, #57	; 0x39
 8011068:	f88b 3000 	strb.w	r3, [fp]
 801106c:	463b      	mov	r3, r7
 801106e:	461f      	mov	r7, r3
 8011070:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8011074:	3b01      	subs	r3, #1
 8011076:	2a39      	cmp	r2, #57	; 0x39
 8011078:	d050      	beq.n	801111c <_dtoa_r+0xb74>
 801107a:	3201      	adds	r2, #1
 801107c:	701a      	strb	r2, [r3, #0]
 801107e:	e749      	b.n	8010f14 <_dtoa_r+0x96c>
 8011080:	2a00      	cmp	r2, #0
 8011082:	dd03      	ble.n	801108c <_dtoa_r+0xae4>
 8011084:	2b39      	cmp	r3, #57	; 0x39
 8011086:	d0ee      	beq.n	8011066 <_dtoa_r+0xabe>
 8011088:	3301      	adds	r3, #1
 801108a:	e7c9      	b.n	8011020 <_dtoa_r+0xa78>
 801108c:	9a02      	ldr	r2, [sp, #8]
 801108e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011090:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011094:	428a      	cmp	r2, r1
 8011096:	d02a      	beq.n	80110ee <_dtoa_r+0xb46>
 8011098:	4651      	mov	r1, sl
 801109a:	2300      	movs	r3, #0
 801109c:	220a      	movs	r2, #10
 801109e:	4628      	mov	r0, r5
 80110a0:	f000 f8fe 	bl	80112a0 <__multadd>
 80110a4:	45b0      	cmp	r8, r6
 80110a6:	4682      	mov	sl, r0
 80110a8:	f04f 0300 	mov.w	r3, #0
 80110ac:	f04f 020a 	mov.w	r2, #10
 80110b0:	4641      	mov	r1, r8
 80110b2:	4628      	mov	r0, r5
 80110b4:	d107      	bne.n	80110c6 <_dtoa_r+0xb1e>
 80110b6:	f000 f8f3 	bl	80112a0 <__multadd>
 80110ba:	4680      	mov	r8, r0
 80110bc:	4606      	mov	r6, r0
 80110be:	9b02      	ldr	r3, [sp, #8]
 80110c0:	3301      	adds	r3, #1
 80110c2:	9302      	str	r3, [sp, #8]
 80110c4:	e777      	b.n	8010fb6 <_dtoa_r+0xa0e>
 80110c6:	f000 f8eb 	bl	80112a0 <__multadd>
 80110ca:	4631      	mov	r1, r6
 80110cc:	4680      	mov	r8, r0
 80110ce:	2300      	movs	r3, #0
 80110d0:	220a      	movs	r2, #10
 80110d2:	4628      	mov	r0, r5
 80110d4:	f000 f8e4 	bl	80112a0 <__multadd>
 80110d8:	4606      	mov	r6, r0
 80110da:	e7f0      	b.n	80110be <_dtoa_r+0xb16>
 80110dc:	f1bb 0f00 	cmp.w	fp, #0
 80110e0:	bfcc      	ite	gt
 80110e2:	465f      	movgt	r7, fp
 80110e4:	2701      	movle	r7, #1
 80110e6:	f04f 0800 	mov.w	r8, #0
 80110ea:	9a08      	ldr	r2, [sp, #32]
 80110ec:	4417      	add	r7, r2
 80110ee:	4651      	mov	r1, sl
 80110f0:	2201      	movs	r2, #1
 80110f2:	4628      	mov	r0, r5
 80110f4:	9302      	str	r3, [sp, #8]
 80110f6:	f000 fa7f 	bl	80115f8 <__lshift>
 80110fa:	4621      	mov	r1, r4
 80110fc:	4682      	mov	sl, r0
 80110fe:	f000 fae7 	bl	80116d0 <__mcmp>
 8011102:	2800      	cmp	r0, #0
 8011104:	dcb2      	bgt.n	801106c <_dtoa_r+0xac4>
 8011106:	d102      	bne.n	801110e <_dtoa_r+0xb66>
 8011108:	9b02      	ldr	r3, [sp, #8]
 801110a:	07db      	lsls	r3, r3, #31
 801110c:	d4ae      	bmi.n	801106c <_dtoa_r+0xac4>
 801110e:	463b      	mov	r3, r7
 8011110:	461f      	mov	r7, r3
 8011112:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011116:	2a30      	cmp	r2, #48	; 0x30
 8011118:	d0fa      	beq.n	8011110 <_dtoa_r+0xb68>
 801111a:	e6fb      	b.n	8010f14 <_dtoa_r+0x96c>
 801111c:	9a08      	ldr	r2, [sp, #32]
 801111e:	429a      	cmp	r2, r3
 8011120:	d1a5      	bne.n	801106e <_dtoa_r+0xac6>
 8011122:	2331      	movs	r3, #49	; 0x31
 8011124:	f109 0901 	add.w	r9, r9, #1
 8011128:	7013      	strb	r3, [r2, #0]
 801112a:	e6f3      	b.n	8010f14 <_dtoa_r+0x96c>
 801112c:	4b13      	ldr	r3, [pc, #76]	; (801117c <_dtoa_r+0xbd4>)
 801112e:	f7ff baa7 	b.w	8010680 <_dtoa_r+0xd8>
 8011132:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011134:	2b00      	cmp	r3, #0
 8011136:	f47f aa80 	bne.w	801063a <_dtoa_r+0x92>
 801113a:	4b11      	ldr	r3, [pc, #68]	; (8011180 <_dtoa_r+0xbd8>)
 801113c:	f7ff baa0 	b.w	8010680 <_dtoa_r+0xd8>
 8011140:	f1bb 0f00 	cmp.w	fp, #0
 8011144:	dc03      	bgt.n	801114e <_dtoa_r+0xba6>
 8011146:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011148:	2b02      	cmp	r3, #2
 801114a:	f73f aecc 	bgt.w	8010ee6 <_dtoa_r+0x93e>
 801114e:	9f08      	ldr	r7, [sp, #32]
 8011150:	4621      	mov	r1, r4
 8011152:	4650      	mov	r0, sl
 8011154:	f7ff f99a 	bl	801048c <quorem>
 8011158:	9a08      	ldr	r2, [sp, #32]
 801115a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801115e:	f807 3b01 	strb.w	r3, [r7], #1
 8011162:	1aba      	subs	r2, r7, r2
 8011164:	4593      	cmp	fp, r2
 8011166:	ddb9      	ble.n	80110dc <_dtoa_r+0xb34>
 8011168:	4651      	mov	r1, sl
 801116a:	2300      	movs	r3, #0
 801116c:	220a      	movs	r2, #10
 801116e:	4628      	mov	r0, r5
 8011170:	f000 f896 	bl	80112a0 <__multadd>
 8011174:	4682      	mov	sl, r0
 8011176:	e7eb      	b.n	8011150 <_dtoa_r+0xba8>
 8011178:	0801370b 	.word	0x0801370b
 801117c:	08013664 	.word	0x08013664
 8011180:	08013688 	.word	0x08013688

08011184 <_localeconv_r>:
 8011184:	4800      	ldr	r0, [pc, #0]	; (8011188 <_localeconv_r+0x4>)
 8011186:	4770      	bx	lr
 8011188:	200002fc 	.word	0x200002fc

0801118c <memchr>:
 801118c:	4603      	mov	r3, r0
 801118e:	b510      	push	{r4, lr}
 8011190:	b2c9      	uxtb	r1, r1
 8011192:	4402      	add	r2, r0
 8011194:	4293      	cmp	r3, r2
 8011196:	4618      	mov	r0, r3
 8011198:	d101      	bne.n	801119e <memchr+0x12>
 801119a:	2000      	movs	r0, #0
 801119c:	e003      	b.n	80111a6 <memchr+0x1a>
 801119e:	7804      	ldrb	r4, [r0, #0]
 80111a0:	3301      	adds	r3, #1
 80111a2:	428c      	cmp	r4, r1
 80111a4:	d1f6      	bne.n	8011194 <memchr+0x8>
 80111a6:	bd10      	pop	{r4, pc}

080111a8 <memcpy>:
 80111a8:	440a      	add	r2, r1
 80111aa:	4291      	cmp	r1, r2
 80111ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80111b0:	d100      	bne.n	80111b4 <memcpy+0xc>
 80111b2:	4770      	bx	lr
 80111b4:	b510      	push	{r4, lr}
 80111b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111ba:	4291      	cmp	r1, r2
 80111bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80111c0:	d1f9      	bne.n	80111b6 <memcpy+0xe>
 80111c2:	bd10      	pop	{r4, pc}

080111c4 <__malloc_lock>:
 80111c4:	4801      	ldr	r0, [pc, #4]	; (80111cc <__malloc_lock+0x8>)
 80111c6:	f000 bd4c 	b.w	8011c62 <__retarget_lock_acquire_recursive>
 80111ca:	bf00      	nop
 80111cc:	200020b8 	.word	0x200020b8

080111d0 <__malloc_unlock>:
 80111d0:	4801      	ldr	r0, [pc, #4]	; (80111d8 <__malloc_unlock+0x8>)
 80111d2:	f000 bd47 	b.w	8011c64 <__retarget_lock_release_recursive>
 80111d6:	bf00      	nop
 80111d8:	200020b8 	.word	0x200020b8

080111dc <_Balloc>:
 80111dc:	b570      	push	{r4, r5, r6, lr}
 80111de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80111e0:	4604      	mov	r4, r0
 80111e2:	460d      	mov	r5, r1
 80111e4:	b976      	cbnz	r6, 8011204 <_Balloc+0x28>
 80111e6:	2010      	movs	r0, #16
 80111e8:	f7fe fbec 	bl	800f9c4 <malloc>
 80111ec:	4602      	mov	r2, r0
 80111ee:	6260      	str	r0, [r4, #36]	; 0x24
 80111f0:	b920      	cbnz	r0, 80111fc <_Balloc+0x20>
 80111f2:	2166      	movs	r1, #102	; 0x66
 80111f4:	4b17      	ldr	r3, [pc, #92]	; (8011254 <_Balloc+0x78>)
 80111f6:	4818      	ldr	r0, [pc, #96]	; (8011258 <_Balloc+0x7c>)
 80111f8:	f000 fd02 	bl	8011c00 <__assert_func>
 80111fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011200:	6006      	str	r6, [r0, #0]
 8011202:	60c6      	str	r6, [r0, #12]
 8011204:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011206:	68f3      	ldr	r3, [r6, #12]
 8011208:	b183      	cbz	r3, 801122c <_Balloc+0x50>
 801120a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801120c:	68db      	ldr	r3, [r3, #12]
 801120e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011212:	b9b8      	cbnz	r0, 8011244 <_Balloc+0x68>
 8011214:	2101      	movs	r1, #1
 8011216:	fa01 f605 	lsl.w	r6, r1, r5
 801121a:	1d72      	adds	r2, r6, #5
 801121c:	4620      	mov	r0, r4
 801121e:	0092      	lsls	r2, r2, #2
 8011220:	f000 fb5e 	bl	80118e0 <_calloc_r>
 8011224:	b160      	cbz	r0, 8011240 <_Balloc+0x64>
 8011226:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801122a:	e00e      	b.n	801124a <_Balloc+0x6e>
 801122c:	2221      	movs	r2, #33	; 0x21
 801122e:	2104      	movs	r1, #4
 8011230:	4620      	mov	r0, r4
 8011232:	f000 fb55 	bl	80118e0 <_calloc_r>
 8011236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011238:	60f0      	str	r0, [r6, #12]
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d1e4      	bne.n	801120a <_Balloc+0x2e>
 8011240:	2000      	movs	r0, #0
 8011242:	bd70      	pop	{r4, r5, r6, pc}
 8011244:	6802      	ldr	r2, [r0, #0]
 8011246:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801124a:	2300      	movs	r3, #0
 801124c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011250:	e7f7      	b.n	8011242 <_Balloc+0x66>
 8011252:	bf00      	nop
 8011254:	08013695 	.word	0x08013695
 8011258:	0801371c 	.word	0x0801371c

0801125c <_Bfree>:
 801125c:	b570      	push	{r4, r5, r6, lr}
 801125e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011260:	4605      	mov	r5, r0
 8011262:	460c      	mov	r4, r1
 8011264:	b976      	cbnz	r6, 8011284 <_Bfree+0x28>
 8011266:	2010      	movs	r0, #16
 8011268:	f7fe fbac 	bl	800f9c4 <malloc>
 801126c:	4602      	mov	r2, r0
 801126e:	6268      	str	r0, [r5, #36]	; 0x24
 8011270:	b920      	cbnz	r0, 801127c <_Bfree+0x20>
 8011272:	218a      	movs	r1, #138	; 0x8a
 8011274:	4b08      	ldr	r3, [pc, #32]	; (8011298 <_Bfree+0x3c>)
 8011276:	4809      	ldr	r0, [pc, #36]	; (801129c <_Bfree+0x40>)
 8011278:	f000 fcc2 	bl	8011c00 <__assert_func>
 801127c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011280:	6006      	str	r6, [r0, #0]
 8011282:	60c6      	str	r6, [r0, #12]
 8011284:	b13c      	cbz	r4, 8011296 <_Bfree+0x3a>
 8011286:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011288:	6862      	ldr	r2, [r4, #4]
 801128a:	68db      	ldr	r3, [r3, #12]
 801128c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011290:	6021      	str	r1, [r4, #0]
 8011292:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011296:	bd70      	pop	{r4, r5, r6, pc}
 8011298:	08013695 	.word	0x08013695
 801129c:	0801371c 	.word	0x0801371c

080112a0 <__multadd>:
 80112a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112a4:	4698      	mov	r8, r3
 80112a6:	460c      	mov	r4, r1
 80112a8:	2300      	movs	r3, #0
 80112aa:	690e      	ldr	r6, [r1, #16]
 80112ac:	4607      	mov	r7, r0
 80112ae:	f101 0014 	add.w	r0, r1, #20
 80112b2:	6805      	ldr	r5, [r0, #0]
 80112b4:	3301      	adds	r3, #1
 80112b6:	b2a9      	uxth	r1, r5
 80112b8:	fb02 8101 	mla	r1, r2, r1, r8
 80112bc:	0c2d      	lsrs	r5, r5, #16
 80112be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80112c2:	fb02 c505 	mla	r5, r2, r5, ip
 80112c6:	b289      	uxth	r1, r1
 80112c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80112cc:	429e      	cmp	r6, r3
 80112ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80112d2:	f840 1b04 	str.w	r1, [r0], #4
 80112d6:	dcec      	bgt.n	80112b2 <__multadd+0x12>
 80112d8:	f1b8 0f00 	cmp.w	r8, #0
 80112dc:	d022      	beq.n	8011324 <__multadd+0x84>
 80112de:	68a3      	ldr	r3, [r4, #8]
 80112e0:	42b3      	cmp	r3, r6
 80112e2:	dc19      	bgt.n	8011318 <__multadd+0x78>
 80112e4:	6861      	ldr	r1, [r4, #4]
 80112e6:	4638      	mov	r0, r7
 80112e8:	3101      	adds	r1, #1
 80112ea:	f7ff ff77 	bl	80111dc <_Balloc>
 80112ee:	4605      	mov	r5, r0
 80112f0:	b928      	cbnz	r0, 80112fe <__multadd+0x5e>
 80112f2:	4602      	mov	r2, r0
 80112f4:	21b5      	movs	r1, #181	; 0xb5
 80112f6:	4b0d      	ldr	r3, [pc, #52]	; (801132c <__multadd+0x8c>)
 80112f8:	480d      	ldr	r0, [pc, #52]	; (8011330 <__multadd+0x90>)
 80112fa:	f000 fc81 	bl	8011c00 <__assert_func>
 80112fe:	6922      	ldr	r2, [r4, #16]
 8011300:	f104 010c 	add.w	r1, r4, #12
 8011304:	3202      	adds	r2, #2
 8011306:	0092      	lsls	r2, r2, #2
 8011308:	300c      	adds	r0, #12
 801130a:	f7ff ff4d 	bl	80111a8 <memcpy>
 801130e:	4621      	mov	r1, r4
 8011310:	4638      	mov	r0, r7
 8011312:	f7ff ffa3 	bl	801125c <_Bfree>
 8011316:	462c      	mov	r4, r5
 8011318:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801131c:	3601      	adds	r6, #1
 801131e:	f8c3 8014 	str.w	r8, [r3, #20]
 8011322:	6126      	str	r6, [r4, #16]
 8011324:	4620      	mov	r0, r4
 8011326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801132a:	bf00      	nop
 801132c:	0801370b 	.word	0x0801370b
 8011330:	0801371c 	.word	0x0801371c

08011334 <__hi0bits>:
 8011334:	0c02      	lsrs	r2, r0, #16
 8011336:	0412      	lsls	r2, r2, #16
 8011338:	4603      	mov	r3, r0
 801133a:	b9ca      	cbnz	r2, 8011370 <__hi0bits+0x3c>
 801133c:	0403      	lsls	r3, r0, #16
 801133e:	2010      	movs	r0, #16
 8011340:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011344:	bf04      	itt	eq
 8011346:	021b      	lsleq	r3, r3, #8
 8011348:	3008      	addeq	r0, #8
 801134a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801134e:	bf04      	itt	eq
 8011350:	011b      	lsleq	r3, r3, #4
 8011352:	3004      	addeq	r0, #4
 8011354:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011358:	bf04      	itt	eq
 801135a:	009b      	lsleq	r3, r3, #2
 801135c:	3002      	addeq	r0, #2
 801135e:	2b00      	cmp	r3, #0
 8011360:	db05      	blt.n	801136e <__hi0bits+0x3a>
 8011362:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8011366:	f100 0001 	add.w	r0, r0, #1
 801136a:	bf08      	it	eq
 801136c:	2020      	moveq	r0, #32
 801136e:	4770      	bx	lr
 8011370:	2000      	movs	r0, #0
 8011372:	e7e5      	b.n	8011340 <__hi0bits+0xc>

08011374 <__lo0bits>:
 8011374:	6803      	ldr	r3, [r0, #0]
 8011376:	4602      	mov	r2, r0
 8011378:	f013 0007 	ands.w	r0, r3, #7
 801137c:	d00b      	beq.n	8011396 <__lo0bits+0x22>
 801137e:	07d9      	lsls	r1, r3, #31
 8011380:	d422      	bmi.n	80113c8 <__lo0bits+0x54>
 8011382:	0798      	lsls	r0, r3, #30
 8011384:	bf49      	itett	mi
 8011386:	085b      	lsrmi	r3, r3, #1
 8011388:	089b      	lsrpl	r3, r3, #2
 801138a:	2001      	movmi	r0, #1
 801138c:	6013      	strmi	r3, [r2, #0]
 801138e:	bf5c      	itt	pl
 8011390:	2002      	movpl	r0, #2
 8011392:	6013      	strpl	r3, [r2, #0]
 8011394:	4770      	bx	lr
 8011396:	b299      	uxth	r1, r3
 8011398:	b909      	cbnz	r1, 801139e <__lo0bits+0x2a>
 801139a:	2010      	movs	r0, #16
 801139c:	0c1b      	lsrs	r3, r3, #16
 801139e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80113a2:	bf04      	itt	eq
 80113a4:	0a1b      	lsreq	r3, r3, #8
 80113a6:	3008      	addeq	r0, #8
 80113a8:	0719      	lsls	r1, r3, #28
 80113aa:	bf04      	itt	eq
 80113ac:	091b      	lsreq	r3, r3, #4
 80113ae:	3004      	addeq	r0, #4
 80113b0:	0799      	lsls	r1, r3, #30
 80113b2:	bf04      	itt	eq
 80113b4:	089b      	lsreq	r3, r3, #2
 80113b6:	3002      	addeq	r0, #2
 80113b8:	07d9      	lsls	r1, r3, #31
 80113ba:	d403      	bmi.n	80113c4 <__lo0bits+0x50>
 80113bc:	085b      	lsrs	r3, r3, #1
 80113be:	f100 0001 	add.w	r0, r0, #1
 80113c2:	d003      	beq.n	80113cc <__lo0bits+0x58>
 80113c4:	6013      	str	r3, [r2, #0]
 80113c6:	4770      	bx	lr
 80113c8:	2000      	movs	r0, #0
 80113ca:	4770      	bx	lr
 80113cc:	2020      	movs	r0, #32
 80113ce:	4770      	bx	lr

080113d0 <__i2b>:
 80113d0:	b510      	push	{r4, lr}
 80113d2:	460c      	mov	r4, r1
 80113d4:	2101      	movs	r1, #1
 80113d6:	f7ff ff01 	bl	80111dc <_Balloc>
 80113da:	4602      	mov	r2, r0
 80113dc:	b928      	cbnz	r0, 80113ea <__i2b+0x1a>
 80113de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80113e2:	4b04      	ldr	r3, [pc, #16]	; (80113f4 <__i2b+0x24>)
 80113e4:	4804      	ldr	r0, [pc, #16]	; (80113f8 <__i2b+0x28>)
 80113e6:	f000 fc0b 	bl	8011c00 <__assert_func>
 80113ea:	2301      	movs	r3, #1
 80113ec:	6144      	str	r4, [r0, #20]
 80113ee:	6103      	str	r3, [r0, #16]
 80113f0:	bd10      	pop	{r4, pc}
 80113f2:	bf00      	nop
 80113f4:	0801370b 	.word	0x0801370b
 80113f8:	0801371c 	.word	0x0801371c

080113fc <__multiply>:
 80113fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011400:	4614      	mov	r4, r2
 8011402:	690a      	ldr	r2, [r1, #16]
 8011404:	6923      	ldr	r3, [r4, #16]
 8011406:	460d      	mov	r5, r1
 8011408:	429a      	cmp	r2, r3
 801140a:	bfbe      	ittt	lt
 801140c:	460b      	movlt	r3, r1
 801140e:	4625      	movlt	r5, r4
 8011410:	461c      	movlt	r4, r3
 8011412:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011416:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801141a:	68ab      	ldr	r3, [r5, #8]
 801141c:	6869      	ldr	r1, [r5, #4]
 801141e:	eb0a 0709 	add.w	r7, sl, r9
 8011422:	42bb      	cmp	r3, r7
 8011424:	b085      	sub	sp, #20
 8011426:	bfb8      	it	lt
 8011428:	3101      	addlt	r1, #1
 801142a:	f7ff fed7 	bl	80111dc <_Balloc>
 801142e:	b930      	cbnz	r0, 801143e <__multiply+0x42>
 8011430:	4602      	mov	r2, r0
 8011432:	f240 115d 	movw	r1, #349	; 0x15d
 8011436:	4b41      	ldr	r3, [pc, #260]	; (801153c <__multiply+0x140>)
 8011438:	4841      	ldr	r0, [pc, #260]	; (8011540 <__multiply+0x144>)
 801143a:	f000 fbe1 	bl	8011c00 <__assert_func>
 801143e:	f100 0614 	add.w	r6, r0, #20
 8011442:	4633      	mov	r3, r6
 8011444:	2200      	movs	r2, #0
 8011446:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801144a:	4543      	cmp	r3, r8
 801144c:	d31e      	bcc.n	801148c <__multiply+0x90>
 801144e:	f105 0c14 	add.w	ip, r5, #20
 8011452:	f104 0314 	add.w	r3, r4, #20
 8011456:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801145a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801145e:	9202      	str	r2, [sp, #8]
 8011460:	ebac 0205 	sub.w	r2, ip, r5
 8011464:	3a15      	subs	r2, #21
 8011466:	f022 0203 	bic.w	r2, r2, #3
 801146a:	3204      	adds	r2, #4
 801146c:	f105 0115 	add.w	r1, r5, #21
 8011470:	458c      	cmp	ip, r1
 8011472:	bf38      	it	cc
 8011474:	2204      	movcc	r2, #4
 8011476:	9201      	str	r2, [sp, #4]
 8011478:	9a02      	ldr	r2, [sp, #8]
 801147a:	9303      	str	r3, [sp, #12]
 801147c:	429a      	cmp	r2, r3
 801147e:	d808      	bhi.n	8011492 <__multiply+0x96>
 8011480:	2f00      	cmp	r7, #0
 8011482:	dc55      	bgt.n	8011530 <__multiply+0x134>
 8011484:	6107      	str	r7, [r0, #16]
 8011486:	b005      	add	sp, #20
 8011488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801148c:	f843 2b04 	str.w	r2, [r3], #4
 8011490:	e7db      	b.n	801144a <__multiply+0x4e>
 8011492:	f8b3 a000 	ldrh.w	sl, [r3]
 8011496:	f1ba 0f00 	cmp.w	sl, #0
 801149a:	d020      	beq.n	80114de <__multiply+0xe2>
 801149c:	46b1      	mov	r9, r6
 801149e:	2200      	movs	r2, #0
 80114a0:	f105 0e14 	add.w	lr, r5, #20
 80114a4:	f85e 4b04 	ldr.w	r4, [lr], #4
 80114a8:	f8d9 b000 	ldr.w	fp, [r9]
 80114ac:	b2a1      	uxth	r1, r4
 80114ae:	fa1f fb8b 	uxth.w	fp, fp
 80114b2:	fb0a b101 	mla	r1, sl, r1, fp
 80114b6:	4411      	add	r1, r2
 80114b8:	f8d9 2000 	ldr.w	r2, [r9]
 80114bc:	0c24      	lsrs	r4, r4, #16
 80114be:	0c12      	lsrs	r2, r2, #16
 80114c0:	fb0a 2404 	mla	r4, sl, r4, r2
 80114c4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80114c8:	b289      	uxth	r1, r1
 80114ca:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80114ce:	45f4      	cmp	ip, lr
 80114d0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80114d4:	f849 1b04 	str.w	r1, [r9], #4
 80114d8:	d8e4      	bhi.n	80114a4 <__multiply+0xa8>
 80114da:	9901      	ldr	r1, [sp, #4]
 80114dc:	5072      	str	r2, [r6, r1]
 80114de:	9a03      	ldr	r2, [sp, #12]
 80114e0:	3304      	adds	r3, #4
 80114e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80114e6:	f1b9 0f00 	cmp.w	r9, #0
 80114ea:	d01f      	beq.n	801152c <__multiply+0x130>
 80114ec:	46b6      	mov	lr, r6
 80114ee:	f04f 0a00 	mov.w	sl, #0
 80114f2:	6834      	ldr	r4, [r6, #0]
 80114f4:	f105 0114 	add.w	r1, r5, #20
 80114f8:	880a      	ldrh	r2, [r1, #0]
 80114fa:	f8be b002 	ldrh.w	fp, [lr, #2]
 80114fe:	b2a4      	uxth	r4, r4
 8011500:	fb09 b202 	mla	r2, r9, r2, fp
 8011504:	4492      	add	sl, r2
 8011506:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801150a:	f84e 4b04 	str.w	r4, [lr], #4
 801150e:	f851 4b04 	ldr.w	r4, [r1], #4
 8011512:	f8be 2000 	ldrh.w	r2, [lr]
 8011516:	0c24      	lsrs	r4, r4, #16
 8011518:	fb09 2404 	mla	r4, r9, r4, r2
 801151c:	458c      	cmp	ip, r1
 801151e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011522:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011526:	d8e7      	bhi.n	80114f8 <__multiply+0xfc>
 8011528:	9a01      	ldr	r2, [sp, #4]
 801152a:	50b4      	str	r4, [r6, r2]
 801152c:	3604      	adds	r6, #4
 801152e:	e7a3      	b.n	8011478 <__multiply+0x7c>
 8011530:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011534:	2b00      	cmp	r3, #0
 8011536:	d1a5      	bne.n	8011484 <__multiply+0x88>
 8011538:	3f01      	subs	r7, #1
 801153a:	e7a1      	b.n	8011480 <__multiply+0x84>
 801153c:	0801370b 	.word	0x0801370b
 8011540:	0801371c 	.word	0x0801371c

08011544 <__pow5mult>:
 8011544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011548:	4615      	mov	r5, r2
 801154a:	f012 0203 	ands.w	r2, r2, #3
 801154e:	4606      	mov	r6, r0
 8011550:	460f      	mov	r7, r1
 8011552:	d007      	beq.n	8011564 <__pow5mult+0x20>
 8011554:	4c25      	ldr	r4, [pc, #148]	; (80115ec <__pow5mult+0xa8>)
 8011556:	3a01      	subs	r2, #1
 8011558:	2300      	movs	r3, #0
 801155a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801155e:	f7ff fe9f 	bl	80112a0 <__multadd>
 8011562:	4607      	mov	r7, r0
 8011564:	10ad      	asrs	r5, r5, #2
 8011566:	d03d      	beq.n	80115e4 <__pow5mult+0xa0>
 8011568:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801156a:	b97c      	cbnz	r4, 801158c <__pow5mult+0x48>
 801156c:	2010      	movs	r0, #16
 801156e:	f7fe fa29 	bl	800f9c4 <malloc>
 8011572:	4602      	mov	r2, r0
 8011574:	6270      	str	r0, [r6, #36]	; 0x24
 8011576:	b928      	cbnz	r0, 8011584 <__pow5mult+0x40>
 8011578:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801157c:	4b1c      	ldr	r3, [pc, #112]	; (80115f0 <__pow5mult+0xac>)
 801157e:	481d      	ldr	r0, [pc, #116]	; (80115f4 <__pow5mult+0xb0>)
 8011580:	f000 fb3e 	bl	8011c00 <__assert_func>
 8011584:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011588:	6004      	str	r4, [r0, #0]
 801158a:	60c4      	str	r4, [r0, #12]
 801158c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011590:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011594:	b94c      	cbnz	r4, 80115aa <__pow5mult+0x66>
 8011596:	f240 2171 	movw	r1, #625	; 0x271
 801159a:	4630      	mov	r0, r6
 801159c:	f7ff ff18 	bl	80113d0 <__i2b>
 80115a0:	2300      	movs	r3, #0
 80115a2:	4604      	mov	r4, r0
 80115a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80115a8:	6003      	str	r3, [r0, #0]
 80115aa:	f04f 0900 	mov.w	r9, #0
 80115ae:	07eb      	lsls	r3, r5, #31
 80115b0:	d50a      	bpl.n	80115c8 <__pow5mult+0x84>
 80115b2:	4639      	mov	r1, r7
 80115b4:	4622      	mov	r2, r4
 80115b6:	4630      	mov	r0, r6
 80115b8:	f7ff ff20 	bl	80113fc <__multiply>
 80115bc:	4680      	mov	r8, r0
 80115be:	4639      	mov	r1, r7
 80115c0:	4630      	mov	r0, r6
 80115c2:	f7ff fe4b 	bl	801125c <_Bfree>
 80115c6:	4647      	mov	r7, r8
 80115c8:	106d      	asrs	r5, r5, #1
 80115ca:	d00b      	beq.n	80115e4 <__pow5mult+0xa0>
 80115cc:	6820      	ldr	r0, [r4, #0]
 80115ce:	b938      	cbnz	r0, 80115e0 <__pow5mult+0x9c>
 80115d0:	4622      	mov	r2, r4
 80115d2:	4621      	mov	r1, r4
 80115d4:	4630      	mov	r0, r6
 80115d6:	f7ff ff11 	bl	80113fc <__multiply>
 80115da:	6020      	str	r0, [r4, #0]
 80115dc:	f8c0 9000 	str.w	r9, [r0]
 80115e0:	4604      	mov	r4, r0
 80115e2:	e7e4      	b.n	80115ae <__pow5mult+0x6a>
 80115e4:	4638      	mov	r0, r7
 80115e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115ea:	bf00      	nop
 80115ec:	08013870 	.word	0x08013870
 80115f0:	08013695 	.word	0x08013695
 80115f4:	0801371c 	.word	0x0801371c

080115f8 <__lshift>:
 80115f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115fc:	460c      	mov	r4, r1
 80115fe:	4607      	mov	r7, r0
 8011600:	4691      	mov	r9, r2
 8011602:	6923      	ldr	r3, [r4, #16]
 8011604:	6849      	ldr	r1, [r1, #4]
 8011606:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801160a:	68a3      	ldr	r3, [r4, #8]
 801160c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011610:	f108 0601 	add.w	r6, r8, #1
 8011614:	42b3      	cmp	r3, r6
 8011616:	db0b      	blt.n	8011630 <__lshift+0x38>
 8011618:	4638      	mov	r0, r7
 801161a:	f7ff fddf 	bl	80111dc <_Balloc>
 801161e:	4605      	mov	r5, r0
 8011620:	b948      	cbnz	r0, 8011636 <__lshift+0x3e>
 8011622:	4602      	mov	r2, r0
 8011624:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011628:	4b27      	ldr	r3, [pc, #156]	; (80116c8 <__lshift+0xd0>)
 801162a:	4828      	ldr	r0, [pc, #160]	; (80116cc <__lshift+0xd4>)
 801162c:	f000 fae8 	bl	8011c00 <__assert_func>
 8011630:	3101      	adds	r1, #1
 8011632:	005b      	lsls	r3, r3, #1
 8011634:	e7ee      	b.n	8011614 <__lshift+0x1c>
 8011636:	2300      	movs	r3, #0
 8011638:	f100 0114 	add.w	r1, r0, #20
 801163c:	f100 0210 	add.w	r2, r0, #16
 8011640:	4618      	mov	r0, r3
 8011642:	4553      	cmp	r3, sl
 8011644:	db33      	blt.n	80116ae <__lshift+0xb6>
 8011646:	6920      	ldr	r0, [r4, #16]
 8011648:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801164c:	f104 0314 	add.w	r3, r4, #20
 8011650:	f019 091f 	ands.w	r9, r9, #31
 8011654:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011658:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801165c:	d02b      	beq.n	80116b6 <__lshift+0xbe>
 801165e:	468a      	mov	sl, r1
 8011660:	2200      	movs	r2, #0
 8011662:	f1c9 0e20 	rsb	lr, r9, #32
 8011666:	6818      	ldr	r0, [r3, #0]
 8011668:	fa00 f009 	lsl.w	r0, r0, r9
 801166c:	4302      	orrs	r2, r0
 801166e:	f84a 2b04 	str.w	r2, [sl], #4
 8011672:	f853 2b04 	ldr.w	r2, [r3], #4
 8011676:	459c      	cmp	ip, r3
 8011678:	fa22 f20e 	lsr.w	r2, r2, lr
 801167c:	d8f3      	bhi.n	8011666 <__lshift+0x6e>
 801167e:	ebac 0304 	sub.w	r3, ip, r4
 8011682:	3b15      	subs	r3, #21
 8011684:	f023 0303 	bic.w	r3, r3, #3
 8011688:	3304      	adds	r3, #4
 801168a:	f104 0015 	add.w	r0, r4, #21
 801168e:	4584      	cmp	ip, r0
 8011690:	bf38      	it	cc
 8011692:	2304      	movcc	r3, #4
 8011694:	50ca      	str	r2, [r1, r3]
 8011696:	b10a      	cbz	r2, 801169c <__lshift+0xa4>
 8011698:	f108 0602 	add.w	r6, r8, #2
 801169c:	3e01      	subs	r6, #1
 801169e:	4638      	mov	r0, r7
 80116a0:	4621      	mov	r1, r4
 80116a2:	612e      	str	r6, [r5, #16]
 80116a4:	f7ff fdda 	bl	801125c <_Bfree>
 80116a8:	4628      	mov	r0, r5
 80116aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80116b2:	3301      	adds	r3, #1
 80116b4:	e7c5      	b.n	8011642 <__lshift+0x4a>
 80116b6:	3904      	subs	r1, #4
 80116b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80116bc:	459c      	cmp	ip, r3
 80116be:	f841 2f04 	str.w	r2, [r1, #4]!
 80116c2:	d8f9      	bhi.n	80116b8 <__lshift+0xc0>
 80116c4:	e7ea      	b.n	801169c <__lshift+0xa4>
 80116c6:	bf00      	nop
 80116c8:	0801370b 	.word	0x0801370b
 80116cc:	0801371c 	.word	0x0801371c

080116d0 <__mcmp>:
 80116d0:	4603      	mov	r3, r0
 80116d2:	690a      	ldr	r2, [r1, #16]
 80116d4:	6900      	ldr	r0, [r0, #16]
 80116d6:	b530      	push	{r4, r5, lr}
 80116d8:	1a80      	subs	r0, r0, r2
 80116da:	d10d      	bne.n	80116f8 <__mcmp+0x28>
 80116dc:	3314      	adds	r3, #20
 80116de:	3114      	adds	r1, #20
 80116e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80116e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80116e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80116ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80116f0:	4295      	cmp	r5, r2
 80116f2:	d002      	beq.n	80116fa <__mcmp+0x2a>
 80116f4:	d304      	bcc.n	8011700 <__mcmp+0x30>
 80116f6:	2001      	movs	r0, #1
 80116f8:	bd30      	pop	{r4, r5, pc}
 80116fa:	42a3      	cmp	r3, r4
 80116fc:	d3f4      	bcc.n	80116e8 <__mcmp+0x18>
 80116fe:	e7fb      	b.n	80116f8 <__mcmp+0x28>
 8011700:	f04f 30ff 	mov.w	r0, #4294967295
 8011704:	e7f8      	b.n	80116f8 <__mcmp+0x28>
	...

08011708 <__mdiff>:
 8011708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801170c:	460c      	mov	r4, r1
 801170e:	4606      	mov	r6, r0
 8011710:	4611      	mov	r1, r2
 8011712:	4620      	mov	r0, r4
 8011714:	4692      	mov	sl, r2
 8011716:	f7ff ffdb 	bl	80116d0 <__mcmp>
 801171a:	1e05      	subs	r5, r0, #0
 801171c:	d111      	bne.n	8011742 <__mdiff+0x3a>
 801171e:	4629      	mov	r1, r5
 8011720:	4630      	mov	r0, r6
 8011722:	f7ff fd5b 	bl	80111dc <_Balloc>
 8011726:	4602      	mov	r2, r0
 8011728:	b928      	cbnz	r0, 8011736 <__mdiff+0x2e>
 801172a:	f240 2132 	movw	r1, #562	; 0x232
 801172e:	4b3c      	ldr	r3, [pc, #240]	; (8011820 <__mdiff+0x118>)
 8011730:	483c      	ldr	r0, [pc, #240]	; (8011824 <__mdiff+0x11c>)
 8011732:	f000 fa65 	bl	8011c00 <__assert_func>
 8011736:	2301      	movs	r3, #1
 8011738:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801173c:	4610      	mov	r0, r2
 801173e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011742:	bfa4      	itt	ge
 8011744:	4653      	movge	r3, sl
 8011746:	46a2      	movge	sl, r4
 8011748:	4630      	mov	r0, r6
 801174a:	f8da 1004 	ldr.w	r1, [sl, #4]
 801174e:	bfa6      	itte	ge
 8011750:	461c      	movge	r4, r3
 8011752:	2500      	movge	r5, #0
 8011754:	2501      	movlt	r5, #1
 8011756:	f7ff fd41 	bl	80111dc <_Balloc>
 801175a:	4602      	mov	r2, r0
 801175c:	b918      	cbnz	r0, 8011766 <__mdiff+0x5e>
 801175e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011762:	4b2f      	ldr	r3, [pc, #188]	; (8011820 <__mdiff+0x118>)
 8011764:	e7e4      	b.n	8011730 <__mdiff+0x28>
 8011766:	f100 0814 	add.w	r8, r0, #20
 801176a:	f8da 7010 	ldr.w	r7, [sl, #16]
 801176e:	60c5      	str	r5, [r0, #12]
 8011770:	f04f 0c00 	mov.w	ip, #0
 8011774:	f10a 0514 	add.w	r5, sl, #20
 8011778:	f10a 0010 	add.w	r0, sl, #16
 801177c:	46c2      	mov	sl, r8
 801177e:	6926      	ldr	r6, [r4, #16]
 8011780:	f104 0914 	add.w	r9, r4, #20
 8011784:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8011788:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801178c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8011790:	f859 3b04 	ldr.w	r3, [r9], #4
 8011794:	fa1f f18b 	uxth.w	r1, fp
 8011798:	4461      	add	r1, ip
 801179a:	fa1f fc83 	uxth.w	ip, r3
 801179e:	0c1b      	lsrs	r3, r3, #16
 80117a0:	eba1 010c 	sub.w	r1, r1, ip
 80117a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80117a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80117ac:	b289      	uxth	r1, r1
 80117ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80117b2:	454e      	cmp	r6, r9
 80117b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80117b8:	f84a 3b04 	str.w	r3, [sl], #4
 80117bc:	d8e6      	bhi.n	801178c <__mdiff+0x84>
 80117be:	1b33      	subs	r3, r6, r4
 80117c0:	3b15      	subs	r3, #21
 80117c2:	f023 0303 	bic.w	r3, r3, #3
 80117c6:	3415      	adds	r4, #21
 80117c8:	3304      	adds	r3, #4
 80117ca:	42a6      	cmp	r6, r4
 80117cc:	bf38      	it	cc
 80117ce:	2304      	movcc	r3, #4
 80117d0:	441d      	add	r5, r3
 80117d2:	4443      	add	r3, r8
 80117d4:	461e      	mov	r6, r3
 80117d6:	462c      	mov	r4, r5
 80117d8:	4574      	cmp	r4, lr
 80117da:	d30e      	bcc.n	80117fa <__mdiff+0xf2>
 80117dc:	f10e 0103 	add.w	r1, lr, #3
 80117e0:	1b49      	subs	r1, r1, r5
 80117e2:	f021 0103 	bic.w	r1, r1, #3
 80117e6:	3d03      	subs	r5, #3
 80117e8:	45ae      	cmp	lr, r5
 80117ea:	bf38      	it	cc
 80117ec:	2100      	movcc	r1, #0
 80117ee:	4419      	add	r1, r3
 80117f0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80117f4:	b18b      	cbz	r3, 801181a <__mdiff+0x112>
 80117f6:	6117      	str	r7, [r2, #16]
 80117f8:	e7a0      	b.n	801173c <__mdiff+0x34>
 80117fa:	f854 8b04 	ldr.w	r8, [r4], #4
 80117fe:	fa1f f188 	uxth.w	r1, r8
 8011802:	4461      	add	r1, ip
 8011804:	1408      	asrs	r0, r1, #16
 8011806:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 801180a:	b289      	uxth	r1, r1
 801180c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011810:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011814:	f846 1b04 	str.w	r1, [r6], #4
 8011818:	e7de      	b.n	80117d8 <__mdiff+0xd0>
 801181a:	3f01      	subs	r7, #1
 801181c:	e7e8      	b.n	80117f0 <__mdiff+0xe8>
 801181e:	bf00      	nop
 8011820:	0801370b 	.word	0x0801370b
 8011824:	0801371c 	.word	0x0801371c

08011828 <__d2b>:
 8011828:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801182c:	2101      	movs	r1, #1
 801182e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8011832:	4690      	mov	r8, r2
 8011834:	461d      	mov	r5, r3
 8011836:	f7ff fcd1 	bl	80111dc <_Balloc>
 801183a:	4604      	mov	r4, r0
 801183c:	b930      	cbnz	r0, 801184c <__d2b+0x24>
 801183e:	4602      	mov	r2, r0
 8011840:	f240 310a 	movw	r1, #778	; 0x30a
 8011844:	4b24      	ldr	r3, [pc, #144]	; (80118d8 <__d2b+0xb0>)
 8011846:	4825      	ldr	r0, [pc, #148]	; (80118dc <__d2b+0xb4>)
 8011848:	f000 f9da 	bl	8011c00 <__assert_func>
 801184c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8011850:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8011854:	bb2d      	cbnz	r5, 80118a2 <__d2b+0x7a>
 8011856:	9301      	str	r3, [sp, #4]
 8011858:	f1b8 0300 	subs.w	r3, r8, #0
 801185c:	d026      	beq.n	80118ac <__d2b+0x84>
 801185e:	4668      	mov	r0, sp
 8011860:	9300      	str	r3, [sp, #0]
 8011862:	f7ff fd87 	bl	8011374 <__lo0bits>
 8011866:	9900      	ldr	r1, [sp, #0]
 8011868:	b1f0      	cbz	r0, 80118a8 <__d2b+0x80>
 801186a:	9a01      	ldr	r2, [sp, #4]
 801186c:	f1c0 0320 	rsb	r3, r0, #32
 8011870:	fa02 f303 	lsl.w	r3, r2, r3
 8011874:	430b      	orrs	r3, r1
 8011876:	40c2      	lsrs	r2, r0
 8011878:	6163      	str	r3, [r4, #20]
 801187a:	9201      	str	r2, [sp, #4]
 801187c:	9b01      	ldr	r3, [sp, #4]
 801187e:	2b00      	cmp	r3, #0
 8011880:	bf14      	ite	ne
 8011882:	2102      	movne	r1, #2
 8011884:	2101      	moveq	r1, #1
 8011886:	61a3      	str	r3, [r4, #24]
 8011888:	6121      	str	r1, [r4, #16]
 801188a:	b1c5      	cbz	r5, 80118be <__d2b+0x96>
 801188c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011890:	4405      	add	r5, r0
 8011892:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011896:	603d      	str	r5, [r7, #0]
 8011898:	6030      	str	r0, [r6, #0]
 801189a:	4620      	mov	r0, r4
 801189c:	b002      	add	sp, #8
 801189e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80118a6:	e7d6      	b.n	8011856 <__d2b+0x2e>
 80118a8:	6161      	str	r1, [r4, #20]
 80118aa:	e7e7      	b.n	801187c <__d2b+0x54>
 80118ac:	a801      	add	r0, sp, #4
 80118ae:	f7ff fd61 	bl	8011374 <__lo0bits>
 80118b2:	2101      	movs	r1, #1
 80118b4:	9b01      	ldr	r3, [sp, #4]
 80118b6:	6121      	str	r1, [r4, #16]
 80118b8:	6163      	str	r3, [r4, #20]
 80118ba:	3020      	adds	r0, #32
 80118bc:	e7e5      	b.n	801188a <__d2b+0x62>
 80118be:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80118c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80118c6:	6038      	str	r0, [r7, #0]
 80118c8:	6918      	ldr	r0, [r3, #16]
 80118ca:	f7ff fd33 	bl	8011334 <__hi0bits>
 80118ce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80118d2:	6031      	str	r1, [r6, #0]
 80118d4:	e7e1      	b.n	801189a <__d2b+0x72>
 80118d6:	bf00      	nop
 80118d8:	0801370b 	.word	0x0801370b
 80118dc:	0801371c 	.word	0x0801371c

080118e0 <_calloc_r>:
 80118e0:	b538      	push	{r3, r4, r5, lr}
 80118e2:	fb02 f501 	mul.w	r5, r2, r1
 80118e6:	4629      	mov	r1, r5
 80118e8:	f7fe f8de 	bl	800faa8 <_malloc_r>
 80118ec:	4604      	mov	r4, r0
 80118ee:	b118      	cbz	r0, 80118f8 <_calloc_r+0x18>
 80118f0:	462a      	mov	r2, r5
 80118f2:	2100      	movs	r1, #0
 80118f4:	f7fe f884 	bl	800fa00 <memset>
 80118f8:	4620      	mov	r0, r4
 80118fa:	bd38      	pop	{r3, r4, r5, pc}

080118fc <_realloc_r>:
 80118fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118fe:	4607      	mov	r7, r0
 8011900:	4614      	mov	r4, r2
 8011902:	460e      	mov	r6, r1
 8011904:	b921      	cbnz	r1, 8011910 <_realloc_r+0x14>
 8011906:	4611      	mov	r1, r2
 8011908:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801190c:	f7fe b8cc 	b.w	800faa8 <_malloc_r>
 8011910:	b922      	cbnz	r2, 801191c <_realloc_r+0x20>
 8011912:	f7fe f87d 	bl	800fa10 <_free_r>
 8011916:	4625      	mov	r5, r4
 8011918:	4628      	mov	r0, r5
 801191a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801191c:	f000 f9cf 	bl	8011cbe <_malloc_usable_size_r>
 8011920:	42a0      	cmp	r0, r4
 8011922:	d20f      	bcs.n	8011944 <_realloc_r+0x48>
 8011924:	4621      	mov	r1, r4
 8011926:	4638      	mov	r0, r7
 8011928:	f7fe f8be 	bl	800faa8 <_malloc_r>
 801192c:	4605      	mov	r5, r0
 801192e:	2800      	cmp	r0, #0
 8011930:	d0f2      	beq.n	8011918 <_realloc_r+0x1c>
 8011932:	4631      	mov	r1, r6
 8011934:	4622      	mov	r2, r4
 8011936:	f7ff fc37 	bl	80111a8 <memcpy>
 801193a:	4631      	mov	r1, r6
 801193c:	4638      	mov	r0, r7
 801193e:	f7fe f867 	bl	800fa10 <_free_r>
 8011942:	e7e9      	b.n	8011918 <_realloc_r+0x1c>
 8011944:	4635      	mov	r5, r6
 8011946:	e7e7      	b.n	8011918 <_realloc_r+0x1c>

08011948 <__ssputs_r>:
 8011948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801194c:	688e      	ldr	r6, [r1, #8]
 801194e:	4682      	mov	sl, r0
 8011950:	429e      	cmp	r6, r3
 8011952:	460c      	mov	r4, r1
 8011954:	4690      	mov	r8, r2
 8011956:	461f      	mov	r7, r3
 8011958:	d838      	bhi.n	80119cc <__ssputs_r+0x84>
 801195a:	898a      	ldrh	r2, [r1, #12]
 801195c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011960:	d032      	beq.n	80119c8 <__ssputs_r+0x80>
 8011962:	6825      	ldr	r5, [r4, #0]
 8011964:	6909      	ldr	r1, [r1, #16]
 8011966:	3301      	adds	r3, #1
 8011968:	eba5 0901 	sub.w	r9, r5, r1
 801196c:	6965      	ldr	r5, [r4, #20]
 801196e:	444b      	add	r3, r9
 8011970:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011978:	106d      	asrs	r5, r5, #1
 801197a:	429d      	cmp	r5, r3
 801197c:	bf38      	it	cc
 801197e:	461d      	movcc	r5, r3
 8011980:	0553      	lsls	r3, r2, #21
 8011982:	d531      	bpl.n	80119e8 <__ssputs_r+0xa0>
 8011984:	4629      	mov	r1, r5
 8011986:	f7fe f88f 	bl	800faa8 <_malloc_r>
 801198a:	4606      	mov	r6, r0
 801198c:	b950      	cbnz	r0, 80119a4 <__ssputs_r+0x5c>
 801198e:	230c      	movs	r3, #12
 8011990:	f04f 30ff 	mov.w	r0, #4294967295
 8011994:	f8ca 3000 	str.w	r3, [sl]
 8011998:	89a3      	ldrh	r3, [r4, #12]
 801199a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801199e:	81a3      	strh	r3, [r4, #12]
 80119a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119a4:	464a      	mov	r2, r9
 80119a6:	6921      	ldr	r1, [r4, #16]
 80119a8:	f7ff fbfe 	bl	80111a8 <memcpy>
 80119ac:	89a3      	ldrh	r3, [r4, #12]
 80119ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80119b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119b6:	81a3      	strh	r3, [r4, #12]
 80119b8:	6126      	str	r6, [r4, #16]
 80119ba:	444e      	add	r6, r9
 80119bc:	6026      	str	r6, [r4, #0]
 80119be:	463e      	mov	r6, r7
 80119c0:	6165      	str	r5, [r4, #20]
 80119c2:	eba5 0509 	sub.w	r5, r5, r9
 80119c6:	60a5      	str	r5, [r4, #8]
 80119c8:	42be      	cmp	r6, r7
 80119ca:	d900      	bls.n	80119ce <__ssputs_r+0x86>
 80119cc:	463e      	mov	r6, r7
 80119ce:	4632      	mov	r2, r6
 80119d0:	4641      	mov	r1, r8
 80119d2:	6820      	ldr	r0, [r4, #0]
 80119d4:	f000 f959 	bl	8011c8a <memmove>
 80119d8:	68a3      	ldr	r3, [r4, #8]
 80119da:	6822      	ldr	r2, [r4, #0]
 80119dc:	1b9b      	subs	r3, r3, r6
 80119de:	4432      	add	r2, r6
 80119e0:	2000      	movs	r0, #0
 80119e2:	60a3      	str	r3, [r4, #8]
 80119e4:	6022      	str	r2, [r4, #0]
 80119e6:	e7db      	b.n	80119a0 <__ssputs_r+0x58>
 80119e8:	462a      	mov	r2, r5
 80119ea:	f7ff ff87 	bl	80118fc <_realloc_r>
 80119ee:	4606      	mov	r6, r0
 80119f0:	2800      	cmp	r0, #0
 80119f2:	d1e1      	bne.n	80119b8 <__ssputs_r+0x70>
 80119f4:	4650      	mov	r0, sl
 80119f6:	6921      	ldr	r1, [r4, #16]
 80119f8:	f7fe f80a 	bl	800fa10 <_free_r>
 80119fc:	e7c7      	b.n	801198e <__ssputs_r+0x46>
	...

08011a00 <_svfiprintf_r>:
 8011a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a04:	4698      	mov	r8, r3
 8011a06:	898b      	ldrh	r3, [r1, #12]
 8011a08:	4607      	mov	r7, r0
 8011a0a:	061b      	lsls	r3, r3, #24
 8011a0c:	460d      	mov	r5, r1
 8011a0e:	4614      	mov	r4, r2
 8011a10:	b09d      	sub	sp, #116	; 0x74
 8011a12:	d50e      	bpl.n	8011a32 <_svfiprintf_r+0x32>
 8011a14:	690b      	ldr	r3, [r1, #16]
 8011a16:	b963      	cbnz	r3, 8011a32 <_svfiprintf_r+0x32>
 8011a18:	2140      	movs	r1, #64	; 0x40
 8011a1a:	f7fe f845 	bl	800faa8 <_malloc_r>
 8011a1e:	6028      	str	r0, [r5, #0]
 8011a20:	6128      	str	r0, [r5, #16]
 8011a22:	b920      	cbnz	r0, 8011a2e <_svfiprintf_r+0x2e>
 8011a24:	230c      	movs	r3, #12
 8011a26:	603b      	str	r3, [r7, #0]
 8011a28:	f04f 30ff 	mov.w	r0, #4294967295
 8011a2c:	e0d1      	b.n	8011bd2 <_svfiprintf_r+0x1d2>
 8011a2e:	2340      	movs	r3, #64	; 0x40
 8011a30:	616b      	str	r3, [r5, #20]
 8011a32:	2300      	movs	r3, #0
 8011a34:	9309      	str	r3, [sp, #36]	; 0x24
 8011a36:	2320      	movs	r3, #32
 8011a38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a3c:	2330      	movs	r3, #48	; 0x30
 8011a3e:	f04f 0901 	mov.w	r9, #1
 8011a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011bec <_svfiprintf_r+0x1ec>
 8011a4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a4e:	4623      	mov	r3, r4
 8011a50:	469a      	mov	sl, r3
 8011a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a56:	b10a      	cbz	r2, 8011a5c <_svfiprintf_r+0x5c>
 8011a58:	2a25      	cmp	r2, #37	; 0x25
 8011a5a:	d1f9      	bne.n	8011a50 <_svfiprintf_r+0x50>
 8011a5c:	ebba 0b04 	subs.w	fp, sl, r4
 8011a60:	d00b      	beq.n	8011a7a <_svfiprintf_r+0x7a>
 8011a62:	465b      	mov	r3, fp
 8011a64:	4622      	mov	r2, r4
 8011a66:	4629      	mov	r1, r5
 8011a68:	4638      	mov	r0, r7
 8011a6a:	f7ff ff6d 	bl	8011948 <__ssputs_r>
 8011a6e:	3001      	adds	r0, #1
 8011a70:	f000 80aa 	beq.w	8011bc8 <_svfiprintf_r+0x1c8>
 8011a74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a76:	445a      	add	r2, fp
 8011a78:	9209      	str	r2, [sp, #36]	; 0x24
 8011a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	f000 80a2 	beq.w	8011bc8 <_svfiprintf_r+0x1c8>
 8011a84:	2300      	movs	r3, #0
 8011a86:	f04f 32ff 	mov.w	r2, #4294967295
 8011a8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a8e:	f10a 0a01 	add.w	sl, sl, #1
 8011a92:	9304      	str	r3, [sp, #16]
 8011a94:	9307      	str	r3, [sp, #28]
 8011a96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a9a:	931a      	str	r3, [sp, #104]	; 0x68
 8011a9c:	4654      	mov	r4, sl
 8011a9e:	2205      	movs	r2, #5
 8011aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aa4:	4851      	ldr	r0, [pc, #324]	; (8011bec <_svfiprintf_r+0x1ec>)
 8011aa6:	f7ff fb71 	bl	801118c <memchr>
 8011aaa:	9a04      	ldr	r2, [sp, #16]
 8011aac:	b9d8      	cbnz	r0, 8011ae6 <_svfiprintf_r+0xe6>
 8011aae:	06d0      	lsls	r0, r2, #27
 8011ab0:	bf44      	itt	mi
 8011ab2:	2320      	movmi	r3, #32
 8011ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ab8:	0711      	lsls	r1, r2, #28
 8011aba:	bf44      	itt	mi
 8011abc:	232b      	movmi	r3, #43	; 0x2b
 8011abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8011ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8011ac8:	d015      	beq.n	8011af6 <_svfiprintf_r+0xf6>
 8011aca:	4654      	mov	r4, sl
 8011acc:	2000      	movs	r0, #0
 8011ace:	f04f 0c0a 	mov.w	ip, #10
 8011ad2:	9a07      	ldr	r2, [sp, #28]
 8011ad4:	4621      	mov	r1, r4
 8011ad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ada:	3b30      	subs	r3, #48	; 0x30
 8011adc:	2b09      	cmp	r3, #9
 8011ade:	d94e      	bls.n	8011b7e <_svfiprintf_r+0x17e>
 8011ae0:	b1b0      	cbz	r0, 8011b10 <_svfiprintf_r+0x110>
 8011ae2:	9207      	str	r2, [sp, #28]
 8011ae4:	e014      	b.n	8011b10 <_svfiprintf_r+0x110>
 8011ae6:	eba0 0308 	sub.w	r3, r0, r8
 8011aea:	fa09 f303 	lsl.w	r3, r9, r3
 8011aee:	4313      	orrs	r3, r2
 8011af0:	46a2      	mov	sl, r4
 8011af2:	9304      	str	r3, [sp, #16]
 8011af4:	e7d2      	b.n	8011a9c <_svfiprintf_r+0x9c>
 8011af6:	9b03      	ldr	r3, [sp, #12]
 8011af8:	1d19      	adds	r1, r3, #4
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	9103      	str	r1, [sp, #12]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	bfbb      	ittet	lt
 8011b02:	425b      	neglt	r3, r3
 8011b04:	f042 0202 	orrlt.w	r2, r2, #2
 8011b08:	9307      	strge	r3, [sp, #28]
 8011b0a:	9307      	strlt	r3, [sp, #28]
 8011b0c:	bfb8      	it	lt
 8011b0e:	9204      	strlt	r2, [sp, #16]
 8011b10:	7823      	ldrb	r3, [r4, #0]
 8011b12:	2b2e      	cmp	r3, #46	; 0x2e
 8011b14:	d10c      	bne.n	8011b30 <_svfiprintf_r+0x130>
 8011b16:	7863      	ldrb	r3, [r4, #1]
 8011b18:	2b2a      	cmp	r3, #42	; 0x2a
 8011b1a:	d135      	bne.n	8011b88 <_svfiprintf_r+0x188>
 8011b1c:	9b03      	ldr	r3, [sp, #12]
 8011b1e:	3402      	adds	r4, #2
 8011b20:	1d1a      	adds	r2, r3, #4
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	9203      	str	r2, [sp, #12]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	bfb8      	it	lt
 8011b2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8011b2e:	9305      	str	r3, [sp, #20]
 8011b30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011bfc <_svfiprintf_r+0x1fc>
 8011b34:	2203      	movs	r2, #3
 8011b36:	4650      	mov	r0, sl
 8011b38:	7821      	ldrb	r1, [r4, #0]
 8011b3a:	f7ff fb27 	bl	801118c <memchr>
 8011b3e:	b140      	cbz	r0, 8011b52 <_svfiprintf_r+0x152>
 8011b40:	2340      	movs	r3, #64	; 0x40
 8011b42:	eba0 000a 	sub.w	r0, r0, sl
 8011b46:	fa03 f000 	lsl.w	r0, r3, r0
 8011b4a:	9b04      	ldr	r3, [sp, #16]
 8011b4c:	3401      	adds	r4, #1
 8011b4e:	4303      	orrs	r3, r0
 8011b50:	9304      	str	r3, [sp, #16]
 8011b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b56:	2206      	movs	r2, #6
 8011b58:	4825      	ldr	r0, [pc, #148]	; (8011bf0 <_svfiprintf_r+0x1f0>)
 8011b5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b5e:	f7ff fb15 	bl	801118c <memchr>
 8011b62:	2800      	cmp	r0, #0
 8011b64:	d038      	beq.n	8011bd8 <_svfiprintf_r+0x1d8>
 8011b66:	4b23      	ldr	r3, [pc, #140]	; (8011bf4 <_svfiprintf_r+0x1f4>)
 8011b68:	bb1b      	cbnz	r3, 8011bb2 <_svfiprintf_r+0x1b2>
 8011b6a:	9b03      	ldr	r3, [sp, #12]
 8011b6c:	3307      	adds	r3, #7
 8011b6e:	f023 0307 	bic.w	r3, r3, #7
 8011b72:	3308      	adds	r3, #8
 8011b74:	9303      	str	r3, [sp, #12]
 8011b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b78:	4433      	add	r3, r6
 8011b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8011b7c:	e767      	b.n	8011a4e <_svfiprintf_r+0x4e>
 8011b7e:	460c      	mov	r4, r1
 8011b80:	2001      	movs	r0, #1
 8011b82:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b86:	e7a5      	b.n	8011ad4 <_svfiprintf_r+0xd4>
 8011b88:	2300      	movs	r3, #0
 8011b8a:	f04f 0c0a 	mov.w	ip, #10
 8011b8e:	4619      	mov	r1, r3
 8011b90:	3401      	adds	r4, #1
 8011b92:	9305      	str	r3, [sp, #20]
 8011b94:	4620      	mov	r0, r4
 8011b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b9a:	3a30      	subs	r2, #48	; 0x30
 8011b9c:	2a09      	cmp	r2, #9
 8011b9e:	d903      	bls.n	8011ba8 <_svfiprintf_r+0x1a8>
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d0c5      	beq.n	8011b30 <_svfiprintf_r+0x130>
 8011ba4:	9105      	str	r1, [sp, #20]
 8011ba6:	e7c3      	b.n	8011b30 <_svfiprintf_r+0x130>
 8011ba8:	4604      	mov	r4, r0
 8011baa:	2301      	movs	r3, #1
 8011bac:	fb0c 2101 	mla	r1, ip, r1, r2
 8011bb0:	e7f0      	b.n	8011b94 <_svfiprintf_r+0x194>
 8011bb2:	ab03      	add	r3, sp, #12
 8011bb4:	9300      	str	r3, [sp, #0]
 8011bb6:	462a      	mov	r2, r5
 8011bb8:	4638      	mov	r0, r7
 8011bba:	4b0f      	ldr	r3, [pc, #60]	; (8011bf8 <_svfiprintf_r+0x1f8>)
 8011bbc:	a904      	add	r1, sp, #16
 8011bbe:	f7fe f86b 	bl	800fc98 <_printf_float>
 8011bc2:	1c42      	adds	r2, r0, #1
 8011bc4:	4606      	mov	r6, r0
 8011bc6:	d1d6      	bne.n	8011b76 <_svfiprintf_r+0x176>
 8011bc8:	89ab      	ldrh	r3, [r5, #12]
 8011bca:	065b      	lsls	r3, r3, #25
 8011bcc:	f53f af2c 	bmi.w	8011a28 <_svfiprintf_r+0x28>
 8011bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011bd2:	b01d      	add	sp, #116	; 0x74
 8011bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bd8:	ab03      	add	r3, sp, #12
 8011bda:	9300      	str	r3, [sp, #0]
 8011bdc:	462a      	mov	r2, r5
 8011bde:	4638      	mov	r0, r7
 8011be0:	4b05      	ldr	r3, [pc, #20]	; (8011bf8 <_svfiprintf_r+0x1f8>)
 8011be2:	a904      	add	r1, sp, #16
 8011be4:	f7fe faf4 	bl	80101d0 <_printf_i>
 8011be8:	e7eb      	b.n	8011bc2 <_svfiprintf_r+0x1c2>
 8011bea:	bf00      	nop
 8011bec:	0801387c 	.word	0x0801387c
 8011bf0:	08013886 	.word	0x08013886
 8011bf4:	0800fc99 	.word	0x0800fc99
 8011bf8:	08011949 	.word	0x08011949
 8011bfc:	08013882 	.word	0x08013882

08011c00 <__assert_func>:
 8011c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c02:	4614      	mov	r4, r2
 8011c04:	461a      	mov	r2, r3
 8011c06:	4b09      	ldr	r3, [pc, #36]	; (8011c2c <__assert_func+0x2c>)
 8011c08:	4605      	mov	r5, r0
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	68d8      	ldr	r0, [r3, #12]
 8011c0e:	b14c      	cbz	r4, 8011c24 <__assert_func+0x24>
 8011c10:	4b07      	ldr	r3, [pc, #28]	; (8011c30 <__assert_func+0x30>)
 8011c12:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011c16:	9100      	str	r1, [sp, #0]
 8011c18:	462b      	mov	r3, r5
 8011c1a:	4906      	ldr	r1, [pc, #24]	; (8011c34 <__assert_func+0x34>)
 8011c1c:	f000 f80e 	bl	8011c3c <fiprintf>
 8011c20:	f000 fa7a 	bl	8012118 <abort>
 8011c24:	4b04      	ldr	r3, [pc, #16]	; (8011c38 <__assert_func+0x38>)
 8011c26:	461c      	mov	r4, r3
 8011c28:	e7f3      	b.n	8011c12 <__assert_func+0x12>
 8011c2a:	bf00      	nop
 8011c2c:	200001a8 	.word	0x200001a8
 8011c30:	0801388d 	.word	0x0801388d
 8011c34:	0801389a 	.word	0x0801389a
 8011c38:	080138c8 	.word	0x080138c8

08011c3c <fiprintf>:
 8011c3c:	b40e      	push	{r1, r2, r3}
 8011c3e:	b503      	push	{r0, r1, lr}
 8011c40:	4601      	mov	r1, r0
 8011c42:	ab03      	add	r3, sp, #12
 8011c44:	4805      	ldr	r0, [pc, #20]	; (8011c5c <fiprintf+0x20>)
 8011c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c4a:	6800      	ldr	r0, [r0, #0]
 8011c4c:	9301      	str	r3, [sp, #4]
 8011c4e:	f000 f865 	bl	8011d1c <_vfiprintf_r>
 8011c52:	b002      	add	sp, #8
 8011c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c58:	b003      	add	sp, #12
 8011c5a:	4770      	bx	lr
 8011c5c:	200001a8 	.word	0x200001a8

08011c60 <__retarget_lock_init_recursive>:
 8011c60:	4770      	bx	lr

08011c62 <__retarget_lock_acquire_recursive>:
 8011c62:	4770      	bx	lr

08011c64 <__retarget_lock_release_recursive>:
 8011c64:	4770      	bx	lr

08011c66 <__ascii_mbtowc>:
 8011c66:	b082      	sub	sp, #8
 8011c68:	b901      	cbnz	r1, 8011c6c <__ascii_mbtowc+0x6>
 8011c6a:	a901      	add	r1, sp, #4
 8011c6c:	b142      	cbz	r2, 8011c80 <__ascii_mbtowc+0x1a>
 8011c6e:	b14b      	cbz	r3, 8011c84 <__ascii_mbtowc+0x1e>
 8011c70:	7813      	ldrb	r3, [r2, #0]
 8011c72:	600b      	str	r3, [r1, #0]
 8011c74:	7812      	ldrb	r2, [r2, #0]
 8011c76:	1e10      	subs	r0, r2, #0
 8011c78:	bf18      	it	ne
 8011c7a:	2001      	movne	r0, #1
 8011c7c:	b002      	add	sp, #8
 8011c7e:	4770      	bx	lr
 8011c80:	4610      	mov	r0, r2
 8011c82:	e7fb      	b.n	8011c7c <__ascii_mbtowc+0x16>
 8011c84:	f06f 0001 	mvn.w	r0, #1
 8011c88:	e7f8      	b.n	8011c7c <__ascii_mbtowc+0x16>

08011c8a <memmove>:
 8011c8a:	4288      	cmp	r0, r1
 8011c8c:	b510      	push	{r4, lr}
 8011c8e:	eb01 0402 	add.w	r4, r1, r2
 8011c92:	d902      	bls.n	8011c9a <memmove+0x10>
 8011c94:	4284      	cmp	r4, r0
 8011c96:	4623      	mov	r3, r4
 8011c98:	d807      	bhi.n	8011caa <memmove+0x20>
 8011c9a:	1e43      	subs	r3, r0, #1
 8011c9c:	42a1      	cmp	r1, r4
 8011c9e:	d008      	beq.n	8011cb2 <memmove+0x28>
 8011ca0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ca4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ca8:	e7f8      	b.n	8011c9c <memmove+0x12>
 8011caa:	4601      	mov	r1, r0
 8011cac:	4402      	add	r2, r0
 8011cae:	428a      	cmp	r2, r1
 8011cb0:	d100      	bne.n	8011cb4 <memmove+0x2a>
 8011cb2:	bd10      	pop	{r4, pc}
 8011cb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011cb8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011cbc:	e7f7      	b.n	8011cae <memmove+0x24>

08011cbe <_malloc_usable_size_r>:
 8011cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cc2:	1f18      	subs	r0, r3, #4
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	bfbc      	itt	lt
 8011cc8:	580b      	ldrlt	r3, [r1, r0]
 8011cca:	18c0      	addlt	r0, r0, r3
 8011ccc:	4770      	bx	lr

08011cce <__sfputc_r>:
 8011cce:	6893      	ldr	r3, [r2, #8]
 8011cd0:	b410      	push	{r4}
 8011cd2:	3b01      	subs	r3, #1
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	6093      	str	r3, [r2, #8]
 8011cd8:	da07      	bge.n	8011cea <__sfputc_r+0x1c>
 8011cda:	6994      	ldr	r4, [r2, #24]
 8011cdc:	42a3      	cmp	r3, r4
 8011cde:	db01      	blt.n	8011ce4 <__sfputc_r+0x16>
 8011ce0:	290a      	cmp	r1, #10
 8011ce2:	d102      	bne.n	8011cea <__sfputc_r+0x1c>
 8011ce4:	bc10      	pop	{r4}
 8011ce6:	f000 b949 	b.w	8011f7c <__swbuf_r>
 8011cea:	6813      	ldr	r3, [r2, #0]
 8011cec:	1c58      	adds	r0, r3, #1
 8011cee:	6010      	str	r0, [r2, #0]
 8011cf0:	7019      	strb	r1, [r3, #0]
 8011cf2:	4608      	mov	r0, r1
 8011cf4:	bc10      	pop	{r4}
 8011cf6:	4770      	bx	lr

08011cf8 <__sfputs_r>:
 8011cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cfa:	4606      	mov	r6, r0
 8011cfc:	460f      	mov	r7, r1
 8011cfe:	4614      	mov	r4, r2
 8011d00:	18d5      	adds	r5, r2, r3
 8011d02:	42ac      	cmp	r4, r5
 8011d04:	d101      	bne.n	8011d0a <__sfputs_r+0x12>
 8011d06:	2000      	movs	r0, #0
 8011d08:	e007      	b.n	8011d1a <__sfputs_r+0x22>
 8011d0a:	463a      	mov	r2, r7
 8011d0c:	4630      	mov	r0, r6
 8011d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d12:	f7ff ffdc 	bl	8011cce <__sfputc_r>
 8011d16:	1c43      	adds	r3, r0, #1
 8011d18:	d1f3      	bne.n	8011d02 <__sfputs_r+0xa>
 8011d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011d1c <_vfiprintf_r>:
 8011d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d20:	460d      	mov	r5, r1
 8011d22:	4614      	mov	r4, r2
 8011d24:	4698      	mov	r8, r3
 8011d26:	4606      	mov	r6, r0
 8011d28:	b09d      	sub	sp, #116	; 0x74
 8011d2a:	b118      	cbz	r0, 8011d34 <_vfiprintf_r+0x18>
 8011d2c:	6983      	ldr	r3, [r0, #24]
 8011d2e:	b90b      	cbnz	r3, 8011d34 <_vfiprintf_r+0x18>
 8011d30:	f000 fb14 	bl	801235c <__sinit>
 8011d34:	4b89      	ldr	r3, [pc, #548]	; (8011f5c <_vfiprintf_r+0x240>)
 8011d36:	429d      	cmp	r5, r3
 8011d38:	d11b      	bne.n	8011d72 <_vfiprintf_r+0x56>
 8011d3a:	6875      	ldr	r5, [r6, #4]
 8011d3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d3e:	07d9      	lsls	r1, r3, #31
 8011d40:	d405      	bmi.n	8011d4e <_vfiprintf_r+0x32>
 8011d42:	89ab      	ldrh	r3, [r5, #12]
 8011d44:	059a      	lsls	r2, r3, #22
 8011d46:	d402      	bmi.n	8011d4e <_vfiprintf_r+0x32>
 8011d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d4a:	f7ff ff8a 	bl	8011c62 <__retarget_lock_acquire_recursive>
 8011d4e:	89ab      	ldrh	r3, [r5, #12]
 8011d50:	071b      	lsls	r3, r3, #28
 8011d52:	d501      	bpl.n	8011d58 <_vfiprintf_r+0x3c>
 8011d54:	692b      	ldr	r3, [r5, #16]
 8011d56:	b9eb      	cbnz	r3, 8011d94 <_vfiprintf_r+0x78>
 8011d58:	4629      	mov	r1, r5
 8011d5a:	4630      	mov	r0, r6
 8011d5c:	f000 f96e 	bl	801203c <__swsetup_r>
 8011d60:	b1c0      	cbz	r0, 8011d94 <_vfiprintf_r+0x78>
 8011d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d64:	07dc      	lsls	r4, r3, #31
 8011d66:	d50e      	bpl.n	8011d86 <_vfiprintf_r+0x6a>
 8011d68:	f04f 30ff 	mov.w	r0, #4294967295
 8011d6c:	b01d      	add	sp, #116	; 0x74
 8011d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d72:	4b7b      	ldr	r3, [pc, #492]	; (8011f60 <_vfiprintf_r+0x244>)
 8011d74:	429d      	cmp	r5, r3
 8011d76:	d101      	bne.n	8011d7c <_vfiprintf_r+0x60>
 8011d78:	68b5      	ldr	r5, [r6, #8]
 8011d7a:	e7df      	b.n	8011d3c <_vfiprintf_r+0x20>
 8011d7c:	4b79      	ldr	r3, [pc, #484]	; (8011f64 <_vfiprintf_r+0x248>)
 8011d7e:	429d      	cmp	r5, r3
 8011d80:	bf08      	it	eq
 8011d82:	68f5      	ldreq	r5, [r6, #12]
 8011d84:	e7da      	b.n	8011d3c <_vfiprintf_r+0x20>
 8011d86:	89ab      	ldrh	r3, [r5, #12]
 8011d88:	0598      	lsls	r0, r3, #22
 8011d8a:	d4ed      	bmi.n	8011d68 <_vfiprintf_r+0x4c>
 8011d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d8e:	f7ff ff69 	bl	8011c64 <__retarget_lock_release_recursive>
 8011d92:	e7e9      	b.n	8011d68 <_vfiprintf_r+0x4c>
 8011d94:	2300      	movs	r3, #0
 8011d96:	9309      	str	r3, [sp, #36]	; 0x24
 8011d98:	2320      	movs	r3, #32
 8011d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d9e:	2330      	movs	r3, #48	; 0x30
 8011da0:	f04f 0901 	mov.w	r9, #1
 8011da4:	f8cd 800c 	str.w	r8, [sp, #12]
 8011da8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8011f68 <_vfiprintf_r+0x24c>
 8011dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011db0:	4623      	mov	r3, r4
 8011db2:	469a      	mov	sl, r3
 8011db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011db8:	b10a      	cbz	r2, 8011dbe <_vfiprintf_r+0xa2>
 8011dba:	2a25      	cmp	r2, #37	; 0x25
 8011dbc:	d1f9      	bne.n	8011db2 <_vfiprintf_r+0x96>
 8011dbe:	ebba 0b04 	subs.w	fp, sl, r4
 8011dc2:	d00b      	beq.n	8011ddc <_vfiprintf_r+0xc0>
 8011dc4:	465b      	mov	r3, fp
 8011dc6:	4622      	mov	r2, r4
 8011dc8:	4629      	mov	r1, r5
 8011dca:	4630      	mov	r0, r6
 8011dcc:	f7ff ff94 	bl	8011cf8 <__sfputs_r>
 8011dd0:	3001      	adds	r0, #1
 8011dd2:	f000 80aa 	beq.w	8011f2a <_vfiprintf_r+0x20e>
 8011dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011dd8:	445a      	add	r2, fp
 8011dda:	9209      	str	r2, [sp, #36]	; 0x24
 8011ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	f000 80a2 	beq.w	8011f2a <_vfiprintf_r+0x20e>
 8011de6:	2300      	movs	r3, #0
 8011de8:	f04f 32ff 	mov.w	r2, #4294967295
 8011dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011df0:	f10a 0a01 	add.w	sl, sl, #1
 8011df4:	9304      	str	r3, [sp, #16]
 8011df6:	9307      	str	r3, [sp, #28]
 8011df8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011dfc:	931a      	str	r3, [sp, #104]	; 0x68
 8011dfe:	4654      	mov	r4, sl
 8011e00:	2205      	movs	r2, #5
 8011e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e06:	4858      	ldr	r0, [pc, #352]	; (8011f68 <_vfiprintf_r+0x24c>)
 8011e08:	f7ff f9c0 	bl	801118c <memchr>
 8011e0c:	9a04      	ldr	r2, [sp, #16]
 8011e0e:	b9d8      	cbnz	r0, 8011e48 <_vfiprintf_r+0x12c>
 8011e10:	06d1      	lsls	r1, r2, #27
 8011e12:	bf44      	itt	mi
 8011e14:	2320      	movmi	r3, #32
 8011e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e1a:	0713      	lsls	r3, r2, #28
 8011e1c:	bf44      	itt	mi
 8011e1e:	232b      	movmi	r3, #43	; 0x2b
 8011e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e24:	f89a 3000 	ldrb.w	r3, [sl]
 8011e28:	2b2a      	cmp	r3, #42	; 0x2a
 8011e2a:	d015      	beq.n	8011e58 <_vfiprintf_r+0x13c>
 8011e2c:	4654      	mov	r4, sl
 8011e2e:	2000      	movs	r0, #0
 8011e30:	f04f 0c0a 	mov.w	ip, #10
 8011e34:	9a07      	ldr	r2, [sp, #28]
 8011e36:	4621      	mov	r1, r4
 8011e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e3c:	3b30      	subs	r3, #48	; 0x30
 8011e3e:	2b09      	cmp	r3, #9
 8011e40:	d94e      	bls.n	8011ee0 <_vfiprintf_r+0x1c4>
 8011e42:	b1b0      	cbz	r0, 8011e72 <_vfiprintf_r+0x156>
 8011e44:	9207      	str	r2, [sp, #28]
 8011e46:	e014      	b.n	8011e72 <_vfiprintf_r+0x156>
 8011e48:	eba0 0308 	sub.w	r3, r0, r8
 8011e4c:	fa09 f303 	lsl.w	r3, r9, r3
 8011e50:	4313      	orrs	r3, r2
 8011e52:	46a2      	mov	sl, r4
 8011e54:	9304      	str	r3, [sp, #16]
 8011e56:	e7d2      	b.n	8011dfe <_vfiprintf_r+0xe2>
 8011e58:	9b03      	ldr	r3, [sp, #12]
 8011e5a:	1d19      	adds	r1, r3, #4
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	9103      	str	r1, [sp, #12]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	bfbb      	ittet	lt
 8011e64:	425b      	neglt	r3, r3
 8011e66:	f042 0202 	orrlt.w	r2, r2, #2
 8011e6a:	9307      	strge	r3, [sp, #28]
 8011e6c:	9307      	strlt	r3, [sp, #28]
 8011e6e:	bfb8      	it	lt
 8011e70:	9204      	strlt	r2, [sp, #16]
 8011e72:	7823      	ldrb	r3, [r4, #0]
 8011e74:	2b2e      	cmp	r3, #46	; 0x2e
 8011e76:	d10c      	bne.n	8011e92 <_vfiprintf_r+0x176>
 8011e78:	7863      	ldrb	r3, [r4, #1]
 8011e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8011e7c:	d135      	bne.n	8011eea <_vfiprintf_r+0x1ce>
 8011e7e:	9b03      	ldr	r3, [sp, #12]
 8011e80:	3402      	adds	r4, #2
 8011e82:	1d1a      	adds	r2, r3, #4
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	9203      	str	r2, [sp, #12]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	bfb8      	it	lt
 8011e8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e90:	9305      	str	r3, [sp, #20]
 8011e92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011f78 <_vfiprintf_r+0x25c>
 8011e96:	2203      	movs	r2, #3
 8011e98:	4650      	mov	r0, sl
 8011e9a:	7821      	ldrb	r1, [r4, #0]
 8011e9c:	f7ff f976 	bl	801118c <memchr>
 8011ea0:	b140      	cbz	r0, 8011eb4 <_vfiprintf_r+0x198>
 8011ea2:	2340      	movs	r3, #64	; 0x40
 8011ea4:	eba0 000a 	sub.w	r0, r0, sl
 8011ea8:	fa03 f000 	lsl.w	r0, r3, r0
 8011eac:	9b04      	ldr	r3, [sp, #16]
 8011eae:	3401      	adds	r4, #1
 8011eb0:	4303      	orrs	r3, r0
 8011eb2:	9304      	str	r3, [sp, #16]
 8011eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011eb8:	2206      	movs	r2, #6
 8011eba:	482c      	ldr	r0, [pc, #176]	; (8011f6c <_vfiprintf_r+0x250>)
 8011ebc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ec0:	f7ff f964 	bl	801118c <memchr>
 8011ec4:	2800      	cmp	r0, #0
 8011ec6:	d03f      	beq.n	8011f48 <_vfiprintf_r+0x22c>
 8011ec8:	4b29      	ldr	r3, [pc, #164]	; (8011f70 <_vfiprintf_r+0x254>)
 8011eca:	bb1b      	cbnz	r3, 8011f14 <_vfiprintf_r+0x1f8>
 8011ecc:	9b03      	ldr	r3, [sp, #12]
 8011ece:	3307      	adds	r3, #7
 8011ed0:	f023 0307 	bic.w	r3, r3, #7
 8011ed4:	3308      	adds	r3, #8
 8011ed6:	9303      	str	r3, [sp, #12]
 8011ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eda:	443b      	add	r3, r7
 8011edc:	9309      	str	r3, [sp, #36]	; 0x24
 8011ede:	e767      	b.n	8011db0 <_vfiprintf_r+0x94>
 8011ee0:	460c      	mov	r4, r1
 8011ee2:	2001      	movs	r0, #1
 8011ee4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ee8:	e7a5      	b.n	8011e36 <_vfiprintf_r+0x11a>
 8011eea:	2300      	movs	r3, #0
 8011eec:	f04f 0c0a 	mov.w	ip, #10
 8011ef0:	4619      	mov	r1, r3
 8011ef2:	3401      	adds	r4, #1
 8011ef4:	9305      	str	r3, [sp, #20]
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011efc:	3a30      	subs	r2, #48	; 0x30
 8011efe:	2a09      	cmp	r2, #9
 8011f00:	d903      	bls.n	8011f0a <_vfiprintf_r+0x1ee>
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d0c5      	beq.n	8011e92 <_vfiprintf_r+0x176>
 8011f06:	9105      	str	r1, [sp, #20]
 8011f08:	e7c3      	b.n	8011e92 <_vfiprintf_r+0x176>
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f12:	e7f0      	b.n	8011ef6 <_vfiprintf_r+0x1da>
 8011f14:	ab03      	add	r3, sp, #12
 8011f16:	9300      	str	r3, [sp, #0]
 8011f18:	462a      	mov	r2, r5
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	4b15      	ldr	r3, [pc, #84]	; (8011f74 <_vfiprintf_r+0x258>)
 8011f1e:	a904      	add	r1, sp, #16
 8011f20:	f7fd feba 	bl	800fc98 <_printf_float>
 8011f24:	4607      	mov	r7, r0
 8011f26:	1c78      	adds	r0, r7, #1
 8011f28:	d1d6      	bne.n	8011ed8 <_vfiprintf_r+0x1bc>
 8011f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f2c:	07d9      	lsls	r1, r3, #31
 8011f2e:	d405      	bmi.n	8011f3c <_vfiprintf_r+0x220>
 8011f30:	89ab      	ldrh	r3, [r5, #12]
 8011f32:	059a      	lsls	r2, r3, #22
 8011f34:	d402      	bmi.n	8011f3c <_vfiprintf_r+0x220>
 8011f36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f38:	f7ff fe94 	bl	8011c64 <__retarget_lock_release_recursive>
 8011f3c:	89ab      	ldrh	r3, [r5, #12]
 8011f3e:	065b      	lsls	r3, r3, #25
 8011f40:	f53f af12 	bmi.w	8011d68 <_vfiprintf_r+0x4c>
 8011f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f46:	e711      	b.n	8011d6c <_vfiprintf_r+0x50>
 8011f48:	ab03      	add	r3, sp, #12
 8011f4a:	9300      	str	r3, [sp, #0]
 8011f4c:	462a      	mov	r2, r5
 8011f4e:	4630      	mov	r0, r6
 8011f50:	4b08      	ldr	r3, [pc, #32]	; (8011f74 <_vfiprintf_r+0x258>)
 8011f52:	a904      	add	r1, sp, #16
 8011f54:	f7fe f93c 	bl	80101d0 <_printf_i>
 8011f58:	e7e4      	b.n	8011f24 <_vfiprintf_r+0x208>
 8011f5a:	bf00      	nop
 8011f5c:	080139f4 	.word	0x080139f4
 8011f60:	08013a14 	.word	0x08013a14
 8011f64:	080139d4 	.word	0x080139d4
 8011f68:	0801387c 	.word	0x0801387c
 8011f6c:	08013886 	.word	0x08013886
 8011f70:	0800fc99 	.word	0x0800fc99
 8011f74:	08011cf9 	.word	0x08011cf9
 8011f78:	08013882 	.word	0x08013882

08011f7c <__swbuf_r>:
 8011f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f7e:	460e      	mov	r6, r1
 8011f80:	4614      	mov	r4, r2
 8011f82:	4605      	mov	r5, r0
 8011f84:	b118      	cbz	r0, 8011f8e <__swbuf_r+0x12>
 8011f86:	6983      	ldr	r3, [r0, #24]
 8011f88:	b90b      	cbnz	r3, 8011f8e <__swbuf_r+0x12>
 8011f8a:	f000 f9e7 	bl	801235c <__sinit>
 8011f8e:	4b21      	ldr	r3, [pc, #132]	; (8012014 <__swbuf_r+0x98>)
 8011f90:	429c      	cmp	r4, r3
 8011f92:	d12b      	bne.n	8011fec <__swbuf_r+0x70>
 8011f94:	686c      	ldr	r4, [r5, #4]
 8011f96:	69a3      	ldr	r3, [r4, #24]
 8011f98:	60a3      	str	r3, [r4, #8]
 8011f9a:	89a3      	ldrh	r3, [r4, #12]
 8011f9c:	071a      	lsls	r2, r3, #28
 8011f9e:	d52f      	bpl.n	8012000 <__swbuf_r+0x84>
 8011fa0:	6923      	ldr	r3, [r4, #16]
 8011fa2:	b36b      	cbz	r3, 8012000 <__swbuf_r+0x84>
 8011fa4:	6923      	ldr	r3, [r4, #16]
 8011fa6:	6820      	ldr	r0, [r4, #0]
 8011fa8:	b2f6      	uxtb	r6, r6
 8011faa:	1ac0      	subs	r0, r0, r3
 8011fac:	6963      	ldr	r3, [r4, #20]
 8011fae:	4637      	mov	r7, r6
 8011fb0:	4283      	cmp	r3, r0
 8011fb2:	dc04      	bgt.n	8011fbe <__swbuf_r+0x42>
 8011fb4:	4621      	mov	r1, r4
 8011fb6:	4628      	mov	r0, r5
 8011fb8:	f000 f93c 	bl	8012234 <_fflush_r>
 8011fbc:	bb30      	cbnz	r0, 801200c <__swbuf_r+0x90>
 8011fbe:	68a3      	ldr	r3, [r4, #8]
 8011fc0:	3001      	adds	r0, #1
 8011fc2:	3b01      	subs	r3, #1
 8011fc4:	60a3      	str	r3, [r4, #8]
 8011fc6:	6823      	ldr	r3, [r4, #0]
 8011fc8:	1c5a      	adds	r2, r3, #1
 8011fca:	6022      	str	r2, [r4, #0]
 8011fcc:	701e      	strb	r6, [r3, #0]
 8011fce:	6963      	ldr	r3, [r4, #20]
 8011fd0:	4283      	cmp	r3, r0
 8011fd2:	d004      	beq.n	8011fde <__swbuf_r+0x62>
 8011fd4:	89a3      	ldrh	r3, [r4, #12]
 8011fd6:	07db      	lsls	r3, r3, #31
 8011fd8:	d506      	bpl.n	8011fe8 <__swbuf_r+0x6c>
 8011fda:	2e0a      	cmp	r6, #10
 8011fdc:	d104      	bne.n	8011fe8 <__swbuf_r+0x6c>
 8011fde:	4621      	mov	r1, r4
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	f000 f927 	bl	8012234 <_fflush_r>
 8011fe6:	b988      	cbnz	r0, 801200c <__swbuf_r+0x90>
 8011fe8:	4638      	mov	r0, r7
 8011fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fec:	4b0a      	ldr	r3, [pc, #40]	; (8012018 <__swbuf_r+0x9c>)
 8011fee:	429c      	cmp	r4, r3
 8011ff0:	d101      	bne.n	8011ff6 <__swbuf_r+0x7a>
 8011ff2:	68ac      	ldr	r4, [r5, #8]
 8011ff4:	e7cf      	b.n	8011f96 <__swbuf_r+0x1a>
 8011ff6:	4b09      	ldr	r3, [pc, #36]	; (801201c <__swbuf_r+0xa0>)
 8011ff8:	429c      	cmp	r4, r3
 8011ffa:	bf08      	it	eq
 8011ffc:	68ec      	ldreq	r4, [r5, #12]
 8011ffe:	e7ca      	b.n	8011f96 <__swbuf_r+0x1a>
 8012000:	4621      	mov	r1, r4
 8012002:	4628      	mov	r0, r5
 8012004:	f000 f81a 	bl	801203c <__swsetup_r>
 8012008:	2800      	cmp	r0, #0
 801200a:	d0cb      	beq.n	8011fa4 <__swbuf_r+0x28>
 801200c:	f04f 37ff 	mov.w	r7, #4294967295
 8012010:	e7ea      	b.n	8011fe8 <__swbuf_r+0x6c>
 8012012:	bf00      	nop
 8012014:	080139f4 	.word	0x080139f4
 8012018:	08013a14 	.word	0x08013a14
 801201c:	080139d4 	.word	0x080139d4

08012020 <__ascii_wctomb>:
 8012020:	4603      	mov	r3, r0
 8012022:	4608      	mov	r0, r1
 8012024:	b141      	cbz	r1, 8012038 <__ascii_wctomb+0x18>
 8012026:	2aff      	cmp	r2, #255	; 0xff
 8012028:	d904      	bls.n	8012034 <__ascii_wctomb+0x14>
 801202a:	228a      	movs	r2, #138	; 0x8a
 801202c:	f04f 30ff 	mov.w	r0, #4294967295
 8012030:	601a      	str	r2, [r3, #0]
 8012032:	4770      	bx	lr
 8012034:	2001      	movs	r0, #1
 8012036:	700a      	strb	r2, [r1, #0]
 8012038:	4770      	bx	lr
	...

0801203c <__swsetup_r>:
 801203c:	4b32      	ldr	r3, [pc, #200]	; (8012108 <__swsetup_r+0xcc>)
 801203e:	b570      	push	{r4, r5, r6, lr}
 8012040:	681d      	ldr	r5, [r3, #0]
 8012042:	4606      	mov	r6, r0
 8012044:	460c      	mov	r4, r1
 8012046:	b125      	cbz	r5, 8012052 <__swsetup_r+0x16>
 8012048:	69ab      	ldr	r3, [r5, #24]
 801204a:	b913      	cbnz	r3, 8012052 <__swsetup_r+0x16>
 801204c:	4628      	mov	r0, r5
 801204e:	f000 f985 	bl	801235c <__sinit>
 8012052:	4b2e      	ldr	r3, [pc, #184]	; (801210c <__swsetup_r+0xd0>)
 8012054:	429c      	cmp	r4, r3
 8012056:	d10f      	bne.n	8012078 <__swsetup_r+0x3c>
 8012058:	686c      	ldr	r4, [r5, #4]
 801205a:	89a3      	ldrh	r3, [r4, #12]
 801205c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012060:	0719      	lsls	r1, r3, #28
 8012062:	d42c      	bmi.n	80120be <__swsetup_r+0x82>
 8012064:	06dd      	lsls	r5, r3, #27
 8012066:	d411      	bmi.n	801208c <__swsetup_r+0x50>
 8012068:	2309      	movs	r3, #9
 801206a:	6033      	str	r3, [r6, #0]
 801206c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012070:	f04f 30ff 	mov.w	r0, #4294967295
 8012074:	81a3      	strh	r3, [r4, #12]
 8012076:	e03e      	b.n	80120f6 <__swsetup_r+0xba>
 8012078:	4b25      	ldr	r3, [pc, #148]	; (8012110 <__swsetup_r+0xd4>)
 801207a:	429c      	cmp	r4, r3
 801207c:	d101      	bne.n	8012082 <__swsetup_r+0x46>
 801207e:	68ac      	ldr	r4, [r5, #8]
 8012080:	e7eb      	b.n	801205a <__swsetup_r+0x1e>
 8012082:	4b24      	ldr	r3, [pc, #144]	; (8012114 <__swsetup_r+0xd8>)
 8012084:	429c      	cmp	r4, r3
 8012086:	bf08      	it	eq
 8012088:	68ec      	ldreq	r4, [r5, #12]
 801208a:	e7e6      	b.n	801205a <__swsetup_r+0x1e>
 801208c:	0758      	lsls	r0, r3, #29
 801208e:	d512      	bpl.n	80120b6 <__swsetup_r+0x7a>
 8012090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012092:	b141      	cbz	r1, 80120a6 <__swsetup_r+0x6a>
 8012094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012098:	4299      	cmp	r1, r3
 801209a:	d002      	beq.n	80120a2 <__swsetup_r+0x66>
 801209c:	4630      	mov	r0, r6
 801209e:	f7fd fcb7 	bl	800fa10 <_free_r>
 80120a2:	2300      	movs	r3, #0
 80120a4:	6363      	str	r3, [r4, #52]	; 0x34
 80120a6:	89a3      	ldrh	r3, [r4, #12]
 80120a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80120ac:	81a3      	strh	r3, [r4, #12]
 80120ae:	2300      	movs	r3, #0
 80120b0:	6063      	str	r3, [r4, #4]
 80120b2:	6923      	ldr	r3, [r4, #16]
 80120b4:	6023      	str	r3, [r4, #0]
 80120b6:	89a3      	ldrh	r3, [r4, #12]
 80120b8:	f043 0308 	orr.w	r3, r3, #8
 80120bc:	81a3      	strh	r3, [r4, #12]
 80120be:	6923      	ldr	r3, [r4, #16]
 80120c0:	b94b      	cbnz	r3, 80120d6 <__swsetup_r+0x9a>
 80120c2:	89a3      	ldrh	r3, [r4, #12]
 80120c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80120c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120cc:	d003      	beq.n	80120d6 <__swsetup_r+0x9a>
 80120ce:	4621      	mov	r1, r4
 80120d0:	4630      	mov	r0, r6
 80120d2:	f000 fa05 	bl	80124e0 <__smakebuf_r>
 80120d6:	89a0      	ldrh	r0, [r4, #12]
 80120d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80120dc:	f010 0301 	ands.w	r3, r0, #1
 80120e0:	d00a      	beq.n	80120f8 <__swsetup_r+0xbc>
 80120e2:	2300      	movs	r3, #0
 80120e4:	60a3      	str	r3, [r4, #8]
 80120e6:	6963      	ldr	r3, [r4, #20]
 80120e8:	425b      	negs	r3, r3
 80120ea:	61a3      	str	r3, [r4, #24]
 80120ec:	6923      	ldr	r3, [r4, #16]
 80120ee:	b943      	cbnz	r3, 8012102 <__swsetup_r+0xc6>
 80120f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80120f4:	d1ba      	bne.n	801206c <__swsetup_r+0x30>
 80120f6:	bd70      	pop	{r4, r5, r6, pc}
 80120f8:	0781      	lsls	r1, r0, #30
 80120fa:	bf58      	it	pl
 80120fc:	6963      	ldrpl	r3, [r4, #20]
 80120fe:	60a3      	str	r3, [r4, #8]
 8012100:	e7f4      	b.n	80120ec <__swsetup_r+0xb0>
 8012102:	2000      	movs	r0, #0
 8012104:	e7f7      	b.n	80120f6 <__swsetup_r+0xba>
 8012106:	bf00      	nop
 8012108:	200001a8 	.word	0x200001a8
 801210c:	080139f4 	.word	0x080139f4
 8012110:	08013a14 	.word	0x08013a14
 8012114:	080139d4 	.word	0x080139d4

08012118 <abort>:
 8012118:	2006      	movs	r0, #6
 801211a:	b508      	push	{r3, lr}
 801211c:	f000 fa48 	bl	80125b0 <raise>
 8012120:	2001      	movs	r0, #1
 8012122:	f7f3 fbc2 	bl	80058aa <_exit>
	...

08012128 <__sflush_r>:
 8012128:	898a      	ldrh	r2, [r1, #12]
 801212a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801212e:	4605      	mov	r5, r0
 8012130:	0710      	lsls	r0, r2, #28
 8012132:	460c      	mov	r4, r1
 8012134:	d458      	bmi.n	80121e8 <__sflush_r+0xc0>
 8012136:	684b      	ldr	r3, [r1, #4]
 8012138:	2b00      	cmp	r3, #0
 801213a:	dc05      	bgt.n	8012148 <__sflush_r+0x20>
 801213c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801213e:	2b00      	cmp	r3, #0
 8012140:	dc02      	bgt.n	8012148 <__sflush_r+0x20>
 8012142:	2000      	movs	r0, #0
 8012144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801214a:	2e00      	cmp	r6, #0
 801214c:	d0f9      	beq.n	8012142 <__sflush_r+0x1a>
 801214e:	2300      	movs	r3, #0
 8012150:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012154:	682f      	ldr	r7, [r5, #0]
 8012156:	602b      	str	r3, [r5, #0]
 8012158:	d032      	beq.n	80121c0 <__sflush_r+0x98>
 801215a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801215c:	89a3      	ldrh	r3, [r4, #12]
 801215e:	075a      	lsls	r2, r3, #29
 8012160:	d505      	bpl.n	801216e <__sflush_r+0x46>
 8012162:	6863      	ldr	r3, [r4, #4]
 8012164:	1ac0      	subs	r0, r0, r3
 8012166:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012168:	b10b      	cbz	r3, 801216e <__sflush_r+0x46>
 801216a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801216c:	1ac0      	subs	r0, r0, r3
 801216e:	2300      	movs	r3, #0
 8012170:	4602      	mov	r2, r0
 8012172:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012174:	4628      	mov	r0, r5
 8012176:	6a21      	ldr	r1, [r4, #32]
 8012178:	47b0      	blx	r6
 801217a:	1c43      	adds	r3, r0, #1
 801217c:	89a3      	ldrh	r3, [r4, #12]
 801217e:	d106      	bne.n	801218e <__sflush_r+0x66>
 8012180:	6829      	ldr	r1, [r5, #0]
 8012182:	291d      	cmp	r1, #29
 8012184:	d82c      	bhi.n	80121e0 <__sflush_r+0xb8>
 8012186:	4a2a      	ldr	r2, [pc, #168]	; (8012230 <__sflush_r+0x108>)
 8012188:	40ca      	lsrs	r2, r1
 801218a:	07d6      	lsls	r6, r2, #31
 801218c:	d528      	bpl.n	80121e0 <__sflush_r+0xb8>
 801218e:	2200      	movs	r2, #0
 8012190:	6062      	str	r2, [r4, #4]
 8012192:	6922      	ldr	r2, [r4, #16]
 8012194:	04d9      	lsls	r1, r3, #19
 8012196:	6022      	str	r2, [r4, #0]
 8012198:	d504      	bpl.n	80121a4 <__sflush_r+0x7c>
 801219a:	1c42      	adds	r2, r0, #1
 801219c:	d101      	bne.n	80121a2 <__sflush_r+0x7a>
 801219e:	682b      	ldr	r3, [r5, #0]
 80121a0:	b903      	cbnz	r3, 80121a4 <__sflush_r+0x7c>
 80121a2:	6560      	str	r0, [r4, #84]	; 0x54
 80121a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121a6:	602f      	str	r7, [r5, #0]
 80121a8:	2900      	cmp	r1, #0
 80121aa:	d0ca      	beq.n	8012142 <__sflush_r+0x1a>
 80121ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121b0:	4299      	cmp	r1, r3
 80121b2:	d002      	beq.n	80121ba <__sflush_r+0x92>
 80121b4:	4628      	mov	r0, r5
 80121b6:	f7fd fc2b 	bl	800fa10 <_free_r>
 80121ba:	2000      	movs	r0, #0
 80121bc:	6360      	str	r0, [r4, #52]	; 0x34
 80121be:	e7c1      	b.n	8012144 <__sflush_r+0x1c>
 80121c0:	6a21      	ldr	r1, [r4, #32]
 80121c2:	2301      	movs	r3, #1
 80121c4:	4628      	mov	r0, r5
 80121c6:	47b0      	blx	r6
 80121c8:	1c41      	adds	r1, r0, #1
 80121ca:	d1c7      	bne.n	801215c <__sflush_r+0x34>
 80121cc:	682b      	ldr	r3, [r5, #0]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d0c4      	beq.n	801215c <__sflush_r+0x34>
 80121d2:	2b1d      	cmp	r3, #29
 80121d4:	d001      	beq.n	80121da <__sflush_r+0xb2>
 80121d6:	2b16      	cmp	r3, #22
 80121d8:	d101      	bne.n	80121de <__sflush_r+0xb6>
 80121da:	602f      	str	r7, [r5, #0]
 80121dc:	e7b1      	b.n	8012142 <__sflush_r+0x1a>
 80121de:	89a3      	ldrh	r3, [r4, #12]
 80121e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121e4:	81a3      	strh	r3, [r4, #12]
 80121e6:	e7ad      	b.n	8012144 <__sflush_r+0x1c>
 80121e8:	690f      	ldr	r7, [r1, #16]
 80121ea:	2f00      	cmp	r7, #0
 80121ec:	d0a9      	beq.n	8012142 <__sflush_r+0x1a>
 80121ee:	0793      	lsls	r3, r2, #30
 80121f0:	bf18      	it	ne
 80121f2:	2300      	movne	r3, #0
 80121f4:	680e      	ldr	r6, [r1, #0]
 80121f6:	bf08      	it	eq
 80121f8:	694b      	ldreq	r3, [r1, #20]
 80121fa:	eba6 0807 	sub.w	r8, r6, r7
 80121fe:	600f      	str	r7, [r1, #0]
 8012200:	608b      	str	r3, [r1, #8]
 8012202:	f1b8 0f00 	cmp.w	r8, #0
 8012206:	dd9c      	ble.n	8012142 <__sflush_r+0x1a>
 8012208:	4643      	mov	r3, r8
 801220a:	463a      	mov	r2, r7
 801220c:	4628      	mov	r0, r5
 801220e:	6a21      	ldr	r1, [r4, #32]
 8012210:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012212:	47b0      	blx	r6
 8012214:	2800      	cmp	r0, #0
 8012216:	dc06      	bgt.n	8012226 <__sflush_r+0xfe>
 8012218:	89a3      	ldrh	r3, [r4, #12]
 801221a:	f04f 30ff 	mov.w	r0, #4294967295
 801221e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012222:	81a3      	strh	r3, [r4, #12]
 8012224:	e78e      	b.n	8012144 <__sflush_r+0x1c>
 8012226:	4407      	add	r7, r0
 8012228:	eba8 0800 	sub.w	r8, r8, r0
 801222c:	e7e9      	b.n	8012202 <__sflush_r+0xda>
 801222e:	bf00      	nop
 8012230:	20400001 	.word	0x20400001

08012234 <_fflush_r>:
 8012234:	b538      	push	{r3, r4, r5, lr}
 8012236:	690b      	ldr	r3, [r1, #16]
 8012238:	4605      	mov	r5, r0
 801223a:	460c      	mov	r4, r1
 801223c:	b913      	cbnz	r3, 8012244 <_fflush_r+0x10>
 801223e:	2500      	movs	r5, #0
 8012240:	4628      	mov	r0, r5
 8012242:	bd38      	pop	{r3, r4, r5, pc}
 8012244:	b118      	cbz	r0, 801224e <_fflush_r+0x1a>
 8012246:	6983      	ldr	r3, [r0, #24]
 8012248:	b90b      	cbnz	r3, 801224e <_fflush_r+0x1a>
 801224a:	f000 f887 	bl	801235c <__sinit>
 801224e:	4b14      	ldr	r3, [pc, #80]	; (80122a0 <_fflush_r+0x6c>)
 8012250:	429c      	cmp	r4, r3
 8012252:	d11b      	bne.n	801228c <_fflush_r+0x58>
 8012254:	686c      	ldr	r4, [r5, #4]
 8012256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d0ef      	beq.n	801223e <_fflush_r+0xa>
 801225e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012260:	07d0      	lsls	r0, r2, #31
 8012262:	d404      	bmi.n	801226e <_fflush_r+0x3a>
 8012264:	0599      	lsls	r1, r3, #22
 8012266:	d402      	bmi.n	801226e <_fflush_r+0x3a>
 8012268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801226a:	f7ff fcfa 	bl	8011c62 <__retarget_lock_acquire_recursive>
 801226e:	4628      	mov	r0, r5
 8012270:	4621      	mov	r1, r4
 8012272:	f7ff ff59 	bl	8012128 <__sflush_r>
 8012276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012278:	4605      	mov	r5, r0
 801227a:	07da      	lsls	r2, r3, #31
 801227c:	d4e0      	bmi.n	8012240 <_fflush_r+0xc>
 801227e:	89a3      	ldrh	r3, [r4, #12]
 8012280:	059b      	lsls	r3, r3, #22
 8012282:	d4dd      	bmi.n	8012240 <_fflush_r+0xc>
 8012284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012286:	f7ff fced 	bl	8011c64 <__retarget_lock_release_recursive>
 801228a:	e7d9      	b.n	8012240 <_fflush_r+0xc>
 801228c:	4b05      	ldr	r3, [pc, #20]	; (80122a4 <_fflush_r+0x70>)
 801228e:	429c      	cmp	r4, r3
 8012290:	d101      	bne.n	8012296 <_fflush_r+0x62>
 8012292:	68ac      	ldr	r4, [r5, #8]
 8012294:	e7df      	b.n	8012256 <_fflush_r+0x22>
 8012296:	4b04      	ldr	r3, [pc, #16]	; (80122a8 <_fflush_r+0x74>)
 8012298:	429c      	cmp	r4, r3
 801229a:	bf08      	it	eq
 801229c:	68ec      	ldreq	r4, [r5, #12]
 801229e:	e7da      	b.n	8012256 <_fflush_r+0x22>
 80122a0:	080139f4 	.word	0x080139f4
 80122a4:	08013a14 	.word	0x08013a14
 80122a8:	080139d4 	.word	0x080139d4

080122ac <std>:
 80122ac:	2300      	movs	r3, #0
 80122ae:	b510      	push	{r4, lr}
 80122b0:	4604      	mov	r4, r0
 80122b2:	e9c0 3300 	strd	r3, r3, [r0]
 80122b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80122ba:	6083      	str	r3, [r0, #8]
 80122bc:	8181      	strh	r1, [r0, #12]
 80122be:	6643      	str	r3, [r0, #100]	; 0x64
 80122c0:	81c2      	strh	r2, [r0, #14]
 80122c2:	6183      	str	r3, [r0, #24]
 80122c4:	4619      	mov	r1, r3
 80122c6:	2208      	movs	r2, #8
 80122c8:	305c      	adds	r0, #92	; 0x5c
 80122ca:	f7fd fb99 	bl	800fa00 <memset>
 80122ce:	4b05      	ldr	r3, [pc, #20]	; (80122e4 <std+0x38>)
 80122d0:	6224      	str	r4, [r4, #32]
 80122d2:	6263      	str	r3, [r4, #36]	; 0x24
 80122d4:	4b04      	ldr	r3, [pc, #16]	; (80122e8 <std+0x3c>)
 80122d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80122d8:	4b04      	ldr	r3, [pc, #16]	; (80122ec <std+0x40>)
 80122da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80122dc:	4b04      	ldr	r3, [pc, #16]	; (80122f0 <std+0x44>)
 80122de:	6323      	str	r3, [r4, #48]	; 0x30
 80122e0:	bd10      	pop	{r4, pc}
 80122e2:	bf00      	nop
 80122e4:	080125e9 	.word	0x080125e9
 80122e8:	0801260b 	.word	0x0801260b
 80122ec:	08012643 	.word	0x08012643
 80122f0:	08012667 	.word	0x08012667

080122f4 <_cleanup_r>:
 80122f4:	4901      	ldr	r1, [pc, #4]	; (80122fc <_cleanup_r+0x8>)
 80122f6:	f000 b8af 	b.w	8012458 <_fwalk_reent>
 80122fa:	bf00      	nop
 80122fc:	08012235 	.word	0x08012235

08012300 <__sfmoreglue>:
 8012300:	b570      	push	{r4, r5, r6, lr}
 8012302:	2568      	movs	r5, #104	; 0x68
 8012304:	1e4a      	subs	r2, r1, #1
 8012306:	4355      	muls	r5, r2
 8012308:	460e      	mov	r6, r1
 801230a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801230e:	f7fd fbcb 	bl	800faa8 <_malloc_r>
 8012312:	4604      	mov	r4, r0
 8012314:	b140      	cbz	r0, 8012328 <__sfmoreglue+0x28>
 8012316:	2100      	movs	r1, #0
 8012318:	e9c0 1600 	strd	r1, r6, [r0]
 801231c:	300c      	adds	r0, #12
 801231e:	60a0      	str	r0, [r4, #8]
 8012320:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012324:	f7fd fb6c 	bl	800fa00 <memset>
 8012328:	4620      	mov	r0, r4
 801232a:	bd70      	pop	{r4, r5, r6, pc}

0801232c <__sfp_lock_acquire>:
 801232c:	4801      	ldr	r0, [pc, #4]	; (8012334 <__sfp_lock_acquire+0x8>)
 801232e:	f7ff bc98 	b.w	8011c62 <__retarget_lock_acquire_recursive>
 8012332:	bf00      	nop
 8012334:	200020bc 	.word	0x200020bc

08012338 <__sfp_lock_release>:
 8012338:	4801      	ldr	r0, [pc, #4]	; (8012340 <__sfp_lock_release+0x8>)
 801233a:	f7ff bc93 	b.w	8011c64 <__retarget_lock_release_recursive>
 801233e:	bf00      	nop
 8012340:	200020bc 	.word	0x200020bc

08012344 <__sinit_lock_acquire>:
 8012344:	4801      	ldr	r0, [pc, #4]	; (801234c <__sinit_lock_acquire+0x8>)
 8012346:	f7ff bc8c 	b.w	8011c62 <__retarget_lock_acquire_recursive>
 801234a:	bf00      	nop
 801234c:	200020b7 	.word	0x200020b7

08012350 <__sinit_lock_release>:
 8012350:	4801      	ldr	r0, [pc, #4]	; (8012358 <__sinit_lock_release+0x8>)
 8012352:	f7ff bc87 	b.w	8011c64 <__retarget_lock_release_recursive>
 8012356:	bf00      	nop
 8012358:	200020b7 	.word	0x200020b7

0801235c <__sinit>:
 801235c:	b510      	push	{r4, lr}
 801235e:	4604      	mov	r4, r0
 8012360:	f7ff fff0 	bl	8012344 <__sinit_lock_acquire>
 8012364:	69a3      	ldr	r3, [r4, #24]
 8012366:	b11b      	cbz	r3, 8012370 <__sinit+0x14>
 8012368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801236c:	f7ff bff0 	b.w	8012350 <__sinit_lock_release>
 8012370:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012374:	6523      	str	r3, [r4, #80]	; 0x50
 8012376:	4b13      	ldr	r3, [pc, #76]	; (80123c4 <__sinit+0x68>)
 8012378:	4a13      	ldr	r2, [pc, #76]	; (80123c8 <__sinit+0x6c>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	62a2      	str	r2, [r4, #40]	; 0x28
 801237e:	42a3      	cmp	r3, r4
 8012380:	bf08      	it	eq
 8012382:	2301      	moveq	r3, #1
 8012384:	4620      	mov	r0, r4
 8012386:	bf08      	it	eq
 8012388:	61a3      	streq	r3, [r4, #24]
 801238a:	f000 f81f 	bl	80123cc <__sfp>
 801238e:	6060      	str	r0, [r4, #4]
 8012390:	4620      	mov	r0, r4
 8012392:	f000 f81b 	bl	80123cc <__sfp>
 8012396:	60a0      	str	r0, [r4, #8]
 8012398:	4620      	mov	r0, r4
 801239a:	f000 f817 	bl	80123cc <__sfp>
 801239e:	2200      	movs	r2, #0
 80123a0:	2104      	movs	r1, #4
 80123a2:	60e0      	str	r0, [r4, #12]
 80123a4:	6860      	ldr	r0, [r4, #4]
 80123a6:	f7ff ff81 	bl	80122ac <std>
 80123aa:	2201      	movs	r2, #1
 80123ac:	2109      	movs	r1, #9
 80123ae:	68a0      	ldr	r0, [r4, #8]
 80123b0:	f7ff ff7c 	bl	80122ac <std>
 80123b4:	2202      	movs	r2, #2
 80123b6:	2112      	movs	r1, #18
 80123b8:	68e0      	ldr	r0, [r4, #12]
 80123ba:	f7ff ff77 	bl	80122ac <std>
 80123be:	2301      	movs	r3, #1
 80123c0:	61a3      	str	r3, [r4, #24]
 80123c2:	e7d1      	b.n	8012368 <__sinit+0xc>
 80123c4:	08013650 	.word	0x08013650
 80123c8:	080122f5 	.word	0x080122f5

080123cc <__sfp>:
 80123cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ce:	4607      	mov	r7, r0
 80123d0:	f7ff ffac 	bl	801232c <__sfp_lock_acquire>
 80123d4:	4b1e      	ldr	r3, [pc, #120]	; (8012450 <__sfp+0x84>)
 80123d6:	681e      	ldr	r6, [r3, #0]
 80123d8:	69b3      	ldr	r3, [r6, #24]
 80123da:	b913      	cbnz	r3, 80123e2 <__sfp+0x16>
 80123dc:	4630      	mov	r0, r6
 80123de:	f7ff ffbd 	bl	801235c <__sinit>
 80123e2:	3648      	adds	r6, #72	; 0x48
 80123e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80123e8:	3b01      	subs	r3, #1
 80123ea:	d503      	bpl.n	80123f4 <__sfp+0x28>
 80123ec:	6833      	ldr	r3, [r6, #0]
 80123ee:	b30b      	cbz	r3, 8012434 <__sfp+0x68>
 80123f0:	6836      	ldr	r6, [r6, #0]
 80123f2:	e7f7      	b.n	80123e4 <__sfp+0x18>
 80123f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80123f8:	b9d5      	cbnz	r5, 8012430 <__sfp+0x64>
 80123fa:	4b16      	ldr	r3, [pc, #88]	; (8012454 <__sfp+0x88>)
 80123fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012400:	60e3      	str	r3, [r4, #12]
 8012402:	6665      	str	r5, [r4, #100]	; 0x64
 8012404:	f7ff fc2c 	bl	8011c60 <__retarget_lock_init_recursive>
 8012408:	f7ff ff96 	bl	8012338 <__sfp_lock_release>
 801240c:	2208      	movs	r2, #8
 801240e:	4629      	mov	r1, r5
 8012410:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012414:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012418:	6025      	str	r5, [r4, #0]
 801241a:	61a5      	str	r5, [r4, #24]
 801241c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012420:	f7fd faee 	bl	800fa00 <memset>
 8012424:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012428:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801242c:	4620      	mov	r0, r4
 801242e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012430:	3468      	adds	r4, #104	; 0x68
 8012432:	e7d9      	b.n	80123e8 <__sfp+0x1c>
 8012434:	2104      	movs	r1, #4
 8012436:	4638      	mov	r0, r7
 8012438:	f7ff ff62 	bl	8012300 <__sfmoreglue>
 801243c:	4604      	mov	r4, r0
 801243e:	6030      	str	r0, [r6, #0]
 8012440:	2800      	cmp	r0, #0
 8012442:	d1d5      	bne.n	80123f0 <__sfp+0x24>
 8012444:	f7ff ff78 	bl	8012338 <__sfp_lock_release>
 8012448:	230c      	movs	r3, #12
 801244a:	603b      	str	r3, [r7, #0]
 801244c:	e7ee      	b.n	801242c <__sfp+0x60>
 801244e:	bf00      	nop
 8012450:	08013650 	.word	0x08013650
 8012454:	ffff0001 	.word	0xffff0001

08012458 <_fwalk_reent>:
 8012458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801245c:	4606      	mov	r6, r0
 801245e:	4688      	mov	r8, r1
 8012460:	2700      	movs	r7, #0
 8012462:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012466:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801246a:	f1b9 0901 	subs.w	r9, r9, #1
 801246e:	d505      	bpl.n	801247c <_fwalk_reent+0x24>
 8012470:	6824      	ldr	r4, [r4, #0]
 8012472:	2c00      	cmp	r4, #0
 8012474:	d1f7      	bne.n	8012466 <_fwalk_reent+0xe>
 8012476:	4638      	mov	r0, r7
 8012478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801247c:	89ab      	ldrh	r3, [r5, #12]
 801247e:	2b01      	cmp	r3, #1
 8012480:	d907      	bls.n	8012492 <_fwalk_reent+0x3a>
 8012482:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012486:	3301      	adds	r3, #1
 8012488:	d003      	beq.n	8012492 <_fwalk_reent+0x3a>
 801248a:	4629      	mov	r1, r5
 801248c:	4630      	mov	r0, r6
 801248e:	47c0      	blx	r8
 8012490:	4307      	orrs	r7, r0
 8012492:	3568      	adds	r5, #104	; 0x68
 8012494:	e7e9      	b.n	801246a <_fwalk_reent+0x12>

08012496 <__swhatbuf_r>:
 8012496:	b570      	push	{r4, r5, r6, lr}
 8012498:	460e      	mov	r6, r1
 801249a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801249e:	4614      	mov	r4, r2
 80124a0:	2900      	cmp	r1, #0
 80124a2:	461d      	mov	r5, r3
 80124a4:	b096      	sub	sp, #88	; 0x58
 80124a6:	da07      	bge.n	80124b8 <__swhatbuf_r+0x22>
 80124a8:	2300      	movs	r3, #0
 80124aa:	602b      	str	r3, [r5, #0]
 80124ac:	89b3      	ldrh	r3, [r6, #12]
 80124ae:	061a      	lsls	r2, r3, #24
 80124b0:	d410      	bmi.n	80124d4 <__swhatbuf_r+0x3e>
 80124b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124b6:	e00e      	b.n	80124d6 <__swhatbuf_r+0x40>
 80124b8:	466a      	mov	r2, sp
 80124ba:	f000 f8fb 	bl	80126b4 <_fstat_r>
 80124be:	2800      	cmp	r0, #0
 80124c0:	dbf2      	blt.n	80124a8 <__swhatbuf_r+0x12>
 80124c2:	9a01      	ldr	r2, [sp, #4]
 80124c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80124c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80124cc:	425a      	negs	r2, r3
 80124ce:	415a      	adcs	r2, r3
 80124d0:	602a      	str	r2, [r5, #0]
 80124d2:	e7ee      	b.n	80124b2 <__swhatbuf_r+0x1c>
 80124d4:	2340      	movs	r3, #64	; 0x40
 80124d6:	2000      	movs	r0, #0
 80124d8:	6023      	str	r3, [r4, #0]
 80124da:	b016      	add	sp, #88	; 0x58
 80124dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080124e0 <__smakebuf_r>:
 80124e0:	898b      	ldrh	r3, [r1, #12]
 80124e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80124e4:	079d      	lsls	r5, r3, #30
 80124e6:	4606      	mov	r6, r0
 80124e8:	460c      	mov	r4, r1
 80124ea:	d507      	bpl.n	80124fc <__smakebuf_r+0x1c>
 80124ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80124f0:	6023      	str	r3, [r4, #0]
 80124f2:	6123      	str	r3, [r4, #16]
 80124f4:	2301      	movs	r3, #1
 80124f6:	6163      	str	r3, [r4, #20]
 80124f8:	b002      	add	sp, #8
 80124fa:	bd70      	pop	{r4, r5, r6, pc}
 80124fc:	466a      	mov	r2, sp
 80124fe:	ab01      	add	r3, sp, #4
 8012500:	f7ff ffc9 	bl	8012496 <__swhatbuf_r>
 8012504:	9900      	ldr	r1, [sp, #0]
 8012506:	4605      	mov	r5, r0
 8012508:	4630      	mov	r0, r6
 801250a:	f7fd facd 	bl	800faa8 <_malloc_r>
 801250e:	b948      	cbnz	r0, 8012524 <__smakebuf_r+0x44>
 8012510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012514:	059a      	lsls	r2, r3, #22
 8012516:	d4ef      	bmi.n	80124f8 <__smakebuf_r+0x18>
 8012518:	f023 0303 	bic.w	r3, r3, #3
 801251c:	f043 0302 	orr.w	r3, r3, #2
 8012520:	81a3      	strh	r3, [r4, #12]
 8012522:	e7e3      	b.n	80124ec <__smakebuf_r+0xc>
 8012524:	4b0d      	ldr	r3, [pc, #52]	; (801255c <__smakebuf_r+0x7c>)
 8012526:	62b3      	str	r3, [r6, #40]	; 0x28
 8012528:	89a3      	ldrh	r3, [r4, #12]
 801252a:	6020      	str	r0, [r4, #0]
 801252c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012530:	81a3      	strh	r3, [r4, #12]
 8012532:	9b00      	ldr	r3, [sp, #0]
 8012534:	6120      	str	r0, [r4, #16]
 8012536:	6163      	str	r3, [r4, #20]
 8012538:	9b01      	ldr	r3, [sp, #4]
 801253a:	b15b      	cbz	r3, 8012554 <__smakebuf_r+0x74>
 801253c:	4630      	mov	r0, r6
 801253e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012542:	f000 f8c9 	bl	80126d8 <_isatty_r>
 8012546:	b128      	cbz	r0, 8012554 <__smakebuf_r+0x74>
 8012548:	89a3      	ldrh	r3, [r4, #12]
 801254a:	f023 0303 	bic.w	r3, r3, #3
 801254e:	f043 0301 	orr.w	r3, r3, #1
 8012552:	81a3      	strh	r3, [r4, #12]
 8012554:	89a0      	ldrh	r0, [r4, #12]
 8012556:	4305      	orrs	r5, r0
 8012558:	81a5      	strh	r5, [r4, #12]
 801255a:	e7cd      	b.n	80124f8 <__smakebuf_r+0x18>
 801255c:	080122f5 	.word	0x080122f5

08012560 <_raise_r>:
 8012560:	291f      	cmp	r1, #31
 8012562:	b538      	push	{r3, r4, r5, lr}
 8012564:	4604      	mov	r4, r0
 8012566:	460d      	mov	r5, r1
 8012568:	d904      	bls.n	8012574 <_raise_r+0x14>
 801256a:	2316      	movs	r3, #22
 801256c:	6003      	str	r3, [r0, #0]
 801256e:	f04f 30ff 	mov.w	r0, #4294967295
 8012572:	bd38      	pop	{r3, r4, r5, pc}
 8012574:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012576:	b112      	cbz	r2, 801257e <_raise_r+0x1e>
 8012578:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801257c:	b94b      	cbnz	r3, 8012592 <_raise_r+0x32>
 801257e:	4620      	mov	r0, r4
 8012580:	f000 f830 	bl	80125e4 <_getpid_r>
 8012584:	462a      	mov	r2, r5
 8012586:	4601      	mov	r1, r0
 8012588:	4620      	mov	r0, r4
 801258a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801258e:	f000 b817 	b.w	80125c0 <_kill_r>
 8012592:	2b01      	cmp	r3, #1
 8012594:	d00a      	beq.n	80125ac <_raise_r+0x4c>
 8012596:	1c59      	adds	r1, r3, #1
 8012598:	d103      	bne.n	80125a2 <_raise_r+0x42>
 801259a:	2316      	movs	r3, #22
 801259c:	6003      	str	r3, [r0, #0]
 801259e:	2001      	movs	r0, #1
 80125a0:	e7e7      	b.n	8012572 <_raise_r+0x12>
 80125a2:	2400      	movs	r4, #0
 80125a4:	4628      	mov	r0, r5
 80125a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80125aa:	4798      	blx	r3
 80125ac:	2000      	movs	r0, #0
 80125ae:	e7e0      	b.n	8012572 <_raise_r+0x12>

080125b0 <raise>:
 80125b0:	4b02      	ldr	r3, [pc, #8]	; (80125bc <raise+0xc>)
 80125b2:	4601      	mov	r1, r0
 80125b4:	6818      	ldr	r0, [r3, #0]
 80125b6:	f7ff bfd3 	b.w	8012560 <_raise_r>
 80125ba:	bf00      	nop
 80125bc:	200001a8 	.word	0x200001a8

080125c0 <_kill_r>:
 80125c0:	b538      	push	{r3, r4, r5, lr}
 80125c2:	2300      	movs	r3, #0
 80125c4:	4d06      	ldr	r5, [pc, #24]	; (80125e0 <_kill_r+0x20>)
 80125c6:	4604      	mov	r4, r0
 80125c8:	4608      	mov	r0, r1
 80125ca:	4611      	mov	r1, r2
 80125cc:	602b      	str	r3, [r5, #0]
 80125ce:	f7f3 f95c 	bl	800588a <_kill>
 80125d2:	1c43      	adds	r3, r0, #1
 80125d4:	d102      	bne.n	80125dc <_kill_r+0x1c>
 80125d6:	682b      	ldr	r3, [r5, #0]
 80125d8:	b103      	cbz	r3, 80125dc <_kill_r+0x1c>
 80125da:	6023      	str	r3, [r4, #0]
 80125dc:	bd38      	pop	{r3, r4, r5, pc}
 80125de:	bf00      	nop
 80125e0:	200020b0 	.word	0x200020b0

080125e4 <_getpid_r>:
 80125e4:	f7f3 b94a 	b.w	800587c <_getpid>

080125e8 <__sread>:
 80125e8:	b510      	push	{r4, lr}
 80125ea:	460c      	mov	r4, r1
 80125ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125f0:	f000 f894 	bl	801271c <_read_r>
 80125f4:	2800      	cmp	r0, #0
 80125f6:	bfab      	itete	ge
 80125f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80125fa:	89a3      	ldrhlt	r3, [r4, #12]
 80125fc:	181b      	addge	r3, r3, r0
 80125fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012602:	bfac      	ite	ge
 8012604:	6563      	strge	r3, [r4, #84]	; 0x54
 8012606:	81a3      	strhlt	r3, [r4, #12]
 8012608:	bd10      	pop	{r4, pc}

0801260a <__swrite>:
 801260a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801260e:	461f      	mov	r7, r3
 8012610:	898b      	ldrh	r3, [r1, #12]
 8012612:	4605      	mov	r5, r0
 8012614:	05db      	lsls	r3, r3, #23
 8012616:	460c      	mov	r4, r1
 8012618:	4616      	mov	r6, r2
 801261a:	d505      	bpl.n	8012628 <__swrite+0x1e>
 801261c:	2302      	movs	r3, #2
 801261e:	2200      	movs	r2, #0
 8012620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012624:	f000 f868 	bl	80126f8 <_lseek_r>
 8012628:	89a3      	ldrh	r3, [r4, #12]
 801262a:	4632      	mov	r2, r6
 801262c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012630:	81a3      	strh	r3, [r4, #12]
 8012632:	4628      	mov	r0, r5
 8012634:	463b      	mov	r3, r7
 8012636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801263a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801263e:	f000 b817 	b.w	8012670 <_write_r>

08012642 <__sseek>:
 8012642:	b510      	push	{r4, lr}
 8012644:	460c      	mov	r4, r1
 8012646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801264a:	f000 f855 	bl	80126f8 <_lseek_r>
 801264e:	1c43      	adds	r3, r0, #1
 8012650:	89a3      	ldrh	r3, [r4, #12]
 8012652:	bf15      	itete	ne
 8012654:	6560      	strne	r0, [r4, #84]	; 0x54
 8012656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801265a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801265e:	81a3      	strheq	r3, [r4, #12]
 8012660:	bf18      	it	ne
 8012662:	81a3      	strhne	r3, [r4, #12]
 8012664:	bd10      	pop	{r4, pc}

08012666 <__sclose>:
 8012666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801266a:	f000 b813 	b.w	8012694 <_close_r>
	...

08012670 <_write_r>:
 8012670:	b538      	push	{r3, r4, r5, lr}
 8012672:	4604      	mov	r4, r0
 8012674:	4608      	mov	r0, r1
 8012676:	4611      	mov	r1, r2
 8012678:	2200      	movs	r2, #0
 801267a:	4d05      	ldr	r5, [pc, #20]	; (8012690 <_write_r+0x20>)
 801267c:	602a      	str	r2, [r5, #0]
 801267e:	461a      	mov	r2, r3
 8012680:	f7f3 f93a 	bl	80058f8 <_write>
 8012684:	1c43      	adds	r3, r0, #1
 8012686:	d102      	bne.n	801268e <_write_r+0x1e>
 8012688:	682b      	ldr	r3, [r5, #0]
 801268a:	b103      	cbz	r3, 801268e <_write_r+0x1e>
 801268c:	6023      	str	r3, [r4, #0]
 801268e:	bd38      	pop	{r3, r4, r5, pc}
 8012690:	200020b0 	.word	0x200020b0

08012694 <_close_r>:
 8012694:	b538      	push	{r3, r4, r5, lr}
 8012696:	2300      	movs	r3, #0
 8012698:	4d05      	ldr	r5, [pc, #20]	; (80126b0 <_close_r+0x1c>)
 801269a:	4604      	mov	r4, r0
 801269c:	4608      	mov	r0, r1
 801269e:	602b      	str	r3, [r5, #0]
 80126a0:	f7f3 f946 	bl	8005930 <_close>
 80126a4:	1c43      	adds	r3, r0, #1
 80126a6:	d102      	bne.n	80126ae <_close_r+0x1a>
 80126a8:	682b      	ldr	r3, [r5, #0]
 80126aa:	b103      	cbz	r3, 80126ae <_close_r+0x1a>
 80126ac:	6023      	str	r3, [r4, #0]
 80126ae:	bd38      	pop	{r3, r4, r5, pc}
 80126b0:	200020b0 	.word	0x200020b0

080126b4 <_fstat_r>:
 80126b4:	b538      	push	{r3, r4, r5, lr}
 80126b6:	2300      	movs	r3, #0
 80126b8:	4d06      	ldr	r5, [pc, #24]	; (80126d4 <_fstat_r+0x20>)
 80126ba:	4604      	mov	r4, r0
 80126bc:	4608      	mov	r0, r1
 80126be:	4611      	mov	r1, r2
 80126c0:	602b      	str	r3, [r5, #0]
 80126c2:	f7f3 f940 	bl	8005946 <_fstat>
 80126c6:	1c43      	adds	r3, r0, #1
 80126c8:	d102      	bne.n	80126d0 <_fstat_r+0x1c>
 80126ca:	682b      	ldr	r3, [r5, #0]
 80126cc:	b103      	cbz	r3, 80126d0 <_fstat_r+0x1c>
 80126ce:	6023      	str	r3, [r4, #0]
 80126d0:	bd38      	pop	{r3, r4, r5, pc}
 80126d2:	bf00      	nop
 80126d4:	200020b0 	.word	0x200020b0

080126d8 <_isatty_r>:
 80126d8:	b538      	push	{r3, r4, r5, lr}
 80126da:	2300      	movs	r3, #0
 80126dc:	4d05      	ldr	r5, [pc, #20]	; (80126f4 <_isatty_r+0x1c>)
 80126de:	4604      	mov	r4, r0
 80126e0:	4608      	mov	r0, r1
 80126e2:	602b      	str	r3, [r5, #0]
 80126e4:	f7f3 f93e 	bl	8005964 <_isatty>
 80126e8:	1c43      	adds	r3, r0, #1
 80126ea:	d102      	bne.n	80126f2 <_isatty_r+0x1a>
 80126ec:	682b      	ldr	r3, [r5, #0]
 80126ee:	b103      	cbz	r3, 80126f2 <_isatty_r+0x1a>
 80126f0:	6023      	str	r3, [r4, #0]
 80126f2:	bd38      	pop	{r3, r4, r5, pc}
 80126f4:	200020b0 	.word	0x200020b0

080126f8 <_lseek_r>:
 80126f8:	b538      	push	{r3, r4, r5, lr}
 80126fa:	4604      	mov	r4, r0
 80126fc:	4608      	mov	r0, r1
 80126fe:	4611      	mov	r1, r2
 8012700:	2200      	movs	r2, #0
 8012702:	4d05      	ldr	r5, [pc, #20]	; (8012718 <_lseek_r+0x20>)
 8012704:	602a      	str	r2, [r5, #0]
 8012706:	461a      	mov	r2, r3
 8012708:	f7f3 f936 	bl	8005978 <_lseek>
 801270c:	1c43      	adds	r3, r0, #1
 801270e:	d102      	bne.n	8012716 <_lseek_r+0x1e>
 8012710:	682b      	ldr	r3, [r5, #0]
 8012712:	b103      	cbz	r3, 8012716 <_lseek_r+0x1e>
 8012714:	6023      	str	r3, [r4, #0]
 8012716:	bd38      	pop	{r3, r4, r5, pc}
 8012718:	200020b0 	.word	0x200020b0

0801271c <_read_r>:
 801271c:	b538      	push	{r3, r4, r5, lr}
 801271e:	4604      	mov	r4, r0
 8012720:	4608      	mov	r0, r1
 8012722:	4611      	mov	r1, r2
 8012724:	2200      	movs	r2, #0
 8012726:	4d05      	ldr	r5, [pc, #20]	; (801273c <_read_r+0x20>)
 8012728:	602a      	str	r2, [r5, #0]
 801272a:	461a      	mov	r2, r3
 801272c:	f7f3 f8c7 	bl	80058be <_read>
 8012730:	1c43      	adds	r3, r0, #1
 8012732:	d102      	bne.n	801273a <_read_r+0x1e>
 8012734:	682b      	ldr	r3, [r5, #0]
 8012736:	b103      	cbz	r3, 801273a <_read_r+0x1e>
 8012738:	6023      	str	r3, [r4, #0]
 801273a:	bd38      	pop	{r3, r4, r5, pc}
 801273c:	200020b0 	.word	0x200020b0

08012740 <_init>:
 8012740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012742:	bf00      	nop
 8012744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012746:	bc08      	pop	{r3}
 8012748:	469e      	mov	lr, r3
 801274a:	4770      	bx	lr

0801274c <_fini>:
 801274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801274e:	bf00      	nop
 8012750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012752:	bc08      	pop	{r3}
 8012754:	469e      	mov	lr, r3
 8012756:	4770      	bx	lr
