
Heli_SPL2_Firmware_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012df4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012f4  08012f80  08012f80  00022f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014274  08014274  00030394  2**0
                  CONTENTS
  4 .ARM          00000008  08014274  08014274  00024274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801427c  0801427c  00030394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801427c  0801427c  0002427c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014288  08014288  00024288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000394  20000000  0801428c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d54  20000394  08014620  00030394  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020e8  08014620  000320e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b1c0  00000000  00000000  000303bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f62  00000000  00000000  0007b57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002098  00000000  00000000  000814e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001eb8  00000000  00000000  00083578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029439  00000000  00000000  00085430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000258c0  00000000  00000000  000ae869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf37e  00000000  00000000  000d4129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a34a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3c4  00000000  00000000  001a34fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000394 	.word	0x20000394
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08012f64 	.word	0x08012f64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000398 	.word	0x20000398
 80001c4:	08012f64 	.word	0x08012f64

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_frsub>:
 8000be0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	e002      	b.n	8000bec <__addsf3>
 8000be6:	bf00      	nop

08000be8 <__aeabi_fsub>:
 8000be8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bec <__addsf3>:
 8000bec:	0042      	lsls	r2, r0, #1
 8000bee:	bf1f      	itttt	ne
 8000bf0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bf4:	ea92 0f03 	teqne	r2, r3
 8000bf8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c00:	d06a      	beq.n	8000cd8 <__addsf3+0xec>
 8000c02:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c0a:	bfc1      	itttt	gt
 8000c0c:	18d2      	addgt	r2, r2, r3
 8000c0e:	4041      	eorgt	r1, r0
 8000c10:	4048      	eorgt	r0, r1
 8000c12:	4041      	eorgt	r1, r0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	2b19      	cmp	r3, #25
 8000c1a:	bf88      	it	hi
 8000c1c:	4770      	bxhi	lr
 8000c1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4240      	negne	r0, r0
 8000c2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4249      	negne	r1, r1
 8000c3e:	ea92 0f03 	teq	r2, r3
 8000c42:	d03f      	beq.n	8000cc4 <__addsf3+0xd8>
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	fa41 fc03 	asr.w	ip, r1, r3
 8000c4c:	eb10 000c 	adds.w	r0, r0, ip
 8000c50:	f1c3 0320 	rsb	r3, r3, #32
 8000c54:	fa01 f103 	lsl.w	r1, r1, r3
 8000c58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5c:	d502      	bpl.n	8000c64 <__addsf3+0x78>
 8000c5e:	4249      	negs	r1, r1
 8000c60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c68:	d313      	bcc.n	8000c92 <__addsf3+0xa6>
 8000c6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c6e:	d306      	bcc.n	8000c7e <__addsf3+0x92>
 8000c70:	0840      	lsrs	r0, r0, #1
 8000c72:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c76:	f102 0201 	add.w	r2, r2, #1
 8000c7a:	2afe      	cmp	r2, #254	; 0xfe
 8000c7c:	d251      	bcs.n	8000d22 <__addsf3+0x136>
 8000c7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c86:	bf08      	it	eq
 8000c88:	f020 0001 	biceq.w	r0, r0, #1
 8000c8c:	ea40 0003 	orr.w	r0, r0, r3
 8000c90:	4770      	bx	lr
 8000c92:	0049      	lsls	r1, r1, #1
 8000c94:	eb40 0000 	adc.w	r0, r0, r0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	bf28      	it	cs
 8000c9c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ca0:	d2ed      	bcs.n	8000c7e <__addsf3+0x92>
 8000ca2:	fab0 fc80 	clz	ip, r0
 8000ca6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000caa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cae:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cb2:	bfaa      	itet	ge
 8000cb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb8:	4252      	neglt	r2, r2
 8000cba:	4318      	orrge	r0, r3
 8000cbc:	bfbc      	itt	lt
 8000cbe:	40d0      	lsrlt	r0, r2
 8000cc0:	4318      	orrlt	r0, r3
 8000cc2:	4770      	bx	lr
 8000cc4:	f092 0f00 	teq	r2, #0
 8000cc8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ccc:	bf06      	itte	eq
 8000cce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cd2:	3201      	addeq	r2, #1
 8000cd4:	3b01      	subne	r3, #1
 8000cd6:	e7b5      	b.n	8000c44 <__addsf3+0x58>
 8000cd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce0:	bf18      	it	ne
 8000ce2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce6:	d021      	beq.n	8000d2c <__addsf3+0x140>
 8000ce8:	ea92 0f03 	teq	r2, r3
 8000cec:	d004      	beq.n	8000cf8 <__addsf3+0x10c>
 8000cee:	f092 0f00 	teq	r2, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	4608      	moveq	r0, r1
 8000cf6:	4770      	bx	lr
 8000cf8:	ea90 0f01 	teq	r0, r1
 8000cfc:	bf1c      	itt	ne
 8000cfe:	2000      	movne	r0, #0
 8000d00:	4770      	bxne	lr
 8000d02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d06:	d104      	bne.n	8000d12 <__addsf3+0x126>
 8000d08:	0040      	lsls	r0, r0, #1
 8000d0a:	bf28      	it	cs
 8000d0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d16:	bf3c      	itt	cc
 8000d18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d1c:	4770      	bxcc	lr
 8000d1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2a:	4770      	bx	lr
 8000d2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d30:	bf16      	itet	ne
 8000d32:	4608      	movne	r0, r1
 8000d34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d38:	4601      	movne	r1, r0
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	bf06      	itte	eq
 8000d3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d42:	ea90 0f01 	teqeq	r0, r1
 8000d46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_ui2f>:
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e004      	b.n	8000d5c <__aeabi_i2f+0x8>
 8000d52:	bf00      	nop

08000d54 <__aeabi_i2f>:
 8000d54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d58:	bf48      	it	mi
 8000d5a:	4240      	negmi	r0, r0
 8000d5c:	ea5f 0c00 	movs.w	ip, r0
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d68:	4601      	mov	r1, r0
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	e01c      	b.n	8000daa <__aeabi_l2f+0x2a>

08000d70 <__aeabi_ul2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e00a      	b.n	8000d94 <__aeabi_l2f+0x14>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_l2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d8c:	d502      	bpl.n	8000d94 <__aeabi_l2f+0x14>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	ea5f 0c01 	movs.w	ip, r1
 8000d98:	bf02      	ittt	eq
 8000d9a:	4684      	moveq	ip, r0
 8000d9c:	4601      	moveq	r1, r0
 8000d9e:	2000      	moveq	r0, #0
 8000da0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000da4:	bf08      	it	eq
 8000da6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000daa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dae:	fabc f28c 	clz	r2, ip
 8000db2:	3a08      	subs	r2, #8
 8000db4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db8:	db10      	blt.n	8000ddc <__aeabi_l2f+0x5c>
 8000dba:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dc4:	f1c2 0220 	rsb	r2, r2, #32
 8000dc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dcc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd0:	eb43 0002 	adc.w	r0, r3, r2
 8000dd4:	bf08      	it	eq
 8000dd6:	f020 0001 	biceq.w	r0, r0, #1
 8000dda:	4770      	bx	lr
 8000ddc:	f102 0220 	add.w	r2, r2, #32
 8000de0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dec:	fa21 f202 	lsr.w	r2, r1, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fmul>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d06f      	beq.n	8000ef4 <__aeabi_fmul+0xf8>
 8000e14:	441a      	add	r2, r3
 8000e16:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1a:	0240      	lsls	r0, r0, #9
 8000e1c:	bf18      	it	ne
 8000e1e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e22:	d01e      	beq.n	8000e62 <__aeabi_fmul+0x66>
 8000e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e28:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e2c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e30:	fba0 3101 	umull	r3, r1, r0, r1
 8000e34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e3c:	bf3e      	ittt	cc
 8000e3e:	0049      	lslcc	r1, r1, #1
 8000e40:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e44:	005b      	lslcc	r3, r3, #1
 8000e46:	ea40 0001 	orr.w	r0, r0, r1
 8000e4a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e4e:	2afd      	cmp	r2, #253	; 0xfd
 8000e50:	d81d      	bhi.n	8000e8e <__aeabi_fmul+0x92>
 8000e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e5a:	bf08      	it	eq
 8000e5c:	f020 0001 	biceq.w	r0, r0, #1
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e6a:	bf08      	it	eq
 8000e6c:	0249      	lsleq	r1, r1, #9
 8000e6e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e72:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e76:	3a7f      	subs	r2, #127	; 0x7f
 8000e78:	bfc2      	ittt	gt
 8000e7a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e7e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e82:	4770      	bxgt	lr
 8000e84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	3a01      	subs	r2, #1
 8000e8e:	dc5d      	bgt.n	8000f4c <__aeabi_fmul+0x150>
 8000e90:	f112 0f19 	cmn.w	r2, #25
 8000e94:	bfdc      	itt	le
 8000e96:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e9a:	4770      	bxle	lr
 8000e9c:	f1c2 0200 	rsb	r2, r2, #0
 8000ea0:	0041      	lsls	r1, r0, #1
 8000ea2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ea6:	f1c2 0220 	rsb	r2, r2, #32
 8000eaa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eae:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eb2:	f140 0000 	adc.w	r0, r0, #0
 8000eb6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eba:	bf08      	it	eq
 8000ebc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec0:	4770      	bx	lr
 8000ec2:	f092 0f00 	teq	r2, #0
 8000ec6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0040      	lsleq	r0, r0, #1
 8000ece:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed2:	3a01      	subeq	r2, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fmul+0xce>
 8000ed6:	ea40 000c 	orr.w	r0, r0, ip
 8000eda:	f093 0f00 	teq	r3, #0
 8000ede:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0049      	lsleq	r1, r1, #1
 8000ee6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eea:	3b01      	subeq	r3, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xe6>
 8000eee:	ea41 010c 	orr.w	r1, r1, ip
 8000ef2:	e78f      	b.n	8000e14 <__aeabi_fmul+0x18>
 8000ef4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	bf18      	it	ne
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d00a      	beq.n	8000f1a <__aeabi_fmul+0x11e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	d1d8      	bne.n	8000ec2 <__aeabi_fmul+0xc6>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f18:	4770      	bx	lr
 8000f1a:	f090 0f00 	teq	r0, #0
 8000f1e:	bf17      	itett	ne
 8000f20:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f24:	4608      	moveq	r0, r1
 8000f26:	f091 0f00 	teqne	r1, #0
 8000f2a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f2e:	d014      	beq.n	8000f5a <__aeabi_fmul+0x15e>
 8000f30:	ea92 0f0c 	teq	r2, ip
 8000f34:	d101      	bne.n	8000f3a <__aeabi_fmul+0x13e>
 8000f36:	0242      	lsls	r2, r0, #9
 8000f38:	d10f      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f3a:	ea93 0f0c 	teq	r3, ip
 8000f3e:	d103      	bne.n	8000f48 <__aeabi_fmul+0x14c>
 8000f40:	024b      	lsls	r3, r1, #9
 8000f42:	bf18      	it	ne
 8000f44:	4608      	movne	r0, r1
 8000f46:	d108      	bne.n	8000f5a <__aeabi_fmul+0x15e>
 8000f48:	ea80 0001 	eor.w	r0, r0, r1
 8000f4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f58:	4770      	bx	lr
 8000f5a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f5e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f62:	4770      	bx	lr

08000f64 <__aeabi_fdiv>:
 8000f64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f6c:	bf1e      	ittt	ne
 8000f6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f72:	ea92 0f0c 	teqne	r2, ip
 8000f76:	ea93 0f0c 	teqne	r3, ip
 8000f7a:	d069      	beq.n	8001050 <__aeabi_fdiv+0xec>
 8000f7c:	eba2 0203 	sub.w	r2, r2, r3
 8000f80:	ea80 0c01 	eor.w	ip, r0, r1
 8000f84:	0249      	lsls	r1, r1, #9
 8000f86:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f8a:	d037      	beq.n	8000ffc <__aeabi_fdiv+0x98>
 8000f8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f90:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f94:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	bf38      	it	cc
 8000fa0:	005b      	lslcc	r3, r3, #1
 8000fa2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fa6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000faa:	428b      	cmp	r3, r1
 8000fac:	bf24      	itt	cs
 8000fae:	1a5b      	subcs	r3, r3, r1
 8000fb0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fb4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fbe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fc2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fc6:	bf24      	itt	cs
 8000fc8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fcc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fd0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fd4:	bf24      	itt	cs
 8000fd6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fda:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	bf18      	it	ne
 8000fe2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fe6:	d1e0      	bne.n	8000faa <__aeabi_fdiv+0x46>
 8000fe8:	2afd      	cmp	r2, #253	; 0xfd
 8000fea:	f63f af50 	bhi.w	8000e8e <__aeabi_fmul+0x92>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ff4:	bf08      	it	eq
 8000ff6:	f020 0001 	biceq.w	r0, r0, #1
 8000ffa:	4770      	bx	lr
 8000ffc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001000:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001004:	327f      	adds	r2, #127	; 0x7f
 8001006:	bfc2      	ittt	gt
 8001008:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800100c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001010:	4770      	bxgt	lr
 8001012:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	3a01      	subs	r2, #1
 800101c:	e737      	b.n	8000e8e <__aeabi_fmul+0x92>
 800101e:	f092 0f00 	teq	r2, #0
 8001022:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001026:	bf02      	ittt	eq
 8001028:	0040      	lsleq	r0, r0, #1
 800102a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800102e:	3a01      	subeq	r2, #1
 8001030:	d0f9      	beq.n	8001026 <__aeabi_fdiv+0xc2>
 8001032:	ea40 000c 	orr.w	r0, r0, ip
 8001036:	f093 0f00 	teq	r3, #0
 800103a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0049      	lsleq	r1, r1, #1
 8001042:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001046:	3b01      	subeq	r3, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xda>
 800104a:	ea41 010c 	orr.w	r1, r1, ip
 800104e:	e795      	b.n	8000f7c <__aeabi_fdiv+0x18>
 8001050:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001054:	ea92 0f0c 	teq	r2, ip
 8001058:	d108      	bne.n	800106c <__aeabi_fdiv+0x108>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	f47f af7d 	bne.w	8000f5a <__aeabi_fmul+0x15e>
 8001060:	ea93 0f0c 	teq	r3, ip
 8001064:	f47f af70 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001068:	4608      	mov	r0, r1
 800106a:	e776      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800106c:	ea93 0f0c 	teq	r3, ip
 8001070:	d104      	bne.n	800107c <__aeabi_fdiv+0x118>
 8001072:	024b      	lsls	r3, r1, #9
 8001074:	f43f af4c 	beq.w	8000f10 <__aeabi_fmul+0x114>
 8001078:	4608      	mov	r0, r1
 800107a:	e76e      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800107c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001080:	bf18      	it	ne
 8001082:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001086:	d1ca      	bne.n	800101e <__aeabi_fdiv+0xba>
 8001088:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800108c:	f47f af5c 	bne.w	8000f48 <__aeabi_fmul+0x14c>
 8001090:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001094:	f47f af3c 	bne.w	8000f10 <__aeabi_fmul+0x114>
 8001098:	e75f      	b.n	8000f5a <__aeabi_fmul+0x15e>
 800109a:	bf00      	nop

0800109c <__gesf2>:
 800109c:	f04f 3cff 	mov.w	ip, #4294967295
 80010a0:	e006      	b.n	80010b0 <__cmpsf2+0x4>
 80010a2:	bf00      	nop

080010a4 <__lesf2>:
 80010a4:	f04f 0c01 	mov.w	ip, #1
 80010a8:	e002      	b.n	80010b0 <__cmpsf2+0x4>
 80010aa:	bf00      	nop

080010ac <__cmpsf2>:
 80010ac:	f04f 0c01 	mov.w	ip, #1
 80010b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c0:	bf18      	it	ne
 80010c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010c6:	d011      	beq.n	80010ec <__cmpsf2+0x40>
 80010c8:	b001      	add	sp, #4
 80010ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ce:	bf18      	it	ne
 80010d0:	ea90 0f01 	teqne	r0, r1
 80010d4:	bf58      	it	pl
 80010d6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010da:	bf88      	it	hi
 80010dc:	17c8      	asrhi	r0, r1, #31
 80010de:	bf38      	it	cc
 80010e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010e4:	bf18      	it	ne
 80010e6:	f040 0001 	orrne.w	r0, r0, #1
 80010ea:	4770      	bx	lr
 80010ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f0:	d102      	bne.n	80010f8 <__cmpsf2+0x4c>
 80010f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010f6:	d105      	bne.n	8001104 <__cmpsf2+0x58>
 80010f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010fc:	d1e4      	bne.n	80010c8 <__cmpsf2+0x1c>
 80010fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001102:	d0e1      	beq.n	80010c8 <__cmpsf2+0x1c>
 8001104:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <__aeabi_cfrcmple>:
 800110c:	4684      	mov	ip, r0
 800110e:	4608      	mov	r0, r1
 8001110:	4661      	mov	r1, ip
 8001112:	e7ff      	b.n	8001114 <__aeabi_cfcmpeq>

08001114 <__aeabi_cfcmpeq>:
 8001114:	b50f      	push	{r0, r1, r2, r3, lr}
 8001116:	f7ff ffc9 	bl	80010ac <__cmpsf2>
 800111a:	2800      	cmp	r0, #0
 800111c:	bf48      	it	mi
 800111e:	f110 0f00 	cmnmi.w	r0, #0
 8001122:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001124 <__aeabi_fcmpeq>:
 8001124:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001128:	f7ff fff4 	bl	8001114 <__aeabi_cfcmpeq>
 800112c:	bf0c      	ite	eq
 800112e:	2001      	moveq	r0, #1
 8001130:	2000      	movne	r0, #0
 8001132:	f85d fb08 	ldr.w	pc, [sp], #8
 8001136:	bf00      	nop

08001138 <__aeabi_fcmplt>:
 8001138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800113c:	f7ff ffea 	bl	8001114 <__aeabi_cfcmpeq>
 8001140:	bf34      	ite	cc
 8001142:	2001      	movcc	r0, #1
 8001144:	2000      	movcs	r0, #0
 8001146:	f85d fb08 	ldr.w	pc, [sp], #8
 800114a:	bf00      	nop

0800114c <__aeabi_fcmple>:
 800114c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001150:	f7ff ffe0 	bl	8001114 <__aeabi_cfcmpeq>
 8001154:	bf94      	ite	ls
 8001156:	2001      	movls	r0, #1
 8001158:	2000      	movhi	r0, #0
 800115a:	f85d fb08 	ldr.w	pc, [sp], #8
 800115e:	bf00      	nop

08001160 <__aeabi_fcmpge>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff ffd2 	bl	800110c <__aeabi_cfrcmple>
 8001168:	bf94      	ite	ls
 800116a:	2001      	movls	r0, #1
 800116c:	2000      	movhi	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmpgt>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffc8 	bl	800110c <__aeabi_cfrcmple>
 800117c:	bf34      	ite	cc
 800117e:	2001      	movcc	r0, #1
 8001180:	2000      	movcs	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmpun>:
 8001188:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800118c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001190:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001194:	d102      	bne.n	800119c <__aeabi_fcmpun+0x14>
 8001196:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800119a:	d108      	bne.n	80011ae <__aeabi_fcmpun+0x26>
 800119c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011a0:	d102      	bne.n	80011a8 <__aeabi_fcmpun+0x20>
 80011a2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011a6:	d102      	bne.n	80011ae <__aeabi_fcmpun+0x26>
 80011a8:	f04f 0000 	mov.w	r0, #0
 80011ac:	4770      	bx	lr
 80011ae:	f04f 0001 	mov.w	r0, #1
 80011b2:	4770      	bx	lr

080011b4 <__aeabi_f2iz>:
 80011b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011bc:	d30f      	bcc.n	80011de <__aeabi_f2iz+0x2a>
 80011be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011c6:	d90d      	bls.n	80011e4 <__aeabi_f2iz+0x30>
 80011c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	bf18      	it	ne
 80011da:	4240      	negne	r0, r0
 80011dc:	4770      	bx	lr
 80011de:	f04f 0000 	mov.w	r0, #0
 80011e2:	4770      	bx	lr
 80011e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e8:	d101      	bne.n	80011ee <__aeabi_f2iz+0x3a>
 80011ea:	0242      	lsls	r2, r0, #9
 80011ec:	d105      	bne.n	80011fa <__aeabi_f2iz+0x46>
 80011ee:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011f2:	bf08      	it	eq
 80011f4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011f8:	4770      	bx	lr
 80011fa:	f04f 0000 	mov.w	r0, #0
 80011fe:	4770      	bx	lr

08001200 <__aeabi_f2uiz>:
 8001200:	0042      	lsls	r2, r0, #1
 8001202:	d20e      	bcs.n	8001222 <__aeabi_f2uiz+0x22>
 8001204:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001208:	d30b      	bcc.n	8001222 <__aeabi_f2uiz+0x22>
 800120a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800120e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001212:	d409      	bmi.n	8001228 <__aeabi_f2uiz+0x28>
 8001214:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800121c:	fa23 f002 	lsr.w	r0, r3, r2
 8001220:	4770      	bx	lr
 8001222:	f04f 0000 	mov.w	r0, #0
 8001226:	4770      	bx	lr
 8001228:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800122c:	d101      	bne.n	8001232 <__aeabi_f2uiz+0x32>
 800122e:	0242      	lsls	r2, r0, #9
 8001230:	d102      	bne.n	8001238 <__aeabi_f2uiz+0x38>
 8001232:	f04f 30ff 	mov.w	r0, #4294967295
 8001236:	4770      	bx	lr
 8001238:	f04f 0000 	mov.w	r0, #0
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <__aeabi_uldivmod>:
 8001240:	b953      	cbnz	r3, 8001258 <__aeabi_uldivmod+0x18>
 8001242:	b94a      	cbnz	r2, 8001258 <__aeabi_uldivmod+0x18>
 8001244:	2900      	cmp	r1, #0
 8001246:	bf08      	it	eq
 8001248:	2800      	cmpeq	r0, #0
 800124a:	bf1c      	itt	ne
 800124c:	f04f 31ff 	movne.w	r1, #4294967295
 8001250:	f04f 30ff 	movne.w	r0, #4294967295
 8001254:	f000 b96e 	b.w	8001534 <__aeabi_idiv0>
 8001258:	f1ad 0c08 	sub.w	ip, sp, #8
 800125c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001260:	f000 f806 	bl	8001270 <__udivmoddi4>
 8001264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800126c:	b004      	add	sp, #16
 800126e:	4770      	bx	lr

08001270 <__udivmoddi4>:
 8001270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001274:	9e08      	ldr	r6, [sp, #32]
 8001276:	460d      	mov	r5, r1
 8001278:	4604      	mov	r4, r0
 800127a:	468e      	mov	lr, r1
 800127c:	2b00      	cmp	r3, #0
 800127e:	f040 8083 	bne.w	8001388 <__udivmoddi4+0x118>
 8001282:	428a      	cmp	r2, r1
 8001284:	4617      	mov	r7, r2
 8001286:	d947      	bls.n	8001318 <__udivmoddi4+0xa8>
 8001288:	fab2 f382 	clz	r3, r2
 800128c:	b14b      	cbz	r3, 80012a2 <__udivmoddi4+0x32>
 800128e:	f1c3 0120 	rsb	r1, r3, #32
 8001292:	fa05 fe03 	lsl.w	lr, r5, r3
 8001296:	fa20 f101 	lsr.w	r1, r0, r1
 800129a:	409f      	lsls	r7, r3
 800129c:	ea41 0e0e 	orr.w	lr, r1, lr
 80012a0:	409c      	lsls	r4, r3
 80012a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80012a6:	fbbe fcf8 	udiv	ip, lr, r8
 80012aa:	fa1f f987 	uxth.w	r9, r7
 80012ae:	fb08 e21c 	mls	r2, r8, ip, lr
 80012b2:	fb0c f009 	mul.w	r0, ip, r9
 80012b6:	0c21      	lsrs	r1, r4, #16
 80012b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80012bc:	4290      	cmp	r0, r2
 80012be:	d90a      	bls.n	80012d6 <__udivmoddi4+0x66>
 80012c0:	18ba      	adds	r2, r7, r2
 80012c2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80012c6:	f080 8118 	bcs.w	80014fa <__udivmoddi4+0x28a>
 80012ca:	4290      	cmp	r0, r2
 80012cc:	f240 8115 	bls.w	80014fa <__udivmoddi4+0x28a>
 80012d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80012d4:	443a      	add	r2, r7
 80012d6:	1a12      	subs	r2, r2, r0
 80012d8:	fbb2 f0f8 	udiv	r0, r2, r8
 80012dc:	fb08 2210 	mls	r2, r8, r0, r2
 80012e0:	fb00 f109 	mul.w	r1, r0, r9
 80012e4:	b2a4      	uxth	r4, r4
 80012e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012ea:	42a1      	cmp	r1, r4
 80012ec:	d909      	bls.n	8001302 <__udivmoddi4+0x92>
 80012ee:	193c      	adds	r4, r7, r4
 80012f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80012f4:	f080 8103 	bcs.w	80014fe <__udivmoddi4+0x28e>
 80012f8:	42a1      	cmp	r1, r4
 80012fa:	f240 8100 	bls.w	80014fe <__udivmoddi4+0x28e>
 80012fe:	3802      	subs	r0, #2
 8001300:	443c      	add	r4, r7
 8001302:	1a64      	subs	r4, r4, r1
 8001304:	2100      	movs	r1, #0
 8001306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800130a:	b11e      	cbz	r6, 8001314 <__udivmoddi4+0xa4>
 800130c:	2200      	movs	r2, #0
 800130e:	40dc      	lsrs	r4, r3
 8001310:	e9c6 4200 	strd	r4, r2, [r6]
 8001314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001318:	b902      	cbnz	r2, 800131c <__udivmoddi4+0xac>
 800131a:	deff      	udf	#255	; 0xff
 800131c:	fab2 f382 	clz	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d14f      	bne.n	80013c4 <__udivmoddi4+0x154>
 8001324:	1a8d      	subs	r5, r1, r2
 8001326:	2101      	movs	r1, #1
 8001328:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800132c:	fa1f f882 	uxth.w	r8, r2
 8001330:	fbb5 fcfe 	udiv	ip, r5, lr
 8001334:	fb0e 551c 	mls	r5, lr, ip, r5
 8001338:	fb08 f00c 	mul.w	r0, r8, ip
 800133c:	0c22      	lsrs	r2, r4, #16
 800133e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001342:	42a8      	cmp	r0, r5
 8001344:	d907      	bls.n	8001356 <__udivmoddi4+0xe6>
 8001346:	197d      	adds	r5, r7, r5
 8001348:	f10c 32ff 	add.w	r2, ip, #4294967295
 800134c:	d202      	bcs.n	8001354 <__udivmoddi4+0xe4>
 800134e:	42a8      	cmp	r0, r5
 8001350:	f200 80e9 	bhi.w	8001526 <__udivmoddi4+0x2b6>
 8001354:	4694      	mov	ip, r2
 8001356:	1a2d      	subs	r5, r5, r0
 8001358:	fbb5 f0fe 	udiv	r0, r5, lr
 800135c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001360:	fb08 f800 	mul.w	r8, r8, r0
 8001364:	b2a4      	uxth	r4, r4
 8001366:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800136a:	45a0      	cmp	r8, r4
 800136c:	d907      	bls.n	800137e <__udivmoddi4+0x10e>
 800136e:	193c      	adds	r4, r7, r4
 8001370:	f100 32ff 	add.w	r2, r0, #4294967295
 8001374:	d202      	bcs.n	800137c <__udivmoddi4+0x10c>
 8001376:	45a0      	cmp	r8, r4
 8001378:	f200 80d9 	bhi.w	800152e <__udivmoddi4+0x2be>
 800137c:	4610      	mov	r0, r2
 800137e:	eba4 0408 	sub.w	r4, r4, r8
 8001382:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001386:	e7c0      	b.n	800130a <__udivmoddi4+0x9a>
 8001388:	428b      	cmp	r3, r1
 800138a:	d908      	bls.n	800139e <__udivmoddi4+0x12e>
 800138c:	2e00      	cmp	r6, #0
 800138e:	f000 80b1 	beq.w	80014f4 <__udivmoddi4+0x284>
 8001392:	2100      	movs	r1, #0
 8001394:	e9c6 0500 	strd	r0, r5, [r6]
 8001398:	4608      	mov	r0, r1
 800139a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800139e:	fab3 f183 	clz	r1, r3
 80013a2:	2900      	cmp	r1, #0
 80013a4:	d14b      	bne.n	800143e <__udivmoddi4+0x1ce>
 80013a6:	42ab      	cmp	r3, r5
 80013a8:	d302      	bcc.n	80013b0 <__udivmoddi4+0x140>
 80013aa:	4282      	cmp	r2, r0
 80013ac:	f200 80b9 	bhi.w	8001522 <__udivmoddi4+0x2b2>
 80013b0:	1a84      	subs	r4, r0, r2
 80013b2:	eb65 0303 	sbc.w	r3, r5, r3
 80013b6:	2001      	movs	r0, #1
 80013b8:	469e      	mov	lr, r3
 80013ba:	2e00      	cmp	r6, #0
 80013bc:	d0aa      	beq.n	8001314 <__udivmoddi4+0xa4>
 80013be:	e9c6 4e00 	strd	r4, lr, [r6]
 80013c2:	e7a7      	b.n	8001314 <__udivmoddi4+0xa4>
 80013c4:	409f      	lsls	r7, r3
 80013c6:	f1c3 0220 	rsb	r2, r3, #32
 80013ca:	40d1      	lsrs	r1, r2
 80013cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80013d4:	fa1f f887 	uxth.w	r8, r7
 80013d8:	fb0e 1110 	mls	r1, lr, r0, r1
 80013dc:	fa24 f202 	lsr.w	r2, r4, r2
 80013e0:	409d      	lsls	r5, r3
 80013e2:	fb00 fc08 	mul.w	ip, r0, r8
 80013e6:	432a      	orrs	r2, r5
 80013e8:	0c15      	lsrs	r5, r2, #16
 80013ea:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013ee:	45ac      	cmp	ip, r5
 80013f0:	fa04 f403 	lsl.w	r4, r4, r3
 80013f4:	d909      	bls.n	800140a <__udivmoddi4+0x19a>
 80013f6:	197d      	adds	r5, r7, r5
 80013f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80013fc:	f080 808f 	bcs.w	800151e <__udivmoddi4+0x2ae>
 8001400:	45ac      	cmp	ip, r5
 8001402:	f240 808c 	bls.w	800151e <__udivmoddi4+0x2ae>
 8001406:	3802      	subs	r0, #2
 8001408:	443d      	add	r5, r7
 800140a:	eba5 050c 	sub.w	r5, r5, ip
 800140e:	fbb5 f1fe 	udiv	r1, r5, lr
 8001412:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001416:	fb01 f908 	mul.w	r9, r1, r8
 800141a:	b295      	uxth	r5, r2
 800141c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001420:	45a9      	cmp	r9, r5
 8001422:	d907      	bls.n	8001434 <__udivmoddi4+0x1c4>
 8001424:	197d      	adds	r5, r7, r5
 8001426:	f101 32ff 	add.w	r2, r1, #4294967295
 800142a:	d274      	bcs.n	8001516 <__udivmoddi4+0x2a6>
 800142c:	45a9      	cmp	r9, r5
 800142e:	d972      	bls.n	8001516 <__udivmoddi4+0x2a6>
 8001430:	3902      	subs	r1, #2
 8001432:	443d      	add	r5, r7
 8001434:	eba5 0509 	sub.w	r5, r5, r9
 8001438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800143c:	e778      	b.n	8001330 <__udivmoddi4+0xc0>
 800143e:	f1c1 0720 	rsb	r7, r1, #32
 8001442:	408b      	lsls	r3, r1
 8001444:	fa22 fc07 	lsr.w	ip, r2, r7
 8001448:	ea4c 0c03 	orr.w	ip, ip, r3
 800144c:	fa25 f407 	lsr.w	r4, r5, r7
 8001450:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001454:	fbb4 f9fe 	udiv	r9, r4, lr
 8001458:	fa1f f88c 	uxth.w	r8, ip
 800145c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001460:	fa20 f307 	lsr.w	r3, r0, r7
 8001464:	fb09 fa08 	mul.w	sl, r9, r8
 8001468:	408d      	lsls	r5, r1
 800146a:	431d      	orrs	r5, r3
 800146c:	0c2b      	lsrs	r3, r5, #16
 800146e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001472:	45a2      	cmp	sl, r4
 8001474:	fa02 f201 	lsl.w	r2, r2, r1
 8001478:	fa00 f301 	lsl.w	r3, r0, r1
 800147c:	d909      	bls.n	8001492 <__udivmoddi4+0x222>
 800147e:	eb1c 0404 	adds.w	r4, ip, r4
 8001482:	f109 30ff 	add.w	r0, r9, #4294967295
 8001486:	d248      	bcs.n	800151a <__udivmoddi4+0x2aa>
 8001488:	45a2      	cmp	sl, r4
 800148a:	d946      	bls.n	800151a <__udivmoddi4+0x2aa>
 800148c:	f1a9 0902 	sub.w	r9, r9, #2
 8001490:	4464      	add	r4, ip
 8001492:	eba4 040a 	sub.w	r4, r4, sl
 8001496:	fbb4 f0fe 	udiv	r0, r4, lr
 800149a:	fb0e 4410 	mls	r4, lr, r0, r4
 800149e:	fb00 fa08 	mul.w	sl, r0, r8
 80014a2:	b2ad      	uxth	r5, r5
 80014a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80014a8:	45a2      	cmp	sl, r4
 80014aa:	d908      	bls.n	80014be <__udivmoddi4+0x24e>
 80014ac:	eb1c 0404 	adds.w	r4, ip, r4
 80014b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80014b4:	d22d      	bcs.n	8001512 <__udivmoddi4+0x2a2>
 80014b6:	45a2      	cmp	sl, r4
 80014b8:	d92b      	bls.n	8001512 <__udivmoddi4+0x2a2>
 80014ba:	3802      	subs	r0, #2
 80014bc:	4464      	add	r4, ip
 80014be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80014c2:	fba0 8902 	umull	r8, r9, r0, r2
 80014c6:	eba4 040a 	sub.w	r4, r4, sl
 80014ca:	454c      	cmp	r4, r9
 80014cc:	46c6      	mov	lr, r8
 80014ce:	464d      	mov	r5, r9
 80014d0:	d319      	bcc.n	8001506 <__udivmoddi4+0x296>
 80014d2:	d016      	beq.n	8001502 <__udivmoddi4+0x292>
 80014d4:	b15e      	cbz	r6, 80014ee <__udivmoddi4+0x27e>
 80014d6:	ebb3 020e 	subs.w	r2, r3, lr
 80014da:	eb64 0405 	sbc.w	r4, r4, r5
 80014de:	fa04 f707 	lsl.w	r7, r4, r7
 80014e2:	fa22 f301 	lsr.w	r3, r2, r1
 80014e6:	431f      	orrs	r7, r3
 80014e8:	40cc      	lsrs	r4, r1
 80014ea:	e9c6 7400 	strd	r7, r4, [r6]
 80014ee:	2100      	movs	r1, #0
 80014f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014f4:	4631      	mov	r1, r6
 80014f6:	4630      	mov	r0, r6
 80014f8:	e70c      	b.n	8001314 <__udivmoddi4+0xa4>
 80014fa:	468c      	mov	ip, r1
 80014fc:	e6eb      	b.n	80012d6 <__udivmoddi4+0x66>
 80014fe:	4610      	mov	r0, r2
 8001500:	e6ff      	b.n	8001302 <__udivmoddi4+0x92>
 8001502:	4543      	cmp	r3, r8
 8001504:	d2e6      	bcs.n	80014d4 <__udivmoddi4+0x264>
 8001506:	ebb8 0e02 	subs.w	lr, r8, r2
 800150a:	eb69 050c 	sbc.w	r5, r9, ip
 800150e:	3801      	subs	r0, #1
 8001510:	e7e0      	b.n	80014d4 <__udivmoddi4+0x264>
 8001512:	4628      	mov	r0, r5
 8001514:	e7d3      	b.n	80014be <__udivmoddi4+0x24e>
 8001516:	4611      	mov	r1, r2
 8001518:	e78c      	b.n	8001434 <__udivmoddi4+0x1c4>
 800151a:	4681      	mov	r9, r0
 800151c:	e7b9      	b.n	8001492 <__udivmoddi4+0x222>
 800151e:	4608      	mov	r0, r1
 8001520:	e773      	b.n	800140a <__udivmoddi4+0x19a>
 8001522:	4608      	mov	r0, r1
 8001524:	e749      	b.n	80013ba <__udivmoddi4+0x14a>
 8001526:	f1ac 0c02 	sub.w	ip, ip, #2
 800152a:	443d      	add	r5, r7
 800152c:	e713      	b.n	8001356 <__udivmoddi4+0xe6>
 800152e:	3802      	subs	r0, #2
 8001530:	443c      	add	r4, r7
 8001532:	e724      	b.n	800137e <__udivmoddi4+0x10e>

08001534 <__aeabi_idiv0>:
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop

08001538 <_ZN6I2Cdev7readBitEhhhPh>:
 * @param regAddr Register regAddr to read from
 * @param bitNum Bit position to read (0-7)
 * @param data Container for single bit value
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af04      	add	r7, sp, #16
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	460b      	mov	r3, r1
 8001546:	71bb      	strb	r3, [r7, #6]
 8001548:	4613      	mov	r3, r2
 800154a:	717b      	strb	r3, [r7, #5]
  uint8_t buffer;
  sendBuf[0] = regAddr;
 800154c:	4a1a      	ldr	r2, [pc, #104]	; (80015b8 <_ZN6I2Cdev7readBitEhhhPh+0x80>)
 800154e:	79bb      	ldrb	r3, [r7, #6]
 8001550:	7013      	strb	r3, [r2, #0]
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	b299      	uxth	r1, r3
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	b29a      	uxth	r2, r3
 800155a:	2301      	movs	r3, #1
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	2301      	movs	r3, #1
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	f107 030e 	add.w	r3, r7, #14
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	4814      	ldr	r0, [pc, #80]	; (80015bc <_ZN6I2Cdev7readBitEhhhPh+0x84>)
 800156c:	f005 ffae 	bl	80074cc <HAL_I2C_Mem_Read>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf14      	ite	ne
 8001576:	2301      	movne	r3, #1
 8001578:	2300      	moveq	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <_ZN6I2Cdev7readBitEhhhPh+0x4e>
	  MX_I2C1_Init();
 8001580:	f003 f93a 	bl	80047f8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001584:	e7e5      	b.n	8001552 <_ZN6I2Cdev7readBitEhhhPh+0x1a>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001586:	2301      	movs	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
  *data = buffer & (1 << bitNum);
 800158a:	797b      	ldrb	r3, [r7, #5]
 800158c:	2201      	movs	r2, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	b25a      	sxtb	r2, r3
 8001594:	7bbb      	ldrb	r3, [r7, #14]
 8001596:	b25b      	sxtb	r3, r3
 8001598:	4013      	ands	r3, r2
 800159a:	b25b      	sxtb	r3, r3
 800159c:	b2da      	uxtb	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	701a      	strb	r2, [r3, #0]
  return response == BCM2835_I2C_REASON_OK ;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	b25b      	sxtb	r3, r3
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200003b0 	.word	0x200003b0
 80015bc:	200006bc 	.word	0x200006bc

080015c0 <_ZN6I2Cdev8readBitsEhhhhPh>:
 * @param bitStart First bit position to read (0-7)
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data) {
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af04      	add	r7, sp, #16
 80015c6:	4604      	mov	r4, r0
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4623      	mov	r3, r4
 80015d0:	71fb      	strb	r3, [r7, #7]
 80015d2:	4603      	mov	r3, r0
 80015d4:	71bb      	strb	r3, [r7, #6]
 80015d6:	460b      	mov	r3, r1
 80015d8:	717b      	strb	r3, [r7, #5]
 80015da:	4613      	mov	r3, r2
 80015dc:	713b      	strb	r3, [r7, #4]
  // 01101001 read byte
  // 76543210 bit numbers
  //    xxx   args: bitStart=4, length=3
  //    010   masked
  //   -> 010 shifted
  sendBuf[0] = regAddr;
 80015de:	4a25      	ldr	r2, [pc, #148]	; (8001674 <_ZN6I2Cdev8readBitsEhhhhPh+0xb4>)
 80015e0:	79bb      	ldrb	r3, [r7, #6]
 80015e2:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	b299      	uxth	r1, r3
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	2301      	movs	r3, #1
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	2301      	movs	r3, #1
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2301      	movs	r3, #1
 80015fc:	481e      	ldr	r0, [pc, #120]	; (8001678 <_ZN6I2Cdev8readBitsEhhhhPh+0xb8>)
 80015fe:	f005 ff65 	bl	80074cc <HAL_I2C_Mem_Read>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf14      	ite	ne
 8001608:	2301      	movne	r3, #1
 800160a:	2300      	moveq	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <_ZN6I2Cdev8readBitsEhhhhPh+0x58>
  	  MX_I2C1_Init();
 8001612:	f003 f8f1 	bl	80047f8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001616:	e7e5      	b.n	80015e4 <_ZN6I2Cdev8readBitsEhhhhPh+0x24>
    }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
  uint8_t b = buffer;
 800161c:	7b3b      	ldrb	r3, [r7, #12]
 800161e:	73bb      	strb	r3, [r7, #14]
  if (response == BCM2835_I2C_REASON_OK) {
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d11a      	bne.n	800165c <_ZN6I2Cdev8readBitsEhhhhPh+0x9c>
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001626:	793b      	ldrb	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	1e5a      	subs	r2, r3, #1
 8001630:	7979      	ldrb	r1, [r7, #5]
 8001632:	793b      	ldrb	r3, [r7, #4]
 8001634:	1acb      	subs	r3, r1, r3
 8001636:	3301      	adds	r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	737b      	strb	r3, [r7, #13]
    b &= mask;
 800163e:	7bba      	ldrb	r2, [r7, #14]
 8001640:	7b7b      	ldrb	r3, [r7, #13]
 8001642:	4013      	ands	r3, r2
 8001644:	73bb      	strb	r3, [r7, #14]
    b >>= (bitStart - length + 1);
 8001646:	7bba      	ldrb	r2, [r7, #14]
 8001648:	7979      	ldrb	r1, [r7, #5]
 800164a:	793b      	ldrb	r3, [r7, #4]
 800164c:	1acb      	subs	r3, r1, r3
 800164e:	3301      	adds	r3, #1
 8001650:	fa42 f303 	asr.w	r3, r2, r3
 8001654:	73bb      	strb	r3, [r7, #14]
    *data = b;
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	7bba      	ldrb	r2, [r7, #14]
 800165a:	701a      	strb	r2, [r3, #0]
  }
  return response == BCM2835_I2C_REASON_OK;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	2b01      	cmp	r3, #1
 8001660:	bf0c      	ite	eq
 8001662:	2301      	moveq	r3, #1
 8001664:	2300      	movne	r3, #0
 8001666:	b2db      	uxtb	r3, r3
 8001668:	b25b      	sxtb	r3, r3
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}
 8001672:	bf00      	nop
 8001674:	200003b0 	.word	0x200003b0
 8001678:	200006bc 	.word	0x200006bc

0800167c <_ZN6I2Cdev8readByteEhhPh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af04      	add	r7, sp, #16
 8001682:	4603      	mov	r3, r0
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	460b      	mov	r3, r1
 800168a:	71bb      	strb	r3, [r7, #6]
  sendBuf[0] = regAddr;
 800168c:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <_ZN6I2Cdev8readByteEhhPh+0x6c>)
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	b299      	uxth	r1, r3
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	b29a      	uxth	r2, r3
 800169a:	2301      	movs	r3, #1
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	2301      	movs	r3, #1
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	f107 030e 	add.w	r3, r7, #14
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	4810      	ldr	r0, [pc, #64]	; (80016ec <_ZN6I2Cdev8readByteEhhPh+0x70>)
 80016ac:	f005 ff0e 	bl	80074cc <HAL_I2C_Mem_Read>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <_ZN6I2Cdev8readByteEhhPh+0x4a>
    MX_I2C1_Init();
 80016c0:	f003 f89a 	bl	80047f8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80016c4:	e7e5      	b.n	8001692 <_ZN6I2Cdev8readByteEhhPh+0x16>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
  data[0] = buffer;
 80016ca:	7bba      	ldrb	r2, [r7, #14]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	701a      	strb	r2, [r3, #0]
  return response == BCM2835_I2C_REASON_OK;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	bf0c      	ite	eq
 80016d6:	2301      	moveq	r3, #1
 80016d8:	2300      	movne	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	b25b      	sxtb	r3, r3
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200003b0 	.word	0x200003b0
 80016ec:	200006bc 	.word	0x200006bc

080016f0 <_ZN6I2Cdev9readBytesEhhhPh>:
 * @param regAddr First register regAddr to read from
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @return I2C_TransferReturn_TypeDef http://downloads.energymicro.com/documentation/doxygen/group__I2C.html
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data) {
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af04      	add	r7, sp, #16
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	460b      	mov	r3, r1
 80016fe:	71bb      	strb	r3, [r7, #6]
 8001700:	4613      	mov	r3, r2
 8001702:	717b      	strb	r3, [r7, #5]
  uint8_t response = BCM2835_I2C_REASON_OK;
  int i ;
  for (i = 0; i < length ; i++) {
    data[i] = (uint8_t) buffer[i];
  }
  return response == BCM2835_I2C_REASON_OK;
 8001704:	466b      	mov	r3, sp
 8001706:	461d      	mov	r5, r3
  sendBuf[0] = regAddr;
 8001708:	4a32      	ldr	r2, [pc, #200]	; (80017d4 <_ZN6I2Cdev9readBytesEhhhPh+0xe4>)
 800170a:	79bb      	ldrb	r3, [r7, #6]
 800170c:	7013      	strb	r3, [r2, #0]
  uint8_t buffer[length];
 800170e:	797b      	ldrb	r3, [r7, #5]
 8001710:	1e5c      	subs	r4, r3, #1
 8001712:	613c      	str	r4, [r7, #16]
 8001714:	4623      	mov	r3, r4
 8001716:	3301      	adds	r3, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	00cb      	lsls	r3, r1, #3
 8001728:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800172c:	00c2      	lsls	r2, r0, #3
 800172e:	4623      	mov	r3, r4
 8001730:	3301      	adds	r3, #1
 8001732:	4618      	mov	r0, r3
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	00cb      	lsls	r3, r1, #3
 8001742:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001746:	00c2      	lsls	r2, r0, #3
 8001748:	4623      	mov	r3, r4
 800174a:	3301      	adds	r3, #1
 800174c:	3307      	adds	r3, #7
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	ebad 0d03 	sub.w	sp, sp, r3
 8001756:	ab04      	add	r3, sp, #16
 8001758:	3300      	adds	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	b299      	uxth	r1, r3
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	b298      	uxth	r0, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	797a      	ldrb	r2, [r7, #5]
 8001768:	b292      	uxth	r2, r2
 800176a:	2401      	movs	r4, #1
 800176c:	9402      	str	r4, [sp, #8]
 800176e:	9201      	str	r2, [sp, #4]
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	4602      	mov	r2, r0
 8001776:	4818      	ldr	r0, [pc, #96]	; (80017d8 <_ZN6I2Cdev9readBytesEhhhPh+0xe8>)
 8001778:	f005 fea8 	bl	80074cc <HAL_I2C_Mem_Read>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <_ZN6I2Cdev9readBytesEhhhPh+0xa2>
    MX_I2C1_Init();
 800178c:	f003 f834 	bl	80047f8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,buffer,length,I2CDLY) != HAL_OK){
 8001790:	e7e4      	b.n	800175c <_ZN6I2Cdev9readBytesEhhhPh+0x6c>
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001792:	2301      	movs	r3, #1
 8001794:	72fb      	strb	r3, [r7, #11]
  for (i = 0; i < length ; i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	797b      	ldrb	r3, [r7, #5]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	429a      	cmp	r2, r3
 80017a0:	da0b      	bge.n	80017ba <_ZN6I2Cdev9readBytesEhhhPh+0xca>
    data[i] = (uint8_t) buffer[i];
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	440a      	add	r2, r1
 80017ae:	7812      	ldrb	r2, [r2, #0]
 80017b0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < length ; i++) {
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e7ef      	b.n	800179a <_ZN6I2Cdev9readBytesEhhhPh+0xaa>
  return response == BCM2835_I2C_REASON_OK;
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	46ad      	mov	sp, r5
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bdb0      	pop	{r4, r5, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200003b0 	.word	0x200003b0
 80017d8:	200006bc 	.word	0x200006bc

080017dc <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af04      	add	r7, sp, #16
 80017e2:	4604      	mov	r4, r0
 80017e4:	4608      	mov	r0, r1
 80017e6:	4611      	mov	r1, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	4623      	mov	r3, r4
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	4603      	mov	r3, r0
 80017f0:	71bb      	strb	r3, [r7, #6]
 80017f2:	460b      	mov	r3, r1
 80017f4:	717b      	strb	r3, [r7, #5]
 80017f6:	4613      	mov	r3, r2
 80017f8:	713b      	strb	r3, [r7, #4]

  //first reading registery value
  sendBuf[0] = regAddr;
 80017fa:	4a34      	ldr	r2, [pc, #208]	; (80018cc <_ZN6I2Cdev8writeBitEhhhh+0xf0>)
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	b299      	uxth	r1, r3
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	b29a      	uxth	r2, r3
 8001808:	2301      	movs	r3, #1
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	2301      	movs	r3, #1
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	f107 030e 	add.w	r3, r7, #14
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	482d      	ldr	r0, [pc, #180]	; (80018d0 <_ZN6I2Cdev8writeBitEhhhh+0xf4>)
 800181a:	f005 fe57 	bl	80074cc <HAL_I2C_Mem_Read>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf14      	ite	ne
 8001824:	2301      	movne	r3, #1
 8001826:	2300      	moveq	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <_ZN6I2Cdev8writeBitEhhhh+0x58>
    MX_I2C1_Init();
 800182e:	f002 ffe3 	bl	80047f8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 8001832:	e7e5      	b.n	8001800 <_ZN6I2Cdev8writeBitEhhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d13b      	bne.n	80018b6 <_ZN6I2Cdev8writeBitEhhhh+0xda>
    uint8_t b = buffer ;
 800183e:	7bbb      	ldrb	r3, [r7, #14]
 8001840:	737b      	strb	r3, [r7, #13]
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8001842:	793b      	ldrb	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00a      	beq.n	800185e <_ZN6I2Cdev8writeBitEhhhh+0x82>
 8001848:	797b      	ldrb	r3, [r7, #5]
 800184a:	2201      	movs	r2, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	b25a      	sxtb	r2, r3
 8001852:	7b7b      	ldrb	r3, [r7, #13]
 8001854:	b25b      	sxtb	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b25b      	sxtb	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	e00b      	b.n	8001876 <_ZN6I2Cdev8writeBitEhhhh+0x9a>
 800185e:	797b      	ldrb	r3, [r7, #5]
 8001860:	2201      	movs	r2, #1
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	b25b      	sxtb	r3, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	b25a      	sxtb	r2, r3
 800186c:	7b7b      	ldrb	r3, [r7, #13]
 800186e:	b25b      	sxtb	r3, r3
 8001870:	4013      	ands	r3, r2
 8001872:	b25b      	sxtb	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	737b      	strb	r3, [r7, #13]
    sendBuf[1] = b ;
 8001878:	7b7a      	ldrb	r2, [r7, #13]
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <_ZN6I2Cdev8writeBitEhhhh+0xf0>)
 800187c:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	b299      	uxth	r1, r3
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	b29a      	uxth	r2, r3
 8001886:	2301      	movs	r3, #1
 8001888:	9302      	str	r3, [sp, #8]
 800188a:	2301      	movs	r3, #1
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	f107 030d 	add.w	r3, r7, #13
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2301      	movs	r3, #1
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <_ZN6I2Cdev8writeBitEhhhh+0xf4>)
 8001898:	f005 fd1e 	bl	80072d8 <HAL_I2C_Mem_Write>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf14      	ite	ne
 80018a2:	2301      	movne	r3, #1
 80018a4:	2300      	moveq	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <_ZN6I2Cdev8writeBitEhhhh+0xd6>
    	MX_I2C1_Init();
 80018ac:	f002 ffa4 	bl	80047f8 <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80018b0:	e7e5      	b.n	800187e <_ZN6I2Cdev8writeBitEhhhh+0xa2>
    }
    response = BCM2835_I2C_REASON_OK;
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
  }
  return response == BCM2835_I2C_REASON_OK;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200003b0 	.word	0x200003b0
 80018d0:	200006bc 	.word	0x200006bc

080018d4 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b089      	sub	sp, #36	; 0x24
 80018d8:	af04      	add	r7, sp, #16
 80018da:	4604      	mov	r4, r0
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	4603      	mov	r3, r0
 80018e8:	71bb      	strb	r3, [r7, #6]
 80018ea:	460b      	mov	r3, r1
 80018ec:	717b      	strb	r3, [r7, #5]
 80018ee:	4613      	mov	r3, r2
 80018f0:	713b      	strb	r3, [r7, #4]
  // 10101111 original value (sample)
  // 10100011 original & ~mask
  // 10101011 masked | value

  //first reading registery value
  sendBuf[0] = regAddr;
 80018f2:	4a3c      	ldr	r2, [pc, #240]	; (80019e4 <_ZN6I2Cdev9writeBitsEhhhhh+0x110>)
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	7013      	strb	r3, [r2, #0]
  uint8_t buffer;
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	b299      	uxth	r1, r3
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	2301      	movs	r3, #1
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	2301      	movs	r3, #1
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	f107 030d 	add.w	r3, r7, #13
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2301      	movs	r3, #1
 8001910:	4835      	ldr	r0, [pc, #212]	; (80019e8 <_ZN6I2Cdev9writeBitsEhhhhh+0x114>)
 8001912:	f005 fddb 	bl	80074cc <HAL_I2C_Mem_Read>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf14      	ite	ne
 800191c:	2301      	movne	r3, #1
 800191e:	2300      	moveq	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <_ZN6I2Cdev9writeBitsEhhhhh+0x58>
    MX_I2C1_Init();
 8001926:	f002 ff67 	bl	80047f8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Read(&hi2c1,devAddr,regAddr,I2C_MEMADD_SIZE_8BIT,&buffer,1,I2CDLY) != HAL_OK){
 800192a:	e7e5      	b.n	80018f8 <_ZN6I2Cdev9writeBitsEhhhhh+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
  if ( response == BCM2835_I2C_REASON_OK ) {
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d14c      	bne.n	80019d0 <_ZN6I2Cdev9writeBitsEhhhhh+0xfc>
    uint8_t b = buffer;
 8001936:	7b7b      	ldrb	r3, [r7, #13]
 8001938:	733b      	strb	r3, [r7, #12]
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800193a:	793b      	ldrb	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	7979      	ldrb	r1, [r7, #5]
 8001946:	793b      	ldrb	r3, [r7, #4]
 8001948:	1acb      	subs	r3, r1, r3
 800194a:	3301      	adds	r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	73bb      	strb	r3, [r7, #14]
    data <<= (bitStart - length + 1); // shift data into correct position
 8001952:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001956:	7979      	ldrb	r1, [r7, #5]
 8001958:	793b      	ldrb	r3, [r7, #4]
 800195a:	1acb      	subs	r3, r1, r3
 800195c:	3301      	adds	r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	f887 3020 	strb.w	r3, [r7, #32]
    data &= mask; // zero all non-important bits in data
 8001966:	f897 2020 	ldrb.w	r2, [r7, #32]
 800196a:	7bbb      	ldrb	r3, [r7, #14]
 800196c:	4013      	ands	r3, r2
 800196e:	f887 3020 	strb.w	r3, [r7, #32]
    b &= ~(mask); // zero all important bits in existing byte
 8001972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001976:	43db      	mvns	r3, r3
 8001978:	b25a      	sxtb	r2, r3
 800197a:	7b3b      	ldrb	r3, [r7, #12]
 800197c:	b25b      	sxtb	r3, r3
 800197e:	4013      	ands	r3, r2
 8001980:	b25b      	sxtb	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	733b      	strb	r3, [r7, #12]
    b |= data; // combine data with existing byte
 8001986:	7b3a      	ldrb	r2, [r7, #12]
 8001988:	f897 3020 	ldrb.w	r3, [r7, #32]
 800198c:	4313      	orrs	r3, r2
 800198e:	b2db      	uxtb	r3, r3
 8001990:	733b      	strb	r3, [r7, #12]
    sendBuf[1] = b ;
 8001992:	7b3a      	ldrb	r2, [r7, #12]
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <_ZN6I2Cdev9writeBitsEhhhhh+0x110>)
 8001996:	705a      	strb	r2, [r3, #1]
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	b299      	uxth	r1, r3
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	2301      	movs	r3, #1
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	2301      	movs	r3, #1
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2301      	movs	r3, #1
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <_ZN6I2Cdev9writeBitsEhhhhh+0x114>)
 80019b2:	f005 fc91 	bl	80072d8 <HAL_I2C_Mem_Write>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf14      	ite	ne
 80019bc:	2301      	movne	r3, #1
 80019be:	2300      	moveq	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <_ZN6I2Cdev9writeBitsEhhhhh+0xf8>
       MX_I2C1_Init();
 80019c6:	f002 ff17 	bl	80047f8 <MX_I2C1_Init>
    while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b, 1,I2CDLY) != HAL_OK){
 80019ca:	e7e5      	b.n	8001998 <_ZN6I2Cdev9writeBitsEhhhhh+0xc4>
    }
    response = BCM2835_I2C_REASON_OK;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
    }
  return response == BCM2835_I2C_REASON_OK;
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	bf0c      	ite	eq
 80019d6:	2301      	moveq	r3, #1
 80019d8:	2300      	movne	r3, #0
 80019da:	b2db      	uxtb	r3, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	200003b0 	.word	0x200003b0
 80019e8:	200006bc 	.word	0x200006bc

080019ec <_ZN6I2Cdev9writeByteEhhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af04      	add	r7, sp, #16
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	460b      	mov	r3, r1
 80019f8:	71bb      	strb	r3, [r7, #6]
 80019fa:	4613      	mov	r3, r2
 80019fc:	717b      	strb	r3, [r7, #5]

  sendBuf[0] = regAddr;
 80019fe:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <_ZN6I2Cdev9writeByteEhhh+0x68>)
 8001a00:	79bb      	ldrb	r3, [r7, #6]
 8001a02:	7013      	strb	r3, [r2, #0]
  sendBuf[1] = data;
 8001a04:	797a      	ldrb	r2, [r7, #5]
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <_ZN6I2Cdev9writeByteEhhh+0x68>)
 8001a08:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	b299      	uxth	r1, r3
 8001a0e:	79bb      	ldrb	r3, [r7, #6]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	2301      	movs	r3, #1
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	2301      	movs	r3, #1
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	1d7b      	adds	r3, r7, #5
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	480d      	ldr	r0, [pc, #52]	; (8001a58 <_ZN6I2Cdev9writeByteEhhh+0x6c>)
 8001a22:	f005 fc59 	bl	80072d8 <HAL_I2C_Mem_Write>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <_ZN6I2Cdev9writeByteEhhh+0x50>
     MX_I2C1_Init();
 8001a36:	f002 fedf 	bl	80047f8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&data, 1,I2CDLY) != HAL_OK){
 8001a3a:	e7e6      	b.n	8001a0a <_ZN6I2Cdev9writeByteEhhh+0x1e>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200003b0 	.word	0x200003b0
 8001a58:	200006bc 	.word	0x200006bc

08001a5c <_ZN6I2Cdev9writeWordEhht>:
    data[i] = (buffer[i*2] << 8) | buffer[i*2+1] ;
  }
  return  response == BCM2835_I2C_REASON_OK ;
}

bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af04      	add	r7, sp, #16
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
 8001a66:	460b      	mov	r3, r1
 8001a68:	71bb      	strb	r3, [r7, #6]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	80bb      	strh	r3, [r7, #4]

  sendBuf[0] = (uint8_t) (data >> 8); //MSByte
 8001a6e:	88bb      	ldrh	r3, [r7, #4]
 8001a70:	121b      	asrs	r3, r3, #8
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <_ZN6I2Cdev9writeWordEhht+0x70>)
 8001a76:	701a      	strb	r2, [r3, #0]
  sendBuf[1] = (uint8_t) (data >> 0); //LSByte
 8001a78:	88bb      	ldrh	r3, [r7, #4]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <_ZN6I2Cdev9writeWordEhht+0x70>)
 8001a7e:	705a      	strb	r2, [r3, #1]
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	b299      	uxth	r1, r3
 8001a84:	79bb      	ldrb	r3, [r7, #6]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	2301      	movs	r3, #1
 8001a8a:	9302      	str	r3, [sp, #8]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <_ZN6I2Cdev9writeWordEhht+0x70>)
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2301      	movs	r3, #1
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <_ZN6I2Cdev9writeWordEhht+0x74>)
 8001a98:	f005 fc1e 	bl	80072d8 <HAL_I2C_Mem_Write>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	2300      	moveq	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <_ZN6I2Cdev9writeWordEhht+0x56>
     MX_I2C1_Init();
 8001aac:	f002 fea4 	bl	80047f8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, 2,I2CDLY) != HAL_OK){
 8001ab0:	e7e6      	b.n	8001a80 <_ZN6I2Cdev9writeWordEhht+0x24>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
  return response == BCM2835_I2C_REASON_OK ;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200003b0 	.word	0x200003b0
 8001ad0:	200006bc 	.word	0x200006bc

08001ad4 <_ZN6I2Cdev10writeBytesEhhhPh>:

bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af04      	add	r7, sp, #16
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	71bb      	strb	r3, [r7, #6]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  for (i = 0; i < length; i++) {
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	797b      	ldrb	r3, [r7, #5]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d20a      	bcs.n	8001b0a <_ZN6I2Cdev10writeBytesEhhhPh+0x36>
    sendBuf[i] = data[i] ;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	441a      	add	r2, r3
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	7811      	ldrb	r1, [r2, #0]
 8001afe:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <_ZN6I2Cdev10writeBytesEhhhPh+0x84>)
 8001b00:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < length; i++) {
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	3301      	adds	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e7f0      	b.n	8001aec <_ZN6I2Cdev10writeBytesEhhhPh+0x18>
  }
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	b299      	uxth	r1, r3
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	797b      	ldrb	r3, [r7, #5]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2001      	movs	r0, #1
 8001b18:	9002      	str	r0, [sp, #8]
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <_ZN6I2Cdev10writeBytesEhhhPh+0x84>)
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2301      	movs	r3, #1
 8001b22:	480e      	ldr	r0, [pc, #56]	; (8001b5c <_ZN6I2Cdev10writeBytesEhhhPh+0x88>)
 8001b24:	f005 fbd8 	bl	80072d8 <HAL_I2C_Mem_Write>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf14      	ite	ne
 8001b2e:	2301      	movne	r3, #1
 8001b30:	2300      	moveq	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <_ZN6I2Cdev10writeBytesEhhhPh+0x6a>
     MX_I2C1_Init();
 8001b38:	f002 fe5e 	bl	80047f8 <MX_I2C1_Init>
  while(HAL_I2C_Mem_Write(&hi2c1,devAddr,regAddr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)sendBuf, length,I2CDLY) != HAL_OK){
 8001b3c:	e7e5      	b.n	8001b0a <_ZN6I2Cdev10writeBytesEhhhPh+0x36>
  }
  uint8_t response = BCM2835_I2C_REASON_OK;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73bb      	strb	r3, [r7, #14]
  return response == BCM2835_I2C_REASON_OK ;
 8001b42:	7bbb      	ldrb	r3, [r7, #14]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200003b0 	.word	0x200003b0
 8001b5c:	200006bc 	.word	0x200006bc

08001b60 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f00c fbdd 	bl	800e328 <asinf>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f00c fa57 	bl	800e034 <atanf>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f00c fb57 	bl	800e24c <cosf>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f00c fb83 	bl	800e2bc <sinf>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f00c fbd3 	bl	800e374 <sqrtf>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_ZN26MPU6050_6Axis_MotionApps20C1EhPv>:



class MPU6050_6Axis_MotionApps20 : public MPU6050 {
    public:
        MPU6050_6Axis_MotionApps20(uint8_t address=MPU6050_DEFAULT_ADDRESS, void *wireObj=0) : MPU6050(address) { }
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	460b      	mov	r3, r1
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	72fb      	strb	r3, [r7, #11]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	7afa      	ldrb	r2, [r7, #11]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fd89 	bl	8002704 <_ZN7MPU6050C1Eh>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_Z17MPU6050_resetFIFOv>:
 * @brief Clears the FIFO (First In First Out) of the MPU6050
 * 
 * --Custom Method!
 */
void MPU6050_resetFIFO()
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  //mpu.setFIFOEnabled(false);
  mpu.resetFIFO();
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <_Z17MPU6050_resetFIFOv+0x10>)
 8001c02:	f000 feba 	bl	800297a <_ZN7MPU60509resetFIFOEv>
  //mpu.setFIFOEnabled(true);
  //mpu.getIntStatus();
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200004c4 	.word	0x200004c4

08001c10 <_Z28MPU6050_WaitForQuaternionSetv>:
 * @brief Waits until a new Quaternion-set is available in the FIFO
 * 
 * --Custom Method!
 */
void MPU6050_WaitForQuaternionSet()
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  FIFOCounter = mpu.getFIFOCount();
 8001c14:	480a      	ldr	r0, [pc, #40]	; (8001c40 <_Z28MPU6050_WaitForQuaternionSetv+0x30>)
 8001c16:	f000 ff01 	bl	8002a1c <_ZN7MPU605012getFIFOCountEv>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <_Z28MPU6050_WaitForQuaternionSetv+0x34>)
 8001c20:	801a      	strh	r2, [r3, #0]
  while (FIFOCounter < 42) FIFOCounter = mpu.getFIFOCount();  //wait until there are more than 42 bytes in the FIFO
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <_Z28MPU6050_WaitForQuaternionSetv+0x34>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	2b29      	cmp	r3, #41	; 0x29
 8001c28:	d807      	bhi.n	8001c3a <_Z28MPU6050_WaitForQuaternionSetv+0x2a>
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <_Z28MPU6050_WaitForQuaternionSetv+0x30>)
 8001c2c:	f000 fef6 	bl	8002a1c <_ZN7MPU605012getFIFOCountEv>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <_Z28MPU6050_WaitForQuaternionSetv+0x34>)
 8001c36:	801a      	strh	r2, [r3, #0]
 8001c38:	e7f3      	b.n	8001c22 <_Z28MPU6050_WaitForQuaternionSetv+0x12>
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200004c4 	.word	0x200004c4
 8001c44:	200004c0 	.word	0x200004c0

08001c48 <_Z28MPU6050_ConvertToQuaternionsv>:
 * @brief Reads a Quaternion-set from the FIFO and assembles the data to W,X,Y,Z
 * 
 * --Custom Method!
 */
void MPU6050_ConvertToQuaternions()
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  if ((FIFOCounter == 42) | (FIFOCounter == 84))
 8001c4c:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	2b2a      	cmp	r3, #42	; 0x2a
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <_Z28MPU6050_ConvertToQuaternionsv+0x110>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	2b54      	cmp	r3, #84	; 0x54
 8001c60:	bf0c      	ite	eq
 8001c62:	2301      	moveq	r3, #1
 8001c64:	2300      	movne	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d070      	beq.n	8001d52 <_Z28MPU6050_ConvertToQuaternionsv+0x10a>
  {
    mpu.getFIFOBytes(MPU6050_RX_buf, 16);
 8001c70:	2210      	movs	r2, #16
 8001c72:	493a      	ldr	r1, [pc, #232]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c74:	483a      	ldr	r0, [pc, #232]	; (8001d60 <_Z28MPU6050_ConvertToQuaternionsv+0x118>)
 8001c76:	f000 feeb 	bl	8002a50 <_ZN7MPU605012getFIFOBytesEPhh>
    MPUoutputQuaternion[0] = (float)(((int32_t)MPU6050_RX_buf[0] << 24)  | ((int32_t)MPU6050_RX_buf[1] << 16)  | ((int32_t)MPU6050_RX_buf[2] << 8)  | MPU6050_RX_buf[3 ]) / 1073741824;
 8001c7a:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	061a      	lsls	r2, r3, #24
 8001c80:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c82:	785b      	ldrb	r3, [r3, #1]
 8001c84:	041b      	lsls	r3, r3, #16
 8001c86:	431a      	orrs	r2, r3
 8001c88:	4b34      	ldr	r3, [pc, #208]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c8a:	789b      	ldrb	r3, [r3, #2]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	4a32      	ldr	r2, [pc, #200]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001c92:	78d2      	ldrb	r2, [r2, #3]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f85c 	bl	8000d54 <__aeabi_i2f>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f95e 	bl	8000f64 <__aeabi_fdiv>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <_Z28MPU6050_ConvertToQuaternionsv+0x11c>)
 8001cae:	601a      	str	r2, [r3, #0]
    MPUoutputQuaternion[1] = (float)(((int32_t)MPU6050_RX_buf[4] << 24)  | ((int32_t)MPU6050_RX_buf[5] << 16)  | ((int32_t)MPU6050_RX_buf[6] << 8)  | MPU6050_RX_buf[7 ]) / 1073741824;
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cb2:	791b      	ldrb	r3, [r3, #4]
 8001cb4:	061a      	lsls	r2, r3, #24
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cb8:	795b      	ldrb	r3, [r3, #5]
 8001cba:	041b      	lsls	r3, r3, #16
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cc0:	799b      	ldrb	r3, [r3, #6]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cc8:	79d2      	ldrb	r2, [r2, #7]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f841 	bl	8000d54 <__aeabi_i2f>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff f943 	bl	8000f64 <__aeabi_fdiv>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <_Z28MPU6050_ConvertToQuaternionsv+0x11c>)
 8001ce4:	605a      	str	r2, [r3, #4]
    MPUoutputQuaternion[2] = (float)(((int32_t)MPU6050_RX_buf[8] << 24)  | ((int32_t)MPU6050_RX_buf[9] << 16)  | ((int32_t)MPU6050_RX_buf[10] << 8) | MPU6050_RX_buf[11]) / 1073741824;
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001ce8:	7a1b      	ldrb	r3, [r3, #8]
 8001cea:	061a      	lsls	r2, r3, #24
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cee:	7a5b      	ldrb	r3, [r3, #9]
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cf6:	7a9b      	ldrb	r3, [r3, #10]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001cfe:	7ad2      	ldrb	r2, [r2, #11]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f826 	bl	8000d54 <__aeabi_i2f>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f928 	bl	8000f64 <__aeabi_fdiv>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <_Z28MPU6050_ConvertToQuaternionsv+0x11c>)
 8001d1a:	609a      	str	r2, [r3, #8]
    MPUoutputQuaternion[3] = (float)(((int32_t)MPU6050_RX_buf[12] << 24) | ((int32_t)MPU6050_RX_buf[13] << 16) | ((int32_t)MPU6050_RX_buf[14] << 8) | MPU6050_RX_buf[15]) / 1073741824;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d1e:	7b1b      	ldrb	r3, [r3, #12]
 8001d20:	061a      	lsls	r2, r3, #24
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d24:	7b5b      	ldrb	r3, [r3, #13]
 8001d26:	041b      	lsls	r3, r3, #16
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d2c:	7b9b      	ldrb	r3, [r3, #14]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	4313      	orrs	r3, r2
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <_Z28MPU6050_ConvertToQuaternionsv+0x114>)
 8001d34:	7bd2      	ldrb	r2, [r2, #15]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f80b 	bl	8000d54 <__aeabi_i2f>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff f90d 	bl	8000f64 <__aeabi_fdiv>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <_Z28MPU6050_ConvertToQuaternionsv+0x11c>)
 8001d50:	60da      	str	r2, [r3, #12]
  }
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200004c0 	.word	0x200004c0
 8001d5c:	200004b0 	.word	0x200004b0
 8001d60:	200004c4 	.word	0x200004c4
 8001d64:	2000056c 	.word	0x2000056c

08001d68 <_Z27MPU6050_GetOriginQuaternionv>:
 * @brief Saves the current MPU6050 raw Quaternion as the Origin Quaternion
 * 
 * --Custom Method!
 */
void MPU6050_GetOriginQuaternion()
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  OriginQuaternion[0] = MPUoutputQuaternion[0];
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d72:	6013      	str	r3, [r2, #0]
  OriginQuaternion[1] = MPUoutputQuaternion[1];
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d7a:	6053      	str	r3, [r2, #4]
  OriginQuaternion[2] = MPUoutputQuaternion[2];
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d82:	6093      	str	r3, [r2, #8]
  OriginQuaternion[3] = MPUoutputQuaternion[3];
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <_Z27MPU6050_GetOriginQuaternionv+0x2c>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <_Z27MPU6050_GetOriginQuaternionv+0x30>)
 8001d8a:	60d3      	str	r3, [r2, #12]
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	2000056c 	.word	0x2000056c
 8001d98:	2000057c 	.word	0x2000057c

08001d9c <_Z28update_FrameOriginQuaternionv>:
 * It does this to then be able to apply that Quaternion rotation to the W-Quaternion
 * 
 * --Custom Method!
 */
void update_FrameOriginQuaternion()//NOTDONE rename and add deadzones
{
 8001d9c:	b5b0      	push	{r4, r5, r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
  float temp_pitch = SBUS_Channels[0];          //deadzones
 8001da2:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <_Z28update_FrameOriginQuaternionv+0x194>)
 8001da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe ffd3 	bl	8000d54 <__aeabi_i2f>
 8001dae:	4603      	mov	r3, r0
 8001db0:	60fb      	str	r3, [r7, #12]
  float temp_roll  = SBUS_Channels[1];
 8001db2:	4b5f      	ldr	r3, [pc, #380]	; (8001f30 <_Z28update_FrameOriginQuaternionv+0x194>)
 8001db4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe ffcb 	bl	8000d54 <__aeabi_i2f>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	60bb      	str	r3, [r7, #8]
  float temp_yaw   = SBUS_Channels[3];
 8001dc2:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <_Z28update_FrameOriginQuaternionv+0x194>)
 8001dc4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe ffc3 	bl	8000d54 <__aeabi_i2f>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	607b      	str	r3, [r7, #4]
  if ((temp_pitch < pitchDeadzone) & (temp_pitch > -pitchDeadzone)) temp_pitch = 0;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	461c      	mov	r4, r3
 8001dd6:	4957      	ldr	r1, [pc, #348]	; (8001f34 <_Z28update_FrameOriginQuaternionv+0x198>)
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f7ff f9ad 	bl	8001138 <__aeabi_fcmplt>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <_Z28update_FrameOriginQuaternionv+0x4c>
 8001de4:	2300      	movs	r3, #0
 8001de6:	461c      	mov	r4, r3
 8001de8:	b2e4      	uxtb	r4, r4
 8001dea:	2301      	movs	r3, #1
 8001dec:	461d      	mov	r5, r3
 8001dee:	4952      	ldr	r1, [pc, #328]	; (8001f38 <_Z28update_FrameOriginQuaternionv+0x19c>)
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f7ff f9bf 	bl	8001174 <__aeabi_fcmpgt>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <_Z28update_FrameOriginQuaternionv+0x64>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	461d      	mov	r5, r3
 8001e00:	b2eb      	uxtb	r3, r5
 8001e02:	4023      	ands	r3, r4
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <_Z28update_FrameOriginQuaternionv+0x74>
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  if ((temp_roll  < rollDeadzone ) & (temp_roll  > -rollDeadzone )) temp_roll  = 0;
 8001e10:	2301      	movs	r3, #1
 8001e12:	461c      	mov	r4, r3
 8001e14:	4947      	ldr	r1, [pc, #284]	; (8001f34 <_Z28update_FrameOriginQuaternionv+0x198>)
 8001e16:	68b8      	ldr	r0, [r7, #8]
 8001e18:	f7ff f98e 	bl	8001138 <__aeabi_fcmplt>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <_Z28update_FrameOriginQuaternionv+0x8a>
 8001e22:	2300      	movs	r3, #0
 8001e24:	461c      	mov	r4, r3
 8001e26:	b2e4      	uxtb	r4, r4
 8001e28:	2301      	movs	r3, #1
 8001e2a:	461d      	mov	r5, r3
 8001e2c:	4942      	ldr	r1, [pc, #264]	; (8001f38 <_Z28update_FrameOriginQuaternionv+0x19c>)
 8001e2e:	68b8      	ldr	r0, [r7, #8]
 8001e30:	f7ff f9a0 	bl	8001174 <__aeabi_fcmpgt>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <_Z28update_FrameOriginQuaternionv+0xa2>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	461d      	mov	r5, r3
 8001e3e:	b2eb      	uxtb	r3, r5
 8001e40:	4023      	ands	r3, r4
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <_Z28update_FrameOriginQuaternionv+0xb2>
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
  if ((temp_yaw   < yawDeadzone  ) & (temp_yaw   > -yawDeadzone  )) temp_yaw   = 0;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	461c      	mov	r4, r3
 8001e52:	4938      	ldr	r1, [pc, #224]	; (8001f34 <_Z28update_FrameOriginQuaternionv+0x198>)
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff f96f 	bl	8001138 <__aeabi_fcmplt>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <_Z28update_FrameOriginQuaternionv+0xc8>
 8001e60:	2300      	movs	r3, #0
 8001e62:	461c      	mov	r4, r3
 8001e64:	b2e4      	uxtb	r4, r4
 8001e66:	2301      	movs	r3, #1
 8001e68:	461d      	mov	r5, r3
 8001e6a:	4933      	ldr	r1, [pc, #204]	; (8001f38 <_Z28update_FrameOriginQuaternionv+0x19c>)
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff f981 	bl	8001174 <__aeabi_fcmpgt>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <_Z28update_FrameOriginQuaternionv+0xe0>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	461d      	mov	r5, r3
 8001e7c:	b2eb      	uxtb	r3, r5
 8001e7e:	4023      	ands	r3, r4
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <_Z28update_FrameOriginQuaternionv+0xf0>
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
  
  updateQuaternion[0] = cos(temp_yaw          / 50000);                   //create rotation Quaternion
 8001e8c:	492b      	ldr	r1, [pc, #172]	; (8001f3c <_Z28update_FrameOriginQuaternionv+0x1a0>)
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff f868 	bl	8000f64 <__aeabi_fdiv>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fe7a 	bl	8001b90 <_ZSt3cosf>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <_Z28update_FrameOriginQuaternionv+0x1a4>)
 8001ea0:	6013      	str	r3, [r2, #0]
  updateQuaternion[1] = (float)sin(temp_pitch / 50000);
 8001ea2:	4926      	ldr	r1, [pc, #152]	; (8001f3c <_Z28update_FrameOriginQuaternionv+0x1a0>)
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7ff f85d 	bl	8000f64 <__aeabi_fdiv>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fe7b 	bl	8001ba8 <_ZSt3sinf>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a22      	ldr	r2, [pc, #136]	; (8001f40 <_Z28update_FrameOriginQuaternionv+0x1a4>)
 8001eb6:	6053      	str	r3, [r2, #4]
  updateQuaternion[2] = (float)sin(temp_roll  / 50000);
 8001eb8:	4920      	ldr	r1, [pc, #128]	; (8001f3c <_Z28update_FrameOriginQuaternionv+0x1a0>)
 8001eba:	68b8      	ldr	r0, [r7, #8]
 8001ebc:	f7ff f852 	bl	8000f64 <__aeabi_fdiv>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fe70 	bl	8001ba8 <_ZSt3sinf>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <_Z28update_FrameOriginQuaternionv+0x1a4>)
 8001ecc:	6093      	str	r3, [r2, #8]
  updateQuaternion[3] = sin(temp_yaw          / 50000);
 8001ece:	491b      	ldr	r1, [pc, #108]	; (8001f3c <_Z28update_FrameOriginQuaternionv+0x1a0>)
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff f847 	bl	8000f64 <__aeabi_fdiv>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fe65 	bl	8001ba8 <_ZSt3sinf>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <_Z28update_FrameOriginQuaternionv+0x1a4>)
 8001ee2:	60d3      	str	r3, [r2, #12]

  float *p3 = QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(FrameOriginQuaternion, LoopWQuaternion)), updateQuaternion));
 8001ee4:	4917      	ldr	r1, [pc, #92]	; (8001f44 <_Z28update_FrameOriginQuaternionv+0x1a8>)
 8001ee6:	4818      	ldr	r0, [pc, #96]	; (8001f48 <_Z28update_FrameOriginQuaternionv+0x1ac>)
 8001ee8:	f000 fb84 	bl	80025f4 <_Z15QuaternionSLERPPfS_>
 8001eec:	4603      	mov	r3, r0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fb92 	bl	8002618 <_Z19QuaternionNormalizePf>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4912      	ldr	r1, [pc, #72]	; (8001f40 <_Z28update_FrameOriginQuaternionv+0x1a4>)
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fa4d 	bl	8002398 <_Z17QuaternionProductPfS_>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fb89 	bl	8002618 <_Z19QuaternionNormalizePf>
 8001f06:	6038      	str	r0, [r7, #0]
  LoopWQuaternion[0] = *p3;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <_Z28update_FrameOriginQuaternionv+0x1a8>)
 8001f0e:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p3 + 1);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <_Z28update_FrameOriginQuaternionv+0x1a8>)
 8001f16:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p3 + 2);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <_Z28update_FrameOriginQuaternionv+0x1a8>)
 8001f1e:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p3 + 3);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <_Z28update_FrameOriginQuaternionv+0x1a8>)
 8001f26:	60d3      	str	r3, [r2, #12]
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f30:	2000065c 	.word	0x2000065c
 8001f34:	40a00000 	.word	0x40a00000
 8001f38:	c0a00000 	.word	0xc0a00000
 8001f3c:	47435000 	.word	0x47435000
 8001f40:	2000059c 	.word	0x2000059c
 8001f44:	20000014 	.word	0x20000014
 8001f48:	20000004 	.word	0x20000004

08001f4c <_Z12MPU6050_initv>:
 * @brief Initializes the MPU6050 and initializes and starts the DMP functionality
 * 
 * --Custom Method!
 */
void MPU6050_init()
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);  //disable SBUS pin interrupt
 8001f52:	2006      	movs	r0, #6
 8001f54:	f004 fe63 	bl	8006c1e <HAL_NVIC_DisableIRQ>
  HAL_Delay(10);
 8001f58:	200a      	movs	r0, #10
 8001f5a:	f004 f9fd 	bl	8006358 <HAL_Delay>
  mpu.initialize();                 //initialize that object
 8001f5e:	4826      	ldr	r0, [pc, #152]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001f60:	f000 fbdf 	bl	8002722 <_ZN7MPU605010initializeEv>
  if (mpu.testConnection()) HAL_GPIO_TogglePin(ONBOARD_LED_1_GPIO_Port, ONBOARD_LED_1_Pin);   //NOTDONE debug
 8001f64:	4824      	ldr	r0, [pc, #144]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001f66:	f000 fbf4 	bl	8002752 <_ZN7MPU605014testConnectionEv>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <_Z12MPU6050_initv+0x2c>
 8001f70:	2110      	movs	r1, #16
 8001f72:	4822      	ldr	r0, [pc, #136]	; (8001ffc <_Z12MPU6050_initv+0xb0>)
 8001f74:	f005 f83b 	bl	8006fee <HAL_GPIO_TogglePin>
  uint8_t devStatus = mpu.dmpInitialize();              //initialize DMP (Digital Motion Processing)
 8001f78:	481f      	ldr	r0, [pc, #124]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001f7a:	f001 f979 	bl	8003270 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  
  mpu.setXAccelOffset( 1044);         //apply custom offset values
 8001f82:	f240 4114 	movw	r1, #1044	; 0x414
 8001f86:	481c      	ldr	r0, [pc, #112]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001f88:	f000 fe2a 	bl	8002be0 <_ZN7MPU605015setXAccelOffsetEs>
  mpu.setYAccelOffset(-1699);
 8001f8c:	491c      	ldr	r1, [pc, #112]	; (8002000 <_Z12MPU6050_initv+0xb4>)
 8001f8e:	481a      	ldr	r0, [pc, #104]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001f90:	f000 fe37 	bl	8002c02 <_ZN7MPU605015setYAccelOffsetEs>
  mpu.setZAccelOffset(  692);
 8001f94:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8001f98:	4817      	ldr	r0, [pc, #92]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001f9a:	f000 fe43 	bl	8002c24 <_ZN7MPU605015setZAccelOffsetEs>
  mpu.setXGyroOffset(   -53);
 8001f9e:	f06f 0134 	mvn.w	r1, #52	; 0x34
 8001fa2:	4815      	ldr	r0, [pc, #84]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001fa4:	f000 fe4f 	bl	8002c46 <_ZN7MPU605014setXGyroOffsetEs>
  mpu.setYGyroOffset(   -26);
 8001fa8:	f06f 0119 	mvn.w	r1, #25
 8001fac:	4812      	ldr	r0, [pc, #72]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001fae:	f000 fe5b 	bl	8002c68 <_ZN7MPU605014setYGyroOffsetEs>
  mpu.setZGyroOffset(   -33);
 8001fb2:	f06f 0120 	mvn.w	r1, #32
 8001fb6:	4810      	ldr	r0, [pc, #64]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001fb8:	f000 fe67 	bl	8002c8a <_ZN7MPU605014setZGyroOffsetEs>

  if (devStatus == 0) {
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10a      	bne.n	8001fd8 <_Z12MPU6050_initv+0x8c>
      mpu.setDMPEnabled(true);
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001fc6:	f000 fe71 	bl	8002cac <_ZN7MPU605013setDMPEnabledEb>
      mpu.getIntStatus();
 8001fca:	480b      	ldr	r0, [pc, #44]	; (8001ff8 <_Z12MPU6050_initv+0xac>)
 8001fcc:	f000 fca1 	bl	8002912 <_ZN7MPU605012getIntStatusEv>
      packetSize = 42;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <_Z12MPU6050_initv+0xb8>)
 8001fd2:	222a      	movs	r2, #42	; 0x2a
 8001fd4:	801a      	strh	r2, [r3, #0]
 8001fd6:	e003      	b.n	8001fe0 <_Z12MPU6050_initv+0x94>
  } else {
      HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);   //NOTDONE debug
 8001fd8:	2120      	movs	r1, #32
 8001fda:	4808      	ldr	r0, [pc, #32]	; (8001ffc <_Z12MPU6050_initv+0xb0>)
 8001fdc:	f005 f807 	bl	8006fee <HAL_GPIO_TogglePin>
  }
  HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);   //NOTDONE debug
 8001fe0:	2120      	movs	r1, #32
 8001fe2:	4806      	ldr	r0, [pc, #24]	; (8001ffc <_Z12MPU6050_initv+0xb0>)
 8001fe4:	f005 f803 	bl	8006fee <HAL_GPIO_TogglePin>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   //enable SBUS pin interrupt
 8001fe8:	2006      	movs	r0, #6
 8001fea:	f004 fe0a 	bl	8006c02 <HAL_NVIC_EnableIRQ>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200004c4 	.word	0x200004c4
 8001ffc:	40020000 	.word	0x40020000
 8002000:	fffff95d 	.word	0xfffff95d
 8002004:	200004c2 	.word	0x200004c2

08002008 <_Z19MPU6050_calibrationv>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void MPU6050_calibration()//NOTDONE comment
{
 8002008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800200c:	b0e1      	sub	sp, #388	; 0x184
 800200e:	af08      	add	r7, sp, #32
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);  //disable SBUS pin interrupt
 8002010:	2006      	movs	r0, #6
 8002012:	f004 fe04 	bl	8006c1e <HAL_NVIC_DisableIRQ>
  uint8_t MPU_calibrated = false;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  while (MPU_calibrated == false)
 800201c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002020:	2b00      	cmp	r3, #0
 8002022:	f040 8193 	bne.w	800234c <_Z19MPU6050_calibrationv+0x344>
  {
    uint16_t counter = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
    MPU6050_resetFIFO();
 800202c:	f7ff fde6 	bl	8001bfc <_Z17MPU6050_resetFIFOv>
    MPU6050_WaitForQuaternionSet();
 8002030:	f7ff fdee 	bl	8001c10 <_Z28MPU6050_WaitForQuaternionSetv>
    MPU6050_ConvertToQuaternions();
 8002034:	f7ff fe08 	bl	8001c48 <_Z28MPU6050_ConvertToQuaternionsv>
    MPU6050_GetOriginQuaternion();
 8002038:	f7ff fe96 	bl	8001d68 <_Z27MPU6050_GetOriginQuaternionv>
    get_XW_diffAngles();
 800203c:	f001 fbe0 	bl	8003800 <_Z17get_XW_diffAnglesv>

    uint16_t oldTime = TIM11->CNT;
 8002040:	4bb8      	ldr	r3, [pc, #736]	; (8002324 <_Z19MPU6050_calibrationv+0x31c>)
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a

    float startAngles[3] = {
    PID_Pitch_xw_diff,
    PID_Roll_xw_diff ,
    PID_Yaw_xw_diff  };
 8002048:	4bb7      	ldr	r3, [pc, #732]	; (8002328 <_Z19MPU6050_calibrationv+0x320>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002050:	4bb6      	ldr	r3, [pc, #728]	; (800232c <_Z19MPU6050_calibrationv+0x324>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002058:	4bb5      	ldr	r3, [pc, #724]	; (8002330 <_Z19MPU6050_calibrationv+0x328>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    while 
    (                                                                                                                                     \
    (startAngles[0] - PID_Pitch_xw_diff < MPU6050_cal_Pitch_MaxDev) & (startAngles[0] - PID_Pitch_xw_diff > -MPU6050_cal_Pitch_MaxDev) &  \
 8002060:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002064:	4ab0      	ldr	r2, [pc, #704]	; (8002328 <_Z19MPU6050_calibrationv+0x320>)
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fdbc 	bl	8000be8 <__aeabi_fsub>
 8002070:	4603      	mov	r3, r0
 8002072:	2201      	movs	r2, #1
 8002074:	4614      	mov	r4, r2
 8002076:	49af      	ldr	r1, [pc, #700]	; (8002334 <_Z19MPU6050_calibrationv+0x32c>)
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff f85d 	bl	8001138 <__aeabi_fcmplt>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <_Z19MPU6050_calibrationv+0x80>
 8002084:	2300      	movs	r3, #0
 8002086:	461c      	mov	r4, r3
 8002088:	b2e4      	uxtb	r4, r4
 800208a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800208e:	4aa6      	ldr	r2, [pc, #664]	; (8002328 <_Z19MPU6050_calibrationv+0x320>)
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fda7 	bl	8000be8 <__aeabi_fsub>
 800209a:	4603      	mov	r3, r0
 800209c:	2201      	movs	r2, #1
 800209e:	4615      	mov	r5, r2
 80020a0:	49a5      	ldr	r1, [pc, #660]	; (8002338 <_Z19MPU6050_calibrationv+0x330>)
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff f866 	bl	8001174 <__aeabi_fcmpgt>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <_Z19MPU6050_calibrationv+0xaa>
 80020ae:	2300      	movs	r3, #0
 80020b0:	461d      	mov	r5, r3
 80020b2:	b2eb      	uxtb	r3, r5
 80020b4:	4023      	ands	r3, r4
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	461c      	mov	r4, r3
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 80020ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80020be:	4a9b      	ldr	r2, [pc, #620]	; (800232c <_Z19MPU6050_calibrationv+0x324>)
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fd8f 	bl	8000be8 <__aeabi_fsub>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2201      	movs	r2, #1
 80020ce:	4615      	mov	r5, r2
 80020d0:	4998      	ldr	r1, [pc, #608]	; (8002334 <_Z19MPU6050_calibrationv+0x32c>)
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f830 	bl	8001138 <__aeabi_fcmplt>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <_Z19MPU6050_calibrationv+0xda>
 80020de:	2300      	movs	r3, #0
 80020e0:	461d      	mov	r5, r3
 80020e2:	b2eb      	uxtb	r3, r5
    (startAngles[0] - PID_Pitch_xw_diff < MPU6050_cal_Pitch_MaxDev) & (startAngles[0] - PID_Pitch_xw_diff > -MPU6050_cal_Pitch_MaxDev) &  \
 80020e4:	401c      	ands	r4, r3
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 80020e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80020ea:	4a90      	ldr	r2, [pc, #576]	; (800232c <_Z19MPU6050_calibrationv+0x324>)
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fd79 	bl	8000be8 <__aeabi_fsub>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2201      	movs	r2, #1
 80020fa:	4615      	mov	r5, r2
 80020fc:	498e      	ldr	r1, [pc, #568]	; (8002338 <_Z19MPU6050_calibrationv+0x330>)
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff f838 	bl	8001174 <__aeabi_fcmpgt>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <_Z19MPU6050_calibrationv+0x106>
 800210a:	2300      	movs	r3, #0
 800210c:	461d      	mov	r5, r3
 800210e:	b2eb      	uxtb	r3, r5
 8002110:	401c      	ands	r4, r3
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 8002112:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002116:	4a86      	ldr	r2, [pc, #536]	; (8002330 <_Z19MPU6050_calibrationv+0x328>)
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fd63 	bl	8000be8 <__aeabi_fsub>
 8002122:	4603      	mov	r3, r0
 8002124:	2201      	movs	r2, #1
 8002126:	4615      	mov	r5, r2
 8002128:	4982      	ldr	r1, [pc, #520]	; (8002334 <_Z19MPU6050_calibrationv+0x32c>)
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff f804 	bl	8001138 <__aeabi_fcmplt>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <_Z19MPU6050_calibrationv+0x132>
 8002136:	2300      	movs	r3, #0
 8002138:	461d      	mov	r5, r3
 800213a:	b2eb      	uxtb	r3, r5
    (startAngles[1] - PID_Roll_xw_diff  < MPU6050_cal_Roll_MaxDev ) & (startAngles[1] - PID_Roll_xw_diff  > -MPU6050_cal_Roll_MaxDev ) &  \
 800213c:	401c      	ands	r4, r3
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 800213e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002142:	4a7b      	ldr	r2, [pc, #492]	; (8002330 <_Z19MPU6050_calibrationv+0x328>)
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fd4d 	bl	8000be8 <__aeabi_fsub>
 800214e:	4603      	mov	r3, r0
 8002150:	2201      	movs	r2, #1
 8002152:	4615      	mov	r5, r2
 8002154:	4978      	ldr	r1, [pc, #480]	; (8002338 <_Z19MPU6050_calibrationv+0x330>)
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff f80c 	bl	8001174 <__aeabi_fcmpgt>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <_Z19MPU6050_calibrationv+0x15e>
 8002162:	2300      	movs	r3, #0
 8002164:	461d      	mov	r5, r3
 8002166:	b2eb      	uxtb	r3, r5
 8002168:	4023      	ands	r3, r4
    (counter < MPU6050_cal_Time)                                                                                                          \
 800216a:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 800216e:	f640 719f 	movw	r1, #3999	; 0xf9f
 8002172:	428a      	cmp	r2, r1
 8002174:	bf94      	ite	ls
 8002176:	2201      	movls	r2, #1
 8002178:	2200      	movhi	r2, #0
 800217a:	b2d2      	uxtb	r2, r2
    (startAngles[2] - PID_Yaw_xw_diff   < MPU6050_cal_Yaw_MaxDev  ) & (startAngles[2] - PID_Yaw_xw_diff   > -MPU6050_cal_Yaw_MaxDev  ) &  \
 800217c:	4013      	ands	r3, r2
    (counter < MPU6050_cal_Time)                                                                                                          \
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80c0 	beq.w	8002304 <_Z19MPU6050_calibrationv+0x2fc>
    )                                                                                                                                     \
    {
      MPU6050_resetFIFO();
 8002184:	f7ff fd3a 	bl	8001bfc <_Z17MPU6050_resetFIFOv>
      MPU6050_WaitForQuaternionSet();
 8002188:	f7ff fd42 	bl	8001c10 <_Z28MPU6050_WaitForQuaternionSetv>
      MPU6050_ConvertToQuaternions();
 800218c:	f7ff fd5c 	bl	8001c48 <_Z28MPU6050_ConvertToQuaternionsv>
      get_XW_diffAngles();
 8002190:	f001 fb36 	bl	8003800 <_Z17get_XW_diffAnglesv>
      for (size_t i = 0; i < 1; i++)
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800219a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f040 8097 	bne.w	80022d2 <_Z19MPU6050_calibrationv+0x2ca>
	      uint8_t x = 0;
	      while (msg[x] != NULL) x++;
	      unsigned char msgTransmit[x];
	      for (size_t i = 0; i < x; i++) msgTransmit[i] = msg[i];
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
      }
 80021a4:	466b      	mov	r3, sp
 80021a6:	603b      	str	r3, [r7, #0]
        , MPU6050_RX_buf[0]                    \
 80021a8:	4b64      	ldr	r3, [pc, #400]	; (800233c <_Z19MPU6050_calibrationv+0x334>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
	      sprintf((char*)msg,"%hu %f %f %f %hu %hu \r\n" \
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	4b5e      	ldr	r3, [pc, #376]	; (8002328 <_Z19MPU6050_calibrationv+0x320>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f974 	bl	80004a0 <__aeabi_f2d>
 80021b8:	4604      	mov	r4, r0
 80021ba:	460d      	mov	r5, r1
 80021bc:	4b5b      	ldr	r3, [pc, #364]	; (800232c <_Z19MPU6050_calibrationv+0x324>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f96d 	bl	80004a0 <__aeabi_f2d>
 80021c6:	4680      	mov	r8, r0
 80021c8:	4689      	mov	r9, r1
 80021ca:	4b59      	ldr	r3, [pc, #356]	; (8002330 <_Z19MPU6050_calibrationv+0x328>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f966 	bl	80004a0 <__aeabi_f2d>
 80021d4:	4682      	mov	sl, r0
 80021d6:	468b      	mov	fp, r1
 80021d8:	f8b7 6158 	ldrh.w	r6, [r7, #344]	; 0x158
        , mpu.getFIFOCount());
 80021dc:	4858      	ldr	r0, [pc, #352]	; (8002340 <_Z19MPU6050_calibrationv+0x338>)
 80021de:	f000 fc1d 	bl	8002a1c <_ZN7MPU605012getFIFOCountEv>
 80021e2:	4603      	mov	r3, r0
	      sprintf((char*)msg,"%hu %f %f %f %hu %hu \r\n" \
 80021e4:	461a      	mov	r2, r3
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	9207      	str	r2, [sp, #28]
 80021ec:	9606      	str	r6, [sp, #24]
 80021ee:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80021f2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80021f6:	e9cd 4500 	strd	r4, r5, [sp]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4951      	ldr	r1, [pc, #324]	; (8002344 <_Z19MPU6050_calibrationv+0x33c>)
 80021fe:	4618      	mov	r0, r3
 8002200:	f00e fd42 	bl	8010c88 <siprintf>
	      uint8_t x = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
	      while (msg[x] != NULL) x++;
 800220a:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 800220e:	f107 020c 	add.w	r2, r7, #12
 8002212:	5cd3      	ldrb	r3, [r2, r3]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <_Z19MPU6050_calibrationv+0x21c>
 8002218:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 800221c:	3301      	adds	r3, #1
 800221e:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
 8002222:	e7f2      	b.n	800220a <_Z19MPU6050_calibrationv+0x202>
	      unsigned char msgTransmit[x];
 8002224:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8002228:	1e5c      	subs	r4, r3, #1
 800222a:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800222e:	4623      	mov	r3, r4
 8002230:	3301      	adds	r3, #1
 8002232:	4618      	mov	r0, r3
 8002234:	f04f 0100 	mov.w	r1, #0
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	00cb      	lsls	r3, r1, #3
 8002242:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002246:	00c2      	lsls	r2, r0, #3
 8002248:	4623      	mov	r3, r4
 800224a:	3301      	adds	r3, #1
 800224c:	4618      	mov	r0, r3
 800224e:	f04f 0100 	mov.w	r1, #0
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	00cb      	lsls	r3, r1, #3
 800225c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002260:	00c2      	lsls	r2, r0, #3
 8002262:	4623      	mov	r3, r4
 8002264:	3301      	adds	r3, #1
 8002266:	3307      	adds	r3, #7
 8002268:	08db      	lsrs	r3, r3, #3
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	ebad 0d03 	sub.w	sp, sp, r3
 8002270:	ab08      	add	r3, sp, #32
 8002272:	3300      	adds	r3, #0
 8002274:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	      for (size_t i = 0; i < x; i++) msgTransmit[i] = msg[i];
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800227e:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8002282:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8002286:	429a      	cmp	r2, r3
 8002288:	d212      	bcs.n	80022b0 <_Z19MPU6050_calibrationv+0x2a8>
 800228a:	f107 020c 	add.w	r2, r7, #12
 800228e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002292:	4413      	add	r3, r2
 8002294:	7819      	ldrb	r1, [r3, #0]
 8002296:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800229a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800229e:	4413      	add	r3, r2
 80022a0:	460a      	mov	r2, r1
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80022a8:	3301      	adds	r3, #1
 80022aa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80022ae:	e7e6      	b.n	800227e <_Z19MPU6050_calibrationv+0x276>
	      CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 80022b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80022b4:	b2a3      	uxth	r3, r4
 80022b6:	3301      	adds	r3, #1
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4619      	mov	r1, r3
 80022bc:	4610      	mov	r0, r2
 80022be:	f00b f9ff 	bl	800d6c0 <CDC_Transmit_FS>
 80022c2:	f8d7 d000 	ldr.w	sp, [r7]
      for (size_t i = 0; i < 1; i++)
 80022c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80022ca:	3301      	adds	r3, #1
 80022cc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80022d0:	e763      	b.n	800219a <_Z19MPU6050_calibrationv+0x192>

      while ((TIM11->CNT - oldTime) < 10000) ;
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <_Z19MPU6050_calibrationv+0x31c>)
 80022d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d6:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80022e0:	4293      	cmp	r3, r2
 80022e2:	bf94      	ite	ls
 80022e4:	2301      	movls	r3, #1
 80022e6:	2300      	movhi	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d000      	beq.n	80022f0 <_Z19MPU6050_calibrationv+0x2e8>
 80022ee:	e7f0      	b.n	80022d2 <_Z19MPU6050_calibrationv+0x2ca>
      oldTime = TIM11->CNT;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <_Z19MPU6050_calibrationv+0x31c>)
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
      counter += 10;
 80022f8:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 80022fc:	330a      	adds	r3, #10
 80022fe:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
    while 
 8002302:	e6ad      	b.n	8002060 <_Z19MPU6050_calibrationv+0x58>
    }
    if (counter >= MPU6050_cal_Time)
 8002304:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8002308:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800230c:	d304      	bcc.n	8002318 <_Z19MPU6050_calibrationv+0x310>
    {
      MPU6050_GetOriginQuaternion();
 800230e:	f7ff fd2b 	bl	8001d68 <_Z27MPU6050_GetOriginQuaternionv>
      MPU_calibrated = true;
 8002312:	2301      	movs	r3, #1
 8002314:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
    }
    HAL_GPIO_TogglePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin);
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	480b      	ldr	r0, [pc, #44]	; (8002348 <_Z19MPU6050_calibrationv+0x340>)
 800231c:	f004 fe67 	bl	8006fee <HAL_GPIO_TogglePin>
  while (MPU_calibrated == false)
 8002320:	e67c      	b.n	800201c <_Z19MPU6050_calibrationv+0x14>
 8002322:	bf00      	nop
 8002324:	40014800 	.word	0x40014800
 8002328:	20000518 	.word	0x20000518
 800232c:	2000051c 	.word	0x2000051c
 8002330:	20000520 	.word	0x20000520
 8002334:	40a00000 	.word	0x40a00000
 8002338:	c0a00000 	.word	0xc0a00000
 800233c:	200004b0 	.word	0x200004b0
 8002340:	200004c4 	.word	0x200004c4
 8002344:	08012f80 	.word	0x08012f80
 8002348:	40020000 	.word	0x40020000
  }
  MPU6050_GetOriginQuaternion();
 800234c:	f7ff fd0c 	bl	8001d68 <_Z27MPU6050_GetOriginQuaternionv>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);   //enable SBUS pin interrupt
 8002350:	2006      	movs	r0, #6
 8002352:	f004 fc56 	bl	8006c02 <HAL_NVIC_EnableIRQ>

  float *p = QuaternionNormalize(GyroOriginQuaternion);
 8002356:	480f      	ldr	r0, [pc, #60]	; (8002394 <_Z19MPU6050_calibrationv+0x38c>)
 8002358:	f000 f95e 	bl	8002618 <_Z19QuaternionNormalizePf>
 800235c:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
  GyroOriginQuaternion[0] = *p;
 8002360:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <_Z19MPU6050_calibrationv+0x38c>)
 8002368:	6013      	str	r3, [r2, #0]
  GyroOriginQuaternion[1] = *(p + 1);
 800236a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4a08      	ldr	r2, [pc, #32]	; (8002394 <_Z19MPU6050_calibrationv+0x38c>)
 8002372:	6053      	str	r3, [r2, #4]
  GyroOriginQuaternion[2] = *(p + 2);
 8002374:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4a06      	ldr	r2, [pc, #24]	; (8002394 <_Z19MPU6050_calibrationv+0x38c>)
 800237c:	6093      	str	r3, [r2, #8]
  GyroOriginQuaternion[3] = *(p + 3);
 800237e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a03      	ldr	r2, [pc, #12]	; (8002394 <_Z19MPU6050_calibrationv+0x38c>)
 8002386:	60d3      	str	r3, [r2, #12]

}
 8002388:	bf00      	nop
 800238a:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 800238e:	46bd      	mov	sp, r7
 8002390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002394:	20000024 	.word	0x20000024

08002398 <_Z17QuaternionProductPfS_>:
 * @return float product-Quaternion
 * 
 * --Custom Method!
 */
float *QuaternionProduct(float *q1, float *q2)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  static float q3[4];
  q3[0] = (q1[0] * q2[0]) - (q1[1] * q2[1]) - (q1[2] * q2[2]) - (q1[3] * q2[3]);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4619      	mov	r1, r3
 80023ac:	4610      	mov	r0, r2
 80023ae:	f7fe fd25 	bl	8000dfc <__aeabi_fmul>
 80023b2:	4603      	mov	r3, r0
 80023b4:	461c      	mov	r4, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3304      	adds	r3, #4
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	3304      	adds	r3, #4
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4619      	mov	r1, r3
 80023c4:	4610      	mov	r0, r2
 80023c6:	f7fe fd19 	bl	8000dfc <__aeabi_fmul>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4619      	mov	r1, r3
 80023ce:	4620      	mov	r0, r4
 80023d0:	f7fe fc0a 	bl	8000be8 <__aeabi_fsub>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461c      	mov	r4, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3308      	adds	r3, #8
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	3308      	adds	r3, #8
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4619      	mov	r1, r3
 80023e6:	4610      	mov	r0, r2
 80023e8:	f7fe fd08 	bl	8000dfc <__aeabi_fmul>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4619      	mov	r1, r3
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7fe fbf9 	bl	8000be8 <__aeabi_fsub>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461c      	mov	r4, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	330c      	adds	r3, #12
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	330c      	adds	r3, #12
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4619      	mov	r1, r3
 8002408:	4610      	mov	r0, r2
 800240a:	f7fe fcf7 	bl	8000dfc <__aeabi_fmul>
 800240e:	4603      	mov	r3, r0
 8002410:	4619      	mov	r1, r3
 8002412:	4620      	mov	r0, r4
 8002414:	f7fe fbe8 	bl	8000be8 <__aeabi_fsub>
 8002418:	4603      	mov	r3, r0
 800241a:	461a      	mov	r2, r3
 800241c:	4b61      	ldr	r3, [pc, #388]	; (80025a4 <_Z17QuaternionProductPfS_+0x20c>)
 800241e:	601a      	str	r2, [r3, #0]
  q3[1] = (q1[0] * q2[1]) + (q1[1] * q2[0]) + (q1[2] * q2[3]) - (q1[3] * q2[2]);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	3304      	adds	r3, #4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4619      	mov	r1, r3
 800242c:	4610      	mov	r0, r2
 800242e:	f7fe fce5 	bl	8000dfc <__aeabi_fmul>
 8002432:	4603      	mov	r3, r0
 8002434:	461c      	mov	r4, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f7fe fcda 	bl	8000dfc <__aeabi_fmul>
 8002448:	4603      	mov	r3, r0
 800244a:	4619      	mov	r1, r3
 800244c:	4620      	mov	r0, r4
 800244e:	f7fe fbcd 	bl	8000bec <__addsf3>
 8002452:	4603      	mov	r3, r0
 8002454:	461c      	mov	r4, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3308      	adds	r3, #8
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	330c      	adds	r3, #12
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4619      	mov	r1, r3
 8002464:	4610      	mov	r0, r2
 8002466:	f7fe fcc9 	bl	8000dfc <__aeabi_fmul>
 800246a:	4603      	mov	r3, r0
 800246c:	4619      	mov	r1, r3
 800246e:	4620      	mov	r0, r4
 8002470:	f7fe fbbc 	bl	8000bec <__addsf3>
 8002474:	4603      	mov	r3, r0
 8002476:	461c      	mov	r4, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	330c      	adds	r3, #12
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	3308      	adds	r3, #8
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	4610      	mov	r0, r2
 8002488:	f7fe fcb8 	bl	8000dfc <__aeabi_fmul>
 800248c:	4603      	mov	r3, r0
 800248e:	4619      	mov	r1, r3
 8002490:	4620      	mov	r0, r4
 8002492:	f7fe fba9 	bl	8000be8 <__aeabi_fsub>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	4b42      	ldr	r3, [pc, #264]	; (80025a4 <_Z17QuaternionProductPfS_+0x20c>)
 800249c:	605a      	str	r2, [r3, #4]
  q3[2] = (q1[0] * q2[2]) - (q1[1] * q2[3]) + (q1[2] * q2[0]) + (q1[3] * q2[1]);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	3308      	adds	r3, #8
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	4610      	mov	r0, r2
 80024ac:	f7fe fca6 	bl	8000dfc <__aeabi_fmul>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461c      	mov	r4, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3304      	adds	r3, #4
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	330c      	adds	r3, #12
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f7fe fc9a 	bl	8000dfc <__aeabi_fmul>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4619      	mov	r1, r3
 80024cc:	4620      	mov	r0, r4
 80024ce:	f7fe fb8b 	bl	8000be8 <__aeabi_fsub>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461c      	mov	r4, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3308      	adds	r3, #8
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f7fe fc8a 	bl	8000dfc <__aeabi_fmul>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4619      	mov	r1, r3
 80024ec:	4620      	mov	r0, r4
 80024ee:	f7fe fb7d 	bl	8000bec <__addsf3>
 80024f2:	4603      	mov	r3, r0
 80024f4:	461c      	mov	r4, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	330c      	adds	r3, #12
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	3304      	adds	r3, #4
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4619      	mov	r1, r3
 8002504:	4610      	mov	r0, r2
 8002506:	f7fe fc79 	bl	8000dfc <__aeabi_fmul>
 800250a:	4603      	mov	r3, r0
 800250c:	4619      	mov	r1, r3
 800250e:	4620      	mov	r0, r4
 8002510:	f7fe fb6c 	bl	8000bec <__addsf3>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <_Z17QuaternionProductPfS_+0x20c>)
 800251a:	609a      	str	r2, [r3, #8]
  q3[3] = (q1[0] * q2[3]) + (q1[1] * q2[2]) - (q1[2] * q2[1]) + (q1[3] * q2[0]);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	330c      	adds	r3, #12
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4619      	mov	r1, r3
 8002528:	4610      	mov	r0, r2
 800252a:	f7fe fc67 	bl	8000dfc <__aeabi_fmul>
 800252e:	4603      	mov	r3, r0
 8002530:	461c      	mov	r4, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3304      	adds	r3, #4
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	3308      	adds	r3, #8
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4619      	mov	r1, r3
 8002540:	4610      	mov	r0, r2
 8002542:	f7fe fc5b 	bl	8000dfc <__aeabi_fmul>
 8002546:	4603      	mov	r3, r0
 8002548:	4619      	mov	r1, r3
 800254a:	4620      	mov	r0, r4
 800254c:	f7fe fb4e 	bl	8000bec <__addsf3>
 8002550:	4603      	mov	r3, r0
 8002552:	461c      	mov	r4, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3308      	adds	r3, #8
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	3304      	adds	r3, #4
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	4610      	mov	r0, r2
 8002564:	f7fe fc4a 	bl	8000dfc <__aeabi_fmul>
 8002568:	4603      	mov	r3, r0
 800256a:	4619      	mov	r1, r3
 800256c:	4620      	mov	r0, r4
 800256e:	f7fe fb3b 	bl	8000be8 <__aeabi_fsub>
 8002572:	4603      	mov	r3, r0
 8002574:	461c      	mov	r4, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	330c      	adds	r3, #12
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f7fe fc3a 	bl	8000dfc <__aeabi_fmul>
 8002588:	4603      	mov	r3, r0
 800258a:	4619      	mov	r1, r3
 800258c:	4620      	mov	r0, r4
 800258e:	f7fe fb2d 	bl	8000bec <__addsf3>
 8002592:	4603      	mov	r3, r0
 8002594:	461a      	mov	r2, r3
 8002596:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <_Z17QuaternionProductPfS_+0x20c>)
 8002598:	60da      	str	r2, [r3, #12]
  return q3;
 800259a:	4b02      	ldr	r3, [pc, #8]	; (80025a4 <_Z17QuaternionProductPfS_+0x20c>)
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd90      	pop	{r4, r7, pc}
 80025a4:	200004e4 	.word	0x200004e4

080025a8 <_Z17QuaternionInversePf>:
 * @return float inverse Quaternion
 * 
 * --Custom Method!
 */
float *QuaternionInverse(float *q1)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  static float qi[4];
  qi[0] = q1[0];
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <_Z17QuaternionInversePf+0x48>)
 80025b6:	6013      	str	r3, [r2, #0]
  qi[1] = q1[1] * -1;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025c2:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <_Z17QuaternionInversePf+0x48>)
 80025c4:	6053      	str	r3, [r2, #4]
  qi[2] = q1[2] * -1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3308      	adds	r3, #8
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025d0:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <_Z17QuaternionInversePf+0x48>)
 80025d2:	6093      	str	r3, [r2, #8]
  qi[3] = q1[3] * -1;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	330c      	adds	r3, #12
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025de:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <_Z17QuaternionInversePf+0x48>)
 80025e0:	60d3      	str	r3, [r2, #12]
  return qi;
 80025e2:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <_Z17QuaternionInversePf+0x48>)
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	200004f4 	.word	0x200004f4

080025f4 <_Z15QuaternionSLERPPfS_>:
 * @return float interpolation quaternion
 * 
 * --Custom Method!
 */
float * QuaternionSLERP(float *q1, float *q2)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  return QuaternionProduct(&q2[0], QuaternionInverse(&q1[0]));
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ffd2 	bl	80025a8 <_Z17QuaternionInversePf>
 8002604:	4603      	mov	r3, r0
 8002606:	4619      	mov	r1, r3
 8002608:	6838      	ldr	r0, [r7, #0]
 800260a:	f7ff fec5 	bl	8002398 <_Z17QuaternionProductPfS_>
 800260e:	4603      	mov	r3, r0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <_Z19QuaternionNormalizePf>:
 * @return float* pointer to normalized quaternion
 * 
 * --Custom Method!
 */
float *QuaternionNormalize(float *q1)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  float vectorlength = sqrt((q1[0] * q1[0]) + (q1[1] * q1[1]) + (q1[2] * q1[2]) + (q1[3] * q1[3]));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	4610      	mov	r0, r2
 800262c:	f7fe fbe6 	bl	8000dfc <__aeabi_fmul>
 8002630:	4603      	mov	r3, r0
 8002632:	461c      	mov	r4, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3304      	adds	r3, #4
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4619      	mov	r1, r3
 8002642:	4610      	mov	r0, r2
 8002644:	f7fe fbda 	bl	8000dfc <__aeabi_fmul>
 8002648:	4603      	mov	r3, r0
 800264a:	4619      	mov	r1, r3
 800264c:	4620      	mov	r0, r4
 800264e:	f7fe facd 	bl	8000bec <__addsf3>
 8002652:	4603      	mov	r3, r0
 8002654:	461c      	mov	r4, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3308      	adds	r3, #8
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3308      	adds	r3, #8
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4619      	mov	r1, r3
 8002664:	4610      	mov	r0, r2
 8002666:	f7fe fbc9 	bl	8000dfc <__aeabi_fmul>
 800266a:	4603      	mov	r3, r0
 800266c:	4619      	mov	r1, r3
 800266e:	4620      	mov	r0, r4
 8002670:	f7fe fabc 	bl	8000bec <__addsf3>
 8002674:	4603      	mov	r3, r0
 8002676:	461c      	mov	r4, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	330c      	adds	r3, #12
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	330c      	adds	r3, #12
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f7fe fbb8 	bl	8000dfc <__aeabi_fmul>
 800268c:	4603      	mov	r3, r0
 800268e:	4619      	mov	r1, r3
 8002690:	4620      	mov	r0, r4
 8002692:	f7fe faab 	bl	8000bec <__addsf3>
 8002696:	4603      	mov	r3, r0
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fa91 	bl	8001bc0 <_ZSt4sqrtf>
 800269e:	60f8      	str	r0, [r7, #12]
  static float qn[4];
  qn[0] = q1[0] / vectorlength;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68f9      	ldr	r1, [r7, #12]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fc5c 	bl	8000f64 <__aeabi_fdiv>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	4b13      	ldr	r3, [pc, #76]	; (8002700 <_Z19QuaternionNormalizePf+0xe8>)
 80026b2:	601a      	str	r2, [r3, #0]
  qn[1] = q1[1] / vectorlength;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3304      	adds	r3, #4
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68f9      	ldr	r1, [r7, #12]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fc51 	bl	8000f64 <__aeabi_fdiv>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <_Z19QuaternionNormalizePf+0xe8>)
 80026c8:	605a      	str	r2, [r3, #4]
  qn[2] = q1[2] / vectorlength;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3308      	adds	r3, #8
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68f9      	ldr	r1, [r7, #12]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fc46 	bl	8000f64 <__aeabi_fdiv>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <_Z19QuaternionNormalizePf+0xe8>)
 80026de:	609a      	str	r2, [r3, #8]
  qn[3] = q1[3] / vectorlength;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	330c      	adds	r3, #12
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68f9      	ldr	r1, [r7, #12]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fc3b 	bl	8000f64 <__aeabi_fdiv>
 80026ee:	4603      	mov	r3, r0
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b03      	ldr	r3, [pc, #12]	; (8002700 <_Z19QuaternionNormalizePf+0xe8>)
 80026f4:	60da      	str	r2, [r3, #12]
  return qn;
 80026f6:	4b02      	ldr	r3, [pc, #8]	; (8002700 <_Z19QuaternionNormalizePf+0xe8>)
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd90      	pop	{r4, r7, pc}
 8002700:	20000504 	.word	0x20000504

08002704 <_ZN7MPU6050C1Eh>:
 * @param address I2C address
 * @see MPU6050_DEFAULT_ADDRESS
 * @see MPU6050_ADDRESS_AD0_LOW
 * @see MPU6050_ADDRESS_AD0_HIGH
 */
MPU6050::MPU6050(uint8_t address) {
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]
    devAddr = address;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	78fa      	ldrb	r2, [r7, #3]
 8002714:	719a      	strb	r2, [r3, #6]
}
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 800272a:	2101      	movs	r1, #1
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f962 	bl	80029f6 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8002732:	2100      	movs	r1, #0
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f854 	bl	80027e2 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 800273a:	2100      	movs	r1, #0
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f863 	bl	8002808 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 8002742:	2100      	movs	r1, #0
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f945 	bl	80029d4 <_ZN7MPU605015setSleepEnabledEb>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <_ZN7MPU605014testConnectionEv>:

/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool MPU6050::testConnection() {
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
    return getDeviceID() == 0x34;
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f991 	bl	8002a82 <_ZN7MPU605011getDeviceIDEv>
 8002760:	4603      	mov	r3, r0
 8002762:	2b34      	cmp	r3, #52	; 0x34
 8002764:	bf0c      	ite	eq
 8002766:	2301      	moveq	r3, #1
 8002768:	2300      	movne	r3, #0
 800276a:	b2db      	uxtb	r3, r3
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <_ZN7MPU60507setRateEh>:
/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050::setRate(uint8_t rate) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	799b      	ldrb	r3, [r3, #6]
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	2119      	movs	r1, #25
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff f92f 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <_ZN7MPU605020setExternalFrameSyncEh>:
/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG
 * @param sync New FSYNC configuration value
 */
void MPU6050::setExternalFrameSync(uint8_t sync) {
 8002796:	b580      	push	{r7, lr}
 8002798:	b084      	sub	sp, #16
 800279a:	af02      	add	r7, sp, #8
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7998      	ldrb	r0, [r3, #6]
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2303      	movs	r3, #3
 80027ac:	2205      	movs	r2, #5
 80027ae:	211a      	movs	r1, #26
 80027b0:	f7ff f890 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_ZN7MPU605011setDLPFModeEh>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7998      	ldrb	r0, [r3, #6]
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	2303      	movs	r3, #3
 80027d2:	2202      	movs	r2, #2
 80027d4:	211a      	movs	r1, #26
 80027d6:	f7ff f87d 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af02      	add	r7, sp, #8
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	460b      	mov	r3, r1
 80027ec:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	7998      	ldrb	r0, [r3, #6]
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2302      	movs	r3, #2
 80027f8:	2204      	movs	r2, #4
 80027fa:	211b      	movs	r1, #27
 80027fc:	f7ff f86a 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af02      	add	r7, sp, #8
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7998      	ldrb	r0, [r3, #6]
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2302      	movs	r3, #2
 800281e:	2204      	movs	r2, #4
 8002820:	211c      	movs	r1, #28
 8002822:	f7ff f857 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <_ZN7MPU605027setMotionDetectionThresholdEh>:
/** Set motion detection event acceleration threshold.
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050::setMotionDetectionThreshold(uint8_t threshold) {
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_THR, threshold);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	799b      	ldrb	r3, [r3, #6]
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	211f      	movs	r1, #31
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff f8d2 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_ZN7MPU605026setMotionDetectionDurationEh>:
/** Set motion detection event duration threshold.
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050::setMotionDetectionDuration(uint8_t duration) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_DUR, duration);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	799b      	ldrb	r3, [r3, #6]
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	2120      	movs	r1, #32
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff f8c1 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
/** Set zero motion detection event acceleration threshold.
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	460b      	mov	r3, r1
 800287c:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	799b      	ldrb	r3, [r3, #6]
 8002882:	78fa      	ldrb	r2, [r7, #3]
 8002884:	2121      	movs	r1, #33	; 0x21
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f8b0 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
/** Set zero motion detection event duration threshold.
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	799b      	ldrb	r3, [r3, #6]
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	2122      	movs	r1, #34	; 0x22
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff f89f 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <_ZN7MPU605015setSlaveAddressEhh>:
 * @param num Slave number (0-3)
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	70fb      	strb	r3, [r7, #3]
 80028c2:	4613      	mov	r3, r2
 80028c4:	70bb      	strb	r3, [r7, #2]
    if (num > 3) return;
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d80d      	bhi.n	80028e8 <_ZN7MPU605015setSlaveAddressEhh+0x32>
    I2Cdev::writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	7998      	ldrb	r0, [r3, #6]
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	461a      	mov	r2, r3
 80028d4:	0052      	lsls	r2, r2, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	3325      	adds	r3, #37	; 0x25
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	78ba      	ldrb	r2, [r7, #2]
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7ff f883 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
 80028e6:	e000      	b.n	80028ea <_ZN7MPU605015setSlaveAddressEhh+0x34>
    if (num > 3) return;
 80028e8:	bf00      	nop
}
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <_ZN7MPU605013setIntEnabledEh>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050::setIntEnabled(uint8_t enabled) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	799b      	ldrb	r3, [r3, #6]
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	2138      	movs	r1, #56	; 0x38
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff f871 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
    I2Cdev::readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	7998      	ldrb	r0, [r3, #6]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3307      	adds	r3, #7
 8002922:	461a      	mov	r2, r3
 8002924:	213a      	movs	r1, #58	; 0x3a
 8002926:	f7fe fea9 	bl	800167c <_ZN6I2Cdev8readByteEhhPh>
    return buffer[0];
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	79db      	ldrb	r3, [r3, #7]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <_ZN7MPU605014setFIFOEnabledEb>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050::setFIFOEnabled(bool enabled) {
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7998      	ldrb	r0, [r3, #6]
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	2206      	movs	r2, #6
 800294a:	216a      	movs	r1, #106	; 0x6a
 800294c:	f7fe ff46 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <_ZN7MPU605023setI2CMasterModeEnabledEb>:
 * @param enabled New I2C Master Mode enabled status
 * @see getI2CMasterModeEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
 */
void MPU6050::setI2CMasterModeEnabled(bool enabled) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7998      	ldrb	r0, [r3, #6]
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	2205      	movs	r2, #5
 800296c:	216a      	movs	r1, #106	; 0x6a
 800296e:	f7fe ff35 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_ZN7MPU60509resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7998      	ldrb	r0, [r3, #6]
 8002986:	2301      	movs	r3, #1
 8002988:	2202      	movs	r2, #2
 800298a:	216a      	movs	r1, #106	; 0x6a
 800298c:	f7fe ff26 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <_ZN7MPU605014resetI2CMasterEv>:
 * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050::resetI2CMaster() {
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	7998      	ldrb	r0, [r3, #6]
 80029a4:	2301      	movs	r3, #1
 80029a6:	2201      	movs	r2, #1
 80029a8:	216a      	movs	r1, #106	; 0x6a
 80029aa:	f7fe ff17 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <_ZN7MPU60505resetEv>:
/** Trigger a full device reset.
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050::reset() {
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	7998      	ldrb	r0, [r3, #6]
 80029c2:	2301      	movs	r3, #1
 80029c4:	2207      	movs	r2, #7
 80029c6:	216b      	movs	r1, #107	; 0x6b
 80029c8:	f7fe ff08 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7998      	ldrb	r0, [r3, #6]
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	2206      	movs	r2, #6
 80029e8:	216b      	movs	r1, #107	; 0x6b
 80029ea:	f7fe fef7 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af02      	add	r7, sp, #8
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	460b      	mov	r3, r1
 8002a00:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7998      	ldrb	r0, [r3, #6]
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	216b      	movs	r1, #107	; 0x6b
 8002a10:	f7fe ff60 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
    I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7998      	ldrb	r0, [r3, #6]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3307      	adds	r3, #7
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	2172      	movs	r1, #114	; 0x72
 8002a30:	f7fe fe5e 	bl	80016f0 <_ZN6I2Cdev9readBytesEhhhPh>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	79db      	ldrb	r3, [r3, #7]
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	b21a      	sxth	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	7a1b      	ldrb	r3, [r3, #8]
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	4313      	orrs	r3, r2
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	b29b      	uxth	r3, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    I2Cdev::readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	71fb      	strb	r3, [r7, #7]
    if(length > 0){
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d007      	beq.n	8002a74 <_ZN7MPU605012getFIFOBytesEPhh+0x24>
        I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	7998      	ldrb	r0, [r3, #6]
 8002a68:	79fa      	ldrb	r2, [r7, #7]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2174      	movs	r1, #116	; 0x74
 8002a6e:	f7fe fe3f 	bl	80016f0 <_ZN6I2Cdev9readBytesEhhhPh>
    } else {
    	*data = 0;
    }
}
 8002a72:	e002      	b.n	8002a7a <_ZN7MPU605012getFIFOBytesEPhh+0x2a>
    	*data = 0;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <_ZN7MPU605011getDeviceIDEv>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af02      	add	r7, sp, #8
 8002a88:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	7998      	ldrb	r0, [r3, #6]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3307      	adds	r3, #7
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2306      	movs	r3, #6
 8002a96:	2206      	movs	r2, #6
 8002a98:	2175      	movs	r1, #117	; 0x75
 8002a9a:	f7fe fd91 	bl	80015c0 <_ZN6I2Cdev8readBitsEhhhhPh>
    return buffer[0];
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	79db      	ldrb	r3, [r3, #7]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <_ZN7MPU605015getOTPBankValidEv>:

// ======== UNDOCUMENTED/DMP REGISTERS/METHODS ========

// XG_OFFS_TC register

uint8_t MPU6050::getOTPBankValid() {
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
    I2Cdev::readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	7998      	ldrb	r0, [r3, #6]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3307      	adds	r3, #7
 8002aba:	2200      	movs	r2, #0
 8002abc:	2100      	movs	r1, #0
 8002abe:	f7fe fd3b 	bl	8001538 <_ZN6I2Cdev7readBitEhhhPh>
    return buffer[0];
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	79db      	ldrb	r3, [r3, #7]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <_ZN7MPU605015setOTPBankValidEb>:
void MPU6050::setOTPBankValid(bool enabled) {
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7998      	ldrb	r0, [r3, #6]
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	f7fe fe7a 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_ZN7MPU605016getXGyroOffsetTCEv>:
int8_t MPU6050::getXGyroOffsetTC() {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7998      	ldrb	r0, [r3, #6]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3307      	adds	r3, #7
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	2306      	movs	r3, #6
 8002b04:	2206      	movs	r2, #6
 8002b06:	2100      	movs	r1, #0
 8002b08:	f7fe fd5a 	bl	80015c0 <_ZN6I2Cdev8readBitsEhhhhPh>
    return buffer[0];
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	79db      	ldrb	r3, [r3, #7]
 8002b10:	b25b      	sxtb	r3, r3
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <_ZN7MPU605016setXGyroOffsetTCEa>:
void MPU6050::setXGyroOffsetTC(int8_t offset) {
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af02      	add	r7, sp, #8
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7998      	ldrb	r0, [r3, #6]
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	2306      	movs	r3, #6
 8002b30:	2206      	movs	r2, #6
 8002b32:	2100      	movs	r1, #0
 8002b34:	f7fe fece 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <_ZN7MPU605016getYGyroOffsetTCEv>:

// YG_OFFS_TC register

int8_t MPU6050::getYGyroOffsetTC() {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7998      	ldrb	r0, [r3, #6]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3307      	adds	r3, #7
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	2306      	movs	r3, #6
 8002b54:	2206      	movs	r2, #6
 8002b56:	2101      	movs	r1, #1
 8002b58:	f7fe fd32 	bl	80015c0 <_ZN6I2Cdev8readBitsEhhhhPh>
    return buffer[0];
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	79db      	ldrb	r3, [r3, #7]
 8002b60:	b25b      	sxtb	r3, r3
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <_ZN7MPU605016setYGyroOffsetTCEa>:
void MPU6050::setYGyroOffsetTC(int8_t offset) {
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af02      	add	r7, sp, #8
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7998      	ldrb	r0, [r3, #6]
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	2306      	movs	r3, #6
 8002b80:	2206      	movs	r2, #6
 8002b82:	2101      	movs	r1, #1
 8002b84:	f7fe fea6 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <_ZN7MPU605016getZGyroOffsetTCEv>:

// ZG_OFFS_TC register

int8_t MPU6050::getZGyroOffsetTC() {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7998      	ldrb	r0, [r3, #6]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3307      	adds	r3, #7
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2306      	movs	r3, #6
 8002ba4:	2206      	movs	r2, #6
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	f7fe fd0a 	bl	80015c0 <_ZN6I2Cdev8readBitsEhhhhPh>
    return buffer[0];
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	79db      	ldrb	r3, [r3, #7]
 8002bb0:	b25b      	sxtb	r3, r3
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <_ZN7MPU605016setZGyroOffsetTCEa>:
void MPU6050::setZGyroOffsetTC(int8_t offset) {
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af02      	add	r7, sp, #8
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	7998      	ldrb	r0, [r3, #6]
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2306      	movs	r3, #6
 8002bd0:	2206      	movs	r2, #6
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	f7fe fe7e 	bl	80018d4 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_ZN7MPU605015setXAccelOffsetEs>:

int16_t MPU6050::getXAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	799b      	ldrb	r3, [r3, #6]
 8002bf0:	887a      	ldrh	r2, [r7, #2]
 8002bf2:	2106      	movs	r1, #6
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe ff31 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <_ZN7MPU605015setYAccelOffsetEs>:

int16_t MPU6050::getYAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	799b      	ldrb	r3, [r3, #6]
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	2108      	movs	r1, #8
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe ff20 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <_ZN7MPU605015setZAccelOffsetEs>:

int16_t MPU6050::getZAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	799b      	ldrb	r3, [r3, #6]
 8002c34:	887a      	ldrh	r2, [r7, #2]
 8002c36:	210a      	movs	r1, #10
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe ff0f 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <_ZN7MPU605014setXGyroOffsetEs>:

int16_t MPU6050::getXGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	799b      	ldrb	r3, [r3, #6]
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	2113      	movs	r1, #19
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fefe 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <_ZN7MPU605014setYGyroOffsetEs>:

int16_t MPU6050::getYGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	799b      	ldrb	r3, [r3, #6]
 8002c78:	887a      	ldrh	r2, [r7, #2]
 8002c7a:	2115      	movs	r1, #21
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe feed 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <_ZN7MPU605014setZGyroOffsetEs>:

int16_t MPU6050::getZGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	799b      	ldrb	r3, [r3, #6]
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	2117      	movs	r1, #23
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fedc 	bl	8001a5c <_ZN6I2Cdev9writeWordEhht>
}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    I2Cdev::readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7998      	ldrb	r0, [r3, #6]
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	2207      	movs	r2, #7
 8002cc0:	216a      	movs	r1, #106	; 0x6a
 8002cc2:	f7fe fd8b 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <_ZN7MPU60508resetDMPEv>:
void MPU6050::resetDMP() {
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	7998      	ldrb	r0, [r3, #6]
 8002cda:	2301      	movs	r3, #1
 8002cdc:	2203      	movs	r2, #3
 8002cde:	216a      	movs	r1, #106	; 0x6a
 8002ce0:	f7fe fd7c 	bl	80017dc <_ZN6I2Cdev8writeBitEhhhh>
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_ZN7MPU605013setMemoryBankEhbb>:

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	70fb      	strb	r3, [r7, #3]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	70bb      	strb	r3, [r7, #2]
 8002d02:	4613      	mov	r3, r2
 8002d04:	707b      	strb	r3, [r7, #1]
    bank &= 0x1F;
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	70fb      	strb	r3, [r7, #3]
    if (userBank) bank |= 0x20;
 8002d0e:	787b      	ldrb	r3, [r7, #1]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <_ZN7MPU605013setMemoryBankEhbb+0x30>
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	f043 0320 	orr.w	r3, r3, #32
 8002d1a:	70fb      	strb	r3, [r7, #3]
    if (prefetchEnabled) bank |= 0x40;
 8002d1c:	78bb      	ldrb	r3, [r7, #2]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <_ZN7MPU605013setMemoryBankEhbb+0x3e>
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d28:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	799b      	ldrb	r3, [r3, #6]
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	216d      	movs	r1, #109	; 0x6d
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe fe5a 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_ZN7MPU605021setMemoryStartAddressEh>:

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	799b      	ldrb	r3, [r3, #6]
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	216e      	movs	r1, #110	; 0x6e
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe fe49 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <_ZN7MPU605014readMemoryByteEv>:

// MEM_R_W register

uint8_t MPU6050::readMemoryByte() {
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
    I2Cdev::readByte(devAddr, MPU6050_RA_MEM_R_W, buffer);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	7998      	ldrb	r0, [r3, #6]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3307      	adds	r3, #7
 8002d72:	461a      	mov	r2, r3
 8002d74:	216f      	movs	r1, #111	; 0x6f
 8002d76:	f7fe fc81 	bl	800167c <_ZN6I2Cdev8readByteEhhPh>
    return buffer[0];
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	79db      	ldrb	r3, [r3, #7]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <_ZN7MPU605015readMemoryBlockEPhthh>:
void MPU6050::writeMemoryByte(uint8_t data) {
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_R_W, data);
}
void MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	4611      	mov	r1, r2
 8002d92:	461a      	mov	r2, r3
 8002d94:	460b      	mov	r3, r1
 8002d96:	80fb      	strh	r3, [r7, #6]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002d9c:	7979      	ldrb	r1, [r7, #5]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2200      	movs	r2, #0
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f7ff ffa2 	bl	8002cec <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002da8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dac:	4619      	mov	r1, r3
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f7ff ffc6 	bl	8002d40 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
 8002db4:	2300      	movs	r3, #0
 8002db6:	82bb      	strh	r3, [r7, #20]
 8002db8:	8aba      	ldrh	r2, [r7, #20]
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d244      	bcs.n	8002e4a <_ZN7MPU605015readMemoryBlockEPhthh+0xc4>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002dc0:	2310      	movs	r3, #16
 8002dc2:	75fb      	strb	r3, [r7, #23]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002dc4:	8aba      	ldrh	r2, [r7, #20]
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
 8002dc8:	441a      	add	r2, r3
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	dd05      	ble.n	8002ddc <_ZN7MPU605015readMemoryBlockEPhthh+0x56>
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	8abb      	ldrh	r3, [r7, #20]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	75fb      	strb	r3, [r7, #23]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002ddc:	7dfa      	ldrb	r2, [r7, #23]
 8002dde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002de2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002de6:	429a      	cmp	r2, r3
 8002de8:	dd03      	ble.n	8002df2 <_ZN7MPU605015readMemoryBlockEPhthh+0x6c>
 8002dea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dee:	425b      	negs	r3, r3
 8002df0:	75fb      	strb	r3, [r7, #23]

        // read the chunk of data as specified
        I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	7998      	ldrb	r0, [r3, #6]
 8002df6:	8abb      	ldrh	r3, [r7, #20]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	7dfa      	ldrb	r2, [r7, #23]
 8002dfe:	216f      	movs	r1, #111	; 0x6f
 8002e00:	f7fe fc76 	bl	80016f0 <_ZN6I2Cdev9readBytesEhhhPh>
        
        // increase byte index by [chunkSize]
        i += chunkSize;
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	8abb      	ldrh	r3, [r7, #20]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	82bb      	strh	r3, [r7, #20]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002e0e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002e12:	7dfb      	ldrb	r3, [r7, #23]
 8002e14:	4413      	add	r3, r2
 8002e16:	f887 3020 	strb.w	r3, [r7, #32]

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002e1a:	8aba      	ldrh	r2, [r7, #20]
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d2ca      	bcs.n	8002db8 <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
            if (address == 0) bank++;
 8002e22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <_ZN7MPU605015readMemoryBlockEPhthh+0xaa>
 8002e2a:	797b      	ldrb	r3, [r7, #5]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002e30:	7979      	ldrb	r1, [r7, #5]
 8002e32:	2300      	movs	r3, #0
 8002e34:	2200      	movs	r2, #0
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff ff58 	bl	8002cec <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e40:	4619      	mov	r1, r3
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff ff7c 	bl	8002d40 <_ZN7MPU605021setMemoryStartAddressEh>
    for (uint16_t i = 0; i < dataSize;) {
 8002e48:	e7b6      	b.n	8002db8 <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
        }
    }
}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>:
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b088      	sub	sp, #32
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	461a      	mov	r2, r3
 8002e60:	460b      	mov	r3, r1
 8002e62:	80fb      	strh	r3, [r7, #6]
 8002e64:	4613      	mov	r3, r2
 8002e66:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002e68:	7979      	ldrb	r1, [r7, #5]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f7ff ff3c 	bl	8002cec <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002e74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e78:	4619      	mov	r1, r3
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7ff ff60 	bl	8002d40 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61bb      	str	r3, [r7, #24]
    uint8_t *progBuffer=0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002e88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d004      	beq.n	8002e9a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x48>
 8002e90:	2010      	movs	r0, #16
 8002e92:	f00d f9a7 	bl	80101e4 <malloc>
 8002e96:	4603      	mov	r3, r0
 8002e98:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002e9a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5a>
 8002ea2:	2010      	movs	r0, #16
 8002ea4:	f00d f99e 	bl	80101e4 <malloc>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	617b      	str	r3, [r7, #20]
    for (i = 0; i < dataSize;) {
 8002eac:	2300      	movs	r3, #0
 8002eae:	827b      	strh	r3, [r7, #18]
 8002eb0:	8a7a      	ldrh	r2, [r7, #18]
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	f080 808e 	bcs.w	8002fd6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x184>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002eba:	2310      	movs	r3, #16
 8002ebc:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002ebe:	8a7a      	ldrh	r2, [r7, #18]
 8002ec0:	7ffb      	ldrb	r3, [r7, #31]
 8002ec2:	441a      	add	r2, r3
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	dd05      	ble.n	8002ed6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x84>
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	8a7b      	ldrh	r3, [r7, #18]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002ed6:	7ffa      	ldrb	r2, [r7, #31]
 8002ed8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002edc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	dd03      	ble.n	8002eec <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x9a>
 8002ee4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ee8:	425b      	negs	r3, r3
 8002eea:	77fb      	strb	r3, [r7, #31]
        
        if (useProgMem) {
 8002eec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d013      	beq.n	8002f1c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xca>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	747b      	strb	r3, [r7, #17]
 8002ef8:	7c7a      	ldrb	r2, [r7, #17]
 8002efa:	7ffb      	ldrb	r3, [r7, #31]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d211      	bcs.n	8002f24 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xd2>
 8002f00:	8a7a      	ldrh	r2, [r7, #18]
 8002f02:	7c7b      	ldrb	r3, [r7, #17]
 8002f04:	4413      	add	r3, r2
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	441a      	add	r2, r3
 8002f0a:	7c7b      	ldrb	r3, [r7, #17]
 8002f0c:	6979      	ldr	r1, [r7, #20]
 8002f0e:	440b      	add	r3, r1
 8002f10:	7812      	ldrb	r2, [r2, #0]
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	7c7b      	ldrb	r3, [r7, #17]
 8002f16:	3301      	adds	r3, #1
 8002f18:	747b      	strb	r3, [r7, #17]
 8002f1a:	e7ed      	b.n	8002ef8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xa6>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 8002f1c:	8a7b      	ldrh	r3, [r7, #18]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	4413      	add	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]
        }

        I2Cdev::writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	7998      	ldrb	r0, [r3, #6]
 8002f28:	7ffa      	ldrb	r2, [r7, #31]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	216f      	movs	r1, #111	; 0x6f
 8002f2e:	f7fe fdd1 	bl	8001ad4 <_ZN6I2Cdev10writeBytesEhhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 8002f32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d02a      	beq.n	8002f90 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d027      	beq.n	8002f90 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
            setMemoryBank(bank);
 8002f40:	7979      	ldrb	r1, [r7, #5]
 8002f42:	2300      	movs	r3, #0
 8002f44:	2200      	movs	r2, #0
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f7ff fed0 	bl	8002cec <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002f4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f50:	4619      	mov	r1, r3
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff fef4 	bl	8002d40 <_ZN7MPU605021setMemoryStartAddressEh>
            I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	7998      	ldrb	r0, [r3, #6]
 8002f5c:	7ffa      	ldrb	r2, [r7, #31]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	216f      	movs	r1, #111	; 0x6f
 8002f62:	f7fe fbc5 	bl	80016f0 <_ZN6I2Cdev9readBytesEhhhPh>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	6978      	ldr	r0, [r7, #20]
 8002f6e:	f00d f949 	bl	8010204 <memcmp>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13e>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
 8002f78:	69b8      	ldr	r0, [r7, #24]
 8002f7a:	f00d f93b 	bl	80101f4 <free>
                if (useProgMem) free(progBuffer);
 8002f7e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x13a>
 8002f86:	6978      	ldr	r0, [r7, #20]
 8002f88:	f00d f934 	bl	80101f4 <free>
                return false; // uh oh.
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e031      	b.n	8002ff4 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a2>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 8002f90:	7ffb      	ldrb	r3, [r7, #31]
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	8a7b      	ldrh	r3, [r7, #18]
 8002f96:	4413      	add	r3, r2
 8002f98:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002f9a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002f9e:	7ffb      	ldrb	r3, [r7, #31]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002fa6:	8a7a      	ldrh	r2, [r7, #18]
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d280      	bcs.n	8002eb0 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
            if (address == 0) bank++;
 8002fae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x16a>
 8002fb6:	797b      	ldrb	r3, [r7, #5]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002fbc:	7979      	ldrb	r1, [r7, #5]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff fe92 	bl	8002cec <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002fc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002fcc:	4619      	mov	r1, r3
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7ff feb6 	bl	8002d40 <_ZN7MPU605021setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 8002fd4:	e76c      	b.n	8002eb0 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
        }
    }
    if (verify) free(verifyBuffer);
 8002fd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x192>
 8002fde:	69b8      	ldr	r0, [r7, #24]
 8002fe0:	f00d f908 	bl	80101f4 <free>
    if (useProgMem) free(progBuffer);
 8002fe4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a0>
 8002fec:	6978      	ldr	r0, [r7, #20]
 8002fee:	f00d f901 	bl	80101f4 <free>
    return true;
 8002ff2:	2301      	movs	r3, #1
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3720      	adds	r7, #32
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af04      	add	r7, sp, #16
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	4611      	mov	r1, r2
 8003008:	461a      	mov	r2, r3
 800300a:	460b      	mov	r3, r1
 800300c:	80fb      	strh	r3, [r7, #6]
 800300e:	4613      	mov	r3, r2
 8003010:	717b      	strb	r3, [r7, #5]
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 8003012:	7979      	ldrb	r1, [r7, #5]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	2301      	movs	r3, #1
 8003018:	9302      	str	r3, [sp, #8]
 800301a:	7f3b      	ldrb	r3, [r7, #28]
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	7e3b      	ldrb	r3, [r7, #24]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	460b      	mov	r3, r1
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f7ff ff13 	bl	8002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 800302c:	4603      	mov	r3, r0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>:
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
 8003036:	b580      	push	{r7, lr}
 8003038:	b08c      	sub	sp, #48	; 0x30
 800303a:	af04      	add	r7, sp, #16
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	4611      	mov	r1, r2
 8003042:	461a      	mov	r2, r3
 8003044:	460b      	mov	r3, r1
 8003046:	80fb      	strh	r3, [r7, #6]
 8003048:	4613      	mov	r3, r2
 800304a:	717b      	strb	r3, [r7, #5]
    uint8_t *progBuffer = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
	uint8_t success, special;
    uint16_t i, j;
    if (useProgMem) {
 8003050:	797b      	ldrb	r3, [r7, #5]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2a>
        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
 8003056:	2008      	movs	r0, #8
 8003058:	f00d f8c4 	bl	80101e4 <malloc>
 800305c:	4603      	mov	r3, r0
 800305e:	61fb      	str	r3, [r7, #28]
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
 8003060:	2300      	movs	r3, #0
 8003062:	833b      	strh	r3, [r7, #24]
 8003064:	8b3a      	ldrh	r2, [r7, #24]
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	429a      	cmp	r2, r3
 800306a:	f080 80a1 	bcs.w	80031b0 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x17a>
        if (useProgMem) {
 800306e:	797b      	ldrb	r3, [r7, #5]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d018      	beq.n	80030a6 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x70>
            bank = pgm_read_byte(data + i++);
 8003074:	8b3b      	ldrh	r3, [r7, #24]
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	833a      	strh	r2, [r7, #24]
 800307a:	461a      	mov	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4413      	add	r3, r2
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	757b      	strb	r3, [r7, #21]
            offset = pgm_read_byte(data + i++);
 8003084:	8b3b      	ldrh	r3, [r7, #24]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	833a      	strh	r2, [r7, #24]
 800308a:	461a      	mov	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4413      	add	r3, r2
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	753b      	strb	r3, [r7, #20]
            length = pgm_read_byte(data + i++);
 8003094:	8b3b      	ldrh	r3, [r7, #24]
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	833a      	strh	r2, [r7, #24]
 800309a:	461a      	mov	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4413      	add	r3, r2
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	74fb      	strb	r3, [r7, #19]
 80030a4:	e017      	b.n	80030d6 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xa0>
        } else {
            bank = data[i++];
 80030a6:	8b3b      	ldrh	r3, [r7, #24]
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	833a      	strh	r2, [r7, #24]
 80030ac:	461a      	mov	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4413      	add	r3, r2
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	757b      	strb	r3, [r7, #21]
            offset = data[i++];
 80030b6:	8b3b      	ldrh	r3, [r7, #24]
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	833a      	strh	r2, [r7, #24]
 80030bc:	461a      	mov	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	4413      	add	r3, r2
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	753b      	strb	r3, [r7, #20]
            length = data[i++];
 80030c6:	8b3b      	ldrh	r3, [r7, #24]
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	833a      	strh	r2, [r7, #24]
 80030cc:	461a      	mov	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	4413      	add	r3, r2
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	74fb      	strb	r3, [r7, #19]
        }

        // write data or perform special action
        if (length > 0) {
 80030d6:	7cfb      	ldrb	r3, [r7, #19]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d03a      	beq.n	8003152 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x11c>
            Serial.print(bank);
            Serial.print(", offset ");
            Serial.print(offset);
            Serial.print(", length=");
            Serial.println(length);*/
            if (useProgMem) {
 80030dc:	797b      	ldrb	r3, [r7, #5]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01d      	beq.n	800311e <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xe8>
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
 80030e2:	7cfb      	ldrb	r3, [r7, #19]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d905      	bls.n	80030f4 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xbe>
 80030e8:	7cfb      	ldrb	r3, [r7, #19]
 80030ea:	4619      	mov	r1, r3
 80030ec:	69f8      	ldr	r0, [r7, #28]
 80030ee:	f00d fdb3 	bl	8010c58 <realloc>
 80030f2:	61f8      	str	r0, [r7, #28]
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 80030f4:	2300      	movs	r3, #0
 80030f6:	82fb      	strh	r3, [r7, #22]
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	8afa      	ldrh	r2, [r7, #22]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d211      	bcs.n	8003126 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xf0>
 8003102:	8b3a      	ldrh	r2, [r7, #24]
 8003104:	8afb      	ldrh	r3, [r7, #22]
 8003106:	4413      	add	r3, r2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	441a      	add	r2, r3
 800310c:	8afb      	ldrh	r3, [r7, #22]
 800310e:	69f9      	ldr	r1, [r7, #28]
 8003110:	440b      	add	r3, r1
 8003112:	7812      	ldrb	r2, [r2, #0]
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	8afb      	ldrh	r3, [r7, #22]
 8003118:	3301      	adds	r3, #1
 800311a:	82fb      	strh	r3, [r7, #22]
 800311c:	e7ec      	b.n	80030f8 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0xc2>
            } else {
                progBuffer = (uint8_t *)data + i;
 800311e:	8b3b      	ldrh	r3, [r7, #24]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	4413      	add	r3, r2
 8003124:	61fb      	str	r3, [r7, #28]
            }
            success = writeMemoryBlock(progBuffer, length, bank, offset, true);
 8003126:	7cfb      	ldrb	r3, [r7, #19]
 8003128:	b29a      	uxth	r2, r3
 800312a:	7d79      	ldrb	r1, [r7, #21]
 800312c:	2300      	movs	r3, #0
 800312e:	9302      	str	r3, [sp, #8]
 8003130:	2301      	movs	r3, #1
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	7d3b      	ldrb	r3, [r7, #20]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	460b      	mov	r3, r1
 800313a:	69f9      	ldr	r1, [r7, #28]
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7ff fe88 	bl	8002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 8003142:	4603      	mov	r3, r0
 8003144:	76fb      	strb	r3, [r7, #27]
            i += length;
 8003146:	7cfb      	ldrb	r3, [r7, #19]
 8003148:	b29a      	uxth	r2, r3
 800314a:	8b3b      	ldrh	r3, [r7, #24]
 800314c:	4413      	add	r3, r2
 800314e:	833b      	strh	r3, [r7, #24]
 8003150:	e022      	b.n	8003198 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            // special instruction
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
            if (useProgMem) {
 8003152:	797b      	ldrb	r3, [r7, #5]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x134>
                special = pgm_read_byte(data + i++);
 8003158:	8b3b      	ldrh	r3, [r7, #24]
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	833a      	strh	r2, [r7, #24]
 800315e:	461a      	mov	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4413      	add	r3, r2
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	76bb      	strb	r3, [r7, #26]
 8003168:	e007      	b.n	800317a <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x144>
            } else {
                special = data[i++];
 800316a:	8b3b      	ldrh	r3, [r7, #24]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	833a      	strh	r2, [r7, #24]
 8003170:	461a      	mov	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	4413      	add	r3, r2
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	76bb      	strb	r3, [r7, #26]
            }
            /*Serial.print("Special command code ");
            Serial.print(special, HEX);
            Serial.println(" found...");*/
            if (special == 0x01) {
 800317a:	7ebb      	ldrb	r3, [r7, #26]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d109      	bne.n	8003194 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x15e>
                // enable DMP-related interrupts
                
                //setIntZeroMotionEnabled(true);
                //setIntFIFOBufferOverflowEnabled(true);
                //setIntDMPEnabled(true);
                I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	799b      	ldrb	r3, [r3, #6]
 8003184:	2232      	movs	r2, #50	; 0x32
 8003186:	2138      	movs	r1, #56	; 0x38
 8003188:	4618      	mov	r0, r3
 800318a:	f7fe fc2f 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>

                success = true;
 800318e:	2301      	movs	r3, #1
 8003190:	76fb      	strb	r3, [r7, #27]
 8003192:	e001      	b.n	8003198 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x162>
            } else {
                // unknown special command
                success = false;
 8003194:	2300      	movs	r3, #0
 8003196:	76fb      	strb	r3, [r7, #27]
            }
        }
        
        if (!success) {
 8003198:	7efb      	ldrb	r3, [r7, #27]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f47f af62 	bne.w	8003064 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x2e>
            if (useProgMem) free(progBuffer);
 80031a0:	797b      	ldrb	r3, [r7, #5]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x176>
 80031a6:	69f8      	ldr	r0, [r7, #28]
 80031a8:	f00d f824 	bl	80101f4 <free>
            return false; // uh oh
 80031ac:	2300      	movs	r3, #0
 80031ae:	e006      	b.n	80031be <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x188>
        }
    }
    if (useProgMem) free(progBuffer);
 80031b0:	797b      	ldrb	r3, [r7, #5]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <_ZN7MPU605024writeDMPConfigurationSetEPKhtb+0x186>
 80031b6:	69f8      	ldr	r0, [r7, #28]
 80031b8:	f00d f81c 	bl	80101f4 <free>
    return true;
 80031bc:	2301      	movs	r3, #1
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>:
bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	4613      	mov	r3, r2
 80031d2:	80fb      	strh	r3, [r7, #6]
    return writeDMPConfigurationSet(data, dataSize, true);
 80031d4:	88fa      	ldrh	r2, [r7, #6]
 80031d6:	2301      	movs	r3, #1
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7ff ff2b 	bl	8003036 <_ZN7MPU605024writeDMPConfigurationSetEPKhtb>
 80031e0:	4603      	mov	r3, r0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <_ZN7MPU605013setDMPConfig1Eh>:

uint8_t MPU6050::getDMPConfig1() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig1(uint8_t config) {
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	799b      	ldrb	r3, [r3, #6]
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	2170      	movs	r1, #112	; 0x70
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe fbf4 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <_ZN7MPU605013setDMPConfig2Eh>:

uint8_t MPU6050::getDMPConfig2() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig2(uint8_t config) {
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	799b      	ldrb	r3, [r3, #6]
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	2171      	movs	r1, #113	; 0x71
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe fbe3 	bl	80019ec <_ZN6I2Cdev9writeByteEhhh>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <_Z41__static_initialization_and_destruction_0ii>:
     } while (!packetReceived);
            HAL_GPIO_TogglePin(ONBOARD_LED_4_GPIO_Port, ONBOARD_LED_4_Pin);   //NOTDONE debug

     getFIFOBytes(data, length); //Get 1 packet
     return 1;
}
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d109      	bne.n	8003254 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003246:	4293      	cmp	r3, r2
 8003248:	d104      	bne.n	8003254 <_Z41__static_initialization_and_destruction_0ii+0x24>
MPU6050_6Axis_MotionApps20 mpu;                      //create new object
 800324a:	2200      	movs	r2, #0
 800324c:	21d0      	movs	r1, #208	; 0xd0
 800324e:	4803      	ldr	r0, [pc, #12]	; (800325c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8003250:	f7fe fcc2 	bl	8001bd8 <_ZN26MPU6050_6Axis_MotionApps20C1EhPv>
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	200004c4 	.word	0x200004c4

08003260 <_GLOBAL__sub_I_MPU6050_TX_buf>:
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
 8003264:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003268:	2001      	movs	r0, #1
 800326a:	f7ff ffe1 	bl	8003230 <_Z41__static_initialization_and_destruction_0ii>
 800326e:	bd80      	pop	{r7, pc}

08003270 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv>:
#ifndef MPU6050_DMP_FIFO_RATE_DIVISOR 
#define MPU6050_DMP_FIFO_RATE_DIVISOR 0x01 // The New instance of the Firmware has this as the default
#endif

// I Simplified this:
uint8_t MPU6050_6Axis_MotionApps20::dmpInitialize() {
 8003270:	b5b0      	push	{r4, r5, r7, lr}
 8003272:	b0ae      	sub	sp, #184	; 0xb8
 8003274:	af04      	add	r7, sp, #16
 8003276:	6078      	str	r0, [r7, #4]
    // reset device
    DEBUG_PRINTLN(F("\n\nResetting MPU6050..."));
    reset();
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fb9b 	bl	80029b6 <_ZN7MPU60505resetEv>
    HAL_Delay(30); // wait after reset
 8003280:	201e      	movs	r0, #30
 8003282:	f003 f869 	bl	8006358 <HAL_Delay>
    Serial.println(F("Enabling wake cycle..."));
    setWakeCycleEnabled(true);*/

    // disable sleep mode
    DEBUG_PRINTLN(F("Disabling sleep mode..."));
    setSleepEnabled(false);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fba2 	bl	80029d4 <_ZN7MPU605015setSleepEnabledEb>

    // get MPU hardware revision
    DEBUG_PRINTLN(F("Selecting user bank 16..."));
    setMemoryBank(0x10, true, true);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	2301      	movs	r3, #1
 8003294:	2201      	movs	r2, #1
 8003296:	2110      	movs	r1, #16
 8003298:	f7ff fd28 	bl	8002cec <_ZN7MPU605013setMemoryBankEhbb>
    DEBUG_PRINTLN(F("Selecting memory byte 6..."));
    setMemoryStartAddress(0x06);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2106      	movs	r1, #6
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fd4d 	bl	8002d40 <_ZN7MPU605021setMemoryStartAddressEh>
    DEBUG_PRINTLN(F("Checking hardware revision..."));
    readMemoryByte();
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fd5a 	bl	8002d62 <_ZN7MPU605014readMemoryByteEv>
    DEBUG_PRINT(F("Revision @ user[16][6] = "));
    DEBUG_PRINTLNF(hwRevision, HEX);
    DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
    setMemoryBank(0, false, false);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	2300      	movs	r3, #0
 80032b2:	2200      	movs	r2, #0
 80032b4:	2100      	movs	r1, #0
 80032b6:	f7ff fd19 	bl	8002cec <_ZN7MPU605013setMemoryBankEhbb>

    // check OTP bank valid
    DEBUG_PRINTLN(F("Reading OTP bank valid flag..."));
    getOTPBankValid();
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fbf4 	bl	8002aaa <_ZN7MPU605015getOTPBankValidEv>
    DEBUG_PRINT(F("OTP bank is "));
    DEBUG_PRINTLN(otpValid ? F("valid!") : F("invalid!"));

    // get X/Y/Z gyro offsets
    DEBUG_PRINTLN(F("Reading gyro offset TC values..."));
    int8_t xgOffsetTC = getXGyroOffsetTC();
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fc13 	bl	8002af0 <_ZN7MPU605016getXGyroOffsetTCEv>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    int8_t ygOffsetTC = getYGyroOffsetTC();
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fc34 	bl	8002b40 <_ZN7MPU605016getYGyroOffsetTCEv>
 80032d8:	4603      	mov	r3, r0
 80032da:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    int8_t zgOffsetTC = getZGyroOffsetTC();
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fc55 	bl	8002b90 <_ZN7MPU605016getZGyroOffsetTCEv>
 80032e6:	4603      	mov	r3, r0
 80032e8:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    DEBUG_PRINT(F("Z gyro offset = "));
    DEBUG_PRINTLN(zgOffsetTC);

    // setup weird slave stuff (?)
    DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
    setSlaveAddress(0, 0x7F);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	227f      	movs	r2, #127	; 0x7f
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff fadf 	bl	80028b6 <_ZN7MPU605015setSlaveAddressEhh>
    DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
    setI2CMasterModeEnabled(false);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fb2b 	bl	8002958 <_ZN7MPU605023setI2CMasterModeEnabledEb>
    DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
    setSlaveAddress(0, 0x68);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2268      	movs	r2, #104	; 0x68
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fad4 	bl	80028b6 <_ZN7MPU605015setSlaveAddressEhh>
    DEBUG_PRINTLN(F("Resetting I2C Master control..."));
    resetI2CMaster();
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fb41 	bl	8002998 <_ZN7MPU605014resetI2CMasterEv>
    HAL_Delay(20);
 8003316:	2014      	movs	r0, #20
 8003318:	f003 f81e 	bl	8006358 <HAL_Delay>

    // load DMP code into memory banks
    DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
    DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
    DEBUG_PRINTLN(F(" bytes)"));
    if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) {
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	2301      	movs	r3, #1
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	2300      	movs	r3, #0
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	2300      	movs	r3, #0
 8003328:	f240 7289 	movw	r2, #1929	; 0x789
 800332c:	49c7      	ldr	r1, [pc, #796]	; (800364c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3dc>)
 800332e:	f7ff fe65 	bl	8002ffc <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 825c 	beq.w	80037f2 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x582>

        // write DMP configuration
        DEBUG_PRINT(F("Writing DMP configuration to MPU memory banks ("));
        DEBUG_PRINT(MPU6050_DMP_CONFIG_SIZE);
        DEBUG_PRINTLN(F(" bytes in config def)"));
        if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	22c0      	movs	r2, #192	; 0xc0
 800333e:	49c4      	ldr	r1, [pc, #784]	; (8003650 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e0>)
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff40 	bl	80031c6 <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8250 	beq.w	80037ee <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x57e>
            DEBUG_PRINTLN(F("Success! DMP configuration written and verified."));

            DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
            setClockSource(MPU6050_CLOCK_PLL_ZGYRO);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2103      	movs	r1, #3
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fb4f 	bl	80029f6 <_ZN7MPU605014setClockSourceEh>

            DEBUG_PRINTLN(F("Setting DMP and FIFO_OFLOW interrupts enabled..."));
            setIntEnabled(0x12);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2112      	movs	r1, #18
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fac7 	bl	80028f0 <_ZN7MPU605013setIntEnabledEh>

            DEBUG_PRINTLN(F("Setting sample rate to 200Hz..."));
            setRate(4); // 1khz / (1 + 4) = 200 Hz
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2104      	movs	r1, #4
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff fa04 	bl	8002774 <_ZN7MPU60507setRateEh>

            DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
            setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2101      	movs	r1, #1
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fa10 	bl	8002796 <_ZN7MPU605020setExternalFrameSyncEh>

            DEBUG_PRINTLN(F("Setting DLPF bandwidth to 42Hz..."));
            setDLPFMode(MPU6050_DLPF_BW_42);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2103      	movs	r1, #3
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fa1e 	bl	80027bc <_ZN7MPU605011setDLPFModeEh>

            DEBUG_PRINTLN(F("Setting gyro sensitivity to +/- 2000 deg/sec..."));
            setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2103      	movs	r1, #3
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fa2c 	bl	80027e2 <_ZN7MPU605021setFullScaleGyroRangeEh>

            DEBUG_PRINTLN(F("Setting DMP configuration bytes (function unknown)..."));
            setDMPConfig1(0x03);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2103      	movs	r1, #3
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ff2b 	bl	80031ea <_ZN7MPU605013setDMPConfig1Eh>
            setDMPConfig2(0x00);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2100      	movs	r1, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff37 	bl	800320c <_ZN7MPU605013setDMPConfig2Eh>

            DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
            setOTPBankValid(false);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff fb93 	bl	8002ace <_ZN7MPU605015setOTPBankValidEb>

            DEBUG_PRINTLN(F("Setting X/Y/Z gyro offset TCs to previous values..."));
            setXGyroOffsetTC(xgOffsetTC);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f997 20a3 	ldrsb.w	r2, [r7, #163]	; 0xa3
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff fbb2 	bl	8002b1a <_ZN7MPU605016setXGyroOffsetTCEa>
            setYGyroOffsetTC(ygOffsetTC);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f997 20a2 	ldrsb.w	r2, [r7, #162]	; 0xa2
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fbd3 	bl	8002b6a <_ZN7MPU605016setYGyroOffsetTCEa>
            setZGyroOffsetTC(zgOffsetTC);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f997 20a1 	ldrsb.w	r2, [r7, #161]	; 0xa1
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fbf4 	bl	8002bba <_ZN7MPU605016setZGyroOffsetTCEa>
            //setYGyroOffset(0);
            //setZGyroOffset(0);

            DEBUG_PRINTLN(F("Writing final memory update 1/7 (function unknown)..."));
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80033d8:	2300      	movs	r3, #0
 80033da:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80033de:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d906      	bls.n	80033f4 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x184>
 80033e6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80033ea:	1c9a      	adds	r2, r3, #2
 80033ec:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033f0:	429a      	cmp	r2, r3
 80033f2:	db15      	blt.n	8003420 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x1b0>
 80033f4:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80033f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80033fc:	4995      	ldr	r1, [pc, #596]	; (8003654 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 80033fe:	5c8a      	ldrb	r2, [r1, r2]
 8003400:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003404:	440b      	add	r3, r1
 8003406:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800340a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800340e:	3301      	adds	r3, #1
 8003410:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003414:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003418:	3301      	adds	r3, #1
 800341a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800341e:	e7de      	b.n	80033de <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x16e>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003426:	3103      	adds	r1, #3
 8003428:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800342c:	b29a      	uxth	r2, r3
 800342e:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 8003432:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003436:	2500      	movs	r5, #0
 8003438:	9502      	str	r5, [sp, #8]
 800343a:	2501      	movs	r5, #1
 800343c:	9501      	str	r5, [sp, #4]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	4623      	mov	r3, r4
 8003442:	f7ff fd06 	bl	8002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Writing final memory update 2/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003446:	2300      	movs	r3, #0
 8003448:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800344c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003450:	2b03      	cmp	r3, #3
 8003452:	d906      	bls.n	8003462 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x1f2>
 8003454:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003458:	1c9a      	adds	r2, r3, #2
 800345a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800345e:	429a      	cmp	r2, r3
 8003460:	db15      	blt.n	800348e <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x21e>
 8003462:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003466:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800346a:	497a      	ldr	r1, [pc, #488]	; (8003654 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 800346c:	5c8a      	ldrb	r2, [r1, r2]
 800346e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003472:	440b      	add	r3, r1
 8003474:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003478:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800347c:	3301      	adds	r3, #1
 800347e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003482:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003486:	3301      	adds	r3, #1
 8003488:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800348c:	e7de      	b.n	800344c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x1dc>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003494:	3103      	adds	r1, #3
 8003496:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800349a:	b29a      	uxth	r2, r3
 800349c:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 80034a0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80034a4:	2500      	movs	r5, #0
 80034a6:	9502      	str	r5, [sp, #8]
 80034a8:	2501      	movs	r5, #1
 80034aa:	9501      	str	r5, [sp, #4]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	4623      	mov	r3, r4
 80034b0:	f7ff fccf 	bl	8002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fa5f 	bl	800297a <_ZN7MPU60509resetFIFOEv>

            DEBUG_PRINTLN(F("Reading FIFO count..."));
            uint16_t fifoCount = getFIFOCount();
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff faac 	bl	8002a1c <_ZN7MPU605012getFIFOCountEv>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            uint8_t fifoBuffer[128];

            DEBUG_PRINT(F("Current FIFO count="));
            DEBUG_PRINTLN(fifoCount);
            getFIFOBytes(fifoBuffer, fifoCount);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	f107 010c 	add.w	r1, r7, #12
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff faba 	bl	8002a50 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
            setMotionDetectionThreshold(2);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2102      	movs	r1, #2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff f9a4 	bl	800282e <_ZN7MPU605027setMotionDetectionThresholdEh>

            DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
            setZeroMotionDetectionThreshold(156);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	219c      	movs	r1, #156	; 0x9c
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff f9c1 	bl	8002872 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>

            DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
            setMotionDetectionDuration(80);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2150      	movs	r1, #80	; 0x50
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff f9ab 	bl	8002850 <_ZN7MPU605026setMotionDetectionDurationEh>

            DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
            setZeroMotionDetectionDuration(0);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff f9c8 	bl	8002894 <_ZN7MPU605030setZeroMotionDetectionDurationEh>

            DEBUG_PRINTLN(F("Resetting FIFO..."));
            resetFIFO();
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fa37 	bl	800297a <_ZN7MPU60509resetFIFOEv>

            DEBUG_PRINTLN(F("Enabling FIFO..."));
            setFIFOEnabled(true);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2101      	movs	r1, #1
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fa10 	bl	8002936 <_ZN7MPU605014setFIFOEnabledEb>

            DEBUG_PRINTLN(F("Enabling DMP..."));
            setDMPEnabled(true);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2101      	movs	r1, #1
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fbc6 	bl	8002cac <_ZN7MPU605013setDMPEnabledEb>

            DEBUG_PRINTLN(F("Resetting DMP..."));
            resetDMP();
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fbd3 	bl	8002cce <_ZN7MPU60508resetDMPEv>

            DEBUG_PRINTLN(F("Writing final memory update 3/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003528:	2300      	movs	r3, #0
 800352a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800352e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003532:	2b03      	cmp	r3, #3
 8003534:	d906      	bls.n	8003544 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x2d4>
 8003536:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800353a:	1c9a      	adds	r2, r3, #2
 800353c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003540:	429a      	cmp	r2, r3
 8003542:	db15      	blt.n	8003570 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x300>
 8003544:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003548:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800354c:	4941      	ldr	r1, [pc, #260]	; (8003654 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 800354e:	5c8a      	ldrb	r2, [r1, r2]
 8003550:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003554:	440b      	add	r3, r1
 8003556:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800355a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800355e:	3301      	adds	r3, #1
 8003560:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003564:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003568:	3301      	adds	r3, #1
 800356a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800356e:	e7de      	b.n	800352e <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x2be>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003576:	3103      	adds	r1, #3
 8003578:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800357c:	b29a      	uxth	r2, r3
 800357e:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 8003582:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003586:	2500      	movs	r5, #0
 8003588:	9502      	str	r5, [sp, #8]
 800358a:	2501      	movs	r5, #1
 800358c:	9501      	str	r5, [sp, #4]
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	4623      	mov	r3, r4
 8003592:	f7ff fc5e 	bl	8002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Writing final memory update 4/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003596:	2300      	movs	r3, #0
 8003598:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800359c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d906      	bls.n	80035b2 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x342>
 80035a4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80035a8:	1c9a      	adds	r2, r3, #2
 80035aa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80035ae:	429a      	cmp	r2, r3
 80035b0:	db15      	blt.n	80035de <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x36e>
 80035b2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80035b6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80035ba:	4926      	ldr	r1, [pc, #152]	; (8003654 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 80035bc:	5c8a      	ldrb	r2, [r1, r2]
 80035be:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80035c2:	440b      	add	r3, r1
 80035c4:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80035c8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80035cc:	3301      	adds	r3, #1
 80035ce:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80035d2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80035d6:	3301      	adds	r3, #1
 80035d8:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80035dc:	e7de      	b.n	800359c <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x32c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80035e4:	3103      	adds	r1, #3
 80035e6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 80035f0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80035f4:	2500      	movs	r5, #0
 80035f6:	9502      	str	r5, [sp, #8]
 80035f8:	2501      	movs	r5, #1
 80035fa:	9501      	str	r5, [sp, #4]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	4623      	mov	r3, r4
 8003600:	f7ff fc27 	bl	8002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Writing final memory update 5/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003604:	2300      	movs	r3, #0
 8003606:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800360a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800360e:	2b03      	cmp	r3, #3
 8003610:	d906      	bls.n	8003620 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3b0>
 8003612:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003616:	1c9a      	adds	r2, r3, #2
 8003618:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800361c:	429a      	cmp	r2, r3
 800361e:	db1b      	blt.n	8003658 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e8>
 8003620:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003624:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003628:	490a      	ldr	r1, [pc, #40]	; (8003654 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x3e4>)
 800362a:	5c8a      	ldrb	r2, [r1, r2]
 800362c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003630:	440b      	add	r3, r1
 8003632:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003636:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800363a:	3301      	adds	r3, #1
 800363c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003640:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003644:	3301      	adds	r3, #1
 8003646:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800364a:	e7de      	b.n	800360a <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x39a>
 800364c:	08013034 	.word	0x08013034
 8003650:	080137c0 	.word	0x080137c0
 8003654:	08013880 	.word	0x08013880
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800365e:	3103      	adds	r1, #3
 8003660:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003664:	b29a      	uxth	r2, r3
 8003666:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 800366a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800366e:	2500      	movs	r5, #0
 8003670:	9502      	str	r5, [sp, #8]
 8003672:	2501      	movs	r5, #1
 8003674:	9501      	str	r5, [sp, #4]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	4623      	mov	r3, r4
 800367a:	f7ff fbea 	bl	8002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff f9cb 	bl	8002a1c <_ZN7MPU605012getFIFOCountEv>
 8003686:	4603      	mov	r3, r0
 8003688:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800368c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003690:	2b02      	cmp	r3, #2
 8003692:	bf94      	ite	ls
 8003694:	2301      	movls	r3, #1
 8003696:	2300      	movhi	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d000      	beq.n	80036a0 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x430>
 800369e:	e7ee      	b.n	800367e <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x40e>

            DEBUG_PRINT(F("Current FIFO count="));
            DEBUG_PRINTLN(fifoCount);
            DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	f107 010c 	add.w	r1, r7, #12
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff f9cf 	bl	8002a50 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Reading interrupt status..."));
            getIntStatus();
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff f92c 	bl	8002912 <_ZN7MPU605012getIntStatusEv>

            DEBUG_PRINT(F("Current interrupt status="));
            DEBUG_PRINTLNF(mpuIntStatus, HEX);

            DEBUG_PRINTLN(F("Reading final memory update 6/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80036ba:	2300      	movs	r3, #0
 80036bc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80036c0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d906      	bls.n	80036d6 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x466>
 80036c8:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80036cc:	1c9a      	adds	r2, r3, #2
 80036ce:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80036d2:	429a      	cmp	r2, r3
 80036d4:	db15      	blt.n	8003702 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x492>
 80036d6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80036da:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80036de:	4947      	ldr	r1, [pc, #284]	; (80037fc <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x58c>)
 80036e0:	5c8a      	ldrb	r2, [r1, r2]
 80036e2:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80036e6:	440b      	add	r3, r1
 80036e8:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80036ec:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80036f0:	3301      	adds	r3, #1
 80036f2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80036f6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80036fa:	3301      	adds	r3, #1
 80036fc:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003700:	e7de      	b.n	80036c0 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x450>
            readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003708:	3103      	adds	r1, #3
 800370a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800370e:	b29a      	uxth	r2, r3
 8003710:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 8003714:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	4623      	mov	r3, r4
 800371c:	f7ff fb33 	bl	8002d86 <_ZN7MPU605015readMemoryBlockEPhthh>

            DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
            while ((fifoCount = getFIFOCount()) < 3);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff f97a 	bl	8002a1c <_ZN7MPU605012getFIFOCountEv>
 8003728:	4603      	mov	r3, r0
 800372a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800372e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003732:	2b02      	cmp	r3, #2
 8003734:	bf94      	ite	ls
 8003736:	2301      	movls	r3, #1
 8003738:	2300      	movhi	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d000      	beq.n	8003742 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x4d2>
 8003740:	e7ee      	b.n	8003720 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x4b0>

            DEBUG_PRINT(F("Current FIFO count="));
            DEBUG_PRINTLN(fifoCount);

            DEBUG_PRINTLN(F("Reading FIFO data..."));
            getFIFOBytes(fifoBuffer, fifoCount);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	f107 010c 	add.w	r1, r7, #12
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff f97e 	bl	8002a50 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Reading interrupt status..."));
            getIntStatus();
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff f8db 	bl	8002912 <_ZN7MPU605012getIntStatusEv>

            DEBUG_PRINT(F("Current interrupt status="));
            DEBUG_PRINTLNF(mpuIntStatus, HEX);

            DEBUG_PRINTLN(F("Writing final memory update 7/7 (function unknown)..."));
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 800375c:	2300      	movs	r3, #0
 800375e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003762:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003766:	2b03      	cmp	r3, #3
 8003768:	d906      	bls.n	8003778 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x508>
 800376a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800376e:	1c9a      	adds	r2, r3, #2
 8003770:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003774:	429a      	cmp	r2, r3
 8003776:	db15      	blt.n	80037a4 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x534>
 8003778:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800377c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003780:	491e      	ldr	r1, [pc, #120]	; (80037fc <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x58c>)
 8003782:	5c8a      	ldrb	r2, [r1, r2]
 8003784:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003788:	440b      	add	r3, r1
 800378a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800378e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003792:	3301      	adds	r3, #1
 8003794:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8003798:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800379c:	3301      	adds	r3, #1
 800379e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80037a2:	e7de      	b.n	8003762 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x4f2>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80037aa:	3103      	adds	r1, #3
 80037ac:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 80037b6:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80037ba:	2500      	movs	r5, #0
 80037bc:	9502      	str	r5, [sp, #8]
 80037be:	2501      	movs	r5, #1
 80037c0:	9501      	str	r5, [sp, #4]
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	4623      	mov	r3, r4
 80037c6:	f7ff fb44 	bl	8002e52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>

            DEBUG_PRINTLN(F("DMP is good to go! Finally."));

            DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
            setDMPEnabled(false);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff fa6c 	bl	8002cac <_ZN7MPU605013setDMPEnabledEb>

            DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
            dmpPacketSize = 42;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	222a      	movs	r2, #42	; 0x2a
 80037d8:	839a      	strh	r2, [r3, #28]
            /*if ((dmpPacketBuffer = (uint8_t *)malloc(42)) == 0) {
                return 3; // TODO: proper error code for no memory
            }*/

            DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
            resetFIFO();
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff f8cc 	bl	800297a <_ZN7MPU60509resetFIFOEv>
            getIntStatus();
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff f894 	bl	8002912 <_ZN7MPU605012getIntStatusEv>
        }
    } else {
        DEBUG_PRINTLN(F("ERROR! DMP code verification failed."));
        return 1; // main binary block loading failed
    }
    return 0; // success
 80037ea:	2300      	movs	r3, #0
 80037ec:	e002      	b.n	80037f4 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x584>
            return 2; // configuration block loading failed
 80037ee:	2302      	movs	r3, #2
 80037f0:	e000      	b.n	80037f4 <_ZN26MPU6050_6Axis_MotionApps2013dmpInitializeEv+0x584>
        return 1; // main binary block loading failed
 80037f2:	2301      	movs	r3, #1
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	37a8      	adds	r7, #168	; 0xa8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bdb0      	pop	{r4, r5, r7, pc}
 80037fc:	08013880 	.word	0x08013880

08003800 <_Z17get_XW_diffAnglesv>:
 * form of a Quaternion and then converts it to usable PITCH,ROLL,YAW angles
 * 
 * --Custom Method!
 */
void get_XW_diffAngles()
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
  //float *p = QuaternionSLERP(QuaternionProduct(QuaternionSLERP(&OriginQuaternion[0], &MPUoutputQuaternion[0]), &FrameOriginQuaternion[0]), &LoopWQuaternion[0]);
  //float *p = QuaternionNormalize(QuaternionSLERP(FrameOriginQuaternion, QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(OriginQuaternion, MPUoutputQuaternion)), FrameOriginQuaternion)), FrameOriginQuaternion)), LoopWQuaternion))));
  float *p = QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(GyroOriginQuaternion, QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(OriginQuaternion, GyroOriginQuaternion)), MPUoutputQuaternion)))), FrameOriginQuaternion)), FrameOriginQuaternion)), LoopWQuaternion));
 8003806:	4960      	ldr	r1, [pc, #384]	; (8003988 <_Z17get_XW_diffAnglesv+0x188>)
 8003808:	4860      	ldr	r0, [pc, #384]	; (800398c <_Z17get_XW_diffAnglesv+0x18c>)
 800380a:	f7fe fef3 	bl	80025f4 <_Z15QuaternionSLERPPfS_>
 800380e:	4603      	mov	r3, r0
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe ff01 	bl	8002618 <_Z19QuaternionNormalizePf>
 8003816:	4603      	mov	r3, r0
 8003818:	495d      	ldr	r1, [pc, #372]	; (8003990 <_Z17get_XW_diffAnglesv+0x190>)
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fdbc 	bl	8002398 <_Z17QuaternionProductPfS_>
 8003820:	4603      	mov	r3, r0
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fef8 	bl	8002618 <_Z19QuaternionNormalizePf>
 8003828:	4603      	mov	r3, r0
 800382a:	4619      	mov	r1, r3
 800382c:	4856      	ldr	r0, [pc, #344]	; (8003988 <_Z17get_XW_diffAnglesv+0x188>)
 800382e:	f7fe fee1 	bl	80025f4 <_Z15QuaternionSLERPPfS_>
 8003832:	4603      	mov	r3, r0
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe feef 	bl	8002618 <_Z19QuaternionNormalizePf>
 800383a:	4603      	mov	r3, r0
 800383c:	4955      	ldr	r1, [pc, #340]	; (8003994 <_Z17get_XW_diffAnglesv+0x194>)
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe fdaa 	bl	8002398 <_Z17QuaternionProductPfS_>
 8003844:	4603      	mov	r3, r0
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fee6 	bl	8002618 <_Z19QuaternionNormalizePf>
 800384c:	4603      	mov	r3, r0
 800384e:	4951      	ldr	r1, [pc, #324]	; (8003994 <_Z17get_XW_diffAnglesv+0x194>)
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe fecf 	bl	80025f4 <_Z15QuaternionSLERPPfS_>
 8003856:	4603      	mov	r3, r0
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe fedd 	bl	8002618 <_Z19QuaternionNormalizePf>
 800385e:	4603      	mov	r3, r0
 8003860:	494d      	ldr	r1, [pc, #308]	; (8003998 <_Z17get_XW_diffAnglesv+0x198>)
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fd98 	bl	8002398 <_Z17QuaternionProductPfS_>
 8003868:	4603      	mov	r3, r0
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe fed4 	bl	8002618 <_Z19QuaternionNormalizePf>
 8003870:	6078      	str	r0, [r7, #4]
  
  LoopXWQuaternion[0] = *p;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a49      	ldr	r2, [pc, #292]	; (800399c <_Z17get_XW_diffAnglesv+0x19c>)
 8003878:	6013      	str	r3, [r2, #0]
  LoopXWQuaternion[1] = *(p + 1);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4a47      	ldr	r2, [pc, #284]	; (800399c <_Z17get_XW_diffAnglesv+0x19c>)
 8003880:	6053      	str	r3, [r2, #4]
  LoopXWQuaternion[2] = *(p + 2);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	4a45      	ldr	r2, [pc, #276]	; (800399c <_Z17get_XW_diffAnglesv+0x19c>)
 8003888:	6093      	str	r3, [r2, #8]
  LoopXWQuaternion[3] = *(p + 3);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	4a43      	ldr	r2, [pc, #268]	; (800399c <_Z17get_XW_diffAnglesv+0x19c>)
 8003890:	60d3      	str	r3, [r2, #12]

  //difference x-w in degrees
  PID_Pitch_xw_diff = 2 * (((float)asin(LoopXWQuaternion[2]) * 180) / M_PI);
 8003892:	4b42      	ldr	r3, [pc, #264]	; (800399c <_Z17get_XW_diffAnglesv+0x19c>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe f962 	bl	8001b60 <_ZSt4asinf>
 800389c:	4603      	mov	r3, r0
 800389e:	4940      	ldr	r1, [pc, #256]	; (80039a0 <_Z17get_XW_diffAnglesv+0x1a0>)
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fd faab 	bl	8000dfc <__aeabi_fmul>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fc fdf9 	bl	80004a0 <__aeabi_f2d>
 80038ae:	a334      	add	r3, pc, #208	; (adr r3, 8003980 <_Z17get_XW_diffAnglesv+0x180>)
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f7fc ff76 	bl	80007a4 <__aeabi_ddiv>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4610      	mov	r0, r2
 80038be:	4619      	mov	r1, r3
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	f7fc fc8e 	bl	80001e4 <__adddf3>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	f7fd f936 	bl	8000b40 <__aeabi_d2f>
 80038d4:	4603      	mov	r3, r0
 80038d6:	4a33      	ldr	r2, [pc, #204]	; (80039a4 <_Z17get_XW_diffAnglesv+0x1a4>)
 80038d8:	6013      	str	r3, [r2, #0]
  PID_Roll_xw_diff  = 2 * (((float)asin(LoopXWQuaternion[1]) * 180) / M_PI);
 80038da:	4b30      	ldr	r3, [pc, #192]	; (800399c <_Z17get_XW_diffAnglesv+0x19c>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fe f93e 	bl	8001b60 <_ZSt4asinf>
 80038e4:	4603      	mov	r3, r0
 80038e6:	492e      	ldr	r1, [pc, #184]	; (80039a0 <_Z17get_XW_diffAnglesv+0x1a0>)
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd fa87 	bl	8000dfc <__aeabi_fmul>
 80038ee:	4603      	mov	r3, r0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fc fdd5 	bl	80004a0 <__aeabi_f2d>
 80038f6:	a322      	add	r3, pc, #136	; (adr r3, 8003980 <_Z17get_XW_diffAnglesv+0x180>)
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	f7fc ff52 	bl	80007a4 <__aeabi_ddiv>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	f7fc fc6a 	bl	80001e4 <__adddf3>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4610      	mov	r0, r2
 8003916:	4619      	mov	r1, r3
 8003918:	f7fd f912 	bl	8000b40 <__aeabi_d2f>
 800391c:	4603      	mov	r3, r0
 800391e:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <_Z17get_XW_diffAnglesv+0x1a8>)
 8003920:	6013      	str	r3, [r2, #0]
  PID_Yaw_xw_diff   = 2 * (((float)atan(LoopXWQuaternion[3] / LoopXWQuaternion[0]) * 180) / M_PI);
 8003922:	4b1e      	ldr	r3, [pc, #120]	; (800399c <_Z17get_XW_diffAnglesv+0x19c>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	4a1d      	ldr	r2, [pc, #116]	; (800399c <_Z17get_XW_diffAnglesv+0x19c>)
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f7fd fb19 	bl	8000f64 <__aeabi_fdiv>
 8003932:	4603      	mov	r3, r0
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe f91f 	bl	8001b78 <_ZSt4atanf>
 800393a:	4603      	mov	r3, r0
 800393c:	4918      	ldr	r1, [pc, #96]	; (80039a0 <_Z17get_XW_diffAnglesv+0x1a0>)
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd fa5c 	bl	8000dfc <__aeabi_fmul>
 8003944:	4603      	mov	r3, r0
 8003946:	4618      	mov	r0, r3
 8003948:	f7fc fdaa 	bl	80004a0 <__aeabi_f2d>
 800394c:	a30c      	add	r3, pc, #48	; (adr r3, 8003980 <_Z17get_XW_diffAnglesv+0x180>)
 800394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003952:	f7fc ff27 	bl	80007a4 <__aeabi_ddiv>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4610      	mov	r0, r2
 800395c:	4619      	mov	r1, r3
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	f7fc fc3f 	bl	80001e4 <__adddf3>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4610      	mov	r0, r2
 800396c:	4619      	mov	r1, r3
 800396e:	f7fd f8e7 	bl	8000b40 <__aeabi_d2f>
 8003972:	4603      	mov	r3, r0
 8003974:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <_Z17get_XW_diffAnglesv+0x1ac>)
 8003976:	6013      	str	r3, [r2, #0]
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	54442d18 	.word	0x54442d18
 8003984:	400921fb 	.word	0x400921fb
 8003988:	20000024 	.word	0x20000024
 800398c:	2000057c 	.word	0x2000057c
 8003990:	2000056c 	.word	0x2000056c
 8003994:	20000004 	.word	0x20000004
 8003998:	20000014 	.word	0x20000014
 800399c:	2000058c 	.word	0x2000058c
 80039a0:	43340000 	.word	0x43340000
 80039a4:	20000518 	.word	0x20000518
 80039a8:	2000051c 	.word	0x2000051c
 80039ac:	20000520 	.word	0x20000520

080039b0 <_Z17reset_WQuaternionv>:
 * @brief 
 * 
 * //NOTDONE
 */
void reset_WQuaternion()
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
  float *p = QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(GyroOriginQuaternion, QuaternionNormalize(QuaternionProduct(QuaternionNormalize(QuaternionSLERP(OriginQuaternion, GyroOriginQuaternion)), MPUoutputQuaternion)))), FrameOriginQuaternion));
 80039b6:	491c      	ldr	r1, [pc, #112]	; (8003a28 <_Z17reset_WQuaternionv+0x78>)
 80039b8:	481c      	ldr	r0, [pc, #112]	; (8003a2c <_Z17reset_WQuaternionv+0x7c>)
 80039ba:	f7fe fe1b 	bl	80025f4 <_Z15QuaternionSLERPPfS_>
 80039be:	4603      	mov	r3, r0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fe fe29 	bl	8002618 <_Z19QuaternionNormalizePf>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4919      	ldr	r1, [pc, #100]	; (8003a30 <_Z17reset_WQuaternionv+0x80>)
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe fce4 	bl	8002398 <_Z17QuaternionProductPfS_>
 80039d0:	4603      	mov	r3, r0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe fe20 	bl	8002618 <_Z19QuaternionNormalizePf>
 80039d8:	4603      	mov	r3, r0
 80039da:	4619      	mov	r1, r3
 80039dc:	4812      	ldr	r0, [pc, #72]	; (8003a28 <_Z17reset_WQuaternionv+0x78>)
 80039de:	f7fe fe09 	bl	80025f4 <_Z15QuaternionSLERPPfS_>
 80039e2:	4603      	mov	r3, r0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe fe17 	bl	8002618 <_Z19QuaternionNormalizePf>
 80039ea:	4603      	mov	r3, r0
 80039ec:	4911      	ldr	r1, [pc, #68]	; (8003a34 <_Z17reset_WQuaternionv+0x84>)
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fcd2 	bl	8002398 <_Z17QuaternionProductPfS_>
 80039f4:	4603      	mov	r3, r0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fe0e 	bl	8002618 <_Z19QuaternionNormalizePf>
 80039fc:	6078      	str	r0, [r7, #4]
  LoopWQuaternion[0] = *p;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <_Z17reset_WQuaternionv+0x88>)
 8003a04:	6013      	str	r3, [r2, #0]
  LoopWQuaternion[1] = *(p + 1);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4a0b      	ldr	r2, [pc, #44]	; (8003a38 <_Z17reset_WQuaternionv+0x88>)
 8003a0c:	6053      	str	r3, [r2, #4]
  LoopWQuaternion[2] = *(p + 2);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <_Z17reset_WQuaternionv+0x88>)
 8003a14:	6093      	str	r3, [r2, #8]
  LoopWQuaternion[3] = *(p + 3);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <_Z17reset_WQuaternionv+0x88>)
 8003a1c:	60d3      	str	r3, [r2, #12]
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000024 	.word	0x20000024
 8003a2c:	2000057c 	.word	0x2000057c
 8003a30:	2000056c 	.word	0x2000056c
 8003a34:	20000004 	.word	0x20000004
 8003a38:	20000014 	.word	0x20000014

08003a3c <_Z10update_PIDv>:
 * @brief Gets PITCH,ROLL,YAW Y values and integrates/differentiates
 * 
 * --Custom Method!
 */
void update_PID()
{
 8003a3c:	b598      	push	{r3, r4, r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  PID_Yaw_xw_diff = -PID_Yaw_xw_diff;
 8003a40:	4b94      	ldr	r3, [pc, #592]	; (8003c94 <_Z10update_PIDv+0x258>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003a48:	4a92      	ldr	r2, [pc, #584]	; (8003c94 <_Z10update_PIDv+0x258>)
 8003a4a:	6013      	str	r3, [r2, #0]
  Pitch_I_Sum += (PID_Pitch_xw_diff * Pitch_PID_k[1]);                                                                                  // integrate
 8003a4c:	4b92      	ldr	r3, [pc, #584]	; (8003c98 <_Z10update_PIDv+0x25c>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4a92      	ldr	r2, [pc, #584]	; (8003c9c <_Z10update_PIDv+0x260>)
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd f9d0 	bl	8000dfc <__aeabi_fmul>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b8f      	ldr	r3, [pc, #572]	; (8003ca0 <_Z10update_PIDv+0x264>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f7fd f8c0 	bl	8000bec <__addsf3>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	461a      	mov	r2, r3
 8003a70:	4b8b      	ldr	r3, [pc, #556]	; (8003ca0 <_Z10update_PIDv+0x264>)
 8003a72:	601a      	str	r2, [r3, #0]
  Roll_I_Sum  += (PID_Roll_xw_diff  * Roll_PID_k[1] );
 8003a74:	4b8b      	ldr	r3, [pc, #556]	; (8003ca4 <_Z10update_PIDv+0x268>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4a8b      	ldr	r2, [pc, #556]	; (8003ca8 <_Z10update_PIDv+0x26c>)
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd f9bc 	bl	8000dfc <__aeabi_fmul>
 8003a84:	4603      	mov	r3, r0
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b88      	ldr	r3, [pc, #544]	; (8003cac <_Z10update_PIDv+0x270>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	f7fd f8ac 	bl	8000bec <__addsf3>
 8003a94:	4603      	mov	r3, r0
 8003a96:	461a      	mov	r2, r3
 8003a98:	4b84      	ldr	r3, [pc, #528]	; (8003cac <_Z10update_PIDv+0x270>)
 8003a9a:	601a      	str	r2, [r3, #0]
  Yaw_I_Sum   += (PID_Yaw_xw_diff   * Yaw_PID_k[1]  );
 8003a9c:	4b84      	ldr	r3, [pc, #528]	; (8003cb0 <_Z10update_PIDv+0x274>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4a7c      	ldr	r2, [pc, #496]	; (8003c94 <_Z10update_PIDv+0x258>)
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd f9a8 	bl	8000dfc <__aeabi_fmul>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4b80      	ldr	r3, [pc, #512]	; (8003cb4 <_Z10update_PIDv+0x278>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	f7fd f898 	bl	8000bec <__addsf3>
 8003abc:	4603      	mov	r3, r0
 8003abe:	461a      	mov	r2, r3
 8003ac0:	4b7c      	ldr	r3, [pc, #496]	; (8003cb4 <_Z10update_PIDv+0x278>)
 8003ac2:	601a      	str	r2, [r3, #0]

  if (Pitch_I_Sum >  500) Pitch_I_Sum =  500;                         //constrain integration (-500 500)
 8003ac4:	4b76      	ldr	r3, [pc, #472]	; (8003ca0 <_Z10update_PIDv+0x264>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	497b      	ldr	r1, [pc, #492]	; (8003cb8 <_Z10update_PIDv+0x27c>)
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fd fb52 	bl	8001174 <__aeabi_fcmpgt>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <_Z10update_PIDv+0xa0>
 8003ad6:	4b72      	ldr	r3, [pc, #456]	; (8003ca0 <_Z10update_PIDv+0x264>)
 8003ad8:	4a77      	ldr	r2, [pc, #476]	; (8003cb8 <_Z10update_PIDv+0x27c>)
 8003ada:	601a      	str	r2, [r3, #0]
  if (Roll_I_Sum  >  500) Roll_I_Sum  =  500;
 8003adc:	4b73      	ldr	r3, [pc, #460]	; (8003cac <_Z10update_PIDv+0x270>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4975      	ldr	r1, [pc, #468]	; (8003cb8 <_Z10update_PIDv+0x27c>)
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fd fb46 	bl	8001174 <__aeabi_fcmpgt>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <_Z10update_PIDv+0xb8>
 8003aee:	4b6f      	ldr	r3, [pc, #444]	; (8003cac <_Z10update_PIDv+0x270>)
 8003af0:	4a71      	ldr	r2, [pc, #452]	; (8003cb8 <_Z10update_PIDv+0x27c>)
 8003af2:	601a      	str	r2, [r3, #0]
  if (Yaw_I_Sum   >  500) Yaw_I_Sum   =  500;
 8003af4:	4b6f      	ldr	r3, [pc, #444]	; (8003cb4 <_Z10update_PIDv+0x278>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	496f      	ldr	r1, [pc, #444]	; (8003cb8 <_Z10update_PIDv+0x27c>)
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd fb3a 	bl	8001174 <__aeabi_fcmpgt>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <_Z10update_PIDv+0xd0>
 8003b06:	4b6b      	ldr	r3, [pc, #428]	; (8003cb4 <_Z10update_PIDv+0x278>)
 8003b08:	4a6b      	ldr	r2, [pc, #428]	; (8003cb8 <_Z10update_PIDv+0x27c>)
 8003b0a:	601a      	str	r2, [r3, #0]
  if (Pitch_I_Sum < -500) Pitch_I_Sum = -500;       //NOTDONE use defines for values
 8003b0c:	4b64      	ldr	r3, [pc, #400]	; (8003ca0 <_Z10update_PIDv+0x264>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	496a      	ldr	r1, [pc, #424]	; (8003cbc <_Z10update_PIDv+0x280>)
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fd fb10 	bl	8001138 <__aeabi_fcmplt>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <_Z10update_PIDv+0xe8>
 8003b1e:	4b60      	ldr	r3, [pc, #384]	; (8003ca0 <_Z10update_PIDv+0x264>)
 8003b20:	4a66      	ldr	r2, [pc, #408]	; (8003cbc <_Z10update_PIDv+0x280>)
 8003b22:	601a      	str	r2, [r3, #0]
  if (Roll_I_Sum  < -500) Roll_I_Sum  = -500;
 8003b24:	4b61      	ldr	r3, [pc, #388]	; (8003cac <_Z10update_PIDv+0x270>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4964      	ldr	r1, [pc, #400]	; (8003cbc <_Z10update_PIDv+0x280>)
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fd fb04 	bl	8001138 <__aeabi_fcmplt>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <_Z10update_PIDv+0x100>
 8003b36:	4b5d      	ldr	r3, [pc, #372]	; (8003cac <_Z10update_PIDv+0x270>)
 8003b38:	4a60      	ldr	r2, [pc, #384]	; (8003cbc <_Z10update_PIDv+0x280>)
 8003b3a:	601a      	str	r2, [r3, #0]
  if (Yaw_I_Sum   <    0) Yaw_I_Sum   =    0;
 8003b3c:	4b5d      	ldr	r3, [pc, #372]	; (8003cb4 <_Z10update_PIDv+0x278>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fd faf7 	bl	8001138 <__aeabi_fcmplt>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <_Z10update_PIDv+0x11c>
 8003b50:	4b58      	ldr	r3, [pc, #352]	; (8003cb4 <_Z10update_PIDv+0x278>)
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

  PID_Pitch_y = (PID_Pitch_xw_diff * Pitch_PID_k[0] * 10) + Pitch_I_Sum + ((PID_Pitch_xw_diff - Pitch_D_old) * Pitch_PID_k[2] * 100);   //combine P,I,D values
 8003b58:	4b4f      	ldr	r3, [pc, #316]	; (8003c98 <_Z10update_PIDv+0x25c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a4f      	ldr	r2, [pc, #316]	; (8003c9c <_Z10update_PIDv+0x260>)
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fd f94a 	bl	8000dfc <__aeabi_fmul>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	4955      	ldr	r1, [pc, #340]	; (8003cc0 <_Z10update_PIDv+0x284>)
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fd f945 	bl	8000dfc <__aeabi_fmul>
 8003b72:	4603      	mov	r3, r0
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b4a      	ldr	r3, [pc, #296]	; (8003ca0 <_Z10update_PIDv+0x264>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f7fd f835 	bl	8000bec <__addsf3>
 8003b82:	4603      	mov	r3, r0
 8003b84:	461c      	mov	r4, r3
 8003b86:	4b45      	ldr	r3, [pc, #276]	; (8003c9c <_Z10update_PIDv+0x260>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a4e      	ldr	r2, [pc, #312]	; (8003cc4 <_Z10update_PIDv+0x288>)
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fd f829 	bl	8000be8 <__aeabi_fsub>
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4b3f      	ldr	r3, [pc, #252]	; (8003c98 <_Z10update_PIDv+0x25c>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	f7fd f92b 	bl	8000dfc <__aeabi_fmul>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4947      	ldr	r1, [pc, #284]	; (8003cc8 <_Z10update_PIDv+0x28c>)
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fd f926 	bl	8000dfc <__aeabi_fmul>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f7fd f819 	bl	8000bec <__addsf3>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b43      	ldr	r3, [pc, #268]	; (8003ccc <_Z10update_PIDv+0x290>)
 8003bc0:	601a      	str	r2, [r3, #0]
  PID_Roll_y  = (PID_Roll_xw_diff  * Roll_PID_k[0]  * 10) + Roll_I_Sum  + ((PID_Roll_xw_diff  - Roll_D_old ) * Roll_PID_k[2]  * 100);
 8003bc2:	4b38      	ldr	r3, [pc, #224]	; (8003ca4 <_Z10update_PIDv+0x268>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a38      	ldr	r2, [pc, #224]	; (8003ca8 <_Z10update_PIDv+0x26c>)
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	4611      	mov	r1, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fd f915 	bl	8000dfc <__aeabi_fmul>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	493a      	ldr	r1, [pc, #232]	; (8003cc0 <_Z10update_PIDv+0x284>)
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd f910 	bl	8000dfc <__aeabi_fmul>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	461a      	mov	r2, r3
 8003be0:	4b32      	ldr	r3, [pc, #200]	; (8003cac <_Z10update_PIDv+0x270>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4619      	mov	r1, r3
 8003be6:	4610      	mov	r0, r2
 8003be8:	f7fd f800 	bl	8000bec <__addsf3>
 8003bec:	4603      	mov	r3, r0
 8003bee:	461c      	mov	r4, r3
 8003bf0:	4b2d      	ldr	r3, [pc, #180]	; (8003ca8 <_Z10update_PIDv+0x26c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a36      	ldr	r2, [pc, #216]	; (8003cd0 <_Z10update_PIDv+0x294>)
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fc fff4 	bl	8000be8 <__aeabi_fsub>
 8003c00:	4603      	mov	r3, r0
 8003c02:	461a      	mov	r2, r3
 8003c04:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <_Z10update_PIDv+0x268>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	f7fd f8f6 	bl	8000dfc <__aeabi_fmul>
 8003c10:	4603      	mov	r3, r0
 8003c12:	492d      	ldr	r1, [pc, #180]	; (8003cc8 <_Z10update_PIDv+0x28c>)
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fd f8f1 	bl	8000dfc <__aeabi_fmul>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f7fc ffe4 	bl	8000bec <__addsf3>
 8003c24:	4603      	mov	r3, r0
 8003c26:	461a      	mov	r2, r3
 8003c28:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <_Z10update_PIDv+0x298>)
 8003c2a:	601a      	str	r2, [r3, #0]
  PID_Yaw_y   = (PID_Yaw_xw_diff   * Yaw_PID_k[0]   * 10) + Yaw_I_Sum   + ((PID_Yaw_xw_diff   - Yaw_D_old  ) * Yaw_PID_k[2]   * 100);          //NOTDONE use defines for values
 8003c2c:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <_Z10update_PIDv+0x274>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <_Z10update_PIDv+0x258>)
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fd f8e0 	bl	8000dfc <__aeabi_fmul>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	4920      	ldr	r1, [pc, #128]	; (8003cc0 <_Z10update_PIDv+0x284>)
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fd f8db 	bl	8000dfc <__aeabi_fmul>
 8003c46:	4603      	mov	r3, r0
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <_Z10update_PIDv+0x278>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f7fc ffcb 	bl	8000bec <__addsf3>
 8003c56:	4603      	mov	r3, r0
 8003c58:	461c      	mov	r4, r3
 8003c5a:	4b0e      	ldr	r3, [pc, #56]	; (8003c94 <_Z10update_PIDv+0x258>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1e      	ldr	r2, [pc, #120]	; (8003cd8 <_Z10update_PIDv+0x29c>)
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	4611      	mov	r1, r2
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fc ffbf 	bl	8000be8 <__aeabi_fsub>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <_Z10update_PIDv+0x274>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f7fd f8c1 	bl	8000dfc <__aeabi_fmul>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4912      	ldr	r1, [pc, #72]	; (8003cc8 <_Z10update_PIDv+0x28c>)
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fd f8bc 	bl	8000dfc <__aeabi_fmul>
 8003c84:	4603      	mov	r3, r0
 8003c86:	4619      	mov	r1, r3
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f7fc ffaf 	bl	8000bec <__addsf3>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	e024      	b.n	8003cdc <_Z10update_PIDv+0x2a0>
 8003c92:	bf00      	nop
 8003c94:	20000520 	.word	0x20000520
 8003c98:	20000530 	.word	0x20000530
 8003c9c:	20000518 	.word	0x20000518
 8003ca0:	20000554 	.word	0x20000554
 8003ca4:	2000053c 	.word	0x2000053c
 8003ca8:	2000051c 	.word	0x2000051c
 8003cac:	20000558 	.word	0x20000558
 8003cb0:	20000548 	.word	0x20000548
 8003cb4:	2000055c 	.word	0x2000055c
 8003cb8:	43fa0000 	.word	0x43fa0000
 8003cbc:	c3fa0000 	.word	0xc3fa0000
 8003cc0:	41200000 	.word	0x41200000
 8003cc4:	20000560 	.word	0x20000560
 8003cc8:	42c80000 	.word	0x42c80000
 8003ccc:	20000524 	.word	0x20000524
 8003cd0:	20000564 	.word	0x20000564
 8003cd4:	20000528 	.word	0x20000528
 8003cd8:	20000568 	.word	0x20000568
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4b2d      	ldr	r3, [pc, #180]	; (8003d94 <_Z10update_PIDv+0x358>)
 8003ce0:	601a      	str	r2, [r3, #0]

  Pitch_D_old = PID_Pitch_xw_diff;                                                                                                      // differentiate
 8003ce2:	4b2d      	ldr	r3, [pc, #180]	; (8003d98 <_Z10update_PIDv+0x35c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a2d      	ldr	r2, [pc, #180]	; (8003d9c <_Z10update_PIDv+0x360>)
 8003ce8:	6013      	str	r3, [r2, #0]
  Roll_D_old  = PID_Roll_xw_diff ;
 8003cea:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <_Z10update_PIDv+0x364>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a2d      	ldr	r2, [pc, #180]	; (8003da4 <_Z10update_PIDv+0x368>)
 8003cf0:	6013      	str	r3, [r2, #0]
  Yaw_D_old   = PID_Yaw_xw_diff  ;
 8003cf2:	4b2d      	ldr	r3, [pc, #180]	; (8003da8 <_Z10update_PIDv+0x36c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a2d      	ldr	r2, [pc, #180]	; (8003dac <_Z10update_PIDv+0x370>)
 8003cf8:	6013      	str	r3, [r2, #0]

  if (PID_Pitch_y > 500 ) PID_Pitch_y = 500 ;
 8003cfa:	4b2d      	ldr	r3, [pc, #180]	; (8003db0 <_Z10update_PIDv+0x374>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	492d      	ldr	r1, [pc, #180]	; (8003db4 <_Z10update_PIDv+0x378>)
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fd fa37 	bl	8001174 <__aeabi_fcmpgt>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <_Z10update_PIDv+0x2d6>
 8003d0c:	4b28      	ldr	r3, [pc, #160]	; (8003db0 <_Z10update_PIDv+0x374>)
 8003d0e:	4a29      	ldr	r2, [pc, #164]	; (8003db4 <_Z10update_PIDv+0x378>)
 8003d10:	601a      	str	r2, [r3, #0]
  if (PID_Roll_y  > 500 ) PID_Roll_y  = 500 ;                            //NOTDONE use defines for values
 8003d12:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <_Z10update_PIDv+0x37c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4927      	ldr	r1, [pc, #156]	; (8003db4 <_Z10update_PIDv+0x378>)
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fd fa2b 	bl	8001174 <__aeabi_fcmpgt>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <_Z10update_PIDv+0x2ee>
 8003d24:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <_Z10update_PIDv+0x37c>)
 8003d26:	4a23      	ldr	r2, [pc, #140]	; (8003db4 <_Z10update_PIDv+0x378>)
 8003d28:	601a      	str	r2, [r3, #0]
  if (PID_Yaw_y   > 1000) PID_Yaw_y   = 1000;
 8003d2a:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <_Z10update_PIDv+0x358>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4923      	ldr	r1, [pc, #140]	; (8003dbc <_Z10update_PIDv+0x380>)
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fd fa1f 	bl	8001174 <__aeabi_fcmpgt>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <_Z10update_PIDv+0x306>
 8003d3c:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <_Z10update_PIDv+0x358>)
 8003d3e:	4a1f      	ldr	r2, [pc, #124]	; (8003dbc <_Z10update_PIDv+0x380>)
 8003d40:	601a      	str	r2, [r3, #0]
  if (PID_Pitch_y < -500) PID_Pitch_y = -500;
 8003d42:	4b1b      	ldr	r3, [pc, #108]	; (8003db0 <_Z10update_PIDv+0x374>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	491e      	ldr	r1, [pc, #120]	; (8003dc0 <_Z10update_PIDv+0x384>)
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fd f9f5 	bl	8001138 <__aeabi_fcmplt>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <_Z10update_PIDv+0x31e>
 8003d54:	4b16      	ldr	r3, [pc, #88]	; (8003db0 <_Z10update_PIDv+0x374>)
 8003d56:	4a1a      	ldr	r2, [pc, #104]	; (8003dc0 <_Z10update_PIDv+0x384>)
 8003d58:	601a      	str	r2, [r3, #0]
  if (PID_Roll_y  < -500) PID_Roll_y  = -500;
 8003d5a:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <_Z10update_PIDv+0x37c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4918      	ldr	r1, [pc, #96]	; (8003dc0 <_Z10update_PIDv+0x384>)
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fd f9e9 	bl	8001138 <__aeabi_fcmplt>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <_Z10update_PIDv+0x336>
 8003d6c:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <_Z10update_PIDv+0x37c>)
 8003d6e:	4a14      	ldr	r2, [pc, #80]	; (8003dc0 <_Z10update_PIDv+0x384>)
 8003d70:	601a      	str	r2, [r3, #0]
  if (PID_Yaw_y   <    0) PID_Yaw_y   =    0;
 8003d72:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <_Z10update_PIDv+0x358>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f04f 0100 	mov.w	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fd f9dc 	bl	8001138 <__aeabi_fcmplt>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d100      	bne.n	8003d88 <_Z10update_PIDv+0x34c>
}
 8003d86:	e003      	b.n	8003d90 <_Z10update_PIDv+0x354>
  if (PID_Yaw_y   <    0) PID_Yaw_y   =    0;
 8003d88:	4b02      	ldr	r3, [pc, #8]	; (8003d94 <_Z10update_PIDv+0x358>)
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
}
 8003d90:	bf00      	nop
 8003d92:	bd98      	pop	{r3, r4, r7, pc}
 8003d94:	2000052c 	.word	0x2000052c
 8003d98:	20000518 	.word	0x20000518
 8003d9c:	20000560 	.word	0x20000560
 8003da0:	2000051c 	.word	0x2000051c
 8003da4:	20000564 	.word	0x20000564
 8003da8:	20000520 	.word	0x20000520
 8003dac:	20000568 	.word	0x20000568
 8003db0:	20000524 	.word	0x20000524
 8003db4:	43fa0000 	.word	0x43fa0000
 8003db8:	20000528 	.word	0x20000528
 8003dbc:	447a0000 	.word	0x447a0000
 8003dc0:	c3fa0000 	.word	0xc3fa0000

08003dc4 <_Z12getPIDValuesv>:
 * @brief This method extracts the PID values for PITCH,ROLL,YAW that can be live tuned on the remote
 * 
 * --Custom Method!
 */
void getPIDValues()
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  if (tuningMode == 1)
 8003dc8:	4baa      	ldr	r3, [pc, #680]	; (8004074 <_Z12getPIDValuesv+0x2b0>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	f040 81d8 	bne.w	8004182 <_Z12getPIDValuesv+0x3be>
  {
    if ((SBUS_Channels[5] <= 1000) & (SBUS_Channels[5] >= 990))
 8003dd2:	4ba9      	ldr	r3, [pc, #676]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003dd4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003dd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ddc:	bfd4      	ite	le
 8003dde:	2301      	movle	r3, #1
 8003de0:	2300      	movgt	r3, #0
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	4ba4      	ldr	r3, [pc, #656]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003de6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003dea:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003dee:	428b      	cmp	r3, r1
 8003df0:	bfcc      	ite	gt
 8003df2:	2301      	movgt	r3, #1
 8003df4:	2300      	movle	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	4013      	ands	r3, r2
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8082 	beq.w	8003f06 <_Z12getPIDValuesv+0x142>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Pitch_PID_k[0] = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003e02:	4b9d      	ldr	r3, [pc, #628]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003e04:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e0c:	bfd4      	ite	le
 8003e0e:	2301      	movle	r3, #1
 8003e10:	2300      	movgt	r3, #0
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	4b98      	ldr	r3, [pc, #608]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003e16:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e1a:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003e1e:	428b      	cmp	r3, r1
 8003e20:	bfcc      	ite	gt
 8003e22:	2301      	movgt	r3, #1
 8003e24:	2300      	movle	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	4013      	ands	r3, r2
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d014      	beq.n	8003e5a <_Z12getPIDValuesv+0x96>
 8003e30:	4b91      	ldr	r3, [pc, #580]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003e32:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fc ff8c 	bl	8000d54 <__aeabi_i2f>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	498f      	ldr	r1, [pc, #572]	; (800407c <_Z12getPIDValuesv+0x2b8>)
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fd f88f 	bl	8000f64 <__aeabi_fdiv>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fc fecd 	bl	8000bec <__addsf3>
 8003e52:	4603      	mov	r3, r0
 8003e54:	461a      	mov	r2, r3
 8003e56:	4b8a      	ldr	r3, [pc, #552]	; (8004080 <_Z12getPIDValuesv+0x2bc>)
 8003e58:	601a      	str	r2, [r3, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Pitch_PID_k[1] = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003e5a:	4b87      	ldr	r3, [pc, #540]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003e5c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e60:	2b0a      	cmp	r3, #10
 8003e62:	bfd4      	ite	le
 8003e64:	2301      	movle	r3, #1
 8003e66:	2300      	movgt	r3, #0
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	4b83      	ldr	r3, [pc, #524]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003e6c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e70:	f113 0f0a 	cmn.w	r3, #10
 8003e74:	bfac      	ite	ge
 8003e76:	2301      	movge	r3, #1
 8003e78:	2300      	movlt	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d014      	beq.n	8003eae <_Z12getPIDValuesv+0xea>
 8003e84:	4b7c      	ldr	r3, [pc, #496]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003e86:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fc ff62 	bl	8000d54 <__aeabi_i2f>
 8003e90:	4603      	mov	r3, r0
 8003e92:	497a      	ldr	r1, [pc, #488]	; (800407c <_Z12getPIDValuesv+0x2b8>)
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fd f865 	bl	8000f64 <__aeabi_fdiv>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fc fea3 	bl	8000bec <__addsf3>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b75      	ldr	r3, [pc, #468]	; (8004080 <_Z12getPIDValuesv+0x2bc>)
 8003eac:	605a      	str	r2, [r3, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Pitch_PID_k[2] = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values       
 8003eae:	4b72      	ldr	r3, [pc, #456]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003eb0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003eb4:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	bfb4      	ite	lt
 8003ebc:	2301      	movlt	r3, #1
 8003ebe:	2300      	movge	r3, #0
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	4b6d      	ldr	r3, [pc, #436]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003ec4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ec8:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003ecc:	bfac      	ite	ge
 8003ece:	2301      	movge	r3, #1
 8003ed0:	2300      	movlt	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d014      	beq.n	8003f06 <_Z12getPIDValuesv+0x142>
 8003edc:	4b66      	ldr	r3, [pc, #408]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003ede:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fc ff36 	bl	8000d54 <__aeabi_i2f>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4964      	ldr	r1, [pc, #400]	; (800407c <_Z12getPIDValuesv+0x2b8>)
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fd f839 	bl	8000f64 <__aeabi_fdiv>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fc fe77 	bl	8000bec <__addsf3>
 8003efe:	4603      	mov	r3, r0
 8003f00:	461a      	mov	r2, r3
 8003f02:	4b5f      	ldr	r3, [pc, #380]	; (8004080 <_Z12getPIDValuesv+0x2bc>)
 8003f04:	609a      	str	r2, [r3, #8]
    }
    if ((SBUS_Channels[5] <= 10) & (SBUS_Channels[5] >= -10))
 8003f06:	4b5c      	ldr	r3, [pc, #368]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003f08:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003f0c:	2b0a      	cmp	r3, #10
 8003f0e:	bfd4      	ite	le
 8003f10:	2301      	movle	r3, #1
 8003f12:	2300      	movgt	r3, #0
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	4b58      	ldr	r3, [pc, #352]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003f18:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003f1c:	f113 0f0a 	cmn.w	r3, #10
 8003f20:	bfac      	ite	ge
 8003f22:	2301      	movge	r3, #1
 8003f24:	2300      	movlt	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	4013      	ands	r3, r2
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 8082 	beq.w	8004036 <_Z12getPIDValuesv+0x272>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Roll_PID_k[0]  = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003f32:	4b51      	ldr	r3, [pc, #324]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003f34:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f3c:	bfd4      	ite	le
 8003f3e:	2301      	movle	r3, #1
 8003f40:	2300      	movgt	r3, #0
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	4b4c      	ldr	r3, [pc, #304]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003f46:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003f4a:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003f4e:	428b      	cmp	r3, r1
 8003f50:	bfcc      	ite	gt
 8003f52:	2301      	movgt	r3, #1
 8003f54:	2300      	movle	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	4013      	ands	r3, r2
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d014      	beq.n	8003f8a <_Z12getPIDValuesv+0x1c6>
 8003f60:	4b45      	ldr	r3, [pc, #276]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003f62:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc fef4 	bl	8000d54 <__aeabi_i2f>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	4943      	ldr	r1, [pc, #268]	; (800407c <_Z12getPIDValuesv+0x2b8>)
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fc fff7 	bl	8000f64 <__aeabi_fdiv>
 8003f76:	4603      	mov	r3, r0
 8003f78:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc fe35 	bl	8000bec <__addsf3>
 8003f82:	4603      	mov	r3, r0
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b3f      	ldr	r3, [pc, #252]	; (8004084 <_Z12getPIDValuesv+0x2c0>)
 8003f88:	601a      	str	r2, [r3, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Roll_PID_k[1]  = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8003f8a:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003f8c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003f90:	2b0a      	cmp	r3, #10
 8003f92:	bfd4      	ite	le
 8003f94:	2301      	movle	r3, #1
 8003f96:	2300      	movgt	r3, #0
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	4b37      	ldr	r3, [pc, #220]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003f9c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003fa0:	f113 0f0a 	cmn.w	r3, #10
 8003fa4:	bfac      	ite	ge
 8003fa6:	2301      	movge	r3, #1
 8003fa8:	2300      	movlt	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	4013      	ands	r3, r2
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d014      	beq.n	8003fde <_Z12getPIDValuesv+0x21a>
 8003fb4:	4b30      	ldr	r3, [pc, #192]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003fb6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fc feca 	bl	8000d54 <__aeabi_i2f>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	492e      	ldr	r1, [pc, #184]	; (800407c <_Z12getPIDValuesv+0x2b8>)
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fc ffcd 	bl	8000f64 <__aeabi_fdiv>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fc fe0b 	bl	8000bec <__addsf3>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4b2a      	ldr	r3, [pc, #168]	; (8004084 <_Z12getPIDValuesv+0x2c0>)
 8003fdc:	605a      	str	r2, [r3, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Roll_PID_k[2]  = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values       
 8003fde:	4b26      	ldr	r3, [pc, #152]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003fe0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003fe4:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	bfb4      	ite	lt
 8003fec:	2301      	movlt	r3, #1
 8003fee:	2300      	movge	r3, #0
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4b21      	ldr	r3, [pc, #132]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8003ff4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ff8:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003ffc:	bfac      	ite	ge
 8003ffe:	2301      	movge	r3, #1
 8004000:	2300      	movlt	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	4013      	ands	r3, r2
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d014      	beq.n	8004036 <_Z12getPIDValuesv+0x272>
 800400c:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 800400e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004012:	4618      	mov	r0, r3
 8004014:	f7fc fe9e 	bl	8000d54 <__aeabi_i2f>
 8004018:	4603      	mov	r3, r0
 800401a:	4918      	ldr	r1, [pc, #96]	; (800407c <_Z12getPIDValuesv+0x2b8>)
 800401c:	4618      	mov	r0, r3
 800401e:	f7fc ffa1 	bl	8000f64 <__aeabi_fdiv>
 8004022:	4603      	mov	r3, r0
 8004024:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004028:	4618      	mov	r0, r3
 800402a:	f7fc fddf 	bl	8000bec <__addsf3>
 800402e:	4603      	mov	r3, r0
 8004030:	461a      	mov	r2, r3
 8004032:	4b14      	ldr	r3, [pc, #80]	; (8004084 <_Z12getPIDValuesv+0x2c0>)
 8004034:	609a      	str	r2, [r3, #8]
    }
    if ((SBUS_Channels[5] <= -990) & (SBUS_Channels[5] >= -1000))
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8004038:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800403c:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8004040:	4293      	cmp	r3, r2
 8004042:	bfb4      	ite	lt
 8004044:	2301      	movlt	r3, #1
 8004046:	2300      	movge	r3, #0
 8004048:	b2da      	uxtb	r2, r3
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 800404c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004050:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004054:	bfac      	ite	ge
 8004056:	2301      	movge	r3, #1
 8004058:	2300      	movlt	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	4013      	ands	r3, r2
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 808e 	beq.w	8004182 <_Z12getPIDValuesv+0x3be>
    {
      if ((SBUS_Channels[6] <= 1000) & (SBUS_Channels[6] >=   990)) Yaw_PID_k[0]   = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 8004066:	4b04      	ldr	r3, [pc, #16]	; (8004078 <_Z12getPIDValuesv+0x2b4>)
 8004068:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800406c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004070:	e00a      	b.n	8004088 <_Z12getPIDValuesv+0x2c4>
 8004072:	bf00      	nop
 8004074:	20000000 	.word	0x20000000
 8004078:	2000065c 	.word	0x2000065c
 800407c:	44fa0000 	.word	0x44fa0000
 8004080:	20000530 	.word	0x20000530
 8004084:	2000053c 	.word	0x2000053c
 8004088:	bfd4      	ite	le
 800408a:	2301      	movle	r3, #1
 800408c:	2300      	movgt	r3, #0
 800408e:	b2da      	uxtb	r2, r3
 8004090:	4b3d      	ldr	r3, [pc, #244]	; (8004188 <_Z12getPIDValuesv+0x3c4>)
 8004092:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004096:	f240 31dd 	movw	r1, #989	; 0x3dd
 800409a:	428b      	cmp	r3, r1
 800409c:	bfcc      	ite	gt
 800409e:	2301      	movgt	r3, #1
 80040a0:	2300      	movle	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	4013      	ands	r3, r2
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d014      	beq.n	80040d6 <_Z12getPIDValuesv+0x312>
 80040ac:	4b36      	ldr	r3, [pc, #216]	; (8004188 <_Z12getPIDValuesv+0x3c4>)
 80040ae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fc fe4e 	bl	8000d54 <__aeabi_i2f>
 80040b8:	4603      	mov	r3, r0
 80040ba:	4934      	ldr	r1, [pc, #208]	; (800418c <_Z12getPIDValuesv+0x3c8>)
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc ff51 	bl	8000f64 <__aeabi_fdiv>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fc fd8f 	bl	8000bec <__addsf3>
 80040ce:	4603      	mov	r3, r0
 80040d0:	461a      	mov	r2, r3
 80040d2:	4b2f      	ldr	r3, [pc, #188]	; (8004190 <_Z12getPIDValuesv+0x3cc>)
 80040d4:	601a      	str	r2, [r3, #0]
      if ((SBUS_Channels[6] <=   10) & (SBUS_Channels[6] >=   -10)) Yaw_PID_k[1]   = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values
 80040d6:	4b2c      	ldr	r3, [pc, #176]	; (8004188 <_Z12getPIDValuesv+0x3c4>)
 80040d8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80040dc:	2b0a      	cmp	r3, #10
 80040de:	bfd4      	ite	le
 80040e0:	2301      	movle	r3, #1
 80040e2:	2300      	movgt	r3, #0
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	4b28      	ldr	r3, [pc, #160]	; (8004188 <_Z12getPIDValuesv+0x3c4>)
 80040e8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80040ec:	f113 0f0a 	cmn.w	r3, #10
 80040f0:	bfac      	ite	ge
 80040f2:	2301      	movge	r3, #1
 80040f4:	2300      	movlt	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	4013      	ands	r3, r2
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d014      	beq.n	800412a <_Z12getPIDValuesv+0x366>
 8004100:	4b21      	ldr	r3, [pc, #132]	; (8004188 <_Z12getPIDValuesv+0x3c4>)
 8004102:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fc fe24 	bl	8000d54 <__aeabi_i2f>
 800410c:	4603      	mov	r3, r0
 800410e:	491f      	ldr	r1, [pc, #124]	; (800418c <_Z12getPIDValuesv+0x3c8>)
 8004110:	4618      	mov	r0, r3
 8004112:	f7fc ff27 	bl	8000f64 <__aeabi_fdiv>
 8004116:	4603      	mov	r3, r0
 8004118:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800411c:	4618      	mov	r0, r3
 800411e:	f7fc fd65 	bl	8000bec <__addsf3>
 8004122:	4603      	mov	r3, r0
 8004124:	461a      	mov	r2, r3
 8004126:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <_Z12getPIDValuesv+0x3cc>)
 8004128:	605a      	str	r2, [r3, #4]
      if ((SBUS_Channels[6] <= -990) & (SBUS_Channels[6] >= -1000)) Yaw_PID_k[2]   = 0.5 + ((float)SBUS_Channels[7] / 2000);    //NOTDONE use defines for values       
 800412a:	4b17      	ldr	r3, [pc, #92]	; (8004188 <_Z12getPIDValuesv+0x3c4>)
 800412c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004130:	f46f 7277 	mvn.w	r2, #988	; 0x3dc
 8004134:	4293      	cmp	r3, r2
 8004136:	bfb4      	ite	lt
 8004138:	2301      	movlt	r3, #1
 800413a:	2300      	movge	r3, #0
 800413c:	b2da      	uxtb	r2, r3
 800413e:	4b12      	ldr	r3, [pc, #72]	; (8004188 <_Z12getPIDValuesv+0x3c4>)
 8004140:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004144:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004148:	bfac      	ite	ge
 800414a:	2301      	movge	r3, #1
 800414c:	2300      	movlt	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	4013      	ands	r3, r2
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d014      	beq.n	8004182 <_Z12getPIDValuesv+0x3be>
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <_Z12getPIDValuesv+0x3c4>)
 800415a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fc fdf8 	bl	8000d54 <__aeabi_i2f>
 8004164:	4603      	mov	r3, r0
 8004166:	4909      	ldr	r1, [pc, #36]	; (800418c <_Z12getPIDValuesv+0x3c8>)
 8004168:	4618      	mov	r0, r3
 800416a:	f7fc fefb 	bl	8000f64 <__aeabi_fdiv>
 800416e:	4603      	mov	r3, r0
 8004170:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004174:	4618      	mov	r0, r3
 8004176:	f7fc fd39 	bl	8000bec <__addsf3>
 800417a:	4603      	mov	r3, r0
 800417c:	461a      	mov	r2, r3
 800417e:	4b04      	ldr	r3, [pc, #16]	; (8004190 <_Z12getPIDValuesv+0x3cc>)
 8004180:	609a      	str	r2, [r3, #8]
    }
  }
}
 8004182:	bf00      	nop
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	2000065c 	.word	0x2000065c
 800418c:	44fa0000 	.word	0x44fa0000
 8004190:	20000548 	.word	0x20000548

08004194 <_Z14getAngleOffsetv>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void getAngleOffset()
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  if (tuningMode == 2)
 8004198:	4b2a      	ldr	r3, [pc, #168]	; (8004244 <_Z14getAngleOffsetv+0xb0>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d14e      	bne.n	800423e <_Z14getAngleOffsetv+0xaa>
  {
    if ((SBUS_Channels[5] <= 1000) & (SBUS_Channels[5] >= 990))
 80041a0:	4b29      	ldr	r3, [pc, #164]	; (8004248 <_Z14getAngleOffsetv+0xb4>)
 80041a2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80041a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041aa:	bfd4      	ite	le
 80041ac:	2301      	movle	r3, #1
 80041ae:	2300      	movgt	r3, #0
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	4b25      	ldr	r3, [pc, #148]	; (8004248 <_Z14getAngleOffsetv+0xb4>)
 80041b4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80041b8:	f240 31dd 	movw	r1, #989	; 0x3dd
 80041bc:	428b      	cmp	r3, r1
 80041be:	bfcc      	ite	gt
 80041c0:	2301      	movgt	r3, #1
 80041c2:	2300      	movle	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	4013      	ands	r3, r2
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00e      	beq.n	80041ec <_Z14getAngleOffsetv+0x58>
    {
      mainMotorMaxOffset = (((float)SBUS_Channels[7]) / 10);
 80041ce:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <_Z14getAngleOffsetv+0xb4>)
 80041d0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fc fdbd 	bl	8000d54 <__aeabi_i2f>
 80041da:	4603      	mov	r3, r0
 80041dc:	491b      	ldr	r1, [pc, #108]	; (800424c <_Z14getAngleOffsetv+0xb8>)
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fc fec0 	bl	8000f64 <__aeabi_fdiv>
 80041e4:	4603      	mov	r3, r0
 80041e6:	461a      	mov	r2, r3
 80041e8:	4b19      	ldr	r3, [pc, #100]	; (8004250 <_Z14getAngleOffsetv+0xbc>)
 80041ea:	601a      	str	r2, [r3, #0]
    }
    if ((SBUS_Channels[5] <= 10) & (SBUS_Channels[5] >= -10))
 80041ec:	4b16      	ldr	r3, [pc, #88]	; (8004248 <_Z14getAngleOffsetv+0xb4>)
 80041ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80041f2:	2b0a      	cmp	r3, #10
 80041f4:	bfd4      	ite	le
 80041f6:	2301      	movle	r3, #1
 80041f8:	2300      	movgt	r3, #0
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	4b12      	ldr	r3, [pc, #72]	; (8004248 <_Z14getAngleOffsetv+0xb4>)
 80041fe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004202:	f113 0f0a 	cmn.w	r3, #10
 8004206:	bfac      	ite	ge
 8004208:	2301      	movge	r3, #1
 800420a:	2300      	movlt	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	4013      	ands	r3, r2
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d013      	beq.n	800423e <_Z14getAngleOffsetv+0xaa>
    {
      mainMotorStartOffset = 200 + (((float)SBUS_Channels[7]) / 5);
 8004216:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <_Z14getAngleOffsetv+0xb4>)
 8004218:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800421c:	4618      	mov	r0, r3
 800421e:	f7fc fd99 	bl	8000d54 <__aeabi_i2f>
 8004222:	4603      	mov	r3, r0
 8004224:	490b      	ldr	r1, [pc, #44]	; (8004254 <_Z14getAngleOffsetv+0xc0>)
 8004226:	4618      	mov	r0, r3
 8004228:	f7fc fe9c 	bl	8000f64 <__aeabi_fdiv>
 800422c:	4603      	mov	r3, r0
 800422e:	490a      	ldr	r1, [pc, #40]	; (8004258 <_Z14getAngleOffsetv+0xc4>)
 8004230:	4618      	mov	r0, r3
 8004232:	f7fc fcdb 	bl	8000bec <__addsf3>
 8004236:	4603      	mov	r3, r0
 8004238:	461a      	mov	r2, r3
 800423a:	4b08      	ldr	r3, [pc, #32]	; (800425c <_Z14getAngleOffsetv+0xc8>)
 800423c:	601a      	str	r2, [r3, #0]
    }
  }
}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20000000 	.word	0x20000000
 8004248:	2000065c 	.word	0x2000065c
 800424c:	41200000 	.word	0x41200000
 8004250:	2000003c 	.word	0x2000003c
 8004254:	40a00000 	.word	0x40a00000
 8004258:	43480000 	.word	0x43480000
 800425c:	20000038 	.word	0x20000038

08004260 <_Z16switchTuningModev>:
 * @brief //NOTDONE
 * 
 * --Custom Method!
 */
void switchTuningMode()
{
 8004260:	b598      	push	{r3, r4, r7, lr}
 8004262:	af00      	add	r7, sp, #0
  if ((buttonPressed == false) & (HAL_GPIO_ReadPin(ONBOARD_BUTTON_2_GPIO_Port, ONBOARD_BUTTON_2_Pin) == true))
 8004264:	4b25      	ldr	r3, [pc, #148]	; (80042fc <_Z16switchTuningModev+0x9c>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2dc      	uxtb	r4, r3
 8004272:	2102      	movs	r1, #2
 8004274:	4822      	ldr	r0, [pc, #136]	; (8004300 <_Z16switchTuningModev+0xa0>)
 8004276:	f002 fe8b 	bl	8006f90 <HAL_GPIO_ReadPin>
 800427a:	4603      	mov	r3, r0
 800427c:	2b01      	cmp	r3, #1
 800427e:	bf0c      	ite	eq
 8004280:	2301      	moveq	r3, #1
 8004282:	2300      	movne	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	4023      	ands	r3, r4
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf14      	ite	ne
 800428e:	2301      	movne	r3, #1
 8004290:	2300      	moveq	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d011      	beq.n	80042bc <_Z16switchTuningModev+0x5c>
  {
    if (tuningMode == 1) tuningMode = 2;
 8004298:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <_Z16switchTuningModev+0xa4>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d103      	bne.n	80042a8 <_Z16switchTuningModev+0x48>
 80042a0:	4b18      	ldr	r3, [pc, #96]	; (8004304 <_Z16switchTuningModev+0xa4>)
 80042a2:	2202      	movs	r2, #2
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	e002      	b.n	80042ae <_Z16switchTuningModev+0x4e>
    else tuningMode = 1;
 80042a8:	4b16      	ldr	r3, [pc, #88]	; (8004304 <_Z16switchTuningModev+0xa4>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);
 80042ae:	2120      	movs	r1, #32
 80042b0:	4813      	ldr	r0, [pc, #76]	; (8004300 <_Z16switchTuningModev+0xa0>)
 80042b2:	f002 fe9c 	bl	8006fee <HAL_GPIO_TogglePin>
    buttonPressed = true;
 80042b6:	4b11      	ldr	r3, [pc, #68]	; (80042fc <_Z16switchTuningModev+0x9c>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	701a      	strb	r2, [r3, #0]
  }
  if ((buttonPressed == true) & (HAL_GPIO_ReadPin(ONBOARD_BUTTON_2_GPIO_Port, ONBOARD_BUTTON_2_Pin) == false))
 80042bc:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <_Z16switchTuningModev+0x9c>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2dc      	uxtb	r4, r3
 80042ca:	2102      	movs	r1, #2
 80042cc:	480c      	ldr	r0, [pc, #48]	; (8004300 <_Z16switchTuningModev+0xa0>)
 80042ce:	f002 fe5f 	bl	8006f90 <HAL_GPIO_ReadPin>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	4023      	ands	r3, r4
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	bf14      	ite	ne
 80042e6:	2301      	movne	r3, #1
 80042e8:	2300      	moveq	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <_Z16switchTuningModev+0x96>
  {
    buttonPressed = false;
 80042f0:	4b02      	ldr	r3, [pc, #8]	; (80042fc <_Z16switchTuningModev+0x9c>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	701a      	strb	r2, [r3, #0]
  }
 80042f6:	bf00      	nop
 80042f8:	bd98      	pop	{r3, r4, r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000514 	.word	0x20000514
 8004300:	40020000 	.word	0x40020000
 8004304:	20000000 	.word	0x20000000

08004308 <_Z16SBUS_RecieveBitsv>:
 * for later processing.
 * 
 * --Custom Method!
 */
void SBUS_RecieveBits()
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
  TIM4->CCR1 = (uint16_t)(fastPPM_CenterTime + (smoothMainMotorSpeed * PPMmainMotorScaler));
 800430e:	4b32      	ldr	r3, [pc, #200]	; (80043d8 <_Z16SBUS_RecieveBitsv+0xd0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004316:	4618      	mov	r0, r3
 8004318:	f7fc fd70 	bl	8000dfc <__aeabi_fmul>
 800431c:	4603      	mov	r3, r0
 800431e:	492f      	ldr	r1, [pc, #188]	; (80043dc <_Z16SBUS_RecieveBitsv+0xd4>)
 8004320:	4618      	mov	r0, r3
 8004322:	f7fc fc63 	bl	8000bec <__addsf3>
 8004326:	4603      	mov	r3, r0
 8004328:	4618      	mov	r0, r3
 800432a:	f7fc ff69 	bl	8001200 <__aeabi_f2uiz>
 800432e:	4603      	mov	r3, r0
 8004330:	b29a      	uxth	r2, r3
 8004332:	4b2b      	ldr	r3, [pc, #172]	; (80043e0 <_Z16SBUS_RecieveBitsv+0xd8>)
 8004334:	635a      	str	r2, [r3, #52]	; 0x34
  SBUS_timerCount = TIM11->CNT + SBUS_StartTimeOffset;                                                      //get current clock count from TIM11 + time offset
 8004336:	4b2b      	ldr	r3, [pc, #172]	; (80043e4 <_Z16SBUS_RecieveBitsv+0xdc>)
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b03      	subs	r3, #3
 800433e:	b29a      	uxth	r2, r3
 8004340:	4b29      	ldr	r3, [pc, #164]	; (80043e8 <_Z16SBUS_RecieveBitsv+0xe0>)
 8004342:	801a      	strh	r2, [r3, #0]
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)
 8004344:	2301      	movs	r3, #1
 8004346:	607b      	str	r3, [r7, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b8f      	cmp	r3, #143	; 0x8f
 800434c:	d83a      	bhi.n	80043c4 <_Z16SBUS_RecieveBitsv+0xbc>
  {
    ONBOARD_WRITE_3_GPIO_Port->BSRR = (uint32_t)ONBOARD_WRITE_3_Pin << 16U;                                 //NOTDONE debug
 800434e:	4b27      	ldr	r3, [pc, #156]	; (80043ec <_Z16SBUS_RecieveBitsv+0xe4>)
 8004350:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004354:	619a      	str	r2, [r3, #24]
    SBUS_RxBitString[i] = ((ONBOARD_READ_IT_3_GPIO_Port->IDR & ONBOARD_READ_IT_3_Pin) != 0 ? true : false); //if the SBUS pin is HIGH then the value is 1 else 0
 8004356:	4b26      	ldr	r3, [pc, #152]	; (80043f0 <_Z16SBUS_RecieveBitsv+0xe8>)
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	bf14      	ite	ne
 8004362:	2301      	movne	r3, #1
 8004364:	2300      	moveq	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	4619      	mov	r1, r3
 800436a:	4a22      	ldr	r2, [pc, #136]	; (80043f4 <_Z16SBUS_RecieveBitsv+0xec>)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4413      	add	r3, r2
 8004370:	460a      	mov	r2, r1
 8004372:	701a      	strb	r2, [r3, #0]
    ONBOARD_WRITE_3_GPIO_Port->BSRR = ONBOARD_WRITE_3_Pin;                                                  //NOTDONE debug
 8004374:	4b1d      	ldr	r3, [pc, #116]	; (80043ec <_Z16SBUS_RecieveBitsv+0xe4>)
 8004376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800437a:	619a      	str	r2, [r3, #24]
    while ((TIM11->CNT - SBUS_timerCount) < SBUS_ClockCyclesPerBit)                                         //wait until x clock pulses passed
 800437c:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <_Z16SBUS_RecieveBitsv+0xdc>)
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	4a19      	ldr	r2, [pc, #100]	; (80043e8 <_Z16SBUS_RecieveBitsv+0xe0>)
 8004382:	8812      	ldrh	r2, [r2, #0]
 8004384:	1a9a      	subs	r2, r3, r2
 8004386:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <_Z16SBUS_RecieveBitsv+0xdc>)
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	3301      	adds	r3, #1
 800438c:	21a0      	movs	r1, #160	; 0xa0
 800438e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004392:	429a      	cmp	r2, r3
 8004394:	bf34      	ite	cc
 8004396:	2301      	movcc	r3, #1
 8004398:	2300      	movcs	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d000      	beq.n	80043a2 <_Z16SBUS_RecieveBitsv+0x9a>
 80043a0:	e7ec      	b.n	800437c <_Z16SBUS_RecieveBitsv+0x74>
    {
    }
    SBUS_timerCount += SBUS_ClockCyclesPerBit;
 80043a2:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <_Z16SBUS_RecieveBitsv+0xdc>)
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	3301      	adds	r3, #1
 80043a8:	22a0      	movs	r2, #160	; 0xa0
 80043aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <_Z16SBUS_RecieveBitsv+0xe0>)
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	4413      	add	r3, r2
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <_Z16SBUS_RecieveBitsv+0xe0>)
 80043ba:	801a      	strh	r2, [r3, #0]
  for (size_t i = 1; i < SBUS_NumberOfBits; i++)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3301      	adds	r3, #1
 80043c0:	607b      	str	r3, [r7, #4]
 80043c2:	e7c1      	b.n	8004348 <_Z16SBUS_RecieveBitsv+0x40>
  }
  SBUS_RxBitString[0] = true;                                                                               //sets the first value in the array to 1 as the interrupt is not fast
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <_Z16SBUS_RecieveBitsv+0xec>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	701a      	strb	r2, [r3, #0]
  SBUSNewPackage = true;                                                                                    //\->enough to be able to measure the pin for the first bit
 80043ca:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <_Z16SBUS_RecieveBitsv+0xf0>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	200007f0 	.word	0x200007f0
 80043dc:	44bb8000 	.word	0x44bb8000
 80043e0:	40000800 	.word	0x40000800
 80043e4:	40014800 	.word	0x40014800
 80043e8:	200005ac 	.word	0x200005ac
 80043ec:	40020000 	.word	0x40020000
 80043f0:	40020800 	.word	0x40020800
 80043f4:	200005b0 	.word	0x200005b0
 80043f8:	2000066c 	.word	0x2000066c

080043fc <_Z19SBUS_postProcessingv>:
 * channels.
 * 
 * --Custom Method!
 */
void SBUS_postProcessing()
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
  //verify:

  SBUS_CorruptedPackage = false;                                                                                          //reset corrupted package flag
 8004402:	4b85      	ldr	r3, [pc, #532]	; (8004618 <_Z19SBUS_postProcessingv+0x21c>)
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)                                                                         //repeat for each byte
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	2b0b      	cmp	r3, #11
 8004410:	d85b      	bhi.n	80044ca <_Z19SBUS_postProcessingv+0xce>
  {
    if ((SBUS_RxBitString[0 + (i * SBUS_BitsPerByte)] == true) & (SBUS_RxBitString[10 + (i * SBUS_BitsPerByte)] == false) & (SBUS_RxBitString[11 + (i * SBUS_BitsPerByte)] == false))
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	4613      	mov	r3, r2
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	461a      	mov	r2, r3
 800441e:	4b7f      	ldr	r3, [pc, #508]	; (800461c <_Z19SBUS_postProcessingv+0x220>)
 8004420:	5c9b      	ldrb	r3, [r3, r2]
 8004422:	2b01      	cmp	r3, #1
 8004424:	bf0c      	ite	eq
 8004426:	2301      	moveq	r3, #1
 8004428:	2300      	movne	r3, #0
 800442a:	b2d9      	uxtb	r1, r3
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	4613      	mov	r3, r2
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	330a      	adds	r3, #10
 8004438:	4a78      	ldr	r2, [pc, #480]	; (800461c <_Z19SBUS_postProcessingv+0x220>)
 800443a:	5cd3      	ldrb	r3, [r2, r3]
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	400b      	ands	r3, r1
 8004448:	b2db      	uxtb	r3, r3
 800444a:	4619      	mov	r1, r3
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	4613      	mov	r3, r2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	330b      	adds	r3, #11
 8004458:	4a70      	ldr	r2, [pc, #448]	; (800461c <_Z19SBUS_postProcessingv+0x220>)
 800445a:	5cd3      	ldrb	r3, [r2, r3]
 800445c:	2b00      	cmp	r3, #0
 800445e:	bf0c      	ite	eq
 8004460:	2301      	moveq	r3, #1
 8004462:	2300      	movne	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	400b      	ands	r3, r1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d027      	beq.n	80044bc <_Z19SBUS_postProcessingv+0xc0>
    {                                                                                                                     //^->check start bit, 2 stop bit
      uint8_t parityCheck = false;
 800446c:	2300      	movs	r3, #0
 800446e:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                                                                      //generate parity from 8 bits
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2b07      	cmp	r3, #7
 8004478:	d811      	bhi.n	800449e <_Z19SBUS_postProcessingv+0xa2>
      {
        parityCheck ^= SBUS_RxBitString[1 + x + (i * SBUS_BitsPerByte)];
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	4613      	mov	r3, r2
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	461a      	mov	r2, r3
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	4413      	add	r3, r2
 800448a:	3301      	adds	r3, #1
 800448c:	4a63      	ldr	r2, [pc, #396]	; (800461c <_Z19SBUS_postProcessingv+0x220>)
 800448e:	5cd2      	ldrb	r2, [r2, r3]
 8004490:	7efb      	ldrb	r3, [r7, #27]
 8004492:	4053      	eors	r3, r2
 8004494:	76fb      	strb	r3, [r7, #27]
      for (size_t x = 0; x < 8; x++)                                                                                      //generate parity from 8 bits
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	3301      	adds	r3, #1
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	e7ea      	b.n	8004474 <_Z19SBUS_postProcessingv+0x78>
      }
      if (parityCheck == SBUS_RxBitString[9 + (i * SBUS_BitsPerByte)]) SBUS_CorruptedPackage = true;                      //if parity fails set corrupted flag
 800449e:	69fa      	ldr	r2, [r7, #28]
 80044a0:	4613      	mov	r3, r2
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	3309      	adds	r3, #9
 80044aa:	4a5c      	ldr	r2, [pc, #368]	; (800461c <_Z19SBUS_postProcessingv+0x220>)
 80044ac:	5cd3      	ldrb	r3, [r2, r3]
 80044ae:	7efa      	ldrb	r2, [r7, #27]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d106      	bne.n	80044c2 <_Z19SBUS_postProcessingv+0xc6>
 80044b4:	4b58      	ldr	r3, [pc, #352]	; (8004618 <_Z19SBUS_postProcessingv+0x21c>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	701a      	strb	r2, [r3, #0]
 80044ba:	e002      	b.n	80044c2 <_Z19SBUS_postProcessingv+0xc6>
    }
    else SBUS_CorruptedPackage = true;                                                                                    //if start or stop bits fail set corrupted flag
 80044bc:	4b56      	ldr	r3, [pc, #344]	; (8004618 <_Z19SBUS_postProcessingv+0x21c>)
 80044be:	2201      	movs	r2, #1
 80044c0:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < SBUS_NumberOfBytes; i++)                                                                         //repeat for each byte
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3301      	adds	r3, #1
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	e7a0      	b.n	800440c <_Z19SBUS_postProcessingv+0x10>
  }

  SBUS_Bytes[0] = 0;                                                                                                      //Reset the first byte (header byte)
 80044ca:	4b55      	ldr	r3, [pc, #340]	; (8004620 <_Z19SBUS_postProcessingv+0x224>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	2b07      	cmp	r3, #7
 80044d8:	d816      	bhi.n	8004508 <_Z19SBUS_postProcessingv+0x10c>
  {
    SBUS_Bytes[0] |= SBUS_RxBitString[1 + i] << (7 - i);                                                                  //assemble new header byte
 80044da:	4b51      	ldr	r3, [pc, #324]	; (8004620 <_Z19SBUS_postProcessingv+0x224>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	b25a      	sxtb	r2, r3
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	3301      	adds	r3, #1
 80044e4:	494d      	ldr	r1, [pc, #308]	; (800461c <_Z19SBUS_postProcessingv+0x220>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	4619      	mov	r1, r3
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f1c3 0307 	rsb	r3, r3, #7
 80044f0:	fa01 f303 	lsl.w	r3, r1, r3
 80044f4:	b25b      	sxtb	r3, r3
 80044f6:	4313      	orrs	r3, r2
 80044f8:	b25b      	sxtb	r3, r3
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	4b48      	ldr	r3, [pc, #288]	; (8004620 <_Z19SBUS_postProcessingv+0x224>)
 80044fe:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < 8; i++)
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	3301      	adds	r3, #1
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	e7e5      	b.n	80044d4 <_Z19SBUS_postProcessingv+0xd8>
  }
  if (SBUS_Bytes[0] != 0x0FU) SBUS_CorruptedPackage = true;                                                               //check if header byte is 0x0F
 8004508:	4b45      	ldr	r3, [pc, #276]	; (8004620 <_Z19SBUS_postProcessingv+0x224>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b0f      	cmp	r3, #15
 800450e:	d002      	beq.n	8004516 <_Z19SBUS_postProcessingv+0x11a>
 8004510:	4b41      	ldr	r3, [pc, #260]	; (8004618 <_Z19SBUS_postProcessingv+0x21c>)
 8004512:	2201      	movs	r2, #1
 8004514:	701a      	strb	r2, [r3, #0]

  //assemble channels:

  if (SBUS_CorruptedPackage == false)
 8004516:	4b40      	ldr	r3, [pc, #256]	; (8004618 <_Z19SBUS_postProcessingv+0x21c>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d175      	bne.n	800460a <_Z19SBUS_postProcessingv+0x20e>
  {
    uint8_t byteNumber = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	73fb      	strb	r3, [r7, #15]
    uint8_t bitNumber = 0;                                                                                                //0(LSB) to 7/(MSB)
 8004522:	2300      	movs	r3, #0
 8004524:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b07      	cmp	r3, #7
 800452e:	d86c      	bhi.n	800460a <_Z19SBUS_postProcessingv+0x20e>
    {
      uint8_t bitInChannel = 0;                                                                                           //0(LSB) to 10(MSB)
 8004530:	2300      	movs	r3, #0
 8004532:	71fb      	strb	r3, [r7, #7]
      SBUS_TempChannels[i] = 0;
 8004534:	4a3b      	ldr	r2, [pc, #236]	; (8004624 <_Z19SBUS_postProcessingv+0x228>)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2100      	movs	r1, #0
 800453a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      while (bitInChannel <= 10)
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	2b0a      	cmp	r3, #10
 8004542:	d843      	bhi.n	80045cc <_Z19SBUS_postProcessingv+0x1d0>
      {
        if (bitNumber <= 7)
 8004544:	7bbb      	ldrb	r3, [r7, #14]
 8004546:	2b07      	cmp	r3, #7
 8004548:	d81a      	bhi.n	8004580 <_Z19SBUS_postProcessingv+0x184>
        {
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;   //transfer bit
 800454a:	4a36      	ldr	r2, [pc, #216]	; (8004624 <_Z19SBUS_postProcessingv+0x228>)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8004552:	7bbb      	ldrb	r3, [r7, #14]
 8004554:	f103 000d 	add.w	r0, r3, #13
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	4613      	mov	r3, r2
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	4413      	add	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4403      	add	r3, r0
 8004564:	4a2d      	ldr	r2, [pc, #180]	; (800461c <_Z19SBUS_postProcessingv+0x220>)
 8004566:	5cd3      	ldrb	r3, [r2, r3]
 8004568:	461a      	mov	r2, r3
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	b21b      	sxth	r3, r3
 8004572:	430b      	orrs	r3, r1
 8004574:	b219      	sxth	r1, r3
 8004576:	4a2b      	ldr	r2, [pc, #172]	; (8004624 <_Z19SBUS_postProcessingv+0x228>)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800457e:	e01e      	b.n	80045be <_Z19SBUS_postProcessingv+0x1c2>
        }
        else
        {
          byteNumber ++;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	3301      	adds	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
          bitNumber = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	73bb      	strb	r3, [r7, #14]
          SBUS_TempChannels[i] |= SBUS_RxBitString[13 + (bitNumber) + (byteNumber * SBUS_BitsPerByte)] << bitInChannel;   //transfer bit
 800458a:	4a26      	ldr	r2, [pc, #152]	; (8004624 <_Z19SBUS_postProcessingv+0x228>)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8004592:	7bbb      	ldrb	r3, [r7, #14]
 8004594:	f103 000d 	add.w	r0, r3, #13
 8004598:	7bfa      	ldrb	r2, [r7, #15]
 800459a:	4613      	mov	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4403      	add	r3, r0
 80045a4:	4a1d      	ldr	r2, [pc, #116]	; (800461c <_Z19SBUS_postProcessingv+0x220>)
 80045a6:	5cd3      	ldrb	r3, [r2, r3]
 80045a8:	461a      	mov	r2, r3
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	b21b      	sxth	r3, r3
 80045b2:	430b      	orrs	r3, r1
 80045b4:	b219      	sxth	r1, r3
 80045b6:	4a1b      	ldr	r2, [pc, #108]	; (8004624 <_Z19SBUS_postProcessingv+0x228>)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        bitNumber ++;
 80045be:	7bbb      	ldrb	r3, [r7, #14]
 80045c0:	3301      	adds	r3, #1
 80045c2:	73bb      	strb	r3, [r7, #14]
        bitInChannel ++;
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	3301      	adds	r3, #1
 80045c8:	71fb      	strb	r3, [r7, #7]
      while (bitInChannel <= 10)
 80045ca:	e7b8      	b.n	800453e <_Z19SBUS_postProcessingv+0x142>
      }
      
      SBUS_Channels[i] = ((SBUS_rawValueCenter - (float)SBUS_TempChannels[i]) * SBUS_ConversionRation);            //map from 233, 1875 to -1000, 1000 and transfer channel value
 80045cc:	4a15      	ldr	r2, [pc, #84]	; (8004624 <_Z19SBUS_postProcessingv+0x228>)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fc fbbd 	bl	8000d54 <__aeabi_i2f>
 80045da:	4603      	mov	r3, r0
 80045dc:	4619      	mov	r1, r3
 80045de:	4812      	ldr	r0, [pc, #72]	; (8004628 <_Z19SBUS_postProcessingv+0x22c>)
 80045e0:	f7fc fb02 	bl	8000be8 <__aeabi_fsub>
 80045e4:	4603      	mov	r3, r0
 80045e6:	4911      	ldr	r1, [pc, #68]	; (800462c <_Z19SBUS_postProcessingv+0x230>)
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fc fc07 	bl	8000dfc <__aeabi_fmul>
 80045ee:	4603      	mov	r3, r0
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fc fddf 	bl	80011b4 <__aeabi_f2iz>
 80045f6:	4603      	mov	r3, r0
 80045f8:	b219      	sxth	r1, r3
 80045fa:	4a0d      	ldr	r2, [pc, #52]	; (8004630 <_Z19SBUS_postProcessingv+0x234>)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < SBUS_NumberOfChannels; i++)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	3301      	adds	r3, #1
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	e78f      	b.n	800452a <_Z19SBUS_postProcessingv+0x12e>
    }
  }
  SBUSNewPackage = false;                                                                                                 //reset flag
 800460a:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <_Z19SBUS_postProcessingv+0x238>)
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	bf00      	nop
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000034 	.word	0x20000034
 800461c:	200005b0 	.word	0x200005b0
 8004620:	20000640 	.word	0x20000640
 8004624:	2000064c 	.word	0x2000064c
 8004628:	4483c000 	.word	0x4483c000
 800462c:	3f9be84d 	.word	0x3f9be84d
 8004630:	2000065c 	.word	0x2000065c
 8004634:	2000066c 	.word	0x2000066c

08004638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800463c:	f001 fe1e 	bl	800627c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004640:	f000 f82e 	bl	80046a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004644:	f000 fa04 	bl	8004a50 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8004648:	f000 f87a 	bl	8004740 <_ZL12MX_ADC1_Initv>
  MX_TIM3_Init();
 800464c:	f000 f908 	bl	8004860 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8004650:	f000 f96e 	bl	8004930 <_ZL12MX_TIM4_Initv>
  MX_TIM11_Init();
 8004654:	f000 f9d4 	bl	8004a00 <_ZL13MX_TIM11_Initv>
  MX_USB_DEVICE_Init();
 8004658:	f008 ff60 	bl	800d51c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800465c:	f000 f8cc 	bl	80047f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim11);    //start TIM11
 8004660:	480c      	ldr	r0, [pc, #48]	; (8004694 <main+0x5c>)
 8004662:	f005 fac7 	bl	8009bf4 <HAL_TIM_Base_Start>
  MPU6050_init();
 8004666:	f7fd fc71 	bl	8001f4c <_Z12MPU6050_initv>
  PPM_init();
 800466a:	f000 fd47 	bl	80050fc <_Z8PPM_initv>
  while (SBUS_CorruptedPackage == true)     //only continue if the heli is connected to the remote
 800466e:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <main+0x60>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d106      	bne.n	8004684 <main+0x4c>
  {
    if (SBUSNewPackage == true) SBUS_postProcessing();
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <main+0x64>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d1f7      	bne.n	800466e <main+0x36>
 800467e:	f7ff febd 	bl	80043fc <_Z19SBUS_postProcessingv>
  while (SBUS_CorruptedPackage == true)     //only continue if the heli is connected to the remote
 8004682:	e7f4      	b.n	800466e <main+0x36>
  }
  ESCCalibration();
 8004684:	f000 fd48 	bl	8005118 <_Z14ESCCalibrationv>
  MPU6050_calibration();
 8004688:	f7fd fcbe 	bl	8002008 <_Z19MPU6050_calibrationv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 800468c:	f000 fea4 	bl	80053d8 <_Z4loopv>
 8004690:	e7fc      	b.n	800468c <main+0x54>
 8004692:	bf00      	nop
 8004694:	200007a0 	.word	0x200007a0
 8004698:	20000034 	.word	0x20000034
 800469c:	2000066c 	.word	0x2000066c

080046a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b092      	sub	sp, #72	; 0x48
 80046a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046a6:	f107 0318 	add.w	r3, r7, #24
 80046aa:	2230      	movs	r2, #48	; 0x30
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f00b fdc4 	bl	801023c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046b4:	1d3b      	adds	r3, r7, #4
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	605a      	str	r2, [r3, #4]
 80046bc:	609a      	str	r2, [r3, #8]
 80046be:	60da      	str	r2, [r3, #12]
 80046c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80046c2:	2301      	movs	r3, #1
 80046c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80046c6:	2301      	movs	r3, #1
 80046c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046ca:	2302      	movs	r3, #2
 80046cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80046ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 80046d4:	2308      	movs	r3, #8
 80046d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80046d8:	23c0      	movs	r3, #192	; 0xc0
 80046da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80046dc:	2306      	movs	r3, #6
 80046de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80046e0:	2308      	movs	r3, #8
 80046e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046e4:	f107 0318 	add.w	r3, r7, #24
 80046e8:	4618      	mov	r0, r3
 80046ea:	f004 fdc5 	bl	8009278 <HAL_RCC_OscConfig>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80046fe:	f000 fa6f 	bl	8004be0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004702:	230f      	movs	r3, #15
 8004704:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004706:	2302      	movs	r3, #2
 8004708:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800470a:	2390      	movs	r3, #144	; 0x90
 800470c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800470e:	2300      	movs	r3, #0
 8004710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004716:	1d3b      	adds	r3, r7, #4
 8004718:	2100      	movs	r1, #0
 800471a:	4618      	mov	r0, r3
 800471c:	f004 fffc 	bl	8009718 <HAL_RCC_ClockConfig>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	bf14      	ite	ne
 8004726:	2301      	movne	r3, #1
 8004728:	2300      	moveq	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 8004730:	f000 fa56 	bl	8004be0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8004734:	f005 f8dc 	bl	80098f0 <HAL_RCC_EnableCSS>
}
 8004738:	bf00      	nop
 800473a:	3748      	adds	r7, #72	; 0x48
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004746:	463b      	mov	r3, r7
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	605a      	str	r2, [r3, #4]
 800474e:	609a      	str	r2, [r3, #8]
 8004750:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004752:	4b26      	ldr	r3, [pc, #152]	; (80047ec <_ZL12MX_ADC1_Initv+0xac>)
 8004754:	4a26      	ldr	r2, [pc, #152]	; (80047f0 <_ZL12MX_ADC1_Initv+0xb0>)
 8004756:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004758:	4b24      	ldr	r3, [pc, #144]	; (80047ec <_ZL12MX_ADC1_Initv+0xac>)
 800475a:	2200      	movs	r2, #0
 800475c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800475e:	4b23      	ldr	r3, [pc, #140]	; (80047ec <_ZL12MX_ADC1_Initv+0xac>)
 8004760:	2200      	movs	r2, #0
 8004762:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004764:	4b21      	ldr	r3, [pc, #132]	; (80047ec <_ZL12MX_ADC1_Initv+0xac>)
 8004766:	2200      	movs	r2, #0
 8004768:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800476a:	4b20      	ldr	r3, [pc, #128]	; (80047ec <_ZL12MX_ADC1_Initv+0xac>)
 800476c:	2201      	movs	r2, #1
 800476e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004770:	4b1e      	ldr	r3, [pc, #120]	; (80047ec <_ZL12MX_ADC1_Initv+0xac>)
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004778:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <_ZL12MX_ADC1_Initv+0xac>)
 800477a:	2200      	movs	r2, #0
 800477c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800477e:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <_ZL12MX_ADC1_Initv+0xac>)
 8004780:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <_ZL12MX_ADC1_Initv+0xb4>)
 8004782:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004784:	4b19      	ldr	r3, [pc, #100]	; (80047ec <_ZL12MX_ADC1_Initv+0xac>)
 8004786:	2200      	movs	r2, #0
 8004788:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800478a:	4b18      	ldr	r3, [pc, #96]	; (80047ec <_ZL12MX_ADC1_Initv+0xac>)
 800478c:	2201      	movs	r2, #1
 800478e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004790:	4b16      	ldr	r3, [pc, #88]	; (80047ec <_ZL12MX_ADC1_Initv+0xac>)
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004798:	4b14      	ldr	r3, [pc, #80]	; (80047ec <_ZL12MX_ADC1_Initv+0xac>)
 800479a:	2201      	movs	r2, #1
 800479c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800479e:	4813      	ldr	r0, [pc, #76]	; (80047ec <_ZL12MX_ADC1_Initv+0xac>)
 80047a0:	f001 fdfe 	bl	80063a0 <HAL_ADC_Init>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf14      	ite	ne
 80047aa:	2301      	movne	r3, #1
 80047ac:	2300      	moveq	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 80047b4:	f000 fa14 	bl	8004be0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80047b8:	230b      	movs	r3, #11
 80047ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80047bc:	2301      	movs	r3, #1
 80047be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80047c0:	2301      	movs	r3, #1
 80047c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047c4:	463b      	mov	r3, r7
 80047c6:	4619      	mov	r1, r3
 80047c8:	4808      	ldr	r0, [pc, #32]	; (80047ec <_ZL12MX_ADC1_Initv+0xac>)
 80047ca:	f001 fedd 	bl	8006588 <HAL_ADC_ConfigChannel>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bf14      	ite	ne
 80047d4:	2301      	movne	r3, #1
 80047d6:	2300      	moveq	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80047de:	f000 f9ff 	bl	8004be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000674 	.word	0x20000674
 80047f0:	40012000 	.word	0x40012000
 80047f4:	0f000001 	.word	0x0f000001

080047f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80047fc:	4b15      	ldr	r3, [pc, #84]	; (8004854 <MX_I2C1_Init+0x5c>)
 80047fe:	4a16      	ldr	r2, [pc, #88]	; (8004858 <MX_I2C1_Init+0x60>)
 8004800:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004802:	4b14      	ldr	r3, [pc, #80]	; (8004854 <MX_I2C1_Init+0x5c>)
 8004804:	4a15      	ldr	r2, [pc, #84]	; (800485c <MX_I2C1_Init+0x64>)
 8004806:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004808:	4b12      	ldr	r3, [pc, #72]	; (8004854 <MX_I2C1_Init+0x5c>)
 800480a:	2200      	movs	r2, #0
 800480c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800480e:	4b11      	ldr	r3, [pc, #68]	; (8004854 <MX_I2C1_Init+0x5c>)
 8004810:	2200      	movs	r2, #0
 8004812:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004814:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <MX_I2C1_Init+0x5c>)
 8004816:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800481a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800481c:	4b0d      	ldr	r3, [pc, #52]	; (8004854 <MX_I2C1_Init+0x5c>)
 800481e:	2200      	movs	r2, #0
 8004820:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004822:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <MX_I2C1_Init+0x5c>)
 8004824:	2200      	movs	r2, #0
 8004826:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004828:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <MX_I2C1_Init+0x5c>)
 800482a:	2200      	movs	r2, #0
 800482c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800482e:	4b09      	ldr	r3, [pc, #36]	; (8004854 <MX_I2C1_Init+0x5c>)
 8004830:	2200      	movs	r2, #0
 8004832:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004834:	4807      	ldr	r0, [pc, #28]	; (8004854 <MX_I2C1_Init+0x5c>)
 8004836:	f002 fc0b 	bl	8007050 <HAL_I2C_Init>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	bf14      	ite	ne
 8004840:	2301      	movne	r3, #1
 8004842:	2300      	moveq	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <MX_I2C1_Init+0x56>
  {
    Error_Handler();
 800484a:	f000 f9c9 	bl	8004be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800484e:	bf00      	nop
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	200006bc 	.word	0x200006bc
 8004858:	40005400 	.word	0x40005400
 800485c:	00061a80 	.word	0x00061a80

08004860 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08a      	sub	sp, #40	; 0x28
 8004864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004866:	f107 0320 	add.w	r3, r7, #32
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004870:	1d3b      	adds	r3, r7, #4
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	605a      	str	r2, [r3, #4]
 8004878:	609a      	str	r2, [r3, #8]
 800487a:	60da      	str	r2, [r3, #12]
 800487c:	611a      	str	r2, [r3, #16]
 800487e:	615a      	str	r2, [r3, #20]
 8004880:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004882:	4b29      	ldr	r3, [pc, #164]	; (8004928 <_ZL12MX_TIM3_Initv+0xc8>)
 8004884:	4a29      	ldr	r2, [pc, #164]	; (800492c <_ZL12MX_TIM3_Initv+0xcc>)
 8004886:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 8004888:	4b27      	ldr	r3, [pc, #156]	; (8004928 <_ZL12MX_TIM3_Initv+0xc8>)
 800488a:	220f      	movs	r2, #15
 800488c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800488e:	4b26      	ldr	r3, [pc, #152]	; (8004928 <_ZL12MX_TIM3_Initv+0xc8>)
 8004890:	2200      	movs	r2, #0
 8004892:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000 - 1;
 8004894:	4b24      	ldr	r3, [pc, #144]	; (8004928 <_ZL12MX_TIM3_Initv+0xc8>)
 8004896:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800489a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800489c:	4b22      	ldr	r3, [pc, #136]	; (8004928 <_ZL12MX_TIM3_Initv+0xc8>)
 800489e:	2200      	movs	r2, #0
 80048a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048a2:	4b21      	ldr	r3, [pc, #132]	; (8004928 <_ZL12MX_TIM3_Initv+0xc8>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80048a8:	481f      	ldr	r0, [pc, #124]	; (8004928 <_ZL12MX_TIM3_Initv+0xc8>)
 80048aa:	f005 fa77 	bl	8009d9c <HAL_TIM_PWM_Init>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf14      	ite	ne
 80048b4:	2301      	movne	r3, #1
 80048b6:	2300      	moveq	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 80048be:	f000 f98f 	bl	8004be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048c2:	2300      	movs	r3, #0
 80048c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048c6:	2300      	movs	r3, #0
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80048ca:	f107 0320 	add.w	r3, r7, #32
 80048ce:	4619      	mov	r1, r3
 80048d0:	4815      	ldr	r0, [pc, #84]	; (8004928 <_ZL12MX_TIM3_Initv+0xc8>)
 80048d2:	f005 fea7 	bl	800a624 <HAL_TIMEx_MasterConfigSynchronization>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80048e6:	f000 f97b 	bl	8004be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048ea:	2360      	movs	r3, #96	; 0x60
 80048ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048fa:	1d3b      	adds	r3, r7, #4
 80048fc:	2200      	movs	r2, #0
 80048fe:	4619      	mov	r1, r3
 8004900:	4809      	ldr	r0, [pc, #36]	; (8004928 <_ZL12MX_TIM3_Initv+0xc8>)
 8004902:	f005 fb63 	bl	8009fcc <HAL_TIM_PWM_ConfigChannel>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8004916:	f000 f963 	bl	8004be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800491a:	4803      	ldr	r0, [pc, #12]	; (8004928 <_ZL12MX_TIM3_Initv+0xc8>)
 800491c:	f001 fb22 	bl	8005f64 <HAL_TIM_MspPostInit>

}
 8004920:	bf00      	nop
 8004922:	3728      	adds	r7, #40	; 0x28
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20000710 	.word	0x20000710
 800492c:	40000400 	.word	0x40000400

08004930 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08a      	sub	sp, #40	; 0x28
 8004934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004936:	f107 0320 	add.w	r3, r7, #32
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004940:	1d3b      	adds	r3, r7, #4
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	605a      	str	r2, [r3, #4]
 8004948:	609a      	str	r2, [r3, #8]
 800494a:	60da      	str	r2, [r3, #12]
 800494c:	611a      	str	r2, [r3, #16]
 800494e:	615a      	str	r2, [r3, #20]
 8004950:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004952:	4b29      	ldr	r3, [pc, #164]	; (80049f8 <_ZL12MX_TIM4_Initv+0xc8>)
 8004954:	4a29      	ldr	r2, [pc, #164]	; (80049fc <_ZL12MX_TIM4_Initv+0xcc>)
 8004956:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16 - 1;
 8004958:	4b27      	ldr	r3, [pc, #156]	; (80049f8 <_ZL12MX_TIM4_Initv+0xc8>)
 800495a:	220f      	movs	r2, #15
 800495c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800495e:	4b26      	ldr	r3, [pc, #152]	; (80049f8 <_ZL12MX_TIM4_Initv+0xc8>)
 8004960:	2200      	movs	r2, #0
 8004962:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2500 -1;
 8004964:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <_ZL12MX_TIM4_Initv+0xc8>)
 8004966:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800496a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800496c:	4b22      	ldr	r3, [pc, #136]	; (80049f8 <_ZL12MX_TIM4_Initv+0xc8>)
 800496e:	2200      	movs	r2, #0
 8004970:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004972:	4b21      	ldr	r3, [pc, #132]	; (80049f8 <_ZL12MX_TIM4_Initv+0xc8>)
 8004974:	2200      	movs	r2, #0
 8004976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004978:	481f      	ldr	r0, [pc, #124]	; (80049f8 <_ZL12MX_TIM4_Initv+0xc8>)
 800497a:	f005 fa0f 	bl	8009d9c <HAL_TIM_PWM_Init>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	bf14      	ite	ne
 8004984:	2301      	movne	r3, #1
 8004986:	2300      	moveq	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 800498e:	f000 f927 	bl	8004be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004992:	2300      	movs	r3, #0
 8004994:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004996:	2300      	movs	r3, #0
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800499a:	f107 0320 	add.w	r3, r7, #32
 800499e:	4619      	mov	r1, r3
 80049a0:	4815      	ldr	r0, [pc, #84]	; (80049f8 <_ZL12MX_TIM4_Initv+0xc8>)
 80049a2:	f005 fe3f 	bl	800a624 <HAL_TIMEx_MasterConfigSynchronization>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf14      	ite	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	2300      	moveq	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 80049b6:	f000 f913 	bl	8004be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049ba:	2360      	movs	r3, #96	; 0x60
 80049bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049ca:	1d3b      	adds	r3, r7, #4
 80049cc:	2200      	movs	r2, #0
 80049ce:	4619      	mov	r1, r3
 80049d0:	4809      	ldr	r0, [pc, #36]	; (80049f8 <_ZL12MX_TIM4_Initv+0xc8>)
 80049d2:	f005 fafb 	bl	8009fcc <HAL_TIM_PWM_ConfigChannel>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 80049e6:	f000 f8fb 	bl	8004be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80049ea:	4803      	ldr	r0, [pc, #12]	; (80049f8 <_ZL12MX_TIM4_Initv+0xc8>)
 80049ec:	f001 faba 	bl	8005f64 <HAL_TIM_MspPostInit>

}
 80049f0:	bf00      	nop
 80049f2:	3728      	adds	r7, #40	; 0x28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20000758 	.word	0x20000758
 80049fc:	40000800 	.word	0x40000800

08004a00 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004a04:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <_ZL13MX_TIM11_Initv+0x48>)
 8004a06:	4a11      	ldr	r2, [pc, #68]	; (8004a4c <_ZL13MX_TIM11_Initv+0x4c>)
 8004a08:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16 - 1;
 8004a0a:	4b0f      	ldr	r3, [pc, #60]	; (8004a48 <_ZL13MX_TIM11_Initv+0x48>)
 8004a0c:	220f      	movs	r2, #15
 8004a0e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a10:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <_ZL13MX_TIM11_Initv+0x48>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8004a16:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <_ZL13MX_TIM11_Initv+0x48>)
 8004a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a1c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a1e:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <_ZL13MX_TIM11_Initv+0x48>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a24:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <_ZL13MX_TIM11_Initv+0x48>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004a2a:	4807      	ldr	r0, [pc, #28]	; (8004a48 <_ZL13MX_TIM11_Initv+0x48>)
 8004a2c:	f005 f892 	bl	8009b54 <HAL_TIM_Base_Init>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bf14      	ite	ne
 8004a36:	2301      	movne	r3, #1
 8004a38:	2300      	moveq	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8004a40:	f000 f8ce 	bl	8004be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004a44:	bf00      	nop
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	200007a0 	.word	0x200007a0
 8004a4c:	40014800 	.word	0x40014800

08004a50 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08a      	sub	sp, #40	; 0x28
 8004a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a56:	f107 0314 	add.w	r3, r7, #20
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	605a      	str	r2, [r3, #4]
 8004a60:	609a      	str	r2, [r3, #8]
 8004a62:	60da      	str	r2, [r3, #12]
 8004a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	4b48      	ldr	r3, [pc, #288]	; (8004b8c <_ZL12MX_GPIO_Initv+0x13c>)
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	4a47      	ldr	r2, [pc, #284]	; (8004b8c <_ZL12MX_GPIO_Initv+0x13c>)
 8004a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a74:	6313      	str	r3, [r2, #48]	; 0x30
 8004a76:	4b45      	ldr	r3, [pc, #276]	; (8004b8c <_ZL12MX_GPIO_Initv+0x13c>)
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	4b41      	ldr	r3, [pc, #260]	; (8004b8c <_ZL12MX_GPIO_Initv+0x13c>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	4a40      	ldr	r2, [pc, #256]	; (8004b8c <_ZL12MX_GPIO_Initv+0x13c>)
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	6313      	str	r3, [r2, #48]	; 0x30
 8004a92:	4b3e      	ldr	r3, [pc, #248]	; (8004b8c <_ZL12MX_GPIO_Initv+0x13c>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	4b3a      	ldr	r3, [pc, #232]	; (8004b8c <_ZL12MX_GPIO_Initv+0x13c>)
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	4a39      	ldr	r2, [pc, #228]	; (8004b8c <_ZL12MX_GPIO_Initv+0x13c>)
 8004aa8:	f043 0301 	orr.w	r3, r3, #1
 8004aac:	6313      	str	r3, [r2, #48]	; 0x30
 8004aae:	4b37      	ldr	r3, [pc, #220]	; (8004b8c <_ZL12MX_GPIO_Initv+0x13c>)
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	60bb      	str	r3, [r7, #8]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aba:	2300      	movs	r3, #0
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	4b33      	ldr	r3, [pc, #204]	; (8004b8c <_ZL12MX_GPIO_Initv+0x13c>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	4a32      	ldr	r2, [pc, #200]	; (8004b8c <_ZL12MX_GPIO_Initv+0x13c>)
 8004ac4:	f043 0302 	orr.w	r3, r3, #2
 8004ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aca:	4b30      	ldr	r3, [pc, #192]	; (8004b8c <_ZL12MX_GPIO_Initv+0x13c>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	607b      	str	r3, [r7, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8004adc:	482c      	ldr	r0, [pc, #176]	; (8004b90 <_ZL12MX_GPIO_Initv+0x140>)
 8004ade:	f002 fa6e 	bl	8006fbe <HAL_GPIO_WritePin>
                          |ONBOARD_WRITE_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_WRITE_2_GPIO_Port, ONBOARD_WRITE_2_Pin, GPIO_PIN_RESET);
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ae8:	482a      	ldr	r0, [pc, #168]	; (8004b94 <_ZL12MX_GPIO_Initv+0x144>)
 8004aea:	f002 fa68 	bl	8006fbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_READ_IT_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_IT_3_Pin;
 8004aee:	2301      	movs	r3, #1
 8004af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004af2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_IT_3_GPIO_Port, &GPIO_InitStruct);
 8004afc:	f107 0314 	add.w	r3, r7, #20
 8004b00:	4619      	mov	r1, r3
 8004b02:	4824      	ldr	r0, [pc, #144]	; (8004b94 <_ZL12MX_GPIO_Initv+0x144>)
 8004b04:	f002 f8a6 	bl	8006c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_BUTTON_1_Pin ONBOARD_BUTTON_2_Pin ONBOARD_BUTTON_3_Pin ONBOARD_BUTTON_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_BUTTON_1_Pin|ONBOARD_BUTTON_2_Pin|ONBOARD_BUTTON_3_Pin|ONBOARD_BUTTON_4_Pin;
 8004b08:	230f      	movs	r3, #15
 8004b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b14:	f107 0314 	add.w	r3, r7, #20
 8004b18:	4619      	mov	r1, r3
 8004b1a:	481d      	ldr	r0, [pc, #116]	; (8004b90 <_ZL12MX_GPIO_Initv+0x140>)
 8004b1c:	f002 f89a 	bl	8006c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ONBOARD_LED_1_Pin ONBOARD_LED_2_Pin ONBOARD_LED_3_Pin ONBOARD_LED_4_Pin
                           ONBOARD_WRITE_3_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_1_Pin|ONBOARD_LED_2_Pin|ONBOARD_LED_3_Pin|ONBOARD_LED_4_Pin
 8004b20:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8004b24:	617b      	str	r3, [r7, #20]
                          |ONBOARD_WRITE_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b26:	2301      	movs	r3, #1
 8004b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b32:	f107 0314 	add.w	r3, r7, #20
 8004b36:	4619      	mov	r1, r3
 8004b38:	4815      	ldr	r0, [pc, #84]	; (8004b90 <_ZL12MX_GPIO_Initv+0x140>)
 8004b3a:	f002 f88b 	bl	8006c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_WRITE_2_Pin */
  GPIO_InitStruct.Pin = ONBOARD_WRITE_2_Pin;
 8004b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b44:	2301      	movs	r3, #1
 8004b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ONBOARD_WRITE_2_GPIO_Port, &GPIO_InitStruct);
 8004b50:	f107 0314 	add.w	r3, r7, #20
 8004b54:	4619      	mov	r1, r3
 8004b56:	480f      	ldr	r0, [pc, #60]	; (8004b94 <_ZL12MX_GPIO_Initv+0x144>)
 8004b58:	f002 f87c 	bl	8006c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ONBOARD_READ_4_Pin */
  GPIO_InitStruct.Pin = ONBOARD_READ_4_Pin;
 8004b5c:	2380      	movs	r3, #128	; 0x80
 8004b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_READ_4_GPIO_Port, &GPIO_InitStruct);
 8004b68:	f107 0314 	add.w	r3, r7, #20
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	480a      	ldr	r0, [pc, #40]	; (8004b98 <_ZL12MX_GPIO_Initv+0x148>)
 8004b70:	f002 f870 	bl	8006c54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004b74:	2200      	movs	r2, #0
 8004b76:	2100      	movs	r1, #0
 8004b78:	2006      	movs	r0, #6
 8004b7a:	f002 f826 	bl	8006bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004b7e:	2006      	movs	r0, #6
 8004b80:	f002 f83f 	bl	8006c02 <HAL_NVIC_EnableIRQ>

}
 8004b84:	bf00      	nop
 8004b86:	3728      	adds	r7, #40	; 0x28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	40020000 	.word	0x40020000
 8004b94:	40020800 	.word	0x40020800
 8004b98:	40020400 	.word	0x40020400

08004b9c <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin SBUS pin
 * 
 * --Custom Method!
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	80fb      	strh	r3, [r7, #6]
  if (TIM11->CNT - PinInterruptLastTime > SBUS_interruptDeactivationTime)
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8004ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004baa:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <HAL_GPIO_EXTI_Callback+0x40>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	f640 0298 	movw	r2, #2200	; 0x898
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	bf8c      	ite	hi
 8004bb8:	2301      	movhi	r3, #1
 8004bba:	2300      	movls	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d005      	beq.n	8004bce <HAL_GPIO_EXTI_Callback+0x32>
  {
    SBUS_RecieveBits();
 8004bc2:	f7ff fba1 	bl	8004308 <_Z16SBUS_RecieveBitsv>
    PinInterruptLastTime = TIM11->CNT;
 8004bc6:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	4a04      	ldr	r2, [pc, #16]	; (8004bdc <HAL_GPIO_EXTI_Callback+0x40>)
 8004bcc:	6013      	str	r3, [r2, #0]
  }
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40014800 	.word	0x40014800
 8004bdc:	20000670 	.word	0x20000670

08004be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004be4:	b672      	cpsid	i
}
 8004be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004be8:	e7fe      	b.n	8004be8 <Error_Handler+0x8>
 8004bea:	0000      	movs	r0, r0
 8004bec:	0000      	movs	r0, r0
	...

08004bf0 <_Z20updateMainMotorSpeedv>:
 * Then it combines the throttle input and the PITCH,ROLL Y values together with the angle to get the new motorspeed
 * 
 * --Custom Method!
 */
void updateMainMotorSpeed()
{
 8004bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf4:	af00      	add	r7, sp, #0
  ADC1->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, ADC_CHANNEL_11);               //reset sample rate
 8004bf6:	4bae      	ldr	r3, [pc, #696]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	4aad      	ldr	r2, [pc, #692]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004bfc:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004c00:	60d3      	str	r3, [r2, #12]
  ADC1->SMPR1 |= ADC_SMPR1(ADC_SAMPLETIME_15CYCLES, ADC_CHANNEL_11);        //set new sample rate Channel 11
 8004c02:	4bab      	ldr	r3, [pc, #684]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	4aaa      	ldr	r2, [pc, #680]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c08:	f043 0308 	orr.w	r3, r3, #8
 8004c0c:	60d3      	str	r3, [r2, #12]
  ADC1->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, 1);                              //reset Rank
 8004c0e:	4ba8      	ldr	r3, [pc, #672]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c12:	4aa7      	ldr	r2, [pc, #668]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c14:	f023 031f 	bic.w	r3, r3, #31
 8004c18:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= ADC_SQR3_RK(ADC_CHANNEL_11, 1);                             //set new Rank Channel 11
 8004c1a:	4ba5      	ldr	r3, [pc, #660]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	4aa4      	ldr	r2, [pc, #656]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c20:	f043 030b 	orr.w	r3, r3, #11
 8004c24:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_ADC_Start(&hadc1);                                                    //start ADC
 8004c26:	48a3      	ldr	r0, [pc, #652]	; (8004eb4 <_Z20updateMainMotorSpeedv+0x2c4>)
 8004c28:	f001 fbfe 	bl	8006428 <HAL_ADC_Start>
	adcValueChannel11 = (uint16_t)ADC1->DR;                                   //read ADC value
 8004c2c:	4ba0      	ldr	r3, [pc, #640]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	4ba1      	ldr	r3, [pc, #644]	; (8004eb8 <_Z20updateMainMotorSpeedv+0x2c8>)
 8004c34:	801a      	strh	r2, [r3, #0]

  adc_Timestamp = TIM11->CNT;
 8004c36:	4ba1      	ldr	r3, [pc, #644]	; (8004ebc <_Z20updateMainMotorSpeedv+0x2cc>)
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	4ba0      	ldr	r3, [pc, #640]	; (8004ec0 <_Z20updateMainMotorSpeedv+0x2d0>)
 8004c3e:	801a      	strh	r2, [r3, #0]

	ADC1->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, ADC_CHANNEL_12);               //reset sample rate
 8004c40:	4b9b      	ldr	r3, [pc, #620]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4a9a      	ldr	r2, [pc, #616]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c46:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8004c4a:	60d3      	str	r3, [r2, #12]
  ADC1->SMPR1 |= ADC_SMPR1(ADC_SAMPLETIME_15CYCLES, ADC_CHANNEL_12);        //set new sample rate Channel 12
 8004c4c:	4b98      	ldr	r3, [pc, #608]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	4a97      	ldr	r2, [pc, #604]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c56:	60d3      	str	r3, [r2, #12]
  ADC1->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, 1);                              //reset Rank
 8004c58:	4b95      	ldr	r3, [pc, #596]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5c:	4a94      	ldr	r2, [pc, #592]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c5e:	f023 031f 	bic.w	r3, r3, #31
 8004c62:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= ADC_SQR3_RK(ADC_CHANNEL_12, 1);                             //set new Rank Channel 12
 8004c64:	4b92      	ldr	r3, [pc, #584]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c68:	4a91      	ldr	r2, [pc, #580]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c6a:	f043 030c 	orr.w	r3, r3, #12
 8004c6e:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_ADC_Start(&hadc1);                                                    //start ADC
 8004c70:	4890      	ldr	r0, [pc, #576]	; (8004eb4 <_Z20updateMainMotorSpeedv+0x2c4>)
 8004c72:	f001 fbd9 	bl	8006428 <HAL_ADC_Start>
	adcValueChannel12 = (uint16_t)ADC1->DR;                                   //read ADC value
 8004c76:	4b8e      	ldr	r3, [pc, #568]	; (8004eb0 <_Z20updateMainMotorSpeedv+0x2c0>)
 8004c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	4b91      	ldr	r3, [pc, #580]	; (8004ec4 <_Z20updateMainMotorSpeedv+0x2d4>)
 8004c7e:	801a      	strh	r2, [r3, #0]

  if (smoothMainMotorSpeed > motorDeadzone)
 8004c80:	4b91      	ldr	r3, [pc, #580]	; (8004ec8 <_Z20updateMainMotorSpeedv+0x2d8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4991      	ldr	r1, [pc, #580]	; (8004ecc <_Z20updateMainMotorSpeedv+0x2dc>)
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fc fa74 	bl	8001174 <__aeabi_fcmpgt>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80f9 	beq.w	8004e86 <_Z20updateMainMotorSpeedv+0x296>
  {
    TIM4->CCR1 = (uint16_t)(                                                                                                                                                      \
      fastPPM_CenterTime                                                                                                                                                          \
    + (smoothMainMotorSpeed * PPMmainMotorScaler)                                                                                                                              \
 8004c94:	4b8c      	ldr	r3, [pc, #560]	; (8004ec8 <_Z20updateMainMotorSpeedv+0x2d8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fc f8ad 	bl	8000dfc <__aeabi_fmul>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	498a      	ldr	r1, [pc, #552]	; (8004ed0 <_Z20updateMainMotorSpeedv+0x2e0>)
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fb ffa0 	bl	8000bec <__addsf3>
 8004cac:	4603      	mov	r3, r0
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fb fbf6 	bl	80004a0 <__aeabi_f2d>
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	460d      	mov	r5, r1
    + ((((((float)adcValueChannel12 - hall2_center) * hall2_scaler) * cos_OffsetAngle) - ((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * sin_OffsetAngle)) * (PID_Pitch_y * -1))   \
 8004cb8:	4b82      	ldr	r3, [pc, #520]	; (8004ec4 <_Z20updateMainMotorSpeedv+0x2d4>)
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fc f845 	bl	8000d4c <__aeabi_ui2f>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fb fbeb 	bl	80004a0 <__aeabi_f2d>
 8004cca:	a373      	add	r3, pc, #460	; (adr r3, 8004e98 <_Z20updateMainMotorSpeedv+0x2a8>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f7fb fa86 	bl	80001e0 <__aeabi_dsub>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4619      	mov	r1, r3
 8004cdc:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8004ce0:	4b7c      	ldr	r3, [pc, #496]	; (8004ed4 <_Z20updateMainMotorSpeedv+0x2e4>)
 8004ce2:	f7fb fc35 	bl	8000550 <__aeabi_dmul>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4690      	mov	r8, r2
 8004cec:	4699      	mov	r9, r3
 8004cee:	4b7a      	ldr	r3, [pc, #488]	; (8004ed8 <_Z20updateMainMotorSpeedv+0x2e8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fb fbd4 	bl	80004a0 <__aeabi_f2d>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	4649      	mov	r1, r9
 8004d00:	f7fb fc26 	bl	8000550 <__aeabi_dmul>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4690      	mov	r8, r2
 8004d0a:	4699      	mov	r9, r3
 8004d0c:	4b6a      	ldr	r3, [pc, #424]	; (8004eb8 <_Z20updateMainMotorSpeedv+0x2c8>)
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fc f81b 	bl	8000d4c <__aeabi_ui2f>
 8004d16:	4603      	mov	r3, r0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fb fbc1 	bl	80004a0 <__aeabi_f2d>
 8004d1e:	a360      	add	r3, pc, #384	; (adr r3, 8004ea0 <_Z20updateMainMotorSpeedv+0x2b0>)
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f7fb fa5c 	bl	80001e0 <__aeabi_dsub>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	4619      	mov	r1, r3
 8004d30:	a35d      	add	r3, pc, #372	; (adr r3, 8004ea8 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d36:	f7fb fc0b 	bl	8000550 <__aeabi_dmul>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4692      	mov	sl, r2
 8004d40:	469b      	mov	fp, r3
 8004d42:	4b66      	ldr	r3, [pc, #408]	; (8004edc <_Z20updateMainMotorSpeedv+0x2ec>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb fbaa 	bl	80004a0 <__aeabi_f2d>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4650      	mov	r0, sl
 8004d52:	4659      	mov	r1, fp
 8004d54:	f7fb fbfc 	bl	8000550 <__aeabi_dmul>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4640      	mov	r0, r8
 8004d5e:	4649      	mov	r1, r9
 8004d60:	f7fb fa3e 	bl	80001e0 <__aeabi_dsub>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4690      	mov	r8, r2
 8004d6a:	4699      	mov	r9, r3
 8004d6c:	4b5c      	ldr	r3, [pc, #368]	; (8004ee0 <_Z20updateMainMotorSpeedv+0x2f0>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fb fb93 	bl	80004a0 <__aeabi_f2d>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4640      	mov	r0, r8
 8004d80:	4649      	mov	r1, r9
 8004d82:	f7fb fbe5 	bl	8000550 <__aeabi_dmul>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	f7fb fa29 	bl	80001e4 <__adddf3>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4614      	mov	r4, r2
 8004d98:	461d      	mov	r5, r3
    + ((((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * cos_OffsetAngle) + ((((float)adcValueChannel12 - hall2_center) * hall2_scaler) * sin_OffsetAngle)) * (PID_Roll_y  *  1))   \
 8004d9a:	4b47      	ldr	r3, [pc, #284]	; (8004eb8 <_Z20updateMainMotorSpeedv+0x2c8>)
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fb ffd4 	bl	8000d4c <__aeabi_ui2f>
 8004da4:	4603      	mov	r3, r0
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fb fb7a 	bl	80004a0 <__aeabi_f2d>
 8004dac:	a33c      	add	r3, pc, #240	; (adr r3, 8004ea0 <_Z20updateMainMotorSpeedv+0x2b0>)
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f7fb fa15 	bl	80001e0 <__aeabi_dsub>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4610      	mov	r0, r2
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	a33a      	add	r3, pc, #232	; (adr r3, 8004ea8 <_Z20updateMainMotorSpeedv+0x2b8>)
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	f7fb fbc4 	bl	8000550 <__aeabi_dmul>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4690      	mov	r8, r2
 8004dce:	4699      	mov	r9, r3
 8004dd0:	4b41      	ldr	r3, [pc, #260]	; (8004ed8 <_Z20updateMainMotorSpeedv+0x2e8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fb fb63 	bl	80004a0 <__aeabi_f2d>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4640      	mov	r0, r8
 8004de0:	4649      	mov	r1, r9
 8004de2:	f7fb fbb5 	bl	8000550 <__aeabi_dmul>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4690      	mov	r8, r2
 8004dec:	4699      	mov	r9, r3
 8004dee:	4b35      	ldr	r3, [pc, #212]	; (8004ec4 <_Z20updateMainMotorSpeedv+0x2d4>)
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fb ffaa 	bl	8000d4c <__aeabi_ui2f>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fb fb50 	bl	80004a0 <__aeabi_f2d>
 8004e00:	a325      	add	r3, pc, #148	; (adr r3, 8004e98 <_Z20updateMainMotorSpeedv+0x2a8>)
 8004e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e06:	f7fb f9eb 	bl	80001e0 <__aeabi_dsub>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4610      	mov	r0, r2
 8004e10:	4619      	mov	r1, r3
 8004e12:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8004e16:	4b2f      	ldr	r3, [pc, #188]	; (8004ed4 <_Z20updateMainMotorSpeedv+0x2e4>)
 8004e18:	f7fb fb9a 	bl	8000550 <__aeabi_dmul>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4692      	mov	sl, r2
 8004e22:	469b      	mov	fp, r3
 8004e24:	4b2d      	ldr	r3, [pc, #180]	; (8004edc <_Z20updateMainMotorSpeedv+0x2ec>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fb fb39 	bl	80004a0 <__aeabi_f2d>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4650      	mov	r0, sl
 8004e34:	4659      	mov	r1, fp
 8004e36:	f7fb fb8b 	bl	8000550 <__aeabi_dmul>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4640      	mov	r0, r8
 8004e40:	4649      	mov	r1, r9
 8004e42:	f7fb f9cf 	bl	80001e4 <__adddf3>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4690      	mov	r8, r2
 8004e4c:	4699      	mov	r9, r3
 8004e4e:	4b25      	ldr	r3, [pc, #148]	; (8004ee4 <_Z20updateMainMotorSpeedv+0x2f4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fb fb24 	bl	80004a0 <__aeabi_f2d>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4640      	mov	r0, r8
 8004e5e:	4649      	mov	r1, r9
 8004e60:	f7fb fb76 	bl	8000550 <__aeabi_dmul>
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4620      	mov	r0, r4
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	f7fb f9ba 	bl	80001e4 <__adddf3>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
    TIM4->CCR1 = (uint16_t)(                                                                                                                                                      \
 8004e74:	4610      	mov	r0, r2
 8004e76:	4619      	mov	r1, r3
 8004e78:	f7fb fe42 	bl	8000b00 <__aeabi_d2uiz>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <_Z20updateMainMotorSpeedv+0x2f8>)
 8004e82:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    TIM4->CCR1 = fastPPM_MinTime;
  }
}
 8004e84:	e003      	b.n	8004e8e <_Z20updateMainMotorSpeedv+0x29e>
    TIM4->CCR1 = fastPPM_MinTime;
 8004e86:	4b18      	ldr	r3, [pc, #96]	; (8004ee8 <_Z20updateMainMotorSpeedv+0x2f8>)
 8004e88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e8c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004e8e:	bf00      	nop
 8004e90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e94:	f3af 8000 	nop.w
 8004e98:	00000000 	.word	0x00000000
 8004e9c:	4093b000 	.word	0x4093b000
 8004ea0:	00000000 	.word	0x00000000
 8004ea4:	4093c400 	.word	0x4093c400
 8004ea8:	6d92aca5 	.word	0x6d92aca5
 8004eac:	3f4fa8ef 	.word	0x3f4fa8ef
 8004eb0:	40012000 	.word	0x40012000
 8004eb4:	20000674 	.word	0x20000674
 8004eb8:	200007e8 	.word	0x200007e8
 8004ebc:	40014800 	.word	0x40014800
 8004ec0:	200007ea 	.word	0x200007ea
 8004ec4:	200007ec 	.word	0x200007ec
 8004ec8:	200007f0 	.word	0x200007f0
 8004ecc:	c46d8000 	.word	0xc46d8000
 8004ed0:	44bb8000 	.word	0x44bb8000
 8004ed4:	3f501010 	.word	0x3f501010
 8004ed8:	200007f8 	.word	0x200007f8
 8004edc:	200007f4 	.word	0x200007f4
 8004ee0:	20000524 	.word	0x20000524
 8004ee4:	20000528 	.word	0x20000528
 8004ee8:	40000800 	.word	0x40000800
 8004eec:	00000000 	.word	0x00000000

08004ef0 <_Z13MainMotorDLPFv>:
 * @brief //NOTDONE
 * 
 * 
 */
void MainMotorDLPF()
{
 8004ef0:	b5b0      	push	{r4, r5, r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  smoothMainMotorSpeed += MainMotorSmoothingFactor * ((float)SBUS_Channels[2] - smoothMainMotorSpeed);
 8004ef4:	4b18      	ldr	r3, [pc, #96]	; (8004f58 <_Z13MainMotorDLPFv+0x68>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fb fad1 	bl	80004a0 <__aeabi_f2d>
 8004efe:	4604      	mov	r4, r0
 8004f00:	460d      	mov	r5, r1
 8004f02:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <_Z13MainMotorDLPFv+0x6c>)
 8004f04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fb ff23 	bl	8000d54 <__aeabi_i2f>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <_Z13MainMotorDLPFv+0x68>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4619      	mov	r1, r3
 8004f16:	4610      	mov	r0, r2
 8004f18:	f7fb fe66 	bl	8000be8 <__aeabi_fsub>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fb fabe 	bl	80004a0 <__aeabi_f2d>
 8004f24:	a30a      	add	r3, pc, #40	; (adr r3, 8004f50 <_Z13MainMotorDLPFv+0x60>)
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	f7fb fb11 	bl	8000550 <__aeabi_dmul>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4620      	mov	r0, r4
 8004f34:	4629      	mov	r1, r5
 8004f36:	f7fb f955 	bl	80001e4 <__adddf3>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	f7fb fdfd 	bl	8000b40 <__aeabi_d2f>
 8004f46:	4603      	mov	r3, r0
 8004f48:	4a03      	ldr	r2, [pc, #12]	; (8004f58 <_Z13MainMotorDLPFv+0x68>)
 8004f4a:	6013      	str	r3, [r2, #0]
}
 8004f4c:	bf00      	nop
 8004f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8004f50:	9999999a 	.word	0x9999999a
 8004f54:	3fa99999 	.word	0x3fa99999
 8004f58:	200007f0 	.word	0x200007f0
 8004f5c:	2000065c 	.word	0x2000065c

08004f60 <_Z20updateTailMotorSpeedv>:
 * If the throttle is above a given deadzone the motor speed is YAW Y value
 * 
 * --Custom Method!
 */
void updateTailMotorSpeed()
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  if (SBUS_Channels[2] > motorDeadzone)
 8004f64:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <_Z20updateTailMotorSpeedv+0x58>)
 8004f66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004f6a:	f46f 726d 	mvn.w	r2, #948	; 0x3b4
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	db0e      	blt.n	8004f90 <_Z20updateTailMotorSpeedv+0x30>
  {
    TIM3->CCR1 = (uint16_t)(slowPPM1_MinTime + PID_Yaw_y);
 8004f72:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <_Z20updateTailMotorSpeedv+0x5c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4912      	ldr	r1, [pc, #72]	; (8004fc0 <_Z20updateTailMotorSpeedv+0x60>)
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fb fe37 	bl	8000bec <__addsf3>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fc f93d 	bl	8001200 <__aeabi_f2uiz>
 8004f86:	4603      	mov	r3, r0
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	4b0e      	ldr	r3, [pc, #56]	; (8004fc4 <_Z20updateTailMotorSpeedv+0x64>)
 8004f8c:	635a      	str	r2, [r3, #52]	; 0x34
    Pitch_I_Sum = 0;
    Roll_I_Sum  = 0;
    Yaw_I_Sum   = 0;
    reset_WQuaternion();
  }
}
 8004f8e:	e011      	b.n	8004fb4 <_Z20updateTailMotorSpeedv+0x54>
    TIM3->CCR1 = slowPPM1_MinTime;
 8004f90:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <_Z20updateTailMotorSpeedv+0x64>)
 8004f92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f96:	635a      	str	r2, [r3, #52]	; 0x34
    Pitch_I_Sum = 0;
 8004f98:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <_Z20updateTailMotorSpeedv+0x68>)
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
    Roll_I_Sum  = 0;
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <_Z20updateTailMotorSpeedv+0x6c>)
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
    Yaw_I_Sum   = 0;
 8004fa8:	4b09      	ldr	r3, [pc, #36]	; (8004fd0 <_Z20updateTailMotorSpeedv+0x70>)
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]
    reset_WQuaternion();
 8004fb0:	f7fe fcfe 	bl	80039b0 <_Z17reset_WQuaternionv>
}
 8004fb4:	bf00      	nop
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	2000065c 	.word	0x2000065c
 8004fbc:	2000052c 	.word	0x2000052c
 8004fc0:	447a0000 	.word	0x447a0000
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	20000554 	.word	0x20000554
 8004fcc:	20000558 	.word	0x20000558
 8004fd0:	2000055c 	.word	0x2000055c
 8004fd4:	00000000 	.word	0x00000000

08004fd8 <_Z18getMainMotorOffsetv>:
 * @brief //NOTDONE
 * 
 * 
 */
void getMainMotorOffset()
{
 8004fd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
  float currentAngleOffset = mainMotorStartOffset + (((smoothMainMotorSpeed + 999) * 0.001) * (mainMotorMaxOffset));
 8004fe0:	4b3f      	ldr	r3, [pc, #252]	; (80050e0 <_Z18getMainMotorOffsetv+0x108>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fb fa5b 	bl	80004a0 <__aeabi_f2d>
 8004fea:	4604      	mov	r4, r0
 8004fec:	460d      	mov	r5, r1
 8004fee:	4b3d      	ldr	r3, [pc, #244]	; (80050e4 <_Z18getMainMotorOffsetv+0x10c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	493d      	ldr	r1, [pc, #244]	; (80050e8 <_Z18getMainMotorOffsetv+0x110>)
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fb fdf9 	bl	8000bec <__addsf3>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fb fa4f 	bl	80004a0 <__aeabi_f2d>
 8005002:	a333      	add	r3, pc, #204	; (adr r3, 80050d0 <_Z18getMainMotorOffsetv+0xf8>)
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f7fb faa2 	bl	8000550 <__aeabi_dmul>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4690      	mov	r8, r2
 8005012:	4699      	mov	r9, r3
 8005014:	4b35      	ldr	r3, [pc, #212]	; (80050ec <_Z18getMainMotorOffsetv+0x114>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f7fb fa41 	bl	80004a0 <__aeabi_f2d>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4640      	mov	r0, r8
 8005024:	4649      	mov	r1, r9
 8005026:	f7fb fa93 	bl	8000550 <__aeabi_dmul>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4620      	mov	r0, r4
 8005030:	4629      	mov	r1, r5
 8005032:	f7fb f8d7 	bl	80001e4 <__adddf3>
 8005036:	4602      	mov	r2, r0
 8005038:	460b      	mov	r3, r1
 800503a:	4610      	mov	r0, r2
 800503c:	4619      	mov	r1, r3
 800503e:	f7fb fd7f 	bl	8000b40 <__aeabi_d2f>
 8005042:	4603      	mov	r3, r0
 8005044:	607b      	str	r3, [r7, #4]
  sin_OffsetAngle = sin((currentAngleOffset * M_PI) / 180);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7fb fa2a 	bl	80004a0 <__aeabi_f2d>
 800504c:	a322      	add	r3, pc, #136	; (adr r3, 80050d8 <_Z18getMainMotorOffsetv+0x100>)
 800504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005052:	f7fb fa7d 	bl	8000550 <__aeabi_dmul>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4610      	mov	r0, r2
 800505c:	4619      	mov	r1, r3
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	4b23      	ldr	r3, [pc, #140]	; (80050f0 <_Z18getMainMotorOffsetv+0x118>)
 8005064:	f7fb fb9e 	bl	80007a4 <__aeabi_ddiv>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4610      	mov	r0, r2
 800506e:	4619      	mov	r1, r3
 8005070:	f008 ff9a 	bl	800dfa8 <sin>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4610      	mov	r0, r2
 800507a:	4619      	mov	r1, r3
 800507c:	f7fb fd60 	bl	8000b40 <__aeabi_d2f>
 8005080:	4603      	mov	r3, r0
 8005082:	4a1c      	ldr	r2, [pc, #112]	; (80050f4 <_Z18getMainMotorOffsetv+0x11c>)
 8005084:	6013      	str	r3, [r2, #0]
  cos_OffsetAngle = cos((currentAngleOffset * M_PI) / 180);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fb fa0a 	bl	80004a0 <__aeabi_f2d>
 800508c:	a312      	add	r3, pc, #72	; (adr r3, 80050d8 <_Z18getMainMotorOffsetv+0x100>)
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	f7fb fa5d 	bl	8000550 <__aeabi_dmul>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4610      	mov	r0, r2
 800509c:	4619      	mov	r1, r3
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <_Z18getMainMotorOffsetv+0x118>)
 80050a4:	f7fb fb7e 	bl	80007a4 <__aeabi_ddiv>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4610      	mov	r0, r2
 80050ae:	4619      	mov	r1, r3
 80050b0:	f008 ff38 	bl	800df24 <cos>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4610      	mov	r0, r2
 80050ba:	4619      	mov	r1, r3
 80050bc:	f7fb fd40 	bl	8000b40 <__aeabi_d2f>
 80050c0:	4603      	mov	r3, r0
 80050c2:	4a0d      	ldr	r2, [pc, #52]	; (80050f8 <_Z18getMainMotorOffsetv+0x120>)
 80050c4:	6013      	str	r3, [r2, #0]
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80050d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80050d4:	3f50624d 	.word	0x3f50624d
 80050d8:	54442d18 	.word	0x54442d18
 80050dc:	400921fb 	.word	0x400921fb
 80050e0:	20000038 	.word	0x20000038
 80050e4:	200007f0 	.word	0x200007f0
 80050e8:	4479c000 	.word	0x4479c000
 80050ec:	2000003c 	.word	0x2000003c
 80050f0:	40668000 	.word	0x40668000
 80050f4:	200007f4 	.word	0x200007f4
 80050f8:	200007f8 	.word	0x200007f8

080050fc <_Z8PPM_initv>:
 * @brief Initializes TIM 3 and 4 used for generating the PPM signals
 * 
 * --Custom Method!
 */
void PPM_init()
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim3);
 8005100:	4803      	ldr	r0, [pc, #12]	; (8005110 <_Z8PPM_initv+0x14>)
 8005102:	f004 fddd 	bl	8009cc0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8005106:	4803      	ldr	r0, [pc, #12]	; (8005114 <_Z8PPM_initv+0x18>)
 8005108:	f004 fdda 	bl	8009cc0 <HAL_TIM_Base_Start_IT>
}
 800510c:	bf00      	nop
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20000710 	.word	0x20000710
 8005114:	20000758 	.word	0x20000758

08005118 <_Z14ESCCalibrationv>:
 * If BT1 is not pressed, it gives the ESCs x time to initialize
 * 
 * --Custom Method!
 */
void ESCCalibration()
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == true)
 800511e:	2101      	movs	r1, #1
 8005120:	486d      	ldr	r0, [pc, #436]	; (80052d8 <_Z14ESCCalibrationv+0x1c0>)
 8005122:	f001 ff35 	bl	8006f90 <HAL_GPIO_ReadPin>
 8005126:	4603      	mov	r3, r0
 8005128:	2b01      	cmp	r3, #1
 800512a:	bf0c      	ite	eq
 800512c:	2301      	moveq	r3, #1
 800512e:	2300      	movne	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 80b8 	beq.w	80052a8 <_Z14ESCCalibrationv+0x190>
  {
    uint16_t counter = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_TogglePin(ONBOARD_LED_2_GPIO_Port, ONBOARD_LED_2_Pin);   //NOTDONE debug
 800513c:	2120      	movs	r1, #32
 800513e:	4866      	ldr	r0, [pc, #408]	; (80052d8 <_Z14ESCCalibrationv+0x1c0>)
 8005140:	f001 ff55 	bl	8006fee <HAL_GPIO_TogglePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);                                                                             //start PPM for tail motor
 8005144:	2100      	movs	r1, #0
 8005146:	4865      	ldr	r0, [pc, #404]	; (80052dc <_Z14ESCCalibrationv+0x1c4>)
 8005148:	f004 fe78 	bl	8009e3c <HAL_TIM_PWM_Start>
    uint16_t oldTime = TIM11->CNT;
 800514c:	4b64      	ldr	r3, [pc, #400]	; (80052e0 <_Z14ESCCalibrationv+0x1c8>)
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	80bb      	strh	r3, [r7, #4]

    //main-motor
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 8005152:	2101      	movs	r1, #1
 8005154:	4860      	ldr	r0, [pc, #384]	; (80052d8 <_Z14ESCCalibrationv+0x1c0>)
 8005156:	f001 ff1b 	bl	8006f90 <HAL_GPIO_ReadPin>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	bf0c      	ite	eq
 8005160:	2301      	moveq	r3, #1
 8005162:	2300      	movne	r3, #0
 8005164:	b2da      	uxtb	r2, r3
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	f240 31e7 	movw	r1, #999	; 0x3e7
 800516c:	428b      	cmp	r3, r1
 800516e:	bf94      	ite	ls
 8005170:	2301      	movls	r3, #1
 8005172:	2300      	movhi	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	4313      	orrs	r3, r2
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	bf14      	ite	ne
 800517e:	2301      	movne	r3, #1
 8005180:	2300      	moveq	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d033      	beq.n	80051f0 <_Z14ESCCalibrationv+0xd8>
    {
      if (SBUSNewPackage == true) SBUS_postProcessing();                                                                  //process new packets
 8005188:	4b56      	ldr	r3, [pc, #344]	; (80052e4 <_Z14ESCCalibrationv+0x1cc>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <_Z14ESCCalibrationv+0x7c>
 8005190:	f7ff f934 	bl	80043fc <_Z19SBUS_postProcessingv>
      TIM3->CCR1 = (uint16_t)(slowPPM1_CenterTime + (SBUS_Channels[2] * PPMtailMotorScaler));                             //update motor speed
 8005194:	4b54      	ldr	r3, [pc, #336]	; (80052e8 <_Z14ESCCalibrationv+0x1d0>)
 8005196:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800519a:	4618      	mov	r0, r3
 800519c:	f7fb fdda 	bl	8000d54 <__aeabi_i2f>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fb fe28 	bl	8000dfc <__aeabi_fmul>
 80051ac:	4603      	mov	r3, r0
 80051ae:	494f      	ldr	r1, [pc, #316]	; (80052ec <_Z14ESCCalibrationv+0x1d4>)
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fb fd1b 	bl	8000bec <__addsf3>
 80051b6:	4603      	mov	r3, r0
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fc f821 	bl	8001200 <__aeabi_f2uiz>
 80051be:	4603      	mov	r3, r0
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	4b4b      	ldr	r3, [pc, #300]	; (80052f0 <_Z14ESCCalibrationv+0x1d8>)
 80051c4:	635a      	str	r2, [r3, #52]	; 0x34
      while ((TIM11->CNT - oldTime) < 10000);                                                                             //wait for 10 milliseconds to pass
 80051c6:	4b46      	ldr	r3, [pc, #280]	; (80052e0 <_Z14ESCCalibrationv+0x1c8>)
 80051c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ca:	88bb      	ldrh	r3, [r7, #4]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f242 720f 	movw	r2, #9999	; 0x270f
 80051d2:	4293      	cmp	r3, r2
 80051d4:	bf94      	ite	ls
 80051d6:	2301      	movls	r3, #1
 80051d8:	2300      	movhi	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d000      	beq.n	80051e2 <_Z14ESCCalibrationv+0xca>
 80051e0:	e7f1      	b.n	80051c6 <_Z14ESCCalibrationv+0xae>
      oldTime = TIM11->CNT;
 80051e2:	4b3f      	ldr	r3, [pc, #252]	; (80052e0 <_Z14ESCCalibrationv+0x1c8>)
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	80bb      	strh	r3, [r7, #4]
      counter += 10;
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	330a      	adds	r3, #10
 80051ec:	80fb      	strh	r3, [r7, #6]
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 80051ee:	e7b0      	b.n	8005152 <_Z14ESCCalibrationv+0x3a>
    }

    counter = 0;                                                                                                          //reset counter
 80051f0:	2300      	movs	r3, #0
 80051f2:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_TogglePin(ONBOARD_LED_3_GPIO_Port, ONBOARD_LED_3_Pin);   //NOTDONE debug
 80051f4:	2140      	movs	r1, #64	; 0x40
 80051f6:	4838      	ldr	r0, [pc, #224]	; (80052d8 <_Z14ESCCalibrationv+0x1c0>)
 80051f8:	f001 fef9 	bl	8006fee <HAL_GPIO_TogglePin>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);                                                                             //start PPM for main motor
 80051fc:	2100      	movs	r1, #0
 80051fe:	483d      	ldr	r0, [pc, #244]	; (80052f4 <_Z14ESCCalibrationv+0x1dc>)
 8005200:	f004 fe1c 	bl	8009e3c <HAL_TIM_PWM_Start>
    oldTime = TIM11->CNT;
 8005204:	4b36      	ldr	r3, [pc, #216]	; (80052e0 <_Z14ESCCalibrationv+0x1c8>)
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	80bb      	strh	r3, [r7, #4]

    //tail-motor
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 800520a:	2101      	movs	r1, #1
 800520c:	4832      	ldr	r0, [pc, #200]	; (80052d8 <_Z14ESCCalibrationv+0x1c0>)
 800520e:	f001 febf 	bl	8006f90 <HAL_GPIO_ReadPin>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	bf0c      	ite	eq
 8005218:	2301      	moveq	r3, #1
 800521a:	2300      	movne	r3, #0
 800521c:	b2da      	uxtb	r2, r3
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	f240 31e7 	movw	r1, #999	; 0x3e7
 8005224:	428b      	cmp	r3, r1
 8005226:	bf94      	ite	ls
 8005228:	2301      	movls	r3, #1
 800522a:	2300      	movhi	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	4313      	orrs	r3, r2
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	bf14      	ite	ne
 8005236:	2301      	movne	r3, #1
 8005238:	2300      	moveq	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d047      	beq.n	80052d0 <_Z14ESCCalibrationv+0x1b8>
    {
      if (SBUSNewPackage == true) SBUS_postProcessing();                                                                  //process new packets
 8005240:	4b28      	ldr	r3, [pc, #160]	; (80052e4 <_Z14ESCCalibrationv+0x1cc>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <_Z14ESCCalibrationv+0x134>
 8005248:	f7ff f8d8 	bl	80043fc <_Z19SBUS_postProcessingv>
      TIM4->CCR1 = (uint16_t)(fastPPM_CenterTime + (SBUS_Channels[2] * PPMmainMotorScaler));                              //update motor speed
 800524c:	4b26      	ldr	r3, [pc, #152]	; (80052e8 <_Z14ESCCalibrationv+0x1d0>)
 800524e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005252:	4618      	mov	r0, r3
 8005254:	f7fb fd7e 	bl	8000d54 <__aeabi_i2f>
 8005258:	4603      	mov	r3, r0
 800525a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800525e:	4618      	mov	r0, r3
 8005260:	f7fb fdcc 	bl	8000dfc <__aeabi_fmul>
 8005264:	4603      	mov	r3, r0
 8005266:	4921      	ldr	r1, [pc, #132]	; (80052ec <_Z14ESCCalibrationv+0x1d4>)
 8005268:	4618      	mov	r0, r3
 800526a:	f7fb fcbf 	bl	8000bec <__addsf3>
 800526e:	4603      	mov	r3, r0
 8005270:	4618      	mov	r0, r3
 8005272:	f7fb ffc5 	bl	8001200 <__aeabi_f2uiz>
 8005276:	4603      	mov	r3, r0
 8005278:	b29a      	uxth	r2, r3
 800527a:	4b1f      	ldr	r3, [pc, #124]	; (80052f8 <_Z14ESCCalibrationv+0x1e0>)
 800527c:	635a      	str	r2, [r3, #52]	; 0x34
      while ((TIM11->CNT - oldTime) < 10000);                                                                             //wait for 10 milliseconds to pass
 800527e:	4b18      	ldr	r3, [pc, #96]	; (80052e0 <_Z14ESCCalibrationv+0x1c8>)
 8005280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005282:	88bb      	ldrh	r3, [r7, #4]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f242 720f 	movw	r2, #9999	; 0x270f
 800528a:	4293      	cmp	r3, r2
 800528c:	bf94      	ite	ls
 800528e:	2301      	movls	r3, #1
 8005290:	2300      	movhi	r3, #0
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d000      	beq.n	800529a <_Z14ESCCalibrationv+0x182>
 8005298:	e7f1      	b.n	800527e <_Z14ESCCalibrationv+0x166>
      oldTime = TIM11->CNT;
 800529a:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <_Z14ESCCalibrationv+0x1c8>)
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	80bb      	strh	r3, [r7, #4]
      counter += 10;
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	330a      	adds	r3, #10
 80052a4:	80fb      	strh	r3, [r7, #6]
    while ((HAL_GPIO_ReadPin(ONBOARD_BUTTON_1_GPIO_Port, ONBOARD_BUTTON_1_Pin) == false) | (counter < BT_debounceTime))   //wait for BT1 to be pressed after BT_debounceTime has passed
 80052a6:	e7b0      	b.n	800520a <_Z14ESCCalibrationv+0xf2>
    }
  }
  else
  {
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);                                                                             //start PPM for tail motor
 80052a8:	2100      	movs	r1, #0
 80052aa:	480c      	ldr	r0, [pc, #48]	; (80052dc <_Z14ESCCalibrationv+0x1c4>)
 80052ac:	f004 fdc6 	bl	8009e3c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);                                                                             //start PPM for main motor
 80052b0:	2100      	movs	r1, #0
 80052b2:	4810      	ldr	r0, [pc, #64]	; (80052f4 <_Z14ESCCalibrationv+0x1dc>)
 80052b4:	f004 fdc2 	bl	8009e3c <HAL_TIM_PWM_Start>

    TIM3->CCR1 = slowPPM1_MinTime;                                                                                        //set to 0%
 80052b8:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <_Z14ESCCalibrationv+0x1d8>)
 80052ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052be:	635a      	str	r2, [r3, #52]	; 0x34
    TIM4->CCR1 = fastPPM_MinTime;                                                                                         //set to 0%
 80052c0:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <_Z14ESCCalibrationv+0x1e0>)
 80052c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052c6:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(ESC_StartupDelay);
 80052c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052cc:	f001 f844 	bl	8006358 <HAL_Delay>
  }
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	40020000 	.word	0x40020000
 80052dc:	20000710 	.word	0x20000710
 80052e0:	40014800 	.word	0x40014800
 80052e4:	2000066c 	.word	0x2000066c
 80052e8:	2000065c 	.word	0x2000065c
 80052ec:	44bb8000 	.word	0x44bb8000
 80052f0:	40000400 	.word	0x40000400
 80052f4:	20000758 	.word	0x20000758
 80052f8:	40000800 	.word	0x40000800
 80052fc:	00000000 	.word	0x00000000

08005300 <_Z41__static_initialization_and_destruction_0ii>:
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d148      	bne.n	80053a2 <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005316:	4293      	cmp	r3, r2
 8005318:	d143      	bne.n	80053a2 <_Z41__static_initialization_and_destruction_0ii+0xa2>
float sin_OffsetAngle = sin(((float)mainMotorStartOffset * M_PI) / 180);
 800531a:	4b27      	ldr	r3, [pc, #156]	; (80053b8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f7fb f8be 	bl	80004a0 <__aeabi_f2d>
 8005324:	a322      	add	r3, pc, #136	; (adr r3, 80053b0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	f7fb f911 	bl	8000550 <__aeabi_dmul>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4610      	mov	r0, r2
 8005334:	4619      	mov	r1, r3
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	4b20      	ldr	r3, [pc, #128]	; (80053bc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800533c:	f7fb fa32 	bl	80007a4 <__aeabi_ddiv>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4610      	mov	r0, r2
 8005346:	4619      	mov	r1, r3
 8005348:	f008 fe2e 	bl	800dfa8 <sin>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4610      	mov	r0, r2
 8005352:	4619      	mov	r1, r3
 8005354:	f7fb fbf4 	bl	8000b40 <__aeabi_d2f>
 8005358:	4603      	mov	r3, r0
 800535a:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800535c:	6013      	str	r3, [r2, #0]
float cos_OffsetAngle = cos(((float)mainMotorStartOffset * M_PI) / 180);
 800535e:	4b16      	ldr	r3, [pc, #88]	; (80053b8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	f7fb f89c 	bl	80004a0 <__aeabi_f2d>
 8005368:	a311      	add	r3, pc, #68	; (adr r3, 80053b0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f7fb f8ef 	bl	8000550 <__aeabi_dmul>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4610      	mov	r0, r2
 8005378:	4619      	mov	r1, r3
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	4b0f      	ldr	r3, [pc, #60]	; (80053bc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005380:	f7fb fa10 	bl	80007a4 <__aeabi_ddiv>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4610      	mov	r0, r2
 800538a:	4619      	mov	r1, r3
 800538c:	f008 fdca 	bl	800df24 <cos>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4610      	mov	r0, r2
 8005396:	4619      	mov	r1, r3
 8005398:	f7fb fbd2 	bl	8000b40 <__aeabi_d2f>
 800539c:	4603      	mov	r3, r0
 800539e:	4a09      	ldr	r2, [pc, #36]	; (80053c4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	bf00      	nop
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	f3af 8000 	nop.w
 80053b0:	54442d18 	.word	0x54442d18
 80053b4:	400921fb 	.word	0x400921fb
 80053b8:	20000038 	.word	0x20000038
 80053bc:	40668000 	.word	0x40668000
 80053c0:	200007f4 	.word	0x200007f4
 80053c4:	200007f8 	.word	0x200007f8

080053c8 <_GLOBAL__sub_I_adcValueChannel11>:
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80053d0:	2001      	movs	r0, #1
 80053d2:	f7ff ff95 	bl	8005300 <_Z41__static_initialization_and_destruction_0ii>
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <_Z4loopv>:
#include "PID.h"

uint8_t task;

void loop()
{
 80053d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053dc:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 80053e0:	af2a      	add	r7, sp, #168	; 0xa8
  if (TIM4->CNT >= (fastPPM_Pulselength - fastPPM_calcutationTime))
 80053e2:	4bd7      	ldr	r3, [pc, #860]	; (8005740 <_Z4loopv+0x368>)
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	f640 1287 	movw	r2, #2439	; 0x987
 80053ea:	4293      	cmp	r3, r2
 80053ec:	bf8c      	ite	hi
 80053ee:	2301      	movhi	r3, #1
 80053f0:	2300      	movls	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 848f 	beq.w	8005d18 <_Z4loopv+0x940>
  {
    switch (task)                       //disable the SBUS pin interrupt for the selected tasks
 80053fa:	4bd2      	ldr	r3, [pc, #840]	; (8005744 <_Z4loopv+0x36c>)
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b07      	cmp	r3, #7
 8005400:	d103      	bne.n	800540a <_Z4loopv+0x32>
    {
    case 7:
      HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8005402:	2006      	movs	r0, #6
 8005404:	f001 fc0b 	bl	8006c1e <HAL_NVIC_DisableIRQ>
      break;
 8005408:	e000      	b.n	800540c <_Z4loopv+0x34>
    default:
      break;
 800540a:	bf00      	nop
    }

    updateMainMotorSpeed();
 800540c:	f7ff fbf0 	bl	8004bf0 <_Z20updateMainMotorSpeedv>
    MainMotorDLPF();
 8005410:	f7ff fd6e 	bl	8004ef0 <_Z13MainMotorDLPFv>
    //getMainMotorSpeed();
    
    //PPM only updates the next cycle
    switch (task)                       //execute the selected task
 8005414:	4bcb      	ldr	r3, [pc, #812]	; (8005744 <_Z4loopv+0x36c>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	3b01      	subs	r3, #1
 800541a:	2b07      	cmp	r3, #7
 800541c:	f200 8459 	bhi.w	8005cd2 <_Z4loopv+0x8fa>
 8005420:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <_Z4loopv+0x50>)
 8005422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005426:	bf00      	nop
 8005428:	08005449 	.word	0x08005449
 800542c:	0800545f 	.word	0x0800545f
 8005430:	08005495 	.word	0x08005495
 8005434:	0800549d 	.word	0x0800549d
 8005438:	08005cd3 	.word	0x08005cd3
 800543c:	08005cd3 	.word	0x08005cd3
 8005440:	08005791 	.word	0x08005791
 8005444:	08005797 	.word	0x08005797
    {
    case 1:
      MPU6050_WaitForQuaternionSet();   //500 us if given 5000 us after FIFO reset
 8005448:	f7fc fbe2 	bl	8001c10 <_Z28MPU6050_WaitForQuaternionSetv>
      MPU6050_ConvertToQuaternions();   //650 us
 800544c:	f7fc fbfc 	bl	8001c48 <_Z28MPU6050_ConvertToQuaternionsv>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005450:	2006      	movs	r0, #6
 8005452:	f001 fbd6 	bl	8006c02 <HAL_NVIC_EnableIRQ>
      get_XW_diffAngles();    //1100 us
 8005456:	f7fe f9d3 	bl	8003800 <_Z17get_XW_diffAnglesv>
      break;
 800545a:	f000 bc3f 	b.w	8005cdc <_Z4loopv+0x904>
    case 2:
      update_PID(); 	  //140 us
 800545e:	f7fe faed 	bl	8003a3c <_Z10update_PIDv>
      updateTailMotorSpeed();   //8 us
 8005462:	f7ff fd7d 	bl	8004f60 <_Z20updateTailMotorSpeedv>
      update_FrameOriginQuaternion();   //600 us
 8005466:	f7fc fc99 	bl	8001d9c <_Z28update_FrameOriginQuaternionv>
      if (SBUSNewPackage == true) SBUS_postProcessing();    //800 us
 800546a:	4bb7      	ldr	r3, [pc, #732]	; (8005748 <_Z4loopv+0x370>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <_Z4loopv+0x9e>
 8005472:	f7fe ffc3 	bl	80043fc <_Z19SBUS_postProcessingv>
      if (SBUS_Channels[4] >= 990)  //if the set-PID-switch on the remote is on, read the values
 8005476:	4bb5      	ldr	r3, [pc, #724]	; (800574c <_Z4loopv+0x374>)
 8005478:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800547c:	f240 32dd 	movw	r2, #989	; 0x3dd
 8005480:	4293      	cmp	r3, r2
 8005482:	dd03      	ble.n	800548c <_Z4loopv+0xb4>
      {
        getPIDValues();   //30 us
 8005484:	f7fe fc9e 	bl	8003dc4 <_Z12getPIDValuesv>
        getAngleOffset();   //450us
 8005488:	f7fe fe84 	bl	8004194 <_Z14getAngleOffsetv>
      }
      switchTuningMode();   //12 us
 800548c:	f7fe fee8 	bl	8004260 <_Z16switchTuningModev>
      break;
 8005490:	f000 bc24 	b.w	8005cdc <_Z4loopv+0x904>
    case 3:
      getMainMotorOffset();
 8005494:	f7ff fda0 	bl	8004fd8 <_Z18getMainMotorOffsetv>
      break;
 8005498:	f000 bc20 	b.w	8005cdc <_Z4loopv+0x904>
    case 4:
      if (SBUS_Channels[2] > motorDeadzone)
 800549c:	4bab      	ldr	r3, [pc, #684]	; (800574c <_Z4loopv+0x374>)
 800549e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80054a2:	f46f 726d 	mvn.w	r2, #948	; 0x3b4
 80054a6:	4293      	cmp	r3, r2
 80054a8:	f2c0 8415 	blt.w	8005cd6 <_Z4loopv+0x8fe>
      {
        for (size_t i = 0; i < 1; i++)
 80054ac:	2300      	movs	r3, #0
 80054ae:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80054b2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f040 840d 	bne.w	8005cd6 <_Z4loopv+0x8fe>
	        for (size_t i = 0; i < x; i++)
	        {
	        	msgTransmit[i] = msg[i];
	        }
	        CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
        }
 80054bc:	466b      	mov	r3, sp
 80054be:	461e      	mov	r6, r3
          , (((((((float)adcValueChannel12 - hall2_center) * hall2_scaler) * cos_OffsetAngle) - ((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * sin_OffsetAngle)) * 100)  \
 80054c0:	4ba3      	ldr	r3, [pc, #652]	; (8005750 <_Z4loopv+0x378>)
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fb fc41 	bl	8000d4c <__aeabi_ui2f>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fa ffe7 	bl	80004a0 <__aeabi_f2d>
 80054d2:	a395      	add	r3, pc, #596	; (adr r3, 8005728 <_Z4loopv+0x350>)
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	f7fa fe82 	bl	80001e0 <__aeabi_dsub>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4610      	mov	r0, r2
 80054e2:	4619      	mov	r1, r3
 80054e4:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 80054e8:	4b9a      	ldr	r3, [pc, #616]	; (8005754 <_Z4loopv+0x37c>)
 80054ea:	f7fb f831 	bl	8000550 <__aeabi_dmul>
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	4614      	mov	r4, r2
 80054f4:	461d      	mov	r5, r3
 80054f6:	4b98      	ldr	r3, [pc, #608]	; (8005758 <_Z4loopv+0x380>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fa ffd0 	bl	80004a0 <__aeabi_f2d>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4620      	mov	r0, r4
 8005506:	4629      	mov	r1, r5
 8005508:	f7fb f822 	bl	8000550 <__aeabi_dmul>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4614      	mov	r4, r2
 8005512:	461d      	mov	r5, r3
 8005514:	4b91      	ldr	r3, [pc, #580]	; (800575c <_Z4loopv+0x384>)
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	4618      	mov	r0, r3
 800551a:	f7fb fc17 	bl	8000d4c <__aeabi_ui2f>
 800551e:	4603      	mov	r3, r0
 8005520:	4618      	mov	r0, r3
 8005522:	f7fa ffbd 	bl	80004a0 <__aeabi_f2d>
 8005526:	a382      	add	r3, pc, #520	; (adr r3, 8005730 <_Z4loopv+0x358>)
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f7fa fe58 	bl	80001e0 <__aeabi_dsub>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4610      	mov	r0, r2
 8005536:	4619      	mov	r1, r3
 8005538:	a37f      	add	r3, pc, #508	; (adr r3, 8005738 <_Z4loopv+0x360>)
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	f7fb f807 	bl	8000550 <__aeabi_dmul>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4690      	mov	r8, r2
 8005548:	4699      	mov	r9, r3
 800554a:	4b85      	ldr	r3, [pc, #532]	; (8005760 <_Z4loopv+0x388>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f7fa ffa6 	bl	80004a0 <__aeabi_f2d>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4640      	mov	r0, r8
 800555a:	4649      	mov	r1, r9
 800555c:	f7fa fff8 	bl	8000550 <__aeabi_dmul>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4620      	mov	r0, r4
 8005566:	4629      	mov	r1, r5
 8005568:	f7fa fe3a 	bl	80001e0 <__aeabi_dsub>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4610      	mov	r0, r2
 8005572:	4619      	mov	r1, r3
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	4b7a      	ldr	r3, [pc, #488]	; (8005764 <_Z4loopv+0x38c>)
 800557a:	f7fa ffe9 	bl	8000550 <__aeabi_dmul>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4614      	mov	r4, r2
 8005584:	461d      	mov	r5, r3
          + ((((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * cos_OffsetAngle) + ((((float)adcValueChannel12 - hall2_center) * hall2_scaler) * sin_OffsetAngle)) * 0))  \
 8005586:	4b75      	ldr	r3, [pc, #468]	; (800575c <_Z4loopv+0x384>)
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f7fb fbde 	bl	8000d4c <__aeabi_ui2f>
 8005590:	4603      	mov	r3, r0
 8005592:	4618      	mov	r0, r3
 8005594:	f7fa ff84 	bl	80004a0 <__aeabi_f2d>
 8005598:	a365      	add	r3, pc, #404	; (adr r3, 8005730 <_Z4loopv+0x358>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f7fa fe1f 	bl	80001e0 <__aeabi_dsub>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4610      	mov	r0, r2
 80055a8:	4619      	mov	r1, r3
 80055aa:	a363      	add	r3, pc, #396	; (adr r3, 8005738 <_Z4loopv+0x360>)
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	f7fa ffce 	bl	8000550 <__aeabi_dmul>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4690      	mov	r8, r2
 80055ba:	4699      	mov	r9, r3
 80055bc:	4b66      	ldr	r3, [pc, #408]	; (8005758 <_Z4loopv+0x380>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fa ff6d 	bl	80004a0 <__aeabi_f2d>
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	4640      	mov	r0, r8
 80055cc:	4649      	mov	r1, r9
 80055ce:	f7fa ffbf 	bl	8000550 <__aeabi_dmul>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4690      	mov	r8, r2
 80055d8:	4699      	mov	r9, r3
 80055da:	4b5d      	ldr	r3, [pc, #372]	; (8005750 <_Z4loopv+0x378>)
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fb fbb4 	bl	8000d4c <__aeabi_ui2f>
 80055e4:	4603      	mov	r3, r0
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fa ff5a 	bl	80004a0 <__aeabi_f2d>
 80055ec:	a34e      	add	r3, pc, #312	; (adr r3, 8005728 <_Z4loopv+0x350>)
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	f7fa fdf5 	bl	80001e0 <__aeabi_dsub>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	4610      	mov	r0, r2
 80055fc:	4619      	mov	r1, r3
 80055fe:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8005602:	4b54      	ldr	r3, [pc, #336]	; (8005754 <_Z4loopv+0x37c>)
 8005604:	f7fa ffa4 	bl	8000550 <__aeabi_dmul>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4692      	mov	sl, r2
 800560e:	469b      	mov	fp, r3
 8005610:	4b53      	ldr	r3, [pc, #332]	; (8005760 <_Z4loopv+0x388>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f7fa ff43 	bl	80004a0 <__aeabi_f2d>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4650      	mov	r0, sl
 8005620:	4659      	mov	r1, fp
 8005622:	f7fa ff95 	bl	8000550 <__aeabi_dmul>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4640      	mov	r0, r8
 800562c:	4649      	mov	r1, r9
 800562e:	f7fa fdd9 	bl	80001e4 <__adddf3>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	4610      	mov	r0, r2
 8005638:	4619      	mov	r1, r3
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	f7fa ff85 	bl	8000550 <__aeabi_dmul>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
	        sprintf((char*)msg,"%f %f \r\n"                                                                                                                                                           \
 800564a:	4620      	mov	r0, r4
 800564c:	4629      	mov	r1, r5
 800564e:	f7fa fdc9 	bl	80001e4 <__adddf3>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4614      	mov	r4, r2
 8005658:	461d      	mov	r5, r3
 800565a:	4b43      	ldr	r3, [pc, #268]	; (8005768 <_Z4loopv+0x390>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f7fa ff1e 	bl	80004a0 <__aeabi_f2d>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 800566c:	e9cd 2300 	strd	r2, r3, [sp]
 8005670:	4622      	mov	r2, r4
 8005672:	462b      	mov	r3, r5
 8005674:	493d      	ldr	r1, [pc, #244]	; (800576c <_Z4loopv+0x394>)
 8005676:	f00b fb07 	bl	8010c88 <siprintf>
          uint8_t x = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
	        while (msg[x] != NULL)
 8005680:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8005684:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8005688:	5cd3      	ldrb	r3, [r2, r3]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <_Z4loopv+0x2c2>
	        	x++;
 800568e:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8005692:	3301      	adds	r3, #1
 8005694:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
	        while (msg[x] != NULL)
 8005698:	e7f2      	b.n	8005680 <_Z4loopv+0x2a8>
	        unsigned char msgTransmit[x];
 800569a:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800569e:	1e5c      	subs	r4, r3, #1
 80056a0:	f8c7 41cc 	str.w	r4, [r7, #460]	; 0x1cc
 80056a4:	4623      	mov	r3, r4
 80056a6:	3301      	adds	r3, #1
 80056a8:	4618      	mov	r0, r3
 80056aa:	f04f 0100 	mov.w	r1, #0
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	f04f 0300 	mov.w	r3, #0
 80056b6:	00cb      	lsls	r3, r1, #3
 80056b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80056bc:	00c2      	lsls	r2, r0, #3
 80056be:	4623      	mov	r3, r4
 80056c0:	3301      	adds	r3, #1
 80056c2:	4618      	mov	r0, r3
 80056c4:	f04f 0100 	mov.w	r1, #0
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	f04f 0300 	mov.w	r3, #0
 80056d0:	00cb      	lsls	r3, r1, #3
 80056d2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80056d6:	00c2      	lsls	r2, r0, #3
 80056d8:	4623      	mov	r3, r4
 80056da:	3301      	adds	r3, #1
 80056dc:	3307      	adds	r3, #7
 80056de:	08db      	lsrs	r3, r3, #3
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	ebad 0d03 	sub.w	sp, sp, r3
 80056e6:	ab2a      	add	r3, sp, #168	; 0xa8
 80056e8:	3300      	adds	r3, #0
 80056ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	        for (size_t i = 0; i < x; i++)
 80056ee:	2300      	movs	r3, #0
 80056f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80056f4:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 80056f8:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d237      	bcs.n	8005770 <_Z4loopv+0x398>
	        	msgTransmit[i] = msg[i];
 8005700:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8005704:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005708:	4413      	add	r3, r2
 800570a:	7819      	ldrb	r1, [r3, #0]
 800570c:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8005710:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005714:	4413      	add	r3, r2
 8005716:	460a      	mov	r2, r1
 8005718:	701a      	strb	r2, [r3, #0]
	        for (size_t i = 0; i < x; i++)
 800571a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800571e:	3301      	adds	r3, #1
 8005720:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005724:	e7e6      	b.n	80056f4 <_Z4loopv+0x31c>
 8005726:	bf00      	nop
 8005728:	00000000 	.word	0x00000000
 800572c:	4093b000 	.word	0x4093b000
 8005730:	00000000 	.word	0x00000000
 8005734:	4093c400 	.word	0x4093c400
 8005738:	6d92aca5 	.word	0x6d92aca5
 800573c:	3f4fa8ef 	.word	0x3f4fa8ef
 8005740:	40000800 	.word	0x40000800
 8005744:	200007fc 	.word	0x200007fc
 8005748:	2000066c 	.word	0x2000066c
 800574c:	2000065c 	.word	0x2000065c
 8005750:	200007ec 	.word	0x200007ec
 8005754:	3f501010 	.word	0x3f501010
 8005758:	200007f8 	.word	0x200007f8
 800575c:	200007e8 	.word	0x200007e8
 8005760:	200007f4 	.word	0x200007f4
 8005764:	40590000 	.word	0x40590000
 8005768:	2000003c 	.word	0x2000003c
 800576c:	08012f98 	.word	0x08012f98
	        CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 8005770:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8005774:	b2a3      	uxth	r3, r4
 8005776:	3301      	adds	r3, #1
 8005778:	b29b      	uxth	r3, r3
 800577a:	4619      	mov	r1, r3
 800577c:	4610      	mov	r0, r2
 800577e:	f007 ff9f 	bl	800d6c0 <CDC_Transmit_FS>
 8005782:	46b5      	mov	sp, r6
        for (size_t i = 0; i < 1; i++)
 8005784:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8005788:	3301      	adds	r3, #1
 800578a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800578e:	e690      	b.n	80054b2 <_Z4loopv+0xda>
      }
      break;
    case 7:
      MPU6050_resetFIFO();    //300 us
 8005790:	f7fc fa34 	bl	8001bfc <_Z17MPU6050_resetFIFOv>
      break;
 8005794:	e2a2      	b.n	8005cdc <_Z4loopv+0x904>
    case 8:
      task = 0;                 //reset to task 1  (keep in mind task ++; below)
 8005796:	4bb0      	ldr	r3, [pc, #704]	; (8005a58 <_Z4loopv+0x680>)
 8005798:	2200      	movs	r2, #0
 800579a:	701a      	strb	r2, [r3, #0]

      if (SBUS_Channels[2] <= motorDeadzone)
 800579c:	4baf      	ldr	r3, [pc, #700]	; (8005a5c <_Z4loopv+0x684>)
 800579e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80057a2:	f46f 726d 	mvn.w	r2, #948	; 0x3b4
 80057a6:	4293      	cmp	r3, r2
 80057a8:	f280 8297 	bge.w	8005cda <_Z4loopv+0x902>
      {
        for (size_t i = 0; i < 1; i++)
 80057ac:	2300      	movs	r3, #0
 80057ae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80057b2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f040 828f 	bne.w	8005cda <_Z4loopv+0x902>
	        for (size_t i = 0; i < x; i++)
	        {
	        	msgTransmit[i] = msg[i];
	        }
	        CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
        }
 80057bc:	466b      	mov	r3, sp
 80057be:	461e      	mov	r6, r3
          , LoopXWQuaternion[0]                                                                                                                                                                      \
 80057c0:	4ba7      	ldr	r3, [pc, #668]	; (8005a60 <_Z4loopv+0x688>)
 80057c2:	681b      	ldr	r3, [r3, #0]
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"                                                                                                        \
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fa fe6b 	bl	80004a0 <__aeabi_f2d>
 80057ca:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
          , LoopXWQuaternion[1]                                                                                                                                                                      \
 80057ce:	4ba4      	ldr	r3, [pc, #656]	; (8005a60 <_Z4loopv+0x688>)
 80057d0:	685b      	ldr	r3, [r3, #4]
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"                                                                                                        \
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fa fe64 	bl	80004a0 <__aeabi_f2d>
 80057d8:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
          , LoopXWQuaternion[2]                                                                                                                                                                      \
 80057dc:	4ba0      	ldr	r3, [pc, #640]	; (8005a60 <_Z4loopv+0x688>)
 80057de:	689b      	ldr	r3, [r3, #8]
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"                                                                                                        \
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fa fe5d 	bl	80004a0 <__aeabi_f2d>
 80057e6:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
          , LoopXWQuaternion[3]                                                                                                                                                                      \
 80057ea:	4b9d      	ldr	r3, [pc, #628]	; (8005a60 <_Z4loopv+0x688>)
 80057ec:	68db      	ldr	r3, [r3, #12]
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"                                                                                                        \
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fa fe56 	bl	80004a0 <__aeabi_f2d>
 80057f4:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
 80057f8:	4b9a      	ldr	r3, [pc, #616]	; (8005a64 <_Z4loopv+0x68c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fa fe4f 	bl	80004a0 <__aeabi_f2d>
 8005802:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
 8005806:	4b98      	ldr	r3, [pc, #608]	; (8005a68 <_Z4loopv+0x690>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f7fa fe48 	bl	80004a0 <__aeabi_f2d>
 8005810:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
 8005814:	4b95      	ldr	r3, [pc, #596]	; (8005a6c <_Z4loopv+0x694>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4618      	mov	r0, r3
 800581a:	f7fa fe41 	bl	80004a0 <__aeabi_f2d>
 800581e:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 8005822:	4b93      	ldr	r3, [pc, #588]	; (8005a70 <_Z4loopv+0x698>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f7fa fe3a 	bl	80004a0 <__aeabi_f2d>
 800582c:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8005830:	4b90      	ldr	r3, [pc, #576]	; (8005a74 <_Z4loopv+0x69c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f7fa fe33 	bl	80004a0 <__aeabi_f2d>
 800583a:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 800583e:	4b8e      	ldr	r3, [pc, #568]	; (8005a78 <_Z4loopv+0x6a0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f7fa fe2c 	bl	80004a0 <__aeabi_f2d>
 8005848:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
          , Pitch_PID_k[0] * 100                                                                                                                                                                     \
 800584c:	4b8b      	ldr	r3, [pc, #556]	; (8005a7c <_Z4loopv+0x6a4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	498b      	ldr	r1, [pc, #556]	; (8005a80 <_Z4loopv+0x6a8>)
 8005852:	4618      	mov	r0, r3
 8005854:	f7fb fad2 	bl	8000dfc <__aeabi_fmul>
 8005858:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"                                                                                                        \
 800585a:	4618      	mov	r0, r3
 800585c:	f7fa fe20 	bl	80004a0 <__aeabi_f2d>
 8005860:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
          , Pitch_PID_k[1] * 100                                                                                                                                                                     \
 8005864:	4b85      	ldr	r3, [pc, #532]	; (8005a7c <_Z4loopv+0x6a4>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	4985      	ldr	r1, [pc, #532]	; (8005a80 <_Z4loopv+0x6a8>)
 800586a:	4618      	mov	r0, r3
 800586c:	f7fb fac6 	bl	8000dfc <__aeabi_fmul>
 8005870:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"                                                                                                        \
 8005872:	4618      	mov	r0, r3
 8005874:	f7fa fe14 	bl	80004a0 <__aeabi_f2d>
 8005878:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
          , Pitch_PID_k[2] * 100                                                                                                                                                                     \
 800587c:	4b7f      	ldr	r3, [pc, #508]	; (8005a7c <_Z4loopv+0x6a4>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	497f      	ldr	r1, [pc, #508]	; (8005a80 <_Z4loopv+0x6a8>)
 8005882:	4618      	mov	r0, r3
 8005884:	f7fb faba 	bl	8000dfc <__aeabi_fmul>
 8005888:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"                                                                                                        \
 800588a:	4618      	mov	r0, r3
 800588c:	f7fa fe08 	bl	80004a0 <__aeabi_f2d>
 8005890:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
          , Roll_PID_k[0] * 100                                                                                                                                                                      \
 8005894:	4b7b      	ldr	r3, [pc, #492]	; (8005a84 <_Z4loopv+0x6ac>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4979      	ldr	r1, [pc, #484]	; (8005a80 <_Z4loopv+0x6a8>)
 800589a:	4618      	mov	r0, r3
 800589c:	f7fb faae 	bl	8000dfc <__aeabi_fmul>
 80058a0:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"                                                                                                        \
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fa fdfc 	bl	80004a0 <__aeabi_f2d>
 80058a8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
          , Roll_PID_k[1] * 100                                                                                                                                                                      \
 80058ac:	4b75      	ldr	r3, [pc, #468]	; (8005a84 <_Z4loopv+0x6ac>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	4973      	ldr	r1, [pc, #460]	; (8005a80 <_Z4loopv+0x6a8>)
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fb faa2 	bl	8000dfc <__aeabi_fmul>
 80058b8:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"                                                                                                        \
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fa fdf0 	bl	80004a0 <__aeabi_f2d>
 80058c0:	e9c7 0108 	strd	r0, r1, [r7, #32]
          , Roll_PID_k[2] * 100                                                                                                                                                                      \
 80058c4:	4b6f      	ldr	r3, [pc, #444]	; (8005a84 <_Z4loopv+0x6ac>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	496d      	ldr	r1, [pc, #436]	; (8005a80 <_Z4loopv+0x6a8>)
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fb fa96 	bl	8000dfc <__aeabi_fmul>
 80058d0:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"                                                                                                        \
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fa fde4 	bl	80004a0 <__aeabi_f2d>
 80058d8:	e9c7 0106 	strd	r0, r1, [r7, #24]
          , Yaw_PID_k[0] * 100                                                                                                                                                                       \
 80058dc:	4b6a      	ldr	r3, [pc, #424]	; (8005a88 <_Z4loopv+0x6b0>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4967      	ldr	r1, [pc, #412]	; (8005a80 <_Z4loopv+0x6a8>)
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fb fa8a 	bl	8000dfc <__aeabi_fmul>
 80058e8:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"                                                                                                        \
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fa fdd8 	bl	80004a0 <__aeabi_f2d>
 80058f0:	e9c7 0104 	strd	r0, r1, [r7, #16]
          , Yaw_PID_k[1] * 100                                                                                                                                                                       \
 80058f4:	4b64      	ldr	r3, [pc, #400]	; (8005a88 <_Z4loopv+0x6b0>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	4961      	ldr	r1, [pc, #388]	; (8005a80 <_Z4loopv+0x6a8>)
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fb fa7e 	bl	8000dfc <__aeabi_fmul>
 8005900:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"                                                                                                        \
 8005902:	4618      	mov	r0, r3
 8005904:	f7fa fdcc 	bl	80004a0 <__aeabi_f2d>
 8005908:	e9c7 0102 	strd	r0, r1, [r7, #8]
          , Yaw_PID_k[2] * 100                                                                                                                                                                       \
 800590c:	4b5e      	ldr	r3, [pc, #376]	; (8005a88 <_Z4loopv+0x6b0>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	495b      	ldr	r1, [pc, #364]	; (8005a80 <_Z4loopv+0x6a8>)
 8005912:	4618      	mov	r0, r3
 8005914:	f7fb fa72 	bl	8000dfc <__aeabi_fmul>
 8005918:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"                                                                                                        \
 800591a:	4618      	mov	r0, r3
 800591c:	f7fa fdc0 	bl	80004a0 <__aeabi_f2d>
 8005920:	e9c7 0100 	strd	r0, r1, [r7]
          , ((((((float)adcValueChannel12 - hall2_center) * hall2_scaler) * cos_OffsetAngle) - ((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * sin_OffsetAngle)) * (PID_Pitch_y * 1))  \
 8005924:	4b59      	ldr	r3, [pc, #356]	; (8005a8c <_Z4loopv+0x6b4>)
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f7fb fa0f 	bl	8000d4c <__aeabi_ui2f>
 800592e:	4603      	mov	r3, r0
 8005930:	4618      	mov	r0, r3
 8005932:	f7fa fdb5 	bl	80004a0 <__aeabi_f2d>
 8005936:	a342      	add	r3, pc, #264	; (adr r3, 8005a40 <_Z4loopv+0x668>)
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	f7fa fc50 	bl	80001e0 <__aeabi_dsub>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4610      	mov	r0, r2
 8005946:	4619      	mov	r1, r3
 8005948:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800594c:	4b50      	ldr	r3, [pc, #320]	; (8005a90 <_Z4loopv+0x6b8>)
 800594e:	f7fa fdff 	bl	8000550 <__aeabi_dmul>
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	4614      	mov	r4, r2
 8005958:	461d      	mov	r5, r3
 800595a:	4b4e      	ldr	r3, [pc, #312]	; (8005a94 <_Z4loopv+0x6bc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f7fa fd9e 	bl	80004a0 <__aeabi_f2d>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4620      	mov	r0, r4
 800596a:	4629      	mov	r1, r5
 800596c:	f7fa fdf0 	bl	8000550 <__aeabi_dmul>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4690      	mov	r8, r2
 8005976:	4699      	mov	r9, r3
 8005978:	4b47      	ldr	r3, [pc, #284]	; (8005a98 <_Z4loopv+0x6c0>)
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	4618      	mov	r0, r3
 800597e:	f7fb f9e5 	bl	8000d4c <__aeabi_ui2f>
 8005982:	4603      	mov	r3, r0
 8005984:	4618      	mov	r0, r3
 8005986:	f7fa fd8b 	bl	80004a0 <__aeabi_f2d>
 800598a:	a32f      	add	r3, pc, #188	; (adr r3, 8005a48 <_Z4loopv+0x670>)
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f7fa fc26 	bl	80001e0 <__aeabi_dsub>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4610      	mov	r0, r2
 800599a:	4619      	mov	r1, r3
 800599c:	a32c      	add	r3, pc, #176	; (adr r3, 8005a50 <_Z4loopv+0x678>)
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	f7fa fdd5 	bl	8000550 <__aeabi_dmul>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4614      	mov	r4, r2
 80059ac:	461d      	mov	r5, r3
 80059ae:	4b3b      	ldr	r3, [pc, #236]	; (8005a9c <_Z4loopv+0x6c4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fa fd74 	bl	80004a0 <__aeabi_f2d>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4620      	mov	r0, r4
 80059be:	4629      	mov	r1, r5
 80059c0:	f7fa fdc6 	bl	8000550 <__aeabi_dmul>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4640      	mov	r0, r8
 80059ca:	4649      	mov	r1, r9
 80059cc:	f7fa fc08 	bl	80001e0 <__aeabi_dsub>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4614      	mov	r4, r2
 80059d6:	461d      	mov	r5, r3
 80059d8:	4b25      	ldr	r3, [pc, #148]	; (8005a70 <_Z4loopv+0x698>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fa fd5f 	bl	80004a0 <__aeabi_f2d>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4620      	mov	r0, r4
 80059e8:	4629      	mov	r1, r5
 80059ea:	f7fa fdb1 	bl	8000550 <__aeabi_dmul>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4692      	mov	sl, r2
 80059f4:	469b      	mov	fp, r3
          + ((((((float)adcValueChannel11 - hall1_center) * hall1_scaler) * cos_OffsetAngle) + ((((float)adcValueChannel12 - hall2_center) * hall2_scaler) * sin_OffsetAngle)) * (PID_Roll_y  * 1))  \
 80059f6:	4b28      	ldr	r3, [pc, #160]	; (8005a98 <_Z4loopv+0x6c0>)
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fb f9a6 	bl	8000d4c <__aeabi_ui2f>
 8005a00:	4603      	mov	r3, r0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fa fd4c 	bl	80004a0 <__aeabi_f2d>
 8005a08:	a30f      	add	r3, pc, #60	; (adr r3, 8005a48 <_Z4loopv+0x670>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f7fa fbe7 	bl	80001e0 <__aeabi_dsub>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4610      	mov	r0, r2
 8005a18:	4619      	mov	r1, r3
 8005a1a:	a30d      	add	r3, pc, #52	; (adr r3, 8005a50 <_Z4loopv+0x678>)
 8005a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a20:	f7fa fd96 	bl	8000550 <__aeabi_dmul>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4614      	mov	r4, r2
 8005a2a:	461d      	mov	r5, r3
 8005a2c:	4b19      	ldr	r3, [pc, #100]	; (8005a94 <_Z4loopv+0x6bc>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fa fd35 	bl	80004a0 <__aeabi_f2d>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	e02f      	b.n	8005aa0 <_Z4loopv+0x6c8>
 8005a40:	00000000 	.word	0x00000000
 8005a44:	4093b000 	.word	0x4093b000
 8005a48:	00000000 	.word	0x00000000
 8005a4c:	4093c400 	.word	0x4093c400
 8005a50:	6d92aca5 	.word	0x6d92aca5
 8005a54:	3f4fa8ef 	.word	0x3f4fa8ef
 8005a58:	200007fc 	.word	0x200007fc
 8005a5c:	2000065c 	.word	0x2000065c
 8005a60:	2000058c 	.word	0x2000058c
 8005a64:	20000518 	.word	0x20000518
 8005a68:	2000051c 	.word	0x2000051c
 8005a6c:	20000520 	.word	0x20000520
 8005a70:	20000524 	.word	0x20000524
 8005a74:	20000528 	.word	0x20000528
 8005a78:	2000052c 	.word	0x2000052c
 8005a7c:	20000530 	.word	0x20000530
 8005a80:	42c80000 	.word	0x42c80000
 8005a84:	2000053c 	.word	0x2000053c
 8005a88:	20000548 	.word	0x20000548
 8005a8c:	200007ec 	.word	0x200007ec
 8005a90:	3f501010 	.word	0x3f501010
 8005a94:	200007f8 	.word	0x200007f8
 8005a98:	200007e8 	.word	0x200007e8
 8005a9c:	200007f4 	.word	0x200007f4
 8005aa0:	f7fa fd56 	bl	8000550 <__aeabi_dmul>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4690      	mov	r8, r2
 8005aaa:	4699      	mov	r9, r3
 8005aac:	4ba0      	ldr	r3, [pc, #640]	; (8005d30 <_Z4loopv+0x958>)
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fb f94b 	bl	8000d4c <__aeabi_ui2f>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fa fcf1 	bl	80004a0 <__aeabi_f2d>
 8005abe:	a39a      	add	r3, pc, #616	; (adr r3, 8005d28 <_Z4loopv+0x950>)
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	f7fa fb8c 	bl	80001e0 <__aeabi_dsub>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4610      	mov	r0, r2
 8005ace:	4619      	mov	r1, r3
 8005ad0:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8005ad4:	4b97      	ldr	r3, [pc, #604]	; (8005d34 <_Z4loopv+0x95c>)
 8005ad6:	f7fa fd3b 	bl	8000550 <__aeabi_dmul>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4614      	mov	r4, r2
 8005ae0:	461d      	mov	r5, r3
 8005ae2:	4b95      	ldr	r3, [pc, #596]	; (8005d38 <_Z4loopv+0x960>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fa fcda 	bl	80004a0 <__aeabi_f2d>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4620      	mov	r0, r4
 8005af2:	4629      	mov	r1, r5
 8005af4:	f7fa fd2c 	bl	8000550 <__aeabi_dmul>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4640      	mov	r0, r8
 8005afe:	4649      	mov	r1, r9
 8005b00:	f7fa fb70 	bl	80001e4 <__adddf3>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4614      	mov	r4, r2
 8005b0a:	461d      	mov	r5, r3
 8005b0c:	4b8b      	ldr	r3, [pc, #556]	; (8005d3c <_Z4loopv+0x964>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fa fcc5 	bl	80004a0 <__aeabi_f2d>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	f7fa fd17 	bl	8000550 <__aeabi_dmul>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"                                                                                                        \
 8005b26:	4650      	mov	r0, sl
 8005b28:	4659      	mov	r1, fp
 8005b2a:	f7fa fb5b 	bl	80001e4 <__adddf3>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4690      	mov	r8, r2
 8005b34:	4699      	mov	r9, r3
          , (float)SBUS_Channels[5]                                                                                                                                                                  \
 8005b36:	4b82      	ldr	r3, [pc, #520]	; (8005d40 <_Z4loopv+0x968>)
 8005b38:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fb f909 	bl	8000d54 <__aeabi_i2f>
 8005b42:	4603      	mov	r3, r0
	        sprintf((char*)msg,"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f \r\n"                                                                                                        \
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fa fcab 	bl	80004a0 <__aeabi_f2d>
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	460d      	mov	r5, r1
 8005b4e:	4b7d      	ldr	r3, [pc, #500]	; (8005d44 <_Z4loopv+0x96c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fa fca4 	bl	80004a0 <__aeabi_f2d>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8005b60:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 8005b64:	e9cd 4526 	strd	r4, r5, [sp, #152]	; 0x98
 8005b68:	e9cd 8924 	strd	r8, r9, [sp, #144]	; 0x90
 8005b6c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005b70:	e9cd 3422 	strd	r3, r4, [sp, #136]	; 0x88
 8005b74:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005b78:	e9cd 3420 	strd	r3, r4, [sp, #128]	; 0x80
 8005b7c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005b80:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
 8005b84:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005b88:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
 8005b8c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005b90:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
 8005b94:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005b98:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
 8005b9c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005ba0:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 8005ba4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8005ba8:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 8005bac:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005bb0:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 8005bb4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005bb8:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005bbc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8005bc0:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 8005bc4:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005bc8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005bcc:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8005bd0:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005bd4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005bd8:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005bdc:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8005be0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005be4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005be8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005bec:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8005bf0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005bf4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8005bf8:	e9cd 3400 	strd	r3, r4, [sp]
 8005bfc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005c00:	4951      	ldr	r1, [pc, #324]	; (8005d48 <_Z4loopv+0x970>)
 8005c02:	f00b f841 	bl	8010c88 <siprintf>
	        uint8_t x = 0;
 8005c06:	2300      	movs	r3, #0
 8005c08:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
	        while (msg[x] != NULL)
 8005c0c:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 8005c10:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8005c14:	5cd3      	ldrb	r3, [r2, r3]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <_Z4loopv+0x84e>
	        	x++;
 8005c1a:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 8005c1e:	3301      	adds	r3, #1
 8005c20:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
	        while (msg[x] != NULL)
 8005c24:	e7f2      	b.n	8005c0c <_Z4loopv+0x834>
	        unsigned char msgTransmit[x];
 8005c26:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 8005c2a:	1e5c      	subs	r4, r3, #1
 8005c2c:	f8c7 41d4 	str.w	r4, [r7, #468]	; 0x1d4
 8005c30:	4623      	mov	r3, r4
 8005c32:	3301      	adds	r3, #1
 8005c34:	4618      	mov	r0, r3
 8005c36:	f04f 0100 	mov.w	r1, #0
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	00cb      	lsls	r3, r1, #3
 8005c44:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005c48:	00c2      	lsls	r2, r0, #3
 8005c4a:	4623      	mov	r3, r4
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f04f 0100 	mov.w	r1, #0
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	00cb      	lsls	r3, r1, #3
 8005c5e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005c62:	00c2      	lsls	r2, r0, #3
 8005c64:	4623      	mov	r3, r4
 8005c66:	3301      	adds	r3, #1
 8005c68:	3307      	adds	r3, #7
 8005c6a:	08db      	lsrs	r3, r3, #3
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	ebad 0d03 	sub.w	sp, sp, r3
 8005c72:	ab2a      	add	r3, sp, #168	; 0xa8
 8005c74:	3300      	adds	r3, #0
 8005c76:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	        for (size_t i = 0; i < x; i++)
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8005c80:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 8005c84:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d212      	bcs.n	8005cb2 <_Z4loopv+0x8da>
	        	msgTransmit[i] = msg[i];
 8005c8c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8005c90:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005c94:	4413      	add	r3, r2
 8005c96:	7819      	ldrb	r1, [r3, #0]
 8005c98:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8005c9c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005ca0:	4413      	add	r3, r2
 8005ca2:	460a      	mov	r2, r1
 8005ca4:	701a      	strb	r2, [r3, #0]
	        for (size_t i = 0; i < x; i++)
 8005ca6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005caa:	3301      	adds	r3, #1
 8005cac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8005cb0:	e7e6      	b.n	8005c80 <_Z4loopv+0x8a8>
	        CDC_Transmit_FS((unsigned char*)msgTransmit, sizeof(msgTransmit));
 8005cb2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8005cb6:	b2a3      	uxth	r3, r4
 8005cb8:	3301      	adds	r3, #1
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f007 fcfe 	bl	800d6c0 <CDC_Transmit_FS>
 8005cc4:	46b5      	mov	sp, r6
        for (size_t i = 0; i < 1; i++)
 8005cc6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005cca:	3301      	adds	r3, #1
 8005ccc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005cd0:	e56f      	b.n	80057b2 <_Z4loopv+0x3da>
      }
      break;
    default:
      break;
 8005cd2:	bf00      	nop
 8005cd4:	e002      	b.n	8005cdc <_Z4loopv+0x904>
      break;
 8005cd6:	bf00      	nop
 8005cd8:	e000      	b.n	8005cdc <_Z4loopv+0x904>
      break;
 8005cda:	bf00      	nop
    }
    task ++;
 8005cdc:	4b1b      	ldr	r3, [pc, #108]	; (8005d4c <_Z4loopv+0x974>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	4b19      	ldr	r3, [pc, #100]	; (8005d4c <_Z4loopv+0x974>)
 8005ce6:	701a      	strb	r2, [r3, #0]

    while (TIM4->CNT > (fastPPM_Pulselength - fastPPM_calcutationTime));     //wait until TIM4 resets to 0
 8005ce8:	4b19      	ldr	r3, [pc, #100]	; (8005d50 <_Z4loopv+0x978>)
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	f640 1288 	movw	r2, #2440	; 0x988
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	bf8c      	ite	hi
 8005cf4:	2301      	movhi	r3, #1
 8005cf6:	2300      	movls	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d000      	beq.n	8005d00 <_Z4loopv+0x928>
 8005cfe:	e7f3      	b.n	8005ce8 <_Z4loopv+0x910>
    while (TIM4->CNT < (fastPPM_Pulselength - fastPPM_calcutationTime));     //wait until fastPPM_Pulselength - fastPPM_calcutationTime has passed
 8005d00:	4b13      	ldr	r3, [pc, #76]	; (8005d50 <_Z4loopv+0x978>)
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	f640 1287 	movw	r2, #2439	; 0x987
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	bf94      	ite	ls
 8005d0c:	2301      	movls	r3, #1
 8005d0e:	2300      	movhi	r3, #0
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d000      	beq.n	8005d18 <_Z4loopv+0x940>
 8005d16:	e7f3      	b.n	8005d00 <_Z4loopv+0x928>
  }
 8005d18:	bf00      	nop
 8005d1a:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d24:	f3af 8000 	nop.w
 8005d28:	00000000 	.word	0x00000000
 8005d2c:	4093b000 	.word	0x4093b000
 8005d30:	200007ec 	.word	0x200007ec
 8005d34:	3f501010 	.word	0x3f501010
 8005d38:	200007f4 	.word	0x200007f4
 8005d3c:	20000528 	.word	0x20000528
 8005d40:	2000065c 	.word	0x2000065c
 8005d44:	2000003c 	.word	0x2000003c
 8005d48:	08012fa4 	.word	0x08012fa4
 8005d4c:	200007fc 	.word	0x200007fc
 8005d50:	40000800 	.word	0x40000800

08005d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	607b      	str	r3, [r7, #4]
 8005d5e:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <HAL_MspInit+0x48>)
 8005d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d62:	4a0e      	ldr	r2, [pc, #56]	; (8005d9c <HAL_MspInit+0x48>)
 8005d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d68:	6453      	str	r3, [r2, #68]	; 0x44
 8005d6a:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <HAL_MspInit+0x48>)
 8005d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d72:	607b      	str	r3, [r7, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d76:	2300      	movs	r3, #0
 8005d78:	603b      	str	r3, [r7, #0]
 8005d7a:	4b08      	ldr	r3, [pc, #32]	; (8005d9c <HAL_MspInit+0x48>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	4a07      	ldr	r2, [pc, #28]	; (8005d9c <HAL_MspInit+0x48>)
 8005d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d84:	6413      	str	r3, [r2, #64]	; 0x40
 8005d86:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <HAL_MspInit+0x48>)
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8e:	603b      	str	r3, [r7, #0]
 8005d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr
 8005d9c:	40023800 	.word	0x40023800

08005da0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08a      	sub	sp, #40	; 0x28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005da8:	f107 0314 	add.w	r3, r7, #20
 8005dac:	2200      	movs	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	605a      	str	r2, [r3, #4]
 8005db2:	609a      	str	r2, [r3, #8]
 8005db4:	60da      	str	r2, [r3, #12]
 8005db6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <HAL_ADC_MspInit+0x7c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d127      	bne.n	8005e12 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	4b16      	ldr	r3, [pc, #88]	; (8005e20 <HAL_ADC_MspInit+0x80>)
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dca:	4a15      	ldr	r2, [pc, #84]	; (8005e20 <HAL_ADC_MspInit+0x80>)
 8005dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8005dd2:	4b13      	ldr	r3, [pc, #76]	; (8005e20 <HAL_ADC_MspInit+0x80>)
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dda:	613b      	str	r3, [r7, #16]
 8005ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	4b0f      	ldr	r3, [pc, #60]	; (8005e20 <HAL_ADC_MspInit+0x80>)
 8005de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de6:	4a0e      	ldr	r2, [pc, #56]	; (8005e20 <HAL_ADC_MspInit+0x80>)
 8005de8:	f043 0304 	orr.w	r3, r3, #4
 8005dec:	6313      	str	r3, [r2, #48]	; 0x30
 8005dee:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <HAL_ADC_MspInit+0x80>)
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	f003 0304 	and.w	r3, r3, #4
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ONBOARD_ADC_2_Pin|ONBOARD_ADC_1_Pin;
 8005dfa:	2306      	movs	r3, #6
 8005dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e06:	f107 0314 	add.w	r3, r7, #20
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4805      	ldr	r0, [pc, #20]	; (8005e24 <HAL_ADC_MspInit+0x84>)
 8005e0e:	f000 ff21 	bl	8006c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005e12:	bf00      	nop
 8005e14:	3728      	adds	r7, #40	; 0x28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40012000 	.word	0x40012000
 8005e20:	40023800 	.word	0x40023800
 8005e24:	40020800 	.word	0x40020800

08005e28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e30:	f107 0314 	add.w	r3, r7, #20
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	605a      	str	r2, [r3, #4]
 8005e3a:	609a      	str	r2, [r3, #8]
 8005e3c:	60da      	str	r2, [r3, #12]
 8005e3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a19      	ldr	r2, [pc, #100]	; (8005eac <HAL_I2C_MspInit+0x84>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d12c      	bne.n	8005ea4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	613b      	str	r3, [r7, #16]
 8005e4e:	4b18      	ldr	r3, [pc, #96]	; (8005eb0 <HAL_I2C_MspInit+0x88>)
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	4a17      	ldr	r2, [pc, #92]	; (8005eb0 <HAL_I2C_MspInit+0x88>)
 8005e54:	f043 0302 	orr.w	r3, r3, #2
 8005e58:	6313      	str	r3, [r2, #48]	; 0x30
 8005e5a:	4b15      	ldr	r3, [pc, #84]	; (8005eb0 <HAL_I2C_MspInit+0x88>)
 8005e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005e66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e6c:	2312      	movs	r3, #18
 8005e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e74:	2303      	movs	r3, #3
 8005e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005e78:	2304      	movs	r3, #4
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e7c:	f107 0314 	add.w	r3, r7, #20
 8005e80:	4619      	mov	r1, r3
 8005e82:	480c      	ldr	r0, [pc, #48]	; (8005eb4 <HAL_I2C_MspInit+0x8c>)
 8005e84:	f000 fee6 	bl	8006c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	4b08      	ldr	r3, [pc, #32]	; (8005eb0 <HAL_I2C_MspInit+0x88>)
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e90:	4a07      	ldr	r2, [pc, #28]	; (8005eb0 <HAL_I2C_MspInit+0x88>)
 8005e92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e96:	6413      	str	r3, [r2, #64]	; 0x40
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <HAL_I2C_MspInit+0x88>)
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005ea4:	bf00      	nop
 8005ea6:	3728      	adds	r7, #40	; 0x28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40005400 	.word	0x40005400
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	40020400 	.word	0x40020400

08005eb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a14      	ldr	r2, [pc, #80]	; (8005f18 <HAL_TIM_PWM_MspInit+0x60>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d10e      	bne.n	8005ee8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	4b13      	ldr	r3, [pc, #76]	; (8005f1c <HAL_TIM_PWM_MspInit+0x64>)
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	4a12      	ldr	r2, [pc, #72]	; (8005f1c <HAL_TIM_PWM_MspInit+0x64>)
 8005ed4:	f043 0302 	orr.w	r3, r3, #2
 8005ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eda:	4b10      	ldr	r3, [pc, #64]	; (8005f1c <HAL_TIM_PWM_MspInit+0x64>)
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005ee6:	e012      	b.n	8005f0e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a0c      	ldr	r2, [pc, #48]	; (8005f20 <HAL_TIM_PWM_MspInit+0x68>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d10d      	bne.n	8005f0e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60bb      	str	r3, [r7, #8]
 8005ef6:	4b09      	ldr	r3, [pc, #36]	; (8005f1c <HAL_TIM_PWM_MspInit+0x64>)
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	4a08      	ldr	r2, [pc, #32]	; (8005f1c <HAL_TIM_PWM_MspInit+0x64>)
 8005efc:	f043 0304 	orr.w	r3, r3, #4
 8005f00:	6413      	str	r3, [r2, #64]	; 0x40
 8005f02:	4b06      	ldr	r3, [pc, #24]	; (8005f1c <HAL_TIM_PWM_MspInit+0x64>)
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	60bb      	str	r3, [r7, #8]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
}
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bc80      	pop	{r7}
 8005f16:	4770      	bx	lr
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	40000800 	.word	0x40000800

08005f24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a0a      	ldr	r2, [pc, #40]	; (8005f5c <HAL_TIM_Base_MspInit+0x38>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d10d      	bne.n	8005f52 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	4b09      	ldr	r3, [pc, #36]	; (8005f60 <HAL_TIM_Base_MspInit+0x3c>)
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3e:	4a08      	ldr	r2, [pc, #32]	; (8005f60 <HAL_TIM_Base_MspInit+0x3c>)
 8005f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f44:	6453      	str	r3, [r2, #68]	; 0x44
 8005f46:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <HAL_TIM_Base_MspInit+0x3c>)
 8005f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005f52:	bf00      	nop
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr
 8005f5c:	40014800 	.word	0x40014800
 8005f60:	40023800 	.word	0x40023800

08005f64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b08a      	sub	sp, #40	; 0x28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f6c:	f107 0314 	add.w	r3, r7, #20
 8005f70:	2200      	movs	r2, #0
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	605a      	str	r2, [r3, #4]
 8005f76:	609a      	str	r2, [r3, #8]
 8005f78:	60da      	str	r2, [r3, #12]
 8005f7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a24      	ldr	r2, [pc, #144]	; (8006014 <HAL_TIM_MspPostInit+0xb0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d11e      	bne.n	8005fc4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f86:	2300      	movs	r3, #0
 8005f88:	613b      	str	r3, [r7, #16]
 8005f8a:	4b23      	ldr	r3, [pc, #140]	; (8006018 <HAL_TIM_MspPostInit+0xb4>)
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	4a22      	ldr	r2, [pc, #136]	; (8006018 <HAL_TIM_MspPostInit+0xb4>)
 8005f90:	f043 0304 	orr.w	r3, r3, #4
 8005f94:	6313      	str	r3, [r2, #48]	; 0x30
 8005f96:	4b20      	ldr	r3, [pc, #128]	; (8006018 <HAL_TIM_MspPostInit+0xb4>)
 8005f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	613b      	str	r3, [r7, #16]
 8005fa0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ONBOARD_WRITE_4_Pin;
 8005fa2:	2340      	movs	r3, #64	; 0x40
 8005fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_4_GPIO_Port, &GPIO_InitStruct);
 8005fb6:	f107 0314 	add.w	r3, r7, #20
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4817      	ldr	r0, [pc, #92]	; (800601c <HAL_TIM_MspPostInit+0xb8>)
 8005fbe:	f000 fe49 	bl	8006c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005fc2:	e022      	b.n	800600a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a15      	ldr	r2, [pc, #84]	; (8006020 <HAL_TIM_MspPostInit+0xbc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d11d      	bne.n	800600a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	4b11      	ldr	r3, [pc, #68]	; (8006018 <HAL_TIM_MspPostInit+0xb4>)
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd6:	4a10      	ldr	r2, [pc, #64]	; (8006018 <HAL_TIM_MspPostInit+0xb4>)
 8005fd8:	f043 0302 	orr.w	r3, r3, #2
 8005fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8005fde:	4b0e      	ldr	r3, [pc, #56]	; (8006018 <HAL_TIM_MspPostInit+0xb4>)
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ONBOARD_WRITE_1_Pin;
 8005fea:	2340      	movs	r3, #64	; 0x40
 8005fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fee:	2302      	movs	r3, #2
 8005ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONBOARD_WRITE_1_GPIO_Port, &GPIO_InitStruct);
 8005ffe:	f107 0314 	add.w	r3, r7, #20
 8006002:	4619      	mov	r1, r3
 8006004:	4807      	ldr	r0, [pc, #28]	; (8006024 <HAL_TIM_MspPostInit+0xc0>)
 8006006:	f000 fe25 	bl	8006c54 <HAL_GPIO_Init>
}
 800600a:	bf00      	nop
 800600c:	3728      	adds	r7, #40	; 0x28
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	40000400 	.word	0x40000400
 8006018:	40023800 	.word	0x40023800
 800601c:	40020800 	.word	0x40020800
 8006020:	40000800 	.word	0x40000800
 8006024:	40020400 	.word	0x40020400

08006028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800602c:	f003 fd78 	bl	8009b20 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006030:	e7fe      	b.n	8006030 <NMI_Handler+0x8>

08006032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006032:	b480      	push	{r7}
 8006034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006036:	e7fe      	b.n	8006036 <HardFault_Handler+0x4>

08006038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800603c:	e7fe      	b.n	800603c <MemManage_Handler+0x4>

0800603e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800603e:	b480      	push	{r7}
 8006040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006042:	e7fe      	b.n	8006042 <BusFault_Handler+0x4>

08006044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006048:	e7fe      	b.n	8006048 <UsageFault_Handler+0x4>

0800604a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800604a:	b480      	push	{r7}
 800604c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800604e:	bf00      	nop
 8006050:	46bd      	mov	sp, r7
 8006052:	bc80      	pop	{r7}
 8006054:	4770      	bx	lr

08006056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006056:	b480      	push	{r7}
 8006058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800605a:	bf00      	nop
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr

08006062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006062:	b480      	push	{r7}
 8006064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006066:	bf00      	nop
 8006068:	46bd      	mov	sp, r7
 800606a:	bc80      	pop	{r7}
 800606c:	4770      	bx	lr

0800606e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006072:	f000 f955 	bl	8006320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006076:	bf00      	nop
 8006078:	bd80      	pop	{r7, pc}

0800607a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ONBOARD_READ_IT_3_Pin);
 800607e:	2001      	movs	r0, #1
 8006080:	f000 ffce 	bl	8007020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006084:	bf00      	nop
 8006086:	bd80      	pop	{r7, pc}

08006088 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800608c:	4802      	ldr	r0, [pc, #8]	; (8006098 <OTG_FS_IRQHandler+0x10>)
 800608e:	f002 f8dc 	bl	800824a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006092:	bf00      	nop
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20001cd8 	.word	0x20001cd8

0800609c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
	return 1;
 80060a0:	2301      	movs	r3, #1
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc80      	pop	{r7}
 80060a8:	4770      	bx	lr

080060aa <_kill>:

int _kill(int pid, int sig)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b082      	sub	sp, #8
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80060b4:	f00a f86c 	bl	8010190 <__errno>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2216      	movs	r2, #22
 80060bc:	601a      	str	r2, [r3, #0]
	return -1;
 80060be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <_exit>:

void _exit (int status)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b082      	sub	sp, #8
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80060d2:	f04f 31ff 	mov.w	r1, #4294967295
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff ffe7 	bl	80060aa <_kill>
	while (1) {}		/* Make sure we hang here */
 80060dc:	e7fe      	b.n	80060dc <_exit+0x12>

080060de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b086      	sub	sp, #24
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	60f8      	str	r0, [r7, #12]
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	e00a      	b.n	8006106 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80060f0:	f3af 8000 	nop.w
 80060f4:	4601      	mov	r1, r0
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	60ba      	str	r2, [r7, #8]
 80060fc:	b2ca      	uxtb	r2, r1
 80060fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	3301      	adds	r3, #1
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	429a      	cmp	r2, r3
 800610c:	dbf0      	blt.n	80060f0 <_read+0x12>
	}

return len;
 800610e:	687b      	ldr	r3, [r7, #4]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006124:	2300      	movs	r3, #0
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	e009      	b.n	800613e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	60ba      	str	r2, [r7, #8]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	4618      	mov	r0, r3
 8006134:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	3301      	adds	r3, #1
 800613c:	617b      	str	r3, [r7, #20]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	429a      	cmp	r2, r3
 8006144:	dbf1      	blt.n	800612a <_write+0x12>
	}
	return len;
 8006146:	687b      	ldr	r3, [r7, #4]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <_close>:

int _close(int file)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
	return -1;
 8006158:	f04f 33ff 	mov.w	r3, #4294967295
}
 800615c:	4618      	mov	r0, r3
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr

08006166 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006176:	605a      	str	r2, [r3, #4]
	return 0;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	bc80      	pop	{r7}
 8006182:	4770      	bx	lr

08006184 <_isatty>:

int _isatty(int file)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
	return 1;
 800618c:	2301      	movs	r3, #1
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr

08006198 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
	return 0;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bc80      	pop	{r7}
 80061ae:	4770      	bx	lr

080061b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80061b8:	4a14      	ldr	r2, [pc, #80]	; (800620c <_sbrk+0x5c>)
 80061ba:	4b15      	ldr	r3, [pc, #84]	; (8006210 <_sbrk+0x60>)
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80061c4:	4b13      	ldr	r3, [pc, #76]	; (8006214 <_sbrk+0x64>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d102      	bne.n	80061d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80061cc:	4b11      	ldr	r3, [pc, #68]	; (8006214 <_sbrk+0x64>)
 80061ce:	4a12      	ldr	r2, [pc, #72]	; (8006218 <_sbrk+0x68>)
 80061d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80061d2:	4b10      	ldr	r3, [pc, #64]	; (8006214 <_sbrk+0x64>)
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4413      	add	r3, r2
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d207      	bcs.n	80061f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80061e0:	f009 ffd6 	bl	8010190 <__errno>
 80061e4:	4603      	mov	r3, r0
 80061e6:	220c      	movs	r2, #12
 80061e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80061ea:	f04f 33ff 	mov.w	r3, #4294967295
 80061ee:	e009      	b.n	8006204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80061f0:	4b08      	ldr	r3, [pc, #32]	; (8006214 <_sbrk+0x64>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80061f6:	4b07      	ldr	r3, [pc, #28]	; (8006214 <_sbrk+0x64>)
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4413      	add	r3, r2
 80061fe:	4a05      	ldr	r2, [pc, #20]	; (8006214 <_sbrk+0x64>)
 8006200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006202:	68fb      	ldr	r3, [r7, #12]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20020000 	.word	0x20020000
 8006210:	00000400 	.word	0x00000400
 8006214:	20000800 	.word	0x20000800
 8006218:	200020e8 	.word	0x200020e8

0800621c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006220:	bf00      	nop
 8006222:	46bd      	mov	sp, r7
 8006224:	bc80      	pop	{r7}
 8006226:	4770      	bx	lr

08006228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006260 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800622c:	480d      	ldr	r0, [pc, #52]	; (8006264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800622e:	490e      	ldr	r1, [pc, #56]	; (8006268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006230:	4a0e      	ldr	r2, [pc, #56]	; (800626c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006234:	e002      	b.n	800623c <LoopCopyDataInit>

08006236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800623a:	3304      	adds	r3, #4

0800623c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800623c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800623e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006240:	d3f9      	bcc.n	8006236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006242:	4a0b      	ldr	r2, [pc, #44]	; (8006270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006244:	4c0b      	ldr	r4, [pc, #44]	; (8006274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006248:	e001      	b.n	800624e <LoopFillZerobss>

0800624a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800624a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800624c:	3204      	adds	r2, #4

0800624e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800624e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006250:	d3fb      	bcc.n	800624a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006252:	f7ff ffe3 	bl	800621c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006256:	f009 ffa1 	bl	801019c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800625a:	f7fe f9ed 	bl	8004638 <main>
  bx  lr    
 800625e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006268:	20000394 	.word	0x20000394
  ldr r2, =_sidata
 800626c:	0801428c 	.word	0x0801428c
  ldr r2, =_sbss
 8006270:	20000394 	.word	0x20000394
  ldr r4, =_ebss
 8006274:	200020e8 	.word	0x200020e8

08006278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006278:	e7fe      	b.n	8006278 <ADC_IRQHandler>
	...

0800627c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006280:	4b0e      	ldr	r3, [pc, #56]	; (80062bc <HAL_Init+0x40>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a0d      	ldr	r2, [pc, #52]	; (80062bc <HAL_Init+0x40>)
 8006286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800628a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800628c:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <HAL_Init+0x40>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a0a      	ldr	r2, [pc, #40]	; (80062bc <HAL_Init+0x40>)
 8006292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006298:	4b08      	ldr	r3, [pc, #32]	; (80062bc <HAL_Init+0x40>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a07      	ldr	r2, [pc, #28]	; (80062bc <HAL_Init+0x40>)
 800629e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062a4:	2003      	movs	r0, #3
 80062a6:	f000 fc85 	bl	8006bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80062aa:	200f      	movs	r0, #15
 80062ac:	f000 f808 	bl	80062c0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80062b0:	f7ff fd50 	bl	8005d54 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	40023c00 	.word	0x40023c00

080062c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80062c8:	4b12      	ldr	r3, [pc, #72]	; (8006314 <HAL_InitTick+0x54>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	4b12      	ldr	r3, [pc, #72]	; (8006318 <HAL_InitTick+0x58>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	4619      	mov	r1, r3
 80062d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80062da:	fbb2 f3f3 	udiv	r3, r2, r3
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fcab 	bl	8006c3a <HAL_SYSTICK_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e00e      	b.n	800630c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b0f      	cmp	r3, #15
 80062f2:	d80a      	bhi.n	800630a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062f4:	2200      	movs	r2, #0
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	f04f 30ff 	mov.w	r0, #4294967295
 80062fc:	f000 fc65 	bl	8006bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006300:	4a06      	ldr	r2, [pc, #24]	; (800631c <HAL_InitTick+0x5c>)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	e000      	b.n	800630c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
}
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	20000040 	.word	0x20000040
 8006318:	20000048 	.word	0x20000048
 800631c:	20000044 	.word	0x20000044

08006320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006324:	4b05      	ldr	r3, [pc, #20]	; (800633c <HAL_IncTick+0x1c>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	4b05      	ldr	r3, [pc, #20]	; (8006340 <HAL_IncTick+0x20>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4413      	add	r3, r2
 8006330:	4a03      	ldr	r2, [pc, #12]	; (8006340 <HAL_IncTick+0x20>)
 8006332:	6013      	str	r3, [r2, #0]
}
 8006334:	bf00      	nop
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr
 800633c:	20000048 	.word	0x20000048
 8006340:	20000810 	.word	0x20000810

08006344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006344:	b480      	push	{r7}
 8006346:	af00      	add	r7, sp, #0
  return uwTick;
 8006348:	4b02      	ldr	r3, [pc, #8]	; (8006354 <HAL_GetTick+0x10>)
 800634a:	681b      	ldr	r3, [r3, #0]
}
 800634c:	4618      	mov	r0, r3
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr
 8006354:	20000810 	.word	0x20000810

08006358 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006360:	f7ff fff0 	bl	8006344 <HAL_GetTick>
 8006364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006370:	d005      	beq.n	800637e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006372:	4b0a      	ldr	r3, [pc, #40]	; (800639c <HAL_Delay+0x44>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800637e:	bf00      	nop
 8006380:	f7ff ffe0 	bl	8006344 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	429a      	cmp	r2, r3
 800638e:	d8f7      	bhi.n	8006380 <HAL_Delay+0x28>
  {
  }
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20000048 	.word	0x20000048

080063a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e033      	b.n	800641e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d109      	bne.n	80063d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff fcee 	bl	8005da0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	f003 0310 	and.w	r3, r3, #16
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d118      	bne.n	8006410 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80063e6:	f023 0302 	bic.w	r3, r3, #2
 80063ea:	f043 0202 	orr.w	r2, r3, #2
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f9e8 	bl	80067c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	f043 0201 	orr.w	r2, r3, #1
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	641a      	str	r2, [r3, #64]	; 0x40
 800640e:	e001      	b.n	8006414 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800641c:	7bfb      	ldrb	r3, [r7, #15]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800643a:	2b01      	cmp	r3, #1
 800643c:	d101      	bne.n	8006442 <HAL_ADC_Start+0x1a>
 800643e:	2302      	movs	r3, #2
 8006440:	e095      	b.n	800656e <HAL_ADC_Start+0x146>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b01      	cmp	r3, #1
 8006456:	d018      	beq.n	800648a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006468:	4b43      	ldr	r3, [pc, #268]	; (8006578 <HAL_ADC_Start+0x150>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a43      	ldr	r2, [pc, #268]	; (800657c <HAL_ADC_Start+0x154>)
 800646e:	fba2 2303 	umull	r2, r3, r2, r3
 8006472:	0c9a      	lsrs	r2, r3, #18
 8006474:	4613      	mov	r3, r2
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	4413      	add	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 800647c:	e002      	b.n	8006484 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3b01      	subs	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1f9      	bne.n	800647e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b01      	cmp	r3, #1
 8006496:	d15d      	bne.n	8006554 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80064a0:	f023 0301 	bic.w	r3, r3, #1
 80064a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d007      	beq.n	80064ca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80064c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d6:	d106      	bne.n	80064e6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064dc:	f023 0206 	bic.w	r2, r3, #6
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	645a      	str	r2, [r3, #68]	; 0x44
 80064e4:	e002      	b.n	80064ec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80064fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80064fe:	4b20      	ldr	r3, [pc, #128]	; (8006580 <HAL_ADC_Start+0x158>)
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f003 031f 	and.w	r3, r3, #31
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10f      	bne.n	800652a <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d129      	bne.n	800656c <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006526:	609a      	str	r2, [r3, #8]
 8006528:	e020      	b.n	800656c <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a15      	ldr	r2, [pc, #84]	; (8006584 <HAL_ADC_Start+0x15c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d11b      	bne.n	800656c <HAL_ADC_Start+0x144>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d114      	bne.n	800656c <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006550:	609a      	str	r2, [r3, #8]
 8006552:	e00b      	b.n	800656c <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006558:	f043 0210 	orr.w	r2, r3, #16
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006564:	f043 0201 	orr.w	r2, r3, #1
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	bc80      	pop	{r7}
 8006576:	4770      	bx	lr
 8006578:	20000040 	.word	0x20000040
 800657c:	431bde83 	.word	0x431bde83
 8006580:	40012300 	.word	0x40012300
 8006584:	40012000 	.word	0x40012000

08006588 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800659c:	2b01      	cmp	r3, #1
 800659e:	d101      	bne.n	80065a4 <HAL_ADC_ConfigChannel+0x1c>
 80065a0:	2302      	movs	r3, #2
 80065a2:	e103      	b.n	80067ac <HAL_ADC_ConfigChannel+0x224>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b09      	cmp	r3, #9
 80065b2:	d925      	bls.n	8006600 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68d9      	ldr	r1, [r3, #12]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	4613      	mov	r3, r2
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	4413      	add	r3, r2
 80065c8:	3b1e      	subs	r3, #30
 80065ca:	2207      	movs	r2, #7
 80065cc:	fa02 f303 	lsl.w	r3, r2, r3
 80065d0:	43da      	mvns	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	400a      	ands	r2, r1
 80065d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68d9      	ldr	r1, [r3, #12]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	4618      	mov	r0, r3
 80065ec:	4603      	mov	r3, r0
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	4403      	add	r3, r0
 80065f2:	3b1e      	subs	r3, #30
 80065f4:	409a      	lsls	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	60da      	str	r2, [r3, #12]
 80065fe:	e022      	b.n	8006646 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6919      	ldr	r1, [r3, #16]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	4613      	mov	r3, r2
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	4413      	add	r3, r2
 8006614:	2207      	movs	r2, #7
 8006616:	fa02 f303 	lsl.w	r3, r2, r3
 800661a:	43da      	mvns	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	400a      	ands	r2, r1
 8006622:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6919      	ldr	r1, [r3, #16]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	b29b      	uxth	r3, r3
 8006634:	4618      	mov	r0, r3
 8006636:	4603      	mov	r3, r0
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	4403      	add	r3, r0
 800663c:	409a      	lsls	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	2b06      	cmp	r3, #6
 800664c:	d824      	bhi.n	8006698 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	4613      	mov	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	3b05      	subs	r3, #5
 8006660:	221f      	movs	r2, #31
 8006662:	fa02 f303 	lsl.w	r3, r2, r3
 8006666:	43da      	mvns	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	400a      	ands	r2, r1
 800666e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	b29b      	uxth	r3, r3
 800667c:	4618      	mov	r0, r3
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	4613      	mov	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	3b05      	subs	r3, #5
 800668a:	fa00 f203 	lsl.w	r2, r0, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	635a      	str	r2, [r3, #52]	; 0x34
 8006696:	e04c      	b.n	8006732 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	2b0c      	cmp	r3, #12
 800669e:	d824      	bhi.n	80066ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	3b23      	subs	r3, #35	; 0x23
 80066b2:	221f      	movs	r2, #31
 80066b4:	fa02 f303 	lsl.w	r3, r2, r3
 80066b8:	43da      	mvns	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	400a      	ands	r2, r1
 80066c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	4618      	mov	r0, r3
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	4613      	mov	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	3b23      	subs	r3, #35	; 0x23
 80066dc:	fa00 f203 	lsl.w	r2, r0, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30
 80066e8:	e023      	b.n	8006732 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	3b41      	subs	r3, #65	; 0x41
 80066fc:	221f      	movs	r2, #31
 80066fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006702:	43da      	mvns	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	400a      	ands	r2, r1
 800670a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	b29b      	uxth	r3, r3
 8006718:	4618      	mov	r0, r3
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	3b41      	subs	r3, #65	; 0x41
 8006726:	fa00 f203 	lsl.w	r2, r0, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a20      	ldr	r2, [pc, #128]	; (80067b8 <HAL_ADC_ConfigChannel+0x230>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d109      	bne.n	8006750 <HAL_ADC_ConfigChannel+0x1c8>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b12      	cmp	r3, #18
 8006742:	d105      	bne.n	8006750 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006744:	4b1d      	ldr	r3, [pc, #116]	; (80067bc <HAL_ADC_ConfigChannel+0x234>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	4a1c      	ldr	r2, [pc, #112]	; (80067bc <HAL_ADC_ConfigChannel+0x234>)
 800674a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800674e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a18      	ldr	r2, [pc, #96]	; (80067b8 <HAL_ADC_ConfigChannel+0x230>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d123      	bne.n	80067a2 <HAL_ADC_ConfigChannel+0x21a>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b10      	cmp	r3, #16
 8006760:	d003      	beq.n	800676a <HAL_ADC_ConfigChannel+0x1e2>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b11      	cmp	r3, #17
 8006768:	d11b      	bne.n	80067a2 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800676a:	4b14      	ldr	r3, [pc, #80]	; (80067bc <HAL_ADC_ConfigChannel+0x234>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	4a13      	ldr	r2, [pc, #76]	; (80067bc <HAL_ADC_ConfigChannel+0x234>)
 8006770:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006774:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b10      	cmp	r3, #16
 800677c:	d111      	bne.n	80067a2 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800677e:	4b10      	ldr	r3, [pc, #64]	; (80067c0 <HAL_ADC_ConfigChannel+0x238>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a10      	ldr	r2, [pc, #64]	; (80067c4 <HAL_ADC_ConfigChannel+0x23c>)
 8006784:	fba2 2303 	umull	r2, r3, r2, r3
 8006788:	0c9a      	lsrs	r2, r3, #18
 800678a:	4613      	mov	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8006794:	e002      	b.n	800679c <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	3b01      	subs	r3, #1
 800679a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1f9      	bne.n	8006796 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bc80      	pop	{r7}
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40012000 	.word	0x40012000
 80067bc:	40012300 	.word	0x40012300
 80067c0:	20000040 	.word	0x20000040
 80067c4:	431bde83 	.word	0x431bde83

080067c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80067d0:	4b7e      	ldr	r3, [pc, #504]	; (80069cc <ADC_Init+0x204>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	4a7d      	ldr	r2, [pc, #500]	; (80069cc <ADC_Init+0x204>)
 80067d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80067da:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80067dc:	4b7b      	ldr	r3, [pc, #492]	; (80069cc <ADC_Init+0x204>)
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	4979      	ldr	r1, [pc, #484]	; (80069cc <ADC_Init+0x204>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6859      	ldr	r1, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	021a      	lsls	r2, r3, #8
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800681c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6859      	ldr	r1, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689a      	ldr	r2, [r3, #8]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800683e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6899      	ldr	r1, [r3, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006856:	4a5e      	ldr	r2, [pc, #376]	; (80069d0 <ADC_Init+0x208>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d022      	beq.n	80068a2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689a      	ldr	r2, [r3, #8]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800686a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6899      	ldr	r1, [r3, #8]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800688c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6899      	ldr	r1, [r3, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	609a      	str	r2, [r3, #8]
 80068a0:	e00f      	b.n	80068c2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80068b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80068c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0202 	bic.w	r2, r2, #2
 80068d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6899      	ldr	r1, [r3, #8]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	7e1b      	ldrb	r3, [r3, #24]
 80068dc:	005a      	lsls	r2, r3, #1
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d027      	beq.n	8006940 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800690e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	3b01      	subs	r3, #1
 8006916:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800691a:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	fa92 f2a2 	rbit	r2, r2
 8006922:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	fab2 f282 	clz	r2, r2
 800692a:	b2d2      	uxtb	r2, r2
 800692c:	fa03 f102 	lsl.w	r1, r3, r2
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	605a      	str	r2, [r3, #4]
 800693e:	e007      	b.n	8006950 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800694e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800695e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	3b01      	subs	r3, #1
 800696c:	051a      	lsls	r2, r3, #20
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6899      	ldr	r1, [r3, #8]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006992:	025a      	lsls	r2, r3, #9
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6899      	ldr	r1, [r3, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	029a      	lsls	r2, r3, #10
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	609a      	str	r2, [r3, #8]
}
 80069c0:	bf00      	nop
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bc80      	pop	{r7}
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40012300 	.word	0x40012300
 80069d0:	0f000001 	.word	0x0f000001

080069d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f003 0307 	and.w	r3, r3, #7
 80069e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069e4:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <__NVIC_SetPriorityGrouping+0x44>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069f0:	4013      	ands	r3, r2
 80069f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a06:	4a04      	ldr	r2, [pc, #16]	; (8006a18 <__NVIC_SetPriorityGrouping+0x44>)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	60d3      	str	r3, [r2, #12]
}
 8006a0c:	bf00      	nop
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bc80      	pop	{r7}
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	e000ed00 	.word	0xe000ed00

08006a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a20:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <__NVIC_GetPriorityGrouping+0x18>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	0a1b      	lsrs	r3, r3, #8
 8006a26:	f003 0307 	and.w	r3, r3, #7
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bc80      	pop	{r7}
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	e000ed00 	.word	0xe000ed00

08006a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	4603      	mov	r3, r0
 8006a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	db0b      	blt.n	8006a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a4a:	79fb      	ldrb	r3, [r7, #7]
 8006a4c:	f003 021f 	and.w	r2, r3, #31
 8006a50:	4906      	ldr	r1, [pc, #24]	; (8006a6c <__NVIC_EnableIRQ+0x34>)
 8006a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	2001      	movs	r0, #1
 8006a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8006a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr
 8006a6c:	e000e100 	.word	0xe000e100

08006a70 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	4603      	mov	r3, r0
 8006a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	db12      	blt.n	8006aa8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a82:	79fb      	ldrb	r3, [r7, #7]
 8006a84:	f003 021f 	and.w	r2, r3, #31
 8006a88:	490a      	ldr	r1, [pc, #40]	; (8006ab4 <__NVIC_DisableIRQ+0x44>)
 8006a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a8e:	095b      	lsrs	r3, r3, #5
 8006a90:	2001      	movs	r0, #1
 8006a92:	fa00 f202 	lsl.w	r2, r0, r2
 8006a96:	3320      	adds	r3, #32
 8006a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006a9c:	f3bf 8f4f 	dsb	sy
}
 8006aa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006aa2:	f3bf 8f6f 	isb	sy
}
 8006aa6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bc80      	pop	{r7}
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	e000e100 	.word	0xe000e100

08006ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	6039      	str	r1, [r7, #0]
 8006ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	db0a      	blt.n	8006ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	490c      	ldr	r1, [pc, #48]	; (8006b04 <__NVIC_SetPriority+0x4c>)
 8006ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ad6:	0112      	lsls	r2, r2, #4
 8006ad8:	b2d2      	uxtb	r2, r2
 8006ada:	440b      	add	r3, r1
 8006adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ae0:	e00a      	b.n	8006af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	4908      	ldr	r1, [pc, #32]	; (8006b08 <__NVIC_SetPriority+0x50>)
 8006ae8:	79fb      	ldrb	r3, [r7, #7]
 8006aea:	f003 030f 	and.w	r3, r3, #15
 8006aee:	3b04      	subs	r3, #4
 8006af0:	0112      	lsls	r2, r2, #4
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	440b      	add	r3, r1
 8006af6:	761a      	strb	r2, [r3, #24]
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	e000e100 	.word	0xe000e100
 8006b08:	e000ed00 	.word	0xe000ed00

08006b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b089      	sub	sp, #36	; 0x24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f003 0307 	and.w	r3, r3, #7
 8006b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f1c3 0307 	rsb	r3, r3, #7
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	bf28      	it	cs
 8006b2a:	2304      	movcs	r3, #4
 8006b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	3304      	adds	r3, #4
 8006b32:	2b06      	cmp	r3, #6
 8006b34:	d902      	bls.n	8006b3c <NVIC_EncodePriority+0x30>
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	3b03      	subs	r3, #3
 8006b3a:	e000      	b.n	8006b3e <NVIC_EncodePriority+0x32>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b40:	f04f 32ff 	mov.w	r2, #4294967295
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4a:	43da      	mvns	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	401a      	ands	r2, r3
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b54:	f04f 31ff 	mov.w	r1, #4294967295
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5e:	43d9      	mvns	r1, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b64:	4313      	orrs	r3, r2
         );
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3724      	adds	r7, #36	; 0x24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr

08006b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b80:	d301      	bcc.n	8006b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b82:	2301      	movs	r3, #1
 8006b84:	e00f      	b.n	8006ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b86:	4a0a      	ldr	r2, [pc, #40]	; (8006bb0 <SysTick_Config+0x40>)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b8e:	210f      	movs	r1, #15
 8006b90:	f04f 30ff 	mov.w	r0, #4294967295
 8006b94:	f7ff ff90 	bl	8006ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b98:	4b05      	ldr	r3, [pc, #20]	; (8006bb0 <SysTick_Config+0x40>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b9e:	4b04      	ldr	r3, [pc, #16]	; (8006bb0 <SysTick_Config+0x40>)
 8006ba0:	2207      	movs	r2, #7
 8006ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	e000e010 	.word	0xe000e010

08006bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff ff09 	bl	80069d4 <__NVIC_SetPriorityGrouping>
}
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b086      	sub	sp, #24
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	607a      	str	r2, [r7, #4]
 8006bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006bdc:	f7ff ff1e 	bl	8006a1c <__NVIC_GetPriorityGrouping>
 8006be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	6978      	ldr	r0, [r7, #20]
 8006be8:	f7ff ff90 	bl	8006b0c <NVIC_EncodePriority>
 8006bec:	4602      	mov	r2, r0
 8006bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7ff ff5f 	bl	8006ab8 <__NVIC_SetPriority>
}
 8006bfa:	bf00      	nop
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b082      	sub	sp, #8
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	4603      	mov	r3, r0
 8006c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff ff11 	bl	8006a38 <__NVIC_EnableIRQ>
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b082      	sub	sp, #8
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	4603      	mov	r3, r0
 8006c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff ff1f 	bl	8006a70 <__NVIC_DisableIRQ>
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b082      	sub	sp, #8
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff ff94 	bl	8006b70 <SysTick_Config>
 8006c48:	4603      	mov	r3, r0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c62:	e16f      	b.n	8006f44 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	2101      	movs	r1, #1
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c70:	4013      	ands	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 8161 	beq.w	8006f3e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f003 0303 	and.w	r3, r3, #3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d005      	beq.n	8006c94 <HAL_GPIO_Init+0x40>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f003 0303 	and.w	r3, r3, #3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d130      	bne.n	8006cf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	2203      	movs	r2, #3
 8006ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca4:	43db      	mvns	r3, r3
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006cca:	2201      	movs	r2, #1
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd2:	43db      	mvns	r3, r3
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	091b      	lsrs	r3, r3, #4
 8006ce0:	f003 0201 	and.w	r2, r3, #1
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d017      	beq.n	8006d32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d12:	43db      	mvns	r3, r3
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	4013      	ands	r3, r2
 8006d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	fa02 f303 	lsl.w	r3, r2, r3
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f003 0303 	and.w	r3, r3, #3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d123      	bne.n	8006d86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	08da      	lsrs	r2, r3, #3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3208      	adds	r2, #8
 8006d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	220f      	movs	r2, #15
 8006d56:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5a:	43db      	mvns	r3, r3
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f003 0307 	and.w	r3, r3, #7
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	08da      	lsrs	r2, r3, #3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3208      	adds	r2, #8
 8006d80:	6939      	ldr	r1, [r7, #16]
 8006d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	2203      	movs	r2, #3
 8006d92:	fa02 f303 	lsl.w	r3, r2, r3
 8006d96:	43db      	mvns	r3, r3
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f003 0203 	and.w	r2, r3, #3
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	fa02 f303 	lsl.w	r3, r2, r3
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 80bb 	beq.w	8006f3e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60bb      	str	r3, [r7, #8]
 8006dcc:	4b64      	ldr	r3, [pc, #400]	; (8006f60 <HAL_GPIO_Init+0x30c>)
 8006dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd0:	4a63      	ldr	r2, [pc, #396]	; (8006f60 <HAL_GPIO_Init+0x30c>)
 8006dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dd6:	6453      	str	r3, [r2, #68]	; 0x44
 8006dd8:	4b61      	ldr	r3, [pc, #388]	; (8006f60 <HAL_GPIO_Init+0x30c>)
 8006dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006de0:	60bb      	str	r3, [r7, #8]
 8006de2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006de4:	4a5f      	ldr	r2, [pc, #380]	; (8006f64 <HAL_GPIO_Init+0x310>)
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	089b      	lsrs	r3, r3, #2
 8006dea:	3302      	adds	r3, #2
 8006dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f003 0303 	and.w	r3, r3, #3
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	220f      	movs	r2, #15
 8006dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006e00:	43db      	mvns	r3, r3
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	4013      	ands	r3, r2
 8006e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a57      	ldr	r2, [pc, #348]	; (8006f68 <HAL_GPIO_Init+0x314>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d031      	beq.n	8006e74 <HAL_GPIO_Init+0x220>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a56      	ldr	r2, [pc, #344]	; (8006f6c <HAL_GPIO_Init+0x318>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d02b      	beq.n	8006e70 <HAL_GPIO_Init+0x21c>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a55      	ldr	r2, [pc, #340]	; (8006f70 <HAL_GPIO_Init+0x31c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d025      	beq.n	8006e6c <HAL_GPIO_Init+0x218>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a54      	ldr	r2, [pc, #336]	; (8006f74 <HAL_GPIO_Init+0x320>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d01f      	beq.n	8006e68 <HAL_GPIO_Init+0x214>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a53      	ldr	r2, [pc, #332]	; (8006f78 <HAL_GPIO_Init+0x324>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d019      	beq.n	8006e64 <HAL_GPIO_Init+0x210>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a52      	ldr	r2, [pc, #328]	; (8006f7c <HAL_GPIO_Init+0x328>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d013      	beq.n	8006e60 <HAL_GPIO_Init+0x20c>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a51      	ldr	r2, [pc, #324]	; (8006f80 <HAL_GPIO_Init+0x32c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00d      	beq.n	8006e5c <HAL_GPIO_Init+0x208>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a50      	ldr	r2, [pc, #320]	; (8006f84 <HAL_GPIO_Init+0x330>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d007      	beq.n	8006e58 <HAL_GPIO_Init+0x204>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a4f      	ldr	r2, [pc, #316]	; (8006f88 <HAL_GPIO_Init+0x334>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d101      	bne.n	8006e54 <HAL_GPIO_Init+0x200>
 8006e50:	2308      	movs	r3, #8
 8006e52:	e010      	b.n	8006e76 <HAL_GPIO_Init+0x222>
 8006e54:	2309      	movs	r3, #9
 8006e56:	e00e      	b.n	8006e76 <HAL_GPIO_Init+0x222>
 8006e58:	2307      	movs	r3, #7
 8006e5a:	e00c      	b.n	8006e76 <HAL_GPIO_Init+0x222>
 8006e5c:	2306      	movs	r3, #6
 8006e5e:	e00a      	b.n	8006e76 <HAL_GPIO_Init+0x222>
 8006e60:	2305      	movs	r3, #5
 8006e62:	e008      	b.n	8006e76 <HAL_GPIO_Init+0x222>
 8006e64:	2304      	movs	r3, #4
 8006e66:	e006      	b.n	8006e76 <HAL_GPIO_Init+0x222>
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e004      	b.n	8006e76 <HAL_GPIO_Init+0x222>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e002      	b.n	8006e76 <HAL_GPIO_Init+0x222>
 8006e70:	2301      	movs	r3, #1
 8006e72:	e000      	b.n	8006e76 <HAL_GPIO_Init+0x222>
 8006e74:	2300      	movs	r3, #0
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	f002 0203 	and.w	r2, r2, #3
 8006e7c:	0092      	lsls	r2, r2, #2
 8006e7e:	4093      	lsls	r3, r2
 8006e80:	461a      	mov	r2, r3
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006e88:	4936      	ldr	r1, [pc, #216]	; (8006f64 <HAL_GPIO_Init+0x310>)
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	089b      	lsrs	r3, r3, #2
 8006e8e:	3302      	adds	r3, #2
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e96:	4b3d      	ldr	r3, [pc, #244]	; (8006f8c <HAL_GPIO_Init+0x338>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	43db      	mvns	r3, r3
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006eba:	4a34      	ldr	r2, [pc, #208]	; (8006f8c <HAL_GPIO_Init+0x338>)
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006ec0:	4b32      	ldr	r3, [pc, #200]	; (8006f8c <HAL_GPIO_Init+0x338>)
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	43db      	mvns	r3, r3
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	4013      	ands	r3, r2
 8006ece:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006ee4:	4a29      	ldr	r2, [pc, #164]	; (8006f8c <HAL_GPIO_Init+0x338>)
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006eea:	4b28      	ldr	r3, [pc, #160]	; (8006f8c <HAL_GPIO_Init+0x338>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	43db      	mvns	r3, r3
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006f0e:	4a1f      	ldr	r2, [pc, #124]	; (8006f8c <HAL_GPIO_Init+0x338>)
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f14:	4b1d      	ldr	r3, [pc, #116]	; (8006f8c <HAL_GPIO_Init+0x338>)
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4013      	ands	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006f38:	4a14      	ldr	r2, [pc, #80]	; (8006f8c <HAL_GPIO_Init+0x338>)
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	3301      	adds	r3, #1
 8006f42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f47f ae88 	bne.w	8006c64 <HAL_GPIO_Init+0x10>
  }
}
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc80      	pop	{r7}
 8006f5e:	4770      	bx	lr
 8006f60:	40023800 	.word	0x40023800
 8006f64:	40013800 	.word	0x40013800
 8006f68:	40020000 	.word	0x40020000
 8006f6c:	40020400 	.word	0x40020400
 8006f70:	40020800 	.word	0x40020800
 8006f74:	40020c00 	.word	0x40020c00
 8006f78:	40021000 	.word	0x40021000
 8006f7c:	40021400 	.word	0x40021400
 8006f80:	40021800 	.word	0x40021800
 8006f84:	40021c00 	.word	0x40021c00
 8006f88:	40022000 	.word	0x40022000
 8006f8c:	40013c00 	.word	0x40013c00

08006f90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691a      	ldr	r2, [r3, #16]
 8006fa0:	887b      	ldrh	r3, [r7, #2]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	73fb      	strb	r3, [r7, #15]
 8006fac:	e001      	b.n	8006fb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bc80      	pop	{r7}
 8006fbc:	4770      	bx	lr

08006fbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b083      	sub	sp, #12
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	807b      	strh	r3, [r7, #2]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006fce:	787b      	ldrb	r3, [r7, #1]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fd4:	887a      	ldrh	r2, [r7, #2]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006fda:	e003      	b.n	8006fe4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006fdc:	887b      	ldrh	r3, [r7, #2]
 8006fde:	041a      	lsls	r2, r3, #16
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	619a      	str	r2, [r3, #24]
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bc80      	pop	{r7}
 8006fec:	4770      	bx	lr

08006fee <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b085      	sub	sp, #20
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007000:	887a      	ldrh	r2, [r7, #2]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4013      	ands	r3, r2
 8007006:	041a      	lsls	r2, r3, #16
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	43d9      	mvns	r1, r3
 800700c:	887b      	ldrh	r3, [r7, #2]
 800700e:	400b      	ands	r3, r1
 8007010:	431a      	orrs	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	619a      	str	r2, [r3, #24]
}
 8007016:	bf00      	nop
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	bc80      	pop	{r7}
 800701e:	4770      	bx	lr

08007020 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800702a:	4b08      	ldr	r3, [pc, #32]	; (800704c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800702c:	695a      	ldr	r2, [r3, #20]
 800702e:	88fb      	ldrh	r3, [r7, #6]
 8007030:	4013      	ands	r3, r2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d006      	beq.n	8007044 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007036:	4a05      	ldr	r2, [pc, #20]	; (800704c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007038:	88fb      	ldrh	r3, [r7, #6]
 800703a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800703c:	88fb      	ldrh	r3, [r7, #6]
 800703e:	4618      	mov	r0, r3
 8007040:	f7fd fdac 	bl	8004b9c <HAL_GPIO_EXTI_Callback>
  }
}
 8007044:	bf00      	nop
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	40013c00 	.word	0x40013c00

08007050 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e12b      	b.n	80072ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d106      	bne.n	800707c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fe fed6 	bl	8005e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2224      	movs	r2, #36	; 0x24
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0201 	bic.w	r2, r2, #1
 8007092:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80070b4:	f002 fd12 	bl	8009adc <HAL_RCC_GetPCLK1Freq>
 80070b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	4a81      	ldr	r2, [pc, #516]	; (80072c4 <HAL_I2C_Init+0x274>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d807      	bhi.n	80070d4 <HAL_I2C_Init+0x84>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4a80      	ldr	r2, [pc, #512]	; (80072c8 <HAL_I2C_Init+0x278>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	bf94      	ite	ls
 80070cc:	2301      	movls	r3, #1
 80070ce:	2300      	movhi	r3, #0
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	e006      	b.n	80070e2 <HAL_I2C_Init+0x92>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4a7d      	ldr	r2, [pc, #500]	; (80072cc <HAL_I2C_Init+0x27c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	bf94      	ite	ls
 80070dc:	2301      	movls	r3, #1
 80070de:	2300      	movhi	r3, #0
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e0e7      	b.n	80072ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	4a78      	ldr	r2, [pc, #480]	; (80072d0 <HAL_I2C_Init+0x280>)
 80070ee:	fba2 2303 	umull	r2, r3, r2, r3
 80070f2:	0c9b      	lsrs	r3, r3, #18
 80070f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	430a      	orrs	r2, r1
 8007108:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	4a6a      	ldr	r2, [pc, #424]	; (80072c4 <HAL_I2C_Init+0x274>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d802      	bhi.n	8007124 <HAL_I2C_Init+0xd4>
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	3301      	adds	r3, #1
 8007122:	e009      	b.n	8007138 <HAL_I2C_Init+0xe8>
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800712a:	fb02 f303 	mul.w	r3, r2, r3
 800712e:	4a69      	ldr	r2, [pc, #420]	; (80072d4 <HAL_I2C_Init+0x284>)
 8007130:	fba2 2303 	umull	r2, r3, r2, r3
 8007134:	099b      	lsrs	r3, r3, #6
 8007136:	3301      	adds	r3, #1
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	430b      	orrs	r3, r1
 800713e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800714a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	495c      	ldr	r1, [pc, #368]	; (80072c4 <HAL_I2C_Init+0x274>)
 8007154:	428b      	cmp	r3, r1
 8007156:	d819      	bhi.n	800718c <HAL_I2C_Init+0x13c>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	1e59      	subs	r1, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	fbb1 f3f3 	udiv	r3, r1, r3
 8007166:	1c59      	adds	r1, r3, #1
 8007168:	f640 73fc 	movw	r3, #4092	; 0xffc
 800716c:	400b      	ands	r3, r1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <HAL_I2C_Init+0x138>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1e59      	subs	r1, r3, #1
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007180:	3301      	adds	r3, #1
 8007182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007186:	e051      	b.n	800722c <HAL_I2C_Init+0x1dc>
 8007188:	2304      	movs	r3, #4
 800718a:	e04f      	b.n	800722c <HAL_I2C_Init+0x1dc>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d111      	bne.n	80071b8 <HAL_I2C_Init+0x168>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	1e58      	subs	r0, r3, #1
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6859      	ldr	r1, [r3, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	440b      	add	r3, r1
 80071a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80071a6:	3301      	adds	r3, #1
 80071a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bf0c      	ite	eq
 80071b0:	2301      	moveq	r3, #1
 80071b2:	2300      	movne	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	e012      	b.n	80071de <HAL_I2C_Init+0x18e>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	1e58      	subs	r0, r3, #1
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6859      	ldr	r1, [r3, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	440b      	add	r3, r1
 80071c6:	0099      	lsls	r1, r3, #2
 80071c8:	440b      	add	r3, r1
 80071ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80071ce:	3301      	adds	r3, #1
 80071d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bf0c      	ite	eq
 80071d8:	2301      	moveq	r3, #1
 80071da:	2300      	movne	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <HAL_I2C_Init+0x196>
 80071e2:	2301      	movs	r3, #1
 80071e4:	e022      	b.n	800722c <HAL_I2C_Init+0x1dc>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10e      	bne.n	800720c <HAL_I2C_Init+0x1bc>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	1e58      	subs	r0, r3, #1
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6859      	ldr	r1, [r3, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	440b      	add	r3, r1
 80071fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8007200:	3301      	adds	r3, #1
 8007202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720a:	e00f      	b.n	800722c <HAL_I2C_Init+0x1dc>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	1e58      	subs	r0, r3, #1
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6859      	ldr	r1, [r3, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	440b      	add	r3, r1
 800721a:	0099      	lsls	r1, r3, #2
 800721c:	440b      	add	r3, r1
 800721e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007222:	3301      	adds	r3, #1
 8007224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007228:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	6809      	ldr	r1, [r1, #0]
 8007230:	4313      	orrs	r3, r2
 8007232:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69da      	ldr	r2, [r3, #28]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	431a      	orrs	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800725a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6911      	ldr	r1, [r2, #16]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	68d2      	ldr	r2, [r2, #12]
 8007266:	4311      	orrs	r1, r2
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6812      	ldr	r2, [r2, #0]
 800726c:	430b      	orrs	r3, r1
 800726e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	695a      	ldr	r2, [r3, #20]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0201 	orr.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2220      	movs	r2, #32
 80072a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	000186a0 	.word	0x000186a0
 80072c8:	001e847f 	.word	0x001e847f
 80072cc:	003d08ff 	.word	0x003d08ff
 80072d0:	431bde83 	.word	0x431bde83
 80072d4:	10624dd3 	.word	0x10624dd3

080072d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b088      	sub	sp, #32
 80072dc:	af02      	add	r7, sp, #8
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	4608      	mov	r0, r1
 80072e2:	4611      	mov	r1, r2
 80072e4:	461a      	mov	r2, r3
 80072e6:	4603      	mov	r3, r0
 80072e8:	817b      	strh	r3, [r7, #10]
 80072ea:	460b      	mov	r3, r1
 80072ec:	813b      	strh	r3, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80072f2:	f7ff f827 	bl	8006344 <HAL_GetTick>
 80072f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b20      	cmp	r3, #32
 8007302:	f040 80d9 	bne.w	80074b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	2319      	movs	r3, #25
 800730c:	2201      	movs	r2, #1
 800730e:	496d      	ldr	r1, [pc, #436]	; (80074c4 <HAL_I2C_Mem_Write+0x1ec>)
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 fc7f 	bl	8007c14 <I2C_WaitOnFlagUntilTimeout>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800731c:	2302      	movs	r3, #2
 800731e:	e0cc      	b.n	80074ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <HAL_I2C_Mem_Write+0x56>
 800732a:	2302      	movs	r3, #2
 800732c:	e0c5      	b.n	80074ba <HAL_I2C_Mem_Write+0x1e2>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b01      	cmp	r3, #1
 8007342:	d007      	beq.n	8007354 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0201 	orr.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007362:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2221      	movs	r2, #33	; 0x21
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2240      	movs	r2, #64	; 0x40
 8007370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6a3a      	ldr	r2, [r7, #32]
 800737e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007384:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800738a:	b29a      	uxth	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4a4d      	ldr	r2, [pc, #308]	; (80074c8 <HAL_I2C_Mem_Write+0x1f0>)
 8007394:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007396:	88f8      	ldrh	r0, [r7, #6]
 8007398:	893a      	ldrh	r2, [r7, #8]
 800739a:	8979      	ldrh	r1, [r7, #10]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	9301      	str	r3, [sp, #4]
 80073a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	4603      	mov	r3, r0
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 fab6 	bl	8007918 <I2C_RequestMemoryWrite>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d052      	beq.n	8007458 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e081      	b.n	80074ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 fd00 	bl	8007dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00d      	beq.n	80073e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d107      	bne.n	80073de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e06b      	b.n	80074ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	781a      	ldrb	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	1c5a      	adds	r2, r3, #1
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fc:	3b01      	subs	r3, #1
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007408:	b29b      	uxth	r3, r3
 800740a:	3b01      	subs	r3, #1
 800740c:	b29a      	uxth	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b04      	cmp	r3, #4
 800741e:	d11b      	bne.n	8007458 <HAL_I2C_Mem_Write+0x180>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007424:	2b00      	cmp	r3, #0
 8007426:	d017      	beq.n	8007458 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	781a      	ldrb	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007442:	3b01      	subs	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744e:	b29b      	uxth	r3, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	b29a      	uxth	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1aa      	bne.n	80073b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 fcec 	bl	8007e42 <I2C_WaitOnBTFFlagUntilTimeout>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00d      	beq.n	800748c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007474:	2b04      	cmp	r3, #4
 8007476:	d107      	bne.n	8007488 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007486:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e016      	b.n	80074ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800749a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2220      	movs	r2, #32
 80074a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	e000      	b.n	80074ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80074b8:	2302      	movs	r3, #2
  }
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	00100002 	.word	0x00100002
 80074c8:	ffff0000 	.word	0xffff0000

080074cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08c      	sub	sp, #48	; 0x30
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	4608      	mov	r0, r1
 80074d6:	4611      	mov	r1, r2
 80074d8:	461a      	mov	r2, r3
 80074da:	4603      	mov	r3, r0
 80074dc:	817b      	strh	r3, [r7, #10]
 80074de:	460b      	mov	r3, r1
 80074e0:	813b      	strh	r3, [r7, #8]
 80074e2:	4613      	mov	r3, r2
 80074e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80074e6:	f7fe ff2d 	bl	8006344 <HAL_GetTick>
 80074ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b20      	cmp	r3, #32
 80074f6:	f040 8208 	bne.w	800790a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	2319      	movs	r3, #25
 8007500:	2201      	movs	r2, #1
 8007502:	497b      	ldr	r1, [pc, #492]	; (80076f0 <HAL_I2C_Mem_Read+0x224>)
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 fb85 	bl	8007c14 <I2C_WaitOnFlagUntilTimeout>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007510:	2302      	movs	r3, #2
 8007512:	e1fb      	b.n	800790c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800751a:	2b01      	cmp	r3, #1
 800751c:	d101      	bne.n	8007522 <HAL_I2C_Mem_Read+0x56>
 800751e:	2302      	movs	r3, #2
 8007520:	e1f4      	b.n	800790c <HAL_I2C_Mem_Read+0x440>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b01      	cmp	r3, #1
 8007536:	d007      	beq.n	8007548 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f042 0201 	orr.w	r2, r2, #1
 8007546:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007556:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2222      	movs	r2, #34	; 0x22
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2240      	movs	r2, #64	; 0x40
 8007564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007572:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007578:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757e:	b29a      	uxth	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4a5b      	ldr	r2, [pc, #364]	; (80076f4 <HAL_I2C_Mem_Read+0x228>)
 8007588:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800758a:	88f8      	ldrh	r0, [r7, #6]
 800758c:	893a      	ldrh	r2, [r7, #8]
 800758e:	8979      	ldrh	r1, [r7, #10]
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	9301      	str	r3, [sp, #4]
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	4603      	mov	r3, r0
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 fa52 	bl	8007a44 <I2C_RequestMemoryRead>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e1b0      	b.n	800790c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d113      	bne.n	80075da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075b2:	2300      	movs	r3, #0
 80075b4:	623b      	str	r3, [r7, #32]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	623b      	str	r3, [r7, #32]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	623b      	str	r3, [r7, #32]
 80075c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075d6:	601a      	str	r2, [r3, #0]
 80075d8:	e184      	b.n	80078e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d11b      	bne.n	800761a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075f2:	2300      	movs	r3, #0
 80075f4:	61fb      	str	r3, [r7, #28]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	61fb      	str	r3, [r7, #28]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	61fb      	str	r3, [r7, #28]
 8007606:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	e164      	b.n	80078e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800761e:	2b02      	cmp	r3, #2
 8007620:	d11b      	bne.n	800765a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007630:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007640:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007642:	2300      	movs	r3, #0
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	61bb      	str	r3, [r7, #24]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	61bb      	str	r3, [r7, #24]
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	e144      	b.n	80078e4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	617b      	str	r3, [r7, #20]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007670:	e138      	b.n	80078e4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007676:	2b03      	cmp	r3, #3
 8007678:	f200 80f1 	bhi.w	800785e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007680:	2b01      	cmp	r3, #1
 8007682:	d123      	bne.n	80076cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007686:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 fc1b 	bl	8007ec4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e139      	b.n	800790c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	691a      	ldr	r2, [r3, #16]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076ca:	e10b      	b.n	80078e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d14e      	bne.n	8007772 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	2200      	movs	r2, #0
 80076dc:	4906      	ldr	r1, [pc, #24]	; (80076f8 <HAL_I2C_Mem_Read+0x22c>)
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 fa98 	bl	8007c14 <I2C_WaitOnFlagUntilTimeout>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d008      	beq.n	80076fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e10e      	b.n	800790c <HAL_I2C_Mem_Read+0x440>
 80076ee:	bf00      	nop
 80076f0:	00100002 	.word	0x00100002
 80076f4:	ffff0000 	.word	0xffff0000
 80076f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800770a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	691a      	ldr	r2, [r3, #16]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007716:	b2d2      	uxtb	r2, r2
 8007718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007728:	3b01      	subs	r3, #1
 800772a:	b29a      	uxth	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007734:	b29b      	uxth	r3, r3
 8007736:	3b01      	subs	r3, #1
 8007738:	b29a      	uxth	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	691a      	ldr	r2, [r3, #16]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	b2d2      	uxtb	r2, r2
 800774a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800775a:	3b01      	subs	r3, #1
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007766:	b29b      	uxth	r3, r3
 8007768:	3b01      	subs	r3, #1
 800776a:	b29a      	uxth	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007770:	e0b8      	b.n	80078e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007778:	2200      	movs	r2, #0
 800777a:	4966      	ldr	r1, [pc, #408]	; (8007914 <HAL_I2C_Mem_Read+0x448>)
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 fa49 	bl	8007c14 <I2C_WaitOnFlagUntilTimeout>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e0bf      	b.n	800790c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800779a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	691a      	ldr	r2, [r3, #16]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a6:	b2d2      	uxtb	r2, r2
 80077a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077b8:	3b01      	subs	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d4:	2200      	movs	r2, #0
 80077d6:	494f      	ldr	r1, [pc, #316]	; (8007914 <HAL_I2C_Mem_Read+0x448>)
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 fa1b 	bl	8007c14 <I2C_WaitOnFlagUntilTimeout>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e091      	b.n	800790c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691a      	ldr	r2, [r3, #16]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	b2d2      	uxtb	r2, r2
 8007804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007814:	3b01      	subs	r3, #1
 8007816:	b29a      	uxth	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007820:	b29b      	uxth	r3, r3
 8007822:	3b01      	subs	r3, #1
 8007824:	b29a      	uxth	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	691a      	ldr	r2, [r3, #16]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	b2d2      	uxtb	r2, r2
 8007836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007846:	3b01      	subs	r3, #1
 8007848:	b29a      	uxth	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007852:	b29b      	uxth	r3, r3
 8007854:	3b01      	subs	r3, #1
 8007856:	b29a      	uxth	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800785c:	e042      	b.n	80078e4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800785e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007860:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 fb2e 	bl	8007ec4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d001      	beq.n	8007872 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e04c      	b.n	800790c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	691a      	ldr	r2, [r3, #16]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	b2d2      	uxtb	r2, r2
 800787e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	1c5a      	adds	r2, r3, #1
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800788e:	3b01      	subs	r3, #1
 8007890:	b29a      	uxth	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789a:	b29b      	uxth	r3, r3
 800789c:	3b01      	subs	r3, #1
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	f003 0304 	and.w	r3, r3, #4
 80078ae:	2b04      	cmp	r3, #4
 80078b0:	d118      	bne.n	80078e4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	691a      	ldr	r2, [r3, #16]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	b2d2      	uxtb	r2, r2
 80078be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	1c5a      	adds	r2, r3, #1
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ce:	3b01      	subs	r3, #1
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078da:	b29b      	uxth	r3, r3
 80078dc:	3b01      	subs	r3, #1
 80078de:	b29a      	uxth	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f47f aec2 	bne.w	8007672 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2220      	movs	r2, #32
 80078f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	e000      	b.n	800790c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800790a:	2302      	movs	r3, #2
  }
}
 800790c:	4618      	mov	r0, r3
 800790e:	3728      	adds	r7, #40	; 0x28
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	00010004 	.word	0x00010004

08007918 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b088      	sub	sp, #32
 800791c:	af02      	add	r7, sp, #8
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	4608      	mov	r0, r1
 8007922:	4611      	mov	r1, r2
 8007924:	461a      	mov	r2, r3
 8007926:	4603      	mov	r3, r0
 8007928:	817b      	strh	r3, [r7, #10]
 800792a:	460b      	mov	r3, r1
 800792c:	813b      	strh	r3, [r7, #8]
 800792e:	4613      	mov	r3, r2
 8007930:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007940:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	2200      	movs	r2, #0
 800794a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 f960 	bl	8007c14 <I2C_WaitOnFlagUntilTimeout>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00d      	beq.n	8007976 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007968:	d103      	bne.n	8007972 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007970:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e05f      	b.n	8007a36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007976:	897b      	ldrh	r3, [r7, #10]
 8007978:	b2db      	uxtb	r3, r3
 800797a:	461a      	mov	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007984:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	6a3a      	ldr	r2, [r7, #32]
 800798a:	492d      	ldr	r1, [pc, #180]	; (8007a40 <I2C_RequestMemoryWrite+0x128>)
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 f998 	bl	8007cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e04c      	b.n	8007a36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800799c:	2300      	movs	r3, #0
 800799e:	617b      	str	r3, [r7, #20]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	617b      	str	r3, [r7, #20]
 80079b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079b4:	6a39      	ldr	r1, [r7, #32]
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f000 fa02 	bl	8007dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00d      	beq.n	80079de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d107      	bne.n	80079da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e02b      	b.n	8007a36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079de:	88fb      	ldrh	r3, [r7, #6]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d105      	bne.n	80079f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079e4:	893b      	ldrh	r3, [r7, #8]
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	611a      	str	r2, [r3, #16]
 80079ee:	e021      	b.n	8007a34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80079f0:	893b      	ldrh	r3, [r7, #8]
 80079f2:	0a1b      	lsrs	r3, r3, #8
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a00:	6a39      	ldr	r1, [r7, #32]
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 f9dc 	bl	8007dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00d      	beq.n	8007a2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a12:	2b04      	cmp	r3, #4
 8007a14:	d107      	bne.n	8007a26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e005      	b.n	8007a36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a2a:	893b      	ldrh	r3, [r7, #8]
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	00010002 	.word	0x00010002

08007a44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af02      	add	r7, sp, #8
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	4611      	mov	r1, r2
 8007a50:	461a      	mov	r2, r3
 8007a52:	4603      	mov	r3, r0
 8007a54:	817b      	strh	r3, [r7, #10]
 8007a56:	460b      	mov	r3, r1
 8007a58:	813b      	strh	r3, [r7, #8]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 f8c2 	bl	8007c14 <I2C_WaitOnFlagUntilTimeout>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00d      	beq.n	8007ab2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aa4:	d103      	bne.n	8007aae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e0aa      	b.n	8007c08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ab2:	897b      	ldrh	r3, [r7, #10]
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ac0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	6a3a      	ldr	r2, [r7, #32]
 8007ac6:	4952      	ldr	r1, [pc, #328]	; (8007c10 <I2C_RequestMemoryRead+0x1cc>)
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 f8fa 	bl	8007cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e097      	b.n	8007c08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ad8:	2300      	movs	r3, #0
 8007ada:	617b      	str	r3, [r7, #20]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af0:	6a39      	ldr	r1, [r7, #32]
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 f964 	bl	8007dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00d      	beq.n	8007b1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	d107      	bne.n	8007b16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e076      	b.n	8007c08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b1a:	88fb      	ldrh	r3, [r7, #6]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d105      	bne.n	8007b2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b20:	893b      	ldrh	r3, [r7, #8]
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	611a      	str	r2, [r3, #16]
 8007b2a:	e021      	b.n	8007b70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007b2c:	893b      	ldrh	r3, [r7, #8]
 8007b2e:	0a1b      	lsrs	r3, r3, #8
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b3c:	6a39      	ldr	r1, [r7, #32]
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 f93e 	bl	8007dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00d      	beq.n	8007b66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d107      	bne.n	8007b62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e050      	b.n	8007c08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b66:	893b      	ldrh	r3, [r7, #8]
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b72:	6a39      	ldr	r1, [r7, #32]
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f923 	bl	8007dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00d      	beq.n	8007b9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d107      	bne.n	8007b98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e035      	b.n	8007c08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007baa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 f82b 	bl	8007c14 <I2C_WaitOnFlagUntilTimeout>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00d      	beq.n	8007be0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bd2:	d103      	bne.n	8007bdc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e013      	b.n	8007c08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007be0:	897b      	ldrh	r3, [r7, #10]
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	f043 0301 	orr.w	r3, r3, #1
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	6a3a      	ldr	r2, [r7, #32]
 8007bf4:	4906      	ldr	r1, [pc, #24]	; (8007c10 <I2C_RequestMemoryRead+0x1cc>)
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 f863 	bl	8007cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e000      	b.n	8007c08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3718      	adds	r7, #24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	00010002 	.word	0x00010002

08007c14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	603b      	str	r3, [r7, #0]
 8007c20:	4613      	mov	r3, r2
 8007c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c24:	e025      	b.n	8007c72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2c:	d021      	beq.n	8007c72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c2e:	f7fe fb89 	bl	8006344 <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d302      	bcc.n	8007c44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d116      	bne.n	8007c72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	f043 0220 	orr.w	r2, r3, #32
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e023      	b.n	8007cba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	0c1b      	lsrs	r3, r3, #16
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d10d      	bne.n	8007c98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	43da      	mvns	r2, r3
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	4013      	ands	r3, r2
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	bf0c      	ite	eq
 8007c8e:	2301      	moveq	r3, #1
 8007c90:	2300      	movne	r3, #0
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	461a      	mov	r2, r3
 8007c96:	e00c      	b.n	8007cb2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	43da      	mvns	r2, r3
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	bf0c      	ite	eq
 8007caa:	2301      	moveq	r3, #1
 8007cac:	2300      	movne	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d0b6      	beq.n	8007c26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	607a      	str	r2, [r7, #4]
 8007cce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007cd0:	e051      	b.n	8007d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ce0:	d123      	bne.n	8007d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cf0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007cfa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	f043 0204 	orr.w	r2, r3, #4
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e046      	b.n	8007db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d30:	d021      	beq.n	8007d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d32:	f7fe fb07 	bl	8006344 <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d302      	bcc.n	8007d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d116      	bne.n	8007d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	f043 0220 	orr.w	r2, r3, #32
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e020      	b.n	8007db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	0c1b      	lsrs	r3, r3, #16
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d10c      	bne.n	8007d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	43da      	mvns	r2, r3
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	bf14      	ite	ne
 8007d92:	2301      	movne	r3, #1
 8007d94:	2300      	moveq	r3, #0
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	e00b      	b.n	8007db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	43da      	mvns	r2, r3
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	4013      	ands	r3, r2
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	bf14      	ite	ne
 8007dac:	2301      	movne	r3, #1
 8007dae:	2300      	moveq	r3, #0
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d18d      	bne.n	8007cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007dcc:	e02d      	b.n	8007e2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 f8ce 	bl	8007f70 <I2C_IsAcknowledgeFailed>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e02d      	b.n	8007e3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de4:	d021      	beq.n	8007e2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007de6:	f7fe faad 	bl	8006344 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d302      	bcc.n	8007dfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d116      	bne.n	8007e2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	f043 0220 	orr.w	r2, r3, #32
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e007      	b.n	8007e3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e34:	2b80      	cmp	r3, #128	; 0x80
 8007e36:	d1ca      	bne.n	8007dce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	60b9      	str	r1, [r7, #8]
 8007e4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e4e:	e02d      	b.n	8007eac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 f88d 	bl	8007f70 <I2C_IsAcknowledgeFailed>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e02d      	b.n	8007ebc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e66:	d021      	beq.n	8007eac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e68:	f7fe fa6c 	bl	8006344 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d302      	bcc.n	8007e7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d116      	bne.n	8007eac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2220      	movs	r2, #32
 8007e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e98:	f043 0220 	orr.w	r2, r3, #32
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e007      	b.n	8007ebc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	f003 0304 	and.w	r3, r3, #4
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d1ca      	bne.n	8007e50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ed0:	e042      	b.n	8007f58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	f003 0310 	and.w	r3, r3, #16
 8007edc:	2b10      	cmp	r3, #16
 8007ede:	d119      	bne.n	8007f14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f06f 0210 	mvn.w	r2, #16
 8007ee8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e029      	b.n	8007f68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f14:	f7fe fa16 	bl	8006344 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d302      	bcc.n	8007f2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d116      	bne.n	8007f58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	f043 0220 	orr.w	r2, r3, #32
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e007      	b.n	8007f68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f62:	2b40      	cmp	r3, #64	; 0x40
 8007f64:	d1b5      	bne.n	8007ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f86:	d11b      	bne.n	8007fc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fac:	f043 0204 	orr.w	r2, r3, #4
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e000      	b.n	8007fc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bc80      	pop	{r7}
 8007fca:	4770      	bx	lr

08007fcc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fce:	b08f      	sub	sp, #60	; 0x3c
 8007fd0:	af0a      	add	r7, sp, #40	; 0x28
 8007fd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e10f      	b.n	80081fe <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d106      	bne.n	8007ffe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f005 fc95 	bl	800d928 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2203      	movs	r2, #3
 8008002:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800800a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800e:	2b00      	cmp	r3, #0
 8008010:	d102      	bne.n	8008018 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4618      	mov	r0, r3
 800801e:	f002 fc85 	bl	800a92c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	687e      	ldr	r6, [r7, #4]
 800802a:	466d      	mov	r5, sp
 800802c:	f106 0410 	add.w	r4, r6, #16
 8008030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008038:	e894 0003 	ldmia.w	r4, {r0, r1}
 800803c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008040:	1d33      	adds	r3, r6, #4
 8008042:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008044:	6838      	ldr	r0, [r7, #0]
 8008046:	f002 fb67 	bl	800a718 <USB_CoreInit>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e0d0      	b.n	80081fe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2100      	movs	r1, #0
 8008062:	4618      	mov	r0, r3
 8008064:	f002 fc72 	bl	800a94c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008068:	2300      	movs	r3, #0
 800806a:	73fb      	strb	r3, [r7, #15]
 800806c:	e04a      	b.n	8008104 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800806e:	7bfa      	ldrb	r2, [r7, #15]
 8008070:	6879      	ldr	r1, [r7, #4]
 8008072:	4613      	mov	r3, r2
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	1a9b      	subs	r3, r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	333d      	adds	r3, #61	; 0x3d
 800807e:	2201      	movs	r2, #1
 8008080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008082:	7bfa      	ldrb	r2, [r7, #15]
 8008084:	6879      	ldr	r1, [r7, #4]
 8008086:	4613      	mov	r3, r2
 8008088:	00db      	lsls	r3, r3, #3
 800808a:	1a9b      	subs	r3, r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	440b      	add	r3, r1
 8008090:	333c      	adds	r3, #60	; 0x3c
 8008092:	7bfa      	ldrb	r2, [r7, #15]
 8008094:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008096:	7bfa      	ldrb	r2, [r7, #15]
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	b298      	uxth	r0, r3
 800809c:	6879      	ldr	r1, [r7, #4]
 800809e:	4613      	mov	r3, r2
 80080a0:	00db      	lsls	r3, r3, #3
 80080a2:	1a9b      	subs	r3, r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	440b      	add	r3, r1
 80080a8:	3342      	adds	r3, #66	; 0x42
 80080aa:	4602      	mov	r2, r0
 80080ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80080ae:	7bfa      	ldrb	r2, [r7, #15]
 80080b0:	6879      	ldr	r1, [r7, #4]
 80080b2:	4613      	mov	r3, r2
 80080b4:	00db      	lsls	r3, r3, #3
 80080b6:	1a9b      	subs	r3, r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	440b      	add	r3, r1
 80080bc:	333f      	adds	r3, #63	; 0x3f
 80080be:	2200      	movs	r2, #0
 80080c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80080c2:	7bfa      	ldrb	r2, [r7, #15]
 80080c4:	6879      	ldr	r1, [r7, #4]
 80080c6:	4613      	mov	r3, r2
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	1a9b      	subs	r3, r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	440b      	add	r3, r1
 80080d0:	3344      	adds	r3, #68	; 0x44
 80080d2:	2200      	movs	r2, #0
 80080d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80080d6:	7bfa      	ldrb	r2, [r7, #15]
 80080d8:	6879      	ldr	r1, [r7, #4]
 80080da:	4613      	mov	r3, r2
 80080dc:	00db      	lsls	r3, r3, #3
 80080de:	1a9b      	subs	r3, r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	440b      	add	r3, r1
 80080e4:	3348      	adds	r3, #72	; 0x48
 80080e6:	2200      	movs	r2, #0
 80080e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80080ea:	7bfa      	ldrb	r2, [r7, #15]
 80080ec:	6879      	ldr	r1, [r7, #4]
 80080ee:	4613      	mov	r3, r2
 80080f0:	00db      	lsls	r3, r3, #3
 80080f2:	1a9b      	subs	r3, r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	440b      	add	r3, r1
 80080f8:	3350      	adds	r3, #80	; 0x50
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	3301      	adds	r3, #1
 8008102:	73fb      	strb	r3, [r7, #15]
 8008104:	7bfa      	ldrb	r2, [r7, #15]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	429a      	cmp	r2, r3
 800810c:	d3af      	bcc.n	800806e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800810e:	2300      	movs	r3, #0
 8008110:	73fb      	strb	r3, [r7, #15]
 8008112:	e044      	b.n	800819e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008114:	7bfa      	ldrb	r2, [r7, #15]
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	4613      	mov	r3, r2
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	1a9b      	subs	r3, r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	440b      	add	r3, r1
 8008122:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008126:	2200      	movs	r2, #0
 8008128:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800812a:	7bfa      	ldrb	r2, [r7, #15]
 800812c:	6879      	ldr	r1, [r7, #4]
 800812e:	4613      	mov	r3, r2
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	1a9b      	subs	r3, r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	440b      	add	r3, r1
 8008138:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800813c:	7bfa      	ldrb	r2, [r7, #15]
 800813e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008140:	7bfa      	ldrb	r2, [r7, #15]
 8008142:	6879      	ldr	r1, [r7, #4]
 8008144:	4613      	mov	r3, r2
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	1a9b      	subs	r3, r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	440b      	add	r3, r1
 800814e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008152:	2200      	movs	r2, #0
 8008154:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008156:	7bfa      	ldrb	r2, [r7, #15]
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	4613      	mov	r3, r2
 800815c:	00db      	lsls	r3, r3, #3
 800815e:	1a9b      	subs	r3, r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	440b      	add	r3, r1
 8008164:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008168:	2200      	movs	r2, #0
 800816a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800816c:	7bfa      	ldrb	r2, [r7, #15]
 800816e:	6879      	ldr	r1, [r7, #4]
 8008170:	4613      	mov	r3, r2
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	1a9b      	subs	r3, r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	440b      	add	r3, r1
 800817a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800817e:	2200      	movs	r2, #0
 8008180:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008182:	7bfa      	ldrb	r2, [r7, #15]
 8008184:	6879      	ldr	r1, [r7, #4]
 8008186:	4613      	mov	r3, r2
 8008188:	00db      	lsls	r3, r3, #3
 800818a:	1a9b      	subs	r3, r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	440b      	add	r3, r1
 8008190:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008194:	2200      	movs	r2, #0
 8008196:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	3301      	adds	r3, #1
 800819c:	73fb      	strb	r3, [r7, #15]
 800819e:	7bfa      	ldrb	r2, [r7, #15]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d3b5      	bcc.n	8008114 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	603b      	str	r3, [r7, #0]
 80081ae:	687e      	ldr	r6, [r7, #4]
 80081b0:	466d      	mov	r5, sp
 80081b2:	f106 0410 	add.w	r4, r6, #16
 80081b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80081c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80081c6:	1d33      	adds	r3, r6, #4
 80081c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081ca:	6838      	ldr	r0, [r7, #0]
 80081cc:	f002 fc0a 	bl	800a9e4 <USB_DevInit>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d005      	beq.n	80081e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2202      	movs	r2, #2
 80081da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e00d      	b.n	80081fe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f003 fc7b 	bl	800baf2 <USB_DevDisconnect>

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008206 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b082      	sub	sp, #8
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008214:	2b01      	cmp	r3, #1
 8008216:	d101      	bne.n	800821c <HAL_PCD_Start+0x16>
 8008218:	2302      	movs	r3, #2
 800821a:	e012      	b.n	8008242 <HAL_PCD_Start+0x3c>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4618      	mov	r0, r3
 800822a:	f002 fb6f 	bl	800a90c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f003 fc3d 	bl	800bab2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800824a:	b590      	push	{r4, r7, lr}
 800824c:	b08d      	sub	sp, #52	; 0x34
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4618      	mov	r0, r3
 8008262:	f003 fcf4 	bl	800bc4e <USB_GetMode>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	f040 838f 	bne.w	800898c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4618      	mov	r0, r3
 8008274:	f003 fc5d 	bl	800bb32 <USB_ReadInterrupts>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 8385 	beq.w	800898a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4618      	mov	r0, r3
 8008286:	f003 fc54 	bl	800bb32 <USB_ReadInterrupts>
 800828a:	4603      	mov	r3, r0
 800828c:	f003 0302 	and.w	r3, r3, #2
 8008290:	2b02      	cmp	r3, #2
 8008292:	d107      	bne.n	80082a4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	695a      	ldr	r2, [r3, #20]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f002 0202 	and.w	r2, r2, #2
 80082a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f003 fc42 	bl	800bb32 <USB_ReadInterrupts>
 80082ae:	4603      	mov	r3, r0
 80082b0:	f003 0310 	and.w	r3, r3, #16
 80082b4:	2b10      	cmp	r3, #16
 80082b6:	d161      	bne.n	800837c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	699a      	ldr	r2, [r3, #24]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 0210 	bic.w	r2, r2, #16
 80082c6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	6a1b      	ldr	r3, [r3, #32]
 80082cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	f003 020f 	and.w	r2, r3, #15
 80082d4:	4613      	mov	r3, r2
 80082d6:	00db      	lsls	r3, r3, #3
 80082d8:	1a9b      	subs	r3, r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	4413      	add	r3, r2
 80082e4:	3304      	adds	r3, #4
 80082e6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	0c5b      	lsrs	r3, r3, #17
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d124      	bne.n	800833e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80082f4:	69ba      	ldr	r2, [r7, #24]
 80082f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80082fa:	4013      	ands	r3, r2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d035      	beq.n	800836c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	091b      	lsrs	r3, r3, #4
 8008308:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800830a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800830e:	b29b      	uxth	r3, r3
 8008310:	461a      	mov	r2, r3
 8008312:	6a38      	ldr	r0, [r7, #32]
 8008314:	f003 fa7f 	bl	800b816 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	68da      	ldr	r2, [r3, #12]
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	091b      	lsrs	r3, r3, #4
 8008320:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008324:	441a      	add	r2, r3
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	699a      	ldr	r2, [r3, #24]
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	091b      	lsrs	r3, r3, #4
 8008332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008336:	441a      	add	r2, r3
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	619a      	str	r2, [r3, #24]
 800833c:	e016      	b.n	800836c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	0c5b      	lsrs	r3, r3, #17
 8008342:	f003 030f 	and.w	r3, r3, #15
 8008346:	2b06      	cmp	r3, #6
 8008348:	d110      	bne.n	800836c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008350:	2208      	movs	r2, #8
 8008352:	4619      	mov	r1, r3
 8008354:	6a38      	ldr	r0, [r7, #32]
 8008356:	f003 fa5e 	bl	800b816 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	699a      	ldr	r2, [r3, #24]
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	091b      	lsrs	r3, r3, #4
 8008362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008366:	441a      	add	r2, r3
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699a      	ldr	r2, [r3, #24]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0210 	orr.w	r2, r2, #16
 800837a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4618      	mov	r0, r3
 8008382:	f003 fbd6 	bl	800bb32 <USB_ReadInterrupts>
 8008386:	4603      	mov	r3, r0
 8008388:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800838c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008390:	d16e      	bne.n	8008470 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008392:	2300      	movs	r3, #0
 8008394:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f003 fbdb 	bl	800bb56 <USB_ReadDevAllOutEpInterrupt>
 80083a0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80083a2:	e062      	b.n	800846a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d057      	beq.n	800845e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b4:	b2d2      	uxtb	r2, r2
 80083b6:	4611      	mov	r1, r2
 80083b8:	4618      	mov	r0, r3
 80083ba:	f003 fbfe 	bl	800bbba <USB_ReadDevOutEPInterrupt>
 80083be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00c      	beq.n	80083e4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	015a      	lsls	r2, r3, #5
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d6:	461a      	mov	r2, r3
 80083d8:	2301      	movs	r3, #1
 80083da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80083dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fda2 	bl	8008f28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f003 0308 	and.w	r3, r3, #8
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00c      	beq.n	8008408 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083fa:	461a      	mov	r2, r3
 80083fc:	2308      	movs	r3, #8
 80083fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fe9c 	bl	8009140 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	f003 0310 	and.w	r3, r3, #16
 800840e:	2b00      	cmp	r3, #0
 8008410:	d008      	beq.n	8008424 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	4413      	add	r3, r2
 800841a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800841e:	461a      	mov	r2, r3
 8008420:	2310      	movs	r3, #16
 8008422:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b00      	cmp	r3, #0
 800842c:	d008      	beq.n	8008440 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843a:	461a      	mov	r2, r3
 800843c:	2320      	movs	r3, #32
 800843e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d009      	beq.n	800845e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	015a      	lsls	r2, r3, #5
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	4413      	add	r3, r2
 8008452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008456:	461a      	mov	r2, r3
 8008458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800845c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800845e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008460:	3301      	adds	r3, #1
 8008462:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008466:	085b      	lsrs	r3, r3, #1
 8008468:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846c:	2b00      	cmp	r3, #0
 800846e:	d199      	bne.n	80083a4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4618      	mov	r0, r3
 8008476:	f003 fb5c 	bl	800bb32 <USB_ReadInterrupts>
 800847a:	4603      	mov	r3, r0
 800847c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008480:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008484:	f040 80c0 	bne.w	8008608 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4618      	mov	r0, r3
 800848e:	f003 fb7b 	bl	800bb88 <USB_ReadDevAllInEpInterrupt>
 8008492:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008494:	2300      	movs	r3, #0
 8008496:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008498:	e0b2      	b.n	8008600 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 80a7 	beq.w	80085f4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ac:	b2d2      	uxtb	r2, r2
 80084ae:	4611      	mov	r1, r2
 80084b0:	4618      	mov	r0, r3
 80084b2:	f003 fb9f 	bl	800bbf4 <USB_ReadDevInEPInterrupt>
 80084b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d057      	beq.n	8008572 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	f003 030f 	and.w	r3, r3, #15
 80084c8:	2201      	movs	r2, #1
 80084ca:	fa02 f303 	lsl.w	r3, r2, r3
 80084ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	43db      	mvns	r3, r3
 80084dc:	69f9      	ldr	r1, [r7, #28]
 80084de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084e2:	4013      	ands	r3, r2
 80084e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f2:	461a      	mov	r2, r3
 80084f4:	2301      	movs	r3, #1
 80084f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d132      	bne.n	8008566 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008500:	6879      	ldr	r1, [r7, #4]
 8008502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008504:	4613      	mov	r3, r2
 8008506:	00db      	lsls	r3, r3, #3
 8008508:	1a9b      	subs	r3, r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	440b      	add	r3, r1
 800850e:	3348      	adds	r3, #72	; 0x48
 8008510:	6819      	ldr	r1, [r3, #0]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008516:	4613      	mov	r3, r2
 8008518:	00db      	lsls	r3, r3, #3
 800851a:	1a9b      	subs	r3, r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4403      	add	r3, r0
 8008520:	3344      	adds	r3, #68	; 0x44
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4419      	add	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800852a:	4613      	mov	r3, r2
 800852c:	00db      	lsls	r3, r3, #3
 800852e:	1a9b      	subs	r3, r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4403      	add	r3, r0
 8008534:	3348      	adds	r3, #72	; 0x48
 8008536:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853a:	2b00      	cmp	r3, #0
 800853c:	d113      	bne.n	8008566 <HAL_PCD_IRQHandler+0x31c>
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008542:	4613      	mov	r3, r2
 8008544:	00db      	lsls	r3, r3, #3
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	440b      	add	r3, r1
 800854c:	3350      	adds	r3, #80	; 0x50
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d108      	bne.n	8008566 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6818      	ldr	r0, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800855e:	461a      	mov	r2, r3
 8008560:	2101      	movs	r1, #1
 8008562:	f003 fba3 	bl	800bcac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	b2db      	uxtb	r3, r3
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f005 fa5c 	bl	800da2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	f003 0308 	and.w	r3, r3, #8
 8008578:	2b00      	cmp	r3, #0
 800857a:	d008      	beq.n	800858e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008588:	461a      	mov	r2, r3
 800858a:	2308      	movs	r3, #8
 800858c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f003 0310 	and.w	r3, r3, #16
 8008594:	2b00      	cmp	r3, #0
 8008596:	d008      	beq.n	80085aa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a4:	461a      	mov	r2, r3
 80085a6:	2310      	movs	r3, #16
 80085a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d008      	beq.n	80085c6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c0:	461a      	mov	r2, r3
 80085c2:	2340      	movs	r3, #64	; 0x40
 80085c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d008      	beq.n	80085e2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085dc:	461a      	mov	r2, r3
 80085de:	2302      	movs	r3, #2
 80085e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80085ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fc0c 	bl	8008e0c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	3301      	adds	r3, #1
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80085fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fc:	085b      	lsrs	r3, r3, #1
 80085fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	2b00      	cmp	r3, #0
 8008604:	f47f af49 	bne.w	800849a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4618      	mov	r0, r3
 800860e:	f003 fa90 	bl	800bb32 <USB_ReadInterrupts>
 8008612:	4603      	mov	r3, r0
 8008614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800861c:	d114      	bne.n	8008648 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	69fa      	ldr	r2, [r7, #28]
 8008628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800862c:	f023 0301 	bic.w	r3, r3, #1
 8008630:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f005 fa70 	bl	800db18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	695a      	ldr	r2, [r3, #20]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008646:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4618      	mov	r0, r3
 800864e:	f003 fa70 	bl	800bb32 <USB_ReadInterrupts>
 8008652:	4603      	mov	r3, r0
 8008654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800865c:	d112      	bne.n	8008684 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b01      	cmp	r3, #1
 800866c:	d102      	bne.n	8008674 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f005 fa2c 	bl	800dacc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695a      	ldr	r2, [r3, #20]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008682:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4618      	mov	r0, r3
 800868a:	f003 fa52 	bl	800bb32 <USB_ReadInterrupts>
 800868e:	4603      	mov	r3, r0
 8008690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008698:	f040 80c7 	bne.w	800882a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	69fa      	ldr	r2, [r7, #28]
 80086a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086aa:	f023 0301 	bic.w	r3, r3, #1
 80086ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2110      	movs	r1, #16
 80086b6:	4618      	mov	r0, r3
 80086b8:	f002 faf8 	bl	800acac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086bc:	2300      	movs	r3, #0
 80086be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086c0:	e056      	b.n	8008770 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80086c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c4:	015a      	lsls	r2, r3, #5
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ce:	461a      	mov	r2, r3
 80086d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80086d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d8:	015a      	lsls	r2, r3, #5
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	4413      	add	r3, r2
 80086de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086e6:	0151      	lsls	r1, r2, #5
 80086e8:	69fa      	ldr	r2, [r7, #28]
 80086ea:	440a      	add	r2, r1
 80086ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086f4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80086f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f8:	015a      	lsls	r2, r3, #5
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	4413      	add	r3, r2
 80086fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008706:	0151      	lsls	r1, r2, #5
 8008708:	69fa      	ldr	r2, [r7, #28]
 800870a:	440a      	add	r2, r1
 800870c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008710:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008714:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	4413      	add	r3, r2
 800871e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008722:	461a      	mov	r2, r3
 8008724:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008728:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800872a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	4413      	add	r3, r2
 8008732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800873a:	0151      	lsls	r1, r2, #5
 800873c:	69fa      	ldr	r2, [r7, #28]
 800873e:	440a      	add	r2, r1
 8008740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008744:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008748:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800874a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874c:	015a      	lsls	r2, r3, #5
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	4413      	add	r3, r2
 8008752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800875a:	0151      	lsls	r1, r2, #5
 800875c:	69fa      	ldr	r2, [r7, #28]
 800875e:	440a      	add	r2, r1
 8008760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008764:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008768:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	3301      	adds	r3, #1
 800876e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008776:	429a      	cmp	r2, r3
 8008778:	d3a3      	bcc.n	80086c2 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	69fa      	ldr	r2, [r7, #28]
 8008784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008788:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800878c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008792:	2b00      	cmp	r3, #0
 8008794:	d016      	beq.n	80087c4 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800879c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087a0:	69fa      	ldr	r2, [r7, #28]
 80087a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087a6:	f043 030b 	orr.w	r3, r3, #11
 80087aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b6:	69fa      	ldr	r2, [r7, #28]
 80087b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087bc:	f043 030b 	orr.w	r3, r3, #11
 80087c0:	6453      	str	r3, [r2, #68]	; 0x44
 80087c2:	e015      	b.n	80087f0 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	69fa      	ldr	r2, [r7, #28]
 80087ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80087d6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80087da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	69fa      	ldr	r2, [r7, #28]
 80087e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087ea:	f043 030b 	orr.w	r3, r3, #11
 80087ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	69fa      	ldr	r2, [r7, #28]
 80087fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008802:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6818      	ldr	r0, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008814:	461a      	mov	r2, r3
 8008816:	f003 fa49 	bl	800bcac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	695a      	ldr	r2, [r3, #20]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4618      	mov	r0, r3
 8008830:	f003 f97f 	bl	800bb32 <USB_ReadInterrupts>
 8008834:	4603      	mov	r3, r0
 8008836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800883a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800883e:	d124      	bne.n	800888a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4618      	mov	r0, r3
 8008846:	f003 fa0f 	bl	800bc68 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4618      	mov	r0, r3
 8008850:	f002 fa88 	bl	800ad64 <USB_GetDevSpeed>
 8008854:	4603      	mov	r3, r0
 8008856:	461a      	mov	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681c      	ldr	r4, [r3, #0]
 8008860:	f001 f932 	bl	8009ac8 <HAL_RCC_GetHCLKFreq>
 8008864:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800886a:	b2db      	uxtb	r3, r3
 800886c:	461a      	mov	r2, r3
 800886e:	4620      	mov	r0, r4
 8008870:	f001 ffaa 	bl	800a7c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f005 f900 	bl	800da7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	695a      	ldr	r2, [r3, #20]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008888:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4618      	mov	r0, r3
 8008890:	f003 f94f 	bl	800bb32 <USB_ReadInterrupts>
 8008894:	4603      	mov	r3, r0
 8008896:	f003 0308 	and.w	r3, r3, #8
 800889a:	2b08      	cmp	r3, #8
 800889c:	d10a      	bne.n	80088b4 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f005 f8dd 	bl	800da5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	695a      	ldr	r2, [r3, #20]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f002 0208 	and.w	r2, r2, #8
 80088b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f003 f93a 	bl	800bb32 <USB_ReadInterrupts>
 80088be:	4603      	mov	r3, r0
 80088c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088c8:	d10f      	bne.n	80088ea <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f005 f93f 	bl	800db58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	695a      	ldr	r2, [r3, #20]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80088e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f003 f91f 	bl	800bb32 <USB_ReadInterrupts>
 80088f4:	4603      	mov	r3, r0
 80088f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088fe:	d10f      	bne.n	8008920 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	b2db      	uxtb	r3, r3
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f005 f912 	bl	800db34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	695a      	ldr	r2, [r3, #20]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800891e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4618      	mov	r0, r3
 8008926:	f003 f904 	bl	800bb32 <USB_ReadInterrupts>
 800892a:	4603      	mov	r3, r0
 800892c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008934:	d10a      	bne.n	800894c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f005 f920 	bl	800db7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	695a      	ldr	r2, [r3, #20]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800894a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4618      	mov	r0, r3
 8008952:	f003 f8ee 	bl	800bb32 <USB_ReadInterrupts>
 8008956:	4603      	mov	r3, r0
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b04      	cmp	r3, #4
 800895e:	d115      	bne.n	800898c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	f003 0304 	and.w	r3, r3, #4
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f005 f910 	bl	800db98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6859      	ldr	r1, [r3, #4]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	430a      	orrs	r2, r1
 8008986:	605a      	str	r2, [r3, #4]
 8008988:	e000      	b.n	800898c <HAL_PCD_IRQHandler+0x742>
      return;
 800898a:	bf00      	nop
    }
  }
}
 800898c:	3734      	adds	r7, #52	; 0x34
 800898e:	46bd      	mov	sp, r7
 8008990:	bd90      	pop	{r4, r7, pc}

08008992 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b082      	sub	sp, #8
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	460b      	mov	r3, r1
 800899c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d101      	bne.n	80089ac <HAL_PCD_SetAddress+0x1a>
 80089a8:	2302      	movs	r3, #2
 80089aa:	e013      	b.n	80089d4 <HAL_PCD_SetAddress+0x42>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	78fa      	ldrb	r2, [r7, #3]
 80089b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	4611      	mov	r1, r2
 80089c4:	4618      	mov	r0, r3
 80089c6:	f003 f84f 	bl	800ba68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	4608      	mov	r0, r1
 80089e6:	4611      	mov	r1, r2
 80089e8:	461a      	mov	r2, r3
 80089ea:	4603      	mov	r3, r0
 80089ec:	70fb      	strb	r3, [r7, #3]
 80089ee:	460b      	mov	r3, r1
 80089f0:	803b      	strh	r3, [r7, #0]
 80089f2:	4613      	mov	r3, r2
 80089f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80089fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	da0f      	bge.n	8008a22 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a02:	78fb      	ldrb	r3, [r7, #3]
 8008a04:	f003 020f 	and.w	r2, r3, #15
 8008a08:	4613      	mov	r3, r2
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	1a9b      	subs	r3, r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	3338      	adds	r3, #56	; 0x38
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	4413      	add	r3, r2
 8008a16:	3304      	adds	r3, #4
 8008a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	705a      	strb	r2, [r3, #1]
 8008a20:	e00f      	b.n	8008a42 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a22:	78fb      	ldrb	r3, [r7, #3]
 8008a24:	f003 020f 	and.w	r2, r3, #15
 8008a28:	4613      	mov	r3, r2
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	1a9b      	subs	r3, r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	4413      	add	r3, r2
 8008a38:	3304      	adds	r3, #4
 8008a3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008a42:	78fb      	ldrb	r3, [r7, #3]
 8008a44:	f003 030f 	and.w	r3, r3, #15
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008a4e:	883a      	ldrh	r2, [r7, #0]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	78ba      	ldrb	r2, [r7, #2]
 8008a58:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d004      	beq.n	8008a6c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008a6c:	78bb      	ldrb	r3, [r7, #2]
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d102      	bne.n	8008a78 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d101      	bne.n	8008a86 <HAL_PCD_EP_Open+0xaa>
 8008a82:	2302      	movs	r3, #2
 8008a84:	e00e      	b.n	8008aa4 <HAL_PCD_EP_Open+0xc8>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68f9      	ldr	r1, [r7, #12]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f002 f989 	bl	800adac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008aa2:	7afb      	ldrb	r3, [r7, #11]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008ab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	da0f      	bge.n	8008ae0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	f003 020f 	and.w	r2, r3, #15
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	00db      	lsls	r3, r3, #3
 8008aca:	1a9b      	subs	r3, r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	3338      	adds	r3, #56	; 0x38
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2201      	movs	r2, #1
 8008adc:	705a      	strb	r2, [r3, #1]
 8008ade:	e00f      	b.n	8008b00 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	f003 020f 	and.w	r2, r3, #15
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	00db      	lsls	r3, r3, #3
 8008aea:	1a9b      	subs	r3, r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	4413      	add	r3, r2
 8008af6:	3304      	adds	r3, #4
 8008af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	f003 030f 	and.w	r3, r3, #15
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d101      	bne.n	8008b1a <HAL_PCD_EP_Close+0x6e>
 8008b16:	2302      	movs	r3, #2
 8008b18:	e00e      	b.n	8008b38 <HAL_PCD_EP_Close+0x8c>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	68f9      	ldr	r1, [r7, #12]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f002 f9c5 	bl	800aeb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	607a      	str	r2, [r7, #4]
 8008b4a:	603b      	str	r3, [r7, #0]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b50:	7afb      	ldrb	r3, [r7, #11]
 8008b52:	f003 020f 	and.w	r2, r3, #15
 8008b56:	4613      	mov	r3, r2
 8008b58:	00db      	lsls	r3, r3, #3
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	4413      	add	r3, r2
 8008b66:	3304      	adds	r3, #4
 8008b68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b82:	7afb      	ldrb	r3, [r7, #11]
 8008b84:	f003 030f 	and.w	r3, r3, #15
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d102      	bne.n	8008b9c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008b9c:	7afb      	ldrb	r3, [r7, #11]
 8008b9e:	f003 030f 	and.w	r3, r3, #15
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d109      	bne.n	8008bba <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6818      	ldr	r0, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	6979      	ldr	r1, [r7, #20]
 8008bb4:	f002 fca0 	bl	800b4f8 <USB_EP0StartXfer>
 8008bb8:	e008      	b.n	8008bcc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	6979      	ldr	r1, [r7, #20]
 8008bc8:	f002 fa52 	bl	800b070 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b083      	sub	sp, #12
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	460b      	mov	r3, r1
 8008be0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008be2:	78fb      	ldrb	r3, [r7, #3]
 8008be4:	f003 020f 	and.w	r2, r3, #15
 8008be8:	6879      	ldr	r1, [r7, #4]
 8008bea:	4613      	mov	r3, r2
 8008bec:	00db      	lsls	r3, r3, #3
 8008bee:	1a9b      	subs	r3, r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	440b      	add	r3, r1
 8008bf4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008bf8:	681b      	ldr	r3, [r3, #0]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bc80      	pop	{r7}
 8008c02:	4770      	bx	lr

08008c04 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	607a      	str	r2, [r7, #4]
 8008c0e:	603b      	str	r3, [r7, #0]
 8008c10:	460b      	mov	r3, r1
 8008c12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c14:	7afb      	ldrb	r3, [r7, #11]
 8008c16:	f003 020f 	and.w	r2, r3, #15
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	00db      	lsls	r3, r3, #3
 8008c1e:	1a9b      	subs	r3, r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	3338      	adds	r3, #56	; 0x38
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	4413      	add	r3, r2
 8008c28:	3304      	adds	r3, #4
 8008c2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2201      	movs	r2, #1
 8008c42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c44:	7afb      	ldrb	r3, [r7, #11]
 8008c46:	f003 030f 	and.w	r3, r3, #15
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d102      	bne.n	8008c5e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008c5e:	7afb      	ldrb	r3, [r7, #11]
 8008c60:	f003 030f 	and.w	r3, r3, #15
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d109      	bne.n	8008c7c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6818      	ldr	r0, [r3, #0]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	461a      	mov	r2, r3
 8008c74:	6979      	ldr	r1, [r7, #20]
 8008c76:	f002 fc3f 	bl	800b4f8 <USB_EP0StartXfer>
 8008c7a:	e008      	b.n	8008c8e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6818      	ldr	r0, [r3, #0]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	461a      	mov	r2, r3
 8008c88:	6979      	ldr	r1, [r7, #20]
 8008c8a:	f002 f9f1 	bl	800b070 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008ca4:	78fb      	ldrb	r3, [r7, #3]
 8008ca6:	f003 020f 	and.w	r2, r3, #15
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d901      	bls.n	8008cb6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e050      	b.n	8008d58 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008cb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	da0f      	bge.n	8008cde <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cbe:	78fb      	ldrb	r3, [r7, #3]
 8008cc0:	f003 020f 	and.w	r2, r3, #15
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	1a9b      	subs	r3, r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	3338      	adds	r3, #56	; 0x38
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	705a      	strb	r2, [r3, #1]
 8008cdc:	e00d      	b.n	8008cfa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008cde:	78fa      	ldrb	r2, [r7, #3]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	00db      	lsls	r3, r3, #3
 8008ce4:	1a9b      	subs	r3, r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	4413      	add	r3, r2
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d00:	78fb      	ldrb	r3, [r7, #3]
 8008d02:	f003 030f 	and.w	r3, r3, #15
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d101      	bne.n	8008d1a <HAL_PCD_EP_SetStall+0x82>
 8008d16:	2302      	movs	r3, #2
 8008d18:	e01e      	b.n	8008d58 <HAL_PCD_EP_SetStall+0xc0>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68f9      	ldr	r1, [r7, #12]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f002 fdcb 	bl	800b8c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008d2e:	78fb      	ldrb	r3, [r7, #3]
 8008d30:	f003 030f 	and.w	r3, r3, #15
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10a      	bne.n	8008d4e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6818      	ldr	r0, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	b2d9      	uxtb	r1, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d48:	461a      	mov	r2, r3
 8008d4a:	f002 ffaf 	bl	800bcac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008d6c:	78fb      	ldrb	r3, [r7, #3]
 8008d6e:	f003 020f 	and.w	r2, r3, #15
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d901      	bls.n	8008d7e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e042      	b.n	8008e04 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	da0f      	bge.n	8008da6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d86:	78fb      	ldrb	r3, [r7, #3]
 8008d88:	f003 020f 	and.w	r2, r3, #15
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	00db      	lsls	r3, r3, #3
 8008d90:	1a9b      	subs	r3, r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	3338      	adds	r3, #56	; 0x38
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	4413      	add	r3, r2
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2201      	movs	r2, #1
 8008da2:	705a      	strb	r2, [r3, #1]
 8008da4:	e00f      	b.n	8008dc6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008da6:	78fb      	ldrb	r3, [r7, #3]
 8008da8:	f003 020f 	and.w	r2, r3, #15
 8008dac:	4613      	mov	r3, r2
 8008dae:	00db      	lsls	r3, r3, #3
 8008db0:	1a9b      	subs	r3, r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	4413      	add	r3, r2
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008dcc:	78fb      	ldrb	r3, [r7, #3]
 8008dce:	f003 030f 	and.w	r3, r3, #15
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d101      	bne.n	8008de6 <HAL_PCD_EP_ClrStall+0x86>
 8008de2:	2302      	movs	r3, #2
 8008de4:	e00e      	b.n	8008e04 <HAL_PCD_EP_ClrStall+0xa4>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68f9      	ldr	r1, [r7, #12]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f002 fdd2 	bl	800b99e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b08a      	sub	sp, #40	; 0x28
 8008e10:	af02      	add	r7, sp, #8
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	4613      	mov	r3, r2
 8008e24:	00db      	lsls	r3, r3, #3
 8008e26:	1a9b      	subs	r3, r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	3338      	adds	r3, #56	; 0x38
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	4413      	add	r3, r2
 8008e30:	3304      	adds	r3, #4
 8008e32:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	699a      	ldr	r2, [r3, #24]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d901      	bls.n	8008e44 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e06c      	b.n	8008f1e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	695a      	ldr	r2, [r3, #20]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	69fa      	ldr	r2, [r7, #28]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d902      	bls.n	8008e60 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	3303      	adds	r3, #3
 8008e64:	089b      	lsrs	r3, r3, #2
 8008e66:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e68:	e02b      	b.n	8008ec2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	695a      	ldr	r2, [r3, #20]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	69fa      	ldr	r2, [r7, #28]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d902      	bls.n	8008e86 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	3303      	adds	r3, #3
 8008e8a:	089b      	lsrs	r3, r3, #2
 8008e8c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	68d9      	ldr	r1, [r3, #12]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	6978      	ldr	r0, [r7, #20]
 8008ea6:	f002 fc79 	bl	800b79c <USB_WritePacket>

    ep->xfer_buff  += len;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	68da      	ldr	r2, [r3, #12]
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	441a      	add	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	699a      	ldr	r2, [r3, #24]
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	441a      	add	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	69ba      	ldr	r2, [r7, #24]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d809      	bhi.n	8008eec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	699a      	ldr	r2, [r3, #24]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d203      	bcs.n	8008eec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1be      	bne.n	8008e6a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	695a      	ldr	r2, [r3, #20]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d811      	bhi.n	8008f1c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	f003 030f 	and.w	r3, r3, #15
 8008efe:	2201      	movs	r2, #1
 8008f00:	fa02 f303 	lsl.w	r3, r2, r3
 8008f04:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	43db      	mvns	r3, r3
 8008f12:	6939      	ldr	r1, [r7, #16]
 8008f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f18:	4013      	ands	r3, r2
 8008f1a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3720      	adds	r7, #32
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
	...

08008f28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	333c      	adds	r3, #60	; 0x3c
 8008f40:	3304      	adds	r3, #4
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	f040 80a0 	bne.w	80090a0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f003 0308 	and.w	r3, r3, #8
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d015      	beq.n	8008f96 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	4a72      	ldr	r2, [pc, #456]	; (8009138 <PCD_EP_OutXfrComplete_int+0x210>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	f240 80dd 	bls.w	800912e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 80d7 	beq.w	800912e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	015a      	lsls	r2, r3, #5
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f92:	6093      	str	r3, [r2, #8]
 8008f94:	e0cb      	b.n	800912e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	f003 0320 	and.w	r3, r3, #32
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d009      	beq.n	8008fb4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	015a      	lsls	r2, r3, #5
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fac:	461a      	mov	r2, r3
 8008fae:	2320      	movs	r3, #32
 8008fb0:	6093      	str	r3, [r2, #8]
 8008fb2:	e0bc      	b.n	800912e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f040 80b7 	bne.w	800912e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4a5d      	ldr	r2, [pc, #372]	; (8009138 <PCD_EP_OutXfrComplete_int+0x210>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d90f      	bls.n	8008fe8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00a      	beq.n	8008fe8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	015a      	lsls	r2, r3, #5
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	4413      	add	r3, r2
 8008fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fde:	461a      	mov	r2, r3
 8008fe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fe4:	6093      	str	r3, [r2, #8]
 8008fe6:	e0a2      	b.n	800912e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008fe8:	6879      	ldr	r1, [r7, #4]
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	4613      	mov	r3, r2
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	1a9b      	subs	r3, r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	440b      	add	r3, r1
 8008ff6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008ffa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	0159      	lsls	r1, r3, #5
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	440b      	add	r3, r1
 8009004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800900e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	4613      	mov	r3, r2
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	1a9b      	subs	r3, r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4403      	add	r3, r0
 800901e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009022:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009024:	6879      	ldr	r1, [r7, #4]
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	4613      	mov	r3, r2
 800902a:	00db      	lsls	r3, r3, #3
 800902c:	1a9b      	subs	r3, r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	440b      	add	r3, r1
 8009032:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009036:	6819      	ldr	r1, [r3, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	4613      	mov	r3, r2
 800903e:	00db      	lsls	r3, r3, #3
 8009040:	1a9b      	subs	r3, r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4403      	add	r3, r0
 8009046:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4419      	add	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	4613      	mov	r3, r2
 8009054:	00db      	lsls	r3, r3, #3
 8009056:	1a9b      	subs	r3, r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4403      	add	r3, r0
 800905c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009060:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d114      	bne.n	8009092 <PCD_EP_OutXfrComplete_int+0x16a>
 8009068:	6879      	ldr	r1, [r7, #4]
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	4613      	mov	r3, r2
 800906e:	00db      	lsls	r3, r3, #3
 8009070:	1a9b      	subs	r3, r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	440b      	add	r3, r1
 8009076:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d108      	bne.n	8009092 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6818      	ldr	r0, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800908a:	461a      	mov	r2, r3
 800908c:	2101      	movs	r1, #1
 800908e:	f002 fe0d 	bl	800bcac <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	b2db      	uxtb	r3, r3
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f004 fcab 	bl	800d9f4 <HAL_PCD_DataOutStageCallback>
 800909e:	e046      	b.n	800912e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	4a26      	ldr	r2, [pc, #152]	; (800913c <PCD_EP_OutXfrComplete_int+0x214>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d124      	bne.n	80090f2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00a      	beq.n	80090c8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	015a      	lsls	r2, r3, #5
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	4413      	add	r3, r2
 80090ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090be:	461a      	mov	r2, r3
 80090c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090c4:	6093      	str	r3, [r2, #8]
 80090c6:	e032      	b.n	800912e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	f003 0320 	and.w	r3, r3, #32
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d008      	beq.n	80090e4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090de:	461a      	mov	r2, r3
 80090e0:	2320      	movs	r3, #32
 80090e2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f004 fc82 	bl	800d9f4 <HAL_PCD_DataOutStageCallback>
 80090f0:	e01d      	b.n	800912e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d114      	bne.n	8009122 <PCD_EP_OutXfrComplete_int+0x1fa>
 80090f8:	6879      	ldr	r1, [r7, #4]
 80090fa:	683a      	ldr	r2, [r7, #0]
 80090fc:	4613      	mov	r3, r2
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	1a9b      	subs	r3, r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	440b      	add	r3, r1
 8009106:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d108      	bne.n	8009122 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6818      	ldr	r0, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800911a:	461a      	mov	r2, r3
 800911c:	2100      	movs	r1, #0
 800911e:	f002 fdc5 	bl	800bcac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	b2db      	uxtb	r3, r3
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f004 fc63 	bl	800d9f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	4f54300a 	.word	0x4f54300a
 800913c:	4f54310a 	.word	0x4f54310a

08009140 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	333c      	adds	r3, #60	; 0x3c
 8009158:	3304      	adds	r3, #4
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	015a      	lsls	r2, r3, #5
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	4413      	add	r3, r2
 8009166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4a15      	ldr	r2, [pc, #84]	; (80091c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d90e      	bls.n	8009194 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800917c:	2b00      	cmp	r3, #0
 800917e:	d009      	beq.n	8009194 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	015a      	lsls	r2, r3, #5
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	4413      	add	r3, r2
 8009188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800918c:	461a      	mov	r2, r3
 800918e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009192:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f004 fc1b 	bl	800d9d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	4a0a      	ldr	r2, [pc, #40]	; (80091c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d90c      	bls.n	80091bc <PCD_EP_OutSetupPacket_int+0x7c>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d108      	bne.n	80091bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6818      	ldr	r0, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80091b4:	461a      	mov	r2, r3
 80091b6:	2101      	movs	r1, #1
 80091b8:	f002 fd78 	bl	800bcac <USB_EP0_OutStart>
  }

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3718      	adds	r7, #24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	4f54300a 	.word	0x4f54300a

080091cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	460b      	mov	r3, r1
 80091d6:	70fb      	strb	r3, [r7, #3]
 80091d8:	4613      	mov	r3, r2
 80091da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80091e4:	78fb      	ldrb	r3, [r7, #3]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d107      	bne.n	80091fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80091ea:	883b      	ldrh	r3, [r7, #0]
 80091ec:	0419      	lsls	r1, r3, #16
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	629a      	str	r2, [r3, #40]	; 0x28
 80091f8:	e028      	b.n	800924c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009200:	0c1b      	lsrs	r3, r3, #16
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	4413      	add	r3, r2
 8009206:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009208:	2300      	movs	r3, #0
 800920a:	73fb      	strb	r3, [r7, #15]
 800920c:	e00d      	b.n	800922a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	7bfb      	ldrb	r3, [r7, #15]
 8009214:	3340      	adds	r3, #64	; 0x40
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	0c1b      	lsrs	r3, r3, #16
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	4413      	add	r3, r2
 8009222:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	3301      	adds	r3, #1
 8009228:	73fb      	strb	r3, [r7, #15]
 800922a:	7bfa      	ldrb	r2, [r7, #15]
 800922c:	78fb      	ldrb	r3, [r7, #3]
 800922e:	3b01      	subs	r3, #1
 8009230:	429a      	cmp	r2, r3
 8009232:	d3ec      	bcc.n	800920e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009234:	883b      	ldrh	r3, [r7, #0]
 8009236:	0418      	lsls	r0, r3, #16
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6819      	ldr	r1, [r3, #0]
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	3b01      	subs	r3, #1
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	4302      	orrs	r2, r0
 8009244:	3340      	adds	r3, #64	; 0x40
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	440b      	add	r3, r1
 800924a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	bc80      	pop	{r7}
 8009256:	4770      	bx	lr

08009258 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	887a      	ldrh	r2, [r7, #2]
 800926a:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	bc80      	pop	{r7}
 8009276:	4770      	bx	lr

08009278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b08a      	sub	sp, #40	; 0x28
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e237      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b00      	cmp	r3, #0
 8009294:	d050      	beq.n	8009338 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009296:	4ba3      	ldr	r3, [pc, #652]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f003 030c 	and.w	r3, r3, #12
 800929e:	2b04      	cmp	r3, #4
 80092a0:	d00c      	beq.n	80092bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092a2:	4ba0      	ldr	r3, [pc, #640]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80092aa:	2b08      	cmp	r3, #8
 80092ac:	d112      	bne.n	80092d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092ae:	4b9d      	ldr	r3, [pc, #628]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092ba:	d10b      	bne.n	80092d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092bc:	4b99      	ldr	r3, [pc, #612]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d036      	beq.n	8009336 <HAL_RCC_OscConfig+0xbe>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d132      	bne.n	8009336 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e212      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	4b93      	ldr	r3, [pc, #588]	; (8009528 <HAL_RCC_OscConfig+0x2b0>)
 80092da:	b2d2      	uxtb	r2, r2
 80092dc:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d013      	beq.n	800930e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092e6:	f7fd f82d 	bl	8006344 <HAL_GetTick>
 80092ea:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092ec:	e008      	b.n	8009300 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092ee:	f7fd f829 	bl	8006344 <HAL_GetTick>
 80092f2:	4602      	mov	r2, r0
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	2b64      	cmp	r3, #100	; 0x64
 80092fa:	d901      	bls.n	8009300 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80092fc:	2303      	movs	r3, #3
 80092fe:	e1fc      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009300:	4b88      	ldr	r3, [pc, #544]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d0f0      	beq.n	80092ee <HAL_RCC_OscConfig+0x76>
 800930c:	e014      	b.n	8009338 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800930e:	f7fd f819 	bl	8006344 <HAL_GetTick>
 8009312:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009314:	e008      	b.n	8009328 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009316:	f7fd f815 	bl	8006344 <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	6a3b      	ldr	r3, [r7, #32]
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	2b64      	cmp	r3, #100	; 0x64
 8009322:	d901      	bls.n	8009328 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e1e8      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009328:	4b7e      	ldr	r3, [pc, #504]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1f0      	bne.n	8009316 <HAL_RCC_OscConfig+0x9e>
 8009334:	e000      	b.n	8009338 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009336:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0302 	and.w	r3, r3, #2
 8009340:	2b00      	cmp	r3, #0
 8009342:	d077      	beq.n	8009434 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009344:	4b77      	ldr	r3, [pc, #476]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	f003 030c 	and.w	r3, r3, #12
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00b      	beq.n	8009368 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009350:	4b74      	ldr	r3, [pc, #464]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009358:	2b08      	cmp	r3, #8
 800935a:	d126      	bne.n	80093aa <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800935c:	4b71      	ldr	r3, [pc, #452]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d120      	bne.n	80093aa <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009368:	4b6e      	ldr	r3, [pc, #440]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 0302 	and.w	r3, r3, #2
 8009370:	2b00      	cmp	r3, #0
 8009372:	d005      	beq.n	8009380 <HAL_RCC_OscConfig+0x108>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d001      	beq.n	8009380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e1bc      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009380:	4b68      	ldr	r3, [pc, #416]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	21f8      	movs	r1, #248	; 0xf8
 800938e:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009390:	69b9      	ldr	r1, [r7, #24]
 8009392:	fa91 f1a1 	rbit	r1, r1
 8009396:	6179      	str	r1, [r7, #20]
  return result;
 8009398:	6979      	ldr	r1, [r7, #20]
 800939a:	fab1 f181 	clz	r1, r1
 800939e:	b2c9      	uxtb	r1, r1
 80093a0:	408b      	lsls	r3, r1
 80093a2:	4960      	ldr	r1, [pc, #384]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80093a4:	4313      	orrs	r3, r2
 80093a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093a8:	e044      	b.n	8009434 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d02a      	beq.n	8009408 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093b2:	4b5e      	ldr	r3, [pc, #376]	; (800952c <HAL_RCC_OscConfig+0x2b4>)
 80093b4:	2201      	movs	r2, #1
 80093b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093b8:	f7fc ffc4 	bl	8006344 <HAL_GetTick>
 80093bc:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093be:	e008      	b.n	80093d2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093c0:	f7fc ffc0 	bl	8006344 <HAL_GetTick>
 80093c4:	4602      	mov	r2, r0
 80093c6:	6a3b      	ldr	r3, [r7, #32]
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d901      	bls.n	80093d2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e193      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093d2:	4b54      	ldr	r3, [pc, #336]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 0302 	and.w	r3, r3, #2
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0f0      	beq.n	80093c0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093de:	4b51      	ldr	r3, [pc, #324]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	21f8      	movs	r1, #248	; 0xf8
 80093ec:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ee:	6939      	ldr	r1, [r7, #16]
 80093f0:	fa91 f1a1 	rbit	r1, r1
 80093f4:	60f9      	str	r1, [r7, #12]
  return result;
 80093f6:	68f9      	ldr	r1, [r7, #12]
 80093f8:	fab1 f181 	clz	r1, r1
 80093fc:	b2c9      	uxtb	r1, r1
 80093fe:	408b      	lsls	r3, r1
 8009400:	4948      	ldr	r1, [pc, #288]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009402:	4313      	orrs	r3, r2
 8009404:	600b      	str	r3, [r1, #0]
 8009406:	e015      	b.n	8009434 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009408:	4b48      	ldr	r3, [pc, #288]	; (800952c <HAL_RCC_OscConfig+0x2b4>)
 800940a:	2200      	movs	r2, #0
 800940c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800940e:	f7fc ff99 	bl	8006344 <HAL_GetTick>
 8009412:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009414:	e008      	b.n	8009428 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009416:	f7fc ff95 	bl	8006344 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	6a3b      	ldr	r3, [r7, #32]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	2b02      	cmp	r3, #2
 8009422:	d901      	bls.n	8009428 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e168      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009428:	4b3e      	ldr	r3, [pc, #248]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1f0      	bne.n	8009416 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0308 	and.w	r3, r3, #8
 800943c:	2b00      	cmp	r3, #0
 800943e:	d030      	beq.n	80094a2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d016      	beq.n	8009476 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009448:	4b39      	ldr	r3, [pc, #228]	; (8009530 <HAL_RCC_OscConfig+0x2b8>)
 800944a:	2201      	movs	r2, #1
 800944c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800944e:	f7fc ff79 	bl	8006344 <HAL_GetTick>
 8009452:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009454:	e008      	b.n	8009468 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009456:	f7fc ff75 	bl	8006344 <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	6a3b      	ldr	r3, [r7, #32]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	2b02      	cmp	r3, #2
 8009462:	d901      	bls.n	8009468 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8009464:	2303      	movs	r3, #3
 8009466:	e148      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009468:	4b2e      	ldr	r3, [pc, #184]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 800946a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800946c:	f003 0302 	and.w	r3, r3, #2
 8009470:	2b00      	cmp	r3, #0
 8009472:	d0f0      	beq.n	8009456 <HAL_RCC_OscConfig+0x1de>
 8009474:	e015      	b.n	80094a2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009476:	4b2e      	ldr	r3, [pc, #184]	; (8009530 <HAL_RCC_OscConfig+0x2b8>)
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800947c:	f7fc ff62 	bl	8006344 <HAL_GetTick>
 8009480:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009482:	e008      	b.n	8009496 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009484:	f7fc ff5e 	bl	8006344 <HAL_GetTick>
 8009488:	4602      	mov	r2, r0
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	2b02      	cmp	r3, #2
 8009490:	d901      	bls.n	8009496 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	e131      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009496:	4b23      	ldr	r3, [pc, #140]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 8009498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800949a:	f003 0302 	and.w	r3, r3, #2
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1f0      	bne.n	8009484 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0304 	and.w	r3, r3, #4
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f000 8088 	beq.w	80095c0 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094b0:	2300      	movs	r3, #0
 80094b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094b6:	4b1b      	ldr	r3, [pc, #108]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d110      	bne.n	80094e4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094c2:	2300      	movs	r3, #0
 80094c4:	60bb      	str	r3, [r7, #8]
 80094c6:	4b17      	ldr	r3, [pc, #92]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	4a16      	ldr	r2, [pc, #88]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80094cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094d0:	6413      	str	r3, [r2, #64]	; 0x40
 80094d2:	4b14      	ldr	r3, [pc, #80]	; (8009524 <HAL_RCC_OscConfig+0x2ac>)
 80094d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094da:	60bb      	str	r3, [r7, #8]
 80094dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094de:	2301      	movs	r3, #1
 80094e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80094e4:	4b13      	ldr	r3, [pc, #76]	; (8009534 <HAL_RCC_OscConfig+0x2bc>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a12      	ldr	r2, [pc, #72]	; (8009534 <HAL_RCC_OscConfig+0x2bc>)
 80094ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094ee:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094f0:	4b10      	ldr	r3, [pc, #64]	; (8009534 <HAL_RCC_OscConfig+0x2bc>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d123      	bne.n	8009544 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80094fc:	4b0d      	ldr	r3, [pc, #52]	; (8009534 <HAL_RCC_OscConfig+0x2bc>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a0c      	ldr	r2, [pc, #48]	; (8009534 <HAL_RCC_OscConfig+0x2bc>)
 8009502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009506:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009508:	f7fc ff1c 	bl	8006344 <HAL_GetTick>
 800950c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800950e:	e013      	b.n	8009538 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009510:	f7fc ff18 	bl	8006344 <HAL_GetTick>
 8009514:	4602      	mov	r2, r0
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	2b02      	cmp	r3, #2
 800951c:	d90c      	bls.n	8009538 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800951e:	2303      	movs	r3, #3
 8009520:	e0eb      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
 8009522:	bf00      	nop
 8009524:	40023800 	.word	0x40023800
 8009528:	40023802 	.word	0x40023802
 800952c:	42470000 	.word	0x42470000
 8009530:	42470e80 	.word	0x42470e80
 8009534:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009538:	4b72      	ldr	r3, [pc, #456]	; (8009704 <HAL_RCC_OscConfig+0x48c>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009540:	2b00      	cmp	r3, #0
 8009542:	d0e5      	beq.n	8009510 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689a      	ldr	r2, [r3, #8]
 8009548:	4b6f      	ldr	r3, [pc, #444]	; (8009708 <HAL_RCC_OscConfig+0x490>)
 800954a:	b2d2      	uxtb	r2, r2
 800954c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d015      	beq.n	8009582 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009556:	f7fc fef5 	bl	8006344 <HAL_GetTick>
 800955a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800955c:	e00a      	b.n	8009574 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800955e:	f7fc fef1 	bl	8006344 <HAL_GetTick>
 8009562:	4602      	mov	r2, r0
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	f241 3288 	movw	r2, #5000	; 0x1388
 800956c:	4293      	cmp	r3, r2
 800956e:	d901      	bls.n	8009574 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009570:	2303      	movs	r3, #3
 8009572:	e0c2      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009574:	4b65      	ldr	r3, [pc, #404]	; (800970c <HAL_RCC_OscConfig+0x494>)
 8009576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009578:	f003 0302 	and.w	r3, r3, #2
 800957c:	2b00      	cmp	r3, #0
 800957e:	d0ee      	beq.n	800955e <HAL_RCC_OscConfig+0x2e6>
 8009580:	e014      	b.n	80095ac <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009582:	f7fc fedf 	bl	8006344 <HAL_GetTick>
 8009586:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009588:	e00a      	b.n	80095a0 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800958a:	f7fc fedb 	bl	8006344 <HAL_GetTick>
 800958e:	4602      	mov	r2, r0
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	f241 3288 	movw	r2, #5000	; 0x1388
 8009598:	4293      	cmp	r3, r2
 800959a:	d901      	bls.n	80095a0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e0ac      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095a0:	4b5a      	ldr	r3, [pc, #360]	; (800970c <HAL_RCC_OscConfig+0x494>)
 80095a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095a4:	f003 0302 	and.w	r3, r3, #2
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1ee      	bne.n	800958a <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80095ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d105      	bne.n	80095c0 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095b4:	4b55      	ldr	r3, [pc, #340]	; (800970c <HAL_RCC_OscConfig+0x494>)
 80095b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b8:	4a54      	ldr	r2, [pc, #336]	; (800970c <HAL_RCC_OscConfig+0x494>)
 80095ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 8097 	beq.w	80096f8 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80095ca:	4b50      	ldr	r3, [pc, #320]	; (800970c <HAL_RCC_OscConfig+0x494>)
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	f003 030c 	and.w	r3, r3, #12
 80095d2:	2b08      	cmp	r3, #8
 80095d4:	d061      	beq.n	800969a <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d146      	bne.n	800966c <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095de:	4b4c      	ldr	r3, [pc, #304]	; (8009710 <HAL_RCC_OscConfig+0x498>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095e4:	f7fc feae 	bl	8006344 <HAL_GetTick>
 80095e8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095ea:	e008      	b.n	80095fe <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095ec:	f7fc feaa 	bl	8006344 <HAL_GetTick>
 80095f0:	4602      	mov	r2, r0
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	2b64      	cmp	r3, #100	; 0x64
 80095f8:	d901      	bls.n	80095fe <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e07d      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095fe:	4b43      	ldr	r3, [pc, #268]	; (800970c <HAL_RCC_OscConfig+0x494>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1f0      	bne.n	80095ec <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800960a:	4b40      	ldr	r3, [pc, #256]	; (800970c <HAL_RCC_OscConfig+0x494>)
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	4b41      	ldr	r3, [pc, #260]	; (8009714 <HAL_RCC_OscConfig+0x49c>)
 8009610:	4013      	ands	r3, r2
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	69d1      	ldr	r1, [r2, #28]
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	6a12      	ldr	r2, [r2, #32]
 800961a:	4311      	orrs	r1, r2
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009620:	0192      	lsls	r2, r2, #6
 8009622:	4311      	orrs	r1, r2
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009628:	0612      	lsls	r2, r2, #24
 800962a:	4311      	orrs	r1, r2
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009630:	0852      	lsrs	r2, r2, #1
 8009632:	3a01      	subs	r2, #1
 8009634:	0412      	lsls	r2, r2, #16
 8009636:	430a      	orrs	r2, r1
 8009638:	4934      	ldr	r1, [pc, #208]	; (800970c <HAL_RCC_OscConfig+0x494>)
 800963a:	4313      	orrs	r3, r2
 800963c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800963e:	4b34      	ldr	r3, [pc, #208]	; (8009710 <HAL_RCC_OscConfig+0x498>)
 8009640:	2201      	movs	r2, #1
 8009642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009644:	f7fc fe7e 	bl	8006344 <HAL_GetTick>
 8009648:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800964a:	e008      	b.n	800965e <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800964c:	f7fc fe7a 	bl	8006344 <HAL_GetTick>
 8009650:	4602      	mov	r2, r0
 8009652:	6a3b      	ldr	r3, [r7, #32]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	2b64      	cmp	r3, #100	; 0x64
 8009658:	d901      	bls.n	800965e <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 800965a:	2303      	movs	r3, #3
 800965c:	e04d      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800965e:	4b2b      	ldr	r3, [pc, #172]	; (800970c <HAL_RCC_OscConfig+0x494>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d0f0      	beq.n	800964c <HAL_RCC_OscConfig+0x3d4>
 800966a:	e045      	b.n	80096f8 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800966c:	4b28      	ldr	r3, [pc, #160]	; (8009710 <HAL_RCC_OscConfig+0x498>)
 800966e:	2200      	movs	r2, #0
 8009670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009672:	f7fc fe67 	bl	8006344 <HAL_GetTick>
 8009676:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009678:	e008      	b.n	800968c <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800967a:	f7fc fe63 	bl	8006344 <HAL_GetTick>
 800967e:	4602      	mov	r2, r0
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	2b64      	cmp	r3, #100	; 0x64
 8009686:	d901      	bls.n	800968c <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8009688:	2303      	movs	r3, #3
 800968a:	e036      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800968c:	4b1f      	ldr	r3, [pc, #124]	; (800970c <HAL_RCC_OscConfig+0x494>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1f0      	bne.n	800967a <HAL_RCC_OscConfig+0x402>
 8009698:	e02e      	b.n	80096f8 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d101      	bne.n	80096a6 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e029      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80096a6:	4b19      	ldr	r3, [pc, #100]	; (800970c <HAL_RCC_OscConfig+0x494>)
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d11c      	bne.n	80096f4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d115      	bne.n	80096f4 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	099b      	lsrs	r3, r3, #6
 80096cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d10d      	bne.n	80096f4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d106      	bne.n	80096f4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d001      	beq.n	80096f8 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e000      	b.n	80096fa <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3728      	adds	r7, #40	; 0x28
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	40007000 	.word	0x40007000
 8009708:	40023870 	.word	0x40023870
 800970c:	40023800 	.word	0x40023800
 8009710:	42470060 	.word	0x42470060
 8009714:	f0bc8000 	.word	0xf0bc8000

08009718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d101      	bne.n	800972c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e0d2      	b.n	80098d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800972c:	4b6b      	ldr	r3, [pc, #428]	; (80098dc <HAL_RCC_ClockConfig+0x1c4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 030f 	and.w	r3, r3, #15
 8009734:	683a      	ldr	r2, [r7, #0]
 8009736:	429a      	cmp	r2, r3
 8009738:	d90c      	bls.n	8009754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800973a:	4b68      	ldr	r3, [pc, #416]	; (80098dc <HAL_RCC_ClockConfig+0x1c4>)
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	b2d2      	uxtb	r2, r2
 8009740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009742:	4b66      	ldr	r3, [pc, #408]	; (80098dc <HAL_RCC_ClockConfig+0x1c4>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 030f 	and.w	r3, r3, #15
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	429a      	cmp	r2, r3
 800974e:	d001      	beq.n	8009754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e0be      	b.n	80098d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0302 	and.w	r3, r3, #2
 800975c:	2b00      	cmp	r3, #0
 800975e:	d020      	beq.n	80097a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	2b00      	cmp	r3, #0
 800976a:	d005      	beq.n	8009778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800976c:	4b5c      	ldr	r3, [pc, #368]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	4a5b      	ldr	r2, [pc, #364]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 8009772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0308 	and.w	r3, r3, #8
 8009780:	2b00      	cmp	r3, #0
 8009782:	d005      	beq.n	8009790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8009784:	4b56      	ldr	r3, [pc, #344]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	4a55      	ldr	r2, [pc, #340]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 800978a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800978e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009790:	4b53      	ldr	r3, [pc, #332]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	4950      	ldr	r1, [pc, #320]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0301 	and.w	r3, r3, #1
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d040      	beq.n	8009830 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d107      	bne.n	80097c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097b6:	4b4a      	ldr	r3, [pc, #296]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d115      	bne.n	80097ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e085      	b.n	80098d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d107      	bne.n	80097de <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097ce:	4b44      	ldr	r3, [pc, #272]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d109      	bne.n	80097ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e079      	b.n	80098d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097de:	4b40      	ldr	r3, [pc, #256]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 0302 	and.w	r3, r3, #2
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e071      	b.n	80098d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80097ee:	4b3c      	ldr	r3, [pc, #240]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	f023 0203 	bic.w	r2, r3, #3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	4939      	ldr	r1, [pc, #228]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 80097fc:	4313      	orrs	r3, r2
 80097fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009800:	f7fc fda0 	bl	8006344 <HAL_GetTick>
 8009804:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009806:	e00a      	b.n	800981e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009808:	f7fc fd9c 	bl	8006344 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	f241 3288 	movw	r2, #5000	; 0x1388
 8009816:	4293      	cmp	r3, r2
 8009818:	d901      	bls.n	800981e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800981a:	2303      	movs	r3, #3
 800981c:	e059      	b.n	80098d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800981e:	4b30      	ldr	r3, [pc, #192]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	f003 020c 	and.w	r2, r3, #12
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	429a      	cmp	r2, r3
 800982e:	d1eb      	bne.n	8009808 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009830:	4b2a      	ldr	r3, [pc, #168]	; (80098dc <HAL_RCC_ClockConfig+0x1c4>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 030f 	and.w	r3, r3, #15
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	429a      	cmp	r2, r3
 800983c:	d20c      	bcs.n	8009858 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800983e:	4b27      	ldr	r3, [pc, #156]	; (80098dc <HAL_RCC_ClockConfig+0x1c4>)
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	b2d2      	uxtb	r2, r2
 8009844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009846:	4b25      	ldr	r3, [pc, #148]	; (80098dc <HAL_RCC_ClockConfig+0x1c4>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 030f 	and.w	r3, r3, #15
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	429a      	cmp	r2, r3
 8009852:	d001      	beq.n	8009858 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	e03c      	b.n	80098d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 0304 	and.w	r3, r3, #4
 8009860:	2b00      	cmp	r3, #0
 8009862:	d008      	beq.n	8009876 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009864:	4b1e      	ldr	r3, [pc, #120]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	491b      	ldr	r1, [pc, #108]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 8009872:	4313      	orrs	r3, r2
 8009874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 0308 	and.w	r3, r3, #8
 800987e:	2b00      	cmp	r3, #0
 8009880:	d009      	beq.n	8009896 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009882:	4b17      	ldr	r3, [pc, #92]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	00db      	lsls	r3, r3, #3
 8009890:	4913      	ldr	r1, [pc, #76]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 8009892:	4313      	orrs	r3, r2
 8009894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8009896:	f000 f837 	bl	8009908 <HAL_RCC_GetSysClockFreq>
 800989a:	4601      	mov	r1, r0
 800989c:	4b10      	ldr	r3, [pc, #64]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098a4:	22f0      	movs	r2, #240	; 0xf0
 80098a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	fa92 f2a2 	rbit	r2, r2
 80098ae:	60fa      	str	r2, [r7, #12]
  return result;
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	fab2 f282 	clz	r2, r2
 80098b6:	b2d2      	uxtb	r2, r2
 80098b8:	40d3      	lsrs	r3, r2
 80098ba:	4a0a      	ldr	r2, [pc, #40]	; (80098e4 <HAL_RCC_ClockConfig+0x1cc>)
 80098bc:	5cd3      	ldrb	r3, [r2, r3]
 80098be:	fa21 f303 	lsr.w	r3, r1, r3
 80098c2:	4a09      	ldr	r2, [pc, #36]	; (80098e8 <HAL_RCC_ClockConfig+0x1d0>)
 80098c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80098c6:	4b09      	ldr	r3, [pc, #36]	; (80098ec <HAL_RCC_ClockConfig+0x1d4>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fc fcf8 	bl	80062c0 <HAL_InitTick>

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	40023c00 	.word	0x40023c00
 80098e0:	40023800 	.word	0x40023800
 80098e4:	080138b0 	.word	0x080138b0
 80098e8:	20000040 	.word	0x20000040
 80098ec:	20000044 	.word	0x20000044

080098f0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80098f0:	b480      	push	{r7}
 80098f2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80098f4:	4b03      	ldr	r3, [pc, #12]	; (8009904 <HAL_RCC_EnableCSS+0x14>)
 80098f6:	2201      	movs	r2, #1
 80098f8:	601a      	str	r2, [r3, #0]
}
 80098fa:	bf00      	nop
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bc80      	pop	{r7}
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	4247004c 	.word	0x4247004c

08009908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009908:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800990c:	b084      	sub	sp, #16
 800990e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009910:	2300      	movs	r3, #0
 8009912:	607b      	str	r3, [r7, #4]
 8009914:	2300      	movs	r3, #0
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	2300      	movs	r3, #0
 800991a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800991c:	2300      	movs	r3, #0
 800991e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009920:	4b67      	ldr	r3, [pc, #412]	; (8009ac0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f003 030c 	and.w	r3, r3, #12
 8009928:	2b08      	cmp	r3, #8
 800992a:	d00d      	beq.n	8009948 <HAL_RCC_GetSysClockFreq+0x40>
 800992c:	2b08      	cmp	r3, #8
 800992e:	f200 80bd 	bhi.w	8009aac <HAL_RCC_GetSysClockFreq+0x1a4>
 8009932:	2b00      	cmp	r3, #0
 8009934:	d002      	beq.n	800993c <HAL_RCC_GetSysClockFreq+0x34>
 8009936:	2b04      	cmp	r3, #4
 8009938:	d003      	beq.n	8009942 <HAL_RCC_GetSysClockFreq+0x3a>
 800993a:	e0b7      	b.n	8009aac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800993c:	4b61      	ldr	r3, [pc, #388]	; (8009ac4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800993e:	60bb      	str	r3, [r7, #8]
       break;
 8009940:	e0b7      	b.n	8009ab2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009942:	4b60      	ldr	r3, [pc, #384]	; (8009ac4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009944:	60bb      	str	r3, [r7, #8]
      break;
 8009946:	e0b4      	b.n	8009ab2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009948:	4b5d      	ldr	r3, [pc, #372]	; (8009ac0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009950:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009952:	4b5b      	ldr	r3, [pc, #364]	; (8009ac0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d04d      	beq.n	80099fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800995e:	4b58      	ldr	r3, [pc, #352]	; (8009ac0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	099b      	lsrs	r3, r3, #6
 8009964:	461a      	mov	r2, r3
 8009966:	f04f 0300 	mov.w	r3, #0
 800996a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800996e:	f04f 0100 	mov.w	r1, #0
 8009972:	ea02 0800 	and.w	r8, r2, r0
 8009976:	ea03 0901 	and.w	r9, r3, r1
 800997a:	4640      	mov	r0, r8
 800997c:	4649      	mov	r1, r9
 800997e:	f04f 0200 	mov.w	r2, #0
 8009982:	f04f 0300 	mov.w	r3, #0
 8009986:	014b      	lsls	r3, r1, #5
 8009988:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800998c:	0142      	lsls	r2, r0, #5
 800998e:	4610      	mov	r0, r2
 8009990:	4619      	mov	r1, r3
 8009992:	ebb0 0008 	subs.w	r0, r0, r8
 8009996:	eb61 0109 	sbc.w	r1, r1, r9
 800999a:	f04f 0200 	mov.w	r2, #0
 800999e:	f04f 0300 	mov.w	r3, #0
 80099a2:	018b      	lsls	r3, r1, #6
 80099a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80099a8:	0182      	lsls	r2, r0, #6
 80099aa:	1a12      	subs	r2, r2, r0
 80099ac:	eb63 0301 	sbc.w	r3, r3, r1
 80099b0:	f04f 0000 	mov.w	r0, #0
 80099b4:	f04f 0100 	mov.w	r1, #0
 80099b8:	00d9      	lsls	r1, r3, #3
 80099ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80099be:	00d0      	lsls	r0, r2, #3
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	eb12 0208 	adds.w	r2, r2, r8
 80099c8:	eb43 0309 	adc.w	r3, r3, r9
 80099cc:	f04f 0000 	mov.w	r0, #0
 80099d0:	f04f 0100 	mov.w	r1, #0
 80099d4:	0299      	lsls	r1, r3, #10
 80099d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80099da:	0290      	lsls	r0, r2, #10
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	4610      	mov	r0, r2
 80099e2:	4619      	mov	r1, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	461a      	mov	r2, r3
 80099e8:	f04f 0300 	mov.w	r3, #0
 80099ec:	f7f7 fc28 	bl	8001240 <__aeabi_uldivmod>
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	4613      	mov	r3, r2
 80099f6:	60fb      	str	r3, [r7, #12]
 80099f8:	e04a      	b.n	8009a90 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80099fa:	4b31      	ldr	r3, [pc, #196]	; (8009ac0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	099b      	lsrs	r3, r3, #6
 8009a00:	461a      	mov	r2, r3
 8009a02:	f04f 0300 	mov.w	r3, #0
 8009a06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009a0a:	f04f 0100 	mov.w	r1, #0
 8009a0e:	ea02 0400 	and.w	r4, r2, r0
 8009a12:	ea03 0501 	and.w	r5, r3, r1
 8009a16:	4620      	mov	r0, r4
 8009a18:	4629      	mov	r1, r5
 8009a1a:	f04f 0200 	mov.w	r2, #0
 8009a1e:	f04f 0300 	mov.w	r3, #0
 8009a22:	014b      	lsls	r3, r1, #5
 8009a24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009a28:	0142      	lsls	r2, r0, #5
 8009a2a:	4610      	mov	r0, r2
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	1b00      	subs	r0, r0, r4
 8009a30:	eb61 0105 	sbc.w	r1, r1, r5
 8009a34:	f04f 0200 	mov.w	r2, #0
 8009a38:	f04f 0300 	mov.w	r3, #0
 8009a3c:	018b      	lsls	r3, r1, #6
 8009a3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009a42:	0182      	lsls	r2, r0, #6
 8009a44:	1a12      	subs	r2, r2, r0
 8009a46:	eb63 0301 	sbc.w	r3, r3, r1
 8009a4a:	f04f 0000 	mov.w	r0, #0
 8009a4e:	f04f 0100 	mov.w	r1, #0
 8009a52:	00d9      	lsls	r1, r3, #3
 8009a54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009a58:	00d0      	lsls	r0, r2, #3
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	1912      	adds	r2, r2, r4
 8009a60:	eb45 0303 	adc.w	r3, r5, r3
 8009a64:	f04f 0000 	mov.w	r0, #0
 8009a68:	f04f 0100 	mov.w	r1, #0
 8009a6c:	0299      	lsls	r1, r3, #10
 8009a6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009a72:	0290      	lsls	r0, r2, #10
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	4610      	mov	r0, r2
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f04f 0300 	mov.w	r3, #0
 8009a84:	f7f7 fbdc 	bl	8001240 <__aeabi_uldivmod>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a90:	4b0b      	ldr	r3, [pc, #44]	; (8009ac0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	0c1b      	lsrs	r3, r3, #16
 8009a96:	f003 0303 	and.w	r3, r3, #3
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	005b      	lsls	r3, r3, #1
 8009a9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aa8:	60bb      	str	r3, [r7, #8]
      break;
 8009aaa:	e002      	b.n	8009ab2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009aac:	4b05      	ldr	r3, [pc, #20]	; (8009ac4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009aae:	60bb      	str	r3, [r7, #8]
      break;
 8009ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009ab2:	68bb      	ldr	r3, [r7, #8]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009abe:	bf00      	nop
 8009ac0:	40023800 	.word	0x40023800
 8009ac4:	00f42400 	.word	0x00f42400

08009ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009acc:	4b02      	ldr	r3, [pc, #8]	; (8009ad8 <HAL_RCC_GetHCLKFreq+0x10>)
 8009ace:	681b      	ldr	r3, [r3, #0]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bc80      	pop	{r7}
 8009ad6:	4770      	bx	lr
 8009ad8:	20000040 	.word	0x20000040

08009adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8009ae2:	f7ff fff1 	bl	8009ac8 <HAL_RCC_GetHCLKFreq>
 8009ae6:	4601      	mov	r1, r0
 8009ae8:	4b0b      	ldr	r3, [pc, #44]	; (8009b18 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009af0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8009af4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	fa92 f2a2 	rbit	r2, r2
 8009afc:	603a      	str	r2, [r7, #0]
  return result;
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	fab2 f282 	clz	r2, r2
 8009b04:	b2d2      	uxtb	r2, r2
 8009b06:	40d3      	lsrs	r3, r2
 8009b08:	4a04      	ldr	r2, [pc, #16]	; (8009b1c <HAL_RCC_GetPCLK1Freq+0x40>)
 8009b0a:	5cd3      	ldrb	r3, [r2, r3]
 8009b0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	40023800 	.word	0x40023800
 8009b1c:	080138c0 	.word	0x080138c0

08009b20 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009b24:	4b06      	ldr	r3, [pc, #24]	; (8009b40 <HAL_RCC_NMI_IRQHandler+0x20>)
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b2c:	2b80      	cmp	r3, #128	; 0x80
 8009b2e:	d104      	bne.n	8009b3a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009b30:	f000 f80a 	bl	8009b48 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009b34:	4b03      	ldr	r3, [pc, #12]	; (8009b44 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009b36:	2280      	movs	r2, #128	; 0x80
 8009b38:	701a      	strb	r2, [r3, #0]
  }
}
 8009b3a:	bf00      	nop
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	40023800 	.word	0x40023800
 8009b44:	4002380e 	.word	0x4002380e

08009b48 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bc80      	pop	{r7}
 8009b52:	4770      	bx	lr

08009b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d101      	bne.n	8009b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e041      	b.n	8009bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d106      	bne.n	8009b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f7fc f9d2 	bl	8005f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2202      	movs	r2, #2
 8009b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	3304      	adds	r3, #4
 8009b90:	4619      	mov	r1, r3
 8009b92:	4610      	mov	r0, r2
 8009b94:	f000 fad8 	bl	800a148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d001      	beq.n	8009c0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e046      	b.n	8009c9a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a22      	ldr	r2, [pc, #136]	; (8009ca4 <HAL_TIM_Base_Start+0xb0>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d022      	beq.n	8009c64 <HAL_TIM_Base_Start+0x70>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c26:	d01d      	beq.n	8009c64 <HAL_TIM_Base_Start+0x70>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a1e      	ldr	r2, [pc, #120]	; (8009ca8 <HAL_TIM_Base_Start+0xb4>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d018      	beq.n	8009c64 <HAL_TIM_Base_Start+0x70>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a1d      	ldr	r2, [pc, #116]	; (8009cac <HAL_TIM_Base_Start+0xb8>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d013      	beq.n	8009c64 <HAL_TIM_Base_Start+0x70>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a1b      	ldr	r2, [pc, #108]	; (8009cb0 <HAL_TIM_Base_Start+0xbc>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d00e      	beq.n	8009c64 <HAL_TIM_Base_Start+0x70>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a1a      	ldr	r2, [pc, #104]	; (8009cb4 <HAL_TIM_Base_Start+0xc0>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d009      	beq.n	8009c64 <HAL_TIM_Base_Start+0x70>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a18      	ldr	r2, [pc, #96]	; (8009cb8 <HAL_TIM_Base_Start+0xc4>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d004      	beq.n	8009c64 <HAL_TIM_Base_Start+0x70>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a17      	ldr	r2, [pc, #92]	; (8009cbc <HAL_TIM_Base_Start+0xc8>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d111      	bne.n	8009c88 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	f003 0307 	and.w	r3, r3, #7
 8009c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2b06      	cmp	r3, #6
 8009c74:	d010      	beq.n	8009c98 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f042 0201 	orr.w	r2, r2, #1
 8009c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c86:	e007      	b.n	8009c98 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f042 0201 	orr.w	r2, r2, #1
 8009c96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bc80      	pop	{r7}
 8009ca2:	4770      	bx	lr
 8009ca4:	40010000 	.word	0x40010000
 8009ca8:	40000400 	.word	0x40000400
 8009cac:	40000800 	.word	0x40000800
 8009cb0:	40000c00 	.word	0x40000c00
 8009cb4:	40010400 	.word	0x40010400
 8009cb8:	40014000 	.word	0x40014000
 8009cbc:	40001800 	.word	0x40001800

08009cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d001      	beq.n	8009cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e04e      	b.n	8009d76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f042 0201 	orr.w	r2, r2, #1
 8009cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a22      	ldr	r2, [pc, #136]	; (8009d80 <HAL_TIM_Base_Start_IT+0xc0>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d022      	beq.n	8009d40 <HAL_TIM_Base_Start_IT+0x80>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d02:	d01d      	beq.n	8009d40 <HAL_TIM_Base_Start_IT+0x80>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a1e      	ldr	r2, [pc, #120]	; (8009d84 <HAL_TIM_Base_Start_IT+0xc4>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d018      	beq.n	8009d40 <HAL_TIM_Base_Start_IT+0x80>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a1d      	ldr	r2, [pc, #116]	; (8009d88 <HAL_TIM_Base_Start_IT+0xc8>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d013      	beq.n	8009d40 <HAL_TIM_Base_Start_IT+0x80>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a1b      	ldr	r2, [pc, #108]	; (8009d8c <HAL_TIM_Base_Start_IT+0xcc>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d00e      	beq.n	8009d40 <HAL_TIM_Base_Start_IT+0x80>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a1a      	ldr	r2, [pc, #104]	; (8009d90 <HAL_TIM_Base_Start_IT+0xd0>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d009      	beq.n	8009d40 <HAL_TIM_Base_Start_IT+0x80>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a18      	ldr	r2, [pc, #96]	; (8009d94 <HAL_TIM_Base_Start_IT+0xd4>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d004      	beq.n	8009d40 <HAL_TIM_Base_Start_IT+0x80>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a17      	ldr	r2, [pc, #92]	; (8009d98 <HAL_TIM_Base_Start_IT+0xd8>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d111      	bne.n	8009d64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	f003 0307 	and.w	r3, r3, #7
 8009d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2b06      	cmp	r3, #6
 8009d50:	d010      	beq.n	8009d74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f042 0201 	orr.w	r2, r2, #1
 8009d60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d62:	e007      	b.n	8009d74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f042 0201 	orr.w	r2, r2, #1
 8009d72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3714      	adds	r7, #20
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bc80      	pop	{r7}
 8009d7e:	4770      	bx	lr
 8009d80:	40010000 	.word	0x40010000
 8009d84:	40000400 	.word	0x40000400
 8009d88:	40000800 	.word	0x40000800
 8009d8c:	40000c00 	.word	0x40000c00
 8009d90:	40010400 	.word	0x40010400
 8009d94:	40014000 	.word	0x40014000
 8009d98:	40001800 	.word	0x40001800

08009d9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d101      	bne.n	8009dae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e041      	b.n	8009e32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d106      	bne.n	8009dc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7fc f878 	bl	8005eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	4619      	mov	r1, r3
 8009dda:	4610      	mov	r0, r2
 8009ddc:	f000 f9b4 	bl	800a148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
	...

08009e3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d109      	bne.n	8009e60 <HAL_TIM_PWM_Start+0x24>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	bf14      	ite	ne
 8009e58:	2301      	movne	r3, #1
 8009e5a:	2300      	moveq	r3, #0
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	e022      	b.n	8009ea6 <HAL_TIM_PWM_Start+0x6a>
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	2b04      	cmp	r3, #4
 8009e64:	d109      	bne.n	8009e7a <HAL_TIM_PWM_Start+0x3e>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	bf14      	ite	ne
 8009e72:	2301      	movne	r3, #1
 8009e74:	2300      	moveq	r3, #0
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	e015      	b.n	8009ea6 <HAL_TIM_PWM_Start+0x6a>
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	2b08      	cmp	r3, #8
 8009e7e:	d109      	bne.n	8009e94 <HAL_TIM_PWM_Start+0x58>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	bf14      	ite	ne
 8009e8c:	2301      	movne	r3, #1
 8009e8e:	2300      	moveq	r3, #0
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	e008      	b.n	8009ea6 <HAL_TIM_PWM_Start+0x6a>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	bf14      	ite	ne
 8009ea0:	2301      	movne	r3, #1
 8009ea2:	2300      	moveq	r3, #0
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e07c      	b.n	8009fa8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d104      	bne.n	8009ebe <HAL_TIM_PWM_Start+0x82>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ebc:	e013      	b.n	8009ee6 <HAL_TIM_PWM_Start+0xaa>
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2b04      	cmp	r3, #4
 8009ec2:	d104      	bne.n	8009ece <HAL_TIM_PWM_Start+0x92>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ecc:	e00b      	b.n	8009ee6 <HAL_TIM_PWM_Start+0xaa>
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b08      	cmp	r3, #8
 8009ed2:	d104      	bne.n	8009ede <HAL_TIM_PWM_Start+0xa2>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009edc:	e003      	b.n	8009ee6 <HAL_TIM_PWM_Start+0xaa>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2201      	movs	r2, #1
 8009eec:	6839      	ldr	r1, [r7, #0]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f000 fb74 	bl	800a5dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a2d      	ldr	r2, [pc, #180]	; (8009fb0 <HAL_TIM_PWM_Start+0x174>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d004      	beq.n	8009f08 <HAL_TIM_PWM_Start+0xcc>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a2c      	ldr	r2, [pc, #176]	; (8009fb4 <HAL_TIM_PWM_Start+0x178>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d101      	bne.n	8009f0c <HAL_TIM_PWM_Start+0xd0>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e000      	b.n	8009f0e <HAL_TIM_PWM_Start+0xd2>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d007      	beq.n	8009f22 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a22      	ldr	r2, [pc, #136]	; (8009fb0 <HAL_TIM_PWM_Start+0x174>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d022      	beq.n	8009f72 <HAL_TIM_PWM_Start+0x136>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f34:	d01d      	beq.n	8009f72 <HAL_TIM_PWM_Start+0x136>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a1f      	ldr	r2, [pc, #124]	; (8009fb8 <HAL_TIM_PWM_Start+0x17c>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d018      	beq.n	8009f72 <HAL_TIM_PWM_Start+0x136>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a1d      	ldr	r2, [pc, #116]	; (8009fbc <HAL_TIM_PWM_Start+0x180>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d013      	beq.n	8009f72 <HAL_TIM_PWM_Start+0x136>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a1c      	ldr	r2, [pc, #112]	; (8009fc0 <HAL_TIM_PWM_Start+0x184>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d00e      	beq.n	8009f72 <HAL_TIM_PWM_Start+0x136>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a16      	ldr	r2, [pc, #88]	; (8009fb4 <HAL_TIM_PWM_Start+0x178>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d009      	beq.n	8009f72 <HAL_TIM_PWM_Start+0x136>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a18      	ldr	r2, [pc, #96]	; (8009fc4 <HAL_TIM_PWM_Start+0x188>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d004      	beq.n	8009f72 <HAL_TIM_PWM_Start+0x136>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a16      	ldr	r2, [pc, #88]	; (8009fc8 <HAL_TIM_PWM_Start+0x18c>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d111      	bne.n	8009f96 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	f003 0307 	and.w	r3, r3, #7
 8009f7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2b06      	cmp	r3, #6
 8009f82:	d010      	beq.n	8009fa6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f042 0201 	orr.w	r2, r2, #1
 8009f92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f94:	e007      	b.n	8009fa6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f042 0201 	orr.w	r2, r2, #1
 8009fa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	40010000 	.word	0x40010000
 8009fb4:	40010400 	.word	0x40010400
 8009fb8:	40000400 	.word	0x40000400
 8009fbc:	40000800 	.word	0x40000800
 8009fc0:	40000c00 	.word	0x40000c00
 8009fc4:	40014000 	.word	0x40014000
 8009fc8:	40001800 	.word	0x40001800

08009fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d101      	bne.n	8009fe6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	e0ac      	b.n	800a140 <HAL_TIM_PWM_ConfigChannel+0x174>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b0c      	cmp	r3, #12
 8009ff2:	f200 809f 	bhi.w	800a134 <HAL_TIM_PWM_ConfigChannel+0x168>
 8009ff6:	a201      	add	r2, pc, #4	; (adr r2, 8009ffc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffc:	0800a031 	.word	0x0800a031
 800a000:	0800a135 	.word	0x0800a135
 800a004:	0800a135 	.word	0x0800a135
 800a008:	0800a135 	.word	0x0800a135
 800a00c:	0800a071 	.word	0x0800a071
 800a010:	0800a135 	.word	0x0800a135
 800a014:	0800a135 	.word	0x0800a135
 800a018:	0800a135 	.word	0x0800a135
 800a01c:	0800a0b3 	.word	0x0800a0b3
 800a020:	0800a135 	.word	0x0800a135
 800a024:	0800a135 	.word	0x0800a135
 800a028:	0800a135 	.word	0x0800a135
 800a02c:	0800a0f3 	.word	0x0800a0f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68b9      	ldr	r1, [r7, #8]
 800a036:	4618      	mov	r0, r3
 800a038:	f000 f924 	bl	800a284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	699a      	ldr	r2, [r3, #24]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f042 0208 	orr.w	r2, r2, #8
 800a04a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	699a      	ldr	r2, [r3, #24]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 0204 	bic.w	r2, r2, #4
 800a05a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6999      	ldr	r1, [r3, #24]
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	691a      	ldr	r2, [r3, #16]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	430a      	orrs	r2, r1
 800a06c:	619a      	str	r2, [r3, #24]
      break;
 800a06e:	e062      	b.n	800a136 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68b9      	ldr	r1, [r7, #8]
 800a076:	4618      	mov	r0, r3
 800a078:	f000 f974 	bl	800a364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	699a      	ldr	r2, [r3, #24]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a08a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	699a      	ldr	r2, [r3, #24]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a09a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6999      	ldr	r1, [r3, #24]
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	021a      	lsls	r2, r3, #8
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	430a      	orrs	r2, r1
 800a0ae:	619a      	str	r2, [r3, #24]
      break;
 800a0b0:	e041      	b.n	800a136 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68b9      	ldr	r1, [r7, #8]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f000 f9c7 	bl	800a44c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	69da      	ldr	r2, [r3, #28]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f042 0208 	orr.w	r2, r2, #8
 800a0cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	69da      	ldr	r2, [r3, #28]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f022 0204 	bic.w	r2, r2, #4
 800a0dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	69d9      	ldr	r1, [r3, #28]
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	691a      	ldr	r2, [r3, #16]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	430a      	orrs	r2, r1
 800a0ee:	61da      	str	r2, [r3, #28]
      break;
 800a0f0:	e021      	b.n	800a136 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68b9      	ldr	r1, [r7, #8]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 fa1b 	bl	800a534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	69da      	ldr	r2, [r3, #28]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a10c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	69da      	ldr	r2, [r3, #28]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a11c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	69d9      	ldr	r1, [r3, #28]
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	021a      	lsls	r2, r3, #8
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	430a      	orrs	r2, r1
 800a130:	61da      	str	r2, [r3, #28]
      break;
 800a132:	e000      	b.n	800a136 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800a134:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a3f      	ldr	r2, [pc, #252]	; (800a258 <TIM_Base_SetConfig+0x110>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d013      	beq.n	800a188 <TIM_Base_SetConfig+0x40>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a166:	d00f      	beq.n	800a188 <TIM_Base_SetConfig+0x40>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a3c      	ldr	r2, [pc, #240]	; (800a25c <TIM_Base_SetConfig+0x114>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d00b      	beq.n	800a188 <TIM_Base_SetConfig+0x40>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a3b      	ldr	r2, [pc, #236]	; (800a260 <TIM_Base_SetConfig+0x118>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d007      	beq.n	800a188 <TIM_Base_SetConfig+0x40>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a3a      	ldr	r2, [pc, #232]	; (800a264 <TIM_Base_SetConfig+0x11c>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d003      	beq.n	800a188 <TIM_Base_SetConfig+0x40>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a39      	ldr	r2, [pc, #228]	; (800a268 <TIM_Base_SetConfig+0x120>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d108      	bne.n	800a19a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a18e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	4313      	orrs	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a2e      	ldr	r2, [pc, #184]	; (800a258 <TIM_Base_SetConfig+0x110>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d02b      	beq.n	800a1fa <TIM_Base_SetConfig+0xb2>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1a8:	d027      	beq.n	800a1fa <TIM_Base_SetConfig+0xb2>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a2b      	ldr	r2, [pc, #172]	; (800a25c <TIM_Base_SetConfig+0x114>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d023      	beq.n	800a1fa <TIM_Base_SetConfig+0xb2>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a2a      	ldr	r2, [pc, #168]	; (800a260 <TIM_Base_SetConfig+0x118>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d01f      	beq.n	800a1fa <TIM_Base_SetConfig+0xb2>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a29      	ldr	r2, [pc, #164]	; (800a264 <TIM_Base_SetConfig+0x11c>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d01b      	beq.n	800a1fa <TIM_Base_SetConfig+0xb2>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a28      	ldr	r2, [pc, #160]	; (800a268 <TIM_Base_SetConfig+0x120>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d017      	beq.n	800a1fa <TIM_Base_SetConfig+0xb2>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a27      	ldr	r2, [pc, #156]	; (800a26c <TIM_Base_SetConfig+0x124>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d013      	beq.n	800a1fa <TIM_Base_SetConfig+0xb2>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a26      	ldr	r2, [pc, #152]	; (800a270 <TIM_Base_SetConfig+0x128>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d00f      	beq.n	800a1fa <TIM_Base_SetConfig+0xb2>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a25      	ldr	r2, [pc, #148]	; (800a274 <TIM_Base_SetConfig+0x12c>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d00b      	beq.n	800a1fa <TIM_Base_SetConfig+0xb2>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a24      	ldr	r2, [pc, #144]	; (800a278 <TIM_Base_SetConfig+0x130>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d007      	beq.n	800a1fa <TIM_Base_SetConfig+0xb2>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a23      	ldr	r2, [pc, #140]	; (800a27c <TIM_Base_SetConfig+0x134>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d003      	beq.n	800a1fa <TIM_Base_SetConfig+0xb2>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4a22      	ldr	r2, [pc, #136]	; (800a280 <TIM_Base_SetConfig+0x138>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d108      	bne.n	800a20c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	4313      	orrs	r3, r2
 800a20a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	695b      	ldr	r3, [r3, #20]
 800a216:	4313      	orrs	r3, r2
 800a218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	689a      	ldr	r2, [r3, #8]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a09      	ldr	r2, [pc, #36]	; (800a258 <TIM_Base_SetConfig+0x110>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d003      	beq.n	800a240 <TIM_Base_SetConfig+0xf8>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4a0b      	ldr	r2, [pc, #44]	; (800a268 <TIM_Base_SetConfig+0x120>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d103      	bne.n	800a248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	691a      	ldr	r2, [r3, #16]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	615a      	str	r2, [r3, #20]
}
 800a24e:	bf00      	nop
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	bc80      	pop	{r7}
 800a256:	4770      	bx	lr
 800a258:	40010000 	.word	0x40010000
 800a25c:	40000400 	.word	0x40000400
 800a260:	40000800 	.word	0x40000800
 800a264:	40000c00 	.word	0x40000c00
 800a268:	40010400 	.word	0x40010400
 800a26c:	40014000 	.word	0x40014000
 800a270:	40014400 	.word	0x40014400
 800a274:	40014800 	.word	0x40014800
 800a278:	40001800 	.word	0x40001800
 800a27c:	40001c00 	.word	0x40001c00
 800a280:	40002000 	.word	0x40002000

0800a284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a284:	b480      	push	{r7}
 800a286:	b087      	sub	sp, #28
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	f023 0201 	bic.w	r2, r3, #1
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f023 0303 	bic.w	r3, r3, #3
 800a2ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f023 0302 	bic.w	r3, r3, #2
 800a2cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	697a      	ldr	r2, [r7, #20]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a20      	ldr	r2, [pc, #128]	; (800a35c <TIM_OC1_SetConfig+0xd8>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d003      	beq.n	800a2e8 <TIM_OC1_SetConfig+0x64>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a1f      	ldr	r2, [pc, #124]	; (800a360 <TIM_OC1_SetConfig+0xdc>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d10c      	bne.n	800a302 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	f023 0308 	bic.w	r3, r3, #8
 800a2ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	f023 0304 	bic.w	r3, r3, #4
 800a300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a15      	ldr	r2, [pc, #84]	; (800a35c <TIM_OC1_SetConfig+0xd8>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d003      	beq.n	800a312 <TIM_OC1_SetConfig+0x8e>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a14      	ldr	r2, [pc, #80]	; (800a360 <TIM_OC1_SetConfig+0xdc>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d111      	bne.n	800a336 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	695b      	ldr	r3, [r3, #20]
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	4313      	orrs	r3, r2
 800a32a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	699b      	ldr	r3, [r3, #24]
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	4313      	orrs	r3, r2
 800a334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	685a      	ldr	r2, [r3, #4]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	621a      	str	r2, [r3, #32]
}
 800a350:	bf00      	nop
 800a352:	371c      	adds	r7, #28
 800a354:	46bd      	mov	sp, r7
 800a356:	bc80      	pop	{r7}
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	40010000 	.word	0x40010000
 800a360:	40010400 	.word	0x40010400

0800a364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a364:	b480      	push	{r7}
 800a366:	b087      	sub	sp, #28
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	f023 0210 	bic.w	r2, r3, #16
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	021b      	lsls	r3, r3, #8
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f023 0320 	bic.w	r3, r3, #32
 800a3ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	011b      	lsls	r3, r3, #4
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a21      	ldr	r2, [pc, #132]	; (800a444 <TIM_OC2_SetConfig+0xe0>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d003      	beq.n	800a3cc <TIM_OC2_SetConfig+0x68>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a20      	ldr	r2, [pc, #128]	; (800a448 <TIM_OC2_SetConfig+0xe4>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d10d      	bne.n	800a3e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	011b      	lsls	r3, r3, #4
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a16      	ldr	r2, [pc, #88]	; (800a444 <TIM_OC2_SetConfig+0xe0>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d003      	beq.n	800a3f8 <TIM_OC2_SetConfig+0x94>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a15      	ldr	r2, [pc, #84]	; (800a448 <TIM_OC2_SetConfig+0xe4>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d113      	bne.n	800a420 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	695b      	ldr	r3, [r3, #20]
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	693a      	ldr	r2, [r7, #16]
 800a410:	4313      	orrs	r3, r2
 800a412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	693a      	ldr	r2, [r7, #16]
 800a424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	685a      	ldr	r2, [r3, #4]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	621a      	str	r2, [r3, #32]
}
 800a43a:	bf00      	nop
 800a43c:	371c      	adds	r7, #28
 800a43e:	46bd      	mov	sp, r7
 800a440:	bc80      	pop	{r7}
 800a442:	4770      	bx	lr
 800a444:	40010000 	.word	0x40010000
 800a448:	40010400 	.word	0x40010400

0800a44c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b087      	sub	sp, #28
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a1b      	ldr	r3, [r3, #32]
 800a466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a47a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f023 0303 	bic.w	r3, r3, #3
 800a482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	021b      	lsls	r3, r3, #8
 800a49c:	697a      	ldr	r2, [r7, #20]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4a21      	ldr	r2, [pc, #132]	; (800a52c <TIM_OC3_SetConfig+0xe0>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d003      	beq.n	800a4b2 <TIM_OC3_SetConfig+0x66>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4a20      	ldr	r2, [pc, #128]	; (800a530 <TIM_OC3_SetConfig+0xe4>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d10d      	bne.n	800a4ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	021b      	lsls	r3, r3, #8
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a4cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a16      	ldr	r2, [pc, #88]	; (800a52c <TIM_OC3_SetConfig+0xe0>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d003      	beq.n	800a4de <TIM_OC3_SetConfig+0x92>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a15      	ldr	r2, [pc, #84]	; (800a530 <TIM_OC3_SetConfig+0xe4>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d113      	bne.n	800a506 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	011b      	lsls	r3, r3, #4
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	011b      	lsls	r3, r3, #4
 800a500:	693a      	ldr	r2, [r7, #16]
 800a502:	4313      	orrs	r3, r2
 800a504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	685a      	ldr	r2, [r3, #4]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	697a      	ldr	r2, [r7, #20]
 800a51e:	621a      	str	r2, [r3, #32]
}
 800a520:	bf00      	nop
 800a522:	371c      	adds	r7, #28
 800a524:	46bd      	mov	sp, r7
 800a526:	bc80      	pop	{r7}
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	40010000 	.word	0x40010000
 800a530:	40010400 	.word	0x40010400

0800a534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a534:	b480      	push	{r7}
 800a536:	b087      	sub	sp, #28
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a1b      	ldr	r3, [r3, #32]
 800a54e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	69db      	ldr	r3, [r3, #28]
 800a55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a56a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	021b      	lsls	r3, r3, #8
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	4313      	orrs	r3, r2
 800a576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a57e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	031b      	lsls	r3, r3, #12
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	4313      	orrs	r3, r2
 800a58a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4a11      	ldr	r2, [pc, #68]	; (800a5d4 <TIM_OC4_SetConfig+0xa0>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d003      	beq.n	800a59c <TIM_OC4_SetConfig+0x68>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a10      	ldr	r2, [pc, #64]	; (800a5d8 <TIM_OC4_SetConfig+0xa4>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d109      	bne.n	800a5b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	695b      	ldr	r3, [r3, #20]
 800a5a8:	019b      	lsls	r3, r3, #6
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	697a      	ldr	r2, [r7, #20]
 800a5b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	621a      	str	r2, [r3, #32]
}
 800a5ca:	bf00      	nop
 800a5cc:	371c      	adds	r7, #28
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bc80      	pop	{r7}
 800a5d2:	4770      	bx	lr
 800a5d4:	40010000 	.word	0x40010000
 800a5d8:	40010400 	.word	0x40010400

0800a5dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b087      	sub	sp, #28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	f003 031f 	and.w	r3, r3, #31
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6a1a      	ldr	r2, [r3, #32]
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	43db      	mvns	r3, r3
 800a5fe:	401a      	ands	r2, r3
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6a1a      	ldr	r2, [r3, #32]
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	f003 031f 	and.w	r3, r3, #31
 800a60e:	6879      	ldr	r1, [r7, #4]
 800a610:	fa01 f303 	lsl.w	r3, r1, r3
 800a614:	431a      	orrs	r2, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	621a      	str	r2, [r3, #32]
}
 800a61a:	bf00      	nop
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	bc80      	pop	{r7}
 800a622:	4770      	bx	lr

0800a624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a634:	2b01      	cmp	r3, #1
 800a636:	d101      	bne.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a638:	2302      	movs	r3, #2
 800a63a:	e05a      	b.n	800a6f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2202      	movs	r2, #2
 800a648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a20      	ldr	r2, [pc, #128]	; (800a6fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d022      	beq.n	800a6c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a688:	d01d      	beq.n	800a6c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a1c      	ldr	r2, [pc, #112]	; (800a700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d018      	beq.n	800a6c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a1a      	ldr	r2, [pc, #104]	; (800a704 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d013      	beq.n	800a6c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a19      	ldr	r2, [pc, #100]	; (800a708 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d00e      	beq.n	800a6c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a17      	ldr	r2, [pc, #92]	; (800a70c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d009      	beq.n	800a6c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a16      	ldr	r2, [pc, #88]	; (800a710 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d004      	beq.n	800a6c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a14      	ldr	r2, [pc, #80]	; (800a714 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d10c      	bne.n	800a6e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bc80      	pop	{r7}
 800a6fa:	4770      	bx	lr
 800a6fc:	40010000 	.word	0x40010000
 800a700:	40000400 	.word	0x40000400
 800a704:	40000800 	.word	0x40000800
 800a708:	40000c00 	.word	0x40000c00
 800a70c:	40010400 	.word	0x40010400
 800a710:	40014000 	.word	0x40014000
 800a714:	40001800 	.word	0x40001800

0800a718 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a718:	b084      	sub	sp, #16
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b084      	sub	sp, #16
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	f107 001c 	add.w	r0, r7, #28
 800a726:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d122      	bne.n	800a776 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d105      	bne.n	800a76a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f001 fafa 	bl	800bd64 <USB_CoreReset>
 800a770:	4603      	mov	r3, r0
 800a772:	73fb      	strb	r3, [r7, #15]
 800a774:	e010      	b.n	800a798 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f001 faee 	bl	800bd64 <USB_CoreReset>
 800a788:	4603      	mov	r3, r0
 800a78a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a790:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d10b      	bne.n	800a7b6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	f043 0206 	orr.w	r2, r3, #6
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f043 0220 	orr.w	r2, r3, #32
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7c2:	b004      	add	sp, #16
 800a7c4:	4770      	bx	lr
	...

0800a7c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b087      	sub	sp, #28
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	d165      	bne.n	800a8a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	4a41      	ldr	r2, [pc, #260]	; (800a8e4 <USB_SetTurnaroundTime+0x11c>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d906      	bls.n	800a7f2 <USB_SetTurnaroundTime+0x2a>
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	4a40      	ldr	r2, [pc, #256]	; (800a8e8 <USB_SetTurnaroundTime+0x120>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d202      	bcs.n	800a7f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a7ec:	230f      	movs	r3, #15
 800a7ee:	617b      	str	r3, [r7, #20]
 800a7f0:	e062      	b.n	800a8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	4a3c      	ldr	r2, [pc, #240]	; (800a8e8 <USB_SetTurnaroundTime+0x120>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d306      	bcc.n	800a808 <USB_SetTurnaroundTime+0x40>
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	4a3b      	ldr	r2, [pc, #236]	; (800a8ec <USB_SetTurnaroundTime+0x124>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d202      	bcs.n	800a808 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a802:	230e      	movs	r3, #14
 800a804:	617b      	str	r3, [r7, #20]
 800a806:	e057      	b.n	800a8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	4a38      	ldr	r2, [pc, #224]	; (800a8ec <USB_SetTurnaroundTime+0x124>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d306      	bcc.n	800a81e <USB_SetTurnaroundTime+0x56>
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	4a37      	ldr	r2, [pc, #220]	; (800a8f0 <USB_SetTurnaroundTime+0x128>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d202      	bcs.n	800a81e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a818:	230d      	movs	r3, #13
 800a81a:	617b      	str	r3, [r7, #20]
 800a81c:	e04c      	b.n	800a8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	4a33      	ldr	r2, [pc, #204]	; (800a8f0 <USB_SetTurnaroundTime+0x128>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d306      	bcc.n	800a834 <USB_SetTurnaroundTime+0x6c>
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	4a32      	ldr	r2, [pc, #200]	; (800a8f4 <USB_SetTurnaroundTime+0x12c>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d802      	bhi.n	800a834 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a82e:	230c      	movs	r3, #12
 800a830:	617b      	str	r3, [r7, #20]
 800a832:	e041      	b.n	800a8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	4a2f      	ldr	r2, [pc, #188]	; (800a8f4 <USB_SetTurnaroundTime+0x12c>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d906      	bls.n	800a84a <USB_SetTurnaroundTime+0x82>
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	4a2e      	ldr	r2, [pc, #184]	; (800a8f8 <USB_SetTurnaroundTime+0x130>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d802      	bhi.n	800a84a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a844:	230b      	movs	r3, #11
 800a846:	617b      	str	r3, [r7, #20]
 800a848:	e036      	b.n	800a8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	4a2a      	ldr	r2, [pc, #168]	; (800a8f8 <USB_SetTurnaroundTime+0x130>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d906      	bls.n	800a860 <USB_SetTurnaroundTime+0x98>
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	4a29      	ldr	r2, [pc, #164]	; (800a8fc <USB_SetTurnaroundTime+0x134>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d802      	bhi.n	800a860 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a85a:	230a      	movs	r3, #10
 800a85c:	617b      	str	r3, [r7, #20]
 800a85e:	e02b      	b.n	800a8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	4a26      	ldr	r2, [pc, #152]	; (800a8fc <USB_SetTurnaroundTime+0x134>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d906      	bls.n	800a876 <USB_SetTurnaroundTime+0xae>
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	4a25      	ldr	r2, [pc, #148]	; (800a900 <USB_SetTurnaroundTime+0x138>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d202      	bcs.n	800a876 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a870:	2309      	movs	r3, #9
 800a872:	617b      	str	r3, [r7, #20]
 800a874:	e020      	b.n	800a8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	4a21      	ldr	r2, [pc, #132]	; (800a900 <USB_SetTurnaroundTime+0x138>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d306      	bcc.n	800a88c <USB_SetTurnaroundTime+0xc4>
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	4a20      	ldr	r2, [pc, #128]	; (800a904 <USB_SetTurnaroundTime+0x13c>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d802      	bhi.n	800a88c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a886:	2308      	movs	r3, #8
 800a888:	617b      	str	r3, [r7, #20]
 800a88a:	e015      	b.n	800a8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	4a1d      	ldr	r2, [pc, #116]	; (800a904 <USB_SetTurnaroundTime+0x13c>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d906      	bls.n	800a8a2 <USB_SetTurnaroundTime+0xda>
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	4a1c      	ldr	r2, [pc, #112]	; (800a908 <USB_SetTurnaroundTime+0x140>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d202      	bcs.n	800a8a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a89c:	2307      	movs	r3, #7
 800a89e:	617b      	str	r3, [r7, #20]
 800a8a0:	e00a      	b.n	800a8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a8a2:	2306      	movs	r3, #6
 800a8a4:	617b      	str	r3, [r7, #20]
 800a8a6:	e007      	b.n	800a8b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a8a8:	79fb      	ldrb	r3, [r7, #7]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d102      	bne.n	800a8b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a8ae:	2309      	movs	r3, #9
 800a8b0:	617b      	str	r3, [r7, #20]
 800a8b2:	e001      	b.n	800a8b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a8b4:	2309      	movs	r3, #9
 800a8b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	68da      	ldr	r2, [r3, #12]
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	029b      	lsls	r3, r3, #10
 800a8cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a8d0:	431a      	orrs	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	371c      	adds	r7, #28
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bc80      	pop	{r7}
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	00d8acbf 	.word	0x00d8acbf
 800a8e8:	00e4e1c0 	.word	0x00e4e1c0
 800a8ec:	00f42400 	.word	0x00f42400
 800a8f0:	01067380 	.word	0x01067380
 800a8f4:	011a499f 	.word	0x011a499f
 800a8f8:	01312cff 	.word	0x01312cff
 800a8fc:	014ca43f 	.word	0x014ca43f
 800a900:	016e3600 	.word	0x016e3600
 800a904:	01a6ab1f 	.word	0x01a6ab1f
 800a908:	01e84800 	.word	0x01e84800

0800a90c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	f043 0201 	orr.w	r2, r3, #1
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	bc80      	pop	{r7}
 800a92a:	4770      	bx	lr

0800a92c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	f023 0201 	bic.w	r2, r3, #1
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	370c      	adds	r7, #12
 800a946:	46bd      	mov	sp, r7
 800a948:	bc80      	pop	{r7}
 800a94a:	4770      	bx	lr

0800a94c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a958:	2300      	movs	r3, #0
 800a95a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a968:	78fb      	ldrb	r3, [r7, #3]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d115      	bne.n	800a99a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a97a:	2001      	movs	r0, #1
 800a97c:	f7fb fcec 	bl	8006358 <HAL_Delay>
      ms++;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	3301      	adds	r3, #1
 800a984:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f001 f961 	bl	800bc4e <USB_GetMode>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d01e      	beq.n	800a9d0 <USB_SetCurrentMode+0x84>
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2b31      	cmp	r3, #49	; 0x31
 800a996:	d9f0      	bls.n	800a97a <USB_SetCurrentMode+0x2e>
 800a998:	e01a      	b.n	800a9d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a99a:	78fb      	ldrb	r3, [r7, #3]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d115      	bne.n	800a9cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a9ac:	2001      	movs	r0, #1
 800a9ae:	f7fb fcd3 	bl	8006358 <HAL_Delay>
      ms++;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f001 f948 	bl	800bc4e <USB_GetMode>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d005      	beq.n	800a9d0 <USB_SetCurrentMode+0x84>
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2b31      	cmp	r3, #49	; 0x31
 800a9c8:	d9f0      	bls.n	800a9ac <USB_SetCurrentMode+0x60>
 800a9ca:	e001      	b.n	800a9d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e005      	b.n	800a9dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2b32      	cmp	r3, #50	; 0x32
 800a9d4:	d101      	bne.n	800a9da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e000      	b.n	800a9dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b086      	sub	sp, #24
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a9f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a9fe:	2300      	movs	r3, #0
 800aa00:	613b      	str	r3, [r7, #16]
 800aa02:	e009      	b.n	800aa18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	3340      	adds	r3, #64	; 0x40
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4413      	add	r3, r2
 800aa0e:	2200      	movs	r2, #0
 800aa10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	3301      	adds	r3, #1
 800aa16:	613b      	str	r3, [r7, #16]
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	2b0e      	cmp	r3, #14
 800aa1c:	d9f2      	bls.n	800aa04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aa1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d11c      	bne.n	800aa5e <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa32:	f043 0302 	orr.w	r3, r3, #2
 800aa36:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa48:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa54:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	639a      	str	r2, [r3, #56]	; 0x38
 800aa5c:	e00b      	b.n	800aa76 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa62:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	2300      	movs	r3, #0
 800aa80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa88:	4619      	mov	r1, r3
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa90:	461a      	mov	r2, r3
 800aa92:	680b      	ldr	r3, [r1, #0]
 800aa94:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d10c      	bne.n	800aab6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d104      	bne.n	800aaac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 f945 	bl	800ad34 <USB_SetDevSpeed>
 800aaaa:	e008      	b.n	800aabe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aaac:	2101      	movs	r1, #1
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f940 	bl	800ad34 <USB_SetDevSpeed>
 800aab4:	e003      	b.n	800aabe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aab6:	2103      	movs	r1, #3
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 f93b 	bl	800ad34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aabe:	2110      	movs	r1, #16
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 f8f3 	bl	800acac <USB_FlushTxFifo>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d001      	beq.n	800aad0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 f90f 	bl	800acf4 <USB_FlushRxFifo>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d001      	beq.n	800aae0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aae6:	461a      	mov	r2, r3
 800aae8:	2300      	movs	r3, #0
 800aaea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aafe:	461a      	mov	r2, r3
 800ab00:	2300      	movs	r3, #0
 800ab02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab04:	2300      	movs	r3, #0
 800ab06:	613b      	str	r3, [r7, #16]
 800ab08:	e043      	b.n	800ab92 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	015a      	lsls	r2, r3, #5
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	4413      	add	r3, r2
 800ab12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab20:	d118      	bne.n	800ab54 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d10a      	bne.n	800ab3e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	015a      	lsls	r2, r3, #5
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	4413      	add	r3, r2
 800ab30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab34:	461a      	mov	r2, r3
 800ab36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab3a:	6013      	str	r3, [r2, #0]
 800ab3c:	e013      	b.n	800ab66 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	015a      	lsls	r2, r3, #5
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	4413      	add	r3, r2
 800ab46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab50:	6013      	str	r3, [r2, #0]
 800ab52:	e008      	b.n	800ab66 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	015a      	lsls	r2, r3, #5
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab60:	461a      	mov	r2, r3
 800ab62:	2300      	movs	r3, #0
 800ab64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	015a      	lsls	r2, r3, #5
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab72:	461a      	mov	r2, r3
 800ab74:	2300      	movs	r3, #0
 800ab76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab84:	461a      	mov	r2, r3
 800ab86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	613b      	str	r3, [r7, #16]
 800ab92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d3b7      	bcc.n	800ab0a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	613b      	str	r3, [r7, #16]
 800ab9e:	e043      	b.n	800ac28 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	015a      	lsls	r2, r3, #5
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	4413      	add	r3, r2
 800aba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abb6:	d118      	bne.n	800abea <USB_DevInit+0x206>
    {
      if (i == 0U)
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d10a      	bne.n	800abd4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	015a      	lsls	r2, r3, #5
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	4413      	add	r3, r2
 800abc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abca:	461a      	mov	r2, r3
 800abcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800abd0:	6013      	str	r3, [r2, #0]
 800abd2:	e013      	b.n	800abfc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	015a      	lsls	r2, r3, #5
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4413      	add	r3, r2
 800abdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe0:	461a      	mov	r2, r3
 800abe2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800abe6:	6013      	str	r3, [r2, #0]
 800abe8:	e008      	b.n	800abfc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	015a      	lsls	r2, r3, #5
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	4413      	add	r3, r2
 800abf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf6:	461a      	mov	r2, r3
 800abf8:	2300      	movs	r3, #0
 800abfa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	015a      	lsls	r2, r3, #5
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	4413      	add	r3, r2
 800ac04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac08:	461a      	mov	r2, r3
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	015a      	lsls	r2, r3, #5
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	4413      	add	r3, r2
 800ac16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	3301      	adds	r3, #1
 800ac26:	613b      	str	r3, [r7, #16]
 800ac28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d3b7      	bcc.n	800aba0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ac50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ac52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d105      	bne.n	800ac64 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	699b      	ldr	r3, [r3, #24]
 800ac5c:	f043 0210 	orr.w	r2, r3, #16
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	699a      	ldr	r2, [r3, #24]
 800ac68:	4b0f      	ldr	r3, [pc, #60]	; (800aca8 <USB_DevInit+0x2c4>)
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ac70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d005      	beq.n	800ac82 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	f043 0208 	orr.w	r2, r3, #8
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ac82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d107      	bne.n	800ac98 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	699b      	ldr	r3, [r3, #24]
 800ac8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac90:	f043 0304 	orr.w	r3, r3, #4
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ac98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3718      	adds	r7, #24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aca4:	b004      	add	sp, #16
 800aca6:	4770      	bx	lr
 800aca8:	803c3800 	.word	0x803c3800

0800acac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800acb6:	2300      	movs	r3, #0
 800acb8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	019b      	lsls	r3, r3, #6
 800acbe:	f043 0220 	orr.w	r2, r3, #32
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	3301      	adds	r3, #1
 800acca:	60fb      	str	r3, [r7, #12]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	4a08      	ldr	r2, [pc, #32]	; (800acf0 <USB_FlushTxFifo+0x44>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d901      	bls.n	800acd8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800acd4:	2303      	movs	r3, #3
 800acd6:	e006      	b.n	800ace6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	691b      	ldr	r3, [r3, #16]
 800acdc:	f003 0320 	and.w	r3, r3, #32
 800ace0:	2b20      	cmp	r3, #32
 800ace2:	d0f0      	beq.n	800acc6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	bc80      	pop	{r7}
 800acee:	4770      	bx	lr
 800acf0:	00030d40 	.word	0x00030d40

0800acf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800acfc:	2300      	movs	r3, #0
 800acfe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2210      	movs	r2, #16
 800ad04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	60fb      	str	r3, [r7, #12]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	4a08      	ldr	r2, [pc, #32]	; (800ad30 <USB_FlushRxFifo+0x3c>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d901      	bls.n	800ad18 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ad14:	2303      	movs	r3, #3
 800ad16:	e006      	b.n	800ad26 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	f003 0310 	and.w	r3, r3, #16
 800ad20:	2b10      	cmp	r3, #16
 800ad22:	d0f0      	beq.n	800ad06 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3714      	adds	r7, #20
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bc80      	pop	{r7}
 800ad2e:	4770      	bx	lr
 800ad30:	00030d40 	.word	0x00030d40

0800ad34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	78fb      	ldrb	r3, [r7, #3]
 800ad4e:	68f9      	ldr	r1, [r7, #12]
 800ad50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad54:	4313      	orrs	r3, r2
 800ad56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bc80      	pop	{r7}
 800ad62:	4770      	bx	lr

0800ad64 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b087      	sub	sp, #28
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	f003 0306 	and.w	r3, r3, #6
 800ad7c:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d102      	bne.n	800ad8a <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ad84:	2300      	movs	r3, #0
 800ad86:	75fb      	strb	r3, [r7, #23]
 800ad88:	e00a      	b.n	800ada0 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d002      	beq.n	800ad96 <USB_GetDevSpeed+0x32>
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2b06      	cmp	r3, #6
 800ad94:	d102      	bne.n	800ad9c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ad96:	2302      	movs	r3, #2
 800ad98:	75fb      	strb	r3, [r7, #23]
 800ad9a:	e001      	b.n	800ada0 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ad9c:	230f      	movs	r3, #15
 800ad9e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ada0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	371c      	adds	r7, #28
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bc80      	pop	{r7}
 800adaa:	4770      	bx	lr

0800adac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800adac:	b480      	push	{r7}
 800adae:	b085      	sub	sp, #20
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	785b      	ldrb	r3, [r3, #1]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d13a      	bne.n	800ae3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adce:	69da      	ldr	r2, [r3, #28]
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	f003 030f 	and.w	r3, r3, #15
 800add8:	2101      	movs	r1, #1
 800adda:	fa01 f303 	lsl.w	r3, r1, r3
 800adde:	b29b      	uxth	r3, r3
 800ade0:	68f9      	ldr	r1, [r7, #12]
 800ade2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ade6:	4313      	orrs	r3, r2
 800ade8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	015a      	lsls	r2, r3, #5
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	4413      	add	r3, r2
 800adf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d155      	bne.n	800aeac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	015a      	lsls	r2, r3, #5
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4413      	add	r3, r2
 800ae08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	78db      	ldrb	r3, [r3, #3]
 800ae1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	059b      	lsls	r3, r3, #22
 800ae22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae24:	4313      	orrs	r3, r2
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	0151      	lsls	r1, r2, #5
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	440a      	add	r2, r1
 800ae2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae3a:	6013      	str	r3, [r2, #0]
 800ae3c:	e036      	b.n	800aeac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae44:	69da      	ldr	r2, [r3, #28]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	f003 030f 	and.w	r3, r3, #15
 800ae4e:	2101      	movs	r1, #1
 800ae50:	fa01 f303 	lsl.w	r3, r1, r3
 800ae54:	041b      	lsls	r3, r3, #16
 800ae56:	68f9      	ldr	r1, [r7, #12]
 800ae58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	015a      	lsls	r2, r3, #5
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	4413      	add	r3, r2
 800ae68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d11a      	bne.n	800aeac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	015a      	lsls	r2, r3, #5
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	78db      	ldrb	r3, [r3, #3]
 800ae90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ae92:	430b      	orrs	r3, r1
 800ae94:	4313      	orrs	r3, r2
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	0151      	lsls	r1, r2, #5
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	440a      	add	r2, r1
 800ae9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeaa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3714      	adds	r7, #20
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bc80      	pop	{r7}
 800aeb6:	4770      	bx	lr

0800aeb8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	785b      	ldrb	r3, [r3, #1]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d161      	bne.n	800af98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	015a      	lsls	r2, r3, #5
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	4413      	add	r3, r2
 800aedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aee6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aeea:	d11f      	bne.n	800af2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	015a      	lsls	r2, r3, #5
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	4413      	add	r3, r2
 800aef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	68ba      	ldr	r2, [r7, #8]
 800aefc:	0151      	lsls	r1, r2, #5
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	440a      	add	r2, r1
 800af02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	015a      	lsls	r2, r3, #5
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	4413      	add	r3, r2
 800af14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	68ba      	ldr	r2, [r7, #8]
 800af1c:	0151      	lsls	r1, r2, #5
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	440a      	add	r2, r1
 800af22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	f003 030f 	and.w	r3, r3, #15
 800af3c:	2101      	movs	r1, #1
 800af3e:	fa01 f303 	lsl.w	r3, r1, r3
 800af42:	b29b      	uxth	r3, r3
 800af44:	43db      	mvns	r3, r3
 800af46:	68f9      	ldr	r1, [r7, #12]
 800af48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af4c:	4013      	ands	r3, r2
 800af4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af56:	69da      	ldr	r2, [r3, #28]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	f003 030f 	and.w	r3, r3, #15
 800af60:	2101      	movs	r1, #1
 800af62:	fa01 f303 	lsl.w	r3, r1, r3
 800af66:	b29b      	uxth	r3, r3
 800af68:	43db      	mvns	r3, r3
 800af6a:	68f9      	ldr	r1, [r7, #12]
 800af6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af70:	4013      	ands	r3, r2
 800af72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	015a      	lsls	r2, r3, #5
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	4413      	add	r3, r2
 800af7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	0159      	lsls	r1, r3, #5
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	440b      	add	r3, r1
 800af8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af8e:	4619      	mov	r1, r3
 800af90:	4b35      	ldr	r3, [pc, #212]	; (800b068 <USB_DeactivateEndpoint+0x1b0>)
 800af92:	4013      	ands	r3, r2
 800af94:	600b      	str	r3, [r1, #0]
 800af96:	e060      	b.n	800b05a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	015a      	lsls	r2, r3, #5
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	4413      	add	r3, r2
 800afa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afae:	d11f      	bne.n	800aff0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	015a      	lsls	r2, r3, #5
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	4413      	add	r3, r2
 800afb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68ba      	ldr	r2, [r7, #8]
 800afc0:	0151      	lsls	r1, r2, #5
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	440a      	add	r2, r1
 800afc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800afce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	015a      	lsls	r2, r3, #5
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	4413      	add	r3, r2
 800afd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	0151      	lsls	r1, r2, #5
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	440a      	add	r2, r1
 800afe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	f003 030f 	and.w	r3, r3, #15
 800b000:	2101      	movs	r1, #1
 800b002:	fa01 f303 	lsl.w	r3, r1, r3
 800b006:	041b      	lsls	r3, r3, #16
 800b008:	43db      	mvns	r3, r3
 800b00a:	68f9      	ldr	r1, [r7, #12]
 800b00c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b010:	4013      	ands	r3, r2
 800b012:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b01a:	69da      	ldr	r2, [r3, #28]
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	f003 030f 	and.w	r3, r3, #15
 800b024:	2101      	movs	r1, #1
 800b026:	fa01 f303 	lsl.w	r3, r1, r3
 800b02a:	041b      	lsls	r3, r3, #16
 800b02c:	43db      	mvns	r3, r3
 800b02e:	68f9      	ldr	r1, [r7, #12]
 800b030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b034:	4013      	ands	r3, r2
 800b036:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	015a      	lsls	r2, r3, #5
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	4413      	add	r3, r2
 800b040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	0159      	lsls	r1, r3, #5
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	440b      	add	r3, r1
 800b04e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b052:	4619      	mov	r1, r3
 800b054:	4b05      	ldr	r3, [pc, #20]	; (800b06c <USB_DeactivateEndpoint+0x1b4>)
 800b056:	4013      	ands	r3, r2
 800b058:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3714      	adds	r7, #20
 800b060:	46bd      	mov	sp, r7
 800b062:	bc80      	pop	{r7}
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	ec337800 	.word	0xec337800
 800b06c:	eff37800 	.word	0xeff37800

0800b070 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b08a      	sub	sp, #40	; 0x28
 800b074:	af02      	add	r7, sp, #8
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	4613      	mov	r3, r2
 800b07c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	785b      	ldrb	r3, [r3, #1]
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	f040 815c 	bne.w	800b34a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	695b      	ldr	r3, [r3, #20]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d132      	bne.n	800b100 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	015a      	lsls	r2, r3, #5
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	69ba      	ldr	r2, [r7, #24]
 800b0aa:	0151      	lsls	r1, r2, #5
 800b0ac:	69fa      	ldr	r2, [r7, #28]
 800b0ae:	440a      	add	r2, r1
 800b0b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b0b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b0bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	015a      	lsls	r2, r3, #5
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ca:	691b      	ldr	r3, [r3, #16]
 800b0cc:	69ba      	ldr	r2, [r7, #24]
 800b0ce:	0151      	lsls	r1, r2, #5
 800b0d0:	69fa      	ldr	r2, [r7, #28]
 800b0d2:	440a      	add	r2, r1
 800b0d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	015a      	lsls	r2, r3, #5
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	69ba      	ldr	r2, [r7, #24]
 800b0ee:	0151      	lsls	r1, r2, #5
 800b0f0:	69fa      	ldr	r2, [r7, #28]
 800b0f2:	440a      	add	r2, r1
 800b0f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0f8:	0cdb      	lsrs	r3, r3, #19
 800b0fa:	04db      	lsls	r3, r3, #19
 800b0fc:	6113      	str	r3, [r2, #16]
 800b0fe:	e074      	b.n	800b1ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	015a      	lsls	r2, r3, #5
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	4413      	add	r3, r2
 800b108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	69ba      	ldr	r2, [r7, #24]
 800b110:	0151      	lsls	r1, r2, #5
 800b112:	69fa      	ldr	r2, [r7, #28]
 800b114:	440a      	add	r2, r1
 800b116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b11a:	0cdb      	lsrs	r3, r3, #19
 800b11c:	04db      	lsls	r3, r3, #19
 800b11e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	015a      	lsls	r2, r3, #5
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	4413      	add	r3, r2
 800b128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	69ba      	ldr	r2, [r7, #24]
 800b130:	0151      	lsls	r1, r2, #5
 800b132:	69fa      	ldr	r2, [r7, #28]
 800b134:	440a      	add	r2, r1
 800b136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b13a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b13e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b142:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	015a      	lsls	r2, r3, #5
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	4413      	add	r3, r2
 800b14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b150:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	6959      	ldr	r1, [r3, #20]
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	440b      	add	r3, r1
 800b15c:	1e59      	subs	r1, r3, #1
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	fbb1 f3f3 	udiv	r3, r1, r3
 800b166:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b168:	4b9d      	ldr	r3, [pc, #628]	; (800b3e0 <USB_EPStartXfer+0x370>)
 800b16a:	400b      	ands	r3, r1
 800b16c:	69b9      	ldr	r1, [r7, #24]
 800b16e:	0148      	lsls	r0, r1, #5
 800b170:	69f9      	ldr	r1, [r7, #28]
 800b172:	4401      	add	r1, r0
 800b174:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b178:	4313      	orrs	r3, r2
 800b17a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	015a      	lsls	r2, r3, #5
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	4413      	add	r3, r2
 800b184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b188:	691a      	ldr	r2, [r3, #16]
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	695b      	ldr	r3, [r3, #20]
 800b18e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b192:	69b9      	ldr	r1, [r7, #24]
 800b194:	0148      	lsls	r0, r1, #5
 800b196:	69f9      	ldr	r1, [r7, #28]
 800b198:	4401      	add	r1, r0
 800b19a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	78db      	ldrb	r3, [r3, #3]
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d11f      	bne.n	800b1ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	015a      	lsls	r2, r3, #5
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	69ba      	ldr	r2, [r7, #24]
 800b1ba:	0151      	lsls	r1, r2, #5
 800b1bc:	69fa      	ldr	r2, [r7, #28]
 800b1be:	440a      	add	r2, r1
 800b1c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b1c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	015a      	lsls	r2, r3, #5
 800b1ce:	69fb      	ldr	r3, [r7, #28]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d6:	691b      	ldr	r3, [r3, #16]
 800b1d8:	69ba      	ldr	r2, [r7, #24]
 800b1da:	0151      	lsls	r1, r2, #5
 800b1dc:	69fa      	ldr	r2, [r7, #28]
 800b1de:	440a      	add	r2, r1
 800b1e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b1e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b1ea:	79fb      	ldrb	r3, [r7, #7]
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d14b      	bne.n	800b288 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d009      	beq.n	800b20c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	015a      	lsls	r2, r3, #5
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	4413      	add	r3, r2
 800b200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b204:	461a      	mov	r2, r3
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	78db      	ldrb	r3, [r3, #3]
 800b210:	2b01      	cmp	r3, #1
 800b212:	d128      	bne.n	800b266 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b220:	2b00      	cmp	r3, #0
 800b222:	d110      	bne.n	800b246 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	015a      	lsls	r2, r3, #5
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	4413      	add	r3, r2
 800b22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	69ba      	ldr	r2, [r7, #24]
 800b234:	0151      	lsls	r1, r2, #5
 800b236:	69fa      	ldr	r2, [r7, #28]
 800b238:	440a      	add	r2, r1
 800b23a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b23e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b242:	6013      	str	r3, [r2, #0]
 800b244:	e00f      	b.n	800b266 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	015a      	lsls	r2, r3, #5
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	4413      	add	r3, r2
 800b24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	69ba      	ldr	r2, [r7, #24]
 800b256:	0151      	lsls	r1, r2, #5
 800b258:	69fa      	ldr	r2, [r7, #28]
 800b25a:	440a      	add	r2, r1
 800b25c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b264:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	015a      	lsls	r2, r3, #5
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	4413      	add	r3, r2
 800b26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	0151      	lsls	r1, r2, #5
 800b278:	69fa      	ldr	r2, [r7, #28]
 800b27a:	440a      	add	r2, r1
 800b27c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b280:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b284:	6013      	str	r3, [r2, #0]
 800b286:	e12f      	b.n	800b4e8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b288:	69bb      	ldr	r3, [r7, #24]
 800b28a:	015a      	lsls	r2, r3, #5
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	4413      	add	r3, r2
 800b290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	69ba      	ldr	r2, [r7, #24]
 800b298:	0151      	lsls	r1, r2, #5
 800b29a:	69fa      	ldr	r2, [r7, #28]
 800b29c:	440a      	add	r2, r1
 800b29e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	78db      	ldrb	r3, [r3, #3]
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d015      	beq.n	800b2dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	695b      	ldr	r3, [r3, #20]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f000 8117 	beq.w	800b4e8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	f003 030f 	and.w	r3, r3, #15
 800b2ca:	2101      	movs	r1, #1
 800b2cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b2d0:	69f9      	ldr	r1, [r7, #28]
 800b2d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	634b      	str	r3, [r1, #52]	; 0x34
 800b2da:	e105      	b.n	800b4e8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d110      	bne.n	800b30e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	015a      	lsls	r2, r3, #5
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	69ba      	ldr	r2, [r7, #24]
 800b2fc:	0151      	lsls	r1, r2, #5
 800b2fe:	69fa      	ldr	r2, [r7, #28]
 800b300:	440a      	add	r2, r1
 800b302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b306:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b30a:	6013      	str	r3, [r2, #0]
 800b30c:	e00f      	b.n	800b32e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	015a      	lsls	r2, r3, #5
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	4413      	add	r3, r2
 800b316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	69ba      	ldr	r2, [r7, #24]
 800b31e:	0151      	lsls	r1, r2, #5
 800b320:	69fa      	ldr	r2, [r7, #28]
 800b322:	440a      	add	r2, r1
 800b324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b32c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	68d9      	ldr	r1, [r3, #12]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	781a      	ldrb	r2, [r3, #0]
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	695b      	ldr	r3, [r3, #20]
 800b33a:	b298      	uxth	r0, r3
 800b33c:	79fb      	ldrb	r3, [r7, #7]
 800b33e:	9300      	str	r3, [sp, #0]
 800b340:	4603      	mov	r3, r0
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f000 fa2a 	bl	800b79c <USB_WritePacket>
 800b348:	e0ce      	b.n	800b4e8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	015a      	lsls	r2, r3, #5
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	4413      	add	r3, r2
 800b352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	69ba      	ldr	r2, [r7, #24]
 800b35a:	0151      	lsls	r1, r2, #5
 800b35c:	69fa      	ldr	r2, [r7, #28]
 800b35e:	440a      	add	r2, r1
 800b360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b364:	0cdb      	lsrs	r3, r3, #19
 800b366:	04db      	lsls	r3, r3, #19
 800b368:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	015a      	lsls	r2, r3, #5
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	4413      	add	r3, r2
 800b372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	69ba      	ldr	r2, [r7, #24]
 800b37a:	0151      	lsls	r1, r2, #5
 800b37c:	69fa      	ldr	r2, [r7, #28]
 800b37e:	440a      	add	r2, r1
 800b380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b384:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b388:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b38c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	695b      	ldr	r3, [r3, #20]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d126      	bne.n	800b3e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	015a      	lsls	r2, r3, #5
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	4413      	add	r3, r2
 800b39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3a2:	691a      	ldr	r2, [r3, #16]
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3ac:	69b9      	ldr	r1, [r7, #24]
 800b3ae:	0148      	lsls	r0, r1, #5
 800b3b0:	69f9      	ldr	r1, [r7, #28]
 800b3b2:	4401      	add	r1, r0
 800b3b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	015a      	lsls	r2, r3, #5
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	69ba      	ldr	r2, [r7, #24]
 800b3cc:	0151      	lsls	r1, r2, #5
 800b3ce:	69fa      	ldr	r2, [r7, #28]
 800b3d0:	440a      	add	r2, r1
 800b3d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3da:	6113      	str	r3, [r2, #16]
 800b3dc:	e036      	b.n	800b44c <USB_EPStartXfer+0x3dc>
 800b3de:	bf00      	nop
 800b3e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	695a      	ldr	r2, [r3, #20]
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	1e5a      	subs	r2, r3, #1
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3f8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	015a      	lsls	r2, r3, #5
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	4413      	add	r3, r2
 800b402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b406:	691a      	ldr	r2, [r3, #16]
 800b408:	8afb      	ldrh	r3, [r7, #22]
 800b40a:	04d9      	lsls	r1, r3, #19
 800b40c:	4b39      	ldr	r3, [pc, #228]	; (800b4f4 <USB_EPStartXfer+0x484>)
 800b40e:	400b      	ands	r3, r1
 800b410:	69b9      	ldr	r1, [r7, #24]
 800b412:	0148      	lsls	r0, r1, #5
 800b414:	69f9      	ldr	r1, [r7, #28]
 800b416:	4401      	add	r1, r0
 800b418:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b41c:	4313      	orrs	r3, r2
 800b41e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	015a      	lsls	r2, r3, #5
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	4413      	add	r3, r2
 800b428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b42c:	691a      	ldr	r2, [r3, #16]
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	8af9      	ldrh	r1, [r7, #22]
 800b434:	fb01 f303 	mul.w	r3, r1, r3
 800b438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b43c:	69b9      	ldr	r1, [r7, #24]
 800b43e:	0148      	lsls	r0, r1, #5
 800b440:	69f9      	ldr	r1, [r7, #28]
 800b442:	4401      	add	r1, r0
 800b444:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b448:	4313      	orrs	r3, r2
 800b44a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b44c:	79fb      	ldrb	r3, [r7, #7]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d10d      	bne.n	800b46e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d009      	beq.n	800b46e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	68d9      	ldr	r1, [r3, #12]
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	015a      	lsls	r2, r3, #5
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	4413      	add	r3, r2
 800b466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b46a:	460a      	mov	r2, r1
 800b46c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	78db      	ldrb	r3, [r3, #3]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d128      	bne.n	800b4c8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b482:	2b00      	cmp	r3, #0
 800b484:	d110      	bne.n	800b4a8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	015a      	lsls	r2, r3, #5
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	4413      	add	r3, r2
 800b48e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	69ba      	ldr	r2, [r7, #24]
 800b496:	0151      	lsls	r1, r2, #5
 800b498:	69fa      	ldr	r2, [r7, #28]
 800b49a:	440a      	add	r2, r1
 800b49c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4a4:	6013      	str	r3, [r2, #0]
 800b4a6:	e00f      	b.n	800b4c8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	015a      	lsls	r2, r3, #5
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	69ba      	ldr	r2, [r7, #24]
 800b4b8:	0151      	lsls	r1, r2, #5
 800b4ba:	69fa      	ldr	r2, [r7, #28]
 800b4bc:	440a      	add	r2, r1
 800b4be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	015a      	lsls	r2, r3, #5
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	69ba      	ldr	r2, [r7, #24]
 800b4d8:	0151      	lsls	r1, r2, #5
 800b4da:	69fa      	ldr	r2, [r7, #28]
 800b4dc:	440a      	add	r2, r1
 800b4de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3720      	adds	r7, #32
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	1ff80000 	.word	0x1ff80000

0800b4f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b087      	sub	sp, #28
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	4613      	mov	r3, r2
 800b504:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	785b      	ldrb	r3, [r3, #1]
 800b514:	2b01      	cmp	r3, #1
 800b516:	f040 80cd 	bne.w	800b6b4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	695b      	ldr	r3, [r3, #20]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d132      	bne.n	800b588 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	015a      	lsls	r2, r3, #5
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	4413      	add	r3, r2
 800b52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	693a      	ldr	r2, [r7, #16]
 800b532:	0151      	lsls	r1, r2, #5
 800b534:	697a      	ldr	r2, [r7, #20]
 800b536:	440a      	add	r2, r1
 800b538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b53c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b540:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b544:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	015a      	lsls	r2, r3, #5
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	4413      	add	r3, r2
 800b54e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	693a      	ldr	r2, [r7, #16]
 800b556:	0151      	lsls	r1, r2, #5
 800b558:	697a      	ldr	r2, [r7, #20]
 800b55a:	440a      	add	r2, r1
 800b55c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b560:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b564:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	015a      	lsls	r2, r3, #5
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	693a      	ldr	r2, [r7, #16]
 800b576:	0151      	lsls	r1, r2, #5
 800b578:	697a      	ldr	r2, [r7, #20]
 800b57a:	440a      	add	r2, r1
 800b57c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b580:	0cdb      	lsrs	r3, r3, #19
 800b582:	04db      	lsls	r3, r3, #19
 800b584:	6113      	str	r3, [r2, #16]
 800b586:	e04e      	b.n	800b626 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	015a      	lsls	r2, r3, #5
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	4413      	add	r3, r2
 800b590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b594:	691b      	ldr	r3, [r3, #16]
 800b596:	693a      	ldr	r2, [r7, #16]
 800b598:	0151      	lsls	r1, r2, #5
 800b59a:	697a      	ldr	r2, [r7, #20]
 800b59c:	440a      	add	r2, r1
 800b59e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5a2:	0cdb      	lsrs	r3, r3, #19
 800b5a4:	04db      	lsls	r3, r3, #19
 800b5a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	015a      	lsls	r2, r3, #5
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5b4:	691b      	ldr	r3, [r3, #16]
 800b5b6:	693a      	ldr	r2, [r7, #16]
 800b5b8:	0151      	lsls	r1, r2, #5
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	440a      	add	r2, r1
 800b5be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b5c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b5ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	695a      	ldr	r2, [r3, #20]
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d903      	bls.n	800b5e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	689a      	ldr	r2, [r3, #8]
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	015a      	lsls	r2, r3, #5
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	693a      	ldr	r2, [r7, #16]
 800b5f0:	0151      	lsls	r1, r2, #5
 800b5f2:	697a      	ldr	r2, [r7, #20]
 800b5f4:	440a      	add	r2, r1
 800b5f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b5fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	015a      	lsls	r2, r3, #5
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	4413      	add	r3, r2
 800b608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b60c:	691a      	ldr	r2, [r3, #16]
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	695b      	ldr	r3, [r3, #20]
 800b612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b616:	6939      	ldr	r1, [r7, #16]
 800b618:	0148      	lsls	r0, r1, #5
 800b61a:	6979      	ldr	r1, [r7, #20]
 800b61c:	4401      	add	r1, r0
 800b61e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b622:	4313      	orrs	r3, r2
 800b624:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b626:	79fb      	ldrb	r3, [r7, #7]
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d11e      	bne.n	800b66a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d009      	beq.n	800b648 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	015a      	lsls	r2, r3, #5
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	4413      	add	r3, r2
 800b63c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b640:	461a      	mov	r2, r3
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	015a      	lsls	r2, r3, #5
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	4413      	add	r3, r2
 800b650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	693a      	ldr	r2, [r7, #16]
 800b658:	0151      	lsls	r1, r2, #5
 800b65a:	697a      	ldr	r2, [r7, #20]
 800b65c:	440a      	add	r2, r1
 800b65e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b662:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b666:	6013      	str	r3, [r2, #0]
 800b668:	e092      	b.n	800b790 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	015a      	lsls	r2, r3, #5
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	4413      	add	r3, r2
 800b672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	693a      	ldr	r2, [r7, #16]
 800b67a:	0151      	lsls	r1, r2, #5
 800b67c:	697a      	ldr	r2, [r7, #20]
 800b67e:	440a      	add	r2, r1
 800b680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b684:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b688:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	695b      	ldr	r3, [r3, #20]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d07e      	beq.n	800b790 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	f003 030f 	and.w	r3, r3, #15
 800b6a2:	2101      	movs	r1, #1
 800b6a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b6a8:	6979      	ldr	r1, [r7, #20]
 800b6aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	634b      	str	r3, [r1, #52]	; 0x34
 800b6b2:	e06d      	b.n	800b790 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	015a      	lsls	r2, r3, #5
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	693a      	ldr	r2, [r7, #16]
 800b6c4:	0151      	lsls	r1, r2, #5
 800b6c6:	697a      	ldr	r2, [r7, #20]
 800b6c8:	440a      	add	r2, r1
 800b6ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6ce:	0cdb      	lsrs	r3, r3, #19
 800b6d0:	04db      	lsls	r3, r3, #19
 800b6d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	015a      	lsls	r2, r3, #5
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	4413      	add	r3, r2
 800b6dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	693a      	ldr	r2, [r7, #16]
 800b6e4:	0151      	lsls	r1, r2, #5
 800b6e6:	697a      	ldr	r2, [r7, #20]
 800b6e8:	440a      	add	r2, r1
 800b6ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b6f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b6f6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	695b      	ldr	r3, [r3, #20]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d003      	beq.n	800b708 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	689a      	ldr	r2, [r3, #8]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	015a      	lsls	r2, r3, #5
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	4413      	add	r3, r2
 800b710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	693a      	ldr	r2, [r7, #16]
 800b718:	0151      	lsls	r1, r2, #5
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	440a      	add	r2, r1
 800b71e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b726:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	015a      	lsls	r2, r3, #5
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	4413      	add	r3, r2
 800b730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b734:	691a      	ldr	r2, [r3, #16]
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b73e:	6939      	ldr	r1, [r7, #16]
 800b740:	0148      	lsls	r0, r1, #5
 800b742:	6979      	ldr	r1, [r7, #20]
 800b744:	4401      	add	r1, r0
 800b746:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b74a:	4313      	orrs	r3, r2
 800b74c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b74e:	79fb      	ldrb	r3, [r7, #7]
 800b750:	2b01      	cmp	r3, #1
 800b752:	d10d      	bne.n	800b770 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d009      	beq.n	800b770 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	68d9      	ldr	r1, [r3, #12]
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	015a      	lsls	r2, r3, #5
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	4413      	add	r3, r2
 800b768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b76c:	460a      	mov	r2, r1
 800b76e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	015a      	lsls	r2, r3, #5
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	4413      	add	r3, r2
 800b778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	693a      	ldr	r2, [r7, #16]
 800b780:	0151      	lsls	r1, r2, #5
 800b782:	697a      	ldr	r2, [r7, #20]
 800b784:	440a      	add	r2, r1
 800b786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b78a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b78e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	371c      	adds	r7, #28
 800b796:	46bd      	mov	sp, r7
 800b798:	bc80      	pop	{r7}
 800b79a:	4770      	bx	lr

0800b79c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b089      	sub	sp, #36	; 0x24
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	4611      	mov	r1, r2
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	71fb      	strb	r3, [r7, #7]
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b7ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d123      	bne.n	800b80a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b7c2:	88bb      	ldrh	r3, [r7, #4]
 800b7c4:	3303      	adds	r3, #3
 800b7c6:	089b      	lsrs	r3, r3, #2
 800b7c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	61bb      	str	r3, [r7, #24]
 800b7ce:	e018      	b.n	800b802 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b7d0:	79fb      	ldrb	r3, [r7, #7]
 800b7d2:	031a      	lsls	r2, r3, #12
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7dc:	461a      	mov	r2, r3
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	3301      	adds	r3, #1
 800b800:	61bb      	str	r3, [r7, #24]
 800b802:	69ba      	ldr	r2, [r7, #24]
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	429a      	cmp	r2, r3
 800b808:	d3e2      	bcc.n	800b7d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3724      	adds	r7, #36	; 0x24
 800b810:	46bd      	mov	sp, r7
 800b812:	bc80      	pop	{r7}
 800b814:	4770      	bx	lr

0800b816 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b816:	b480      	push	{r7}
 800b818:	b08b      	sub	sp, #44	; 0x2c
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	60f8      	str	r0, [r7, #12]
 800b81e:	60b9      	str	r1, [r7, #8]
 800b820:	4613      	mov	r3, r2
 800b822:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b82c:	88fb      	ldrh	r3, [r7, #6]
 800b82e:	089b      	lsrs	r3, r3, #2
 800b830:	b29b      	uxth	r3, r3
 800b832:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b834:	88fb      	ldrh	r3, [r7, #6]
 800b836:	f003 0303 	and.w	r3, r3, #3
 800b83a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b83c:	2300      	movs	r3, #0
 800b83e:	623b      	str	r3, [r7, #32]
 800b840:	e014      	b.n	800b86c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84c:	601a      	str	r2, [r3, #0]
    pDest++;
 800b84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b850:	3301      	adds	r3, #1
 800b852:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	3301      	adds	r3, #1
 800b858:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85c:	3301      	adds	r3, #1
 800b85e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	3301      	adds	r3, #1
 800b864:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b866:	6a3b      	ldr	r3, [r7, #32]
 800b868:	3301      	adds	r3, #1
 800b86a:	623b      	str	r3, [r7, #32]
 800b86c:	6a3a      	ldr	r2, [r7, #32]
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	429a      	cmp	r2, r3
 800b872:	d3e6      	bcc.n	800b842 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b874:	8bfb      	ldrh	r3, [r7, #30]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d01e      	beq.n	800b8b8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b87a:	2300      	movs	r3, #0
 800b87c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b884:	461a      	mov	r2, r3
 800b886:	f107 0310 	add.w	r3, r7, #16
 800b88a:	6812      	ldr	r2, [r2, #0]
 800b88c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b88e:	693a      	ldr	r2, [r7, #16]
 800b890:	6a3b      	ldr	r3, [r7, #32]
 800b892:	b2db      	uxtb	r3, r3
 800b894:	00db      	lsls	r3, r3, #3
 800b896:	fa22 f303 	lsr.w	r3, r2, r3
 800b89a:	b2da      	uxtb	r2, r3
 800b89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89e:	701a      	strb	r2, [r3, #0]
      i++;
 800b8a0:	6a3b      	ldr	r3, [r7, #32]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	623b      	str	r3, [r7, #32]
      pDest++;
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b8ac:	8bfb      	ldrh	r3, [r7, #30]
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b8b2:	8bfb      	ldrh	r3, [r7, #30]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1ea      	bne.n	800b88e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	372c      	adds	r7, #44	; 0x2c
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bc80      	pop	{r7}
 800b8c2:	4770      	bx	lr

0800b8c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	785b      	ldrb	r3, [r3, #1]
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d12c      	bne.n	800b93a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	015a      	lsls	r2, r3, #5
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	db12      	blt.n	800b918 <USB_EPSetStall+0x54>
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00f      	beq.n	800b918 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	015a      	lsls	r2, r3, #5
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	4413      	add	r3, r2
 800b900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	0151      	lsls	r1, r2, #5
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	440a      	add	r2, r1
 800b90e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b912:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b916:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	015a      	lsls	r2, r3, #5
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	4413      	add	r3, r2
 800b920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	0151      	lsls	r1, r2, #5
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	440a      	add	r2, r1
 800b92e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b936:	6013      	str	r3, [r2, #0]
 800b938:	e02b      	b.n	800b992 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	015a      	lsls	r2, r3, #5
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	4413      	add	r3, r2
 800b942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	db12      	blt.n	800b972 <USB_EPSetStall+0xae>
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00f      	beq.n	800b972 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	015a      	lsls	r2, r3, #5
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	4413      	add	r3, r2
 800b95a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	0151      	lsls	r1, r2, #5
 800b964:	68fa      	ldr	r2, [r7, #12]
 800b966:	440a      	add	r2, r1
 800b968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b96c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b970:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	015a      	lsls	r2, r3, #5
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	4413      	add	r3, r2
 800b97a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	0151      	lsls	r1, r2, #5
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	440a      	add	r2, r1
 800b988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b98c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b990:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b992:	2300      	movs	r3, #0
}
 800b994:	4618      	mov	r0, r3
 800b996:	3714      	adds	r7, #20
 800b998:	46bd      	mov	sp, r7
 800b99a:	bc80      	pop	{r7}
 800b99c:	4770      	bx	lr

0800b99e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b085      	sub	sp, #20
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
 800b9a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	785b      	ldrb	r3, [r3, #1]
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d128      	bne.n	800ba0c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	015a      	lsls	r2, r3, #5
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	68ba      	ldr	r2, [r7, #8]
 800b9ca:	0151      	lsls	r1, r2, #5
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	440a      	add	r2, r1
 800b9d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b9d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	78db      	ldrb	r3, [r3, #3]
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	d003      	beq.n	800b9ea <USB_EPClearStall+0x4c>
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	78db      	ldrb	r3, [r3, #3]
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d138      	bne.n	800ba5c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	015a      	lsls	r2, r3, #5
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	0151      	lsls	r1, r2, #5
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	440a      	add	r2, r1
 800ba00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba08:	6013      	str	r3, [r2, #0]
 800ba0a:	e027      	b.n	800ba5c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	015a      	lsls	r2, r3, #5
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	4413      	add	r3, r2
 800ba14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	0151      	lsls	r1, r2, #5
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	440a      	add	r2, r1
 800ba22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	78db      	ldrb	r3, [r3, #3]
 800ba30:	2b03      	cmp	r3, #3
 800ba32:	d003      	beq.n	800ba3c <USB_EPClearStall+0x9e>
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	78db      	ldrb	r3, [r3, #3]
 800ba38:	2b02      	cmp	r3, #2
 800ba3a:	d10f      	bne.n	800ba5c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	015a      	lsls	r2, r3, #5
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	4413      	add	r3, r2
 800ba44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	0151      	lsls	r1, r2, #5
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	440a      	add	r2, r1
 800ba52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba5a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bc80      	pop	{r7}
 800ba66:	4770      	bx	lr

0800ba68 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	460b      	mov	r3, r1
 800ba72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba86:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ba8a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	78fb      	ldrb	r3, [r7, #3]
 800ba96:	011b      	lsls	r3, r3, #4
 800ba98:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ba9c:	68f9      	ldr	r1, [r7, #12]
 800ba9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800baa2:	4313      	orrs	r3, r2
 800baa4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3714      	adds	r7, #20
 800baac:	46bd      	mov	sp, r7
 800baae:	bc80      	pop	{r7}
 800bab0:	4770      	bx	lr

0800bab2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bab2:	b480      	push	{r7}
 800bab4:	b085      	sub	sp, #20
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bacc:	f023 0303 	bic.w	r3, r3, #3
 800bad0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bae0:	f023 0302 	bic.w	r3, r3, #2
 800bae4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3714      	adds	r7, #20
 800baec:	46bd      	mov	sp, r7
 800baee:	bc80      	pop	{r7}
 800baf0:	4770      	bx	lr

0800baf2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800baf2:	b480      	push	{r7}
 800baf4:	b085      	sub	sp, #20
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb0c:	f023 0303 	bic.w	r3, r3, #3
 800bb10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb20:	f043 0302 	orr.w	r3, r3, #2
 800bb24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3714      	adds	r7, #20
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bc80      	pop	{r7}
 800bb30:	4770      	bx	lr

0800bb32 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bb32:	b480      	push	{r7}
 800bb34:	b085      	sub	sp, #20
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	695b      	ldr	r3, [r3, #20]
 800bb3e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	699b      	ldr	r3, [r3, #24]
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	4013      	ands	r3, r2
 800bb48:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3714      	adds	r7, #20
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bc80      	pop	{r7}
 800bb54:	4770      	bx	lr

0800bb56 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb56:	b480      	push	{r7}
 800bb58:	b085      	sub	sp, #20
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb68:	699b      	ldr	r3, [r3, #24]
 800bb6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb72:	69db      	ldr	r3, [r3, #28]
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	4013      	ands	r3, r2
 800bb78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	0c1b      	lsrs	r3, r3, #16
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3714      	adds	r7, #20
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bc80      	pop	{r7}
 800bb86:	4770      	bx	lr

0800bb88 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb9a:	699b      	ldr	r3, [r3, #24]
 800bb9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bba4:	69db      	ldr	r3, [r3, #28]
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	4013      	ands	r3, r2
 800bbaa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	b29b      	uxth	r3, r3
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bc80      	pop	{r7}
 800bbb8:	4770      	bx	lr

0800bbba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bbba:	b480      	push	{r7}
 800bbbc:	b085      	sub	sp, #20
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bbca:	78fb      	ldrb	r3, [r7, #3]
 800bbcc:	015a      	lsls	r2, r3, #5
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbe0:	695b      	ldr	r3, [r3, #20]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	4013      	ands	r3, r2
 800bbe6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bbe8:	68bb      	ldr	r3, [r7, #8]
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3714      	adds	r7, #20
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bc80      	pop	{r7}
 800bbf2:	4770      	bx	lr

0800bbf4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc16:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bc18:	78fb      	ldrb	r3, [r7, #3]
 800bc1a:	f003 030f 	and.w	r3, r3, #15
 800bc1e:	68fa      	ldr	r2, [r7, #12]
 800bc20:	fa22 f303 	lsr.w	r3, r2, r3
 800bc24:	01db      	lsls	r3, r3, #7
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	693a      	ldr	r2, [r7, #16]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bc2e:	78fb      	ldrb	r3, [r7, #3]
 800bc30:	015a      	lsls	r2, r3, #5
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	4413      	add	r3, r2
 800bc36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	693a      	ldr	r2, [r7, #16]
 800bc3e:	4013      	ands	r3, r2
 800bc40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bc42:	68bb      	ldr	r3, [r7, #8]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	371c      	adds	r7, #28
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bc80      	pop	{r7}
 800bc4c:	4770      	bx	lr

0800bc4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b083      	sub	sp, #12
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	695b      	ldr	r3, [r3, #20]
 800bc5a:	f003 0301 	and.w	r3, r3, #1
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	370c      	adds	r7, #12
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bc80      	pop	{r7}
 800bc66:	4770      	bx	lr

0800bc68 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc82:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bc86:	f023 0307 	bic.w	r3, r3, #7
 800bc8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3714      	adds	r7, #20
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bc80      	pop	{r7}
 800bcaa:	4770      	bx	lr

0800bcac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b087      	sub	sp, #28
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	607a      	str	r2, [r7, #4]
 800bcb8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	333c      	adds	r3, #60	; 0x3c
 800bcc2:	3304      	adds	r3, #4
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	4a25      	ldr	r2, [pc, #148]	; (800bd60 <USB_EP0_OutStart+0xb4>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d90a      	bls.n	800bce6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bce0:	d101      	bne.n	800bce6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bce2:	2300      	movs	r3, #0
 800bce4:	e037      	b.n	800bd56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcec:	461a      	mov	r2, r3
 800bcee:	2300      	movs	r3, #0
 800bcf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd0c:	691b      	ldr	r3, [r3, #16]
 800bd0e:	697a      	ldr	r2, [r7, #20]
 800bd10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd14:	f043 0318 	orr.w	r3, r3, #24
 800bd18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	697a      	ldr	r2, [r7, #20]
 800bd24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd28:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bd2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bd2e:	7afb      	ldrb	r3, [r7, #11]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d10f      	bne.n	800bd54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	697a      	ldr	r2, [r7, #20]
 800bd4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd4e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bd52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	371c      	adds	r7, #28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bc80      	pop	{r7}
 800bd5e:	4770      	bx	lr
 800bd60:	4f54300a 	.word	0x4f54300a

0800bd64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	3301      	adds	r3, #1
 800bd74:	60fb      	str	r3, [r7, #12]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	4a12      	ldr	r2, [pc, #72]	; (800bdc4 <USB_CoreReset+0x60>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d901      	bls.n	800bd82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bd7e:	2303      	movs	r3, #3
 800bd80:	e01b      	b.n	800bdba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	691b      	ldr	r3, [r3, #16]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	daf2      	bge.n	800bd70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	691b      	ldr	r3, [r3, #16]
 800bd92:	f043 0201 	orr.w	r2, r3, #1
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	60fb      	str	r3, [r7, #12]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	4a08      	ldr	r2, [pc, #32]	; (800bdc4 <USB_CoreReset+0x60>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d901      	bls.n	800bdac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bda8:	2303      	movs	r3, #3
 800bdaa:	e006      	b.n	800bdba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	f003 0301 	and.w	r3, r3, #1
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d0f0      	beq.n	800bd9a <USB_CoreReset+0x36>

  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3714      	adds	r7, #20
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bc80      	pop	{r7}
 800bdc2:	4770      	bx	lr
 800bdc4:	00030d40 	.word	0x00030d40

0800bdc8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	7c1b      	ldrb	r3, [r3, #16]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d115      	bne.n	800be0c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bde0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bde4:	2202      	movs	r2, #2
 800bde6:	2181      	movs	r1, #129	; 0x81
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f001 ff48 	bl	800dc7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bdf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdf8:	2202      	movs	r2, #2
 800bdfa:	2101      	movs	r1, #1
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f001 ff3e 	bl	800dc7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2201      	movs	r2, #1
 800be06:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800be0a:	e012      	b.n	800be32 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800be0c:	2340      	movs	r3, #64	; 0x40
 800be0e:	2202      	movs	r2, #2
 800be10:	2181      	movs	r1, #129	; 0x81
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f001 ff33 	bl	800dc7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800be1e:	2340      	movs	r3, #64	; 0x40
 800be20:	2202      	movs	r2, #2
 800be22:	2101      	movs	r1, #1
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f001 ff2a 	bl	800dc7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800be32:	2308      	movs	r3, #8
 800be34:	2203      	movs	r2, #3
 800be36:	2182      	movs	r1, #130	; 0x82
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f001 ff20 	bl	800dc7e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2201      	movs	r2, #1
 800be42:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800be44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800be48:	f004 f9cc 	bl	80101e4 <malloc>
 800be4c:	4603      	mov	r3, r0
 800be4e:	461a      	mov	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d102      	bne.n	800be66 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800be60:	2301      	movs	r3, #1
 800be62:	73fb      	strb	r3, [r7, #15]
 800be64:	e026      	b.n	800beb4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be6c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	2200      	movs	r2, #0
 800be84:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	7c1b      	ldrb	r3, [r3, #16]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d109      	bne.n	800bea4 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be96:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be9a:	2101      	movs	r1, #1
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f001 ffde 	bl	800de5e <USBD_LL_PrepareReceive>
 800bea2:	e007      	b.n	800beb4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800beaa:	2340      	movs	r3, #64	; 0x40
 800beac:	2101      	movs	r1, #1
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f001 ffd5 	bl	800de5e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800beb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b084      	sub	sp, #16
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
 800bec6:	460b      	mov	r3, r1
 800bec8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800beca:	2300      	movs	r3, #0
 800becc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bece:	2181      	movs	r1, #129	; 0x81
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f001 fefa 	bl	800dcca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bedc:	2101      	movs	r1, #1
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f001 fef3 	bl	800dcca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800beec:	2182      	movs	r1, #130	; 0x82
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f001 feeb 	bl	800dcca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00e      	beq.n	800bf22 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf14:	4618      	mov	r0, r3
 800bf16:	f004 f96d 	bl	80101f4 <free>
    pdev->pClassData = NULL;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800bf22:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b086      	sub	sp, #24
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf3c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800bf42:	2300      	movs	r3, #0
 800bf44:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800bf46:	2300      	movs	r3, #0
 800bf48:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d039      	beq.n	800bfca <USBD_CDC_Setup+0x9e>
 800bf56:	2b20      	cmp	r3, #32
 800bf58:	d17f      	bne.n	800c05a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	88db      	ldrh	r3, [r3, #6]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d029      	beq.n	800bfb6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	b25b      	sxtb	r3, r3
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	da11      	bge.n	800bf90 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800bf78:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	88d2      	ldrh	r2, [r2, #6]
 800bf7e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bf80:	6939      	ldr	r1, [r7, #16]
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	88db      	ldrh	r3, [r3, #6]
 800bf86:	461a      	mov	r2, r3
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f001 fa42 	bl	800d412 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800bf8e:	e06b      	b.n	800c068 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	785a      	ldrb	r2, [r3, #1]
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	88db      	ldrh	r3, [r3, #6]
 800bf9e:	b2da      	uxtb	r2, r3
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bfa6:	6939      	ldr	r1, [r7, #16]
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	88db      	ldrh	r3, [r3, #6]
 800bfac:	461a      	mov	r2, r3
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f001 fa5d 	bl	800d46e <USBD_CtlPrepareRx>
      break;
 800bfb4:	e058      	b.n	800c068 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	683a      	ldr	r2, [r7, #0]
 800bfc0:	7850      	ldrb	r0, [r2, #1]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	4798      	blx	r3
      break;
 800bfc8:	e04e      	b.n	800c068 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	785b      	ldrb	r3, [r3, #1]
 800bfce:	2b0b      	cmp	r3, #11
 800bfd0:	d02e      	beq.n	800c030 <USBD_CDC_Setup+0x104>
 800bfd2:	2b0b      	cmp	r3, #11
 800bfd4:	dc38      	bgt.n	800c048 <USBD_CDC_Setup+0x11c>
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d002      	beq.n	800bfe0 <USBD_CDC_Setup+0xb4>
 800bfda:	2b0a      	cmp	r3, #10
 800bfdc:	d014      	beq.n	800c008 <USBD_CDC_Setup+0xdc>
 800bfde:	e033      	b.n	800c048 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfe6:	2b03      	cmp	r3, #3
 800bfe8:	d107      	bne.n	800bffa <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800bfea:	f107 030c 	add.w	r3, r7, #12
 800bfee:	2202      	movs	r2, #2
 800bff0:	4619      	mov	r1, r3
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f001 fa0d 	bl	800d412 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bff8:	e02e      	b.n	800c058 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f001 f99e 	bl	800d33e <USBD_CtlError>
            ret = USBD_FAIL;
 800c002:	2302      	movs	r3, #2
 800c004:	75fb      	strb	r3, [r7, #23]
          break;
 800c006:	e027      	b.n	800c058 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c00e:	2b03      	cmp	r3, #3
 800c010:	d107      	bne.n	800c022 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800c012:	f107 030f 	add.w	r3, r7, #15
 800c016:	2201      	movs	r2, #1
 800c018:	4619      	mov	r1, r3
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f001 f9f9 	bl	800d412 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c020:	e01a      	b.n	800c058 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c022:	6839      	ldr	r1, [r7, #0]
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f001 f98a 	bl	800d33e <USBD_CtlError>
            ret = USBD_FAIL;
 800c02a:	2302      	movs	r3, #2
 800c02c:	75fb      	strb	r3, [r7, #23]
          break;
 800c02e:	e013      	b.n	800c058 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c036:	2b03      	cmp	r3, #3
 800c038:	d00d      	beq.n	800c056 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f001 f97e 	bl	800d33e <USBD_CtlError>
            ret = USBD_FAIL;
 800c042:	2302      	movs	r3, #2
 800c044:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c046:	e006      	b.n	800c056 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f001 f977 	bl	800d33e <USBD_CtlError>
          ret = USBD_FAIL;
 800c050:	2302      	movs	r3, #2
 800c052:	75fb      	strb	r3, [r7, #23]
          break;
 800c054:	e000      	b.n	800c058 <USBD_CDC_Setup+0x12c>
          break;
 800c056:	bf00      	nop
      }
      break;
 800c058:	e006      	b.n	800c068 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f001 f96e 	bl	800d33e <USBD_CtlError>
      ret = USBD_FAIL;
 800c062:	2302      	movs	r3, #2
 800c064:	75fb      	strb	r3, [r7, #23]
      break;
 800c066:	bf00      	nop
  }

  return ret;
 800c068:	7dfb      	ldrb	r3, [r7, #23]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3718      	adds	r7, #24
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b084      	sub	sp, #16
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	460b      	mov	r3, r1
 800c07c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c084:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c08c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c094:	2b00      	cmp	r3, #0
 800c096:	d03a      	beq.n	800c10e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c098:	78fa      	ldrb	r2, [r7, #3]
 800c09a:	6879      	ldr	r1, [r7, #4]
 800c09c:	4613      	mov	r3, r2
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	4413      	add	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	440b      	add	r3, r1
 800c0a6:	331c      	adds	r3, #28
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d029      	beq.n	800c102 <USBD_CDC_DataIn+0x90>
 800c0ae:	78fa      	ldrb	r2, [r7, #3]
 800c0b0:	6879      	ldr	r1, [r7, #4]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	440b      	add	r3, r1
 800c0bc:	331c      	adds	r3, #28
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	78f9      	ldrb	r1, [r7, #3]
 800c0c2:	68b8      	ldr	r0, [r7, #8]
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	1a5b      	subs	r3, r3, r1
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	4403      	add	r3, r0
 800c0ce:	3344      	adds	r3, #68	; 0x44
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	fbb2 f1f3 	udiv	r1, r2, r3
 800c0d6:	fb03 f301 	mul.w	r3, r3, r1
 800c0da:	1ad3      	subs	r3, r2, r3
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d110      	bne.n	800c102 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c0e0:	78fa      	ldrb	r2, [r7, #3]
 800c0e2:	6879      	ldr	r1, [r7, #4]
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	4413      	add	r3, r2
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	440b      	add	r3, r1
 800c0ee:	331c      	adds	r3, #28
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c0f4:	78f9      	ldrb	r1, [r7, #3]
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f001 fe8c 	bl	800de18 <USBD_LL_Transmit>
 800c100:	e003      	b.n	800c10a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2200      	movs	r2, #0
 800c106:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800c10a:	2300      	movs	r3, #0
 800c10c:	e000      	b.n	800c110 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c10e:	2302      	movs	r3, #2
  }
}
 800c110:	4618      	mov	r0, r3
 800c112:	3710      	adds	r7, #16
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	460b      	mov	r3, r1
 800c122:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c12a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c12c:	78fb      	ldrb	r3, [r7, #3]
 800c12e:	4619      	mov	r1, r3
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f001 feb7 	bl	800dea4 <USBD_LL_GetRxDataSize>
 800c136:	4602      	mov	r2, r0
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c144:	2b00      	cmp	r3, #0
 800c146:	d00d      	beq.n	800c164 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c15c:	4611      	mov	r1, r2
 800c15e:	4798      	blx	r3

    return USBD_OK;
 800c160:	2300      	movs	r3, #0
 800c162:	e000      	b.n	800c166 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c164:	2302      	movs	r3, #2
  }
}
 800c166:	4618      	mov	r0, r3
 800c168:	3710      	adds	r7, #16
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b084      	sub	sp, #16
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c17c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c184:	2b00      	cmp	r3, #0
 800c186:	d015      	beq.n	800c1b4 <USBD_CDC_EP0_RxReady+0x46>
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c18e:	2bff      	cmp	r3, #255	; 0xff
 800c190:	d010      	beq.n	800c1b4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c1a0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c1a2:	68fa      	ldr	r2, [r7, #12]
 800c1a4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c1a8:	b292      	uxth	r2, r2
 800c1aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	22ff      	movs	r2, #255	; 0xff
 800c1b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
	...

0800c1c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2243      	movs	r2, #67	; 0x43
 800c1cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c1ce:	4b03      	ldr	r3, [pc, #12]	; (800c1dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bc80      	pop	{r7}
 800c1d8:	4770      	bx	lr
 800c1da:	bf00      	nop
 800c1dc:	200000d4 	.word	0x200000d4

0800c1e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2243      	movs	r2, #67	; 0x43
 800c1ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c1ee:	4b03      	ldr	r3, [pc, #12]	; (800c1fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bc80      	pop	{r7}
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	20000090 	.word	0x20000090

0800c200 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2243      	movs	r2, #67	; 0x43
 800c20c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c20e:	4b03      	ldr	r3, [pc, #12]	; (800c21c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c210:	4618      	mov	r0, r3
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	bc80      	pop	{r7}
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	20000118 	.word	0x20000118

0800c220 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	220a      	movs	r2, #10
 800c22c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c22e:	4b03      	ldr	r3, [pc, #12]	; (800c23c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c230:	4618      	mov	r0, r3
 800c232:	370c      	adds	r7, #12
 800c234:	46bd      	mov	sp, r7
 800c236:	bc80      	pop	{r7}
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	2000004c 	.word	0x2000004c

0800c240 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800c240:	b480      	push	{r7}
 800c242:	b085      	sub	sp, #20
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c24a:	2302      	movs	r3, #2
 800c24c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d005      	beq.n	800c260 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	683a      	ldr	r2, [r7, #0]
 800c258:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800c25c:	2300      	movs	r3, #0
 800c25e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c260:	7bfb      	ldrb	r3, [r7, #15]
}
 800c262:	4618      	mov	r0, r3
 800c264:	3714      	adds	r7, #20
 800c266:	46bd      	mov	sp, r7
 800c268:	bc80      	pop	{r7}
 800c26a:	4770      	bx	lr

0800c26c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b087      	sub	sp, #28
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	4613      	mov	r3, r2
 800c278:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c280:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c28a:	88fa      	ldrh	r2, [r7, #6]
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	371c      	adds	r7, #28
 800c298:	46bd      	mov	sp, r7
 800c29a:	bc80      	pop	{r7}
 800c29c:	4770      	bx	lr

0800c29e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c29e:	b480      	push	{r7}
 800c2a0:	b085      	sub	sp, #20
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
 800c2a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2ae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	683a      	ldr	r2, [r7, #0]
 800c2b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c2b8:	2300      	movs	r3, #0
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3714      	adds	r7, #20
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bc80      	pop	{r7}
 800c2c2:	4770      	bx	lr

0800c2c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d01c      	beq.n	800c318 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d115      	bne.n	800c314 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c306:	b29b      	uxth	r3, r3
 800c308:	2181      	movs	r1, #129	; 0x81
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f001 fd84 	bl	800de18 <USBD_LL_Transmit>

      return USBD_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	e002      	b.n	800c31a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c314:	2301      	movs	r3, #1
 800c316:	e000      	b.n	800c31a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c318:	2302      	movs	r3, #2
  }
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b084      	sub	sp, #16
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c330:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d017      	beq.n	800c36c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	7c1b      	ldrb	r3, [r3, #16]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d109      	bne.n	800c358 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c34a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c34e:	2101      	movs	r1, #1
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f001 fd84 	bl	800de5e <USBD_LL_PrepareReceive>
 800c356:	e007      	b.n	800c368 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c35e:	2340      	movs	r3, #64	; 0x40
 800c360:	2101      	movs	r1, #1
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f001 fd7b 	bl	800de5e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c368:	2300      	movs	r3, #0
 800c36a:	e000      	b.n	800c36e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c36c:	2302      	movs	r3, #2
  }
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b084      	sub	sp, #16
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	60b9      	str	r1, [r7, #8]
 800c380:	4613      	mov	r3, r2
 800c382:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d101      	bne.n	800c38e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c38a:	2302      	movs	r3, #2
 800c38c:	e01a      	b.n	800c3c4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c394:	2b00      	cmp	r3, #0
 800c396:	d003      	beq.n	800c3a0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	68ba      	ldr	r2, [r7, #8]
 800c3aa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	79fa      	ldrb	r2, [r7, #7]
 800c3ba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c3bc:	68f8      	ldr	r0, [r7, #12]
 800c3be:	f001 fbf9 	bl	800dbb4 <USBD_LL_Init>

  return USBD_OK;
 800c3c2:	2300      	movs	r3, #0
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3710      	adds	r7, #16
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d006      	beq.n	800c3ee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	683a      	ldr	r2, [r7, #0]
 800c3e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	73fb      	strb	r3, [r7, #15]
 800c3ec:	e001      	b.n	800c3f2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c3ee:	2302      	movs	r3, #2
 800c3f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c3f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3714      	adds	r7, #20
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bc80      	pop	{r7}
 800c3fc:	4770      	bx	lr

0800c3fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b082      	sub	sp, #8
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f001 fc1e 	bl	800dc48 <USBD_LL_Start>

  return USBD_OK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c416:	b480      	push	{r7}
 800c418:	b083      	sub	sp, #12
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	bc80      	pop	{r7}
 800c428:	4770      	bx	lr

0800c42a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b084      	sub	sp, #16
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
 800c432:	460b      	mov	r3, r1
 800c434:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c436:	2302      	movs	r3, #2
 800c438:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00c      	beq.n	800c45e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	78fa      	ldrb	r2, [r7, #3]
 800c44e:	4611      	mov	r1, r2
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	4798      	blx	r3
 800c454:	4603      	mov	r3, r0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d101      	bne.n	800c45e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c45a:	2300      	movs	r3, #0
 800c45c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	460b      	mov	r3, r1
 800c472:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	78fa      	ldrb	r2, [r7, #3]
 800c47e:	4611      	mov	r1, r2
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	4798      	blx	r3

  return USBD_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3708      	adds	r7, #8
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b082      	sub	sp, #8
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
 800c496:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c49e:	6839      	ldr	r1, [r7, #0]
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f000 ff10 	bl	800d2c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c4c2:	f003 031f 	and.w	r3, r3, #31
 800c4c6:	2b02      	cmp	r3, #2
 800c4c8:	d016      	beq.n	800c4f8 <USBD_LL_SetupStage+0x6a>
 800c4ca:	2b02      	cmp	r3, #2
 800c4cc:	d81c      	bhi.n	800c508 <USBD_LL_SetupStage+0x7a>
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d002      	beq.n	800c4d8 <USBD_LL_SetupStage+0x4a>
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d008      	beq.n	800c4e8 <USBD_LL_SetupStage+0x5a>
 800c4d6:	e017      	b.n	800c508 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c4de:	4619      	mov	r1, r3
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 fa03 	bl	800c8ec <USBD_StdDevReq>
      break;
 800c4e6:	e01a      	b.n	800c51e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 fa65 	bl	800c9c0 <USBD_StdItfReq>
      break;
 800c4f6:	e012      	b.n	800c51e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c4fe:	4619      	mov	r1, r3
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 faa5 	bl	800ca50 <USBD_StdEPReq>
      break;
 800c506:	e00a      	b.n	800c51e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c50e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c512:	b2db      	uxtb	r3, r3
 800c514:	4619      	mov	r1, r3
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f001 fbf6 	bl	800dd08 <USBD_LL_StallEP>
      break;
 800c51c:	bf00      	nop
  }

  return USBD_OK;
 800c51e:	2300      	movs	r3, #0
}
 800c520:	4618      	mov	r0, r3
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	460b      	mov	r3, r1
 800c532:	607a      	str	r2, [r7, #4]
 800c534:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c536:	7afb      	ldrb	r3, [r7, #11]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d14b      	bne.n	800c5d4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c542:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c54a:	2b03      	cmp	r3, #3
 800c54c:	d134      	bne.n	800c5b8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	68da      	ldr	r2, [r3, #12]
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	429a      	cmp	r2, r3
 800c558:	d919      	bls.n	800c58e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	68da      	ldr	r2, [r3, #12]
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	1ad2      	subs	r2, r2, r3
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	68da      	ldr	r2, [r3, #12]
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c570:	429a      	cmp	r2, r3
 800c572:	d203      	bcs.n	800c57c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c578:	b29b      	uxth	r3, r3
 800c57a:	e002      	b.n	800c582 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c580:	b29b      	uxth	r3, r3
 800c582:	461a      	mov	r2, r3
 800c584:	6879      	ldr	r1, [r7, #4]
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f000 ff8f 	bl	800d4aa <USBD_CtlContinueRx>
 800c58c:	e038      	b.n	800c600 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00a      	beq.n	800c5b0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c5a0:	2b03      	cmp	r3, #3
 800c5a2:	d105      	bne.n	800c5b0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5aa:	691b      	ldr	r3, [r3, #16]
 800c5ac:	68f8      	ldr	r0, [r7, #12]
 800c5ae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f000 ff8c 	bl	800d4ce <USBD_CtlSendStatus>
 800c5b6:	e023      	b.n	800c600 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c5be:	2b05      	cmp	r3, #5
 800c5c0:	d11e      	bne.n	800c600 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f001 fb9b 	bl	800dd08 <USBD_LL_StallEP>
 800c5d2:	e015      	b.n	800c600 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5da:	699b      	ldr	r3, [r3, #24]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00d      	beq.n	800c5fc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	d108      	bne.n	800c5fc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5f0:	699b      	ldr	r3, [r3, #24]
 800c5f2:	7afa      	ldrb	r2, [r7, #11]
 800c5f4:	4611      	mov	r1, r2
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	4798      	blx	r3
 800c5fa:	e001      	b.n	800c600 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c5fc:	2302      	movs	r3, #2
 800c5fe:	e000      	b.n	800c602 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3718      	adds	r7, #24
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b086      	sub	sp, #24
 800c60e:	af00      	add	r7, sp, #0
 800c610:	60f8      	str	r0, [r7, #12]
 800c612:	460b      	mov	r3, r1
 800c614:	607a      	str	r2, [r7, #4]
 800c616:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c618:	7afb      	ldrb	r3, [r7, #11]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d17f      	bne.n	800c71e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	3314      	adds	r3, #20
 800c622:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d15c      	bne.n	800c6e8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	68da      	ldr	r2, [r3, #12]
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	429a      	cmp	r2, r3
 800c638:	d915      	bls.n	800c666 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	68da      	ldr	r2, [r3, #12]
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	1ad2      	subs	r2, r2, r3
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	461a      	mov	r2, r3
 800c650:	6879      	ldr	r1, [r7, #4]
 800c652:	68f8      	ldr	r0, [r7, #12]
 800c654:	f000 fef9 	bl	800d44a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c658:	2300      	movs	r3, #0
 800c65a:	2200      	movs	r2, #0
 800c65c:	2100      	movs	r1, #0
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f001 fbfd 	bl	800de5e <USBD_LL_PrepareReceive>
 800c664:	e04e      	b.n	800c704 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	697a      	ldr	r2, [r7, #20]
 800c66c:	6912      	ldr	r2, [r2, #16]
 800c66e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c672:	fb02 f201 	mul.w	r2, r2, r1
 800c676:	1a9b      	subs	r3, r3, r2
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d11c      	bne.n	800c6b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	689a      	ldr	r2, [r3, #8]
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c684:	429a      	cmp	r2, r3
 800c686:	d316      	bcc.n	800c6b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	689a      	ldr	r2, [r3, #8]
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c692:	429a      	cmp	r2, r3
 800c694:	d20f      	bcs.n	800c6b6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c696:	2200      	movs	r2, #0
 800c698:	2100      	movs	r1, #0
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	f000 fed5 	bl	800d44a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f001 fbd5 	bl	800de5e <USBD_LL_PrepareReceive>
 800c6b4:	e026      	b.n	800c704 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00a      	beq.n	800c6d8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c6c8:	2b03      	cmp	r3, #3
 800c6ca:	d105      	bne.n	800c6d8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c6d8:	2180      	movs	r1, #128	; 0x80
 800c6da:	68f8      	ldr	r0, [r7, #12]
 800c6dc:	f001 fb14 	bl	800dd08 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f000 ff07 	bl	800d4f4 <USBD_CtlReceiveStatus>
 800c6e6:	e00d      	b.n	800c704 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c6ee:	2b04      	cmp	r3, #4
 800c6f0:	d004      	beq.n	800c6fc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d103      	bne.n	800c704 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c6fc:	2180      	movs	r1, #128	; 0x80
 800c6fe:	68f8      	ldr	r0, [r7, #12]
 800c700:	f001 fb02 	bl	800dd08 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d11d      	bne.n	800c74a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c70e:	68f8      	ldr	r0, [r7, #12]
 800c710:	f7ff fe81 	bl	800c416 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2200      	movs	r2, #0
 800c718:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c71c:	e015      	b.n	800c74a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c724:	695b      	ldr	r3, [r3, #20]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00d      	beq.n	800c746 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c730:	2b03      	cmp	r3, #3
 800c732:	d108      	bne.n	800c746 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c73a:	695b      	ldr	r3, [r3, #20]
 800c73c:	7afa      	ldrb	r2, [r7, #11]
 800c73e:	4611      	mov	r1, r2
 800c740:	68f8      	ldr	r0, [r7, #12]
 800c742:	4798      	blx	r3
 800c744:	e001      	b.n	800c74a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c746:	2302      	movs	r3, #2
 800c748:	e000      	b.n	800c74c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3718      	adds	r7, #24
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c75c:	2340      	movs	r3, #64	; 0x40
 800c75e:	2200      	movs	r2, #0
 800c760:	2100      	movs	r1, #0
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f001 fa8b 	bl	800dc7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2240      	movs	r2, #64	; 0x40
 800c774:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c778:	2340      	movs	r3, #64	; 0x40
 800c77a:	2200      	movs	r2, #0
 800c77c:	2180      	movs	r1, #128	; 0x80
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f001 fa7d 	bl	800dc7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2201      	movs	r2, #1
 800c788:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2240      	movs	r2, #64	; 0x40
 800c78e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d009      	beq.n	800c7cc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	6852      	ldr	r2, [r2, #4]
 800c7c4:	b2d2      	uxtb	r2, r2
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	4798      	blx	r3
  }

  return USBD_OK;
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c7d6:	b480      	push	{r7}
 800c7d8:	b083      	sub	sp, #12
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
 800c7de:	460b      	mov	r3, r1
 800c7e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	78fa      	ldrb	r2, [r7, #3]
 800c7e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c7e8:	2300      	movs	r3, #0
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	370c      	adds	r7, #12
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bc80      	pop	{r7}
 800c7f2:	4770      	bx	lr

0800c7f4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2204      	movs	r2, #4
 800c80c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	370c      	adds	r7, #12
 800c816:	46bd      	mov	sp, r7
 800c818:	bc80      	pop	{r7}
 800c81a:	4770      	bx	lr

0800c81c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c82a:	2b04      	cmp	r3, #4
 800c82c:	d105      	bne.n	800c83a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	370c      	adds	r7, #12
 800c840:	46bd      	mov	sp, r7
 800c842:	bc80      	pop	{r7}
 800c844:	4770      	bx	lr

0800c846 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b082      	sub	sp, #8
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c854:	2b03      	cmp	r3, #3
 800c856:	d10b      	bne.n	800c870 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c85e:	69db      	ldr	r3, [r3, #28]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d005      	beq.n	800c870 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c86a:	69db      	ldr	r3, [r3, #28]
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c87a:	b480      	push	{r7}
 800c87c:	b083      	sub	sp, #12
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
 800c882:	460b      	mov	r3, r1
 800c884:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c886:	2300      	movs	r3, #0
}
 800c888:	4618      	mov	r0, r3
 800c88a:	370c      	adds	r7, #12
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bc80      	pop	{r7}
 800c890:	4770      	bx	lr

0800c892 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c892:	b480      	push	{r7}
 800c894:	b083      	sub	sp, #12
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	460b      	mov	r3, r1
 800c89c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	370c      	adds	r7, #12
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bc80      	pop	{r7}
 800c8a8:	4770      	bx	lr

0800c8aa <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c8aa:	b480      	push	{r7}
 800c8ac:	b083      	sub	sp, #12
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	370c      	adds	r7, #12
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bc80      	pop	{r7}
 800c8bc:	4770      	bx	lr

0800c8be <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b082      	sub	sp, #8
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	6852      	ldr	r2, [r2, #4]
 800c8da:	b2d2      	uxtb	r2, r2
 800c8dc:	4611      	mov	r1, r2
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	4798      	blx	r3

  return USBD_OK;
 800c8e2:	2300      	movs	r3, #0
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c902:	2b40      	cmp	r3, #64	; 0x40
 800c904:	d005      	beq.n	800c912 <USBD_StdDevReq+0x26>
 800c906:	2b40      	cmp	r3, #64	; 0x40
 800c908:	d84f      	bhi.n	800c9aa <USBD_StdDevReq+0xbe>
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d009      	beq.n	800c922 <USBD_StdDevReq+0x36>
 800c90e:	2b20      	cmp	r3, #32
 800c910:	d14b      	bne.n	800c9aa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	6839      	ldr	r1, [r7, #0]
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	4798      	blx	r3
      break;
 800c920:	e048      	b.n	800c9b4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	785b      	ldrb	r3, [r3, #1]
 800c926:	2b09      	cmp	r3, #9
 800c928:	d839      	bhi.n	800c99e <USBD_StdDevReq+0xb2>
 800c92a:	a201      	add	r2, pc, #4	; (adr r2, 800c930 <USBD_StdDevReq+0x44>)
 800c92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c930:	0800c981 	.word	0x0800c981
 800c934:	0800c995 	.word	0x0800c995
 800c938:	0800c99f 	.word	0x0800c99f
 800c93c:	0800c98b 	.word	0x0800c98b
 800c940:	0800c99f 	.word	0x0800c99f
 800c944:	0800c963 	.word	0x0800c963
 800c948:	0800c959 	.word	0x0800c959
 800c94c:	0800c99f 	.word	0x0800c99f
 800c950:	0800c977 	.word	0x0800c977
 800c954:	0800c96d 	.word	0x0800c96d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c958:	6839      	ldr	r1, [r7, #0]
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 f9dc 	bl	800cd18 <USBD_GetDescriptor>
          break;
 800c960:	e022      	b.n	800c9a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c962:	6839      	ldr	r1, [r7, #0]
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 fb3f 	bl	800cfe8 <USBD_SetAddress>
          break;
 800c96a:	e01d      	b.n	800c9a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c96c:	6839      	ldr	r1, [r7, #0]
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 fb7e 	bl	800d070 <USBD_SetConfig>
          break;
 800c974:	e018      	b.n	800c9a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c976:	6839      	ldr	r1, [r7, #0]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 fc07 	bl	800d18c <USBD_GetConfig>
          break;
 800c97e:	e013      	b.n	800c9a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c980:	6839      	ldr	r1, [r7, #0]
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 fc37 	bl	800d1f6 <USBD_GetStatus>
          break;
 800c988:	e00e      	b.n	800c9a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c98a:	6839      	ldr	r1, [r7, #0]
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 fc65 	bl	800d25c <USBD_SetFeature>
          break;
 800c992:	e009      	b.n	800c9a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c994:	6839      	ldr	r1, [r7, #0]
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 fc74 	bl	800d284 <USBD_ClrFeature>
          break;
 800c99c:	e004      	b.n	800c9a8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c99e:	6839      	ldr	r1, [r7, #0]
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 fccc 	bl	800d33e <USBD_CtlError>
          break;
 800c9a6:	bf00      	nop
      }
      break;
 800c9a8:	e004      	b.n	800c9b4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c9aa:	6839      	ldr	r1, [r7, #0]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fcc6 	bl	800d33e <USBD_CtlError>
      break;
 800c9b2:	bf00      	nop
  }

  return ret;
 800c9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop

0800c9c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9d6:	2b40      	cmp	r3, #64	; 0x40
 800c9d8:	d005      	beq.n	800c9e6 <USBD_StdItfReq+0x26>
 800c9da:	2b40      	cmp	r3, #64	; 0x40
 800c9dc:	d82e      	bhi.n	800ca3c <USBD_StdItfReq+0x7c>
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d001      	beq.n	800c9e6 <USBD_StdItfReq+0x26>
 800c9e2:	2b20      	cmp	r3, #32
 800c9e4:	d12a      	bne.n	800ca3c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9ec:	3b01      	subs	r3, #1
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d81d      	bhi.n	800ca2e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	889b      	ldrh	r3, [r3, #4]
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d813      	bhi.n	800ca24 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	6839      	ldr	r1, [r7, #0]
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	4798      	blx	r3
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	88db      	ldrh	r3, [r3, #6]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d110      	bne.n	800ca38 <USBD_StdItfReq+0x78>
 800ca16:	7bfb      	ldrb	r3, [r7, #15]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10d      	bne.n	800ca38 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 fd56 	bl	800d4ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ca22:	e009      	b.n	800ca38 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800ca24:	6839      	ldr	r1, [r7, #0]
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 fc89 	bl	800d33e <USBD_CtlError>
          break;
 800ca2c:	e004      	b.n	800ca38 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800ca2e:	6839      	ldr	r1, [r7, #0]
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 fc84 	bl	800d33e <USBD_CtlError>
          break;
 800ca36:	e000      	b.n	800ca3a <USBD_StdItfReq+0x7a>
          break;
 800ca38:	bf00      	nop
      }
      break;
 800ca3a:	e004      	b.n	800ca46 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800ca3c:	6839      	ldr	r1, [r7, #0]
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fc7d 	bl	800d33e <USBD_CtlError>
      break;
 800ca44:	bf00      	nop
  }

  return USBD_OK;
 800ca46:	2300      	movs	r3, #0
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b084      	sub	sp, #16
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	889b      	ldrh	r3, [r3, #4]
 800ca62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca6c:	2b40      	cmp	r3, #64	; 0x40
 800ca6e:	d007      	beq.n	800ca80 <USBD_StdEPReq+0x30>
 800ca70:	2b40      	cmp	r3, #64	; 0x40
 800ca72:	f200 8146 	bhi.w	800cd02 <USBD_StdEPReq+0x2b2>
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00a      	beq.n	800ca90 <USBD_StdEPReq+0x40>
 800ca7a:	2b20      	cmp	r3, #32
 800ca7c:	f040 8141 	bne.w	800cd02 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	6839      	ldr	r1, [r7, #0]
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	4798      	blx	r3
      break;
 800ca8e:	e13d      	b.n	800cd0c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca98:	2b20      	cmp	r3, #32
 800ca9a:	d10a      	bne.n	800cab2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	6839      	ldr	r1, [r7, #0]
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	4798      	blx	r3
 800caaa:	4603      	mov	r3, r0
 800caac:	73fb      	strb	r3, [r7, #15]

        return ret;
 800caae:	7bfb      	ldrb	r3, [r7, #15]
 800cab0:	e12d      	b.n	800cd0e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	785b      	ldrb	r3, [r3, #1]
 800cab6:	2b03      	cmp	r3, #3
 800cab8:	d007      	beq.n	800caca <USBD_StdEPReq+0x7a>
 800caba:	2b03      	cmp	r3, #3
 800cabc:	f300 811b 	bgt.w	800ccf6 <USBD_StdEPReq+0x2a6>
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d072      	beq.n	800cbaa <USBD_StdEPReq+0x15a>
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d03a      	beq.n	800cb3e <USBD_StdEPReq+0xee>
 800cac8:	e115      	b.n	800ccf6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cad0:	2b02      	cmp	r3, #2
 800cad2:	d002      	beq.n	800cada <USBD_StdEPReq+0x8a>
 800cad4:	2b03      	cmp	r3, #3
 800cad6:	d015      	beq.n	800cb04 <USBD_StdEPReq+0xb4>
 800cad8:	e02b      	b.n	800cb32 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cada:	7bbb      	ldrb	r3, [r7, #14]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d00c      	beq.n	800cafa <USBD_StdEPReq+0xaa>
 800cae0:	7bbb      	ldrb	r3, [r7, #14]
 800cae2:	2b80      	cmp	r3, #128	; 0x80
 800cae4:	d009      	beq.n	800cafa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800cae6:	7bbb      	ldrb	r3, [r7, #14]
 800cae8:	4619      	mov	r1, r3
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f001 f90c 	bl	800dd08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800caf0:	2180      	movs	r1, #128	; 0x80
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f001 f908 	bl	800dd08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800caf8:	e020      	b.n	800cb3c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800cafa:	6839      	ldr	r1, [r7, #0]
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 fc1e 	bl	800d33e <USBD_CtlError>
              break;
 800cb02:	e01b      	b.n	800cb3c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	885b      	ldrh	r3, [r3, #2]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d10e      	bne.n	800cb2a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800cb0c:	7bbb      	ldrb	r3, [r7, #14]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00b      	beq.n	800cb2a <USBD_StdEPReq+0xda>
 800cb12:	7bbb      	ldrb	r3, [r7, #14]
 800cb14:	2b80      	cmp	r3, #128	; 0x80
 800cb16:	d008      	beq.n	800cb2a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	88db      	ldrh	r3, [r3, #6]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d104      	bne.n	800cb2a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800cb20:	7bbb      	ldrb	r3, [r7, #14]
 800cb22:	4619      	mov	r1, r3
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f001 f8ef 	bl	800dd08 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 fccf 	bl	800d4ce <USBD_CtlSendStatus>

              break;
 800cb30:	e004      	b.n	800cb3c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800cb32:	6839      	ldr	r1, [r7, #0]
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 fc02 	bl	800d33e <USBD_CtlError>
              break;
 800cb3a:	bf00      	nop
          }
          break;
 800cb3c:	e0e0      	b.n	800cd00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb44:	2b02      	cmp	r3, #2
 800cb46:	d002      	beq.n	800cb4e <USBD_StdEPReq+0xfe>
 800cb48:	2b03      	cmp	r3, #3
 800cb4a:	d015      	beq.n	800cb78 <USBD_StdEPReq+0x128>
 800cb4c:	e026      	b.n	800cb9c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb4e:	7bbb      	ldrb	r3, [r7, #14]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d00c      	beq.n	800cb6e <USBD_StdEPReq+0x11e>
 800cb54:	7bbb      	ldrb	r3, [r7, #14]
 800cb56:	2b80      	cmp	r3, #128	; 0x80
 800cb58:	d009      	beq.n	800cb6e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800cb5a:	7bbb      	ldrb	r3, [r7, #14]
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f001 f8d2 	bl	800dd08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800cb64:	2180      	movs	r1, #128	; 0x80
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f001 f8ce 	bl	800dd08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb6c:	e01c      	b.n	800cba8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800cb6e:	6839      	ldr	r1, [r7, #0]
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 fbe4 	bl	800d33e <USBD_CtlError>
              break;
 800cb76:	e017      	b.n	800cba8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	885b      	ldrh	r3, [r3, #2]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d112      	bne.n	800cba6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cb80:	7bbb      	ldrb	r3, [r7, #14]
 800cb82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d004      	beq.n	800cb94 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800cb8a:	7bbb      	ldrb	r3, [r7, #14]
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f001 f8d9 	bl	800dd46 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 fc9a 	bl	800d4ce <USBD_CtlSendStatus>
              }
              break;
 800cb9a:	e004      	b.n	800cba6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800cb9c:	6839      	ldr	r1, [r7, #0]
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 fbcd 	bl	800d33e <USBD_CtlError>
              break;
 800cba4:	e000      	b.n	800cba8 <USBD_StdEPReq+0x158>
              break;
 800cba6:	bf00      	nop
          }
          break;
 800cba8:	e0aa      	b.n	800cd00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbb0:	2b02      	cmp	r3, #2
 800cbb2:	d002      	beq.n	800cbba <USBD_StdEPReq+0x16a>
 800cbb4:	2b03      	cmp	r3, #3
 800cbb6:	d032      	beq.n	800cc1e <USBD_StdEPReq+0x1ce>
 800cbb8:	e097      	b.n	800ccea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbba:	7bbb      	ldrb	r3, [r7, #14]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d007      	beq.n	800cbd0 <USBD_StdEPReq+0x180>
 800cbc0:	7bbb      	ldrb	r3, [r7, #14]
 800cbc2:	2b80      	cmp	r3, #128	; 0x80
 800cbc4:	d004      	beq.n	800cbd0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800cbc6:	6839      	ldr	r1, [r7, #0]
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 fbb8 	bl	800d33e <USBD_CtlError>
                break;
 800cbce:	e091      	b.n	800ccf4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	da0b      	bge.n	800cbf0 <USBD_StdEPReq+0x1a0>
 800cbd8:	7bbb      	ldrb	r3, [r7, #14]
 800cbda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbde:	4613      	mov	r3, r2
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	4413      	add	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	3310      	adds	r3, #16
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	4413      	add	r3, r2
 800cbec:	3304      	adds	r3, #4
 800cbee:	e00b      	b.n	800cc08 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbf0:	7bbb      	ldrb	r3, [r7, #14]
 800cbf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	4413      	add	r3, r2
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	4413      	add	r3, r2
 800cc06:	3304      	adds	r3, #4
 800cc08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	2202      	movs	r2, #2
 800cc14:	4619      	mov	r1, r3
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 fbfb 	bl	800d412 <USBD_CtlSendData>
              break;
 800cc1c:	e06a      	b.n	800ccf4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cc1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	da11      	bge.n	800cc4a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc26:	7bbb      	ldrb	r3, [r7, #14]
 800cc28:	f003 020f 	and.w	r2, r3, #15
 800cc2c:	6879      	ldr	r1, [r7, #4]
 800cc2e:	4613      	mov	r3, r2
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	4413      	add	r3, r2
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	440b      	add	r3, r1
 800cc38:	3318      	adds	r3, #24
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d117      	bne.n	800cc70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800cc40:	6839      	ldr	r1, [r7, #0]
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 fb7b 	bl	800d33e <USBD_CtlError>
                  break;
 800cc48:	e054      	b.n	800ccf4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cc4a:	7bbb      	ldrb	r3, [r7, #14]
 800cc4c:	f003 020f 	and.w	r2, r3, #15
 800cc50:	6879      	ldr	r1, [r7, #4]
 800cc52:	4613      	mov	r3, r2
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	4413      	add	r3, r2
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	440b      	add	r3, r1
 800cc5c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d104      	bne.n	800cc70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800cc66:	6839      	ldr	r1, [r7, #0]
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 fb68 	bl	800d33e <USBD_CtlError>
                  break;
 800cc6e:	e041      	b.n	800ccf4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	da0b      	bge.n	800cc90 <USBD_StdEPReq+0x240>
 800cc78:	7bbb      	ldrb	r3, [r7, #14]
 800cc7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc7e:	4613      	mov	r3, r2
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	4413      	add	r3, r2
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	3310      	adds	r3, #16
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	3304      	adds	r3, #4
 800cc8e:	e00b      	b.n	800cca8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc90:	7bbb      	ldrb	r3, [r7, #14]
 800cc92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc96:	4613      	mov	r3, r2
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	4413      	add	r3, r2
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	4413      	add	r3, r2
 800cca6:	3304      	adds	r3, #4
 800cca8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ccaa:	7bbb      	ldrb	r3, [r7, #14]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d002      	beq.n	800ccb6 <USBD_StdEPReq+0x266>
 800ccb0:	7bbb      	ldrb	r3, [r7, #14]
 800ccb2:	2b80      	cmp	r3, #128	; 0x80
 800ccb4:	d103      	bne.n	800ccbe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	601a      	str	r2, [r3, #0]
 800ccbc:	e00e      	b.n	800ccdc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ccbe:	7bbb      	ldrb	r3, [r7, #14]
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f001 f85e 	bl	800dd84 <USBD_LL_IsStallEP>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d003      	beq.n	800ccd6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	e002      	b.n	800ccdc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	2202      	movs	r2, #2
 800cce0:	4619      	mov	r1, r3
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 fb95 	bl	800d412 <USBD_CtlSendData>
              break;
 800cce8:	e004      	b.n	800ccf4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ccea:	6839      	ldr	r1, [r7, #0]
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 fb26 	bl	800d33e <USBD_CtlError>
              break;
 800ccf2:	bf00      	nop
          }
          break;
 800ccf4:	e004      	b.n	800cd00 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ccf6:	6839      	ldr	r1, [r7, #0]
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f000 fb20 	bl	800d33e <USBD_CtlError>
          break;
 800ccfe:	bf00      	nop
      }
      break;
 800cd00:	e004      	b.n	800cd0c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800cd02:	6839      	ldr	r1, [r7, #0]
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 fb1a 	bl	800d33e <USBD_CtlError>
      break;
 800cd0a:	bf00      	nop
  }

  return ret;
 800cd0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
	...

0800cd18 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd22:	2300      	movs	r3, #0
 800cd24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cd26:	2300      	movs	r3, #0
 800cd28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	885b      	ldrh	r3, [r3, #2]
 800cd32:	0a1b      	lsrs	r3, r3, #8
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	3b01      	subs	r3, #1
 800cd38:	2b06      	cmp	r3, #6
 800cd3a:	f200 8128 	bhi.w	800cf8e <USBD_GetDescriptor+0x276>
 800cd3e:	a201      	add	r2, pc, #4	; (adr r2, 800cd44 <USBD_GetDescriptor+0x2c>)
 800cd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd44:	0800cd61 	.word	0x0800cd61
 800cd48:	0800cd79 	.word	0x0800cd79
 800cd4c:	0800cdb9 	.word	0x0800cdb9
 800cd50:	0800cf8f 	.word	0x0800cf8f
 800cd54:	0800cf8f 	.word	0x0800cf8f
 800cd58:	0800cf2f 	.word	0x0800cf2f
 800cd5c:	0800cf5b 	.word	0x0800cf5b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	7c12      	ldrb	r2, [r2, #16]
 800cd6c:	f107 0108 	add.w	r1, r7, #8
 800cd70:	4610      	mov	r0, r2
 800cd72:	4798      	blx	r3
 800cd74:	60f8      	str	r0, [r7, #12]
      break;
 800cd76:	e112      	b.n	800cf9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	7c1b      	ldrb	r3, [r3, #16]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d10d      	bne.n	800cd9c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd88:	f107 0208 	add.w	r2, r7, #8
 800cd8c:	4610      	mov	r0, r2
 800cd8e:	4798      	blx	r3
 800cd90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	3301      	adds	r3, #1
 800cd96:	2202      	movs	r2, #2
 800cd98:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cd9a:	e100      	b.n	800cf9e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda4:	f107 0208 	add.w	r2, r7, #8
 800cda8:	4610      	mov	r0, r2
 800cdaa:	4798      	blx	r3
 800cdac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	2202      	movs	r2, #2
 800cdb4:	701a      	strb	r2, [r3, #0]
      break;
 800cdb6:	e0f2      	b.n	800cf9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	885b      	ldrh	r3, [r3, #2]
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	2b05      	cmp	r3, #5
 800cdc0:	f200 80ac 	bhi.w	800cf1c <USBD_GetDescriptor+0x204>
 800cdc4:	a201      	add	r2, pc, #4	; (adr r2, 800cdcc <USBD_GetDescriptor+0xb4>)
 800cdc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdca:	bf00      	nop
 800cdcc:	0800cde5 	.word	0x0800cde5
 800cdd0:	0800ce19 	.word	0x0800ce19
 800cdd4:	0800ce4d 	.word	0x0800ce4d
 800cdd8:	0800ce81 	.word	0x0800ce81
 800cddc:	0800ceb5 	.word	0x0800ceb5
 800cde0:	0800cee9 	.word	0x0800cee9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00b      	beq.n	800ce08 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	7c12      	ldrb	r2, [r2, #16]
 800cdfc:	f107 0108 	add.w	r1, r7, #8
 800ce00:	4610      	mov	r0, r2
 800ce02:	4798      	blx	r3
 800ce04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce06:	e091      	b.n	800cf2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce08:	6839      	ldr	r1, [r7, #0]
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 fa97 	bl	800d33e <USBD_CtlError>
            err++;
 800ce10:	7afb      	ldrb	r3, [r7, #11]
 800ce12:	3301      	adds	r3, #1
 800ce14:	72fb      	strb	r3, [r7, #11]
          break;
 800ce16:	e089      	b.n	800cf2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d00b      	beq.n	800ce3c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ce2a:	689b      	ldr	r3, [r3, #8]
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	7c12      	ldrb	r2, [r2, #16]
 800ce30:	f107 0108 	add.w	r1, r7, #8
 800ce34:	4610      	mov	r0, r2
 800ce36:	4798      	blx	r3
 800ce38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce3a:	e077      	b.n	800cf2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce3c:	6839      	ldr	r1, [r7, #0]
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 fa7d 	bl	800d33e <USBD_CtlError>
            err++;
 800ce44:	7afb      	ldrb	r3, [r7, #11]
 800ce46:	3301      	adds	r3, #1
 800ce48:	72fb      	strb	r3, [r7, #11]
          break;
 800ce4a:	e06f      	b.n	800cf2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d00b      	beq.n	800ce70 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	7c12      	ldrb	r2, [r2, #16]
 800ce64:	f107 0108 	add.w	r1, r7, #8
 800ce68:	4610      	mov	r0, r2
 800ce6a:	4798      	blx	r3
 800ce6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce6e:	e05d      	b.n	800cf2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce70:	6839      	ldr	r1, [r7, #0]
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 fa63 	bl	800d33e <USBD_CtlError>
            err++;
 800ce78:	7afb      	ldrb	r3, [r7, #11]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce7e:	e055      	b.n	800cf2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ce86:	691b      	ldr	r3, [r3, #16]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00b      	beq.n	800cea4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ce92:	691b      	ldr	r3, [r3, #16]
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	7c12      	ldrb	r2, [r2, #16]
 800ce98:	f107 0108 	add.w	r1, r7, #8
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	4798      	blx	r3
 800cea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cea2:	e043      	b.n	800cf2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cea4:	6839      	ldr	r1, [r7, #0]
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 fa49 	bl	800d33e <USBD_CtlError>
            err++;
 800ceac:	7afb      	ldrb	r3, [r7, #11]
 800ceae:	3301      	adds	r3, #1
 800ceb0:	72fb      	strb	r3, [r7, #11]
          break;
 800ceb2:	e03b      	b.n	800cf2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ceba:	695b      	ldr	r3, [r3, #20]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00b      	beq.n	800ced8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cec6:	695b      	ldr	r3, [r3, #20]
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	7c12      	ldrb	r2, [r2, #16]
 800cecc:	f107 0108 	add.w	r1, r7, #8
 800ced0:	4610      	mov	r0, r2
 800ced2:	4798      	blx	r3
 800ced4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ced6:	e029      	b.n	800cf2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ced8:	6839      	ldr	r1, [r7, #0]
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 fa2f 	bl	800d33e <USBD_CtlError>
            err++;
 800cee0:	7afb      	ldrb	r3, [r7, #11]
 800cee2:	3301      	adds	r3, #1
 800cee4:	72fb      	strb	r3, [r7, #11]
          break;
 800cee6:	e021      	b.n	800cf2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ceee:	699b      	ldr	r3, [r3, #24]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00b      	beq.n	800cf0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cefa:	699b      	ldr	r3, [r3, #24]
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	7c12      	ldrb	r2, [r2, #16]
 800cf00:	f107 0108 	add.w	r1, r7, #8
 800cf04:	4610      	mov	r0, r2
 800cf06:	4798      	blx	r3
 800cf08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf0a:	e00f      	b.n	800cf2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf0c:	6839      	ldr	r1, [r7, #0]
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 fa15 	bl	800d33e <USBD_CtlError>
            err++;
 800cf14:	7afb      	ldrb	r3, [r7, #11]
 800cf16:	3301      	adds	r3, #1
 800cf18:	72fb      	strb	r3, [r7, #11]
          break;
 800cf1a:	e007      	b.n	800cf2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800cf1c:	6839      	ldr	r1, [r7, #0]
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 fa0d 	bl	800d33e <USBD_CtlError>
          err++;
 800cf24:	7afb      	ldrb	r3, [r7, #11]
 800cf26:	3301      	adds	r3, #1
 800cf28:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800cf2a:	e038      	b.n	800cf9e <USBD_GetDescriptor+0x286>
 800cf2c:	e037      	b.n	800cf9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	7c1b      	ldrb	r3, [r3, #16]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d109      	bne.n	800cf4a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf3e:	f107 0208 	add.w	r2, r7, #8
 800cf42:	4610      	mov	r0, r2
 800cf44:	4798      	blx	r3
 800cf46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf48:	e029      	b.n	800cf9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cf4a:	6839      	ldr	r1, [r7, #0]
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 f9f6 	bl	800d33e <USBD_CtlError>
        err++;
 800cf52:	7afb      	ldrb	r3, [r7, #11]
 800cf54:	3301      	adds	r3, #1
 800cf56:	72fb      	strb	r3, [r7, #11]
      break;
 800cf58:	e021      	b.n	800cf9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	7c1b      	ldrb	r3, [r3, #16]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d10d      	bne.n	800cf7e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf6a:	f107 0208 	add.w	r2, r7, #8
 800cf6e:	4610      	mov	r0, r2
 800cf70:	4798      	blx	r3
 800cf72:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	3301      	adds	r3, #1
 800cf78:	2207      	movs	r2, #7
 800cf7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf7c:	e00f      	b.n	800cf9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cf7e:	6839      	ldr	r1, [r7, #0]
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 f9dc 	bl	800d33e <USBD_CtlError>
        err++;
 800cf86:	7afb      	ldrb	r3, [r7, #11]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	72fb      	strb	r3, [r7, #11]
      break;
 800cf8c:	e007      	b.n	800cf9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cf8e:	6839      	ldr	r1, [r7, #0]
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 f9d4 	bl	800d33e <USBD_CtlError>
      err++;
 800cf96:	7afb      	ldrb	r3, [r7, #11]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	72fb      	strb	r3, [r7, #11]
      break;
 800cf9c:	bf00      	nop
  }

  if (err != 0U)
 800cf9e:	7afb      	ldrb	r3, [r7, #11]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d11c      	bne.n	800cfde <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800cfa4:	893b      	ldrh	r3, [r7, #8]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d011      	beq.n	800cfce <USBD_GetDescriptor+0x2b6>
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	88db      	ldrh	r3, [r3, #6]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00d      	beq.n	800cfce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	88da      	ldrh	r2, [r3, #6]
 800cfb6:	893b      	ldrh	r3, [r7, #8]
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	bf28      	it	cs
 800cfbc:	4613      	movcs	r3, r2
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cfc2:	893b      	ldrh	r3, [r7, #8]
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	68f9      	ldr	r1, [r7, #12]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 fa22 	bl	800d412 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	88db      	ldrh	r3, [r3, #6]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d104      	bne.n	800cfe0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 fa79 	bl	800d4ce <USBD_CtlSendStatus>
 800cfdc:	e000      	b.n	800cfe0 <USBD_GetDescriptor+0x2c8>
    return;
 800cfde:	bf00      	nop
    }
  }
}
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop

0800cfe8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	889b      	ldrh	r3, [r3, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d130      	bne.n	800d05c <USBD_SetAddress+0x74>
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	88db      	ldrh	r3, [r3, #6]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d12c      	bne.n	800d05c <USBD_SetAddress+0x74>
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	885b      	ldrh	r3, [r3, #2]
 800d006:	2b7f      	cmp	r3, #127	; 0x7f
 800d008:	d828      	bhi.n	800d05c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	885b      	ldrh	r3, [r3, #2]
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d014:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d01c:	2b03      	cmp	r3, #3
 800d01e:	d104      	bne.n	800d02a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800d020:	6839      	ldr	r1, [r7, #0]
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 f98b 	bl	800d33e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d028:	e01d      	b.n	800d066 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	7bfa      	ldrb	r2, [r7, #15]
 800d02e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d032:	7bfb      	ldrb	r3, [r7, #15]
 800d034:	4619      	mov	r1, r3
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 fecf 	bl	800ddda <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 fa46 	bl	800d4ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d042:	7bfb      	ldrb	r3, [r7, #15]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d004      	beq.n	800d052 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2202      	movs	r2, #2
 800d04c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d050:	e009      	b.n	800d066 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2201      	movs	r2, #1
 800d056:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d05a:	e004      	b.n	800d066 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d05c:	6839      	ldr	r1, [r7, #0]
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 f96d 	bl	800d33e <USBD_CtlError>
  }
}
 800d064:	bf00      	nop
 800d066:	bf00      	nop
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
	...

0800d070 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	885b      	ldrh	r3, [r3, #2]
 800d07e:	b2da      	uxtb	r2, r3
 800d080:	4b41      	ldr	r3, [pc, #260]	; (800d188 <USBD_SetConfig+0x118>)
 800d082:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d084:	4b40      	ldr	r3, [pc, #256]	; (800d188 <USBD_SetConfig+0x118>)
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d904      	bls.n	800d096 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d08c:	6839      	ldr	r1, [r7, #0]
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 f955 	bl	800d33e <USBD_CtlError>
 800d094:	e075      	b.n	800d182 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d09c:	2b02      	cmp	r3, #2
 800d09e:	d002      	beq.n	800d0a6 <USBD_SetConfig+0x36>
 800d0a0:	2b03      	cmp	r3, #3
 800d0a2:	d023      	beq.n	800d0ec <USBD_SetConfig+0x7c>
 800d0a4:	e062      	b.n	800d16c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d0a6:	4b38      	ldr	r3, [pc, #224]	; (800d188 <USBD_SetConfig+0x118>)
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d01a      	beq.n	800d0e4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800d0ae:	4b36      	ldr	r3, [pc, #216]	; (800d188 <USBD_SetConfig+0x118>)
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2203      	movs	r2, #3
 800d0bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d0c0:	4b31      	ldr	r3, [pc, #196]	; (800d188 <USBD_SetConfig+0x118>)
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f7ff f9af 	bl	800c42a <USBD_SetClassConfig>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b02      	cmp	r3, #2
 800d0d0:	d104      	bne.n	800d0dc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800d0d2:	6839      	ldr	r1, [r7, #0]
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 f932 	bl	800d33e <USBD_CtlError>
            return;
 800d0da:	e052      	b.n	800d182 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 f9f6 	bl	800d4ce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d0e2:	e04e      	b.n	800d182 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 f9f2 	bl	800d4ce <USBD_CtlSendStatus>
        break;
 800d0ea:	e04a      	b.n	800d182 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d0ec:	4b26      	ldr	r3, [pc, #152]	; (800d188 <USBD_SetConfig+0x118>)
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d112      	bne.n	800d11a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2202      	movs	r2, #2
 800d0f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800d0fc:	4b22      	ldr	r3, [pc, #136]	; (800d188 <USBD_SetConfig+0x118>)
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	461a      	mov	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d106:	4b20      	ldr	r3, [pc, #128]	; (800d188 <USBD_SetConfig+0x118>)
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	4619      	mov	r1, r3
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f7ff f9ab 	bl	800c468 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 f9db 	bl	800d4ce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d118:	e033      	b.n	800d182 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800d11a:	4b1b      	ldr	r3, [pc, #108]	; (800d188 <USBD_SetConfig+0x118>)
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	461a      	mov	r2, r3
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	429a      	cmp	r2, r3
 800d126:	d01d      	beq.n	800d164 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	4619      	mov	r1, r3
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f7ff f999 	bl	800c468 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d136:	4b14      	ldr	r3, [pc, #80]	; (800d188 <USBD_SetConfig+0x118>)
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	461a      	mov	r2, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d140:	4b11      	ldr	r3, [pc, #68]	; (800d188 <USBD_SetConfig+0x118>)
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	4619      	mov	r1, r3
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f7ff f96f 	bl	800c42a <USBD_SetClassConfig>
 800d14c:	4603      	mov	r3, r0
 800d14e:	2b02      	cmp	r3, #2
 800d150:	d104      	bne.n	800d15c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800d152:	6839      	ldr	r1, [r7, #0]
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 f8f2 	bl	800d33e <USBD_CtlError>
            return;
 800d15a:	e012      	b.n	800d182 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 f9b6 	bl	800d4ce <USBD_CtlSendStatus>
        break;
 800d162:	e00e      	b.n	800d182 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 f9b2 	bl	800d4ce <USBD_CtlSendStatus>
        break;
 800d16a:	e00a      	b.n	800d182 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800d16c:	6839      	ldr	r1, [r7, #0]
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 f8e5 	bl	800d33e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800d174:	4b04      	ldr	r3, [pc, #16]	; (800d188 <USBD_SetConfig+0x118>)
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	4619      	mov	r1, r3
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7ff f974 	bl	800c468 <USBD_ClrClassConfig>
        break;
 800d180:	bf00      	nop
    }
  }
}
 800d182:	3708      	adds	r7, #8
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	20000804 	.word	0x20000804

0800d18c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	88db      	ldrh	r3, [r3, #6]
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d004      	beq.n	800d1a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d19e:	6839      	ldr	r1, [r7, #0]
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 f8cc 	bl	800d33e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d1a6:	e022      	b.n	800d1ee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1ae:	2b02      	cmp	r3, #2
 800d1b0:	dc02      	bgt.n	800d1b8 <USBD_GetConfig+0x2c>
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	dc03      	bgt.n	800d1be <USBD_GetConfig+0x32>
 800d1b6:	e015      	b.n	800d1e4 <USBD_GetConfig+0x58>
 800d1b8:	2b03      	cmp	r3, #3
 800d1ba:	d00b      	beq.n	800d1d4 <USBD_GetConfig+0x48>
 800d1bc:	e012      	b.n	800d1e4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	3308      	adds	r3, #8
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 f920 	bl	800d412 <USBD_CtlSendData>
        break;
 800d1d2:	e00c      	b.n	800d1ee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	3304      	adds	r3, #4
 800d1d8:	2201      	movs	r2, #1
 800d1da:	4619      	mov	r1, r3
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 f918 	bl	800d412 <USBD_CtlSendData>
        break;
 800d1e2:	e004      	b.n	800d1ee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800d1e4:	6839      	ldr	r1, [r7, #0]
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 f8a9 	bl	800d33e <USBD_CtlError>
        break;
 800d1ec:	bf00      	nop
}
 800d1ee:	bf00      	nop
 800d1f0:	3708      	adds	r7, #8
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b082      	sub	sp, #8
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
 800d1fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d206:	3b01      	subs	r3, #1
 800d208:	2b02      	cmp	r3, #2
 800d20a:	d81e      	bhi.n	800d24a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	88db      	ldrh	r3, [r3, #6]
 800d210:	2b02      	cmp	r3, #2
 800d212:	d004      	beq.n	800d21e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800d214:	6839      	ldr	r1, [r7, #0]
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 f891 	bl	800d33e <USBD_CtlError>
        break;
 800d21c:	e01a      	b.n	800d254 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2201      	movs	r2, #1
 800d222:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d005      	beq.n	800d23a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	68db      	ldr	r3, [r3, #12]
 800d232:	f043 0202 	orr.w	r2, r3, #2
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	330c      	adds	r3, #12
 800d23e:	2202      	movs	r2, #2
 800d240:	4619      	mov	r1, r3
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 f8e5 	bl	800d412 <USBD_CtlSendData>
      break;
 800d248:	e004      	b.n	800d254 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800d24a:	6839      	ldr	r1, [r7, #0]
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 f876 	bl	800d33e <USBD_CtlError>
      break;
 800d252:	bf00      	nop
  }
}
 800d254:	bf00      	nop
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	885b      	ldrh	r3, [r3, #2]
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d106      	bne.n	800d27c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2201      	movs	r2, #1
 800d272:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 f929 	bl	800d4ce <USBD_CtlSendStatus>
  }
}
 800d27c:	bf00      	nop
 800d27e:	3708      	adds	r7, #8
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d294:	3b01      	subs	r3, #1
 800d296:	2b02      	cmp	r3, #2
 800d298:	d80b      	bhi.n	800d2b2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	885b      	ldrh	r3, [r3, #2]
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d10c      	bne.n	800d2bc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 f90f 	bl	800d4ce <USBD_CtlSendStatus>
      }
      break;
 800d2b0:	e004      	b.n	800d2bc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d2b2:	6839      	ldr	r1, [r7, #0]
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 f842 	bl	800d33e <USBD_CtlError>
      break;
 800d2ba:	e000      	b.n	800d2be <USBD_ClrFeature+0x3a>
      break;
 800d2bc:	bf00      	nop
  }
}
 800d2be:	bf00      	nop
 800d2c0:	3708      	adds	r7, #8
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d2c6:	b480      	push	{r7}
 800d2c8:	b083      	sub	sp, #12
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	781a      	ldrb	r2, [r3, #0]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	785a      	ldrb	r2, [r3, #1]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	3302      	adds	r3, #2
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	3303      	adds	r3, #3
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	021b      	lsls	r3, r3, #8
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	4413      	add	r3, r2
 800d2f6:	b29a      	uxth	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	3304      	adds	r3, #4
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	b29a      	uxth	r2, r3
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	3305      	adds	r3, #5
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	021b      	lsls	r3, r3, #8
 800d30e:	b29b      	uxth	r3, r3
 800d310:	4413      	add	r3, r2
 800d312:	b29a      	uxth	r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	3306      	adds	r3, #6
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	b29a      	uxth	r2, r3
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	3307      	adds	r3, #7
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	b29b      	uxth	r3, r3
 800d328:	021b      	lsls	r3, r3, #8
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	4413      	add	r3, r2
 800d32e:	b29a      	uxth	r2, r3
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	80da      	strh	r2, [r3, #6]

}
 800d334:	bf00      	nop
 800d336:	370c      	adds	r7, #12
 800d338:	46bd      	mov	sp, r7
 800d33a:	bc80      	pop	{r7}
 800d33c:	4770      	bx	lr

0800d33e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b082      	sub	sp, #8
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
 800d346:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d348:	2180      	movs	r1, #128	; 0x80
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f000 fcdc 	bl	800dd08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d350:	2100      	movs	r1, #0
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 fcd8 	bl	800dd08 <USBD_LL_StallEP>
}
 800d358:	bf00      	nop
 800d35a:	3708      	adds	r7, #8
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b086      	sub	sp, #24
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d36c:	2300      	movs	r3, #0
 800d36e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d032      	beq.n	800d3dc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d376:	68f8      	ldr	r0, [r7, #12]
 800d378:	f000 f834 	bl	800d3e4 <USBD_GetLen>
 800d37c:	4603      	mov	r3, r0
 800d37e:	3301      	adds	r3, #1
 800d380:	b29b      	uxth	r3, r3
 800d382:	005b      	lsls	r3, r3, #1
 800d384:	b29a      	uxth	r2, r3
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d38a:	7dfb      	ldrb	r3, [r7, #23]
 800d38c:	1c5a      	adds	r2, r3, #1
 800d38e:	75fa      	strb	r2, [r7, #23]
 800d390:	461a      	mov	r2, r3
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	4413      	add	r3, r2
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	7812      	ldrb	r2, [r2, #0]
 800d39a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d39c:	7dfb      	ldrb	r3, [r7, #23]
 800d39e:	1c5a      	adds	r2, r3, #1
 800d3a0:	75fa      	strb	r2, [r7, #23]
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	2203      	movs	r2, #3
 800d3aa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d3ac:	e012      	b.n	800d3d4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	1c5a      	adds	r2, r3, #1
 800d3b2:	60fa      	str	r2, [r7, #12]
 800d3b4:	7dfa      	ldrb	r2, [r7, #23]
 800d3b6:	1c51      	adds	r1, r2, #1
 800d3b8:	75f9      	strb	r1, [r7, #23]
 800d3ba:	4611      	mov	r1, r2
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	440a      	add	r2, r1
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d3c4:	7dfb      	ldrb	r3, [r7, #23]
 800d3c6:	1c5a      	adds	r2, r3, #1
 800d3c8:	75fa      	strb	r2, [r7, #23]
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	4413      	add	r3, r2
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d1e8      	bne.n	800d3ae <USBD_GetString+0x4e>
    }
  }
}
 800d3dc:	bf00      	nop
 800d3de:	3718      	adds	r7, #24
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b085      	sub	sp, #20
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800d3f0:	e005      	b.n	800d3fe <USBD_GetLen+0x1a>
  {
    len++;
 800d3f2:	7bfb      	ldrb	r3, [r7, #15]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1f5      	bne.n	800d3f2 <USBD_GetLen+0xe>
  }

  return len;
 800d406:	7bfb      	ldrb	r3, [r7, #15]
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3714      	adds	r7, #20
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bc80      	pop	{r7}
 800d410:	4770      	bx	lr

0800d412 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d412:	b580      	push	{r7, lr}
 800d414:	b084      	sub	sp, #16
 800d416:	af00      	add	r7, sp, #0
 800d418:	60f8      	str	r0, [r7, #12]
 800d41a:	60b9      	str	r1, [r7, #8]
 800d41c:	4613      	mov	r3, r2
 800d41e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2202      	movs	r2, #2
 800d424:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d428:	88fa      	ldrh	r2, [r7, #6]
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d42e:	88fa      	ldrh	r2, [r7, #6]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d434:	88fb      	ldrh	r3, [r7, #6]
 800d436:	68ba      	ldr	r2, [r7, #8]
 800d438:	2100      	movs	r1, #0
 800d43a:	68f8      	ldr	r0, [r7, #12]
 800d43c:	f000 fcec 	bl	800de18 <USBD_LL_Transmit>

  return USBD_OK;
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b084      	sub	sp, #16
 800d44e:	af00      	add	r7, sp, #0
 800d450:	60f8      	str	r0, [r7, #12]
 800d452:	60b9      	str	r1, [r7, #8]
 800d454:	4613      	mov	r3, r2
 800d456:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d458:	88fb      	ldrh	r3, [r7, #6]
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	2100      	movs	r1, #0
 800d45e:	68f8      	ldr	r0, [r7, #12]
 800d460:	f000 fcda 	bl	800de18 <USBD_LL_Transmit>

  return USBD_OK;
 800d464:	2300      	movs	r3, #0
}
 800d466:	4618      	mov	r0, r3
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b084      	sub	sp, #16
 800d472:	af00      	add	r7, sp, #0
 800d474:	60f8      	str	r0, [r7, #12]
 800d476:	60b9      	str	r1, [r7, #8]
 800d478:	4613      	mov	r3, r2
 800d47a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2203      	movs	r2, #3
 800d480:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d484:	88fa      	ldrh	r2, [r7, #6]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800d48c:	88fa      	ldrh	r2, [r7, #6]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d494:	88fb      	ldrh	r3, [r7, #6]
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	2100      	movs	r1, #0
 800d49a:	68f8      	ldr	r0, [r7, #12]
 800d49c:	f000 fcdf 	bl	800de5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b084      	sub	sp, #16
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	60f8      	str	r0, [r7, #12]
 800d4b2:	60b9      	str	r1, [r7, #8]
 800d4b4:	4613      	mov	r3, r2
 800d4b6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4b8:	88fb      	ldrh	r3, [r7, #6]
 800d4ba:	68ba      	ldr	r2, [r7, #8]
 800d4bc:	2100      	movs	r1, #0
 800d4be:	68f8      	ldr	r0, [r7, #12]
 800d4c0:	f000 fccd 	bl	800de5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4c4:	2300      	movs	r3, #0
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3710      	adds	r7, #16
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b082      	sub	sp, #8
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2204      	movs	r2, #4
 800d4da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d4de:	2300      	movs	r3, #0
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 fc97 	bl	800de18 <USBD_LL_Transmit>

  return USBD_OK;
 800d4ea:	2300      	movs	r3, #0
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3708      	adds	r7, #8
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b082      	sub	sp, #8
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2205      	movs	r2, #5
 800d500:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d504:	2300      	movs	r3, #0
 800d506:	2200      	movs	r2, #0
 800d508:	2100      	movs	r1, #0
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 fca7 	bl	800de5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
	...

0800d51c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d520:	2200      	movs	r2, #0
 800d522:	4912      	ldr	r1, [pc, #72]	; (800d56c <MX_USB_DEVICE_Init+0x50>)
 800d524:	4812      	ldr	r0, [pc, #72]	; (800d570 <MX_USB_DEVICE_Init+0x54>)
 800d526:	f7fe ff26 	bl	800c376 <USBD_Init>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d001      	beq.n	800d534 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d530:	f7f7 fb56 	bl	8004be0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d534:	490f      	ldr	r1, [pc, #60]	; (800d574 <MX_USB_DEVICE_Init+0x58>)
 800d536:	480e      	ldr	r0, [pc, #56]	; (800d570 <MX_USB_DEVICE_Init+0x54>)
 800d538:	f7fe ff48 	bl	800c3cc <USBD_RegisterClass>
 800d53c:	4603      	mov	r3, r0
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d001      	beq.n	800d546 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d542:	f7f7 fb4d 	bl	8004be0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d546:	490c      	ldr	r1, [pc, #48]	; (800d578 <MX_USB_DEVICE_Init+0x5c>)
 800d548:	4809      	ldr	r0, [pc, #36]	; (800d570 <MX_USB_DEVICE_Init+0x54>)
 800d54a:	f7fe fe79 	bl	800c240 <USBD_CDC_RegisterInterface>
 800d54e:	4603      	mov	r3, r0
 800d550:	2b00      	cmp	r3, #0
 800d552:	d001      	beq.n	800d558 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d554:	f7f7 fb44 	bl	8004be0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d558:	4805      	ldr	r0, [pc, #20]	; (800d570 <MX_USB_DEVICE_Init+0x54>)
 800d55a:	f7fe ff50 	bl	800c3fe <USBD_Start>
 800d55e:	4603      	mov	r3, r0
 800d560:	2b00      	cmp	r3, #0
 800d562:	d001      	beq.n	800d568 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d564:	f7f7 fb3c 	bl	8004be0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d568:	bf00      	nop
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	20000174 	.word	0x20000174
 800d570:	20000814 	.word	0x20000814
 800d574:	20000058 	.word	0x20000058
 800d578:	2000015c 	.word	0x2000015c

0800d57c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d580:	2200      	movs	r2, #0
 800d582:	4905      	ldr	r1, [pc, #20]	; (800d598 <CDC_Init_FS+0x1c>)
 800d584:	4805      	ldr	r0, [pc, #20]	; (800d59c <CDC_Init_FS+0x20>)
 800d586:	f7fe fe71 	bl	800c26c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d58a:	4905      	ldr	r1, [pc, #20]	; (800d5a0 <CDC_Init_FS+0x24>)
 800d58c:	4803      	ldr	r0, [pc, #12]	; (800d59c <CDC_Init_FS+0x20>)
 800d58e:	f7fe fe86 	bl	800c29e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d592:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d594:	4618      	mov	r0, r3
 800d596:	bd80      	pop	{r7, pc}
 800d598:	200012d8 	.word	0x200012d8
 800d59c:	20000814 	.word	0x20000814
 800d5a0:	20000ad8 	.word	0x20000ad8

0800d5a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d5a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bc80      	pop	{r7}
 800d5b0:	4770      	bx	lr
	...

0800d5b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	6039      	str	r1, [r7, #0]
 800d5be:	71fb      	strb	r3, [r7, #7]
 800d5c0:	4613      	mov	r3, r2
 800d5c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d5c4:	79fb      	ldrb	r3, [r7, #7]
 800d5c6:	2b23      	cmp	r3, #35	; 0x23
 800d5c8:	d85c      	bhi.n	800d684 <CDC_Control_FS+0xd0>
 800d5ca:	a201      	add	r2, pc, #4	; (adr r2, 800d5d0 <CDC_Control_FS+0x1c>)
 800d5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d0:	0800d685 	.word	0x0800d685
 800d5d4:	0800d685 	.word	0x0800d685
 800d5d8:	0800d685 	.word	0x0800d685
 800d5dc:	0800d685 	.word	0x0800d685
 800d5e0:	0800d685 	.word	0x0800d685
 800d5e4:	0800d685 	.word	0x0800d685
 800d5e8:	0800d685 	.word	0x0800d685
 800d5ec:	0800d685 	.word	0x0800d685
 800d5f0:	0800d685 	.word	0x0800d685
 800d5f4:	0800d685 	.word	0x0800d685
 800d5f8:	0800d685 	.word	0x0800d685
 800d5fc:	0800d685 	.word	0x0800d685
 800d600:	0800d685 	.word	0x0800d685
 800d604:	0800d685 	.word	0x0800d685
 800d608:	0800d685 	.word	0x0800d685
 800d60c:	0800d685 	.word	0x0800d685
 800d610:	0800d685 	.word	0x0800d685
 800d614:	0800d685 	.word	0x0800d685
 800d618:	0800d685 	.word	0x0800d685
 800d61c:	0800d685 	.word	0x0800d685
 800d620:	0800d685 	.word	0x0800d685
 800d624:	0800d685 	.word	0x0800d685
 800d628:	0800d685 	.word	0x0800d685
 800d62c:	0800d685 	.word	0x0800d685
 800d630:	0800d685 	.word	0x0800d685
 800d634:	0800d685 	.word	0x0800d685
 800d638:	0800d685 	.word	0x0800d685
 800d63c:	0800d685 	.word	0x0800d685
 800d640:	0800d685 	.word	0x0800d685
 800d644:	0800d685 	.word	0x0800d685
 800d648:	0800d685 	.word	0x0800d685
 800d64c:	0800d685 	.word	0x0800d685
 800d650:	0800d661 	.word	0x0800d661
 800d654:	0800d673 	.word	0x0800d673
 800d658:	0800d685 	.word	0x0800d685
 800d65c:	0800d685 	.word	0x0800d685
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit

    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };

    case CDC_SET_LINE_CODING:
      memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800d660:	4b0c      	ldr	r3, [pc, #48]	; (800d694 <CDC_Control_FS+0xe0>)
 800d662:	683a      	ldr	r2, [r7, #0]
 800d664:	6810      	ldr	r0, [r2, #0]
 800d666:	6018      	str	r0, [r3, #0]
 800d668:	8891      	ldrh	r1, [r2, #4]
 800d66a:	7992      	ldrb	r2, [r2, #6]
 800d66c:	8099      	strh	r1, [r3, #4]
 800d66e:	719a      	strb	r2, [r3, #6]
    break;
 800d670:	e009      	b.n	800d686 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
      memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	4a07      	ldr	r2, [pc, #28]	; (800d694 <CDC_Control_FS+0xe0>)
 800d676:	6810      	ldr	r0, [r2, #0]
 800d678:	6018      	str	r0, [r3, #0]
 800d67a:	8891      	ldrh	r1, [r2, #4]
 800d67c:	7992      	ldrb	r2, [r2, #6]
 800d67e:	8099      	strh	r1, [r3, #4]
 800d680:	719a      	strb	r2, [r3, #6]
    break;
 800d682:	e000      	b.n	800d686 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d684:	bf00      	nop
  }

  return (USBD_OK);
 800d686:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d688:	4618      	mov	r0, r3
 800d68a:	370c      	adds	r7, #12
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bc80      	pop	{r7}
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop
 800d694:	2000016c 	.word	0x2000016c

0800d698 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d6a2:	6879      	ldr	r1, [r7, #4]
 800d6a4:	4805      	ldr	r0, [pc, #20]	; (800d6bc <CDC_Receive_FS+0x24>)
 800d6a6:	f7fe fdfa 	bl	800c29e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d6aa:	4804      	ldr	r0, [pc, #16]	; (800d6bc <CDC_Receive_FS+0x24>)
 800d6ac:	f7fe fe39 	bl	800c322 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d6b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	20000814 	.word	0x20000814

0800d6c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d6d0:	4b0d      	ldr	r3, [pc, #52]	; (800d708 <CDC_Transmit_FS+0x48>)
 800d6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e00b      	b.n	800d6fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d6e6:	887b      	ldrh	r3, [r7, #2]
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	6879      	ldr	r1, [r7, #4]
 800d6ec:	4806      	ldr	r0, [pc, #24]	; (800d708 <CDC_Transmit_FS+0x48>)
 800d6ee:	f7fe fdbd 	bl	800c26c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d6f2:	4805      	ldr	r0, [pc, #20]	; (800d708 <CDC_Transmit_FS+0x48>)
 800d6f4:	f7fe fde6 	bl	800c2c4 <USBD_CDC_TransmitPacket>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3710      	adds	r7, #16
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	20000814 	.word	0x20000814

0800d70c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	4603      	mov	r3, r0
 800d714:	6039      	str	r1, [r7, #0]
 800d716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	2212      	movs	r2, #18
 800d71c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d71e:	4b03      	ldr	r3, [pc, #12]	; (800d72c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d720:	4618      	mov	r0, r3
 800d722:	370c      	adds	r7, #12
 800d724:	46bd      	mov	sp, r7
 800d726:	bc80      	pop	{r7}
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop
 800d72c:	20000190 	.word	0x20000190

0800d730 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d730:	b480      	push	{r7}
 800d732:	b083      	sub	sp, #12
 800d734:	af00      	add	r7, sp, #0
 800d736:	4603      	mov	r3, r0
 800d738:	6039      	str	r1, [r7, #0]
 800d73a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	2204      	movs	r2, #4
 800d740:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d742:	4b03      	ldr	r3, [pc, #12]	; (800d750 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d744:	4618      	mov	r0, r3
 800d746:	370c      	adds	r7, #12
 800d748:	46bd      	mov	sp, r7
 800d74a:	bc80      	pop	{r7}
 800d74c:	4770      	bx	lr
 800d74e:	bf00      	nop
 800d750:	200001a4 	.word	0x200001a4

0800d754 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	4603      	mov	r3, r0
 800d75c:	6039      	str	r1, [r7, #0]
 800d75e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d760:	79fb      	ldrb	r3, [r7, #7]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d105      	bne.n	800d772 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d766:	683a      	ldr	r2, [r7, #0]
 800d768:	4907      	ldr	r1, [pc, #28]	; (800d788 <USBD_FS_ProductStrDescriptor+0x34>)
 800d76a:	4808      	ldr	r0, [pc, #32]	; (800d78c <USBD_FS_ProductStrDescriptor+0x38>)
 800d76c:	f7ff fdf8 	bl	800d360 <USBD_GetString>
 800d770:	e004      	b.n	800d77c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d772:	683a      	ldr	r2, [r7, #0]
 800d774:	4904      	ldr	r1, [pc, #16]	; (800d788 <USBD_FS_ProductStrDescriptor+0x34>)
 800d776:	4805      	ldr	r0, [pc, #20]	; (800d78c <USBD_FS_ProductStrDescriptor+0x38>)
 800d778:	f7ff fdf2 	bl	800d360 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d77c:	4b02      	ldr	r3, [pc, #8]	; (800d788 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3708      	adds	r7, #8
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	20001ad8 	.word	0x20001ad8
 800d78c:	08012fec 	.word	0x08012fec

0800d790 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	4603      	mov	r3, r0
 800d798:	6039      	str	r1, [r7, #0]
 800d79a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d79c:	683a      	ldr	r2, [r7, #0]
 800d79e:	4904      	ldr	r1, [pc, #16]	; (800d7b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d7a0:	4804      	ldr	r0, [pc, #16]	; (800d7b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d7a2:	f7ff fddd 	bl	800d360 <USBD_GetString>
  return USBD_StrDesc;
 800d7a6:	4b02      	ldr	r3, [pc, #8]	; (800d7b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	20001ad8 	.word	0x20001ad8
 800d7b4:	08013004 	.word	0x08013004

0800d7b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	4603      	mov	r3, r0
 800d7c0:	6039      	str	r1, [r7, #0]
 800d7c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	221a      	movs	r2, #26
 800d7c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d7ca:	f000 f843 	bl	800d854 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d7ce:	4b02      	ldr	r3, [pc, #8]	; (800d7d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3708      	adds	r7, #8
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	200001a8 	.word	0x200001a8

0800d7dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	6039      	str	r1, [r7, #0]
 800d7e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d7e8:	79fb      	ldrb	r3, [r7, #7]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d105      	bne.n	800d7fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d7ee:	683a      	ldr	r2, [r7, #0]
 800d7f0:	4907      	ldr	r1, [pc, #28]	; (800d810 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d7f2:	4808      	ldr	r0, [pc, #32]	; (800d814 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d7f4:	f7ff fdb4 	bl	800d360 <USBD_GetString>
 800d7f8:	e004      	b.n	800d804 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d7fa:	683a      	ldr	r2, [r7, #0]
 800d7fc:	4904      	ldr	r1, [pc, #16]	; (800d810 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d7fe:	4805      	ldr	r0, [pc, #20]	; (800d814 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d800:	f7ff fdae 	bl	800d360 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d804:	4b02      	ldr	r3, [pc, #8]	; (800d810 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d806:	4618      	mov	r0, r3
 800d808:	3708      	adds	r7, #8
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	20001ad8 	.word	0x20001ad8
 800d814:	08013018 	.word	0x08013018

0800d818 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	4603      	mov	r3, r0
 800d820:	6039      	str	r1, [r7, #0]
 800d822:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d824:	79fb      	ldrb	r3, [r7, #7]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d105      	bne.n	800d836 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d82a:	683a      	ldr	r2, [r7, #0]
 800d82c:	4907      	ldr	r1, [pc, #28]	; (800d84c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d82e:	4808      	ldr	r0, [pc, #32]	; (800d850 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d830:	f7ff fd96 	bl	800d360 <USBD_GetString>
 800d834:	e004      	b.n	800d840 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d836:	683a      	ldr	r2, [r7, #0]
 800d838:	4904      	ldr	r1, [pc, #16]	; (800d84c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d83a:	4805      	ldr	r0, [pc, #20]	; (800d850 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d83c:	f7ff fd90 	bl	800d360 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d840:	4b02      	ldr	r3, [pc, #8]	; (800d84c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d842:	4618      	mov	r0, r3
 800d844:	3708      	adds	r7, #8
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	20001ad8 	.word	0x20001ad8
 800d850:	08013024 	.word	0x08013024

0800d854 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d85a:	4b0f      	ldr	r3, [pc, #60]	; (800d898 <Get_SerialNum+0x44>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d860:	4b0e      	ldr	r3, [pc, #56]	; (800d89c <Get_SerialNum+0x48>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d866:	4b0e      	ldr	r3, [pc, #56]	; (800d8a0 <Get_SerialNum+0x4c>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d86c:	68fa      	ldr	r2, [r7, #12]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4413      	add	r3, r2
 800d872:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d009      	beq.n	800d88e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d87a:	2208      	movs	r2, #8
 800d87c:	4909      	ldr	r1, [pc, #36]	; (800d8a4 <Get_SerialNum+0x50>)
 800d87e:	68f8      	ldr	r0, [r7, #12]
 800d880:	f000 f814 	bl	800d8ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d884:	2204      	movs	r2, #4
 800d886:	4908      	ldr	r1, [pc, #32]	; (800d8a8 <Get_SerialNum+0x54>)
 800d888:	68b8      	ldr	r0, [r7, #8]
 800d88a:	f000 f80f 	bl	800d8ac <IntToUnicode>
  }
}
 800d88e:	bf00      	nop
 800d890:	3710      	adds	r7, #16
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	1fff7a10 	.word	0x1fff7a10
 800d89c:	1fff7a14 	.word	0x1fff7a14
 800d8a0:	1fff7a18 	.word	0x1fff7a18
 800d8a4:	200001aa 	.word	0x200001aa
 800d8a8:	200001ba 	.word	0x200001ba

0800d8ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b087      	sub	sp, #28
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d8be:	2300      	movs	r3, #0
 800d8c0:	75fb      	strb	r3, [r7, #23]
 800d8c2:	e027      	b.n	800d914 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	0f1b      	lsrs	r3, r3, #28
 800d8c8:	2b09      	cmp	r3, #9
 800d8ca:	d80b      	bhi.n	800d8e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	0f1b      	lsrs	r3, r3, #28
 800d8d0:	b2da      	uxtb	r2, r3
 800d8d2:	7dfb      	ldrb	r3, [r7, #23]
 800d8d4:	005b      	lsls	r3, r3, #1
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	440b      	add	r3, r1
 800d8dc:	3230      	adds	r2, #48	; 0x30
 800d8de:	b2d2      	uxtb	r2, r2
 800d8e0:	701a      	strb	r2, [r3, #0]
 800d8e2:	e00a      	b.n	800d8fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	0f1b      	lsrs	r3, r3, #28
 800d8e8:	b2da      	uxtb	r2, r3
 800d8ea:	7dfb      	ldrb	r3, [r7, #23]
 800d8ec:	005b      	lsls	r3, r3, #1
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	440b      	add	r3, r1
 800d8f4:	3237      	adds	r2, #55	; 0x37
 800d8f6:	b2d2      	uxtb	r2, r2
 800d8f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	011b      	lsls	r3, r3, #4
 800d8fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d900:	7dfb      	ldrb	r3, [r7, #23]
 800d902:	005b      	lsls	r3, r3, #1
 800d904:	3301      	adds	r3, #1
 800d906:	68ba      	ldr	r2, [r7, #8]
 800d908:	4413      	add	r3, r2
 800d90a:	2200      	movs	r2, #0
 800d90c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d90e:	7dfb      	ldrb	r3, [r7, #23]
 800d910:	3301      	adds	r3, #1
 800d912:	75fb      	strb	r3, [r7, #23]
 800d914:	7dfa      	ldrb	r2, [r7, #23]
 800d916:	79fb      	ldrb	r3, [r7, #7]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d3d3      	bcc.n	800d8c4 <IntToUnicode+0x18>
  }
}
 800d91c:	bf00      	nop
 800d91e:	bf00      	nop
 800d920:	371c      	adds	r7, #28
 800d922:	46bd      	mov	sp, r7
 800d924:	bc80      	pop	{r7}
 800d926:	4770      	bx	lr

0800d928 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b08a      	sub	sp, #40	; 0x28
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d930:	f107 0314 	add.w	r3, r7, #20
 800d934:	2200      	movs	r2, #0
 800d936:	601a      	str	r2, [r3, #0]
 800d938:	605a      	str	r2, [r3, #4]
 800d93a:	609a      	str	r2, [r3, #8]
 800d93c:	60da      	str	r2, [r3, #12]
 800d93e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d948:	d13a      	bne.n	800d9c0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d94a:	2300      	movs	r3, #0
 800d94c:	613b      	str	r3, [r7, #16]
 800d94e:	4b1e      	ldr	r3, [pc, #120]	; (800d9c8 <HAL_PCD_MspInit+0xa0>)
 800d950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d952:	4a1d      	ldr	r2, [pc, #116]	; (800d9c8 <HAL_PCD_MspInit+0xa0>)
 800d954:	f043 0301 	orr.w	r3, r3, #1
 800d958:	6313      	str	r3, [r2, #48]	; 0x30
 800d95a:	4b1b      	ldr	r3, [pc, #108]	; (800d9c8 <HAL_PCD_MspInit+0xa0>)
 800d95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d95e:	f003 0301 	and.w	r3, r3, #1
 800d962:	613b      	str	r3, [r7, #16]
 800d964:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d966:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d96a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d96c:	2302      	movs	r3, #2
 800d96e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d970:	2300      	movs	r3, #0
 800d972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d974:	2303      	movs	r3, #3
 800d976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d978:	230a      	movs	r3, #10
 800d97a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d97c:	f107 0314 	add.w	r3, r7, #20
 800d980:	4619      	mov	r1, r3
 800d982:	4812      	ldr	r0, [pc, #72]	; (800d9cc <HAL_PCD_MspInit+0xa4>)
 800d984:	f7f9 f966 	bl	8006c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d988:	4b0f      	ldr	r3, [pc, #60]	; (800d9c8 <HAL_PCD_MspInit+0xa0>)
 800d98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d98c:	4a0e      	ldr	r2, [pc, #56]	; (800d9c8 <HAL_PCD_MspInit+0xa0>)
 800d98e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d992:	6353      	str	r3, [r2, #52]	; 0x34
 800d994:	2300      	movs	r3, #0
 800d996:	60fb      	str	r3, [r7, #12]
 800d998:	4b0b      	ldr	r3, [pc, #44]	; (800d9c8 <HAL_PCD_MspInit+0xa0>)
 800d99a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d99c:	4a0a      	ldr	r2, [pc, #40]	; (800d9c8 <HAL_PCD_MspInit+0xa0>)
 800d99e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d9a2:	6453      	str	r3, [r2, #68]	; 0x44
 800d9a4:	4b08      	ldr	r3, [pc, #32]	; (800d9c8 <HAL_PCD_MspInit+0xa0>)
 800d9a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d9ac:	60fb      	str	r3, [r7, #12]
 800d9ae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	2043      	movs	r0, #67	; 0x43
 800d9b6:	f7f9 f908 	bl	8006bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d9ba:	2043      	movs	r0, #67	; 0x43
 800d9bc:	f7f9 f921 	bl	8006c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d9c0:	bf00      	nop
 800d9c2:	3728      	adds	r7, #40	; 0x28
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	40023800 	.word	0x40023800
 800d9cc:	40020000 	.word	0x40020000

0800d9d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	4610      	mov	r0, r2
 800d9e8:	f7fe fd51 	bl	800c48e <USBD_LL_SetupStage>
}
 800d9ec:	bf00      	nop
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800da06:	78fa      	ldrb	r2, [r7, #3]
 800da08:	6879      	ldr	r1, [r7, #4]
 800da0a:	4613      	mov	r3, r2
 800da0c:	00db      	lsls	r3, r3, #3
 800da0e:	1a9b      	subs	r3, r3, r2
 800da10:	009b      	lsls	r3, r3, #2
 800da12:	440b      	add	r3, r1
 800da14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	78fb      	ldrb	r3, [r7, #3]
 800da1c:	4619      	mov	r1, r3
 800da1e:	f7fe fd83 	bl	800c528 <USBD_LL_DataOutStage>
}
 800da22:	bf00      	nop
 800da24:	3708      	adds	r7, #8
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b082      	sub	sp, #8
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
 800da32:	460b      	mov	r3, r1
 800da34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800da3c:	78fa      	ldrb	r2, [r7, #3]
 800da3e:	6879      	ldr	r1, [r7, #4]
 800da40:	4613      	mov	r3, r2
 800da42:	00db      	lsls	r3, r3, #3
 800da44:	1a9b      	subs	r3, r3, r2
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	440b      	add	r3, r1
 800da4a:	3348      	adds	r3, #72	; 0x48
 800da4c:	681a      	ldr	r2, [r3, #0]
 800da4e:	78fb      	ldrb	r3, [r7, #3]
 800da50:	4619      	mov	r1, r3
 800da52:	f7fe fdda 	bl	800c60a <USBD_LL_DataInStage>
}
 800da56:	bf00      	nop
 800da58:	3708      	adds	r7, #8
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}

0800da5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da5e:	b580      	push	{r7, lr}
 800da60:	b082      	sub	sp, #8
 800da62:	af00      	add	r7, sp, #0
 800da64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fe feea 	bl	800c846 <USBD_LL_SOF>
}
 800da72:	bf00      	nop
 800da74:	3708      	adds	r7, #8
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}

0800da7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da7a:	b580      	push	{r7, lr}
 800da7c:	b084      	sub	sp, #16
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800da82:	2301      	movs	r3, #1
 800da84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	68db      	ldr	r3, [r3, #12]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d102      	bne.n	800da94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800da8e:	2300      	movs	r3, #0
 800da90:	73fb      	strb	r3, [r7, #15]
 800da92:	e008      	b.n	800daa6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	2b02      	cmp	r3, #2
 800da9a:	d102      	bne.n	800daa2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800da9c:	2301      	movs	r3, #1
 800da9e:	73fb      	strb	r3, [r7, #15]
 800daa0:	e001      	b.n	800daa6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800daa2:	f7f7 f89d 	bl	8004be0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800daac:	7bfa      	ldrb	r2, [r7, #15]
 800daae:	4611      	mov	r1, r2
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7fe fe90 	bl	800c7d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7fe fe49 	bl	800c754 <USBD_LL_Reset>
}
 800dac2:	bf00      	nop
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
	...

0800dacc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fe fe8a 	bl	800c7f4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	6812      	ldr	r2, [r2, #0]
 800daee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800daf2:	f043 0301 	orr.w	r3, r3, #1
 800daf6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6a1b      	ldr	r3, [r3, #32]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d005      	beq.n	800db0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db00:	4b04      	ldr	r3, [pc, #16]	; (800db14 <HAL_PCD_SuspendCallback+0x48>)
 800db02:	691b      	ldr	r3, [r3, #16]
 800db04:	4a03      	ldr	r2, [pc, #12]	; (800db14 <HAL_PCD_SuspendCallback+0x48>)
 800db06:	f043 0306 	orr.w	r3, r3, #6
 800db0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800db0c:	bf00      	nop
 800db0e:	3708      	adds	r7, #8
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	e000ed00 	.word	0xe000ed00

0800db18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800db26:	4618      	mov	r0, r3
 800db28:	f7fe fe78 	bl	800c81c <USBD_LL_Resume>
}
 800db2c:	bf00      	nop
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	460b      	mov	r3, r1
 800db3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800db46:	78fa      	ldrb	r2, [r7, #3]
 800db48:	4611      	mov	r1, r2
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fe fea1 	bl	800c892 <USBD_LL_IsoOUTIncomplete>
}
 800db50:	bf00      	nop
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	460b      	mov	r3, r1
 800db62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800db6a:	78fa      	ldrb	r2, [r7, #3]
 800db6c:	4611      	mov	r1, r2
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fe fe83 	bl	800c87a <USBD_LL_IsoINIncomplete>
}
 800db74:	bf00      	nop
 800db76:	3708      	adds	r7, #8
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b082      	sub	sp, #8
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7fe fe8d 	bl	800c8aa <USBD_LL_DevConnected>
}
 800db90:	bf00      	nop
 800db92:	3708      	adds	r7, #8
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7fe fe89 	bl	800c8be <USBD_LL_DevDisconnected>
}
 800dbac:	bf00      	nop
 800dbae:	3708      	adds	r7, #8
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d139      	bne.n	800dc38 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dbc4:	4a1f      	ldr	r2, [pc, #124]	; (800dc44 <USBD_LL_Init+0x90>)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	4a1d      	ldr	r2, [pc, #116]	; (800dc44 <USBD_LL_Init+0x90>)
 800dbd0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dbd4:	4b1b      	ldr	r3, [pc, #108]	; (800dc44 <USBD_LL_Init+0x90>)
 800dbd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dbda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dbdc:	4b19      	ldr	r3, [pc, #100]	; (800dc44 <USBD_LL_Init+0x90>)
 800dbde:	2204      	movs	r2, #4
 800dbe0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dbe2:	4b18      	ldr	r3, [pc, #96]	; (800dc44 <USBD_LL_Init+0x90>)
 800dbe4:	2202      	movs	r2, #2
 800dbe6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dbe8:	4b16      	ldr	r3, [pc, #88]	; (800dc44 <USBD_LL_Init+0x90>)
 800dbea:	2200      	movs	r2, #0
 800dbec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dbee:	4b15      	ldr	r3, [pc, #84]	; (800dc44 <USBD_LL_Init+0x90>)
 800dbf0:	2202      	movs	r2, #2
 800dbf2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dbf4:	4b13      	ldr	r3, [pc, #76]	; (800dc44 <USBD_LL_Init+0x90>)
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dbfa:	4b12      	ldr	r3, [pc, #72]	; (800dc44 <USBD_LL_Init+0x90>)
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dc00:	4b10      	ldr	r3, [pc, #64]	; (800dc44 <USBD_LL_Init+0x90>)
 800dc02:	2200      	movs	r2, #0
 800dc04:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dc06:	4b0f      	ldr	r3, [pc, #60]	; (800dc44 <USBD_LL_Init+0x90>)
 800dc08:	2200      	movs	r2, #0
 800dc0a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dc0c:	480d      	ldr	r0, [pc, #52]	; (800dc44 <USBD_LL_Init+0x90>)
 800dc0e:	f7fa f9dd 	bl	8007fcc <HAL_PCD_Init>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d001      	beq.n	800dc1c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800dc18:	f7f6 ffe2 	bl	8004be0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dc1c:	2180      	movs	r1, #128	; 0x80
 800dc1e:	4809      	ldr	r0, [pc, #36]	; (800dc44 <USBD_LL_Init+0x90>)
 800dc20:	f7fb fb1a 	bl	8009258 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dc24:	2240      	movs	r2, #64	; 0x40
 800dc26:	2100      	movs	r1, #0
 800dc28:	4806      	ldr	r0, [pc, #24]	; (800dc44 <USBD_LL_Init+0x90>)
 800dc2a:	f7fb facf 	bl	80091cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dc2e:	2280      	movs	r2, #128	; 0x80
 800dc30:	2101      	movs	r1, #1
 800dc32:	4804      	ldr	r0, [pc, #16]	; (800dc44 <USBD_LL_Init+0x90>)
 800dc34:	f7fb faca 	bl	80091cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dc38:	2300      	movs	r3, #0
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3708      	adds	r7, #8
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	20001cd8 	.word	0x20001cd8

0800dc48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc50:	2300      	movs	r3, #0
 800dc52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc54:	2300      	movs	r3, #0
 800dc56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7fa fad1 	bl	8008206 <HAL_PCD_Start>
 800dc64:	4603      	mov	r3, r0
 800dc66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc68:	7bfb      	ldrb	r3, [r7, #15]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f000 f92e 	bl	800decc <USBD_Get_USB_Status>
 800dc70:	4603      	mov	r3, r0
 800dc72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc74:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b084      	sub	sp, #16
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
 800dc86:	4608      	mov	r0, r1
 800dc88:	4611      	mov	r1, r2
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	70fb      	strb	r3, [r7, #3]
 800dc90:	460b      	mov	r3, r1
 800dc92:	70bb      	strb	r3, [r7, #2]
 800dc94:	4613      	mov	r3, r2
 800dc96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dca6:	78bb      	ldrb	r3, [r7, #2]
 800dca8:	883a      	ldrh	r2, [r7, #0]
 800dcaa:	78f9      	ldrb	r1, [r7, #3]
 800dcac:	f7fa fe96 	bl	80089dc <HAL_PCD_EP_Open>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcb4:	7bfb      	ldrb	r3, [r7, #15]
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f000 f908 	bl	800decc <USBD_Get_USB_Status>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}

0800dcca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcca:	b580      	push	{r7, lr}
 800dccc:	b084      	sub	sp, #16
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dce4:	78fa      	ldrb	r2, [r7, #3]
 800dce6:	4611      	mov	r1, r2
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7fa fedf 	bl	8008aac <HAL_PCD_EP_Close>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f000 f8e9 	bl	800decc <USBD_Get_USB_Status>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3710      	adds	r7, #16
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}

0800dd08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	460b      	mov	r3, r1
 800dd12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd14:	2300      	movs	r3, #0
 800dd16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd22:	78fa      	ldrb	r2, [r7, #3]
 800dd24:	4611      	mov	r1, r2
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7fa ffb6 	bl	8008c98 <HAL_PCD_EP_SetStall>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd30:	7bfb      	ldrb	r3, [r7, #15]
 800dd32:	4618      	mov	r0, r3
 800dd34:	f000 f8ca 	bl	800decc <USBD_Get_USB_Status>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3710      	adds	r7, #16
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}

0800dd46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd46:	b580      	push	{r7, lr}
 800dd48:	b084      	sub	sp, #16
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
 800dd4e:	460b      	mov	r3, r1
 800dd50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd52:	2300      	movs	r3, #0
 800dd54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd56:	2300      	movs	r3, #0
 800dd58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd60:	78fa      	ldrb	r2, [r7, #3]
 800dd62:	4611      	mov	r1, r2
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7fa fffb 	bl	8008d60 <HAL_PCD_EP_ClrStall>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd6e:	7bfb      	ldrb	r3, [r7, #15]
 800dd70:	4618      	mov	r0, r3
 800dd72:	f000 f8ab 	bl	800decc <USBD_Get_USB_Status>
 800dd76:	4603      	mov	r3, r0
 800dd78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3710      	adds	r7, #16
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dd98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	da0b      	bge.n	800ddb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dda0:	78fb      	ldrb	r3, [r7, #3]
 800dda2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dda6:	68f9      	ldr	r1, [r7, #12]
 800dda8:	4613      	mov	r3, r2
 800ddaa:	00db      	lsls	r3, r3, #3
 800ddac:	1a9b      	subs	r3, r3, r2
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	440b      	add	r3, r1
 800ddb2:	333e      	adds	r3, #62	; 0x3e
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	e00b      	b.n	800ddd0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ddb8:	78fb      	ldrb	r3, [r7, #3]
 800ddba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ddbe:	68f9      	ldr	r1, [r7, #12]
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	00db      	lsls	r3, r3, #3
 800ddc4:	1a9b      	subs	r3, r3, r2
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	440b      	add	r3, r1
 800ddca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ddce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3714      	adds	r7, #20
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bc80      	pop	{r7}
 800ddd8:	4770      	bx	lr

0800ddda <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b084      	sub	sp, #16
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
 800dde2:	460b      	mov	r3, r1
 800dde4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dde6:	2300      	movs	r3, #0
 800dde8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddea:	2300      	movs	r3, #0
 800ddec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ddf4:	78fa      	ldrb	r2, [r7, #3]
 800ddf6:	4611      	mov	r1, r2
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7fa fdca 	bl	8008992 <HAL_PCD_SetAddress>
 800ddfe:	4603      	mov	r3, r0
 800de00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de02:	7bfb      	ldrb	r3, [r7, #15]
 800de04:	4618      	mov	r0, r3
 800de06:	f000 f861 	bl	800decc <USBD_Get_USB_Status>
 800de0a:	4603      	mov	r3, r0
 800de0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800de10:	4618      	mov	r0, r3
 800de12:	3710      	adds	r7, #16
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	607a      	str	r2, [r7, #4]
 800de22:	461a      	mov	r2, r3
 800de24:	460b      	mov	r3, r1
 800de26:	72fb      	strb	r3, [r7, #11]
 800de28:	4613      	mov	r3, r2
 800de2a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de2c:	2300      	movs	r3, #0
 800de2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de30:	2300      	movs	r3, #0
 800de32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800de3a:	893b      	ldrh	r3, [r7, #8]
 800de3c:	7af9      	ldrb	r1, [r7, #11]
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	f7fa fee0 	bl	8008c04 <HAL_PCD_EP_Transmit>
 800de44:	4603      	mov	r3, r0
 800de46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de48:	7dfb      	ldrb	r3, [r7, #23]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f000 f83e 	bl	800decc <USBD_Get_USB_Status>
 800de50:	4603      	mov	r3, r0
 800de52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de54:	7dbb      	ldrb	r3, [r7, #22]
}
 800de56:	4618      	mov	r0, r3
 800de58:	3718      	adds	r7, #24
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b086      	sub	sp, #24
 800de62:	af00      	add	r7, sp, #0
 800de64:	60f8      	str	r0, [r7, #12]
 800de66:	607a      	str	r2, [r7, #4]
 800de68:	461a      	mov	r2, r3
 800de6a:	460b      	mov	r3, r1
 800de6c:	72fb      	strb	r3, [r7, #11]
 800de6e:	4613      	mov	r3, r2
 800de70:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de72:	2300      	movs	r3, #0
 800de74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de76:	2300      	movs	r3, #0
 800de78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800de80:	893b      	ldrh	r3, [r7, #8]
 800de82:	7af9      	ldrb	r1, [r7, #11]
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	f7fa fe5b 	bl	8008b40 <HAL_PCD_EP_Receive>
 800de8a:	4603      	mov	r3, r0
 800de8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de8e:	7dfb      	ldrb	r3, [r7, #23]
 800de90:	4618      	mov	r0, r3
 800de92:	f000 f81b 	bl	800decc <USBD_Get_USB_Status>
 800de96:	4603      	mov	r3, r0
 800de98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de9a:	7dbb      	ldrb	r3, [r7, #22]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3718      	adds	r7, #24
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	460b      	mov	r3, r1
 800deae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800deb6:	78fa      	ldrb	r2, [r7, #3]
 800deb8:	4611      	mov	r1, r2
 800deba:	4618      	mov	r0, r3
 800debc:	f7fa fe8b 	bl	8008bd6 <HAL_PCD_EP_GetRxCount>
 800dec0:	4603      	mov	r3, r0
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3708      	adds	r7, #8
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
	...

0800decc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	4603      	mov	r3, r0
 800ded4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ded6:	2300      	movs	r3, #0
 800ded8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800deda:	79fb      	ldrb	r3, [r7, #7]
 800dedc:	2b03      	cmp	r3, #3
 800dede:	d817      	bhi.n	800df10 <USBD_Get_USB_Status+0x44>
 800dee0:	a201      	add	r2, pc, #4	; (adr r2, 800dee8 <USBD_Get_USB_Status+0x1c>)
 800dee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee6:	bf00      	nop
 800dee8:	0800def9 	.word	0x0800def9
 800deec:	0800deff 	.word	0x0800deff
 800def0:	0800df05 	.word	0x0800df05
 800def4:	0800df0b 	.word	0x0800df0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	73fb      	strb	r3, [r7, #15]
    break;
 800defc:	e00b      	b.n	800df16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800defe:	2302      	movs	r3, #2
 800df00:	73fb      	strb	r3, [r7, #15]
    break;
 800df02:	e008      	b.n	800df16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df04:	2301      	movs	r3, #1
 800df06:	73fb      	strb	r3, [r7, #15]
    break;
 800df08:	e005      	b.n	800df16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df0a:	2302      	movs	r3, #2
 800df0c:	73fb      	strb	r3, [r7, #15]
    break;
 800df0e:	e002      	b.n	800df16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800df10:	2302      	movs	r3, #2
 800df12:	73fb      	strb	r3, [r7, #15]
    break;
 800df14:	bf00      	nop
  }
  return usb_status;
 800df16:	7bfb      	ldrb	r3, [r7, #15]
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3714      	adds	r7, #20
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bc80      	pop	{r7}
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop

0800df24 <cos>:
 800df24:	b530      	push	{r4, r5, lr}
 800df26:	4a1e      	ldr	r2, [pc, #120]	; (800dfa0 <cos+0x7c>)
 800df28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df2c:	4293      	cmp	r3, r2
 800df2e:	b087      	sub	sp, #28
 800df30:	dc04      	bgt.n	800df3c <cos+0x18>
 800df32:	2200      	movs	r2, #0
 800df34:	2300      	movs	r3, #0
 800df36:	f000 ff23 	bl	800ed80 <__kernel_cos>
 800df3a:	e006      	b.n	800df4a <cos+0x26>
 800df3c:	4a19      	ldr	r2, [pc, #100]	; (800dfa4 <cos+0x80>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	dd05      	ble.n	800df4e <cos+0x2a>
 800df42:	4602      	mov	r2, r0
 800df44:	460b      	mov	r3, r1
 800df46:	f7f2 f94b 	bl	80001e0 <__aeabi_dsub>
 800df4a:	b007      	add	sp, #28
 800df4c:	bd30      	pop	{r4, r5, pc}
 800df4e:	aa02      	add	r2, sp, #8
 800df50:	f000 fa32 	bl	800e3b8 <__ieee754_rem_pio2>
 800df54:	f000 0003 	and.w	r0, r0, #3
 800df58:	2801      	cmp	r0, #1
 800df5a:	d007      	beq.n	800df6c <cos+0x48>
 800df5c:	2802      	cmp	r0, #2
 800df5e:	d00f      	beq.n	800df80 <cos+0x5c>
 800df60:	b9a8      	cbnz	r0, 800df8e <cos+0x6a>
 800df62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df6a:	e7e4      	b.n	800df36 <cos+0x12>
 800df6c:	9000      	str	r0, [sp, #0]
 800df6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df76:	f001 fb0b 	bl	800f590 <__kernel_sin>
 800df7a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800df7e:	e7e4      	b.n	800df4a <cos+0x26>
 800df80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df88:	f000 fefa 	bl	800ed80 <__kernel_cos>
 800df8c:	e7f5      	b.n	800df7a <cos+0x56>
 800df8e:	2301      	movs	r3, #1
 800df90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df94:	9300      	str	r3, [sp, #0]
 800df96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df9a:	f001 faf9 	bl	800f590 <__kernel_sin>
 800df9e:	e7d4      	b.n	800df4a <cos+0x26>
 800dfa0:	3fe921fb 	.word	0x3fe921fb
 800dfa4:	7fefffff 	.word	0x7fefffff

0800dfa8 <sin>:
 800dfa8:	b530      	push	{r4, r5, lr}
 800dfaa:	4a20      	ldr	r2, [pc, #128]	; (800e02c <sin+0x84>)
 800dfac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	b087      	sub	sp, #28
 800dfb4:	dc06      	bgt.n	800dfc4 <sin+0x1c>
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	2200      	movs	r2, #0
 800dfba:	9300      	str	r3, [sp, #0]
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	f001 fae7 	bl	800f590 <__kernel_sin>
 800dfc2:	e006      	b.n	800dfd2 <sin+0x2a>
 800dfc4:	4a1a      	ldr	r2, [pc, #104]	; (800e030 <sin+0x88>)
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	dd05      	ble.n	800dfd6 <sin+0x2e>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	460b      	mov	r3, r1
 800dfce:	f7f2 f907 	bl	80001e0 <__aeabi_dsub>
 800dfd2:	b007      	add	sp, #28
 800dfd4:	bd30      	pop	{r4, r5, pc}
 800dfd6:	aa02      	add	r2, sp, #8
 800dfd8:	f000 f9ee 	bl	800e3b8 <__ieee754_rem_pio2>
 800dfdc:	f000 0003 	and.w	r0, r0, #3
 800dfe0:	2801      	cmp	r0, #1
 800dfe2:	d009      	beq.n	800dff8 <sin+0x50>
 800dfe4:	2802      	cmp	r0, #2
 800dfe6:	d00e      	beq.n	800e006 <sin+0x5e>
 800dfe8:	b9c0      	cbnz	r0, 800e01c <sin+0x74>
 800dfea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfee:	2301      	movs	r3, #1
 800dff0:	9300      	str	r3, [sp, #0]
 800dff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dff6:	e7e2      	b.n	800dfbe <sin+0x16>
 800dff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e000:	f000 febe 	bl	800ed80 <__kernel_cos>
 800e004:	e7e5      	b.n	800dfd2 <sin+0x2a>
 800e006:	2301      	movs	r3, #1
 800e008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e00c:	9300      	str	r3, [sp, #0]
 800e00e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e012:	f001 fabd 	bl	800f590 <__kernel_sin>
 800e016:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800e01a:	e7da      	b.n	800dfd2 <sin+0x2a>
 800e01c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e024:	f000 feac 	bl	800ed80 <__kernel_cos>
 800e028:	e7f5      	b.n	800e016 <sin+0x6e>
 800e02a:	bf00      	nop
 800e02c:	3fe921fb 	.word	0x3fe921fb
 800e030:	7fefffff 	.word	0x7fefffff

0800e034 <atanf>:
 800e034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e038:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800e03c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800e040:	4604      	mov	r4, r0
 800e042:	4680      	mov	r8, r0
 800e044:	db0e      	blt.n	800e064 <atanf+0x30>
 800e046:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e04a:	dd04      	ble.n	800e056 <atanf+0x22>
 800e04c:	4601      	mov	r1, r0
 800e04e:	f7f2 fdcd 	bl	8000bec <__addsf3>
 800e052:	4604      	mov	r4, r0
 800e054:	e003      	b.n	800e05e <atanf+0x2a>
 800e056:	2800      	cmp	r0, #0
 800e058:	f300 80ce 	bgt.w	800e1f8 <atanf+0x1c4>
 800e05c:	4c67      	ldr	r4, [pc, #412]	; (800e1fc <atanf+0x1c8>)
 800e05e:	4620      	mov	r0, r4
 800e060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e064:	4b66      	ldr	r3, [pc, #408]	; (800e200 <atanf+0x1cc>)
 800e066:	429d      	cmp	r5, r3
 800e068:	dc0e      	bgt.n	800e088 <atanf+0x54>
 800e06a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800e06e:	da08      	bge.n	800e082 <atanf+0x4e>
 800e070:	4964      	ldr	r1, [pc, #400]	; (800e204 <atanf+0x1d0>)
 800e072:	f7f2 fdbb 	bl	8000bec <__addsf3>
 800e076:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e07a:	f7f3 f87b 	bl	8001174 <__aeabi_fcmpgt>
 800e07e:	2800      	cmp	r0, #0
 800e080:	d1ed      	bne.n	800e05e <atanf+0x2a>
 800e082:	f04f 36ff 	mov.w	r6, #4294967295
 800e086:	e01c      	b.n	800e0c2 <atanf+0x8e>
 800e088:	f000 f914 	bl	800e2b4 <fabsf>
 800e08c:	4b5e      	ldr	r3, [pc, #376]	; (800e208 <atanf+0x1d4>)
 800e08e:	4604      	mov	r4, r0
 800e090:	429d      	cmp	r5, r3
 800e092:	dc7c      	bgt.n	800e18e <atanf+0x15a>
 800e094:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800e098:	429d      	cmp	r5, r3
 800e09a:	dc67      	bgt.n	800e16c <atanf+0x138>
 800e09c:	4601      	mov	r1, r0
 800e09e:	f7f2 fda5 	bl	8000bec <__addsf3>
 800e0a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e0a6:	f7f2 fd9f 	bl	8000be8 <__aeabi_fsub>
 800e0aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e0ae:	4605      	mov	r5, r0
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	f7f2 fd9b 	bl	8000bec <__addsf3>
 800e0b6:	4601      	mov	r1, r0
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	f7f2 ff53 	bl	8000f64 <__aeabi_fdiv>
 800e0be:	2600      	movs	r6, #0
 800e0c0:	4604      	mov	r4, r0
 800e0c2:	4621      	mov	r1, r4
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f7f2 fe99 	bl	8000dfc <__aeabi_fmul>
 800e0ca:	4601      	mov	r1, r0
 800e0cc:	4607      	mov	r7, r0
 800e0ce:	f7f2 fe95 	bl	8000dfc <__aeabi_fmul>
 800e0d2:	4605      	mov	r5, r0
 800e0d4:	494d      	ldr	r1, [pc, #308]	; (800e20c <atanf+0x1d8>)
 800e0d6:	f7f2 fe91 	bl	8000dfc <__aeabi_fmul>
 800e0da:	494d      	ldr	r1, [pc, #308]	; (800e210 <atanf+0x1dc>)
 800e0dc:	f7f2 fd86 	bl	8000bec <__addsf3>
 800e0e0:	4629      	mov	r1, r5
 800e0e2:	f7f2 fe8b 	bl	8000dfc <__aeabi_fmul>
 800e0e6:	494b      	ldr	r1, [pc, #300]	; (800e214 <atanf+0x1e0>)
 800e0e8:	f7f2 fd80 	bl	8000bec <__addsf3>
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	f7f2 fe85 	bl	8000dfc <__aeabi_fmul>
 800e0f2:	4949      	ldr	r1, [pc, #292]	; (800e218 <atanf+0x1e4>)
 800e0f4:	f7f2 fd7a 	bl	8000bec <__addsf3>
 800e0f8:	4629      	mov	r1, r5
 800e0fa:	f7f2 fe7f 	bl	8000dfc <__aeabi_fmul>
 800e0fe:	4947      	ldr	r1, [pc, #284]	; (800e21c <atanf+0x1e8>)
 800e100:	f7f2 fd74 	bl	8000bec <__addsf3>
 800e104:	4629      	mov	r1, r5
 800e106:	f7f2 fe79 	bl	8000dfc <__aeabi_fmul>
 800e10a:	4945      	ldr	r1, [pc, #276]	; (800e220 <atanf+0x1ec>)
 800e10c:	f7f2 fd6e 	bl	8000bec <__addsf3>
 800e110:	4639      	mov	r1, r7
 800e112:	f7f2 fe73 	bl	8000dfc <__aeabi_fmul>
 800e116:	4943      	ldr	r1, [pc, #268]	; (800e224 <atanf+0x1f0>)
 800e118:	4607      	mov	r7, r0
 800e11a:	4628      	mov	r0, r5
 800e11c:	f7f2 fe6e 	bl	8000dfc <__aeabi_fmul>
 800e120:	4941      	ldr	r1, [pc, #260]	; (800e228 <atanf+0x1f4>)
 800e122:	f7f2 fd61 	bl	8000be8 <__aeabi_fsub>
 800e126:	4629      	mov	r1, r5
 800e128:	f7f2 fe68 	bl	8000dfc <__aeabi_fmul>
 800e12c:	493f      	ldr	r1, [pc, #252]	; (800e22c <atanf+0x1f8>)
 800e12e:	f7f2 fd5b 	bl	8000be8 <__aeabi_fsub>
 800e132:	4629      	mov	r1, r5
 800e134:	f7f2 fe62 	bl	8000dfc <__aeabi_fmul>
 800e138:	493d      	ldr	r1, [pc, #244]	; (800e230 <atanf+0x1fc>)
 800e13a:	f7f2 fd55 	bl	8000be8 <__aeabi_fsub>
 800e13e:	4629      	mov	r1, r5
 800e140:	f7f2 fe5c 	bl	8000dfc <__aeabi_fmul>
 800e144:	493b      	ldr	r1, [pc, #236]	; (800e234 <atanf+0x200>)
 800e146:	f7f2 fd4f 	bl	8000be8 <__aeabi_fsub>
 800e14a:	4629      	mov	r1, r5
 800e14c:	f7f2 fe56 	bl	8000dfc <__aeabi_fmul>
 800e150:	4601      	mov	r1, r0
 800e152:	4638      	mov	r0, r7
 800e154:	f7f2 fd4a 	bl	8000bec <__addsf3>
 800e158:	4621      	mov	r1, r4
 800e15a:	f7f2 fe4f 	bl	8000dfc <__aeabi_fmul>
 800e15e:	1c73      	adds	r3, r6, #1
 800e160:	4601      	mov	r1, r0
 800e162:	d133      	bne.n	800e1cc <atanf+0x198>
 800e164:	4620      	mov	r0, r4
 800e166:	f7f2 fd3f 	bl	8000be8 <__aeabi_fsub>
 800e16a:	e772      	b.n	800e052 <atanf+0x1e>
 800e16c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e170:	f7f2 fd3a 	bl	8000be8 <__aeabi_fsub>
 800e174:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e178:	4605      	mov	r5, r0
 800e17a:	4620      	mov	r0, r4
 800e17c:	f7f2 fd36 	bl	8000bec <__addsf3>
 800e180:	4601      	mov	r1, r0
 800e182:	4628      	mov	r0, r5
 800e184:	f7f2 feee 	bl	8000f64 <__aeabi_fdiv>
 800e188:	2601      	movs	r6, #1
 800e18a:	4604      	mov	r4, r0
 800e18c:	e799      	b.n	800e0c2 <atanf+0x8e>
 800e18e:	4b2a      	ldr	r3, [pc, #168]	; (800e238 <atanf+0x204>)
 800e190:	429d      	cmp	r5, r3
 800e192:	dc14      	bgt.n	800e1be <atanf+0x18a>
 800e194:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800e198:	f7f2 fd26 	bl	8000be8 <__aeabi_fsub>
 800e19c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800e1a0:	4605      	mov	r5, r0
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	f7f2 fe2a 	bl	8000dfc <__aeabi_fmul>
 800e1a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e1ac:	f7f2 fd1e 	bl	8000bec <__addsf3>
 800e1b0:	4601      	mov	r1, r0
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	f7f2 fed6 	bl	8000f64 <__aeabi_fdiv>
 800e1b8:	2602      	movs	r6, #2
 800e1ba:	4604      	mov	r4, r0
 800e1bc:	e781      	b.n	800e0c2 <atanf+0x8e>
 800e1be:	4601      	mov	r1, r0
 800e1c0:	481e      	ldr	r0, [pc, #120]	; (800e23c <atanf+0x208>)
 800e1c2:	f7f2 fecf 	bl	8000f64 <__aeabi_fdiv>
 800e1c6:	2603      	movs	r6, #3
 800e1c8:	4604      	mov	r4, r0
 800e1ca:	e77a      	b.n	800e0c2 <atanf+0x8e>
 800e1cc:	4b1c      	ldr	r3, [pc, #112]	; (800e240 <atanf+0x20c>)
 800e1ce:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800e1d2:	f7f2 fd09 	bl	8000be8 <__aeabi_fsub>
 800e1d6:	4621      	mov	r1, r4
 800e1d8:	f7f2 fd06 	bl	8000be8 <__aeabi_fsub>
 800e1dc:	4b19      	ldr	r3, [pc, #100]	; (800e244 <atanf+0x210>)
 800e1de:	4601      	mov	r1, r0
 800e1e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e1e4:	f7f2 fd00 	bl	8000be8 <__aeabi_fsub>
 800e1e8:	f1b8 0f00 	cmp.w	r8, #0
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	f6bf af36 	bge.w	800e05e <atanf+0x2a>
 800e1f2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e1f6:	e72c      	b.n	800e052 <atanf+0x1e>
 800e1f8:	4c13      	ldr	r4, [pc, #76]	; (800e248 <atanf+0x214>)
 800e1fa:	e730      	b.n	800e05e <atanf+0x2a>
 800e1fc:	bfc90fdb 	.word	0xbfc90fdb
 800e200:	3edfffff 	.word	0x3edfffff
 800e204:	7149f2ca 	.word	0x7149f2ca
 800e208:	3f97ffff 	.word	0x3f97ffff
 800e20c:	3c8569d7 	.word	0x3c8569d7
 800e210:	3d4bda59 	.word	0x3d4bda59
 800e214:	3d886b35 	.word	0x3d886b35
 800e218:	3dba2e6e 	.word	0x3dba2e6e
 800e21c:	3e124925 	.word	0x3e124925
 800e220:	3eaaaaab 	.word	0x3eaaaaab
 800e224:	bd15a221 	.word	0xbd15a221
 800e228:	3d6ef16b 	.word	0x3d6ef16b
 800e22c:	3d9d8795 	.word	0x3d9d8795
 800e230:	3de38e38 	.word	0x3de38e38
 800e234:	3e4ccccd 	.word	0x3e4ccccd
 800e238:	401bffff 	.word	0x401bffff
 800e23c:	bf800000 	.word	0xbf800000
 800e240:	080138d8 	.word	0x080138d8
 800e244:	080138c8 	.word	0x080138c8
 800e248:	3fc90fdb 	.word	0x3fc90fdb

0800e24c <cosf>:
 800e24c:	b507      	push	{r0, r1, r2, lr}
 800e24e:	4a18      	ldr	r2, [pc, #96]	; (800e2b0 <cosf+0x64>)
 800e250:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e254:	4293      	cmp	r3, r2
 800e256:	4601      	mov	r1, r0
 800e258:	dc03      	bgt.n	800e262 <cosf+0x16>
 800e25a:	2100      	movs	r1, #0
 800e25c:	f001 fa4e 	bl	800f6fc <__kernel_cosf>
 800e260:	e004      	b.n	800e26c <cosf+0x20>
 800e262:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e266:	db04      	blt.n	800e272 <cosf+0x26>
 800e268:	f7f2 fcbe 	bl	8000be8 <__aeabi_fsub>
 800e26c:	b003      	add	sp, #12
 800e26e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e272:	4669      	mov	r1, sp
 800e274:	f000 fbd4 	bl	800ea20 <__ieee754_rem_pio2f>
 800e278:	f000 0203 	and.w	r2, r0, #3
 800e27c:	2a01      	cmp	r2, #1
 800e27e:	d005      	beq.n	800e28c <cosf+0x40>
 800e280:	2a02      	cmp	r2, #2
 800e282:	d00a      	beq.n	800e29a <cosf+0x4e>
 800e284:	b972      	cbnz	r2, 800e2a4 <cosf+0x58>
 800e286:	9901      	ldr	r1, [sp, #4]
 800e288:	9800      	ldr	r0, [sp, #0]
 800e28a:	e7e7      	b.n	800e25c <cosf+0x10>
 800e28c:	9901      	ldr	r1, [sp, #4]
 800e28e:	9800      	ldr	r0, [sp, #0]
 800e290:	f001 fd6a 	bl	800fd68 <__kernel_sinf>
 800e294:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e298:	e7e8      	b.n	800e26c <cosf+0x20>
 800e29a:	9901      	ldr	r1, [sp, #4]
 800e29c:	9800      	ldr	r0, [sp, #0]
 800e29e:	f001 fa2d 	bl	800f6fc <__kernel_cosf>
 800e2a2:	e7f7      	b.n	800e294 <cosf+0x48>
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	9901      	ldr	r1, [sp, #4]
 800e2a8:	9800      	ldr	r0, [sp, #0]
 800e2aa:	f001 fd5d 	bl	800fd68 <__kernel_sinf>
 800e2ae:	e7dd      	b.n	800e26c <cosf+0x20>
 800e2b0:	3f490fd8 	.word	0x3f490fd8

0800e2b4 <fabsf>:
 800e2b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e2b8:	4770      	bx	lr
	...

0800e2bc <sinf>:
 800e2bc:	b507      	push	{r0, r1, r2, lr}
 800e2be:	4a19      	ldr	r2, [pc, #100]	; (800e324 <sinf+0x68>)
 800e2c0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	4601      	mov	r1, r0
 800e2c8:	dc04      	bgt.n	800e2d4 <sinf+0x18>
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	2100      	movs	r1, #0
 800e2ce:	f001 fd4b 	bl	800fd68 <__kernel_sinf>
 800e2d2:	e004      	b.n	800e2de <sinf+0x22>
 800e2d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e2d8:	db04      	blt.n	800e2e4 <sinf+0x28>
 800e2da:	f7f2 fc85 	bl	8000be8 <__aeabi_fsub>
 800e2de:	b003      	add	sp, #12
 800e2e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e2e4:	4669      	mov	r1, sp
 800e2e6:	f000 fb9b 	bl	800ea20 <__ieee754_rem_pio2f>
 800e2ea:	f000 0003 	and.w	r0, r0, #3
 800e2ee:	2801      	cmp	r0, #1
 800e2f0:	d006      	beq.n	800e300 <sinf+0x44>
 800e2f2:	2802      	cmp	r0, #2
 800e2f4:	d009      	beq.n	800e30a <sinf+0x4e>
 800e2f6:	b980      	cbnz	r0, 800e31a <sinf+0x5e>
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	9901      	ldr	r1, [sp, #4]
 800e2fc:	9800      	ldr	r0, [sp, #0]
 800e2fe:	e7e6      	b.n	800e2ce <sinf+0x12>
 800e300:	9901      	ldr	r1, [sp, #4]
 800e302:	9800      	ldr	r0, [sp, #0]
 800e304:	f001 f9fa 	bl	800f6fc <__kernel_cosf>
 800e308:	e7e9      	b.n	800e2de <sinf+0x22>
 800e30a:	2201      	movs	r2, #1
 800e30c:	9901      	ldr	r1, [sp, #4]
 800e30e:	9800      	ldr	r0, [sp, #0]
 800e310:	f001 fd2a 	bl	800fd68 <__kernel_sinf>
 800e314:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e318:	e7e1      	b.n	800e2de <sinf+0x22>
 800e31a:	9901      	ldr	r1, [sp, #4]
 800e31c:	9800      	ldr	r0, [sp, #0]
 800e31e:	f001 f9ed 	bl	800f6fc <__kernel_cosf>
 800e322:	e7f7      	b.n	800e314 <sinf+0x58>
 800e324:	3f490fd8 	.word	0x3f490fd8

0800e328 <asinf>:
 800e328:	b538      	push	{r3, r4, r5, lr}
 800e32a:	4604      	mov	r4, r0
 800e32c:	f000 fa34 	bl	800e798 <__ieee754_asinf>
 800e330:	4b0e      	ldr	r3, [pc, #56]	; (800e36c <asinf+0x44>)
 800e332:	4605      	mov	r5, r0
 800e334:	f993 3000 	ldrsb.w	r3, [r3]
 800e338:	3301      	adds	r3, #1
 800e33a:	d015      	beq.n	800e368 <asinf+0x40>
 800e33c:	4621      	mov	r1, r4
 800e33e:	4620      	mov	r0, r4
 800e340:	f7f2 ff22 	bl	8001188 <__aeabi_fcmpun>
 800e344:	b980      	cbnz	r0, 800e368 <asinf+0x40>
 800e346:	4620      	mov	r0, r4
 800e348:	f7ff ffb4 	bl	800e2b4 <fabsf>
 800e34c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e350:	f7f2 ff10 	bl	8001174 <__aeabi_fcmpgt>
 800e354:	b140      	cbz	r0, 800e368 <asinf+0x40>
 800e356:	f001 ff1b 	bl	8010190 <__errno>
 800e35a:	2321      	movs	r3, #33	; 0x21
 800e35c:	6003      	str	r3, [r0, #0]
 800e35e:	4804      	ldr	r0, [pc, #16]	; (800e370 <asinf+0x48>)
 800e360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e364:	f001 bec4 	b.w	80100f0 <nanf>
 800e368:	4628      	mov	r0, r5
 800e36a:	bd38      	pop	{r3, r4, r5, pc}
 800e36c:	200001c2 	.word	0x200001c2
 800e370:	08014108 	.word	0x08014108

0800e374 <sqrtf>:
 800e374:	b538      	push	{r3, r4, r5, lr}
 800e376:	4605      	mov	r5, r0
 800e378:	f000 fcb0 	bl	800ecdc <__ieee754_sqrtf>
 800e37c:	4b0d      	ldr	r3, [pc, #52]	; (800e3b4 <sqrtf+0x40>)
 800e37e:	4604      	mov	r4, r0
 800e380:	f993 3000 	ldrsb.w	r3, [r3]
 800e384:	3301      	adds	r3, #1
 800e386:	d012      	beq.n	800e3ae <sqrtf+0x3a>
 800e388:	4629      	mov	r1, r5
 800e38a:	4628      	mov	r0, r5
 800e38c:	f7f2 fefc 	bl	8001188 <__aeabi_fcmpun>
 800e390:	b968      	cbnz	r0, 800e3ae <sqrtf+0x3a>
 800e392:	2100      	movs	r1, #0
 800e394:	4628      	mov	r0, r5
 800e396:	f7f2 fecf 	bl	8001138 <__aeabi_fcmplt>
 800e39a:	b140      	cbz	r0, 800e3ae <sqrtf+0x3a>
 800e39c:	f001 fef8 	bl	8010190 <__errno>
 800e3a0:	2321      	movs	r3, #33	; 0x21
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	6003      	str	r3, [r0, #0]
 800e3a6:	4608      	mov	r0, r1
 800e3a8:	f7f2 fddc 	bl	8000f64 <__aeabi_fdiv>
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	bd38      	pop	{r3, r4, r5, pc}
 800e3b2:	bf00      	nop
 800e3b4:	200001c2 	.word	0x200001c2

0800e3b8 <__ieee754_rem_pio2>:
 800e3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3bc:	4614      	mov	r4, r2
 800e3be:	4ac4      	ldr	r2, [pc, #784]	; (800e6d0 <__ieee754_rem_pio2+0x318>)
 800e3c0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800e3c4:	b08d      	sub	sp, #52	; 0x34
 800e3c6:	4592      	cmp	sl, r2
 800e3c8:	9104      	str	r1, [sp, #16]
 800e3ca:	dc07      	bgt.n	800e3dc <__ieee754_rem_pio2+0x24>
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	e9c4 0100 	strd	r0, r1, [r4]
 800e3d4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800e3d8:	2500      	movs	r5, #0
 800e3da:	e024      	b.n	800e426 <__ieee754_rem_pio2+0x6e>
 800e3dc:	4abd      	ldr	r2, [pc, #756]	; (800e6d4 <__ieee754_rem_pio2+0x31c>)
 800e3de:	4592      	cmp	sl, r2
 800e3e0:	dc72      	bgt.n	800e4c8 <__ieee754_rem_pio2+0x110>
 800e3e2:	9b04      	ldr	r3, [sp, #16]
 800e3e4:	4dbc      	ldr	r5, [pc, #752]	; (800e6d8 <__ieee754_rem_pio2+0x320>)
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	a3ab      	add	r3, pc, #684	; (adr r3, 800e698 <__ieee754_rem_pio2+0x2e0>)
 800e3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ee:	dd36      	ble.n	800e45e <__ieee754_rem_pio2+0xa6>
 800e3f0:	f7f1 fef6 	bl	80001e0 <__aeabi_dsub>
 800e3f4:	45aa      	cmp	sl, r5
 800e3f6:	4606      	mov	r6, r0
 800e3f8:	460f      	mov	r7, r1
 800e3fa:	d018      	beq.n	800e42e <__ieee754_rem_pio2+0x76>
 800e3fc:	a3a8      	add	r3, pc, #672	; (adr r3, 800e6a0 <__ieee754_rem_pio2+0x2e8>)
 800e3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e402:	f7f1 feed 	bl	80001e0 <__aeabi_dsub>
 800e406:	4602      	mov	r2, r0
 800e408:	460b      	mov	r3, r1
 800e40a:	4630      	mov	r0, r6
 800e40c:	e9c4 2300 	strd	r2, r3, [r4]
 800e410:	4639      	mov	r1, r7
 800e412:	f7f1 fee5 	bl	80001e0 <__aeabi_dsub>
 800e416:	a3a2      	add	r3, pc, #648	; (adr r3, 800e6a0 <__ieee754_rem_pio2+0x2e8>)
 800e418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41c:	f7f1 fee0 	bl	80001e0 <__aeabi_dsub>
 800e420:	2501      	movs	r5, #1
 800e422:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e426:	4628      	mov	r0, r5
 800e428:	b00d      	add	sp, #52	; 0x34
 800e42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e42e:	a39e      	add	r3, pc, #632	; (adr r3, 800e6a8 <__ieee754_rem_pio2+0x2f0>)
 800e430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e434:	f7f1 fed4 	bl	80001e0 <__aeabi_dsub>
 800e438:	a39d      	add	r3, pc, #628	; (adr r3, 800e6b0 <__ieee754_rem_pio2+0x2f8>)
 800e43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e43e:	4606      	mov	r6, r0
 800e440:	460f      	mov	r7, r1
 800e442:	f7f1 fecd 	bl	80001e0 <__aeabi_dsub>
 800e446:	4602      	mov	r2, r0
 800e448:	460b      	mov	r3, r1
 800e44a:	4630      	mov	r0, r6
 800e44c:	e9c4 2300 	strd	r2, r3, [r4]
 800e450:	4639      	mov	r1, r7
 800e452:	f7f1 fec5 	bl	80001e0 <__aeabi_dsub>
 800e456:	a396      	add	r3, pc, #600	; (adr r3, 800e6b0 <__ieee754_rem_pio2+0x2f8>)
 800e458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e45c:	e7de      	b.n	800e41c <__ieee754_rem_pio2+0x64>
 800e45e:	f7f1 fec1 	bl	80001e4 <__adddf3>
 800e462:	45aa      	cmp	sl, r5
 800e464:	4606      	mov	r6, r0
 800e466:	460f      	mov	r7, r1
 800e468:	d016      	beq.n	800e498 <__ieee754_rem_pio2+0xe0>
 800e46a:	a38d      	add	r3, pc, #564	; (adr r3, 800e6a0 <__ieee754_rem_pio2+0x2e8>)
 800e46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e470:	f7f1 feb8 	bl	80001e4 <__adddf3>
 800e474:	4602      	mov	r2, r0
 800e476:	460b      	mov	r3, r1
 800e478:	4630      	mov	r0, r6
 800e47a:	e9c4 2300 	strd	r2, r3, [r4]
 800e47e:	4639      	mov	r1, r7
 800e480:	f7f1 feae 	bl	80001e0 <__aeabi_dsub>
 800e484:	a386      	add	r3, pc, #536	; (adr r3, 800e6a0 <__ieee754_rem_pio2+0x2e8>)
 800e486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48a:	f7f1 feab 	bl	80001e4 <__adddf3>
 800e48e:	f04f 35ff 	mov.w	r5, #4294967295
 800e492:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e496:	e7c6      	b.n	800e426 <__ieee754_rem_pio2+0x6e>
 800e498:	a383      	add	r3, pc, #524	; (adr r3, 800e6a8 <__ieee754_rem_pio2+0x2f0>)
 800e49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49e:	f7f1 fea1 	bl	80001e4 <__adddf3>
 800e4a2:	a383      	add	r3, pc, #524	; (adr r3, 800e6b0 <__ieee754_rem_pio2+0x2f8>)
 800e4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a8:	4606      	mov	r6, r0
 800e4aa:	460f      	mov	r7, r1
 800e4ac:	f7f1 fe9a 	bl	80001e4 <__adddf3>
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	4630      	mov	r0, r6
 800e4b6:	e9c4 2300 	strd	r2, r3, [r4]
 800e4ba:	4639      	mov	r1, r7
 800e4bc:	f7f1 fe90 	bl	80001e0 <__aeabi_dsub>
 800e4c0:	a37b      	add	r3, pc, #492	; (adr r3, 800e6b0 <__ieee754_rem_pio2+0x2f8>)
 800e4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c6:	e7e0      	b.n	800e48a <__ieee754_rem_pio2+0xd2>
 800e4c8:	4a84      	ldr	r2, [pc, #528]	; (800e6dc <__ieee754_rem_pio2+0x324>)
 800e4ca:	4592      	cmp	sl, r2
 800e4cc:	f300 80d5 	bgt.w	800e67a <__ieee754_rem_pio2+0x2c2>
 800e4d0:	f001 fcc0 	bl	800fe54 <fabs>
 800e4d4:	a378      	add	r3, pc, #480	; (adr r3, 800e6b8 <__ieee754_rem_pio2+0x300>)
 800e4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4da:	4606      	mov	r6, r0
 800e4dc:	460f      	mov	r7, r1
 800e4de:	f7f2 f837 	bl	8000550 <__aeabi_dmul>
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	4b7e      	ldr	r3, [pc, #504]	; (800e6e0 <__ieee754_rem_pio2+0x328>)
 800e4e6:	f7f1 fe7d 	bl	80001e4 <__adddf3>
 800e4ea:	f7f2 fae1 	bl	8000ab0 <__aeabi_d2iz>
 800e4ee:	4605      	mov	r5, r0
 800e4f0:	f7f1 ffc4 	bl	800047c <__aeabi_i2d>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e4fc:	a366      	add	r3, pc, #408	; (adr r3, 800e698 <__ieee754_rem_pio2+0x2e0>)
 800e4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e502:	f7f2 f825 	bl	8000550 <__aeabi_dmul>
 800e506:	4602      	mov	r2, r0
 800e508:	460b      	mov	r3, r1
 800e50a:	4630      	mov	r0, r6
 800e50c:	4639      	mov	r1, r7
 800e50e:	f7f1 fe67 	bl	80001e0 <__aeabi_dsub>
 800e512:	a363      	add	r3, pc, #396	; (adr r3, 800e6a0 <__ieee754_rem_pio2+0x2e8>)
 800e514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e518:	4680      	mov	r8, r0
 800e51a:	4689      	mov	r9, r1
 800e51c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e520:	f7f2 f816 	bl	8000550 <__aeabi_dmul>
 800e524:	2d1f      	cmp	r5, #31
 800e526:	4606      	mov	r6, r0
 800e528:	460f      	mov	r7, r1
 800e52a:	dc0e      	bgt.n	800e54a <__ieee754_rem_pio2+0x192>
 800e52c:	4b6d      	ldr	r3, [pc, #436]	; (800e6e4 <__ieee754_rem_pio2+0x32c>)
 800e52e:	1e6a      	subs	r2, r5, #1
 800e530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e534:	4553      	cmp	r3, sl
 800e536:	d008      	beq.n	800e54a <__ieee754_rem_pio2+0x192>
 800e538:	4632      	mov	r2, r6
 800e53a:	463b      	mov	r3, r7
 800e53c:	4640      	mov	r0, r8
 800e53e:	4649      	mov	r1, r9
 800e540:	f7f1 fe4e 	bl	80001e0 <__aeabi_dsub>
 800e544:	e9c4 0100 	strd	r0, r1, [r4]
 800e548:	e013      	b.n	800e572 <__ieee754_rem_pio2+0x1ba>
 800e54a:	463b      	mov	r3, r7
 800e54c:	4632      	mov	r2, r6
 800e54e:	4640      	mov	r0, r8
 800e550:	4649      	mov	r1, r9
 800e552:	f7f1 fe45 	bl	80001e0 <__aeabi_dsub>
 800e556:	ea4f 532a 	mov.w	r3, sl, asr #20
 800e55a:	9305      	str	r3, [sp, #20]
 800e55c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e560:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800e564:	f1ba 0f10 	cmp.w	sl, #16
 800e568:	dc1f      	bgt.n	800e5aa <__ieee754_rem_pio2+0x1f2>
 800e56a:	4602      	mov	r2, r0
 800e56c:	460b      	mov	r3, r1
 800e56e:	e9c4 2300 	strd	r2, r3, [r4]
 800e572:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800e576:	4640      	mov	r0, r8
 800e578:	4653      	mov	r3, sl
 800e57a:	4649      	mov	r1, r9
 800e57c:	f7f1 fe30 	bl	80001e0 <__aeabi_dsub>
 800e580:	4632      	mov	r2, r6
 800e582:	463b      	mov	r3, r7
 800e584:	f7f1 fe2c 	bl	80001e0 <__aeabi_dsub>
 800e588:	460b      	mov	r3, r1
 800e58a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e58e:	9904      	ldr	r1, [sp, #16]
 800e590:	4602      	mov	r2, r0
 800e592:	2900      	cmp	r1, #0
 800e594:	f6bf af47 	bge.w	800e426 <__ieee754_rem_pio2+0x6e>
 800e598:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800e59c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e5a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e5a4:	60e3      	str	r3, [r4, #12]
 800e5a6:	426d      	negs	r5, r5
 800e5a8:	e73d      	b.n	800e426 <__ieee754_rem_pio2+0x6e>
 800e5aa:	a33f      	add	r3, pc, #252	; (adr r3, 800e6a8 <__ieee754_rem_pio2+0x2f0>)
 800e5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5b4:	f7f1 ffcc 	bl	8000550 <__aeabi_dmul>
 800e5b8:	4606      	mov	r6, r0
 800e5ba:	460f      	mov	r7, r1
 800e5bc:	4602      	mov	r2, r0
 800e5be:	460b      	mov	r3, r1
 800e5c0:	4640      	mov	r0, r8
 800e5c2:	4649      	mov	r1, r9
 800e5c4:	f7f1 fe0c 	bl	80001e0 <__aeabi_dsub>
 800e5c8:	4602      	mov	r2, r0
 800e5ca:	460b      	mov	r3, r1
 800e5cc:	4682      	mov	sl, r0
 800e5ce:	468b      	mov	fp, r1
 800e5d0:	4640      	mov	r0, r8
 800e5d2:	4649      	mov	r1, r9
 800e5d4:	f7f1 fe04 	bl	80001e0 <__aeabi_dsub>
 800e5d8:	4632      	mov	r2, r6
 800e5da:	463b      	mov	r3, r7
 800e5dc:	f7f1 fe00 	bl	80001e0 <__aeabi_dsub>
 800e5e0:	a333      	add	r3, pc, #204	; (adr r3, 800e6b0 <__ieee754_rem_pio2+0x2f8>)
 800e5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e6:	4606      	mov	r6, r0
 800e5e8:	460f      	mov	r7, r1
 800e5ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5ee:	f7f1 ffaf 	bl	8000550 <__aeabi_dmul>
 800e5f2:	4632      	mov	r2, r6
 800e5f4:	463b      	mov	r3, r7
 800e5f6:	f7f1 fdf3 	bl	80001e0 <__aeabi_dsub>
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	4606      	mov	r6, r0
 800e600:	460f      	mov	r7, r1
 800e602:	4650      	mov	r0, sl
 800e604:	4659      	mov	r1, fp
 800e606:	f7f1 fdeb 	bl	80001e0 <__aeabi_dsub>
 800e60a:	9a05      	ldr	r2, [sp, #20]
 800e60c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e610:	1ad3      	subs	r3, r2, r3
 800e612:	2b31      	cmp	r3, #49	; 0x31
 800e614:	dc06      	bgt.n	800e624 <__ieee754_rem_pio2+0x26c>
 800e616:	4602      	mov	r2, r0
 800e618:	460b      	mov	r3, r1
 800e61a:	46d0      	mov	r8, sl
 800e61c:	46d9      	mov	r9, fp
 800e61e:	e9c4 2300 	strd	r2, r3, [r4]
 800e622:	e7a6      	b.n	800e572 <__ieee754_rem_pio2+0x1ba>
 800e624:	a326      	add	r3, pc, #152	; (adr r3, 800e6c0 <__ieee754_rem_pio2+0x308>)
 800e626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e62a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e62e:	f7f1 ff8f 	bl	8000550 <__aeabi_dmul>
 800e632:	4606      	mov	r6, r0
 800e634:	460f      	mov	r7, r1
 800e636:	4602      	mov	r2, r0
 800e638:	460b      	mov	r3, r1
 800e63a:	4650      	mov	r0, sl
 800e63c:	4659      	mov	r1, fp
 800e63e:	f7f1 fdcf 	bl	80001e0 <__aeabi_dsub>
 800e642:	4602      	mov	r2, r0
 800e644:	460b      	mov	r3, r1
 800e646:	4680      	mov	r8, r0
 800e648:	4689      	mov	r9, r1
 800e64a:	4650      	mov	r0, sl
 800e64c:	4659      	mov	r1, fp
 800e64e:	f7f1 fdc7 	bl	80001e0 <__aeabi_dsub>
 800e652:	4632      	mov	r2, r6
 800e654:	463b      	mov	r3, r7
 800e656:	f7f1 fdc3 	bl	80001e0 <__aeabi_dsub>
 800e65a:	a31b      	add	r3, pc, #108	; (adr r3, 800e6c8 <__ieee754_rem_pio2+0x310>)
 800e65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e660:	4606      	mov	r6, r0
 800e662:	460f      	mov	r7, r1
 800e664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e668:	f7f1 ff72 	bl	8000550 <__aeabi_dmul>
 800e66c:	4632      	mov	r2, r6
 800e66e:	463b      	mov	r3, r7
 800e670:	f7f1 fdb6 	bl	80001e0 <__aeabi_dsub>
 800e674:	4606      	mov	r6, r0
 800e676:	460f      	mov	r7, r1
 800e678:	e75e      	b.n	800e538 <__ieee754_rem_pio2+0x180>
 800e67a:	4a1b      	ldr	r2, [pc, #108]	; (800e6e8 <__ieee754_rem_pio2+0x330>)
 800e67c:	4592      	cmp	sl, r2
 800e67e:	dd35      	ble.n	800e6ec <__ieee754_rem_pio2+0x334>
 800e680:	4602      	mov	r2, r0
 800e682:	460b      	mov	r3, r1
 800e684:	f7f1 fdac 	bl	80001e0 <__aeabi_dsub>
 800e688:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e68c:	e9c4 0100 	strd	r0, r1, [r4]
 800e690:	e6a2      	b.n	800e3d8 <__ieee754_rem_pio2+0x20>
 800e692:	bf00      	nop
 800e694:	f3af 8000 	nop.w
 800e698:	54400000 	.word	0x54400000
 800e69c:	3ff921fb 	.word	0x3ff921fb
 800e6a0:	1a626331 	.word	0x1a626331
 800e6a4:	3dd0b461 	.word	0x3dd0b461
 800e6a8:	1a600000 	.word	0x1a600000
 800e6ac:	3dd0b461 	.word	0x3dd0b461
 800e6b0:	2e037073 	.word	0x2e037073
 800e6b4:	3ba3198a 	.word	0x3ba3198a
 800e6b8:	6dc9c883 	.word	0x6dc9c883
 800e6bc:	3fe45f30 	.word	0x3fe45f30
 800e6c0:	2e000000 	.word	0x2e000000
 800e6c4:	3ba3198a 	.word	0x3ba3198a
 800e6c8:	252049c1 	.word	0x252049c1
 800e6cc:	397b839a 	.word	0x397b839a
 800e6d0:	3fe921fb 	.word	0x3fe921fb
 800e6d4:	4002d97b 	.word	0x4002d97b
 800e6d8:	3ff921fb 	.word	0x3ff921fb
 800e6dc:	413921fb 	.word	0x413921fb
 800e6e0:	3fe00000 	.word	0x3fe00000
 800e6e4:	080138e8 	.word	0x080138e8
 800e6e8:	7fefffff 	.word	0x7fefffff
 800e6ec:	ea4f 552a 	mov.w	r5, sl, asr #20
 800e6f0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800e6f4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800e6f8:	460f      	mov	r7, r1
 800e6fa:	4606      	mov	r6, r0
 800e6fc:	f7f2 f9d8 	bl	8000ab0 <__aeabi_d2iz>
 800e700:	f7f1 febc 	bl	800047c <__aeabi_i2d>
 800e704:	4602      	mov	r2, r0
 800e706:	460b      	mov	r3, r1
 800e708:	4630      	mov	r0, r6
 800e70a:	4639      	mov	r1, r7
 800e70c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e710:	f7f1 fd66 	bl	80001e0 <__aeabi_dsub>
 800e714:	2200      	movs	r2, #0
 800e716:	4b1e      	ldr	r3, [pc, #120]	; (800e790 <__ieee754_rem_pio2+0x3d8>)
 800e718:	f7f1 ff1a 	bl	8000550 <__aeabi_dmul>
 800e71c:	460f      	mov	r7, r1
 800e71e:	4606      	mov	r6, r0
 800e720:	f7f2 f9c6 	bl	8000ab0 <__aeabi_d2iz>
 800e724:	f7f1 feaa 	bl	800047c <__aeabi_i2d>
 800e728:	4602      	mov	r2, r0
 800e72a:	460b      	mov	r3, r1
 800e72c:	4630      	mov	r0, r6
 800e72e:	4639      	mov	r1, r7
 800e730:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e734:	f7f1 fd54 	bl	80001e0 <__aeabi_dsub>
 800e738:	2200      	movs	r2, #0
 800e73a:	4b15      	ldr	r3, [pc, #84]	; (800e790 <__ieee754_rem_pio2+0x3d8>)
 800e73c:	f7f1 ff08 	bl	8000550 <__aeabi_dmul>
 800e740:	f04f 0803 	mov.w	r8, #3
 800e744:	2600      	movs	r6, #0
 800e746:	2700      	movs	r7, #0
 800e748:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e74c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800e750:	4632      	mov	r2, r6
 800e752:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800e756:	463b      	mov	r3, r7
 800e758:	46c2      	mov	sl, r8
 800e75a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e75e:	f7f2 f95f 	bl	8000a20 <__aeabi_dcmpeq>
 800e762:	2800      	cmp	r0, #0
 800e764:	d1f4      	bne.n	800e750 <__ieee754_rem_pio2+0x398>
 800e766:	4b0b      	ldr	r3, [pc, #44]	; (800e794 <__ieee754_rem_pio2+0x3dc>)
 800e768:	462a      	mov	r2, r5
 800e76a:	9301      	str	r3, [sp, #4]
 800e76c:	2302      	movs	r3, #2
 800e76e:	4621      	mov	r1, r4
 800e770:	9300      	str	r3, [sp, #0]
 800e772:	a806      	add	r0, sp, #24
 800e774:	4653      	mov	r3, sl
 800e776:	f000 fbc1 	bl	800eefc <__kernel_rem_pio2>
 800e77a:	9b04      	ldr	r3, [sp, #16]
 800e77c:	4605      	mov	r5, r0
 800e77e:	2b00      	cmp	r3, #0
 800e780:	f6bf ae51 	bge.w	800e426 <__ieee754_rem_pio2+0x6e>
 800e784:	6863      	ldr	r3, [r4, #4]
 800e786:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e78a:	6063      	str	r3, [r4, #4]
 800e78c:	68e3      	ldr	r3, [r4, #12]
 800e78e:	e707      	b.n	800e5a0 <__ieee754_rem_pio2+0x1e8>
 800e790:	41700000 	.word	0x41700000
 800e794:	08013968 	.word	0x08013968

0800e798 <__ieee754_asinf>:
 800e798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e79c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800e7a0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800e7a4:	4604      	mov	r4, r0
 800e7a6:	4605      	mov	r5, r0
 800e7a8:	d10c      	bne.n	800e7c4 <__ieee754_asinf+0x2c>
 800e7aa:	498d      	ldr	r1, [pc, #564]	; (800e9e0 <__ieee754_asinf+0x248>)
 800e7ac:	f7f2 fb26 	bl	8000dfc <__aeabi_fmul>
 800e7b0:	498c      	ldr	r1, [pc, #560]	; (800e9e4 <__ieee754_asinf+0x24c>)
 800e7b2:	4605      	mov	r5, r0
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	f7f2 fb21 	bl	8000dfc <__aeabi_fmul>
 800e7ba:	4601      	mov	r1, r0
 800e7bc:	4628      	mov	r0, r5
 800e7be:	f7f2 fa15 	bl	8000bec <__addsf3>
 800e7c2:	e006      	b.n	800e7d2 <__ieee754_asinf+0x3a>
 800e7c4:	dd07      	ble.n	800e7d6 <__ieee754_asinf+0x3e>
 800e7c6:	4601      	mov	r1, r0
 800e7c8:	f7f2 fa0e 	bl	8000be8 <__aeabi_fsub>
 800e7cc:	4601      	mov	r1, r0
 800e7ce:	f7f2 fbc9 	bl	8000f64 <__aeabi_fdiv>
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	e00e      	b.n	800e7f4 <__ieee754_asinf+0x5c>
 800e7d6:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800e7da:	da58      	bge.n	800e88e <__ieee754_asinf+0xf6>
 800e7dc:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800e7e0:	da0b      	bge.n	800e7fa <__ieee754_asinf+0x62>
 800e7e2:	4981      	ldr	r1, [pc, #516]	; (800e9e8 <__ieee754_asinf+0x250>)
 800e7e4:	f7f2 fa02 	bl	8000bec <__addsf3>
 800e7e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e7ec:	f7f2 fcc2 	bl	8001174 <__aeabi_fcmpgt>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	d04c      	beq.n	800e88e <__ieee754_asinf+0xf6>
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7fa:	4601      	mov	r1, r0
 800e7fc:	f7f2 fafe 	bl	8000dfc <__aeabi_fmul>
 800e800:	4605      	mov	r5, r0
 800e802:	497a      	ldr	r1, [pc, #488]	; (800e9ec <__ieee754_asinf+0x254>)
 800e804:	f7f2 fafa 	bl	8000dfc <__aeabi_fmul>
 800e808:	4979      	ldr	r1, [pc, #484]	; (800e9f0 <__ieee754_asinf+0x258>)
 800e80a:	f7f2 f9ef 	bl	8000bec <__addsf3>
 800e80e:	4629      	mov	r1, r5
 800e810:	f7f2 faf4 	bl	8000dfc <__aeabi_fmul>
 800e814:	4977      	ldr	r1, [pc, #476]	; (800e9f4 <__ieee754_asinf+0x25c>)
 800e816:	f7f2 f9e7 	bl	8000be8 <__aeabi_fsub>
 800e81a:	4629      	mov	r1, r5
 800e81c:	f7f2 faee 	bl	8000dfc <__aeabi_fmul>
 800e820:	4975      	ldr	r1, [pc, #468]	; (800e9f8 <__ieee754_asinf+0x260>)
 800e822:	f7f2 f9e3 	bl	8000bec <__addsf3>
 800e826:	4629      	mov	r1, r5
 800e828:	f7f2 fae8 	bl	8000dfc <__aeabi_fmul>
 800e82c:	4973      	ldr	r1, [pc, #460]	; (800e9fc <__ieee754_asinf+0x264>)
 800e82e:	f7f2 f9db 	bl	8000be8 <__aeabi_fsub>
 800e832:	4629      	mov	r1, r5
 800e834:	f7f2 fae2 	bl	8000dfc <__aeabi_fmul>
 800e838:	4971      	ldr	r1, [pc, #452]	; (800ea00 <__ieee754_asinf+0x268>)
 800e83a:	f7f2 f9d7 	bl	8000bec <__addsf3>
 800e83e:	4629      	mov	r1, r5
 800e840:	f7f2 fadc 	bl	8000dfc <__aeabi_fmul>
 800e844:	496f      	ldr	r1, [pc, #444]	; (800ea04 <__ieee754_asinf+0x26c>)
 800e846:	4606      	mov	r6, r0
 800e848:	4628      	mov	r0, r5
 800e84a:	f7f2 fad7 	bl	8000dfc <__aeabi_fmul>
 800e84e:	496e      	ldr	r1, [pc, #440]	; (800ea08 <__ieee754_asinf+0x270>)
 800e850:	f7f2 f9ca 	bl	8000be8 <__aeabi_fsub>
 800e854:	4629      	mov	r1, r5
 800e856:	f7f2 fad1 	bl	8000dfc <__aeabi_fmul>
 800e85a:	496c      	ldr	r1, [pc, #432]	; (800ea0c <__ieee754_asinf+0x274>)
 800e85c:	f7f2 f9c6 	bl	8000bec <__addsf3>
 800e860:	4629      	mov	r1, r5
 800e862:	f7f2 facb 	bl	8000dfc <__aeabi_fmul>
 800e866:	496a      	ldr	r1, [pc, #424]	; (800ea10 <__ieee754_asinf+0x278>)
 800e868:	f7f2 f9be 	bl	8000be8 <__aeabi_fsub>
 800e86c:	4629      	mov	r1, r5
 800e86e:	f7f2 fac5 	bl	8000dfc <__aeabi_fmul>
 800e872:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e876:	f7f2 f9b9 	bl	8000bec <__addsf3>
 800e87a:	4601      	mov	r1, r0
 800e87c:	4630      	mov	r0, r6
 800e87e:	f7f2 fb71 	bl	8000f64 <__aeabi_fdiv>
 800e882:	4621      	mov	r1, r4
 800e884:	f7f2 faba 	bl	8000dfc <__aeabi_fmul>
 800e888:	4601      	mov	r1, r0
 800e88a:	4620      	mov	r0, r4
 800e88c:	e797      	b.n	800e7be <__ieee754_asinf+0x26>
 800e88e:	4620      	mov	r0, r4
 800e890:	f7ff fd10 	bl	800e2b4 <fabsf>
 800e894:	4601      	mov	r1, r0
 800e896:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e89a:	f7f2 f9a5 	bl	8000be8 <__aeabi_fsub>
 800e89e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e8a2:	f7f2 faab 	bl	8000dfc <__aeabi_fmul>
 800e8a6:	4606      	mov	r6, r0
 800e8a8:	4950      	ldr	r1, [pc, #320]	; (800e9ec <__ieee754_asinf+0x254>)
 800e8aa:	f7f2 faa7 	bl	8000dfc <__aeabi_fmul>
 800e8ae:	4950      	ldr	r1, [pc, #320]	; (800e9f0 <__ieee754_asinf+0x258>)
 800e8b0:	f7f2 f99c 	bl	8000bec <__addsf3>
 800e8b4:	4631      	mov	r1, r6
 800e8b6:	f7f2 faa1 	bl	8000dfc <__aeabi_fmul>
 800e8ba:	494e      	ldr	r1, [pc, #312]	; (800e9f4 <__ieee754_asinf+0x25c>)
 800e8bc:	f7f2 f994 	bl	8000be8 <__aeabi_fsub>
 800e8c0:	4631      	mov	r1, r6
 800e8c2:	f7f2 fa9b 	bl	8000dfc <__aeabi_fmul>
 800e8c6:	494c      	ldr	r1, [pc, #304]	; (800e9f8 <__ieee754_asinf+0x260>)
 800e8c8:	f7f2 f990 	bl	8000bec <__addsf3>
 800e8cc:	4631      	mov	r1, r6
 800e8ce:	f7f2 fa95 	bl	8000dfc <__aeabi_fmul>
 800e8d2:	494a      	ldr	r1, [pc, #296]	; (800e9fc <__ieee754_asinf+0x264>)
 800e8d4:	f7f2 f988 	bl	8000be8 <__aeabi_fsub>
 800e8d8:	4631      	mov	r1, r6
 800e8da:	f7f2 fa8f 	bl	8000dfc <__aeabi_fmul>
 800e8de:	4948      	ldr	r1, [pc, #288]	; (800ea00 <__ieee754_asinf+0x268>)
 800e8e0:	f7f2 f984 	bl	8000bec <__addsf3>
 800e8e4:	4631      	mov	r1, r6
 800e8e6:	f7f2 fa89 	bl	8000dfc <__aeabi_fmul>
 800e8ea:	4946      	ldr	r1, [pc, #280]	; (800ea04 <__ieee754_asinf+0x26c>)
 800e8ec:	4681      	mov	r9, r0
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	f7f2 fa84 	bl	8000dfc <__aeabi_fmul>
 800e8f4:	4944      	ldr	r1, [pc, #272]	; (800ea08 <__ieee754_asinf+0x270>)
 800e8f6:	f7f2 f977 	bl	8000be8 <__aeabi_fsub>
 800e8fa:	4631      	mov	r1, r6
 800e8fc:	f7f2 fa7e 	bl	8000dfc <__aeabi_fmul>
 800e900:	4942      	ldr	r1, [pc, #264]	; (800ea0c <__ieee754_asinf+0x274>)
 800e902:	f7f2 f973 	bl	8000bec <__addsf3>
 800e906:	4631      	mov	r1, r6
 800e908:	f7f2 fa78 	bl	8000dfc <__aeabi_fmul>
 800e90c:	4940      	ldr	r1, [pc, #256]	; (800ea10 <__ieee754_asinf+0x278>)
 800e90e:	f7f2 f96b 	bl	8000be8 <__aeabi_fsub>
 800e912:	4631      	mov	r1, r6
 800e914:	f7f2 fa72 	bl	8000dfc <__aeabi_fmul>
 800e918:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e91c:	f7f2 f966 	bl	8000bec <__addsf3>
 800e920:	4682      	mov	sl, r0
 800e922:	4630      	mov	r0, r6
 800e924:	f000 f9da 	bl	800ecdc <__ieee754_sqrtf>
 800e928:	4b3a      	ldr	r3, [pc, #232]	; (800ea14 <__ieee754_asinf+0x27c>)
 800e92a:	4607      	mov	r7, r0
 800e92c:	4598      	cmp	r8, r3
 800e92e:	dd1a      	ble.n	800e966 <__ieee754_asinf+0x1ce>
 800e930:	4651      	mov	r1, sl
 800e932:	4648      	mov	r0, r9
 800e934:	f7f2 fb16 	bl	8000f64 <__aeabi_fdiv>
 800e938:	4639      	mov	r1, r7
 800e93a:	f7f2 fa5f 	bl	8000dfc <__aeabi_fmul>
 800e93e:	4639      	mov	r1, r7
 800e940:	f7f2 f954 	bl	8000bec <__addsf3>
 800e944:	4601      	mov	r1, r0
 800e946:	f7f2 f951 	bl	8000bec <__addsf3>
 800e94a:	4933      	ldr	r1, [pc, #204]	; (800ea18 <__ieee754_asinf+0x280>)
 800e94c:	f7f2 f94e 	bl	8000bec <__addsf3>
 800e950:	4601      	mov	r1, r0
 800e952:	4823      	ldr	r0, [pc, #140]	; (800e9e0 <__ieee754_asinf+0x248>)
 800e954:	f7f2 f948 	bl	8000be8 <__aeabi_fsub>
 800e958:	2d00      	cmp	r5, #0
 800e95a:	4604      	mov	r4, r0
 800e95c:	f73f af4a 	bgt.w	800e7f4 <__ieee754_asinf+0x5c>
 800e960:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e964:	e735      	b.n	800e7d2 <__ieee754_asinf+0x3a>
 800e966:	4601      	mov	r1, r0
 800e968:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800e96c:	f7f2 f93e 	bl	8000bec <__addsf3>
 800e970:	4651      	mov	r1, sl
 800e972:	4604      	mov	r4, r0
 800e974:	4648      	mov	r0, r9
 800e976:	f7f2 faf5 	bl	8000f64 <__aeabi_fdiv>
 800e97a:	4601      	mov	r1, r0
 800e97c:	4620      	mov	r0, r4
 800e97e:	f7f2 fa3d 	bl	8000dfc <__aeabi_fmul>
 800e982:	f028 080f 	bic.w	r8, r8, #15
 800e986:	4681      	mov	r9, r0
 800e988:	4641      	mov	r1, r8
 800e98a:	4640      	mov	r0, r8
 800e98c:	f7f2 fa36 	bl	8000dfc <__aeabi_fmul>
 800e990:	4601      	mov	r1, r0
 800e992:	4630      	mov	r0, r6
 800e994:	f7f2 f928 	bl	8000be8 <__aeabi_fsub>
 800e998:	4641      	mov	r1, r8
 800e99a:	4604      	mov	r4, r0
 800e99c:	4638      	mov	r0, r7
 800e99e:	f7f2 f925 	bl	8000bec <__addsf3>
 800e9a2:	4601      	mov	r1, r0
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f7f2 fadd 	bl	8000f64 <__aeabi_fdiv>
 800e9aa:	4601      	mov	r1, r0
 800e9ac:	f7f2 f91e 	bl	8000bec <__addsf3>
 800e9b0:	4601      	mov	r1, r0
 800e9b2:	480c      	ldr	r0, [pc, #48]	; (800e9e4 <__ieee754_asinf+0x24c>)
 800e9b4:	f7f2 f918 	bl	8000be8 <__aeabi_fsub>
 800e9b8:	4601      	mov	r1, r0
 800e9ba:	4648      	mov	r0, r9
 800e9bc:	f7f2 f914 	bl	8000be8 <__aeabi_fsub>
 800e9c0:	4641      	mov	r1, r8
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	4640      	mov	r0, r8
 800e9c6:	f7f2 f911 	bl	8000bec <__addsf3>
 800e9ca:	4601      	mov	r1, r0
 800e9cc:	4813      	ldr	r0, [pc, #76]	; (800ea1c <__ieee754_asinf+0x284>)
 800e9ce:	f7f2 f90b 	bl	8000be8 <__aeabi_fsub>
 800e9d2:	4601      	mov	r1, r0
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	f7f2 f907 	bl	8000be8 <__aeabi_fsub>
 800e9da:	4601      	mov	r1, r0
 800e9dc:	480f      	ldr	r0, [pc, #60]	; (800ea1c <__ieee754_asinf+0x284>)
 800e9de:	e7b9      	b.n	800e954 <__ieee754_asinf+0x1bc>
 800e9e0:	3fc90fdb 	.word	0x3fc90fdb
 800e9e4:	b33bbd2e 	.word	0xb33bbd2e
 800e9e8:	7149f2ca 	.word	0x7149f2ca
 800e9ec:	3811ef08 	.word	0x3811ef08
 800e9f0:	3a4f7f04 	.word	0x3a4f7f04
 800e9f4:	3d241146 	.word	0x3d241146
 800e9f8:	3e4e0aa8 	.word	0x3e4e0aa8
 800e9fc:	3ea6b090 	.word	0x3ea6b090
 800ea00:	3e2aaaab 	.word	0x3e2aaaab
 800ea04:	3d9dc62e 	.word	0x3d9dc62e
 800ea08:	3f303361 	.word	0x3f303361
 800ea0c:	4001572d 	.word	0x4001572d
 800ea10:	4019d139 	.word	0x4019d139
 800ea14:	3f799999 	.word	0x3f799999
 800ea18:	333bbd2e 	.word	0x333bbd2e
 800ea1c:	3f490fdb 	.word	0x3f490fdb

0800ea20 <__ieee754_rem_pio2f>:
 800ea20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea24:	4aa0      	ldr	r2, [pc, #640]	; (800eca8 <__ieee754_rem_pio2f+0x288>)
 800ea26:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800ea2a:	4296      	cmp	r6, r2
 800ea2c:	460c      	mov	r4, r1
 800ea2e:	4682      	mov	sl, r0
 800ea30:	b087      	sub	sp, #28
 800ea32:	dc04      	bgt.n	800ea3e <__ieee754_rem_pio2f+0x1e>
 800ea34:	2300      	movs	r3, #0
 800ea36:	6008      	str	r0, [r1, #0]
 800ea38:	604b      	str	r3, [r1, #4]
 800ea3a:	2500      	movs	r5, #0
 800ea3c:	e01a      	b.n	800ea74 <__ieee754_rem_pio2f+0x54>
 800ea3e:	4a9b      	ldr	r2, [pc, #620]	; (800ecac <__ieee754_rem_pio2f+0x28c>)
 800ea40:	4296      	cmp	r6, r2
 800ea42:	dc4b      	bgt.n	800eadc <__ieee754_rem_pio2f+0xbc>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	499a      	ldr	r1, [pc, #616]	; (800ecb0 <__ieee754_rem_pio2f+0x290>)
 800ea48:	4f9a      	ldr	r7, [pc, #616]	; (800ecb4 <__ieee754_rem_pio2f+0x294>)
 800ea4a:	f026 060f 	bic.w	r6, r6, #15
 800ea4e:	dd23      	ble.n	800ea98 <__ieee754_rem_pio2f+0x78>
 800ea50:	f7f2 f8ca 	bl	8000be8 <__aeabi_fsub>
 800ea54:	42be      	cmp	r6, r7
 800ea56:	4605      	mov	r5, r0
 800ea58:	d010      	beq.n	800ea7c <__ieee754_rem_pio2f+0x5c>
 800ea5a:	4997      	ldr	r1, [pc, #604]	; (800ecb8 <__ieee754_rem_pio2f+0x298>)
 800ea5c:	f7f2 f8c4 	bl	8000be8 <__aeabi_fsub>
 800ea60:	4601      	mov	r1, r0
 800ea62:	6020      	str	r0, [r4, #0]
 800ea64:	4628      	mov	r0, r5
 800ea66:	f7f2 f8bf 	bl	8000be8 <__aeabi_fsub>
 800ea6a:	4993      	ldr	r1, [pc, #588]	; (800ecb8 <__ieee754_rem_pio2f+0x298>)
 800ea6c:	f7f2 f8bc 	bl	8000be8 <__aeabi_fsub>
 800ea70:	2501      	movs	r5, #1
 800ea72:	6060      	str	r0, [r4, #4]
 800ea74:	4628      	mov	r0, r5
 800ea76:	b007      	add	sp, #28
 800ea78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea7c:	498f      	ldr	r1, [pc, #572]	; (800ecbc <__ieee754_rem_pio2f+0x29c>)
 800ea7e:	f7f2 f8b3 	bl	8000be8 <__aeabi_fsub>
 800ea82:	498f      	ldr	r1, [pc, #572]	; (800ecc0 <__ieee754_rem_pio2f+0x2a0>)
 800ea84:	4605      	mov	r5, r0
 800ea86:	f7f2 f8af 	bl	8000be8 <__aeabi_fsub>
 800ea8a:	4601      	mov	r1, r0
 800ea8c:	6020      	str	r0, [r4, #0]
 800ea8e:	4628      	mov	r0, r5
 800ea90:	f7f2 f8aa 	bl	8000be8 <__aeabi_fsub>
 800ea94:	498a      	ldr	r1, [pc, #552]	; (800ecc0 <__ieee754_rem_pio2f+0x2a0>)
 800ea96:	e7e9      	b.n	800ea6c <__ieee754_rem_pio2f+0x4c>
 800ea98:	f7f2 f8a8 	bl	8000bec <__addsf3>
 800ea9c:	42be      	cmp	r6, r7
 800ea9e:	4605      	mov	r5, r0
 800eaa0:	d00e      	beq.n	800eac0 <__ieee754_rem_pio2f+0xa0>
 800eaa2:	4985      	ldr	r1, [pc, #532]	; (800ecb8 <__ieee754_rem_pio2f+0x298>)
 800eaa4:	f7f2 f8a2 	bl	8000bec <__addsf3>
 800eaa8:	4601      	mov	r1, r0
 800eaaa:	6020      	str	r0, [r4, #0]
 800eaac:	4628      	mov	r0, r5
 800eaae:	f7f2 f89b 	bl	8000be8 <__aeabi_fsub>
 800eab2:	4981      	ldr	r1, [pc, #516]	; (800ecb8 <__ieee754_rem_pio2f+0x298>)
 800eab4:	f7f2 f89a 	bl	8000bec <__addsf3>
 800eab8:	f04f 35ff 	mov.w	r5, #4294967295
 800eabc:	6060      	str	r0, [r4, #4]
 800eabe:	e7d9      	b.n	800ea74 <__ieee754_rem_pio2f+0x54>
 800eac0:	497e      	ldr	r1, [pc, #504]	; (800ecbc <__ieee754_rem_pio2f+0x29c>)
 800eac2:	f7f2 f893 	bl	8000bec <__addsf3>
 800eac6:	497e      	ldr	r1, [pc, #504]	; (800ecc0 <__ieee754_rem_pio2f+0x2a0>)
 800eac8:	4605      	mov	r5, r0
 800eaca:	f7f2 f88f 	bl	8000bec <__addsf3>
 800eace:	4601      	mov	r1, r0
 800ead0:	6020      	str	r0, [r4, #0]
 800ead2:	4628      	mov	r0, r5
 800ead4:	f7f2 f888 	bl	8000be8 <__aeabi_fsub>
 800ead8:	4979      	ldr	r1, [pc, #484]	; (800ecc0 <__ieee754_rem_pio2f+0x2a0>)
 800eada:	e7eb      	b.n	800eab4 <__ieee754_rem_pio2f+0x94>
 800eadc:	4a79      	ldr	r2, [pc, #484]	; (800ecc4 <__ieee754_rem_pio2f+0x2a4>)
 800eade:	4296      	cmp	r6, r2
 800eae0:	f300 8091 	bgt.w	800ec06 <__ieee754_rem_pio2f+0x1e6>
 800eae4:	f7ff fbe6 	bl	800e2b4 <fabsf>
 800eae8:	4977      	ldr	r1, [pc, #476]	; (800ecc8 <__ieee754_rem_pio2f+0x2a8>)
 800eaea:	4607      	mov	r7, r0
 800eaec:	f7f2 f986 	bl	8000dfc <__aeabi_fmul>
 800eaf0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800eaf4:	f7f2 f87a 	bl	8000bec <__addsf3>
 800eaf8:	f7f2 fb5c 	bl	80011b4 <__aeabi_f2iz>
 800eafc:	4605      	mov	r5, r0
 800eafe:	f7f2 f929 	bl	8000d54 <__aeabi_i2f>
 800eb02:	496b      	ldr	r1, [pc, #428]	; (800ecb0 <__ieee754_rem_pio2f+0x290>)
 800eb04:	4681      	mov	r9, r0
 800eb06:	f7f2 f979 	bl	8000dfc <__aeabi_fmul>
 800eb0a:	4601      	mov	r1, r0
 800eb0c:	4638      	mov	r0, r7
 800eb0e:	f7f2 f86b 	bl	8000be8 <__aeabi_fsub>
 800eb12:	4969      	ldr	r1, [pc, #420]	; (800ecb8 <__ieee754_rem_pio2f+0x298>)
 800eb14:	4680      	mov	r8, r0
 800eb16:	4648      	mov	r0, r9
 800eb18:	f7f2 f970 	bl	8000dfc <__aeabi_fmul>
 800eb1c:	2d1f      	cmp	r5, #31
 800eb1e:	4607      	mov	r7, r0
 800eb20:	dc0c      	bgt.n	800eb3c <__ieee754_rem_pio2f+0x11c>
 800eb22:	4a6a      	ldr	r2, [pc, #424]	; (800eccc <__ieee754_rem_pio2f+0x2ac>)
 800eb24:	1e69      	subs	r1, r5, #1
 800eb26:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800eb2a:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	d004      	beq.n	800eb3c <__ieee754_rem_pio2f+0x11c>
 800eb32:	4639      	mov	r1, r7
 800eb34:	4640      	mov	r0, r8
 800eb36:	f7f2 f857 	bl	8000be8 <__aeabi_fsub>
 800eb3a:	e00b      	b.n	800eb54 <__ieee754_rem_pio2f+0x134>
 800eb3c:	4639      	mov	r1, r7
 800eb3e:	4640      	mov	r0, r8
 800eb40:	f7f2 f852 	bl	8000be8 <__aeabi_fsub>
 800eb44:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800eb48:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800eb4c:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800eb50:	2e08      	cmp	r6, #8
 800eb52:	dc01      	bgt.n	800eb58 <__ieee754_rem_pio2f+0x138>
 800eb54:	6020      	str	r0, [r4, #0]
 800eb56:	e026      	b.n	800eba6 <__ieee754_rem_pio2f+0x186>
 800eb58:	4958      	ldr	r1, [pc, #352]	; (800ecbc <__ieee754_rem_pio2f+0x29c>)
 800eb5a:	4648      	mov	r0, r9
 800eb5c:	f7f2 f94e 	bl	8000dfc <__aeabi_fmul>
 800eb60:	4607      	mov	r7, r0
 800eb62:	4601      	mov	r1, r0
 800eb64:	4640      	mov	r0, r8
 800eb66:	f7f2 f83f 	bl	8000be8 <__aeabi_fsub>
 800eb6a:	4601      	mov	r1, r0
 800eb6c:	4606      	mov	r6, r0
 800eb6e:	4640      	mov	r0, r8
 800eb70:	f7f2 f83a 	bl	8000be8 <__aeabi_fsub>
 800eb74:	4639      	mov	r1, r7
 800eb76:	f7f2 f837 	bl	8000be8 <__aeabi_fsub>
 800eb7a:	4607      	mov	r7, r0
 800eb7c:	4950      	ldr	r1, [pc, #320]	; (800ecc0 <__ieee754_rem_pio2f+0x2a0>)
 800eb7e:	4648      	mov	r0, r9
 800eb80:	f7f2 f93c 	bl	8000dfc <__aeabi_fmul>
 800eb84:	4639      	mov	r1, r7
 800eb86:	f7f2 f82f 	bl	8000be8 <__aeabi_fsub>
 800eb8a:	4601      	mov	r1, r0
 800eb8c:	4607      	mov	r7, r0
 800eb8e:	4630      	mov	r0, r6
 800eb90:	f7f2 f82a 	bl	8000be8 <__aeabi_fsub>
 800eb94:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800eb98:	ebab 0b03 	sub.w	fp, fp, r3
 800eb9c:	f1bb 0f19 	cmp.w	fp, #25
 800eba0:	dc16      	bgt.n	800ebd0 <__ieee754_rem_pio2f+0x1b0>
 800eba2:	46b0      	mov	r8, r6
 800eba4:	6020      	str	r0, [r4, #0]
 800eba6:	6826      	ldr	r6, [r4, #0]
 800eba8:	4640      	mov	r0, r8
 800ebaa:	4631      	mov	r1, r6
 800ebac:	f7f2 f81c 	bl	8000be8 <__aeabi_fsub>
 800ebb0:	4639      	mov	r1, r7
 800ebb2:	f7f2 f819 	bl	8000be8 <__aeabi_fsub>
 800ebb6:	f1ba 0f00 	cmp.w	sl, #0
 800ebba:	6060      	str	r0, [r4, #4]
 800ebbc:	f6bf af5a 	bge.w	800ea74 <__ieee754_rem_pio2f+0x54>
 800ebc0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800ebc4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ebc8:	6026      	str	r6, [r4, #0]
 800ebca:	6060      	str	r0, [r4, #4]
 800ebcc:	426d      	negs	r5, r5
 800ebce:	e751      	b.n	800ea74 <__ieee754_rem_pio2f+0x54>
 800ebd0:	493f      	ldr	r1, [pc, #252]	; (800ecd0 <__ieee754_rem_pio2f+0x2b0>)
 800ebd2:	4648      	mov	r0, r9
 800ebd4:	f7f2 f912 	bl	8000dfc <__aeabi_fmul>
 800ebd8:	4607      	mov	r7, r0
 800ebda:	4601      	mov	r1, r0
 800ebdc:	4630      	mov	r0, r6
 800ebde:	f7f2 f803 	bl	8000be8 <__aeabi_fsub>
 800ebe2:	4601      	mov	r1, r0
 800ebe4:	4680      	mov	r8, r0
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	f7f1 fffe 	bl	8000be8 <__aeabi_fsub>
 800ebec:	4639      	mov	r1, r7
 800ebee:	f7f1 fffb 	bl	8000be8 <__aeabi_fsub>
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	4937      	ldr	r1, [pc, #220]	; (800ecd4 <__ieee754_rem_pio2f+0x2b4>)
 800ebf6:	4648      	mov	r0, r9
 800ebf8:	f7f2 f900 	bl	8000dfc <__aeabi_fmul>
 800ebfc:	4631      	mov	r1, r6
 800ebfe:	f7f1 fff3 	bl	8000be8 <__aeabi_fsub>
 800ec02:	4607      	mov	r7, r0
 800ec04:	e795      	b.n	800eb32 <__ieee754_rem_pio2f+0x112>
 800ec06:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ec0a:	db05      	blt.n	800ec18 <__ieee754_rem_pio2f+0x1f8>
 800ec0c:	4601      	mov	r1, r0
 800ec0e:	f7f1 ffeb 	bl	8000be8 <__aeabi_fsub>
 800ec12:	6060      	str	r0, [r4, #4]
 800ec14:	6020      	str	r0, [r4, #0]
 800ec16:	e710      	b.n	800ea3a <__ieee754_rem_pio2f+0x1a>
 800ec18:	15f7      	asrs	r7, r6, #23
 800ec1a:	3f86      	subs	r7, #134	; 0x86
 800ec1c:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800ec20:	4630      	mov	r0, r6
 800ec22:	f7f2 fac7 	bl	80011b4 <__aeabi_f2iz>
 800ec26:	f7f2 f895 	bl	8000d54 <__aeabi_i2f>
 800ec2a:	4601      	mov	r1, r0
 800ec2c:	9003      	str	r0, [sp, #12]
 800ec2e:	4630      	mov	r0, r6
 800ec30:	f7f1 ffda 	bl	8000be8 <__aeabi_fsub>
 800ec34:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800ec38:	f7f2 f8e0 	bl	8000dfc <__aeabi_fmul>
 800ec3c:	4606      	mov	r6, r0
 800ec3e:	f7f2 fab9 	bl	80011b4 <__aeabi_f2iz>
 800ec42:	f7f2 f887 	bl	8000d54 <__aeabi_i2f>
 800ec46:	4601      	mov	r1, r0
 800ec48:	9004      	str	r0, [sp, #16]
 800ec4a:	4605      	mov	r5, r0
 800ec4c:	4630      	mov	r0, r6
 800ec4e:	f7f1 ffcb 	bl	8000be8 <__aeabi_fsub>
 800ec52:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800ec56:	f7f2 f8d1 	bl	8000dfc <__aeabi_fmul>
 800ec5a:	2100      	movs	r1, #0
 800ec5c:	9005      	str	r0, [sp, #20]
 800ec5e:	f7f2 fa61 	bl	8001124 <__aeabi_fcmpeq>
 800ec62:	b1f0      	cbz	r0, 800eca2 <__ieee754_rem_pio2f+0x282>
 800ec64:	2100      	movs	r1, #0
 800ec66:	4628      	mov	r0, r5
 800ec68:	f7f2 fa5c 	bl	8001124 <__aeabi_fcmpeq>
 800ec6c:	2800      	cmp	r0, #0
 800ec6e:	bf14      	ite	ne
 800ec70:	2301      	movne	r3, #1
 800ec72:	2302      	moveq	r3, #2
 800ec74:	4a18      	ldr	r2, [pc, #96]	; (800ecd8 <__ieee754_rem_pio2f+0x2b8>)
 800ec76:	4621      	mov	r1, r4
 800ec78:	9201      	str	r2, [sp, #4]
 800ec7a:	2202      	movs	r2, #2
 800ec7c:	a803      	add	r0, sp, #12
 800ec7e:	9200      	str	r2, [sp, #0]
 800ec80:	463a      	mov	r2, r7
 800ec82:	f000 fdbb 	bl	800f7fc <__kernel_rem_pio2f>
 800ec86:	f1ba 0f00 	cmp.w	sl, #0
 800ec8a:	4605      	mov	r5, r0
 800ec8c:	f6bf aef2 	bge.w	800ea74 <__ieee754_rem_pio2f+0x54>
 800ec90:	6823      	ldr	r3, [r4, #0]
 800ec92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ec96:	6023      	str	r3, [r4, #0]
 800ec98:	6863      	ldr	r3, [r4, #4]
 800ec9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ec9e:	6063      	str	r3, [r4, #4]
 800eca0:	e794      	b.n	800ebcc <__ieee754_rem_pio2f+0x1ac>
 800eca2:	2303      	movs	r3, #3
 800eca4:	e7e6      	b.n	800ec74 <__ieee754_rem_pio2f+0x254>
 800eca6:	bf00      	nop
 800eca8:	3f490fd8 	.word	0x3f490fd8
 800ecac:	4016cbe3 	.word	0x4016cbe3
 800ecb0:	3fc90f80 	.word	0x3fc90f80
 800ecb4:	3fc90fd0 	.word	0x3fc90fd0
 800ecb8:	37354443 	.word	0x37354443
 800ecbc:	37354400 	.word	0x37354400
 800ecc0:	2e85a308 	.word	0x2e85a308
 800ecc4:	43490f80 	.word	0x43490f80
 800ecc8:	3f22f984 	.word	0x3f22f984
 800eccc:	08013a70 	.word	0x08013a70
 800ecd0:	2e85a300 	.word	0x2e85a300
 800ecd4:	248d3132 	.word	0x248d3132
 800ecd8:	08013af0 	.word	0x08013af0

0800ecdc <__ieee754_sqrtf>:
 800ecdc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800ece0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ece4:	b570      	push	{r4, r5, r6, lr}
 800ece6:	4603      	mov	r3, r0
 800ece8:	4604      	mov	r4, r0
 800ecea:	d309      	bcc.n	800ed00 <__ieee754_sqrtf+0x24>
 800ecec:	4601      	mov	r1, r0
 800ecee:	f7f2 f885 	bl	8000dfc <__aeabi_fmul>
 800ecf2:	4601      	mov	r1, r0
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	f7f1 ff79 	bl	8000bec <__addsf3>
 800ecfa:	4604      	mov	r4, r0
 800ecfc:	4620      	mov	r0, r4
 800ecfe:	bd70      	pop	{r4, r5, r6, pc}
 800ed00:	2a00      	cmp	r2, #0
 800ed02:	d0fb      	beq.n	800ecfc <__ieee754_sqrtf+0x20>
 800ed04:	2800      	cmp	r0, #0
 800ed06:	da06      	bge.n	800ed16 <__ieee754_sqrtf+0x3a>
 800ed08:	4601      	mov	r1, r0
 800ed0a:	f7f1 ff6d 	bl	8000be8 <__aeabi_fsub>
 800ed0e:	4601      	mov	r1, r0
 800ed10:	f7f2 f928 	bl	8000f64 <__aeabi_fdiv>
 800ed14:	e7f1      	b.n	800ecfa <__ieee754_sqrtf+0x1e>
 800ed16:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800ed1a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800ed1e:	d029      	beq.n	800ed74 <__ieee754_sqrtf+0x98>
 800ed20:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800ed24:	07cb      	lsls	r3, r1, #31
 800ed26:	f04f 0300 	mov.w	r3, #0
 800ed2a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800ed2e:	f04f 0419 	mov.w	r4, #25
 800ed32:	461e      	mov	r6, r3
 800ed34:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800ed38:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800ed3c:	bf58      	it	pl
 800ed3e:	0052      	lslpl	r2, r2, #1
 800ed40:	1040      	asrs	r0, r0, #1
 800ed42:	0052      	lsls	r2, r2, #1
 800ed44:	1875      	adds	r5, r6, r1
 800ed46:	4295      	cmp	r5, r2
 800ed48:	bfde      	ittt	le
 800ed4a:	186e      	addle	r6, r5, r1
 800ed4c:	1b52      	suble	r2, r2, r5
 800ed4e:	185b      	addle	r3, r3, r1
 800ed50:	3c01      	subs	r4, #1
 800ed52:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ed56:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ed5a:	d1f3      	bne.n	800ed44 <__ieee754_sqrtf+0x68>
 800ed5c:	b112      	cbz	r2, 800ed64 <__ieee754_sqrtf+0x88>
 800ed5e:	3301      	adds	r3, #1
 800ed60:	f023 0301 	bic.w	r3, r3, #1
 800ed64:	105c      	asrs	r4, r3, #1
 800ed66:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800ed6a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800ed6e:	e7c5      	b.n	800ecfc <__ieee754_sqrtf+0x20>
 800ed70:	005b      	lsls	r3, r3, #1
 800ed72:	3201      	adds	r2, #1
 800ed74:	0218      	lsls	r0, r3, #8
 800ed76:	d5fb      	bpl.n	800ed70 <__ieee754_sqrtf+0x94>
 800ed78:	3a01      	subs	r2, #1
 800ed7a:	1a89      	subs	r1, r1, r2
 800ed7c:	e7d0      	b.n	800ed20 <__ieee754_sqrtf+0x44>
	...

0800ed80 <__kernel_cos>:
 800ed80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed84:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ed88:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800ed8c:	4680      	mov	r8, r0
 800ed8e:	460f      	mov	r7, r1
 800ed90:	e9cd 2300 	strd	r2, r3, [sp]
 800ed94:	da04      	bge.n	800eda0 <__kernel_cos+0x20>
 800ed96:	f7f1 fe8b 	bl	8000ab0 <__aeabi_d2iz>
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	f000 8086 	beq.w	800eeac <__kernel_cos+0x12c>
 800eda0:	4642      	mov	r2, r8
 800eda2:	463b      	mov	r3, r7
 800eda4:	4640      	mov	r0, r8
 800eda6:	4639      	mov	r1, r7
 800eda8:	f7f1 fbd2 	bl	8000550 <__aeabi_dmul>
 800edac:	2200      	movs	r2, #0
 800edae:	4b4e      	ldr	r3, [pc, #312]	; (800eee8 <__kernel_cos+0x168>)
 800edb0:	4604      	mov	r4, r0
 800edb2:	460d      	mov	r5, r1
 800edb4:	f7f1 fbcc 	bl	8000550 <__aeabi_dmul>
 800edb8:	a33f      	add	r3, pc, #252	; (adr r3, 800eeb8 <__kernel_cos+0x138>)
 800edba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edbe:	4682      	mov	sl, r0
 800edc0:	468b      	mov	fp, r1
 800edc2:	4620      	mov	r0, r4
 800edc4:	4629      	mov	r1, r5
 800edc6:	f7f1 fbc3 	bl	8000550 <__aeabi_dmul>
 800edca:	a33d      	add	r3, pc, #244	; (adr r3, 800eec0 <__kernel_cos+0x140>)
 800edcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd0:	f7f1 fa08 	bl	80001e4 <__adddf3>
 800edd4:	4622      	mov	r2, r4
 800edd6:	462b      	mov	r3, r5
 800edd8:	f7f1 fbba 	bl	8000550 <__aeabi_dmul>
 800eddc:	a33a      	add	r3, pc, #232	; (adr r3, 800eec8 <__kernel_cos+0x148>)
 800edde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede2:	f7f1 f9fd 	bl	80001e0 <__aeabi_dsub>
 800ede6:	4622      	mov	r2, r4
 800ede8:	462b      	mov	r3, r5
 800edea:	f7f1 fbb1 	bl	8000550 <__aeabi_dmul>
 800edee:	a338      	add	r3, pc, #224	; (adr r3, 800eed0 <__kernel_cos+0x150>)
 800edf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf4:	f7f1 f9f6 	bl	80001e4 <__adddf3>
 800edf8:	4622      	mov	r2, r4
 800edfa:	462b      	mov	r3, r5
 800edfc:	f7f1 fba8 	bl	8000550 <__aeabi_dmul>
 800ee00:	a335      	add	r3, pc, #212	; (adr r3, 800eed8 <__kernel_cos+0x158>)
 800ee02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee06:	f7f1 f9eb 	bl	80001e0 <__aeabi_dsub>
 800ee0a:	4622      	mov	r2, r4
 800ee0c:	462b      	mov	r3, r5
 800ee0e:	f7f1 fb9f 	bl	8000550 <__aeabi_dmul>
 800ee12:	a333      	add	r3, pc, #204	; (adr r3, 800eee0 <__kernel_cos+0x160>)
 800ee14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee18:	f7f1 f9e4 	bl	80001e4 <__adddf3>
 800ee1c:	4622      	mov	r2, r4
 800ee1e:	462b      	mov	r3, r5
 800ee20:	f7f1 fb96 	bl	8000550 <__aeabi_dmul>
 800ee24:	4622      	mov	r2, r4
 800ee26:	462b      	mov	r3, r5
 800ee28:	f7f1 fb92 	bl	8000550 <__aeabi_dmul>
 800ee2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee30:	4604      	mov	r4, r0
 800ee32:	460d      	mov	r5, r1
 800ee34:	4640      	mov	r0, r8
 800ee36:	4639      	mov	r1, r7
 800ee38:	f7f1 fb8a 	bl	8000550 <__aeabi_dmul>
 800ee3c:	460b      	mov	r3, r1
 800ee3e:	4602      	mov	r2, r0
 800ee40:	4629      	mov	r1, r5
 800ee42:	4620      	mov	r0, r4
 800ee44:	f7f1 f9cc 	bl	80001e0 <__aeabi_dsub>
 800ee48:	4b28      	ldr	r3, [pc, #160]	; (800eeec <__kernel_cos+0x16c>)
 800ee4a:	4680      	mov	r8, r0
 800ee4c:	429e      	cmp	r6, r3
 800ee4e:	4689      	mov	r9, r1
 800ee50:	dc0e      	bgt.n	800ee70 <__kernel_cos+0xf0>
 800ee52:	4602      	mov	r2, r0
 800ee54:	460b      	mov	r3, r1
 800ee56:	4650      	mov	r0, sl
 800ee58:	4659      	mov	r1, fp
 800ee5a:	f7f1 f9c1 	bl	80001e0 <__aeabi_dsub>
 800ee5e:	4602      	mov	r2, r0
 800ee60:	2000      	movs	r0, #0
 800ee62:	460b      	mov	r3, r1
 800ee64:	4922      	ldr	r1, [pc, #136]	; (800eef0 <__kernel_cos+0x170>)
 800ee66:	f7f1 f9bb 	bl	80001e0 <__aeabi_dsub>
 800ee6a:	b003      	add	sp, #12
 800ee6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee70:	2400      	movs	r4, #0
 800ee72:	4b20      	ldr	r3, [pc, #128]	; (800eef4 <__kernel_cos+0x174>)
 800ee74:	4622      	mov	r2, r4
 800ee76:	429e      	cmp	r6, r3
 800ee78:	bfcc      	ite	gt
 800ee7a:	4d1f      	ldrgt	r5, [pc, #124]	; (800eef8 <__kernel_cos+0x178>)
 800ee7c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ee80:	462b      	mov	r3, r5
 800ee82:	2000      	movs	r0, #0
 800ee84:	491a      	ldr	r1, [pc, #104]	; (800eef0 <__kernel_cos+0x170>)
 800ee86:	f7f1 f9ab 	bl	80001e0 <__aeabi_dsub>
 800ee8a:	4622      	mov	r2, r4
 800ee8c:	4606      	mov	r6, r0
 800ee8e:	460f      	mov	r7, r1
 800ee90:	462b      	mov	r3, r5
 800ee92:	4650      	mov	r0, sl
 800ee94:	4659      	mov	r1, fp
 800ee96:	f7f1 f9a3 	bl	80001e0 <__aeabi_dsub>
 800ee9a:	4642      	mov	r2, r8
 800ee9c:	464b      	mov	r3, r9
 800ee9e:	f7f1 f99f 	bl	80001e0 <__aeabi_dsub>
 800eea2:	4602      	mov	r2, r0
 800eea4:	460b      	mov	r3, r1
 800eea6:	4630      	mov	r0, r6
 800eea8:	4639      	mov	r1, r7
 800eeaa:	e7dc      	b.n	800ee66 <__kernel_cos+0xe6>
 800eeac:	2000      	movs	r0, #0
 800eeae:	4910      	ldr	r1, [pc, #64]	; (800eef0 <__kernel_cos+0x170>)
 800eeb0:	e7db      	b.n	800ee6a <__kernel_cos+0xea>
 800eeb2:	bf00      	nop
 800eeb4:	f3af 8000 	nop.w
 800eeb8:	be8838d4 	.word	0xbe8838d4
 800eebc:	bda8fae9 	.word	0xbda8fae9
 800eec0:	bdb4b1c4 	.word	0xbdb4b1c4
 800eec4:	3e21ee9e 	.word	0x3e21ee9e
 800eec8:	809c52ad 	.word	0x809c52ad
 800eecc:	3e927e4f 	.word	0x3e927e4f
 800eed0:	19cb1590 	.word	0x19cb1590
 800eed4:	3efa01a0 	.word	0x3efa01a0
 800eed8:	16c15177 	.word	0x16c15177
 800eedc:	3f56c16c 	.word	0x3f56c16c
 800eee0:	5555554c 	.word	0x5555554c
 800eee4:	3fa55555 	.word	0x3fa55555
 800eee8:	3fe00000 	.word	0x3fe00000
 800eeec:	3fd33332 	.word	0x3fd33332
 800eef0:	3ff00000 	.word	0x3ff00000
 800eef4:	3fe90000 	.word	0x3fe90000
 800eef8:	3fd20000 	.word	0x3fd20000

0800eefc <__kernel_rem_pio2>:
 800eefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef00:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ef04:	9308      	str	r3, [sp, #32]
 800ef06:	9101      	str	r1, [sp, #4]
 800ef08:	4bc0      	ldr	r3, [pc, #768]	; (800f20c <__kernel_rem_pio2+0x310>)
 800ef0a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ef0c:	f112 0f14 	cmn.w	r2, #20
 800ef10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef14:	bfa8      	it	ge
 800ef16:	1ed4      	subge	r4, r2, #3
 800ef18:	9304      	str	r3, [sp, #16]
 800ef1a:	9b08      	ldr	r3, [sp, #32]
 800ef1c:	bfb8      	it	lt
 800ef1e:	2400      	movlt	r4, #0
 800ef20:	f103 33ff 	add.w	r3, r3, #4294967295
 800ef24:	9306      	str	r3, [sp, #24]
 800ef26:	bfa4      	itt	ge
 800ef28:	2318      	movge	r3, #24
 800ef2a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ef2e:	f06f 0317 	mvn.w	r3, #23
 800ef32:	fb04 3303 	mla	r3, r4, r3, r3
 800ef36:	eb03 0a02 	add.w	sl, r3, r2
 800ef3a:	9a06      	ldr	r2, [sp, #24]
 800ef3c:	9b04      	ldr	r3, [sp, #16]
 800ef3e:	1aa7      	subs	r7, r4, r2
 800ef40:	eb03 0802 	add.w	r8, r3, r2
 800ef44:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ef46:	2500      	movs	r5, #0
 800ef48:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	2300      	movs	r3, #0
 800ef50:	9009      	str	r0, [sp, #36]	; 0x24
 800ef52:	ae20      	add	r6, sp, #128	; 0x80
 800ef54:	4545      	cmp	r5, r8
 800ef56:	dd19      	ble.n	800ef8c <__kernel_rem_pio2+0x90>
 800ef58:	9b08      	ldr	r3, [sp, #32]
 800ef5a:	aa20      	add	r2, sp, #128	; 0x80
 800ef5c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ef60:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ef64:	f1c3 0301 	rsb	r3, r3, #1
 800ef68:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ef6c:	9307      	str	r3, [sp, #28]
 800ef6e:	9b07      	ldr	r3, [sp, #28]
 800ef70:	9a04      	ldr	r2, [sp, #16]
 800ef72:	4443      	add	r3, r8
 800ef74:	429a      	cmp	r2, r3
 800ef76:	db35      	blt.n	800efe4 <__kernel_rem_pio2+0xe8>
 800ef78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f1a3 0908 	sub.w	r9, r3, #8
 800ef80:	2300      	movs	r3, #0
 800ef82:	462f      	mov	r7, r5
 800ef84:	2600      	movs	r6, #0
 800ef86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ef8a:	e01f      	b.n	800efcc <__kernel_rem_pio2+0xd0>
 800ef8c:	42ef      	cmn	r7, r5
 800ef8e:	d40b      	bmi.n	800efa8 <__kernel_rem_pio2+0xac>
 800ef90:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ef94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ef98:	f7f1 fa70 	bl	800047c <__aeabi_i2d>
 800ef9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efa0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800efa4:	3501      	adds	r5, #1
 800efa6:	e7d5      	b.n	800ef54 <__kernel_rem_pio2+0x58>
 800efa8:	4610      	mov	r0, r2
 800efaa:	4619      	mov	r1, r3
 800efac:	e7f8      	b.n	800efa0 <__kernel_rem_pio2+0xa4>
 800efae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efb2:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800efb6:	f7f1 facb 	bl	8000550 <__aeabi_dmul>
 800efba:	4602      	mov	r2, r0
 800efbc:	460b      	mov	r3, r1
 800efbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efc2:	f7f1 f90f 	bl	80001e4 <__adddf3>
 800efc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efca:	3601      	adds	r6, #1
 800efcc:	9b06      	ldr	r3, [sp, #24]
 800efce:	3f08      	subs	r7, #8
 800efd0:	429e      	cmp	r6, r3
 800efd2:	ddec      	ble.n	800efae <__kernel_rem_pio2+0xb2>
 800efd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efd8:	3508      	adds	r5, #8
 800efda:	e8eb 2302 	strd	r2, r3, [fp], #8
 800efde:	f108 0801 	add.w	r8, r8, #1
 800efe2:	e7c4      	b.n	800ef6e <__kernel_rem_pio2+0x72>
 800efe4:	9b04      	ldr	r3, [sp, #16]
 800efe6:	aa0c      	add	r2, sp, #48	; 0x30
 800efe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800efec:	930b      	str	r3, [sp, #44]	; 0x2c
 800efee:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800eff0:	9f04      	ldr	r7, [sp, #16]
 800eff2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800eff6:	930a      	str	r3, [sp, #40]	; 0x28
 800eff8:	463e      	mov	r6, r7
 800effa:	ab98      	add	r3, sp, #608	; 0x260
 800effc:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800f000:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f004:	f8cd b008 	str.w	fp, [sp, #8]
 800f008:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800f00c:	2e00      	cmp	r6, #0
 800f00e:	dc71      	bgt.n	800f0f4 <__kernel_rem_pio2+0x1f8>
 800f010:	4652      	mov	r2, sl
 800f012:	4620      	mov	r0, r4
 800f014:	4629      	mov	r1, r5
 800f016:	f000 ffa3 	bl	800ff60 <scalbn>
 800f01a:	2200      	movs	r2, #0
 800f01c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f020:	4604      	mov	r4, r0
 800f022:	460d      	mov	r5, r1
 800f024:	f7f1 fa94 	bl	8000550 <__aeabi_dmul>
 800f028:	f000 ff1a 	bl	800fe60 <floor>
 800f02c:	2200      	movs	r2, #0
 800f02e:	4b78      	ldr	r3, [pc, #480]	; (800f210 <__kernel_rem_pio2+0x314>)
 800f030:	f7f1 fa8e 	bl	8000550 <__aeabi_dmul>
 800f034:	4602      	mov	r2, r0
 800f036:	460b      	mov	r3, r1
 800f038:	4620      	mov	r0, r4
 800f03a:	4629      	mov	r1, r5
 800f03c:	f7f1 f8d0 	bl	80001e0 <__aeabi_dsub>
 800f040:	460d      	mov	r5, r1
 800f042:	4604      	mov	r4, r0
 800f044:	f7f1 fd34 	bl	8000ab0 <__aeabi_d2iz>
 800f048:	9007      	str	r0, [sp, #28]
 800f04a:	f7f1 fa17 	bl	800047c <__aeabi_i2d>
 800f04e:	4602      	mov	r2, r0
 800f050:	460b      	mov	r3, r1
 800f052:	4620      	mov	r0, r4
 800f054:	4629      	mov	r1, r5
 800f056:	f7f1 f8c3 	bl	80001e0 <__aeabi_dsub>
 800f05a:	f1ba 0f00 	cmp.w	sl, #0
 800f05e:	4680      	mov	r8, r0
 800f060:	4689      	mov	r9, r1
 800f062:	dd70      	ble.n	800f146 <__kernel_rem_pio2+0x24a>
 800f064:	1e7a      	subs	r2, r7, #1
 800f066:	ab0c      	add	r3, sp, #48	; 0x30
 800f068:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f06c:	9c07      	ldr	r4, [sp, #28]
 800f06e:	f1ca 0118 	rsb	r1, sl, #24
 800f072:	fa40 f301 	asr.w	r3, r0, r1
 800f076:	441c      	add	r4, r3
 800f078:	408b      	lsls	r3, r1
 800f07a:	1ac0      	subs	r0, r0, r3
 800f07c:	ab0c      	add	r3, sp, #48	; 0x30
 800f07e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f082:	f1ca 0317 	rsb	r3, sl, #23
 800f086:	9407      	str	r4, [sp, #28]
 800f088:	fa40 f303 	asr.w	r3, r0, r3
 800f08c:	9302      	str	r3, [sp, #8]
 800f08e:	9b02      	ldr	r3, [sp, #8]
 800f090:	2b00      	cmp	r3, #0
 800f092:	dd66      	ble.n	800f162 <__kernel_rem_pio2+0x266>
 800f094:	2200      	movs	r2, #0
 800f096:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f09a:	4614      	mov	r4, r2
 800f09c:	9b07      	ldr	r3, [sp, #28]
 800f09e:	3301      	adds	r3, #1
 800f0a0:	9307      	str	r3, [sp, #28]
 800f0a2:	4297      	cmp	r7, r2
 800f0a4:	f300 809f 	bgt.w	800f1e6 <__kernel_rem_pio2+0x2ea>
 800f0a8:	f1ba 0f00 	cmp.w	sl, #0
 800f0ac:	dd07      	ble.n	800f0be <__kernel_rem_pio2+0x1c2>
 800f0ae:	f1ba 0f01 	cmp.w	sl, #1
 800f0b2:	f000 80b9 	beq.w	800f228 <__kernel_rem_pio2+0x32c>
 800f0b6:	f1ba 0f02 	cmp.w	sl, #2
 800f0ba:	f000 80bf 	beq.w	800f23c <__kernel_rem_pio2+0x340>
 800f0be:	9b02      	ldr	r3, [sp, #8]
 800f0c0:	2b02      	cmp	r3, #2
 800f0c2:	d14e      	bne.n	800f162 <__kernel_rem_pio2+0x266>
 800f0c4:	4642      	mov	r2, r8
 800f0c6:	464b      	mov	r3, r9
 800f0c8:	2000      	movs	r0, #0
 800f0ca:	4952      	ldr	r1, [pc, #328]	; (800f214 <__kernel_rem_pio2+0x318>)
 800f0cc:	f7f1 f888 	bl	80001e0 <__aeabi_dsub>
 800f0d0:	4680      	mov	r8, r0
 800f0d2:	4689      	mov	r9, r1
 800f0d4:	2c00      	cmp	r4, #0
 800f0d6:	d044      	beq.n	800f162 <__kernel_rem_pio2+0x266>
 800f0d8:	4652      	mov	r2, sl
 800f0da:	2000      	movs	r0, #0
 800f0dc:	494d      	ldr	r1, [pc, #308]	; (800f214 <__kernel_rem_pio2+0x318>)
 800f0de:	f000 ff3f 	bl	800ff60 <scalbn>
 800f0e2:	4602      	mov	r2, r0
 800f0e4:	460b      	mov	r3, r1
 800f0e6:	4640      	mov	r0, r8
 800f0e8:	4649      	mov	r1, r9
 800f0ea:	f7f1 f879 	bl	80001e0 <__aeabi_dsub>
 800f0ee:	4680      	mov	r8, r0
 800f0f0:	4689      	mov	r9, r1
 800f0f2:	e036      	b.n	800f162 <__kernel_rem_pio2+0x266>
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	4b48      	ldr	r3, [pc, #288]	; (800f218 <__kernel_rem_pio2+0x31c>)
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	4629      	mov	r1, r5
 800f0fc:	f7f1 fa28 	bl	8000550 <__aeabi_dmul>
 800f100:	f7f1 fcd6 	bl	8000ab0 <__aeabi_d2iz>
 800f104:	f7f1 f9ba 	bl	800047c <__aeabi_i2d>
 800f108:	2200      	movs	r2, #0
 800f10a:	4b44      	ldr	r3, [pc, #272]	; (800f21c <__kernel_rem_pio2+0x320>)
 800f10c:	4680      	mov	r8, r0
 800f10e:	4689      	mov	r9, r1
 800f110:	f7f1 fa1e 	bl	8000550 <__aeabi_dmul>
 800f114:	4602      	mov	r2, r0
 800f116:	460b      	mov	r3, r1
 800f118:	4620      	mov	r0, r4
 800f11a:	4629      	mov	r1, r5
 800f11c:	f7f1 f860 	bl	80001e0 <__aeabi_dsub>
 800f120:	f7f1 fcc6 	bl	8000ab0 <__aeabi_d2iz>
 800f124:	9b02      	ldr	r3, [sp, #8]
 800f126:	3e01      	subs	r6, #1
 800f128:	f843 0b04 	str.w	r0, [r3], #4
 800f12c:	9302      	str	r3, [sp, #8]
 800f12e:	ab70      	add	r3, sp, #448	; 0x1c0
 800f130:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f134:	4640      	mov	r0, r8
 800f136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13a:	4649      	mov	r1, r9
 800f13c:	f7f1 f852 	bl	80001e4 <__adddf3>
 800f140:	4604      	mov	r4, r0
 800f142:	460d      	mov	r5, r1
 800f144:	e762      	b.n	800f00c <__kernel_rem_pio2+0x110>
 800f146:	d105      	bne.n	800f154 <__kernel_rem_pio2+0x258>
 800f148:	1e7b      	subs	r3, r7, #1
 800f14a:	aa0c      	add	r2, sp, #48	; 0x30
 800f14c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f150:	15c3      	asrs	r3, r0, #23
 800f152:	e79b      	b.n	800f08c <__kernel_rem_pio2+0x190>
 800f154:	2200      	movs	r2, #0
 800f156:	4b32      	ldr	r3, [pc, #200]	; (800f220 <__kernel_rem_pio2+0x324>)
 800f158:	f7f1 fc80 	bl	8000a5c <__aeabi_dcmpge>
 800f15c:	2800      	cmp	r0, #0
 800f15e:	d13f      	bne.n	800f1e0 <__kernel_rem_pio2+0x2e4>
 800f160:	9002      	str	r0, [sp, #8]
 800f162:	2200      	movs	r2, #0
 800f164:	2300      	movs	r3, #0
 800f166:	4640      	mov	r0, r8
 800f168:	4649      	mov	r1, r9
 800f16a:	f7f1 fc59 	bl	8000a20 <__aeabi_dcmpeq>
 800f16e:	2800      	cmp	r0, #0
 800f170:	f000 80b5 	beq.w	800f2de <__kernel_rem_pio2+0x3e2>
 800f174:	1e7c      	subs	r4, r7, #1
 800f176:	4623      	mov	r3, r4
 800f178:	2200      	movs	r2, #0
 800f17a:	9904      	ldr	r1, [sp, #16]
 800f17c:	428b      	cmp	r3, r1
 800f17e:	da64      	bge.n	800f24a <__kernel_rem_pio2+0x34e>
 800f180:	2a00      	cmp	r2, #0
 800f182:	d078      	beq.n	800f276 <__kernel_rem_pio2+0x37a>
 800f184:	ab0c      	add	r3, sp, #48	; 0x30
 800f186:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f18a:	f1aa 0a18 	sub.w	sl, sl, #24
 800f18e:	2b00      	cmp	r3, #0
 800f190:	f000 80a3 	beq.w	800f2da <__kernel_rem_pio2+0x3de>
 800f194:	4652      	mov	r2, sl
 800f196:	2000      	movs	r0, #0
 800f198:	491e      	ldr	r1, [pc, #120]	; (800f214 <__kernel_rem_pio2+0x318>)
 800f19a:	f000 fee1 	bl	800ff60 <scalbn>
 800f19e:	46a2      	mov	sl, r4
 800f1a0:	4606      	mov	r6, r0
 800f1a2:	460f      	mov	r7, r1
 800f1a4:	f04f 0800 	mov.w	r8, #0
 800f1a8:	00e3      	lsls	r3, r4, #3
 800f1aa:	9306      	str	r3, [sp, #24]
 800f1ac:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800f218 <__kernel_rem_pio2+0x31c>
 800f1b0:	ab70      	add	r3, sp, #448	; 0x1c0
 800f1b2:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800f1b6:	f1ba 0f00 	cmp.w	sl, #0
 800f1ba:	f280 80c6 	bge.w	800f34a <__kernel_rem_pio2+0x44e>
 800f1be:	4627      	mov	r7, r4
 800f1c0:	f04f 0800 	mov.w	r8, #0
 800f1c4:	2f00      	cmp	r7, #0
 800f1c6:	f2c0 80f3 	blt.w	800f3b0 <__kernel_rem_pio2+0x4b4>
 800f1ca:	4b16      	ldr	r3, [pc, #88]	; (800f224 <__kernel_rem_pio2+0x328>)
 800f1cc:	f04f 0a00 	mov.w	sl, #0
 800f1d0:	461d      	mov	r5, r3
 800f1d2:	ab70      	add	r3, sp, #448	; 0x1c0
 800f1d4:	f04f 0b00 	mov.w	fp, #0
 800f1d8:	2600      	movs	r6, #0
 800f1da:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800f1de:	e0d9      	b.n	800f394 <__kernel_rem_pio2+0x498>
 800f1e0:	2302      	movs	r3, #2
 800f1e2:	9302      	str	r3, [sp, #8]
 800f1e4:	e756      	b.n	800f094 <__kernel_rem_pio2+0x198>
 800f1e6:	f8db 3000 	ldr.w	r3, [fp]
 800f1ea:	b954      	cbnz	r4, 800f202 <__kernel_rem_pio2+0x306>
 800f1ec:	b123      	cbz	r3, 800f1f8 <__kernel_rem_pio2+0x2fc>
 800f1ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f1f2:	f8cb 3000 	str.w	r3, [fp]
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	461c      	mov	r4, r3
 800f1fa:	3201      	adds	r2, #1
 800f1fc:	f10b 0b04 	add.w	fp, fp, #4
 800f200:	e74f      	b.n	800f0a2 <__kernel_rem_pio2+0x1a6>
 800f202:	1acb      	subs	r3, r1, r3
 800f204:	f8cb 3000 	str.w	r3, [fp]
 800f208:	4623      	mov	r3, r4
 800f20a:	e7f5      	b.n	800f1f8 <__kernel_rem_pio2+0x2fc>
 800f20c:	08013e48 	.word	0x08013e48
 800f210:	40200000 	.word	0x40200000
 800f214:	3ff00000 	.word	0x3ff00000
 800f218:	3e700000 	.word	0x3e700000
 800f21c:	41700000 	.word	0x41700000
 800f220:	3fe00000 	.word	0x3fe00000
 800f224:	08013e08 	.word	0x08013e08
 800f228:	1e7a      	subs	r2, r7, #1
 800f22a:	ab0c      	add	r3, sp, #48	; 0x30
 800f22c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f230:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f234:	a90c      	add	r1, sp, #48	; 0x30
 800f236:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f23a:	e740      	b.n	800f0be <__kernel_rem_pio2+0x1c2>
 800f23c:	1e7a      	subs	r2, r7, #1
 800f23e:	ab0c      	add	r3, sp, #48	; 0x30
 800f240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f244:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f248:	e7f4      	b.n	800f234 <__kernel_rem_pio2+0x338>
 800f24a:	a90c      	add	r1, sp, #48	; 0x30
 800f24c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f250:	3b01      	subs	r3, #1
 800f252:	430a      	orrs	r2, r1
 800f254:	e791      	b.n	800f17a <__kernel_rem_pio2+0x27e>
 800f256:	3401      	adds	r4, #1
 800f258:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f25c:	2a00      	cmp	r2, #0
 800f25e:	d0fa      	beq.n	800f256 <__kernel_rem_pio2+0x35a>
 800f260:	9b08      	ldr	r3, [sp, #32]
 800f262:	1c7e      	adds	r6, r7, #1
 800f264:	18fd      	adds	r5, r7, r3
 800f266:	ab20      	add	r3, sp, #128	; 0x80
 800f268:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f26c:	443c      	add	r4, r7
 800f26e:	42b4      	cmp	r4, r6
 800f270:	da04      	bge.n	800f27c <__kernel_rem_pio2+0x380>
 800f272:	4627      	mov	r7, r4
 800f274:	e6c0      	b.n	800eff8 <__kernel_rem_pio2+0xfc>
 800f276:	2401      	movs	r4, #1
 800f278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f27a:	e7ed      	b.n	800f258 <__kernel_rem_pio2+0x35c>
 800f27c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f27e:	462f      	mov	r7, r5
 800f280:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f284:	f7f1 f8fa 	bl	800047c <__aeabi_i2d>
 800f288:	f04f 0b00 	mov.w	fp, #0
 800f28c:	f04f 0800 	mov.w	r8, #0
 800f290:	f04f 0900 	mov.w	r9, #0
 800f294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f296:	e8e7 0102 	strd	r0, r1, [r7], #8
 800f29a:	3b08      	subs	r3, #8
 800f29c:	9302      	str	r3, [sp, #8]
 800f29e:	9b06      	ldr	r3, [sp, #24]
 800f2a0:	459b      	cmp	fp, r3
 800f2a2:	dd07      	ble.n	800f2b4 <__kernel_rem_pio2+0x3b8>
 800f2a4:	ab70      	add	r3, sp, #448	; 0x1c0
 800f2a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f2aa:	463d      	mov	r5, r7
 800f2ac:	e9c3 8900 	strd	r8, r9, [r3]
 800f2b0:	3601      	adds	r6, #1
 800f2b2:	e7dc      	b.n	800f26e <__kernel_rem_pio2+0x372>
 800f2b4:	9902      	ldr	r1, [sp, #8]
 800f2b6:	f10b 0b01 	add.w	fp, fp, #1
 800f2ba:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800f2be:	9102      	str	r1, [sp, #8]
 800f2c0:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800f2c4:	f7f1 f944 	bl	8000550 <__aeabi_dmul>
 800f2c8:	4602      	mov	r2, r0
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	4640      	mov	r0, r8
 800f2ce:	4649      	mov	r1, r9
 800f2d0:	f7f0 ff88 	bl	80001e4 <__adddf3>
 800f2d4:	4680      	mov	r8, r0
 800f2d6:	4689      	mov	r9, r1
 800f2d8:	e7e1      	b.n	800f29e <__kernel_rem_pio2+0x3a2>
 800f2da:	3c01      	subs	r4, #1
 800f2dc:	e752      	b.n	800f184 <__kernel_rem_pio2+0x288>
 800f2de:	f1ca 0200 	rsb	r2, sl, #0
 800f2e2:	4640      	mov	r0, r8
 800f2e4:	4649      	mov	r1, r9
 800f2e6:	f000 fe3b 	bl	800ff60 <scalbn>
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	4ba5      	ldr	r3, [pc, #660]	; (800f584 <__kernel_rem_pio2+0x688>)
 800f2ee:	4604      	mov	r4, r0
 800f2f0:	460d      	mov	r5, r1
 800f2f2:	f7f1 fbb3 	bl	8000a5c <__aeabi_dcmpge>
 800f2f6:	b1f8      	cbz	r0, 800f338 <__kernel_rem_pio2+0x43c>
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	4ba3      	ldr	r3, [pc, #652]	; (800f588 <__kernel_rem_pio2+0x68c>)
 800f2fc:	4620      	mov	r0, r4
 800f2fe:	4629      	mov	r1, r5
 800f300:	f7f1 f926 	bl	8000550 <__aeabi_dmul>
 800f304:	f7f1 fbd4 	bl	8000ab0 <__aeabi_d2iz>
 800f308:	4606      	mov	r6, r0
 800f30a:	f7f1 f8b7 	bl	800047c <__aeabi_i2d>
 800f30e:	2200      	movs	r2, #0
 800f310:	4b9c      	ldr	r3, [pc, #624]	; (800f584 <__kernel_rem_pio2+0x688>)
 800f312:	f7f1 f91d 	bl	8000550 <__aeabi_dmul>
 800f316:	460b      	mov	r3, r1
 800f318:	4602      	mov	r2, r0
 800f31a:	4629      	mov	r1, r5
 800f31c:	4620      	mov	r0, r4
 800f31e:	f7f0 ff5f 	bl	80001e0 <__aeabi_dsub>
 800f322:	f7f1 fbc5 	bl	8000ab0 <__aeabi_d2iz>
 800f326:	1c7c      	adds	r4, r7, #1
 800f328:	ab0c      	add	r3, sp, #48	; 0x30
 800f32a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800f32e:	f10a 0a18 	add.w	sl, sl, #24
 800f332:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800f336:	e72d      	b.n	800f194 <__kernel_rem_pio2+0x298>
 800f338:	4620      	mov	r0, r4
 800f33a:	4629      	mov	r1, r5
 800f33c:	f7f1 fbb8 	bl	8000ab0 <__aeabi_d2iz>
 800f340:	ab0c      	add	r3, sp, #48	; 0x30
 800f342:	463c      	mov	r4, r7
 800f344:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800f348:	e724      	b.n	800f194 <__kernel_rem_pio2+0x298>
 800f34a:	ab0c      	add	r3, sp, #48	; 0x30
 800f34c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f350:	f7f1 f894 	bl	800047c <__aeabi_i2d>
 800f354:	4632      	mov	r2, r6
 800f356:	463b      	mov	r3, r7
 800f358:	f7f1 f8fa 	bl	8000550 <__aeabi_dmul>
 800f35c:	4642      	mov	r2, r8
 800f35e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800f362:	464b      	mov	r3, r9
 800f364:	4630      	mov	r0, r6
 800f366:	4639      	mov	r1, r7
 800f368:	f7f1 f8f2 	bl	8000550 <__aeabi_dmul>
 800f36c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f370:	4606      	mov	r6, r0
 800f372:	460f      	mov	r7, r1
 800f374:	e71f      	b.n	800f1b6 <__kernel_rem_pio2+0x2ba>
 800f376:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f37a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800f37e:	f7f1 f8e7 	bl	8000550 <__aeabi_dmul>
 800f382:	4602      	mov	r2, r0
 800f384:	460b      	mov	r3, r1
 800f386:	4650      	mov	r0, sl
 800f388:	4659      	mov	r1, fp
 800f38a:	f7f0 ff2b 	bl	80001e4 <__adddf3>
 800f38e:	4682      	mov	sl, r0
 800f390:	468b      	mov	fp, r1
 800f392:	3601      	adds	r6, #1
 800f394:	9b04      	ldr	r3, [sp, #16]
 800f396:	429e      	cmp	r6, r3
 800f398:	dc01      	bgt.n	800f39e <__kernel_rem_pio2+0x4a2>
 800f39a:	45b0      	cmp	r8, r6
 800f39c:	daeb      	bge.n	800f376 <__kernel_rem_pio2+0x47a>
 800f39e:	ab48      	add	r3, sp, #288	; 0x120
 800f3a0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f3a4:	e9c3 ab00 	strd	sl, fp, [r3]
 800f3a8:	3f01      	subs	r7, #1
 800f3aa:	f108 0801 	add.w	r8, r8, #1
 800f3ae:	e709      	b.n	800f1c4 <__kernel_rem_pio2+0x2c8>
 800f3b0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800f3b2:	2b02      	cmp	r3, #2
 800f3b4:	dc09      	bgt.n	800f3ca <__kernel_rem_pio2+0x4ce>
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	dc34      	bgt.n	800f424 <__kernel_rem_pio2+0x528>
 800f3ba:	d05e      	beq.n	800f47a <__kernel_rem_pio2+0x57e>
 800f3bc:	9b07      	ldr	r3, [sp, #28]
 800f3be:	f003 0007 	and.w	r0, r3, #7
 800f3c2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ca:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800f3cc:	2b03      	cmp	r3, #3
 800f3ce:	d1f5      	bne.n	800f3bc <__kernel_rem_pio2+0x4c0>
 800f3d0:	9a06      	ldr	r2, [sp, #24]
 800f3d2:	ab48      	add	r3, sp, #288	; 0x120
 800f3d4:	441a      	add	r2, r3
 800f3d6:	4615      	mov	r5, r2
 800f3d8:	4692      	mov	sl, r2
 800f3da:	46a3      	mov	fp, r4
 800f3dc:	f1bb 0f00 	cmp.w	fp, #0
 800f3e0:	dc7a      	bgt.n	800f4d8 <__kernel_rem_pio2+0x5dc>
 800f3e2:	46aa      	mov	sl, r5
 800f3e4:	46a3      	mov	fp, r4
 800f3e6:	f1bb 0f01 	cmp.w	fp, #1
 800f3ea:	f300 8094 	bgt.w	800f516 <__kernel_rem_pio2+0x61a>
 800f3ee:	2700      	movs	r7, #0
 800f3f0:	463e      	mov	r6, r7
 800f3f2:	2c01      	cmp	r4, #1
 800f3f4:	f300 80ae 	bgt.w	800f554 <__kernel_rem_pio2+0x658>
 800f3f8:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800f3fc:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800f400:	9b02      	ldr	r3, [sp, #8]
 800f402:	2b00      	cmp	r3, #0
 800f404:	f040 80b0 	bne.w	800f568 <__kernel_rem_pio2+0x66c>
 800f408:	4603      	mov	r3, r0
 800f40a:	462a      	mov	r2, r5
 800f40c:	9801      	ldr	r0, [sp, #4]
 800f40e:	e9c0 2300 	strd	r2, r3, [r0]
 800f412:	4622      	mov	r2, r4
 800f414:	460b      	mov	r3, r1
 800f416:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f41a:	463a      	mov	r2, r7
 800f41c:	4633      	mov	r3, r6
 800f41e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f422:	e7cb      	b.n	800f3bc <__kernel_rem_pio2+0x4c0>
 800f424:	2000      	movs	r0, #0
 800f426:	9a06      	ldr	r2, [sp, #24]
 800f428:	ab48      	add	r3, sp, #288	; 0x120
 800f42a:	441a      	add	r2, r3
 800f42c:	4615      	mov	r5, r2
 800f42e:	46a0      	mov	r8, r4
 800f430:	4601      	mov	r1, r0
 800f432:	f1b8 0f00 	cmp.w	r8, #0
 800f436:	da3c      	bge.n	800f4b2 <__kernel_rem_pio2+0x5b6>
 800f438:	9b02      	ldr	r3, [sp, #8]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d040      	beq.n	800f4c0 <__kernel_rem_pio2+0x5c4>
 800f43e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800f442:	4602      	mov	r2, r0
 800f444:	462b      	mov	r3, r5
 800f446:	9d01      	ldr	r5, [sp, #4]
 800f448:	2601      	movs	r6, #1
 800f44a:	e9c5 2300 	strd	r2, r3, [r5]
 800f44e:	460b      	mov	r3, r1
 800f450:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f454:	f7f0 fec4 	bl	80001e0 <__aeabi_dsub>
 800f458:	4684      	mov	ip, r0
 800f45a:	460f      	mov	r7, r1
 800f45c:	ad48      	add	r5, sp, #288	; 0x120
 800f45e:	42b4      	cmp	r4, r6
 800f460:	f105 0508 	add.w	r5, r5, #8
 800f464:	da2e      	bge.n	800f4c4 <__kernel_rem_pio2+0x5c8>
 800f466:	9b02      	ldr	r3, [sp, #8]
 800f468:	b10b      	cbz	r3, 800f46e <__kernel_rem_pio2+0x572>
 800f46a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800f46e:	4662      	mov	r2, ip
 800f470:	463b      	mov	r3, r7
 800f472:	9901      	ldr	r1, [sp, #4]
 800f474:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800f478:	e7a0      	b.n	800f3bc <__kernel_rem_pio2+0x4c0>
 800f47a:	9a06      	ldr	r2, [sp, #24]
 800f47c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800f47e:	ab48      	add	r3, sp, #288	; 0x120
 800f480:	441a      	add	r2, r3
 800f482:	4615      	mov	r5, r2
 800f484:	4637      	mov	r7, r6
 800f486:	2c00      	cmp	r4, #0
 800f488:	da09      	bge.n	800f49e <__kernel_rem_pio2+0x5a2>
 800f48a:	9b02      	ldr	r3, [sp, #8]
 800f48c:	b10b      	cbz	r3, 800f492 <__kernel_rem_pio2+0x596>
 800f48e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800f492:	4632      	mov	r2, r6
 800f494:	463b      	mov	r3, r7
 800f496:	9901      	ldr	r1, [sp, #4]
 800f498:	e9c1 2300 	strd	r2, r3, [r1]
 800f49c:	e78e      	b.n	800f3bc <__kernel_rem_pio2+0x4c0>
 800f49e:	4630      	mov	r0, r6
 800f4a0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800f4a4:	4639      	mov	r1, r7
 800f4a6:	f7f0 fe9d 	bl	80001e4 <__adddf3>
 800f4aa:	3c01      	subs	r4, #1
 800f4ac:	4606      	mov	r6, r0
 800f4ae:	460f      	mov	r7, r1
 800f4b0:	e7e9      	b.n	800f486 <__kernel_rem_pio2+0x58a>
 800f4b2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800f4b6:	f7f0 fe95 	bl	80001e4 <__adddf3>
 800f4ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800f4be:	e7b8      	b.n	800f432 <__kernel_rem_pio2+0x536>
 800f4c0:	460d      	mov	r5, r1
 800f4c2:	e7be      	b.n	800f442 <__kernel_rem_pio2+0x546>
 800f4c4:	4660      	mov	r0, ip
 800f4c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f4ca:	4639      	mov	r1, r7
 800f4cc:	f7f0 fe8a 	bl	80001e4 <__adddf3>
 800f4d0:	3601      	adds	r6, #1
 800f4d2:	4684      	mov	ip, r0
 800f4d4:	460f      	mov	r7, r1
 800f4d6:	e7c2      	b.n	800f45e <__kernel_rem_pio2+0x562>
 800f4d8:	e9da 6700 	ldrd	r6, r7, [sl]
 800f4dc:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800f4e0:	4632      	mov	r2, r6
 800f4e2:	463b      	mov	r3, r7
 800f4e4:	4640      	mov	r0, r8
 800f4e6:	4649      	mov	r1, r9
 800f4e8:	f7f0 fe7c 	bl	80001e4 <__adddf3>
 800f4ec:	4602      	mov	r2, r0
 800f4ee:	460b      	mov	r3, r1
 800f4f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f4f4:	4640      	mov	r0, r8
 800f4f6:	4649      	mov	r1, r9
 800f4f8:	f7f0 fe72 	bl	80001e0 <__aeabi_dsub>
 800f4fc:	4632      	mov	r2, r6
 800f4fe:	463b      	mov	r3, r7
 800f500:	f7f0 fe70 	bl	80001e4 <__adddf3>
 800f504:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f508:	e86a 0102 	strd	r0, r1, [sl], #-8
 800f50c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f510:	e9ca 2300 	strd	r2, r3, [sl]
 800f514:	e762      	b.n	800f3dc <__kernel_rem_pio2+0x4e0>
 800f516:	e9da 8900 	ldrd	r8, r9, [sl]
 800f51a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800f51e:	4642      	mov	r2, r8
 800f520:	464b      	mov	r3, r9
 800f522:	4630      	mov	r0, r6
 800f524:	4639      	mov	r1, r7
 800f526:	f7f0 fe5d 	bl	80001e4 <__adddf3>
 800f52a:	4602      	mov	r2, r0
 800f52c:	460b      	mov	r3, r1
 800f52e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f532:	4630      	mov	r0, r6
 800f534:	4639      	mov	r1, r7
 800f536:	f7f0 fe53 	bl	80001e0 <__aeabi_dsub>
 800f53a:	4642      	mov	r2, r8
 800f53c:	464b      	mov	r3, r9
 800f53e:	f7f0 fe51 	bl	80001e4 <__adddf3>
 800f542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f546:	e86a 0102 	strd	r0, r1, [sl], #-8
 800f54a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f54e:	e9ca 2300 	strd	r2, r3, [sl]
 800f552:	e748      	b.n	800f3e6 <__kernel_rem_pio2+0x4ea>
 800f554:	4638      	mov	r0, r7
 800f556:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800f55a:	4631      	mov	r1, r6
 800f55c:	f7f0 fe42 	bl	80001e4 <__adddf3>
 800f560:	3c01      	subs	r4, #1
 800f562:	4607      	mov	r7, r0
 800f564:	460e      	mov	r6, r1
 800f566:	e744      	b.n	800f3f2 <__kernel_rem_pio2+0x4f6>
 800f568:	9b01      	ldr	r3, [sp, #4]
 800f56a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f56e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800f572:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800f576:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800f57a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800f57e:	601d      	str	r5, [r3, #0]
 800f580:	615e      	str	r6, [r3, #20]
 800f582:	e71b      	b.n	800f3bc <__kernel_rem_pio2+0x4c0>
 800f584:	41700000 	.word	0x41700000
 800f588:	3e700000 	.word	0x3e700000
 800f58c:	00000000 	.word	0x00000000

0800f590 <__kernel_sin>:
 800f590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f594:	b086      	sub	sp, #24
 800f596:	e9cd 2300 	strd	r2, r3, [sp]
 800f59a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f59e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f5a2:	4682      	mov	sl, r0
 800f5a4:	460c      	mov	r4, r1
 800f5a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800f5a8:	da03      	bge.n	800f5b2 <__kernel_sin+0x22>
 800f5aa:	f7f1 fa81 	bl	8000ab0 <__aeabi_d2iz>
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	d050      	beq.n	800f654 <__kernel_sin+0xc4>
 800f5b2:	4652      	mov	r2, sl
 800f5b4:	4623      	mov	r3, r4
 800f5b6:	4650      	mov	r0, sl
 800f5b8:	4621      	mov	r1, r4
 800f5ba:	f7f0 ffc9 	bl	8000550 <__aeabi_dmul>
 800f5be:	4606      	mov	r6, r0
 800f5c0:	460f      	mov	r7, r1
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	4650      	mov	r0, sl
 800f5c8:	4621      	mov	r1, r4
 800f5ca:	f7f0 ffc1 	bl	8000550 <__aeabi_dmul>
 800f5ce:	a33e      	add	r3, pc, #248	; (adr r3, 800f6c8 <__kernel_sin+0x138>)
 800f5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d4:	4680      	mov	r8, r0
 800f5d6:	4689      	mov	r9, r1
 800f5d8:	4630      	mov	r0, r6
 800f5da:	4639      	mov	r1, r7
 800f5dc:	f7f0 ffb8 	bl	8000550 <__aeabi_dmul>
 800f5e0:	a33b      	add	r3, pc, #236	; (adr r3, 800f6d0 <__kernel_sin+0x140>)
 800f5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e6:	f7f0 fdfb 	bl	80001e0 <__aeabi_dsub>
 800f5ea:	4632      	mov	r2, r6
 800f5ec:	463b      	mov	r3, r7
 800f5ee:	f7f0 ffaf 	bl	8000550 <__aeabi_dmul>
 800f5f2:	a339      	add	r3, pc, #228	; (adr r3, 800f6d8 <__kernel_sin+0x148>)
 800f5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f8:	f7f0 fdf4 	bl	80001e4 <__adddf3>
 800f5fc:	4632      	mov	r2, r6
 800f5fe:	463b      	mov	r3, r7
 800f600:	f7f0 ffa6 	bl	8000550 <__aeabi_dmul>
 800f604:	a336      	add	r3, pc, #216	; (adr r3, 800f6e0 <__kernel_sin+0x150>)
 800f606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60a:	f7f0 fde9 	bl	80001e0 <__aeabi_dsub>
 800f60e:	4632      	mov	r2, r6
 800f610:	463b      	mov	r3, r7
 800f612:	f7f0 ff9d 	bl	8000550 <__aeabi_dmul>
 800f616:	a334      	add	r3, pc, #208	; (adr r3, 800f6e8 <__kernel_sin+0x158>)
 800f618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61c:	f7f0 fde2 	bl	80001e4 <__adddf3>
 800f620:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f624:	b9dd      	cbnz	r5, 800f65e <__kernel_sin+0xce>
 800f626:	4602      	mov	r2, r0
 800f628:	460b      	mov	r3, r1
 800f62a:	4630      	mov	r0, r6
 800f62c:	4639      	mov	r1, r7
 800f62e:	f7f0 ff8f 	bl	8000550 <__aeabi_dmul>
 800f632:	a32f      	add	r3, pc, #188	; (adr r3, 800f6f0 <__kernel_sin+0x160>)
 800f634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f638:	f7f0 fdd2 	bl	80001e0 <__aeabi_dsub>
 800f63c:	4642      	mov	r2, r8
 800f63e:	464b      	mov	r3, r9
 800f640:	f7f0 ff86 	bl	8000550 <__aeabi_dmul>
 800f644:	4602      	mov	r2, r0
 800f646:	460b      	mov	r3, r1
 800f648:	4650      	mov	r0, sl
 800f64a:	4621      	mov	r1, r4
 800f64c:	f7f0 fdca 	bl	80001e4 <__adddf3>
 800f650:	4682      	mov	sl, r0
 800f652:	460c      	mov	r4, r1
 800f654:	4650      	mov	r0, sl
 800f656:	4621      	mov	r1, r4
 800f658:	b006      	add	sp, #24
 800f65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f65e:	2200      	movs	r2, #0
 800f660:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f664:	4b24      	ldr	r3, [pc, #144]	; (800f6f8 <__kernel_sin+0x168>)
 800f666:	f7f0 ff73 	bl	8000550 <__aeabi_dmul>
 800f66a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f66e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f672:	4640      	mov	r0, r8
 800f674:	4649      	mov	r1, r9
 800f676:	f7f0 ff6b 	bl	8000550 <__aeabi_dmul>
 800f67a:	4602      	mov	r2, r0
 800f67c:	460b      	mov	r3, r1
 800f67e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f682:	f7f0 fdad 	bl	80001e0 <__aeabi_dsub>
 800f686:	4632      	mov	r2, r6
 800f688:	463b      	mov	r3, r7
 800f68a:	f7f0 ff61 	bl	8000550 <__aeabi_dmul>
 800f68e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f692:	f7f0 fda5 	bl	80001e0 <__aeabi_dsub>
 800f696:	a316      	add	r3, pc, #88	; (adr r3, 800f6f0 <__kernel_sin+0x160>)
 800f698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69c:	4606      	mov	r6, r0
 800f69e:	460f      	mov	r7, r1
 800f6a0:	4640      	mov	r0, r8
 800f6a2:	4649      	mov	r1, r9
 800f6a4:	f7f0 ff54 	bl	8000550 <__aeabi_dmul>
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	460b      	mov	r3, r1
 800f6ac:	4630      	mov	r0, r6
 800f6ae:	4639      	mov	r1, r7
 800f6b0:	f7f0 fd98 	bl	80001e4 <__adddf3>
 800f6b4:	4602      	mov	r2, r0
 800f6b6:	460b      	mov	r3, r1
 800f6b8:	4650      	mov	r0, sl
 800f6ba:	4621      	mov	r1, r4
 800f6bc:	f7f0 fd90 	bl	80001e0 <__aeabi_dsub>
 800f6c0:	e7c6      	b.n	800f650 <__kernel_sin+0xc0>
 800f6c2:	bf00      	nop
 800f6c4:	f3af 8000 	nop.w
 800f6c8:	5acfd57c 	.word	0x5acfd57c
 800f6cc:	3de5d93a 	.word	0x3de5d93a
 800f6d0:	8a2b9ceb 	.word	0x8a2b9ceb
 800f6d4:	3e5ae5e6 	.word	0x3e5ae5e6
 800f6d8:	57b1fe7d 	.word	0x57b1fe7d
 800f6dc:	3ec71de3 	.word	0x3ec71de3
 800f6e0:	19c161d5 	.word	0x19c161d5
 800f6e4:	3f2a01a0 	.word	0x3f2a01a0
 800f6e8:	1110f8a6 	.word	0x1110f8a6
 800f6ec:	3f811111 	.word	0x3f811111
 800f6f0:	55555549 	.word	0x55555549
 800f6f4:	3fc55555 	.word	0x3fc55555
 800f6f8:	3fe00000 	.word	0x3fe00000

0800f6fc <__kernel_cosf>:
 800f6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f700:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800f704:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800f708:	4606      	mov	r6, r0
 800f70a:	4688      	mov	r8, r1
 800f70c:	da03      	bge.n	800f716 <__kernel_cosf+0x1a>
 800f70e:	f7f1 fd51 	bl	80011b4 <__aeabi_f2iz>
 800f712:	2800      	cmp	r0, #0
 800f714:	d05c      	beq.n	800f7d0 <__kernel_cosf+0xd4>
 800f716:	4631      	mov	r1, r6
 800f718:	4630      	mov	r0, r6
 800f71a:	f7f1 fb6f 	bl	8000dfc <__aeabi_fmul>
 800f71e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f722:	4605      	mov	r5, r0
 800f724:	f7f1 fb6a 	bl	8000dfc <__aeabi_fmul>
 800f728:	492b      	ldr	r1, [pc, #172]	; (800f7d8 <__kernel_cosf+0xdc>)
 800f72a:	4607      	mov	r7, r0
 800f72c:	4628      	mov	r0, r5
 800f72e:	f7f1 fb65 	bl	8000dfc <__aeabi_fmul>
 800f732:	492a      	ldr	r1, [pc, #168]	; (800f7dc <__kernel_cosf+0xe0>)
 800f734:	f7f1 fa5a 	bl	8000bec <__addsf3>
 800f738:	4629      	mov	r1, r5
 800f73a:	f7f1 fb5f 	bl	8000dfc <__aeabi_fmul>
 800f73e:	4928      	ldr	r1, [pc, #160]	; (800f7e0 <__kernel_cosf+0xe4>)
 800f740:	f7f1 fa52 	bl	8000be8 <__aeabi_fsub>
 800f744:	4629      	mov	r1, r5
 800f746:	f7f1 fb59 	bl	8000dfc <__aeabi_fmul>
 800f74a:	4926      	ldr	r1, [pc, #152]	; (800f7e4 <__kernel_cosf+0xe8>)
 800f74c:	f7f1 fa4e 	bl	8000bec <__addsf3>
 800f750:	4629      	mov	r1, r5
 800f752:	f7f1 fb53 	bl	8000dfc <__aeabi_fmul>
 800f756:	4924      	ldr	r1, [pc, #144]	; (800f7e8 <__kernel_cosf+0xec>)
 800f758:	f7f1 fa46 	bl	8000be8 <__aeabi_fsub>
 800f75c:	4629      	mov	r1, r5
 800f75e:	f7f1 fb4d 	bl	8000dfc <__aeabi_fmul>
 800f762:	4922      	ldr	r1, [pc, #136]	; (800f7ec <__kernel_cosf+0xf0>)
 800f764:	f7f1 fa42 	bl	8000bec <__addsf3>
 800f768:	4629      	mov	r1, r5
 800f76a:	f7f1 fb47 	bl	8000dfc <__aeabi_fmul>
 800f76e:	4629      	mov	r1, r5
 800f770:	f7f1 fb44 	bl	8000dfc <__aeabi_fmul>
 800f774:	4641      	mov	r1, r8
 800f776:	4605      	mov	r5, r0
 800f778:	4630      	mov	r0, r6
 800f77a:	f7f1 fb3f 	bl	8000dfc <__aeabi_fmul>
 800f77e:	4601      	mov	r1, r0
 800f780:	4628      	mov	r0, r5
 800f782:	f7f1 fa31 	bl	8000be8 <__aeabi_fsub>
 800f786:	4b1a      	ldr	r3, [pc, #104]	; (800f7f0 <__kernel_cosf+0xf4>)
 800f788:	4605      	mov	r5, r0
 800f78a:	429c      	cmp	r4, r3
 800f78c:	dc0a      	bgt.n	800f7a4 <__kernel_cosf+0xa8>
 800f78e:	4601      	mov	r1, r0
 800f790:	4638      	mov	r0, r7
 800f792:	f7f1 fa29 	bl	8000be8 <__aeabi_fsub>
 800f796:	4601      	mov	r1, r0
 800f798:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f79c:	f7f1 fa24 	bl	8000be8 <__aeabi_fsub>
 800f7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7a4:	4b13      	ldr	r3, [pc, #76]	; (800f7f4 <__kernel_cosf+0xf8>)
 800f7a6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f7aa:	429c      	cmp	r4, r3
 800f7ac:	bfcc      	ite	gt
 800f7ae:	4c12      	ldrgt	r4, [pc, #72]	; (800f7f8 <__kernel_cosf+0xfc>)
 800f7b0:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800f7b4:	4621      	mov	r1, r4
 800f7b6:	f7f1 fa17 	bl	8000be8 <__aeabi_fsub>
 800f7ba:	4621      	mov	r1, r4
 800f7bc:	4606      	mov	r6, r0
 800f7be:	4638      	mov	r0, r7
 800f7c0:	f7f1 fa12 	bl	8000be8 <__aeabi_fsub>
 800f7c4:	4629      	mov	r1, r5
 800f7c6:	f7f1 fa0f 	bl	8000be8 <__aeabi_fsub>
 800f7ca:	4601      	mov	r1, r0
 800f7cc:	4630      	mov	r0, r6
 800f7ce:	e7e5      	b.n	800f79c <__kernel_cosf+0xa0>
 800f7d0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f7d4:	e7e4      	b.n	800f7a0 <__kernel_cosf+0xa4>
 800f7d6:	bf00      	nop
 800f7d8:	ad47d74e 	.word	0xad47d74e
 800f7dc:	310f74f6 	.word	0x310f74f6
 800f7e0:	3493f27c 	.word	0x3493f27c
 800f7e4:	37d00d01 	.word	0x37d00d01
 800f7e8:	3ab60b61 	.word	0x3ab60b61
 800f7ec:	3d2aaaab 	.word	0x3d2aaaab
 800f7f0:	3e999999 	.word	0x3e999999
 800f7f4:	3f480000 	.word	0x3f480000
 800f7f8:	3e900000 	.word	0x3e900000

0800f7fc <__kernel_rem_pio2f>:
 800f7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f800:	b0db      	sub	sp, #364	; 0x16c
 800f802:	9202      	str	r2, [sp, #8]
 800f804:	9304      	str	r3, [sp, #16]
 800f806:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f808:	4bc5      	ldr	r3, [pc, #788]	; (800fb20 <__kernel_rem_pio2f+0x324>)
 800f80a:	9005      	str	r0, [sp, #20]
 800f80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f810:	9100      	str	r1, [sp, #0]
 800f812:	9301      	str	r3, [sp, #4]
 800f814:	9b04      	ldr	r3, [sp, #16]
 800f816:	3b01      	subs	r3, #1
 800f818:	9303      	str	r3, [sp, #12]
 800f81a:	9b02      	ldr	r3, [sp, #8]
 800f81c:	1d1a      	adds	r2, r3, #4
 800f81e:	f2c0 809b 	blt.w	800f958 <__kernel_rem_pio2f+0x15c>
 800f822:	1edc      	subs	r4, r3, #3
 800f824:	bf48      	it	mi
 800f826:	1d1c      	addmi	r4, r3, #4
 800f828:	10e4      	asrs	r4, r4, #3
 800f82a:	2500      	movs	r5, #0
 800f82c:	f04f 0a00 	mov.w	sl, #0
 800f830:	1c67      	adds	r7, r4, #1
 800f832:	00fb      	lsls	r3, r7, #3
 800f834:	9306      	str	r3, [sp, #24]
 800f836:	9b02      	ldr	r3, [sp, #8]
 800f838:	9a03      	ldr	r2, [sp, #12]
 800f83a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800f83e:	9b01      	ldr	r3, [sp, #4]
 800f840:	1aa6      	subs	r6, r4, r2
 800f842:	eb03 0802 	add.w	r8, r3, r2
 800f846:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800f848:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800f84c:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800f850:	4545      	cmp	r5, r8
 800f852:	f340 8083 	ble.w	800f95c <__kernel_rem_pio2f+0x160>
 800f856:	f04f 0800 	mov.w	r8, #0
 800f85a:	f04f 0b00 	mov.w	fp, #0
 800f85e:	9b04      	ldr	r3, [sp, #16]
 800f860:	aa1e      	add	r2, sp, #120	; 0x78
 800f862:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800f866:	ab46      	add	r3, sp, #280	; 0x118
 800f868:	9a01      	ldr	r2, [sp, #4]
 800f86a:	4590      	cmp	r8, r2
 800f86c:	f340 809c 	ble.w	800f9a8 <__kernel_rem_pio2f+0x1ac>
 800f870:	4613      	mov	r3, r2
 800f872:	aa0a      	add	r2, sp, #40	; 0x28
 800f874:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f878:	9308      	str	r3, [sp, #32]
 800f87a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800f87c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f880:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f884:	9307      	str	r3, [sp, #28]
 800f886:	ad0a      	add	r5, sp, #40	; 0x28
 800f888:	462e      	mov	r6, r5
 800f88a:	46c3      	mov	fp, r8
 800f88c:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800f890:	ab5a      	add	r3, sp, #360	; 0x168
 800f892:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800f896:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800f89a:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800f89e:	f1bb 0f00 	cmp.w	fp, #0
 800f8a2:	f300 8086 	bgt.w	800f9b2 <__kernel_rem_pio2f+0x1b6>
 800f8a6:	4639      	mov	r1, r7
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	f000 fc25 	bl	80100f8 <scalbnf>
 800f8ae:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800f8b2:	4604      	mov	r4, r0
 800f8b4:	f7f1 faa2 	bl	8000dfc <__aeabi_fmul>
 800f8b8:	f000 fbd8 	bl	801006c <floorf>
 800f8bc:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800f8c0:	f7f1 fa9c 	bl	8000dfc <__aeabi_fmul>
 800f8c4:	4601      	mov	r1, r0
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f7f1 f98e 	bl	8000be8 <__aeabi_fsub>
 800f8cc:	4604      	mov	r4, r0
 800f8ce:	f7f1 fc71 	bl	80011b4 <__aeabi_f2iz>
 800f8d2:	4606      	mov	r6, r0
 800f8d4:	f7f1 fa3e 	bl	8000d54 <__aeabi_i2f>
 800f8d8:	4601      	mov	r1, r0
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f7f1 f984 	bl	8000be8 <__aeabi_fsub>
 800f8e0:	2f00      	cmp	r7, #0
 800f8e2:	4681      	mov	r9, r0
 800f8e4:	f340 8084 	ble.w	800f9f0 <__kernel_rem_pio2f+0x1f4>
 800f8e8:	f108 32ff 	add.w	r2, r8, #4294967295
 800f8ec:	ab0a      	add	r3, sp, #40	; 0x28
 800f8ee:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800f8f2:	f1c7 0108 	rsb	r1, r7, #8
 800f8f6:	fa44 f301 	asr.w	r3, r4, r1
 800f8fa:	441e      	add	r6, r3
 800f8fc:	408b      	lsls	r3, r1
 800f8fe:	1ae4      	subs	r4, r4, r3
 800f900:	f1c7 0007 	rsb	r0, r7, #7
 800f904:	ab0a      	add	r3, sp, #40	; 0x28
 800f906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f90a:	4104      	asrs	r4, r0
 800f90c:	2c00      	cmp	r4, #0
 800f90e:	dd7e      	ble.n	800fa0e <__kernel_rem_pio2f+0x212>
 800f910:	2200      	movs	r2, #0
 800f912:	4692      	mov	sl, r2
 800f914:	3601      	adds	r6, #1
 800f916:	4590      	cmp	r8, r2
 800f918:	f300 80b0 	bgt.w	800fa7c <__kernel_rem_pio2f+0x280>
 800f91c:	2f00      	cmp	r7, #0
 800f91e:	dd05      	ble.n	800f92c <__kernel_rem_pio2f+0x130>
 800f920:	2f01      	cmp	r7, #1
 800f922:	f000 80bd 	beq.w	800faa0 <__kernel_rem_pio2f+0x2a4>
 800f926:	2f02      	cmp	r7, #2
 800f928:	f000 80c5 	beq.w	800fab6 <__kernel_rem_pio2f+0x2ba>
 800f92c:	2c02      	cmp	r4, #2
 800f92e:	d16e      	bne.n	800fa0e <__kernel_rem_pio2f+0x212>
 800f930:	4649      	mov	r1, r9
 800f932:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f936:	f7f1 f957 	bl	8000be8 <__aeabi_fsub>
 800f93a:	4681      	mov	r9, r0
 800f93c:	f1ba 0f00 	cmp.w	sl, #0
 800f940:	d065      	beq.n	800fa0e <__kernel_rem_pio2f+0x212>
 800f942:	4639      	mov	r1, r7
 800f944:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f948:	f000 fbd6 	bl	80100f8 <scalbnf>
 800f94c:	4601      	mov	r1, r0
 800f94e:	4648      	mov	r0, r9
 800f950:	f7f1 f94a 	bl	8000be8 <__aeabi_fsub>
 800f954:	4681      	mov	r9, r0
 800f956:	e05a      	b.n	800fa0e <__kernel_rem_pio2f+0x212>
 800f958:	2400      	movs	r4, #0
 800f95a:	e766      	b.n	800f82a <__kernel_rem_pio2f+0x2e>
 800f95c:	42ee      	cmn	r6, r5
 800f95e:	d407      	bmi.n	800f970 <__kernel_rem_pio2f+0x174>
 800f960:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f964:	f7f1 f9f6 	bl	8000d54 <__aeabi_i2f>
 800f968:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800f96c:	3501      	adds	r5, #1
 800f96e:	e76f      	b.n	800f850 <__kernel_rem_pio2f+0x54>
 800f970:	4650      	mov	r0, sl
 800f972:	e7f9      	b.n	800f968 <__kernel_rem_pio2f+0x16c>
 800f974:	9b05      	ldr	r3, [sp, #20]
 800f976:	f8da 1000 	ldr.w	r1, [sl]
 800f97a:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800f97e:	f7f1 fa3d 	bl	8000dfc <__aeabi_fmul>
 800f982:	4601      	mov	r1, r0
 800f984:	4630      	mov	r0, r6
 800f986:	f7f1 f931 	bl	8000bec <__addsf3>
 800f98a:	4606      	mov	r6, r0
 800f98c:	f109 0901 	add.w	r9, r9, #1
 800f990:	ab46      	add	r3, sp, #280	; 0x118
 800f992:	9a03      	ldr	r2, [sp, #12]
 800f994:	f1aa 0a04 	sub.w	sl, sl, #4
 800f998:	4591      	cmp	r9, r2
 800f99a:	ddeb      	ble.n	800f974 <__kernel_rem_pio2f+0x178>
 800f99c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f9a0:	3504      	adds	r5, #4
 800f9a2:	f108 0801 	add.w	r8, r8, #1
 800f9a6:	e75f      	b.n	800f868 <__kernel_rem_pio2f+0x6c>
 800f9a8:	46aa      	mov	sl, r5
 800f9aa:	465e      	mov	r6, fp
 800f9ac:	f04f 0900 	mov.w	r9, #0
 800f9b0:	e7ef      	b.n	800f992 <__kernel_rem_pio2f+0x196>
 800f9b2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f9b6:	4620      	mov	r0, r4
 800f9b8:	f7f1 fa20 	bl	8000dfc <__aeabi_fmul>
 800f9bc:	f7f1 fbfa 	bl	80011b4 <__aeabi_f2iz>
 800f9c0:	f7f1 f9c8 	bl	8000d54 <__aeabi_i2f>
 800f9c4:	4649      	mov	r1, r9
 800f9c6:	9009      	str	r0, [sp, #36]	; 0x24
 800f9c8:	f7f1 fa18 	bl	8000dfc <__aeabi_fmul>
 800f9cc:	4601      	mov	r1, r0
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	f7f1 f90a 	bl	8000be8 <__aeabi_fsub>
 800f9d4:	f7f1 fbee 	bl	80011b4 <__aeabi_f2iz>
 800f9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f9de:	f846 0b04 	str.w	r0, [r6], #4
 800f9e2:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7f1 f900 	bl	8000bec <__addsf3>
 800f9ec:	4604      	mov	r4, r0
 800f9ee:	e756      	b.n	800f89e <__kernel_rem_pio2f+0xa2>
 800f9f0:	d106      	bne.n	800fa00 <__kernel_rem_pio2f+0x204>
 800f9f2:	f108 33ff 	add.w	r3, r8, #4294967295
 800f9f6:	aa0a      	add	r2, sp, #40	; 0x28
 800f9f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f9fc:	1224      	asrs	r4, r4, #8
 800f9fe:	e785      	b.n	800f90c <__kernel_rem_pio2f+0x110>
 800fa00:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800fa04:	f7f1 fbac 	bl	8001160 <__aeabi_fcmpge>
 800fa08:	4604      	mov	r4, r0
 800fa0a:	2800      	cmp	r0, #0
 800fa0c:	d134      	bne.n	800fa78 <__kernel_rem_pio2f+0x27c>
 800fa0e:	2100      	movs	r1, #0
 800fa10:	4648      	mov	r0, r9
 800fa12:	f7f1 fb87 	bl	8001124 <__aeabi_fcmpeq>
 800fa16:	2800      	cmp	r0, #0
 800fa18:	f000 809a 	beq.w	800fb50 <__kernel_rem_pio2f+0x354>
 800fa1c:	f108 35ff 	add.w	r5, r8, #4294967295
 800fa20:	462b      	mov	r3, r5
 800fa22:	2200      	movs	r2, #0
 800fa24:	9901      	ldr	r1, [sp, #4]
 800fa26:	428b      	cmp	r3, r1
 800fa28:	da4d      	bge.n	800fac6 <__kernel_rem_pio2f+0x2ca>
 800fa2a:	2a00      	cmp	r2, #0
 800fa2c:	d07c      	beq.n	800fb28 <__kernel_rem_pio2f+0x32c>
 800fa2e:	ab0a      	add	r3, sp, #40	; 0x28
 800fa30:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800fa34:	3f08      	subs	r7, #8
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	f000 8088 	beq.w	800fb4c <__kernel_rem_pio2f+0x350>
 800fa3c:	4639      	mov	r1, r7
 800fa3e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800fa42:	f000 fb59 	bl	80100f8 <scalbnf>
 800fa46:	46aa      	mov	sl, r5
 800fa48:	4681      	mov	r9, r0
 800fa4a:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800fa4e:	af46      	add	r7, sp, #280	; 0x118
 800fa50:	f1ba 0f00 	cmp.w	sl, #0
 800fa54:	f280 80b1 	bge.w	800fbba <__kernel_rem_pio2f+0x3be>
 800fa58:	46a9      	mov	r9, r5
 800fa5a:	f04f 0a00 	mov.w	sl, #0
 800fa5e:	2200      	movs	r2, #0
 800fa60:	f1b9 0f00 	cmp.w	r9, #0
 800fa64:	f2c0 80db 	blt.w	800fc1e <__kernel_rem_pio2f+0x422>
 800fa68:	a946      	add	r1, sp, #280	; 0x118
 800fa6a:	4617      	mov	r7, r2
 800fa6c:	f04f 0800 	mov.w	r8, #0
 800fa70:	4b2c      	ldr	r3, [pc, #176]	; (800fb24 <__kernel_rem_pio2f+0x328>)
 800fa72:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800fa76:	e0c3      	b.n	800fc00 <__kernel_rem_pio2f+0x404>
 800fa78:	2402      	movs	r4, #2
 800fa7a:	e749      	b.n	800f910 <__kernel_rem_pio2f+0x114>
 800fa7c:	682b      	ldr	r3, [r5, #0]
 800fa7e:	f1ba 0f00 	cmp.w	sl, #0
 800fa82:	d108      	bne.n	800fa96 <__kernel_rem_pio2f+0x29a>
 800fa84:	b11b      	cbz	r3, 800fa8e <__kernel_rem_pio2f+0x292>
 800fa86:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800fa8a:	602b      	str	r3, [r5, #0]
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	469a      	mov	sl, r3
 800fa90:	3201      	adds	r2, #1
 800fa92:	3504      	adds	r5, #4
 800fa94:	e73f      	b.n	800f916 <__kernel_rem_pio2f+0x11a>
 800fa96:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800fa9a:	602b      	str	r3, [r5, #0]
 800fa9c:	4653      	mov	r3, sl
 800fa9e:	e7f6      	b.n	800fa8e <__kernel_rem_pio2f+0x292>
 800faa0:	f108 32ff 	add.w	r2, r8, #4294967295
 800faa4:	ab0a      	add	r3, sp, #40	; 0x28
 800faa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800faae:	a90a      	add	r1, sp, #40	; 0x28
 800fab0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fab4:	e73a      	b.n	800f92c <__kernel_rem_pio2f+0x130>
 800fab6:	f108 32ff 	add.w	r2, r8, #4294967295
 800faba:	ab0a      	add	r3, sp, #40	; 0x28
 800fabc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fac4:	e7f3      	b.n	800faae <__kernel_rem_pio2f+0x2b2>
 800fac6:	a90a      	add	r1, sp, #40	; 0x28
 800fac8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800facc:	3b01      	subs	r3, #1
 800face:	430a      	orrs	r2, r1
 800fad0:	e7a8      	b.n	800fa24 <__kernel_rem_pio2f+0x228>
 800fad2:	3301      	adds	r3, #1
 800fad4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fad8:	2900      	cmp	r1, #0
 800fada:	d0fa      	beq.n	800fad2 <__kernel_rem_pio2f+0x2d6>
 800fadc:	9a04      	ldr	r2, [sp, #16]
 800fade:	f108 0501 	add.w	r5, r8, #1
 800fae2:	eb08 0402 	add.w	r4, r8, r2
 800fae6:	aa1e      	add	r2, sp, #120	; 0x78
 800fae8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800faec:	4498      	add	r8, r3
 800faee:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800faf2:	45a8      	cmp	r8, r5
 800faf4:	f6ff aec7 	blt.w	800f886 <__kernel_rem_pio2f+0x8a>
 800faf8:	9b07      	ldr	r3, [sp, #28]
 800fafa:	46a3      	mov	fp, r4
 800fafc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fb00:	f7f1 f928 	bl	8000d54 <__aeabi_i2f>
 800fb04:	f04f 0a00 	mov.w	sl, #0
 800fb08:	2600      	movs	r6, #0
 800fb0a:	f84b 0b04 	str.w	r0, [fp], #4
 800fb0e:	9b03      	ldr	r3, [sp, #12]
 800fb10:	459a      	cmp	sl, r3
 800fb12:	dd0c      	ble.n	800fb2e <__kernel_rem_pio2f+0x332>
 800fb14:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800fb18:	465c      	mov	r4, fp
 800fb1a:	3501      	adds	r5, #1
 800fb1c:	e7e9      	b.n	800faf2 <__kernel_rem_pio2f+0x2f6>
 800fb1e:	bf00      	nop
 800fb20:	08013e84 	.word	0x08013e84
 800fb24:	08013e58 	.word	0x08013e58
 800fb28:	2301      	movs	r3, #1
 800fb2a:	9a08      	ldr	r2, [sp, #32]
 800fb2c:	e7d2      	b.n	800fad4 <__kernel_rem_pio2f+0x2d8>
 800fb2e:	9b05      	ldr	r3, [sp, #20]
 800fb30:	f854 0904 	ldr.w	r0, [r4], #-4
 800fb34:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800fb38:	f7f1 f960 	bl	8000dfc <__aeabi_fmul>
 800fb3c:	4601      	mov	r1, r0
 800fb3e:	4630      	mov	r0, r6
 800fb40:	f7f1 f854 	bl	8000bec <__addsf3>
 800fb44:	f10a 0a01 	add.w	sl, sl, #1
 800fb48:	4606      	mov	r6, r0
 800fb4a:	e7e0      	b.n	800fb0e <__kernel_rem_pio2f+0x312>
 800fb4c:	3d01      	subs	r5, #1
 800fb4e:	e76e      	b.n	800fa2e <__kernel_rem_pio2f+0x232>
 800fb50:	9b06      	ldr	r3, [sp, #24]
 800fb52:	9a02      	ldr	r2, [sp, #8]
 800fb54:	4648      	mov	r0, r9
 800fb56:	1a99      	subs	r1, r3, r2
 800fb58:	f000 face 	bl	80100f8 <scalbnf>
 800fb5c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800fb60:	4605      	mov	r5, r0
 800fb62:	f7f1 fafd 	bl	8001160 <__aeabi_fcmpge>
 800fb66:	b300      	cbz	r0, 800fbaa <__kernel_rem_pio2f+0x3ae>
 800fb68:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800fb6c:	4628      	mov	r0, r5
 800fb6e:	f7f1 f945 	bl	8000dfc <__aeabi_fmul>
 800fb72:	f7f1 fb1f 	bl	80011b4 <__aeabi_f2iz>
 800fb76:	f7f1 f8ed 	bl	8000d54 <__aeabi_i2f>
 800fb7a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800fb7e:	4681      	mov	r9, r0
 800fb80:	f7f1 f93c 	bl	8000dfc <__aeabi_fmul>
 800fb84:	4601      	mov	r1, r0
 800fb86:	4628      	mov	r0, r5
 800fb88:	f7f1 f82e 	bl	8000be8 <__aeabi_fsub>
 800fb8c:	f7f1 fb12 	bl	80011b4 <__aeabi_f2iz>
 800fb90:	ab0a      	add	r3, sp, #40	; 0x28
 800fb92:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800fb96:	4648      	mov	r0, r9
 800fb98:	f7f1 fb0c 	bl	80011b4 <__aeabi_f2iz>
 800fb9c:	f108 0501 	add.w	r5, r8, #1
 800fba0:	ab0a      	add	r3, sp, #40	; 0x28
 800fba2:	3708      	adds	r7, #8
 800fba4:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800fba8:	e748      	b.n	800fa3c <__kernel_rem_pio2f+0x240>
 800fbaa:	4628      	mov	r0, r5
 800fbac:	f7f1 fb02 	bl	80011b4 <__aeabi_f2iz>
 800fbb0:	ab0a      	add	r3, sp, #40	; 0x28
 800fbb2:	4645      	mov	r5, r8
 800fbb4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800fbb8:	e740      	b.n	800fa3c <__kernel_rem_pio2f+0x240>
 800fbba:	ab0a      	add	r3, sp, #40	; 0x28
 800fbbc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800fbc0:	f7f1 f8c8 	bl	8000d54 <__aeabi_i2f>
 800fbc4:	4649      	mov	r1, r9
 800fbc6:	f7f1 f919 	bl	8000dfc <__aeabi_fmul>
 800fbca:	4641      	mov	r1, r8
 800fbcc:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800fbd0:	4648      	mov	r0, r9
 800fbd2:	f7f1 f913 	bl	8000dfc <__aeabi_fmul>
 800fbd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbda:	4681      	mov	r9, r0
 800fbdc:	e738      	b.n	800fa50 <__kernel_rem_pio2f+0x254>
 800fbde:	f853 0b04 	ldr.w	r0, [r3], #4
 800fbe2:	f85b 1b04 	ldr.w	r1, [fp], #4
 800fbe6:	9203      	str	r2, [sp, #12]
 800fbe8:	9302      	str	r3, [sp, #8]
 800fbea:	f7f1 f907 	bl	8000dfc <__aeabi_fmul>
 800fbee:	4601      	mov	r1, r0
 800fbf0:	4638      	mov	r0, r7
 800fbf2:	f7f0 fffb 	bl	8000bec <__addsf3>
 800fbf6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fbfa:	4607      	mov	r7, r0
 800fbfc:	f108 0801 	add.w	r8, r8, #1
 800fc00:	9901      	ldr	r1, [sp, #4]
 800fc02:	4588      	cmp	r8, r1
 800fc04:	dc01      	bgt.n	800fc0a <__kernel_rem_pio2f+0x40e>
 800fc06:	45c2      	cmp	sl, r8
 800fc08:	dae9      	bge.n	800fbde <__kernel_rem_pio2f+0x3e2>
 800fc0a:	ab5a      	add	r3, sp, #360	; 0x168
 800fc0c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800fc10:	f843 7ca0 	str.w	r7, [r3, #-160]
 800fc14:	f109 39ff 	add.w	r9, r9, #4294967295
 800fc18:	f10a 0a01 	add.w	sl, sl, #1
 800fc1c:	e720      	b.n	800fa60 <__kernel_rem_pio2f+0x264>
 800fc1e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800fc20:	2b02      	cmp	r3, #2
 800fc22:	dc07      	bgt.n	800fc34 <__kernel_rem_pio2f+0x438>
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	dc4d      	bgt.n	800fcc4 <__kernel_rem_pio2f+0x4c8>
 800fc28:	d02e      	beq.n	800fc88 <__kernel_rem_pio2f+0x48c>
 800fc2a:	f006 0007 	and.w	r0, r6, #7
 800fc2e:	b05b      	add	sp, #364	; 0x16c
 800fc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc34:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800fc36:	2b03      	cmp	r3, #3
 800fc38:	d1f7      	bne.n	800fc2a <__kernel_rem_pio2f+0x42e>
 800fc3a:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800fc3e:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800fc42:	46b8      	mov	r8, r7
 800fc44:	46aa      	mov	sl, r5
 800fc46:	f1ba 0f00 	cmp.w	sl, #0
 800fc4a:	dc48      	bgt.n	800fcde <__kernel_rem_pio2f+0x4e2>
 800fc4c:	46a9      	mov	r9, r5
 800fc4e:	f1b9 0f01 	cmp.w	r9, #1
 800fc52:	dc5f      	bgt.n	800fd14 <__kernel_rem_pio2f+0x518>
 800fc54:	2000      	movs	r0, #0
 800fc56:	2d01      	cmp	r5, #1
 800fc58:	dc75      	bgt.n	800fd46 <__kernel_rem_pio2f+0x54a>
 800fc5a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800fc5c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800fc5e:	2c00      	cmp	r4, #0
 800fc60:	d177      	bne.n	800fd52 <__kernel_rem_pio2f+0x556>
 800fc62:	9900      	ldr	r1, [sp, #0]
 800fc64:	600a      	str	r2, [r1, #0]
 800fc66:	460a      	mov	r2, r1
 800fc68:	604b      	str	r3, [r1, #4]
 800fc6a:	6090      	str	r0, [r2, #8]
 800fc6c:	e7dd      	b.n	800fc2a <__kernel_rem_pio2f+0x42e>
 800fc6e:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800fc72:	f7f0 ffbb 	bl	8000bec <__addsf3>
 800fc76:	3d01      	subs	r5, #1
 800fc78:	2d00      	cmp	r5, #0
 800fc7a:	daf8      	bge.n	800fc6e <__kernel_rem_pio2f+0x472>
 800fc7c:	b10c      	cbz	r4, 800fc82 <__kernel_rem_pio2f+0x486>
 800fc7e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800fc82:	9b00      	ldr	r3, [sp, #0]
 800fc84:	6018      	str	r0, [r3, #0]
 800fc86:	e7d0      	b.n	800fc2a <__kernel_rem_pio2f+0x42e>
 800fc88:	2000      	movs	r0, #0
 800fc8a:	af32      	add	r7, sp, #200	; 0xc8
 800fc8c:	e7f4      	b.n	800fc78 <__kernel_rem_pio2f+0x47c>
 800fc8e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800fc92:	f7f0 ffab 	bl	8000bec <__addsf3>
 800fc96:	3f01      	subs	r7, #1
 800fc98:	2f00      	cmp	r7, #0
 800fc9a:	daf8      	bge.n	800fc8e <__kernel_rem_pio2f+0x492>
 800fc9c:	b1bc      	cbz	r4, 800fcce <__kernel_rem_pio2f+0x4d2>
 800fc9e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800fca2:	9a00      	ldr	r2, [sp, #0]
 800fca4:	4601      	mov	r1, r0
 800fca6:	6013      	str	r3, [r2, #0]
 800fca8:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800fcaa:	f7f0 ff9d 	bl	8000be8 <__aeabi_fsub>
 800fcae:	2701      	movs	r7, #1
 800fcb0:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800fcb4:	42bd      	cmp	r5, r7
 800fcb6:	da0c      	bge.n	800fcd2 <__kernel_rem_pio2f+0x4d6>
 800fcb8:	b10c      	cbz	r4, 800fcbe <__kernel_rem_pio2f+0x4c2>
 800fcba:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800fcbe:	9b00      	ldr	r3, [sp, #0]
 800fcc0:	6058      	str	r0, [r3, #4]
 800fcc2:	e7b2      	b.n	800fc2a <__kernel_rem_pio2f+0x42e>
 800fcc4:	462f      	mov	r7, r5
 800fcc6:	2000      	movs	r0, #0
 800fcc8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800fccc:	e7e4      	b.n	800fc98 <__kernel_rem_pio2f+0x49c>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	e7e7      	b.n	800fca2 <__kernel_rem_pio2f+0x4a6>
 800fcd2:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800fcd6:	f7f0 ff89 	bl	8000bec <__addsf3>
 800fcda:	3701      	adds	r7, #1
 800fcdc:	e7ea      	b.n	800fcb4 <__kernel_rem_pio2f+0x4b8>
 800fcde:	f8d8 3000 	ldr.w	r3, [r8]
 800fce2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800fce6:	4619      	mov	r1, r3
 800fce8:	4610      	mov	r0, r2
 800fcea:	9302      	str	r3, [sp, #8]
 800fcec:	9201      	str	r2, [sp, #4]
 800fcee:	f7f0 ff7d 	bl	8000bec <__addsf3>
 800fcf2:	9a01      	ldr	r2, [sp, #4]
 800fcf4:	4601      	mov	r1, r0
 800fcf6:	4681      	mov	r9, r0
 800fcf8:	4610      	mov	r0, r2
 800fcfa:	f7f0 ff75 	bl	8000be8 <__aeabi_fsub>
 800fcfe:	9b02      	ldr	r3, [sp, #8]
 800fd00:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd04:	4619      	mov	r1, r3
 800fd06:	f7f0 ff71 	bl	8000bec <__addsf3>
 800fd0a:	f848 0904 	str.w	r0, [r8], #-4
 800fd0e:	f8c8 9000 	str.w	r9, [r8]
 800fd12:	e798      	b.n	800fc46 <__kernel_rem_pio2f+0x44a>
 800fd14:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800fd18:	f8d7 a000 	ldr.w	sl, [r7]
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	4651      	mov	r1, sl
 800fd20:	9301      	str	r3, [sp, #4]
 800fd22:	f7f0 ff63 	bl	8000bec <__addsf3>
 800fd26:	9b01      	ldr	r3, [sp, #4]
 800fd28:	4601      	mov	r1, r0
 800fd2a:	4680      	mov	r8, r0
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7f0 ff5b 	bl	8000be8 <__aeabi_fsub>
 800fd32:	4651      	mov	r1, sl
 800fd34:	f7f0 ff5a 	bl	8000bec <__addsf3>
 800fd38:	f847 0904 	str.w	r0, [r7], #-4
 800fd3c:	f109 39ff 	add.w	r9, r9, #4294967295
 800fd40:	f8c7 8000 	str.w	r8, [r7]
 800fd44:	e783      	b.n	800fc4e <__kernel_rem_pio2f+0x452>
 800fd46:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800fd4a:	f7f0 ff4f 	bl	8000bec <__addsf3>
 800fd4e:	3d01      	subs	r5, #1
 800fd50:	e781      	b.n	800fc56 <__kernel_rem_pio2f+0x45a>
 800fd52:	9900      	ldr	r1, [sp, #0]
 800fd54:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800fd58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fd5c:	600a      	str	r2, [r1, #0]
 800fd5e:	604b      	str	r3, [r1, #4]
 800fd60:	460a      	mov	r2, r1
 800fd62:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800fd66:	e780      	b.n	800fc6a <__kernel_rem_pio2f+0x46e>

0800fd68 <__kernel_sinf>:
 800fd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd6c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800fd70:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800fd74:	4604      	mov	r4, r0
 800fd76:	460f      	mov	r7, r1
 800fd78:	4691      	mov	r9, r2
 800fd7a:	da03      	bge.n	800fd84 <__kernel_sinf+0x1c>
 800fd7c:	f7f1 fa1a 	bl	80011b4 <__aeabi_f2iz>
 800fd80:	2800      	cmp	r0, #0
 800fd82:	d035      	beq.n	800fdf0 <__kernel_sinf+0x88>
 800fd84:	4621      	mov	r1, r4
 800fd86:	4620      	mov	r0, r4
 800fd88:	f7f1 f838 	bl	8000dfc <__aeabi_fmul>
 800fd8c:	4605      	mov	r5, r0
 800fd8e:	4601      	mov	r1, r0
 800fd90:	4620      	mov	r0, r4
 800fd92:	f7f1 f833 	bl	8000dfc <__aeabi_fmul>
 800fd96:	4929      	ldr	r1, [pc, #164]	; (800fe3c <__kernel_sinf+0xd4>)
 800fd98:	4606      	mov	r6, r0
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	f7f1 f82e 	bl	8000dfc <__aeabi_fmul>
 800fda0:	4927      	ldr	r1, [pc, #156]	; (800fe40 <__kernel_sinf+0xd8>)
 800fda2:	f7f0 ff21 	bl	8000be8 <__aeabi_fsub>
 800fda6:	4629      	mov	r1, r5
 800fda8:	f7f1 f828 	bl	8000dfc <__aeabi_fmul>
 800fdac:	4925      	ldr	r1, [pc, #148]	; (800fe44 <__kernel_sinf+0xdc>)
 800fdae:	f7f0 ff1d 	bl	8000bec <__addsf3>
 800fdb2:	4629      	mov	r1, r5
 800fdb4:	f7f1 f822 	bl	8000dfc <__aeabi_fmul>
 800fdb8:	4923      	ldr	r1, [pc, #140]	; (800fe48 <__kernel_sinf+0xe0>)
 800fdba:	f7f0 ff15 	bl	8000be8 <__aeabi_fsub>
 800fdbe:	4629      	mov	r1, r5
 800fdc0:	f7f1 f81c 	bl	8000dfc <__aeabi_fmul>
 800fdc4:	4921      	ldr	r1, [pc, #132]	; (800fe4c <__kernel_sinf+0xe4>)
 800fdc6:	f7f0 ff11 	bl	8000bec <__addsf3>
 800fdca:	4680      	mov	r8, r0
 800fdcc:	f1b9 0f00 	cmp.w	r9, #0
 800fdd0:	d111      	bne.n	800fdf6 <__kernel_sinf+0x8e>
 800fdd2:	4601      	mov	r1, r0
 800fdd4:	4628      	mov	r0, r5
 800fdd6:	f7f1 f811 	bl	8000dfc <__aeabi_fmul>
 800fdda:	491d      	ldr	r1, [pc, #116]	; (800fe50 <__kernel_sinf+0xe8>)
 800fddc:	f7f0 ff04 	bl	8000be8 <__aeabi_fsub>
 800fde0:	4631      	mov	r1, r6
 800fde2:	f7f1 f80b 	bl	8000dfc <__aeabi_fmul>
 800fde6:	4601      	mov	r1, r0
 800fde8:	4620      	mov	r0, r4
 800fdea:	f7f0 feff 	bl	8000bec <__addsf3>
 800fdee:	4604      	mov	r4, r0
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdf6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800fdfa:	4638      	mov	r0, r7
 800fdfc:	f7f0 fffe 	bl	8000dfc <__aeabi_fmul>
 800fe00:	4641      	mov	r1, r8
 800fe02:	4681      	mov	r9, r0
 800fe04:	4630      	mov	r0, r6
 800fe06:	f7f0 fff9 	bl	8000dfc <__aeabi_fmul>
 800fe0a:	4601      	mov	r1, r0
 800fe0c:	4648      	mov	r0, r9
 800fe0e:	f7f0 feeb 	bl	8000be8 <__aeabi_fsub>
 800fe12:	4629      	mov	r1, r5
 800fe14:	f7f0 fff2 	bl	8000dfc <__aeabi_fmul>
 800fe18:	4639      	mov	r1, r7
 800fe1a:	f7f0 fee5 	bl	8000be8 <__aeabi_fsub>
 800fe1e:	490c      	ldr	r1, [pc, #48]	; (800fe50 <__kernel_sinf+0xe8>)
 800fe20:	4605      	mov	r5, r0
 800fe22:	4630      	mov	r0, r6
 800fe24:	f7f0 ffea 	bl	8000dfc <__aeabi_fmul>
 800fe28:	4601      	mov	r1, r0
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	f7f0 fede 	bl	8000bec <__addsf3>
 800fe30:	4601      	mov	r1, r0
 800fe32:	4620      	mov	r0, r4
 800fe34:	f7f0 fed8 	bl	8000be8 <__aeabi_fsub>
 800fe38:	e7d9      	b.n	800fdee <__kernel_sinf+0x86>
 800fe3a:	bf00      	nop
 800fe3c:	2f2ec9d3 	.word	0x2f2ec9d3
 800fe40:	32d72f34 	.word	0x32d72f34
 800fe44:	3638ef1b 	.word	0x3638ef1b
 800fe48:	39500d01 	.word	0x39500d01
 800fe4c:	3c088889 	.word	0x3c088889
 800fe50:	3e2aaaab 	.word	0x3e2aaaab

0800fe54 <fabs>:
 800fe54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fe58:	4770      	bx	lr
 800fe5a:	0000      	movs	r0, r0
 800fe5c:	0000      	movs	r0, r0
	...

0800fe60 <floor>:
 800fe60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe64:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800fe68:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800fe6c:	2e13      	cmp	r6, #19
 800fe6e:	4602      	mov	r2, r0
 800fe70:	460b      	mov	r3, r1
 800fe72:	4607      	mov	r7, r0
 800fe74:	460c      	mov	r4, r1
 800fe76:	4605      	mov	r5, r0
 800fe78:	dc34      	bgt.n	800fee4 <floor+0x84>
 800fe7a:	2e00      	cmp	r6, #0
 800fe7c:	da15      	bge.n	800feaa <floor+0x4a>
 800fe7e:	a334      	add	r3, pc, #208	; (adr r3, 800ff50 <floor+0xf0>)
 800fe80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe84:	f7f0 f9ae 	bl	80001e4 <__adddf3>
 800fe88:	2200      	movs	r2, #0
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	f7f0 fdf0 	bl	8000a70 <__aeabi_dcmpgt>
 800fe90:	b140      	cbz	r0, 800fea4 <floor+0x44>
 800fe92:	2c00      	cmp	r4, #0
 800fe94:	da59      	bge.n	800ff4a <floor+0xea>
 800fe96:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fe9a:	ea57 0503 	orrs.w	r5, r7, r3
 800fe9e:	d001      	beq.n	800fea4 <floor+0x44>
 800fea0:	2500      	movs	r5, #0
 800fea2:	4c2d      	ldr	r4, [pc, #180]	; (800ff58 <floor+0xf8>)
 800fea4:	4623      	mov	r3, r4
 800fea6:	462f      	mov	r7, r5
 800fea8:	e025      	b.n	800fef6 <floor+0x96>
 800feaa:	4a2c      	ldr	r2, [pc, #176]	; (800ff5c <floor+0xfc>)
 800feac:	fa42 f806 	asr.w	r8, r2, r6
 800feb0:	ea01 0208 	and.w	r2, r1, r8
 800feb4:	4302      	orrs	r2, r0
 800feb6:	d01e      	beq.n	800fef6 <floor+0x96>
 800feb8:	a325      	add	r3, pc, #148	; (adr r3, 800ff50 <floor+0xf0>)
 800feba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800febe:	f7f0 f991 	bl	80001e4 <__adddf3>
 800fec2:	2200      	movs	r2, #0
 800fec4:	2300      	movs	r3, #0
 800fec6:	f7f0 fdd3 	bl	8000a70 <__aeabi_dcmpgt>
 800feca:	2800      	cmp	r0, #0
 800fecc:	d0ea      	beq.n	800fea4 <floor+0x44>
 800fece:	2c00      	cmp	r4, #0
 800fed0:	bfbe      	ittt	lt
 800fed2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fed6:	fa43 f606 	asrlt.w	r6, r3, r6
 800feda:	19a4      	addlt	r4, r4, r6
 800fedc:	2500      	movs	r5, #0
 800fede:	ea24 0408 	bic.w	r4, r4, r8
 800fee2:	e7df      	b.n	800fea4 <floor+0x44>
 800fee4:	2e33      	cmp	r6, #51	; 0x33
 800fee6:	dd0a      	ble.n	800fefe <floor+0x9e>
 800fee8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800feec:	d103      	bne.n	800fef6 <floor+0x96>
 800feee:	f7f0 f979 	bl	80001e4 <__adddf3>
 800fef2:	4607      	mov	r7, r0
 800fef4:	460b      	mov	r3, r1
 800fef6:	4638      	mov	r0, r7
 800fef8:	4619      	mov	r1, r3
 800fefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fefe:	f04f 32ff 	mov.w	r2, #4294967295
 800ff02:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800ff06:	fa22 f808 	lsr.w	r8, r2, r8
 800ff0a:	ea18 0f00 	tst.w	r8, r0
 800ff0e:	d0f2      	beq.n	800fef6 <floor+0x96>
 800ff10:	a30f      	add	r3, pc, #60	; (adr r3, 800ff50 <floor+0xf0>)
 800ff12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff16:	f7f0 f965 	bl	80001e4 <__adddf3>
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	f7f0 fda7 	bl	8000a70 <__aeabi_dcmpgt>
 800ff22:	2800      	cmp	r0, #0
 800ff24:	d0be      	beq.n	800fea4 <floor+0x44>
 800ff26:	2c00      	cmp	r4, #0
 800ff28:	da02      	bge.n	800ff30 <floor+0xd0>
 800ff2a:	2e14      	cmp	r6, #20
 800ff2c:	d103      	bne.n	800ff36 <floor+0xd6>
 800ff2e:	3401      	adds	r4, #1
 800ff30:	ea25 0508 	bic.w	r5, r5, r8
 800ff34:	e7b6      	b.n	800fea4 <floor+0x44>
 800ff36:	2301      	movs	r3, #1
 800ff38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ff3c:	fa03 f606 	lsl.w	r6, r3, r6
 800ff40:	4435      	add	r5, r6
 800ff42:	42bd      	cmp	r5, r7
 800ff44:	bf38      	it	cc
 800ff46:	18e4      	addcc	r4, r4, r3
 800ff48:	e7f2      	b.n	800ff30 <floor+0xd0>
 800ff4a:	2500      	movs	r5, #0
 800ff4c:	462c      	mov	r4, r5
 800ff4e:	e7a9      	b.n	800fea4 <floor+0x44>
 800ff50:	8800759c 	.word	0x8800759c
 800ff54:	7e37e43c 	.word	0x7e37e43c
 800ff58:	bff00000 	.word	0xbff00000
 800ff5c:	000fffff 	.word	0x000fffff

0800ff60 <scalbn>:
 800ff60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff62:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ff66:	4604      	mov	r4, r0
 800ff68:	460d      	mov	r5, r1
 800ff6a:	4617      	mov	r7, r2
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	b996      	cbnz	r6, 800ff96 <scalbn+0x36>
 800ff70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ff74:	4303      	orrs	r3, r0
 800ff76:	d039      	beq.n	800ffec <scalbn+0x8c>
 800ff78:	4b35      	ldr	r3, [pc, #212]	; (8010050 <scalbn+0xf0>)
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	f7f0 fae8 	bl	8000550 <__aeabi_dmul>
 800ff80:	4b34      	ldr	r3, [pc, #208]	; (8010054 <scalbn+0xf4>)
 800ff82:	4604      	mov	r4, r0
 800ff84:	429f      	cmp	r7, r3
 800ff86:	460d      	mov	r5, r1
 800ff88:	da0f      	bge.n	800ffaa <scalbn+0x4a>
 800ff8a:	a32d      	add	r3, pc, #180	; (adr r3, 8010040 <scalbn+0xe0>)
 800ff8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff90:	f7f0 fade 	bl	8000550 <__aeabi_dmul>
 800ff94:	e006      	b.n	800ffa4 <scalbn+0x44>
 800ff96:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ff9a:	4296      	cmp	r6, r2
 800ff9c:	d10a      	bne.n	800ffb4 <scalbn+0x54>
 800ff9e:	4602      	mov	r2, r0
 800ffa0:	f7f0 f920 	bl	80001e4 <__adddf3>
 800ffa4:	4604      	mov	r4, r0
 800ffa6:	460d      	mov	r5, r1
 800ffa8:	e020      	b.n	800ffec <scalbn+0x8c>
 800ffaa:	460b      	mov	r3, r1
 800ffac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ffb0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ffb4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ffb8:	19b9      	adds	r1, r7, r6
 800ffba:	4291      	cmp	r1, r2
 800ffbc:	dd0e      	ble.n	800ffdc <scalbn+0x7c>
 800ffbe:	a322      	add	r3, pc, #136	; (adr r3, 8010048 <scalbn+0xe8>)
 800ffc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ffc8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ffcc:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ffd0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ffd4:	4820      	ldr	r0, [pc, #128]	; (8010058 <scalbn+0xf8>)
 800ffd6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ffda:	e7d9      	b.n	800ff90 <scalbn+0x30>
 800ffdc:	2900      	cmp	r1, #0
 800ffde:	dd08      	ble.n	800fff2 <scalbn+0x92>
 800ffe0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ffe4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ffe8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ffec:	4620      	mov	r0, r4
 800ffee:	4629      	mov	r1, r5
 800fff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fff2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800fff6:	da16      	bge.n	8010026 <scalbn+0xc6>
 800fff8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fffc:	429f      	cmp	r7, r3
 800fffe:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8010002:	dd08      	ble.n	8010016 <scalbn+0xb6>
 8010004:	4c15      	ldr	r4, [pc, #84]	; (801005c <scalbn+0xfc>)
 8010006:	4814      	ldr	r0, [pc, #80]	; (8010058 <scalbn+0xf8>)
 8010008:	f363 74df 	bfi	r4, r3, #31, #1
 801000c:	a30e      	add	r3, pc, #56	; (adr r3, 8010048 <scalbn+0xe8>)
 801000e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010012:	4621      	mov	r1, r4
 8010014:	e7bc      	b.n	800ff90 <scalbn+0x30>
 8010016:	4c12      	ldr	r4, [pc, #72]	; (8010060 <scalbn+0x100>)
 8010018:	4812      	ldr	r0, [pc, #72]	; (8010064 <scalbn+0x104>)
 801001a:	f363 74df 	bfi	r4, r3, #31, #1
 801001e:	a308      	add	r3, pc, #32	; (adr r3, 8010040 <scalbn+0xe0>)
 8010020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010024:	e7f5      	b.n	8010012 <scalbn+0xb2>
 8010026:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801002a:	3136      	adds	r1, #54	; 0x36
 801002c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010030:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8010034:	4620      	mov	r0, r4
 8010036:	4629      	mov	r1, r5
 8010038:	2200      	movs	r2, #0
 801003a:	4b0b      	ldr	r3, [pc, #44]	; (8010068 <scalbn+0x108>)
 801003c:	e7a8      	b.n	800ff90 <scalbn+0x30>
 801003e:	bf00      	nop
 8010040:	c2f8f359 	.word	0xc2f8f359
 8010044:	01a56e1f 	.word	0x01a56e1f
 8010048:	8800759c 	.word	0x8800759c
 801004c:	7e37e43c 	.word	0x7e37e43c
 8010050:	43500000 	.word	0x43500000
 8010054:	ffff3cb0 	.word	0xffff3cb0
 8010058:	8800759c 	.word	0x8800759c
 801005c:	7e37e43c 	.word	0x7e37e43c
 8010060:	01a56e1f 	.word	0x01a56e1f
 8010064:	c2f8f359 	.word	0xc2f8f359
 8010068:	3c900000 	.word	0x3c900000

0801006c <floorf>:
 801006c:	b570      	push	{r4, r5, r6, lr}
 801006e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8010072:	3d7f      	subs	r5, #127	; 0x7f
 8010074:	2d16      	cmp	r5, #22
 8010076:	4601      	mov	r1, r0
 8010078:	4604      	mov	r4, r0
 801007a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 801007e:	dc26      	bgt.n	80100ce <floorf+0x62>
 8010080:	2d00      	cmp	r5, #0
 8010082:	da0e      	bge.n	80100a2 <floorf+0x36>
 8010084:	4917      	ldr	r1, [pc, #92]	; (80100e4 <floorf+0x78>)
 8010086:	f7f0 fdb1 	bl	8000bec <__addsf3>
 801008a:	2100      	movs	r1, #0
 801008c:	f7f1 f872 	bl	8001174 <__aeabi_fcmpgt>
 8010090:	b128      	cbz	r0, 801009e <floorf+0x32>
 8010092:	2c00      	cmp	r4, #0
 8010094:	da23      	bge.n	80100de <floorf+0x72>
 8010096:	4b14      	ldr	r3, [pc, #80]	; (80100e8 <floorf+0x7c>)
 8010098:	2e00      	cmp	r6, #0
 801009a:	bf18      	it	ne
 801009c:	461c      	movne	r4, r3
 801009e:	4621      	mov	r1, r4
 80100a0:	e01b      	b.n	80100da <floorf+0x6e>
 80100a2:	4e12      	ldr	r6, [pc, #72]	; (80100ec <floorf+0x80>)
 80100a4:	412e      	asrs	r6, r5
 80100a6:	4230      	tst	r0, r6
 80100a8:	d017      	beq.n	80100da <floorf+0x6e>
 80100aa:	490e      	ldr	r1, [pc, #56]	; (80100e4 <floorf+0x78>)
 80100ac:	f7f0 fd9e 	bl	8000bec <__addsf3>
 80100b0:	2100      	movs	r1, #0
 80100b2:	f7f1 f85f 	bl	8001174 <__aeabi_fcmpgt>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	d0f1      	beq.n	801009e <floorf+0x32>
 80100ba:	2c00      	cmp	r4, #0
 80100bc:	bfbe      	ittt	lt
 80100be:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80100c2:	fa43 f505 	asrlt.w	r5, r3, r5
 80100c6:	1964      	addlt	r4, r4, r5
 80100c8:	ea24 0406 	bic.w	r4, r4, r6
 80100cc:	e7e7      	b.n	801009e <floorf+0x32>
 80100ce:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80100d2:	d302      	bcc.n	80100da <floorf+0x6e>
 80100d4:	f7f0 fd8a 	bl	8000bec <__addsf3>
 80100d8:	4601      	mov	r1, r0
 80100da:	4608      	mov	r0, r1
 80100dc:	bd70      	pop	{r4, r5, r6, pc}
 80100de:	2400      	movs	r4, #0
 80100e0:	e7dd      	b.n	801009e <floorf+0x32>
 80100e2:	bf00      	nop
 80100e4:	7149f2ca 	.word	0x7149f2ca
 80100e8:	bf800000 	.word	0xbf800000
 80100ec:	007fffff 	.word	0x007fffff

080100f0 <nanf>:
 80100f0:	4800      	ldr	r0, [pc, #0]	; (80100f4 <nanf+0x4>)
 80100f2:	4770      	bx	lr
 80100f4:	7fc00000 	.word	0x7fc00000

080100f8 <scalbnf>:
 80100f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80100fc:	b538      	push	{r3, r4, r5, lr}
 80100fe:	4603      	mov	r3, r0
 8010100:	460d      	mov	r5, r1
 8010102:	4604      	mov	r4, r0
 8010104:	d02a      	beq.n	801015c <scalbnf+0x64>
 8010106:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801010a:	d304      	bcc.n	8010116 <scalbnf+0x1e>
 801010c:	4601      	mov	r1, r0
 801010e:	f7f0 fd6d 	bl	8000bec <__addsf3>
 8010112:	4603      	mov	r3, r0
 8010114:	e022      	b.n	801015c <scalbnf+0x64>
 8010116:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 801011a:	d117      	bne.n	801014c <scalbnf+0x54>
 801011c:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8010120:	f7f0 fe6c 	bl	8000dfc <__aeabi_fmul>
 8010124:	4a17      	ldr	r2, [pc, #92]	; (8010184 <scalbnf+0x8c>)
 8010126:	4603      	mov	r3, r0
 8010128:	4295      	cmp	r5, r2
 801012a:	db0b      	blt.n	8010144 <scalbnf+0x4c>
 801012c:	4604      	mov	r4, r0
 801012e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8010132:	3a19      	subs	r2, #25
 8010134:	442a      	add	r2, r5
 8010136:	2afe      	cmp	r2, #254	; 0xfe
 8010138:	dd0a      	ble.n	8010150 <scalbnf+0x58>
 801013a:	4913      	ldr	r1, [pc, #76]	; (8010188 <scalbnf+0x90>)
 801013c:	4618      	mov	r0, r3
 801013e:	f361 001e 	bfi	r0, r1, #0, #31
 8010142:	e000      	b.n	8010146 <scalbnf+0x4e>
 8010144:	4911      	ldr	r1, [pc, #68]	; (801018c <scalbnf+0x94>)
 8010146:	f7f0 fe59 	bl	8000dfc <__aeabi_fmul>
 801014a:	e7e2      	b.n	8010112 <scalbnf+0x1a>
 801014c:	0dd2      	lsrs	r2, r2, #23
 801014e:	e7f1      	b.n	8010134 <scalbnf+0x3c>
 8010150:	2a00      	cmp	r2, #0
 8010152:	dd05      	ble.n	8010160 <scalbnf+0x68>
 8010154:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8010158:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 801015c:	4618      	mov	r0, r3
 801015e:	bd38      	pop	{r3, r4, r5, pc}
 8010160:	f112 0f16 	cmn.w	r2, #22
 8010164:	da05      	bge.n	8010172 <scalbnf+0x7a>
 8010166:	f24c 3250 	movw	r2, #50000	; 0xc350
 801016a:	4295      	cmp	r5, r2
 801016c:	dce5      	bgt.n	801013a <scalbnf+0x42>
 801016e:	4907      	ldr	r1, [pc, #28]	; (801018c <scalbnf+0x94>)
 8010170:	e7e4      	b.n	801013c <scalbnf+0x44>
 8010172:	3219      	adds	r2, #25
 8010174:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8010178:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 801017c:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8010180:	e7e1      	b.n	8010146 <scalbnf+0x4e>
 8010182:	bf00      	nop
 8010184:	ffff3cb0 	.word	0xffff3cb0
 8010188:	7149f2ca 	.word	0x7149f2ca
 801018c:	0da24260 	.word	0x0da24260

08010190 <__errno>:
 8010190:	4b01      	ldr	r3, [pc, #4]	; (8010198 <__errno+0x8>)
 8010192:	6818      	ldr	r0, [r3, #0]
 8010194:	4770      	bx	lr
 8010196:	bf00      	nop
 8010198:	200001c4 	.word	0x200001c4

0801019c <__libc_init_array>:
 801019c:	b570      	push	{r4, r5, r6, lr}
 801019e:	2600      	movs	r6, #0
 80101a0:	4d0c      	ldr	r5, [pc, #48]	; (80101d4 <__libc_init_array+0x38>)
 80101a2:	4c0d      	ldr	r4, [pc, #52]	; (80101d8 <__libc_init_array+0x3c>)
 80101a4:	1b64      	subs	r4, r4, r5
 80101a6:	10a4      	asrs	r4, r4, #2
 80101a8:	42a6      	cmp	r6, r4
 80101aa:	d109      	bne.n	80101c0 <__libc_init_array+0x24>
 80101ac:	f002 feda 	bl	8012f64 <_init>
 80101b0:	2600      	movs	r6, #0
 80101b2:	4d0a      	ldr	r5, [pc, #40]	; (80101dc <__libc_init_array+0x40>)
 80101b4:	4c0a      	ldr	r4, [pc, #40]	; (80101e0 <__libc_init_array+0x44>)
 80101b6:	1b64      	subs	r4, r4, r5
 80101b8:	10a4      	asrs	r4, r4, #2
 80101ba:	42a6      	cmp	r6, r4
 80101bc:	d105      	bne.n	80101ca <__libc_init_array+0x2e>
 80101be:	bd70      	pop	{r4, r5, r6, pc}
 80101c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80101c4:	4798      	blx	r3
 80101c6:	3601      	adds	r6, #1
 80101c8:	e7ee      	b.n	80101a8 <__libc_init_array+0xc>
 80101ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80101ce:	4798      	blx	r3
 80101d0:	3601      	adds	r6, #1
 80101d2:	e7f2      	b.n	80101ba <__libc_init_array+0x1e>
 80101d4:	0801427c 	.word	0x0801427c
 80101d8:	0801427c 	.word	0x0801427c
 80101dc:	0801427c 	.word	0x0801427c
 80101e0:	08014288 	.word	0x08014288

080101e4 <malloc>:
 80101e4:	4b02      	ldr	r3, [pc, #8]	; (80101f0 <malloc+0xc>)
 80101e6:	4601      	mov	r1, r0
 80101e8:	6818      	ldr	r0, [r3, #0]
 80101ea:	f000 b87b 	b.w	80102e4 <_malloc_r>
 80101ee:	bf00      	nop
 80101f0:	200001c4 	.word	0x200001c4

080101f4 <free>:
 80101f4:	4b02      	ldr	r3, [pc, #8]	; (8010200 <free+0xc>)
 80101f6:	4601      	mov	r1, r0
 80101f8:	6818      	ldr	r0, [r3, #0]
 80101fa:	f000 b827 	b.w	801024c <_free_r>
 80101fe:	bf00      	nop
 8010200:	200001c4 	.word	0x200001c4

08010204 <memcmp>:
 8010204:	b530      	push	{r4, r5, lr}
 8010206:	2400      	movs	r4, #0
 8010208:	3901      	subs	r1, #1
 801020a:	42a2      	cmp	r2, r4
 801020c:	d101      	bne.n	8010212 <memcmp+0xe>
 801020e:	2000      	movs	r0, #0
 8010210:	e005      	b.n	801021e <memcmp+0x1a>
 8010212:	5d03      	ldrb	r3, [r0, r4]
 8010214:	3401      	adds	r4, #1
 8010216:	5d0d      	ldrb	r5, [r1, r4]
 8010218:	42ab      	cmp	r3, r5
 801021a:	d0f6      	beq.n	801020a <memcmp+0x6>
 801021c:	1b58      	subs	r0, r3, r5
 801021e:	bd30      	pop	{r4, r5, pc}

08010220 <memcpy>:
 8010220:	440a      	add	r2, r1
 8010222:	4291      	cmp	r1, r2
 8010224:	f100 33ff 	add.w	r3, r0, #4294967295
 8010228:	d100      	bne.n	801022c <memcpy+0xc>
 801022a:	4770      	bx	lr
 801022c:	b510      	push	{r4, lr}
 801022e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010232:	4291      	cmp	r1, r2
 8010234:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010238:	d1f9      	bne.n	801022e <memcpy+0xe>
 801023a:	bd10      	pop	{r4, pc}

0801023c <memset>:
 801023c:	4603      	mov	r3, r0
 801023e:	4402      	add	r2, r0
 8010240:	4293      	cmp	r3, r2
 8010242:	d100      	bne.n	8010246 <memset+0xa>
 8010244:	4770      	bx	lr
 8010246:	f803 1b01 	strb.w	r1, [r3], #1
 801024a:	e7f9      	b.n	8010240 <memset+0x4>

0801024c <_free_r>:
 801024c:	b538      	push	{r3, r4, r5, lr}
 801024e:	4605      	mov	r5, r0
 8010250:	2900      	cmp	r1, #0
 8010252:	d043      	beq.n	80102dc <_free_r+0x90>
 8010254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010258:	1f0c      	subs	r4, r1, #4
 801025a:	2b00      	cmp	r3, #0
 801025c:	bfb8      	it	lt
 801025e:	18e4      	addlt	r4, r4, r3
 8010260:	f001 fbc2 	bl	80119e8 <__malloc_lock>
 8010264:	4a1e      	ldr	r2, [pc, #120]	; (80102e0 <_free_r+0x94>)
 8010266:	6813      	ldr	r3, [r2, #0]
 8010268:	4610      	mov	r0, r2
 801026a:	b933      	cbnz	r3, 801027a <_free_r+0x2e>
 801026c:	6063      	str	r3, [r4, #4]
 801026e:	6014      	str	r4, [r2, #0]
 8010270:	4628      	mov	r0, r5
 8010272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010276:	f001 bbbd 	b.w	80119f4 <__malloc_unlock>
 801027a:	42a3      	cmp	r3, r4
 801027c:	d90a      	bls.n	8010294 <_free_r+0x48>
 801027e:	6821      	ldr	r1, [r4, #0]
 8010280:	1862      	adds	r2, r4, r1
 8010282:	4293      	cmp	r3, r2
 8010284:	bf01      	itttt	eq
 8010286:	681a      	ldreq	r2, [r3, #0]
 8010288:	685b      	ldreq	r3, [r3, #4]
 801028a:	1852      	addeq	r2, r2, r1
 801028c:	6022      	streq	r2, [r4, #0]
 801028e:	6063      	str	r3, [r4, #4]
 8010290:	6004      	str	r4, [r0, #0]
 8010292:	e7ed      	b.n	8010270 <_free_r+0x24>
 8010294:	461a      	mov	r2, r3
 8010296:	685b      	ldr	r3, [r3, #4]
 8010298:	b10b      	cbz	r3, 801029e <_free_r+0x52>
 801029a:	42a3      	cmp	r3, r4
 801029c:	d9fa      	bls.n	8010294 <_free_r+0x48>
 801029e:	6811      	ldr	r1, [r2, #0]
 80102a0:	1850      	adds	r0, r2, r1
 80102a2:	42a0      	cmp	r0, r4
 80102a4:	d10b      	bne.n	80102be <_free_r+0x72>
 80102a6:	6820      	ldr	r0, [r4, #0]
 80102a8:	4401      	add	r1, r0
 80102aa:	1850      	adds	r0, r2, r1
 80102ac:	4283      	cmp	r3, r0
 80102ae:	6011      	str	r1, [r2, #0]
 80102b0:	d1de      	bne.n	8010270 <_free_r+0x24>
 80102b2:	6818      	ldr	r0, [r3, #0]
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	4401      	add	r1, r0
 80102b8:	6011      	str	r1, [r2, #0]
 80102ba:	6053      	str	r3, [r2, #4]
 80102bc:	e7d8      	b.n	8010270 <_free_r+0x24>
 80102be:	d902      	bls.n	80102c6 <_free_r+0x7a>
 80102c0:	230c      	movs	r3, #12
 80102c2:	602b      	str	r3, [r5, #0]
 80102c4:	e7d4      	b.n	8010270 <_free_r+0x24>
 80102c6:	6820      	ldr	r0, [r4, #0]
 80102c8:	1821      	adds	r1, r4, r0
 80102ca:	428b      	cmp	r3, r1
 80102cc:	bf01      	itttt	eq
 80102ce:	6819      	ldreq	r1, [r3, #0]
 80102d0:	685b      	ldreq	r3, [r3, #4]
 80102d2:	1809      	addeq	r1, r1, r0
 80102d4:	6021      	streq	r1, [r4, #0]
 80102d6:	6063      	str	r3, [r4, #4]
 80102d8:	6054      	str	r4, [r2, #4]
 80102da:	e7c9      	b.n	8010270 <_free_r+0x24>
 80102dc:	bd38      	pop	{r3, r4, r5, pc}
 80102de:	bf00      	nop
 80102e0:	20000808 	.word	0x20000808

080102e4 <_malloc_r>:
 80102e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102e6:	1ccd      	adds	r5, r1, #3
 80102e8:	f025 0503 	bic.w	r5, r5, #3
 80102ec:	3508      	adds	r5, #8
 80102ee:	2d0c      	cmp	r5, #12
 80102f0:	bf38      	it	cc
 80102f2:	250c      	movcc	r5, #12
 80102f4:	2d00      	cmp	r5, #0
 80102f6:	4606      	mov	r6, r0
 80102f8:	db01      	blt.n	80102fe <_malloc_r+0x1a>
 80102fa:	42a9      	cmp	r1, r5
 80102fc:	d903      	bls.n	8010306 <_malloc_r+0x22>
 80102fe:	230c      	movs	r3, #12
 8010300:	6033      	str	r3, [r6, #0]
 8010302:	2000      	movs	r0, #0
 8010304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010306:	f001 fb6f 	bl	80119e8 <__malloc_lock>
 801030a:	4921      	ldr	r1, [pc, #132]	; (8010390 <_malloc_r+0xac>)
 801030c:	680a      	ldr	r2, [r1, #0]
 801030e:	4614      	mov	r4, r2
 8010310:	b99c      	cbnz	r4, 801033a <_malloc_r+0x56>
 8010312:	4f20      	ldr	r7, [pc, #128]	; (8010394 <_malloc_r+0xb0>)
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	b923      	cbnz	r3, 8010322 <_malloc_r+0x3e>
 8010318:	4621      	mov	r1, r4
 801031a:	4630      	mov	r0, r6
 801031c:	f000 fca4 	bl	8010c68 <_sbrk_r>
 8010320:	6038      	str	r0, [r7, #0]
 8010322:	4629      	mov	r1, r5
 8010324:	4630      	mov	r0, r6
 8010326:	f000 fc9f 	bl	8010c68 <_sbrk_r>
 801032a:	1c43      	adds	r3, r0, #1
 801032c:	d123      	bne.n	8010376 <_malloc_r+0x92>
 801032e:	230c      	movs	r3, #12
 8010330:	4630      	mov	r0, r6
 8010332:	6033      	str	r3, [r6, #0]
 8010334:	f001 fb5e 	bl	80119f4 <__malloc_unlock>
 8010338:	e7e3      	b.n	8010302 <_malloc_r+0x1e>
 801033a:	6823      	ldr	r3, [r4, #0]
 801033c:	1b5b      	subs	r3, r3, r5
 801033e:	d417      	bmi.n	8010370 <_malloc_r+0x8c>
 8010340:	2b0b      	cmp	r3, #11
 8010342:	d903      	bls.n	801034c <_malloc_r+0x68>
 8010344:	6023      	str	r3, [r4, #0]
 8010346:	441c      	add	r4, r3
 8010348:	6025      	str	r5, [r4, #0]
 801034a:	e004      	b.n	8010356 <_malloc_r+0x72>
 801034c:	6863      	ldr	r3, [r4, #4]
 801034e:	42a2      	cmp	r2, r4
 8010350:	bf0c      	ite	eq
 8010352:	600b      	streq	r3, [r1, #0]
 8010354:	6053      	strne	r3, [r2, #4]
 8010356:	4630      	mov	r0, r6
 8010358:	f001 fb4c 	bl	80119f4 <__malloc_unlock>
 801035c:	f104 000b 	add.w	r0, r4, #11
 8010360:	1d23      	adds	r3, r4, #4
 8010362:	f020 0007 	bic.w	r0, r0, #7
 8010366:	1ac2      	subs	r2, r0, r3
 8010368:	d0cc      	beq.n	8010304 <_malloc_r+0x20>
 801036a:	1a1b      	subs	r3, r3, r0
 801036c:	50a3      	str	r3, [r4, r2]
 801036e:	e7c9      	b.n	8010304 <_malloc_r+0x20>
 8010370:	4622      	mov	r2, r4
 8010372:	6864      	ldr	r4, [r4, #4]
 8010374:	e7cc      	b.n	8010310 <_malloc_r+0x2c>
 8010376:	1cc4      	adds	r4, r0, #3
 8010378:	f024 0403 	bic.w	r4, r4, #3
 801037c:	42a0      	cmp	r0, r4
 801037e:	d0e3      	beq.n	8010348 <_malloc_r+0x64>
 8010380:	1a21      	subs	r1, r4, r0
 8010382:	4630      	mov	r0, r6
 8010384:	f000 fc70 	bl	8010c68 <_sbrk_r>
 8010388:	3001      	adds	r0, #1
 801038a:	d1dd      	bne.n	8010348 <_malloc_r+0x64>
 801038c:	e7cf      	b.n	801032e <_malloc_r+0x4a>
 801038e:	bf00      	nop
 8010390:	20000808 	.word	0x20000808
 8010394:	2000080c 	.word	0x2000080c

08010398 <__cvt>:
 8010398:	2b00      	cmp	r3, #0
 801039a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801039e:	461f      	mov	r7, r3
 80103a0:	bfbb      	ittet	lt
 80103a2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80103a6:	461f      	movlt	r7, r3
 80103a8:	2300      	movge	r3, #0
 80103aa:	232d      	movlt	r3, #45	; 0x2d
 80103ac:	b088      	sub	sp, #32
 80103ae:	4614      	mov	r4, r2
 80103b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80103b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80103b4:	7013      	strb	r3, [r2, #0]
 80103b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80103b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80103bc:	f023 0820 	bic.w	r8, r3, #32
 80103c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80103c4:	d005      	beq.n	80103d2 <__cvt+0x3a>
 80103c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80103ca:	d100      	bne.n	80103ce <__cvt+0x36>
 80103cc:	3501      	adds	r5, #1
 80103ce:	2302      	movs	r3, #2
 80103d0:	e000      	b.n	80103d4 <__cvt+0x3c>
 80103d2:	2303      	movs	r3, #3
 80103d4:	aa07      	add	r2, sp, #28
 80103d6:	9204      	str	r2, [sp, #16]
 80103d8:	aa06      	add	r2, sp, #24
 80103da:	e9cd a202 	strd	sl, r2, [sp, #8]
 80103de:	e9cd 3500 	strd	r3, r5, [sp]
 80103e2:	4622      	mov	r2, r4
 80103e4:	463b      	mov	r3, r7
 80103e6:	f000 fcff 	bl	8010de8 <_dtoa_r>
 80103ea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80103ee:	4606      	mov	r6, r0
 80103f0:	d102      	bne.n	80103f8 <__cvt+0x60>
 80103f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80103f4:	07db      	lsls	r3, r3, #31
 80103f6:	d522      	bpl.n	801043e <__cvt+0xa6>
 80103f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80103fc:	eb06 0905 	add.w	r9, r6, r5
 8010400:	d110      	bne.n	8010424 <__cvt+0x8c>
 8010402:	7833      	ldrb	r3, [r6, #0]
 8010404:	2b30      	cmp	r3, #48	; 0x30
 8010406:	d10a      	bne.n	801041e <__cvt+0x86>
 8010408:	2200      	movs	r2, #0
 801040a:	2300      	movs	r3, #0
 801040c:	4620      	mov	r0, r4
 801040e:	4639      	mov	r1, r7
 8010410:	f7f0 fb06 	bl	8000a20 <__aeabi_dcmpeq>
 8010414:	b918      	cbnz	r0, 801041e <__cvt+0x86>
 8010416:	f1c5 0501 	rsb	r5, r5, #1
 801041a:	f8ca 5000 	str.w	r5, [sl]
 801041e:	f8da 3000 	ldr.w	r3, [sl]
 8010422:	4499      	add	r9, r3
 8010424:	2200      	movs	r2, #0
 8010426:	2300      	movs	r3, #0
 8010428:	4620      	mov	r0, r4
 801042a:	4639      	mov	r1, r7
 801042c:	f7f0 faf8 	bl	8000a20 <__aeabi_dcmpeq>
 8010430:	b108      	cbz	r0, 8010436 <__cvt+0x9e>
 8010432:	f8cd 901c 	str.w	r9, [sp, #28]
 8010436:	2230      	movs	r2, #48	; 0x30
 8010438:	9b07      	ldr	r3, [sp, #28]
 801043a:	454b      	cmp	r3, r9
 801043c:	d307      	bcc.n	801044e <__cvt+0xb6>
 801043e:	4630      	mov	r0, r6
 8010440:	9b07      	ldr	r3, [sp, #28]
 8010442:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010444:	1b9b      	subs	r3, r3, r6
 8010446:	6013      	str	r3, [r2, #0]
 8010448:	b008      	add	sp, #32
 801044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801044e:	1c59      	adds	r1, r3, #1
 8010450:	9107      	str	r1, [sp, #28]
 8010452:	701a      	strb	r2, [r3, #0]
 8010454:	e7f0      	b.n	8010438 <__cvt+0xa0>

08010456 <__exponent>:
 8010456:	4603      	mov	r3, r0
 8010458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801045a:	2900      	cmp	r1, #0
 801045c:	f803 2b02 	strb.w	r2, [r3], #2
 8010460:	bfb6      	itet	lt
 8010462:	222d      	movlt	r2, #45	; 0x2d
 8010464:	222b      	movge	r2, #43	; 0x2b
 8010466:	4249      	neglt	r1, r1
 8010468:	2909      	cmp	r1, #9
 801046a:	7042      	strb	r2, [r0, #1]
 801046c:	dd2b      	ble.n	80104c6 <__exponent+0x70>
 801046e:	f10d 0407 	add.w	r4, sp, #7
 8010472:	46a4      	mov	ip, r4
 8010474:	270a      	movs	r7, #10
 8010476:	fb91 f6f7 	sdiv	r6, r1, r7
 801047a:	460a      	mov	r2, r1
 801047c:	46a6      	mov	lr, r4
 801047e:	fb07 1516 	mls	r5, r7, r6, r1
 8010482:	2a63      	cmp	r2, #99	; 0x63
 8010484:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8010488:	4631      	mov	r1, r6
 801048a:	f104 34ff 	add.w	r4, r4, #4294967295
 801048e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010492:	dcf0      	bgt.n	8010476 <__exponent+0x20>
 8010494:	3130      	adds	r1, #48	; 0x30
 8010496:	f1ae 0502 	sub.w	r5, lr, #2
 801049a:	f804 1c01 	strb.w	r1, [r4, #-1]
 801049e:	4629      	mov	r1, r5
 80104a0:	1c44      	adds	r4, r0, #1
 80104a2:	4561      	cmp	r1, ip
 80104a4:	d30a      	bcc.n	80104bc <__exponent+0x66>
 80104a6:	f10d 0209 	add.w	r2, sp, #9
 80104aa:	eba2 020e 	sub.w	r2, r2, lr
 80104ae:	4565      	cmp	r5, ip
 80104b0:	bf88      	it	hi
 80104b2:	2200      	movhi	r2, #0
 80104b4:	4413      	add	r3, r2
 80104b6:	1a18      	subs	r0, r3, r0
 80104b8:	b003      	add	sp, #12
 80104ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104c0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80104c4:	e7ed      	b.n	80104a2 <__exponent+0x4c>
 80104c6:	2330      	movs	r3, #48	; 0x30
 80104c8:	3130      	adds	r1, #48	; 0x30
 80104ca:	7083      	strb	r3, [r0, #2]
 80104cc:	70c1      	strb	r1, [r0, #3]
 80104ce:	1d03      	adds	r3, r0, #4
 80104d0:	e7f1      	b.n	80104b6 <__exponent+0x60>
	...

080104d4 <_printf_float>:
 80104d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d8:	b091      	sub	sp, #68	; 0x44
 80104da:	460c      	mov	r4, r1
 80104dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80104e0:	4616      	mov	r6, r2
 80104e2:	461f      	mov	r7, r3
 80104e4:	4605      	mov	r5, r0
 80104e6:	f001 fa6d 	bl	80119c4 <_localeconv_r>
 80104ea:	6803      	ldr	r3, [r0, #0]
 80104ec:	4618      	mov	r0, r3
 80104ee:	9309      	str	r3, [sp, #36]	; 0x24
 80104f0:	f7ef fe6a 	bl	80001c8 <strlen>
 80104f4:	2300      	movs	r3, #0
 80104f6:	930e      	str	r3, [sp, #56]	; 0x38
 80104f8:	f8d8 3000 	ldr.w	r3, [r8]
 80104fc:	900a      	str	r0, [sp, #40]	; 0x28
 80104fe:	3307      	adds	r3, #7
 8010500:	f023 0307 	bic.w	r3, r3, #7
 8010504:	f103 0208 	add.w	r2, r3, #8
 8010508:	f894 9018 	ldrb.w	r9, [r4, #24]
 801050c:	f8d4 b000 	ldr.w	fp, [r4]
 8010510:	f8c8 2000 	str.w	r2, [r8]
 8010514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010518:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801051c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8010520:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8010524:	930b      	str	r3, [sp, #44]	; 0x2c
 8010526:	f04f 32ff 	mov.w	r2, #4294967295
 801052a:	4640      	mov	r0, r8
 801052c:	4b9c      	ldr	r3, [pc, #624]	; (80107a0 <_printf_float+0x2cc>)
 801052e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010530:	f7f0 faa8 	bl	8000a84 <__aeabi_dcmpun>
 8010534:	bb70      	cbnz	r0, 8010594 <_printf_float+0xc0>
 8010536:	f04f 32ff 	mov.w	r2, #4294967295
 801053a:	4640      	mov	r0, r8
 801053c:	4b98      	ldr	r3, [pc, #608]	; (80107a0 <_printf_float+0x2cc>)
 801053e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010540:	f7f0 fa82 	bl	8000a48 <__aeabi_dcmple>
 8010544:	bb30      	cbnz	r0, 8010594 <_printf_float+0xc0>
 8010546:	2200      	movs	r2, #0
 8010548:	2300      	movs	r3, #0
 801054a:	4640      	mov	r0, r8
 801054c:	4651      	mov	r1, sl
 801054e:	f7f0 fa71 	bl	8000a34 <__aeabi_dcmplt>
 8010552:	b110      	cbz	r0, 801055a <_printf_float+0x86>
 8010554:	232d      	movs	r3, #45	; 0x2d
 8010556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801055a:	4b92      	ldr	r3, [pc, #584]	; (80107a4 <_printf_float+0x2d0>)
 801055c:	4892      	ldr	r0, [pc, #584]	; (80107a8 <_printf_float+0x2d4>)
 801055e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010562:	bf94      	ite	ls
 8010564:	4698      	movls	r8, r3
 8010566:	4680      	movhi	r8, r0
 8010568:	2303      	movs	r3, #3
 801056a:	f04f 0a00 	mov.w	sl, #0
 801056e:	6123      	str	r3, [r4, #16]
 8010570:	f02b 0304 	bic.w	r3, fp, #4
 8010574:	6023      	str	r3, [r4, #0]
 8010576:	4633      	mov	r3, r6
 8010578:	4621      	mov	r1, r4
 801057a:	4628      	mov	r0, r5
 801057c:	9700      	str	r7, [sp, #0]
 801057e:	aa0f      	add	r2, sp, #60	; 0x3c
 8010580:	f000 f9d4 	bl	801092c <_printf_common>
 8010584:	3001      	adds	r0, #1
 8010586:	f040 8090 	bne.w	80106aa <_printf_float+0x1d6>
 801058a:	f04f 30ff 	mov.w	r0, #4294967295
 801058e:	b011      	add	sp, #68	; 0x44
 8010590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010594:	4642      	mov	r2, r8
 8010596:	4653      	mov	r3, sl
 8010598:	4640      	mov	r0, r8
 801059a:	4651      	mov	r1, sl
 801059c:	f7f0 fa72 	bl	8000a84 <__aeabi_dcmpun>
 80105a0:	b148      	cbz	r0, 80105b6 <_printf_float+0xe2>
 80105a2:	f1ba 0f00 	cmp.w	sl, #0
 80105a6:	bfb8      	it	lt
 80105a8:	232d      	movlt	r3, #45	; 0x2d
 80105aa:	4880      	ldr	r0, [pc, #512]	; (80107ac <_printf_float+0x2d8>)
 80105ac:	bfb8      	it	lt
 80105ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80105b2:	4b7f      	ldr	r3, [pc, #508]	; (80107b0 <_printf_float+0x2dc>)
 80105b4:	e7d3      	b.n	801055e <_printf_float+0x8a>
 80105b6:	6863      	ldr	r3, [r4, #4]
 80105b8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80105bc:	1c5a      	adds	r2, r3, #1
 80105be:	d142      	bne.n	8010646 <_printf_float+0x172>
 80105c0:	2306      	movs	r3, #6
 80105c2:	6063      	str	r3, [r4, #4]
 80105c4:	2200      	movs	r2, #0
 80105c6:	9206      	str	r2, [sp, #24]
 80105c8:	aa0e      	add	r2, sp, #56	; 0x38
 80105ca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80105ce:	aa0d      	add	r2, sp, #52	; 0x34
 80105d0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80105d4:	9203      	str	r2, [sp, #12]
 80105d6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80105da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80105de:	6023      	str	r3, [r4, #0]
 80105e0:	6863      	ldr	r3, [r4, #4]
 80105e2:	4642      	mov	r2, r8
 80105e4:	9300      	str	r3, [sp, #0]
 80105e6:	4628      	mov	r0, r5
 80105e8:	4653      	mov	r3, sl
 80105ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80105ec:	f7ff fed4 	bl	8010398 <__cvt>
 80105f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80105f2:	4680      	mov	r8, r0
 80105f4:	2947      	cmp	r1, #71	; 0x47
 80105f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80105f8:	d108      	bne.n	801060c <_printf_float+0x138>
 80105fa:	1cc8      	adds	r0, r1, #3
 80105fc:	db02      	blt.n	8010604 <_printf_float+0x130>
 80105fe:	6863      	ldr	r3, [r4, #4]
 8010600:	4299      	cmp	r1, r3
 8010602:	dd40      	ble.n	8010686 <_printf_float+0x1b2>
 8010604:	f1a9 0902 	sub.w	r9, r9, #2
 8010608:	fa5f f989 	uxtb.w	r9, r9
 801060c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010610:	d81f      	bhi.n	8010652 <_printf_float+0x17e>
 8010612:	464a      	mov	r2, r9
 8010614:	3901      	subs	r1, #1
 8010616:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801061a:	910d      	str	r1, [sp, #52]	; 0x34
 801061c:	f7ff ff1b 	bl	8010456 <__exponent>
 8010620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010622:	4682      	mov	sl, r0
 8010624:	1813      	adds	r3, r2, r0
 8010626:	2a01      	cmp	r2, #1
 8010628:	6123      	str	r3, [r4, #16]
 801062a:	dc02      	bgt.n	8010632 <_printf_float+0x15e>
 801062c:	6822      	ldr	r2, [r4, #0]
 801062e:	07d2      	lsls	r2, r2, #31
 8010630:	d501      	bpl.n	8010636 <_printf_float+0x162>
 8010632:	3301      	adds	r3, #1
 8010634:	6123      	str	r3, [r4, #16]
 8010636:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801063a:	2b00      	cmp	r3, #0
 801063c:	d09b      	beq.n	8010576 <_printf_float+0xa2>
 801063e:	232d      	movs	r3, #45	; 0x2d
 8010640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010644:	e797      	b.n	8010576 <_printf_float+0xa2>
 8010646:	2947      	cmp	r1, #71	; 0x47
 8010648:	d1bc      	bne.n	80105c4 <_printf_float+0xf0>
 801064a:	2b00      	cmp	r3, #0
 801064c:	d1ba      	bne.n	80105c4 <_printf_float+0xf0>
 801064e:	2301      	movs	r3, #1
 8010650:	e7b7      	b.n	80105c2 <_printf_float+0xee>
 8010652:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010656:	d118      	bne.n	801068a <_printf_float+0x1b6>
 8010658:	2900      	cmp	r1, #0
 801065a:	6863      	ldr	r3, [r4, #4]
 801065c:	dd0b      	ble.n	8010676 <_printf_float+0x1a2>
 801065e:	6121      	str	r1, [r4, #16]
 8010660:	b913      	cbnz	r3, 8010668 <_printf_float+0x194>
 8010662:	6822      	ldr	r2, [r4, #0]
 8010664:	07d0      	lsls	r0, r2, #31
 8010666:	d502      	bpl.n	801066e <_printf_float+0x19a>
 8010668:	3301      	adds	r3, #1
 801066a:	440b      	add	r3, r1
 801066c:	6123      	str	r3, [r4, #16]
 801066e:	f04f 0a00 	mov.w	sl, #0
 8010672:	65a1      	str	r1, [r4, #88]	; 0x58
 8010674:	e7df      	b.n	8010636 <_printf_float+0x162>
 8010676:	b913      	cbnz	r3, 801067e <_printf_float+0x1aa>
 8010678:	6822      	ldr	r2, [r4, #0]
 801067a:	07d2      	lsls	r2, r2, #31
 801067c:	d501      	bpl.n	8010682 <_printf_float+0x1ae>
 801067e:	3302      	adds	r3, #2
 8010680:	e7f4      	b.n	801066c <_printf_float+0x198>
 8010682:	2301      	movs	r3, #1
 8010684:	e7f2      	b.n	801066c <_printf_float+0x198>
 8010686:	f04f 0967 	mov.w	r9, #103	; 0x67
 801068a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801068c:	4299      	cmp	r1, r3
 801068e:	db05      	blt.n	801069c <_printf_float+0x1c8>
 8010690:	6823      	ldr	r3, [r4, #0]
 8010692:	6121      	str	r1, [r4, #16]
 8010694:	07d8      	lsls	r0, r3, #31
 8010696:	d5ea      	bpl.n	801066e <_printf_float+0x19a>
 8010698:	1c4b      	adds	r3, r1, #1
 801069a:	e7e7      	b.n	801066c <_printf_float+0x198>
 801069c:	2900      	cmp	r1, #0
 801069e:	bfcc      	ite	gt
 80106a0:	2201      	movgt	r2, #1
 80106a2:	f1c1 0202 	rsble	r2, r1, #2
 80106a6:	4413      	add	r3, r2
 80106a8:	e7e0      	b.n	801066c <_printf_float+0x198>
 80106aa:	6823      	ldr	r3, [r4, #0]
 80106ac:	055a      	lsls	r2, r3, #21
 80106ae:	d407      	bmi.n	80106c0 <_printf_float+0x1ec>
 80106b0:	6923      	ldr	r3, [r4, #16]
 80106b2:	4642      	mov	r2, r8
 80106b4:	4631      	mov	r1, r6
 80106b6:	4628      	mov	r0, r5
 80106b8:	47b8      	blx	r7
 80106ba:	3001      	adds	r0, #1
 80106bc:	d12b      	bne.n	8010716 <_printf_float+0x242>
 80106be:	e764      	b.n	801058a <_printf_float+0xb6>
 80106c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80106c4:	f240 80dd 	bls.w	8010882 <_printf_float+0x3ae>
 80106c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80106cc:	2200      	movs	r2, #0
 80106ce:	2300      	movs	r3, #0
 80106d0:	f7f0 f9a6 	bl	8000a20 <__aeabi_dcmpeq>
 80106d4:	2800      	cmp	r0, #0
 80106d6:	d033      	beq.n	8010740 <_printf_float+0x26c>
 80106d8:	2301      	movs	r3, #1
 80106da:	4631      	mov	r1, r6
 80106dc:	4628      	mov	r0, r5
 80106de:	4a35      	ldr	r2, [pc, #212]	; (80107b4 <_printf_float+0x2e0>)
 80106e0:	47b8      	blx	r7
 80106e2:	3001      	adds	r0, #1
 80106e4:	f43f af51 	beq.w	801058a <_printf_float+0xb6>
 80106e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80106ec:	429a      	cmp	r2, r3
 80106ee:	db02      	blt.n	80106f6 <_printf_float+0x222>
 80106f0:	6823      	ldr	r3, [r4, #0]
 80106f2:	07d8      	lsls	r0, r3, #31
 80106f4:	d50f      	bpl.n	8010716 <_printf_float+0x242>
 80106f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80106fa:	4631      	mov	r1, r6
 80106fc:	4628      	mov	r0, r5
 80106fe:	47b8      	blx	r7
 8010700:	3001      	adds	r0, #1
 8010702:	f43f af42 	beq.w	801058a <_printf_float+0xb6>
 8010706:	f04f 0800 	mov.w	r8, #0
 801070a:	f104 091a 	add.w	r9, r4, #26
 801070e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010710:	3b01      	subs	r3, #1
 8010712:	4543      	cmp	r3, r8
 8010714:	dc09      	bgt.n	801072a <_printf_float+0x256>
 8010716:	6823      	ldr	r3, [r4, #0]
 8010718:	079b      	lsls	r3, r3, #30
 801071a:	f100 8102 	bmi.w	8010922 <_printf_float+0x44e>
 801071e:	68e0      	ldr	r0, [r4, #12]
 8010720:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010722:	4298      	cmp	r0, r3
 8010724:	bfb8      	it	lt
 8010726:	4618      	movlt	r0, r3
 8010728:	e731      	b.n	801058e <_printf_float+0xba>
 801072a:	2301      	movs	r3, #1
 801072c:	464a      	mov	r2, r9
 801072e:	4631      	mov	r1, r6
 8010730:	4628      	mov	r0, r5
 8010732:	47b8      	blx	r7
 8010734:	3001      	adds	r0, #1
 8010736:	f43f af28 	beq.w	801058a <_printf_float+0xb6>
 801073a:	f108 0801 	add.w	r8, r8, #1
 801073e:	e7e6      	b.n	801070e <_printf_float+0x23a>
 8010740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010742:	2b00      	cmp	r3, #0
 8010744:	dc38      	bgt.n	80107b8 <_printf_float+0x2e4>
 8010746:	2301      	movs	r3, #1
 8010748:	4631      	mov	r1, r6
 801074a:	4628      	mov	r0, r5
 801074c:	4a19      	ldr	r2, [pc, #100]	; (80107b4 <_printf_float+0x2e0>)
 801074e:	47b8      	blx	r7
 8010750:	3001      	adds	r0, #1
 8010752:	f43f af1a 	beq.w	801058a <_printf_float+0xb6>
 8010756:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801075a:	4313      	orrs	r3, r2
 801075c:	d102      	bne.n	8010764 <_printf_float+0x290>
 801075e:	6823      	ldr	r3, [r4, #0]
 8010760:	07d9      	lsls	r1, r3, #31
 8010762:	d5d8      	bpl.n	8010716 <_printf_float+0x242>
 8010764:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010768:	4631      	mov	r1, r6
 801076a:	4628      	mov	r0, r5
 801076c:	47b8      	blx	r7
 801076e:	3001      	adds	r0, #1
 8010770:	f43f af0b 	beq.w	801058a <_printf_float+0xb6>
 8010774:	f04f 0900 	mov.w	r9, #0
 8010778:	f104 0a1a 	add.w	sl, r4, #26
 801077c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801077e:	425b      	negs	r3, r3
 8010780:	454b      	cmp	r3, r9
 8010782:	dc01      	bgt.n	8010788 <_printf_float+0x2b4>
 8010784:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010786:	e794      	b.n	80106b2 <_printf_float+0x1de>
 8010788:	2301      	movs	r3, #1
 801078a:	4652      	mov	r2, sl
 801078c:	4631      	mov	r1, r6
 801078e:	4628      	mov	r0, r5
 8010790:	47b8      	blx	r7
 8010792:	3001      	adds	r0, #1
 8010794:	f43f aef9 	beq.w	801058a <_printf_float+0xb6>
 8010798:	f109 0901 	add.w	r9, r9, #1
 801079c:	e7ee      	b.n	801077c <_printf_float+0x2a8>
 801079e:	bf00      	nop
 80107a0:	7fefffff 	.word	0x7fefffff
 80107a4:	08013e94 	.word	0x08013e94
 80107a8:	08013e98 	.word	0x08013e98
 80107ac:	08013ea0 	.word	0x08013ea0
 80107b0:	08013e9c 	.word	0x08013e9c
 80107b4:	08013ea4 	.word	0x08013ea4
 80107b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80107ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80107bc:	429a      	cmp	r2, r3
 80107be:	bfa8      	it	ge
 80107c0:	461a      	movge	r2, r3
 80107c2:	2a00      	cmp	r2, #0
 80107c4:	4691      	mov	r9, r2
 80107c6:	dc37      	bgt.n	8010838 <_printf_float+0x364>
 80107c8:	f04f 0b00 	mov.w	fp, #0
 80107cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80107d0:	f104 021a 	add.w	r2, r4, #26
 80107d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80107d8:	ebaa 0309 	sub.w	r3, sl, r9
 80107dc:	455b      	cmp	r3, fp
 80107de:	dc33      	bgt.n	8010848 <_printf_float+0x374>
 80107e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80107e4:	429a      	cmp	r2, r3
 80107e6:	db3b      	blt.n	8010860 <_printf_float+0x38c>
 80107e8:	6823      	ldr	r3, [r4, #0]
 80107ea:	07da      	lsls	r2, r3, #31
 80107ec:	d438      	bmi.n	8010860 <_printf_float+0x38c>
 80107ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80107f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80107f2:	eba2 030a 	sub.w	r3, r2, sl
 80107f6:	eba2 0901 	sub.w	r9, r2, r1
 80107fa:	4599      	cmp	r9, r3
 80107fc:	bfa8      	it	ge
 80107fe:	4699      	movge	r9, r3
 8010800:	f1b9 0f00 	cmp.w	r9, #0
 8010804:	dc34      	bgt.n	8010870 <_printf_float+0x39c>
 8010806:	f04f 0800 	mov.w	r8, #0
 801080a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801080e:	f104 0a1a 	add.w	sl, r4, #26
 8010812:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010816:	1a9b      	subs	r3, r3, r2
 8010818:	eba3 0309 	sub.w	r3, r3, r9
 801081c:	4543      	cmp	r3, r8
 801081e:	f77f af7a 	ble.w	8010716 <_printf_float+0x242>
 8010822:	2301      	movs	r3, #1
 8010824:	4652      	mov	r2, sl
 8010826:	4631      	mov	r1, r6
 8010828:	4628      	mov	r0, r5
 801082a:	47b8      	blx	r7
 801082c:	3001      	adds	r0, #1
 801082e:	f43f aeac 	beq.w	801058a <_printf_float+0xb6>
 8010832:	f108 0801 	add.w	r8, r8, #1
 8010836:	e7ec      	b.n	8010812 <_printf_float+0x33e>
 8010838:	4613      	mov	r3, r2
 801083a:	4631      	mov	r1, r6
 801083c:	4642      	mov	r2, r8
 801083e:	4628      	mov	r0, r5
 8010840:	47b8      	blx	r7
 8010842:	3001      	adds	r0, #1
 8010844:	d1c0      	bne.n	80107c8 <_printf_float+0x2f4>
 8010846:	e6a0      	b.n	801058a <_printf_float+0xb6>
 8010848:	2301      	movs	r3, #1
 801084a:	4631      	mov	r1, r6
 801084c:	4628      	mov	r0, r5
 801084e:	920b      	str	r2, [sp, #44]	; 0x2c
 8010850:	47b8      	blx	r7
 8010852:	3001      	adds	r0, #1
 8010854:	f43f ae99 	beq.w	801058a <_printf_float+0xb6>
 8010858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801085a:	f10b 0b01 	add.w	fp, fp, #1
 801085e:	e7b9      	b.n	80107d4 <_printf_float+0x300>
 8010860:	4631      	mov	r1, r6
 8010862:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010866:	4628      	mov	r0, r5
 8010868:	47b8      	blx	r7
 801086a:	3001      	adds	r0, #1
 801086c:	d1bf      	bne.n	80107ee <_printf_float+0x31a>
 801086e:	e68c      	b.n	801058a <_printf_float+0xb6>
 8010870:	464b      	mov	r3, r9
 8010872:	4631      	mov	r1, r6
 8010874:	4628      	mov	r0, r5
 8010876:	eb08 020a 	add.w	r2, r8, sl
 801087a:	47b8      	blx	r7
 801087c:	3001      	adds	r0, #1
 801087e:	d1c2      	bne.n	8010806 <_printf_float+0x332>
 8010880:	e683      	b.n	801058a <_printf_float+0xb6>
 8010882:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010884:	2a01      	cmp	r2, #1
 8010886:	dc01      	bgt.n	801088c <_printf_float+0x3b8>
 8010888:	07db      	lsls	r3, r3, #31
 801088a:	d537      	bpl.n	80108fc <_printf_float+0x428>
 801088c:	2301      	movs	r3, #1
 801088e:	4642      	mov	r2, r8
 8010890:	4631      	mov	r1, r6
 8010892:	4628      	mov	r0, r5
 8010894:	47b8      	blx	r7
 8010896:	3001      	adds	r0, #1
 8010898:	f43f ae77 	beq.w	801058a <_printf_float+0xb6>
 801089c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80108a0:	4631      	mov	r1, r6
 80108a2:	4628      	mov	r0, r5
 80108a4:	47b8      	blx	r7
 80108a6:	3001      	adds	r0, #1
 80108a8:	f43f ae6f 	beq.w	801058a <_printf_float+0xb6>
 80108ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80108b0:	2200      	movs	r2, #0
 80108b2:	2300      	movs	r3, #0
 80108b4:	f7f0 f8b4 	bl	8000a20 <__aeabi_dcmpeq>
 80108b8:	b9d8      	cbnz	r0, 80108f2 <_printf_float+0x41e>
 80108ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108bc:	f108 0201 	add.w	r2, r8, #1
 80108c0:	3b01      	subs	r3, #1
 80108c2:	4631      	mov	r1, r6
 80108c4:	4628      	mov	r0, r5
 80108c6:	47b8      	blx	r7
 80108c8:	3001      	adds	r0, #1
 80108ca:	d10e      	bne.n	80108ea <_printf_float+0x416>
 80108cc:	e65d      	b.n	801058a <_printf_float+0xb6>
 80108ce:	2301      	movs	r3, #1
 80108d0:	464a      	mov	r2, r9
 80108d2:	4631      	mov	r1, r6
 80108d4:	4628      	mov	r0, r5
 80108d6:	47b8      	blx	r7
 80108d8:	3001      	adds	r0, #1
 80108da:	f43f ae56 	beq.w	801058a <_printf_float+0xb6>
 80108de:	f108 0801 	add.w	r8, r8, #1
 80108e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108e4:	3b01      	subs	r3, #1
 80108e6:	4543      	cmp	r3, r8
 80108e8:	dcf1      	bgt.n	80108ce <_printf_float+0x3fa>
 80108ea:	4653      	mov	r3, sl
 80108ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80108f0:	e6e0      	b.n	80106b4 <_printf_float+0x1e0>
 80108f2:	f04f 0800 	mov.w	r8, #0
 80108f6:	f104 091a 	add.w	r9, r4, #26
 80108fa:	e7f2      	b.n	80108e2 <_printf_float+0x40e>
 80108fc:	2301      	movs	r3, #1
 80108fe:	4642      	mov	r2, r8
 8010900:	e7df      	b.n	80108c2 <_printf_float+0x3ee>
 8010902:	2301      	movs	r3, #1
 8010904:	464a      	mov	r2, r9
 8010906:	4631      	mov	r1, r6
 8010908:	4628      	mov	r0, r5
 801090a:	47b8      	blx	r7
 801090c:	3001      	adds	r0, #1
 801090e:	f43f ae3c 	beq.w	801058a <_printf_float+0xb6>
 8010912:	f108 0801 	add.w	r8, r8, #1
 8010916:	68e3      	ldr	r3, [r4, #12]
 8010918:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801091a:	1a5b      	subs	r3, r3, r1
 801091c:	4543      	cmp	r3, r8
 801091e:	dcf0      	bgt.n	8010902 <_printf_float+0x42e>
 8010920:	e6fd      	b.n	801071e <_printf_float+0x24a>
 8010922:	f04f 0800 	mov.w	r8, #0
 8010926:	f104 0919 	add.w	r9, r4, #25
 801092a:	e7f4      	b.n	8010916 <_printf_float+0x442>

0801092c <_printf_common>:
 801092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010930:	4616      	mov	r6, r2
 8010932:	4699      	mov	r9, r3
 8010934:	688a      	ldr	r2, [r1, #8]
 8010936:	690b      	ldr	r3, [r1, #16]
 8010938:	4607      	mov	r7, r0
 801093a:	4293      	cmp	r3, r2
 801093c:	bfb8      	it	lt
 801093e:	4613      	movlt	r3, r2
 8010940:	6033      	str	r3, [r6, #0]
 8010942:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010946:	460c      	mov	r4, r1
 8010948:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801094c:	b10a      	cbz	r2, 8010952 <_printf_common+0x26>
 801094e:	3301      	adds	r3, #1
 8010950:	6033      	str	r3, [r6, #0]
 8010952:	6823      	ldr	r3, [r4, #0]
 8010954:	0699      	lsls	r1, r3, #26
 8010956:	bf42      	ittt	mi
 8010958:	6833      	ldrmi	r3, [r6, #0]
 801095a:	3302      	addmi	r3, #2
 801095c:	6033      	strmi	r3, [r6, #0]
 801095e:	6825      	ldr	r5, [r4, #0]
 8010960:	f015 0506 	ands.w	r5, r5, #6
 8010964:	d106      	bne.n	8010974 <_printf_common+0x48>
 8010966:	f104 0a19 	add.w	sl, r4, #25
 801096a:	68e3      	ldr	r3, [r4, #12]
 801096c:	6832      	ldr	r2, [r6, #0]
 801096e:	1a9b      	subs	r3, r3, r2
 8010970:	42ab      	cmp	r3, r5
 8010972:	dc28      	bgt.n	80109c6 <_printf_common+0x9a>
 8010974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010978:	1e13      	subs	r3, r2, #0
 801097a:	6822      	ldr	r2, [r4, #0]
 801097c:	bf18      	it	ne
 801097e:	2301      	movne	r3, #1
 8010980:	0692      	lsls	r2, r2, #26
 8010982:	d42d      	bmi.n	80109e0 <_printf_common+0xb4>
 8010984:	4649      	mov	r1, r9
 8010986:	4638      	mov	r0, r7
 8010988:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801098c:	47c0      	blx	r8
 801098e:	3001      	adds	r0, #1
 8010990:	d020      	beq.n	80109d4 <_printf_common+0xa8>
 8010992:	6823      	ldr	r3, [r4, #0]
 8010994:	68e5      	ldr	r5, [r4, #12]
 8010996:	f003 0306 	and.w	r3, r3, #6
 801099a:	2b04      	cmp	r3, #4
 801099c:	bf18      	it	ne
 801099e:	2500      	movne	r5, #0
 80109a0:	6832      	ldr	r2, [r6, #0]
 80109a2:	f04f 0600 	mov.w	r6, #0
 80109a6:	68a3      	ldr	r3, [r4, #8]
 80109a8:	bf08      	it	eq
 80109aa:	1aad      	subeq	r5, r5, r2
 80109ac:	6922      	ldr	r2, [r4, #16]
 80109ae:	bf08      	it	eq
 80109b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80109b4:	4293      	cmp	r3, r2
 80109b6:	bfc4      	itt	gt
 80109b8:	1a9b      	subgt	r3, r3, r2
 80109ba:	18ed      	addgt	r5, r5, r3
 80109bc:	341a      	adds	r4, #26
 80109be:	42b5      	cmp	r5, r6
 80109c0:	d11a      	bne.n	80109f8 <_printf_common+0xcc>
 80109c2:	2000      	movs	r0, #0
 80109c4:	e008      	b.n	80109d8 <_printf_common+0xac>
 80109c6:	2301      	movs	r3, #1
 80109c8:	4652      	mov	r2, sl
 80109ca:	4649      	mov	r1, r9
 80109cc:	4638      	mov	r0, r7
 80109ce:	47c0      	blx	r8
 80109d0:	3001      	adds	r0, #1
 80109d2:	d103      	bne.n	80109dc <_printf_common+0xb0>
 80109d4:	f04f 30ff 	mov.w	r0, #4294967295
 80109d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109dc:	3501      	adds	r5, #1
 80109de:	e7c4      	b.n	801096a <_printf_common+0x3e>
 80109e0:	2030      	movs	r0, #48	; 0x30
 80109e2:	18e1      	adds	r1, r4, r3
 80109e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80109e8:	1c5a      	adds	r2, r3, #1
 80109ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80109ee:	4422      	add	r2, r4
 80109f0:	3302      	adds	r3, #2
 80109f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80109f6:	e7c5      	b.n	8010984 <_printf_common+0x58>
 80109f8:	2301      	movs	r3, #1
 80109fa:	4622      	mov	r2, r4
 80109fc:	4649      	mov	r1, r9
 80109fe:	4638      	mov	r0, r7
 8010a00:	47c0      	blx	r8
 8010a02:	3001      	adds	r0, #1
 8010a04:	d0e6      	beq.n	80109d4 <_printf_common+0xa8>
 8010a06:	3601      	adds	r6, #1
 8010a08:	e7d9      	b.n	80109be <_printf_common+0x92>
	...

08010a0c <_printf_i>:
 8010a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a10:	460c      	mov	r4, r1
 8010a12:	7e27      	ldrb	r7, [r4, #24]
 8010a14:	4691      	mov	r9, r2
 8010a16:	2f78      	cmp	r7, #120	; 0x78
 8010a18:	4680      	mov	r8, r0
 8010a1a:	469a      	mov	sl, r3
 8010a1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a22:	d807      	bhi.n	8010a34 <_printf_i+0x28>
 8010a24:	2f62      	cmp	r7, #98	; 0x62
 8010a26:	d80a      	bhi.n	8010a3e <_printf_i+0x32>
 8010a28:	2f00      	cmp	r7, #0
 8010a2a:	f000 80d9 	beq.w	8010be0 <_printf_i+0x1d4>
 8010a2e:	2f58      	cmp	r7, #88	; 0x58
 8010a30:	f000 80a4 	beq.w	8010b7c <_printf_i+0x170>
 8010a34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010a38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a3c:	e03a      	b.n	8010ab4 <_printf_i+0xa8>
 8010a3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a42:	2b15      	cmp	r3, #21
 8010a44:	d8f6      	bhi.n	8010a34 <_printf_i+0x28>
 8010a46:	a001      	add	r0, pc, #4	; (adr r0, 8010a4c <_printf_i+0x40>)
 8010a48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010a4c:	08010aa5 	.word	0x08010aa5
 8010a50:	08010ab9 	.word	0x08010ab9
 8010a54:	08010a35 	.word	0x08010a35
 8010a58:	08010a35 	.word	0x08010a35
 8010a5c:	08010a35 	.word	0x08010a35
 8010a60:	08010a35 	.word	0x08010a35
 8010a64:	08010ab9 	.word	0x08010ab9
 8010a68:	08010a35 	.word	0x08010a35
 8010a6c:	08010a35 	.word	0x08010a35
 8010a70:	08010a35 	.word	0x08010a35
 8010a74:	08010a35 	.word	0x08010a35
 8010a78:	08010bc7 	.word	0x08010bc7
 8010a7c:	08010ae9 	.word	0x08010ae9
 8010a80:	08010ba9 	.word	0x08010ba9
 8010a84:	08010a35 	.word	0x08010a35
 8010a88:	08010a35 	.word	0x08010a35
 8010a8c:	08010be9 	.word	0x08010be9
 8010a90:	08010a35 	.word	0x08010a35
 8010a94:	08010ae9 	.word	0x08010ae9
 8010a98:	08010a35 	.word	0x08010a35
 8010a9c:	08010a35 	.word	0x08010a35
 8010aa0:	08010bb1 	.word	0x08010bb1
 8010aa4:	680b      	ldr	r3, [r1, #0]
 8010aa6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010aaa:	1d1a      	adds	r2, r3, #4
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	600a      	str	r2, [r1, #0]
 8010ab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	e0a4      	b.n	8010c02 <_printf_i+0x1f6>
 8010ab8:	6825      	ldr	r5, [r4, #0]
 8010aba:	6808      	ldr	r0, [r1, #0]
 8010abc:	062e      	lsls	r6, r5, #24
 8010abe:	f100 0304 	add.w	r3, r0, #4
 8010ac2:	d50a      	bpl.n	8010ada <_printf_i+0xce>
 8010ac4:	6805      	ldr	r5, [r0, #0]
 8010ac6:	600b      	str	r3, [r1, #0]
 8010ac8:	2d00      	cmp	r5, #0
 8010aca:	da03      	bge.n	8010ad4 <_printf_i+0xc8>
 8010acc:	232d      	movs	r3, #45	; 0x2d
 8010ace:	426d      	negs	r5, r5
 8010ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ad4:	230a      	movs	r3, #10
 8010ad6:	485e      	ldr	r0, [pc, #376]	; (8010c50 <_printf_i+0x244>)
 8010ad8:	e019      	b.n	8010b0e <_printf_i+0x102>
 8010ada:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010ade:	6805      	ldr	r5, [r0, #0]
 8010ae0:	600b      	str	r3, [r1, #0]
 8010ae2:	bf18      	it	ne
 8010ae4:	b22d      	sxthne	r5, r5
 8010ae6:	e7ef      	b.n	8010ac8 <_printf_i+0xbc>
 8010ae8:	680b      	ldr	r3, [r1, #0]
 8010aea:	6825      	ldr	r5, [r4, #0]
 8010aec:	1d18      	adds	r0, r3, #4
 8010aee:	6008      	str	r0, [r1, #0]
 8010af0:	0628      	lsls	r0, r5, #24
 8010af2:	d501      	bpl.n	8010af8 <_printf_i+0xec>
 8010af4:	681d      	ldr	r5, [r3, #0]
 8010af6:	e002      	b.n	8010afe <_printf_i+0xf2>
 8010af8:	0669      	lsls	r1, r5, #25
 8010afa:	d5fb      	bpl.n	8010af4 <_printf_i+0xe8>
 8010afc:	881d      	ldrh	r5, [r3, #0]
 8010afe:	2f6f      	cmp	r7, #111	; 0x6f
 8010b00:	bf0c      	ite	eq
 8010b02:	2308      	moveq	r3, #8
 8010b04:	230a      	movne	r3, #10
 8010b06:	4852      	ldr	r0, [pc, #328]	; (8010c50 <_printf_i+0x244>)
 8010b08:	2100      	movs	r1, #0
 8010b0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010b0e:	6866      	ldr	r6, [r4, #4]
 8010b10:	2e00      	cmp	r6, #0
 8010b12:	bfa8      	it	ge
 8010b14:	6821      	ldrge	r1, [r4, #0]
 8010b16:	60a6      	str	r6, [r4, #8]
 8010b18:	bfa4      	itt	ge
 8010b1a:	f021 0104 	bicge.w	r1, r1, #4
 8010b1e:	6021      	strge	r1, [r4, #0]
 8010b20:	b90d      	cbnz	r5, 8010b26 <_printf_i+0x11a>
 8010b22:	2e00      	cmp	r6, #0
 8010b24:	d04d      	beq.n	8010bc2 <_printf_i+0x1b6>
 8010b26:	4616      	mov	r6, r2
 8010b28:	fbb5 f1f3 	udiv	r1, r5, r3
 8010b2c:	fb03 5711 	mls	r7, r3, r1, r5
 8010b30:	5dc7      	ldrb	r7, [r0, r7]
 8010b32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010b36:	462f      	mov	r7, r5
 8010b38:	42bb      	cmp	r3, r7
 8010b3a:	460d      	mov	r5, r1
 8010b3c:	d9f4      	bls.n	8010b28 <_printf_i+0x11c>
 8010b3e:	2b08      	cmp	r3, #8
 8010b40:	d10b      	bne.n	8010b5a <_printf_i+0x14e>
 8010b42:	6823      	ldr	r3, [r4, #0]
 8010b44:	07df      	lsls	r7, r3, #31
 8010b46:	d508      	bpl.n	8010b5a <_printf_i+0x14e>
 8010b48:	6923      	ldr	r3, [r4, #16]
 8010b4a:	6861      	ldr	r1, [r4, #4]
 8010b4c:	4299      	cmp	r1, r3
 8010b4e:	bfde      	ittt	le
 8010b50:	2330      	movle	r3, #48	; 0x30
 8010b52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010b56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010b5a:	1b92      	subs	r2, r2, r6
 8010b5c:	6122      	str	r2, [r4, #16]
 8010b5e:	464b      	mov	r3, r9
 8010b60:	4621      	mov	r1, r4
 8010b62:	4640      	mov	r0, r8
 8010b64:	f8cd a000 	str.w	sl, [sp]
 8010b68:	aa03      	add	r2, sp, #12
 8010b6a:	f7ff fedf 	bl	801092c <_printf_common>
 8010b6e:	3001      	adds	r0, #1
 8010b70:	d14c      	bne.n	8010c0c <_printf_i+0x200>
 8010b72:	f04f 30ff 	mov.w	r0, #4294967295
 8010b76:	b004      	add	sp, #16
 8010b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b7c:	4834      	ldr	r0, [pc, #208]	; (8010c50 <_printf_i+0x244>)
 8010b7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010b82:	680e      	ldr	r6, [r1, #0]
 8010b84:	6823      	ldr	r3, [r4, #0]
 8010b86:	f856 5b04 	ldr.w	r5, [r6], #4
 8010b8a:	061f      	lsls	r7, r3, #24
 8010b8c:	600e      	str	r6, [r1, #0]
 8010b8e:	d514      	bpl.n	8010bba <_printf_i+0x1ae>
 8010b90:	07d9      	lsls	r1, r3, #31
 8010b92:	bf44      	itt	mi
 8010b94:	f043 0320 	orrmi.w	r3, r3, #32
 8010b98:	6023      	strmi	r3, [r4, #0]
 8010b9a:	b91d      	cbnz	r5, 8010ba4 <_printf_i+0x198>
 8010b9c:	6823      	ldr	r3, [r4, #0]
 8010b9e:	f023 0320 	bic.w	r3, r3, #32
 8010ba2:	6023      	str	r3, [r4, #0]
 8010ba4:	2310      	movs	r3, #16
 8010ba6:	e7af      	b.n	8010b08 <_printf_i+0xfc>
 8010ba8:	6823      	ldr	r3, [r4, #0]
 8010baa:	f043 0320 	orr.w	r3, r3, #32
 8010bae:	6023      	str	r3, [r4, #0]
 8010bb0:	2378      	movs	r3, #120	; 0x78
 8010bb2:	4828      	ldr	r0, [pc, #160]	; (8010c54 <_printf_i+0x248>)
 8010bb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010bb8:	e7e3      	b.n	8010b82 <_printf_i+0x176>
 8010bba:	065e      	lsls	r6, r3, #25
 8010bbc:	bf48      	it	mi
 8010bbe:	b2ad      	uxthmi	r5, r5
 8010bc0:	e7e6      	b.n	8010b90 <_printf_i+0x184>
 8010bc2:	4616      	mov	r6, r2
 8010bc4:	e7bb      	b.n	8010b3e <_printf_i+0x132>
 8010bc6:	680b      	ldr	r3, [r1, #0]
 8010bc8:	6826      	ldr	r6, [r4, #0]
 8010bca:	1d1d      	adds	r5, r3, #4
 8010bcc:	6960      	ldr	r0, [r4, #20]
 8010bce:	600d      	str	r5, [r1, #0]
 8010bd0:	0635      	lsls	r5, r6, #24
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	d501      	bpl.n	8010bda <_printf_i+0x1ce>
 8010bd6:	6018      	str	r0, [r3, #0]
 8010bd8:	e002      	b.n	8010be0 <_printf_i+0x1d4>
 8010bda:	0671      	lsls	r1, r6, #25
 8010bdc:	d5fb      	bpl.n	8010bd6 <_printf_i+0x1ca>
 8010bde:	8018      	strh	r0, [r3, #0]
 8010be0:	2300      	movs	r3, #0
 8010be2:	4616      	mov	r6, r2
 8010be4:	6123      	str	r3, [r4, #16]
 8010be6:	e7ba      	b.n	8010b5e <_printf_i+0x152>
 8010be8:	680b      	ldr	r3, [r1, #0]
 8010bea:	1d1a      	adds	r2, r3, #4
 8010bec:	600a      	str	r2, [r1, #0]
 8010bee:	681e      	ldr	r6, [r3, #0]
 8010bf0:	2100      	movs	r1, #0
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	6862      	ldr	r2, [r4, #4]
 8010bf6:	f000 fee9 	bl	80119cc <memchr>
 8010bfa:	b108      	cbz	r0, 8010c00 <_printf_i+0x1f4>
 8010bfc:	1b80      	subs	r0, r0, r6
 8010bfe:	6060      	str	r0, [r4, #4]
 8010c00:	6863      	ldr	r3, [r4, #4]
 8010c02:	6123      	str	r3, [r4, #16]
 8010c04:	2300      	movs	r3, #0
 8010c06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c0a:	e7a8      	b.n	8010b5e <_printf_i+0x152>
 8010c0c:	4632      	mov	r2, r6
 8010c0e:	4649      	mov	r1, r9
 8010c10:	4640      	mov	r0, r8
 8010c12:	6923      	ldr	r3, [r4, #16]
 8010c14:	47d0      	blx	sl
 8010c16:	3001      	adds	r0, #1
 8010c18:	d0ab      	beq.n	8010b72 <_printf_i+0x166>
 8010c1a:	6823      	ldr	r3, [r4, #0]
 8010c1c:	079b      	lsls	r3, r3, #30
 8010c1e:	d413      	bmi.n	8010c48 <_printf_i+0x23c>
 8010c20:	68e0      	ldr	r0, [r4, #12]
 8010c22:	9b03      	ldr	r3, [sp, #12]
 8010c24:	4298      	cmp	r0, r3
 8010c26:	bfb8      	it	lt
 8010c28:	4618      	movlt	r0, r3
 8010c2a:	e7a4      	b.n	8010b76 <_printf_i+0x16a>
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	4632      	mov	r2, r6
 8010c30:	4649      	mov	r1, r9
 8010c32:	4640      	mov	r0, r8
 8010c34:	47d0      	blx	sl
 8010c36:	3001      	adds	r0, #1
 8010c38:	d09b      	beq.n	8010b72 <_printf_i+0x166>
 8010c3a:	3501      	adds	r5, #1
 8010c3c:	68e3      	ldr	r3, [r4, #12]
 8010c3e:	9903      	ldr	r1, [sp, #12]
 8010c40:	1a5b      	subs	r3, r3, r1
 8010c42:	42ab      	cmp	r3, r5
 8010c44:	dcf2      	bgt.n	8010c2c <_printf_i+0x220>
 8010c46:	e7eb      	b.n	8010c20 <_printf_i+0x214>
 8010c48:	2500      	movs	r5, #0
 8010c4a:	f104 0619 	add.w	r6, r4, #25
 8010c4e:	e7f5      	b.n	8010c3c <_printf_i+0x230>
 8010c50:	08013ea6 	.word	0x08013ea6
 8010c54:	08013eb7 	.word	0x08013eb7

08010c58 <realloc>:
 8010c58:	4b02      	ldr	r3, [pc, #8]	; (8010c64 <realloc+0xc>)
 8010c5a:	460a      	mov	r2, r1
 8010c5c:	4601      	mov	r1, r0
 8010c5e:	6818      	ldr	r0, [r3, #0]
 8010c60:	f001 ba5e 	b.w	8012120 <_realloc_r>
 8010c64:	200001c4 	.word	0x200001c4

08010c68 <_sbrk_r>:
 8010c68:	b538      	push	{r3, r4, r5, lr}
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	4d05      	ldr	r5, [pc, #20]	; (8010c84 <_sbrk_r+0x1c>)
 8010c6e:	4604      	mov	r4, r0
 8010c70:	4608      	mov	r0, r1
 8010c72:	602b      	str	r3, [r5, #0]
 8010c74:	f7f5 fa9c 	bl	80061b0 <_sbrk>
 8010c78:	1c43      	adds	r3, r0, #1
 8010c7a:	d102      	bne.n	8010c82 <_sbrk_r+0x1a>
 8010c7c:	682b      	ldr	r3, [r5, #0]
 8010c7e:	b103      	cbz	r3, 8010c82 <_sbrk_r+0x1a>
 8010c80:	6023      	str	r3, [r4, #0]
 8010c82:	bd38      	pop	{r3, r4, r5, pc}
 8010c84:	200020d8 	.word	0x200020d8

08010c88 <siprintf>:
 8010c88:	b40e      	push	{r1, r2, r3}
 8010c8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010c8e:	b500      	push	{lr}
 8010c90:	b09c      	sub	sp, #112	; 0x70
 8010c92:	ab1d      	add	r3, sp, #116	; 0x74
 8010c94:	9002      	str	r0, [sp, #8]
 8010c96:	9006      	str	r0, [sp, #24]
 8010c98:	9107      	str	r1, [sp, #28]
 8010c9a:	9104      	str	r1, [sp, #16]
 8010c9c:	4808      	ldr	r0, [pc, #32]	; (8010cc0 <siprintf+0x38>)
 8010c9e:	4909      	ldr	r1, [pc, #36]	; (8010cc4 <siprintf+0x3c>)
 8010ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ca4:	9105      	str	r1, [sp, #20]
 8010ca6:	6800      	ldr	r0, [r0, #0]
 8010ca8:	a902      	add	r1, sp, #8
 8010caa:	9301      	str	r3, [sp, #4]
 8010cac:	f001 faba 	bl	8012224 <_svfiprintf_r>
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	9b02      	ldr	r3, [sp, #8]
 8010cb4:	701a      	strb	r2, [r3, #0]
 8010cb6:	b01c      	add	sp, #112	; 0x70
 8010cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cbc:	b003      	add	sp, #12
 8010cbe:	4770      	bx	lr
 8010cc0:	200001c4 	.word	0x200001c4
 8010cc4:	ffff0208 	.word	0xffff0208

08010cc8 <quorem>:
 8010cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ccc:	6903      	ldr	r3, [r0, #16]
 8010cce:	690c      	ldr	r4, [r1, #16]
 8010cd0:	4607      	mov	r7, r0
 8010cd2:	42a3      	cmp	r3, r4
 8010cd4:	f2c0 8083 	blt.w	8010dde <quorem+0x116>
 8010cd8:	3c01      	subs	r4, #1
 8010cda:	f100 0514 	add.w	r5, r0, #20
 8010cde:	f101 0814 	add.w	r8, r1, #20
 8010ce2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010ce6:	9301      	str	r3, [sp, #4]
 8010ce8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010cec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010cf0:	3301      	adds	r3, #1
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	fbb2 f6f3 	udiv	r6, r2, r3
 8010cf8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010cfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010d00:	d332      	bcc.n	8010d68 <quorem+0xa0>
 8010d02:	f04f 0e00 	mov.w	lr, #0
 8010d06:	4640      	mov	r0, r8
 8010d08:	46ac      	mov	ip, r5
 8010d0a:	46f2      	mov	sl, lr
 8010d0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010d10:	b293      	uxth	r3, r2
 8010d12:	fb06 e303 	mla	r3, r6, r3, lr
 8010d16:	0c12      	lsrs	r2, r2, #16
 8010d18:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010d1c:	fb06 e202 	mla	r2, r6, r2, lr
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	ebaa 0303 	sub.w	r3, sl, r3
 8010d26:	f8dc a000 	ldr.w	sl, [ip]
 8010d2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010d2e:	fa1f fa8a 	uxth.w	sl, sl
 8010d32:	4453      	add	r3, sl
 8010d34:	fa1f fa82 	uxth.w	sl, r2
 8010d38:	f8dc 2000 	ldr.w	r2, [ip]
 8010d3c:	4581      	cmp	r9, r0
 8010d3e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010d42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010d46:	b29b      	uxth	r3, r3
 8010d48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d4c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010d50:	f84c 3b04 	str.w	r3, [ip], #4
 8010d54:	d2da      	bcs.n	8010d0c <quorem+0x44>
 8010d56:	f855 300b 	ldr.w	r3, [r5, fp]
 8010d5a:	b92b      	cbnz	r3, 8010d68 <quorem+0xa0>
 8010d5c:	9b01      	ldr	r3, [sp, #4]
 8010d5e:	3b04      	subs	r3, #4
 8010d60:	429d      	cmp	r5, r3
 8010d62:	461a      	mov	r2, r3
 8010d64:	d32f      	bcc.n	8010dc6 <quorem+0xfe>
 8010d66:	613c      	str	r4, [r7, #16]
 8010d68:	4638      	mov	r0, r7
 8010d6a:	f001 f8c3 	bl	8011ef4 <__mcmp>
 8010d6e:	2800      	cmp	r0, #0
 8010d70:	db25      	blt.n	8010dbe <quorem+0xf6>
 8010d72:	4628      	mov	r0, r5
 8010d74:	f04f 0c00 	mov.w	ip, #0
 8010d78:	3601      	adds	r6, #1
 8010d7a:	f858 1b04 	ldr.w	r1, [r8], #4
 8010d7e:	f8d0 e000 	ldr.w	lr, [r0]
 8010d82:	b28b      	uxth	r3, r1
 8010d84:	ebac 0303 	sub.w	r3, ip, r3
 8010d88:	fa1f f28e 	uxth.w	r2, lr
 8010d8c:	4413      	add	r3, r2
 8010d8e:	0c0a      	lsrs	r2, r1, #16
 8010d90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010d94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010d98:	b29b      	uxth	r3, r3
 8010d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d9e:	45c1      	cmp	r9, r8
 8010da0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010da4:	f840 3b04 	str.w	r3, [r0], #4
 8010da8:	d2e7      	bcs.n	8010d7a <quorem+0xb2>
 8010daa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010dae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010db2:	b922      	cbnz	r2, 8010dbe <quorem+0xf6>
 8010db4:	3b04      	subs	r3, #4
 8010db6:	429d      	cmp	r5, r3
 8010db8:	461a      	mov	r2, r3
 8010dba:	d30a      	bcc.n	8010dd2 <quorem+0x10a>
 8010dbc:	613c      	str	r4, [r7, #16]
 8010dbe:	4630      	mov	r0, r6
 8010dc0:	b003      	add	sp, #12
 8010dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dc6:	6812      	ldr	r2, [r2, #0]
 8010dc8:	3b04      	subs	r3, #4
 8010dca:	2a00      	cmp	r2, #0
 8010dcc:	d1cb      	bne.n	8010d66 <quorem+0x9e>
 8010dce:	3c01      	subs	r4, #1
 8010dd0:	e7c6      	b.n	8010d60 <quorem+0x98>
 8010dd2:	6812      	ldr	r2, [r2, #0]
 8010dd4:	3b04      	subs	r3, #4
 8010dd6:	2a00      	cmp	r2, #0
 8010dd8:	d1f0      	bne.n	8010dbc <quorem+0xf4>
 8010dda:	3c01      	subs	r4, #1
 8010ddc:	e7eb      	b.n	8010db6 <quorem+0xee>
 8010dde:	2000      	movs	r0, #0
 8010de0:	e7ee      	b.n	8010dc0 <quorem+0xf8>
 8010de2:	0000      	movs	r0, r0
 8010de4:	0000      	movs	r0, r0
	...

08010de8 <_dtoa_r>:
 8010de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dec:	4616      	mov	r6, r2
 8010dee:	461f      	mov	r7, r3
 8010df0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010df2:	b099      	sub	sp, #100	; 0x64
 8010df4:	4605      	mov	r5, r0
 8010df6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010dfa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8010dfe:	b974      	cbnz	r4, 8010e1e <_dtoa_r+0x36>
 8010e00:	2010      	movs	r0, #16
 8010e02:	f7ff f9ef 	bl	80101e4 <malloc>
 8010e06:	4602      	mov	r2, r0
 8010e08:	6268      	str	r0, [r5, #36]	; 0x24
 8010e0a:	b920      	cbnz	r0, 8010e16 <_dtoa_r+0x2e>
 8010e0c:	21ea      	movs	r1, #234	; 0xea
 8010e0e:	4bae      	ldr	r3, [pc, #696]	; (80110c8 <_dtoa_r+0x2e0>)
 8010e10:	48ae      	ldr	r0, [pc, #696]	; (80110cc <_dtoa_r+0x2e4>)
 8010e12:	f001 fb07 	bl	8012424 <__assert_func>
 8010e16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e1a:	6004      	str	r4, [r0, #0]
 8010e1c:	60c4      	str	r4, [r0, #12]
 8010e1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010e20:	6819      	ldr	r1, [r3, #0]
 8010e22:	b151      	cbz	r1, 8010e3a <_dtoa_r+0x52>
 8010e24:	685a      	ldr	r2, [r3, #4]
 8010e26:	2301      	movs	r3, #1
 8010e28:	4093      	lsls	r3, r2
 8010e2a:	604a      	str	r2, [r1, #4]
 8010e2c:	608b      	str	r3, [r1, #8]
 8010e2e:	4628      	mov	r0, r5
 8010e30:	f000 fe26 	bl	8011a80 <_Bfree>
 8010e34:	2200      	movs	r2, #0
 8010e36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010e38:	601a      	str	r2, [r3, #0]
 8010e3a:	1e3b      	subs	r3, r7, #0
 8010e3c:	bfaf      	iteee	ge
 8010e3e:	2300      	movge	r3, #0
 8010e40:	2201      	movlt	r2, #1
 8010e42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010e46:	9305      	strlt	r3, [sp, #20]
 8010e48:	bfa8      	it	ge
 8010e4a:	f8c8 3000 	strge.w	r3, [r8]
 8010e4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8010e52:	4b9f      	ldr	r3, [pc, #636]	; (80110d0 <_dtoa_r+0x2e8>)
 8010e54:	bfb8      	it	lt
 8010e56:	f8c8 2000 	strlt.w	r2, [r8]
 8010e5a:	ea33 0309 	bics.w	r3, r3, r9
 8010e5e:	d119      	bne.n	8010e94 <_dtoa_r+0xac>
 8010e60:	f242 730f 	movw	r3, #9999	; 0x270f
 8010e64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010e66:	6013      	str	r3, [r2, #0]
 8010e68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010e6c:	4333      	orrs	r3, r6
 8010e6e:	f000 8580 	beq.w	8011972 <_dtoa_r+0xb8a>
 8010e72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010e74:	b953      	cbnz	r3, 8010e8c <_dtoa_r+0xa4>
 8010e76:	4b97      	ldr	r3, [pc, #604]	; (80110d4 <_dtoa_r+0x2ec>)
 8010e78:	e022      	b.n	8010ec0 <_dtoa_r+0xd8>
 8010e7a:	4b97      	ldr	r3, [pc, #604]	; (80110d8 <_dtoa_r+0x2f0>)
 8010e7c:	9308      	str	r3, [sp, #32]
 8010e7e:	3308      	adds	r3, #8
 8010e80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010e82:	6013      	str	r3, [r2, #0]
 8010e84:	9808      	ldr	r0, [sp, #32]
 8010e86:	b019      	add	sp, #100	; 0x64
 8010e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e8c:	4b91      	ldr	r3, [pc, #580]	; (80110d4 <_dtoa_r+0x2ec>)
 8010e8e:	9308      	str	r3, [sp, #32]
 8010e90:	3303      	adds	r3, #3
 8010e92:	e7f5      	b.n	8010e80 <_dtoa_r+0x98>
 8010e94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010e98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8010e9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	f7ef fdbc 	bl	8000a20 <__aeabi_dcmpeq>
 8010ea8:	4680      	mov	r8, r0
 8010eaa:	b158      	cbz	r0, 8010ec4 <_dtoa_r+0xdc>
 8010eac:	2301      	movs	r3, #1
 8010eae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010eb0:	6013      	str	r3, [r2, #0]
 8010eb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	f000 8559 	beq.w	801196c <_dtoa_r+0xb84>
 8010eba:	4888      	ldr	r0, [pc, #544]	; (80110dc <_dtoa_r+0x2f4>)
 8010ebc:	6018      	str	r0, [r3, #0]
 8010ebe:	1e43      	subs	r3, r0, #1
 8010ec0:	9308      	str	r3, [sp, #32]
 8010ec2:	e7df      	b.n	8010e84 <_dtoa_r+0x9c>
 8010ec4:	ab16      	add	r3, sp, #88	; 0x58
 8010ec6:	9301      	str	r3, [sp, #4]
 8010ec8:	ab17      	add	r3, sp, #92	; 0x5c
 8010eca:	9300      	str	r3, [sp, #0]
 8010ecc:	4628      	mov	r0, r5
 8010ece:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010ed2:	f001 f8bb 	bl	801204c <__d2b>
 8010ed6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010eda:	4682      	mov	sl, r0
 8010edc:	2c00      	cmp	r4, #0
 8010ede:	d07e      	beq.n	8010fde <_dtoa_r+0x1f6>
 8010ee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ee6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8010eea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010eee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8010ef2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010ef6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8010efa:	2200      	movs	r2, #0
 8010efc:	4b78      	ldr	r3, [pc, #480]	; (80110e0 <_dtoa_r+0x2f8>)
 8010efe:	f7ef f96f 	bl	80001e0 <__aeabi_dsub>
 8010f02:	a36b      	add	r3, pc, #428	; (adr r3, 80110b0 <_dtoa_r+0x2c8>)
 8010f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f08:	f7ef fb22 	bl	8000550 <__aeabi_dmul>
 8010f0c:	a36a      	add	r3, pc, #424	; (adr r3, 80110b8 <_dtoa_r+0x2d0>)
 8010f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f12:	f7ef f967 	bl	80001e4 <__adddf3>
 8010f16:	4606      	mov	r6, r0
 8010f18:	4620      	mov	r0, r4
 8010f1a:	460f      	mov	r7, r1
 8010f1c:	f7ef faae 	bl	800047c <__aeabi_i2d>
 8010f20:	a367      	add	r3, pc, #412	; (adr r3, 80110c0 <_dtoa_r+0x2d8>)
 8010f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f26:	f7ef fb13 	bl	8000550 <__aeabi_dmul>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	4630      	mov	r0, r6
 8010f30:	4639      	mov	r1, r7
 8010f32:	f7ef f957 	bl	80001e4 <__adddf3>
 8010f36:	4606      	mov	r6, r0
 8010f38:	460f      	mov	r7, r1
 8010f3a:	f7ef fdb9 	bl	8000ab0 <__aeabi_d2iz>
 8010f3e:	2200      	movs	r2, #0
 8010f40:	4681      	mov	r9, r0
 8010f42:	2300      	movs	r3, #0
 8010f44:	4630      	mov	r0, r6
 8010f46:	4639      	mov	r1, r7
 8010f48:	f7ef fd74 	bl	8000a34 <__aeabi_dcmplt>
 8010f4c:	b148      	cbz	r0, 8010f62 <_dtoa_r+0x17a>
 8010f4e:	4648      	mov	r0, r9
 8010f50:	f7ef fa94 	bl	800047c <__aeabi_i2d>
 8010f54:	4632      	mov	r2, r6
 8010f56:	463b      	mov	r3, r7
 8010f58:	f7ef fd62 	bl	8000a20 <__aeabi_dcmpeq>
 8010f5c:	b908      	cbnz	r0, 8010f62 <_dtoa_r+0x17a>
 8010f5e:	f109 39ff 	add.w	r9, r9, #4294967295
 8010f62:	f1b9 0f16 	cmp.w	r9, #22
 8010f66:	d857      	bhi.n	8011018 <_dtoa_r+0x230>
 8010f68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010f6c:	4b5d      	ldr	r3, [pc, #372]	; (80110e4 <_dtoa_r+0x2fc>)
 8010f6e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f76:	f7ef fd5d 	bl	8000a34 <__aeabi_dcmplt>
 8010f7a:	2800      	cmp	r0, #0
 8010f7c:	d04e      	beq.n	801101c <_dtoa_r+0x234>
 8010f7e:	2300      	movs	r3, #0
 8010f80:	f109 39ff 	add.w	r9, r9, #4294967295
 8010f84:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010f88:	1b1c      	subs	r4, r3, r4
 8010f8a:	1e63      	subs	r3, r4, #1
 8010f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8010f8e:	bf49      	itett	mi
 8010f90:	f1c4 0301 	rsbmi	r3, r4, #1
 8010f94:	2300      	movpl	r3, #0
 8010f96:	9306      	strmi	r3, [sp, #24]
 8010f98:	2300      	movmi	r3, #0
 8010f9a:	bf54      	ite	pl
 8010f9c:	9306      	strpl	r3, [sp, #24]
 8010f9e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8010fa0:	f1b9 0f00 	cmp.w	r9, #0
 8010fa4:	db3c      	blt.n	8011020 <_dtoa_r+0x238>
 8010fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fa8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010fac:	444b      	add	r3, r9
 8010fae:	9309      	str	r3, [sp, #36]	; 0x24
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8010fb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010fb6:	2b09      	cmp	r3, #9
 8010fb8:	d86c      	bhi.n	8011094 <_dtoa_r+0x2ac>
 8010fba:	2b05      	cmp	r3, #5
 8010fbc:	bfc4      	itt	gt
 8010fbe:	3b04      	subgt	r3, #4
 8010fc0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8010fc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010fc4:	bfc8      	it	gt
 8010fc6:	2400      	movgt	r4, #0
 8010fc8:	f1a3 0302 	sub.w	r3, r3, #2
 8010fcc:	bfd8      	it	le
 8010fce:	2401      	movle	r4, #1
 8010fd0:	2b03      	cmp	r3, #3
 8010fd2:	f200 808b 	bhi.w	80110ec <_dtoa_r+0x304>
 8010fd6:	e8df f003 	tbb	[pc, r3]
 8010fda:	4f2d      	.short	0x4f2d
 8010fdc:	5b4d      	.short	0x5b4d
 8010fde:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8010fe2:	441c      	add	r4, r3
 8010fe4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8010fe8:	2b20      	cmp	r3, #32
 8010fea:	bfc3      	ittte	gt
 8010fec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010ff0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8010ff4:	fa09 f303 	lslgt.w	r3, r9, r3
 8010ff8:	f1c3 0320 	rsble	r3, r3, #32
 8010ffc:	bfc6      	itte	gt
 8010ffe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011002:	4318      	orrgt	r0, r3
 8011004:	fa06 f003 	lslle.w	r0, r6, r3
 8011008:	f7ef fa28 	bl	800045c <__aeabi_ui2d>
 801100c:	2301      	movs	r3, #1
 801100e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8011012:	3c01      	subs	r4, #1
 8011014:	9313      	str	r3, [sp, #76]	; 0x4c
 8011016:	e770      	b.n	8010efa <_dtoa_r+0x112>
 8011018:	2301      	movs	r3, #1
 801101a:	e7b3      	b.n	8010f84 <_dtoa_r+0x19c>
 801101c:	900f      	str	r0, [sp, #60]	; 0x3c
 801101e:	e7b2      	b.n	8010f86 <_dtoa_r+0x19e>
 8011020:	9b06      	ldr	r3, [sp, #24]
 8011022:	eba3 0309 	sub.w	r3, r3, r9
 8011026:	9306      	str	r3, [sp, #24]
 8011028:	f1c9 0300 	rsb	r3, r9, #0
 801102c:	930a      	str	r3, [sp, #40]	; 0x28
 801102e:	2300      	movs	r3, #0
 8011030:	930e      	str	r3, [sp, #56]	; 0x38
 8011032:	e7bf      	b.n	8010fb4 <_dtoa_r+0x1cc>
 8011034:	2300      	movs	r3, #0
 8011036:	930b      	str	r3, [sp, #44]	; 0x2c
 8011038:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801103a:	2b00      	cmp	r3, #0
 801103c:	dc59      	bgt.n	80110f2 <_dtoa_r+0x30a>
 801103e:	f04f 0b01 	mov.w	fp, #1
 8011042:	465b      	mov	r3, fp
 8011044:	f8cd b008 	str.w	fp, [sp, #8]
 8011048:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 801104c:	2200      	movs	r2, #0
 801104e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8011050:	6042      	str	r2, [r0, #4]
 8011052:	2204      	movs	r2, #4
 8011054:	f102 0614 	add.w	r6, r2, #20
 8011058:	429e      	cmp	r6, r3
 801105a:	6841      	ldr	r1, [r0, #4]
 801105c:	d94f      	bls.n	80110fe <_dtoa_r+0x316>
 801105e:	4628      	mov	r0, r5
 8011060:	f000 fcce 	bl	8011a00 <_Balloc>
 8011064:	9008      	str	r0, [sp, #32]
 8011066:	2800      	cmp	r0, #0
 8011068:	d14d      	bne.n	8011106 <_dtoa_r+0x31e>
 801106a:	4602      	mov	r2, r0
 801106c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011070:	4b1d      	ldr	r3, [pc, #116]	; (80110e8 <_dtoa_r+0x300>)
 8011072:	e6cd      	b.n	8010e10 <_dtoa_r+0x28>
 8011074:	2301      	movs	r3, #1
 8011076:	e7de      	b.n	8011036 <_dtoa_r+0x24e>
 8011078:	2300      	movs	r3, #0
 801107a:	930b      	str	r3, [sp, #44]	; 0x2c
 801107c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801107e:	eb09 0b03 	add.w	fp, r9, r3
 8011082:	f10b 0301 	add.w	r3, fp, #1
 8011086:	2b01      	cmp	r3, #1
 8011088:	9302      	str	r3, [sp, #8]
 801108a:	bfb8      	it	lt
 801108c:	2301      	movlt	r3, #1
 801108e:	e7dd      	b.n	801104c <_dtoa_r+0x264>
 8011090:	2301      	movs	r3, #1
 8011092:	e7f2      	b.n	801107a <_dtoa_r+0x292>
 8011094:	2401      	movs	r4, #1
 8011096:	2300      	movs	r3, #0
 8011098:	940b      	str	r4, [sp, #44]	; 0x2c
 801109a:	9322      	str	r3, [sp, #136]	; 0x88
 801109c:	f04f 3bff 	mov.w	fp, #4294967295
 80110a0:	2200      	movs	r2, #0
 80110a2:	2312      	movs	r3, #18
 80110a4:	f8cd b008 	str.w	fp, [sp, #8]
 80110a8:	9223      	str	r2, [sp, #140]	; 0x8c
 80110aa:	e7cf      	b.n	801104c <_dtoa_r+0x264>
 80110ac:	f3af 8000 	nop.w
 80110b0:	636f4361 	.word	0x636f4361
 80110b4:	3fd287a7 	.word	0x3fd287a7
 80110b8:	8b60c8b3 	.word	0x8b60c8b3
 80110bc:	3fc68a28 	.word	0x3fc68a28
 80110c0:	509f79fb 	.word	0x509f79fb
 80110c4:	3fd34413 	.word	0x3fd34413
 80110c8:	08013ed5 	.word	0x08013ed5
 80110cc:	08013eec 	.word	0x08013eec
 80110d0:	7ff00000 	.word	0x7ff00000
 80110d4:	08013ed1 	.word	0x08013ed1
 80110d8:	08013ec8 	.word	0x08013ec8
 80110dc:	08013ea5 	.word	0x08013ea5
 80110e0:	3ff80000 	.word	0x3ff80000
 80110e4:	08013fe8 	.word	0x08013fe8
 80110e8:	08013f4b 	.word	0x08013f4b
 80110ec:	2301      	movs	r3, #1
 80110ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80110f0:	e7d4      	b.n	801109c <_dtoa_r+0x2b4>
 80110f2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80110f6:	465b      	mov	r3, fp
 80110f8:	f8cd b008 	str.w	fp, [sp, #8]
 80110fc:	e7a6      	b.n	801104c <_dtoa_r+0x264>
 80110fe:	3101      	adds	r1, #1
 8011100:	6041      	str	r1, [r0, #4]
 8011102:	0052      	lsls	r2, r2, #1
 8011104:	e7a6      	b.n	8011054 <_dtoa_r+0x26c>
 8011106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011108:	9a08      	ldr	r2, [sp, #32]
 801110a:	601a      	str	r2, [r3, #0]
 801110c:	9b02      	ldr	r3, [sp, #8]
 801110e:	2b0e      	cmp	r3, #14
 8011110:	f200 80a8 	bhi.w	8011264 <_dtoa_r+0x47c>
 8011114:	2c00      	cmp	r4, #0
 8011116:	f000 80a5 	beq.w	8011264 <_dtoa_r+0x47c>
 801111a:	f1b9 0f00 	cmp.w	r9, #0
 801111e:	dd34      	ble.n	801118a <_dtoa_r+0x3a2>
 8011120:	4a9a      	ldr	r2, [pc, #616]	; (801138c <_dtoa_r+0x5a4>)
 8011122:	f009 030f 	and.w	r3, r9, #15
 8011126:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801112a:	f419 7f80 	tst.w	r9, #256	; 0x100
 801112e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011132:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8011136:	ea4f 1429 	mov.w	r4, r9, asr #4
 801113a:	d016      	beq.n	801116a <_dtoa_r+0x382>
 801113c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011140:	4b93      	ldr	r3, [pc, #588]	; (8011390 <_dtoa_r+0x5a8>)
 8011142:	2703      	movs	r7, #3
 8011144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011148:	f7ef fb2c 	bl	80007a4 <__aeabi_ddiv>
 801114c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011150:	f004 040f 	and.w	r4, r4, #15
 8011154:	4e8e      	ldr	r6, [pc, #568]	; (8011390 <_dtoa_r+0x5a8>)
 8011156:	b954      	cbnz	r4, 801116e <_dtoa_r+0x386>
 8011158:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801115c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011160:	f7ef fb20 	bl	80007a4 <__aeabi_ddiv>
 8011164:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011168:	e029      	b.n	80111be <_dtoa_r+0x3d6>
 801116a:	2702      	movs	r7, #2
 801116c:	e7f2      	b.n	8011154 <_dtoa_r+0x36c>
 801116e:	07e1      	lsls	r1, r4, #31
 8011170:	d508      	bpl.n	8011184 <_dtoa_r+0x39c>
 8011172:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011176:	e9d6 2300 	ldrd	r2, r3, [r6]
 801117a:	f7ef f9e9 	bl	8000550 <__aeabi_dmul>
 801117e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011182:	3701      	adds	r7, #1
 8011184:	1064      	asrs	r4, r4, #1
 8011186:	3608      	adds	r6, #8
 8011188:	e7e5      	b.n	8011156 <_dtoa_r+0x36e>
 801118a:	f000 80a5 	beq.w	80112d8 <_dtoa_r+0x4f0>
 801118e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011192:	f1c9 0400 	rsb	r4, r9, #0
 8011196:	4b7d      	ldr	r3, [pc, #500]	; (801138c <_dtoa_r+0x5a4>)
 8011198:	f004 020f 	and.w	r2, r4, #15
 801119c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80111a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a4:	f7ef f9d4 	bl	8000550 <__aeabi_dmul>
 80111a8:	2702      	movs	r7, #2
 80111aa:	2300      	movs	r3, #0
 80111ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80111b0:	4e77      	ldr	r6, [pc, #476]	; (8011390 <_dtoa_r+0x5a8>)
 80111b2:	1124      	asrs	r4, r4, #4
 80111b4:	2c00      	cmp	r4, #0
 80111b6:	f040 8084 	bne.w	80112c2 <_dtoa_r+0x4da>
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d1d2      	bne.n	8011164 <_dtoa_r+0x37c>
 80111be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	f000 808b 	beq.w	80112dc <_dtoa_r+0x4f4>
 80111c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80111ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80111ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80111d2:	2200      	movs	r2, #0
 80111d4:	4b6f      	ldr	r3, [pc, #444]	; (8011394 <_dtoa_r+0x5ac>)
 80111d6:	f7ef fc2d 	bl	8000a34 <__aeabi_dcmplt>
 80111da:	2800      	cmp	r0, #0
 80111dc:	d07e      	beq.n	80112dc <_dtoa_r+0x4f4>
 80111de:	9b02      	ldr	r3, [sp, #8]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d07b      	beq.n	80112dc <_dtoa_r+0x4f4>
 80111e4:	f1bb 0f00 	cmp.w	fp, #0
 80111e8:	dd38      	ble.n	801125c <_dtoa_r+0x474>
 80111ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80111ee:	2200      	movs	r2, #0
 80111f0:	4b69      	ldr	r3, [pc, #420]	; (8011398 <_dtoa_r+0x5b0>)
 80111f2:	f7ef f9ad 	bl	8000550 <__aeabi_dmul>
 80111f6:	465c      	mov	r4, fp
 80111f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80111fc:	f109 38ff 	add.w	r8, r9, #4294967295
 8011200:	3701      	adds	r7, #1
 8011202:	4638      	mov	r0, r7
 8011204:	f7ef f93a 	bl	800047c <__aeabi_i2d>
 8011208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801120c:	f7ef f9a0 	bl	8000550 <__aeabi_dmul>
 8011210:	2200      	movs	r2, #0
 8011212:	4b62      	ldr	r3, [pc, #392]	; (801139c <_dtoa_r+0x5b4>)
 8011214:	f7ee ffe6 	bl	80001e4 <__adddf3>
 8011218:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801121c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011220:	9611      	str	r6, [sp, #68]	; 0x44
 8011222:	2c00      	cmp	r4, #0
 8011224:	d15d      	bne.n	80112e2 <_dtoa_r+0x4fa>
 8011226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801122a:	2200      	movs	r2, #0
 801122c:	4b5c      	ldr	r3, [pc, #368]	; (80113a0 <_dtoa_r+0x5b8>)
 801122e:	f7ee ffd7 	bl	80001e0 <__aeabi_dsub>
 8011232:	4602      	mov	r2, r0
 8011234:	460b      	mov	r3, r1
 8011236:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801123a:	4633      	mov	r3, r6
 801123c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801123e:	f7ef fc17 	bl	8000a70 <__aeabi_dcmpgt>
 8011242:	2800      	cmp	r0, #0
 8011244:	f040 829e 	bne.w	8011784 <_dtoa_r+0x99c>
 8011248:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801124c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801124e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011252:	f7ef fbef 	bl	8000a34 <__aeabi_dcmplt>
 8011256:	2800      	cmp	r0, #0
 8011258:	f040 8292 	bne.w	8011780 <_dtoa_r+0x998>
 801125c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8011260:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011266:	2b00      	cmp	r3, #0
 8011268:	f2c0 8153 	blt.w	8011512 <_dtoa_r+0x72a>
 801126c:	f1b9 0f0e 	cmp.w	r9, #14
 8011270:	f300 814f 	bgt.w	8011512 <_dtoa_r+0x72a>
 8011274:	4b45      	ldr	r3, [pc, #276]	; (801138c <_dtoa_r+0x5a4>)
 8011276:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801127a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801127e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8011282:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011284:	2b00      	cmp	r3, #0
 8011286:	f280 80db 	bge.w	8011440 <_dtoa_r+0x658>
 801128a:	9b02      	ldr	r3, [sp, #8]
 801128c:	2b00      	cmp	r3, #0
 801128e:	f300 80d7 	bgt.w	8011440 <_dtoa_r+0x658>
 8011292:	f040 8274 	bne.w	801177e <_dtoa_r+0x996>
 8011296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801129a:	2200      	movs	r2, #0
 801129c:	4b40      	ldr	r3, [pc, #256]	; (80113a0 <_dtoa_r+0x5b8>)
 801129e:	f7ef f957 	bl	8000550 <__aeabi_dmul>
 80112a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112a6:	f7ef fbd9 	bl	8000a5c <__aeabi_dcmpge>
 80112aa:	9c02      	ldr	r4, [sp, #8]
 80112ac:	4626      	mov	r6, r4
 80112ae:	2800      	cmp	r0, #0
 80112b0:	f040 824a 	bne.w	8011748 <_dtoa_r+0x960>
 80112b4:	2331      	movs	r3, #49	; 0x31
 80112b6:	9f08      	ldr	r7, [sp, #32]
 80112b8:	f109 0901 	add.w	r9, r9, #1
 80112bc:	f807 3b01 	strb.w	r3, [r7], #1
 80112c0:	e246      	b.n	8011750 <_dtoa_r+0x968>
 80112c2:	07e2      	lsls	r2, r4, #31
 80112c4:	d505      	bpl.n	80112d2 <_dtoa_r+0x4ea>
 80112c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80112ca:	f7ef f941 	bl	8000550 <__aeabi_dmul>
 80112ce:	2301      	movs	r3, #1
 80112d0:	3701      	adds	r7, #1
 80112d2:	1064      	asrs	r4, r4, #1
 80112d4:	3608      	adds	r6, #8
 80112d6:	e76d      	b.n	80111b4 <_dtoa_r+0x3cc>
 80112d8:	2702      	movs	r7, #2
 80112da:	e770      	b.n	80111be <_dtoa_r+0x3d6>
 80112dc:	46c8      	mov	r8, r9
 80112de:	9c02      	ldr	r4, [sp, #8]
 80112e0:	e78f      	b.n	8011202 <_dtoa_r+0x41a>
 80112e2:	9908      	ldr	r1, [sp, #32]
 80112e4:	4b29      	ldr	r3, [pc, #164]	; (801138c <_dtoa_r+0x5a4>)
 80112e6:	4421      	add	r1, r4
 80112e8:	9112      	str	r1, [sp, #72]	; 0x48
 80112ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80112ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80112f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80112f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80112f8:	2900      	cmp	r1, #0
 80112fa:	d055      	beq.n	80113a8 <_dtoa_r+0x5c0>
 80112fc:	2000      	movs	r0, #0
 80112fe:	4929      	ldr	r1, [pc, #164]	; (80113a4 <_dtoa_r+0x5bc>)
 8011300:	f7ef fa50 	bl	80007a4 <__aeabi_ddiv>
 8011304:	463b      	mov	r3, r7
 8011306:	4632      	mov	r2, r6
 8011308:	f7ee ff6a 	bl	80001e0 <__aeabi_dsub>
 801130c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011310:	9f08      	ldr	r7, [sp, #32]
 8011312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011316:	f7ef fbcb 	bl	8000ab0 <__aeabi_d2iz>
 801131a:	4604      	mov	r4, r0
 801131c:	f7ef f8ae 	bl	800047c <__aeabi_i2d>
 8011320:	4602      	mov	r2, r0
 8011322:	460b      	mov	r3, r1
 8011324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011328:	f7ee ff5a 	bl	80001e0 <__aeabi_dsub>
 801132c:	4602      	mov	r2, r0
 801132e:	460b      	mov	r3, r1
 8011330:	3430      	adds	r4, #48	; 0x30
 8011332:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011336:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801133a:	f807 4b01 	strb.w	r4, [r7], #1
 801133e:	f7ef fb79 	bl	8000a34 <__aeabi_dcmplt>
 8011342:	2800      	cmp	r0, #0
 8011344:	d174      	bne.n	8011430 <_dtoa_r+0x648>
 8011346:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801134a:	2000      	movs	r0, #0
 801134c:	4911      	ldr	r1, [pc, #68]	; (8011394 <_dtoa_r+0x5ac>)
 801134e:	f7ee ff47 	bl	80001e0 <__aeabi_dsub>
 8011352:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011356:	f7ef fb6d 	bl	8000a34 <__aeabi_dcmplt>
 801135a:	2800      	cmp	r0, #0
 801135c:	f040 80b6 	bne.w	80114cc <_dtoa_r+0x6e4>
 8011360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011362:	429f      	cmp	r7, r3
 8011364:	f43f af7a 	beq.w	801125c <_dtoa_r+0x474>
 8011368:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801136c:	2200      	movs	r2, #0
 801136e:	4b0a      	ldr	r3, [pc, #40]	; (8011398 <_dtoa_r+0x5b0>)
 8011370:	f7ef f8ee 	bl	8000550 <__aeabi_dmul>
 8011374:	2200      	movs	r2, #0
 8011376:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801137a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801137e:	4b06      	ldr	r3, [pc, #24]	; (8011398 <_dtoa_r+0x5b0>)
 8011380:	f7ef f8e6 	bl	8000550 <__aeabi_dmul>
 8011384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011388:	e7c3      	b.n	8011312 <_dtoa_r+0x52a>
 801138a:	bf00      	nop
 801138c:	08013fe8 	.word	0x08013fe8
 8011390:	08013fc0 	.word	0x08013fc0
 8011394:	3ff00000 	.word	0x3ff00000
 8011398:	40240000 	.word	0x40240000
 801139c:	401c0000 	.word	0x401c0000
 80113a0:	40140000 	.word	0x40140000
 80113a4:	3fe00000 	.word	0x3fe00000
 80113a8:	4630      	mov	r0, r6
 80113aa:	4639      	mov	r1, r7
 80113ac:	f7ef f8d0 	bl	8000550 <__aeabi_dmul>
 80113b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80113b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80113b6:	9c08      	ldr	r4, [sp, #32]
 80113b8:	9314      	str	r3, [sp, #80]	; 0x50
 80113ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80113be:	f7ef fb77 	bl	8000ab0 <__aeabi_d2iz>
 80113c2:	9015      	str	r0, [sp, #84]	; 0x54
 80113c4:	f7ef f85a 	bl	800047c <__aeabi_i2d>
 80113c8:	4602      	mov	r2, r0
 80113ca:	460b      	mov	r3, r1
 80113cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80113d0:	f7ee ff06 	bl	80001e0 <__aeabi_dsub>
 80113d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80113d6:	4606      	mov	r6, r0
 80113d8:	3330      	adds	r3, #48	; 0x30
 80113da:	f804 3b01 	strb.w	r3, [r4], #1
 80113de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80113e0:	460f      	mov	r7, r1
 80113e2:	429c      	cmp	r4, r3
 80113e4:	f04f 0200 	mov.w	r2, #0
 80113e8:	d124      	bne.n	8011434 <_dtoa_r+0x64c>
 80113ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80113ee:	4bb3      	ldr	r3, [pc, #716]	; (80116bc <_dtoa_r+0x8d4>)
 80113f0:	f7ee fef8 	bl	80001e4 <__adddf3>
 80113f4:	4602      	mov	r2, r0
 80113f6:	460b      	mov	r3, r1
 80113f8:	4630      	mov	r0, r6
 80113fa:	4639      	mov	r1, r7
 80113fc:	f7ef fb38 	bl	8000a70 <__aeabi_dcmpgt>
 8011400:	2800      	cmp	r0, #0
 8011402:	d162      	bne.n	80114ca <_dtoa_r+0x6e2>
 8011404:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011408:	2000      	movs	r0, #0
 801140a:	49ac      	ldr	r1, [pc, #688]	; (80116bc <_dtoa_r+0x8d4>)
 801140c:	f7ee fee8 	bl	80001e0 <__aeabi_dsub>
 8011410:	4602      	mov	r2, r0
 8011412:	460b      	mov	r3, r1
 8011414:	4630      	mov	r0, r6
 8011416:	4639      	mov	r1, r7
 8011418:	f7ef fb0c 	bl	8000a34 <__aeabi_dcmplt>
 801141c:	2800      	cmp	r0, #0
 801141e:	f43f af1d 	beq.w	801125c <_dtoa_r+0x474>
 8011422:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8011424:	1e7b      	subs	r3, r7, #1
 8011426:	9314      	str	r3, [sp, #80]	; 0x50
 8011428:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801142c:	2b30      	cmp	r3, #48	; 0x30
 801142e:	d0f8      	beq.n	8011422 <_dtoa_r+0x63a>
 8011430:	46c1      	mov	r9, r8
 8011432:	e03a      	b.n	80114aa <_dtoa_r+0x6c2>
 8011434:	4ba2      	ldr	r3, [pc, #648]	; (80116c0 <_dtoa_r+0x8d8>)
 8011436:	f7ef f88b 	bl	8000550 <__aeabi_dmul>
 801143a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801143e:	e7bc      	b.n	80113ba <_dtoa_r+0x5d2>
 8011440:	9f08      	ldr	r7, [sp, #32]
 8011442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011446:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801144a:	f7ef f9ab 	bl	80007a4 <__aeabi_ddiv>
 801144e:	f7ef fb2f 	bl	8000ab0 <__aeabi_d2iz>
 8011452:	4604      	mov	r4, r0
 8011454:	f7ef f812 	bl	800047c <__aeabi_i2d>
 8011458:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801145c:	f7ef f878 	bl	8000550 <__aeabi_dmul>
 8011460:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8011464:	460b      	mov	r3, r1
 8011466:	4602      	mov	r2, r0
 8011468:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801146c:	f7ee feb8 	bl	80001e0 <__aeabi_dsub>
 8011470:	f807 6b01 	strb.w	r6, [r7], #1
 8011474:	9e08      	ldr	r6, [sp, #32]
 8011476:	9b02      	ldr	r3, [sp, #8]
 8011478:	1bbe      	subs	r6, r7, r6
 801147a:	42b3      	cmp	r3, r6
 801147c:	d13a      	bne.n	80114f4 <_dtoa_r+0x70c>
 801147e:	4602      	mov	r2, r0
 8011480:	460b      	mov	r3, r1
 8011482:	f7ee feaf 	bl	80001e4 <__adddf3>
 8011486:	4602      	mov	r2, r0
 8011488:	460b      	mov	r3, r1
 801148a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801148e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011492:	f7ef faed 	bl	8000a70 <__aeabi_dcmpgt>
 8011496:	bb58      	cbnz	r0, 80114f0 <_dtoa_r+0x708>
 8011498:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801149c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114a0:	f7ef fabe 	bl	8000a20 <__aeabi_dcmpeq>
 80114a4:	b108      	cbz	r0, 80114aa <_dtoa_r+0x6c2>
 80114a6:	07e1      	lsls	r1, r4, #31
 80114a8:	d422      	bmi.n	80114f0 <_dtoa_r+0x708>
 80114aa:	4628      	mov	r0, r5
 80114ac:	4651      	mov	r1, sl
 80114ae:	f000 fae7 	bl	8011a80 <_Bfree>
 80114b2:	2300      	movs	r3, #0
 80114b4:	703b      	strb	r3, [r7, #0]
 80114b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80114b8:	f109 0001 	add.w	r0, r9, #1
 80114bc:	6018      	str	r0, [r3, #0]
 80114be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	f43f acdf 	beq.w	8010e84 <_dtoa_r+0x9c>
 80114c6:	601f      	str	r7, [r3, #0]
 80114c8:	e4dc      	b.n	8010e84 <_dtoa_r+0x9c>
 80114ca:	4627      	mov	r7, r4
 80114cc:	463b      	mov	r3, r7
 80114ce:	461f      	mov	r7, r3
 80114d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80114d4:	2a39      	cmp	r2, #57	; 0x39
 80114d6:	d107      	bne.n	80114e8 <_dtoa_r+0x700>
 80114d8:	9a08      	ldr	r2, [sp, #32]
 80114da:	429a      	cmp	r2, r3
 80114dc:	d1f7      	bne.n	80114ce <_dtoa_r+0x6e6>
 80114de:	2230      	movs	r2, #48	; 0x30
 80114e0:	9908      	ldr	r1, [sp, #32]
 80114e2:	f108 0801 	add.w	r8, r8, #1
 80114e6:	700a      	strb	r2, [r1, #0]
 80114e8:	781a      	ldrb	r2, [r3, #0]
 80114ea:	3201      	adds	r2, #1
 80114ec:	701a      	strb	r2, [r3, #0]
 80114ee:	e79f      	b.n	8011430 <_dtoa_r+0x648>
 80114f0:	46c8      	mov	r8, r9
 80114f2:	e7eb      	b.n	80114cc <_dtoa_r+0x6e4>
 80114f4:	2200      	movs	r2, #0
 80114f6:	4b72      	ldr	r3, [pc, #456]	; (80116c0 <_dtoa_r+0x8d8>)
 80114f8:	f7ef f82a 	bl	8000550 <__aeabi_dmul>
 80114fc:	4602      	mov	r2, r0
 80114fe:	460b      	mov	r3, r1
 8011500:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011504:	2200      	movs	r2, #0
 8011506:	2300      	movs	r3, #0
 8011508:	f7ef fa8a 	bl	8000a20 <__aeabi_dcmpeq>
 801150c:	2800      	cmp	r0, #0
 801150e:	d098      	beq.n	8011442 <_dtoa_r+0x65a>
 8011510:	e7cb      	b.n	80114aa <_dtoa_r+0x6c2>
 8011512:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011514:	2a00      	cmp	r2, #0
 8011516:	f000 80cd 	beq.w	80116b4 <_dtoa_r+0x8cc>
 801151a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801151c:	2a01      	cmp	r2, #1
 801151e:	f300 80af 	bgt.w	8011680 <_dtoa_r+0x898>
 8011522:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011524:	2a00      	cmp	r2, #0
 8011526:	f000 80a7 	beq.w	8011678 <_dtoa_r+0x890>
 801152a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801152e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011530:	9f06      	ldr	r7, [sp, #24]
 8011532:	9a06      	ldr	r2, [sp, #24]
 8011534:	2101      	movs	r1, #1
 8011536:	441a      	add	r2, r3
 8011538:	9206      	str	r2, [sp, #24]
 801153a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801153c:	4628      	mov	r0, r5
 801153e:	441a      	add	r2, r3
 8011540:	9209      	str	r2, [sp, #36]	; 0x24
 8011542:	f000 fb57 	bl	8011bf4 <__i2b>
 8011546:	4606      	mov	r6, r0
 8011548:	2f00      	cmp	r7, #0
 801154a:	dd0c      	ble.n	8011566 <_dtoa_r+0x77e>
 801154c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801154e:	2b00      	cmp	r3, #0
 8011550:	dd09      	ble.n	8011566 <_dtoa_r+0x77e>
 8011552:	42bb      	cmp	r3, r7
 8011554:	bfa8      	it	ge
 8011556:	463b      	movge	r3, r7
 8011558:	9a06      	ldr	r2, [sp, #24]
 801155a:	1aff      	subs	r7, r7, r3
 801155c:	1ad2      	subs	r2, r2, r3
 801155e:	9206      	str	r2, [sp, #24]
 8011560:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011562:	1ad3      	subs	r3, r2, r3
 8011564:	9309      	str	r3, [sp, #36]	; 0x24
 8011566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011568:	b1f3      	cbz	r3, 80115a8 <_dtoa_r+0x7c0>
 801156a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801156c:	2b00      	cmp	r3, #0
 801156e:	f000 80a9 	beq.w	80116c4 <_dtoa_r+0x8dc>
 8011572:	2c00      	cmp	r4, #0
 8011574:	dd10      	ble.n	8011598 <_dtoa_r+0x7b0>
 8011576:	4631      	mov	r1, r6
 8011578:	4622      	mov	r2, r4
 801157a:	4628      	mov	r0, r5
 801157c:	f000 fbf4 	bl	8011d68 <__pow5mult>
 8011580:	4652      	mov	r2, sl
 8011582:	4601      	mov	r1, r0
 8011584:	4606      	mov	r6, r0
 8011586:	4628      	mov	r0, r5
 8011588:	f000 fb4a 	bl	8011c20 <__multiply>
 801158c:	4680      	mov	r8, r0
 801158e:	4651      	mov	r1, sl
 8011590:	4628      	mov	r0, r5
 8011592:	f000 fa75 	bl	8011a80 <_Bfree>
 8011596:	46c2      	mov	sl, r8
 8011598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801159a:	1b1a      	subs	r2, r3, r4
 801159c:	d004      	beq.n	80115a8 <_dtoa_r+0x7c0>
 801159e:	4651      	mov	r1, sl
 80115a0:	4628      	mov	r0, r5
 80115a2:	f000 fbe1 	bl	8011d68 <__pow5mult>
 80115a6:	4682      	mov	sl, r0
 80115a8:	2101      	movs	r1, #1
 80115aa:	4628      	mov	r0, r5
 80115ac:	f000 fb22 	bl	8011bf4 <__i2b>
 80115b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115b2:	4604      	mov	r4, r0
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	f340 8087 	ble.w	80116c8 <_dtoa_r+0x8e0>
 80115ba:	461a      	mov	r2, r3
 80115bc:	4601      	mov	r1, r0
 80115be:	4628      	mov	r0, r5
 80115c0:	f000 fbd2 	bl	8011d68 <__pow5mult>
 80115c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80115c6:	4604      	mov	r4, r0
 80115c8:	2b01      	cmp	r3, #1
 80115ca:	f340 8080 	ble.w	80116ce <_dtoa_r+0x8e6>
 80115ce:	f04f 0800 	mov.w	r8, #0
 80115d2:	6923      	ldr	r3, [r4, #16]
 80115d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80115d8:	6918      	ldr	r0, [r3, #16]
 80115da:	f000 fabd 	bl	8011b58 <__hi0bits>
 80115de:	f1c0 0020 	rsb	r0, r0, #32
 80115e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115e4:	4418      	add	r0, r3
 80115e6:	f010 001f 	ands.w	r0, r0, #31
 80115ea:	f000 8092 	beq.w	8011712 <_dtoa_r+0x92a>
 80115ee:	f1c0 0320 	rsb	r3, r0, #32
 80115f2:	2b04      	cmp	r3, #4
 80115f4:	f340 808a 	ble.w	801170c <_dtoa_r+0x924>
 80115f8:	f1c0 001c 	rsb	r0, r0, #28
 80115fc:	9b06      	ldr	r3, [sp, #24]
 80115fe:	4407      	add	r7, r0
 8011600:	4403      	add	r3, r0
 8011602:	9306      	str	r3, [sp, #24]
 8011604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011606:	4403      	add	r3, r0
 8011608:	9309      	str	r3, [sp, #36]	; 0x24
 801160a:	9b06      	ldr	r3, [sp, #24]
 801160c:	2b00      	cmp	r3, #0
 801160e:	dd05      	ble.n	801161c <_dtoa_r+0x834>
 8011610:	4651      	mov	r1, sl
 8011612:	461a      	mov	r2, r3
 8011614:	4628      	mov	r0, r5
 8011616:	f000 fc01 	bl	8011e1c <__lshift>
 801161a:	4682      	mov	sl, r0
 801161c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801161e:	2b00      	cmp	r3, #0
 8011620:	dd05      	ble.n	801162e <_dtoa_r+0x846>
 8011622:	4621      	mov	r1, r4
 8011624:	461a      	mov	r2, r3
 8011626:	4628      	mov	r0, r5
 8011628:	f000 fbf8 	bl	8011e1c <__lshift>
 801162c:	4604      	mov	r4, r0
 801162e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011630:	2b00      	cmp	r3, #0
 8011632:	d070      	beq.n	8011716 <_dtoa_r+0x92e>
 8011634:	4621      	mov	r1, r4
 8011636:	4650      	mov	r0, sl
 8011638:	f000 fc5c 	bl	8011ef4 <__mcmp>
 801163c:	2800      	cmp	r0, #0
 801163e:	da6a      	bge.n	8011716 <_dtoa_r+0x92e>
 8011640:	2300      	movs	r3, #0
 8011642:	4651      	mov	r1, sl
 8011644:	220a      	movs	r2, #10
 8011646:	4628      	mov	r0, r5
 8011648:	f000 fa3c 	bl	8011ac4 <__multadd>
 801164c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801164e:	4682      	mov	sl, r0
 8011650:	f109 39ff 	add.w	r9, r9, #4294967295
 8011654:	2b00      	cmp	r3, #0
 8011656:	f000 8193 	beq.w	8011980 <_dtoa_r+0xb98>
 801165a:	4631      	mov	r1, r6
 801165c:	2300      	movs	r3, #0
 801165e:	220a      	movs	r2, #10
 8011660:	4628      	mov	r0, r5
 8011662:	f000 fa2f 	bl	8011ac4 <__multadd>
 8011666:	f1bb 0f00 	cmp.w	fp, #0
 801166a:	4606      	mov	r6, r0
 801166c:	f300 8093 	bgt.w	8011796 <_dtoa_r+0x9ae>
 8011670:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011672:	2b02      	cmp	r3, #2
 8011674:	dc57      	bgt.n	8011726 <_dtoa_r+0x93e>
 8011676:	e08e      	b.n	8011796 <_dtoa_r+0x9ae>
 8011678:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801167a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801167e:	e756      	b.n	801152e <_dtoa_r+0x746>
 8011680:	9b02      	ldr	r3, [sp, #8]
 8011682:	1e5c      	subs	r4, r3, #1
 8011684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011686:	42a3      	cmp	r3, r4
 8011688:	bfb7      	itett	lt
 801168a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801168c:	1b1c      	subge	r4, r3, r4
 801168e:	1ae2      	sublt	r2, r4, r3
 8011690:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011692:	bfbe      	ittt	lt
 8011694:	940a      	strlt	r4, [sp, #40]	; 0x28
 8011696:	189b      	addlt	r3, r3, r2
 8011698:	930e      	strlt	r3, [sp, #56]	; 0x38
 801169a:	9b02      	ldr	r3, [sp, #8]
 801169c:	bfb8      	it	lt
 801169e:	2400      	movlt	r4, #0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	bfbb      	ittet	lt
 80116a4:	9b06      	ldrlt	r3, [sp, #24]
 80116a6:	9a02      	ldrlt	r2, [sp, #8]
 80116a8:	9f06      	ldrge	r7, [sp, #24]
 80116aa:	1a9f      	sublt	r7, r3, r2
 80116ac:	bfac      	ite	ge
 80116ae:	9b02      	ldrge	r3, [sp, #8]
 80116b0:	2300      	movlt	r3, #0
 80116b2:	e73e      	b.n	8011532 <_dtoa_r+0x74a>
 80116b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80116b6:	9f06      	ldr	r7, [sp, #24]
 80116b8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80116ba:	e745      	b.n	8011548 <_dtoa_r+0x760>
 80116bc:	3fe00000 	.word	0x3fe00000
 80116c0:	40240000 	.word	0x40240000
 80116c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80116c6:	e76a      	b.n	801159e <_dtoa_r+0x7b6>
 80116c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80116ca:	2b01      	cmp	r3, #1
 80116cc:	dc19      	bgt.n	8011702 <_dtoa_r+0x91a>
 80116ce:	9b04      	ldr	r3, [sp, #16]
 80116d0:	b9bb      	cbnz	r3, 8011702 <_dtoa_r+0x91a>
 80116d2:	9b05      	ldr	r3, [sp, #20]
 80116d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80116d8:	b99b      	cbnz	r3, 8011702 <_dtoa_r+0x91a>
 80116da:	9b05      	ldr	r3, [sp, #20]
 80116dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80116e0:	0d1b      	lsrs	r3, r3, #20
 80116e2:	051b      	lsls	r3, r3, #20
 80116e4:	b183      	cbz	r3, 8011708 <_dtoa_r+0x920>
 80116e6:	f04f 0801 	mov.w	r8, #1
 80116ea:	9b06      	ldr	r3, [sp, #24]
 80116ec:	3301      	adds	r3, #1
 80116ee:	9306      	str	r3, [sp, #24]
 80116f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116f2:	3301      	adds	r3, #1
 80116f4:	9309      	str	r3, [sp, #36]	; 0x24
 80116f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	f47f af6a 	bne.w	80115d2 <_dtoa_r+0x7ea>
 80116fe:	2001      	movs	r0, #1
 8011700:	e76f      	b.n	80115e2 <_dtoa_r+0x7fa>
 8011702:	f04f 0800 	mov.w	r8, #0
 8011706:	e7f6      	b.n	80116f6 <_dtoa_r+0x90e>
 8011708:	4698      	mov	r8, r3
 801170a:	e7f4      	b.n	80116f6 <_dtoa_r+0x90e>
 801170c:	f43f af7d 	beq.w	801160a <_dtoa_r+0x822>
 8011710:	4618      	mov	r0, r3
 8011712:	301c      	adds	r0, #28
 8011714:	e772      	b.n	80115fc <_dtoa_r+0x814>
 8011716:	9b02      	ldr	r3, [sp, #8]
 8011718:	2b00      	cmp	r3, #0
 801171a:	dc36      	bgt.n	801178a <_dtoa_r+0x9a2>
 801171c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801171e:	2b02      	cmp	r3, #2
 8011720:	dd33      	ble.n	801178a <_dtoa_r+0x9a2>
 8011722:	f8dd b008 	ldr.w	fp, [sp, #8]
 8011726:	f1bb 0f00 	cmp.w	fp, #0
 801172a:	d10d      	bne.n	8011748 <_dtoa_r+0x960>
 801172c:	4621      	mov	r1, r4
 801172e:	465b      	mov	r3, fp
 8011730:	2205      	movs	r2, #5
 8011732:	4628      	mov	r0, r5
 8011734:	f000 f9c6 	bl	8011ac4 <__multadd>
 8011738:	4601      	mov	r1, r0
 801173a:	4604      	mov	r4, r0
 801173c:	4650      	mov	r0, sl
 801173e:	f000 fbd9 	bl	8011ef4 <__mcmp>
 8011742:	2800      	cmp	r0, #0
 8011744:	f73f adb6 	bgt.w	80112b4 <_dtoa_r+0x4cc>
 8011748:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801174a:	9f08      	ldr	r7, [sp, #32]
 801174c:	ea6f 0903 	mvn.w	r9, r3
 8011750:	f04f 0800 	mov.w	r8, #0
 8011754:	4621      	mov	r1, r4
 8011756:	4628      	mov	r0, r5
 8011758:	f000 f992 	bl	8011a80 <_Bfree>
 801175c:	2e00      	cmp	r6, #0
 801175e:	f43f aea4 	beq.w	80114aa <_dtoa_r+0x6c2>
 8011762:	f1b8 0f00 	cmp.w	r8, #0
 8011766:	d005      	beq.n	8011774 <_dtoa_r+0x98c>
 8011768:	45b0      	cmp	r8, r6
 801176a:	d003      	beq.n	8011774 <_dtoa_r+0x98c>
 801176c:	4641      	mov	r1, r8
 801176e:	4628      	mov	r0, r5
 8011770:	f000 f986 	bl	8011a80 <_Bfree>
 8011774:	4631      	mov	r1, r6
 8011776:	4628      	mov	r0, r5
 8011778:	f000 f982 	bl	8011a80 <_Bfree>
 801177c:	e695      	b.n	80114aa <_dtoa_r+0x6c2>
 801177e:	2400      	movs	r4, #0
 8011780:	4626      	mov	r6, r4
 8011782:	e7e1      	b.n	8011748 <_dtoa_r+0x960>
 8011784:	46c1      	mov	r9, r8
 8011786:	4626      	mov	r6, r4
 8011788:	e594      	b.n	80112b4 <_dtoa_r+0x4cc>
 801178a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801178c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8011790:	2b00      	cmp	r3, #0
 8011792:	f000 80fc 	beq.w	801198e <_dtoa_r+0xba6>
 8011796:	2f00      	cmp	r7, #0
 8011798:	dd05      	ble.n	80117a6 <_dtoa_r+0x9be>
 801179a:	4631      	mov	r1, r6
 801179c:	463a      	mov	r2, r7
 801179e:	4628      	mov	r0, r5
 80117a0:	f000 fb3c 	bl	8011e1c <__lshift>
 80117a4:	4606      	mov	r6, r0
 80117a6:	f1b8 0f00 	cmp.w	r8, #0
 80117aa:	d05c      	beq.n	8011866 <_dtoa_r+0xa7e>
 80117ac:	4628      	mov	r0, r5
 80117ae:	6871      	ldr	r1, [r6, #4]
 80117b0:	f000 f926 	bl	8011a00 <_Balloc>
 80117b4:	4607      	mov	r7, r0
 80117b6:	b928      	cbnz	r0, 80117c4 <_dtoa_r+0x9dc>
 80117b8:	4602      	mov	r2, r0
 80117ba:	f240 21ea 	movw	r1, #746	; 0x2ea
 80117be:	4b7e      	ldr	r3, [pc, #504]	; (80119b8 <_dtoa_r+0xbd0>)
 80117c0:	f7ff bb26 	b.w	8010e10 <_dtoa_r+0x28>
 80117c4:	6932      	ldr	r2, [r6, #16]
 80117c6:	f106 010c 	add.w	r1, r6, #12
 80117ca:	3202      	adds	r2, #2
 80117cc:	0092      	lsls	r2, r2, #2
 80117ce:	300c      	adds	r0, #12
 80117d0:	f7fe fd26 	bl	8010220 <memcpy>
 80117d4:	2201      	movs	r2, #1
 80117d6:	4639      	mov	r1, r7
 80117d8:	4628      	mov	r0, r5
 80117da:	f000 fb1f 	bl	8011e1c <__lshift>
 80117de:	46b0      	mov	r8, r6
 80117e0:	4606      	mov	r6, r0
 80117e2:	9b08      	ldr	r3, [sp, #32]
 80117e4:	3301      	adds	r3, #1
 80117e6:	9302      	str	r3, [sp, #8]
 80117e8:	9b08      	ldr	r3, [sp, #32]
 80117ea:	445b      	add	r3, fp
 80117ec:	930a      	str	r3, [sp, #40]	; 0x28
 80117ee:	9b04      	ldr	r3, [sp, #16]
 80117f0:	f003 0301 	and.w	r3, r3, #1
 80117f4:	9309      	str	r3, [sp, #36]	; 0x24
 80117f6:	9b02      	ldr	r3, [sp, #8]
 80117f8:	4621      	mov	r1, r4
 80117fa:	4650      	mov	r0, sl
 80117fc:	f103 3bff 	add.w	fp, r3, #4294967295
 8011800:	f7ff fa62 	bl	8010cc8 <quorem>
 8011804:	4603      	mov	r3, r0
 8011806:	4641      	mov	r1, r8
 8011808:	3330      	adds	r3, #48	; 0x30
 801180a:	9004      	str	r0, [sp, #16]
 801180c:	4650      	mov	r0, sl
 801180e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011810:	f000 fb70 	bl	8011ef4 <__mcmp>
 8011814:	4632      	mov	r2, r6
 8011816:	9006      	str	r0, [sp, #24]
 8011818:	4621      	mov	r1, r4
 801181a:	4628      	mov	r0, r5
 801181c:	f000 fb86 	bl	8011f2c <__mdiff>
 8011820:	68c2      	ldr	r2, [r0, #12]
 8011822:	4607      	mov	r7, r0
 8011824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011826:	bb02      	cbnz	r2, 801186a <_dtoa_r+0xa82>
 8011828:	4601      	mov	r1, r0
 801182a:	4650      	mov	r0, sl
 801182c:	f000 fb62 	bl	8011ef4 <__mcmp>
 8011830:	4602      	mov	r2, r0
 8011832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011834:	4639      	mov	r1, r7
 8011836:	4628      	mov	r0, r5
 8011838:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 801183c:	f000 f920 	bl	8011a80 <_Bfree>
 8011840:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011842:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011844:	9f02      	ldr	r7, [sp, #8]
 8011846:	ea43 0102 	orr.w	r1, r3, r2
 801184a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801184c:	430b      	orrs	r3, r1
 801184e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011850:	d10d      	bne.n	801186e <_dtoa_r+0xa86>
 8011852:	2b39      	cmp	r3, #57	; 0x39
 8011854:	d027      	beq.n	80118a6 <_dtoa_r+0xabe>
 8011856:	9a06      	ldr	r2, [sp, #24]
 8011858:	2a00      	cmp	r2, #0
 801185a:	dd01      	ble.n	8011860 <_dtoa_r+0xa78>
 801185c:	9b04      	ldr	r3, [sp, #16]
 801185e:	3331      	adds	r3, #49	; 0x31
 8011860:	f88b 3000 	strb.w	r3, [fp]
 8011864:	e776      	b.n	8011754 <_dtoa_r+0x96c>
 8011866:	4630      	mov	r0, r6
 8011868:	e7b9      	b.n	80117de <_dtoa_r+0x9f6>
 801186a:	2201      	movs	r2, #1
 801186c:	e7e2      	b.n	8011834 <_dtoa_r+0xa4c>
 801186e:	9906      	ldr	r1, [sp, #24]
 8011870:	2900      	cmp	r1, #0
 8011872:	db04      	blt.n	801187e <_dtoa_r+0xa96>
 8011874:	9822      	ldr	r0, [sp, #136]	; 0x88
 8011876:	4301      	orrs	r1, r0
 8011878:	9809      	ldr	r0, [sp, #36]	; 0x24
 801187a:	4301      	orrs	r1, r0
 801187c:	d120      	bne.n	80118c0 <_dtoa_r+0xad8>
 801187e:	2a00      	cmp	r2, #0
 8011880:	ddee      	ble.n	8011860 <_dtoa_r+0xa78>
 8011882:	4651      	mov	r1, sl
 8011884:	2201      	movs	r2, #1
 8011886:	4628      	mov	r0, r5
 8011888:	9302      	str	r3, [sp, #8]
 801188a:	f000 fac7 	bl	8011e1c <__lshift>
 801188e:	4621      	mov	r1, r4
 8011890:	4682      	mov	sl, r0
 8011892:	f000 fb2f 	bl	8011ef4 <__mcmp>
 8011896:	2800      	cmp	r0, #0
 8011898:	9b02      	ldr	r3, [sp, #8]
 801189a:	dc02      	bgt.n	80118a2 <_dtoa_r+0xaba>
 801189c:	d1e0      	bne.n	8011860 <_dtoa_r+0xa78>
 801189e:	07da      	lsls	r2, r3, #31
 80118a0:	d5de      	bpl.n	8011860 <_dtoa_r+0xa78>
 80118a2:	2b39      	cmp	r3, #57	; 0x39
 80118a4:	d1da      	bne.n	801185c <_dtoa_r+0xa74>
 80118a6:	2339      	movs	r3, #57	; 0x39
 80118a8:	f88b 3000 	strb.w	r3, [fp]
 80118ac:	463b      	mov	r3, r7
 80118ae:	461f      	mov	r7, r3
 80118b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80118b4:	3b01      	subs	r3, #1
 80118b6:	2a39      	cmp	r2, #57	; 0x39
 80118b8:	d050      	beq.n	801195c <_dtoa_r+0xb74>
 80118ba:	3201      	adds	r2, #1
 80118bc:	701a      	strb	r2, [r3, #0]
 80118be:	e749      	b.n	8011754 <_dtoa_r+0x96c>
 80118c0:	2a00      	cmp	r2, #0
 80118c2:	dd03      	ble.n	80118cc <_dtoa_r+0xae4>
 80118c4:	2b39      	cmp	r3, #57	; 0x39
 80118c6:	d0ee      	beq.n	80118a6 <_dtoa_r+0xabe>
 80118c8:	3301      	adds	r3, #1
 80118ca:	e7c9      	b.n	8011860 <_dtoa_r+0xa78>
 80118cc:	9a02      	ldr	r2, [sp, #8]
 80118ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80118d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80118d4:	428a      	cmp	r2, r1
 80118d6:	d02a      	beq.n	801192e <_dtoa_r+0xb46>
 80118d8:	4651      	mov	r1, sl
 80118da:	2300      	movs	r3, #0
 80118dc:	220a      	movs	r2, #10
 80118de:	4628      	mov	r0, r5
 80118e0:	f000 f8f0 	bl	8011ac4 <__multadd>
 80118e4:	45b0      	cmp	r8, r6
 80118e6:	4682      	mov	sl, r0
 80118e8:	f04f 0300 	mov.w	r3, #0
 80118ec:	f04f 020a 	mov.w	r2, #10
 80118f0:	4641      	mov	r1, r8
 80118f2:	4628      	mov	r0, r5
 80118f4:	d107      	bne.n	8011906 <_dtoa_r+0xb1e>
 80118f6:	f000 f8e5 	bl	8011ac4 <__multadd>
 80118fa:	4680      	mov	r8, r0
 80118fc:	4606      	mov	r6, r0
 80118fe:	9b02      	ldr	r3, [sp, #8]
 8011900:	3301      	adds	r3, #1
 8011902:	9302      	str	r3, [sp, #8]
 8011904:	e777      	b.n	80117f6 <_dtoa_r+0xa0e>
 8011906:	f000 f8dd 	bl	8011ac4 <__multadd>
 801190a:	4631      	mov	r1, r6
 801190c:	4680      	mov	r8, r0
 801190e:	2300      	movs	r3, #0
 8011910:	220a      	movs	r2, #10
 8011912:	4628      	mov	r0, r5
 8011914:	f000 f8d6 	bl	8011ac4 <__multadd>
 8011918:	4606      	mov	r6, r0
 801191a:	e7f0      	b.n	80118fe <_dtoa_r+0xb16>
 801191c:	f1bb 0f00 	cmp.w	fp, #0
 8011920:	bfcc      	ite	gt
 8011922:	465f      	movgt	r7, fp
 8011924:	2701      	movle	r7, #1
 8011926:	f04f 0800 	mov.w	r8, #0
 801192a:	9a08      	ldr	r2, [sp, #32]
 801192c:	4417      	add	r7, r2
 801192e:	4651      	mov	r1, sl
 8011930:	2201      	movs	r2, #1
 8011932:	4628      	mov	r0, r5
 8011934:	9302      	str	r3, [sp, #8]
 8011936:	f000 fa71 	bl	8011e1c <__lshift>
 801193a:	4621      	mov	r1, r4
 801193c:	4682      	mov	sl, r0
 801193e:	f000 fad9 	bl	8011ef4 <__mcmp>
 8011942:	2800      	cmp	r0, #0
 8011944:	dcb2      	bgt.n	80118ac <_dtoa_r+0xac4>
 8011946:	d102      	bne.n	801194e <_dtoa_r+0xb66>
 8011948:	9b02      	ldr	r3, [sp, #8]
 801194a:	07db      	lsls	r3, r3, #31
 801194c:	d4ae      	bmi.n	80118ac <_dtoa_r+0xac4>
 801194e:	463b      	mov	r3, r7
 8011950:	461f      	mov	r7, r3
 8011952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011956:	2a30      	cmp	r2, #48	; 0x30
 8011958:	d0fa      	beq.n	8011950 <_dtoa_r+0xb68>
 801195a:	e6fb      	b.n	8011754 <_dtoa_r+0x96c>
 801195c:	9a08      	ldr	r2, [sp, #32]
 801195e:	429a      	cmp	r2, r3
 8011960:	d1a5      	bne.n	80118ae <_dtoa_r+0xac6>
 8011962:	2331      	movs	r3, #49	; 0x31
 8011964:	f109 0901 	add.w	r9, r9, #1
 8011968:	7013      	strb	r3, [r2, #0]
 801196a:	e6f3      	b.n	8011754 <_dtoa_r+0x96c>
 801196c:	4b13      	ldr	r3, [pc, #76]	; (80119bc <_dtoa_r+0xbd4>)
 801196e:	f7ff baa7 	b.w	8010ec0 <_dtoa_r+0xd8>
 8011972:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011974:	2b00      	cmp	r3, #0
 8011976:	f47f aa80 	bne.w	8010e7a <_dtoa_r+0x92>
 801197a:	4b11      	ldr	r3, [pc, #68]	; (80119c0 <_dtoa_r+0xbd8>)
 801197c:	f7ff baa0 	b.w	8010ec0 <_dtoa_r+0xd8>
 8011980:	f1bb 0f00 	cmp.w	fp, #0
 8011984:	dc03      	bgt.n	801198e <_dtoa_r+0xba6>
 8011986:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011988:	2b02      	cmp	r3, #2
 801198a:	f73f aecc 	bgt.w	8011726 <_dtoa_r+0x93e>
 801198e:	9f08      	ldr	r7, [sp, #32]
 8011990:	4621      	mov	r1, r4
 8011992:	4650      	mov	r0, sl
 8011994:	f7ff f998 	bl	8010cc8 <quorem>
 8011998:	9a08      	ldr	r2, [sp, #32]
 801199a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801199e:	f807 3b01 	strb.w	r3, [r7], #1
 80119a2:	1aba      	subs	r2, r7, r2
 80119a4:	4593      	cmp	fp, r2
 80119a6:	ddb9      	ble.n	801191c <_dtoa_r+0xb34>
 80119a8:	4651      	mov	r1, sl
 80119aa:	2300      	movs	r3, #0
 80119ac:	220a      	movs	r2, #10
 80119ae:	4628      	mov	r0, r5
 80119b0:	f000 f888 	bl	8011ac4 <__multadd>
 80119b4:	4682      	mov	sl, r0
 80119b6:	e7eb      	b.n	8011990 <_dtoa_r+0xba8>
 80119b8:	08013f4b 	.word	0x08013f4b
 80119bc:	08013ea4 	.word	0x08013ea4
 80119c0:	08013ec8 	.word	0x08013ec8

080119c4 <_localeconv_r>:
 80119c4:	4800      	ldr	r0, [pc, #0]	; (80119c8 <_localeconv_r+0x4>)
 80119c6:	4770      	bx	lr
 80119c8:	20000318 	.word	0x20000318

080119cc <memchr>:
 80119cc:	4603      	mov	r3, r0
 80119ce:	b510      	push	{r4, lr}
 80119d0:	b2c9      	uxtb	r1, r1
 80119d2:	4402      	add	r2, r0
 80119d4:	4293      	cmp	r3, r2
 80119d6:	4618      	mov	r0, r3
 80119d8:	d101      	bne.n	80119de <memchr+0x12>
 80119da:	2000      	movs	r0, #0
 80119dc:	e003      	b.n	80119e6 <memchr+0x1a>
 80119de:	7804      	ldrb	r4, [r0, #0]
 80119e0:	3301      	adds	r3, #1
 80119e2:	428c      	cmp	r4, r1
 80119e4:	d1f6      	bne.n	80119d4 <memchr+0x8>
 80119e6:	bd10      	pop	{r4, pc}

080119e8 <__malloc_lock>:
 80119e8:	4801      	ldr	r0, [pc, #4]	; (80119f0 <__malloc_lock+0x8>)
 80119ea:	f000 bd4c 	b.w	8012486 <__retarget_lock_acquire_recursive>
 80119ee:	bf00      	nop
 80119f0:	200020e0 	.word	0x200020e0

080119f4 <__malloc_unlock>:
 80119f4:	4801      	ldr	r0, [pc, #4]	; (80119fc <__malloc_unlock+0x8>)
 80119f6:	f000 bd47 	b.w	8012488 <__retarget_lock_release_recursive>
 80119fa:	bf00      	nop
 80119fc:	200020e0 	.word	0x200020e0

08011a00 <_Balloc>:
 8011a00:	b570      	push	{r4, r5, r6, lr}
 8011a02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011a04:	4604      	mov	r4, r0
 8011a06:	460d      	mov	r5, r1
 8011a08:	b976      	cbnz	r6, 8011a28 <_Balloc+0x28>
 8011a0a:	2010      	movs	r0, #16
 8011a0c:	f7fe fbea 	bl	80101e4 <malloc>
 8011a10:	4602      	mov	r2, r0
 8011a12:	6260      	str	r0, [r4, #36]	; 0x24
 8011a14:	b920      	cbnz	r0, 8011a20 <_Balloc+0x20>
 8011a16:	2166      	movs	r1, #102	; 0x66
 8011a18:	4b17      	ldr	r3, [pc, #92]	; (8011a78 <_Balloc+0x78>)
 8011a1a:	4818      	ldr	r0, [pc, #96]	; (8011a7c <_Balloc+0x7c>)
 8011a1c:	f000 fd02 	bl	8012424 <__assert_func>
 8011a20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a24:	6006      	str	r6, [r0, #0]
 8011a26:	60c6      	str	r6, [r0, #12]
 8011a28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011a2a:	68f3      	ldr	r3, [r6, #12]
 8011a2c:	b183      	cbz	r3, 8011a50 <_Balloc+0x50>
 8011a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a30:	68db      	ldr	r3, [r3, #12]
 8011a32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011a36:	b9b8      	cbnz	r0, 8011a68 <_Balloc+0x68>
 8011a38:	2101      	movs	r1, #1
 8011a3a:	fa01 f605 	lsl.w	r6, r1, r5
 8011a3e:	1d72      	adds	r2, r6, #5
 8011a40:	4620      	mov	r0, r4
 8011a42:	0092      	lsls	r2, r2, #2
 8011a44:	f000 fb5e 	bl	8012104 <_calloc_r>
 8011a48:	b160      	cbz	r0, 8011a64 <_Balloc+0x64>
 8011a4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011a4e:	e00e      	b.n	8011a6e <_Balloc+0x6e>
 8011a50:	2221      	movs	r2, #33	; 0x21
 8011a52:	2104      	movs	r1, #4
 8011a54:	4620      	mov	r0, r4
 8011a56:	f000 fb55 	bl	8012104 <_calloc_r>
 8011a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a5c:	60f0      	str	r0, [r6, #12]
 8011a5e:	68db      	ldr	r3, [r3, #12]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d1e4      	bne.n	8011a2e <_Balloc+0x2e>
 8011a64:	2000      	movs	r0, #0
 8011a66:	bd70      	pop	{r4, r5, r6, pc}
 8011a68:	6802      	ldr	r2, [r0, #0]
 8011a6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a6e:	2300      	movs	r3, #0
 8011a70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011a74:	e7f7      	b.n	8011a66 <_Balloc+0x66>
 8011a76:	bf00      	nop
 8011a78:	08013ed5 	.word	0x08013ed5
 8011a7c:	08013f5c 	.word	0x08013f5c

08011a80 <_Bfree>:
 8011a80:	b570      	push	{r4, r5, r6, lr}
 8011a82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011a84:	4605      	mov	r5, r0
 8011a86:	460c      	mov	r4, r1
 8011a88:	b976      	cbnz	r6, 8011aa8 <_Bfree+0x28>
 8011a8a:	2010      	movs	r0, #16
 8011a8c:	f7fe fbaa 	bl	80101e4 <malloc>
 8011a90:	4602      	mov	r2, r0
 8011a92:	6268      	str	r0, [r5, #36]	; 0x24
 8011a94:	b920      	cbnz	r0, 8011aa0 <_Bfree+0x20>
 8011a96:	218a      	movs	r1, #138	; 0x8a
 8011a98:	4b08      	ldr	r3, [pc, #32]	; (8011abc <_Bfree+0x3c>)
 8011a9a:	4809      	ldr	r0, [pc, #36]	; (8011ac0 <_Bfree+0x40>)
 8011a9c:	f000 fcc2 	bl	8012424 <__assert_func>
 8011aa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011aa4:	6006      	str	r6, [r0, #0]
 8011aa6:	60c6      	str	r6, [r0, #12]
 8011aa8:	b13c      	cbz	r4, 8011aba <_Bfree+0x3a>
 8011aaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011aac:	6862      	ldr	r2, [r4, #4]
 8011aae:	68db      	ldr	r3, [r3, #12]
 8011ab0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011ab4:	6021      	str	r1, [r4, #0]
 8011ab6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011aba:	bd70      	pop	{r4, r5, r6, pc}
 8011abc:	08013ed5 	.word	0x08013ed5
 8011ac0:	08013f5c 	.word	0x08013f5c

08011ac4 <__multadd>:
 8011ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ac8:	4698      	mov	r8, r3
 8011aca:	460c      	mov	r4, r1
 8011acc:	2300      	movs	r3, #0
 8011ace:	690e      	ldr	r6, [r1, #16]
 8011ad0:	4607      	mov	r7, r0
 8011ad2:	f101 0014 	add.w	r0, r1, #20
 8011ad6:	6805      	ldr	r5, [r0, #0]
 8011ad8:	3301      	adds	r3, #1
 8011ada:	b2a9      	uxth	r1, r5
 8011adc:	fb02 8101 	mla	r1, r2, r1, r8
 8011ae0:	0c2d      	lsrs	r5, r5, #16
 8011ae2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011ae6:	fb02 c505 	mla	r5, r2, r5, ip
 8011aea:	b289      	uxth	r1, r1
 8011aec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011af0:	429e      	cmp	r6, r3
 8011af2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011af6:	f840 1b04 	str.w	r1, [r0], #4
 8011afa:	dcec      	bgt.n	8011ad6 <__multadd+0x12>
 8011afc:	f1b8 0f00 	cmp.w	r8, #0
 8011b00:	d022      	beq.n	8011b48 <__multadd+0x84>
 8011b02:	68a3      	ldr	r3, [r4, #8]
 8011b04:	42b3      	cmp	r3, r6
 8011b06:	dc19      	bgt.n	8011b3c <__multadd+0x78>
 8011b08:	6861      	ldr	r1, [r4, #4]
 8011b0a:	4638      	mov	r0, r7
 8011b0c:	3101      	adds	r1, #1
 8011b0e:	f7ff ff77 	bl	8011a00 <_Balloc>
 8011b12:	4605      	mov	r5, r0
 8011b14:	b928      	cbnz	r0, 8011b22 <__multadd+0x5e>
 8011b16:	4602      	mov	r2, r0
 8011b18:	21b5      	movs	r1, #181	; 0xb5
 8011b1a:	4b0d      	ldr	r3, [pc, #52]	; (8011b50 <__multadd+0x8c>)
 8011b1c:	480d      	ldr	r0, [pc, #52]	; (8011b54 <__multadd+0x90>)
 8011b1e:	f000 fc81 	bl	8012424 <__assert_func>
 8011b22:	6922      	ldr	r2, [r4, #16]
 8011b24:	f104 010c 	add.w	r1, r4, #12
 8011b28:	3202      	adds	r2, #2
 8011b2a:	0092      	lsls	r2, r2, #2
 8011b2c:	300c      	adds	r0, #12
 8011b2e:	f7fe fb77 	bl	8010220 <memcpy>
 8011b32:	4621      	mov	r1, r4
 8011b34:	4638      	mov	r0, r7
 8011b36:	f7ff ffa3 	bl	8011a80 <_Bfree>
 8011b3a:	462c      	mov	r4, r5
 8011b3c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011b40:	3601      	adds	r6, #1
 8011b42:	f8c3 8014 	str.w	r8, [r3, #20]
 8011b46:	6126      	str	r6, [r4, #16]
 8011b48:	4620      	mov	r0, r4
 8011b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b4e:	bf00      	nop
 8011b50:	08013f4b 	.word	0x08013f4b
 8011b54:	08013f5c 	.word	0x08013f5c

08011b58 <__hi0bits>:
 8011b58:	0c02      	lsrs	r2, r0, #16
 8011b5a:	0412      	lsls	r2, r2, #16
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	b9ca      	cbnz	r2, 8011b94 <__hi0bits+0x3c>
 8011b60:	0403      	lsls	r3, r0, #16
 8011b62:	2010      	movs	r0, #16
 8011b64:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011b68:	bf04      	itt	eq
 8011b6a:	021b      	lsleq	r3, r3, #8
 8011b6c:	3008      	addeq	r0, #8
 8011b6e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011b72:	bf04      	itt	eq
 8011b74:	011b      	lsleq	r3, r3, #4
 8011b76:	3004      	addeq	r0, #4
 8011b78:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011b7c:	bf04      	itt	eq
 8011b7e:	009b      	lsleq	r3, r3, #2
 8011b80:	3002      	addeq	r0, #2
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	db05      	blt.n	8011b92 <__hi0bits+0x3a>
 8011b86:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8011b8a:	f100 0001 	add.w	r0, r0, #1
 8011b8e:	bf08      	it	eq
 8011b90:	2020      	moveq	r0, #32
 8011b92:	4770      	bx	lr
 8011b94:	2000      	movs	r0, #0
 8011b96:	e7e5      	b.n	8011b64 <__hi0bits+0xc>

08011b98 <__lo0bits>:
 8011b98:	6803      	ldr	r3, [r0, #0]
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	f013 0007 	ands.w	r0, r3, #7
 8011ba0:	d00b      	beq.n	8011bba <__lo0bits+0x22>
 8011ba2:	07d9      	lsls	r1, r3, #31
 8011ba4:	d422      	bmi.n	8011bec <__lo0bits+0x54>
 8011ba6:	0798      	lsls	r0, r3, #30
 8011ba8:	bf49      	itett	mi
 8011baa:	085b      	lsrmi	r3, r3, #1
 8011bac:	089b      	lsrpl	r3, r3, #2
 8011bae:	2001      	movmi	r0, #1
 8011bb0:	6013      	strmi	r3, [r2, #0]
 8011bb2:	bf5c      	itt	pl
 8011bb4:	2002      	movpl	r0, #2
 8011bb6:	6013      	strpl	r3, [r2, #0]
 8011bb8:	4770      	bx	lr
 8011bba:	b299      	uxth	r1, r3
 8011bbc:	b909      	cbnz	r1, 8011bc2 <__lo0bits+0x2a>
 8011bbe:	2010      	movs	r0, #16
 8011bc0:	0c1b      	lsrs	r3, r3, #16
 8011bc2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011bc6:	bf04      	itt	eq
 8011bc8:	0a1b      	lsreq	r3, r3, #8
 8011bca:	3008      	addeq	r0, #8
 8011bcc:	0719      	lsls	r1, r3, #28
 8011bce:	bf04      	itt	eq
 8011bd0:	091b      	lsreq	r3, r3, #4
 8011bd2:	3004      	addeq	r0, #4
 8011bd4:	0799      	lsls	r1, r3, #30
 8011bd6:	bf04      	itt	eq
 8011bd8:	089b      	lsreq	r3, r3, #2
 8011bda:	3002      	addeq	r0, #2
 8011bdc:	07d9      	lsls	r1, r3, #31
 8011bde:	d403      	bmi.n	8011be8 <__lo0bits+0x50>
 8011be0:	085b      	lsrs	r3, r3, #1
 8011be2:	f100 0001 	add.w	r0, r0, #1
 8011be6:	d003      	beq.n	8011bf0 <__lo0bits+0x58>
 8011be8:	6013      	str	r3, [r2, #0]
 8011bea:	4770      	bx	lr
 8011bec:	2000      	movs	r0, #0
 8011bee:	4770      	bx	lr
 8011bf0:	2020      	movs	r0, #32
 8011bf2:	4770      	bx	lr

08011bf4 <__i2b>:
 8011bf4:	b510      	push	{r4, lr}
 8011bf6:	460c      	mov	r4, r1
 8011bf8:	2101      	movs	r1, #1
 8011bfa:	f7ff ff01 	bl	8011a00 <_Balloc>
 8011bfe:	4602      	mov	r2, r0
 8011c00:	b928      	cbnz	r0, 8011c0e <__i2b+0x1a>
 8011c02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011c06:	4b04      	ldr	r3, [pc, #16]	; (8011c18 <__i2b+0x24>)
 8011c08:	4804      	ldr	r0, [pc, #16]	; (8011c1c <__i2b+0x28>)
 8011c0a:	f000 fc0b 	bl	8012424 <__assert_func>
 8011c0e:	2301      	movs	r3, #1
 8011c10:	6144      	str	r4, [r0, #20]
 8011c12:	6103      	str	r3, [r0, #16]
 8011c14:	bd10      	pop	{r4, pc}
 8011c16:	bf00      	nop
 8011c18:	08013f4b 	.word	0x08013f4b
 8011c1c:	08013f5c 	.word	0x08013f5c

08011c20 <__multiply>:
 8011c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c24:	4614      	mov	r4, r2
 8011c26:	690a      	ldr	r2, [r1, #16]
 8011c28:	6923      	ldr	r3, [r4, #16]
 8011c2a:	460d      	mov	r5, r1
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	bfbe      	ittt	lt
 8011c30:	460b      	movlt	r3, r1
 8011c32:	4625      	movlt	r5, r4
 8011c34:	461c      	movlt	r4, r3
 8011c36:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011c3a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011c3e:	68ab      	ldr	r3, [r5, #8]
 8011c40:	6869      	ldr	r1, [r5, #4]
 8011c42:	eb0a 0709 	add.w	r7, sl, r9
 8011c46:	42bb      	cmp	r3, r7
 8011c48:	b085      	sub	sp, #20
 8011c4a:	bfb8      	it	lt
 8011c4c:	3101      	addlt	r1, #1
 8011c4e:	f7ff fed7 	bl	8011a00 <_Balloc>
 8011c52:	b930      	cbnz	r0, 8011c62 <__multiply+0x42>
 8011c54:	4602      	mov	r2, r0
 8011c56:	f240 115d 	movw	r1, #349	; 0x15d
 8011c5a:	4b41      	ldr	r3, [pc, #260]	; (8011d60 <__multiply+0x140>)
 8011c5c:	4841      	ldr	r0, [pc, #260]	; (8011d64 <__multiply+0x144>)
 8011c5e:	f000 fbe1 	bl	8012424 <__assert_func>
 8011c62:	f100 0614 	add.w	r6, r0, #20
 8011c66:	4633      	mov	r3, r6
 8011c68:	2200      	movs	r2, #0
 8011c6a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011c6e:	4543      	cmp	r3, r8
 8011c70:	d31e      	bcc.n	8011cb0 <__multiply+0x90>
 8011c72:	f105 0c14 	add.w	ip, r5, #20
 8011c76:	f104 0314 	add.w	r3, r4, #20
 8011c7a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011c7e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011c82:	9202      	str	r2, [sp, #8]
 8011c84:	ebac 0205 	sub.w	r2, ip, r5
 8011c88:	3a15      	subs	r2, #21
 8011c8a:	f022 0203 	bic.w	r2, r2, #3
 8011c8e:	3204      	adds	r2, #4
 8011c90:	f105 0115 	add.w	r1, r5, #21
 8011c94:	458c      	cmp	ip, r1
 8011c96:	bf38      	it	cc
 8011c98:	2204      	movcc	r2, #4
 8011c9a:	9201      	str	r2, [sp, #4]
 8011c9c:	9a02      	ldr	r2, [sp, #8]
 8011c9e:	9303      	str	r3, [sp, #12]
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d808      	bhi.n	8011cb6 <__multiply+0x96>
 8011ca4:	2f00      	cmp	r7, #0
 8011ca6:	dc55      	bgt.n	8011d54 <__multiply+0x134>
 8011ca8:	6107      	str	r7, [r0, #16]
 8011caa:	b005      	add	sp, #20
 8011cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cb0:	f843 2b04 	str.w	r2, [r3], #4
 8011cb4:	e7db      	b.n	8011c6e <__multiply+0x4e>
 8011cb6:	f8b3 a000 	ldrh.w	sl, [r3]
 8011cba:	f1ba 0f00 	cmp.w	sl, #0
 8011cbe:	d020      	beq.n	8011d02 <__multiply+0xe2>
 8011cc0:	46b1      	mov	r9, r6
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	f105 0e14 	add.w	lr, r5, #20
 8011cc8:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011ccc:	f8d9 b000 	ldr.w	fp, [r9]
 8011cd0:	b2a1      	uxth	r1, r4
 8011cd2:	fa1f fb8b 	uxth.w	fp, fp
 8011cd6:	fb0a b101 	mla	r1, sl, r1, fp
 8011cda:	4411      	add	r1, r2
 8011cdc:	f8d9 2000 	ldr.w	r2, [r9]
 8011ce0:	0c24      	lsrs	r4, r4, #16
 8011ce2:	0c12      	lsrs	r2, r2, #16
 8011ce4:	fb0a 2404 	mla	r4, sl, r4, r2
 8011ce8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011cec:	b289      	uxth	r1, r1
 8011cee:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011cf2:	45f4      	cmp	ip, lr
 8011cf4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011cf8:	f849 1b04 	str.w	r1, [r9], #4
 8011cfc:	d8e4      	bhi.n	8011cc8 <__multiply+0xa8>
 8011cfe:	9901      	ldr	r1, [sp, #4]
 8011d00:	5072      	str	r2, [r6, r1]
 8011d02:	9a03      	ldr	r2, [sp, #12]
 8011d04:	3304      	adds	r3, #4
 8011d06:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011d0a:	f1b9 0f00 	cmp.w	r9, #0
 8011d0e:	d01f      	beq.n	8011d50 <__multiply+0x130>
 8011d10:	46b6      	mov	lr, r6
 8011d12:	f04f 0a00 	mov.w	sl, #0
 8011d16:	6834      	ldr	r4, [r6, #0]
 8011d18:	f105 0114 	add.w	r1, r5, #20
 8011d1c:	880a      	ldrh	r2, [r1, #0]
 8011d1e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011d22:	b2a4      	uxth	r4, r4
 8011d24:	fb09 b202 	mla	r2, r9, r2, fp
 8011d28:	4492      	add	sl, r2
 8011d2a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011d2e:	f84e 4b04 	str.w	r4, [lr], #4
 8011d32:	f851 4b04 	ldr.w	r4, [r1], #4
 8011d36:	f8be 2000 	ldrh.w	r2, [lr]
 8011d3a:	0c24      	lsrs	r4, r4, #16
 8011d3c:	fb09 2404 	mla	r4, r9, r4, r2
 8011d40:	458c      	cmp	ip, r1
 8011d42:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011d46:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011d4a:	d8e7      	bhi.n	8011d1c <__multiply+0xfc>
 8011d4c:	9a01      	ldr	r2, [sp, #4]
 8011d4e:	50b4      	str	r4, [r6, r2]
 8011d50:	3604      	adds	r6, #4
 8011d52:	e7a3      	b.n	8011c9c <__multiply+0x7c>
 8011d54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d1a5      	bne.n	8011ca8 <__multiply+0x88>
 8011d5c:	3f01      	subs	r7, #1
 8011d5e:	e7a1      	b.n	8011ca4 <__multiply+0x84>
 8011d60:	08013f4b 	.word	0x08013f4b
 8011d64:	08013f5c 	.word	0x08013f5c

08011d68 <__pow5mult>:
 8011d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d6c:	4615      	mov	r5, r2
 8011d6e:	f012 0203 	ands.w	r2, r2, #3
 8011d72:	4606      	mov	r6, r0
 8011d74:	460f      	mov	r7, r1
 8011d76:	d007      	beq.n	8011d88 <__pow5mult+0x20>
 8011d78:	4c25      	ldr	r4, [pc, #148]	; (8011e10 <__pow5mult+0xa8>)
 8011d7a:	3a01      	subs	r2, #1
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011d82:	f7ff fe9f 	bl	8011ac4 <__multadd>
 8011d86:	4607      	mov	r7, r0
 8011d88:	10ad      	asrs	r5, r5, #2
 8011d8a:	d03d      	beq.n	8011e08 <__pow5mult+0xa0>
 8011d8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011d8e:	b97c      	cbnz	r4, 8011db0 <__pow5mult+0x48>
 8011d90:	2010      	movs	r0, #16
 8011d92:	f7fe fa27 	bl	80101e4 <malloc>
 8011d96:	4602      	mov	r2, r0
 8011d98:	6270      	str	r0, [r6, #36]	; 0x24
 8011d9a:	b928      	cbnz	r0, 8011da8 <__pow5mult+0x40>
 8011d9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011da0:	4b1c      	ldr	r3, [pc, #112]	; (8011e14 <__pow5mult+0xac>)
 8011da2:	481d      	ldr	r0, [pc, #116]	; (8011e18 <__pow5mult+0xb0>)
 8011da4:	f000 fb3e 	bl	8012424 <__assert_func>
 8011da8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011dac:	6004      	str	r4, [r0, #0]
 8011dae:	60c4      	str	r4, [r0, #12]
 8011db0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011db4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011db8:	b94c      	cbnz	r4, 8011dce <__pow5mult+0x66>
 8011dba:	f240 2171 	movw	r1, #625	; 0x271
 8011dbe:	4630      	mov	r0, r6
 8011dc0:	f7ff ff18 	bl	8011bf4 <__i2b>
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	4604      	mov	r4, r0
 8011dc8:	f8c8 0008 	str.w	r0, [r8, #8]
 8011dcc:	6003      	str	r3, [r0, #0]
 8011dce:	f04f 0900 	mov.w	r9, #0
 8011dd2:	07eb      	lsls	r3, r5, #31
 8011dd4:	d50a      	bpl.n	8011dec <__pow5mult+0x84>
 8011dd6:	4639      	mov	r1, r7
 8011dd8:	4622      	mov	r2, r4
 8011dda:	4630      	mov	r0, r6
 8011ddc:	f7ff ff20 	bl	8011c20 <__multiply>
 8011de0:	4680      	mov	r8, r0
 8011de2:	4639      	mov	r1, r7
 8011de4:	4630      	mov	r0, r6
 8011de6:	f7ff fe4b 	bl	8011a80 <_Bfree>
 8011dea:	4647      	mov	r7, r8
 8011dec:	106d      	asrs	r5, r5, #1
 8011dee:	d00b      	beq.n	8011e08 <__pow5mult+0xa0>
 8011df0:	6820      	ldr	r0, [r4, #0]
 8011df2:	b938      	cbnz	r0, 8011e04 <__pow5mult+0x9c>
 8011df4:	4622      	mov	r2, r4
 8011df6:	4621      	mov	r1, r4
 8011df8:	4630      	mov	r0, r6
 8011dfa:	f7ff ff11 	bl	8011c20 <__multiply>
 8011dfe:	6020      	str	r0, [r4, #0]
 8011e00:	f8c0 9000 	str.w	r9, [r0]
 8011e04:	4604      	mov	r4, r0
 8011e06:	e7e4      	b.n	8011dd2 <__pow5mult+0x6a>
 8011e08:	4638      	mov	r0, r7
 8011e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e0e:	bf00      	nop
 8011e10:	080140b0 	.word	0x080140b0
 8011e14:	08013ed5 	.word	0x08013ed5
 8011e18:	08013f5c 	.word	0x08013f5c

08011e1c <__lshift>:
 8011e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e20:	460c      	mov	r4, r1
 8011e22:	4607      	mov	r7, r0
 8011e24:	4691      	mov	r9, r2
 8011e26:	6923      	ldr	r3, [r4, #16]
 8011e28:	6849      	ldr	r1, [r1, #4]
 8011e2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011e2e:	68a3      	ldr	r3, [r4, #8]
 8011e30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011e34:	f108 0601 	add.w	r6, r8, #1
 8011e38:	42b3      	cmp	r3, r6
 8011e3a:	db0b      	blt.n	8011e54 <__lshift+0x38>
 8011e3c:	4638      	mov	r0, r7
 8011e3e:	f7ff fddf 	bl	8011a00 <_Balloc>
 8011e42:	4605      	mov	r5, r0
 8011e44:	b948      	cbnz	r0, 8011e5a <__lshift+0x3e>
 8011e46:	4602      	mov	r2, r0
 8011e48:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011e4c:	4b27      	ldr	r3, [pc, #156]	; (8011eec <__lshift+0xd0>)
 8011e4e:	4828      	ldr	r0, [pc, #160]	; (8011ef0 <__lshift+0xd4>)
 8011e50:	f000 fae8 	bl	8012424 <__assert_func>
 8011e54:	3101      	adds	r1, #1
 8011e56:	005b      	lsls	r3, r3, #1
 8011e58:	e7ee      	b.n	8011e38 <__lshift+0x1c>
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	f100 0114 	add.w	r1, r0, #20
 8011e60:	f100 0210 	add.w	r2, r0, #16
 8011e64:	4618      	mov	r0, r3
 8011e66:	4553      	cmp	r3, sl
 8011e68:	db33      	blt.n	8011ed2 <__lshift+0xb6>
 8011e6a:	6920      	ldr	r0, [r4, #16]
 8011e6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011e70:	f104 0314 	add.w	r3, r4, #20
 8011e74:	f019 091f 	ands.w	r9, r9, #31
 8011e78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011e7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011e80:	d02b      	beq.n	8011eda <__lshift+0xbe>
 8011e82:	468a      	mov	sl, r1
 8011e84:	2200      	movs	r2, #0
 8011e86:	f1c9 0e20 	rsb	lr, r9, #32
 8011e8a:	6818      	ldr	r0, [r3, #0]
 8011e8c:	fa00 f009 	lsl.w	r0, r0, r9
 8011e90:	4302      	orrs	r2, r0
 8011e92:	f84a 2b04 	str.w	r2, [sl], #4
 8011e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e9a:	459c      	cmp	ip, r3
 8011e9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011ea0:	d8f3      	bhi.n	8011e8a <__lshift+0x6e>
 8011ea2:	ebac 0304 	sub.w	r3, ip, r4
 8011ea6:	3b15      	subs	r3, #21
 8011ea8:	f023 0303 	bic.w	r3, r3, #3
 8011eac:	3304      	adds	r3, #4
 8011eae:	f104 0015 	add.w	r0, r4, #21
 8011eb2:	4584      	cmp	ip, r0
 8011eb4:	bf38      	it	cc
 8011eb6:	2304      	movcc	r3, #4
 8011eb8:	50ca      	str	r2, [r1, r3]
 8011eba:	b10a      	cbz	r2, 8011ec0 <__lshift+0xa4>
 8011ebc:	f108 0602 	add.w	r6, r8, #2
 8011ec0:	3e01      	subs	r6, #1
 8011ec2:	4638      	mov	r0, r7
 8011ec4:	4621      	mov	r1, r4
 8011ec6:	612e      	str	r6, [r5, #16]
 8011ec8:	f7ff fdda 	bl	8011a80 <_Bfree>
 8011ecc:	4628      	mov	r0, r5
 8011ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ed2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011ed6:	3301      	adds	r3, #1
 8011ed8:	e7c5      	b.n	8011e66 <__lshift+0x4a>
 8011eda:	3904      	subs	r1, #4
 8011edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ee0:	459c      	cmp	ip, r3
 8011ee2:	f841 2f04 	str.w	r2, [r1, #4]!
 8011ee6:	d8f9      	bhi.n	8011edc <__lshift+0xc0>
 8011ee8:	e7ea      	b.n	8011ec0 <__lshift+0xa4>
 8011eea:	bf00      	nop
 8011eec:	08013f4b 	.word	0x08013f4b
 8011ef0:	08013f5c 	.word	0x08013f5c

08011ef4 <__mcmp>:
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	690a      	ldr	r2, [r1, #16]
 8011ef8:	6900      	ldr	r0, [r0, #16]
 8011efa:	b530      	push	{r4, r5, lr}
 8011efc:	1a80      	subs	r0, r0, r2
 8011efe:	d10d      	bne.n	8011f1c <__mcmp+0x28>
 8011f00:	3314      	adds	r3, #20
 8011f02:	3114      	adds	r1, #20
 8011f04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011f08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011f0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011f10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011f14:	4295      	cmp	r5, r2
 8011f16:	d002      	beq.n	8011f1e <__mcmp+0x2a>
 8011f18:	d304      	bcc.n	8011f24 <__mcmp+0x30>
 8011f1a:	2001      	movs	r0, #1
 8011f1c:	bd30      	pop	{r4, r5, pc}
 8011f1e:	42a3      	cmp	r3, r4
 8011f20:	d3f4      	bcc.n	8011f0c <__mcmp+0x18>
 8011f22:	e7fb      	b.n	8011f1c <__mcmp+0x28>
 8011f24:	f04f 30ff 	mov.w	r0, #4294967295
 8011f28:	e7f8      	b.n	8011f1c <__mcmp+0x28>
	...

08011f2c <__mdiff>:
 8011f2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f30:	460c      	mov	r4, r1
 8011f32:	4606      	mov	r6, r0
 8011f34:	4611      	mov	r1, r2
 8011f36:	4620      	mov	r0, r4
 8011f38:	4692      	mov	sl, r2
 8011f3a:	f7ff ffdb 	bl	8011ef4 <__mcmp>
 8011f3e:	1e05      	subs	r5, r0, #0
 8011f40:	d111      	bne.n	8011f66 <__mdiff+0x3a>
 8011f42:	4629      	mov	r1, r5
 8011f44:	4630      	mov	r0, r6
 8011f46:	f7ff fd5b 	bl	8011a00 <_Balloc>
 8011f4a:	4602      	mov	r2, r0
 8011f4c:	b928      	cbnz	r0, 8011f5a <__mdiff+0x2e>
 8011f4e:	f240 2132 	movw	r1, #562	; 0x232
 8011f52:	4b3c      	ldr	r3, [pc, #240]	; (8012044 <__mdiff+0x118>)
 8011f54:	483c      	ldr	r0, [pc, #240]	; (8012048 <__mdiff+0x11c>)
 8011f56:	f000 fa65 	bl	8012424 <__assert_func>
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011f60:	4610      	mov	r0, r2
 8011f62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f66:	bfa4      	itt	ge
 8011f68:	4653      	movge	r3, sl
 8011f6a:	46a2      	movge	sl, r4
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8011f72:	bfa6      	itte	ge
 8011f74:	461c      	movge	r4, r3
 8011f76:	2500      	movge	r5, #0
 8011f78:	2501      	movlt	r5, #1
 8011f7a:	f7ff fd41 	bl	8011a00 <_Balloc>
 8011f7e:	4602      	mov	r2, r0
 8011f80:	b918      	cbnz	r0, 8011f8a <__mdiff+0x5e>
 8011f82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011f86:	4b2f      	ldr	r3, [pc, #188]	; (8012044 <__mdiff+0x118>)
 8011f88:	e7e4      	b.n	8011f54 <__mdiff+0x28>
 8011f8a:	f100 0814 	add.w	r8, r0, #20
 8011f8e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8011f92:	60c5      	str	r5, [r0, #12]
 8011f94:	f04f 0c00 	mov.w	ip, #0
 8011f98:	f10a 0514 	add.w	r5, sl, #20
 8011f9c:	f10a 0010 	add.w	r0, sl, #16
 8011fa0:	46c2      	mov	sl, r8
 8011fa2:	6926      	ldr	r6, [r4, #16]
 8011fa4:	f104 0914 	add.w	r9, r4, #20
 8011fa8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8011fac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011fb0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8011fb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8011fb8:	fa1f f18b 	uxth.w	r1, fp
 8011fbc:	4461      	add	r1, ip
 8011fbe:	fa1f fc83 	uxth.w	ip, r3
 8011fc2:	0c1b      	lsrs	r3, r3, #16
 8011fc4:	eba1 010c 	sub.w	r1, r1, ip
 8011fc8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011fcc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011fd0:	b289      	uxth	r1, r1
 8011fd2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8011fd6:	454e      	cmp	r6, r9
 8011fd8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011fdc:	f84a 3b04 	str.w	r3, [sl], #4
 8011fe0:	d8e6      	bhi.n	8011fb0 <__mdiff+0x84>
 8011fe2:	1b33      	subs	r3, r6, r4
 8011fe4:	3b15      	subs	r3, #21
 8011fe6:	f023 0303 	bic.w	r3, r3, #3
 8011fea:	3415      	adds	r4, #21
 8011fec:	3304      	adds	r3, #4
 8011fee:	42a6      	cmp	r6, r4
 8011ff0:	bf38      	it	cc
 8011ff2:	2304      	movcc	r3, #4
 8011ff4:	441d      	add	r5, r3
 8011ff6:	4443      	add	r3, r8
 8011ff8:	461e      	mov	r6, r3
 8011ffa:	462c      	mov	r4, r5
 8011ffc:	4574      	cmp	r4, lr
 8011ffe:	d30e      	bcc.n	801201e <__mdiff+0xf2>
 8012000:	f10e 0103 	add.w	r1, lr, #3
 8012004:	1b49      	subs	r1, r1, r5
 8012006:	f021 0103 	bic.w	r1, r1, #3
 801200a:	3d03      	subs	r5, #3
 801200c:	45ae      	cmp	lr, r5
 801200e:	bf38      	it	cc
 8012010:	2100      	movcc	r1, #0
 8012012:	4419      	add	r1, r3
 8012014:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8012018:	b18b      	cbz	r3, 801203e <__mdiff+0x112>
 801201a:	6117      	str	r7, [r2, #16]
 801201c:	e7a0      	b.n	8011f60 <__mdiff+0x34>
 801201e:	f854 8b04 	ldr.w	r8, [r4], #4
 8012022:	fa1f f188 	uxth.w	r1, r8
 8012026:	4461      	add	r1, ip
 8012028:	1408      	asrs	r0, r1, #16
 801202a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 801202e:	b289      	uxth	r1, r1
 8012030:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012034:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012038:	f846 1b04 	str.w	r1, [r6], #4
 801203c:	e7de      	b.n	8011ffc <__mdiff+0xd0>
 801203e:	3f01      	subs	r7, #1
 8012040:	e7e8      	b.n	8012014 <__mdiff+0xe8>
 8012042:	bf00      	nop
 8012044:	08013f4b 	.word	0x08013f4b
 8012048:	08013f5c 	.word	0x08013f5c

0801204c <__d2b>:
 801204c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012050:	2101      	movs	r1, #1
 8012052:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8012056:	4690      	mov	r8, r2
 8012058:	461d      	mov	r5, r3
 801205a:	f7ff fcd1 	bl	8011a00 <_Balloc>
 801205e:	4604      	mov	r4, r0
 8012060:	b930      	cbnz	r0, 8012070 <__d2b+0x24>
 8012062:	4602      	mov	r2, r0
 8012064:	f240 310a 	movw	r1, #778	; 0x30a
 8012068:	4b24      	ldr	r3, [pc, #144]	; (80120fc <__d2b+0xb0>)
 801206a:	4825      	ldr	r0, [pc, #148]	; (8012100 <__d2b+0xb4>)
 801206c:	f000 f9da 	bl	8012424 <__assert_func>
 8012070:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8012074:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8012078:	bb2d      	cbnz	r5, 80120c6 <__d2b+0x7a>
 801207a:	9301      	str	r3, [sp, #4]
 801207c:	f1b8 0300 	subs.w	r3, r8, #0
 8012080:	d026      	beq.n	80120d0 <__d2b+0x84>
 8012082:	4668      	mov	r0, sp
 8012084:	9300      	str	r3, [sp, #0]
 8012086:	f7ff fd87 	bl	8011b98 <__lo0bits>
 801208a:	9900      	ldr	r1, [sp, #0]
 801208c:	b1f0      	cbz	r0, 80120cc <__d2b+0x80>
 801208e:	9a01      	ldr	r2, [sp, #4]
 8012090:	f1c0 0320 	rsb	r3, r0, #32
 8012094:	fa02 f303 	lsl.w	r3, r2, r3
 8012098:	430b      	orrs	r3, r1
 801209a:	40c2      	lsrs	r2, r0
 801209c:	6163      	str	r3, [r4, #20]
 801209e:	9201      	str	r2, [sp, #4]
 80120a0:	9b01      	ldr	r3, [sp, #4]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	bf14      	ite	ne
 80120a6:	2102      	movne	r1, #2
 80120a8:	2101      	moveq	r1, #1
 80120aa:	61a3      	str	r3, [r4, #24]
 80120ac:	6121      	str	r1, [r4, #16]
 80120ae:	b1c5      	cbz	r5, 80120e2 <__d2b+0x96>
 80120b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80120b4:	4405      	add	r5, r0
 80120b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80120ba:	603d      	str	r5, [r7, #0]
 80120bc:	6030      	str	r0, [r6, #0]
 80120be:	4620      	mov	r0, r4
 80120c0:	b002      	add	sp, #8
 80120c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80120ca:	e7d6      	b.n	801207a <__d2b+0x2e>
 80120cc:	6161      	str	r1, [r4, #20]
 80120ce:	e7e7      	b.n	80120a0 <__d2b+0x54>
 80120d0:	a801      	add	r0, sp, #4
 80120d2:	f7ff fd61 	bl	8011b98 <__lo0bits>
 80120d6:	2101      	movs	r1, #1
 80120d8:	9b01      	ldr	r3, [sp, #4]
 80120da:	6121      	str	r1, [r4, #16]
 80120dc:	6163      	str	r3, [r4, #20]
 80120de:	3020      	adds	r0, #32
 80120e0:	e7e5      	b.n	80120ae <__d2b+0x62>
 80120e2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80120e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80120ea:	6038      	str	r0, [r7, #0]
 80120ec:	6918      	ldr	r0, [r3, #16]
 80120ee:	f7ff fd33 	bl	8011b58 <__hi0bits>
 80120f2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80120f6:	6031      	str	r1, [r6, #0]
 80120f8:	e7e1      	b.n	80120be <__d2b+0x72>
 80120fa:	bf00      	nop
 80120fc:	08013f4b 	.word	0x08013f4b
 8012100:	08013f5c 	.word	0x08013f5c

08012104 <_calloc_r>:
 8012104:	b538      	push	{r3, r4, r5, lr}
 8012106:	fb02 f501 	mul.w	r5, r2, r1
 801210a:	4629      	mov	r1, r5
 801210c:	f7fe f8ea 	bl	80102e4 <_malloc_r>
 8012110:	4604      	mov	r4, r0
 8012112:	b118      	cbz	r0, 801211c <_calloc_r+0x18>
 8012114:	462a      	mov	r2, r5
 8012116:	2100      	movs	r1, #0
 8012118:	f7fe f890 	bl	801023c <memset>
 801211c:	4620      	mov	r0, r4
 801211e:	bd38      	pop	{r3, r4, r5, pc}

08012120 <_realloc_r>:
 8012120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012122:	4607      	mov	r7, r0
 8012124:	4614      	mov	r4, r2
 8012126:	460e      	mov	r6, r1
 8012128:	b921      	cbnz	r1, 8012134 <_realloc_r+0x14>
 801212a:	4611      	mov	r1, r2
 801212c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012130:	f7fe b8d8 	b.w	80102e4 <_malloc_r>
 8012134:	b922      	cbnz	r2, 8012140 <_realloc_r+0x20>
 8012136:	f7fe f889 	bl	801024c <_free_r>
 801213a:	4625      	mov	r5, r4
 801213c:	4628      	mov	r0, r5
 801213e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012140:	f000 f9cf 	bl	80124e2 <_malloc_usable_size_r>
 8012144:	42a0      	cmp	r0, r4
 8012146:	d20f      	bcs.n	8012168 <_realloc_r+0x48>
 8012148:	4621      	mov	r1, r4
 801214a:	4638      	mov	r0, r7
 801214c:	f7fe f8ca 	bl	80102e4 <_malloc_r>
 8012150:	4605      	mov	r5, r0
 8012152:	2800      	cmp	r0, #0
 8012154:	d0f2      	beq.n	801213c <_realloc_r+0x1c>
 8012156:	4631      	mov	r1, r6
 8012158:	4622      	mov	r2, r4
 801215a:	f7fe f861 	bl	8010220 <memcpy>
 801215e:	4631      	mov	r1, r6
 8012160:	4638      	mov	r0, r7
 8012162:	f7fe f873 	bl	801024c <_free_r>
 8012166:	e7e9      	b.n	801213c <_realloc_r+0x1c>
 8012168:	4635      	mov	r5, r6
 801216a:	e7e7      	b.n	801213c <_realloc_r+0x1c>

0801216c <__ssputs_r>:
 801216c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012170:	688e      	ldr	r6, [r1, #8]
 8012172:	4682      	mov	sl, r0
 8012174:	429e      	cmp	r6, r3
 8012176:	460c      	mov	r4, r1
 8012178:	4690      	mov	r8, r2
 801217a:	461f      	mov	r7, r3
 801217c:	d838      	bhi.n	80121f0 <__ssputs_r+0x84>
 801217e:	898a      	ldrh	r2, [r1, #12]
 8012180:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012184:	d032      	beq.n	80121ec <__ssputs_r+0x80>
 8012186:	6825      	ldr	r5, [r4, #0]
 8012188:	6909      	ldr	r1, [r1, #16]
 801218a:	3301      	adds	r3, #1
 801218c:	eba5 0901 	sub.w	r9, r5, r1
 8012190:	6965      	ldr	r5, [r4, #20]
 8012192:	444b      	add	r3, r9
 8012194:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012198:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801219c:	106d      	asrs	r5, r5, #1
 801219e:	429d      	cmp	r5, r3
 80121a0:	bf38      	it	cc
 80121a2:	461d      	movcc	r5, r3
 80121a4:	0553      	lsls	r3, r2, #21
 80121a6:	d531      	bpl.n	801220c <__ssputs_r+0xa0>
 80121a8:	4629      	mov	r1, r5
 80121aa:	f7fe f89b 	bl	80102e4 <_malloc_r>
 80121ae:	4606      	mov	r6, r0
 80121b0:	b950      	cbnz	r0, 80121c8 <__ssputs_r+0x5c>
 80121b2:	230c      	movs	r3, #12
 80121b4:	f04f 30ff 	mov.w	r0, #4294967295
 80121b8:	f8ca 3000 	str.w	r3, [sl]
 80121bc:	89a3      	ldrh	r3, [r4, #12]
 80121be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121c2:	81a3      	strh	r3, [r4, #12]
 80121c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121c8:	464a      	mov	r2, r9
 80121ca:	6921      	ldr	r1, [r4, #16]
 80121cc:	f7fe f828 	bl	8010220 <memcpy>
 80121d0:	89a3      	ldrh	r3, [r4, #12]
 80121d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80121d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121da:	81a3      	strh	r3, [r4, #12]
 80121dc:	6126      	str	r6, [r4, #16]
 80121de:	444e      	add	r6, r9
 80121e0:	6026      	str	r6, [r4, #0]
 80121e2:	463e      	mov	r6, r7
 80121e4:	6165      	str	r5, [r4, #20]
 80121e6:	eba5 0509 	sub.w	r5, r5, r9
 80121ea:	60a5      	str	r5, [r4, #8]
 80121ec:	42be      	cmp	r6, r7
 80121ee:	d900      	bls.n	80121f2 <__ssputs_r+0x86>
 80121f0:	463e      	mov	r6, r7
 80121f2:	4632      	mov	r2, r6
 80121f4:	4641      	mov	r1, r8
 80121f6:	6820      	ldr	r0, [r4, #0]
 80121f8:	f000 f959 	bl	80124ae <memmove>
 80121fc:	68a3      	ldr	r3, [r4, #8]
 80121fe:	6822      	ldr	r2, [r4, #0]
 8012200:	1b9b      	subs	r3, r3, r6
 8012202:	4432      	add	r2, r6
 8012204:	2000      	movs	r0, #0
 8012206:	60a3      	str	r3, [r4, #8]
 8012208:	6022      	str	r2, [r4, #0]
 801220a:	e7db      	b.n	80121c4 <__ssputs_r+0x58>
 801220c:	462a      	mov	r2, r5
 801220e:	f7ff ff87 	bl	8012120 <_realloc_r>
 8012212:	4606      	mov	r6, r0
 8012214:	2800      	cmp	r0, #0
 8012216:	d1e1      	bne.n	80121dc <__ssputs_r+0x70>
 8012218:	4650      	mov	r0, sl
 801221a:	6921      	ldr	r1, [r4, #16]
 801221c:	f7fe f816 	bl	801024c <_free_r>
 8012220:	e7c7      	b.n	80121b2 <__ssputs_r+0x46>
	...

08012224 <_svfiprintf_r>:
 8012224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012228:	4698      	mov	r8, r3
 801222a:	898b      	ldrh	r3, [r1, #12]
 801222c:	4607      	mov	r7, r0
 801222e:	061b      	lsls	r3, r3, #24
 8012230:	460d      	mov	r5, r1
 8012232:	4614      	mov	r4, r2
 8012234:	b09d      	sub	sp, #116	; 0x74
 8012236:	d50e      	bpl.n	8012256 <_svfiprintf_r+0x32>
 8012238:	690b      	ldr	r3, [r1, #16]
 801223a:	b963      	cbnz	r3, 8012256 <_svfiprintf_r+0x32>
 801223c:	2140      	movs	r1, #64	; 0x40
 801223e:	f7fe f851 	bl	80102e4 <_malloc_r>
 8012242:	6028      	str	r0, [r5, #0]
 8012244:	6128      	str	r0, [r5, #16]
 8012246:	b920      	cbnz	r0, 8012252 <_svfiprintf_r+0x2e>
 8012248:	230c      	movs	r3, #12
 801224a:	603b      	str	r3, [r7, #0]
 801224c:	f04f 30ff 	mov.w	r0, #4294967295
 8012250:	e0d1      	b.n	80123f6 <_svfiprintf_r+0x1d2>
 8012252:	2340      	movs	r3, #64	; 0x40
 8012254:	616b      	str	r3, [r5, #20]
 8012256:	2300      	movs	r3, #0
 8012258:	9309      	str	r3, [sp, #36]	; 0x24
 801225a:	2320      	movs	r3, #32
 801225c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012260:	2330      	movs	r3, #48	; 0x30
 8012262:	f04f 0901 	mov.w	r9, #1
 8012266:	f8cd 800c 	str.w	r8, [sp, #12]
 801226a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012410 <_svfiprintf_r+0x1ec>
 801226e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012272:	4623      	mov	r3, r4
 8012274:	469a      	mov	sl, r3
 8012276:	f813 2b01 	ldrb.w	r2, [r3], #1
 801227a:	b10a      	cbz	r2, 8012280 <_svfiprintf_r+0x5c>
 801227c:	2a25      	cmp	r2, #37	; 0x25
 801227e:	d1f9      	bne.n	8012274 <_svfiprintf_r+0x50>
 8012280:	ebba 0b04 	subs.w	fp, sl, r4
 8012284:	d00b      	beq.n	801229e <_svfiprintf_r+0x7a>
 8012286:	465b      	mov	r3, fp
 8012288:	4622      	mov	r2, r4
 801228a:	4629      	mov	r1, r5
 801228c:	4638      	mov	r0, r7
 801228e:	f7ff ff6d 	bl	801216c <__ssputs_r>
 8012292:	3001      	adds	r0, #1
 8012294:	f000 80aa 	beq.w	80123ec <_svfiprintf_r+0x1c8>
 8012298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801229a:	445a      	add	r2, fp
 801229c:	9209      	str	r2, [sp, #36]	; 0x24
 801229e:	f89a 3000 	ldrb.w	r3, [sl]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	f000 80a2 	beq.w	80123ec <_svfiprintf_r+0x1c8>
 80122a8:	2300      	movs	r3, #0
 80122aa:	f04f 32ff 	mov.w	r2, #4294967295
 80122ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122b2:	f10a 0a01 	add.w	sl, sl, #1
 80122b6:	9304      	str	r3, [sp, #16]
 80122b8:	9307      	str	r3, [sp, #28]
 80122ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80122be:	931a      	str	r3, [sp, #104]	; 0x68
 80122c0:	4654      	mov	r4, sl
 80122c2:	2205      	movs	r2, #5
 80122c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122c8:	4851      	ldr	r0, [pc, #324]	; (8012410 <_svfiprintf_r+0x1ec>)
 80122ca:	f7ff fb7f 	bl	80119cc <memchr>
 80122ce:	9a04      	ldr	r2, [sp, #16]
 80122d0:	b9d8      	cbnz	r0, 801230a <_svfiprintf_r+0xe6>
 80122d2:	06d0      	lsls	r0, r2, #27
 80122d4:	bf44      	itt	mi
 80122d6:	2320      	movmi	r3, #32
 80122d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122dc:	0711      	lsls	r1, r2, #28
 80122de:	bf44      	itt	mi
 80122e0:	232b      	movmi	r3, #43	; 0x2b
 80122e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122e6:	f89a 3000 	ldrb.w	r3, [sl]
 80122ea:	2b2a      	cmp	r3, #42	; 0x2a
 80122ec:	d015      	beq.n	801231a <_svfiprintf_r+0xf6>
 80122ee:	4654      	mov	r4, sl
 80122f0:	2000      	movs	r0, #0
 80122f2:	f04f 0c0a 	mov.w	ip, #10
 80122f6:	9a07      	ldr	r2, [sp, #28]
 80122f8:	4621      	mov	r1, r4
 80122fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122fe:	3b30      	subs	r3, #48	; 0x30
 8012300:	2b09      	cmp	r3, #9
 8012302:	d94e      	bls.n	80123a2 <_svfiprintf_r+0x17e>
 8012304:	b1b0      	cbz	r0, 8012334 <_svfiprintf_r+0x110>
 8012306:	9207      	str	r2, [sp, #28]
 8012308:	e014      	b.n	8012334 <_svfiprintf_r+0x110>
 801230a:	eba0 0308 	sub.w	r3, r0, r8
 801230e:	fa09 f303 	lsl.w	r3, r9, r3
 8012312:	4313      	orrs	r3, r2
 8012314:	46a2      	mov	sl, r4
 8012316:	9304      	str	r3, [sp, #16]
 8012318:	e7d2      	b.n	80122c0 <_svfiprintf_r+0x9c>
 801231a:	9b03      	ldr	r3, [sp, #12]
 801231c:	1d19      	adds	r1, r3, #4
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	9103      	str	r1, [sp, #12]
 8012322:	2b00      	cmp	r3, #0
 8012324:	bfbb      	ittet	lt
 8012326:	425b      	neglt	r3, r3
 8012328:	f042 0202 	orrlt.w	r2, r2, #2
 801232c:	9307      	strge	r3, [sp, #28]
 801232e:	9307      	strlt	r3, [sp, #28]
 8012330:	bfb8      	it	lt
 8012332:	9204      	strlt	r2, [sp, #16]
 8012334:	7823      	ldrb	r3, [r4, #0]
 8012336:	2b2e      	cmp	r3, #46	; 0x2e
 8012338:	d10c      	bne.n	8012354 <_svfiprintf_r+0x130>
 801233a:	7863      	ldrb	r3, [r4, #1]
 801233c:	2b2a      	cmp	r3, #42	; 0x2a
 801233e:	d135      	bne.n	80123ac <_svfiprintf_r+0x188>
 8012340:	9b03      	ldr	r3, [sp, #12]
 8012342:	3402      	adds	r4, #2
 8012344:	1d1a      	adds	r2, r3, #4
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	9203      	str	r2, [sp, #12]
 801234a:	2b00      	cmp	r3, #0
 801234c:	bfb8      	it	lt
 801234e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012352:	9305      	str	r3, [sp, #20]
 8012354:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012420 <_svfiprintf_r+0x1fc>
 8012358:	2203      	movs	r2, #3
 801235a:	4650      	mov	r0, sl
 801235c:	7821      	ldrb	r1, [r4, #0]
 801235e:	f7ff fb35 	bl	80119cc <memchr>
 8012362:	b140      	cbz	r0, 8012376 <_svfiprintf_r+0x152>
 8012364:	2340      	movs	r3, #64	; 0x40
 8012366:	eba0 000a 	sub.w	r0, r0, sl
 801236a:	fa03 f000 	lsl.w	r0, r3, r0
 801236e:	9b04      	ldr	r3, [sp, #16]
 8012370:	3401      	adds	r4, #1
 8012372:	4303      	orrs	r3, r0
 8012374:	9304      	str	r3, [sp, #16]
 8012376:	f814 1b01 	ldrb.w	r1, [r4], #1
 801237a:	2206      	movs	r2, #6
 801237c:	4825      	ldr	r0, [pc, #148]	; (8012414 <_svfiprintf_r+0x1f0>)
 801237e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012382:	f7ff fb23 	bl	80119cc <memchr>
 8012386:	2800      	cmp	r0, #0
 8012388:	d038      	beq.n	80123fc <_svfiprintf_r+0x1d8>
 801238a:	4b23      	ldr	r3, [pc, #140]	; (8012418 <_svfiprintf_r+0x1f4>)
 801238c:	bb1b      	cbnz	r3, 80123d6 <_svfiprintf_r+0x1b2>
 801238e:	9b03      	ldr	r3, [sp, #12]
 8012390:	3307      	adds	r3, #7
 8012392:	f023 0307 	bic.w	r3, r3, #7
 8012396:	3308      	adds	r3, #8
 8012398:	9303      	str	r3, [sp, #12]
 801239a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801239c:	4433      	add	r3, r6
 801239e:	9309      	str	r3, [sp, #36]	; 0x24
 80123a0:	e767      	b.n	8012272 <_svfiprintf_r+0x4e>
 80123a2:	460c      	mov	r4, r1
 80123a4:	2001      	movs	r0, #1
 80123a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80123aa:	e7a5      	b.n	80122f8 <_svfiprintf_r+0xd4>
 80123ac:	2300      	movs	r3, #0
 80123ae:	f04f 0c0a 	mov.w	ip, #10
 80123b2:	4619      	mov	r1, r3
 80123b4:	3401      	adds	r4, #1
 80123b6:	9305      	str	r3, [sp, #20]
 80123b8:	4620      	mov	r0, r4
 80123ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123be:	3a30      	subs	r2, #48	; 0x30
 80123c0:	2a09      	cmp	r2, #9
 80123c2:	d903      	bls.n	80123cc <_svfiprintf_r+0x1a8>
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d0c5      	beq.n	8012354 <_svfiprintf_r+0x130>
 80123c8:	9105      	str	r1, [sp, #20]
 80123ca:	e7c3      	b.n	8012354 <_svfiprintf_r+0x130>
 80123cc:	4604      	mov	r4, r0
 80123ce:	2301      	movs	r3, #1
 80123d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80123d4:	e7f0      	b.n	80123b8 <_svfiprintf_r+0x194>
 80123d6:	ab03      	add	r3, sp, #12
 80123d8:	9300      	str	r3, [sp, #0]
 80123da:	462a      	mov	r2, r5
 80123dc:	4638      	mov	r0, r7
 80123de:	4b0f      	ldr	r3, [pc, #60]	; (801241c <_svfiprintf_r+0x1f8>)
 80123e0:	a904      	add	r1, sp, #16
 80123e2:	f7fe f877 	bl	80104d4 <_printf_float>
 80123e6:	1c42      	adds	r2, r0, #1
 80123e8:	4606      	mov	r6, r0
 80123ea:	d1d6      	bne.n	801239a <_svfiprintf_r+0x176>
 80123ec:	89ab      	ldrh	r3, [r5, #12]
 80123ee:	065b      	lsls	r3, r3, #25
 80123f0:	f53f af2c 	bmi.w	801224c <_svfiprintf_r+0x28>
 80123f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123f6:	b01d      	add	sp, #116	; 0x74
 80123f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123fc:	ab03      	add	r3, sp, #12
 80123fe:	9300      	str	r3, [sp, #0]
 8012400:	462a      	mov	r2, r5
 8012402:	4638      	mov	r0, r7
 8012404:	4b05      	ldr	r3, [pc, #20]	; (801241c <_svfiprintf_r+0x1f8>)
 8012406:	a904      	add	r1, sp, #16
 8012408:	f7fe fb00 	bl	8010a0c <_printf_i>
 801240c:	e7eb      	b.n	80123e6 <_svfiprintf_r+0x1c2>
 801240e:	bf00      	nop
 8012410:	080140bc 	.word	0x080140bc
 8012414:	080140c6 	.word	0x080140c6
 8012418:	080104d5 	.word	0x080104d5
 801241c:	0801216d 	.word	0x0801216d
 8012420:	080140c2 	.word	0x080140c2

08012424 <__assert_func>:
 8012424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012426:	4614      	mov	r4, r2
 8012428:	461a      	mov	r2, r3
 801242a:	4b09      	ldr	r3, [pc, #36]	; (8012450 <__assert_func+0x2c>)
 801242c:	4605      	mov	r5, r0
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	68d8      	ldr	r0, [r3, #12]
 8012432:	b14c      	cbz	r4, 8012448 <__assert_func+0x24>
 8012434:	4b07      	ldr	r3, [pc, #28]	; (8012454 <__assert_func+0x30>)
 8012436:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801243a:	9100      	str	r1, [sp, #0]
 801243c:	462b      	mov	r3, r5
 801243e:	4906      	ldr	r1, [pc, #24]	; (8012458 <__assert_func+0x34>)
 8012440:	f000 f80e 	bl	8012460 <fiprintf>
 8012444:	f000 fa7a 	bl	801293c <abort>
 8012448:	4b04      	ldr	r3, [pc, #16]	; (801245c <__assert_func+0x38>)
 801244a:	461c      	mov	r4, r3
 801244c:	e7f3      	b.n	8012436 <__assert_func+0x12>
 801244e:	bf00      	nop
 8012450:	200001c4 	.word	0x200001c4
 8012454:	080140cd 	.word	0x080140cd
 8012458:	080140da 	.word	0x080140da
 801245c:	08014108 	.word	0x08014108

08012460 <fiprintf>:
 8012460:	b40e      	push	{r1, r2, r3}
 8012462:	b503      	push	{r0, r1, lr}
 8012464:	4601      	mov	r1, r0
 8012466:	ab03      	add	r3, sp, #12
 8012468:	4805      	ldr	r0, [pc, #20]	; (8012480 <fiprintf+0x20>)
 801246a:	f853 2b04 	ldr.w	r2, [r3], #4
 801246e:	6800      	ldr	r0, [r0, #0]
 8012470:	9301      	str	r3, [sp, #4]
 8012472:	f000 f865 	bl	8012540 <_vfiprintf_r>
 8012476:	b002      	add	sp, #8
 8012478:	f85d eb04 	ldr.w	lr, [sp], #4
 801247c:	b003      	add	sp, #12
 801247e:	4770      	bx	lr
 8012480:	200001c4 	.word	0x200001c4

08012484 <__retarget_lock_init_recursive>:
 8012484:	4770      	bx	lr

08012486 <__retarget_lock_acquire_recursive>:
 8012486:	4770      	bx	lr

08012488 <__retarget_lock_release_recursive>:
 8012488:	4770      	bx	lr

0801248a <__ascii_mbtowc>:
 801248a:	b082      	sub	sp, #8
 801248c:	b901      	cbnz	r1, 8012490 <__ascii_mbtowc+0x6>
 801248e:	a901      	add	r1, sp, #4
 8012490:	b142      	cbz	r2, 80124a4 <__ascii_mbtowc+0x1a>
 8012492:	b14b      	cbz	r3, 80124a8 <__ascii_mbtowc+0x1e>
 8012494:	7813      	ldrb	r3, [r2, #0]
 8012496:	600b      	str	r3, [r1, #0]
 8012498:	7812      	ldrb	r2, [r2, #0]
 801249a:	1e10      	subs	r0, r2, #0
 801249c:	bf18      	it	ne
 801249e:	2001      	movne	r0, #1
 80124a0:	b002      	add	sp, #8
 80124a2:	4770      	bx	lr
 80124a4:	4610      	mov	r0, r2
 80124a6:	e7fb      	b.n	80124a0 <__ascii_mbtowc+0x16>
 80124a8:	f06f 0001 	mvn.w	r0, #1
 80124ac:	e7f8      	b.n	80124a0 <__ascii_mbtowc+0x16>

080124ae <memmove>:
 80124ae:	4288      	cmp	r0, r1
 80124b0:	b510      	push	{r4, lr}
 80124b2:	eb01 0402 	add.w	r4, r1, r2
 80124b6:	d902      	bls.n	80124be <memmove+0x10>
 80124b8:	4284      	cmp	r4, r0
 80124ba:	4623      	mov	r3, r4
 80124bc:	d807      	bhi.n	80124ce <memmove+0x20>
 80124be:	1e43      	subs	r3, r0, #1
 80124c0:	42a1      	cmp	r1, r4
 80124c2:	d008      	beq.n	80124d6 <memmove+0x28>
 80124c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80124c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80124cc:	e7f8      	b.n	80124c0 <memmove+0x12>
 80124ce:	4601      	mov	r1, r0
 80124d0:	4402      	add	r2, r0
 80124d2:	428a      	cmp	r2, r1
 80124d4:	d100      	bne.n	80124d8 <memmove+0x2a>
 80124d6:	bd10      	pop	{r4, pc}
 80124d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80124dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80124e0:	e7f7      	b.n	80124d2 <memmove+0x24>

080124e2 <_malloc_usable_size_r>:
 80124e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124e6:	1f18      	subs	r0, r3, #4
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	bfbc      	itt	lt
 80124ec:	580b      	ldrlt	r3, [r1, r0]
 80124ee:	18c0      	addlt	r0, r0, r3
 80124f0:	4770      	bx	lr

080124f2 <__sfputc_r>:
 80124f2:	6893      	ldr	r3, [r2, #8]
 80124f4:	b410      	push	{r4}
 80124f6:	3b01      	subs	r3, #1
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	6093      	str	r3, [r2, #8]
 80124fc:	da07      	bge.n	801250e <__sfputc_r+0x1c>
 80124fe:	6994      	ldr	r4, [r2, #24]
 8012500:	42a3      	cmp	r3, r4
 8012502:	db01      	blt.n	8012508 <__sfputc_r+0x16>
 8012504:	290a      	cmp	r1, #10
 8012506:	d102      	bne.n	801250e <__sfputc_r+0x1c>
 8012508:	bc10      	pop	{r4}
 801250a:	f000 b949 	b.w	80127a0 <__swbuf_r>
 801250e:	6813      	ldr	r3, [r2, #0]
 8012510:	1c58      	adds	r0, r3, #1
 8012512:	6010      	str	r0, [r2, #0]
 8012514:	7019      	strb	r1, [r3, #0]
 8012516:	4608      	mov	r0, r1
 8012518:	bc10      	pop	{r4}
 801251a:	4770      	bx	lr

0801251c <__sfputs_r>:
 801251c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801251e:	4606      	mov	r6, r0
 8012520:	460f      	mov	r7, r1
 8012522:	4614      	mov	r4, r2
 8012524:	18d5      	adds	r5, r2, r3
 8012526:	42ac      	cmp	r4, r5
 8012528:	d101      	bne.n	801252e <__sfputs_r+0x12>
 801252a:	2000      	movs	r0, #0
 801252c:	e007      	b.n	801253e <__sfputs_r+0x22>
 801252e:	463a      	mov	r2, r7
 8012530:	4630      	mov	r0, r6
 8012532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012536:	f7ff ffdc 	bl	80124f2 <__sfputc_r>
 801253a:	1c43      	adds	r3, r0, #1
 801253c:	d1f3      	bne.n	8012526 <__sfputs_r+0xa>
 801253e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012540 <_vfiprintf_r>:
 8012540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012544:	460d      	mov	r5, r1
 8012546:	4614      	mov	r4, r2
 8012548:	4698      	mov	r8, r3
 801254a:	4606      	mov	r6, r0
 801254c:	b09d      	sub	sp, #116	; 0x74
 801254e:	b118      	cbz	r0, 8012558 <_vfiprintf_r+0x18>
 8012550:	6983      	ldr	r3, [r0, #24]
 8012552:	b90b      	cbnz	r3, 8012558 <_vfiprintf_r+0x18>
 8012554:	f000 fb14 	bl	8012b80 <__sinit>
 8012558:	4b89      	ldr	r3, [pc, #548]	; (8012780 <_vfiprintf_r+0x240>)
 801255a:	429d      	cmp	r5, r3
 801255c:	d11b      	bne.n	8012596 <_vfiprintf_r+0x56>
 801255e:	6875      	ldr	r5, [r6, #4]
 8012560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012562:	07d9      	lsls	r1, r3, #31
 8012564:	d405      	bmi.n	8012572 <_vfiprintf_r+0x32>
 8012566:	89ab      	ldrh	r3, [r5, #12]
 8012568:	059a      	lsls	r2, r3, #22
 801256a:	d402      	bmi.n	8012572 <_vfiprintf_r+0x32>
 801256c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801256e:	f7ff ff8a 	bl	8012486 <__retarget_lock_acquire_recursive>
 8012572:	89ab      	ldrh	r3, [r5, #12]
 8012574:	071b      	lsls	r3, r3, #28
 8012576:	d501      	bpl.n	801257c <_vfiprintf_r+0x3c>
 8012578:	692b      	ldr	r3, [r5, #16]
 801257a:	b9eb      	cbnz	r3, 80125b8 <_vfiprintf_r+0x78>
 801257c:	4629      	mov	r1, r5
 801257e:	4630      	mov	r0, r6
 8012580:	f000 f96e 	bl	8012860 <__swsetup_r>
 8012584:	b1c0      	cbz	r0, 80125b8 <_vfiprintf_r+0x78>
 8012586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012588:	07dc      	lsls	r4, r3, #31
 801258a:	d50e      	bpl.n	80125aa <_vfiprintf_r+0x6a>
 801258c:	f04f 30ff 	mov.w	r0, #4294967295
 8012590:	b01d      	add	sp, #116	; 0x74
 8012592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012596:	4b7b      	ldr	r3, [pc, #492]	; (8012784 <_vfiprintf_r+0x244>)
 8012598:	429d      	cmp	r5, r3
 801259a:	d101      	bne.n	80125a0 <_vfiprintf_r+0x60>
 801259c:	68b5      	ldr	r5, [r6, #8]
 801259e:	e7df      	b.n	8012560 <_vfiprintf_r+0x20>
 80125a0:	4b79      	ldr	r3, [pc, #484]	; (8012788 <_vfiprintf_r+0x248>)
 80125a2:	429d      	cmp	r5, r3
 80125a4:	bf08      	it	eq
 80125a6:	68f5      	ldreq	r5, [r6, #12]
 80125a8:	e7da      	b.n	8012560 <_vfiprintf_r+0x20>
 80125aa:	89ab      	ldrh	r3, [r5, #12]
 80125ac:	0598      	lsls	r0, r3, #22
 80125ae:	d4ed      	bmi.n	801258c <_vfiprintf_r+0x4c>
 80125b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80125b2:	f7ff ff69 	bl	8012488 <__retarget_lock_release_recursive>
 80125b6:	e7e9      	b.n	801258c <_vfiprintf_r+0x4c>
 80125b8:	2300      	movs	r3, #0
 80125ba:	9309      	str	r3, [sp, #36]	; 0x24
 80125bc:	2320      	movs	r3, #32
 80125be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80125c2:	2330      	movs	r3, #48	; 0x30
 80125c4:	f04f 0901 	mov.w	r9, #1
 80125c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80125cc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801278c <_vfiprintf_r+0x24c>
 80125d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80125d4:	4623      	mov	r3, r4
 80125d6:	469a      	mov	sl, r3
 80125d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125dc:	b10a      	cbz	r2, 80125e2 <_vfiprintf_r+0xa2>
 80125de:	2a25      	cmp	r2, #37	; 0x25
 80125e0:	d1f9      	bne.n	80125d6 <_vfiprintf_r+0x96>
 80125e2:	ebba 0b04 	subs.w	fp, sl, r4
 80125e6:	d00b      	beq.n	8012600 <_vfiprintf_r+0xc0>
 80125e8:	465b      	mov	r3, fp
 80125ea:	4622      	mov	r2, r4
 80125ec:	4629      	mov	r1, r5
 80125ee:	4630      	mov	r0, r6
 80125f0:	f7ff ff94 	bl	801251c <__sfputs_r>
 80125f4:	3001      	adds	r0, #1
 80125f6:	f000 80aa 	beq.w	801274e <_vfiprintf_r+0x20e>
 80125fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125fc:	445a      	add	r2, fp
 80125fe:	9209      	str	r2, [sp, #36]	; 0x24
 8012600:	f89a 3000 	ldrb.w	r3, [sl]
 8012604:	2b00      	cmp	r3, #0
 8012606:	f000 80a2 	beq.w	801274e <_vfiprintf_r+0x20e>
 801260a:	2300      	movs	r3, #0
 801260c:	f04f 32ff 	mov.w	r2, #4294967295
 8012610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012614:	f10a 0a01 	add.w	sl, sl, #1
 8012618:	9304      	str	r3, [sp, #16]
 801261a:	9307      	str	r3, [sp, #28]
 801261c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012620:	931a      	str	r3, [sp, #104]	; 0x68
 8012622:	4654      	mov	r4, sl
 8012624:	2205      	movs	r2, #5
 8012626:	f814 1b01 	ldrb.w	r1, [r4], #1
 801262a:	4858      	ldr	r0, [pc, #352]	; (801278c <_vfiprintf_r+0x24c>)
 801262c:	f7ff f9ce 	bl	80119cc <memchr>
 8012630:	9a04      	ldr	r2, [sp, #16]
 8012632:	b9d8      	cbnz	r0, 801266c <_vfiprintf_r+0x12c>
 8012634:	06d1      	lsls	r1, r2, #27
 8012636:	bf44      	itt	mi
 8012638:	2320      	movmi	r3, #32
 801263a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801263e:	0713      	lsls	r3, r2, #28
 8012640:	bf44      	itt	mi
 8012642:	232b      	movmi	r3, #43	; 0x2b
 8012644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012648:	f89a 3000 	ldrb.w	r3, [sl]
 801264c:	2b2a      	cmp	r3, #42	; 0x2a
 801264e:	d015      	beq.n	801267c <_vfiprintf_r+0x13c>
 8012650:	4654      	mov	r4, sl
 8012652:	2000      	movs	r0, #0
 8012654:	f04f 0c0a 	mov.w	ip, #10
 8012658:	9a07      	ldr	r2, [sp, #28]
 801265a:	4621      	mov	r1, r4
 801265c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012660:	3b30      	subs	r3, #48	; 0x30
 8012662:	2b09      	cmp	r3, #9
 8012664:	d94e      	bls.n	8012704 <_vfiprintf_r+0x1c4>
 8012666:	b1b0      	cbz	r0, 8012696 <_vfiprintf_r+0x156>
 8012668:	9207      	str	r2, [sp, #28]
 801266a:	e014      	b.n	8012696 <_vfiprintf_r+0x156>
 801266c:	eba0 0308 	sub.w	r3, r0, r8
 8012670:	fa09 f303 	lsl.w	r3, r9, r3
 8012674:	4313      	orrs	r3, r2
 8012676:	46a2      	mov	sl, r4
 8012678:	9304      	str	r3, [sp, #16]
 801267a:	e7d2      	b.n	8012622 <_vfiprintf_r+0xe2>
 801267c:	9b03      	ldr	r3, [sp, #12]
 801267e:	1d19      	adds	r1, r3, #4
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	9103      	str	r1, [sp, #12]
 8012684:	2b00      	cmp	r3, #0
 8012686:	bfbb      	ittet	lt
 8012688:	425b      	neglt	r3, r3
 801268a:	f042 0202 	orrlt.w	r2, r2, #2
 801268e:	9307      	strge	r3, [sp, #28]
 8012690:	9307      	strlt	r3, [sp, #28]
 8012692:	bfb8      	it	lt
 8012694:	9204      	strlt	r2, [sp, #16]
 8012696:	7823      	ldrb	r3, [r4, #0]
 8012698:	2b2e      	cmp	r3, #46	; 0x2e
 801269a:	d10c      	bne.n	80126b6 <_vfiprintf_r+0x176>
 801269c:	7863      	ldrb	r3, [r4, #1]
 801269e:	2b2a      	cmp	r3, #42	; 0x2a
 80126a0:	d135      	bne.n	801270e <_vfiprintf_r+0x1ce>
 80126a2:	9b03      	ldr	r3, [sp, #12]
 80126a4:	3402      	adds	r4, #2
 80126a6:	1d1a      	adds	r2, r3, #4
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	9203      	str	r2, [sp, #12]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	bfb8      	it	lt
 80126b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80126b4:	9305      	str	r3, [sp, #20]
 80126b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801279c <_vfiprintf_r+0x25c>
 80126ba:	2203      	movs	r2, #3
 80126bc:	4650      	mov	r0, sl
 80126be:	7821      	ldrb	r1, [r4, #0]
 80126c0:	f7ff f984 	bl	80119cc <memchr>
 80126c4:	b140      	cbz	r0, 80126d8 <_vfiprintf_r+0x198>
 80126c6:	2340      	movs	r3, #64	; 0x40
 80126c8:	eba0 000a 	sub.w	r0, r0, sl
 80126cc:	fa03 f000 	lsl.w	r0, r3, r0
 80126d0:	9b04      	ldr	r3, [sp, #16]
 80126d2:	3401      	adds	r4, #1
 80126d4:	4303      	orrs	r3, r0
 80126d6:	9304      	str	r3, [sp, #16]
 80126d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126dc:	2206      	movs	r2, #6
 80126de:	482c      	ldr	r0, [pc, #176]	; (8012790 <_vfiprintf_r+0x250>)
 80126e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80126e4:	f7ff f972 	bl	80119cc <memchr>
 80126e8:	2800      	cmp	r0, #0
 80126ea:	d03f      	beq.n	801276c <_vfiprintf_r+0x22c>
 80126ec:	4b29      	ldr	r3, [pc, #164]	; (8012794 <_vfiprintf_r+0x254>)
 80126ee:	bb1b      	cbnz	r3, 8012738 <_vfiprintf_r+0x1f8>
 80126f0:	9b03      	ldr	r3, [sp, #12]
 80126f2:	3307      	adds	r3, #7
 80126f4:	f023 0307 	bic.w	r3, r3, #7
 80126f8:	3308      	adds	r3, #8
 80126fa:	9303      	str	r3, [sp, #12]
 80126fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126fe:	443b      	add	r3, r7
 8012700:	9309      	str	r3, [sp, #36]	; 0x24
 8012702:	e767      	b.n	80125d4 <_vfiprintf_r+0x94>
 8012704:	460c      	mov	r4, r1
 8012706:	2001      	movs	r0, #1
 8012708:	fb0c 3202 	mla	r2, ip, r2, r3
 801270c:	e7a5      	b.n	801265a <_vfiprintf_r+0x11a>
 801270e:	2300      	movs	r3, #0
 8012710:	f04f 0c0a 	mov.w	ip, #10
 8012714:	4619      	mov	r1, r3
 8012716:	3401      	adds	r4, #1
 8012718:	9305      	str	r3, [sp, #20]
 801271a:	4620      	mov	r0, r4
 801271c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012720:	3a30      	subs	r2, #48	; 0x30
 8012722:	2a09      	cmp	r2, #9
 8012724:	d903      	bls.n	801272e <_vfiprintf_r+0x1ee>
 8012726:	2b00      	cmp	r3, #0
 8012728:	d0c5      	beq.n	80126b6 <_vfiprintf_r+0x176>
 801272a:	9105      	str	r1, [sp, #20]
 801272c:	e7c3      	b.n	80126b6 <_vfiprintf_r+0x176>
 801272e:	4604      	mov	r4, r0
 8012730:	2301      	movs	r3, #1
 8012732:	fb0c 2101 	mla	r1, ip, r1, r2
 8012736:	e7f0      	b.n	801271a <_vfiprintf_r+0x1da>
 8012738:	ab03      	add	r3, sp, #12
 801273a:	9300      	str	r3, [sp, #0]
 801273c:	462a      	mov	r2, r5
 801273e:	4630      	mov	r0, r6
 8012740:	4b15      	ldr	r3, [pc, #84]	; (8012798 <_vfiprintf_r+0x258>)
 8012742:	a904      	add	r1, sp, #16
 8012744:	f7fd fec6 	bl	80104d4 <_printf_float>
 8012748:	4607      	mov	r7, r0
 801274a:	1c78      	adds	r0, r7, #1
 801274c:	d1d6      	bne.n	80126fc <_vfiprintf_r+0x1bc>
 801274e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012750:	07d9      	lsls	r1, r3, #31
 8012752:	d405      	bmi.n	8012760 <_vfiprintf_r+0x220>
 8012754:	89ab      	ldrh	r3, [r5, #12]
 8012756:	059a      	lsls	r2, r3, #22
 8012758:	d402      	bmi.n	8012760 <_vfiprintf_r+0x220>
 801275a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801275c:	f7ff fe94 	bl	8012488 <__retarget_lock_release_recursive>
 8012760:	89ab      	ldrh	r3, [r5, #12]
 8012762:	065b      	lsls	r3, r3, #25
 8012764:	f53f af12 	bmi.w	801258c <_vfiprintf_r+0x4c>
 8012768:	9809      	ldr	r0, [sp, #36]	; 0x24
 801276a:	e711      	b.n	8012590 <_vfiprintf_r+0x50>
 801276c:	ab03      	add	r3, sp, #12
 801276e:	9300      	str	r3, [sp, #0]
 8012770:	462a      	mov	r2, r5
 8012772:	4630      	mov	r0, r6
 8012774:	4b08      	ldr	r3, [pc, #32]	; (8012798 <_vfiprintf_r+0x258>)
 8012776:	a904      	add	r1, sp, #16
 8012778:	f7fe f948 	bl	8010a0c <_printf_i>
 801277c:	e7e4      	b.n	8012748 <_vfiprintf_r+0x208>
 801277e:	bf00      	nop
 8012780:	08014234 	.word	0x08014234
 8012784:	08014254 	.word	0x08014254
 8012788:	08014214 	.word	0x08014214
 801278c:	080140bc 	.word	0x080140bc
 8012790:	080140c6 	.word	0x080140c6
 8012794:	080104d5 	.word	0x080104d5
 8012798:	0801251d 	.word	0x0801251d
 801279c:	080140c2 	.word	0x080140c2

080127a0 <__swbuf_r>:
 80127a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127a2:	460e      	mov	r6, r1
 80127a4:	4614      	mov	r4, r2
 80127a6:	4605      	mov	r5, r0
 80127a8:	b118      	cbz	r0, 80127b2 <__swbuf_r+0x12>
 80127aa:	6983      	ldr	r3, [r0, #24]
 80127ac:	b90b      	cbnz	r3, 80127b2 <__swbuf_r+0x12>
 80127ae:	f000 f9e7 	bl	8012b80 <__sinit>
 80127b2:	4b21      	ldr	r3, [pc, #132]	; (8012838 <__swbuf_r+0x98>)
 80127b4:	429c      	cmp	r4, r3
 80127b6:	d12b      	bne.n	8012810 <__swbuf_r+0x70>
 80127b8:	686c      	ldr	r4, [r5, #4]
 80127ba:	69a3      	ldr	r3, [r4, #24]
 80127bc:	60a3      	str	r3, [r4, #8]
 80127be:	89a3      	ldrh	r3, [r4, #12]
 80127c0:	071a      	lsls	r2, r3, #28
 80127c2:	d52f      	bpl.n	8012824 <__swbuf_r+0x84>
 80127c4:	6923      	ldr	r3, [r4, #16]
 80127c6:	b36b      	cbz	r3, 8012824 <__swbuf_r+0x84>
 80127c8:	6923      	ldr	r3, [r4, #16]
 80127ca:	6820      	ldr	r0, [r4, #0]
 80127cc:	b2f6      	uxtb	r6, r6
 80127ce:	1ac0      	subs	r0, r0, r3
 80127d0:	6963      	ldr	r3, [r4, #20]
 80127d2:	4637      	mov	r7, r6
 80127d4:	4283      	cmp	r3, r0
 80127d6:	dc04      	bgt.n	80127e2 <__swbuf_r+0x42>
 80127d8:	4621      	mov	r1, r4
 80127da:	4628      	mov	r0, r5
 80127dc:	f000 f93c 	bl	8012a58 <_fflush_r>
 80127e0:	bb30      	cbnz	r0, 8012830 <__swbuf_r+0x90>
 80127e2:	68a3      	ldr	r3, [r4, #8]
 80127e4:	3001      	adds	r0, #1
 80127e6:	3b01      	subs	r3, #1
 80127e8:	60a3      	str	r3, [r4, #8]
 80127ea:	6823      	ldr	r3, [r4, #0]
 80127ec:	1c5a      	adds	r2, r3, #1
 80127ee:	6022      	str	r2, [r4, #0]
 80127f0:	701e      	strb	r6, [r3, #0]
 80127f2:	6963      	ldr	r3, [r4, #20]
 80127f4:	4283      	cmp	r3, r0
 80127f6:	d004      	beq.n	8012802 <__swbuf_r+0x62>
 80127f8:	89a3      	ldrh	r3, [r4, #12]
 80127fa:	07db      	lsls	r3, r3, #31
 80127fc:	d506      	bpl.n	801280c <__swbuf_r+0x6c>
 80127fe:	2e0a      	cmp	r6, #10
 8012800:	d104      	bne.n	801280c <__swbuf_r+0x6c>
 8012802:	4621      	mov	r1, r4
 8012804:	4628      	mov	r0, r5
 8012806:	f000 f927 	bl	8012a58 <_fflush_r>
 801280a:	b988      	cbnz	r0, 8012830 <__swbuf_r+0x90>
 801280c:	4638      	mov	r0, r7
 801280e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012810:	4b0a      	ldr	r3, [pc, #40]	; (801283c <__swbuf_r+0x9c>)
 8012812:	429c      	cmp	r4, r3
 8012814:	d101      	bne.n	801281a <__swbuf_r+0x7a>
 8012816:	68ac      	ldr	r4, [r5, #8]
 8012818:	e7cf      	b.n	80127ba <__swbuf_r+0x1a>
 801281a:	4b09      	ldr	r3, [pc, #36]	; (8012840 <__swbuf_r+0xa0>)
 801281c:	429c      	cmp	r4, r3
 801281e:	bf08      	it	eq
 8012820:	68ec      	ldreq	r4, [r5, #12]
 8012822:	e7ca      	b.n	80127ba <__swbuf_r+0x1a>
 8012824:	4621      	mov	r1, r4
 8012826:	4628      	mov	r0, r5
 8012828:	f000 f81a 	bl	8012860 <__swsetup_r>
 801282c:	2800      	cmp	r0, #0
 801282e:	d0cb      	beq.n	80127c8 <__swbuf_r+0x28>
 8012830:	f04f 37ff 	mov.w	r7, #4294967295
 8012834:	e7ea      	b.n	801280c <__swbuf_r+0x6c>
 8012836:	bf00      	nop
 8012838:	08014234 	.word	0x08014234
 801283c:	08014254 	.word	0x08014254
 8012840:	08014214 	.word	0x08014214

08012844 <__ascii_wctomb>:
 8012844:	4603      	mov	r3, r0
 8012846:	4608      	mov	r0, r1
 8012848:	b141      	cbz	r1, 801285c <__ascii_wctomb+0x18>
 801284a:	2aff      	cmp	r2, #255	; 0xff
 801284c:	d904      	bls.n	8012858 <__ascii_wctomb+0x14>
 801284e:	228a      	movs	r2, #138	; 0x8a
 8012850:	f04f 30ff 	mov.w	r0, #4294967295
 8012854:	601a      	str	r2, [r3, #0]
 8012856:	4770      	bx	lr
 8012858:	2001      	movs	r0, #1
 801285a:	700a      	strb	r2, [r1, #0]
 801285c:	4770      	bx	lr
	...

08012860 <__swsetup_r>:
 8012860:	4b32      	ldr	r3, [pc, #200]	; (801292c <__swsetup_r+0xcc>)
 8012862:	b570      	push	{r4, r5, r6, lr}
 8012864:	681d      	ldr	r5, [r3, #0]
 8012866:	4606      	mov	r6, r0
 8012868:	460c      	mov	r4, r1
 801286a:	b125      	cbz	r5, 8012876 <__swsetup_r+0x16>
 801286c:	69ab      	ldr	r3, [r5, #24]
 801286e:	b913      	cbnz	r3, 8012876 <__swsetup_r+0x16>
 8012870:	4628      	mov	r0, r5
 8012872:	f000 f985 	bl	8012b80 <__sinit>
 8012876:	4b2e      	ldr	r3, [pc, #184]	; (8012930 <__swsetup_r+0xd0>)
 8012878:	429c      	cmp	r4, r3
 801287a:	d10f      	bne.n	801289c <__swsetup_r+0x3c>
 801287c:	686c      	ldr	r4, [r5, #4]
 801287e:	89a3      	ldrh	r3, [r4, #12]
 8012880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012884:	0719      	lsls	r1, r3, #28
 8012886:	d42c      	bmi.n	80128e2 <__swsetup_r+0x82>
 8012888:	06dd      	lsls	r5, r3, #27
 801288a:	d411      	bmi.n	80128b0 <__swsetup_r+0x50>
 801288c:	2309      	movs	r3, #9
 801288e:	6033      	str	r3, [r6, #0]
 8012890:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012894:	f04f 30ff 	mov.w	r0, #4294967295
 8012898:	81a3      	strh	r3, [r4, #12]
 801289a:	e03e      	b.n	801291a <__swsetup_r+0xba>
 801289c:	4b25      	ldr	r3, [pc, #148]	; (8012934 <__swsetup_r+0xd4>)
 801289e:	429c      	cmp	r4, r3
 80128a0:	d101      	bne.n	80128a6 <__swsetup_r+0x46>
 80128a2:	68ac      	ldr	r4, [r5, #8]
 80128a4:	e7eb      	b.n	801287e <__swsetup_r+0x1e>
 80128a6:	4b24      	ldr	r3, [pc, #144]	; (8012938 <__swsetup_r+0xd8>)
 80128a8:	429c      	cmp	r4, r3
 80128aa:	bf08      	it	eq
 80128ac:	68ec      	ldreq	r4, [r5, #12]
 80128ae:	e7e6      	b.n	801287e <__swsetup_r+0x1e>
 80128b0:	0758      	lsls	r0, r3, #29
 80128b2:	d512      	bpl.n	80128da <__swsetup_r+0x7a>
 80128b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80128b6:	b141      	cbz	r1, 80128ca <__swsetup_r+0x6a>
 80128b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80128bc:	4299      	cmp	r1, r3
 80128be:	d002      	beq.n	80128c6 <__swsetup_r+0x66>
 80128c0:	4630      	mov	r0, r6
 80128c2:	f7fd fcc3 	bl	801024c <_free_r>
 80128c6:	2300      	movs	r3, #0
 80128c8:	6363      	str	r3, [r4, #52]	; 0x34
 80128ca:	89a3      	ldrh	r3, [r4, #12]
 80128cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80128d0:	81a3      	strh	r3, [r4, #12]
 80128d2:	2300      	movs	r3, #0
 80128d4:	6063      	str	r3, [r4, #4]
 80128d6:	6923      	ldr	r3, [r4, #16]
 80128d8:	6023      	str	r3, [r4, #0]
 80128da:	89a3      	ldrh	r3, [r4, #12]
 80128dc:	f043 0308 	orr.w	r3, r3, #8
 80128e0:	81a3      	strh	r3, [r4, #12]
 80128e2:	6923      	ldr	r3, [r4, #16]
 80128e4:	b94b      	cbnz	r3, 80128fa <__swsetup_r+0x9a>
 80128e6:	89a3      	ldrh	r3, [r4, #12]
 80128e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80128ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80128f0:	d003      	beq.n	80128fa <__swsetup_r+0x9a>
 80128f2:	4621      	mov	r1, r4
 80128f4:	4630      	mov	r0, r6
 80128f6:	f000 fa05 	bl	8012d04 <__smakebuf_r>
 80128fa:	89a0      	ldrh	r0, [r4, #12]
 80128fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012900:	f010 0301 	ands.w	r3, r0, #1
 8012904:	d00a      	beq.n	801291c <__swsetup_r+0xbc>
 8012906:	2300      	movs	r3, #0
 8012908:	60a3      	str	r3, [r4, #8]
 801290a:	6963      	ldr	r3, [r4, #20]
 801290c:	425b      	negs	r3, r3
 801290e:	61a3      	str	r3, [r4, #24]
 8012910:	6923      	ldr	r3, [r4, #16]
 8012912:	b943      	cbnz	r3, 8012926 <__swsetup_r+0xc6>
 8012914:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012918:	d1ba      	bne.n	8012890 <__swsetup_r+0x30>
 801291a:	bd70      	pop	{r4, r5, r6, pc}
 801291c:	0781      	lsls	r1, r0, #30
 801291e:	bf58      	it	pl
 8012920:	6963      	ldrpl	r3, [r4, #20]
 8012922:	60a3      	str	r3, [r4, #8]
 8012924:	e7f4      	b.n	8012910 <__swsetup_r+0xb0>
 8012926:	2000      	movs	r0, #0
 8012928:	e7f7      	b.n	801291a <__swsetup_r+0xba>
 801292a:	bf00      	nop
 801292c:	200001c4 	.word	0x200001c4
 8012930:	08014234 	.word	0x08014234
 8012934:	08014254 	.word	0x08014254
 8012938:	08014214 	.word	0x08014214

0801293c <abort>:
 801293c:	2006      	movs	r0, #6
 801293e:	b508      	push	{r3, lr}
 8012940:	f000 fa48 	bl	8012dd4 <raise>
 8012944:	2001      	movs	r0, #1
 8012946:	f7f3 fbc0 	bl	80060ca <_exit>
	...

0801294c <__sflush_r>:
 801294c:	898a      	ldrh	r2, [r1, #12]
 801294e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012952:	4605      	mov	r5, r0
 8012954:	0710      	lsls	r0, r2, #28
 8012956:	460c      	mov	r4, r1
 8012958:	d458      	bmi.n	8012a0c <__sflush_r+0xc0>
 801295a:	684b      	ldr	r3, [r1, #4]
 801295c:	2b00      	cmp	r3, #0
 801295e:	dc05      	bgt.n	801296c <__sflush_r+0x20>
 8012960:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012962:	2b00      	cmp	r3, #0
 8012964:	dc02      	bgt.n	801296c <__sflush_r+0x20>
 8012966:	2000      	movs	r0, #0
 8012968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801296c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801296e:	2e00      	cmp	r6, #0
 8012970:	d0f9      	beq.n	8012966 <__sflush_r+0x1a>
 8012972:	2300      	movs	r3, #0
 8012974:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012978:	682f      	ldr	r7, [r5, #0]
 801297a:	602b      	str	r3, [r5, #0]
 801297c:	d032      	beq.n	80129e4 <__sflush_r+0x98>
 801297e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012980:	89a3      	ldrh	r3, [r4, #12]
 8012982:	075a      	lsls	r2, r3, #29
 8012984:	d505      	bpl.n	8012992 <__sflush_r+0x46>
 8012986:	6863      	ldr	r3, [r4, #4]
 8012988:	1ac0      	subs	r0, r0, r3
 801298a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801298c:	b10b      	cbz	r3, 8012992 <__sflush_r+0x46>
 801298e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012990:	1ac0      	subs	r0, r0, r3
 8012992:	2300      	movs	r3, #0
 8012994:	4602      	mov	r2, r0
 8012996:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012998:	4628      	mov	r0, r5
 801299a:	6a21      	ldr	r1, [r4, #32]
 801299c:	47b0      	blx	r6
 801299e:	1c43      	adds	r3, r0, #1
 80129a0:	89a3      	ldrh	r3, [r4, #12]
 80129a2:	d106      	bne.n	80129b2 <__sflush_r+0x66>
 80129a4:	6829      	ldr	r1, [r5, #0]
 80129a6:	291d      	cmp	r1, #29
 80129a8:	d82c      	bhi.n	8012a04 <__sflush_r+0xb8>
 80129aa:	4a2a      	ldr	r2, [pc, #168]	; (8012a54 <__sflush_r+0x108>)
 80129ac:	40ca      	lsrs	r2, r1
 80129ae:	07d6      	lsls	r6, r2, #31
 80129b0:	d528      	bpl.n	8012a04 <__sflush_r+0xb8>
 80129b2:	2200      	movs	r2, #0
 80129b4:	6062      	str	r2, [r4, #4]
 80129b6:	6922      	ldr	r2, [r4, #16]
 80129b8:	04d9      	lsls	r1, r3, #19
 80129ba:	6022      	str	r2, [r4, #0]
 80129bc:	d504      	bpl.n	80129c8 <__sflush_r+0x7c>
 80129be:	1c42      	adds	r2, r0, #1
 80129c0:	d101      	bne.n	80129c6 <__sflush_r+0x7a>
 80129c2:	682b      	ldr	r3, [r5, #0]
 80129c4:	b903      	cbnz	r3, 80129c8 <__sflush_r+0x7c>
 80129c6:	6560      	str	r0, [r4, #84]	; 0x54
 80129c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80129ca:	602f      	str	r7, [r5, #0]
 80129cc:	2900      	cmp	r1, #0
 80129ce:	d0ca      	beq.n	8012966 <__sflush_r+0x1a>
 80129d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80129d4:	4299      	cmp	r1, r3
 80129d6:	d002      	beq.n	80129de <__sflush_r+0x92>
 80129d8:	4628      	mov	r0, r5
 80129da:	f7fd fc37 	bl	801024c <_free_r>
 80129de:	2000      	movs	r0, #0
 80129e0:	6360      	str	r0, [r4, #52]	; 0x34
 80129e2:	e7c1      	b.n	8012968 <__sflush_r+0x1c>
 80129e4:	6a21      	ldr	r1, [r4, #32]
 80129e6:	2301      	movs	r3, #1
 80129e8:	4628      	mov	r0, r5
 80129ea:	47b0      	blx	r6
 80129ec:	1c41      	adds	r1, r0, #1
 80129ee:	d1c7      	bne.n	8012980 <__sflush_r+0x34>
 80129f0:	682b      	ldr	r3, [r5, #0]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d0c4      	beq.n	8012980 <__sflush_r+0x34>
 80129f6:	2b1d      	cmp	r3, #29
 80129f8:	d001      	beq.n	80129fe <__sflush_r+0xb2>
 80129fa:	2b16      	cmp	r3, #22
 80129fc:	d101      	bne.n	8012a02 <__sflush_r+0xb6>
 80129fe:	602f      	str	r7, [r5, #0]
 8012a00:	e7b1      	b.n	8012966 <__sflush_r+0x1a>
 8012a02:	89a3      	ldrh	r3, [r4, #12]
 8012a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a08:	81a3      	strh	r3, [r4, #12]
 8012a0a:	e7ad      	b.n	8012968 <__sflush_r+0x1c>
 8012a0c:	690f      	ldr	r7, [r1, #16]
 8012a0e:	2f00      	cmp	r7, #0
 8012a10:	d0a9      	beq.n	8012966 <__sflush_r+0x1a>
 8012a12:	0793      	lsls	r3, r2, #30
 8012a14:	bf18      	it	ne
 8012a16:	2300      	movne	r3, #0
 8012a18:	680e      	ldr	r6, [r1, #0]
 8012a1a:	bf08      	it	eq
 8012a1c:	694b      	ldreq	r3, [r1, #20]
 8012a1e:	eba6 0807 	sub.w	r8, r6, r7
 8012a22:	600f      	str	r7, [r1, #0]
 8012a24:	608b      	str	r3, [r1, #8]
 8012a26:	f1b8 0f00 	cmp.w	r8, #0
 8012a2a:	dd9c      	ble.n	8012966 <__sflush_r+0x1a>
 8012a2c:	4643      	mov	r3, r8
 8012a2e:	463a      	mov	r2, r7
 8012a30:	4628      	mov	r0, r5
 8012a32:	6a21      	ldr	r1, [r4, #32]
 8012a34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012a36:	47b0      	blx	r6
 8012a38:	2800      	cmp	r0, #0
 8012a3a:	dc06      	bgt.n	8012a4a <__sflush_r+0xfe>
 8012a3c:	89a3      	ldrh	r3, [r4, #12]
 8012a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8012a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a46:	81a3      	strh	r3, [r4, #12]
 8012a48:	e78e      	b.n	8012968 <__sflush_r+0x1c>
 8012a4a:	4407      	add	r7, r0
 8012a4c:	eba8 0800 	sub.w	r8, r8, r0
 8012a50:	e7e9      	b.n	8012a26 <__sflush_r+0xda>
 8012a52:	bf00      	nop
 8012a54:	20400001 	.word	0x20400001

08012a58 <_fflush_r>:
 8012a58:	b538      	push	{r3, r4, r5, lr}
 8012a5a:	690b      	ldr	r3, [r1, #16]
 8012a5c:	4605      	mov	r5, r0
 8012a5e:	460c      	mov	r4, r1
 8012a60:	b913      	cbnz	r3, 8012a68 <_fflush_r+0x10>
 8012a62:	2500      	movs	r5, #0
 8012a64:	4628      	mov	r0, r5
 8012a66:	bd38      	pop	{r3, r4, r5, pc}
 8012a68:	b118      	cbz	r0, 8012a72 <_fflush_r+0x1a>
 8012a6a:	6983      	ldr	r3, [r0, #24]
 8012a6c:	b90b      	cbnz	r3, 8012a72 <_fflush_r+0x1a>
 8012a6e:	f000 f887 	bl	8012b80 <__sinit>
 8012a72:	4b14      	ldr	r3, [pc, #80]	; (8012ac4 <_fflush_r+0x6c>)
 8012a74:	429c      	cmp	r4, r3
 8012a76:	d11b      	bne.n	8012ab0 <_fflush_r+0x58>
 8012a78:	686c      	ldr	r4, [r5, #4]
 8012a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d0ef      	beq.n	8012a62 <_fflush_r+0xa>
 8012a82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012a84:	07d0      	lsls	r0, r2, #31
 8012a86:	d404      	bmi.n	8012a92 <_fflush_r+0x3a>
 8012a88:	0599      	lsls	r1, r3, #22
 8012a8a:	d402      	bmi.n	8012a92 <_fflush_r+0x3a>
 8012a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a8e:	f7ff fcfa 	bl	8012486 <__retarget_lock_acquire_recursive>
 8012a92:	4628      	mov	r0, r5
 8012a94:	4621      	mov	r1, r4
 8012a96:	f7ff ff59 	bl	801294c <__sflush_r>
 8012a9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a9c:	4605      	mov	r5, r0
 8012a9e:	07da      	lsls	r2, r3, #31
 8012aa0:	d4e0      	bmi.n	8012a64 <_fflush_r+0xc>
 8012aa2:	89a3      	ldrh	r3, [r4, #12]
 8012aa4:	059b      	lsls	r3, r3, #22
 8012aa6:	d4dd      	bmi.n	8012a64 <_fflush_r+0xc>
 8012aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012aaa:	f7ff fced 	bl	8012488 <__retarget_lock_release_recursive>
 8012aae:	e7d9      	b.n	8012a64 <_fflush_r+0xc>
 8012ab0:	4b05      	ldr	r3, [pc, #20]	; (8012ac8 <_fflush_r+0x70>)
 8012ab2:	429c      	cmp	r4, r3
 8012ab4:	d101      	bne.n	8012aba <_fflush_r+0x62>
 8012ab6:	68ac      	ldr	r4, [r5, #8]
 8012ab8:	e7df      	b.n	8012a7a <_fflush_r+0x22>
 8012aba:	4b04      	ldr	r3, [pc, #16]	; (8012acc <_fflush_r+0x74>)
 8012abc:	429c      	cmp	r4, r3
 8012abe:	bf08      	it	eq
 8012ac0:	68ec      	ldreq	r4, [r5, #12]
 8012ac2:	e7da      	b.n	8012a7a <_fflush_r+0x22>
 8012ac4:	08014234 	.word	0x08014234
 8012ac8:	08014254 	.word	0x08014254
 8012acc:	08014214 	.word	0x08014214

08012ad0 <std>:
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	b510      	push	{r4, lr}
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	e9c0 3300 	strd	r3, r3, [r0]
 8012ada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012ade:	6083      	str	r3, [r0, #8]
 8012ae0:	8181      	strh	r1, [r0, #12]
 8012ae2:	6643      	str	r3, [r0, #100]	; 0x64
 8012ae4:	81c2      	strh	r2, [r0, #14]
 8012ae6:	6183      	str	r3, [r0, #24]
 8012ae8:	4619      	mov	r1, r3
 8012aea:	2208      	movs	r2, #8
 8012aec:	305c      	adds	r0, #92	; 0x5c
 8012aee:	f7fd fba5 	bl	801023c <memset>
 8012af2:	4b05      	ldr	r3, [pc, #20]	; (8012b08 <std+0x38>)
 8012af4:	6224      	str	r4, [r4, #32]
 8012af6:	6263      	str	r3, [r4, #36]	; 0x24
 8012af8:	4b04      	ldr	r3, [pc, #16]	; (8012b0c <std+0x3c>)
 8012afa:	62a3      	str	r3, [r4, #40]	; 0x28
 8012afc:	4b04      	ldr	r3, [pc, #16]	; (8012b10 <std+0x40>)
 8012afe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012b00:	4b04      	ldr	r3, [pc, #16]	; (8012b14 <std+0x44>)
 8012b02:	6323      	str	r3, [r4, #48]	; 0x30
 8012b04:	bd10      	pop	{r4, pc}
 8012b06:	bf00      	nop
 8012b08:	08012e0d 	.word	0x08012e0d
 8012b0c:	08012e2f 	.word	0x08012e2f
 8012b10:	08012e67 	.word	0x08012e67
 8012b14:	08012e8b 	.word	0x08012e8b

08012b18 <_cleanup_r>:
 8012b18:	4901      	ldr	r1, [pc, #4]	; (8012b20 <_cleanup_r+0x8>)
 8012b1a:	f000 b8af 	b.w	8012c7c <_fwalk_reent>
 8012b1e:	bf00      	nop
 8012b20:	08012a59 	.word	0x08012a59

08012b24 <__sfmoreglue>:
 8012b24:	b570      	push	{r4, r5, r6, lr}
 8012b26:	2568      	movs	r5, #104	; 0x68
 8012b28:	1e4a      	subs	r2, r1, #1
 8012b2a:	4355      	muls	r5, r2
 8012b2c:	460e      	mov	r6, r1
 8012b2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012b32:	f7fd fbd7 	bl	80102e4 <_malloc_r>
 8012b36:	4604      	mov	r4, r0
 8012b38:	b140      	cbz	r0, 8012b4c <__sfmoreglue+0x28>
 8012b3a:	2100      	movs	r1, #0
 8012b3c:	e9c0 1600 	strd	r1, r6, [r0]
 8012b40:	300c      	adds	r0, #12
 8012b42:	60a0      	str	r0, [r4, #8]
 8012b44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012b48:	f7fd fb78 	bl	801023c <memset>
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	bd70      	pop	{r4, r5, r6, pc}

08012b50 <__sfp_lock_acquire>:
 8012b50:	4801      	ldr	r0, [pc, #4]	; (8012b58 <__sfp_lock_acquire+0x8>)
 8012b52:	f7ff bc98 	b.w	8012486 <__retarget_lock_acquire_recursive>
 8012b56:	bf00      	nop
 8012b58:	200020e4 	.word	0x200020e4

08012b5c <__sfp_lock_release>:
 8012b5c:	4801      	ldr	r0, [pc, #4]	; (8012b64 <__sfp_lock_release+0x8>)
 8012b5e:	f7ff bc93 	b.w	8012488 <__retarget_lock_release_recursive>
 8012b62:	bf00      	nop
 8012b64:	200020e4 	.word	0x200020e4

08012b68 <__sinit_lock_acquire>:
 8012b68:	4801      	ldr	r0, [pc, #4]	; (8012b70 <__sinit_lock_acquire+0x8>)
 8012b6a:	f7ff bc8c 	b.w	8012486 <__retarget_lock_acquire_recursive>
 8012b6e:	bf00      	nop
 8012b70:	200020df 	.word	0x200020df

08012b74 <__sinit_lock_release>:
 8012b74:	4801      	ldr	r0, [pc, #4]	; (8012b7c <__sinit_lock_release+0x8>)
 8012b76:	f7ff bc87 	b.w	8012488 <__retarget_lock_release_recursive>
 8012b7a:	bf00      	nop
 8012b7c:	200020df 	.word	0x200020df

08012b80 <__sinit>:
 8012b80:	b510      	push	{r4, lr}
 8012b82:	4604      	mov	r4, r0
 8012b84:	f7ff fff0 	bl	8012b68 <__sinit_lock_acquire>
 8012b88:	69a3      	ldr	r3, [r4, #24]
 8012b8a:	b11b      	cbz	r3, 8012b94 <__sinit+0x14>
 8012b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b90:	f7ff bff0 	b.w	8012b74 <__sinit_lock_release>
 8012b94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012b98:	6523      	str	r3, [r4, #80]	; 0x50
 8012b9a:	4b13      	ldr	r3, [pc, #76]	; (8012be8 <__sinit+0x68>)
 8012b9c:	4a13      	ldr	r2, [pc, #76]	; (8012bec <__sinit+0x6c>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	62a2      	str	r2, [r4, #40]	; 0x28
 8012ba2:	42a3      	cmp	r3, r4
 8012ba4:	bf08      	it	eq
 8012ba6:	2301      	moveq	r3, #1
 8012ba8:	4620      	mov	r0, r4
 8012baa:	bf08      	it	eq
 8012bac:	61a3      	streq	r3, [r4, #24]
 8012bae:	f000 f81f 	bl	8012bf0 <__sfp>
 8012bb2:	6060      	str	r0, [r4, #4]
 8012bb4:	4620      	mov	r0, r4
 8012bb6:	f000 f81b 	bl	8012bf0 <__sfp>
 8012bba:	60a0      	str	r0, [r4, #8]
 8012bbc:	4620      	mov	r0, r4
 8012bbe:	f000 f817 	bl	8012bf0 <__sfp>
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	2104      	movs	r1, #4
 8012bc6:	60e0      	str	r0, [r4, #12]
 8012bc8:	6860      	ldr	r0, [r4, #4]
 8012bca:	f7ff ff81 	bl	8012ad0 <std>
 8012bce:	2201      	movs	r2, #1
 8012bd0:	2109      	movs	r1, #9
 8012bd2:	68a0      	ldr	r0, [r4, #8]
 8012bd4:	f7ff ff7c 	bl	8012ad0 <std>
 8012bd8:	2202      	movs	r2, #2
 8012bda:	2112      	movs	r1, #18
 8012bdc:	68e0      	ldr	r0, [r4, #12]
 8012bde:	f7ff ff77 	bl	8012ad0 <std>
 8012be2:	2301      	movs	r3, #1
 8012be4:	61a3      	str	r3, [r4, #24]
 8012be6:	e7d1      	b.n	8012b8c <__sinit+0xc>
 8012be8:	08013e90 	.word	0x08013e90
 8012bec:	08012b19 	.word	0x08012b19

08012bf0 <__sfp>:
 8012bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bf2:	4607      	mov	r7, r0
 8012bf4:	f7ff ffac 	bl	8012b50 <__sfp_lock_acquire>
 8012bf8:	4b1e      	ldr	r3, [pc, #120]	; (8012c74 <__sfp+0x84>)
 8012bfa:	681e      	ldr	r6, [r3, #0]
 8012bfc:	69b3      	ldr	r3, [r6, #24]
 8012bfe:	b913      	cbnz	r3, 8012c06 <__sfp+0x16>
 8012c00:	4630      	mov	r0, r6
 8012c02:	f7ff ffbd 	bl	8012b80 <__sinit>
 8012c06:	3648      	adds	r6, #72	; 0x48
 8012c08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012c0c:	3b01      	subs	r3, #1
 8012c0e:	d503      	bpl.n	8012c18 <__sfp+0x28>
 8012c10:	6833      	ldr	r3, [r6, #0]
 8012c12:	b30b      	cbz	r3, 8012c58 <__sfp+0x68>
 8012c14:	6836      	ldr	r6, [r6, #0]
 8012c16:	e7f7      	b.n	8012c08 <__sfp+0x18>
 8012c18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012c1c:	b9d5      	cbnz	r5, 8012c54 <__sfp+0x64>
 8012c1e:	4b16      	ldr	r3, [pc, #88]	; (8012c78 <__sfp+0x88>)
 8012c20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012c24:	60e3      	str	r3, [r4, #12]
 8012c26:	6665      	str	r5, [r4, #100]	; 0x64
 8012c28:	f7ff fc2c 	bl	8012484 <__retarget_lock_init_recursive>
 8012c2c:	f7ff ff96 	bl	8012b5c <__sfp_lock_release>
 8012c30:	2208      	movs	r2, #8
 8012c32:	4629      	mov	r1, r5
 8012c34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012c38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012c3c:	6025      	str	r5, [r4, #0]
 8012c3e:	61a5      	str	r5, [r4, #24]
 8012c40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012c44:	f7fd fafa 	bl	801023c <memset>
 8012c48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012c4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012c50:	4620      	mov	r0, r4
 8012c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c54:	3468      	adds	r4, #104	; 0x68
 8012c56:	e7d9      	b.n	8012c0c <__sfp+0x1c>
 8012c58:	2104      	movs	r1, #4
 8012c5a:	4638      	mov	r0, r7
 8012c5c:	f7ff ff62 	bl	8012b24 <__sfmoreglue>
 8012c60:	4604      	mov	r4, r0
 8012c62:	6030      	str	r0, [r6, #0]
 8012c64:	2800      	cmp	r0, #0
 8012c66:	d1d5      	bne.n	8012c14 <__sfp+0x24>
 8012c68:	f7ff ff78 	bl	8012b5c <__sfp_lock_release>
 8012c6c:	230c      	movs	r3, #12
 8012c6e:	603b      	str	r3, [r7, #0]
 8012c70:	e7ee      	b.n	8012c50 <__sfp+0x60>
 8012c72:	bf00      	nop
 8012c74:	08013e90 	.word	0x08013e90
 8012c78:	ffff0001 	.word	0xffff0001

08012c7c <_fwalk_reent>:
 8012c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c80:	4606      	mov	r6, r0
 8012c82:	4688      	mov	r8, r1
 8012c84:	2700      	movs	r7, #0
 8012c86:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012c8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012c8e:	f1b9 0901 	subs.w	r9, r9, #1
 8012c92:	d505      	bpl.n	8012ca0 <_fwalk_reent+0x24>
 8012c94:	6824      	ldr	r4, [r4, #0]
 8012c96:	2c00      	cmp	r4, #0
 8012c98:	d1f7      	bne.n	8012c8a <_fwalk_reent+0xe>
 8012c9a:	4638      	mov	r0, r7
 8012c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ca0:	89ab      	ldrh	r3, [r5, #12]
 8012ca2:	2b01      	cmp	r3, #1
 8012ca4:	d907      	bls.n	8012cb6 <_fwalk_reent+0x3a>
 8012ca6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012caa:	3301      	adds	r3, #1
 8012cac:	d003      	beq.n	8012cb6 <_fwalk_reent+0x3a>
 8012cae:	4629      	mov	r1, r5
 8012cb0:	4630      	mov	r0, r6
 8012cb2:	47c0      	blx	r8
 8012cb4:	4307      	orrs	r7, r0
 8012cb6:	3568      	adds	r5, #104	; 0x68
 8012cb8:	e7e9      	b.n	8012c8e <_fwalk_reent+0x12>

08012cba <__swhatbuf_r>:
 8012cba:	b570      	push	{r4, r5, r6, lr}
 8012cbc:	460e      	mov	r6, r1
 8012cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cc2:	4614      	mov	r4, r2
 8012cc4:	2900      	cmp	r1, #0
 8012cc6:	461d      	mov	r5, r3
 8012cc8:	b096      	sub	sp, #88	; 0x58
 8012cca:	da07      	bge.n	8012cdc <__swhatbuf_r+0x22>
 8012ccc:	2300      	movs	r3, #0
 8012cce:	602b      	str	r3, [r5, #0]
 8012cd0:	89b3      	ldrh	r3, [r6, #12]
 8012cd2:	061a      	lsls	r2, r3, #24
 8012cd4:	d410      	bmi.n	8012cf8 <__swhatbuf_r+0x3e>
 8012cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012cda:	e00e      	b.n	8012cfa <__swhatbuf_r+0x40>
 8012cdc:	466a      	mov	r2, sp
 8012cde:	f000 f8fb 	bl	8012ed8 <_fstat_r>
 8012ce2:	2800      	cmp	r0, #0
 8012ce4:	dbf2      	blt.n	8012ccc <__swhatbuf_r+0x12>
 8012ce6:	9a01      	ldr	r2, [sp, #4]
 8012ce8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012cec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012cf0:	425a      	negs	r2, r3
 8012cf2:	415a      	adcs	r2, r3
 8012cf4:	602a      	str	r2, [r5, #0]
 8012cf6:	e7ee      	b.n	8012cd6 <__swhatbuf_r+0x1c>
 8012cf8:	2340      	movs	r3, #64	; 0x40
 8012cfa:	2000      	movs	r0, #0
 8012cfc:	6023      	str	r3, [r4, #0]
 8012cfe:	b016      	add	sp, #88	; 0x58
 8012d00:	bd70      	pop	{r4, r5, r6, pc}
	...

08012d04 <__smakebuf_r>:
 8012d04:	898b      	ldrh	r3, [r1, #12]
 8012d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d08:	079d      	lsls	r5, r3, #30
 8012d0a:	4606      	mov	r6, r0
 8012d0c:	460c      	mov	r4, r1
 8012d0e:	d507      	bpl.n	8012d20 <__smakebuf_r+0x1c>
 8012d10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012d14:	6023      	str	r3, [r4, #0]
 8012d16:	6123      	str	r3, [r4, #16]
 8012d18:	2301      	movs	r3, #1
 8012d1a:	6163      	str	r3, [r4, #20]
 8012d1c:	b002      	add	sp, #8
 8012d1e:	bd70      	pop	{r4, r5, r6, pc}
 8012d20:	466a      	mov	r2, sp
 8012d22:	ab01      	add	r3, sp, #4
 8012d24:	f7ff ffc9 	bl	8012cba <__swhatbuf_r>
 8012d28:	9900      	ldr	r1, [sp, #0]
 8012d2a:	4605      	mov	r5, r0
 8012d2c:	4630      	mov	r0, r6
 8012d2e:	f7fd fad9 	bl	80102e4 <_malloc_r>
 8012d32:	b948      	cbnz	r0, 8012d48 <__smakebuf_r+0x44>
 8012d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d38:	059a      	lsls	r2, r3, #22
 8012d3a:	d4ef      	bmi.n	8012d1c <__smakebuf_r+0x18>
 8012d3c:	f023 0303 	bic.w	r3, r3, #3
 8012d40:	f043 0302 	orr.w	r3, r3, #2
 8012d44:	81a3      	strh	r3, [r4, #12]
 8012d46:	e7e3      	b.n	8012d10 <__smakebuf_r+0xc>
 8012d48:	4b0d      	ldr	r3, [pc, #52]	; (8012d80 <__smakebuf_r+0x7c>)
 8012d4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8012d4c:	89a3      	ldrh	r3, [r4, #12]
 8012d4e:	6020      	str	r0, [r4, #0]
 8012d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d54:	81a3      	strh	r3, [r4, #12]
 8012d56:	9b00      	ldr	r3, [sp, #0]
 8012d58:	6120      	str	r0, [r4, #16]
 8012d5a:	6163      	str	r3, [r4, #20]
 8012d5c:	9b01      	ldr	r3, [sp, #4]
 8012d5e:	b15b      	cbz	r3, 8012d78 <__smakebuf_r+0x74>
 8012d60:	4630      	mov	r0, r6
 8012d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d66:	f000 f8c9 	bl	8012efc <_isatty_r>
 8012d6a:	b128      	cbz	r0, 8012d78 <__smakebuf_r+0x74>
 8012d6c:	89a3      	ldrh	r3, [r4, #12]
 8012d6e:	f023 0303 	bic.w	r3, r3, #3
 8012d72:	f043 0301 	orr.w	r3, r3, #1
 8012d76:	81a3      	strh	r3, [r4, #12]
 8012d78:	89a0      	ldrh	r0, [r4, #12]
 8012d7a:	4305      	orrs	r5, r0
 8012d7c:	81a5      	strh	r5, [r4, #12]
 8012d7e:	e7cd      	b.n	8012d1c <__smakebuf_r+0x18>
 8012d80:	08012b19 	.word	0x08012b19

08012d84 <_raise_r>:
 8012d84:	291f      	cmp	r1, #31
 8012d86:	b538      	push	{r3, r4, r5, lr}
 8012d88:	4604      	mov	r4, r0
 8012d8a:	460d      	mov	r5, r1
 8012d8c:	d904      	bls.n	8012d98 <_raise_r+0x14>
 8012d8e:	2316      	movs	r3, #22
 8012d90:	6003      	str	r3, [r0, #0]
 8012d92:	f04f 30ff 	mov.w	r0, #4294967295
 8012d96:	bd38      	pop	{r3, r4, r5, pc}
 8012d98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012d9a:	b112      	cbz	r2, 8012da2 <_raise_r+0x1e>
 8012d9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012da0:	b94b      	cbnz	r3, 8012db6 <_raise_r+0x32>
 8012da2:	4620      	mov	r0, r4
 8012da4:	f000 f830 	bl	8012e08 <_getpid_r>
 8012da8:	462a      	mov	r2, r5
 8012daa:	4601      	mov	r1, r0
 8012dac:	4620      	mov	r0, r4
 8012dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012db2:	f000 b817 	b.w	8012de4 <_kill_r>
 8012db6:	2b01      	cmp	r3, #1
 8012db8:	d00a      	beq.n	8012dd0 <_raise_r+0x4c>
 8012dba:	1c59      	adds	r1, r3, #1
 8012dbc:	d103      	bne.n	8012dc6 <_raise_r+0x42>
 8012dbe:	2316      	movs	r3, #22
 8012dc0:	6003      	str	r3, [r0, #0]
 8012dc2:	2001      	movs	r0, #1
 8012dc4:	e7e7      	b.n	8012d96 <_raise_r+0x12>
 8012dc6:	2400      	movs	r4, #0
 8012dc8:	4628      	mov	r0, r5
 8012dca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012dce:	4798      	blx	r3
 8012dd0:	2000      	movs	r0, #0
 8012dd2:	e7e0      	b.n	8012d96 <_raise_r+0x12>

08012dd4 <raise>:
 8012dd4:	4b02      	ldr	r3, [pc, #8]	; (8012de0 <raise+0xc>)
 8012dd6:	4601      	mov	r1, r0
 8012dd8:	6818      	ldr	r0, [r3, #0]
 8012dda:	f7ff bfd3 	b.w	8012d84 <_raise_r>
 8012dde:	bf00      	nop
 8012de0:	200001c4 	.word	0x200001c4

08012de4 <_kill_r>:
 8012de4:	b538      	push	{r3, r4, r5, lr}
 8012de6:	2300      	movs	r3, #0
 8012de8:	4d06      	ldr	r5, [pc, #24]	; (8012e04 <_kill_r+0x20>)
 8012dea:	4604      	mov	r4, r0
 8012dec:	4608      	mov	r0, r1
 8012dee:	4611      	mov	r1, r2
 8012df0:	602b      	str	r3, [r5, #0]
 8012df2:	f7f3 f95a 	bl	80060aa <_kill>
 8012df6:	1c43      	adds	r3, r0, #1
 8012df8:	d102      	bne.n	8012e00 <_kill_r+0x1c>
 8012dfa:	682b      	ldr	r3, [r5, #0]
 8012dfc:	b103      	cbz	r3, 8012e00 <_kill_r+0x1c>
 8012dfe:	6023      	str	r3, [r4, #0]
 8012e00:	bd38      	pop	{r3, r4, r5, pc}
 8012e02:	bf00      	nop
 8012e04:	200020d8 	.word	0x200020d8

08012e08 <_getpid_r>:
 8012e08:	f7f3 b948 	b.w	800609c <_getpid>

08012e0c <__sread>:
 8012e0c:	b510      	push	{r4, lr}
 8012e0e:	460c      	mov	r4, r1
 8012e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e14:	f000 f894 	bl	8012f40 <_read_r>
 8012e18:	2800      	cmp	r0, #0
 8012e1a:	bfab      	itete	ge
 8012e1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8012e20:	181b      	addge	r3, r3, r0
 8012e22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012e26:	bfac      	ite	ge
 8012e28:	6563      	strge	r3, [r4, #84]	; 0x54
 8012e2a:	81a3      	strhlt	r3, [r4, #12]
 8012e2c:	bd10      	pop	{r4, pc}

08012e2e <__swrite>:
 8012e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e32:	461f      	mov	r7, r3
 8012e34:	898b      	ldrh	r3, [r1, #12]
 8012e36:	4605      	mov	r5, r0
 8012e38:	05db      	lsls	r3, r3, #23
 8012e3a:	460c      	mov	r4, r1
 8012e3c:	4616      	mov	r6, r2
 8012e3e:	d505      	bpl.n	8012e4c <__swrite+0x1e>
 8012e40:	2302      	movs	r3, #2
 8012e42:	2200      	movs	r2, #0
 8012e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e48:	f000 f868 	bl	8012f1c <_lseek_r>
 8012e4c:	89a3      	ldrh	r3, [r4, #12]
 8012e4e:	4632      	mov	r2, r6
 8012e50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012e54:	81a3      	strh	r3, [r4, #12]
 8012e56:	4628      	mov	r0, r5
 8012e58:	463b      	mov	r3, r7
 8012e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e62:	f000 b817 	b.w	8012e94 <_write_r>

08012e66 <__sseek>:
 8012e66:	b510      	push	{r4, lr}
 8012e68:	460c      	mov	r4, r1
 8012e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e6e:	f000 f855 	bl	8012f1c <_lseek_r>
 8012e72:	1c43      	adds	r3, r0, #1
 8012e74:	89a3      	ldrh	r3, [r4, #12]
 8012e76:	bf15      	itete	ne
 8012e78:	6560      	strne	r0, [r4, #84]	; 0x54
 8012e7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012e7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012e82:	81a3      	strheq	r3, [r4, #12]
 8012e84:	bf18      	it	ne
 8012e86:	81a3      	strhne	r3, [r4, #12]
 8012e88:	bd10      	pop	{r4, pc}

08012e8a <__sclose>:
 8012e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e8e:	f000 b813 	b.w	8012eb8 <_close_r>
	...

08012e94 <_write_r>:
 8012e94:	b538      	push	{r3, r4, r5, lr}
 8012e96:	4604      	mov	r4, r0
 8012e98:	4608      	mov	r0, r1
 8012e9a:	4611      	mov	r1, r2
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	4d05      	ldr	r5, [pc, #20]	; (8012eb4 <_write_r+0x20>)
 8012ea0:	602a      	str	r2, [r5, #0]
 8012ea2:	461a      	mov	r2, r3
 8012ea4:	f7f3 f938 	bl	8006118 <_write>
 8012ea8:	1c43      	adds	r3, r0, #1
 8012eaa:	d102      	bne.n	8012eb2 <_write_r+0x1e>
 8012eac:	682b      	ldr	r3, [r5, #0]
 8012eae:	b103      	cbz	r3, 8012eb2 <_write_r+0x1e>
 8012eb0:	6023      	str	r3, [r4, #0]
 8012eb2:	bd38      	pop	{r3, r4, r5, pc}
 8012eb4:	200020d8 	.word	0x200020d8

08012eb8 <_close_r>:
 8012eb8:	b538      	push	{r3, r4, r5, lr}
 8012eba:	2300      	movs	r3, #0
 8012ebc:	4d05      	ldr	r5, [pc, #20]	; (8012ed4 <_close_r+0x1c>)
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	4608      	mov	r0, r1
 8012ec2:	602b      	str	r3, [r5, #0]
 8012ec4:	f7f3 f944 	bl	8006150 <_close>
 8012ec8:	1c43      	adds	r3, r0, #1
 8012eca:	d102      	bne.n	8012ed2 <_close_r+0x1a>
 8012ecc:	682b      	ldr	r3, [r5, #0]
 8012ece:	b103      	cbz	r3, 8012ed2 <_close_r+0x1a>
 8012ed0:	6023      	str	r3, [r4, #0]
 8012ed2:	bd38      	pop	{r3, r4, r5, pc}
 8012ed4:	200020d8 	.word	0x200020d8

08012ed8 <_fstat_r>:
 8012ed8:	b538      	push	{r3, r4, r5, lr}
 8012eda:	2300      	movs	r3, #0
 8012edc:	4d06      	ldr	r5, [pc, #24]	; (8012ef8 <_fstat_r+0x20>)
 8012ede:	4604      	mov	r4, r0
 8012ee0:	4608      	mov	r0, r1
 8012ee2:	4611      	mov	r1, r2
 8012ee4:	602b      	str	r3, [r5, #0]
 8012ee6:	f7f3 f93e 	bl	8006166 <_fstat>
 8012eea:	1c43      	adds	r3, r0, #1
 8012eec:	d102      	bne.n	8012ef4 <_fstat_r+0x1c>
 8012eee:	682b      	ldr	r3, [r5, #0]
 8012ef0:	b103      	cbz	r3, 8012ef4 <_fstat_r+0x1c>
 8012ef2:	6023      	str	r3, [r4, #0]
 8012ef4:	bd38      	pop	{r3, r4, r5, pc}
 8012ef6:	bf00      	nop
 8012ef8:	200020d8 	.word	0x200020d8

08012efc <_isatty_r>:
 8012efc:	b538      	push	{r3, r4, r5, lr}
 8012efe:	2300      	movs	r3, #0
 8012f00:	4d05      	ldr	r5, [pc, #20]	; (8012f18 <_isatty_r+0x1c>)
 8012f02:	4604      	mov	r4, r0
 8012f04:	4608      	mov	r0, r1
 8012f06:	602b      	str	r3, [r5, #0]
 8012f08:	f7f3 f93c 	bl	8006184 <_isatty>
 8012f0c:	1c43      	adds	r3, r0, #1
 8012f0e:	d102      	bne.n	8012f16 <_isatty_r+0x1a>
 8012f10:	682b      	ldr	r3, [r5, #0]
 8012f12:	b103      	cbz	r3, 8012f16 <_isatty_r+0x1a>
 8012f14:	6023      	str	r3, [r4, #0]
 8012f16:	bd38      	pop	{r3, r4, r5, pc}
 8012f18:	200020d8 	.word	0x200020d8

08012f1c <_lseek_r>:
 8012f1c:	b538      	push	{r3, r4, r5, lr}
 8012f1e:	4604      	mov	r4, r0
 8012f20:	4608      	mov	r0, r1
 8012f22:	4611      	mov	r1, r2
 8012f24:	2200      	movs	r2, #0
 8012f26:	4d05      	ldr	r5, [pc, #20]	; (8012f3c <_lseek_r+0x20>)
 8012f28:	602a      	str	r2, [r5, #0]
 8012f2a:	461a      	mov	r2, r3
 8012f2c:	f7f3 f934 	bl	8006198 <_lseek>
 8012f30:	1c43      	adds	r3, r0, #1
 8012f32:	d102      	bne.n	8012f3a <_lseek_r+0x1e>
 8012f34:	682b      	ldr	r3, [r5, #0]
 8012f36:	b103      	cbz	r3, 8012f3a <_lseek_r+0x1e>
 8012f38:	6023      	str	r3, [r4, #0]
 8012f3a:	bd38      	pop	{r3, r4, r5, pc}
 8012f3c:	200020d8 	.word	0x200020d8

08012f40 <_read_r>:
 8012f40:	b538      	push	{r3, r4, r5, lr}
 8012f42:	4604      	mov	r4, r0
 8012f44:	4608      	mov	r0, r1
 8012f46:	4611      	mov	r1, r2
 8012f48:	2200      	movs	r2, #0
 8012f4a:	4d05      	ldr	r5, [pc, #20]	; (8012f60 <_read_r+0x20>)
 8012f4c:	602a      	str	r2, [r5, #0]
 8012f4e:	461a      	mov	r2, r3
 8012f50:	f7f3 f8c5 	bl	80060de <_read>
 8012f54:	1c43      	adds	r3, r0, #1
 8012f56:	d102      	bne.n	8012f5e <_read_r+0x1e>
 8012f58:	682b      	ldr	r3, [r5, #0]
 8012f5a:	b103      	cbz	r3, 8012f5e <_read_r+0x1e>
 8012f5c:	6023      	str	r3, [r4, #0]
 8012f5e:	bd38      	pop	{r3, r4, r5, pc}
 8012f60:	200020d8 	.word	0x200020d8

08012f64 <_init>:
 8012f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f66:	bf00      	nop
 8012f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f6a:	bc08      	pop	{r3}
 8012f6c:	469e      	mov	lr, r3
 8012f6e:	4770      	bx	lr

08012f70 <_fini>:
 8012f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f72:	bf00      	nop
 8012f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f76:	bc08      	pop	{r3}
 8012f78:	469e      	mov	lr, r3
 8012f7a:	4770      	bx	lr
